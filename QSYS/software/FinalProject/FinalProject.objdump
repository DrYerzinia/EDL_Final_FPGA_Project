
FinalProject.elf:     file format elf32-littlenios2
FinalProject.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0000d624 memsz 0x0000d624 flags r-x
    LOAD off    0x0000e644 vaddr 0x0400d644 paddr 0x0400f1a0 align 2**12
         filesz 0x00001b5c memsz 0x00001b5c flags rw-
    LOAD off    0x00010cfc vaddr 0x04010cfc paddr 0x04010cfc align 2**12
         filesz 0x00000000 memsz 0x0004b168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000cdbc  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000658  0400cfec  0400cfec  0000dfec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b5c  0400d644  0400f1a0  0000e644  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0004b168  04010cfc  04010cfc  00010cfc  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0405be64  0405be64  000101a0  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000101a0  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e70  00000000  00000000  000101c8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0002149a  00000000  00000000  00011038  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008ac0  00000000  00000000  000324d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a450  00000000  00000000  0003af92  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002200  00000000  00000000  000453e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004007  00000000  00000000  000475e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000cd26  00000000  00000000  0004b5eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00058314  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000011b0  00000000  00000000  00058358  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0005ca25  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0005ca28  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0005ca2b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0005ca2c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0005ca2d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0005ca36  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0005ca3f  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0005ca48  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  0005ca51  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     000474b8  00000000  00000000  0005ca8a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
0400cfec l    d  .rodata	00000000 .rodata
0400d644 l    d  .rwdata	00000000 .rwdata
04010cfc l    d  .bss	00000000 .bss
0405be64 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FinalProject_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 hello_world.c
0400cfec l     O .rodata	00000040 tjei_default_qt_luma_from_spec
0400d02c l     O .rodata	00000040 tjei_default_qt_chroma_from_paper
0400d06c l     O .rodata	00000010 tjei_default_ht_luma_dc_len
0400d07c l     O .rodata	0000000c tjei_default_ht_luma_dc
0400d088 l     O .rodata	00000010 tjei_default_ht_chroma_dc_len
0400d098 l     O .rodata	0000000c tjei_default_ht_chroma_dc
0400d0a4 l     O .rodata	00000010 tjei_default_ht_luma_ac_len
0400d0b4 l     O .rodata	000000a2 tjei_default_ht_luma_ac
0400d156 l     O .rodata	00000010 tjei_default_ht_chroma_ac_len
0400d166 l     O .rodata	000000a2 tjei_default_ht_chroma_ac
0400d208 l     O .rodata	00000040 tjei_zig_zag
0400026c l     F .text	00000050 tjei_be_word
0400f14c l     O .rwdata	00000005 tjeik_jfif_id
0400d248 l     O .rodata	0000001d tjeik_com_str
040002bc l     F .text	0000014c tjei_write
0400d3a0 l     O .rodata	0000000b __func__.4050
04000408 l     F .text	000000dc tjei_write_DQT
0400d3ac l     O .rodata	0000000f __func__.4058
040004e4 l     F .text	00000190 tjei_write_DHT
0400d3bc l     O .rodata	0000000f __func__.4076
04000674 l     F .text	000000b0 tjei_huff_get_code_lengths
04000724 l     F .text	00000130 tjei_huff_get_codes
0400d3cc l     O .rodata	00000014 __func__.4101
04000854 l     F .text	000000cc tjei_huff_get_extended
04000920 l     F .text	000000c0 tjei_calculate_variable_length_int
040009e0 l     F .text	0000011c tjei_write_bits
04000afc l     F .text	0000083c tjei_fdct
04001338 l     F .text	000004b8 tjei_encode_and_write_MCU
0400d3e0 l     O .rodata	0000001a __func__.4202
040017f0 l     F .text	00000384 tjei_huff_expand
0400d3fc l     O .rodata	00000011 __func__.4218
04001b74 l     F .text	00000e34 tjei_encode_main
0400d410 l     O .rodata	00000020 aan_scales.4247
0400d430 l     O .rodata	00000011 __func__.4262
0400d444 l     O .rodata	00000015 __func__.4335
04002bfc l     F .text	00000050 jtag_kiss_send
04002c4c l     F .text	0000006c camera_dma_enable
04002cb8 l     F .text	000000a4 swap_buffer
04002d5c l     F .text	00000104 take_raw_picture_and_send_to_jtag
04002e60 l     F .text	00000048 jpeg_jtag_send
04002ea8 l     F .text	0000018c take_jpeg_picture_and_send_to_jtag
0400f15c l     O .rwdata	00000001 jpeg_transfer.4393
00000000 l    df *ABS*	00000000 kiss.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 impure.c
0400d644 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 vfprintf.c
04005110 l     F .text	000000fc __sprint_r.part.0
0400d5cf l     O .rodata	00000010 zeroes.4349
0400674c l     F .text	000000bc __sbprintf
0400d5df l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04006c04 l     F .text	00000008 __fp_unlock
04006c18 l     F .text	0000019c __sinit.part.1
04006db4 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0400da88 l     O .rwdata	00000020 lc_ctype_charset
0400da68 l     O .rwdata	00000020 lc_message_charset
0400daa8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0400a3b4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400a4c8 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400a528 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0400a63c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0400a724 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400a890 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400a97c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400ab58 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0400f190 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0400adfc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400af38 l     F .text	00000034 alt_dev_reg
0400e090 l     O .rwdata	00001060 jtag_uart
0400f0f0 l     O .rwdata	0000005c video_dma_controller
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400b4a0 l     F .text	0000020c altera_avalon_jtag_uart_irq
0400b6ac l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400bf88 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400c3e8 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0400c548 l     F .text	0000003c alt_get_errno
0400c584 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04010d38 g     O .bss	00000004 alt_instruction_exception_handler
040096e0 g     F .text	00000054 _isatty_r
0400aa94 g     F .text	0000007c alt_main
0405bd64 g     O .bss	00000100 alt_irq
04009734 g     F .text	00000060 _lseek_r
0400f1a0 g       *ABS*	00000000 __flash_rwdata_start
0405be64 g       *ABS*	00000000 __alt_heap_start
040050b0 g     F .text	0000005c _kill_r
040092e4 g     F .text	0000009c _wcrtomb_r
04004e78 g     F .text	00000084 _signal_r
04008fb4 g     F .text	0000005c __sseek
04006f64 g     F .text	00000010 __sinit
0400918c g     F .text	00000140 __swbuf_r
04007c40 g     F .text	0000007c _setlocale_r
04006dbc g     F .text	00000078 __sfmoreglue
0400ab34 g     F .text	00000024 __malloc_unlock
04003a8c g     F .text	00000440 .hidden __divsf3
040087c8 g     F .text	0000015c memmove
04006f4c g     F .text	00000018 _cleanup
0400489c g     F .text	00000070 .hidden __fixsfsi
04010d64 g     O .bss	0004b000 jpeg_image_buffer
0400c970 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
04009684 g     F .text	0000005c _fstat_r
04010d04 g     O .bss	00000004 errno
04008f30 g     F .text	00000008 __seofread
04010d24 g     O .bss	00000004 alt_argv
0401714c g       *ABS*	00000000 _gp
0400adcc g     F .text	00000030 usleep
040043b8 g     F .text	000004e4 .hidden __subsf3
0400a61c g     F .text	00000020 getpid
0400df10 g     O .rwdata	00000180 alt_fd_list
0400c994 g     F .text	00000090 alt_find_dev
04004b6c g     F .text	00000148 memcpy
04006c0c g     F .text	0000000c _cleanup_r
0400c4cc g     F .text	0000007c alt_io_redirect
0400cfec g       *ABS*	00000000 __DTOR_END__
0400cbf0 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04006730 g     F .text	0000001c __vfiprintf_internal
0400b8a4 g     F .text	0000021c altera_avalon_jtag_uart_read
040034e0 g     F .text	00000064 .hidden __udivsi3
0400a678 g     F .text	000000ac isatty
04004efc g     F .text	000000bc _raise_r
04004a94 g     F .text	00000068 __assert_func
04007cbc g     F .text	0000000c __locale_charset
04010d1c g     O .bss	00000004 __malloc_top_pad
0400510c g     F .text	00000004 _getpid_r
04010cfc g     O .bss	00000008 jtag_kiss
0400f168 g     O .rwdata	00000004 __mb_cur_max
04007cec g     F .text	0000000c _localeconv_r
040075f0 g     F .text	000004c8 __sfvwrite_r
04004fb8 g     F .text	000000a8 __sigtramp_r
04008e88 g     F .text	00000054 _sbrk_r
04009794 g     F .text	00000060 _read_r
0400f188 g     O .rwdata	00000004 alt_max_fd
04009580 g     F .text	000000f0 _fclose_r
0400f158 g     O .rwdata	00000004 image_buffer_b
04006bd4 g     F .text	00000030 fflush
04010d18 g     O .bss	00000004 __malloc_max_sbrked_mem
04009df0 g     F .text	000005c4 .hidden __umoddi3
0400a9b8 g     F .text	000000dc lseek
0400f160 g     O .rwdata	00000004 _global_impure_ptr
04008924 g     F .text	00000564 _realloc_r
0405be64 g       *ABS*	00000000 __bss_end
0400c2f8 g     F .text	000000f0 alt_iic_isr_register
0400c868 g     F .text	00000108 alt_tick
040097f4 g     F .text	000005fc .hidden __udivdi3
04007118 g     F .text	00000024 _fputwc_r
04004df4 g     F .text	00000018 abort
04006f84 g     F .text	00000018 __fp_lock_all
0400c2ac g     F .text	0000004c alt_ic_irq_enabled
0400c7cc g     F .text	0000009c alt_alarm_stop
04010d2c g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d4 alt_irq_handler
0400dee8 g     O .rwdata	00000028 alt_dev_null
0400bf68 g     F .text	00000020 alt_dcache_flush_all
0400f1a0 g       *ABS*	00000000 __ram_rwdata_end
0400f180 g     O .rwdata	00000008 alt_dev_list
0400ae38 g     F .text	00000100 write
04003ecc g     F .text	000000bc .hidden __gtsf2
0400d644 g       *ABS*	00000000 __ram_rodata_end
0400a564 g     F .text	000000b8 fstat
0400a760 g     F .text	00000130 kill
04010d10 g     O .bss	00000004 __nlocale_changed
04005224 g     F .text	0000150c ___vfiprintf_internal_r
04003544 g     F .text	00000058 .hidden __umodsi3
0405be64 g       *ABS*	00000000 end
0400b3e0 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0400cfec g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04004a30 g     F .text	00000064 .hidden __clzsi2
0400bac0 g     F .text	00000224 altera_avalon_jtag_uart_write
04006f74 g     F .text	00000004 __sfp_lock_acquire
040086e4 g     F .text	000000e4 memchr
040072e0 g     F .text	00000310 _free_r
04007cc8 g     F .text	00000010 __locale_mb_cur_max
0400ce6c g     F .text	00000180 __call_exitprocs
04010d0c g     O .bss	00000004 __mlocale_changed
0400f16c g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
04010d30 g     O .bss	00000004 _alt_tick_rate
04010d34 g     O .bss	00000004 _alt_nticks
04005074 g     F .text	00000018 signal
0400ab94 g     F .text	00000104 read
0400afa4 g     F .text	000002d8 alt_sys_init
0400490c g     F .text	00000124 .hidden __floatsisf
0400cd54 g     F .text	00000118 __register_exitproc
0400b74c g     F .text	00000068 altera_avalon_jtag_uart_close
0400359c g     F .text	00000028 .hidden __mulsi3
0400d644 g       *ABS*	00000000 __ram_rwdata_start
0400cfec g       *ABS*	00000000 __ram_rodata_start
04010d3c g     O .bss	00000028 __malloc_current_mallinfo
0400b27c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0400cb2c g     F .text	000000c4 alt_get_fd
0400be10 g     F .text	00000158 alt_busy_sleep
0400952c g     F .text	00000054 _close_r
040029a8 g     F .text	00000254 tje_encode_with_func
0400ccd8 g     F .text	0000007c memcmp
0400b33c g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0405be64 g       *ABS*	00000000 __alt_stack_base
0400b38c g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04006808 g     F .text	00000154 __swsetup_r
04006e34 g     F .text	00000118 __sfp
0400dae0 g     O .rwdata	00000408 __malloc_av_
04006f80 g     F .text	00000004 __sinit_lock_release
04008edc g     F .text	00000054 __sread
0400ca24 g     F .text	00000108 alt_find_file
0400bfc4 g     F .text	000000a4 alt_dev_llist_insert
0400ab10 g     F .text	00000024 __malloc_lock
0400ad1c g     F .text	000000b0 sbrk
04006b78 g     F .text	0000005c _fflush_r
04010cfc g       *ABS*	00000000 __bss_start
04004cb4 g     F .text	00000128 memset
04003034 g     F .text	000000a8 main
04010d28 g     O .bss	00000004 alt_envp
04010d14 g     O .bss	00000004 __malloc_max_total_mem
0400b2dc g     F .text	00000060 altera_avalon_jtag_uart_write_fd
040092cc g     F .text	00000018 __swbuf
04009010 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
04009670 g     F .text	00000014 fclose
04003130 g     F .text	00000044 kiss_start
04007ed8 g     F .text	0000080c _malloc_r
04009440 g     F .text	00000030 __ascii_wctomb
0400f18c g     O .rwdata	00000004 alt_errno
04004b10 g     F .text	00000020 _fiprintf_r
0400508c g     F .text	00000010 _init_signal
04007ab8 g     F .text	000000c4 _fwalk
040033e8 g     F .text	00000084 .hidden __divsi3
040071bc g     F .text	00000124 _malloc_trim_r
0400cfec g       *ABS*	00000000 __CTOR_END__
04003f88 g     F .text	00000430 .hidden __mulsf3
04009018 g     F .text	000000dc strcmp
0400cfec g       *ABS*	00000000 __flash_rodata_start
0400cfec g       *ABS*	00000000 __DTOR_LIST__
0400af6c g     F .text	00000038 alt_irq_init
0400ac98 g     F .text	00000084 alt_release_fd
0400d459 g     O .rodata	00000100 .hidden __clz_tab
04010d08 g     O .bss	00000004 _PathLocale
0400cc8c g     F .text	00000014 atexit
04003ecc g     F .text	000000bc .hidden __gesf2
040094cc g     F .text	00000060 _write_r
04007cf8 g     F .text	00000018 setlocale
0400f164 g     O .rwdata	00000004 _impure_ptr
04010d20 g     O .bss	00000004 alt_argc
0400695c g     F .text	0000021c __sflush_r
0400c0c8 g     F .text	00000060 _do_dtors
04007ce4 g     F .text	00000008 __locale_cjk_lang
04000020 g       .exceptions	00000000 alt_irq_entry
04006f9c g     F .text	00000018 __fp_unlock_all
040032a0 g     F .text	00000044 kiss_end
0400f178 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04007d10 g     F .text	0000000c localeconv
0400c148 g     F .text	00000050 alt_ic_isr_register
0400f1a0 g       *ABS*	00000000 _edata
0405be64 g       *ABS*	00000000 _end
04006fb4 g     F .text	00000164 __fputwc
04000230 g       *ABS*	00000000 __ram_exceptions_end
0400b7b4 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0400c220 g     F .text	0000008c alt_ic_irq_disable
04008f38 g     F .text	0000007c __swrite
0400f170 g     O .rwdata	00000004 __malloc_trim_threshold
04007cd8 g     F .text	0000000c __locale_msgcharset
0400cca0 g     F .text	00000038 exit
04004b30 g     F .text	0000003c fiprintf
04004ddc g     F .text	00000018 _vfiprintf_r
04007b7c g     F .text	000000c4 _fwalk_reent
0400346c g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04006f78 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
0400a4f4 g     F .text	00000034 _exit
0400bce4 g     F .text	0000012c alt_alarm_start
04007d1c g     F .text	000001bc __smakebuf_r
040090f4 g     F .text	00000098 strlen
04004e0c g     F .text	0000006c _init_signal_r
0400c670 g     F .text	0000015c open
0400f154 g     O .rwdata	00000004 image_buffer_a
04004afc g     F .text	00000014 __assert
0400f174 g     O .rwdata	00000004 __wctomb
0400520c g     F .text	00000018 __sprint_r
0400c128 g     F .text	00000020 alt_icache_flush_all
040032e4 g     F .text	00000104 floorf
0400f194 g     O .rwdata	00000004 alt_priority_mask
0400c198 g     F .text	00000088 alt_ic_irq_enable
04009470 g     F .text	0000005c _wctomb_r
0400f198 g     O .rwdata	00000008 alt_alarm_list
0400c068 g     F .text	00000060 _do_ctors
0400509c g     F .text	00000014 __sigtramp
04009380 g     F .text	000000c0 wcrtomb
0400a3f0 g     F .text	000000d8 close
040035c4 g     F .text	000004c8 .hidden __addsf3
040030dc g     F .text	00000054 kiss_send_packet
04003174 g     F .text	0000012c kiss_send_data
0400a8f8 g     F .text	00000084 alt_load
0400713c g     F .text	00000080 fputwc
04005060 g     F .text	00000014 raise
04006f7c g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008101b4 	movhi	r2,1030
 4000140:	10af5904 	addi	r2,r2,-17052
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008101b4 	movhi	r2,1030
 4000158:	10af5904 	addi	r2,r2,-17052
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a6fb17 	ldw	r2,-25620(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a6fb17 	ldw	r2,-25620(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 400023c:	d69c5314 	ori	gp,gp,29004
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000244:	10833f14 	ori	r2,r2,3324

    movhi r3, %hi(__bss_end)
 4000248:	00c10174 	movhi	r3,1029
    ori r3, r3, %lo(__bss_end)
 400024c:	18ef9914 	ori	r3,r3,48740

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	400a8f80 	call	400a8f8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	400aa940 	call	400aa94 <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_data_end+0xfc000268>

0400026c <tjei_be_word>:
		35, 36, 48, 49, 57, 58, 62, 63,
	};

	// Memory order as big endian. 0xhilo -> 0xlohi which looks as 0xhilo in memory.
	static uint16_t tjei_be_word(const uint16_t le_word)
	{
 400026c:	defffd04 	addi	sp,sp,-12
 4000270:	df000215 	stw	fp,8(sp)
 4000274:	df000204 	addi	fp,sp,8
 4000278:	2005883a 	mov	r2,r4
 400027c:	e0bfff0d 	sth	r2,-4(fp)
		uint16_t lo = (le_word & 0x00ff);
 4000280:	e0bfff0b 	ldhu	r2,-4(fp)
 4000284:	10803fcc 	andi	r2,r2,255
 4000288:	e0bffe0d 	sth	r2,-8(fp)
		uint16_t hi = ((le_word & 0xff00) >> 8);
 400028c:	e0bfff0b 	ldhu	r2,-4(fp)
 4000290:	1004d23a 	srli	r2,r2,8
 4000294:	e0bffe8d 	sth	r2,-6(fp)
		return (uint16_t)((lo << 8) | hi);
 4000298:	e0bffe0b 	ldhu	r2,-8(fp)
 400029c:	1004923a 	slli	r2,r2,8
 40002a0:	1007883a 	mov	r3,r2
 40002a4:	e0bffe8b 	ldhu	r2,-6(fp)
 40002a8:	1884b03a 	or	r2,r3,r2
	}
 40002ac:	e037883a 	mov	sp,fp
 40002b0:	df000017 	ldw	fp,0(sp)
 40002b4:	dec00104 	addi	sp,sp,4
 40002b8:	f800283a 	ret

040002bc <tjei_write>:
	} TJEScanHeader;
#pragma pack(pop)


	static void tjei_write(TJEState* state, const void* data, size_t num_bytes, size_t num_elements)
	{
 40002bc:	defff804 	addi	sp,sp,-32
 40002c0:	dfc00715 	stw	ra,28(sp)
 40002c4:	df000615 	stw	fp,24(sp)
 40002c8:	df000604 	addi	fp,sp,24
 40002cc:	e13ffc15 	stw	r4,-16(fp)
 40002d0:	e17ffd15 	stw	r5,-12(fp)
 40002d4:	e1bffe15 	stw	r6,-8(fp)
 40002d8:	e1ffff15 	stw	r7,-4(fp)
		size_t to_write = num_bytes * num_elements;
 40002dc:	e17fff17 	ldw	r5,-4(fp)
 40002e0:	e13ffe17 	ldw	r4,-8(fp)
 40002e4:	400359c0 	call	400359c <__mulsi3>
 40002e8:	e0bffa15 	stw	r2,-24(fp)

		// Cap to the buffer available size and copy memory.
		size_t capped_count = tjei_min(to_write, TJEI_BUFFER_SIZE - 1 - state->output_buffer_count);
 40002ec:	e0bffc17 	ldw	r2,-16(fp)
 40002f0:	10832b17 	ldw	r2,3244(r2)
 40002f4:	00c0ffc4 	movi	r3,1023
 40002f8:	1885c83a 	sub	r2,r3,r2
 40002fc:	e0fffa17 	ldw	r3,-24(fp)
 4000300:	1880012e 	bgeu	r3,r2,4000308 <tjei_write+0x4c>
 4000304:	1805883a 	mov	r2,r3
 4000308:	e0bffb15 	stw	r2,-20(fp)

		memcpy(state->output_buffer + state->output_buffer_count, data, capped_count);
 400030c:	e0bffc17 	ldw	r2,-16(fp)
 4000310:	10c32c04 	addi	r3,r2,3248
 4000314:	e0bffc17 	ldw	r2,-16(fp)
 4000318:	10832b17 	ldw	r2,3244(r2)
 400031c:	1885883a 	add	r2,r3,r2
 4000320:	e1bffb17 	ldw	r6,-20(fp)
 4000324:	e17ffd17 	ldw	r5,-12(fp)
 4000328:	1009883a 	mov	r4,r2
 400032c:	4004b6c0 	call	4004b6c <memcpy>
		state->output_buffer_count += capped_count;
 4000330:	e0bffc17 	ldw	r2,-16(fp)
 4000334:	10c32b17 	ldw	r3,3244(r2)
 4000338:	e0bffb17 	ldw	r2,-20(fp)
 400033c:	1887883a 	add	r3,r3,r2
 4000340:	e0bffc17 	ldw	r2,-16(fp)
 4000344:	10c32b15 	stw	r3,3244(r2)

		assert(state->output_buffer_count <= TJEI_BUFFER_SIZE - 1);
 4000348:	e0bffc17 	ldw	r2,-16(fp)
 400034c:	10832b17 	ldw	r2,3244(r2)
 4000350:	10810030 	cmpltui	r2,r2,1024
 4000354:	1000081e 	bne	r2,zero,4000378 <tjei_write+0xbc>
 4000358:	01c10074 	movhi	r7,1025
 400035c:	39f49a04 	addi	r7,r7,-11672
 4000360:	01810074 	movhi	r6,1025
 4000364:	31b4e804 	addi	r6,r6,-11360
 4000368:	01406644 	movi	r5,409
 400036c:	01010074 	movhi	r4,1025
 4000370:	2134a704 	addi	r4,r4,-11620
 4000374:	4004a940 	call	4004a94 <__assert_func>

		// Flush the buffer.
		if (state->output_buffer_count == TJEI_BUFFER_SIZE - 1) {
 4000378:	e0bffc17 	ldw	r2,-16(fp)
 400037c:	10832b17 	ldw	r2,3244(r2)
 4000380:	1080ffd8 	cmpnei	r2,r2,1023
 4000384:	10000c1e 	bne	r2,zero,40003b8 <tjei_write+0xfc>
			state->write_context.func(state->write_context.context, state->output_buffer, (int)state->output_buffer_count);
 4000388:	e0bffc17 	ldw	r2,-16(fp)
 400038c:	10832a17 	ldw	r2,3240(r2)
 4000390:	e0fffc17 	ldw	r3,-16(fp)
 4000394:	19032917 	ldw	r4,3236(r3)
 4000398:	e0fffc17 	ldw	r3,-16(fp)
 400039c:	19432c04 	addi	r5,r3,3248
 40003a0:	e0fffc17 	ldw	r3,-16(fp)
 40003a4:	18c32b17 	ldw	r3,3244(r3)
 40003a8:	180d883a 	mov	r6,r3
 40003ac:	103ee83a 	callr	r2
			state->output_buffer_count = 0;
 40003b0:	e0bffc17 	ldw	r2,-16(fp)
 40003b4:	10032b15 	stw	zero,3244(r2)
		}

		// Recursively calling ourselves with the rest of the buffer.
		if (capped_count < to_write) {
 40003b8:	e0fffb17 	ldw	r3,-20(fp)
 40003bc:	e0bffa17 	ldw	r2,-24(fp)
 40003c0:	18800b2e 	bgeu	r3,r2,40003f0 <tjei_write+0x134>
			tjei_write(state, (uint8_t*)data + capped_count, to_write - capped_count, 1);
 40003c4:	e0fffd17 	ldw	r3,-12(fp)
 40003c8:	e0bffb17 	ldw	r2,-20(fp)
 40003cc:	1889883a 	add	r4,r3,r2
 40003d0:	e0fffa17 	ldw	r3,-24(fp)
 40003d4:	e0bffb17 	ldw	r2,-20(fp)
 40003d8:	1885c83a 	sub	r2,r3,r2
 40003dc:	01c00044 	movi	r7,1
 40003e0:	100d883a 	mov	r6,r2
 40003e4:	200b883a 	mov	r5,r4
 40003e8:	e13ffc17 	ldw	r4,-16(fp)
 40003ec:	40002bc0 	call	40002bc <tjei_write>
		}
	}
 40003f0:	0001883a 	nop
 40003f4:	e037883a 	mov	sp,fp
 40003f8:	dfc00117 	ldw	ra,4(sp)
 40003fc:	df000017 	ldw	fp,0(sp)
 4000400:	dec00204 	addi	sp,sp,8
 4000404:	f800283a 	ret

04000408 <tjei_write_DQT>:

	static void tjei_write_DQT(TJEState* state, const uint8_t* matrix, uint8_t id)
	{
 4000408:	defff904 	addi	sp,sp,-28
 400040c:	dfc00615 	stw	ra,24(sp)
 4000410:	df000515 	stw	fp,20(sp)
 4000414:	df000504 	addi	fp,sp,20
 4000418:	e13ffd15 	stw	r4,-12(fp)
 400041c:	e17ffe15 	stw	r5,-8(fp)
 4000420:	3005883a 	mov	r2,r6
 4000424:	e0bfff05 	stb	r2,-4(fp)
		uint16_t DQT = tjei_be_word(0xffdb);
 4000428:	013ff6d4 	movui	r4,65499
 400042c:	400026c0 	call	400026c <tjei_be_word>
 4000430:	e0bffb0d 	sth	r2,-20(fp)
		tjei_write(state, &DQT, sizeof(uint16_t), 1);
 4000434:	01c00044 	movi	r7,1
 4000438:	01800084 	movi	r6,2
 400043c:	e17ffb04 	addi	r5,fp,-20
 4000440:	e13ffd17 	ldw	r4,-12(fp)
 4000444:	40002bc0 	call	40002bc <tjei_write>
		uint16_t len = tjei_be_word(0x0043); // 2(len) + 1(id) + 64(matrix) = 67 = 0x43
 4000448:	010010c4 	movi	r4,67
 400044c:	400026c0 	call	400026c <tjei_be_word>
 4000450:	e0bffb8d 	sth	r2,-18(fp)
		tjei_write(state, &len, sizeof(uint16_t), 1);
 4000454:	e0bffb84 	addi	r2,fp,-18
 4000458:	01c00044 	movi	r7,1
 400045c:	01800084 	movi	r6,2
 4000460:	100b883a 	mov	r5,r2
 4000464:	e13ffd17 	ldw	r4,-12(fp)
 4000468:	40002bc0 	call	40002bc <tjei_write>
		assert(id < 4);
 400046c:	e0bfff03 	ldbu	r2,-4(fp)
 4000470:	10800130 	cmpltui	r2,r2,4
 4000474:	1000081e 	bne	r2,zero,4000498 <tjei_write_DQT+0x90>
 4000478:	01c10074 	movhi	r7,1025
 400047c:	39f4aa04 	addi	r7,r7,-11608
 4000480:	01810074 	movhi	r6,1025
 4000484:	31b4eb04 	addi	r6,r6,-11348
 4000488:	01406b44 	movi	r5,429
 400048c:	01010074 	movhi	r4,1025
 4000490:	2134a704 	addi	r4,r4,-11620
 4000494:	4004a940 	call	4004a94 <__assert_func>
		uint8_t precision_and_id = id;  // 0x0000 8 bits | 0x00id
 4000498:	e0bfff03 	ldbu	r2,-4(fp)
 400049c:	e0bffc05 	stb	r2,-16(fp)
		tjei_write(state, &precision_and_id, sizeof(uint8_t), 1);
 40004a0:	e0bffc04 	addi	r2,fp,-16
 40004a4:	01c00044 	movi	r7,1
 40004a8:	01800044 	movi	r6,1
 40004ac:	100b883a 	mov	r5,r2
 40004b0:	e13ffd17 	ldw	r4,-12(fp)
 40004b4:	40002bc0 	call	40002bc <tjei_write>
		// Write matrix
		tjei_write(state, matrix, 64 * sizeof(uint8_t), 1);
 40004b8:	01c00044 	movi	r7,1
 40004bc:	01801004 	movi	r6,64
 40004c0:	e17ffe17 	ldw	r5,-8(fp)
 40004c4:	e13ffd17 	ldw	r4,-12(fp)
 40004c8:	40002bc0 	call	40002bc <tjei_write>
	}
 40004cc:	0001883a 	nop
 40004d0:	e037883a 	mov	sp,fp
 40004d4:	dfc00117 	ldw	ra,4(sp)
 40004d8:	df000017 	ldw	fp,0(sp)
 40004dc:	dec00204 	addi	sp,sp,8
 40004e0:	f800283a 	ret

040004e4 <tjei_write_DHT>:
	static void tjei_write_DHT(TJEState* state,
		uint8_t const* matrix_len,
		uint8_t const* matrix_val,
		TJEHuffmanTableClass ht_class,
		uint8_t id)
	{
 40004e4:	defff504 	addi	sp,sp,-44
 40004e8:	dfc00a15 	stw	ra,40(sp)
 40004ec:	df000915 	stw	fp,36(sp)
 40004f0:	df000904 	addi	fp,sp,36
 40004f4:	e13ffb15 	stw	r4,-20(fp)
 40004f8:	e17ffc15 	stw	r5,-16(fp)
 40004fc:	e1bffd15 	stw	r6,-12(fp)
 4000500:	e1fffe15 	stw	r7,-8(fp)
 4000504:	e0800217 	ldw	r2,8(fp)
 4000508:	e0bfff05 	stb	r2,-4(fp)
		int num_values = 0;
 400050c:	e03ff715 	stw	zero,-36(fp)
		for (int i = 0; i < 16; ++i) {
 4000510:	e03ff815 	stw	zero,-32(fp)
 4000514:	00000b06 	br	4000544 <tjei_write_DHT+0x60>
			num_values += matrix_len[i];
 4000518:	e0bff817 	ldw	r2,-32(fp)
 400051c:	e0fffc17 	ldw	r3,-16(fp)
 4000520:	1885883a 	add	r2,r3,r2
 4000524:	10800003 	ldbu	r2,0(r2)
 4000528:	10803fcc 	andi	r2,r2,255
 400052c:	e0fff717 	ldw	r3,-36(fp)
 4000530:	1885883a 	add	r2,r3,r2
 4000534:	e0bff715 	stw	r2,-36(fp)
		uint8_t const* matrix_val,
		TJEHuffmanTableClass ht_class,
		uint8_t id)
	{
		int num_values = 0;
		for (int i = 0; i < 16; ++i) {
 4000538:	e0bff817 	ldw	r2,-32(fp)
 400053c:	10800044 	addi	r2,r2,1
 4000540:	e0bff815 	stw	r2,-32(fp)
 4000544:	e0bff817 	ldw	r2,-32(fp)
 4000548:	10800410 	cmplti	r2,r2,16
 400054c:	103ff21e 	bne	r2,zero,4000518 <__alt_data_end+0xfc000518>
			num_values += matrix_len[i];
		}
		assert(num_values <= 0xffff);
 4000550:	e0bff717 	ldw	r2,-36(fp)
 4000554:	00ffffd4 	movui	r3,65535
 4000558:	1880080e 	bge	r3,r2,400057c <tjei_write_DHT+0x98>
 400055c:	01c10074 	movhi	r7,1025
 4000560:	39f4ac04 	addi	r7,r7,-11600
 4000564:	01810074 	movhi	r6,1025
 4000568:	31b4ef04 	addi	r6,r6,-11332
 400056c:	01407104 	movi	r5,452
 4000570:	01010074 	movhi	r4,1025
 4000574:	2134a704 	addi	r4,r4,-11620
 4000578:	4004a940 	call	4004a94 <__assert_func>

		uint16_t DHT = tjei_be_word(0xffc4);
 400057c:	013ff114 	movui	r4,65476
 4000580:	400026c0 	call	400026c <tjei_be_word>
 4000584:	e0bff90d 	sth	r2,-28(fp)
		// 2(len) + 1(Tc|th) + 16 (num lengths) + ?? (num values)
		uint16_t len = tjei_be_word(2 + 1 + 16 + (uint16_t)num_values);
 4000588:	e0bff717 	ldw	r2,-36(fp)
 400058c:	108004c4 	addi	r2,r2,19
 4000590:	10bfffcc 	andi	r2,r2,65535
 4000594:	1009883a 	mov	r4,r2
 4000598:	400026c0 	call	400026c <tjei_be_word>
 400059c:	e0bff98d 	sth	r2,-26(fp)
		assert(id < 4);
 40005a0:	e0bfff03 	ldbu	r2,-4(fp)
 40005a4:	10800130 	cmpltui	r2,r2,4
 40005a8:	1000081e 	bne	r2,zero,40005cc <tjei_write_DHT+0xe8>
 40005ac:	01c10074 	movhi	r7,1025
 40005b0:	39f4aa04 	addi	r7,r7,-11608
 40005b4:	01810074 	movhi	r6,1025
 40005b8:	31b4ef04 	addi	r6,r6,-11332
 40005bc:	01407244 	movi	r5,457
 40005c0:	01010074 	movhi	r4,1025
 40005c4:	2134a704 	addi	r4,r4,-11620
 40005c8:	4004a940 	call	4004a94 <__assert_func>
		uint8_t tc_th = (uint8_t)((((uint8_t)ht_class) << 4) | id);
 40005cc:	e0bffe17 	ldw	r2,-8(fp)
 40005d0:	10803fcc 	andi	r2,r2,255
 40005d4:	1004913a 	slli	r2,r2,4
 40005d8:	1007883a 	mov	r3,r2
 40005dc:	e0bfff03 	ldbu	r2,-4(fp)
 40005e0:	1884b03a 	or	r2,r3,r2
 40005e4:	e0bffa05 	stb	r2,-24(fp)

		tjei_write(state, &DHT, sizeof(uint16_t), 1);
 40005e8:	e0bff904 	addi	r2,fp,-28
 40005ec:	01c00044 	movi	r7,1
 40005f0:	01800084 	movi	r6,2
 40005f4:	100b883a 	mov	r5,r2
 40005f8:	e13ffb17 	ldw	r4,-20(fp)
 40005fc:	40002bc0 	call	40002bc <tjei_write>
		tjei_write(state, &len, sizeof(uint16_t), 1);
 4000600:	e0bff984 	addi	r2,fp,-26
 4000604:	01c00044 	movi	r7,1
 4000608:	01800084 	movi	r6,2
 400060c:	100b883a 	mov	r5,r2
 4000610:	e13ffb17 	ldw	r4,-20(fp)
 4000614:	40002bc0 	call	40002bc <tjei_write>
		tjei_write(state, &tc_th, sizeof(uint8_t), 1);
 4000618:	e0bffa04 	addi	r2,fp,-24
 400061c:	01c00044 	movi	r7,1
 4000620:	01800044 	movi	r6,1
 4000624:	100b883a 	mov	r5,r2
 4000628:	e13ffb17 	ldw	r4,-20(fp)
 400062c:	40002bc0 	call	40002bc <tjei_write>
		tjei_write(state, matrix_len, sizeof(uint8_t), 16);
 4000630:	01c00404 	movi	r7,16
 4000634:	01800044 	movi	r6,1
 4000638:	e17ffc17 	ldw	r5,-16(fp)
 400063c:	e13ffb17 	ldw	r4,-20(fp)
 4000640:	40002bc0 	call	40002bc <tjei_write>
		tjei_write(state, matrix_val, sizeof(uint8_t), (size_t)num_values);
 4000644:	e0bff717 	ldw	r2,-36(fp)
 4000648:	100f883a 	mov	r7,r2
 400064c:	01800044 	movi	r6,1
 4000650:	e17ffd17 	ldw	r5,-12(fp)
 4000654:	e13ffb17 	ldw	r4,-20(fp)
 4000658:	40002bc0 	call	40002bc <tjei_write>
	}
 400065c:	0001883a 	nop
 4000660:	e037883a 	mov	sp,fp
 4000664:	dfc00117 	ldw	ra,4(sp)
 4000668:	df000017 	ldw	fp,0(sp)
 400066c:	dec00204 	addi	sp,sp,8
 4000670:	f800283a 	ret

04000674 <tjei_huff_get_code_lengths>:
	//  Huffman deflation code.
	// ============================================================

	// Returns all code sizes from the BITS specification (JPEG C.3)
	static uint8_t* tjei_huff_get_code_lengths(uint8_t huffsize[/*256*/], uint8_t const* bits)
	{
 4000674:	defffa04 	addi	sp,sp,-24
 4000678:	df000515 	stw	fp,20(sp)
 400067c:	df000504 	addi	fp,sp,20
 4000680:	e13ffe15 	stw	r4,-8(fp)
 4000684:	e17fff15 	stw	r5,-4(fp)
		int k = 0;
 4000688:	e03ffb15 	stw	zero,-20(fp)
		for (int i = 0; i < 16; ++i) {
 400068c:	e03ffc15 	stw	zero,-16(fp)
 4000690:	00001c06 	br	4000704 <tjei_huff_get_code_lengths+0x90>
			for (int j = 0; j < bits[i]; ++j) {
 4000694:	e03ffd15 	stw	zero,-12(fp)
 4000698:	00000c06 	br	40006cc <tjei_huff_get_code_lengths+0x58>
				huffsize[k++] = (uint8_t)(i + 1);
 400069c:	e0bffb17 	ldw	r2,-20(fp)
 40006a0:	10c00044 	addi	r3,r2,1
 40006a4:	e0fffb15 	stw	r3,-20(fp)
 40006a8:	1007883a 	mov	r3,r2
 40006ac:	e0bffe17 	ldw	r2,-8(fp)
 40006b0:	10c5883a 	add	r2,r2,r3
 40006b4:	e0fffc17 	ldw	r3,-16(fp)
 40006b8:	18c00044 	addi	r3,r3,1
 40006bc:	10c00005 	stb	r3,0(r2)
	// Returns all code sizes from the BITS specification (JPEG C.3)
	static uint8_t* tjei_huff_get_code_lengths(uint8_t huffsize[/*256*/], uint8_t const* bits)
	{
		int k = 0;
		for (int i = 0; i < 16; ++i) {
			for (int j = 0; j < bits[i]; ++j) {
 40006c0:	e0bffd17 	ldw	r2,-12(fp)
 40006c4:	10800044 	addi	r2,r2,1
 40006c8:	e0bffd15 	stw	r2,-12(fp)
 40006cc:	e0bffc17 	ldw	r2,-16(fp)
 40006d0:	e0ffff17 	ldw	r3,-4(fp)
 40006d4:	1885883a 	add	r2,r3,r2
 40006d8:	10800003 	ldbu	r2,0(r2)
 40006dc:	10803fcc 	andi	r2,r2,255
 40006e0:	e0fffd17 	ldw	r3,-12(fp)
 40006e4:	18bfed16 	blt	r3,r2,400069c <__alt_data_end+0xfc00069c>
				huffsize[k++] = (uint8_t)(i + 1);
			}
			huffsize[k] = 0;
 40006e8:	e0bffb17 	ldw	r2,-20(fp)
 40006ec:	e0fffe17 	ldw	r3,-8(fp)
 40006f0:	1885883a 	add	r2,r3,r2
 40006f4:	10000005 	stb	zero,0(r2)

	// Returns all code sizes from the BITS specification (JPEG C.3)
	static uint8_t* tjei_huff_get_code_lengths(uint8_t huffsize[/*256*/], uint8_t const* bits)
	{
		int k = 0;
		for (int i = 0; i < 16; ++i) {
 40006f8:	e0bffc17 	ldw	r2,-16(fp)
 40006fc:	10800044 	addi	r2,r2,1
 4000700:	e0bffc15 	stw	r2,-16(fp)
 4000704:	e0bffc17 	ldw	r2,-16(fp)
 4000708:	10800410 	cmplti	r2,r2,16
 400070c:	103fe11e 	bne	r2,zero,4000694 <__alt_data_end+0xfc000694>
			for (int j = 0; j < bits[i]; ++j) {
				huffsize[k++] = (uint8_t)(i + 1);
			}
			huffsize[k] = 0;
		}
		return huffsize;
 4000710:	e0bffe17 	ldw	r2,-8(fp)
	}
 4000714:	e037883a 	mov	sp,fp
 4000718:	df000017 	ldw	fp,0(sp)
 400071c:	dec00104 	addi	sp,sp,4
 4000720:	f800283a 	ret

04000724 <tjei_huff_get_codes>:

	// Fills out the prefixes for each code.
	static uint16_t* tjei_huff_get_codes(uint16_t codes[], uint8_t* huffsize, int64_t count)
	{
 4000724:	defff704 	addi	sp,sp,-36
 4000728:	dfc00815 	stw	ra,32(sp)
 400072c:	df000715 	stw	fp,28(sp)
 4000730:	df000704 	addi	fp,sp,28
 4000734:	e13ffc15 	stw	r4,-16(fp)
 4000738:	e17ffd15 	stw	r5,-12(fp)
 400073c:	e1bffe15 	stw	r6,-8(fp)
 4000740:	e1ffff15 	stw	r7,-4(fp)
		uint16_t code = 0;
 4000744:	e03ff90d 	sth	zero,-28(fp)
		int k = 0;
 4000748:	e03ffa15 	stw	zero,-24(fp)
		uint8_t sz = huffsize[0];
 400074c:	e13ffd17 	ldw	r4,-12(fp)
 4000750:	21000003 	ldbu	r4,0(r4)
 4000754:	e13ffb05 	stb	r4,-20(fp)
		for (;;) {
			do {
				assert(k < count);
 4000758:	e13ffa17 	ldw	r4,-24(fp)
 400075c:	2005883a 	mov	r2,r4
 4000760:	2009d7fa 	srai	r4,r4,31
 4000764:	2007883a 	mov	r3,r4
 4000768:	e13fff17 	ldw	r4,-4(fp)
 400076c:	19000c16 	blt	r3,r4,40007a0 <tjei_huff_get_codes+0x7c>
 4000770:	e13fff17 	ldw	r4,-4(fp)
 4000774:	20c0021e 	bne	r4,r3,4000780 <tjei_huff_get_codes+0x5c>
 4000778:	e13ffe17 	ldw	r4,-8(fp)
 400077c:	11000836 	bltu	r2,r4,40007a0 <tjei_huff_get_codes+0x7c>
 4000780:	01c10074 	movhi	r7,1025
 4000784:	39f4b204 	addi	r7,r7,-11576
 4000788:	01810074 	movhi	r6,1025
 400078c:	31b4f304 	addi	r6,r6,-11316
 4000790:	01407ac4 	movi	r5,491
 4000794:	01010074 	movhi	r4,1025
 4000798:	2134a704 	addi	r4,r4,-11620
 400079c:	4004a940 	call	4004a94 <__assert_func>
				codes[k++] = code++;
 40007a0:	e13ffa17 	ldw	r4,-24(fp)
 40007a4:	21400044 	addi	r5,r4,1
 40007a8:	e17ffa15 	stw	r5,-24(fp)
 40007ac:	2109883a 	add	r4,r4,r4
 40007b0:	200b883a 	mov	r5,r4
 40007b4:	e13ffc17 	ldw	r4,-16(fp)
 40007b8:	214b883a 	add	r5,r4,r5
 40007bc:	e13ff90b 	ldhu	r4,-28(fp)
 40007c0:	21800044 	addi	r6,r4,1
 40007c4:	e1bff90d 	sth	r6,-28(fp)
 40007c8:	2900000d 	sth	r4,0(r5)
			} while (huffsize[k] == sz);
 40007cc:	e13ffa17 	ldw	r4,-24(fp)
 40007d0:	e17ffd17 	ldw	r5,-12(fp)
 40007d4:	2909883a 	add	r4,r5,r4
 40007d8:	21000003 	ldbu	r4,0(r4)
 40007dc:	21403fcc 	andi	r5,r4,255
 40007e0:	e13ffb03 	ldbu	r4,-20(fp)
 40007e4:	293fdc26 	beq	r5,r4,4000758 <__alt_data_end+0xfc000758>
			if (huffsize[k] == 0) {
 40007e8:	e13ffa17 	ldw	r4,-24(fp)
 40007ec:	e17ffd17 	ldw	r5,-12(fp)
 40007f0:	2909883a 	add	r4,r5,r4
 40007f4:	21000003 	ldbu	r4,0(r4)
 40007f8:	21003fcc 	andi	r4,r4,255
 40007fc:	2000021e 	bne	r4,zero,4000808 <tjei_huff_get_codes+0xe4>
				return codes;
 4000800:	e0bffc17 	ldw	r2,-16(fp)
 4000804:	00000e06 	br	4000840 <tjei_huff_get_codes+0x11c>
			}
			do {
				code = (uint16_t)(code << 1);
 4000808:	e13ff90b 	ldhu	r4,-28(fp)
 400080c:	2109883a 	add	r4,r4,r4
 4000810:	e13ff90d 	sth	r4,-28(fp)
				++sz;
 4000814:	e13ffb03 	ldbu	r4,-20(fp)
 4000818:	21000044 	addi	r4,r4,1
 400081c:	e13ffb05 	stb	r4,-20(fp)
			} while (huffsize[k] != sz);
 4000820:	e13ffa17 	ldw	r4,-24(fp)
 4000824:	e17ffd17 	ldw	r5,-12(fp)
 4000828:	2909883a 	add	r4,r5,r4
 400082c:	21000003 	ldbu	r4,0(r4)
 4000830:	21403fcc 	andi	r5,r4,255
 4000834:	e13ffb03 	ldbu	r4,-20(fp)
 4000838:	293ff31e 	bne	r5,r4,4000808 <__alt_data_end+0xfc000808>
		}
 400083c:	003fc606 	br	4000758 <__alt_data_end+0xfc000758>
	}
 4000840:	e037883a 	mov	sp,fp
 4000844:	dfc00117 	ldw	ra,4(sp)
 4000848:	df000017 	ldw	fp,0(sp)
 400084c:	dec00204 	addi	sp,sp,8
 4000850:	f800283a 	ret

04000854 <tjei_huff_get_extended>:
	static void tjei_huff_get_extended(uint8_t* out_ehuffsize,
		uint16_t* out_ehuffcode,
		uint8_t const* huffval,
		uint8_t* huffsize,
		uint16_t* huffcode, int64_t count)
	{
 4000854:	defff904 	addi	sp,sp,-28
 4000858:	df000615 	stw	fp,24(sp)
 400085c:	df000604 	addi	fp,sp,24
 4000860:	e13ffc15 	stw	r4,-16(fp)
 4000864:	e17ffd15 	stw	r5,-12(fp)
 4000868:	e1bffe15 	stw	r6,-8(fp)
 400086c:	e1ffff15 	stw	r7,-4(fp)
		int k = 0;
 4000870:	e03ffa15 	stw	zero,-24(fp)
		do {
			uint8_t val = huffval[k];
 4000874:	e13ffa17 	ldw	r4,-24(fp)
 4000878:	e17ffe17 	ldw	r5,-8(fp)
 400087c:	2909883a 	add	r4,r5,r4
 4000880:	21000003 	ldbu	r4,0(r4)
 4000884:	e13ffb05 	stb	r4,-20(fp)
			out_ehuffcode[val] = huffcode[k];
 4000888:	e13ffb03 	ldbu	r4,-20(fp)
 400088c:	2109883a 	add	r4,r4,r4
 4000890:	200b883a 	mov	r5,r4
 4000894:	e13ffd17 	ldw	r4,-12(fp)
 4000898:	214b883a 	add	r5,r4,r5
 400089c:	e13ffa17 	ldw	r4,-24(fp)
 40008a0:	2109883a 	add	r4,r4,r4
 40008a4:	200d883a 	mov	r6,r4
 40008a8:	e1000117 	ldw	r4,4(fp)
 40008ac:	2189883a 	add	r4,r4,r6
 40008b0:	2100000b 	ldhu	r4,0(r4)
 40008b4:	2900000d 	sth	r4,0(r5)
			out_ehuffsize[val] = huffsize[k];
 40008b8:	e13ffb03 	ldbu	r4,-20(fp)
 40008bc:	e17ffc17 	ldw	r5,-16(fp)
 40008c0:	2909883a 	add	r4,r5,r4
 40008c4:	e17ffa17 	ldw	r5,-24(fp)
 40008c8:	e1bfff17 	ldw	r6,-4(fp)
 40008cc:	314b883a 	add	r5,r6,r5
 40008d0:	29400003 	ldbu	r5,0(r5)
 40008d4:	21400005 	stb	r5,0(r4)
			k++;
 40008d8:	e13ffa17 	ldw	r4,-24(fp)
 40008dc:	21000044 	addi	r4,r4,1
 40008e0:	e13ffa15 	stw	r4,-24(fp)
		} while (k < count);
 40008e4:	e13ffa17 	ldw	r4,-24(fp)
 40008e8:	2005883a 	mov	r2,r4
 40008ec:	2009d7fa 	srai	r4,r4,31
 40008f0:	2007883a 	mov	r3,r4
 40008f4:	e1000317 	ldw	r4,12(fp)
 40008f8:	193fde16 	blt	r3,r4,4000874 <__alt_data_end+0xfc000874>
 40008fc:	e1000317 	ldw	r4,12(fp)
 4000900:	20c0021e 	bne	r4,r3,400090c <tjei_huff_get_extended+0xb8>
 4000904:	e1000217 	ldw	r4,8(fp)
 4000908:	113fda36 	bltu	r2,r4,4000874 <__alt_data_end+0xfc000874>
	}
 400090c:	0001883a 	nop
 4000910:	e037883a 	mov	sp,fp
 4000914:	df000017 	ldw	fp,0(sp)
 4000918:	dec00104 	addi	sp,sp,4
 400091c:	f800283a 	ret

04000920 <tjei_calculate_variable_length_int>:

	// Returns:
	//  out[1] : number of bits
	//  out[0] : bits
	TJEI_FORCE_INLINE void tjei_calculate_variable_length_int(int value, uint16_t out[2])
	{
 4000920:	defffc04 	addi	sp,sp,-16
 4000924:	df000315 	stw	fp,12(sp)
 4000928:	df000304 	addi	fp,sp,12
 400092c:	e13ffe15 	stw	r4,-8(fp)
 4000930:	e17fff15 	stw	r5,-4(fp)
		int abs_val = value;
 4000934:	e0bffe17 	ldw	r2,-8(fp)
 4000938:	e0bffd15 	stw	r2,-12(fp)
		if (value < 0) {
 400093c:	e0bffe17 	ldw	r2,-8(fp)
 4000940:	1000060e 	bge	r2,zero,400095c <tjei_calculate_variable_length_int+0x3c>
			abs_val = -abs_val;
 4000944:	e0bffd17 	ldw	r2,-12(fp)
 4000948:	0085c83a 	sub	r2,zero,r2
 400094c:	e0bffd15 	stw	r2,-12(fp)
			--value;
 4000950:	e0bffe17 	ldw	r2,-8(fp)
 4000954:	10bfffc4 	addi	r2,r2,-1
 4000958:	e0bffe15 	stw	r2,-8(fp)
		}
		out[1] = 1;
 400095c:	e0bfff17 	ldw	r2,-4(fp)
 4000960:	10800084 	addi	r2,r2,2
 4000964:	00c00044 	movi	r3,1
 4000968:	10c0000d 	sth	r3,0(r2)
		while (abs_val >>= 1) {
 400096c:	00000506 	br	4000984 <tjei_calculate_variable_length_int+0x64>
			++out[1];
 4000970:	e0bfff17 	ldw	r2,-4(fp)
 4000974:	10800084 	addi	r2,r2,2
 4000978:	10c0000b 	ldhu	r3,0(r2)
 400097c:	18c00044 	addi	r3,r3,1
 4000980:	10c0000d 	sth	r3,0(r2)
		if (value < 0) {
			abs_val = -abs_val;
			--value;
		}
		out[1] = 1;
		while (abs_val >>= 1) {
 4000984:	e0bffd17 	ldw	r2,-12(fp)
 4000988:	1005d07a 	srai	r2,r2,1
 400098c:	e0bffd15 	stw	r2,-12(fp)
 4000990:	e0bffd17 	ldw	r2,-12(fp)
 4000994:	103ff61e 	bne	r2,zero,4000970 <__alt_data_end+0xfc000970>
			++out[1];
		}
		out[0] = (uint16_t)(value & ((1 << out[1]) - 1));
 4000998:	e0bffe17 	ldw	r2,-8(fp)
 400099c:	1009883a 	mov	r4,r2
 40009a0:	e0bfff17 	ldw	r2,-4(fp)
 40009a4:	10800084 	addi	r2,r2,2
 40009a8:	1080000b 	ldhu	r2,0(r2)
 40009ac:	10bfffcc 	andi	r2,r2,65535
 40009b0:	00c00044 	movi	r3,1
 40009b4:	1884983a 	sll	r2,r3,r2
 40009b8:	10bfffc4 	addi	r2,r2,-1
 40009bc:	2084703a 	and	r2,r4,r2
 40009c0:	1007883a 	mov	r3,r2
 40009c4:	e0bfff17 	ldw	r2,-4(fp)
 40009c8:	10c0000d 	sth	r3,0(r2)
	}
 40009cc:	0001883a 	nop
 40009d0:	e037883a 	mov	sp,fp
 40009d4:	df000017 	ldw	fp,0(sp)
 40009d8:	dec00104 	addi	sp,sp,4
 40009dc:	f800283a 	ret

040009e0 <tjei_write_bits>:

	// Write bits to file.
	TJEI_FORCE_INLINE void tjei_write_bits(TJEState* state,
		uint32_t* bitbuffer, uint32_t* location,
		uint16_t num_bits, uint16_t bits)
	{
 40009e0:	defff704 	addi	sp,sp,-36
 40009e4:	dfc00815 	stw	ra,32(sp)
 40009e8:	df000715 	stw	fp,28(sp)
 40009ec:	df000704 	addi	fp,sp,28
 40009f0:	e13ffb15 	stw	r4,-20(fp)
 40009f4:	e17ffc15 	stw	r5,-16(fp)
 40009f8:	e1bffd15 	stw	r6,-12(fp)
 40009fc:	3807883a 	mov	r3,r7
 4000a00:	e0800217 	ldw	r2,8(fp)
 4000a04:	e0fffe0d 	sth	r3,-8(fp)
 4000a08:	e0bfff0d 	sth	r2,-4(fp)
		// This call pushes to the bitbuffer and saves the location. Data is pushed
		// from most significant to less significant.
		// When we can write a full byte, we write a byte and shift.

		// Push the stack.
		uint32_t nloc = *location + num_bits;
 4000a0c:	e0bffd17 	ldw	r2,-12(fp)
 4000a10:	10c00017 	ldw	r3,0(r2)
 4000a14:	e0bffe0b 	ldhu	r2,-8(fp)
 4000a18:	1885883a 	add	r2,r3,r2
 4000a1c:	e0bff915 	stw	r2,-28(fp)
		*bitbuffer |= (uint32_t)(bits << (32 - nloc));
 4000a20:	e0bffc17 	ldw	r2,-16(fp)
 4000a24:	10800017 	ldw	r2,0(r2)
 4000a28:	e13fff0b 	ldhu	r4,-4(fp)
 4000a2c:	01400804 	movi	r5,32
 4000a30:	e0fff917 	ldw	r3,-28(fp)
 4000a34:	28c7c83a 	sub	r3,r5,r3
 4000a38:	20c6983a 	sll	r3,r4,r3
 4000a3c:	10c6b03a 	or	r3,r2,r3
 4000a40:	e0bffc17 	ldw	r2,-16(fp)
 4000a44:	10c00015 	stw	r3,0(r2)
		*location = nloc;
 4000a48:	e0bffd17 	ldw	r2,-12(fp)
 4000a4c:	e0fff917 	ldw	r3,-28(fp)
 4000a50:	10c00015 	stw	r3,0(r2)
		while (*location >= 8) {
 4000a54:	00001f06 	br	4000ad4 <tjei_write_bits+0xf4>
			// Grab the most significant byte.
			uint8_t c = (uint8_t)((*bitbuffer) >> 24);
 4000a58:	e0bffc17 	ldw	r2,-16(fp)
 4000a5c:	10800017 	ldw	r2,0(r2)
 4000a60:	1004d63a 	srli	r2,r2,24
 4000a64:	e0bffa05 	stb	r2,-24(fp)
			// Write it to file.
			tjei_write(state, &c, 1, 1);
 4000a68:	e0bffa04 	addi	r2,fp,-24
 4000a6c:	01c00044 	movi	r7,1
 4000a70:	01800044 	movi	r6,1
 4000a74:	100b883a 	mov	r5,r2
 4000a78:	e13ffb17 	ldw	r4,-20(fp)
 4000a7c:	40002bc0 	call	40002bc <tjei_write>
			if (c == 0xff) {
 4000a80:	e0bffa03 	ldbu	r2,-24(fp)
 4000a84:	10803fcc 	andi	r2,r2,255
 4000a88:	10803fd8 	cmpnei	r2,r2,255
 4000a8c:	1000071e 	bne	r2,zero,4000aac <tjei_write_bits+0xcc>
				// Special case: tell JPEG this is not a marker.
				char z = 0;
 4000a90:	e03ffa45 	stb	zero,-23(fp)
				tjei_write(state, &z, 1, 1);
 4000a94:	e0bffa44 	addi	r2,fp,-23
 4000a98:	01c00044 	movi	r7,1
 4000a9c:	01800044 	movi	r6,1
 4000aa0:	100b883a 	mov	r5,r2
 4000aa4:	e13ffb17 	ldw	r4,-20(fp)
 4000aa8:	40002bc0 	call	40002bc <tjei_write>
			}
			// Pop the stack.
			*bitbuffer <<= 8;
 4000aac:	e0bffc17 	ldw	r2,-16(fp)
 4000ab0:	10800017 	ldw	r2,0(r2)
 4000ab4:	1006923a 	slli	r3,r2,8
 4000ab8:	e0bffc17 	ldw	r2,-16(fp)
 4000abc:	10c00015 	stw	r3,0(r2)
			*location -= 8;
 4000ac0:	e0bffd17 	ldw	r2,-12(fp)
 4000ac4:	10800017 	ldw	r2,0(r2)
 4000ac8:	10fffe04 	addi	r3,r2,-8
 4000acc:	e0bffd17 	ldw	r2,-12(fp)
 4000ad0:	10c00015 	stw	r3,0(r2)

		// Push the stack.
		uint32_t nloc = *location + num_bits;
		*bitbuffer |= (uint32_t)(bits << (32 - nloc));
		*location = nloc;
		while (*location >= 8) {
 4000ad4:	e0bffd17 	ldw	r2,-12(fp)
 4000ad8:	10800017 	ldw	r2,0(r2)
 4000adc:	10800228 	cmpgeui	r2,r2,8
 4000ae0:	103fdd1e 	bne	r2,zero,4000a58 <__alt_data_end+0xfc000a58>
			}
			// Pop the stack.
			*bitbuffer <<= 8;
			*location -= 8;
		}
	}
 4000ae4:	0001883a 	nop
 4000ae8:	e037883a 	mov	sp,fp
 4000aec:	dfc00117 	ldw	ra,4(sp)
 4000af0:	df000017 	ldw	fp,0(sp)
 4000af4:	dec00204 	addi	sp,sp,8
 4000af8:	f800283a 	ret

04000afc <tjei_fdct>:
	//  Japanese, but the algorithm is described in the Pennebaker & Mitchell
	//  JPEG textbook (see REFERENCES section in file README).  The following code
	//  is based directly on figure 4-8 in P&M.
	//
	static void tjei_fdct(float* data)
	{
 4000afc:	deffe704 	addi	sp,sp,-100
 4000b00:	dfc01815 	stw	ra,96(sp)
 4000b04:	df001715 	stw	fp,92(sp)
 4000b08:	dc001615 	stw	r16,88(sp)
 4000b0c:	df001704 	addi	fp,sp,92
 4000b10:	e13ffe15 	stw	r4,-8(fp)
		float* dataptr;
		int ctr;

		/* Pass 1: process rows. */

		dataptr = data;
 4000b14:	e0bffe17 	ldw	r2,-8(fp)
 4000b18:	e0bfe915 	stw	r2,-92(fp)
		for (ctr = 7; ctr >= 0; ctr--) {
 4000b1c:	008001c4 	movi	r2,7
 4000b20:	e0bfea15 	stw	r2,-88(fp)
 4000b24:	0000fa06 	br	4000f10 <tjei_fdct+0x414>
			tmp0 = dataptr[0] + dataptr[7];
 4000b28:	e0bfe917 	ldw	r2,-92(fp)
 4000b2c:	10c00017 	ldw	r3,0(r2)
 4000b30:	e0bfe917 	ldw	r2,-92(fp)
 4000b34:	10800704 	addi	r2,r2,28
 4000b38:	11000017 	ldw	r4,0(r2)
 4000b3c:	200b883a 	mov	r5,r4
 4000b40:	1809883a 	mov	r4,r3
 4000b44:	40035c40 	call	40035c4 <__addsf3>
 4000b48:	1007883a 	mov	r3,r2
 4000b4c:	e0ffeb15 	stw	r3,-84(fp)
			tmp7 = dataptr[0] - dataptr[7];
 4000b50:	e0bfe917 	ldw	r2,-92(fp)
 4000b54:	10c00017 	ldw	r3,0(r2)
 4000b58:	e0bfe917 	ldw	r2,-92(fp)
 4000b5c:	10800704 	addi	r2,r2,28
 4000b60:	11000017 	ldw	r4,0(r2)
 4000b64:	200b883a 	mov	r5,r4
 4000b68:	1809883a 	mov	r4,r3
 4000b6c:	40043b80 	call	40043b8 <__subsf3>
 4000b70:	1007883a 	mov	r3,r2
 4000b74:	e0ffec15 	stw	r3,-80(fp)
			tmp1 = dataptr[1] + dataptr[6];
 4000b78:	e0bfe917 	ldw	r2,-92(fp)
 4000b7c:	10800104 	addi	r2,r2,4
 4000b80:	10c00017 	ldw	r3,0(r2)
 4000b84:	e0bfe917 	ldw	r2,-92(fp)
 4000b88:	10800604 	addi	r2,r2,24
 4000b8c:	11000017 	ldw	r4,0(r2)
 4000b90:	200b883a 	mov	r5,r4
 4000b94:	1809883a 	mov	r4,r3
 4000b98:	40035c40 	call	40035c4 <__addsf3>
 4000b9c:	1007883a 	mov	r3,r2
 4000ba0:	e0ffed15 	stw	r3,-76(fp)
			tmp6 = dataptr[1] - dataptr[6];
 4000ba4:	e0bfe917 	ldw	r2,-92(fp)
 4000ba8:	10800104 	addi	r2,r2,4
 4000bac:	10c00017 	ldw	r3,0(r2)
 4000bb0:	e0bfe917 	ldw	r2,-92(fp)
 4000bb4:	10800604 	addi	r2,r2,24
 4000bb8:	11000017 	ldw	r4,0(r2)
 4000bbc:	200b883a 	mov	r5,r4
 4000bc0:	1809883a 	mov	r4,r3
 4000bc4:	40043b80 	call	40043b8 <__subsf3>
 4000bc8:	1007883a 	mov	r3,r2
 4000bcc:	e0ffee15 	stw	r3,-72(fp)
			tmp2 = dataptr[2] + dataptr[5];
 4000bd0:	e0bfe917 	ldw	r2,-92(fp)
 4000bd4:	10800204 	addi	r2,r2,8
 4000bd8:	10c00017 	ldw	r3,0(r2)
 4000bdc:	e0bfe917 	ldw	r2,-92(fp)
 4000be0:	10800504 	addi	r2,r2,20
 4000be4:	11000017 	ldw	r4,0(r2)
 4000be8:	200b883a 	mov	r5,r4
 4000bec:	1809883a 	mov	r4,r3
 4000bf0:	40035c40 	call	40035c4 <__addsf3>
 4000bf4:	1007883a 	mov	r3,r2
 4000bf8:	e0ffef15 	stw	r3,-68(fp)
			tmp5 = dataptr[2] - dataptr[5];
 4000bfc:	e0bfe917 	ldw	r2,-92(fp)
 4000c00:	10800204 	addi	r2,r2,8
 4000c04:	10c00017 	ldw	r3,0(r2)
 4000c08:	e0bfe917 	ldw	r2,-92(fp)
 4000c0c:	10800504 	addi	r2,r2,20
 4000c10:	11000017 	ldw	r4,0(r2)
 4000c14:	200b883a 	mov	r5,r4
 4000c18:	1809883a 	mov	r4,r3
 4000c1c:	40043b80 	call	40043b8 <__subsf3>
 4000c20:	1007883a 	mov	r3,r2
 4000c24:	e0fff015 	stw	r3,-64(fp)
			tmp3 = dataptr[3] + dataptr[4];
 4000c28:	e0bfe917 	ldw	r2,-92(fp)
 4000c2c:	10800304 	addi	r2,r2,12
 4000c30:	10c00017 	ldw	r3,0(r2)
 4000c34:	e0bfe917 	ldw	r2,-92(fp)
 4000c38:	10800404 	addi	r2,r2,16
 4000c3c:	11000017 	ldw	r4,0(r2)
 4000c40:	200b883a 	mov	r5,r4
 4000c44:	1809883a 	mov	r4,r3
 4000c48:	40035c40 	call	40035c4 <__addsf3>
 4000c4c:	1007883a 	mov	r3,r2
 4000c50:	e0fff115 	stw	r3,-60(fp)
			tmp4 = dataptr[3] - dataptr[4];
 4000c54:	e0bfe917 	ldw	r2,-92(fp)
 4000c58:	10800304 	addi	r2,r2,12
 4000c5c:	10c00017 	ldw	r3,0(r2)
 4000c60:	e0bfe917 	ldw	r2,-92(fp)
 4000c64:	10800404 	addi	r2,r2,16
 4000c68:	11000017 	ldw	r4,0(r2)
 4000c6c:	200b883a 	mov	r5,r4
 4000c70:	1809883a 	mov	r4,r3
 4000c74:	40043b80 	call	40043b8 <__subsf3>
 4000c78:	1007883a 	mov	r3,r2
 4000c7c:	e0fff215 	stw	r3,-56(fp)

			/* Even part */

			tmp10 = tmp0 + tmp3;    /* phase 2 */
 4000c80:	e17ff117 	ldw	r5,-60(fp)
 4000c84:	e13feb17 	ldw	r4,-84(fp)
 4000c88:	40035c40 	call	40035c4 <__addsf3>
 4000c8c:	1007883a 	mov	r3,r2
 4000c90:	e0fff315 	stw	r3,-52(fp)
			tmp13 = tmp0 - tmp3;
 4000c94:	e17ff117 	ldw	r5,-60(fp)
 4000c98:	e13feb17 	ldw	r4,-84(fp)
 4000c9c:	40043b80 	call	40043b8 <__subsf3>
 4000ca0:	1007883a 	mov	r3,r2
 4000ca4:	e0fff415 	stw	r3,-48(fp)
			tmp11 = tmp1 + tmp2;
 4000ca8:	e17fef17 	ldw	r5,-68(fp)
 4000cac:	e13fed17 	ldw	r4,-76(fp)
 4000cb0:	40035c40 	call	40035c4 <__addsf3>
 4000cb4:	1007883a 	mov	r3,r2
 4000cb8:	e0fff515 	stw	r3,-44(fp)
			tmp12 = tmp1 - tmp2;
 4000cbc:	e17fef17 	ldw	r5,-68(fp)
 4000cc0:	e13fed17 	ldw	r4,-76(fp)
 4000cc4:	40043b80 	call	40043b8 <__subsf3>
 4000cc8:	1007883a 	mov	r3,r2
 4000ccc:	e0fff615 	stw	r3,-40(fp)

			dataptr[0] = tmp10 + tmp11; /* phase 3 */
 4000cd0:	e17ff517 	ldw	r5,-44(fp)
 4000cd4:	e13ff317 	ldw	r4,-52(fp)
 4000cd8:	40035c40 	call	40035c4 <__addsf3>
 4000cdc:	1009883a 	mov	r4,r2
 4000ce0:	2007883a 	mov	r3,r4
 4000ce4:	e0bfe917 	ldw	r2,-92(fp)
 4000ce8:	10c00015 	stw	r3,0(r2)
			dataptr[4] = tmp10 - tmp11;
 4000cec:	e0bfe917 	ldw	r2,-92(fp)
 4000cf0:	14000404 	addi	r16,r2,16
 4000cf4:	e17ff517 	ldw	r5,-44(fp)
 4000cf8:	e13ff317 	ldw	r4,-52(fp)
 4000cfc:	40043b80 	call	40043b8 <__subsf3>
 4000d00:	1007883a 	mov	r3,r2
 4000d04:	1805883a 	mov	r2,r3
 4000d08:	80800015 	stw	r2,0(r16)

			z1 = (tmp12 + tmp13) * ((float)0.707106781); /* c4 */
 4000d0c:	e17ff417 	ldw	r5,-48(fp)
 4000d10:	e13ff617 	ldw	r4,-40(fp)
 4000d14:	40035c40 	call	40035c4 <__addsf3>
 4000d18:	1007883a 	mov	r3,r2
 4000d1c:	1805883a 	mov	r2,r3
 4000d20:	014fcd74 	movhi	r5,16181
 4000d24:	29413cc4 	addi	r5,r5,1267
 4000d28:	1009883a 	mov	r4,r2
 4000d2c:	4003f880 	call	4003f88 <__mulsf3>
 4000d30:	1007883a 	mov	r3,r2
 4000d34:	e0fff715 	stw	r3,-36(fp)
			dataptr[2] = tmp13 + z1;    /* phase 5 */
 4000d38:	e0bfe917 	ldw	r2,-92(fp)
 4000d3c:	14000204 	addi	r16,r2,8
 4000d40:	e17ff717 	ldw	r5,-36(fp)
 4000d44:	e13ff417 	ldw	r4,-48(fp)
 4000d48:	40035c40 	call	40035c4 <__addsf3>
 4000d4c:	1007883a 	mov	r3,r2
 4000d50:	1805883a 	mov	r2,r3
 4000d54:	80800015 	stw	r2,0(r16)
			dataptr[6] = tmp13 - z1;
 4000d58:	e0bfe917 	ldw	r2,-92(fp)
 4000d5c:	14000604 	addi	r16,r2,24
 4000d60:	e17ff717 	ldw	r5,-36(fp)
 4000d64:	e13ff417 	ldw	r4,-48(fp)
 4000d68:	40043b80 	call	40043b8 <__subsf3>
 4000d6c:	1007883a 	mov	r3,r2
 4000d70:	1805883a 	mov	r2,r3
 4000d74:	80800015 	stw	r2,0(r16)

			/* Odd part */

			tmp10 = tmp4 + tmp5;    /* phase 2 */
 4000d78:	e17ff017 	ldw	r5,-64(fp)
 4000d7c:	e13ff217 	ldw	r4,-56(fp)
 4000d80:	40035c40 	call	40035c4 <__addsf3>
 4000d84:	1007883a 	mov	r3,r2
 4000d88:	e0fff315 	stw	r3,-52(fp)
			tmp11 = tmp5 + tmp6;
 4000d8c:	e17fee17 	ldw	r5,-72(fp)
 4000d90:	e13ff017 	ldw	r4,-64(fp)
 4000d94:	40035c40 	call	40035c4 <__addsf3>
 4000d98:	1007883a 	mov	r3,r2
 4000d9c:	e0fff515 	stw	r3,-44(fp)
			tmp12 = tmp6 + tmp7;
 4000da0:	e17fec17 	ldw	r5,-80(fp)
 4000da4:	e13fee17 	ldw	r4,-72(fp)
 4000da8:	40035c40 	call	40035c4 <__addsf3>
 4000dac:	1007883a 	mov	r3,r2
 4000db0:	e0fff615 	stw	r3,-40(fp)

			/* The rotator is modified from fig 4-8 to avoid extra negations. */
			z5 = (tmp10 - tmp12) * ((float)0.382683433); /* c6 */
 4000db4:	e17ff617 	ldw	r5,-40(fp)
 4000db8:	e13ff317 	ldw	r4,-52(fp)
 4000dbc:	40043b80 	call	40043b8 <__subsf3>
 4000dc0:	1007883a 	mov	r3,r2
 4000dc4:	1805883a 	mov	r2,r3
 4000dc8:	014fb134 	movhi	r5,16068
 4000dcc:	297bc544 	addi	r5,r5,-4331
 4000dd0:	1009883a 	mov	r4,r2
 4000dd4:	4003f880 	call	4003f88 <__mulsf3>
 4000dd8:	1007883a 	mov	r3,r2
 4000ddc:	e0fff815 	stw	r3,-32(fp)
			z2 = ((float)0.541196100) * tmp10 + z5; /* c2-c6 */
 4000de0:	014fc2f4 	movhi	r5,16139
 4000de4:	2962f504 	addi	r5,r5,-29740
 4000de8:	e13ff317 	ldw	r4,-52(fp)
 4000dec:	4003f880 	call	4003f88 <__mulsf3>
 4000df0:	1007883a 	mov	r3,r2
 4000df4:	1805883a 	mov	r2,r3
 4000df8:	e17ff817 	ldw	r5,-32(fp)
 4000dfc:	1009883a 	mov	r4,r2
 4000e00:	40035c40 	call	40035c4 <__addsf3>
 4000e04:	1007883a 	mov	r3,r2
 4000e08:	e0fff915 	stw	r3,-28(fp)
			z4 = ((float)1.306562965) * tmp12 + z5; /* c2+c6 */
 4000e0c:	014fe9f4 	movhi	r5,16295
 4000e10:	294f5d44 	addi	r5,r5,15733
 4000e14:	e13ff617 	ldw	r4,-40(fp)
 4000e18:	4003f880 	call	4003f88 <__mulsf3>
 4000e1c:	1007883a 	mov	r3,r2
 4000e20:	1805883a 	mov	r2,r3
 4000e24:	e17ff817 	ldw	r5,-32(fp)
 4000e28:	1009883a 	mov	r4,r2
 4000e2c:	40035c40 	call	40035c4 <__addsf3>
 4000e30:	1007883a 	mov	r3,r2
 4000e34:	e0fffa15 	stw	r3,-24(fp)
			z3 = tmp11 * ((float)0.707106781); /* c4 */
 4000e38:	014fcd74 	movhi	r5,16181
 4000e3c:	29413cc4 	addi	r5,r5,1267
 4000e40:	e13ff517 	ldw	r4,-44(fp)
 4000e44:	4003f880 	call	4003f88 <__mulsf3>
 4000e48:	1007883a 	mov	r3,r2
 4000e4c:	e0fffb15 	stw	r3,-20(fp)

			z11 = tmp7 + z3;        /* phase 5 */
 4000e50:	e17ffb17 	ldw	r5,-20(fp)
 4000e54:	e13fec17 	ldw	r4,-80(fp)
 4000e58:	40035c40 	call	40035c4 <__addsf3>
 4000e5c:	1007883a 	mov	r3,r2
 4000e60:	e0fffc15 	stw	r3,-16(fp)
			z13 = tmp7 - z3;
 4000e64:	e17ffb17 	ldw	r5,-20(fp)
 4000e68:	e13fec17 	ldw	r4,-80(fp)
 4000e6c:	40043b80 	call	40043b8 <__subsf3>
 4000e70:	1007883a 	mov	r3,r2
 4000e74:	e0fffd15 	stw	r3,-12(fp)

			dataptr[5] = z13 + z2;  /* phase 6 */
 4000e78:	e0bfe917 	ldw	r2,-92(fp)
 4000e7c:	14000504 	addi	r16,r2,20
 4000e80:	e17ff917 	ldw	r5,-28(fp)
 4000e84:	e13ffd17 	ldw	r4,-12(fp)
 4000e88:	40035c40 	call	40035c4 <__addsf3>
 4000e8c:	1007883a 	mov	r3,r2
 4000e90:	1805883a 	mov	r2,r3
 4000e94:	80800015 	stw	r2,0(r16)
			dataptr[3] = z13 - z2;
 4000e98:	e0bfe917 	ldw	r2,-92(fp)
 4000e9c:	14000304 	addi	r16,r2,12
 4000ea0:	e17ff917 	ldw	r5,-28(fp)
 4000ea4:	e13ffd17 	ldw	r4,-12(fp)
 4000ea8:	40043b80 	call	40043b8 <__subsf3>
 4000eac:	1007883a 	mov	r3,r2
 4000eb0:	1805883a 	mov	r2,r3
 4000eb4:	80800015 	stw	r2,0(r16)
			dataptr[1] = z11 + z4;
 4000eb8:	e0bfe917 	ldw	r2,-92(fp)
 4000ebc:	14000104 	addi	r16,r2,4
 4000ec0:	e17ffa17 	ldw	r5,-24(fp)
 4000ec4:	e13ffc17 	ldw	r4,-16(fp)
 4000ec8:	40035c40 	call	40035c4 <__addsf3>
 4000ecc:	1007883a 	mov	r3,r2
 4000ed0:	1805883a 	mov	r2,r3
 4000ed4:	80800015 	stw	r2,0(r16)
			dataptr[7] = z11 - z4;
 4000ed8:	e0bfe917 	ldw	r2,-92(fp)
 4000edc:	14000704 	addi	r16,r2,28
 4000ee0:	e17ffa17 	ldw	r5,-24(fp)
 4000ee4:	e13ffc17 	ldw	r4,-16(fp)
 4000ee8:	40043b80 	call	40043b8 <__subsf3>
 4000eec:	1007883a 	mov	r3,r2
 4000ef0:	1805883a 	mov	r2,r3
 4000ef4:	80800015 	stw	r2,0(r16)

			dataptr += 8;     /* advance pointer to next row */
 4000ef8:	e0bfe917 	ldw	r2,-92(fp)
 4000efc:	10800804 	addi	r2,r2,32
 4000f00:	e0bfe915 	stw	r2,-92(fp)
		int ctr;

		/* Pass 1: process rows. */

		dataptr = data;
		for (ctr = 7; ctr >= 0; ctr--) {
 4000f04:	e0bfea17 	ldw	r2,-88(fp)
 4000f08:	10bfffc4 	addi	r2,r2,-1
 4000f0c:	e0bfea15 	stw	r2,-88(fp)
 4000f10:	e0bfea17 	ldw	r2,-88(fp)
 4000f14:	103f040e 	bge	r2,zero,4000b28 <__alt_data_end+0xfc000b28>
			dataptr += 8;     /* advance pointer to next row */
		}

		/* Pass 2: process columns. */

		dataptr = data;
 4000f18:	e0bffe17 	ldw	r2,-8(fp)
 4000f1c:	e0bfe915 	stw	r2,-92(fp)
		for (ctr = 8 - 1; ctr >= 0; ctr--) {
 4000f20:	008001c4 	movi	r2,7
 4000f24:	e0bfea15 	stw	r2,-88(fp)
 4000f28:	0000fa06 	br	4001314 <tjei_fdct+0x818>
			tmp0 = dataptr[8 * 0] + dataptr[8 * 7];
 4000f2c:	e0bfe917 	ldw	r2,-92(fp)
 4000f30:	10c00017 	ldw	r3,0(r2)
 4000f34:	e0bfe917 	ldw	r2,-92(fp)
 4000f38:	10803804 	addi	r2,r2,224
 4000f3c:	11000017 	ldw	r4,0(r2)
 4000f40:	200b883a 	mov	r5,r4
 4000f44:	1809883a 	mov	r4,r3
 4000f48:	40035c40 	call	40035c4 <__addsf3>
 4000f4c:	1007883a 	mov	r3,r2
 4000f50:	e0ffeb15 	stw	r3,-84(fp)
			tmp7 = dataptr[8 * 0] - dataptr[8 * 7];
 4000f54:	e0bfe917 	ldw	r2,-92(fp)
 4000f58:	10c00017 	ldw	r3,0(r2)
 4000f5c:	e0bfe917 	ldw	r2,-92(fp)
 4000f60:	10803804 	addi	r2,r2,224
 4000f64:	11000017 	ldw	r4,0(r2)
 4000f68:	200b883a 	mov	r5,r4
 4000f6c:	1809883a 	mov	r4,r3
 4000f70:	40043b80 	call	40043b8 <__subsf3>
 4000f74:	1007883a 	mov	r3,r2
 4000f78:	e0ffec15 	stw	r3,-80(fp)
			tmp1 = dataptr[8 * 1] + dataptr[8 * 6];
 4000f7c:	e0bfe917 	ldw	r2,-92(fp)
 4000f80:	10800804 	addi	r2,r2,32
 4000f84:	10c00017 	ldw	r3,0(r2)
 4000f88:	e0bfe917 	ldw	r2,-92(fp)
 4000f8c:	10803004 	addi	r2,r2,192
 4000f90:	11000017 	ldw	r4,0(r2)
 4000f94:	200b883a 	mov	r5,r4
 4000f98:	1809883a 	mov	r4,r3
 4000f9c:	40035c40 	call	40035c4 <__addsf3>
 4000fa0:	1007883a 	mov	r3,r2
 4000fa4:	e0ffed15 	stw	r3,-76(fp)
			tmp6 = dataptr[8 * 1] - dataptr[8 * 6];
 4000fa8:	e0bfe917 	ldw	r2,-92(fp)
 4000fac:	10800804 	addi	r2,r2,32
 4000fb0:	10c00017 	ldw	r3,0(r2)
 4000fb4:	e0bfe917 	ldw	r2,-92(fp)
 4000fb8:	10803004 	addi	r2,r2,192
 4000fbc:	11000017 	ldw	r4,0(r2)
 4000fc0:	200b883a 	mov	r5,r4
 4000fc4:	1809883a 	mov	r4,r3
 4000fc8:	40043b80 	call	40043b8 <__subsf3>
 4000fcc:	1007883a 	mov	r3,r2
 4000fd0:	e0ffee15 	stw	r3,-72(fp)
			tmp2 = dataptr[8 * 2] + dataptr[8 * 5];
 4000fd4:	e0bfe917 	ldw	r2,-92(fp)
 4000fd8:	10801004 	addi	r2,r2,64
 4000fdc:	10c00017 	ldw	r3,0(r2)
 4000fe0:	e0bfe917 	ldw	r2,-92(fp)
 4000fe4:	10802804 	addi	r2,r2,160
 4000fe8:	11000017 	ldw	r4,0(r2)
 4000fec:	200b883a 	mov	r5,r4
 4000ff0:	1809883a 	mov	r4,r3
 4000ff4:	40035c40 	call	40035c4 <__addsf3>
 4000ff8:	1007883a 	mov	r3,r2
 4000ffc:	e0ffef15 	stw	r3,-68(fp)
			tmp5 = dataptr[8 * 2] - dataptr[8 * 5];
 4001000:	e0bfe917 	ldw	r2,-92(fp)
 4001004:	10801004 	addi	r2,r2,64
 4001008:	10c00017 	ldw	r3,0(r2)
 400100c:	e0bfe917 	ldw	r2,-92(fp)
 4001010:	10802804 	addi	r2,r2,160
 4001014:	11000017 	ldw	r4,0(r2)
 4001018:	200b883a 	mov	r5,r4
 400101c:	1809883a 	mov	r4,r3
 4001020:	40043b80 	call	40043b8 <__subsf3>
 4001024:	1007883a 	mov	r3,r2
 4001028:	e0fff015 	stw	r3,-64(fp)
			tmp3 = dataptr[8 * 3] + dataptr[8 * 4];
 400102c:	e0bfe917 	ldw	r2,-92(fp)
 4001030:	10801804 	addi	r2,r2,96
 4001034:	10c00017 	ldw	r3,0(r2)
 4001038:	e0bfe917 	ldw	r2,-92(fp)
 400103c:	10802004 	addi	r2,r2,128
 4001040:	11000017 	ldw	r4,0(r2)
 4001044:	200b883a 	mov	r5,r4
 4001048:	1809883a 	mov	r4,r3
 400104c:	40035c40 	call	40035c4 <__addsf3>
 4001050:	1007883a 	mov	r3,r2
 4001054:	e0fff115 	stw	r3,-60(fp)
			tmp4 = dataptr[8 * 3] - dataptr[8 * 4];
 4001058:	e0bfe917 	ldw	r2,-92(fp)
 400105c:	10801804 	addi	r2,r2,96
 4001060:	10c00017 	ldw	r3,0(r2)
 4001064:	e0bfe917 	ldw	r2,-92(fp)
 4001068:	10802004 	addi	r2,r2,128
 400106c:	11000017 	ldw	r4,0(r2)
 4001070:	200b883a 	mov	r5,r4
 4001074:	1809883a 	mov	r4,r3
 4001078:	40043b80 	call	40043b8 <__subsf3>
 400107c:	1007883a 	mov	r3,r2
 4001080:	e0fff215 	stw	r3,-56(fp)

			/* Even part */

			tmp10 = tmp0 + tmp3;    /* phase 2 */
 4001084:	e17ff117 	ldw	r5,-60(fp)
 4001088:	e13feb17 	ldw	r4,-84(fp)
 400108c:	40035c40 	call	40035c4 <__addsf3>
 4001090:	1007883a 	mov	r3,r2
 4001094:	e0fff315 	stw	r3,-52(fp)
			tmp13 = tmp0 - tmp3;
 4001098:	e17ff117 	ldw	r5,-60(fp)
 400109c:	e13feb17 	ldw	r4,-84(fp)
 40010a0:	40043b80 	call	40043b8 <__subsf3>
 40010a4:	1007883a 	mov	r3,r2
 40010a8:	e0fff415 	stw	r3,-48(fp)
			tmp11 = tmp1 + tmp2;
 40010ac:	e17fef17 	ldw	r5,-68(fp)
 40010b0:	e13fed17 	ldw	r4,-76(fp)
 40010b4:	40035c40 	call	40035c4 <__addsf3>
 40010b8:	1007883a 	mov	r3,r2
 40010bc:	e0fff515 	stw	r3,-44(fp)
			tmp12 = tmp1 - tmp2;
 40010c0:	e17fef17 	ldw	r5,-68(fp)
 40010c4:	e13fed17 	ldw	r4,-76(fp)
 40010c8:	40043b80 	call	40043b8 <__subsf3>
 40010cc:	1007883a 	mov	r3,r2
 40010d0:	e0fff615 	stw	r3,-40(fp)

			dataptr[8 * 0] = tmp10 + tmp11; /* phase 3 */
 40010d4:	e17ff517 	ldw	r5,-44(fp)
 40010d8:	e13ff317 	ldw	r4,-52(fp)
 40010dc:	40035c40 	call	40035c4 <__addsf3>
 40010e0:	1009883a 	mov	r4,r2
 40010e4:	2007883a 	mov	r3,r4
 40010e8:	e0bfe917 	ldw	r2,-92(fp)
 40010ec:	10c00015 	stw	r3,0(r2)
			dataptr[8 * 4] = tmp10 - tmp11;
 40010f0:	e0bfe917 	ldw	r2,-92(fp)
 40010f4:	14002004 	addi	r16,r2,128
 40010f8:	e17ff517 	ldw	r5,-44(fp)
 40010fc:	e13ff317 	ldw	r4,-52(fp)
 4001100:	40043b80 	call	40043b8 <__subsf3>
 4001104:	1007883a 	mov	r3,r2
 4001108:	1805883a 	mov	r2,r3
 400110c:	80800015 	stw	r2,0(r16)

			z1 = (tmp12 + tmp13) * ((float)0.707106781); /* c4 */
 4001110:	e17ff417 	ldw	r5,-48(fp)
 4001114:	e13ff617 	ldw	r4,-40(fp)
 4001118:	40035c40 	call	40035c4 <__addsf3>
 400111c:	1007883a 	mov	r3,r2
 4001120:	1805883a 	mov	r2,r3
 4001124:	014fcd74 	movhi	r5,16181
 4001128:	29413cc4 	addi	r5,r5,1267
 400112c:	1009883a 	mov	r4,r2
 4001130:	4003f880 	call	4003f88 <__mulsf3>
 4001134:	1007883a 	mov	r3,r2
 4001138:	e0fff715 	stw	r3,-36(fp)
			dataptr[8 * 2] = tmp13 + z1; /* phase 5 */
 400113c:	e0bfe917 	ldw	r2,-92(fp)
 4001140:	14001004 	addi	r16,r2,64
 4001144:	e17ff717 	ldw	r5,-36(fp)
 4001148:	e13ff417 	ldw	r4,-48(fp)
 400114c:	40035c40 	call	40035c4 <__addsf3>
 4001150:	1007883a 	mov	r3,r2
 4001154:	1805883a 	mov	r2,r3
 4001158:	80800015 	stw	r2,0(r16)
			dataptr[8 * 6] = tmp13 - z1;
 400115c:	e0bfe917 	ldw	r2,-92(fp)
 4001160:	14003004 	addi	r16,r2,192
 4001164:	e17ff717 	ldw	r5,-36(fp)
 4001168:	e13ff417 	ldw	r4,-48(fp)
 400116c:	40043b80 	call	40043b8 <__subsf3>
 4001170:	1007883a 	mov	r3,r2
 4001174:	1805883a 	mov	r2,r3
 4001178:	80800015 	stw	r2,0(r16)

			/* Odd part */

			tmp10 = tmp4 + tmp5;    /* phase 2 */
 400117c:	e17ff017 	ldw	r5,-64(fp)
 4001180:	e13ff217 	ldw	r4,-56(fp)
 4001184:	40035c40 	call	40035c4 <__addsf3>
 4001188:	1007883a 	mov	r3,r2
 400118c:	e0fff315 	stw	r3,-52(fp)
			tmp11 = tmp5 + tmp6;
 4001190:	e17fee17 	ldw	r5,-72(fp)
 4001194:	e13ff017 	ldw	r4,-64(fp)
 4001198:	40035c40 	call	40035c4 <__addsf3>
 400119c:	1007883a 	mov	r3,r2
 40011a0:	e0fff515 	stw	r3,-44(fp)
			tmp12 = tmp6 + tmp7;
 40011a4:	e17fec17 	ldw	r5,-80(fp)
 40011a8:	e13fee17 	ldw	r4,-72(fp)
 40011ac:	40035c40 	call	40035c4 <__addsf3>
 40011b0:	1007883a 	mov	r3,r2
 40011b4:	e0fff615 	stw	r3,-40(fp)

			/* The rotator is modified from fig 4-8 to avoid extra negations. */
			z5 = (tmp10 - tmp12) * ((float)0.382683433); /* c6 */
 40011b8:	e17ff617 	ldw	r5,-40(fp)
 40011bc:	e13ff317 	ldw	r4,-52(fp)
 40011c0:	40043b80 	call	40043b8 <__subsf3>
 40011c4:	1007883a 	mov	r3,r2
 40011c8:	1805883a 	mov	r2,r3
 40011cc:	014fb134 	movhi	r5,16068
 40011d0:	297bc544 	addi	r5,r5,-4331
 40011d4:	1009883a 	mov	r4,r2
 40011d8:	4003f880 	call	4003f88 <__mulsf3>
 40011dc:	1007883a 	mov	r3,r2
 40011e0:	e0fff815 	stw	r3,-32(fp)
			z2 = ((float)0.541196100) * tmp10 + z5; /* c2-c6 */
 40011e4:	014fc2f4 	movhi	r5,16139
 40011e8:	2962f504 	addi	r5,r5,-29740
 40011ec:	e13ff317 	ldw	r4,-52(fp)
 40011f0:	4003f880 	call	4003f88 <__mulsf3>
 40011f4:	1007883a 	mov	r3,r2
 40011f8:	1805883a 	mov	r2,r3
 40011fc:	e17ff817 	ldw	r5,-32(fp)
 4001200:	1009883a 	mov	r4,r2
 4001204:	40035c40 	call	40035c4 <__addsf3>
 4001208:	1007883a 	mov	r3,r2
 400120c:	e0fff915 	stw	r3,-28(fp)
			z4 = ((float)1.306562965) * tmp12 + z5; /* c2+c6 */
 4001210:	014fe9f4 	movhi	r5,16295
 4001214:	294f5d44 	addi	r5,r5,15733
 4001218:	e13ff617 	ldw	r4,-40(fp)
 400121c:	4003f880 	call	4003f88 <__mulsf3>
 4001220:	1007883a 	mov	r3,r2
 4001224:	1805883a 	mov	r2,r3
 4001228:	e17ff817 	ldw	r5,-32(fp)
 400122c:	1009883a 	mov	r4,r2
 4001230:	40035c40 	call	40035c4 <__addsf3>
 4001234:	1007883a 	mov	r3,r2
 4001238:	e0fffa15 	stw	r3,-24(fp)
			z3 = tmp11 * ((float)0.707106781); /* c4 */
 400123c:	014fcd74 	movhi	r5,16181
 4001240:	29413cc4 	addi	r5,r5,1267
 4001244:	e13ff517 	ldw	r4,-44(fp)
 4001248:	4003f880 	call	4003f88 <__mulsf3>
 400124c:	1007883a 	mov	r3,r2
 4001250:	e0fffb15 	stw	r3,-20(fp)

			z11 = tmp7 + z3;        /* phase 5 */
 4001254:	e17ffb17 	ldw	r5,-20(fp)
 4001258:	e13fec17 	ldw	r4,-80(fp)
 400125c:	40035c40 	call	40035c4 <__addsf3>
 4001260:	1007883a 	mov	r3,r2
 4001264:	e0fffc15 	stw	r3,-16(fp)
			z13 = tmp7 - z3;
 4001268:	e17ffb17 	ldw	r5,-20(fp)
 400126c:	e13fec17 	ldw	r4,-80(fp)
 4001270:	40043b80 	call	40043b8 <__subsf3>
 4001274:	1007883a 	mov	r3,r2
 4001278:	e0fffd15 	stw	r3,-12(fp)

			dataptr[8 * 5] = z13 + z2; /* phase 6 */
 400127c:	e0bfe917 	ldw	r2,-92(fp)
 4001280:	14002804 	addi	r16,r2,160
 4001284:	e17ff917 	ldw	r5,-28(fp)
 4001288:	e13ffd17 	ldw	r4,-12(fp)
 400128c:	40035c40 	call	40035c4 <__addsf3>
 4001290:	1007883a 	mov	r3,r2
 4001294:	1805883a 	mov	r2,r3
 4001298:	80800015 	stw	r2,0(r16)
			dataptr[8 * 3] = z13 - z2;
 400129c:	e0bfe917 	ldw	r2,-92(fp)
 40012a0:	14001804 	addi	r16,r2,96
 40012a4:	e17ff917 	ldw	r5,-28(fp)
 40012a8:	e13ffd17 	ldw	r4,-12(fp)
 40012ac:	40043b80 	call	40043b8 <__subsf3>
 40012b0:	1007883a 	mov	r3,r2
 40012b4:	1805883a 	mov	r2,r3
 40012b8:	80800015 	stw	r2,0(r16)
			dataptr[8 * 1] = z11 + z4;
 40012bc:	e0bfe917 	ldw	r2,-92(fp)
 40012c0:	14000804 	addi	r16,r2,32
 40012c4:	e17ffa17 	ldw	r5,-24(fp)
 40012c8:	e13ffc17 	ldw	r4,-16(fp)
 40012cc:	40035c40 	call	40035c4 <__addsf3>
 40012d0:	1007883a 	mov	r3,r2
 40012d4:	1805883a 	mov	r2,r3
 40012d8:	80800015 	stw	r2,0(r16)
			dataptr[8 * 7] = z11 - z4;
 40012dc:	e0bfe917 	ldw	r2,-92(fp)
 40012e0:	14003804 	addi	r16,r2,224
 40012e4:	e17ffa17 	ldw	r5,-24(fp)
 40012e8:	e13ffc17 	ldw	r4,-16(fp)
 40012ec:	40043b80 	call	40043b8 <__subsf3>
 40012f0:	1007883a 	mov	r3,r2
 40012f4:	1805883a 	mov	r2,r3
 40012f8:	80800015 	stw	r2,0(r16)

			dataptr++;          /* advance pointer to next column */
 40012fc:	e0bfe917 	ldw	r2,-92(fp)
 4001300:	10800104 	addi	r2,r2,4
 4001304:	e0bfe915 	stw	r2,-92(fp)
		}

		/* Pass 2: process columns. */

		dataptr = data;
		for (ctr = 8 - 1; ctr >= 0; ctr--) {
 4001308:	e0bfea17 	ldw	r2,-88(fp)
 400130c:	10bfffc4 	addi	r2,r2,-1
 4001310:	e0bfea15 	stw	r2,-88(fp)
 4001314:	e0bfea17 	ldw	r2,-88(fp)
 4001318:	103f040e 	bge	r2,zero,4000f2c <__alt_data_end+0xfc000f2c>
			dataptr[8 * 1] = z11 + z4;
			dataptr[8 * 7] = z11 - z4;

			dataptr++;          /* advance pointer to next column */
		}
	}
 400131c:	0001883a 	nop
 4001320:	e6ffff04 	addi	sp,fp,-4
 4001324:	dfc00217 	ldw	ra,8(sp)
 4001328:	df000117 	ldw	fp,4(sp)
 400132c:	dc000017 	ldw	r16,0(sp)
 4001330:	dec00304 	addi	sp,sp,12
 4001334:	f800283a 	ret

04001338 <tjei_encode_and_write_MCU>:
		uint8_t* huff_dc_len, uint16_t* huff_dc_code, // Huffman tables
		uint8_t* huff_ac_len, uint16_t* huff_ac_code,
		int* pred,  // Previous DC coefficient
		uint32_t* bitbuffer,  // Bitstack.
		uint32_t* location)
	{
 4001338:	deff6f04 	addi	sp,sp,-580
 400133c:	dfc09015 	stw	ra,576(sp)
 4001340:	df008f15 	stw	fp,572(sp)
 4001344:	df008f04 	addi	fp,sp,572
 4001348:	e13ffc15 	stw	r4,-16(fp)
 400134c:	e17ffd15 	stw	r5,-12(fp)
 4001350:	e1bffe15 	stw	r6,-8(fp)
 4001354:	e1ffff15 	stw	r7,-4(fp)
		int du[64];  // Data unit in zig-zag order

		float dct_mcu[64];
		memcpy(dct_mcu, mcu, 64 * sizeof(float));
 4001358:	e0bfbb04 	addi	r2,fp,-276
 400135c:	01804004 	movi	r6,256
 4001360:	e17ffd17 	ldw	r5,-12(fp)
 4001364:	1009883a 	mov	r4,r2
 4001368:	4004b6c0 	call	4004b6c <memcpy>

#if TJE_USE_FAST_DCT
		tjei_fdct(dct_mcu);
 400136c:	e0bfbb04 	addi	r2,fp,-276
 4001370:	1009883a 	mov	r4,r2
 4001374:	4000afc0 	call	4000afc <tjei_fdct>
		for (int i = 0; i < 64; ++i) {
 4001378:	e03f7215 	stw	zero,-568(fp)
 400137c:	00003906 	br	4001464 <tjei_encode_and_write_MCU+0x12c>
			float fval = dct_mcu[i];
 4001380:	e0bf7217 	ldw	r2,-568(fp)
 4001384:	1085883a 	add	r2,r2,r2
 4001388:	1085883a 	add	r2,r2,r2
 400138c:	e0ff7204 	addi	r3,fp,-568
 4001390:	1885883a 	add	r2,r3,r2
 4001394:	10804904 	addi	r2,r2,292
 4001398:	10800017 	ldw	r2,0(r2)
 400139c:	e0bf7715 	stw	r2,-548(fp)
			fval *= qt[i];
 40013a0:	e0bf7217 	ldw	r2,-568(fp)
 40013a4:	1085883a 	add	r2,r2,r2
 40013a8:	1085883a 	add	r2,r2,r2
 40013ac:	1007883a 	mov	r3,r2
 40013b0:	e0bffe17 	ldw	r2,-8(fp)
 40013b4:	10c5883a 	add	r2,r2,r3
 40013b8:	10c00017 	ldw	r3,0(r2)
 40013bc:	180b883a 	mov	r5,r3
 40013c0:	e13f7717 	ldw	r4,-548(fp)
 40013c4:	4003f880 	call	4003f88 <__mulsf3>
 40013c8:	1007883a 	mov	r3,r2
 40013cc:	e0ff7715 	stw	r3,-548(fp)
#if 0
			fval = (fval > 0) ? floorf(fval + 0.5f) : ceilf(fval - 0.5f);
#else
			fval = floorf(fval + 1024 + 0.5f);
 40013d0:	01512034 	movhi	r5,17536
 40013d4:	e13f7717 	ldw	r4,-548(fp)
 40013d8:	40035c40 	call	40035c4 <__addsf3>
 40013dc:	1007883a 	mov	r3,r2
 40013e0:	1805883a 	mov	r2,r3
 40013e4:	014fc034 	movhi	r5,16128
 40013e8:	1009883a 	mov	r4,r2
 40013ec:	40035c40 	call	40035c4 <__addsf3>
 40013f0:	1007883a 	mov	r3,r2
 40013f4:	1805883a 	mov	r2,r3
 40013f8:	1009883a 	mov	r4,r2
 40013fc:	40032e40 	call	40032e4 <floorf>
 4001400:	e0bf7715 	stw	r2,-548(fp)
			fval -= 1024;
 4001404:	01512034 	movhi	r5,17536
 4001408:	e13f7717 	ldw	r4,-548(fp)
 400140c:	40043b80 	call	40043b8 <__subsf3>
 4001410:	1007883a 	mov	r3,r2
 4001414:	e0ff7715 	stw	r3,-548(fp)
#endif
			int val = (int)fval;
 4001418:	e13f7717 	ldw	r4,-548(fp)
 400141c:	400489c0 	call	400489c <__fixsfsi>
 4001420:	e0bf7815 	stw	r2,-544(fp)
			du[tjei_zig_zag[i]] = val;
 4001424:	00810074 	movhi	r2,1025
 4001428:	10b48204 	addi	r2,r2,-11768
 400142c:	e0ff7217 	ldw	r3,-568(fp)
 4001430:	10c5883a 	add	r2,r2,r3
 4001434:	10800003 	ldbu	r2,0(r2)
 4001438:	10803fcc 	andi	r2,r2,255
 400143c:	1085883a 	add	r2,r2,r2
 4001440:	1085883a 	add	r2,r2,r2
 4001444:	e0ff7204 	addi	r3,fp,-568
 4001448:	1885883a 	add	r2,r3,r2
 400144c:	10800904 	addi	r2,r2,36
 4001450:	e0ff7817 	ldw	r3,-544(fp)
 4001454:	10c00015 	stw	r3,0(r2)
		float dct_mcu[64];
		memcpy(dct_mcu, mcu, 64 * sizeof(float));

#if TJE_USE_FAST_DCT
		tjei_fdct(dct_mcu);
		for (int i = 0; i < 64; ++i) {
 4001458:	e0bf7217 	ldw	r2,-568(fp)
 400145c:	10800044 	addi	r2,r2,1
 4001460:	e0bf7215 	stw	r2,-568(fp)
 4001464:	e0bf7217 	ldw	r2,-568(fp)
 4001468:	10801010 	cmplti	r2,r2,64
 400146c:	103fc41e 	bne	r2,zero,4001380 <__alt_data_end+0xfc001380>
#endif

		uint16_t vli[2];

		// Encode DC coefficient.
		int diff = du[0] - *pred;
 4001470:	e0ff7b17 	ldw	r3,-532(fp)
 4001474:	e0800517 	ldw	r2,20(fp)
 4001478:	10800017 	ldw	r2,0(r2)
 400147c:	1885c83a 	sub	r2,r3,r2
 4001480:	e0bf7915 	stw	r2,-540(fp)
		*pred = du[0];
 4001484:	e0ff7b17 	ldw	r3,-532(fp)
 4001488:	e0800517 	ldw	r2,20(fp)
 400148c:	10c00015 	stw	r3,0(r2)
		if (diff != 0) {
 4001490:	e0bf7917 	ldw	r2,-540(fp)
 4001494:	10002326 	beq	r2,zero,4001524 <tjei_encode_and_write_MCU+0x1ec>
			tjei_calculate_variable_length_int(diff, vli);
 4001498:	e0bffb04 	addi	r2,fp,-20
 400149c:	100b883a 	mov	r5,r2
 40014a0:	e13f7917 	ldw	r4,-540(fp)
 40014a4:	40009200 	call	4000920 <tjei_calculate_variable_length_int>
			// Write number of bits with Huffman coding
			tjei_write_bits(state, bitbuffer, location, huff_dc_len[vli[1]], huff_dc_code[vli[1]]);
 40014a8:	e0bffb8b 	ldhu	r2,-18(fp)
 40014ac:	10bfffcc 	andi	r2,r2,65535
 40014b0:	e0ffff17 	ldw	r3,-4(fp)
 40014b4:	1885883a 	add	r2,r3,r2
 40014b8:	10800003 	ldbu	r2,0(r2)
 40014bc:	10c03fcc 	andi	r3,r2,255
 40014c0:	e0bffb8b 	ldhu	r2,-18(fp)
 40014c4:	10bfffcc 	andi	r2,r2,65535
 40014c8:	1085883a 	add	r2,r2,r2
 40014cc:	1009883a 	mov	r4,r2
 40014d0:	e0800217 	ldw	r2,8(fp)
 40014d4:	1105883a 	add	r2,r2,r4
 40014d8:	1080000b 	ldhu	r2,0(r2)
 40014dc:	10bfffcc 	andi	r2,r2,65535
 40014e0:	d8800015 	stw	r2,0(sp)
 40014e4:	180f883a 	mov	r7,r3
 40014e8:	e1800717 	ldw	r6,28(fp)
 40014ec:	e1400617 	ldw	r5,24(fp)
 40014f0:	e13ffc17 	ldw	r4,-16(fp)
 40014f4:	40009e00 	call	40009e0 <tjei_write_bits>
			// Write the bits.
			tjei_write_bits(state, bitbuffer, location, vli[1], vli[0]);
 40014f8:	e0bffb8b 	ldhu	r2,-18(fp)
 40014fc:	10ffffcc 	andi	r3,r2,65535
 4001500:	e0bffb0b 	ldhu	r2,-20(fp)
 4001504:	10bfffcc 	andi	r2,r2,65535
 4001508:	d8800015 	stw	r2,0(sp)
 400150c:	180f883a 	mov	r7,r3
 4001510:	e1800717 	ldw	r6,28(fp)
 4001514:	e1400617 	ldw	r5,24(fp)
 4001518:	e13ffc17 	ldw	r4,-16(fp)
 400151c:	40009e00 	call	40009e0 <tjei_write_bits>
 4001520:	00000c06 	br	4001554 <tjei_encode_and_write_MCU+0x21c>
		}
		else {
			tjei_write_bits(state, bitbuffer, location, huff_dc_len[0], huff_dc_code[0]);
 4001524:	e0bfff17 	ldw	r2,-4(fp)
 4001528:	10800003 	ldbu	r2,0(r2)
 400152c:	10c03fcc 	andi	r3,r2,255
 4001530:	e0800217 	ldw	r2,8(fp)
 4001534:	1080000b 	ldhu	r2,0(r2)
 4001538:	10bfffcc 	andi	r2,r2,65535
 400153c:	d8800015 	stw	r2,0(sp)
 4001540:	180f883a 	mov	r7,r3
 4001544:	e1800717 	ldw	r6,28(fp)
 4001548:	e1400617 	ldw	r5,24(fp)
 400154c:	e13ffc17 	ldw	r4,-16(fp)
 4001550:	40009e00 	call	40009e0 <tjei_write_bits>
		}

		// ==== Encode AC coefficients ====

		int last_non_zero_i = 0;
 4001554:	e03f7315 	stw	zero,-564(fp)
		// Find the last non-zero element.
		for (int i = 63; i > 0; --i) {
 4001558:	00800fc4 	movi	r2,63
 400155c:	e0bf7415 	stw	r2,-560(fp)
 4001560:	00000e06 	br	400159c <tjei_encode_and_write_MCU+0x264>
			if (du[i] != 0) {
 4001564:	e0bf7417 	ldw	r2,-560(fp)
 4001568:	1085883a 	add	r2,r2,r2
 400156c:	1085883a 	add	r2,r2,r2
 4001570:	e0ff7204 	addi	r3,fp,-568
 4001574:	1885883a 	add	r2,r3,r2
 4001578:	10800904 	addi	r2,r2,36
 400157c:	10800017 	ldw	r2,0(r2)
 4001580:	10000326 	beq	r2,zero,4001590 <tjei_encode_and_write_MCU+0x258>
				last_non_zero_i = i;
 4001584:	e0bf7417 	ldw	r2,-560(fp)
 4001588:	e0bf7315 	stw	r2,-564(fp)
				break;
 400158c:	00000506 	br	40015a4 <tjei_encode_and_write_MCU+0x26c>

		// ==== Encode AC coefficients ====

		int last_non_zero_i = 0;
		// Find the last non-zero element.
		for (int i = 63; i > 0; --i) {
 4001590:	e0bf7417 	ldw	r2,-560(fp)
 4001594:	10bfffc4 	addi	r2,r2,-1
 4001598:	e0bf7415 	stw	r2,-560(fp)
 400159c:	e0bf7417 	ldw	r2,-560(fp)
 40015a0:	00bff016 	blt	zero,r2,4001564 <__alt_data_end+0xfc001564>
				last_non_zero_i = i;
				break;
			}
		}

		for (int i = 1; i <= last_non_zero_i; ++i) {
 40015a4:	00800044 	movi	r2,1
 40015a8:	e0bf7515 	stw	r2,-556(fp)
 40015ac:	00007706 	br	400178c <tjei_encode_and_write_MCU+0x454>
			// If zero, increase count. If >=15, encode (FF,00)
			int zero_count = 0;
 40015b0:	e03f7615 	stw	zero,-552(fp)
			while (du[i] == 0) {
 40015b4:	00001806 	br	4001618 <tjei_encode_and_write_MCU+0x2e0>
				++zero_count;
 40015b8:	e0bf7617 	ldw	r2,-552(fp)
 40015bc:	10800044 	addi	r2,r2,1
 40015c0:	e0bf7615 	stw	r2,-552(fp)
				++i;
 40015c4:	e0bf7517 	ldw	r2,-556(fp)
 40015c8:	10800044 	addi	r2,r2,1
 40015cc:	e0bf7515 	stw	r2,-556(fp)
				if (zero_count == 16) {
 40015d0:	e0bf7617 	ldw	r2,-552(fp)
 40015d4:	10800418 	cmpnei	r2,r2,16
 40015d8:	10000f1e 	bne	r2,zero,4001618 <tjei_encode_and_write_MCU+0x2e0>
					// encode (ff,00) == 0xf0
					tjei_write_bits(state, bitbuffer, location, huff_ac_len[0xf0], huff_ac_code[0xf0]);
 40015dc:	e0800317 	ldw	r2,12(fp)
 40015e0:	10803c04 	addi	r2,r2,240
 40015e4:	10800003 	ldbu	r2,0(r2)
 40015e8:	10c03fcc 	andi	r3,r2,255
 40015ec:	e0800417 	ldw	r2,16(fp)
 40015f0:	10807804 	addi	r2,r2,480
 40015f4:	1080000b 	ldhu	r2,0(r2)
 40015f8:	10bfffcc 	andi	r2,r2,65535
 40015fc:	d8800015 	stw	r2,0(sp)
 4001600:	180f883a 	mov	r7,r3
 4001604:	e1800717 	ldw	r6,28(fp)
 4001608:	e1400617 	ldw	r5,24(fp)
 400160c:	e13ffc17 	ldw	r4,-16(fp)
 4001610:	40009e00 	call	40009e0 <tjei_write_bits>
					zero_count = 0;
 4001614:	e03f7615 	stw	zero,-552(fp)
		}

		for (int i = 1; i <= last_non_zero_i; ++i) {
			// If zero, increase count. If >=15, encode (FF,00)
			int zero_count = 0;
			while (du[i] == 0) {
 4001618:	e0bf7517 	ldw	r2,-556(fp)
 400161c:	1085883a 	add	r2,r2,r2
 4001620:	1085883a 	add	r2,r2,r2
 4001624:	e0ff7204 	addi	r3,fp,-568
 4001628:	1885883a 	add	r2,r3,r2
 400162c:	10800904 	addi	r2,r2,36
 4001630:	10800017 	ldw	r2,0(r2)
 4001634:	103fe026 	beq	r2,zero,40015b8 <__alt_data_end+0xfc0015b8>
					// encode (ff,00) == 0xf0
					tjei_write_bits(state, bitbuffer, location, huff_ac_len[0xf0], huff_ac_code[0xf0]);
					zero_count = 0;
				}
			}
			tjei_calculate_variable_length_int(du[i], vli);
 4001638:	e0bf7517 	ldw	r2,-556(fp)
 400163c:	1085883a 	add	r2,r2,r2
 4001640:	1085883a 	add	r2,r2,r2
 4001644:	e0ff7204 	addi	r3,fp,-568
 4001648:	1885883a 	add	r2,r3,r2
 400164c:	10800904 	addi	r2,r2,36
 4001650:	10800017 	ldw	r2,0(r2)
 4001654:	e0fffb04 	addi	r3,fp,-20
 4001658:	180b883a 	mov	r5,r3
 400165c:	1009883a 	mov	r4,r2
 4001660:	40009200 	call	4000920 <tjei_calculate_variable_length_int>

			assert(zero_count < 0x10);
 4001664:	e0bf7617 	ldw	r2,-552(fp)
 4001668:	10800410 	cmplti	r2,r2,16
 400166c:	1000081e 	bne	r2,zero,4001690 <tjei_encode_and_write_MCU+0x358>
 4001670:	01c10074 	movhi	r7,1025
 4001674:	39f4b504 	addi	r7,r7,-11564
 4001678:	01810074 	movhi	r6,1025
 400167c:	31b4f804 	addi	r6,r6,-11296
 4001680:	0140c744 	movi	r5,797
 4001684:	01010074 	movhi	r4,1025
 4001688:	2134a704 	addi	r4,r4,-11620
 400168c:	4004a940 	call	4004a94 <__assert_func>
			assert(vli[1] <= 10);
 4001690:	e0bffb8b 	ldhu	r2,-18(fp)
 4001694:	10bfffcc 	andi	r2,r2,65535
 4001698:	108002f0 	cmpltui	r2,r2,11
 400169c:	1000081e 	bne	r2,zero,40016c0 <tjei_encode_and_write_MCU+0x388>
 40016a0:	01c10074 	movhi	r7,1025
 40016a4:	39f4ba04 	addi	r7,r7,-11544
 40016a8:	01810074 	movhi	r6,1025
 40016ac:	31b4f804 	addi	r6,r6,-11296
 40016b0:	0140c784 	movi	r5,798
 40016b4:	01010074 	movhi	r4,1025
 40016b8:	2134a704 	addi	r4,r4,-11620
 40016bc:	4004a940 	call	4004a94 <__assert_func>

			uint16_t sym1 = (uint16_t)((uint16_t)zero_count << 4) | vli[1];
 40016c0:	e0bf7617 	ldw	r2,-552(fp)
 40016c4:	1004913a 	slli	r2,r2,4
 40016c8:	1007883a 	mov	r3,r2
 40016cc:	e0bffb8b 	ldhu	r2,-18(fp)
 40016d0:	1884b03a 	or	r2,r3,r2
 40016d4:	e0bf7a0d 	sth	r2,-536(fp)

			assert(huff_ac_len[sym1] != 0);
 40016d8:	e0bf7a0b 	ldhu	r2,-536(fp)
 40016dc:	e0c00317 	ldw	r3,12(fp)
 40016e0:	1885883a 	add	r2,r3,r2
 40016e4:	10800003 	ldbu	r2,0(r2)
 40016e8:	10803fcc 	andi	r2,r2,255
 40016ec:	1000081e 	bne	r2,zero,4001710 <tjei_encode_and_write_MCU+0x3d8>
 40016f0:	01c10074 	movhi	r7,1025
 40016f4:	39f4be04 	addi	r7,r7,-11528
 40016f8:	01810074 	movhi	r6,1025
 40016fc:	31b4f804 	addi	r6,r6,-11296
 4001700:	0140c884 	movi	r5,802
 4001704:	01010074 	movhi	r4,1025
 4001708:	2134a704 	addi	r4,r4,-11620
 400170c:	4004a940 	call	4004a94 <__assert_func>

			// Write symbol 1  --- (RUNLENGTH, SIZE)
			tjei_write_bits(state, bitbuffer, location, huff_ac_len[sym1], huff_ac_code[sym1]);
 4001710:	e0bf7a0b 	ldhu	r2,-536(fp)
 4001714:	e0c00317 	ldw	r3,12(fp)
 4001718:	1885883a 	add	r2,r3,r2
 400171c:	10800003 	ldbu	r2,0(r2)
 4001720:	10c03fcc 	andi	r3,r2,255
 4001724:	e0bf7a0b 	ldhu	r2,-536(fp)
 4001728:	1085883a 	add	r2,r2,r2
 400172c:	1009883a 	mov	r4,r2
 4001730:	e0800417 	ldw	r2,16(fp)
 4001734:	1105883a 	add	r2,r2,r4
 4001738:	1080000b 	ldhu	r2,0(r2)
 400173c:	10bfffcc 	andi	r2,r2,65535
 4001740:	d8800015 	stw	r2,0(sp)
 4001744:	180f883a 	mov	r7,r3
 4001748:	e1800717 	ldw	r6,28(fp)
 400174c:	e1400617 	ldw	r5,24(fp)
 4001750:	e13ffc17 	ldw	r4,-16(fp)
 4001754:	40009e00 	call	40009e0 <tjei_write_bits>
			// Write symbol 2  --- (AMPLITUDE)
			tjei_write_bits(state, bitbuffer, location, vli[1], vli[0]);
 4001758:	e0bffb8b 	ldhu	r2,-18(fp)
 400175c:	10ffffcc 	andi	r3,r2,65535
 4001760:	e0bffb0b 	ldhu	r2,-20(fp)
 4001764:	10bfffcc 	andi	r2,r2,65535
 4001768:	d8800015 	stw	r2,0(sp)
 400176c:	180f883a 	mov	r7,r3
 4001770:	e1800717 	ldw	r6,28(fp)
 4001774:	e1400617 	ldw	r5,24(fp)
 4001778:	e13ffc17 	ldw	r4,-16(fp)
 400177c:	40009e00 	call	40009e0 <tjei_write_bits>
				last_non_zero_i = i;
				break;
			}
		}

		for (int i = 1; i <= last_non_zero_i; ++i) {
 4001780:	e0bf7517 	ldw	r2,-556(fp)
 4001784:	10800044 	addi	r2,r2,1
 4001788:	e0bf7515 	stw	r2,-556(fp)
 400178c:	e0bf7517 	ldw	r2,-556(fp)
 4001790:	e0ff7317 	ldw	r3,-564(fp)
 4001794:	18bf860e 	bge	r3,r2,40015b0 <__alt_data_end+0xfc0015b0>
			tjei_write_bits(state, bitbuffer, location, huff_ac_len[sym1], huff_ac_code[sym1]);
			// Write symbol 2  --- (AMPLITUDE)
			tjei_write_bits(state, bitbuffer, location, vli[1], vli[0]);
		}

		if (last_non_zero_i != 63) {
 4001798:	e0bf7317 	ldw	r2,-564(fp)
 400179c:	10800fe0 	cmpeqi	r2,r2,63
 40017a0:	10000d1e 	bne	r2,zero,40017d8 <tjei_encode_and_write_MCU+0x4a0>
			// write EOB HUFF(00,00)
			tjei_write_bits(state, bitbuffer, location, huff_ac_len[0], huff_ac_code[0]);
 40017a4:	e0800317 	ldw	r2,12(fp)
 40017a8:	10800003 	ldbu	r2,0(r2)
 40017ac:	10c03fcc 	andi	r3,r2,255
 40017b0:	e0800417 	ldw	r2,16(fp)
 40017b4:	1080000b 	ldhu	r2,0(r2)
 40017b8:	10bfffcc 	andi	r2,r2,65535
 40017bc:	d8800015 	stw	r2,0(sp)
 40017c0:	180f883a 	mov	r7,r3
 40017c4:	e1800717 	ldw	r6,28(fp)
 40017c8:	e1400617 	ldw	r5,24(fp)
 40017cc:	e13ffc17 	ldw	r4,-16(fp)
 40017d0:	40009e00 	call	40009e0 <tjei_write_bits>
		}
		return;
 40017d4:	0001883a 	nop
 40017d8:	0001883a 	nop
	}
 40017dc:	e037883a 	mov	sp,fp
 40017e0:	dfc00117 	ldw	ra,4(sp)
 40017e4:	df000017 	ldw	fp,0(sp)
 40017e8:	dec00204 	addi	sp,sp,8
 40017ec:	f800283a 	ret

040017f0 <tjei_huff_expand>:
	};
#endif

	// Set up huffman tables in state.
	static void tjei_huff_expand(TJEState* state)
	{
 40017f0:	defceb04 	addi	sp,sp,-3156
 40017f4:	dfc31415 	stw	ra,3152(sp)
 40017f8:	df031315 	stw	fp,3148(sp)
 40017fc:	dcc31215 	stw	r19,3144(sp)
 4001800:	dc831115 	stw	r18,3140(sp)
 4001804:	dc431015 	stw	r17,3136(sp)
 4001808:	dc030f15 	stw	r16,3132(sp)
 400180c:	df031304 	addi	fp,sp,3148
 4001810:	e13ffb15 	stw	r4,-20(fp)
		assert(state);
 4001814:	e0bffb17 	ldw	r2,-20(fp)
 4001818:	1000081e 	bne	r2,zero,400183c <tjei_huff_expand+0x4c>
 400181c:	01c10074 	movhi	r7,1025
 4001820:	39f4c404 	addi	r7,r7,-11504
 4001824:	01810074 	movhi	r6,1025
 4001828:	31b4ff04 	addi	r6,r6,-11268
 400182c:	0140d0c4 	movi	r5,835
 4001830:	01010074 	movhi	r4,1025
 4001834:	2134a704 	addi	r4,r4,-11620
 4001838:	4004a940 	call	4004a94 <__assert_func>

		state->ht_bits[TJEI_LUMA_DC] = tjei_default_ht_luma_dc_len;
 400183c:	e0fffb17 	ldw	r3,-20(fp)
 4001840:	00810074 	movhi	r2,1025
 4001844:	10b41b04 	addi	r2,r2,-12180
 4001848:	18830115 	stw	r2,3076(r3)
		state->ht_bits[TJEI_LUMA_AC] = tjei_default_ht_luma_ac_len;
 400184c:	e0fffb17 	ldw	r3,-20(fp)
 4001850:	00810074 	movhi	r2,1025
 4001854:	10b42904 	addi	r2,r2,-12124
 4001858:	18830215 	stw	r2,3080(r3)
		state->ht_bits[TJEI_CHROMA_DC] = tjei_default_ht_chroma_dc_len;
 400185c:	e0fffb17 	ldw	r3,-20(fp)
 4001860:	00810074 	movhi	r2,1025
 4001864:	10b42204 	addi	r2,r2,-12152
 4001868:	18830315 	stw	r2,3084(r3)
		state->ht_bits[TJEI_CHROMA_AC] = tjei_default_ht_chroma_ac_len;
 400186c:	e0fffb17 	ldw	r3,-20(fp)
 4001870:	00810074 	movhi	r2,1025
 4001874:	10b45584 	addi	r2,r2,-11946
 4001878:	18830415 	stw	r2,3088(r3)

		state->ht_vals[TJEI_LUMA_DC] = tjei_default_ht_luma_dc;
 400187c:	e0fffb17 	ldw	r3,-20(fp)
 4001880:	00810074 	movhi	r2,1025
 4001884:	10b41f04 	addi	r2,r2,-12164
 4001888:	18830515 	stw	r2,3092(r3)
		state->ht_vals[TJEI_LUMA_AC] = tjei_default_ht_luma_ac;
 400188c:	e0fffb17 	ldw	r3,-20(fp)
 4001890:	00810074 	movhi	r2,1025
 4001894:	10b42d04 	addi	r2,r2,-12108
 4001898:	18830615 	stw	r2,3096(r3)
		state->ht_vals[TJEI_CHROMA_DC] = tjei_default_ht_chroma_dc;
 400189c:	e0fffb17 	ldw	r3,-20(fp)
 40018a0:	00810074 	movhi	r2,1025
 40018a4:	10b42604 	addi	r2,r2,-12136
 40018a8:	18830715 	stw	r2,3100(r3)
		state->ht_vals[TJEI_CHROMA_AC] = tjei_default_ht_chroma_ac;
 40018ac:	e0fffb17 	ldw	r3,-20(fp)
 40018b0:	00810074 	movhi	r2,1025
 40018b4:	10b45984 	addi	r2,r2,-11930
 40018b8:	18830815 	stw	r2,3104(r3)

		// How many codes in total for each of LUMA_(DC|AC) and CHROMA_(DC|AC)
		int32_t spec_tables_len[4] = { 0 };
 40018bc:	e03cf615 	stw	zero,-3112(fp)
 40018c0:	e03cf715 	stw	zero,-3108(fp)
 40018c4:	e03cf815 	stw	zero,-3104(fp)
 40018c8:	e03cf915 	stw	zero,-3100(fp)

		for (int i = 0; i < 4; ++i) {
 40018cc:	e03cf015 	stw	zero,-3136(fp)
 40018d0:	00002506 	br	4001968 <tjei_huff_expand+0x178>
			for (int k = 0; k < 16; ++k) {
 40018d4:	e03cf115 	stw	zero,-3132(fp)
 40018d8:	00001d06 	br	4001950 <tjei_huff_expand+0x160>
				spec_tables_len[i] += state->ht_bits[i][k];
 40018dc:	e0bcf017 	ldw	r2,-3136(fp)
 40018e0:	1085883a 	add	r2,r2,r2
 40018e4:	1085883a 	add	r2,r2,r2
 40018e8:	e0fcf004 	addi	r3,fp,-3136
 40018ec:	1885883a 	add	r2,r3,r2
 40018f0:	10800604 	addi	r2,r2,24
 40018f4:	10c00017 	ldw	r3,0(r2)
 40018f8:	e13ffb17 	ldw	r4,-20(fp)
 40018fc:	e0bcf017 	ldw	r2,-3136(fp)
 4001900:	1080c044 	addi	r2,r2,769
 4001904:	1085883a 	add	r2,r2,r2
 4001908:	1085883a 	add	r2,r2,r2
 400190c:	2085883a 	add	r2,r4,r2
 4001910:	11000017 	ldw	r4,0(r2)
 4001914:	e0bcf117 	ldw	r2,-3132(fp)
 4001918:	2085883a 	add	r2,r4,r2
 400191c:	10800003 	ldbu	r2,0(r2)
 4001920:	10803fcc 	andi	r2,r2,255
 4001924:	1887883a 	add	r3,r3,r2
 4001928:	e0bcf017 	ldw	r2,-3136(fp)
 400192c:	1085883a 	add	r2,r2,r2
 4001930:	1085883a 	add	r2,r2,r2
 4001934:	e13cf004 	addi	r4,fp,-3136
 4001938:	2085883a 	add	r2,r4,r2
 400193c:	10800604 	addi	r2,r2,24
 4001940:	10c00015 	stw	r3,0(r2)

		// How many codes in total for each of LUMA_(DC|AC) and CHROMA_(DC|AC)
		int32_t spec_tables_len[4] = { 0 };

		for (int i = 0; i < 4; ++i) {
			for (int k = 0; k < 16; ++k) {
 4001944:	e0bcf117 	ldw	r2,-3132(fp)
 4001948:	10800044 	addi	r2,r2,1
 400194c:	e0bcf115 	stw	r2,-3132(fp)
 4001950:	e0bcf117 	ldw	r2,-3132(fp)
 4001954:	10800410 	cmplti	r2,r2,16
 4001958:	103fe01e 	bne	r2,zero,40018dc <__alt_data_end+0xfc0018dc>
		state->ht_vals[TJEI_CHROMA_AC] = tjei_default_ht_chroma_ac;

		// How many codes in total for each of LUMA_(DC|AC) and CHROMA_(DC|AC)
		int32_t spec_tables_len[4] = { 0 };

		for (int i = 0; i < 4; ++i) {
 400195c:	e0bcf017 	ldw	r2,-3136(fp)
 4001960:	10800044 	addi	r2,r2,1
 4001964:	e0bcf015 	stw	r2,-3136(fp)
 4001968:	e0bcf017 	ldw	r2,-3136(fp)
 400196c:	10800110 	cmplti	r2,r2,4
 4001970:	103fd81e 	bne	r2,zero,40018d4 <__alt_data_end+0xfc0018d4>
		}

		// Fill out the extended tables..
		uint8_t huffsize[4][257];
		uint16_t huffcode[4][256];
		for (int i = 0; i < 4; ++i) {
 4001974:	e03cf215 	stw	zero,-3128(fp)
 4001978:	00003a06 	br	4001a64 <tjei_huff_expand+0x274>
			assert(256 >= spec_tables_len[i]);
 400197c:	e0bcf217 	ldw	r2,-3128(fp)
 4001980:	1085883a 	add	r2,r2,r2
 4001984:	1085883a 	add	r2,r2,r2
 4001988:	e0fcf004 	addi	r3,fp,-3136
 400198c:	1885883a 	add	r2,r3,r2
 4001990:	10800604 	addi	r2,r2,24
 4001994:	10800017 	ldw	r2,0(r2)
 4001998:	10804050 	cmplti	r2,r2,257
 400199c:	1000081e 	bne	r2,zero,40019c0 <tjei_huff_expand+0x1d0>
 40019a0:	01c10074 	movhi	r7,1025
 40019a4:	39f4c604 	addi	r7,r7,-11496
 40019a8:	01810074 	movhi	r6,1025
 40019ac:	31b4ff04 	addi	r6,r6,-11268
 40019b0:	0140d704 	movi	r5,860
 40019b4:	01010074 	movhi	r4,1025
 40019b8:	2134a704 	addi	r4,r4,-11620
 40019bc:	4004a940 	call	4004a94 <__assert_func>
			tjei_huff_get_code_lengths(huffsize[i], state->ht_bits[i]);
 40019c0:	e4bcfa04 	addi	r18,fp,-3096
 40019c4:	01404044 	movi	r5,257
 40019c8:	e13cf217 	ldw	r4,-3128(fp)
 40019cc:	400359c0 	call	400359c <__mulsi3>
 40019d0:	9089883a 	add	r4,r18,r2
 40019d4:	e0fffb17 	ldw	r3,-20(fp)
 40019d8:	e0bcf217 	ldw	r2,-3128(fp)
 40019dc:	1080c044 	addi	r2,r2,769
 40019e0:	1085883a 	add	r2,r2,r2
 40019e4:	1085883a 	add	r2,r2,r2
 40019e8:	1885883a 	add	r2,r3,r2
 40019ec:	10800017 	ldw	r2,0(r2)
 40019f0:	100b883a 	mov	r5,r2
 40019f4:	40006740 	call	4000674 <tjei_huff_get_code_lengths>
			tjei_huff_get_codes(huffcode[i], huffsize[i], spec_tables_len[i]);
 40019f8:	e0fdfb04 	addi	r3,fp,-2068
 40019fc:	e0bcf217 	ldw	r2,-3128(fp)
 4001a00:	1004927a 	slli	r2,r2,9
 4001a04:	18a7883a 	add	r19,r3,r2
 4001a08:	e4bcfa04 	addi	r18,fp,-3096
 4001a0c:	01404044 	movi	r5,257
 4001a10:	e13cf217 	ldw	r4,-3128(fp)
 4001a14:	400359c0 	call	400359c <__mulsi3>
 4001a18:	9087883a 	add	r3,r18,r2
 4001a1c:	e0bcf217 	ldw	r2,-3128(fp)
 4001a20:	1085883a 	add	r2,r2,r2
 4001a24:	1085883a 	add	r2,r2,r2
 4001a28:	e13cf004 	addi	r4,fp,-3136
 4001a2c:	2085883a 	add	r2,r4,r2
 4001a30:	10800604 	addi	r2,r2,24
 4001a34:	10800017 	ldw	r2,0(r2)
 4001a38:	1021883a 	mov	r16,r2
 4001a3c:	1005d7fa 	srai	r2,r2,31
 4001a40:	1023883a 	mov	r17,r2
 4001a44:	800d883a 	mov	r6,r16
 4001a48:	880f883a 	mov	r7,r17
 4001a4c:	180b883a 	mov	r5,r3
 4001a50:	9809883a 	mov	r4,r19
 4001a54:	40007240 	call	4000724 <tjei_huff_get_codes>
		}

		// Fill out the extended tables..
		uint8_t huffsize[4][257];
		uint16_t huffcode[4][256];
		for (int i = 0; i < 4; ++i) {
 4001a58:	e0bcf217 	ldw	r2,-3128(fp)
 4001a5c:	10800044 	addi	r2,r2,1
 4001a60:	e0bcf215 	stw	r2,-3128(fp)
 4001a64:	e0bcf217 	ldw	r2,-3128(fp)
 4001a68:	10800110 	cmplti	r2,r2,4
 4001a6c:	103fc31e 	bne	r2,zero,400197c <__alt_data_end+0xfc00197c>
			assert(256 >= spec_tables_len[i]);
			tjei_huff_get_code_lengths(huffsize[i], state->ht_bits[i]);
			tjei_huff_get_codes(huffcode[i], huffsize[i], spec_tables_len[i]);
		}
		for (int i = 0; i < 4; ++i) {
 4001a70:	e03cf315 	stw	zero,-3124(fp)
 4001a74:	00003206 	br	4001b40 <tjei_huff_expand+0x350>
			int64_t count = spec_tables_len[i];
 4001a78:	e0bcf317 	ldw	r2,-3124(fp)
 4001a7c:	1085883a 	add	r2,r2,r2
 4001a80:	1085883a 	add	r2,r2,r2
 4001a84:	e0fcf004 	addi	r3,fp,-3136
 4001a88:	1885883a 	add	r2,r3,r2
 4001a8c:	10800604 	addi	r2,r2,24
 4001a90:	10800017 	ldw	r2,0(r2)
 4001a94:	e0bcf415 	stw	r2,-3120(fp)
 4001a98:	1005d7fa 	srai	r2,r2,31
 4001a9c:	e0bcf515 	stw	r2,-3116(fp)
			tjei_huff_get_extended(state->ehuffsize[i],
 4001aa0:	01404044 	movi	r5,257
 4001aa4:	e13cf317 	ldw	r4,-3124(fp)
 4001aa8:	400359c0 	call	400359c <__mulsi3>
 4001aac:	1007883a 	mov	r3,r2
 4001ab0:	e0bffb17 	ldw	r2,-20(fp)
 4001ab4:	10e3883a 	add	r17,r2,r3
				state->ehuffcode[i],
 4001ab8:	e0bcf317 	ldw	r2,-3124(fp)
 4001abc:	1004927a 	slli	r2,r2,9
 4001ac0:	10810104 	addi	r2,r2,1028
 4001ac4:	e0fffb17 	ldw	r3,-20(fp)
 4001ac8:	18a5883a 	add	r18,r3,r2
			tjei_huff_get_code_lengths(huffsize[i], state->ht_bits[i]);
			tjei_huff_get_codes(huffcode[i], huffsize[i], spec_tables_len[i]);
		}
		for (int i = 0; i < 4; ++i) {
			int64_t count = spec_tables_len[i];
			tjei_huff_get_extended(state->ehuffsize[i],
 4001acc:	e0fffb17 	ldw	r3,-20(fp)
 4001ad0:	e0bcf317 	ldw	r2,-3124(fp)
 4001ad4:	1080c144 	addi	r2,r2,773
 4001ad8:	1085883a 	add	r2,r2,r2
 4001adc:	1085883a 	add	r2,r2,r2
 4001ae0:	1885883a 	add	r2,r3,r2
 4001ae4:	14c00017 	ldw	r19,0(r2)
 4001ae8:	e43cfa04 	addi	r16,fp,-3096
 4001aec:	01404044 	movi	r5,257
 4001af0:	e13cf317 	ldw	r4,-3124(fp)
 4001af4:	400359c0 	call	400359c <__mulsi3>
 4001af8:	8089883a 	add	r4,r16,r2
 4001afc:	e0fdfb04 	addi	r3,fp,-2068
 4001b00:	e0bcf317 	ldw	r2,-3124(fp)
 4001b04:	1004927a 	slli	r2,r2,9
 4001b08:	1885883a 	add	r2,r3,r2
 4001b0c:	e0fcf417 	ldw	r3,-3120(fp)
 4001b10:	d8c00115 	stw	r3,4(sp)
 4001b14:	e0fcf517 	ldw	r3,-3116(fp)
 4001b18:	d8c00215 	stw	r3,8(sp)
 4001b1c:	d8800015 	stw	r2,0(sp)
 4001b20:	200f883a 	mov	r7,r4
 4001b24:	980d883a 	mov	r6,r19
 4001b28:	900b883a 	mov	r5,r18
 4001b2c:	8809883a 	mov	r4,r17
 4001b30:	40008540 	call	4000854 <tjei_huff_get_extended>
		for (int i = 0; i < 4; ++i) {
			assert(256 >= spec_tables_len[i]);
			tjei_huff_get_code_lengths(huffsize[i], state->ht_bits[i]);
			tjei_huff_get_codes(huffcode[i], huffsize[i], spec_tables_len[i]);
		}
		for (int i = 0; i < 4; ++i) {
 4001b34:	e0bcf317 	ldw	r2,-3124(fp)
 4001b38:	10800044 	addi	r2,r2,1
 4001b3c:	e0bcf315 	stw	r2,-3124(fp)
 4001b40:	e0bcf317 	ldw	r2,-3124(fp)
 4001b44:	10800110 	cmplti	r2,r2,4
 4001b48:	103fcb1e 	bne	r2,zero,4001a78 <__alt_data_end+0xfc001a78>
				state->ehuffcode[i],
				state->ht_vals[i],
				&huffsize[i][0],
				&huffcode[i][0], count);
		}
	}
 4001b4c:	0001883a 	nop
 4001b50:	e6fffc04 	addi	sp,fp,-16
 4001b54:	dfc00517 	ldw	ra,20(sp)
 4001b58:	df000417 	ldw	fp,16(sp)
 4001b5c:	dcc00317 	ldw	r19,12(sp)
 4001b60:	dc800217 	ldw	r18,8(sp)
 4001b64:	dc400117 	ldw	r17,4(sp)
 4001b68:	dc000017 	ldw	r16,0(sp)
 4001b6c:	dec00604 	addi	sp,sp,24
 4001b70:	f800283a 	ret

04001b74 <tjei_encode_main>:
	static int tjei_encode_main(TJEState* state,
		const unsigned char* src_data,
		const int width,
		const int height,
		const int src_num_components)
	{
 4001b74:	defe8204 	addi	sp,sp,-1528
 4001b78:	dfc17d15 	stw	ra,1524(sp)
 4001b7c:	df017c15 	stw	fp,1520(sp)
 4001b80:	dc417b15 	stw	r17,1516(sp)
 4001b84:	dc017a15 	stw	r16,1512(sp)
 4001b88:	df017c04 	addi	fp,sp,1520
 4001b8c:	e13ffa15 	stw	r4,-24(fp)
 4001b90:	e17ffb15 	stw	r5,-20(fp)
 4001b94:	e1bffc15 	stw	r6,-16(fp)
 4001b98:	e1fffd15 	stw	r7,-12(fp)
		if (src_num_components != 3 && src_num_components != 4) {
 4001b9c:	e0800217 	ldw	r2,8(fp)
 4001ba0:	108000e0 	cmpeqi	r2,r2,3
 4001ba4:	1000051e 	bne	r2,zero,4001bbc <tjei_encode_main+0x48>
 4001ba8:	e0800217 	ldw	r2,8(fp)
 4001bac:	10800120 	cmpeqi	r2,r2,4
 4001bb0:	1000021e 	bne	r2,zero,4001bbc <tjei_encode_main+0x48>
			return 0;
 4001bb4:	0005883a 	mov	r2,zero
 4001bb8:	00037406 	br	400298c <tjei_encode_main+0xe18>
		}

		if (width > 0xffff || height > 0xffff) {
 4001bbc:	e0bffc17 	ldw	r2,-16(fp)
 4001bc0:	00ffffd4 	movui	r3,65535
 4001bc4:	18800316 	blt	r3,r2,4001bd4 <tjei_encode_main+0x60>
 4001bc8:	e0bffd17 	ldw	r2,-12(fp)
 4001bcc:	00ffffd4 	movui	r3,65535
 4001bd0:	1880020e 	bge	r3,r2,4001bdc <tjei_encode_main+0x68>
			return 0;
 4001bd4:	0005883a 	mov	r2,zero
 4001bd8:	00036c06 	br	400298c <tjei_encode_main+0xe18>
			1.0f, 1.387039845f, 1.306562965f, 1.175875602f,
			1.0f, 0.785694958f, 0.541196100f, 0.275899379f
		};

		// build (de)quantization tables
		for (int y = 0; y < 8; y++) {
 4001bdc:	e03e8a15 	stw	zero,-1496(fp)
 4001be0:	00008306 	br	4001df0 <tjei_encode_main+0x27c>
			for (int x = 0; x < 8; x++) {
 4001be4:	e03e8b15 	stw	zero,-1492(fp)
 4001be8:	00007b06 	br	4001dd8 <tjei_encode_main+0x264>
				int i = y * 8 + x;
 4001bec:	e0be8a17 	ldw	r2,-1496(fp)
 4001bf0:	100690fa 	slli	r3,r2,3
 4001bf4:	e0be8b17 	ldw	r2,-1492(fp)
 4001bf8:	1885883a 	add	r2,r3,r2
 4001bfc:	e0be9315 	stw	r2,-1460(fp)
				pqt.luma[y * 8 + x] = 1.0f / (8 * aan_scales[x] * aan_scales[y] * state->qt_luma[tjei_zig_zag[i]]);
 4001c00:	e0be8a17 	ldw	r2,-1496(fp)
 4001c04:	100690fa 	slli	r3,r2,3
 4001c08:	e0be8b17 	ldw	r2,-1492(fp)
 4001c0c:	18a1883a 	add	r16,r3,r2
 4001c10:	00810074 	movhi	r2,1025
 4001c14:	10b50404 	addi	r2,r2,-11248
 4001c18:	e0fe8b17 	ldw	r3,-1492(fp)
 4001c1c:	18c7883a 	add	r3,r3,r3
 4001c20:	18c7883a 	add	r3,r3,r3
 4001c24:	10c5883a 	add	r2,r2,r3
 4001c28:	10c00017 	ldw	r3,0(r2)
 4001c2c:	01504034 	movhi	r5,16640
 4001c30:	1809883a 	mov	r4,r3
 4001c34:	4003f880 	call	4003f88 <__mulsf3>
 4001c38:	1007883a 	mov	r3,r2
 4001c3c:	1809883a 	mov	r4,r3
 4001c40:	00810074 	movhi	r2,1025
 4001c44:	10b50404 	addi	r2,r2,-11248
 4001c48:	e0fe8a17 	ldw	r3,-1496(fp)
 4001c4c:	18c7883a 	add	r3,r3,r3
 4001c50:	18c7883a 	add	r3,r3,r3
 4001c54:	10c5883a 	add	r2,r2,r3
 4001c58:	10c00017 	ldw	r3,0(r2)
 4001c5c:	180b883a 	mov	r5,r3
 4001c60:	4003f880 	call	4003f88 <__mulsf3>
 4001c64:	1007883a 	mov	r3,r2
 4001c68:	1823883a 	mov	r17,r3
 4001c6c:	00810074 	movhi	r2,1025
 4001c70:	10b48204 	addi	r2,r2,-11768
 4001c74:	e0fe9317 	ldw	r3,-1460(fp)
 4001c78:	10c5883a 	add	r2,r2,r3
 4001c7c:	10800003 	ldbu	r2,0(r2)
 4001c80:	10803fcc 	andi	r2,r2,255
 4001c84:	e0fffa17 	ldw	r3,-24(fp)
 4001c88:	1885883a 	add	r2,r3,r2
 4001c8c:	10830904 	addi	r2,r2,3108
 4001c90:	10800003 	ldbu	r2,0(r2)
 4001c94:	10803fcc 	andi	r2,r2,255
 4001c98:	1009883a 	mov	r4,r2
 4001c9c:	400490c0 	call	400490c <__floatsisf>
 4001ca0:	1007883a 	mov	r3,r2
 4001ca4:	180b883a 	mov	r5,r3
 4001ca8:	8809883a 	mov	r4,r17
 4001cac:	4003f880 	call	4003f88 <__mulsf3>
 4001cb0:	1007883a 	mov	r3,r2
 4001cb4:	1805883a 	mov	r2,r3
 4001cb8:	100b883a 	mov	r5,r2
 4001cbc:	010fe034 	movhi	r4,16256
 4001cc0:	4003a8c0 	call	4003a8c <__divsf3>
 4001cc4:	1009883a 	mov	r4,r2
 4001cc8:	2007883a 	mov	r3,r4
 4001ccc:	80801004 	addi	r2,r16,64
 4001cd0:	1085883a 	add	r2,r2,r2
 4001cd4:	1085883a 	add	r2,r2,r2
 4001cd8:	e13e8a04 	addi	r4,fp,-1496
 4001cdc:	2085883a 	add	r2,r4,r2
 4001ce0:	10801204 	addi	r2,r2,72
 4001ce4:	10c00015 	stw	r3,0(r2)
				pqt.chroma[y * 8 + x] = 1.0f / (8 * aan_scales[x] * aan_scales[y] * state->qt_chroma[tjei_zig_zag[i]]);
 4001ce8:	e0be8a17 	ldw	r2,-1496(fp)
 4001cec:	100690fa 	slli	r3,r2,3
 4001cf0:	e0be8b17 	ldw	r2,-1492(fp)
 4001cf4:	18a1883a 	add	r16,r3,r2
 4001cf8:	00810074 	movhi	r2,1025
 4001cfc:	10b50404 	addi	r2,r2,-11248
 4001d00:	e0fe8b17 	ldw	r3,-1492(fp)
 4001d04:	18c7883a 	add	r3,r3,r3
 4001d08:	18c7883a 	add	r3,r3,r3
 4001d0c:	10c5883a 	add	r2,r2,r3
 4001d10:	10c00017 	ldw	r3,0(r2)
 4001d14:	01504034 	movhi	r5,16640
 4001d18:	1809883a 	mov	r4,r3
 4001d1c:	4003f880 	call	4003f88 <__mulsf3>
 4001d20:	1007883a 	mov	r3,r2
 4001d24:	1809883a 	mov	r4,r3
 4001d28:	00810074 	movhi	r2,1025
 4001d2c:	10b50404 	addi	r2,r2,-11248
 4001d30:	e0fe8a17 	ldw	r3,-1496(fp)
 4001d34:	18c7883a 	add	r3,r3,r3
 4001d38:	18c7883a 	add	r3,r3,r3
 4001d3c:	10c5883a 	add	r2,r2,r3
 4001d40:	10c00017 	ldw	r3,0(r2)
 4001d44:	180b883a 	mov	r5,r3
 4001d48:	4003f880 	call	4003f88 <__mulsf3>
 4001d4c:	1007883a 	mov	r3,r2
 4001d50:	1823883a 	mov	r17,r3
 4001d54:	00810074 	movhi	r2,1025
 4001d58:	10b48204 	addi	r2,r2,-11768
 4001d5c:	e0fe9317 	ldw	r3,-1460(fp)
 4001d60:	10c5883a 	add	r2,r2,r3
 4001d64:	10800003 	ldbu	r2,0(r2)
 4001d68:	10803fcc 	andi	r2,r2,255
 4001d6c:	e0fffa17 	ldw	r3,-24(fp)
 4001d70:	1885883a 	add	r2,r3,r2
 4001d74:	10831904 	addi	r2,r2,3172
 4001d78:	10800003 	ldbu	r2,0(r2)
 4001d7c:	10803fcc 	andi	r2,r2,255
 4001d80:	1009883a 	mov	r4,r2
 4001d84:	400490c0 	call	400490c <__floatsisf>
 4001d88:	1007883a 	mov	r3,r2
 4001d8c:	180b883a 	mov	r5,r3
 4001d90:	8809883a 	mov	r4,r17
 4001d94:	4003f880 	call	4003f88 <__mulsf3>
 4001d98:	1007883a 	mov	r3,r2
 4001d9c:	1805883a 	mov	r2,r3
 4001da0:	100b883a 	mov	r5,r2
 4001da4:	010fe034 	movhi	r4,16256
 4001da8:	4003a8c0 	call	4003a8c <__divsf3>
 4001dac:	1009883a 	mov	r4,r2
 4001db0:	2007883a 	mov	r3,r4
 4001db4:	8405883a 	add	r2,r16,r16
 4001db8:	1085883a 	add	r2,r2,r2
 4001dbc:	e13e8a04 	addi	r4,fp,-1496
 4001dc0:	2085883a 	add	r2,r4,r2
 4001dc4:	10801204 	addi	r2,r2,72
 4001dc8:	10c00015 	stw	r3,0(r2)
			1.0f, 0.785694958f, 0.541196100f, 0.275899379f
		};

		// build (de)quantization tables
		for (int y = 0; y < 8; y++) {
			for (int x = 0; x < 8; x++) {
 4001dcc:	e0be8b17 	ldw	r2,-1492(fp)
 4001dd0:	10800044 	addi	r2,r2,1
 4001dd4:	e0be8b15 	stw	r2,-1492(fp)
 4001dd8:	e0be8b17 	ldw	r2,-1492(fp)
 4001ddc:	10800210 	cmplti	r2,r2,8
 4001de0:	103f821e 	bne	r2,zero,4001bec <__alt_data_end+0xfc001bec>
			1.0f, 1.387039845f, 1.306562965f, 1.175875602f,
			1.0f, 0.785694958f, 0.541196100f, 0.275899379f
		};

		// build (de)quantization tables
		for (int y = 0; y < 8; y++) {
 4001de4:	e0be8a17 	ldw	r2,-1496(fp)
 4001de8:	10800044 	addi	r2,r2,1
 4001dec:	e0be8a15 	stw	r2,-1496(fp)
 4001df0:	e0be8a17 	ldw	r2,-1496(fp)
 4001df4:	10800210 	cmplti	r2,r2,8
 4001df8:	103f7a1e 	bne	r2,zero,4001be4 <__alt_data_end+0xfc001be4>
#endif

		{ // Write header
			TJEJPEGHeader header;
			// JFIF header.
			header.SOI = tjei_be_word(0xffd8);  // Sequential DCT
 4001dfc:	013ff614 	movui	r4,65496
 4001e00:	400026c0 	call	400026c <tjei_be_word>
 4001e04:	e0bfe18d 	sth	r2,-122(fp)
			header.APP0 = tjei_be_word(0xffe0);
 4001e08:	013ff814 	movui	r4,65504
 4001e0c:	400026c0 	call	400026c <tjei_be_word>
 4001e10:	e0bfe20d 	sth	r2,-120(fp)

			uint16_t jfif_len = sizeof(TJEJPEGHeader) - 4 /*SOI & APP0 markers*/;
 4001e14:	00800404 	movi	r2,16
 4001e18:	e0be940d 	sth	r2,-1456(fp)
			header.jfif_len = tjei_be_word(jfif_len);
 4001e1c:	e0be940b 	ldhu	r2,-1456(fp)
 4001e20:	1009883a 	mov	r4,r2
 4001e24:	400026c0 	call	400026c <tjei_be_word>
 4001e28:	e0bfe28d 	sth	r2,-118(fp)
			memcpy(header.jfif_id, (void*)tjeik_jfif_id, 5);
 4001e2c:	d0a0000b 	ldhu	r2,-32768(gp)
 4001e30:	e0bfe30d 	sth	r2,-116(fp)
 4001e34:	d0a0008b 	ldhu	r2,-32766(gp)
 4001e38:	e0bfe38d 	sth	r2,-114(fp)
 4001e3c:	d0a00103 	ldbu	r2,-32764(gp)
 4001e40:	e0bfe405 	stb	r2,-112(fp)
			header.version = tjei_be_word(0x0102);
 4001e44:	01004084 	movi	r4,258
 4001e48:	400026c0 	call	400026c <tjei_be_word>
 4001e4c:	100b883a 	mov	r5,r2
 4001e50:	28bfffcc 	andi	r2,r5,65535
 4001e54:	11003fcc 	andi	r4,r2,255
 4001e58:	e0bfe443 	ldbu	r2,-111(fp)
 4001e5c:	1004703a 	and	r2,r2,zero
 4001e60:	1007883a 	mov	r3,r2
 4001e64:	2005883a 	mov	r2,r4
 4001e68:	1884b03a 	or	r2,r3,r2
 4001e6c:	e0bfe445 	stb	r2,-111(fp)
 4001e70:	28bfffcc 	andi	r2,r5,65535
 4001e74:	1004d23a 	srli	r2,r2,8
 4001e78:	113fffcc 	andi	r4,r2,65535
 4001e7c:	e0bfe483 	ldbu	r2,-110(fp)
 4001e80:	1004703a 	and	r2,r2,zero
 4001e84:	1007883a 	mov	r3,r2
 4001e88:	2005883a 	mov	r2,r4
 4001e8c:	1884b03a 	or	r2,r3,r2
 4001e90:	e0bfe485 	stb	r2,-110(fp)
			header.units = 0x01;  // Dots-per-inch
 4001e94:	00800044 	movi	r2,1
 4001e98:	e0bfe4c5 	stb	r2,-109(fp)
			header.x_density = tjei_be_word(0x0060);  // 96 DPI
 4001e9c:	01001804 	movi	r4,96
 4001ea0:	400026c0 	call	400026c <tjei_be_word>
 4001ea4:	e0bfe50d 	sth	r2,-108(fp)
			header.y_density = tjei_be_word(0x0060);  // 96 DPI
 4001ea8:	01001804 	movi	r4,96
 4001eac:	400026c0 	call	400026c <tjei_be_word>
 4001eb0:	e0bfe58d 	sth	r2,-106(fp)
			header.x_thumb = 0;
 4001eb4:	e03fe605 	stb	zero,-104(fp)
			header.y_thumb = 0;
 4001eb8:	e03fe645 	stb	zero,-103(fp)
			tjei_write(state, &header, sizeof(TJEJPEGHeader), 1);
 4001ebc:	e0bfe184 	addi	r2,fp,-122
 4001ec0:	01c00044 	movi	r7,1
 4001ec4:	01800504 	movi	r6,20
 4001ec8:	100b883a 	mov	r5,r2
 4001ecc:	e13ffa17 	ldw	r4,-24(fp)
 4001ed0:	40002bc0 	call	40002bc <tjei_write>
		}
		{  // Write comment
			TJEJPEGComment com;
			uint16_t com_len = 2 + sizeof(tjeik_com_str) - 1;
 4001ed4:	00800784 	movi	r2,30
 4001ed8:	e0be948d 	sth	r2,-1454(fp)
			// Comment
			com.com = tjei_be_word(0xfffe);
 4001edc:	013fff94 	movui	r4,65534
 4001ee0:	400026c0 	call	400026c <tjei_be_word>
 4001ee4:	e0bff18d 	sth	r2,-58(fp)
			com.com_len = tjei_be_word(com_len);
 4001ee8:	e0be948b 	ldhu	r2,-1454(fp)
 4001eec:	1009883a 	mov	r4,r2
 4001ef0:	400026c0 	call	400026c <tjei_be_word>
 4001ef4:	e0bff20d 	sth	r2,-56(fp)
			memcpy(com.com_str, (void*)tjeik_com_str, sizeof(tjeik_com_str) - 1);
 4001ef8:	00810074 	movhi	r2,1025
 4001efc:	10b49204 	addi	r2,r2,-11704
 4001f00:	10c0000b 	ldhu	r3,0(r2)
 4001f04:	e0fff28d 	sth	r3,-54(fp)
 4001f08:	10c0008b 	ldhu	r3,2(r2)
 4001f0c:	e0fff30d 	sth	r3,-52(fp)
 4001f10:	10c0010b 	ldhu	r3,4(r2)
 4001f14:	e0fff38d 	sth	r3,-50(fp)
 4001f18:	10c0018b 	ldhu	r3,6(r2)
 4001f1c:	e0fff40d 	sth	r3,-48(fp)
 4001f20:	10c0020b 	ldhu	r3,8(r2)
 4001f24:	e0fff48d 	sth	r3,-46(fp)
 4001f28:	10c0028b 	ldhu	r3,10(r2)
 4001f2c:	e0fff50d 	sth	r3,-44(fp)
 4001f30:	10c0030b 	ldhu	r3,12(r2)
 4001f34:	e0fff58d 	sth	r3,-42(fp)
 4001f38:	10c0038b 	ldhu	r3,14(r2)
 4001f3c:	e0fff60d 	sth	r3,-40(fp)
 4001f40:	10c0040b 	ldhu	r3,16(r2)
 4001f44:	e0fff68d 	sth	r3,-38(fp)
 4001f48:	10c0048b 	ldhu	r3,18(r2)
 4001f4c:	e0fff70d 	sth	r3,-36(fp)
 4001f50:	10c0050b 	ldhu	r3,20(r2)
 4001f54:	e0fff78d 	sth	r3,-34(fp)
 4001f58:	10c0058b 	ldhu	r3,22(r2)
 4001f5c:	e0fff80d 	sth	r3,-32(fp)
 4001f60:	10c0060b 	ldhu	r3,24(r2)
 4001f64:	e0fff88d 	sth	r3,-30(fp)
 4001f68:	1080068b 	ldhu	r2,26(r2)
 4001f6c:	e0bff90d 	sth	r2,-28(fp)
			tjei_write(state, &com, sizeof(TJEJPEGComment), 1);
 4001f70:	e0bff184 	addi	r2,fp,-58
 4001f74:	01c00044 	movi	r7,1
 4001f78:	01800804 	movi	r6,32
 4001f7c:	100b883a 	mov	r5,r2
 4001f80:	e13ffa17 	ldw	r4,-24(fp)
 4001f84:	40002bc0 	call	40002bc <tjei_write>
		}

		// Write quantization tables.
		tjei_write_DQT(state, state->qt_luma, 0x00);
 4001f88:	e0bffa17 	ldw	r2,-24(fp)
 4001f8c:	10830904 	addi	r2,r2,3108
 4001f90:	000d883a 	mov	r6,zero
 4001f94:	100b883a 	mov	r5,r2
 4001f98:	e13ffa17 	ldw	r4,-24(fp)
 4001f9c:	40004080 	call	4000408 <tjei_write_DQT>
		tjei_write_DQT(state, state->qt_chroma, 0x01);
 4001fa0:	e0bffa17 	ldw	r2,-24(fp)
 4001fa4:	10831904 	addi	r2,r2,3172
 4001fa8:	01800044 	movi	r6,1
 4001fac:	100b883a 	mov	r5,r2
 4001fb0:	e13ffa17 	ldw	r4,-24(fp)
 4001fb4:	40004080 	call	4000408 <tjei_write_DQT>

		{  // Write the frame marker.
			TJEFrameHeader header;
			header.SOF = tjei_be_word(0xffc0);
 4001fb8:	013ff014 	movui	r4,65472
 4001fbc:	400026c0 	call	400026c <tjei_be_word>
 4001fc0:	e0bfe68d 	sth	r2,-102(fp)
			header.len = tjei_be_word(8 + 3 * 3);
 4001fc4:	01000444 	movi	r4,17
 4001fc8:	400026c0 	call	400026c <tjei_be_word>
 4001fcc:	e0bfe70d 	sth	r2,-100(fp)
			header.precision = 8;
 4001fd0:	00800204 	movi	r2,8
 4001fd4:	e0bfe785 	stb	r2,-98(fp)
			assert(width <= 0xffff);
 4001fd8:	e0bffc17 	ldw	r2,-16(fp)
 4001fdc:	00ffffd4 	movui	r3,65535
 4001fe0:	1880080e 	bge	r3,r2,4002004 <tjei_encode_main+0x490>
 4001fe4:	01c10074 	movhi	r7,1025
 4001fe8:	39f4cd04 	addi	r7,r7,-11468
 4001fec:	01810074 	movhi	r6,1025
 4001ff0:	31b50c04 	addi	r6,r6,-11216
 4001ff4:	0140edc4 	movi	r5,951
 4001ff8:	01010074 	movhi	r4,1025
 4001ffc:	2134a704 	addi	r4,r4,-11620
 4002000:	4004a940 	call	4004a94 <__assert_func>
			assert(height <= 0xffff);
 4002004:	e0bffd17 	ldw	r2,-12(fp)
 4002008:	00ffffd4 	movui	r3,65535
 400200c:	1880080e 	bge	r3,r2,4002030 <tjei_encode_main+0x4bc>
 4002010:	01c10074 	movhi	r7,1025
 4002014:	39f4d104 	addi	r7,r7,-11452
 4002018:	01810074 	movhi	r6,1025
 400201c:	31b50c04 	addi	r6,r6,-11216
 4002020:	0140ee04 	movi	r5,952
 4002024:	01010074 	movhi	r4,1025
 4002028:	2134a704 	addi	r4,r4,-11620
 400202c:	4004a940 	call	4004a94 <__assert_func>
			header.width = tjei_be_word((uint16_t)width);
 4002030:	e0bffc17 	ldw	r2,-16(fp)
 4002034:	10bfffcc 	andi	r2,r2,65535
 4002038:	1009883a 	mov	r4,r2
 400203c:	400026c0 	call	400026c <tjei_be_word>
 4002040:	100b883a 	mov	r5,r2
 4002044:	28bfffcc 	andi	r2,r5,65535
 4002048:	11003fcc 	andi	r4,r2,255
 400204c:	e0bfe843 	ldbu	r2,-95(fp)
 4002050:	1004703a 	and	r2,r2,zero
 4002054:	1007883a 	mov	r3,r2
 4002058:	2005883a 	mov	r2,r4
 400205c:	1884b03a 	or	r2,r3,r2
 4002060:	e0bfe845 	stb	r2,-95(fp)
 4002064:	28bfffcc 	andi	r2,r5,65535
 4002068:	1004d23a 	srli	r2,r2,8
 400206c:	113fffcc 	andi	r4,r2,65535
 4002070:	e0bfe883 	ldbu	r2,-94(fp)
 4002074:	1004703a 	and	r2,r2,zero
 4002078:	1007883a 	mov	r3,r2
 400207c:	2005883a 	mov	r2,r4
 4002080:	1884b03a 	or	r2,r3,r2
 4002084:	e0bfe885 	stb	r2,-94(fp)
			header.height = tjei_be_word((uint16_t)height);
 4002088:	e0bffd17 	ldw	r2,-12(fp)
 400208c:	10bfffcc 	andi	r2,r2,65535
 4002090:	1009883a 	mov	r4,r2
 4002094:	400026c0 	call	400026c <tjei_be_word>
 4002098:	100b883a 	mov	r5,r2
 400209c:	28bfffcc 	andi	r2,r5,65535
 40020a0:	11003fcc 	andi	r4,r2,255
 40020a4:	e0bfe7c3 	ldbu	r2,-97(fp)
 40020a8:	1004703a 	and	r2,r2,zero
 40020ac:	1007883a 	mov	r3,r2
 40020b0:	2005883a 	mov	r2,r4
 40020b4:	1884b03a 	or	r2,r3,r2
 40020b8:	e0bfe7c5 	stb	r2,-97(fp)
 40020bc:	28bfffcc 	andi	r2,r5,65535
 40020c0:	1004d23a 	srli	r2,r2,8
 40020c4:	113fffcc 	andi	r4,r2,65535
 40020c8:	e0bfe803 	ldbu	r2,-96(fp)
 40020cc:	1004703a 	and	r2,r2,zero
 40020d0:	1007883a 	mov	r3,r2
 40020d4:	2005883a 	mov	r2,r4
 40020d8:	1884b03a 	or	r2,r3,r2
 40020dc:	e0bfe805 	stb	r2,-96(fp)
			header.num_components = 3;
 40020e0:	008000c4 	movi	r2,3
 40020e4:	e0bfe8c5 	stb	r2,-93(fp)
			uint8_t tables[3] = {
 40020e8:	e03feb45 	stb	zero,-83(fp)
 40020ec:	00800044 	movi	r2,1
 40020f0:	e0bfeb85 	stb	r2,-82(fp)
 40020f4:	00800044 	movi	r2,1
 40020f8:	e0bfebc5 	stb	r2,-81(fp)
				0,  // Luma component gets luma table (see tjei_write_DQT call above.)
				1,  // Chroma component gets chroma table
				1,  // Chroma component gets chroma table
			};
			for (int i = 0; i < 3; ++i) {
 40020fc:	e03e8c15 	stw	zero,-1488(fp)
 4002100:	00001a06 	br	400216c <tjei_encode_main+0x5f8>
				TJEComponentSpec spec;
				spec.component_id = (uint8_t)(i + 1);  // No particular reason. Just 1, 2, 3.
 4002104:	e0be8c17 	ldw	r2,-1488(fp)
 4002108:	10800044 	addi	r2,r2,1
 400210c:	e0bfec05 	stb	r2,-80(fp)
				spec.sampling_factors = (uint8_t)0x11;
 4002110:	00800444 	movi	r2,17
 4002114:	e0bfec45 	stb	r2,-79(fp)
				spec.qt = tables[i];
 4002118:	e0ffeb44 	addi	r3,fp,-83
 400211c:	e0be8c17 	ldw	r2,-1488(fp)
 4002120:	1885883a 	add	r2,r3,r2
 4002124:	10800003 	ldbu	r2,0(r2)
 4002128:	e0bfec85 	stb	r2,-78(fp)

				header.component_spec[i] = spec;
 400212c:	e0fe8c17 	ldw	r3,-1488(fp)
 4002130:	1805883a 	mov	r2,r3
 4002134:	1085883a 	add	r2,r2,r2
 4002138:	10c5883a 	add	r2,r2,r3
 400213c:	e0fe8a04 	addi	r3,fp,-1496
 4002140:	1885883a 	add	r2,r3,r2
 4002144:	10815e84 	addi	r2,r2,1402
 4002148:	e0ffec03 	ldbu	r3,-80(fp)
 400214c:	10c00085 	stb	r3,2(r2)
 4002150:	e0ffec43 	ldbu	r3,-79(fp)
 4002154:	10c000c5 	stb	r3,3(r2)
 4002158:	e0ffec83 	ldbu	r3,-78(fp)
 400215c:	10c00105 	stb	r3,4(r2)
			uint8_t tables[3] = {
				0,  // Luma component gets luma table (see tjei_write_DQT call above.)
				1,  // Chroma component gets chroma table
				1,  // Chroma component gets chroma table
			};
			for (int i = 0; i < 3; ++i) {
 4002160:	e0be8c17 	ldw	r2,-1488(fp)
 4002164:	10800044 	addi	r2,r2,1
 4002168:	e0be8c15 	stw	r2,-1488(fp)
 400216c:	e0be8c17 	ldw	r2,-1488(fp)
 4002170:	108000d0 	cmplti	r2,r2,3
 4002174:	103fe31e 	bne	r2,zero,4002104 <__alt_data_end+0xfc002104>
				spec.qt = tables[i];

				header.component_spec[i] = spec;
			}
			// Write to file.
			tjei_write(state, &header, sizeof(TJEFrameHeader), 1);
 4002178:	e0bfe684 	addi	r2,fp,-102
 400217c:	01c00044 	movi	r7,1
 4002180:	018004c4 	movi	r6,19
 4002184:	100b883a 	mov	r5,r2
 4002188:	e13ffa17 	ldw	r4,-24(fp)
 400218c:	40002bc0 	call	40002bc <tjei_write>
		}

		tjei_write_DHT(state, state->ht_bits[TJEI_LUMA_DC], state->ht_vals[TJEI_LUMA_DC], TJEI_DC, 0);
 4002190:	e0bffa17 	ldw	r2,-24(fp)
 4002194:	10c30117 	ldw	r3,3076(r2)
 4002198:	e0bffa17 	ldw	r2,-24(fp)
 400219c:	10830517 	ldw	r2,3092(r2)
 40021a0:	d8000015 	stw	zero,0(sp)
 40021a4:	000f883a 	mov	r7,zero
 40021a8:	100d883a 	mov	r6,r2
 40021ac:	180b883a 	mov	r5,r3
 40021b0:	e13ffa17 	ldw	r4,-24(fp)
 40021b4:	40004e40 	call	40004e4 <tjei_write_DHT>
		tjei_write_DHT(state, state->ht_bits[TJEI_LUMA_AC], state->ht_vals[TJEI_LUMA_AC], TJEI_AC, 0);
 40021b8:	e0bffa17 	ldw	r2,-24(fp)
 40021bc:	10c30217 	ldw	r3,3080(r2)
 40021c0:	e0bffa17 	ldw	r2,-24(fp)
 40021c4:	10830617 	ldw	r2,3096(r2)
 40021c8:	d8000015 	stw	zero,0(sp)
 40021cc:	01c00044 	movi	r7,1
 40021d0:	100d883a 	mov	r6,r2
 40021d4:	180b883a 	mov	r5,r3
 40021d8:	e13ffa17 	ldw	r4,-24(fp)
 40021dc:	40004e40 	call	40004e4 <tjei_write_DHT>
		tjei_write_DHT(state, state->ht_bits[TJEI_CHROMA_DC], state->ht_vals[TJEI_CHROMA_DC], TJEI_DC, 1);
 40021e0:	e0bffa17 	ldw	r2,-24(fp)
 40021e4:	10c30317 	ldw	r3,3084(r2)
 40021e8:	e0bffa17 	ldw	r2,-24(fp)
 40021ec:	11030717 	ldw	r4,3100(r2)
 40021f0:	00800044 	movi	r2,1
 40021f4:	d8800015 	stw	r2,0(sp)
 40021f8:	000f883a 	mov	r7,zero
 40021fc:	200d883a 	mov	r6,r4
 4002200:	180b883a 	mov	r5,r3
 4002204:	e13ffa17 	ldw	r4,-24(fp)
 4002208:	40004e40 	call	40004e4 <tjei_write_DHT>
		tjei_write_DHT(state, state->ht_bits[TJEI_CHROMA_AC], state->ht_vals[TJEI_CHROMA_AC], TJEI_AC, 1);
 400220c:	e0bffa17 	ldw	r2,-24(fp)
 4002210:	10c30417 	ldw	r3,3088(r2)
 4002214:	e0bffa17 	ldw	r2,-24(fp)
 4002218:	11030817 	ldw	r4,3104(r2)
 400221c:	00800044 	movi	r2,1
 4002220:	d8800015 	stw	r2,0(sp)
 4002224:	01c00044 	movi	r7,1
 4002228:	200d883a 	mov	r6,r4
 400222c:	180b883a 	mov	r5,r3
 4002230:	e13ffa17 	ldw	r4,-24(fp)
 4002234:	40004e40 	call	40004e4 <tjei_write_DHT>

		// Write start of scan
		{
			TJEScanHeader header;
			header.SOS = tjei_be_word(0xffda);
 4002238:	013ff694 	movui	r4,65498
 400223c:	400026c0 	call	400026c <tjei_be_word>
 4002240:	100b883a 	mov	r5,r2
 4002244:	28bfffcc 	andi	r2,r5,65535
 4002248:	11003fcc 	andi	r4,r2,255
 400224c:	e0bfecc3 	ldbu	r2,-77(fp)
 4002250:	1004703a 	and	r2,r2,zero
 4002254:	1007883a 	mov	r3,r2
 4002258:	2005883a 	mov	r2,r4
 400225c:	1884b03a 	or	r2,r3,r2
 4002260:	e0bfecc5 	stb	r2,-77(fp)
 4002264:	28bfffcc 	andi	r2,r5,65535
 4002268:	1004d23a 	srli	r2,r2,8
 400226c:	113fffcc 	andi	r4,r2,65535
 4002270:	e0bfed03 	ldbu	r2,-76(fp)
 4002274:	1004703a 	and	r2,r2,zero
 4002278:	1007883a 	mov	r3,r2
 400227c:	2005883a 	mov	r2,r4
 4002280:	1884b03a 	or	r2,r3,r2
 4002284:	e0bfed05 	stb	r2,-76(fp)
			header.len = tjei_be_word((uint16_t)(6 + (sizeof(TJEFrameComponentSpec) * 3)));
 4002288:	01000304 	movi	r4,12
 400228c:	400026c0 	call	400026c <tjei_be_word>
 4002290:	100b883a 	mov	r5,r2
 4002294:	28bfffcc 	andi	r2,r5,65535
 4002298:	11003fcc 	andi	r4,r2,255
 400229c:	e0bfed43 	ldbu	r2,-75(fp)
 40022a0:	1004703a 	and	r2,r2,zero
 40022a4:	1007883a 	mov	r3,r2
 40022a8:	2005883a 	mov	r2,r4
 40022ac:	1884b03a 	or	r2,r3,r2
 40022b0:	e0bfed45 	stb	r2,-75(fp)
 40022b4:	28bfffcc 	andi	r2,r5,65535
 40022b8:	1004d23a 	srli	r2,r2,8
 40022bc:	113fffcc 	andi	r4,r2,65535
 40022c0:	e0bfed83 	ldbu	r2,-74(fp)
 40022c4:	1004703a 	and	r2,r2,zero
 40022c8:	1007883a 	mov	r3,r2
 40022cc:	2005883a 	mov	r2,r4
 40022d0:	1884b03a 	or	r2,r3,r2
 40022d4:	e0bfed85 	stb	r2,-74(fp)
			header.num_components = 3;
 40022d8:	008000c4 	movi	r2,3
 40022dc:	e0bfedc5 	stb	r2,-73(fp)

			uint8_t tables[3] = {
 40022e0:	e03ff045 	stb	zero,-63(fp)
 40022e4:	00800444 	movi	r2,17
 40022e8:	e0bff085 	stb	r2,-62(fp)
 40022ec:	00800444 	movi	r2,17
 40022f0:	e0bff0c5 	stb	r2,-61(fp)
				0x00,
				0x11,
				0x11,
			};
			for (int i = 0; i < 3; ++i) {
 40022f4:	e03e8d15 	stw	zero,-1484(fp)
 40022f8:	00001506 	br	4002350 <tjei_encode_main+0x7dc>
				TJEFrameComponentSpec cs;
				// Must be equal to component_id from frame header above.
				cs.component_id = (uint8_t)(i + 1);
 40022fc:	e0be8d17 	ldw	r2,-1484(fp)
 4002300:	10800044 	addi	r2,r2,1
 4002304:	e0bff105 	stb	r2,-60(fp)
				cs.dc_ac = (uint8_t)tables[i];
 4002308:	e0fff044 	addi	r3,fp,-63
 400230c:	e0be8d17 	ldw	r2,-1484(fp)
 4002310:	1885883a 	add	r2,r3,r2
 4002314:	10800003 	ldbu	r2,0(r2)
 4002318:	e0bff145 	stb	r2,-59(fp)

				header.component_spec[i] = cs;
 400231c:	e0be8d17 	ldw	r2,-1484(fp)
 4002320:	10800084 	addi	r2,r2,2
 4002324:	1085883a 	add	r2,r2,r2
 4002328:	e13e8a04 	addi	r4,fp,-1496
 400232c:	2085883a 	add	r2,r4,r2
 4002330:	108162c4 	addi	r2,r2,1419
 4002334:	e0fff103 	ldbu	r3,-60(fp)
 4002338:	10c00045 	stb	r3,1(r2)
 400233c:	e0fff143 	ldbu	r3,-59(fp)
 4002340:	10c00085 	stb	r3,2(r2)
			uint8_t tables[3] = {
				0x00,
				0x11,
				0x11,
			};
			for (int i = 0; i < 3; ++i) {
 4002344:	e0be8d17 	ldw	r2,-1484(fp)
 4002348:	10800044 	addi	r2,r2,1
 400234c:	e0be8d15 	stw	r2,-1484(fp)
 4002350:	e0be8d17 	ldw	r2,-1484(fp)
 4002354:	108000d0 	cmplti	r2,r2,3
 4002358:	103fe81e 	bne	r2,zero,40022fc <__alt_data_end+0xfc0022fc>
				cs.component_id = (uint8_t)(i + 1);
				cs.dc_ac = (uint8_t)tables[i];

				header.component_spec[i] = cs;
			}
			header.first = 0;
 400235c:	e03fef85 	stb	zero,-66(fp)
			header.last = 63;
 4002360:	00800fc4 	movi	r2,63
 4002364:	e0bfefc5 	stb	r2,-65(fp)
			header.ah_al = 0;
 4002368:	e03ff005 	stb	zero,-64(fp)
			tjei_write(state, &header, sizeof(TJEScanHeader), 1);
 400236c:	e0bfecc4 	addi	r2,fp,-77
 4002370:	01c00044 	movi	r7,1
 4002374:	01800384 	movi	r6,14
 4002378:	100b883a 	mov	r5,r2
 400237c:	e13ffa17 	ldw	r4,-24(fp)
 4002380:	40002bc0 	call	40002bc <tjei_write>
		float du_y[64];
		float du_b[64];
		float du_r[64];

		// Set diff to 0.
		int pred_y = 0;
 4002384:	e03fdc15 	stw	zero,-144(fp)
		int pred_b = 0;
 4002388:	e03fdd15 	stw	zero,-140(fp)
		int pred_r = 0;
 400238c:	e03fde15 	stw	zero,-136(fp)

		// Bit stack
		uint32_t bitbuffer = 0;
 4002390:	e03fdf15 	stw	zero,-132(fp)
		uint32_t location = 0;
 4002394:	e03fe015 	stw	zero,-128(fp)


		for (int y = 0; y < height; y += 8) {
 4002398:	e03e8e15 	stw	zero,-1480(fp)
 400239c:	00014d06 	br	40028d4 <tjei_encode_main+0xd60>
			for (int x = 0; x < width; x += 8) {
 40023a0:	e03e8f15 	stw	zero,-1476(fp)
 40023a4:	00014506 	br	40028bc <tjei_encode_main+0xd48>
				// Block loop: ====
				for (int off_y = 0; off_y < 8; ++off_y) {
 40023a8:	e03e9015 	stw	zero,-1472(fp)
 40023ac:	0000fb06 	br	400279c <tjei_encode_main+0xc28>
					for (int off_x = 0; off_x < 8; ++off_x) {
 40023b0:	e03e9115 	stw	zero,-1468(fp)
 40023b4:	0000f306 	br	4002784 <tjei_encode_main+0xc10>
						int block_index = (off_y * 8 + off_x);
 40023b8:	e0be9017 	ldw	r2,-1472(fp)
 40023bc:	100690fa 	slli	r3,r2,3
 40023c0:	e0be9117 	ldw	r2,-1468(fp)
 40023c4:	1885883a 	add	r2,r3,r2
 40023c8:	e0be9515 	stw	r2,-1452(fp)

						int src_index = (((y + off_y) * width) + (x + off_x)) * src_num_components;
 40023cc:	e0fe8e17 	ldw	r3,-1480(fp)
 40023d0:	e0be9017 	ldw	r2,-1472(fp)
 40023d4:	1885883a 	add	r2,r3,r2
 40023d8:	e17ffc17 	ldw	r5,-16(fp)
 40023dc:	1009883a 	mov	r4,r2
 40023e0:	400359c0 	call	400359c <__mulsi3>
 40023e4:	1009883a 	mov	r4,r2
 40023e8:	e0fe8f17 	ldw	r3,-1476(fp)
 40023ec:	e0be9117 	ldw	r2,-1468(fp)
 40023f0:	1885883a 	add	r2,r3,r2
 40023f4:	2085883a 	add	r2,r4,r2
 40023f8:	e1400217 	ldw	r5,8(fp)
 40023fc:	1009883a 	mov	r4,r2
 4002400:	400359c0 	call	400359c <__mulsi3>
 4002404:	e0be9215 	stw	r2,-1464(fp)

						int col = x + off_x;
 4002408:	e0fe8f17 	ldw	r3,-1476(fp)
 400240c:	e0be9117 	ldw	r2,-1468(fp)
 4002410:	1885883a 	add	r2,r3,r2
 4002414:	e0be9615 	stw	r2,-1448(fp)
						int row = y + off_y;
 4002418:	e0fe8e17 	ldw	r3,-1480(fp)
 400241c:	e0be9017 	ldw	r2,-1472(fp)
 4002420:	1885883a 	add	r2,r3,r2
 4002424:	e0be9715 	stw	r2,-1444(fp)

						if (row >= height) {
 4002428:	e0fe9717 	ldw	r3,-1444(fp)
 400242c:	e0bffd17 	ldw	r2,-12(fp)
 4002430:	18800e16 	blt	r3,r2,400246c <tjei_encode_main+0x8f8>
							src_index -= (width * (row - height + 1)) * src_num_components;
 4002434:	e0fe9717 	ldw	r3,-1444(fp)
 4002438:	e0bffd17 	ldw	r2,-12(fp)
 400243c:	1885c83a 	sub	r2,r3,r2
 4002440:	10800044 	addi	r2,r2,1
 4002444:	e17ffc17 	ldw	r5,-16(fp)
 4002448:	1009883a 	mov	r4,r2
 400244c:	400359c0 	call	400359c <__mulsi3>
 4002450:	e1400217 	ldw	r5,8(fp)
 4002454:	1009883a 	mov	r4,r2
 4002458:	400359c0 	call	400359c <__mulsi3>
 400245c:	1007883a 	mov	r3,r2
 4002460:	e0be9217 	ldw	r2,-1464(fp)
 4002464:	10c5c83a 	sub	r2,r2,r3
 4002468:	e0be9215 	stw	r2,-1464(fp)
						}
						if (col >= width) {
 400246c:	e0fe9617 	ldw	r3,-1448(fp)
 4002470:	e0bffc17 	ldw	r2,-16(fp)
 4002474:	18800b16 	blt	r3,r2,40024a4 <tjei_encode_main+0x930>
							src_index -= (col - width + 1) * src_num_components;
 4002478:	e0fe9617 	ldw	r3,-1448(fp)
 400247c:	e0bffc17 	ldw	r2,-16(fp)
 4002480:	1885c83a 	sub	r2,r3,r2
 4002484:	10800044 	addi	r2,r2,1
 4002488:	e1400217 	ldw	r5,8(fp)
 400248c:	1009883a 	mov	r4,r2
 4002490:	400359c0 	call	400359c <__mulsi3>
 4002494:	1007883a 	mov	r3,r2
 4002498:	e0be9217 	ldw	r2,-1464(fp)
 400249c:	10c5c83a 	sub	r2,r2,r3
 40024a0:	e0be9215 	stw	r2,-1464(fp)
						}
						assert(src_index < width * height * src_num_components);
 40024a4:	e17ffd17 	ldw	r5,-12(fp)
 40024a8:	e13ffc17 	ldw	r4,-16(fp)
 40024ac:	400359c0 	call	400359c <__mulsi3>
 40024b0:	e1400217 	ldw	r5,8(fp)
 40024b4:	1009883a 	mov	r4,r2
 40024b8:	400359c0 	call	400359c <__mulsi3>
 40024bc:	1007883a 	mov	r3,r2
 40024c0:	e0be9217 	ldw	r2,-1464(fp)
 40024c4:	10c00816 	blt	r2,r3,40024e8 <tjei_encode_main+0x974>
 40024c8:	01c10074 	movhi	r7,1025
 40024cc:	39f4d604 	addi	r7,r7,-11432
 40024d0:	01810074 	movhi	r6,1025
 40024d4:	31b50c04 	addi	r6,r6,-11216
 40024d8:	01410384 	movi	r5,1038
 40024dc:	01010074 	movhi	r4,1025
 40024e0:	2134a704 	addi	r4,r4,-11620
 40024e4:	4004a940 	call	4004a94 <__assert_func>

						uint8_t r = src_data[src_index + 0];
 40024e8:	e0be9217 	ldw	r2,-1464(fp)
 40024ec:	e0fffb17 	ldw	r3,-20(fp)
 40024f0:	1885883a 	add	r2,r3,r2
 40024f4:	10800003 	ldbu	r2,0(r2)
 40024f8:	e0be9805 	stb	r2,-1440(fp)
						uint8_t g = src_data[src_index + 1];
 40024fc:	e0be9217 	ldw	r2,-1464(fp)
 4002500:	10800044 	addi	r2,r2,1
 4002504:	e0fffb17 	ldw	r3,-20(fp)
 4002508:	1885883a 	add	r2,r3,r2
 400250c:	10800003 	ldbu	r2,0(r2)
 4002510:	e0be9845 	stb	r2,-1439(fp)
						uint8_t b = src_data[src_index + 2];
 4002514:	e0be9217 	ldw	r2,-1464(fp)
 4002518:	10800084 	addi	r2,r2,2
 400251c:	e0fffb17 	ldw	r3,-20(fp)
 4002520:	1885883a 	add	r2,r3,r2
 4002524:	10800003 	ldbu	r2,0(r2)
 4002528:	e0be9885 	stb	r2,-1438(fp)

						float luma = 0.299f * r + 0.587f * g + 0.114f * b - 128;
 400252c:	e0be9803 	ldbu	r2,-1440(fp)
 4002530:	1009883a 	mov	r4,r2
 4002534:	400490c0 	call	400490c <__floatsisf>
 4002538:	1007883a 	mov	r3,r2
 400253c:	014fa674 	movhi	r5,16025
 4002540:	2945a1c4 	addi	r5,r5,5767
 4002544:	1809883a 	mov	r4,r3
 4002548:	4003f880 	call	4003f88 <__mulsf3>
 400254c:	1007883a 	mov	r3,r2
 4002550:	1821883a 	mov	r16,r3
 4002554:	e0be9843 	ldbu	r2,-1439(fp)
 4002558:	1009883a 	mov	r4,r2
 400255c:	400490c0 	call	400490c <__floatsisf>
 4002560:	1007883a 	mov	r3,r2
 4002564:	014fc5b4 	movhi	r5,16150
 4002568:	29516884 	addi	r5,r5,17826
 400256c:	1809883a 	mov	r4,r3
 4002570:	4003f880 	call	4003f88 <__mulsf3>
 4002574:	1007883a 	mov	r3,r2
 4002578:	1805883a 	mov	r2,r3
 400257c:	100b883a 	mov	r5,r2
 4002580:	8009883a 	mov	r4,r16
 4002584:	40035c40 	call	40035c4 <__addsf3>
 4002588:	1007883a 	mov	r3,r2
 400258c:	1821883a 	mov	r16,r3
 4002590:	e0be9883 	ldbu	r2,-1438(fp)
 4002594:	1009883a 	mov	r4,r2
 4002598:	400490c0 	call	400490c <__floatsisf>
 400259c:	1007883a 	mov	r3,r2
 40025a0:	014f7a74 	movhi	r5,15849
 40025a4:	295e3544 	addi	r5,r5,30933
 40025a8:	1809883a 	mov	r4,r3
 40025ac:	4003f880 	call	4003f88 <__mulsf3>
 40025b0:	1007883a 	mov	r3,r2
 40025b4:	1805883a 	mov	r2,r3
 40025b8:	100b883a 	mov	r5,r2
 40025bc:	8009883a 	mov	r4,r16
 40025c0:	40035c40 	call	40035c4 <__addsf3>
 40025c4:	1007883a 	mov	r3,r2
 40025c8:	1805883a 	mov	r2,r3
 40025cc:	0150c034 	movhi	r5,17152
 40025d0:	1009883a 	mov	r4,r2
 40025d4:	40043b80 	call	40043b8 <__subsf3>
 40025d8:	1007883a 	mov	r3,r2
 40025dc:	e0fe9915 	stw	r3,-1436(fp)
						float cb = -0.1687f * r - 0.3313f * g + 0.5f * b;
 40025e0:	e0be9803 	ldbu	r2,-1440(fp)
 40025e4:	1009883a 	mov	r4,r2
 40025e8:	400490c0 	call	400490c <__floatsisf>
 40025ec:	1007883a 	mov	r3,r2
 40025f0:	016f8b74 	movhi	r5,48685
 40025f4:	296fec44 	addi	r5,r5,-16463
 40025f8:	1809883a 	mov	r4,r3
 40025fc:	4003f880 	call	4003f88 <__mulsf3>
 4002600:	1007883a 	mov	r3,r2
 4002604:	1821883a 	mov	r16,r3
 4002608:	e0be9843 	ldbu	r2,-1439(fp)
 400260c:	1009883a 	mov	r4,r2
 4002610:	400490c0 	call	400490c <__floatsisf>
 4002614:	1007883a 	mov	r3,r2
 4002618:	014faab4 	movhi	r5,16042
 400261c:	296809c4 	addi	r5,r5,-24537
 4002620:	1809883a 	mov	r4,r3
 4002624:	4003f880 	call	4003f88 <__mulsf3>
 4002628:	1007883a 	mov	r3,r2
 400262c:	1805883a 	mov	r2,r3
 4002630:	100b883a 	mov	r5,r2
 4002634:	8009883a 	mov	r4,r16
 4002638:	40043b80 	call	40043b8 <__subsf3>
 400263c:	1007883a 	mov	r3,r2
 4002640:	1821883a 	mov	r16,r3
 4002644:	e0be9883 	ldbu	r2,-1438(fp)
 4002648:	1009883a 	mov	r4,r2
 400264c:	400490c0 	call	400490c <__floatsisf>
 4002650:	1007883a 	mov	r3,r2
 4002654:	014fc034 	movhi	r5,16128
 4002658:	1809883a 	mov	r4,r3
 400265c:	4003f880 	call	4003f88 <__mulsf3>
 4002660:	1007883a 	mov	r3,r2
 4002664:	1805883a 	mov	r2,r3
 4002668:	100b883a 	mov	r5,r2
 400266c:	8009883a 	mov	r4,r16
 4002670:	40035c40 	call	40035c4 <__addsf3>
 4002674:	1007883a 	mov	r3,r2
 4002678:	e0fe9a15 	stw	r3,-1432(fp)
						float cr = 0.5f * r - 0.4187f * g - 0.0813f * b;
 400267c:	e0be9803 	ldbu	r2,-1440(fp)
 4002680:	1009883a 	mov	r4,r2
 4002684:	400490c0 	call	400490c <__floatsisf>
 4002688:	1007883a 	mov	r3,r2
 400268c:	014fc034 	movhi	r5,16128
 4002690:	1809883a 	mov	r4,r3
 4002694:	4003f880 	call	4003f88 <__mulsf3>
 4002698:	1007883a 	mov	r3,r2
 400269c:	1821883a 	mov	r16,r3
 40026a0:	e0be9843 	ldbu	r2,-1439(fp)
 40026a4:	1009883a 	mov	r4,r2
 40026a8:	400490c0 	call	400490c <__floatsisf>
 40026ac:	1007883a 	mov	r3,r2
 40026b0:	014fb5b4 	movhi	r5,16086
 40026b4:	2957f644 	addi	r5,r5,24537
 40026b8:	1809883a 	mov	r4,r3
 40026bc:	4003f880 	call	4003f88 <__mulsf3>
 40026c0:	1007883a 	mov	r3,r2
 40026c4:	1805883a 	mov	r2,r3
 40026c8:	100b883a 	mov	r5,r2
 40026cc:	8009883a 	mov	r4,r16
 40026d0:	40043b80 	call	40043b8 <__subsf3>
 40026d4:	1007883a 	mov	r3,r2
 40026d8:	1821883a 	mov	r16,r3
 40026dc:	e0be9883 	ldbu	r2,-1438(fp)
 40026e0:	1009883a 	mov	r4,r2
 40026e4:	400490c0 	call	400490c <__floatsisf>
 40026e8:	1007883a 	mov	r3,r2
 40026ec:	014f69f4 	movhi	r5,15783
 40026f0:	29602744 	addi	r5,r5,-32611
 40026f4:	1809883a 	mov	r4,r3
 40026f8:	4003f880 	call	4003f88 <__mulsf3>
 40026fc:	1007883a 	mov	r3,r2
 4002700:	1805883a 	mov	r2,r3
 4002704:	100b883a 	mov	r5,r2
 4002708:	8009883a 	mov	r4,r16
 400270c:	40043b80 	call	40043b8 <__subsf3>
 4002710:	1007883a 	mov	r3,r2
 4002714:	e0fe9b15 	stw	r3,-1428(fp)

						du_y[block_index] = luma;
 4002718:	e0be9517 	ldw	r2,-1452(fp)
 400271c:	1085883a 	add	r2,r2,r2
 4002720:	1085883a 	add	r2,r2,r2
 4002724:	e0fe8a04 	addi	r3,fp,-1496
 4002728:	1885883a 	add	r2,r3,r2
 400272c:	10809204 	addi	r2,r2,584
 4002730:	e0fe9917 	ldw	r3,-1436(fp)
 4002734:	10c00015 	stw	r3,0(r2)
						du_b[block_index] = cb;
 4002738:	e0be9517 	ldw	r2,-1452(fp)
 400273c:	1085883a 	add	r2,r2,r2
 4002740:	1085883a 	add	r2,r2,r2
 4002744:	e13e8a04 	addi	r4,fp,-1496
 4002748:	2085883a 	add	r2,r4,r2
 400274c:	1080d204 	addi	r2,r2,840
 4002750:	e0fe9a17 	ldw	r3,-1432(fp)
 4002754:	10c00015 	stw	r3,0(r2)
						du_r[block_index] = cr;
 4002758:	e0be9517 	ldw	r2,-1452(fp)
 400275c:	1085883a 	add	r2,r2,r2
 4002760:	1085883a 	add	r2,r2,r2
 4002764:	e0fe8a04 	addi	r3,fp,-1496
 4002768:	1885883a 	add	r2,r3,r2
 400276c:	10811204 	addi	r2,r2,1096
 4002770:	e0fe9b17 	ldw	r3,-1428(fp)
 4002774:	10c00015 	stw	r3,0(r2)

		for (int y = 0; y < height; y += 8) {
			for (int x = 0; x < width; x += 8) {
				// Block loop: ====
				for (int off_y = 0; off_y < 8; ++off_y) {
					for (int off_x = 0; off_x < 8; ++off_x) {
 4002778:	e0be9117 	ldw	r2,-1468(fp)
 400277c:	10800044 	addi	r2,r2,1
 4002780:	e0be9115 	stw	r2,-1468(fp)
 4002784:	e0be9117 	ldw	r2,-1468(fp)
 4002788:	10800210 	cmplti	r2,r2,8
 400278c:	103f0a1e 	bne	r2,zero,40023b8 <__alt_data_end+0xfc0023b8>


		for (int y = 0; y < height; y += 8) {
			for (int x = 0; x < width; x += 8) {
				// Block loop: ====
				for (int off_y = 0; off_y < 8; ++off_y) {
 4002790:	e0be9017 	ldw	r2,-1472(fp)
 4002794:	10800044 	addi	r2,r2,1
 4002798:	e0be9015 	stw	r2,-1472(fp)
 400279c:	e0be9017 	ldw	r2,-1472(fp)
 40027a0:	10800210 	cmplti	r2,r2,8
 40027a4:	103f021e 	bne	r2,zero,40023b0 <__alt_data_end+0xfc0023b0>
#if TJE_USE_FAST_DCT
					pqt.luma,
#else
					state->qt_luma,
#endif
					state->ehuffsize[TJEI_LUMA_DC], state->ehuffcode[TJEI_LUMA_DC],
 40027a8:	e1fffa17 	ldw	r7,-24(fp)
 40027ac:	e0bffa17 	ldw	r2,-24(fp)
 40027b0:	10810104 	addi	r2,r2,1028
					state->ehuffsize[TJEI_LUMA_AC], state->ehuffcode[TJEI_LUMA_AC],
 40027b4:	e0fffa17 	ldw	r3,-24(fp)
 40027b8:	18c04044 	addi	r3,r3,257
 40027bc:	e13ffa17 	ldw	r4,-24(fp)
 40027c0:	21018104 	addi	r4,r4,1540
						du_b[block_index] = cb;
						du_r[block_index] = cr;
					}
				}

				tjei_encode_and_write_MCU(state, du_y,
 40027c4:	e17e9c04 	addi	r5,fp,-1424
 40027c8:	29804004 	addi	r6,r5,256
 40027cc:	e23f1c04 	addi	r8,fp,-912
 40027d0:	e17fe004 	addi	r5,fp,-128
 40027d4:	d9400515 	stw	r5,20(sp)
 40027d8:	e17fdf04 	addi	r5,fp,-132
 40027dc:	d9400415 	stw	r5,16(sp)
 40027e0:	e17fdc04 	addi	r5,fp,-144
 40027e4:	d9400315 	stw	r5,12(sp)
 40027e8:	d9000215 	stw	r4,8(sp)
 40027ec:	d8c00115 	stw	r3,4(sp)
 40027f0:	d8800015 	stw	r2,0(sp)
 40027f4:	400b883a 	mov	r5,r8
 40027f8:	e13ffa17 	ldw	r4,-24(fp)
 40027fc:	40013380 	call	4001338 <tjei_encode_and_write_MCU>
#if TJE_USE_FAST_DCT
					pqt.chroma,
#else
					state->qt_chroma,
#endif
					state->ehuffsize[TJEI_CHROMA_DC], state->ehuffcode[TJEI_CHROMA_DC],
 4002800:	e0bffa17 	ldw	r2,-24(fp)
 4002804:	11c08084 	addi	r7,r2,514
 4002808:	e0bffa17 	ldw	r2,-24(fp)
 400280c:	10820104 	addi	r2,r2,2052
					state->ehuffsize[TJEI_CHROMA_AC], state->ehuffcode[TJEI_CHROMA_AC],
 4002810:	e0fffa17 	ldw	r3,-24(fp)
 4002814:	18c0c0c4 	addi	r3,r3,771
 4002818:	e13ffa17 	ldw	r4,-24(fp)
 400281c:	21028104 	addi	r4,r4,2564
					state->qt_luma,
#endif
					state->ehuffsize[TJEI_LUMA_DC], state->ehuffcode[TJEI_LUMA_DC],
					state->ehuffsize[TJEI_LUMA_AC], state->ehuffcode[TJEI_LUMA_AC],
					&pred_y, &bitbuffer, &location);
				tjei_encode_and_write_MCU(state, du_b,
 4002820:	e1be9c04 	addi	r6,fp,-1424
 4002824:	e23f5c04 	addi	r8,fp,-656
 4002828:	e17fe004 	addi	r5,fp,-128
 400282c:	d9400515 	stw	r5,20(sp)
 4002830:	e17fdf04 	addi	r5,fp,-132
 4002834:	d9400415 	stw	r5,16(sp)
 4002838:	e17fdd04 	addi	r5,fp,-140
 400283c:	d9400315 	stw	r5,12(sp)
 4002840:	d9000215 	stw	r4,8(sp)
 4002844:	d8c00115 	stw	r3,4(sp)
 4002848:	d8800015 	stw	r2,0(sp)
 400284c:	400b883a 	mov	r5,r8
 4002850:	e13ffa17 	ldw	r4,-24(fp)
 4002854:	40013380 	call	4001338 <tjei_encode_and_write_MCU>
#if TJE_USE_FAST_DCT
					pqt.chroma,
#else
					state->qt_chroma,
#endif
					state->ehuffsize[TJEI_CHROMA_DC], state->ehuffcode[TJEI_CHROMA_DC],
 4002858:	e0bffa17 	ldw	r2,-24(fp)
 400285c:	11c08084 	addi	r7,r2,514
 4002860:	e0bffa17 	ldw	r2,-24(fp)
 4002864:	10820104 	addi	r2,r2,2052
					state->ehuffsize[TJEI_CHROMA_AC], state->ehuffcode[TJEI_CHROMA_AC],
 4002868:	e0fffa17 	ldw	r3,-24(fp)
 400286c:	18c0c0c4 	addi	r3,r3,771
 4002870:	e13ffa17 	ldw	r4,-24(fp)
 4002874:	21028104 	addi	r4,r4,2564
					state->qt_chroma,
#endif
					state->ehuffsize[TJEI_CHROMA_DC], state->ehuffcode[TJEI_CHROMA_DC],
					state->ehuffsize[TJEI_CHROMA_AC], state->ehuffcode[TJEI_CHROMA_AC],
					&pred_b, &bitbuffer, &location);
				tjei_encode_and_write_MCU(state, du_r,
 4002878:	e1be9c04 	addi	r6,fp,-1424
 400287c:	e23f9c04 	addi	r8,fp,-400
 4002880:	e17fe004 	addi	r5,fp,-128
 4002884:	d9400515 	stw	r5,20(sp)
 4002888:	e17fdf04 	addi	r5,fp,-132
 400288c:	d9400415 	stw	r5,16(sp)
 4002890:	e17fde04 	addi	r5,fp,-136
 4002894:	d9400315 	stw	r5,12(sp)
 4002898:	d9000215 	stw	r4,8(sp)
 400289c:	d8c00115 	stw	r3,4(sp)
 40028a0:	d8800015 	stw	r2,0(sp)
 40028a4:	400b883a 	mov	r5,r8
 40028a8:	e13ffa17 	ldw	r4,-24(fp)
 40028ac:	40013380 	call	4001338 <tjei_encode_and_write_MCU>
		uint32_t bitbuffer = 0;
		uint32_t location = 0;


		for (int y = 0; y < height; y += 8) {
			for (int x = 0; x < width; x += 8) {
 40028b0:	e0be8f17 	ldw	r2,-1476(fp)
 40028b4:	10800204 	addi	r2,r2,8
 40028b8:	e0be8f15 	stw	r2,-1476(fp)
 40028bc:	e0fe8f17 	ldw	r3,-1476(fp)
 40028c0:	e0bffc17 	ldw	r2,-16(fp)
 40028c4:	18beb816 	blt	r3,r2,40023a8 <__alt_data_end+0xfc0023a8>
		// Bit stack
		uint32_t bitbuffer = 0;
		uint32_t location = 0;


		for (int y = 0; y < height; y += 8) {
 40028c8:	e0be8e17 	ldw	r2,-1480(fp)
 40028cc:	10800204 	addi	r2,r2,8
 40028d0:	e0be8e15 	stw	r2,-1480(fp)
 40028d4:	e0fe8e17 	ldw	r3,-1480(fp)
 40028d8:	e0bffd17 	ldw	r2,-12(fp)
 40028dc:	18beb016 	blt	r3,r2,40023a0 <__alt_data_end+0xfc0023a0>
			}
		}

		// Finish the image.
		{ // Flush
			if (location > 0 && location < 8) {
 40028e0:	e0bfe017 	ldw	r2,-128(fp)
 40028e4:	10001026 	beq	r2,zero,4002928 <tjei_encode_main+0xdb4>
 40028e8:	e0bfe017 	ldw	r2,-128(fp)
 40028ec:	10800228 	cmpgeui	r2,r2,8
 40028f0:	10000d1e 	bne	r2,zero,4002928 <tjei_encode_main+0xdb4>
				tjei_write_bits(state, &bitbuffer, &location, (uint16_t)(8 - location), 0);
 40028f4:	e0bfe017 	ldw	r2,-128(fp)
 40028f8:	1007883a 	mov	r3,r2
 40028fc:	00800204 	movi	r2,8
 4002900:	10c5c83a 	sub	r2,r2,r3
 4002904:	113fffcc 	andi	r4,r2,65535
 4002908:	e0ffe004 	addi	r3,fp,-128
 400290c:	e0bfdf04 	addi	r2,fp,-132
 4002910:	d8000015 	stw	zero,0(sp)
 4002914:	200f883a 	mov	r7,r4
 4002918:	180d883a 	mov	r6,r3
 400291c:	100b883a 	mov	r5,r2
 4002920:	e13ffa17 	ldw	r4,-24(fp)
 4002924:	40009e00 	call	40009e0 <tjei_write_bits>
			}
		}
		uint16_t EOI = tjei_be_word(0xffd9);
 4002928:	013ff654 	movui	r4,65497
 400292c:	400026c0 	call	400026c <tjei_be_word>
 4002930:	e0bfe10d 	sth	r2,-124(fp)
		tjei_write(state, &EOI, sizeof(uint16_t), 1);
 4002934:	e0bfe104 	addi	r2,fp,-124
 4002938:	01c00044 	movi	r7,1
 400293c:	01800084 	movi	r6,2
 4002940:	100b883a 	mov	r5,r2
 4002944:	e13ffa17 	ldw	r4,-24(fp)
 4002948:	40002bc0 	call	40002bc <tjei_write>

		if (state->output_buffer_count) {
 400294c:	e0bffa17 	ldw	r2,-24(fp)
 4002950:	10832b17 	ldw	r2,3244(r2)
 4002954:	10000c26 	beq	r2,zero,4002988 <tjei_encode_main+0xe14>
			state->write_context.func(state->write_context.context, state->output_buffer, (int)state->output_buffer_count);
 4002958:	e0bffa17 	ldw	r2,-24(fp)
 400295c:	10832a17 	ldw	r2,3240(r2)
 4002960:	e0fffa17 	ldw	r3,-24(fp)
 4002964:	19032917 	ldw	r4,3236(r3)
 4002968:	e0fffa17 	ldw	r3,-24(fp)
 400296c:	19432c04 	addi	r5,r3,3248
 4002970:	e0fffa17 	ldw	r3,-24(fp)
 4002974:	18c32b17 	ldw	r3,3244(r3)
 4002978:	180d883a 	mov	r6,r3
 400297c:	103ee83a 	callr	r2
			state->output_buffer_count = 0;
 4002980:	e0bffa17 	ldw	r2,-24(fp)
 4002984:	10032b15 	stw	zero,3244(r2)
		}

		return 1;
 4002988:	00800044 	movi	r2,1
	}
 400298c:	e6fffe04 	addi	sp,fp,-8
 4002990:	dfc00317 	ldw	ra,12(sp)
 4002994:	df000217 	ldw	fp,8(sp)
 4002998:	dc400117 	ldw	r17,4(sp)
 400299c:	dc000017 	ldw	r16,0(sp)
 40029a0:	dec00404 	addi	sp,sp,16
 40029a4:	f800283a 	ret

040029a8 <tje_encode_with_func>:
		const int quality,
		const int width,
		const int height,
		const int num_components,
		const unsigned char* src_data)
	{
 40029a8:	defbc704 	addi	sp,sp,-4324
 40029ac:	dfc43815 	stw	ra,4320(sp)
 40029b0:	df043715 	stw	fp,4316(sp)
 40029b4:	df043704 	addi	fp,sp,4316
 40029b8:	e13ffc15 	stw	r4,-16(fp)
 40029bc:	e17ffd15 	stw	r5,-12(fp)
 40029c0:	e1bffe15 	stw	r6,-8(fp)
 40029c4:	e1ffff15 	stw	r7,-4(fp)
		if (quality < 1 || quality > 3) {
 40029c8:	e0bffe17 	ldw	r2,-8(fp)
 40029cc:	0080030e 	bge	zero,r2,40029dc <tje_encode_with_func+0x34>
 40029d0:	e0bffe17 	ldw	r2,-8(fp)
 40029d4:	10800110 	cmplti	r2,r2,4
 40029d8:	1000021e 	bne	r2,zero,40029e4 <tje_encode_with_func+0x3c>
			tje_log("[ERROR] -- Valid 'quality' values are 1 (lowest), 2, or 3 (highest)\n");
			return 0;
 40029dc:	0005883a 	mov	r2,zero
 40029e0:	00008106 	br	4002be8 <tje_encode_with_func+0x240>
		}

		TJEState state = { 0 };
 40029e4:	e0bbce04 	addi	r2,fp,-4296
 40029e8:	00c42c04 	movi	r3,4272
 40029ec:	180d883a 	mov	r6,r3
 40029f0:	000b883a 	mov	r5,zero
 40029f4:	1009883a 	mov	r4,r2
 40029f8:	4004cb40 	call	4004cb4 <memset>

		uint8_t qt_factor = 1;
 40029fc:	00800044 	movi	r2,1
 4002a00:	e0bbca05 	stb	r2,-4312(fp)
		switch (quality) {
 4002a04:	e0bffe17 	ldw	r2,-8(fp)
 4002a08:	10c000a0 	cmpeqi	r3,r2,2
 4002a0c:	1800181e 	bne	r3,zero,4002a70 <tje_encode_with_func+0xc8>
 4002a10:	10c000e0 	cmpeqi	r3,r2,3
 4002a14:	1800031e 	bne	r3,zero,4002a24 <tje_encode_with_func+0x7c>
 4002a18:	10800060 	cmpeqi	r2,r2,1
 4002a1c:	1000161e 	bne	r2,zero,4002a78 <tje_encode_with_func+0xd0>
 4002a20:	00005206 	br	4002b6c <tje_encode_with_func+0x1c4>
		case 3:
			for (int i = 0; i < 64; ++i) {
 4002a24:	e03bcb15 	stw	zero,-4308(fp)
 4002a28:	00000d06 	br	4002a60 <tje_encode_with_func+0xb8>
				state.qt_luma[i] = 1;
 4002a2c:	e0fed704 	addi	r3,fp,-1188
 4002a30:	e0bbcb17 	ldw	r2,-4308(fp)
 4002a34:	1885883a 	add	r2,r3,r2
 4002a38:	00c00044 	movi	r3,1
 4002a3c:	10c00005 	stb	r3,0(r2)
				state.qt_chroma[i] = 1;
 4002a40:	e0fee704 	addi	r3,fp,-1124
 4002a44:	e0bbcb17 	ldw	r2,-4308(fp)
 4002a48:	1885883a 	add	r2,r3,r2
 4002a4c:	00c00044 	movi	r3,1
 4002a50:	10c00005 	stb	r3,0(r2)
		TJEState state = { 0 };

		uint8_t qt_factor = 1;
		switch (quality) {
		case 3:
			for (int i = 0; i < 64; ++i) {
 4002a54:	e0bbcb17 	ldw	r2,-4308(fp)
 4002a58:	10800044 	addi	r2,r2,1
 4002a5c:	e0bbcb15 	stw	r2,-4308(fp)
 4002a60:	e0bbcb17 	ldw	r2,-4308(fp)
 4002a64:	10801010 	cmplti	r2,r2,64
 4002a68:	103ff01e 	bne	r2,zero,4002a2c <__alt_data_end+0xfc002a2c>
				state.qt_luma[i] = 1;
				state.qt_chroma[i] = 1;
			}
			break;
 4002a6c:	00004706 	br	4002b8c <tje_encode_with_func+0x1e4>
		case 2:
			qt_factor = 10;
 4002a70:	00800284 	movi	r2,10
 4002a74:	e0bbca05 	stb	r2,-4312(fp)
			// don't break. fall through.
		case 1:
			for (int i = 0; i < 64; ++i) {
 4002a78:	e03bcc15 	stw	zero,-4304(fp)
 4002a7c:	00003706 	br	4002b5c <tje_encode_with_func+0x1b4>
				state.qt_luma[i] = tjei_default_qt_luma_from_spec[i] / qt_factor;
 4002a80:	00810074 	movhi	r2,1025
 4002a84:	10b3fb04 	addi	r2,r2,-12308
 4002a88:	e0fbcc17 	ldw	r3,-4304(fp)
 4002a8c:	10c5883a 	add	r2,r2,r3
 4002a90:	10800003 	ldbu	r2,0(r2)
 4002a94:	10803fcc 	andi	r2,r2,255
 4002a98:	e0fbca03 	ldbu	r3,-4312(fp)
 4002a9c:	180b883a 	mov	r5,r3
 4002aa0:	1009883a 	mov	r4,r2
 4002aa4:	40034e00 	call	40034e0 <__udivsi3>
 4002aa8:	1009883a 	mov	r4,r2
 4002aac:	e0fed704 	addi	r3,fp,-1188
 4002ab0:	e0bbcc17 	ldw	r2,-4304(fp)
 4002ab4:	1885883a 	add	r2,r3,r2
 4002ab8:	11000005 	stb	r4,0(r2)
				if (state.qt_luma[i] == 0) {
 4002abc:	e0fed704 	addi	r3,fp,-1188
 4002ac0:	e0bbcc17 	ldw	r2,-4304(fp)
 4002ac4:	1885883a 	add	r2,r3,r2
 4002ac8:	10800003 	ldbu	r2,0(r2)
 4002acc:	10803fcc 	andi	r2,r2,255
 4002ad0:	1000051e 	bne	r2,zero,4002ae8 <tje_encode_with_func+0x140>
					state.qt_luma[i] = 1;
 4002ad4:	e0fed704 	addi	r3,fp,-1188
 4002ad8:	e0bbcc17 	ldw	r2,-4304(fp)
 4002adc:	1885883a 	add	r2,r3,r2
 4002ae0:	00c00044 	movi	r3,1
 4002ae4:	10c00005 	stb	r3,0(r2)
				}
				state.qt_chroma[i] = tjei_default_qt_chroma_from_paper[i] / qt_factor;
 4002ae8:	00810074 	movhi	r2,1025
 4002aec:	10b40b04 	addi	r2,r2,-12244
 4002af0:	e0fbcc17 	ldw	r3,-4304(fp)
 4002af4:	10c5883a 	add	r2,r2,r3
 4002af8:	10800003 	ldbu	r2,0(r2)
 4002afc:	10803fcc 	andi	r2,r2,255
 4002b00:	e0fbca03 	ldbu	r3,-4312(fp)
 4002b04:	180b883a 	mov	r5,r3
 4002b08:	1009883a 	mov	r4,r2
 4002b0c:	40034e00 	call	40034e0 <__udivsi3>
 4002b10:	1009883a 	mov	r4,r2
 4002b14:	e0fee704 	addi	r3,fp,-1124
 4002b18:	e0bbcc17 	ldw	r2,-4304(fp)
 4002b1c:	1885883a 	add	r2,r3,r2
 4002b20:	11000005 	stb	r4,0(r2)
				if (state.qt_chroma[i] == 0) {
 4002b24:	e0fee704 	addi	r3,fp,-1124
 4002b28:	e0bbcc17 	ldw	r2,-4304(fp)
 4002b2c:	1885883a 	add	r2,r3,r2
 4002b30:	10800003 	ldbu	r2,0(r2)
 4002b34:	10803fcc 	andi	r2,r2,255
 4002b38:	1000051e 	bne	r2,zero,4002b50 <tje_encode_with_func+0x1a8>
					state.qt_chroma[i] = 1;
 4002b3c:	e0fee704 	addi	r3,fp,-1124
 4002b40:	e0bbcc17 	ldw	r2,-4304(fp)
 4002b44:	1885883a 	add	r2,r3,r2
 4002b48:	00c00044 	movi	r3,1
 4002b4c:	10c00005 	stb	r3,0(r2)
			break;
		case 2:
			qt_factor = 10;
			// don't break. fall through.
		case 1:
			for (int i = 0; i < 64; ++i) {
 4002b50:	e0bbcc17 	ldw	r2,-4304(fp)
 4002b54:	10800044 	addi	r2,r2,1
 4002b58:	e0bbcc15 	stw	r2,-4304(fp)
 4002b5c:	e0bbcc17 	ldw	r2,-4304(fp)
 4002b60:	10801010 	cmplti	r2,r2,64
 4002b64:	103fc61e 	bne	r2,zero,4002a80 <__alt_data_end+0xfc002a80>
				state.qt_chroma[i] = tjei_default_qt_chroma_from_paper[i] / qt_factor;
				if (state.qt_chroma[i] == 0) {
					state.qt_chroma[i] = 1;
				}
			}
			break;
 4002b68:	00000806 	br	4002b8c <tje_encode_with_func+0x1e4>
		default:
			assert(!"invalid code path");
 4002b6c:	01c10074 	movhi	r7,1025
 4002b70:	39f4e204 	addi	r7,r7,-11384
 4002b74:	01810074 	movhi	r6,1025
 4002b78:	31b51104 	addi	r6,r6,-11196
 4002b7c:	01411d84 	movi	r5,1142
 4002b80:	01010074 	movhi	r4,1025
 4002b84:	2134a704 	addi	r4,r4,-11620
 4002b88:	4004a940 	call	4004a94 <__assert_func>
			break;
		}

		TJEWriteContext wc = { 0 };
 4002b8c:	e03ffa15 	stw	zero,-24(fp)
 4002b90:	e03ffb15 	stw	zero,-20(fp)

		wc.context = context;
 4002b94:	e0bffd17 	ldw	r2,-12(fp)
 4002b98:	e0bffa15 	stw	r2,-24(fp)
		wc.func = func;
 4002b9c:	e0bffc17 	ldw	r2,-16(fp)
 4002ba0:	e0bffb15 	stw	r2,-20(fp)

		state.write_context = wc;
 4002ba4:	e0bffa17 	ldw	r2,-24(fp)
 4002ba8:	e0bef715 	stw	r2,-1060(fp)
 4002bac:	e0bffb17 	ldw	r2,-20(fp)
 4002bb0:	e0bef815 	stw	r2,-1056(fp)


		tjei_huff_expand(&state);
 4002bb4:	e0bbce04 	addi	r2,fp,-4296
 4002bb8:	1009883a 	mov	r4,r2
 4002bbc:	40017f00 	call	40017f0 <tjei_huff_expand>

		int result = tjei_encode_main(&state, src_data, width, height, num_components);
 4002bc0:	e0fbce04 	addi	r3,fp,-4296
 4002bc4:	e0800317 	ldw	r2,12(fp)
 4002bc8:	d8800015 	stw	r2,0(sp)
 4002bcc:	e1c00217 	ldw	r7,8(fp)
 4002bd0:	e1bfff17 	ldw	r6,-4(fp)
 4002bd4:	e1400417 	ldw	r5,16(fp)
 4002bd8:	1809883a 	mov	r4,r3
 4002bdc:	4001b740 	call	4001b74 <tjei_encode_main>
 4002be0:	e0bbcd15 	stw	r2,-4300(fp)

		return result;
 4002be4:	e0bbcd17 	ldw	r2,-4300(fp)
	}
 4002be8:	e037883a 	mov	sp,fp
 4002bec:	dfc00117 	ldw	ra,4(sp)
 4002bf0:	df000017 	ldw	fp,0(sp)
 4002bf4:	dec00204 	addi	sp,sp,8
 4002bf8:	f800283a 	ret

04002bfc <jtag_kiss_send>:
#define JTAG_UART_BASE 0x8001030

#define JTAG_UART_DATA ((volatile int*) JTAG_UART_BASE)
#define JTAG_UART_CONTROL ((volatile int*) (JTAG_UART_BASE+4))

static void jtag_kiss_send(uint8_t byte){
 4002bfc:	defffe04 	addi	sp,sp,-8
 4002c00:	df000115 	stw	fp,4(sp)
 4002c04:	df000104 	addi	fp,sp,4
 4002c08:	2005883a 	mov	r2,r4
 4002c0c:	e0bfff05 	stb	r2,-4(fp)

         // Wait for room in buffer
         while( ! ( (*JTAG_UART_CONTROL) & 0xffff0000 ) );
 4002c10:	0001883a 	nop
 4002c14:	00820034 	movhi	r2,2048
 4002c18:	10840d04 	addi	r2,r2,4148
 4002c1c:	10800017 	ldw	r2,0(r2)
 4002c20:	10bfffec 	andhi	r2,r2,65535
 4002c24:	103ffb26 	beq	r2,zero,4002c14 <__alt_data_end+0xfc002c14>

         // Send byte
         *JTAG_UART_DATA = byte;
 4002c28:	00820034 	movhi	r2,2048
 4002c2c:	10840c04 	addi	r2,r2,4144
 4002c30:	e0ffff03 	ldbu	r3,-4(fp)
 4002c34:	10c00015 	stw	r3,0(r2)

}
 4002c38:	0001883a 	nop
 4002c3c:	e037883a 	mov	sp,fp
 4002c40:	df000017 	ldw	fp,0(sp)
 4002c44:	dec00104 	addi	sp,sp,4
 4002c48:	f800283a 	ret

04002c4c <camera_dma_enable>:

uint8_t jpeg_image_buffer[IMAGE_SIZE];

static void camera_dma_enable(bool enable){
 4002c4c:	defffd04 	addi	sp,sp,-12
 4002c50:	df000215 	stw	fp,8(sp)
 4002c54:	df000204 	addi	fp,sp,8
 4002c58:	2005883a 	mov	r2,r4
 4002c5c:	e0bfff05 	stb	r2,-4(fp)

	volatile uint32_t * control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
 4002c60:	00820034 	movhi	r2,2048
 4002c64:	10840304 	addi	r2,r2,4108
 4002c68:	e0bffe15 	stw	r2,-8(fp)
	if(enable){
 4002c6c:	e0bfff03 	ldbu	r2,-4(fp)
 4002c70:	10000626 	beq	r2,zero,4002c8c <camera_dma_enable+0x40>
		*control |= ~VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
 4002c74:	e0bffe17 	ldw	r2,-8(fp)
 4002c78:	10800017 	ldw	r2,0(r2)
 4002c7c:	10c00114 	ori	r3,r2,4
 4002c80:	e0bffe17 	ldw	r2,-8(fp)
 4002c84:	10c00015 	stw	r3,0(r2)
	} else {
		*control &= VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
	}

}
 4002c88:	00000606 	br	4002ca4 <camera_dma_enable+0x58>

	volatile uint32_t * control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
	if(enable){
		*control |= ~VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
	} else {
		*control &= VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
 4002c8c:	e0bffe17 	ldw	r2,-8(fp)
 4002c90:	10c00017 	ldw	r3,0(r2)
 4002c94:	00bffec4 	movi	r2,-5
 4002c98:	1886703a 	and	r3,r3,r2
 4002c9c:	e0bffe17 	ldw	r2,-8(fp)
 4002ca0:	10c00015 	stw	r3,0(r2)
	}

}
 4002ca4:	0001883a 	nop
 4002ca8:	e037883a 	mov	sp,fp
 4002cac:	df000017 	ldw	fp,0(sp)
 4002cb0:	dec00104 	addi	sp,sp,4
 4002cb4:	f800283a 	ret

04002cb8 <swap_buffer>:

static volatile uint32_t * swap_buffer(){
 4002cb8:	defffb04 	addi	sp,sp,-20
 4002cbc:	df000415 	stw	fp,16(sp)
 4002cc0:	df000404 	addi	fp,sp,16

	volatile uint32_t * buffer_address = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + 	VIDEO_DMA_CONTROLLER__BUFFER_OFFSET);
 4002cc4:	00820034 	movhi	r2,2048
 4002cc8:	10840004 	addi	r2,r2,4096
 4002ccc:	e0bffd15 	stw	r2,-12(fp)
	volatile uint32_t * back_buffer_address = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + 	VIDEO_DMA_CONTROLLER__BACK_BUFFER_OFFSET);
 4002cd0:	00820034 	movhi	r2,2048
 4002cd4:	10840104 	addi	r2,r2,4100
 4002cd8:	e0bffe15 	stw	r2,-8(fp)

	volatile uint32_t * status_control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
 4002cdc:	00820034 	movhi	r2,2048
 4002ce0:	10840304 	addi	r2,r2,4108
 4002ce4:	e0bfff15 	stw	r2,-4(fp)

	// instead of disabling DMA trigger buffer swap
	{

		// Setup back buffer register for swap
		if(*buffer_address == (uint32_t) image_buffer_a){
 4002ce8:	e0bffd17 	ldw	r2,-12(fp)
 4002cec:	10800017 	ldw	r2,0(r2)
 4002cf0:	00c18034 	movhi	r3,1536
 4002cf4:	10c0071e 	bne	r2,r3,4002d14 <swap_buffer+0x5c>
			current_image_buffer = image_buffer_a;
 4002cf8:	00818034 	movhi	r2,1536
 4002cfc:	e0bffc15 	stw	r2,-16(fp)
			*back_buffer_address = (uint32_t) image_buffer_b;
 4002d00:	0081c034 	movhi	r2,1792
 4002d04:	1007883a 	mov	r3,r2
 4002d08:	e0bffe17 	ldw	r2,-8(fp)
 4002d0c:	10c00015 	stw	r3,0(r2)
 4002d10:	00000606 	br	4002d2c <swap_buffer+0x74>
		} else {
			current_image_buffer = image_buffer_b;
 4002d14:	0081c034 	movhi	r2,1792
 4002d18:	e0bffc15 	stw	r2,-16(fp)
			*back_buffer_address = (uint32_t) image_buffer_a;
 4002d1c:	00818034 	movhi	r2,1536
 4002d20:	1007883a 	mov	r3,r2
 4002d24:	e0bffe17 	ldw	r2,-8(fp)
 4002d28:	10c00015 	stw	r3,0(r2)
		}

		// Trigger buffer swap
		*buffer_address = 0;
 4002d2c:	e0bffd17 	ldw	r2,-12(fp)
 4002d30:	10000015 	stw	zero,0(r2)

		// Wait for buffer swap
		while(*status_control & VIDEO_DMA_CONTROLLER__STATUS_CONTROL__MASK__SWAP);
 4002d34:	0001883a 	nop
 4002d38:	e0bfff17 	ldw	r2,-4(fp)
 4002d3c:	10800017 	ldw	r2,0(r2)
 4002d40:	1080004c 	andi	r2,r2,1
 4002d44:	103ffc1e 	bne	r2,zero,4002d38 <__alt_data_end+0xfc002d38>

	}

	return current_image_buffer;
 4002d48:	e0bffc17 	ldw	r2,-16(fp)

}
 4002d4c:	e037883a 	mov	sp,fp
 4002d50:	df000017 	ldw	fp,0(sp)
 4002d54:	dec00104 	addi	sp,sp,4
 4002d58:	f800283a 	ret

04002d5c <take_raw_picture_and_send_to_jtag>:


static void  take_raw_picture_and_send_to_jtag(void){
 4002d5c:	defffb04 	addi	sp,sp,-20
 4002d60:	dfc00415 	stw	ra,16(sp)
 4002d64:	df000315 	stw	fp,12(sp)
 4002d68:	df000304 	addi	fp,sp,12

	volatile uint32_t * current_image_buffer = swap_buffer();
 4002d6c:	4002cb80 	call	4002cb8 <swap_buffer>
 4002d70:	e0bffe15 	stw	r2,-8(fp)

	kiss_start(&jtag_kiss);
 4002d74:	d126ec04 	addi	r4,gp,-25680
 4002d78:	40031300 	call	4003130 <kiss_start>

	// Inject packet type
	uint8_t packet_type = KISS_PACKET_OPCODES__RAW_IMAGE;
 4002d7c:	00bfe0c4 	movi	r2,-125
 4002d80:	e0bfff05 	stb	r2,-4(fp)
	kiss_send_data(&jtag_kiss, &packet_type, 1);
 4002d84:	e0bfff04 	addi	r2,fp,-4
 4002d88:	01800044 	movi	r6,1
 4002d8c:	100b883a 	mov	r5,r2
 4002d90:	d126ec04 	addi	r4,gp,-25680
 4002d94:	40031740 	call	4003174 <kiss_send_data>


	uint32_t i;
	for (i = 0; i < IMAGE_SIZE; i++) {
 4002d98:	e03ffd15 	stw	zero,-12(fp)
 4002d9c:	00002406 	br	4002e30 <take_raw_picture_and_send_to_jtag+0xd4>

		uint8_t pixel_data[3];

		pixel_data[0] = (current_image_buffer[i] & 0x00FF0000) >> 16;
 4002da0:	e0bffd17 	ldw	r2,-12(fp)
 4002da4:	1085883a 	add	r2,r2,r2
 4002da8:	1085883a 	add	r2,r2,r2
 4002dac:	1007883a 	mov	r3,r2
 4002db0:	e0bffe17 	ldw	r2,-8(fp)
 4002db4:	10c5883a 	add	r2,r2,r3
 4002db8:	10800017 	ldw	r2,0(r2)
 4002dbc:	10803fec 	andhi	r2,r2,255
 4002dc0:	1004d43a 	srli	r2,r2,16
 4002dc4:	e0bfff45 	stb	r2,-3(fp)
		pixel_data[1] = (current_image_buffer[i] & 0x0000FF00) >> 8;
 4002dc8:	e0bffd17 	ldw	r2,-12(fp)
 4002dcc:	1085883a 	add	r2,r2,r2
 4002dd0:	1085883a 	add	r2,r2,r2
 4002dd4:	1007883a 	mov	r3,r2
 4002dd8:	e0bffe17 	ldw	r2,-8(fp)
 4002ddc:	10c5883a 	add	r2,r2,r3
 4002de0:	10800017 	ldw	r2,0(r2)
 4002de4:	10bfc00c 	andi	r2,r2,65280
 4002de8:	1004d23a 	srli	r2,r2,8
 4002dec:	e0bfff85 	stb	r2,-2(fp)
		pixel_data[2] = (current_image_buffer[i] & 0x000000FF) >> 0;
 4002df0:	e0bffd17 	ldw	r2,-12(fp)
 4002df4:	1085883a 	add	r2,r2,r2
 4002df8:	1085883a 	add	r2,r2,r2
 4002dfc:	1007883a 	mov	r3,r2
 4002e00:	e0bffe17 	ldw	r2,-8(fp)
 4002e04:	10c5883a 	add	r2,r2,r3
 4002e08:	10800017 	ldw	r2,0(r2)
 4002e0c:	e0bfffc5 	stb	r2,-1(fp)

		kiss_send_data(&jtag_kiss, pixel_data, 3);
 4002e10:	e0bfff44 	addi	r2,fp,-3
 4002e14:	018000c4 	movi	r6,3
 4002e18:	100b883a 	mov	r5,r2
 4002e1c:	d126ec04 	addi	r4,gp,-25680
 4002e20:	40031740 	call	4003174 <kiss_send_data>
	uint8_t packet_type = KISS_PACKET_OPCODES__RAW_IMAGE;
	kiss_send_data(&jtag_kiss, &packet_type, 1);


	uint32_t i;
	for (i = 0; i < IMAGE_SIZE; i++) {
 4002e24:	e0bffd17 	ldw	r2,-12(fp)
 4002e28:	10800044 	addi	r2,r2,1
 4002e2c:	e0bffd15 	stw	r2,-12(fp)
 4002e30:	e0fffd17 	ldw	r3,-12(fp)
 4002e34:	00800174 	movhi	r2,5
 4002e38:	10abffc4 	addi	r2,r2,-20481
 4002e3c:	10ffd82e 	bgeu	r2,r3,4002da0 <__alt_data_end+0xfc002da0>

		kiss_send_data(&jtag_kiss, pixel_data, 3);

	}

	kiss_end(&jtag_kiss);
 4002e40:	d126ec04 	addi	r4,gp,-25680
 4002e44:	40032a00 	call	40032a0 <kiss_end>
}
 4002e48:	0001883a 	nop
 4002e4c:	e037883a 	mov	sp,fp
 4002e50:	dfc00117 	ldw	ra,4(sp)
 4002e54:	df000017 	ldw	fp,0(sp)
 4002e58:	dec00204 	addi	sp,sp,8
 4002e5c:	f800283a 	ret

04002e60 <jpeg_jtag_send>:

static void jpeg_jtag_send(void* context, void* data, int size) {
 4002e60:	defffb04 	addi	sp,sp,-20
 4002e64:	dfc00415 	stw	ra,16(sp)
 4002e68:	df000315 	stw	fp,12(sp)
 4002e6c:	df000304 	addi	fp,sp,12
 4002e70:	e13ffd15 	stw	r4,-12(fp)
 4002e74:	e17ffe15 	stw	r5,-8(fp)
 4002e78:	e1bfff15 	stw	r6,-4(fp)

	kiss_send_data(&jtag_kiss, data, size);
 4002e7c:	e0bfff17 	ldw	r2,-4(fp)
 4002e80:	100d883a 	mov	r6,r2
 4002e84:	e17ffe17 	ldw	r5,-8(fp)
 4002e88:	d126ec04 	addi	r4,gp,-25680
 4002e8c:	40031740 	call	4003174 <kiss_send_data>

};
 4002e90:	0001883a 	nop
 4002e94:	e037883a 	mov	sp,fp
 4002e98:	dfc00117 	ldw	ra,4(sp)
 4002e9c:	df000017 	ldw	fp,0(sp)
 4002ea0:	dec00204 	addi	sp,sp,8
 4002ea4:	f800283a 	ret

04002ea8 <take_jpeg_picture_and_send_to_jtag>:

static void take_jpeg_picture_and_send_to_jtag(void) {
 4002ea8:	defff804 	addi	sp,sp,-32
 4002eac:	dfc00715 	stw	ra,28(sp)
 4002eb0:	df000615 	stw	fp,24(sp)
 4002eb4:	df000604 	addi	fp,sp,24

	volatile uint32_t * current_image_buffer = swap_buffer();
 4002eb8:	4002cb80 	call	4002cb8 <swap_buffer>
 4002ebc:	e0bffe15 	stw	r2,-8(fp)

	// copy image buffer to correct format
	uint32_t i;
	for(i = 0; i < IMAGE_SIZE; i++){
 4002ec0:	e03ffd15 	stw	zero,-12(fp)
 4002ec4:	00003906 	br	4002fac <take_jpeg_picture_and_send_to_jtag+0x104>
		jpeg_image_buffer[i*3 + 0] = (current_image_buffer[i] & 0x00FF0000) >> 16;
 4002ec8:	e0fffd17 	ldw	r3,-12(fp)
 4002ecc:	1805883a 	mov	r2,r3
 4002ed0:	1085883a 	add	r2,r2,r2
 4002ed4:	10c7883a 	add	r3,r2,r3
 4002ed8:	e0bffd17 	ldw	r2,-12(fp)
 4002edc:	1085883a 	add	r2,r2,r2
 4002ee0:	1085883a 	add	r2,r2,r2
 4002ee4:	1009883a 	mov	r4,r2
 4002ee8:	e0bffe17 	ldw	r2,-8(fp)
 4002eec:	1105883a 	add	r2,r2,r4
 4002ef0:	10800017 	ldw	r2,0(r2)
 4002ef4:	10803fec 	andhi	r2,r2,255
 4002ef8:	1004d43a 	srli	r2,r2,16
 4002efc:	1009883a 	mov	r4,r2
 4002f00:	00810074 	movhi	r2,1025
 4002f04:	10835904 	addi	r2,r2,3428
 4002f08:	10c5883a 	add	r2,r2,r3
 4002f0c:	11000005 	stb	r4,0(r2)
		jpeg_image_buffer[i*3 + 1] = (current_image_buffer[i] & 0x000000FF) >> 0;
 4002f10:	e0fffd17 	ldw	r3,-12(fp)
 4002f14:	1805883a 	mov	r2,r3
 4002f18:	1085883a 	add	r2,r2,r2
 4002f1c:	10c5883a 	add	r2,r2,r3
 4002f20:	10c00044 	addi	r3,r2,1
 4002f24:	e0bffd17 	ldw	r2,-12(fp)
 4002f28:	1085883a 	add	r2,r2,r2
 4002f2c:	1085883a 	add	r2,r2,r2
 4002f30:	1009883a 	mov	r4,r2
 4002f34:	e0bffe17 	ldw	r2,-8(fp)
 4002f38:	1105883a 	add	r2,r2,r4
 4002f3c:	10800017 	ldw	r2,0(r2)
 4002f40:	1009883a 	mov	r4,r2
 4002f44:	00810074 	movhi	r2,1025
 4002f48:	10835904 	addi	r2,r2,3428
 4002f4c:	10c5883a 	add	r2,r2,r3
 4002f50:	11000005 	stb	r4,0(r2)
		jpeg_image_buffer[i*3 + 2] = (current_image_buffer[i] & 0x0000FF00) >> 8;
 4002f54:	e0fffd17 	ldw	r3,-12(fp)
 4002f58:	1805883a 	mov	r2,r3
 4002f5c:	1085883a 	add	r2,r2,r2
 4002f60:	10c5883a 	add	r2,r2,r3
 4002f64:	10c00084 	addi	r3,r2,2
 4002f68:	e0bffd17 	ldw	r2,-12(fp)
 4002f6c:	1085883a 	add	r2,r2,r2
 4002f70:	1085883a 	add	r2,r2,r2
 4002f74:	1009883a 	mov	r4,r2
 4002f78:	e0bffe17 	ldw	r2,-8(fp)
 4002f7c:	1105883a 	add	r2,r2,r4
 4002f80:	10800017 	ldw	r2,0(r2)
 4002f84:	10bfc00c 	andi	r2,r2,65280
 4002f88:	1004d23a 	srli	r2,r2,8
 4002f8c:	1009883a 	mov	r4,r2
 4002f90:	00810074 	movhi	r2,1025
 4002f94:	10835904 	addi	r2,r2,3428
 4002f98:	10c5883a 	add	r2,r2,r3
 4002f9c:	11000005 	stb	r4,0(r2)

	volatile uint32_t * current_image_buffer = swap_buffer();

	// copy image buffer to correct format
	uint32_t i;
	for(i = 0; i < IMAGE_SIZE; i++){
 4002fa0:	e0bffd17 	ldw	r2,-12(fp)
 4002fa4:	10800044 	addi	r2,r2,1
 4002fa8:	e0bffd15 	stw	r2,-12(fp)
 4002fac:	e0fffd17 	ldw	r3,-12(fp)
 4002fb0:	00800174 	movhi	r2,5
 4002fb4:	10abffc4 	addi	r2,r2,-20481
 4002fb8:	10ffc32e 	bgeu	r2,r3,4002ec8 <__alt_data_end+0xfc002ec8>
		jpeg_image_buffer[i*3 + 0] = (current_image_buffer[i] & 0x00FF0000) >> 16;
		jpeg_image_buffer[i*3 + 1] = (current_image_buffer[i] & 0x000000FF) >> 0;
		jpeg_image_buffer[i*3 + 2] = (current_image_buffer[i] & 0x0000FF00) >> 8;
	}

	kiss_start(&jtag_kiss);
 4002fbc:	d126ec04 	addi	r4,gp,-25680
 4002fc0:	40031300 	call	4003130 <kiss_start>

	// Inject packet type
	uint8_t packet_type = KISS_PACKET_OPCODES__JPEG_IMAGE;
 4002fc4:	00bfe084 	movi	r2,-126
 4002fc8:	e0bfff05 	stb	r2,-4(fp)
	kiss_send_data(&jtag_kiss, &packet_type, 1);
 4002fcc:	e0bfff04 	addi	r2,fp,-4
 4002fd0:	01800044 	movi	r6,1
 4002fd4:	100b883a 	mov	r5,r2
 4002fd8:	d126ec04 	addi	r4,gp,-25680
 4002fdc:	40031740 	call	4003174 <kiss_send_data>

	// Convert image to JPEG and send over JTAG
	tje_encode_with_func(
 4002fe0:	00810074 	movhi	r2,1025
 4002fe4:	10835904 	addi	r2,r2,3428
 4002fe8:	d8800215 	stw	r2,8(sp)
 4002fec:	008000c4 	movi	r2,3
 4002ff0:	d8800115 	stw	r2,4(sp)
 4002ff4:	00807804 	movi	r2,480
 4002ff8:	d8800015 	stw	r2,0(sp)
 4002ffc:	01c0a004 	movi	r7,640
 4003000:	01800044 	movi	r6,1
 4003004:	000b883a 	mov	r5,zero
 4003008:	01010034 	movhi	r4,1024
 400300c:	210b9804 	addi	r4,r4,11872
 4003010:	40029a80 	call	40029a8 <tje_encode_with_func>
		IMAGE_HEIGHT,
		IMAGE_CHANNELS,
		jpeg_image_buffer // TODO select image buffer based on above swap
	);

	kiss_end(&jtag_kiss);
 4003014:	d126ec04 	addi	r4,gp,-25680
 4003018:	40032a00 	call	40032a0 <kiss_end>

}
 400301c:	0001883a 	nop
 4003020:	e037883a 	mov	sp,fp
 4003024:	dfc00117 	ldw	ra,4(sp)
 4003028:	df000017 	ldw	fp,0(sp)
 400302c:	dec00204 	addi	sp,sp,8
 4003030:	f800283a 	ret

04003034 <main>:

int main()
{
 4003034:	defff804 	addi	sp,sp,-32
 4003038:	dfc00715 	stw	ra,28(sp)
 400303c:	df000615 	stw	fp,24(sp)
 4003040:	df000604 	addi	fp,sp,24

	// Setup JTAG kiss interface
	jtag_kiss.send = jtag_kiss_send;
 4003044:	00810034 	movhi	r2,1024
 4003048:	108aff04 	addi	r2,r2,11260
 400304c:	d0a6ed15 	stw	r2,-25676(gp)

	// Send startup message
	const char hello_world[] = "\x81Hello from Nios II!";
 4003050:	009b1974 	movhi	r2,27749
 4003054:	10922044 	addi	r2,r2,18561
 4003058:	e0bffa15 	stw	r2,-24(fp)
 400305c:	00998834 	movhi	r2,26144
 4003060:	109bdb04 	addi	r2,r2,28524
 4003064:	e0bffb15 	stw	r2,-20(fp)
 4003068:	00881b74 	movhi	r2,8301
 400306c:	109bdc84 	addi	r2,r2,28530
 4003070:	e0bffc15 	stw	r2,-16(fp)
 4003074:	009cdbf4 	movhi	r2,29551
 4003078:	109a5384 	addi	r2,r2,26958
 400307c:	e0bffd15 	stw	r2,-12(fp)
 4003080:	00885274 	movhi	r2,8521
 4003084:	10924804 	addi	r2,r2,18720
 4003088:	e0bffe15 	stw	r2,-8(fp)
 400308c:	e03fff05 	stb	zero,-4(fp)
	kiss_send_packet(&jtag_kiss, (const uint8_t *) hello_world, sizeof(hello_world) - 1);
 4003090:	01800504 	movi	r6,20
 4003094:	e17ffa04 	addi	r5,fp,-24
 4003098:	d126ec04 	addi	r4,gp,-25680
 400309c:	40030dc0 	call	40030dc <kiss_send_packet>

	usleep(1000000);
 40030a0:	010003f4 	movhi	r4,15
 40030a4:	21109004 	addi	r4,r4,16960
 40030a8:	400adcc0 	call	400adcc <usleep>

	// Send image
	const static bool jpeg_transfer = false;
	if(jpeg_transfer){
 40030ac:	d0a00403 	ldbu	r2,-32752(gp)
 40030b0:	10803fcc 	andi	r2,r2,255
 40030b4:	10000226 	beq	r2,zero,40030c0 <main+0x8c>
		take_jpeg_picture_and_send_to_jtag();
 40030b8:	4002ea80 	call	4002ea8 <take_jpeg_picture_and_send_to_jtag>
 40030bc:	00000106 	br	40030c4 <main+0x90>
	} else {
		// Naive Slow Transfer
		take_raw_picture_and_send_to_jtag();
 40030c0:	4002d5c0 	call	4002d5c <take_raw_picture_and_send_to_jtag>
	}

	return 0;
 40030c4:	0005883a 	mov	r2,zero

}
 40030c8:	e037883a 	mov	sp,fp
 40030cc:	dfc00117 	ldw	ra,4(sp)
 40030d0:	df000017 	ldw	fp,0(sp)
 40030d4:	dec00204 	addi	sp,sp,8
 40030d8:	f800283a 	ret

040030dc <kiss_send_packet>:
 *      Author: DrYerzinia
 */

#include "kiss.h"

void kiss_send_packet(kiss_t * kiss, const uint8_t * data, size_t len){
 40030dc:	defffb04 	addi	sp,sp,-20
 40030e0:	dfc00415 	stw	ra,16(sp)
 40030e4:	df000315 	stw	fp,12(sp)
 40030e8:	df000304 	addi	fp,sp,12
 40030ec:	e13ffd15 	stw	r4,-12(fp)
 40030f0:	e17ffe15 	stw	r5,-8(fp)
 40030f4:	e1bfff15 	stw	r6,-4(fp)

	kiss_start(kiss);
 40030f8:	e13ffd17 	ldw	r4,-12(fp)
 40030fc:	40031300 	call	4003130 <kiss_start>
	kiss_send_data(kiss, data, len);
 4003100:	e1bfff17 	ldw	r6,-4(fp)
 4003104:	e17ffe17 	ldw	r5,-8(fp)
 4003108:	e13ffd17 	ldw	r4,-12(fp)
 400310c:	40031740 	call	4003174 <kiss_send_data>
	kiss_end(kiss);
 4003110:	e13ffd17 	ldw	r4,-12(fp)
 4003114:	40032a00 	call	40032a0 <kiss_end>

}
 4003118:	0001883a 	nop
 400311c:	e037883a 	mov	sp,fp
 4003120:	dfc00117 	ldw	ra,4(sp)
 4003124:	df000017 	ldw	fp,0(sp)
 4003128:	dec00204 	addi	sp,sp,8
 400312c:	f800283a 	ret

04003130 <kiss_start>:

void kiss_start(kiss_t * kiss){
 4003130:	defffd04 	addi	sp,sp,-12
 4003134:	dfc00215 	stw	ra,8(sp)
 4003138:	df000115 	stw	fp,4(sp)
 400313c:	df000104 	addi	fp,sp,4
 4003140:	e13fff15 	stw	r4,-4(fp)

	kiss->state = KISS_STATE__NORMAL;
 4003144:	e0bfff17 	ldw	r2,-4(fp)
 4003148:	10000015 	stw	zero,0(r2)
	kiss->send(KISS_SYMBOLS__FEND);
 400314c:	e0bfff17 	ldw	r2,-4(fp)
 4003150:	10800117 	ldw	r2,4(r2)
 4003154:	01003004 	movi	r4,192
 4003158:	103ee83a 	callr	r2

}
 400315c:	0001883a 	nop
 4003160:	e037883a 	mov	sp,fp
 4003164:	dfc00117 	ldw	ra,4(sp)
 4003168:	df000017 	ldw	fp,0(sp)
 400316c:	dec00204 	addi	sp,sp,8
 4003170:	f800283a 	ret

04003174 <kiss_send_data>:

void kiss_send_data(kiss_t * kiss, const uint8_t * data, size_t len){
 4003174:	defffa04 	addi	sp,sp,-24
 4003178:	dfc00515 	stw	ra,20(sp)
 400317c:	df000415 	stw	fp,16(sp)
 4003180:	df000404 	addi	fp,sp,16
 4003184:	e13ffd15 	stw	r4,-12(fp)
 4003188:	e17ffe15 	stw	r5,-8(fp)
 400318c:	e1bfff15 	stw	r6,-4(fp)

	while(len > 0){
 4003190:	00003b06 	br	4003280 <kiss_send_data+0x10c>

		switch( kiss->state ){
 4003194:	e0bffd17 	ldw	r2,-12(fp)
 4003198:	10800017 	ldw	r2,0(r2)
 400319c:	10c00060 	cmpeqi	r3,r2,1
 40031a0:	1800291e 	bne	r3,zero,4003248 <kiss_send_data+0xd4>
 40031a4:	0080032e 	bgeu	zero,r2,40031b4 <kiss_send_data+0x40>
 40031a8:	108000a0 	cmpeqi	r2,r2,2
 40031ac:	10002d1e 	bne	r2,zero,4003264 <kiss_send_data+0xf0>
 40031b0:	00003306 	br	4003280 <kiss_send_data+0x10c>

			case KISS_STATE__NORMAL:
				{

					len--;
 40031b4:	e0bfff17 	ldw	r2,-4(fp)
 40031b8:	10bfffc4 	addi	r2,r2,-1
 40031bc:	e0bfff15 	stw	r2,-4(fp)

					uint8_t next_symbol = (*data++);
 40031c0:	e0bffe17 	ldw	r2,-8(fp)
 40031c4:	10c00044 	addi	r3,r2,1
 40031c8:	e0fffe15 	stw	r3,-8(fp)
 40031cc:	10800003 	ldbu	r2,0(r2)
 40031d0:	e0bffc05 	stb	r2,-16(fp)
					switch( next_symbol ){
 40031d4:	e0bffc03 	ldbu	r2,-16(fp)
 40031d8:	10c03020 	cmpeqi	r3,r2,192
 40031dc:	1800031e 	bne	r3,zero,40031ec <kiss_send_data+0x78>
 40031e0:	108036e0 	cmpeqi	r2,r2,219
 40031e4:	1000091e 	bne	r2,zero,400320c <kiss_send_data+0x98>
 40031e8:	00001006 	br	400322c <kiss_send_data+0xb8>
						case KISS_SYMBOLS__FEND:
							kiss->state = KISS_STATE__END;
 40031ec:	e0bffd17 	ldw	r2,-12(fp)
 40031f0:	00c00084 	movi	r3,2
 40031f4:	10c00015 	stw	r3,0(r2)
							kiss->send(KISS_SYMBOLS__FESC);
 40031f8:	e0bffd17 	ldw	r2,-12(fp)
 40031fc:	10800117 	ldw	r2,4(r2)
 4003200:	010036c4 	movi	r4,219
 4003204:	103ee83a 	callr	r2
							break;
 4003208:	00000e06 	br	4003244 <kiss_send_data+0xd0>
						case KISS_SYMBOLS__FESC:
							kiss->state = KISS_STATE__ESC;
 400320c:	e0bffd17 	ldw	r2,-12(fp)
 4003210:	00c00044 	movi	r3,1
 4003214:	10c00015 	stw	r3,0(r2)
							kiss->send(KISS_SYMBOLS__FESC);
 4003218:	e0bffd17 	ldw	r2,-12(fp)
 400321c:	10800117 	ldw	r2,4(r2)
 4003220:	010036c4 	movi	r4,219
 4003224:	103ee83a 	callr	r2
							break;
 4003228:	00000606 	br	4003244 <kiss_send_data+0xd0>
						default:
							kiss->send(next_symbol);
 400322c:	e0bffd17 	ldw	r2,-12(fp)
 4003230:	10800117 	ldw	r2,4(r2)
 4003234:	e0fffc03 	ldbu	r3,-16(fp)
 4003238:	1809883a 	mov	r4,r3
 400323c:	103ee83a 	callr	r2
							break;
 4003240:	0001883a 	nop
					}
				}
				break;
 4003244:	00000e06 	br	4003280 <kiss_send_data+0x10c>

			case KISS_STATE__ESC:
				kiss->state = KISS_STATE__NORMAL;
 4003248:	e0bffd17 	ldw	r2,-12(fp)
 400324c:	10000015 	stw	zero,0(r2)
				kiss->send(KISS_SYMBOLS__TFESC);
 4003250:	e0bffd17 	ldw	r2,-12(fp)
 4003254:	10800117 	ldw	r2,4(r2)
 4003258:	01003744 	movi	r4,221
 400325c:	103ee83a 	callr	r2
				break;
 4003260:	00000706 	br	4003280 <kiss_send_data+0x10c>

			case KISS_STATE__END:
				kiss->state = KISS_STATE__NORMAL;
 4003264:	e0bffd17 	ldw	r2,-12(fp)
 4003268:	10000015 	stw	zero,0(r2)
				kiss->send(KISS_SYMBOLS__TFEND);
 400326c:	e0bffd17 	ldw	r2,-12(fp)
 4003270:	10800117 	ldw	r2,4(r2)
 4003274:	01003704 	movi	r4,220
 4003278:	103ee83a 	callr	r2
				break;
 400327c:	0001883a 	nop

}

void kiss_send_data(kiss_t * kiss, const uint8_t * data, size_t len){

	while(len > 0){
 4003280:	e0bfff17 	ldw	r2,-4(fp)
 4003284:	103fc31e 	bne	r2,zero,4003194 <__alt_data_end+0xfc003194>

		}

	}

}
 4003288:	0001883a 	nop
 400328c:	e037883a 	mov	sp,fp
 4003290:	dfc00117 	ldw	ra,4(sp)
 4003294:	df000017 	ldw	fp,0(sp)
 4003298:	dec00204 	addi	sp,sp,8
 400329c:	f800283a 	ret

040032a0 <kiss_end>:

void kiss_end(kiss_t * kiss){
 40032a0:	defffd04 	addi	sp,sp,-12
 40032a4:	dfc00215 	stw	ra,8(sp)
 40032a8:	df000115 	stw	fp,4(sp)
 40032ac:	df000104 	addi	fp,sp,4
 40032b0:	e13fff15 	stw	r4,-4(fp)

	kiss->state = KISS_STATE__NORMAL;
 40032b4:	e0bfff17 	ldw	r2,-4(fp)
 40032b8:	10000015 	stw	zero,0(r2)
	kiss->send(KISS_SYMBOLS__FEND);
 40032bc:	e0bfff17 	ldw	r2,-4(fp)
 40032c0:	10800117 	ldw	r2,4(r2)
 40032c4:	01003004 	movi	r4,192
 40032c8:	103ee83a 	callr	r2

}
 40032cc:	0001883a 	nop
 40032d0:	e037883a 	mov	sp,fp
 40032d4:	dfc00117 	ldw	ra,4(sp)
 40032d8:	df000017 	ldw	fp,0(sp)
 40032dc:	dec00204 	addi	sp,sp,8
 40032e0:	f800283a 	ret

040032e4 <floorf>:
 40032e4:	defffa04 	addi	sp,sp,-24
 40032e8:	dc800215 	stw	r18,8(sp)
 40032ec:	04a00034 	movhi	r18,32768
 40032f0:	94bfffc4 	addi	r18,r18,-1
 40032f4:	9124703a 	and	r18,r18,r4
 40032f8:	dc400115 	stw	r17,4(sp)
 40032fc:	9022d5fa 	srli	r17,r18,23
 4003300:	dc000015 	stw	r16,0(sp)
 4003304:	dfc00515 	stw	ra,20(sp)
 4003308:	dd000415 	stw	r20,16(sp)
 400330c:	dcc00315 	stw	r19,12(sp)
 4003310:	8c7fe044 	addi	r17,r17,-127
 4003314:	00800584 	movi	r2,22
 4003318:	2021883a 	mov	r16,r4
 400331c:	14401216 	blt	r2,r17,4003368 <floorf+0x84>
 4003320:	2029883a 	mov	r20,r4
 4003324:	88001f16 	blt	r17,zero,40033a4 <floorf+0xc0>
 4003328:	04802034 	movhi	r18,128
 400332c:	94bfffc4 	addi	r18,r18,-1
 4003330:	9465d83a 	sra	r18,r18,r17
 4003334:	9104703a 	and	r2,r18,r4
 4003338:	10000e26 	beq	r2,zero,4003374 <floorf+0x90>
 400333c:	015c52b4 	movhi	r5,29002
 4003340:	297cb284 	addi	r5,r5,-3382
 4003344:	40035c40 	call	40035c4 <__addsf3>
 4003348:	000b883a 	mov	r5,zero
 400334c:	1009883a 	mov	r4,r2
 4003350:	4003ecc0 	call	4003ecc <__gesf2>
 4003354:	0080070e 	bge	zero,r2,4003374 <floorf+0x90>
 4003358:	80001c16 	blt	r16,zero,40033cc <floorf+0xe8>
 400335c:	0484303a 	nor	r2,zero,r18
 4003360:	1504703a 	and	r2,r2,r20
 4003364:	00000406 	br	4003378 <floorf+0x94>
 4003368:	009fe034 	movhi	r2,32640
 400336c:	10bfffc4 	addi	r2,r2,-1
 4003370:	14800936 	bltu	r2,r18,4003398 <floorf+0xb4>
 4003374:	8005883a 	mov	r2,r16
 4003378:	dfc00517 	ldw	ra,20(sp)
 400337c:	dd000417 	ldw	r20,16(sp)
 4003380:	dcc00317 	ldw	r19,12(sp)
 4003384:	dc800217 	ldw	r18,8(sp)
 4003388:	dc400117 	ldw	r17,4(sp)
 400338c:	dc000017 	ldw	r16,0(sp)
 4003390:	dec00604 	addi	sp,sp,24
 4003394:	f800283a 	ret
 4003398:	200b883a 	mov	r5,r4
 400339c:	40035c40 	call	40035c4 <__addsf3>
 40033a0:	003ff506 	br	4003378 <__alt_data_end+0xfc003378>
 40033a4:	015c52b4 	movhi	r5,29002
 40033a8:	297cb284 	addi	r5,r5,-3382
 40033ac:	40035c40 	call	40035c4 <__addsf3>
 40033b0:	000b883a 	mov	r5,zero
 40033b4:	1009883a 	mov	r4,r2
 40033b8:	4003ecc0 	call	4003ecc <__gesf2>
 40033bc:	00bfed0e 	bge	zero,r2,4003374 <__alt_data_end+0xfc003374>
 40033c0:	80000616 	blt	r16,zero,40033dc <floorf+0xf8>
 40033c4:	0005883a 	mov	r2,zero
 40033c8:	003feb06 	br	4003378 <__alt_data_end+0xfc003378>
 40033cc:	00802034 	movhi	r2,128
 40033d0:	1445d83a 	sra	r2,r2,r17
 40033d4:	1429883a 	add	r20,r2,r16
 40033d8:	003fe006 	br	400335c <__alt_data_end+0xfc00335c>
 40033dc:	903fe526 	beq	r18,zero,4003374 <__alt_data_end+0xfc003374>
 40033e0:	00afe034 	movhi	r2,49024
 40033e4:	003fe406 	br	4003378 <__alt_data_end+0xfc003378>

040033e8 <__divsi3>:
 40033e8:	20001b16 	blt	r4,zero,4003458 <__divsi3+0x70>
 40033ec:	000f883a 	mov	r7,zero
 40033f0:	28001616 	blt	r5,zero,400344c <__divsi3+0x64>
 40033f4:	200d883a 	mov	r6,r4
 40033f8:	29001a2e 	bgeu	r5,r4,4003464 <__divsi3+0x7c>
 40033fc:	00800804 	movi	r2,32
 4003400:	00c00044 	movi	r3,1
 4003404:	00000106 	br	400340c <__divsi3+0x24>
 4003408:	10000d26 	beq	r2,zero,4003440 <__divsi3+0x58>
 400340c:	294b883a 	add	r5,r5,r5
 4003410:	10bfffc4 	addi	r2,r2,-1
 4003414:	18c7883a 	add	r3,r3,r3
 4003418:	293ffb36 	bltu	r5,r4,4003408 <__alt_data_end+0xfc003408>
 400341c:	0005883a 	mov	r2,zero
 4003420:	18000726 	beq	r3,zero,4003440 <__divsi3+0x58>
 4003424:	0005883a 	mov	r2,zero
 4003428:	31400236 	bltu	r6,r5,4003434 <__divsi3+0x4c>
 400342c:	314dc83a 	sub	r6,r6,r5
 4003430:	10c4b03a 	or	r2,r2,r3
 4003434:	1806d07a 	srli	r3,r3,1
 4003438:	280ad07a 	srli	r5,r5,1
 400343c:	183ffa1e 	bne	r3,zero,4003428 <__alt_data_end+0xfc003428>
 4003440:	38000126 	beq	r7,zero,4003448 <__divsi3+0x60>
 4003444:	0085c83a 	sub	r2,zero,r2
 4003448:	f800283a 	ret
 400344c:	014bc83a 	sub	r5,zero,r5
 4003450:	39c0005c 	xori	r7,r7,1
 4003454:	003fe706 	br	40033f4 <__alt_data_end+0xfc0033f4>
 4003458:	0109c83a 	sub	r4,zero,r4
 400345c:	01c00044 	movi	r7,1
 4003460:	003fe306 	br	40033f0 <__alt_data_end+0xfc0033f0>
 4003464:	00c00044 	movi	r3,1
 4003468:	003fee06 	br	4003424 <__alt_data_end+0xfc003424>

0400346c <__modsi3>:
 400346c:	20001716 	blt	r4,zero,40034cc <__modsi3+0x60>
 4003470:	000f883a 	mov	r7,zero
 4003474:	2005883a 	mov	r2,r4
 4003478:	28001216 	blt	r5,zero,40034c4 <__modsi3+0x58>
 400347c:	2900162e 	bgeu	r5,r4,40034d8 <__modsi3+0x6c>
 4003480:	01800804 	movi	r6,32
 4003484:	00c00044 	movi	r3,1
 4003488:	00000106 	br	4003490 <__modsi3+0x24>
 400348c:	30000a26 	beq	r6,zero,40034b8 <__modsi3+0x4c>
 4003490:	294b883a 	add	r5,r5,r5
 4003494:	31bfffc4 	addi	r6,r6,-1
 4003498:	18c7883a 	add	r3,r3,r3
 400349c:	293ffb36 	bltu	r5,r4,400348c <__alt_data_end+0xfc00348c>
 40034a0:	18000526 	beq	r3,zero,40034b8 <__modsi3+0x4c>
 40034a4:	1806d07a 	srli	r3,r3,1
 40034a8:	11400136 	bltu	r2,r5,40034b0 <__modsi3+0x44>
 40034ac:	1145c83a 	sub	r2,r2,r5
 40034b0:	280ad07a 	srli	r5,r5,1
 40034b4:	183ffb1e 	bne	r3,zero,40034a4 <__alt_data_end+0xfc0034a4>
 40034b8:	38000126 	beq	r7,zero,40034c0 <__modsi3+0x54>
 40034bc:	0085c83a 	sub	r2,zero,r2
 40034c0:	f800283a 	ret
 40034c4:	014bc83a 	sub	r5,zero,r5
 40034c8:	003fec06 	br	400347c <__alt_data_end+0xfc00347c>
 40034cc:	0109c83a 	sub	r4,zero,r4
 40034d0:	01c00044 	movi	r7,1
 40034d4:	003fe706 	br	4003474 <__alt_data_end+0xfc003474>
 40034d8:	00c00044 	movi	r3,1
 40034dc:	003ff106 	br	40034a4 <__alt_data_end+0xfc0034a4>

040034e0 <__udivsi3>:
 40034e0:	200d883a 	mov	r6,r4
 40034e4:	2900152e 	bgeu	r5,r4,400353c <__udivsi3+0x5c>
 40034e8:	28001416 	blt	r5,zero,400353c <__udivsi3+0x5c>
 40034ec:	00800804 	movi	r2,32
 40034f0:	00c00044 	movi	r3,1
 40034f4:	00000206 	br	4003500 <__udivsi3+0x20>
 40034f8:	10000e26 	beq	r2,zero,4003534 <__udivsi3+0x54>
 40034fc:	28000516 	blt	r5,zero,4003514 <__udivsi3+0x34>
 4003500:	294b883a 	add	r5,r5,r5
 4003504:	10bfffc4 	addi	r2,r2,-1
 4003508:	18c7883a 	add	r3,r3,r3
 400350c:	293ffa36 	bltu	r5,r4,40034f8 <__alt_data_end+0xfc0034f8>
 4003510:	18000826 	beq	r3,zero,4003534 <__udivsi3+0x54>
 4003514:	0005883a 	mov	r2,zero
 4003518:	31400236 	bltu	r6,r5,4003524 <__udivsi3+0x44>
 400351c:	314dc83a 	sub	r6,r6,r5
 4003520:	10c4b03a 	or	r2,r2,r3
 4003524:	1806d07a 	srli	r3,r3,1
 4003528:	280ad07a 	srli	r5,r5,1
 400352c:	183ffa1e 	bne	r3,zero,4003518 <__alt_data_end+0xfc003518>
 4003530:	f800283a 	ret
 4003534:	0005883a 	mov	r2,zero
 4003538:	f800283a 	ret
 400353c:	00c00044 	movi	r3,1
 4003540:	003ff406 	br	4003514 <__alt_data_end+0xfc003514>

04003544 <__umodsi3>:
 4003544:	2005883a 	mov	r2,r4
 4003548:	2900122e 	bgeu	r5,r4,4003594 <__umodsi3+0x50>
 400354c:	28001116 	blt	r5,zero,4003594 <__umodsi3+0x50>
 4003550:	01800804 	movi	r6,32
 4003554:	00c00044 	movi	r3,1
 4003558:	00000206 	br	4003564 <__umodsi3+0x20>
 400355c:	30000c26 	beq	r6,zero,4003590 <__umodsi3+0x4c>
 4003560:	28000516 	blt	r5,zero,4003578 <__umodsi3+0x34>
 4003564:	294b883a 	add	r5,r5,r5
 4003568:	31bfffc4 	addi	r6,r6,-1
 400356c:	18c7883a 	add	r3,r3,r3
 4003570:	293ffa36 	bltu	r5,r4,400355c <__alt_data_end+0xfc00355c>
 4003574:	18000626 	beq	r3,zero,4003590 <__umodsi3+0x4c>
 4003578:	1806d07a 	srli	r3,r3,1
 400357c:	11400136 	bltu	r2,r5,4003584 <__umodsi3+0x40>
 4003580:	1145c83a 	sub	r2,r2,r5
 4003584:	280ad07a 	srli	r5,r5,1
 4003588:	183ffb1e 	bne	r3,zero,4003578 <__alt_data_end+0xfc003578>
 400358c:	f800283a 	ret
 4003590:	f800283a 	ret
 4003594:	00c00044 	movi	r3,1
 4003598:	003ff706 	br	4003578 <__alt_data_end+0xfc003578>

0400359c <__mulsi3>:
 400359c:	0005883a 	mov	r2,zero
 40035a0:	20000726 	beq	r4,zero,40035c0 <__mulsi3+0x24>
 40035a4:	20c0004c 	andi	r3,r4,1
 40035a8:	2008d07a 	srli	r4,r4,1
 40035ac:	18000126 	beq	r3,zero,40035b4 <__mulsi3+0x18>
 40035b0:	1145883a 	add	r2,r2,r5
 40035b4:	294b883a 	add	r5,r5,r5
 40035b8:	203ffa1e 	bne	r4,zero,40035a4 <__alt_data_end+0xfc0035a4>
 40035bc:	f800283a 	ret
 40035c0:	f800283a 	ret

040035c4 <__addsf3>:
 40035c4:	defffc04 	addi	sp,sp,-16
 40035c8:	2004d7fa 	srli	r2,r4,31
 40035cc:	280cd5fa 	srli	r6,r5,23
 40035d0:	dc000015 	stw	r16,0(sp)
 40035d4:	00c02034 	movhi	r3,128
 40035d8:	2020d5fa 	srli	r16,r4,23
 40035dc:	280ed7fa 	srli	r7,r5,31
 40035e0:	18ffffc4 	addi	r3,r3,-1
 40035e4:	dc400115 	stw	r17,4(sp)
 40035e8:	1908703a 	and	r4,r3,r4
 40035ec:	194a703a 	and	r5,r3,r5
 40035f0:	dfc00315 	stw	ra,12(sp)
 40035f4:	dc800215 	stw	r18,8(sp)
 40035f8:	14403fcc 	andi	r17,r2,255
 40035fc:	84003fcc 	andi	r16,r16,255
 4003600:	200890fa 	slli	r4,r4,3
 4003604:	31803fcc 	andi	r6,r6,255
 4003608:	280a90fa 	slli	r5,r5,3
 400360c:	89c05026 	beq	r17,r7,4003750 <__addsf3+0x18c>
 4003610:	8185c83a 	sub	r2,r16,r6
 4003614:	00807a0e 	bge	zero,r2,4003800 <__addsf3+0x23c>
 4003618:	30001e1e 	bne	r6,zero,4003694 <__addsf3+0xd0>
 400361c:	28006d1e 	bne	r5,zero,40037d4 <__addsf3+0x210>
 4003620:	208001cc 	andi	r2,r4,7
 4003624:	10000426 	beq	r2,zero,4003638 <__addsf3+0x74>
 4003628:	208003cc 	andi	r2,r4,15
 400362c:	00c00104 	movi	r3,4
 4003630:	10c00126 	beq	r2,r3,4003638 <__addsf3+0x74>
 4003634:	20c9883a 	add	r4,r4,r3
 4003638:	2081002c 	andhi	r2,r4,1024
 400363c:	10003926 	beq	r2,zero,4003724 <__addsf3+0x160>
 4003640:	84000044 	addi	r16,r16,1
 4003644:	00803fc4 	movi	r2,255
 4003648:	80807826 	beq	r16,r2,400382c <__addsf3+0x268>
 400364c:	200891ba 	slli	r4,r4,6
 4003650:	8805883a 	mov	r2,r17
 4003654:	2008d27a 	srli	r4,r4,9
 4003658:	84003fcc 	andi	r16,r16,255
 400365c:	800695fa 	slli	r3,r16,23
 4003660:	10803fcc 	andi	r2,r2,255
 4003664:	04002034 	movhi	r16,128
 4003668:	843fffc4 	addi	r16,r16,-1
 400366c:	100497fa 	slli	r2,r2,31
 4003670:	2408703a 	and	r4,r4,r16
 4003674:	20e0b03a 	or	r16,r4,r3
 4003678:	8084b03a 	or	r2,r16,r2
 400367c:	dfc00317 	ldw	ra,12(sp)
 4003680:	dc800217 	ldw	r18,8(sp)
 4003684:	dc400117 	ldw	r17,4(sp)
 4003688:	dc000017 	ldw	r16,0(sp)
 400368c:	dec00404 	addi	sp,sp,16
 4003690:	f800283a 	ret
 4003694:	00c03fc4 	movi	r3,255
 4003698:	80ffe126 	beq	r16,r3,4003620 <__alt_data_end+0xfc003620>
 400369c:	29410034 	orhi	r5,r5,1024
 40036a0:	00c006c4 	movi	r3,27
 40036a4:	18807516 	blt	r3,r2,400387c <__addsf3+0x2b8>
 40036a8:	00c00804 	movi	r3,32
 40036ac:	1887c83a 	sub	r3,r3,r2
 40036b0:	28c6983a 	sll	r3,r5,r3
 40036b4:	288ad83a 	srl	r5,r5,r2
 40036b8:	1804c03a 	cmpne	r2,r3,zero
 40036bc:	288ab03a 	or	r5,r5,r2
 40036c0:	2149c83a 	sub	r4,r4,r5
 40036c4:	2081002c 	andhi	r2,r4,1024
 40036c8:	10001426 	beq	r2,zero,400371c <__addsf3+0x158>
 40036cc:	04810034 	movhi	r18,1024
 40036d0:	94bfffc4 	addi	r18,r18,-1
 40036d4:	24a4703a 	and	r18,r4,r18
 40036d8:	9009883a 	mov	r4,r18
 40036dc:	4004a300 	call	4004a30 <__clzsi2>
 40036e0:	10bffec4 	addi	r2,r2,-5
 40036e4:	90a4983a 	sll	r18,r18,r2
 40036e8:	14005416 	blt	r2,r16,400383c <__addsf3+0x278>
 40036ec:	1405c83a 	sub	r2,r2,r16
 40036f0:	11000044 	addi	r4,r2,1
 40036f4:	00800804 	movi	r2,32
 40036f8:	1105c83a 	sub	r2,r2,r4
 40036fc:	9084983a 	sll	r2,r18,r2
 4003700:	9124d83a 	srl	r18,r18,r4
 4003704:	0021883a 	mov	r16,zero
 4003708:	1008c03a 	cmpne	r4,r2,zero
 400370c:	9108b03a 	or	r4,r18,r4
 4003710:	003fc306 	br	4003620 <__alt_data_end+0xfc003620>
 4003714:	1000db26 	beq	r2,zero,4003a84 <__addsf3+0x4c0>
 4003718:	1009883a 	mov	r4,r2
 400371c:	208001cc 	andi	r2,r4,7
 4003720:	103fc11e 	bne	r2,zero,4003628 <__alt_data_end+0xfc003628>
 4003724:	2006d0fa 	srli	r3,r4,3
 4003728:	01003fc4 	movi	r4,255
 400372c:	8805883a 	mov	r2,r17
 4003730:	8100241e 	bne	r16,r4,40037c4 <__addsf3+0x200>
 4003734:	18006e26 	beq	r3,zero,40038f0 <__addsf3+0x32c>
 4003738:	19001034 	orhi	r4,r3,64
 400373c:	00c02034 	movhi	r3,128
 4003740:	18ffffc4 	addi	r3,r3,-1
 4003744:	043fffc4 	movi	r16,-1
 4003748:	20c8703a 	and	r4,r4,r3
 400374c:	003fc206 	br	4003658 <__alt_data_end+0xfc003658>
 4003750:	8187c83a 	sub	r3,r16,r6
 4003754:	00c03e0e 	bge	zero,r3,4003850 <__addsf3+0x28c>
 4003758:	30002326 	beq	r6,zero,40037e8 <__addsf3+0x224>
 400375c:	01803fc4 	movi	r6,255
 4003760:	81bfaf26 	beq	r16,r6,4003620 <__alt_data_end+0xfc003620>
 4003764:	29410034 	orhi	r5,r5,1024
 4003768:	018006c4 	movi	r6,27
 400376c:	30c07416 	blt	r6,r3,4003940 <__addsf3+0x37c>
 4003770:	01800804 	movi	r6,32
 4003774:	30cdc83a 	sub	r6,r6,r3
 4003778:	298c983a 	sll	r6,r5,r6
 400377c:	28cad83a 	srl	r5,r5,r3
 4003780:	3006c03a 	cmpne	r3,r6,zero
 4003784:	28cab03a 	or	r5,r5,r3
 4003788:	2149883a 	add	r4,r4,r5
 400378c:	20c1002c 	andhi	r3,r4,1024
 4003790:	183fe226 	beq	r3,zero,400371c <__alt_data_end+0xfc00371c>
 4003794:	84000044 	addi	r16,r16,1
 4003798:	00c03fc4 	movi	r3,255
 400379c:	80c05426 	beq	r16,r3,40038f0 <__addsf3+0x32c>
 40037a0:	00bf0034 	movhi	r2,64512
 40037a4:	10bfffc4 	addi	r2,r2,-1
 40037a8:	20c0004c 	andi	r3,r4,1
 40037ac:	2088703a 	and	r4,r4,r2
 40037b0:	2008d07a 	srli	r4,r4,1
 40037b4:	20c8b03a 	or	r4,r4,r3
 40037b8:	003f9906 	br	4003620 <__alt_data_end+0xfc003620>
 40037bc:	0007883a 	mov	r3,zero
 40037c0:	0005883a 	mov	r2,zero
 40037c4:	01002034 	movhi	r4,128
 40037c8:	213fffc4 	addi	r4,r4,-1
 40037cc:	1908703a 	and	r4,r3,r4
 40037d0:	003fa106 	br	4003658 <__alt_data_end+0xfc003658>
 40037d4:	10bfffc4 	addi	r2,r2,-1
 40037d8:	103fb926 	beq	r2,zero,40036c0 <__alt_data_end+0xfc0036c0>
 40037dc:	00c03fc4 	movi	r3,255
 40037e0:	80ffaf1e 	bne	r16,r3,40036a0 <__alt_data_end+0xfc0036a0>
 40037e4:	003f8e06 	br	4003620 <__alt_data_end+0xfc003620>
 40037e8:	283f8d26 	beq	r5,zero,4003620 <__alt_data_end+0xfc003620>
 40037ec:	18ffffc4 	addi	r3,r3,-1
 40037f0:	183fe526 	beq	r3,zero,4003788 <__alt_data_end+0xfc003788>
 40037f4:	01803fc4 	movi	r6,255
 40037f8:	81bfdb1e 	bne	r16,r6,4003768 <__alt_data_end+0xfc003768>
 40037fc:	003f8806 	br	4003620 <__alt_data_end+0xfc003620>
 4003800:	1000201e 	bne	r2,zero,4003884 <__addsf3+0x2c0>
 4003804:	80800044 	addi	r2,r16,1
 4003808:	10803fcc 	andi	r2,r2,255
 400380c:	01800044 	movi	r6,1
 4003810:	3080450e 	bge	r6,r2,4003928 <__addsf3+0x364>
 4003814:	2165c83a 	sub	r18,r4,r5
 4003818:	90c1002c 	andhi	r3,r18,1024
 400381c:	18002b26 	beq	r3,zero,40038cc <__addsf3+0x308>
 4003820:	2925c83a 	sub	r18,r5,r4
 4003824:	3823883a 	mov	r17,r7
 4003828:	003fab06 	br	40036d8 <__alt_data_end+0xfc0036d8>
 400382c:	8805883a 	mov	r2,r17
 4003830:	043fffc4 	movi	r16,-1
 4003834:	0009883a 	mov	r4,zero
 4003838:	003f8706 	br	4003658 <__alt_data_end+0xfc003658>
 400383c:	013f0034 	movhi	r4,64512
 4003840:	213fffc4 	addi	r4,r4,-1
 4003844:	80a1c83a 	sub	r16,r16,r2
 4003848:	9108703a 	and	r4,r18,r4
 400384c:	003f7406 	br	4003620 <__alt_data_end+0xfc003620>
 4003850:	1800411e 	bne	r3,zero,4003958 <__addsf3+0x394>
 4003854:	80c00044 	addi	r3,r16,1
 4003858:	19c03fcc 	andi	r7,r3,255
 400385c:	01800044 	movi	r6,1
 4003860:	31c0260e 	bge	r6,r7,40038fc <__addsf3+0x338>
 4003864:	01803fc4 	movi	r6,255
 4003868:	19802126 	beq	r3,r6,40038f0 <__addsf3+0x32c>
 400386c:	2149883a 	add	r4,r4,r5
 4003870:	2008d07a 	srli	r4,r4,1
 4003874:	1821883a 	mov	r16,r3
 4003878:	003f6906 	br	4003620 <__alt_data_end+0xfc003620>
 400387c:	01400044 	movi	r5,1
 4003880:	003f8f06 	br	40036c0 <__alt_data_end+0xfc0036c0>
 4003884:	8000151e 	bne	r16,zero,40038dc <__addsf3+0x318>
 4003888:	20002f26 	beq	r4,zero,4003948 <__addsf3+0x384>
 400388c:	0084303a 	nor	r2,zero,r2
 4003890:	10000a26 	beq	r2,zero,40038bc <__addsf3+0x2f8>
 4003894:	00c03fc4 	movi	r3,255
 4003898:	30c02b26 	beq	r6,r3,4003948 <__addsf3+0x384>
 400389c:	00c006c4 	movi	r3,27
 40038a0:	18806d16 	blt	r3,r2,4003a58 <__addsf3+0x494>
 40038a4:	00c00804 	movi	r3,32
 40038a8:	1887c83a 	sub	r3,r3,r2
 40038ac:	20c6983a 	sll	r3,r4,r3
 40038b0:	2084d83a 	srl	r2,r4,r2
 40038b4:	1808c03a 	cmpne	r4,r3,zero
 40038b8:	1108b03a 	or	r4,r2,r4
 40038bc:	2909c83a 	sub	r4,r5,r4
 40038c0:	3021883a 	mov	r16,r6
 40038c4:	3823883a 	mov	r17,r7
 40038c8:	003f7e06 	br	40036c4 <__alt_data_end+0xfc0036c4>
 40038cc:	903f821e 	bne	r18,zero,40036d8 <__alt_data_end+0xfc0036d8>
 40038d0:	0005883a 	mov	r2,zero
 40038d4:	0021883a 	mov	r16,zero
 40038d8:	003fba06 	br	40037c4 <__alt_data_end+0xfc0037c4>
 40038dc:	00c03fc4 	movi	r3,255
 40038e0:	30c01926 	beq	r6,r3,4003948 <__addsf3+0x384>
 40038e4:	0085c83a 	sub	r2,zero,r2
 40038e8:	21010034 	orhi	r4,r4,1024
 40038ec:	003feb06 	br	400389c <__alt_data_end+0xfc00389c>
 40038f0:	043fffc4 	movi	r16,-1
 40038f4:	0009883a 	mov	r4,zero
 40038f8:	003f5706 	br	4003658 <__alt_data_end+0xfc003658>
 40038fc:	80004a1e 	bne	r16,zero,4003a28 <__addsf3+0x464>
 4003900:	20005926 	beq	r4,zero,4003a68 <__addsf3+0x4a4>
 4003904:	283f4626 	beq	r5,zero,4003620 <__alt_data_end+0xfc003620>
 4003908:	2149883a 	add	r4,r4,r5
 400390c:	2081002c 	andhi	r2,r4,1024
 4003910:	103f8226 	beq	r2,zero,400371c <__alt_data_end+0xfc00371c>
 4003914:	00bf0034 	movhi	r2,64512
 4003918:	10bfffc4 	addi	r2,r2,-1
 400391c:	3021883a 	mov	r16,r6
 4003920:	2088703a 	and	r4,r4,r2
 4003924:	003f3e06 	br	4003620 <__alt_data_end+0xfc003620>
 4003928:	8000121e 	bne	r16,zero,4003974 <__addsf3+0x3b0>
 400392c:	2000261e 	bne	r4,zero,40039c8 <__addsf3+0x404>
 4003930:	283fa226 	beq	r5,zero,40037bc <__alt_data_end+0xfc0037bc>
 4003934:	2809883a 	mov	r4,r5
 4003938:	3823883a 	mov	r17,r7
 400393c:	003f3806 	br	4003620 <__alt_data_end+0xfc003620>
 4003940:	01400044 	movi	r5,1
 4003944:	003f9006 	br	4003788 <__alt_data_end+0xfc003788>
 4003948:	2809883a 	mov	r4,r5
 400394c:	3021883a 	mov	r16,r6
 4003950:	3823883a 	mov	r17,r7
 4003954:	003f3206 	br	4003620 <__alt_data_end+0xfc003620>
 4003958:	80000c1e 	bne	r16,zero,400398c <__addsf3+0x3c8>
 400395c:	20002f26 	beq	r4,zero,4003a1c <__addsf3+0x458>
 4003960:	00c6303a 	nor	r3,zero,r3
 4003964:	18002b1e 	bne	r3,zero,4003a14 <__addsf3+0x450>
 4003968:	2149883a 	add	r4,r4,r5
 400396c:	3021883a 	mov	r16,r6
 4003970:	003f8606 	br	400378c <__alt_data_end+0xfc00378c>
 4003974:	20001b1e 	bne	r4,zero,40039e4 <__addsf3+0x420>
 4003978:	28003926 	beq	r5,zero,4003a60 <__addsf3+0x49c>
 400397c:	2809883a 	mov	r4,r5
 4003980:	3823883a 	mov	r17,r7
 4003984:	04003fc4 	movi	r16,255
 4003988:	003f2506 	br	4003620 <__alt_data_end+0xfc003620>
 400398c:	01c03fc4 	movi	r7,255
 4003990:	31c02226 	beq	r6,r7,4003a1c <__addsf3+0x458>
 4003994:	00c7c83a 	sub	r3,zero,r3
 4003998:	21010034 	orhi	r4,r4,1024
 400399c:	01c006c4 	movi	r7,27
 40039a0:	38c03616 	blt	r7,r3,4003a7c <__addsf3+0x4b8>
 40039a4:	01c00804 	movi	r7,32
 40039a8:	38cfc83a 	sub	r7,r7,r3
 40039ac:	21ce983a 	sll	r7,r4,r7
 40039b0:	20c6d83a 	srl	r3,r4,r3
 40039b4:	3808c03a 	cmpne	r4,r7,zero
 40039b8:	1906b03a 	or	r3,r3,r4
 40039bc:	1949883a 	add	r4,r3,r5
 40039c0:	3021883a 	mov	r16,r6
 40039c4:	003f7106 	br	400378c <__alt_data_end+0xfc00378c>
 40039c8:	283f1526 	beq	r5,zero,4003620 <__alt_data_end+0xfc003620>
 40039cc:	2145c83a 	sub	r2,r4,r5
 40039d0:	10c1002c 	andhi	r3,r2,1024
 40039d4:	183f4f26 	beq	r3,zero,4003714 <__alt_data_end+0xfc003714>
 40039d8:	2909c83a 	sub	r4,r5,r4
 40039dc:	3823883a 	mov	r17,r7
 40039e0:	003f0f06 	br	4003620 <__alt_data_end+0xfc003620>
 40039e4:	28001a26 	beq	r5,zero,4003a50 <__addsf3+0x48c>
 40039e8:	2008d0fa 	srli	r4,r4,3
 40039ec:	2080102c 	andhi	r2,r4,64
 40039f0:	10000526 	beq	r2,zero,4003a08 <__addsf3+0x444>
 40039f4:	280ad0fa 	srli	r5,r5,3
 40039f8:	2880102c 	andhi	r2,r5,64
 40039fc:	1000021e 	bne	r2,zero,4003a08 <__addsf3+0x444>
 4003a00:	2809883a 	mov	r4,r5
 4003a04:	3823883a 	mov	r17,r7
 4003a08:	200890fa 	slli	r4,r4,3
 4003a0c:	04003fc4 	movi	r16,255
 4003a10:	003f0306 	br	4003620 <__alt_data_end+0xfc003620>
 4003a14:	01c03fc4 	movi	r7,255
 4003a18:	31ffe01e 	bne	r6,r7,400399c <__alt_data_end+0xfc00399c>
 4003a1c:	2809883a 	mov	r4,r5
 4003a20:	3021883a 	mov	r16,r6
 4003a24:	003efe06 	br	4003620 <__alt_data_end+0xfc003620>
 4003a28:	20001126 	beq	r4,zero,4003a70 <__addsf3+0x4ac>
 4003a2c:	28000826 	beq	r5,zero,4003a50 <__addsf3+0x48c>
 4003a30:	2008d0fa 	srli	r4,r4,3
 4003a34:	2080102c 	andhi	r2,r4,64
 4003a38:	103ff326 	beq	r2,zero,4003a08 <__alt_data_end+0xfc003a08>
 4003a3c:	280ad0fa 	srli	r5,r5,3
 4003a40:	2880102c 	andhi	r2,r5,64
 4003a44:	103ff01e 	bne	r2,zero,4003a08 <__alt_data_end+0xfc003a08>
 4003a48:	2809883a 	mov	r4,r5
 4003a4c:	003fee06 	br	4003a08 <__alt_data_end+0xfc003a08>
 4003a50:	04003fc4 	movi	r16,255
 4003a54:	003ef206 	br	4003620 <__alt_data_end+0xfc003620>
 4003a58:	01000044 	movi	r4,1
 4003a5c:	003f9706 	br	40038bc <__alt_data_end+0xfc0038bc>
 4003a60:	0005883a 	mov	r2,zero
 4003a64:	003f3406 	br	4003738 <__alt_data_end+0xfc003738>
 4003a68:	2809883a 	mov	r4,r5
 4003a6c:	003eec06 	br	4003620 <__alt_data_end+0xfc003620>
 4003a70:	2809883a 	mov	r4,r5
 4003a74:	04003fc4 	movi	r16,255
 4003a78:	003ee906 	br	4003620 <__alt_data_end+0xfc003620>
 4003a7c:	00c00044 	movi	r3,1
 4003a80:	003fce06 	br	40039bc <__alt_data_end+0xfc0039bc>
 4003a84:	0005883a 	mov	r2,zero
 4003a88:	003f4e06 	br	40037c4 <__alt_data_end+0xfc0037c4>

04003a8c <__divsf3>:
 4003a8c:	defff504 	addi	sp,sp,-44
 4003a90:	200cd5fa 	srli	r6,r4,23
 4003a94:	dcc00415 	stw	r19,16(sp)
 4003a98:	2026d7fa 	srli	r19,r4,31
 4003a9c:	00c02034 	movhi	r3,128
 4003aa0:	dd800715 	stw	r22,28(sp)
 4003aa4:	dd000515 	stw	r20,20(sp)
 4003aa8:	dc800315 	stw	r18,12(sp)
 4003aac:	18ffffc4 	addi	r3,r3,-1
 4003ab0:	dfc00a15 	stw	ra,40(sp)
 4003ab4:	df000915 	stw	fp,36(sp)
 4003ab8:	ddc00815 	stw	r23,32(sp)
 4003abc:	dd400615 	stw	r21,24(sp)
 4003ac0:	dc400215 	stw	r17,8(sp)
 4003ac4:	dc000115 	stw	r16,4(sp)
 4003ac8:	35003fcc 	andi	r20,r6,255
 4003acc:	1924703a 	and	r18,r3,r4
 4003ad0:	9d803fcc 	andi	r22,r19,255
 4003ad4:	a0005226 	beq	r20,zero,4003c20 <__divsf3+0x194>
 4003ad8:	00803fc4 	movi	r2,255
 4003adc:	a0802e26 	beq	r20,r2,4003b98 <__divsf3+0x10c>
 4003ae0:	91002034 	orhi	r4,r18,128
 4003ae4:	202490fa 	slli	r18,r4,3
 4003ae8:	a53fe044 	addi	r20,r20,-127
 4003aec:	0021883a 	mov	r16,zero
 4003af0:	002f883a 	mov	r23,zero
 4003af4:	280cd5fa 	srli	r6,r5,23
 4003af8:	282ad7fa 	srli	r21,r5,31
 4003afc:	00c02034 	movhi	r3,128
 4003b00:	18ffffc4 	addi	r3,r3,-1
 4003b04:	31803fcc 	andi	r6,r6,255
 4003b08:	1962703a 	and	r17,r3,r5
 4003b0c:	af003fcc 	andi	fp,r21,255
 4003b10:	30004a26 	beq	r6,zero,4003c3c <__divsf3+0x1b0>
 4003b14:	00803fc4 	movi	r2,255
 4003b18:	30804526 	beq	r6,r2,4003c30 <__divsf3+0x1a4>
 4003b1c:	89402034 	orhi	r5,r17,128
 4003b20:	282290fa 	slli	r17,r5,3
 4003b24:	31bfe044 	addi	r6,r6,-127
 4003b28:	000b883a 	mov	r5,zero
 4003b2c:	2c20b03a 	or	r16,r5,r16
 4003b30:	802090ba 	slli	r16,r16,2
 4003b34:	00810034 	movhi	r2,1024
 4003b38:	108ed604 	addi	r2,r2,15192
 4003b3c:	80a1883a 	add	r16,r16,r2
 4003b40:	81000017 	ldw	r4,0(r16)
 4003b44:	9d46f03a 	xor	r3,r19,r21
 4003b48:	180f883a 	mov	r7,r3
 4003b4c:	18803fcc 	andi	r2,r3,255
 4003b50:	a18dc83a 	sub	r6,r20,r6
 4003b54:	2000683a 	jmp	r4
 4003b58:	04003d3c 	xorhi	r16,zero,244
 4003b5c:	04003bc0 	call	4003bc <__reset-0x3bffc44>
 4003b60:	04003d30 	cmpltui	r16,zero,244
 4003b64:	04003bac 	andhi	r16,zero,238
 4003b68:	04003d30 	cmpltui	r16,zero,244
 4003b6c:	04003d08 	cmpgei	r16,zero,244
 4003b70:	04003d30 	cmpltui	r16,zero,244
 4003b74:	04003bac 	andhi	r16,zero,238
 4003b78:	04003bc0 	call	4003bc <__reset-0x3bffc44>
 4003b7c:	04003bc0 	call	4003bc <__reset-0x3bffc44>
 4003b80:	04003d08 	cmpgei	r16,zero,244
 4003b84:	04003bac 	andhi	r16,zero,238
 4003b88:	04003e1c 	xori	r16,zero,248
 4003b8c:	04003e1c 	xori	r16,zero,248
 4003b90:	04003e1c 	xori	r16,zero,248
 4003b94:	04003dd0 	cmplti	r16,zero,247
 4003b98:	9000581e 	bne	r18,zero,4003cfc <__divsf3+0x270>
 4003b9c:	04000204 	movi	r16,8
 4003ba0:	05c00084 	movi	r23,2
 4003ba4:	003fd306 	br	4003af4 <__alt_data_end+0xfc003af4>
 4003ba8:	0023883a 	mov	r17,zero
 4003bac:	e02d883a 	mov	r22,fp
 4003bb0:	282f883a 	mov	r23,r5
 4003bb4:	00800084 	movi	r2,2
 4003bb8:	b8808f1e 	bne	r23,r2,4003df8 <__divsf3+0x36c>
 4003bbc:	b005883a 	mov	r2,r22
 4003bc0:	11c0004c 	andi	r7,r2,1
 4003bc4:	013fffc4 	movi	r4,-1
 4003bc8:	000d883a 	mov	r6,zero
 4003bcc:	21003fcc 	andi	r4,r4,255
 4003bd0:	200895fa 	slli	r4,r4,23
 4003bd4:	38803fcc 	andi	r2,r7,255
 4003bd8:	00c02034 	movhi	r3,128
 4003bdc:	100497fa 	slli	r2,r2,31
 4003be0:	18ffffc4 	addi	r3,r3,-1
 4003be4:	30c6703a 	and	r3,r6,r3
 4003be8:	1906b03a 	or	r3,r3,r4
 4003bec:	1884b03a 	or	r2,r3,r2
 4003bf0:	dfc00a17 	ldw	ra,40(sp)
 4003bf4:	df000917 	ldw	fp,36(sp)
 4003bf8:	ddc00817 	ldw	r23,32(sp)
 4003bfc:	dd800717 	ldw	r22,28(sp)
 4003c00:	dd400617 	ldw	r21,24(sp)
 4003c04:	dd000517 	ldw	r20,20(sp)
 4003c08:	dcc00417 	ldw	r19,16(sp)
 4003c0c:	dc800317 	ldw	r18,12(sp)
 4003c10:	dc400217 	ldw	r17,8(sp)
 4003c14:	dc000117 	ldw	r16,4(sp)
 4003c18:	dec00b04 	addi	sp,sp,44
 4003c1c:	f800283a 	ret
 4003c20:	90002b1e 	bne	r18,zero,4003cd0 <__divsf3+0x244>
 4003c24:	04000104 	movi	r16,4
 4003c28:	05c00044 	movi	r23,1
 4003c2c:	003fb106 	br	4003af4 <__alt_data_end+0xfc003af4>
 4003c30:	8800251e 	bne	r17,zero,4003cc8 <__divsf3+0x23c>
 4003c34:	01400084 	movi	r5,2
 4003c38:	00000206 	br	4003c44 <__divsf3+0x1b8>
 4003c3c:	88001a1e 	bne	r17,zero,4003ca8 <__divsf3+0x21c>
 4003c40:	01400044 	movi	r5,1
 4003c44:	8160b03a 	or	r16,r16,r5
 4003c48:	802090ba 	slli	r16,r16,2
 4003c4c:	00c10034 	movhi	r3,1024
 4003c50:	18cf1a04 	addi	r3,r3,15464
 4003c54:	80e1883a 	add	r16,r16,r3
 4003c58:	80c00017 	ldw	r3,0(r16)
 4003c5c:	9d44f03a 	xor	r2,r19,r21
 4003c60:	a18dc83a 	sub	r6,r20,r6
 4003c64:	1800683a 	jmp	r3
 4003c68:	04003bc0 	call	4003bc <__reset-0x3bffc44>
 4003c6c:	04003bc0 	call	4003bc <__reset-0x3bffc44>
 4003c70:	04003e0c 	andi	r16,zero,248
 4003c74:	04003ba8 	cmpgeui	r16,zero,238
 4003c78:	04003e0c 	andi	r16,zero,248
 4003c7c:	04003d08 	cmpgei	r16,zero,244
 4003c80:	04003e0c 	andi	r16,zero,248
 4003c84:	04003ba8 	cmpgeui	r16,zero,238
 4003c88:	04003bc0 	call	4003bc <__reset-0x3bffc44>
 4003c8c:	04003bc0 	call	4003bc <__reset-0x3bffc44>
 4003c90:	04003d08 	cmpgei	r16,zero,244
 4003c94:	04003ba8 	cmpgeui	r16,zero,238
 4003c98:	04003e1c 	xori	r16,zero,248
 4003c9c:	04003e1c 	xori	r16,zero,248
 4003ca0:	04003e1c 	xori	r16,zero,248
 4003ca4:	04003e34 	movhi	r16,248
 4003ca8:	8809883a 	mov	r4,r17
 4003cac:	4004a300 	call	4004a30 <__clzsi2>
 4003cb0:	10fffec4 	addi	r3,r2,-5
 4003cb4:	10801d84 	addi	r2,r2,118
 4003cb8:	88e2983a 	sll	r17,r17,r3
 4003cbc:	008dc83a 	sub	r6,zero,r2
 4003cc0:	000b883a 	mov	r5,zero
 4003cc4:	003f9906 	br	4003b2c <__alt_data_end+0xfc003b2c>
 4003cc8:	014000c4 	movi	r5,3
 4003ccc:	003f9706 	br	4003b2c <__alt_data_end+0xfc003b2c>
 4003cd0:	9009883a 	mov	r4,r18
 4003cd4:	d9400015 	stw	r5,0(sp)
 4003cd8:	4004a300 	call	4004a30 <__clzsi2>
 4003cdc:	10fffec4 	addi	r3,r2,-5
 4003ce0:	11801d84 	addi	r6,r2,118
 4003ce4:	90e4983a 	sll	r18,r18,r3
 4003ce8:	01a9c83a 	sub	r20,zero,r6
 4003cec:	0021883a 	mov	r16,zero
 4003cf0:	002f883a 	mov	r23,zero
 4003cf4:	d9400017 	ldw	r5,0(sp)
 4003cf8:	003f7e06 	br	4003af4 <__alt_data_end+0xfc003af4>
 4003cfc:	04000304 	movi	r16,12
 4003d00:	05c000c4 	movi	r23,3
 4003d04:	003f7b06 	br	4003af4 <__alt_data_end+0xfc003af4>
 4003d08:	01802034 	movhi	r6,128
 4003d0c:	000f883a 	mov	r7,zero
 4003d10:	31bfffc4 	addi	r6,r6,-1
 4003d14:	013fffc4 	movi	r4,-1
 4003d18:	003fac06 	br	4003bcc <__alt_data_end+0xfc003bcc>
 4003d1c:	01400044 	movi	r5,1
 4003d20:	2909c83a 	sub	r4,r5,r4
 4003d24:	00c006c4 	movi	r3,27
 4003d28:	19004b0e 	bge	r3,r4,4003e58 <__divsf3+0x3cc>
 4003d2c:	114e703a 	and	r7,r2,r5
 4003d30:	0009883a 	mov	r4,zero
 4003d34:	000d883a 	mov	r6,zero
 4003d38:	003fa406 	br	4003bcc <__alt_data_end+0xfc003bcc>
 4003d3c:	9006917a 	slli	r3,r18,5
 4003d40:	8822917a 	slli	r17,r17,5
 4003d44:	1c40372e 	bgeu	r3,r17,4003e24 <__divsf3+0x398>
 4003d48:	31bfffc4 	addi	r6,r6,-1
 4003d4c:	010006c4 	movi	r4,27
 4003d50:	000b883a 	mov	r5,zero
 4003d54:	180f883a 	mov	r7,r3
 4003d58:	294b883a 	add	r5,r5,r5
 4003d5c:	18c7883a 	add	r3,r3,r3
 4003d60:	38000116 	blt	r7,zero,4003d68 <__divsf3+0x2dc>
 4003d64:	1c400236 	bltu	r3,r17,4003d70 <__divsf3+0x2e4>
 4003d68:	1c47c83a 	sub	r3,r3,r17
 4003d6c:	29400054 	ori	r5,r5,1
 4003d70:	213fffc4 	addi	r4,r4,-1
 4003d74:	203ff71e 	bne	r4,zero,4003d54 <__alt_data_end+0xfc003d54>
 4003d78:	1806c03a 	cmpne	r3,r3,zero
 4003d7c:	1962b03a 	or	r17,r3,r5
 4003d80:	31001fc4 	addi	r4,r6,127
 4003d84:	013fe50e 	bge	zero,r4,4003d1c <__alt_data_end+0xfc003d1c>
 4003d88:	88c001cc 	andi	r3,r17,7
 4003d8c:	18000426 	beq	r3,zero,4003da0 <__divsf3+0x314>
 4003d90:	88c003cc 	andi	r3,r17,15
 4003d94:	01400104 	movi	r5,4
 4003d98:	19400126 	beq	r3,r5,4003da0 <__divsf3+0x314>
 4003d9c:	8963883a 	add	r17,r17,r5
 4003da0:	88c2002c 	andhi	r3,r17,2048
 4003da4:	18000426 	beq	r3,zero,4003db8 <__divsf3+0x32c>
 4003da8:	00fe0034 	movhi	r3,63488
 4003dac:	18ffffc4 	addi	r3,r3,-1
 4003db0:	31002004 	addi	r4,r6,128
 4003db4:	88e2703a 	and	r17,r17,r3
 4003db8:	00c03f84 	movi	r3,254
 4003dbc:	193f8016 	blt	r3,r4,4003bc0 <__alt_data_end+0xfc003bc0>
 4003dc0:	880c91ba 	slli	r6,r17,6
 4003dc4:	11c0004c 	andi	r7,r2,1
 4003dc8:	300cd27a 	srli	r6,r6,9
 4003dcc:	003f7f06 	br	4003bcc <__alt_data_end+0xfc003bcc>
 4003dd0:	9080102c 	andhi	r2,r18,64
 4003dd4:	10000226 	beq	r2,zero,4003de0 <__divsf3+0x354>
 4003dd8:	8880102c 	andhi	r2,r17,64
 4003ddc:	10001826 	beq	r2,zero,4003e40 <__divsf3+0x3b4>
 4003de0:	00802034 	movhi	r2,128
 4003de4:	91801034 	orhi	r6,r18,64
 4003de8:	10bfffc4 	addi	r2,r2,-1
 4003dec:	980f883a 	mov	r7,r19
 4003df0:	308c703a 	and	r6,r6,r2
 4003df4:	003fc706 	br	4003d14 <__alt_data_end+0xfc003d14>
 4003df8:	008000c4 	movi	r2,3
 4003dfc:	b8802d26 	beq	r23,r2,4003eb4 <__divsf3+0x428>
 4003e00:	00c00044 	movi	r3,1
 4003e04:	b005883a 	mov	r2,r22
 4003e08:	b8ffdd1e 	bne	r23,r3,4003d80 <__alt_data_end+0xfc003d80>
 4003e0c:	11c0004c 	andi	r7,r2,1
 4003e10:	0009883a 	mov	r4,zero
 4003e14:	000d883a 	mov	r6,zero
 4003e18:	003f6c06 	br	4003bcc <__alt_data_end+0xfc003bcc>
 4003e1c:	9023883a 	mov	r17,r18
 4003e20:	003f6406 	br	4003bb4 <__alt_data_end+0xfc003bb4>
 4003e24:	1c47c83a 	sub	r3,r3,r17
 4003e28:	01000684 	movi	r4,26
 4003e2c:	01400044 	movi	r5,1
 4003e30:	003fc806 	br	4003d54 <__alt_data_end+0xfc003d54>
 4003e34:	9080102c 	andhi	r2,r18,64
 4003e38:	103fe926 	beq	r2,zero,4003de0 <__alt_data_end+0xfc003de0>
 4003e3c:	0023883a 	mov	r17,zero
 4003e40:	00802034 	movhi	r2,128
 4003e44:	89801034 	orhi	r6,r17,64
 4003e48:	10bfffc4 	addi	r2,r2,-1
 4003e4c:	a80f883a 	mov	r7,r21
 4003e50:	308c703a 	and	r6,r6,r2
 4003e54:	003faf06 	br	4003d14 <__alt_data_end+0xfc003d14>
 4003e58:	01c00804 	movi	r7,32
 4003e5c:	390fc83a 	sub	r7,r7,r4
 4003e60:	89ce983a 	sll	r7,r17,r7
 4003e64:	890ad83a 	srl	r5,r17,r4
 4003e68:	380ec03a 	cmpne	r7,r7,zero
 4003e6c:	29cab03a 	or	r5,r5,r7
 4003e70:	28c001cc 	andi	r3,r5,7
 4003e74:	18000426 	beq	r3,zero,4003e88 <__divsf3+0x3fc>
 4003e78:	28c003cc 	andi	r3,r5,15
 4003e7c:	01000104 	movi	r4,4
 4003e80:	19000126 	beq	r3,r4,4003e88 <__divsf3+0x3fc>
 4003e84:	290b883a 	add	r5,r5,r4
 4003e88:	28c1002c 	andhi	r3,r5,1024
 4003e8c:	18000426 	beq	r3,zero,4003ea0 <__divsf3+0x414>
 4003e90:	11c0004c 	andi	r7,r2,1
 4003e94:	01000044 	movi	r4,1
 4003e98:	000d883a 	mov	r6,zero
 4003e9c:	003f4b06 	br	4003bcc <__alt_data_end+0xfc003bcc>
 4003ea0:	280a91ba 	slli	r5,r5,6
 4003ea4:	11c0004c 	andi	r7,r2,1
 4003ea8:	0009883a 	mov	r4,zero
 4003eac:	280cd27a 	srli	r6,r5,9
 4003eb0:	003f4606 	br	4003bcc <__alt_data_end+0xfc003bcc>
 4003eb4:	00802034 	movhi	r2,128
 4003eb8:	89801034 	orhi	r6,r17,64
 4003ebc:	10bfffc4 	addi	r2,r2,-1
 4003ec0:	b00f883a 	mov	r7,r22
 4003ec4:	308c703a 	and	r6,r6,r2
 4003ec8:	003f9206 	br	4003d14 <__alt_data_end+0xfc003d14>

04003ecc <__gesf2>:
 4003ecc:	2004d5fa 	srli	r2,r4,23
 4003ed0:	2806d5fa 	srli	r3,r5,23
 4003ed4:	01802034 	movhi	r6,128
 4003ed8:	31bfffc4 	addi	r6,r6,-1
 4003edc:	10803fcc 	andi	r2,r2,255
 4003ee0:	01c03fc4 	movi	r7,255
 4003ee4:	3110703a 	and	r8,r6,r4
 4003ee8:	18c03fcc 	andi	r3,r3,255
 4003eec:	314c703a 	and	r6,r6,r5
 4003ef0:	2008d7fa 	srli	r4,r4,31
 4003ef4:	280ad7fa 	srli	r5,r5,31
 4003ef8:	11c01926 	beq	r2,r7,4003f60 <__gesf2+0x94>
 4003efc:	01c03fc4 	movi	r7,255
 4003f00:	19c00f26 	beq	r3,r7,4003f40 <__gesf2+0x74>
 4003f04:	1000061e 	bne	r2,zero,4003f20 <__gesf2+0x54>
 4003f08:	400f003a 	cmpeq	r7,r8,zero
 4003f0c:	1800071e 	bne	r3,zero,4003f2c <__gesf2+0x60>
 4003f10:	3000061e 	bne	r6,zero,4003f2c <__gesf2+0x60>
 4003f14:	0005883a 	mov	r2,zero
 4003f18:	40000e1e 	bne	r8,zero,4003f54 <__gesf2+0x88>
 4003f1c:	f800283a 	ret
 4003f20:	18000a1e 	bne	r3,zero,4003f4c <__gesf2+0x80>
 4003f24:	30000b26 	beq	r6,zero,4003f54 <__gesf2+0x88>
 4003f28:	000f883a 	mov	r7,zero
 4003f2c:	29403fcc 	andi	r5,r5,255
 4003f30:	38000726 	beq	r7,zero,4003f50 <__gesf2+0x84>
 4003f34:	28000826 	beq	r5,zero,4003f58 <__gesf2+0x8c>
 4003f38:	00800044 	movi	r2,1
 4003f3c:	f800283a 	ret
 4003f40:	303ff026 	beq	r6,zero,4003f04 <__alt_data_end+0xfc003f04>
 4003f44:	00bfff84 	movi	r2,-2
 4003f48:	f800283a 	ret
 4003f4c:	29403fcc 	andi	r5,r5,255
 4003f50:	21400526 	beq	r4,r5,4003f68 <__gesf2+0x9c>
 4003f54:	203ff826 	beq	r4,zero,4003f38 <__alt_data_end+0xfc003f38>
 4003f58:	00bfffc4 	movi	r2,-1
 4003f5c:	f800283a 	ret
 4003f60:	403fe626 	beq	r8,zero,4003efc <__alt_data_end+0xfc003efc>
 4003f64:	003ff706 	br	4003f44 <__alt_data_end+0xfc003f44>
 4003f68:	18bffa16 	blt	r3,r2,4003f54 <__alt_data_end+0xfc003f54>
 4003f6c:	10c00216 	blt	r2,r3,4003f78 <__gesf2+0xac>
 4003f70:	323ff836 	bltu	r6,r8,4003f54 <__alt_data_end+0xfc003f54>
 4003f74:	4180022e 	bgeu	r8,r6,4003f80 <__gesf2+0xb4>
 4003f78:	203fef1e 	bne	r4,zero,4003f38 <__alt_data_end+0xfc003f38>
 4003f7c:	003ff606 	br	4003f58 <__alt_data_end+0xfc003f58>
 4003f80:	0005883a 	mov	r2,zero
 4003f84:	f800283a 	ret

04003f88 <__mulsf3>:
 4003f88:	defff504 	addi	sp,sp,-44
 4003f8c:	dc000115 	stw	r16,4(sp)
 4003f90:	2020d5fa 	srli	r16,r4,23
 4003f94:	dd400615 	stw	r21,24(sp)
 4003f98:	202ad7fa 	srli	r21,r4,31
 4003f9c:	dc800315 	stw	r18,12(sp)
 4003fa0:	04802034 	movhi	r18,128
 4003fa4:	df000915 	stw	fp,36(sp)
 4003fa8:	dd000515 	stw	r20,20(sp)
 4003fac:	94bfffc4 	addi	r18,r18,-1
 4003fb0:	dfc00a15 	stw	ra,40(sp)
 4003fb4:	ddc00815 	stw	r23,32(sp)
 4003fb8:	dd800715 	stw	r22,28(sp)
 4003fbc:	dcc00415 	stw	r19,16(sp)
 4003fc0:	dc400215 	stw	r17,8(sp)
 4003fc4:	84003fcc 	andi	r16,r16,255
 4003fc8:	9124703a 	and	r18,r18,r4
 4003fcc:	a829883a 	mov	r20,r21
 4003fd0:	af003fcc 	andi	fp,r21,255
 4003fd4:	80005426 	beq	r16,zero,4004128 <__mulsf3+0x1a0>
 4003fd8:	00803fc4 	movi	r2,255
 4003fdc:	80802f26 	beq	r16,r2,400409c <__mulsf3+0x114>
 4003fe0:	91002034 	orhi	r4,r18,128
 4003fe4:	202490fa 	slli	r18,r4,3
 4003fe8:	843fe044 	addi	r16,r16,-127
 4003fec:	0023883a 	mov	r17,zero
 4003ff0:	002f883a 	mov	r23,zero
 4003ff4:	2804d5fa 	srli	r2,r5,23
 4003ff8:	282cd7fa 	srli	r22,r5,31
 4003ffc:	01002034 	movhi	r4,128
 4004000:	213fffc4 	addi	r4,r4,-1
 4004004:	10803fcc 	andi	r2,r2,255
 4004008:	2166703a 	and	r19,r4,r5
 400400c:	b1803fcc 	andi	r6,r22,255
 4004010:	10004c26 	beq	r2,zero,4004144 <__mulsf3+0x1bc>
 4004014:	00c03fc4 	movi	r3,255
 4004018:	10c04726 	beq	r2,r3,4004138 <__mulsf3+0x1b0>
 400401c:	99002034 	orhi	r4,r19,128
 4004020:	202690fa 	slli	r19,r4,3
 4004024:	10bfe044 	addi	r2,r2,-127
 4004028:	0007883a 	mov	r3,zero
 400402c:	80a1883a 	add	r16,r16,r2
 4004030:	010003c4 	movi	r4,15
 4004034:	1c44b03a 	or	r2,r3,r17
 4004038:	b56af03a 	xor	r21,r22,r21
 400403c:	81c00044 	addi	r7,r16,1
 4004040:	20806b36 	bltu	r4,r2,40041f0 <__mulsf3+0x268>
 4004044:	100490ba 	slli	r2,r2,2
 4004048:	01010034 	movhi	r4,1024
 400404c:	21101704 	addi	r4,r4,16476
 4004050:	1105883a 	add	r2,r2,r4
 4004054:	10800017 	ldw	r2,0(r2)
 4004058:	1000683a 	jmp	r2
 400405c:	040041f0 	cmpltui	r16,zero,263
 4004060:	040040b0 	cmpltui	r16,zero,258
 4004064:	040040b0 	cmpltui	r16,zero,258
 4004068:	040040ac 	andhi	r16,zero,258
 400406c:	040041d4 	movui	r16,263
 4004070:	040041d4 	movui	r16,263
 4004074:	040041c0 	call	40041c <__reset-0x3bffbe4>
 4004078:	040040ac 	andhi	r16,zero,258
 400407c:	040041d4 	movui	r16,263
 4004080:	040041c0 	call	40041c <__reset-0x3bffbe4>
 4004084:	040041d4 	movui	r16,263
 4004088:	040040ac 	andhi	r16,zero,258
 400408c:	040041e0 	cmpeqi	r16,zero,263
 4004090:	040041e0 	cmpeqi	r16,zero,263
 4004094:	040041e0 	cmpeqi	r16,zero,263
 4004098:	040042f0 	cmpltui	r16,zero,267
 400409c:	90003b1e 	bne	r18,zero,400418c <__mulsf3+0x204>
 40040a0:	04400204 	movi	r17,8
 40040a4:	05c00084 	movi	r23,2
 40040a8:	003fd206 	br	4003ff4 <__alt_data_end+0xfc003ff4>
 40040ac:	302b883a 	mov	r21,r6
 40040b0:	00800084 	movi	r2,2
 40040b4:	18802626 	beq	r3,r2,4004150 <__mulsf3+0x1c8>
 40040b8:	008000c4 	movi	r2,3
 40040bc:	1880b826 	beq	r3,r2,40043a0 <__mulsf3+0x418>
 40040c0:	00800044 	movi	r2,1
 40040c4:	1880af1e 	bne	r3,r2,4004384 <__mulsf3+0x3fc>
 40040c8:	a829883a 	mov	r20,r21
 40040cc:	0007883a 	mov	r3,zero
 40040d0:	0009883a 	mov	r4,zero
 40040d4:	18803fcc 	andi	r2,r3,255
 40040d8:	100695fa 	slli	r3,r2,23
 40040dc:	a0803fcc 	andi	r2,r20,255
 40040e0:	100a97fa 	slli	r5,r2,31
 40040e4:	00802034 	movhi	r2,128
 40040e8:	10bfffc4 	addi	r2,r2,-1
 40040ec:	2084703a 	and	r2,r4,r2
 40040f0:	10c4b03a 	or	r2,r2,r3
 40040f4:	1144b03a 	or	r2,r2,r5
 40040f8:	dfc00a17 	ldw	ra,40(sp)
 40040fc:	df000917 	ldw	fp,36(sp)
 4004100:	ddc00817 	ldw	r23,32(sp)
 4004104:	dd800717 	ldw	r22,28(sp)
 4004108:	dd400617 	ldw	r21,24(sp)
 400410c:	dd000517 	ldw	r20,20(sp)
 4004110:	dcc00417 	ldw	r19,16(sp)
 4004114:	dc800317 	ldw	r18,12(sp)
 4004118:	dc400217 	ldw	r17,8(sp)
 400411c:	dc000117 	ldw	r16,4(sp)
 4004120:	dec00b04 	addi	sp,sp,44
 4004124:	f800283a 	ret
 4004128:	90000d1e 	bne	r18,zero,4004160 <__mulsf3+0x1d8>
 400412c:	04400104 	movi	r17,4
 4004130:	05c00044 	movi	r23,1
 4004134:	003faf06 	br	4003ff4 <__alt_data_end+0xfc003ff4>
 4004138:	9806c03a 	cmpne	r3,r19,zero
 400413c:	18c00084 	addi	r3,r3,2
 4004140:	003fba06 	br	400402c <__alt_data_end+0xfc00402c>
 4004144:	9800141e 	bne	r19,zero,4004198 <__mulsf3+0x210>
 4004148:	00c00044 	movi	r3,1
 400414c:	003fb706 	br	400402c <__alt_data_end+0xfc00402c>
 4004150:	a829883a 	mov	r20,r21
 4004154:	00ffffc4 	movi	r3,-1
 4004158:	0009883a 	mov	r4,zero
 400415c:	003fdd06 	br	40040d4 <__alt_data_end+0xfc0040d4>
 4004160:	9009883a 	mov	r4,r18
 4004164:	d9400015 	stw	r5,0(sp)
 4004168:	4004a300 	call	4004a30 <__clzsi2>
 400416c:	10fffec4 	addi	r3,r2,-5
 4004170:	10801d84 	addi	r2,r2,118
 4004174:	90e4983a 	sll	r18,r18,r3
 4004178:	00a1c83a 	sub	r16,zero,r2
 400417c:	0023883a 	mov	r17,zero
 4004180:	002f883a 	mov	r23,zero
 4004184:	d9400017 	ldw	r5,0(sp)
 4004188:	003f9a06 	br	4003ff4 <__alt_data_end+0xfc003ff4>
 400418c:	04400304 	movi	r17,12
 4004190:	05c000c4 	movi	r23,3
 4004194:	003f9706 	br	4003ff4 <__alt_data_end+0xfc003ff4>
 4004198:	9809883a 	mov	r4,r19
 400419c:	d9800015 	stw	r6,0(sp)
 40041a0:	4004a300 	call	4004a30 <__clzsi2>
 40041a4:	10fffec4 	addi	r3,r2,-5
 40041a8:	10801d84 	addi	r2,r2,118
 40041ac:	98e6983a 	sll	r19,r19,r3
 40041b0:	0085c83a 	sub	r2,zero,r2
 40041b4:	0007883a 	mov	r3,zero
 40041b8:	d9800017 	ldw	r6,0(sp)
 40041bc:	003f9b06 	br	400402c <__alt_data_end+0xfc00402c>
 40041c0:	01002034 	movhi	r4,128
 40041c4:	0029883a 	mov	r20,zero
 40041c8:	213fffc4 	addi	r4,r4,-1
 40041cc:	00ffffc4 	movi	r3,-1
 40041d0:	003fc006 	br	40040d4 <__alt_data_end+0xfc0040d4>
 40041d4:	9027883a 	mov	r19,r18
 40041d8:	b807883a 	mov	r3,r23
 40041dc:	003fb406 	br	40040b0 <__alt_data_end+0xfc0040b0>
 40041e0:	9027883a 	mov	r19,r18
 40041e4:	e02b883a 	mov	r21,fp
 40041e8:	b807883a 	mov	r3,r23
 40041ec:	003fb006 	br	40040b0 <__alt_data_end+0xfc0040b0>
 40041f0:	9028d43a 	srli	r20,r18,16
 40041f4:	982cd43a 	srli	r22,r19,16
 40041f8:	94bfffcc 	andi	r18,r18,65535
 40041fc:	9cffffcc 	andi	r19,r19,65535
 4004200:	980b883a 	mov	r5,r19
 4004204:	9009883a 	mov	r4,r18
 4004208:	d9c00015 	stw	r7,0(sp)
 400420c:	400359c0 	call	400359c <__mulsi3>
 4004210:	a00b883a 	mov	r5,r20
 4004214:	9809883a 	mov	r4,r19
 4004218:	1023883a 	mov	r17,r2
 400421c:	400359c0 	call	400359c <__mulsi3>
 4004220:	a009883a 	mov	r4,r20
 4004224:	b00b883a 	mov	r5,r22
 4004228:	1027883a 	mov	r19,r2
 400422c:	400359c0 	call	400359c <__mulsi3>
 4004230:	b00b883a 	mov	r5,r22
 4004234:	9009883a 	mov	r4,r18
 4004238:	1029883a 	mov	r20,r2
 400423c:	400359c0 	call	400359c <__mulsi3>
 4004240:	8806d43a 	srli	r3,r17,16
 4004244:	14c5883a 	add	r2,r2,r19
 4004248:	d9c00017 	ldw	r7,0(sp)
 400424c:	1885883a 	add	r2,r3,r2
 4004250:	14c0022e 	bgeu	r2,r19,400425c <__mulsf3+0x2d4>
 4004254:	00c00074 	movhi	r3,1
 4004258:	a0e9883a 	add	r20,r20,r3
 400425c:	1026943a 	slli	r19,r2,16
 4004260:	8c7fffcc 	andi	r17,r17,65535
 4004264:	1004d43a 	srli	r2,r2,16
 4004268:	9c63883a 	add	r17,r19,r17
 400426c:	882691ba 	slli	r19,r17,6
 4004270:	1505883a 	add	r2,r2,r20
 4004274:	8822d6ba 	srli	r17,r17,26
 4004278:	100891ba 	slli	r4,r2,6
 400427c:	9826c03a 	cmpne	r19,r19,zero
 4004280:	9c62b03a 	or	r17,r19,r17
 4004284:	8926b03a 	or	r19,r17,r4
 4004288:	9882002c 	andhi	r2,r19,2048
 400428c:	10000426 	beq	r2,zero,40042a0 <__mulsf3+0x318>
 4004290:	9804d07a 	srli	r2,r19,1
 4004294:	9900004c 	andi	r4,r19,1
 4004298:	3821883a 	mov	r16,r7
 400429c:	1126b03a 	or	r19,r2,r4
 40042a0:	80c01fc4 	addi	r3,r16,127
 40042a4:	00c0210e 	bge	zero,r3,400432c <__mulsf3+0x3a4>
 40042a8:	988001cc 	andi	r2,r19,7
 40042ac:	10000426 	beq	r2,zero,40042c0 <__mulsf3+0x338>
 40042b0:	988003cc 	andi	r2,r19,15
 40042b4:	01000104 	movi	r4,4
 40042b8:	11000126 	beq	r2,r4,40042c0 <__mulsf3+0x338>
 40042bc:	9927883a 	add	r19,r19,r4
 40042c0:	9882002c 	andhi	r2,r19,2048
 40042c4:	10000426 	beq	r2,zero,40042d8 <__mulsf3+0x350>
 40042c8:	00be0034 	movhi	r2,63488
 40042cc:	10bfffc4 	addi	r2,r2,-1
 40042d0:	80c02004 	addi	r3,r16,128
 40042d4:	98a6703a 	and	r19,r19,r2
 40042d8:	00803f84 	movi	r2,254
 40042dc:	10ff9c16 	blt	r2,r3,4004150 <__alt_data_end+0xfc004150>
 40042e0:	980891ba 	slli	r4,r19,6
 40042e4:	a829883a 	mov	r20,r21
 40042e8:	2008d27a 	srli	r4,r4,9
 40042ec:	003f7906 	br	40040d4 <__alt_data_end+0xfc0040d4>
 40042f0:	9080102c 	andhi	r2,r18,64
 40042f4:	10000826 	beq	r2,zero,4004318 <__mulsf3+0x390>
 40042f8:	9880102c 	andhi	r2,r19,64
 40042fc:	1000061e 	bne	r2,zero,4004318 <__mulsf3+0x390>
 4004300:	00802034 	movhi	r2,128
 4004304:	99001034 	orhi	r4,r19,64
 4004308:	10bfffc4 	addi	r2,r2,-1
 400430c:	b029883a 	mov	r20,r22
 4004310:	2088703a 	and	r4,r4,r2
 4004314:	003fad06 	br	40041cc <__alt_data_end+0xfc0041cc>
 4004318:	00802034 	movhi	r2,128
 400431c:	91001034 	orhi	r4,r18,64
 4004320:	10bfffc4 	addi	r2,r2,-1
 4004324:	2088703a 	and	r4,r4,r2
 4004328:	003fa806 	br	40041cc <__alt_data_end+0xfc0041cc>
 400432c:	00800044 	movi	r2,1
 4004330:	10c7c83a 	sub	r3,r2,r3
 4004334:	008006c4 	movi	r2,27
 4004338:	10ff6316 	blt	r2,r3,40040c8 <__alt_data_end+0xfc0040c8>
 400433c:	00800804 	movi	r2,32
 4004340:	10c5c83a 	sub	r2,r2,r3
 4004344:	9884983a 	sll	r2,r19,r2
 4004348:	98c6d83a 	srl	r3,r19,r3
 400434c:	1004c03a 	cmpne	r2,r2,zero
 4004350:	1884b03a 	or	r2,r3,r2
 4004354:	10c001cc 	andi	r3,r2,7
 4004358:	18000426 	beq	r3,zero,400436c <__mulsf3+0x3e4>
 400435c:	10c003cc 	andi	r3,r2,15
 4004360:	01000104 	movi	r4,4
 4004364:	19000126 	beq	r3,r4,400436c <__mulsf3+0x3e4>
 4004368:	1105883a 	add	r2,r2,r4
 400436c:	10c1002c 	andhi	r3,r2,1024
 4004370:	18000626 	beq	r3,zero,400438c <__mulsf3+0x404>
 4004374:	a829883a 	mov	r20,r21
 4004378:	00c00044 	movi	r3,1
 400437c:	0009883a 	mov	r4,zero
 4004380:	003f5406 	br	40040d4 <__alt_data_end+0xfc0040d4>
 4004384:	3821883a 	mov	r16,r7
 4004388:	003fc506 	br	40042a0 <__alt_data_end+0xfc0042a0>
 400438c:	100491ba 	slli	r2,r2,6
 4004390:	a829883a 	mov	r20,r21
 4004394:	0007883a 	mov	r3,zero
 4004398:	1008d27a 	srli	r4,r2,9
 400439c:	003f4d06 	br	40040d4 <__alt_data_end+0xfc0040d4>
 40043a0:	00802034 	movhi	r2,128
 40043a4:	99001034 	orhi	r4,r19,64
 40043a8:	10bfffc4 	addi	r2,r2,-1
 40043ac:	a829883a 	mov	r20,r21
 40043b0:	2088703a 	and	r4,r4,r2
 40043b4:	003f8506 	br	40041cc <__alt_data_end+0xfc0041cc>

040043b8 <__subsf3>:
 40043b8:	defffc04 	addi	sp,sp,-16
 40043bc:	280cd5fa 	srli	r6,r5,23
 40043c0:	dc000015 	stw	r16,0(sp)
 40043c4:	01c02034 	movhi	r7,128
 40043c8:	2020d5fa 	srli	r16,r4,23
 40043cc:	39ffffc4 	addi	r7,r7,-1
 40043d0:	3906703a 	and	r3,r7,r4
 40043d4:	dc400115 	stw	r17,4(sp)
 40043d8:	394e703a 	and	r7,r7,r5
 40043dc:	2022d7fa 	srli	r17,r4,31
 40043e0:	dfc00315 	stw	ra,12(sp)
 40043e4:	dc800215 	stw	r18,8(sp)
 40043e8:	31803fcc 	andi	r6,r6,255
 40043ec:	01003fc4 	movi	r4,255
 40043f0:	84003fcc 	andi	r16,r16,255
 40043f4:	180690fa 	slli	r3,r3,3
 40043f8:	2804d7fa 	srli	r2,r5,31
 40043fc:	380e90fa 	slli	r7,r7,3
 4004400:	31006d26 	beq	r6,r4,40045b8 <__subsf3+0x200>
 4004404:	1080005c 	xori	r2,r2,1
 4004408:	8189c83a 	sub	r4,r16,r6
 400440c:	14404f26 	beq	r2,r17,400454c <__subsf3+0x194>
 4004410:	0100770e 	bge	zero,r4,40045f0 <__subsf3+0x238>
 4004414:	30001e1e 	bne	r6,zero,4004490 <__subsf3+0xd8>
 4004418:	38006a1e 	bne	r7,zero,40045c4 <__subsf3+0x20c>
 400441c:	188001cc 	andi	r2,r3,7
 4004420:	10000426 	beq	r2,zero,4004434 <__subsf3+0x7c>
 4004424:	188003cc 	andi	r2,r3,15
 4004428:	01000104 	movi	r4,4
 400442c:	11000126 	beq	r2,r4,4004434 <__subsf3+0x7c>
 4004430:	1907883a 	add	r3,r3,r4
 4004434:	1881002c 	andhi	r2,r3,1024
 4004438:	10003926 	beq	r2,zero,4004520 <__subsf3+0x168>
 400443c:	84000044 	addi	r16,r16,1
 4004440:	00803fc4 	movi	r2,255
 4004444:	80807526 	beq	r16,r2,400461c <__subsf3+0x264>
 4004448:	180691ba 	slli	r3,r3,6
 400444c:	8880004c 	andi	r2,r17,1
 4004450:	180ad27a 	srli	r5,r3,9
 4004454:	84003fcc 	andi	r16,r16,255
 4004458:	800695fa 	slli	r3,r16,23
 400445c:	10803fcc 	andi	r2,r2,255
 4004460:	01002034 	movhi	r4,128
 4004464:	213fffc4 	addi	r4,r4,-1
 4004468:	100497fa 	slli	r2,r2,31
 400446c:	2920703a 	and	r16,r5,r4
 4004470:	80e0b03a 	or	r16,r16,r3
 4004474:	8084b03a 	or	r2,r16,r2
 4004478:	dfc00317 	ldw	ra,12(sp)
 400447c:	dc800217 	ldw	r18,8(sp)
 4004480:	dc400117 	ldw	r17,4(sp)
 4004484:	dc000017 	ldw	r16,0(sp)
 4004488:	dec00404 	addi	sp,sp,16
 400448c:	f800283a 	ret
 4004490:	00803fc4 	movi	r2,255
 4004494:	80bfe126 	beq	r16,r2,400441c <__alt_data_end+0xfc00441c>
 4004498:	39c10034 	orhi	r7,r7,1024
 400449c:	008006c4 	movi	r2,27
 40044a0:	11007416 	blt	r2,r4,4004674 <__subsf3+0x2bc>
 40044a4:	00800804 	movi	r2,32
 40044a8:	1105c83a 	sub	r2,r2,r4
 40044ac:	3884983a 	sll	r2,r7,r2
 40044b0:	390ed83a 	srl	r7,r7,r4
 40044b4:	1008c03a 	cmpne	r4,r2,zero
 40044b8:	390eb03a 	or	r7,r7,r4
 40044bc:	19c7c83a 	sub	r3,r3,r7
 40044c0:	1881002c 	andhi	r2,r3,1024
 40044c4:	10001426 	beq	r2,zero,4004518 <__subsf3+0x160>
 40044c8:	04810034 	movhi	r18,1024
 40044cc:	94bfffc4 	addi	r18,r18,-1
 40044d0:	1ca4703a 	and	r18,r3,r18
 40044d4:	9009883a 	mov	r4,r18
 40044d8:	4004a300 	call	4004a30 <__clzsi2>
 40044dc:	10bffec4 	addi	r2,r2,-5
 40044e0:	90a4983a 	sll	r18,r18,r2
 40044e4:	14005116 	blt	r2,r16,400462c <__subsf3+0x274>
 40044e8:	1405c83a 	sub	r2,r2,r16
 40044ec:	10c00044 	addi	r3,r2,1
 40044f0:	00800804 	movi	r2,32
 40044f4:	10c5c83a 	sub	r2,r2,r3
 40044f8:	9084983a 	sll	r2,r18,r2
 40044fc:	90e4d83a 	srl	r18,r18,r3
 4004500:	0021883a 	mov	r16,zero
 4004504:	1006c03a 	cmpne	r3,r2,zero
 4004508:	90c6b03a 	or	r3,r18,r3
 400450c:	003fc306 	br	400441c <__alt_data_end+0xfc00441c>
 4004510:	2000e026 	beq	r4,zero,4004894 <__subsf3+0x4dc>
 4004514:	2007883a 	mov	r3,r4
 4004518:	188001cc 	andi	r2,r3,7
 400451c:	103fc11e 	bne	r2,zero,4004424 <__alt_data_end+0xfc004424>
 4004520:	180ad0fa 	srli	r5,r3,3
 4004524:	00c03fc4 	movi	r3,255
 4004528:	8880004c 	andi	r2,r17,1
 400452c:	80c0031e 	bne	r16,r3,400453c <__subsf3+0x184>
 4004530:	28006d26 	beq	r5,zero,40046e8 <__subsf3+0x330>
 4004534:	29401034 	orhi	r5,r5,64
 4004538:	043fffc4 	movi	r16,-1
 400453c:	00c02034 	movhi	r3,128
 4004540:	18ffffc4 	addi	r3,r3,-1
 4004544:	28ca703a 	and	r5,r5,r3
 4004548:	003fc206 	br	4004454 <__alt_data_end+0xfc004454>
 400454c:	01003c0e 	bge	zero,r4,4004640 <__subsf3+0x288>
 4004550:	30002126 	beq	r6,zero,40045d8 <__subsf3+0x220>
 4004554:	01403fc4 	movi	r5,255
 4004558:	817fb026 	beq	r16,r5,400441c <__alt_data_end+0xfc00441c>
 400455c:	39c10034 	orhi	r7,r7,1024
 4004560:	014006c4 	movi	r5,27
 4004564:	29007416 	blt	r5,r4,4004738 <__subsf3+0x380>
 4004568:	01400804 	movi	r5,32
 400456c:	290bc83a 	sub	r5,r5,r4
 4004570:	394a983a 	sll	r5,r7,r5
 4004574:	390ed83a 	srl	r7,r7,r4
 4004578:	2808c03a 	cmpne	r4,r5,zero
 400457c:	390eb03a 	or	r7,r7,r4
 4004580:	19c7883a 	add	r3,r3,r7
 4004584:	1901002c 	andhi	r4,r3,1024
 4004588:	20003826 	beq	r4,zero,400466c <__subsf3+0x2b4>
 400458c:	84000044 	addi	r16,r16,1
 4004590:	01003fc4 	movi	r4,255
 4004594:	81005426 	beq	r16,r4,40046e8 <__subsf3+0x330>
 4004598:	1023883a 	mov	r17,r2
 400459c:	00bf0034 	movhi	r2,64512
 40045a0:	10bfffc4 	addi	r2,r2,-1
 40045a4:	1900004c 	andi	r4,r3,1
 40045a8:	1886703a 	and	r3,r3,r2
 40045ac:	1806d07a 	srli	r3,r3,1
 40045b0:	1906b03a 	or	r3,r3,r4
 40045b4:	003f9906 	br	400441c <__alt_data_end+0xfc00441c>
 40045b8:	383f9226 	beq	r7,zero,4004404 <__alt_data_end+0xfc004404>
 40045bc:	10803fcc 	andi	r2,r2,255
 40045c0:	003f9106 	br	4004408 <__alt_data_end+0xfc004408>
 40045c4:	213fffc4 	addi	r4,r4,-1
 40045c8:	203fbc26 	beq	r4,zero,40044bc <__alt_data_end+0xfc0044bc>
 40045cc:	00803fc4 	movi	r2,255
 40045d0:	80bfb21e 	bne	r16,r2,400449c <__alt_data_end+0xfc00449c>
 40045d4:	003f9106 	br	400441c <__alt_data_end+0xfc00441c>
 40045d8:	383f9026 	beq	r7,zero,400441c <__alt_data_end+0xfc00441c>
 40045dc:	213fffc4 	addi	r4,r4,-1
 40045e0:	203fe726 	beq	r4,zero,4004580 <__alt_data_end+0xfc004580>
 40045e4:	01403fc4 	movi	r5,255
 40045e8:	817fdd1e 	bne	r16,r5,4004560 <__alt_data_end+0xfc004560>
 40045ec:	003f8b06 	br	400441c <__alt_data_end+0xfc00441c>
 40045f0:	2000221e 	bne	r4,zero,400467c <__subsf3+0x2c4>
 40045f4:	81000044 	addi	r4,r16,1
 40045f8:	21003fcc 	andi	r4,r4,255
 40045fc:	01400044 	movi	r5,1
 4004600:	2900470e 	bge	r5,r4,4004720 <__subsf3+0x368>
 4004604:	19e5c83a 	sub	r18,r3,r7
 4004608:	9141002c 	andhi	r5,r18,1024
 400460c:	28002d26 	beq	r5,zero,40046c4 <__subsf3+0x30c>
 4004610:	38e5c83a 	sub	r18,r7,r3
 4004614:	1023883a 	mov	r17,r2
 4004618:	003fae06 	br	40044d4 <__alt_data_end+0xfc0044d4>
 400461c:	8880004c 	andi	r2,r17,1
 4004620:	043fffc4 	movi	r16,-1
 4004624:	000b883a 	mov	r5,zero
 4004628:	003f8a06 	br	4004454 <__alt_data_end+0xfc004454>
 400462c:	00ff0034 	movhi	r3,64512
 4004630:	18ffffc4 	addi	r3,r3,-1
 4004634:	80a1c83a 	sub	r16,r16,r2
 4004638:	90c6703a 	and	r3,r18,r3
 400463c:	003f7706 	br	400441c <__alt_data_end+0xfc00441c>
 4004640:	2000431e 	bne	r4,zero,4004750 <__subsf3+0x398>
 4004644:	81000044 	addi	r4,r16,1
 4004648:	21803fcc 	andi	r6,r4,255
 400464c:	01400044 	movi	r5,1
 4004650:	2980280e 	bge	r5,r6,40046f4 <__subsf3+0x33c>
 4004654:	01403fc4 	movi	r5,255
 4004658:	21402326 	beq	r4,r5,40046e8 <__subsf3+0x330>
 400465c:	19c7883a 	add	r3,r3,r7
 4004660:	1806d07a 	srli	r3,r3,1
 4004664:	2021883a 	mov	r16,r4
 4004668:	003f6c06 	br	400441c <__alt_data_end+0xfc00441c>
 400466c:	1023883a 	mov	r17,r2
 4004670:	003fa906 	br	4004518 <__alt_data_end+0xfc004518>
 4004674:	01c00044 	movi	r7,1
 4004678:	003f9006 	br	40044bc <__alt_data_end+0xfc0044bc>
 400467c:	8000151e 	bne	r16,zero,40046d4 <__subsf3+0x31c>
 4004680:	18002f26 	beq	r3,zero,4004740 <__subsf3+0x388>
 4004684:	0108303a 	nor	r4,zero,r4
 4004688:	20000a26 	beq	r4,zero,40046b4 <__subsf3+0x2fc>
 400468c:	01403fc4 	movi	r5,255
 4004690:	31402b26 	beq	r6,r5,4004740 <__subsf3+0x388>
 4004694:	014006c4 	movi	r5,27
 4004698:	29006e16 	blt	r5,r4,4004854 <__subsf3+0x49c>
 400469c:	01400804 	movi	r5,32
 40046a0:	290bc83a 	sub	r5,r5,r4
 40046a4:	194a983a 	sll	r5,r3,r5
 40046a8:	1908d83a 	srl	r4,r3,r4
 40046ac:	2806c03a 	cmpne	r3,r5,zero
 40046b0:	20c6b03a 	or	r3,r4,r3
 40046b4:	38c7c83a 	sub	r3,r7,r3
 40046b8:	3021883a 	mov	r16,r6
 40046bc:	1023883a 	mov	r17,r2
 40046c0:	003f7f06 	br	40044c0 <__alt_data_end+0xfc0044c0>
 40046c4:	903f831e 	bne	r18,zero,40044d4 <__alt_data_end+0xfc0044d4>
 40046c8:	0005883a 	mov	r2,zero
 40046cc:	0021883a 	mov	r16,zero
 40046d0:	003f9a06 	br	400453c <__alt_data_end+0xfc00453c>
 40046d4:	01403fc4 	movi	r5,255
 40046d8:	31401926 	beq	r6,r5,4004740 <__subsf3+0x388>
 40046dc:	0109c83a 	sub	r4,zero,r4
 40046e0:	18c10034 	orhi	r3,r3,1024
 40046e4:	003feb06 	br	4004694 <__alt_data_end+0xfc004694>
 40046e8:	043fffc4 	movi	r16,-1
 40046ec:	000b883a 	mov	r5,zero
 40046f0:	003f5806 	br	4004454 <__alt_data_end+0xfc004454>
 40046f4:	8000481e 	bne	r16,zero,4004818 <__subsf3+0x460>
 40046f8:	18006226 	beq	r3,zero,4004884 <__subsf3+0x4cc>
 40046fc:	383f4726 	beq	r7,zero,400441c <__alt_data_end+0xfc00441c>
 4004700:	19c7883a 	add	r3,r3,r7
 4004704:	1881002c 	andhi	r2,r3,1024
 4004708:	103f8326 	beq	r2,zero,4004518 <__alt_data_end+0xfc004518>
 400470c:	00bf0034 	movhi	r2,64512
 4004710:	10bfffc4 	addi	r2,r2,-1
 4004714:	2821883a 	mov	r16,r5
 4004718:	1886703a 	and	r3,r3,r2
 400471c:	003f3f06 	br	400441c <__alt_data_end+0xfc00441c>
 4004720:	80001c1e 	bne	r16,zero,4004794 <__subsf3+0x3dc>
 4004724:	1800261e 	bne	r3,zero,40047c0 <__subsf3+0x408>
 4004728:	38004c26 	beq	r7,zero,400485c <__subsf3+0x4a4>
 400472c:	3807883a 	mov	r3,r7
 4004730:	1023883a 	mov	r17,r2
 4004734:	003f3906 	br	400441c <__alt_data_end+0xfc00441c>
 4004738:	01c00044 	movi	r7,1
 400473c:	003f9006 	br	4004580 <__alt_data_end+0xfc004580>
 4004740:	3807883a 	mov	r3,r7
 4004744:	3021883a 	mov	r16,r6
 4004748:	1023883a 	mov	r17,r2
 400474c:	003f3306 	br	400441c <__alt_data_end+0xfc00441c>
 4004750:	8000161e 	bne	r16,zero,40047ac <__subsf3+0x3f4>
 4004754:	18002d26 	beq	r3,zero,400480c <__subsf3+0x454>
 4004758:	0108303a 	nor	r4,zero,r4
 400475c:	20000a26 	beq	r4,zero,4004788 <__subsf3+0x3d0>
 4004760:	01403fc4 	movi	r5,255
 4004764:	31402926 	beq	r6,r5,400480c <__subsf3+0x454>
 4004768:	014006c4 	movi	r5,27
 400476c:	29004716 	blt	r5,r4,400488c <__subsf3+0x4d4>
 4004770:	01400804 	movi	r5,32
 4004774:	290bc83a 	sub	r5,r5,r4
 4004778:	194a983a 	sll	r5,r3,r5
 400477c:	1908d83a 	srl	r4,r3,r4
 4004780:	2806c03a 	cmpne	r3,r5,zero
 4004784:	20c6b03a 	or	r3,r4,r3
 4004788:	19c7883a 	add	r3,r3,r7
 400478c:	3021883a 	mov	r16,r6
 4004790:	003f7c06 	br	4004584 <__alt_data_end+0xfc004584>
 4004794:	1800111e 	bne	r3,zero,40047dc <__subsf3+0x424>
 4004798:	38003326 	beq	r7,zero,4004868 <__subsf3+0x4b0>
 400479c:	3807883a 	mov	r3,r7
 40047a0:	1023883a 	mov	r17,r2
 40047a4:	04003fc4 	movi	r16,255
 40047a8:	003f1c06 	br	400441c <__alt_data_end+0xfc00441c>
 40047ac:	01403fc4 	movi	r5,255
 40047b0:	31401626 	beq	r6,r5,400480c <__subsf3+0x454>
 40047b4:	0109c83a 	sub	r4,zero,r4
 40047b8:	18c10034 	orhi	r3,r3,1024
 40047bc:	003fea06 	br	4004768 <__alt_data_end+0xfc004768>
 40047c0:	383f1626 	beq	r7,zero,400441c <__alt_data_end+0xfc00441c>
 40047c4:	19c9c83a 	sub	r4,r3,r7
 40047c8:	2141002c 	andhi	r5,r4,1024
 40047cc:	283f5026 	beq	r5,zero,4004510 <__alt_data_end+0xfc004510>
 40047d0:	38c7c83a 	sub	r3,r7,r3
 40047d4:	1023883a 	mov	r17,r2
 40047d8:	003f1006 	br	400441c <__alt_data_end+0xfc00441c>
 40047dc:	38001b26 	beq	r7,zero,400484c <__subsf3+0x494>
 40047e0:	1806d0fa 	srli	r3,r3,3
 40047e4:	1900102c 	andhi	r4,r3,64
 40047e8:	20000526 	beq	r4,zero,4004800 <__subsf3+0x448>
 40047ec:	380ed0fa 	srli	r7,r7,3
 40047f0:	3900102c 	andhi	r4,r7,64
 40047f4:	2000021e 	bne	r4,zero,4004800 <__subsf3+0x448>
 40047f8:	3807883a 	mov	r3,r7
 40047fc:	1023883a 	mov	r17,r2
 4004800:	180690fa 	slli	r3,r3,3
 4004804:	04003fc4 	movi	r16,255
 4004808:	003f0406 	br	400441c <__alt_data_end+0xfc00441c>
 400480c:	3807883a 	mov	r3,r7
 4004810:	3021883a 	mov	r16,r6
 4004814:	003f0106 	br	400441c <__alt_data_end+0xfc00441c>
 4004818:	18001726 	beq	r3,zero,4004878 <__subsf3+0x4c0>
 400481c:	38000b26 	beq	r7,zero,400484c <__subsf3+0x494>
 4004820:	1806d0fa 	srli	r3,r3,3
 4004824:	1900102c 	andhi	r4,r3,64
 4004828:	20000426 	beq	r4,zero,400483c <__subsf3+0x484>
 400482c:	380ed0fa 	srli	r7,r7,3
 4004830:	3900102c 	andhi	r4,r7,64
 4004834:	2000011e 	bne	r4,zero,400483c <__subsf3+0x484>
 4004838:	3807883a 	mov	r3,r7
 400483c:	180690fa 	slli	r3,r3,3
 4004840:	1023883a 	mov	r17,r2
 4004844:	04003fc4 	movi	r16,255
 4004848:	003ef406 	br	400441c <__alt_data_end+0xfc00441c>
 400484c:	04003fc4 	movi	r16,255
 4004850:	003ef206 	br	400441c <__alt_data_end+0xfc00441c>
 4004854:	00c00044 	movi	r3,1
 4004858:	003f9606 	br	40046b4 <__alt_data_end+0xfc0046b4>
 400485c:	000b883a 	mov	r5,zero
 4004860:	0005883a 	mov	r2,zero
 4004864:	003f3506 	br	400453c <__alt_data_end+0xfc00453c>
 4004868:	01402034 	movhi	r5,128
 400486c:	297fffc4 	addi	r5,r5,-1
 4004870:	0005883a 	mov	r2,zero
 4004874:	003f2f06 	br	4004534 <__alt_data_end+0xfc004534>
 4004878:	3807883a 	mov	r3,r7
 400487c:	04003fc4 	movi	r16,255
 4004880:	003ee606 	br	400441c <__alt_data_end+0xfc00441c>
 4004884:	3807883a 	mov	r3,r7
 4004888:	003ee406 	br	400441c <__alt_data_end+0xfc00441c>
 400488c:	00c00044 	movi	r3,1
 4004890:	003fbd06 	br	4004788 <__alt_data_end+0xfc004788>
 4004894:	0005883a 	mov	r2,zero
 4004898:	003f2806 	br	400453c <__alt_data_end+0xfc00453c>

0400489c <__fixsfsi>:
 400489c:	200ad5fa 	srli	r5,r4,23
 40048a0:	00c02034 	movhi	r3,128
 40048a4:	18ffffc4 	addi	r3,r3,-1
 40048a8:	29403fcc 	andi	r5,r5,255
 40048ac:	00801f84 	movi	r2,126
 40048b0:	1906703a 	and	r3,r3,r4
 40048b4:	2008d7fa 	srli	r4,r4,31
 40048b8:	11400e0e 	bge	r2,r5,40048f4 <__fixsfsi+0x58>
 40048bc:	00802744 	movi	r2,157
 40048c0:	11400816 	blt	r2,r5,40048e4 <__fixsfsi+0x48>
 40048c4:	00802544 	movi	r2,149
 40048c8:	18c02034 	orhi	r3,r3,128
 40048cc:	11400b0e 	bge	r2,r5,40048fc <__fixsfsi+0x60>
 40048d0:	28bfda84 	addi	r2,r5,-150
 40048d4:	1884983a 	sll	r2,r3,r2
 40048d8:	20000726 	beq	r4,zero,40048f8 <__fixsfsi+0x5c>
 40048dc:	0085c83a 	sub	r2,zero,r2
 40048e0:	f800283a 	ret
 40048e4:	00a00034 	movhi	r2,32768
 40048e8:	10bfffc4 	addi	r2,r2,-1
 40048ec:	2085883a 	add	r2,r4,r2
 40048f0:	f800283a 	ret
 40048f4:	0005883a 	mov	r2,zero
 40048f8:	f800283a 	ret
 40048fc:	00802584 	movi	r2,150
 4004900:	1145c83a 	sub	r2,r2,r5
 4004904:	1884d83a 	srl	r2,r3,r2
 4004908:	003ff306 	br	40048d8 <__alt_data_end+0xfc0048d8>

0400490c <__floatsisf>:
 400490c:	defffd04 	addi	sp,sp,-12
 4004910:	dfc00215 	stw	ra,8(sp)
 4004914:	dc400115 	stw	r17,4(sp)
 4004918:	dc000015 	stw	r16,0(sp)
 400491c:	20003526 	beq	r4,zero,40049f4 <__floatsisf+0xe8>
 4004920:	2021883a 	mov	r16,r4
 4004924:	2022d7fa 	srli	r17,r4,31
 4004928:	20003616 	blt	r4,zero,4004a04 <__floatsisf+0xf8>
 400492c:	8009883a 	mov	r4,r16
 4004930:	4004a300 	call	4004a30 <__clzsi2>
 4004934:	00c02784 	movi	r3,158
 4004938:	1887c83a 	sub	r3,r3,r2
 400493c:	01002584 	movi	r4,150
 4004940:	20c01416 	blt	r4,r3,4004994 <__floatsisf+0x88>
 4004944:	20c9c83a 	sub	r4,r4,r3
 4004948:	8120983a 	sll	r16,r16,r4
 400494c:	00802034 	movhi	r2,128
 4004950:	10bfffc4 	addi	r2,r2,-1
 4004954:	8809883a 	mov	r4,r17
 4004958:	80a0703a 	and	r16,r16,r2
 400495c:	18803fcc 	andi	r2,r3,255
 4004960:	100695fa 	slli	r3,r2,23
 4004964:	20803fcc 	andi	r2,r4,255
 4004968:	100897fa 	slli	r4,r2,31
 400496c:	00802034 	movhi	r2,128
 4004970:	10bfffc4 	addi	r2,r2,-1
 4004974:	8084703a 	and	r2,r16,r2
 4004978:	10c4b03a 	or	r2,r2,r3
 400497c:	1104b03a 	or	r2,r2,r4
 4004980:	dfc00217 	ldw	ra,8(sp)
 4004984:	dc400117 	ldw	r17,4(sp)
 4004988:	dc000017 	ldw	r16,0(sp)
 400498c:	dec00304 	addi	sp,sp,12
 4004990:	f800283a 	ret
 4004994:	01002644 	movi	r4,153
 4004998:	20c01c16 	blt	r4,r3,4004a0c <__floatsisf+0x100>
 400499c:	20c9c83a 	sub	r4,r4,r3
 40049a0:	8120983a 	sll	r16,r16,r4
 40049a4:	013f0034 	movhi	r4,64512
 40049a8:	213fffc4 	addi	r4,r4,-1
 40049ac:	814001cc 	andi	r5,r16,7
 40049b0:	8108703a 	and	r4,r16,r4
 40049b4:	28000426 	beq	r5,zero,40049c8 <__floatsisf+0xbc>
 40049b8:	840003cc 	andi	r16,r16,15
 40049bc:	01400104 	movi	r5,4
 40049c0:	81400126 	beq	r16,r5,40049c8 <__floatsisf+0xbc>
 40049c4:	2149883a 	add	r4,r4,r5
 40049c8:	2141002c 	andhi	r5,r4,1024
 40049cc:	28000526 	beq	r5,zero,40049e4 <__floatsisf+0xd8>
 40049d0:	00c027c4 	movi	r3,159
 40049d4:	1887c83a 	sub	r3,r3,r2
 40049d8:	00bf0034 	movhi	r2,64512
 40049dc:	10bfffc4 	addi	r2,r2,-1
 40049e0:	2088703a 	and	r4,r4,r2
 40049e4:	202091ba 	slli	r16,r4,6
 40049e8:	8809883a 	mov	r4,r17
 40049ec:	8020d27a 	srli	r16,r16,9
 40049f0:	003fda06 	br	400495c <__alt_data_end+0xfc00495c>
 40049f4:	0009883a 	mov	r4,zero
 40049f8:	0007883a 	mov	r3,zero
 40049fc:	0021883a 	mov	r16,zero
 4004a00:	003fd606 	br	400495c <__alt_data_end+0xfc00495c>
 4004a04:	0121c83a 	sub	r16,zero,r4
 4004a08:	003fc806 	br	400492c <__alt_data_end+0xfc00492c>
 4004a0c:	01002e44 	movi	r4,185
 4004a10:	20c9c83a 	sub	r4,r4,r3
 4004a14:	01400144 	movi	r5,5
 4004a18:	8108983a 	sll	r4,r16,r4
 4004a1c:	288bc83a 	sub	r5,r5,r2
 4004a20:	8160d83a 	srl	r16,r16,r5
 4004a24:	2008c03a 	cmpne	r4,r4,zero
 4004a28:	8120b03a 	or	r16,r16,r4
 4004a2c:	003fdd06 	br	40049a4 <__alt_data_end+0xfc0049a4>

04004a30 <__clzsi2>:
 4004a30:	00bfffd4 	movui	r2,65535
 4004a34:	11000536 	bltu	r2,r4,4004a4c <__clzsi2+0x1c>
 4004a38:	00803fc4 	movi	r2,255
 4004a3c:	11000f36 	bltu	r2,r4,4004a7c <__clzsi2+0x4c>
 4004a40:	00800804 	movi	r2,32
 4004a44:	0007883a 	mov	r3,zero
 4004a48:	00000506 	br	4004a60 <__clzsi2+0x30>
 4004a4c:	00804034 	movhi	r2,256
 4004a50:	10bfffc4 	addi	r2,r2,-1
 4004a54:	11000c2e 	bgeu	r2,r4,4004a88 <__clzsi2+0x58>
 4004a58:	00800204 	movi	r2,8
 4004a5c:	00c00604 	movi	r3,24
 4004a60:	20c8d83a 	srl	r4,r4,r3
 4004a64:	00c10074 	movhi	r3,1025
 4004a68:	18f51644 	addi	r3,r3,-11175
 4004a6c:	1909883a 	add	r4,r3,r4
 4004a70:	20c00003 	ldbu	r3,0(r4)
 4004a74:	10c5c83a 	sub	r2,r2,r3
 4004a78:	f800283a 	ret
 4004a7c:	00800604 	movi	r2,24
 4004a80:	00c00204 	movi	r3,8
 4004a84:	003ff606 	br	4004a60 <__alt_data_end+0xfc004a60>
 4004a88:	00800404 	movi	r2,16
 4004a8c:	1007883a 	mov	r3,r2
 4004a90:	003ff306 	br	4004a60 <__alt_data_end+0xfc004a60>

04004a94 <__assert_func>:
 4004a94:	00810074 	movhi	r2,1025
 4004a98:	10bc5904 	addi	r2,r2,-3740
 4004a9c:	10800017 	ldw	r2,0(r2)
 4004aa0:	defffc04 	addi	sp,sp,-16
 4004aa4:	dfc00315 	stw	ra,12(sp)
 4004aa8:	2015883a 	mov	r10,r4
 4004aac:	2811883a 	mov	r8,r5
 4004ab0:	3813883a 	mov	r9,r7
 4004ab4:	11000317 	ldw	r4,12(r2)
 4004ab8:	30000c26 	beq	r6,zero,4004aec <__assert_func+0x58>
 4004abc:	00c10074 	movhi	r3,1025
 4004ac0:	18f55704 	addi	r3,r3,-10916
 4004ac4:	3005883a 	mov	r2,r6
 4004ac8:	01410074 	movhi	r5,1025
 4004acc:	29755b04 	addi	r5,r5,-10900
 4004ad0:	500f883a 	mov	r7,r10
 4004ad4:	480d883a 	mov	r6,r9
 4004ad8:	d8c00115 	stw	r3,4(sp)
 4004adc:	da000015 	stw	r8,0(sp)
 4004ae0:	d8800215 	stw	r2,8(sp)
 4004ae4:	4004b300 	call	4004b30 <fiprintf>
 4004ae8:	4004df40 	call	4004df4 <abort>
 4004aec:	00c10074 	movhi	r3,1025
 4004af0:	18f55a04 	addi	r3,r3,-10904
 4004af4:	1805883a 	mov	r2,r3
 4004af8:	003ff306 	br	4004ac8 <__alt_data_end+0xfc004ac8>

04004afc <__assert>:
 4004afc:	deffff04 	addi	sp,sp,-4
 4004b00:	300f883a 	mov	r7,r6
 4004b04:	000d883a 	mov	r6,zero
 4004b08:	dfc00015 	stw	ra,0(sp)
 4004b0c:	4004a940 	call	4004a94 <__assert_func>

04004b10 <_fiprintf_r>:
 4004b10:	defffe04 	addi	sp,sp,-8
 4004b14:	dfc00015 	stw	ra,0(sp)
 4004b18:	d9c00115 	stw	r7,4(sp)
 4004b1c:	d9c00104 	addi	r7,sp,4
 4004b20:	4004ddc0 	call	4004ddc <_vfiprintf_r>
 4004b24:	dfc00017 	ldw	ra,0(sp)
 4004b28:	dec00204 	addi	sp,sp,8
 4004b2c:	f800283a 	ret

04004b30 <fiprintf>:
 4004b30:	defffd04 	addi	sp,sp,-12
 4004b34:	2005883a 	mov	r2,r4
 4004b38:	dfc00015 	stw	ra,0(sp)
 4004b3c:	d9800115 	stw	r6,4(sp)
 4004b40:	d9c00215 	stw	r7,8(sp)
 4004b44:	00c10074 	movhi	r3,1025
 4004b48:	18fc5904 	addi	r3,r3,-3740
 4004b4c:	19000017 	ldw	r4,0(r3)
 4004b50:	280d883a 	mov	r6,r5
 4004b54:	d9c00104 	addi	r7,sp,4
 4004b58:	100b883a 	mov	r5,r2
 4004b5c:	4004ddc0 	call	4004ddc <_vfiprintf_r>
 4004b60:	dfc00017 	ldw	ra,0(sp)
 4004b64:	dec00304 	addi	sp,sp,12
 4004b68:	f800283a 	ret

04004b6c <memcpy>:
 4004b6c:	defffd04 	addi	sp,sp,-12
 4004b70:	dfc00215 	stw	ra,8(sp)
 4004b74:	dc400115 	stw	r17,4(sp)
 4004b78:	dc000015 	stw	r16,0(sp)
 4004b7c:	00c003c4 	movi	r3,15
 4004b80:	2005883a 	mov	r2,r4
 4004b84:	1980452e 	bgeu	r3,r6,4004c9c <memcpy+0x130>
 4004b88:	2906b03a 	or	r3,r5,r4
 4004b8c:	18c000cc 	andi	r3,r3,3
 4004b90:	1800441e 	bne	r3,zero,4004ca4 <memcpy+0x138>
 4004b94:	347ffc04 	addi	r17,r6,-16
 4004b98:	8822d13a 	srli	r17,r17,4
 4004b9c:	28c00104 	addi	r3,r5,4
 4004ba0:	23400104 	addi	r13,r4,4
 4004ba4:	8820913a 	slli	r16,r17,4
 4004ba8:	2b000204 	addi	r12,r5,8
 4004bac:	22c00204 	addi	r11,r4,8
 4004bb0:	84000504 	addi	r16,r16,20
 4004bb4:	2a800304 	addi	r10,r5,12
 4004bb8:	22400304 	addi	r9,r4,12
 4004bbc:	2c21883a 	add	r16,r5,r16
 4004bc0:	2811883a 	mov	r8,r5
 4004bc4:	200f883a 	mov	r7,r4
 4004bc8:	41000017 	ldw	r4,0(r8)
 4004bcc:	1fc00017 	ldw	ra,0(r3)
 4004bd0:	63c00017 	ldw	r15,0(r12)
 4004bd4:	39000015 	stw	r4,0(r7)
 4004bd8:	53800017 	ldw	r14,0(r10)
 4004bdc:	6fc00015 	stw	ra,0(r13)
 4004be0:	5bc00015 	stw	r15,0(r11)
 4004be4:	4b800015 	stw	r14,0(r9)
 4004be8:	18c00404 	addi	r3,r3,16
 4004bec:	39c00404 	addi	r7,r7,16
 4004bf0:	42000404 	addi	r8,r8,16
 4004bf4:	6b400404 	addi	r13,r13,16
 4004bf8:	63000404 	addi	r12,r12,16
 4004bfc:	5ac00404 	addi	r11,r11,16
 4004c00:	52800404 	addi	r10,r10,16
 4004c04:	4a400404 	addi	r9,r9,16
 4004c08:	1c3fef1e 	bne	r3,r16,4004bc8 <__alt_data_end+0xfc004bc8>
 4004c0c:	89c00044 	addi	r7,r17,1
 4004c10:	380e913a 	slli	r7,r7,4
 4004c14:	310003cc 	andi	r4,r6,15
 4004c18:	02c000c4 	movi	r11,3
 4004c1c:	11c7883a 	add	r3,r2,r7
 4004c20:	29cb883a 	add	r5,r5,r7
 4004c24:	5900212e 	bgeu	r11,r4,4004cac <memcpy+0x140>
 4004c28:	1813883a 	mov	r9,r3
 4004c2c:	2811883a 	mov	r8,r5
 4004c30:	200f883a 	mov	r7,r4
 4004c34:	42800017 	ldw	r10,0(r8)
 4004c38:	4a400104 	addi	r9,r9,4
 4004c3c:	39ffff04 	addi	r7,r7,-4
 4004c40:	4abfff15 	stw	r10,-4(r9)
 4004c44:	42000104 	addi	r8,r8,4
 4004c48:	59fffa36 	bltu	r11,r7,4004c34 <__alt_data_end+0xfc004c34>
 4004c4c:	213fff04 	addi	r4,r4,-4
 4004c50:	2008d0ba 	srli	r4,r4,2
 4004c54:	318000cc 	andi	r6,r6,3
 4004c58:	21000044 	addi	r4,r4,1
 4004c5c:	2109883a 	add	r4,r4,r4
 4004c60:	2109883a 	add	r4,r4,r4
 4004c64:	1907883a 	add	r3,r3,r4
 4004c68:	290b883a 	add	r5,r5,r4
 4004c6c:	30000626 	beq	r6,zero,4004c88 <memcpy+0x11c>
 4004c70:	198d883a 	add	r6,r3,r6
 4004c74:	29c00003 	ldbu	r7,0(r5)
 4004c78:	18c00044 	addi	r3,r3,1
 4004c7c:	29400044 	addi	r5,r5,1
 4004c80:	19ffffc5 	stb	r7,-1(r3)
 4004c84:	19bffb1e 	bne	r3,r6,4004c74 <__alt_data_end+0xfc004c74>
 4004c88:	dfc00217 	ldw	ra,8(sp)
 4004c8c:	dc400117 	ldw	r17,4(sp)
 4004c90:	dc000017 	ldw	r16,0(sp)
 4004c94:	dec00304 	addi	sp,sp,12
 4004c98:	f800283a 	ret
 4004c9c:	2007883a 	mov	r3,r4
 4004ca0:	003ff206 	br	4004c6c <__alt_data_end+0xfc004c6c>
 4004ca4:	2007883a 	mov	r3,r4
 4004ca8:	003ff106 	br	4004c70 <__alt_data_end+0xfc004c70>
 4004cac:	200d883a 	mov	r6,r4
 4004cb0:	003fee06 	br	4004c6c <__alt_data_end+0xfc004c6c>

04004cb4 <memset>:
 4004cb4:	20c000cc 	andi	r3,r4,3
 4004cb8:	2005883a 	mov	r2,r4
 4004cbc:	18004426 	beq	r3,zero,4004dd0 <memset+0x11c>
 4004cc0:	31ffffc4 	addi	r7,r6,-1
 4004cc4:	30004026 	beq	r6,zero,4004dc8 <memset+0x114>
 4004cc8:	2813883a 	mov	r9,r5
 4004ccc:	200d883a 	mov	r6,r4
 4004cd0:	2007883a 	mov	r3,r4
 4004cd4:	00000406 	br	4004ce8 <memset+0x34>
 4004cd8:	3a3fffc4 	addi	r8,r7,-1
 4004cdc:	31800044 	addi	r6,r6,1
 4004ce0:	38003926 	beq	r7,zero,4004dc8 <memset+0x114>
 4004ce4:	400f883a 	mov	r7,r8
 4004ce8:	18c00044 	addi	r3,r3,1
 4004cec:	32400005 	stb	r9,0(r6)
 4004cf0:	1a0000cc 	andi	r8,r3,3
 4004cf4:	403ff81e 	bne	r8,zero,4004cd8 <__alt_data_end+0xfc004cd8>
 4004cf8:	010000c4 	movi	r4,3
 4004cfc:	21c02d2e 	bgeu	r4,r7,4004db4 <memset+0x100>
 4004d00:	29003fcc 	andi	r4,r5,255
 4004d04:	200c923a 	slli	r6,r4,8
 4004d08:	3108b03a 	or	r4,r6,r4
 4004d0c:	200c943a 	slli	r6,r4,16
 4004d10:	218cb03a 	or	r6,r4,r6
 4004d14:	010003c4 	movi	r4,15
 4004d18:	21c0182e 	bgeu	r4,r7,4004d7c <memset+0xc8>
 4004d1c:	3b3ffc04 	addi	r12,r7,-16
 4004d20:	6018d13a 	srli	r12,r12,4
 4004d24:	1a000104 	addi	r8,r3,4
 4004d28:	1ac00204 	addi	r11,r3,8
 4004d2c:	6008913a 	slli	r4,r12,4
 4004d30:	1a800304 	addi	r10,r3,12
 4004d34:	1813883a 	mov	r9,r3
 4004d38:	21000504 	addi	r4,r4,20
 4004d3c:	1909883a 	add	r4,r3,r4
 4004d40:	49800015 	stw	r6,0(r9)
 4004d44:	41800015 	stw	r6,0(r8)
 4004d48:	59800015 	stw	r6,0(r11)
 4004d4c:	51800015 	stw	r6,0(r10)
 4004d50:	42000404 	addi	r8,r8,16
 4004d54:	4a400404 	addi	r9,r9,16
 4004d58:	5ac00404 	addi	r11,r11,16
 4004d5c:	52800404 	addi	r10,r10,16
 4004d60:	413ff71e 	bne	r8,r4,4004d40 <__alt_data_end+0xfc004d40>
 4004d64:	63000044 	addi	r12,r12,1
 4004d68:	6018913a 	slli	r12,r12,4
 4004d6c:	39c003cc 	andi	r7,r7,15
 4004d70:	010000c4 	movi	r4,3
 4004d74:	1b07883a 	add	r3,r3,r12
 4004d78:	21c00e2e 	bgeu	r4,r7,4004db4 <memset+0x100>
 4004d7c:	1813883a 	mov	r9,r3
 4004d80:	3811883a 	mov	r8,r7
 4004d84:	010000c4 	movi	r4,3
 4004d88:	49800015 	stw	r6,0(r9)
 4004d8c:	423fff04 	addi	r8,r8,-4
 4004d90:	4a400104 	addi	r9,r9,4
 4004d94:	223ffc36 	bltu	r4,r8,4004d88 <__alt_data_end+0xfc004d88>
 4004d98:	393fff04 	addi	r4,r7,-4
 4004d9c:	2008d0ba 	srli	r4,r4,2
 4004da0:	39c000cc 	andi	r7,r7,3
 4004da4:	21000044 	addi	r4,r4,1
 4004da8:	2109883a 	add	r4,r4,r4
 4004dac:	2109883a 	add	r4,r4,r4
 4004db0:	1907883a 	add	r3,r3,r4
 4004db4:	38000526 	beq	r7,zero,4004dcc <memset+0x118>
 4004db8:	19cf883a 	add	r7,r3,r7
 4004dbc:	19400005 	stb	r5,0(r3)
 4004dc0:	18c00044 	addi	r3,r3,1
 4004dc4:	38fffd1e 	bne	r7,r3,4004dbc <__alt_data_end+0xfc004dbc>
 4004dc8:	f800283a 	ret
 4004dcc:	f800283a 	ret
 4004dd0:	2007883a 	mov	r3,r4
 4004dd4:	300f883a 	mov	r7,r6
 4004dd8:	003fc706 	br	4004cf8 <__alt_data_end+0xfc004cf8>

04004ddc <_vfiprintf_r>:
 4004ddc:	deffff04 	addi	sp,sp,-4
 4004de0:	dfc00015 	stw	ra,0(sp)
 4004de4:	40052240 	call	4005224 <___vfiprintf_internal_r>
 4004de8:	dfc00017 	ldw	ra,0(sp)
 4004dec:	dec00104 	addi	sp,sp,4
 4004df0:	f800283a 	ret

04004df4 <abort>:
 4004df4:	deffff04 	addi	sp,sp,-4
 4004df8:	01000184 	movi	r4,6
 4004dfc:	dfc00015 	stw	ra,0(sp)
 4004e00:	40050600 	call	4005060 <raise>
 4004e04:	01000044 	movi	r4,1
 4004e08:	400a4f40 	call	400a4f4 <_exit>

04004e0c <_init_signal_r>:
 4004e0c:	2080b717 	ldw	r2,732(r4)
 4004e10:	10000226 	beq	r2,zero,4004e1c <_init_signal_r+0x10>
 4004e14:	0005883a 	mov	r2,zero
 4004e18:	f800283a 	ret
 4004e1c:	defffe04 	addi	sp,sp,-8
 4004e20:	01402004 	movi	r5,128
 4004e24:	dc000015 	stw	r16,0(sp)
 4004e28:	dfc00115 	stw	ra,4(sp)
 4004e2c:	2021883a 	mov	r16,r4
 4004e30:	4007ed80 	call	4007ed8 <_malloc_r>
 4004e34:	8080b715 	stw	r2,732(r16)
 4004e38:	10000d26 	beq	r2,zero,4004e70 <_init_signal_r+0x64>
 4004e3c:	0007883a 	mov	r3,zero
 4004e40:	01002004 	movi	r4,128
 4004e44:	00000106 	br	4004e4c <_init_signal_r+0x40>
 4004e48:	8080b717 	ldw	r2,732(r16)
 4004e4c:	10c5883a 	add	r2,r2,r3
 4004e50:	10000015 	stw	zero,0(r2)
 4004e54:	18c00104 	addi	r3,r3,4
 4004e58:	193ffb1e 	bne	r3,r4,4004e48 <__alt_data_end+0xfc004e48>
 4004e5c:	0005883a 	mov	r2,zero
 4004e60:	dfc00117 	ldw	ra,4(sp)
 4004e64:	dc000017 	ldw	r16,0(sp)
 4004e68:	dec00204 	addi	sp,sp,8
 4004e6c:	f800283a 	ret
 4004e70:	00bfffc4 	movi	r2,-1
 4004e74:	003ffa06 	br	4004e60 <__alt_data_end+0xfc004e60>

04004e78 <_signal_r>:
 4004e78:	00c007c4 	movi	r3,31
 4004e7c:	19401536 	bltu	r3,r5,4004ed4 <_signal_r+0x5c>
 4004e80:	2080b717 	ldw	r2,732(r4)
 4004e84:	defffc04 	addi	sp,sp,-16
 4004e88:	dc800215 	stw	r18,8(sp)
 4004e8c:	dc400115 	stw	r17,4(sp)
 4004e90:	dc000015 	stw	r16,0(sp)
 4004e94:	dfc00315 	stw	ra,12(sp)
 4004e98:	3023883a 	mov	r17,r6
 4004e9c:	2021883a 	mov	r16,r4
 4004ea0:	2825883a 	mov	r18,r5
 4004ea4:	10000f26 	beq	r2,zero,4004ee4 <_signal_r+0x6c>
 4004ea8:	948b883a 	add	r5,r18,r18
 4004eac:	294b883a 	add	r5,r5,r5
 4004eb0:	114b883a 	add	r5,r2,r5
 4004eb4:	28800017 	ldw	r2,0(r5)
 4004eb8:	2c400015 	stw	r17,0(r5)
 4004ebc:	dfc00317 	ldw	ra,12(sp)
 4004ec0:	dc800217 	ldw	r18,8(sp)
 4004ec4:	dc400117 	ldw	r17,4(sp)
 4004ec8:	dc000017 	ldw	r16,0(sp)
 4004ecc:	dec00404 	addi	sp,sp,16
 4004ed0:	f800283a 	ret
 4004ed4:	00c00584 	movi	r3,22
 4004ed8:	20c00015 	stw	r3,0(r4)
 4004edc:	00bfffc4 	movi	r2,-1
 4004ee0:	f800283a 	ret
 4004ee4:	4004e0c0 	call	4004e0c <_init_signal_r>
 4004ee8:	1000021e 	bne	r2,zero,4004ef4 <_signal_r+0x7c>
 4004eec:	8080b717 	ldw	r2,732(r16)
 4004ef0:	003fed06 	br	4004ea8 <__alt_data_end+0xfc004ea8>
 4004ef4:	00bfffc4 	movi	r2,-1
 4004ef8:	003ff006 	br	4004ebc <__alt_data_end+0xfc004ebc>

04004efc <_raise_r>:
 4004efc:	008007c4 	movi	r2,31
 4004f00:	11402936 	bltu	r2,r5,4004fa8 <_raise_r+0xac>
 4004f04:	20c0b717 	ldw	r3,732(r4)
 4004f08:	defffd04 	addi	sp,sp,-12
 4004f0c:	dc400115 	stw	r17,4(sp)
 4004f10:	dc000015 	stw	r16,0(sp)
 4004f14:	dfc00215 	stw	ra,8(sp)
 4004f18:	2021883a 	mov	r16,r4
 4004f1c:	2823883a 	mov	r17,r5
 4004f20:	18001726 	beq	r3,zero,4004f80 <_raise_r+0x84>
 4004f24:	2945883a 	add	r2,r5,r5
 4004f28:	1085883a 	add	r2,r2,r2
 4004f2c:	1887883a 	add	r3,r3,r2
 4004f30:	19800017 	ldw	r6,0(r3)
 4004f34:	30001226 	beq	r6,zero,4004f80 <_raise_r+0x84>
 4004f38:	00800044 	movi	r2,1
 4004f3c:	30800e26 	beq	r6,r2,4004f78 <_raise_r+0x7c>
 4004f40:	013fffc4 	movi	r4,-1
 4004f44:	31000926 	beq	r6,r4,4004f6c <_raise_r+0x70>
 4004f48:	18000015 	stw	zero,0(r3)
 4004f4c:	2809883a 	mov	r4,r5
 4004f50:	303ee83a 	callr	r6
 4004f54:	0005883a 	mov	r2,zero
 4004f58:	dfc00217 	ldw	ra,8(sp)
 4004f5c:	dc400117 	ldw	r17,4(sp)
 4004f60:	dc000017 	ldw	r16,0(sp)
 4004f64:	dec00304 	addi	sp,sp,12
 4004f68:	f800283a 	ret
 4004f6c:	00c00584 	movi	r3,22
 4004f70:	80c00015 	stw	r3,0(r16)
 4004f74:	003ff806 	br	4004f58 <__alt_data_end+0xfc004f58>
 4004f78:	0005883a 	mov	r2,zero
 4004f7c:	003ff606 	br	4004f58 <__alt_data_end+0xfc004f58>
 4004f80:	8009883a 	mov	r4,r16
 4004f84:	400510c0 	call	400510c <_getpid_r>
 4004f88:	880d883a 	mov	r6,r17
 4004f8c:	100b883a 	mov	r5,r2
 4004f90:	8009883a 	mov	r4,r16
 4004f94:	dfc00217 	ldw	ra,8(sp)
 4004f98:	dc400117 	ldw	r17,4(sp)
 4004f9c:	dc000017 	ldw	r16,0(sp)
 4004fa0:	dec00304 	addi	sp,sp,12
 4004fa4:	40050b01 	jmpi	40050b0 <_kill_r>
 4004fa8:	00800584 	movi	r2,22
 4004fac:	20800015 	stw	r2,0(r4)
 4004fb0:	00bfffc4 	movi	r2,-1
 4004fb4:	f800283a 	ret

04004fb8 <__sigtramp_r>:
 4004fb8:	008007c4 	movi	r2,31
 4004fbc:	11402436 	bltu	r2,r5,4005050 <__sigtramp_r+0x98>
 4004fc0:	20c0b717 	ldw	r3,732(r4)
 4004fc4:	defffd04 	addi	sp,sp,-12
 4004fc8:	dc400115 	stw	r17,4(sp)
 4004fcc:	dc000015 	stw	r16,0(sp)
 4004fd0:	dfc00215 	stw	ra,8(sp)
 4004fd4:	2021883a 	mov	r16,r4
 4004fd8:	2823883a 	mov	r17,r5
 4004fdc:	18001826 	beq	r3,zero,4005040 <__sigtramp_r+0x88>
 4004fe0:	8c45883a 	add	r2,r17,r17
 4004fe4:	1085883a 	add	r2,r2,r2
 4004fe8:	1885883a 	add	r2,r3,r2
 4004fec:	10c00017 	ldw	r3,0(r2)
 4004ff0:	18001126 	beq	r3,zero,4005038 <__sigtramp_r+0x80>
 4004ff4:	013fffc4 	movi	r4,-1
 4004ff8:	19000d26 	beq	r3,r4,4005030 <__sigtramp_r+0x78>
 4004ffc:	01000044 	movi	r4,1
 4005000:	19000926 	beq	r3,r4,4005028 <__sigtramp_r+0x70>
 4005004:	10000015 	stw	zero,0(r2)
 4005008:	8809883a 	mov	r4,r17
 400500c:	183ee83a 	callr	r3
 4005010:	0005883a 	mov	r2,zero
 4005014:	dfc00217 	ldw	ra,8(sp)
 4005018:	dc400117 	ldw	r17,4(sp)
 400501c:	dc000017 	ldw	r16,0(sp)
 4005020:	dec00304 	addi	sp,sp,12
 4005024:	f800283a 	ret
 4005028:	008000c4 	movi	r2,3
 400502c:	003ff906 	br	4005014 <__alt_data_end+0xfc005014>
 4005030:	00800084 	movi	r2,2
 4005034:	003ff706 	br	4005014 <__alt_data_end+0xfc005014>
 4005038:	00800044 	movi	r2,1
 400503c:	003ff506 	br	4005014 <__alt_data_end+0xfc005014>
 4005040:	4004e0c0 	call	4004e0c <_init_signal_r>
 4005044:	1000041e 	bne	r2,zero,4005058 <__sigtramp_r+0xa0>
 4005048:	80c0b717 	ldw	r3,732(r16)
 400504c:	003fe406 	br	4004fe0 <__alt_data_end+0xfc004fe0>
 4005050:	00bfffc4 	movi	r2,-1
 4005054:	f800283a 	ret
 4005058:	00bfffc4 	movi	r2,-1
 400505c:	003fed06 	br	4005014 <__alt_data_end+0xfc005014>

04005060 <raise>:
 4005060:	00810074 	movhi	r2,1025
 4005064:	10bc5904 	addi	r2,r2,-3740
 4005068:	200b883a 	mov	r5,r4
 400506c:	11000017 	ldw	r4,0(r2)
 4005070:	4004efc1 	jmpi	4004efc <_raise_r>

04005074 <signal>:
 4005074:	00810074 	movhi	r2,1025
 4005078:	10bc5904 	addi	r2,r2,-3740
 400507c:	280d883a 	mov	r6,r5
 4005080:	200b883a 	mov	r5,r4
 4005084:	11000017 	ldw	r4,0(r2)
 4005088:	4004e781 	jmpi	4004e78 <_signal_r>

0400508c <_init_signal>:
 400508c:	00810074 	movhi	r2,1025
 4005090:	10bc5904 	addi	r2,r2,-3740
 4005094:	11000017 	ldw	r4,0(r2)
 4005098:	4004e0c1 	jmpi	4004e0c <_init_signal_r>

0400509c <__sigtramp>:
 400509c:	00810074 	movhi	r2,1025
 40050a0:	10bc5904 	addi	r2,r2,-3740
 40050a4:	200b883a 	mov	r5,r4
 40050a8:	11000017 	ldw	r4,0(r2)
 40050ac:	4004fb81 	jmpi	4004fb8 <__sigtramp_r>

040050b0 <_kill_r>:
 40050b0:	defffd04 	addi	sp,sp,-12
 40050b4:	2805883a 	mov	r2,r5
 40050b8:	dc000015 	stw	r16,0(sp)
 40050bc:	04010074 	movhi	r16,1025
 40050c0:	dc400115 	stw	r17,4(sp)
 40050c4:	84034104 	addi	r16,r16,3332
 40050c8:	2023883a 	mov	r17,r4
 40050cc:	300b883a 	mov	r5,r6
 40050d0:	1009883a 	mov	r4,r2
 40050d4:	dfc00215 	stw	ra,8(sp)
 40050d8:	80000015 	stw	zero,0(r16)
 40050dc:	400a7600 	call	400a760 <kill>
 40050e0:	00ffffc4 	movi	r3,-1
 40050e4:	10c00526 	beq	r2,r3,40050fc <_kill_r+0x4c>
 40050e8:	dfc00217 	ldw	ra,8(sp)
 40050ec:	dc400117 	ldw	r17,4(sp)
 40050f0:	dc000017 	ldw	r16,0(sp)
 40050f4:	dec00304 	addi	sp,sp,12
 40050f8:	f800283a 	ret
 40050fc:	80c00017 	ldw	r3,0(r16)
 4005100:	183ff926 	beq	r3,zero,40050e8 <__alt_data_end+0xfc0050e8>
 4005104:	88c00015 	stw	r3,0(r17)
 4005108:	003ff706 	br	40050e8 <__alt_data_end+0xfc0050e8>

0400510c <_getpid_r>:
 400510c:	400a61c1 	jmpi	400a61c <getpid>

04005110 <__sprint_r.part.0>:
 4005110:	28801917 	ldw	r2,100(r5)
 4005114:	defff604 	addi	sp,sp,-40
 4005118:	dd400515 	stw	r21,20(sp)
 400511c:	dfc00915 	stw	ra,36(sp)
 4005120:	df000815 	stw	fp,32(sp)
 4005124:	ddc00715 	stw	r23,28(sp)
 4005128:	dd800615 	stw	r22,24(sp)
 400512c:	dd000415 	stw	r20,16(sp)
 4005130:	dcc00315 	stw	r19,12(sp)
 4005134:	dc800215 	stw	r18,8(sp)
 4005138:	dc400115 	stw	r17,4(sp)
 400513c:	dc000015 	stw	r16,0(sp)
 4005140:	1088000c 	andi	r2,r2,8192
 4005144:	302b883a 	mov	r21,r6
 4005148:	10002e26 	beq	r2,zero,4005204 <__sprint_r.part.0+0xf4>
 400514c:	30800217 	ldw	r2,8(r6)
 4005150:	35800017 	ldw	r22,0(r6)
 4005154:	10002926 	beq	r2,zero,40051fc <__sprint_r.part.0+0xec>
 4005158:	2827883a 	mov	r19,r5
 400515c:	2029883a 	mov	r20,r4
 4005160:	b5c00104 	addi	r23,r22,4
 4005164:	04bfffc4 	movi	r18,-1
 4005168:	bc400017 	ldw	r17,0(r23)
 400516c:	b4000017 	ldw	r16,0(r22)
 4005170:	0039883a 	mov	fp,zero
 4005174:	8822d0ba 	srli	r17,r17,2
 4005178:	8800031e 	bne	r17,zero,4005188 <__sprint_r.part.0+0x78>
 400517c:	00001806 	br	40051e0 <__sprint_r.part.0+0xd0>
 4005180:	84000104 	addi	r16,r16,4
 4005184:	8f001526 	beq	r17,fp,40051dc <__sprint_r.part.0+0xcc>
 4005188:	81400017 	ldw	r5,0(r16)
 400518c:	980d883a 	mov	r6,r19
 4005190:	a009883a 	mov	r4,r20
 4005194:	40071180 	call	4007118 <_fputwc_r>
 4005198:	e7000044 	addi	fp,fp,1
 400519c:	14bff81e 	bne	r2,r18,4005180 <__alt_data_end+0xfc005180>
 40051a0:	9005883a 	mov	r2,r18
 40051a4:	a8000215 	stw	zero,8(r21)
 40051a8:	a8000115 	stw	zero,4(r21)
 40051ac:	dfc00917 	ldw	ra,36(sp)
 40051b0:	df000817 	ldw	fp,32(sp)
 40051b4:	ddc00717 	ldw	r23,28(sp)
 40051b8:	dd800617 	ldw	r22,24(sp)
 40051bc:	dd400517 	ldw	r21,20(sp)
 40051c0:	dd000417 	ldw	r20,16(sp)
 40051c4:	dcc00317 	ldw	r19,12(sp)
 40051c8:	dc800217 	ldw	r18,8(sp)
 40051cc:	dc400117 	ldw	r17,4(sp)
 40051d0:	dc000017 	ldw	r16,0(sp)
 40051d4:	dec00a04 	addi	sp,sp,40
 40051d8:	f800283a 	ret
 40051dc:	a8800217 	ldw	r2,8(r21)
 40051e0:	8c63883a 	add	r17,r17,r17
 40051e4:	8c63883a 	add	r17,r17,r17
 40051e8:	1445c83a 	sub	r2,r2,r17
 40051ec:	a8800215 	stw	r2,8(r21)
 40051f0:	b5800204 	addi	r22,r22,8
 40051f4:	bdc00204 	addi	r23,r23,8
 40051f8:	103fdb1e 	bne	r2,zero,4005168 <__alt_data_end+0xfc005168>
 40051fc:	0005883a 	mov	r2,zero
 4005200:	003fe806 	br	40051a4 <__alt_data_end+0xfc0051a4>
 4005204:	40075f00 	call	40075f0 <__sfvwrite_r>
 4005208:	003fe606 	br	40051a4 <__alt_data_end+0xfc0051a4>

0400520c <__sprint_r>:
 400520c:	30c00217 	ldw	r3,8(r6)
 4005210:	18000126 	beq	r3,zero,4005218 <__sprint_r+0xc>
 4005214:	40051101 	jmpi	4005110 <__sprint_r.part.0>
 4005218:	30000115 	stw	zero,4(r6)
 400521c:	0005883a 	mov	r2,zero
 4005220:	f800283a 	ret

04005224 <___vfiprintf_internal_r>:
 4005224:	deffca04 	addi	sp,sp,-216
 4005228:	dd403115 	stw	r21,196(sp)
 400522c:	dfc03515 	stw	ra,212(sp)
 4005230:	df003415 	stw	fp,208(sp)
 4005234:	ddc03315 	stw	r23,204(sp)
 4005238:	dd803215 	stw	r22,200(sp)
 400523c:	dd003015 	stw	r20,192(sp)
 4005240:	dcc02f15 	stw	r19,188(sp)
 4005244:	dc802e15 	stw	r18,184(sp)
 4005248:	dc402d15 	stw	r17,180(sp)
 400524c:	dc002c15 	stw	r16,176(sp)
 4005250:	d9002115 	stw	r4,132(sp)
 4005254:	d9402015 	stw	r5,128(sp)
 4005258:	d9c02215 	stw	r7,136(sp)
 400525c:	302b883a 	mov	r21,r6
 4005260:	20000226 	beq	r4,zero,400526c <___vfiprintf_internal_r+0x48>
 4005264:	20800e17 	ldw	r2,56(r4)
 4005268:	1000cf26 	beq	r2,zero,40055a8 <___vfiprintf_internal_r+0x384>
 400526c:	d8c02017 	ldw	r3,128(sp)
 4005270:	1880030b 	ldhu	r2,12(r3)
 4005274:	10c8000c 	andi	r3,r2,8192
 4005278:	1800071e 	bne	r3,zero,4005298 <___vfiprintf_internal_r+0x74>
 400527c:	d9402017 	ldw	r5,128(sp)
 4005280:	00f7ffc4 	movi	r3,-8193
 4005284:	10880014 	ori	r2,r2,8192
 4005288:	29001917 	ldw	r4,100(r5)
 400528c:	2880030d 	sth	r2,12(r5)
 4005290:	20c6703a 	and	r3,r4,r3
 4005294:	28c01915 	stw	r3,100(r5)
 4005298:	10c0020c 	andi	r3,r2,8
 400529c:	1800a526 	beq	r3,zero,4005534 <___vfiprintf_internal_r+0x310>
 40052a0:	d9002017 	ldw	r4,128(sp)
 40052a4:	20c00417 	ldw	r3,16(r4)
 40052a8:	1800a226 	beq	r3,zero,4005534 <___vfiprintf_internal_r+0x310>
 40052ac:	1080068c 	andi	r2,r2,26
 40052b0:	00c00284 	movi	r3,10
 40052b4:	10c0a826 	beq	r2,r3,4005558 <___vfiprintf_internal_r+0x334>
 40052b8:	d9001a04 	addi	r4,sp,104
 40052bc:	d94019c4 	addi	r5,sp,103
 40052c0:	04810074 	movhi	r18,1025
 40052c4:	2145c83a 	sub	r2,r4,r5
 40052c8:	94b573c4 	addi	r18,r18,-10801
 40052cc:	d9001e15 	stw	r4,120(sp)
 40052d0:	d9401f15 	stw	r5,124(sp)
 40052d4:	dec01a15 	stw	sp,104(sp)
 40052d8:	d8001c15 	stw	zero,112(sp)
 40052dc:	d8001b15 	stw	zero,108(sp)
 40052e0:	d811883a 	mov	r8,sp
 40052e4:	d8002615 	stw	zero,152(sp)
 40052e8:	d8002415 	stw	zero,144(sp)
 40052ec:	d8802815 	stw	r2,160(sp)
 40052f0:	a82d883a 	mov	r22,r21
 40052f4:	b0800007 	ldb	r2,0(r22)
 40052f8:	10040d26 	beq	r2,zero,4006330 <___vfiprintf_internal_r+0x110c>
 40052fc:	00c00944 	movi	r3,37
 4005300:	b029883a 	mov	r20,r22
 4005304:	10c0021e 	bne	r2,r3,4005310 <___vfiprintf_internal_r+0xec>
 4005308:	00001606 	br	4005364 <___vfiprintf_internal_r+0x140>
 400530c:	10c00326 	beq	r2,r3,400531c <___vfiprintf_internal_r+0xf8>
 4005310:	a5000044 	addi	r20,r20,1
 4005314:	a0800007 	ldb	r2,0(r20)
 4005318:	103ffc1e 	bne	r2,zero,400530c <__alt_data_end+0xfc00530c>
 400531c:	a5a1c83a 	sub	r16,r20,r22
 4005320:	80001026 	beq	r16,zero,4005364 <___vfiprintf_internal_r+0x140>
 4005324:	d8c01c17 	ldw	r3,112(sp)
 4005328:	d8801b17 	ldw	r2,108(sp)
 400532c:	45800015 	stw	r22,0(r8)
 4005330:	80c7883a 	add	r3,r16,r3
 4005334:	10800044 	addi	r2,r2,1
 4005338:	44000115 	stw	r16,4(r8)
 400533c:	d8c01c15 	stw	r3,112(sp)
 4005340:	d8801b15 	stw	r2,108(sp)
 4005344:	010001c4 	movi	r4,7
 4005348:	2080750e 	bge	r4,r2,4005520 <___vfiprintf_internal_r+0x2fc>
 400534c:	1803951e 	bne	r3,zero,40061a4 <___vfiprintf_internal_r+0xf80>
 4005350:	d8c02417 	ldw	r3,144(sp)
 4005354:	d8001b15 	stw	zero,108(sp)
 4005358:	d811883a 	mov	r8,sp
 400535c:	1c07883a 	add	r3,r3,r16
 4005360:	d8c02415 	stw	r3,144(sp)
 4005364:	a0800007 	ldb	r2,0(r20)
 4005368:	1002e026 	beq	r2,zero,4005eec <___vfiprintf_internal_r+0xcc8>
 400536c:	a5800044 	addi	r22,r20,1
 4005370:	a0c00047 	ldb	r3,1(r20)
 4005374:	d8001d85 	stb	zero,118(sp)
 4005378:	0027883a 	mov	r19,zero
 400537c:	d8002305 	stb	zero,140(sp)
 4005380:	043fffc4 	movi	r16,-1
 4005384:	d8002515 	stw	zero,148(sp)
 4005388:	0023883a 	mov	r17,zero
 400538c:	05001604 	movi	r20,88
 4005390:	05400244 	movi	r21,9
 4005394:	402f883a 	mov	r23,r8
 4005398:	b5800044 	addi	r22,r22,1
 400539c:	18bff804 	addi	r2,r3,-32
 40053a0:	a0827736 	bltu	r20,r2,4005d80 <___vfiprintf_internal_r+0xb5c>
 40053a4:	100490ba 	slli	r2,r2,2
 40053a8:	01010034 	movhi	r4,1024
 40053ac:	2114ef04 	addi	r4,r4,21436
 40053b0:	1105883a 	add	r2,r2,r4
 40053b4:	10800017 	ldw	r2,0(r2)
 40053b8:	1000683a 	jmp	r2
 40053bc:	04005a80 	call	4005a8 <__reset-0x3bffa58>
 40053c0:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40053c4:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40053c8:	04005a9c 	xori	r16,zero,362
 40053cc:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40053d0:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40053d4:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40053d8:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40053dc:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40053e0:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40053e4:	04005ca4 	muli	r16,zero,370
 40053e8:	04005cc8 	cmpgei	r16,zero,371
 40053ec:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40053f0:	040055c0 	call	40055c <__reset-0x3bffaa4>
 40053f4:	04005cdc 	xori	r16,zero,371
 40053f8:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40053fc:	04005aa8 	cmpgeui	r16,zero,362
 4005400:	04005ab4 	movhi	r16,362
 4005404:	04005ab4 	movhi	r16,362
 4005408:	04005ab4 	movhi	r16,362
 400540c:	04005ab4 	movhi	r16,362
 4005410:	04005ab4 	movhi	r16,362
 4005414:	04005ab4 	movhi	r16,362
 4005418:	04005ab4 	movhi	r16,362
 400541c:	04005ab4 	movhi	r16,362
 4005420:	04005ab4 	movhi	r16,362
 4005424:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005428:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 400542c:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005430:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005434:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005438:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 400543c:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005440:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005444:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005448:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 400544c:	04005af4 	movhi	r16,363
 4005450:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005454:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005458:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 400545c:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005460:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005464:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005468:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 400546c:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005470:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005474:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005478:	04005b30 	cmpltui	r16,zero,364
 400547c:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005480:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005484:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005488:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 400548c:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005490:	04005b8c 	andi	r16,zero,366
 4005494:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005498:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 400549c:	04005c00 	call	4005c0 <__reset-0x3bffa40>
 40054a0:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054a4:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054a8:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054ac:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054b0:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054b4:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054b8:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054bc:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054c0:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054c4:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054c8:	040059a8 	cmpgeui	r16,zero,358
 40054cc:	040059d8 	cmpnei	r16,zero,359
 40054d0:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054d4:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054d8:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054dc:	04005d28 	cmpgeui	r16,zero,372
 40054e0:	040059d8 	cmpnei	r16,zero,359
 40054e4:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054e8:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054ec:	04005880 	call	400588 <__reset-0x3bffa78>
 40054f0:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 40054f4:	04005894 	movui	r16,354
 40054f8:	040058cc 	andi	r16,zero,355
 40054fc:	040055cc 	andi	r16,zero,343
 4005500:	04005874 	movhi	r16,353
 4005504:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005508:	04005c40 	call	4005c4 <__reset-0x3bffa3c>
 400550c:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005510:	04005c8c 	andi	r16,zero,370
 4005514:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 4005518:	04005d80 	call	4005d8 <__reset-0x3bffa28>
 400551c:	04005950 	cmplti	r16,zero,357
 4005520:	42000204 	addi	r8,r8,8
 4005524:	d8c02417 	ldw	r3,144(sp)
 4005528:	1c07883a 	add	r3,r3,r16
 400552c:	d8c02415 	stw	r3,144(sp)
 4005530:	003f8c06 	br	4005364 <__alt_data_end+0xfc005364>
 4005534:	d9402017 	ldw	r5,128(sp)
 4005538:	d9002117 	ldw	r4,132(sp)
 400553c:	40068080 	call	4006808 <__swsetup_r>
 4005540:	1003c11e 	bne	r2,zero,4006448 <___vfiprintf_internal_r+0x1224>
 4005544:	d9402017 	ldw	r5,128(sp)
 4005548:	00c00284 	movi	r3,10
 400554c:	2880030b 	ldhu	r2,12(r5)
 4005550:	1080068c 	andi	r2,r2,26
 4005554:	10ff581e 	bne	r2,r3,40052b8 <__alt_data_end+0xfc0052b8>
 4005558:	d8c02017 	ldw	r3,128(sp)
 400555c:	1880038f 	ldh	r2,14(r3)
 4005560:	103f5516 	blt	r2,zero,40052b8 <__alt_data_end+0xfc0052b8>
 4005564:	d9c02217 	ldw	r7,136(sp)
 4005568:	d9002117 	ldw	r4,132(sp)
 400556c:	a80d883a 	mov	r6,r21
 4005570:	180b883a 	mov	r5,r3
 4005574:	400674c0 	call	400674c <__sbprintf>
 4005578:	dfc03517 	ldw	ra,212(sp)
 400557c:	df003417 	ldw	fp,208(sp)
 4005580:	ddc03317 	ldw	r23,204(sp)
 4005584:	dd803217 	ldw	r22,200(sp)
 4005588:	dd403117 	ldw	r21,196(sp)
 400558c:	dd003017 	ldw	r20,192(sp)
 4005590:	dcc02f17 	ldw	r19,188(sp)
 4005594:	dc802e17 	ldw	r18,184(sp)
 4005598:	dc402d17 	ldw	r17,180(sp)
 400559c:	dc002c17 	ldw	r16,176(sp)
 40055a0:	dec03604 	addi	sp,sp,216
 40055a4:	f800283a 	ret
 40055a8:	4006f640 	call	4006f64 <__sinit>
 40055ac:	003f2f06 	br	400526c <__alt_data_end+0xfc00526c>
 40055b0:	d8c02517 	ldw	r3,148(sp)
 40055b4:	d8802215 	stw	r2,136(sp)
 40055b8:	00c7c83a 	sub	r3,zero,r3
 40055bc:	d8c02515 	stw	r3,148(sp)
 40055c0:	8c400114 	ori	r17,r17,4
 40055c4:	b0c00007 	ldb	r3,0(r22)
 40055c8:	003f7306 	br	4005398 <__alt_data_end+0xfc005398>
 40055cc:	00800c04 	movi	r2,48
 40055d0:	d9402217 	ldw	r5,136(sp)
 40055d4:	d8801d05 	stb	r2,116(sp)
 40055d8:	00801e04 	movi	r2,120
 40055dc:	d8801d45 	stb	r2,117(sp)
 40055e0:	d8001d85 	stb	zero,118(sp)
 40055e4:	b811883a 	mov	r8,r23
 40055e8:	28c00104 	addi	r3,r5,4
 40055ec:	2cc00017 	ldw	r19,0(r5)
 40055f0:	0029883a 	mov	r20,zero
 40055f4:	88800094 	ori	r2,r17,2
 40055f8:	80032516 	blt	r16,zero,4006290 <___vfiprintf_internal_r+0x106c>
 40055fc:	00bfdfc4 	movi	r2,-129
 4005600:	88a2703a 	and	r17,r17,r2
 4005604:	d8c02215 	stw	r3,136(sp)
 4005608:	8c400094 	ori	r17,r17,2
 400560c:	98032a1e 	bne	r19,zero,40062b8 <___vfiprintf_internal_r+0x1094>
 4005610:	00810074 	movhi	r2,1025
 4005614:	10b56d04 	addi	r2,r2,-10828
 4005618:	d8802615 	stw	r2,152(sp)
 400561c:	002b883a 	mov	r21,zero
 4005620:	8001741e 	bne	r16,zero,4005bf4 <___vfiprintf_internal_r+0x9d0>
 4005624:	0021883a 	mov	r16,zero
 4005628:	0029883a 	mov	r20,zero
 400562c:	ddc01a04 	addi	r23,sp,104
 4005630:	8027883a 	mov	r19,r16
 4005634:	8500010e 	bge	r16,r20,400563c <___vfiprintf_internal_r+0x418>
 4005638:	a027883a 	mov	r19,r20
 400563c:	ad403fcc 	andi	r21,r21,255
 4005640:	ad40201c 	xori	r21,r21,128
 4005644:	ad7fe004 	addi	r21,r21,-128
 4005648:	a8000126 	beq	r21,zero,4005650 <___vfiprintf_internal_r+0x42c>
 400564c:	9cc00044 	addi	r19,r19,1
 4005650:	89c0008c 	andi	r7,r17,2
 4005654:	38000126 	beq	r7,zero,400565c <___vfiprintf_internal_r+0x438>
 4005658:	9cc00084 	addi	r19,r19,2
 400565c:	88c0210c 	andi	r3,r17,132
 4005660:	1801dd1e 	bne	r3,zero,4005dd8 <___vfiprintf_internal_r+0xbb4>
 4005664:	d9402517 	ldw	r5,148(sp)
 4005668:	2cebc83a 	sub	r21,r5,r19
 400566c:	0541da0e 	bge	zero,r21,4005dd8 <___vfiprintf_internal_r+0xbb4>
 4005670:	07000404 	movi	fp,16
 4005674:	d8801c17 	ldw	r2,112(sp)
 4005678:	e543be0e 	bge	fp,r21,4006574 <___vfiprintf_internal_r+0x1350>
 400567c:	01410074 	movhi	r5,1025
 4005680:	297577c4 	addi	r5,r5,-10785
 4005684:	dc002715 	stw	r16,156(sp)
 4005688:	d9801b17 	ldw	r6,108(sp)
 400568c:	a821883a 	mov	r16,r21
 4005690:	d9402315 	stw	r5,140(sp)
 4005694:	028001c4 	movi	r10,7
 4005698:	d9c02915 	stw	r7,164(sp)
 400569c:	182b883a 	mov	r21,r3
 40056a0:	00000506 	br	40056b8 <___vfiprintf_internal_r+0x494>
 40056a4:	31000084 	addi	r4,r6,2
 40056a8:	42000204 	addi	r8,r8,8
 40056ac:	180d883a 	mov	r6,r3
 40056b0:	843ffc04 	addi	r16,r16,-16
 40056b4:	e4000f0e 	bge	fp,r16,40056f4 <___vfiprintf_internal_r+0x4d0>
 40056b8:	01010074 	movhi	r4,1025
 40056bc:	10800404 	addi	r2,r2,16
 40056c0:	30c00044 	addi	r3,r6,1
 40056c4:	213577c4 	addi	r4,r4,-10785
 40056c8:	41000015 	stw	r4,0(r8)
 40056cc:	47000115 	stw	fp,4(r8)
 40056d0:	d8801c15 	stw	r2,112(sp)
 40056d4:	d8c01b15 	stw	r3,108(sp)
 40056d8:	50fff20e 	bge	r10,r3,40056a4 <__alt_data_end+0xfc0056a4>
 40056dc:	1001b21e 	bne	r2,zero,4005da8 <___vfiprintf_internal_r+0xb84>
 40056e0:	843ffc04 	addi	r16,r16,-16
 40056e4:	000d883a 	mov	r6,zero
 40056e8:	01000044 	movi	r4,1
 40056ec:	d811883a 	mov	r8,sp
 40056f0:	e43ff116 	blt	fp,r16,40056b8 <__alt_data_end+0xfc0056b8>
 40056f4:	a807883a 	mov	r3,r21
 40056f8:	d9c02917 	ldw	r7,164(sp)
 40056fc:	802b883a 	mov	r21,r16
 4005700:	dc002717 	ldw	r16,156(sp)
 4005704:	d9402317 	ldw	r5,140(sp)
 4005708:	a885883a 	add	r2,r21,r2
 400570c:	45400115 	stw	r21,4(r8)
 4005710:	41400015 	stw	r5,0(r8)
 4005714:	d8801c15 	stw	r2,112(sp)
 4005718:	d9001b15 	stw	r4,108(sp)
 400571c:	014001c4 	movi	r5,7
 4005720:	29026216 	blt	r5,r4,40060ac <___vfiprintf_internal_r+0xe88>
 4005724:	d9801d87 	ldb	r6,118(sp)
 4005728:	42000204 	addi	r8,r8,8
 400572c:	21400044 	addi	r5,r4,1
 4005730:	3001ae1e 	bne	r6,zero,4005dec <___vfiprintf_internal_r+0xbc8>
 4005734:	3801bb26 	beq	r7,zero,4005e24 <___vfiprintf_internal_r+0xc00>
 4005738:	d9001d04 	addi	r4,sp,116
 400573c:	10800084 	addi	r2,r2,2
 4005740:	41000015 	stw	r4,0(r8)
 4005744:	01000084 	movi	r4,2
 4005748:	41000115 	stw	r4,4(r8)
 400574c:	d8801c15 	stw	r2,112(sp)
 4005750:	d9401b15 	stw	r5,108(sp)
 4005754:	010001c4 	movi	r4,7
 4005758:	2142680e 	bge	r4,r5,40060fc <___vfiprintf_internal_r+0xed8>
 400575c:	1002b11e 	bne	r2,zero,4006224 <___vfiprintf_internal_r+0x1000>
 4005760:	01802004 	movi	r6,128
 4005764:	01400044 	movi	r5,1
 4005768:	0009883a 	mov	r4,zero
 400576c:	d811883a 	mov	r8,sp
 4005770:	1981ae1e 	bne	r3,r6,4005e2c <___vfiprintf_internal_r+0xc08>
 4005774:	d8c02517 	ldw	r3,148(sp)
 4005778:	1cf9c83a 	sub	fp,r3,r19
 400577c:	0701ab0e 	bge	zero,fp,4005e2c <___vfiprintf_internal_r+0xc08>
 4005780:	05400404 	movi	r21,16
 4005784:	af03a90e 	bge	r21,fp,400662c <___vfiprintf_internal_r+0x1408>
 4005788:	01410074 	movhi	r5,1025
 400578c:	297573c4 	addi	r5,r5,-10801
 4005790:	d9402315 	stw	r5,140(sp)
 4005794:	01c001c4 	movi	r7,7
 4005798:	00000506 	br	40057b0 <___vfiprintf_internal_r+0x58c>
 400579c:	21800084 	addi	r6,r4,2
 40057a0:	42000204 	addi	r8,r8,8
 40057a4:	1809883a 	mov	r4,r3
 40057a8:	e73ffc04 	addi	fp,fp,-16
 40057ac:	af000d0e 	bge	r21,fp,40057e4 <___vfiprintf_internal_r+0x5c0>
 40057b0:	10800404 	addi	r2,r2,16
 40057b4:	20c00044 	addi	r3,r4,1
 40057b8:	44800015 	stw	r18,0(r8)
 40057bc:	45400115 	stw	r21,4(r8)
 40057c0:	d8801c15 	stw	r2,112(sp)
 40057c4:	d8c01b15 	stw	r3,108(sp)
 40057c8:	38fff40e 	bge	r7,r3,400579c <__alt_data_end+0xfc00579c>
 40057cc:	10022b1e 	bne	r2,zero,400607c <___vfiprintf_internal_r+0xe58>
 40057d0:	e73ffc04 	addi	fp,fp,-16
 40057d4:	01800044 	movi	r6,1
 40057d8:	0009883a 	mov	r4,zero
 40057dc:	d811883a 	mov	r8,sp
 40057e0:	af3ff316 	blt	r21,fp,40057b0 <__alt_data_end+0xfc0057b0>
 40057e4:	d8c02317 	ldw	r3,140(sp)
 40057e8:	1705883a 	add	r2,r2,fp
 40057ec:	47000115 	stw	fp,4(r8)
 40057f0:	40c00015 	stw	r3,0(r8)
 40057f4:	d8801c15 	stw	r2,112(sp)
 40057f8:	d9801b15 	stw	r6,108(sp)
 40057fc:	00c001c4 	movi	r3,7
 4005800:	19829416 	blt	r3,r6,4006254 <___vfiprintf_internal_r+0x1030>
 4005804:	8521c83a 	sub	r16,r16,r20
 4005808:	42000204 	addi	r8,r8,8
 400580c:	31400044 	addi	r5,r6,1
 4005810:	3009883a 	mov	r4,r6
 4005814:	04018716 	blt	zero,r16,4005e34 <___vfiprintf_internal_r+0xc10>
 4005818:	a085883a 	add	r2,r20,r2
 400581c:	45c00015 	stw	r23,0(r8)
 4005820:	45000115 	stw	r20,4(r8)
 4005824:	d8801c15 	stw	r2,112(sp)
 4005828:	d9401b15 	stw	r5,108(sp)
 400582c:	00c001c4 	movi	r3,7
 4005830:	1941c20e 	bge	r3,r5,4005f3c <___vfiprintf_internal_r+0xd18>
 4005834:	1002531e 	bne	r2,zero,4006184 <___vfiprintf_internal_r+0xf60>
 4005838:	d8001b15 	stw	zero,108(sp)
 400583c:	8c40010c 	andi	r17,r17,4
 4005840:	88023226 	beq	r17,zero,400610c <___vfiprintf_internal_r+0xee8>
 4005844:	d9002517 	ldw	r4,148(sp)
 4005848:	24e3c83a 	sub	r17,r4,r19
 400584c:	04432916 	blt	zero,r17,40064f4 <___vfiprintf_internal_r+0x12d0>
 4005850:	d8802517 	ldw	r2,148(sp)
 4005854:	14c0010e 	bge	r2,r19,400585c <___vfiprintf_internal_r+0x638>
 4005858:	9805883a 	mov	r2,r19
 400585c:	d8c02417 	ldw	r3,144(sp)
 4005860:	1887883a 	add	r3,r3,r2
 4005864:	d8c02415 	stw	r3,144(sp)
 4005868:	d8001b15 	stw	zero,108(sp)
 400586c:	d811883a 	mov	r8,sp
 4005870:	003ea006 	br	40052f4 <__alt_data_end+0xfc0052f4>
 4005874:	8c400814 	ori	r17,r17,32
 4005878:	b0c00007 	ldb	r3,0(r22)
 400587c:	003ec606 	br	4005398 <__alt_data_end+0xfc005398>
 4005880:	b0c00007 	ldb	r3,0(r22)
 4005884:	00801b04 	movi	r2,108
 4005888:	18832026 	beq	r3,r2,400650c <___vfiprintf_internal_r+0x12e8>
 400588c:	8c400414 	ori	r17,r17,16
 4005890:	003ec106 	br	4005398 <__alt_data_end+0xfc005398>
 4005894:	9cc03fcc 	andi	r19,r19,255
 4005898:	b811883a 	mov	r8,r23
 400589c:	9803981e 	bne	r19,zero,4006700 <___vfiprintf_internal_r+0x14dc>
 40058a0:	8880080c 	andi	r2,r17,32
 40058a4:	1002be26 	beq	r2,zero,40063a0 <___vfiprintf_internal_r+0x117c>
 40058a8:	d9002217 	ldw	r4,136(sp)
 40058ac:	d9402417 	ldw	r5,144(sp)
 40058b0:	20800017 	ldw	r2,0(r4)
 40058b4:	2807d7fa 	srai	r3,r5,31
 40058b8:	21000104 	addi	r4,r4,4
 40058bc:	d9002215 	stw	r4,136(sp)
 40058c0:	11400015 	stw	r5,0(r2)
 40058c4:	10c00115 	stw	r3,4(r2)
 40058c8:	003e8a06 	br	40052f4 <__alt_data_end+0xfc0052f4>
 40058cc:	9cc03fcc 	andi	r19,r19,255
 40058d0:	b811883a 	mov	r8,r23
 40058d4:	9803871e 	bne	r19,zero,40066f4 <___vfiprintf_internal_r+0x14d0>
 40058d8:	8880080c 	andi	r2,r17,32
 40058dc:	10009a26 	beq	r2,zero,4005b48 <___vfiprintf_internal_r+0x924>
 40058e0:	d9002217 	ldw	r4,136(sp)
 40058e4:	d8001d85 	stb	zero,118(sp)
 40058e8:	20800204 	addi	r2,r4,8
 40058ec:	24c00017 	ldw	r19,0(r4)
 40058f0:	25000117 	ldw	r20,4(r4)
 40058f4:	8002a416 	blt	r16,zero,4006388 <___vfiprintf_internal_r+0x1164>
 40058f8:	013fdfc4 	movi	r4,-129
 40058fc:	9d06b03a 	or	r3,r19,r20
 4005900:	d8802215 	stw	r2,136(sp)
 4005904:	8922703a 	and	r17,r17,r4
 4005908:	18009b26 	beq	r3,zero,4005b78 <___vfiprintf_internal_r+0x954>
 400590c:	002b883a 	mov	r21,zero
 4005910:	ddc01a04 	addi	r23,sp,104
 4005914:	9806d0fa 	srli	r3,r19,3
 4005918:	a008977a 	slli	r4,r20,29
 400591c:	a028d0fa 	srli	r20,r20,3
 4005920:	9cc001cc 	andi	r19,r19,7
 4005924:	98800c04 	addi	r2,r19,48
 4005928:	bdffffc4 	addi	r23,r23,-1
 400592c:	20e6b03a 	or	r19,r4,r3
 4005930:	b8800005 	stb	r2,0(r23)
 4005934:	9d06b03a 	or	r3,r19,r20
 4005938:	183ff61e 	bne	r3,zero,4005914 <__alt_data_end+0xfc005914>
 400593c:	88c0004c 	andi	r3,r17,1
 4005940:	18021f1e 	bne	r3,zero,40061c0 <___vfiprintf_internal_r+0xf9c>
 4005944:	d9401e17 	ldw	r5,120(sp)
 4005948:	2de9c83a 	sub	r20,r5,r23
 400594c:	003f3806 	br	4005630 <__alt_data_end+0xfc005630>
 4005950:	9cc03fcc 	andi	r19,r19,255
 4005954:	b811883a 	mov	r8,r23
 4005958:	98034f1e 	bne	r19,zero,4006698 <___vfiprintf_internal_r+0x1474>
 400595c:	00810074 	movhi	r2,1025
 4005960:	10b56d04 	addi	r2,r2,-10828
 4005964:	d8802615 	stw	r2,152(sp)
 4005968:	8880080c 	andi	r2,r17,32
 400596c:	1000ac26 	beq	r2,zero,4005c20 <___vfiprintf_internal_r+0x9fc>
 4005970:	d9002217 	ldw	r4,136(sp)
 4005974:	24c00017 	ldw	r19,0(r4)
 4005978:	25000117 	ldw	r20,4(r4)
 400597c:	21000204 	addi	r4,r4,8
 4005980:	d9002215 	stw	r4,136(sp)
 4005984:	8880004c 	andi	r2,r17,1
 4005988:	1001e726 	beq	r2,zero,4006128 <___vfiprintf_internal_r+0xf04>
 400598c:	9d04b03a 	or	r2,r19,r20
 4005990:	10025c1e 	bne	r2,zero,4006304 <___vfiprintf_internal_r+0x10e0>
 4005994:	d8001d85 	stb	zero,118(sp)
 4005998:	80024416 	blt	r16,zero,40062ac <___vfiprintf_internal_r+0x1088>
 400599c:	00bfdfc4 	movi	r2,-129
 40059a0:	88a2703a 	and	r17,r17,r2
 40059a4:	003f1d06 	br	400561c <__alt_data_end+0xfc00561c>
 40059a8:	d8c02217 	ldw	r3,136(sp)
 40059ac:	04c00044 	movi	r19,1
 40059b0:	b811883a 	mov	r8,r23
 40059b4:	18800017 	ldw	r2,0(r3)
 40059b8:	18c00104 	addi	r3,r3,4
 40059bc:	d8001d85 	stb	zero,118(sp)
 40059c0:	d8801005 	stb	r2,64(sp)
 40059c4:	d8c02215 	stw	r3,136(sp)
 40059c8:	9829883a 	mov	r20,r19
 40059cc:	ddc01004 	addi	r23,sp,64
 40059d0:	0021883a 	mov	r16,zero
 40059d4:	003f1e06 	br	4005650 <__alt_data_end+0xfc005650>
 40059d8:	9cc03fcc 	andi	r19,r19,255
 40059dc:	b811883a 	mov	r8,r23
 40059e0:	9803331e 	bne	r19,zero,40066b0 <___vfiprintf_internal_r+0x148c>
 40059e4:	8880080c 	andi	r2,r17,32
 40059e8:	10004826 	beq	r2,zero,4005b0c <___vfiprintf_internal_r+0x8e8>
 40059ec:	d9002217 	ldw	r4,136(sp)
 40059f0:	20800117 	ldw	r2,4(r4)
 40059f4:	24c00017 	ldw	r19,0(r4)
 40059f8:	21000204 	addi	r4,r4,8
 40059fc:	d9002215 	stw	r4,136(sp)
 4005a00:	1029883a 	mov	r20,r2
 4005a04:	10024c16 	blt	r2,zero,4006338 <___vfiprintf_internal_r+0x1114>
 4005a08:	dd401d83 	ldbu	r21,118(sp)
 4005a0c:	80007116 	blt	r16,zero,4005bd4 <___vfiprintf_internal_r+0x9b0>
 4005a10:	00ffdfc4 	movi	r3,-129
 4005a14:	9d04b03a 	or	r2,r19,r20
 4005a18:	88e2703a 	and	r17,r17,r3
 4005a1c:	1000d126 	beq	r2,zero,4005d64 <___vfiprintf_internal_r+0xb40>
 4005a20:	a0023526 	beq	r20,zero,40062f8 <___vfiprintf_internal_r+0x10d4>
 4005a24:	ddc01a04 	addi	r23,sp,104
 4005a28:	4039883a 	mov	fp,r8
 4005a2c:	9809883a 	mov	r4,r19
 4005a30:	a00b883a 	mov	r5,r20
 4005a34:	01800284 	movi	r6,10
 4005a38:	000f883a 	mov	r7,zero
 4005a3c:	4009df00 	call	4009df0 <__umoddi3>
 4005a40:	10800c04 	addi	r2,r2,48
 4005a44:	bdffffc4 	addi	r23,r23,-1
 4005a48:	9809883a 	mov	r4,r19
 4005a4c:	a00b883a 	mov	r5,r20
 4005a50:	b8800005 	stb	r2,0(r23)
 4005a54:	01800284 	movi	r6,10
 4005a58:	000f883a 	mov	r7,zero
 4005a5c:	40097f40 	call	40097f4 <__udivdi3>
 4005a60:	1027883a 	mov	r19,r2
 4005a64:	10c4b03a 	or	r2,r2,r3
 4005a68:	1829883a 	mov	r20,r3
 4005a6c:	103fef1e 	bne	r2,zero,4005a2c <__alt_data_end+0xfc005a2c>
 4005a70:	d9001e17 	ldw	r4,120(sp)
 4005a74:	e011883a 	mov	r8,fp
 4005a78:	25e9c83a 	sub	r20,r4,r23
 4005a7c:	003eec06 	br	4005630 <__alt_data_end+0xfc005630>
 4005a80:	d8802307 	ldb	r2,140(sp)
 4005a84:	1002361e 	bne	r2,zero,4006360 <___vfiprintf_internal_r+0x113c>
 4005a88:	00c00804 	movi	r3,32
 4005a8c:	d8c02305 	stb	r3,140(sp)
 4005a90:	04c00044 	movi	r19,1
 4005a94:	b0c00007 	ldb	r3,0(r22)
 4005a98:	003e3f06 	br	4005398 <__alt_data_end+0xfc005398>
 4005a9c:	8c400054 	ori	r17,r17,1
 4005aa0:	b0c00007 	ldb	r3,0(r22)
 4005aa4:	003e3c06 	br	4005398 <__alt_data_end+0xfc005398>
 4005aa8:	8c402014 	ori	r17,r17,128
 4005aac:	b0c00007 	ldb	r3,0(r22)
 4005ab0:	003e3906 	br	4005398 <__alt_data_end+0xfc005398>
 4005ab4:	dc002715 	stw	r16,156(sp)
 4005ab8:	d8002515 	stw	zero,148(sp)
 4005abc:	1f3ff404 	addi	fp,r3,-48
 4005ac0:	0009883a 	mov	r4,zero
 4005ac4:	b021883a 	mov	r16,r22
 4005ac8:	01400284 	movi	r5,10
 4005acc:	400359c0 	call	400359c <__mulsi3>
 4005ad0:	80c00007 	ldb	r3,0(r16)
 4005ad4:	e089883a 	add	r4,fp,r2
 4005ad8:	b5800044 	addi	r22,r22,1
 4005adc:	1f3ff404 	addi	fp,r3,-48
 4005ae0:	b021883a 	mov	r16,r22
 4005ae4:	af3ff82e 	bgeu	r21,fp,4005ac8 <__alt_data_end+0xfc005ac8>
 4005ae8:	d9002515 	stw	r4,148(sp)
 4005aec:	dc002717 	ldw	r16,156(sp)
 4005af0:	003e2a06 	br	400539c <__alt_data_end+0xfc00539c>
 4005af4:	9cc03fcc 	andi	r19,r19,255
 4005af8:	b811883a 	mov	r8,r23
 4005afc:	9802e91e 	bne	r19,zero,40066a4 <___vfiprintf_internal_r+0x1480>
 4005b00:	8c400414 	ori	r17,r17,16
 4005b04:	8880080c 	andi	r2,r17,32
 4005b08:	103fb81e 	bne	r2,zero,40059ec <__alt_data_end+0xfc0059ec>
 4005b0c:	8880040c 	andi	r2,r17,16
 4005b10:	10022e26 	beq	r2,zero,40063cc <___vfiprintf_internal_r+0x11a8>
 4005b14:	d9402217 	ldw	r5,136(sp)
 4005b18:	2cc00017 	ldw	r19,0(r5)
 4005b1c:	29400104 	addi	r5,r5,4
 4005b20:	d9402215 	stw	r5,136(sp)
 4005b24:	9829d7fa 	srai	r20,r19,31
 4005b28:	a005883a 	mov	r2,r20
 4005b2c:	003fb506 	br	4005a04 <__alt_data_end+0xfc005a04>
 4005b30:	9cc03fcc 	andi	r19,r19,255
 4005b34:	b811883a 	mov	r8,r23
 4005b38:	9802fa1e 	bne	r19,zero,4006724 <___vfiprintf_internal_r+0x1500>
 4005b3c:	8c400414 	ori	r17,r17,16
 4005b40:	8880080c 	andi	r2,r17,32
 4005b44:	103f661e 	bne	r2,zero,40058e0 <__alt_data_end+0xfc0058e0>
 4005b48:	8880040c 	andi	r2,r17,16
 4005b4c:	10020626 	beq	r2,zero,4006368 <___vfiprintf_internal_r+0x1144>
 4005b50:	d9402217 	ldw	r5,136(sp)
 4005b54:	d8001d85 	stb	zero,118(sp)
 4005b58:	0029883a 	mov	r20,zero
 4005b5c:	28800104 	addi	r2,r5,4
 4005b60:	2cc00017 	ldw	r19,0(r5)
 4005b64:	80020816 	blt	r16,zero,4006388 <___vfiprintf_internal_r+0x1164>
 4005b68:	00ffdfc4 	movi	r3,-129
 4005b6c:	d8802215 	stw	r2,136(sp)
 4005b70:	88e2703a 	and	r17,r17,r3
 4005b74:	983f651e 	bne	r19,zero,400590c <__alt_data_end+0xfc00590c>
 4005b78:	002b883a 	mov	r21,zero
 4005b7c:	8002cf26 	beq	r16,zero,40066bc <___vfiprintf_internal_r+0x1498>
 4005b80:	0027883a 	mov	r19,zero
 4005b84:	0029883a 	mov	r20,zero
 4005b88:	003f6106 	br	4005910 <__alt_data_end+0xfc005910>
 4005b8c:	9cc03fcc 	andi	r19,r19,255
 4005b90:	b811883a 	mov	r8,r23
 4005b94:	9802e01e 	bne	r19,zero,4006718 <___vfiprintf_internal_r+0x14f4>
 4005b98:	8c400414 	ori	r17,r17,16
 4005b9c:	8880080c 	andi	r2,r17,32
 4005ba0:	1000641e 	bne	r2,zero,4005d34 <___vfiprintf_internal_r+0xb10>
 4005ba4:	8880040c 	andi	r2,r17,16
 4005ba8:	1001c81e 	bne	r2,zero,40062cc <___vfiprintf_internal_r+0x10a8>
 4005bac:	8880100c 	andi	r2,r17,64
 4005bb0:	d8001d85 	stb	zero,118(sp)
 4005bb4:	1002281e 	bne	r2,zero,4006458 <___vfiprintf_internal_r+0x1234>
 4005bb8:	d9002217 	ldw	r4,136(sp)
 4005bbc:	0029883a 	mov	r20,zero
 4005bc0:	20800104 	addi	r2,r4,4
 4005bc4:	24c00017 	ldw	r19,0(r4)
 4005bc8:	8001c60e 	bge	r16,zero,40062e4 <___vfiprintf_internal_r+0x10c0>
 4005bcc:	d8802215 	stw	r2,136(sp)
 4005bd0:	002b883a 	mov	r21,zero
 4005bd4:	9d04b03a 	or	r2,r19,r20
 4005bd8:	103f911e 	bne	r2,zero,4005a20 <__alt_data_end+0xfc005a20>
 4005bdc:	00800044 	movi	r2,1
 4005be0:	10803fcc 	andi	r2,r2,255
 4005be4:	00c00044 	movi	r3,1
 4005be8:	10c05f26 	beq	r2,r3,4005d68 <___vfiprintf_internal_r+0xb44>
 4005bec:	00c00084 	movi	r3,2
 4005bf0:	10ffe31e 	bne	r2,r3,4005b80 <__alt_data_end+0xfc005b80>
 4005bf4:	0027883a 	mov	r19,zero
 4005bf8:	0029883a 	mov	r20,zero
 4005bfc:	00015106 	br	4006144 <___vfiprintf_internal_r+0xf20>
 4005c00:	9cc03fcc 	andi	r19,r19,255
 4005c04:	b811883a 	mov	r8,r23
 4005c08:	9802c01e 	bne	r19,zero,400670c <___vfiprintf_internal_r+0x14e8>
 4005c0c:	01410074 	movhi	r5,1025
 4005c10:	29756804 	addi	r5,r5,-10848
 4005c14:	d9402615 	stw	r5,152(sp)
 4005c18:	8880080c 	andi	r2,r17,32
 4005c1c:	103f541e 	bne	r2,zero,4005970 <__alt_data_end+0xfc005970>
 4005c20:	8880040c 	andi	r2,r17,16
 4005c24:	1001f226 	beq	r2,zero,40063f0 <___vfiprintf_internal_r+0x11cc>
 4005c28:	d9402217 	ldw	r5,136(sp)
 4005c2c:	0029883a 	mov	r20,zero
 4005c30:	2cc00017 	ldw	r19,0(r5)
 4005c34:	29400104 	addi	r5,r5,4
 4005c38:	d9402215 	stw	r5,136(sp)
 4005c3c:	003f5106 	br	4005984 <__alt_data_end+0xfc005984>
 4005c40:	d8c02217 	ldw	r3,136(sp)
 4005c44:	b811883a 	mov	r8,r23
 4005c48:	d8001d85 	stb	zero,118(sp)
 4005c4c:	1dc00017 	ldw	r23,0(r3)
 4005c50:	1f000104 	addi	fp,r3,4
 4005c54:	b8025926 	beq	r23,zero,40065bc <___vfiprintf_internal_r+0x1398>
 4005c58:	80023316 	blt	r16,zero,4006528 <___vfiprintf_internal_r+0x1304>
 4005c5c:	800d883a 	mov	r6,r16
 4005c60:	000b883a 	mov	r5,zero
 4005c64:	b809883a 	mov	r4,r23
 4005c68:	da002a15 	stw	r8,168(sp)
 4005c6c:	40086e40 	call	40086e4 <memchr>
 4005c70:	da002a17 	ldw	r8,168(sp)
 4005c74:	10026826 	beq	r2,zero,4006618 <___vfiprintf_internal_r+0x13f4>
 4005c78:	15e9c83a 	sub	r20,r2,r23
 4005c7c:	dd401d83 	ldbu	r21,118(sp)
 4005c80:	df002215 	stw	fp,136(sp)
 4005c84:	0021883a 	mov	r16,zero
 4005c88:	003e6906 	br	4005630 <__alt_data_end+0xfc005630>
 4005c8c:	9cc03fcc 	andi	r19,r19,255
 4005c90:	b811883a 	mov	r8,r23
 4005c94:	983fc126 	beq	r19,zero,4005b9c <__alt_data_end+0xfc005b9c>
 4005c98:	d8c02303 	ldbu	r3,140(sp)
 4005c9c:	d8c01d85 	stb	r3,118(sp)
 4005ca0:	003fbe06 	br	4005b9c <__alt_data_end+0xfc005b9c>
 4005ca4:	d9002217 	ldw	r4,136(sp)
 4005ca8:	d9402217 	ldw	r5,136(sp)
 4005cac:	21000017 	ldw	r4,0(r4)
 4005cb0:	28800104 	addi	r2,r5,4
 4005cb4:	d9002515 	stw	r4,148(sp)
 4005cb8:	203e3d16 	blt	r4,zero,40055b0 <__alt_data_end+0xfc0055b0>
 4005cbc:	d8802215 	stw	r2,136(sp)
 4005cc0:	b0c00007 	ldb	r3,0(r22)
 4005cc4:	003db406 	br	4005398 <__alt_data_end+0xfc005398>
 4005cc8:	00c00ac4 	movi	r3,43
 4005ccc:	d8c02305 	stb	r3,140(sp)
 4005cd0:	04c00044 	movi	r19,1
 4005cd4:	b0c00007 	ldb	r3,0(r22)
 4005cd8:	003daf06 	br	4005398 <__alt_data_end+0xfc005398>
 4005cdc:	b0c00007 	ldb	r3,0(r22)
 4005ce0:	01000a84 	movi	r4,42
 4005ce4:	b4000044 	addi	r16,r22,1
 4005ce8:	19025e26 	beq	r3,r4,4006664 <___vfiprintf_internal_r+0x1440>
 4005cec:	1f3ff404 	addi	fp,r3,-48
 4005cf0:	0009883a 	mov	r4,zero
 4005cf4:	af025236 	bltu	r21,fp,4006640 <___vfiprintf_internal_r+0x141c>
 4005cf8:	01400284 	movi	r5,10
 4005cfc:	400359c0 	call	400359c <__mulsi3>
 4005d00:	80c00007 	ldb	r3,0(r16)
 4005d04:	1709883a 	add	r4,r2,fp
 4005d08:	85800044 	addi	r22,r16,1
 4005d0c:	1f3ff404 	addi	fp,r3,-48
 4005d10:	b021883a 	mov	r16,r22
 4005d14:	af3ff82e 	bgeu	r21,fp,4005cf8 <__alt_data_end+0xfc005cf8>
 4005d18:	2021883a 	mov	r16,r4
 4005d1c:	203d9f0e 	bge	r4,zero,400539c <__alt_data_end+0xfc00539c>
 4005d20:	043fffc4 	movi	r16,-1
 4005d24:	003d9d06 	br	400539c <__alt_data_end+0xfc00539c>
 4005d28:	8c401014 	ori	r17,r17,64
 4005d2c:	b0c00007 	ldb	r3,0(r22)
 4005d30:	003d9906 	br	4005398 <__alt_data_end+0xfc005398>
 4005d34:	d9002217 	ldw	r4,136(sp)
 4005d38:	d8001d85 	stb	zero,118(sp)
 4005d3c:	20c00204 	addi	r3,r4,8
 4005d40:	24c00017 	ldw	r19,0(r4)
 4005d44:	25000117 	ldw	r20,4(r4)
 4005d48:	8001e716 	blt	r16,zero,40064e8 <___vfiprintf_internal_r+0x12c4>
 4005d4c:	013fdfc4 	movi	r4,-129
 4005d50:	9d04b03a 	or	r2,r19,r20
 4005d54:	d8c02215 	stw	r3,136(sp)
 4005d58:	8922703a 	and	r17,r17,r4
 4005d5c:	002b883a 	mov	r21,zero
 4005d60:	103f2f1e 	bne	r2,zero,4005a20 <__alt_data_end+0xfc005a20>
 4005d64:	803e2f26 	beq	r16,zero,4005624 <__alt_data_end+0xfc005624>
 4005d68:	0027883a 	mov	r19,zero
 4005d6c:	9cc00c04 	addi	r19,r19,48
 4005d70:	dcc019c5 	stb	r19,103(sp)
 4005d74:	dd002817 	ldw	r20,160(sp)
 4005d78:	ddc019c4 	addi	r23,sp,103
 4005d7c:	003e2c06 	br	4005630 <__alt_data_end+0xfc005630>
 4005d80:	9cc03fcc 	andi	r19,r19,255
 4005d84:	b811883a 	mov	r8,r23
 4005d88:	9802571e 	bne	r19,zero,40066e8 <___vfiprintf_internal_r+0x14c4>
 4005d8c:	18005726 	beq	r3,zero,4005eec <___vfiprintf_internal_r+0xcc8>
 4005d90:	04c00044 	movi	r19,1
 4005d94:	d8c01005 	stb	r3,64(sp)
 4005d98:	d8001d85 	stb	zero,118(sp)
 4005d9c:	9829883a 	mov	r20,r19
 4005da0:	ddc01004 	addi	r23,sp,64
 4005da4:	003f0a06 	br	40059d0 <__alt_data_end+0xfc0059d0>
 4005da8:	d9402017 	ldw	r5,128(sp)
 4005dac:	d9002117 	ldw	r4,132(sp)
 4005db0:	d9801a04 	addi	r6,sp,104
 4005db4:	da802a15 	stw	r10,168(sp)
 4005db8:	40051100 	call	4005110 <__sprint_r.part.0>
 4005dbc:	da802a17 	ldw	r10,168(sp)
 4005dc0:	1000501e 	bne	r2,zero,4005f04 <___vfiprintf_internal_r+0xce0>
 4005dc4:	d9801b17 	ldw	r6,108(sp)
 4005dc8:	d8801c17 	ldw	r2,112(sp)
 4005dcc:	d811883a 	mov	r8,sp
 4005dd0:	31000044 	addi	r4,r6,1
 4005dd4:	003e3606 	br	40056b0 <__alt_data_end+0xfc0056b0>
 4005dd8:	d9001b17 	ldw	r4,108(sp)
 4005ddc:	d8801c17 	ldw	r2,112(sp)
 4005de0:	21400044 	addi	r5,r4,1
 4005de4:	d9801d87 	ldb	r6,118(sp)
 4005de8:	303e5226 	beq	r6,zero,4005734 <__alt_data_end+0xfc005734>
 4005dec:	01800044 	movi	r6,1
 4005df0:	d9001d84 	addi	r4,sp,118
 4005df4:	1185883a 	add	r2,r2,r6
 4005df8:	41000015 	stw	r4,0(r8)
 4005dfc:	41800115 	stw	r6,4(r8)
 4005e00:	d8801c15 	stw	r2,112(sp)
 4005e04:	d9401b15 	stw	r5,108(sp)
 4005e08:	010001c4 	movi	r4,7
 4005e0c:	2140b00e 	bge	r4,r5,40060d0 <___vfiprintf_internal_r+0xeac>
 4005e10:	1000f61e 	bne	r2,zero,40061ec <___vfiprintf_internal_r+0xfc8>
 4005e14:	3800b31e 	bne	r7,zero,40060e4 <___vfiprintf_internal_r+0xec0>
 4005e18:	0009883a 	mov	r4,zero
 4005e1c:	300b883a 	mov	r5,r6
 4005e20:	d811883a 	mov	r8,sp
 4005e24:	01802004 	movi	r6,128
 4005e28:	19be5226 	beq	r3,r6,4005774 <__alt_data_end+0xfc005774>
 4005e2c:	8521c83a 	sub	r16,r16,r20
 4005e30:	043e790e 	bge	zero,r16,4005818 <__alt_data_end+0xfc005818>
 4005e34:	05400404 	movi	r21,16
 4005e38:	ac01b00e 	bge	r21,r16,40064fc <___vfiprintf_internal_r+0x12d8>
 4005e3c:	01410074 	movhi	r5,1025
 4005e40:	297573c4 	addi	r5,r5,-10801
 4005e44:	d9402315 	stw	r5,140(sp)
 4005e48:	070001c4 	movi	fp,7
 4005e4c:	00000506 	br	4005e64 <___vfiprintf_internal_r+0xc40>
 4005e50:	21400084 	addi	r5,r4,2
 4005e54:	42000204 	addi	r8,r8,8
 4005e58:	1809883a 	mov	r4,r3
 4005e5c:	843ffc04 	addi	r16,r16,-16
 4005e60:	ac000d0e 	bge	r21,r16,4005e98 <___vfiprintf_internal_r+0xc74>
 4005e64:	10800404 	addi	r2,r2,16
 4005e68:	20c00044 	addi	r3,r4,1
 4005e6c:	44800015 	stw	r18,0(r8)
 4005e70:	45400115 	stw	r21,4(r8)
 4005e74:	d8801c15 	stw	r2,112(sp)
 4005e78:	d8c01b15 	stw	r3,108(sp)
 4005e7c:	e0fff40e 	bge	fp,r3,4005e50 <__alt_data_end+0xfc005e50>
 4005e80:	1000101e 	bne	r2,zero,4005ec4 <___vfiprintf_internal_r+0xca0>
 4005e84:	843ffc04 	addi	r16,r16,-16
 4005e88:	01400044 	movi	r5,1
 4005e8c:	0009883a 	mov	r4,zero
 4005e90:	d811883a 	mov	r8,sp
 4005e94:	ac3ff316 	blt	r21,r16,4005e64 <__alt_data_end+0xfc005e64>
 4005e98:	d8c02317 	ldw	r3,140(sp)
 4005e9c:	1405883a 	add	r2,r2,r16
 4005ea0:	44000115 	stw	r16,4(r8)
 4005ea4:	40c00015 	stw	r3,0(r8)
 4005ea8:	d8801c15 	stw	r2,112(sp)
 4005eac:	d9401b15 	stw	r5,108(sp)
 4005eb0:	00c001c4 	movi	r3,7
 4005eb4:	19401916 	blt	r3,r5,4005f1c <___vfiprintf_internal_r+0xcf8>
 4005eb8:	42000204 	addi	r8,r8,8
 4005ebc:	29400044 	addi	r5,r5,1
 4005ec0:	003e5506 	br	4005818 <__alt_data_end+0xfc005818>
 4005ec4:	d9402017 	ldw	r5,128(sp)
 4005ec8:	d9002117 	ldw	r4,132(sp)
 4005ecc:	d9801a04 	addi	r6,sp,104
 4005ed0:	40051100 	call	4005110 <__sprint_r.part.0>
 4005ed4:	10000b1e 	bne	r2,zero,4005f04 <___vfiprintf_internal_r+0xce0>
 4005ed8:	d9001b17 	ldw	r4,108(sp)
 4005edc:	d8801c17 	ldw	r2,112(sp)
 4005ee0:	d811883a 	mov	r8,sp
 4005ee4:	21400044 	addi	r5,r4,1
 4005ee8:	003fdc06 	br	4005e5c <__alt_data_end+0xfc005e5c>
 4005eec:	d8801c17 	ldw	r2,112(sp)
 4005ef0:	10000426 	beq	r2,zero,4005f04 <___vfiprintf_internal_r+0xce0>
 4005ef4:	d9402017 	ldw	r5,128(sp)
 4005ef8:	d9002117 	ldw	r4,132(sp)
 4005efc:	d9801a04 	addi	r6,sp,104
 4005f00:	40051100 	call	4005110 <__sprint_r.part.0>
 4005f04:	d9402017 	ldw	r5,128(sp)
 4005f08:	2880030b 	ldhu	r2,12(r5)
 4005f0c:	1080100c 	andi	r2,r2,64
 4005f10:	10014d1e 	bne	r2,zero,4006448 <___vfiprintf_internal_r+0x1224>
 4005f14:	d8802417 	ldw	r2,144(sp)
 4005f18:	003d9706 	br	4005578 <__alt_data_end+0xfc005578>
 4005f1c:	1000d21e 	bne	r2,zero,4006268 <___vfiprintf_internal_r+0x1044>
 4005f20:	00c00044 	movi	r3,1
 4005f24:	a005883a 	mov	r2,r20
 4005f28:	ddc00015 	stw	r23,0(sp)
 4005f2c:	dd000115 	stw	r20,4(sp)
 4005f30:	dd001c15 	stw	r20,112(sp)
 4005f34:	d8c01b15 	stw	r3,108(sp)
 4005f38:	d811883a 	mov	r8,sp
 4005f3c:	42000204 	addi	r8,r8,8
 4005f40:	8c40010c 	andi	r17,r17,4
 4005f44:	88004026 	beq	r17,zero,4006048 <___vfiprintf_internal_r+0xe24>
 4005f48:	d9002517 	ldw	r4,148(sp)
 4005f4c:	24e3c83a 	sub	r17,r4,r19
 4005f50:	04403d0e 	bge	zero,r17,4006048 <___vfiprintf_internal_r+0xe24>
 4005f54:	04000404 	movi	r16,16
 4005f58:	8441a90e 	bge	r16,r17,4006600 <___vfiprintf_internal_r+0x13dc>
 4005f5c:	00c10074 	movhi	r3,1025
 4005f60:	18f577c4 	addi	r3,r3,-10785
 4005f64:	d9001b17 	ldw	r4,108(sp)
 4005f68:	d8c02315 	stw	r3,140(sp)
 4005f6c:	050001c4 	movi	r20,7
 4005f70:	dd402117 	ldw	r21,132(sp)
 4005f74:	ddc02017 	ldw	r23,128(sp)
 4005f78:	00000506 	br	4005f90 <___vfiprintf_internal_r+0xd6c>
 4005f7c:	21400084 	addi	r5,r4,2
 4005f80:	42000204 	addi	r8,r8,8
 4005f84:	1809883a 	mov	r4,r3
 4005f88:	8c7ffc04 	addi	r17,r17,-16
 4005f8c:	84400f0e 	bge	r16,r17,4005fcc <___vfiprintf_internal_r+0xda8>
 4005f90:	01410074 	movhi	r5,1025
 4005f94:	10800404 	addi	r2,r2,16
 4005f98:	20c00044 	addi	r3,r4,1
 4005f9c:	297577c4 	addi	r5,r5,-10785
 4005fa0:	41400015 	stw	r5,0(r8)
 4005fa4:	44000115 	stw	r16,4(r8)
 4005fa8:	d8801c15 	stw	r2,112(sp)
 4005fac:	d8c01b15 	stw	r3,108(sp)
 4005fb0:	a0fff20e 	bge	r20,r3,4005f7c <__alt_data_end+0xfc005f7c>
 4005fb4:	1000141e 	bne	r2,zero,4006008 <___vfiprintf_internal_r+0xde4>
 4005fb8:	8c7ffc04 	addi	r17,r17,-16
 4005fbc:	01400044 	movi	r5,1
 4005fc0:	0009883a 	mov	r4,zero
 4005fc4:	d811883a 	mov	r8,sp
 4005fc8:	847ff116 	blt	r16,r17,4005f90 <__alt_data_end+0xfc005f90>
 4005fcc:	d8c02317 	ldw	r3,140(sp)
 4005fd0:	1445883a 	add	r2,r2,r17
 4005fd4:	44400115 	stw	r17,4(r8)
 4005fd8:	40c00015 	stw	r3,0(r8)
 4005fdc:	d8801c15 	stw	r2,112(sp)
 4005fe0:	d9401b15 	stw	r5,108(sp)
 4005fe4:	00c001c4 	movi	r3,7
 4005fe8:	1940170e 	bge	r3,r5,4006048 <___vfiprintf_internal_r+0xe24>
 4005fec:	1000101e 	bne	r2,zero,4006030 <___vfiprintf_internal_r+0xe0c>
 4005ff0:	d8802517 	ldw	r2,148(sp)
 4005ff4:	14c11616 	blt	r2,r19,4006450 <___vfiprintf_internal_r+0x122c>
 4005ff8:	d9002417 	ldw	r4,144(sp)
 4005ffc:	2089883a 	add	r4,r4,r2
 4006000:	d9002415 	stw	r4,144(sp)
 4006004:	003e1806 	br	4005868 <__alt_data_end+0xfc005868>
 4006008:	d9801a04 	addi	r6,sp,104
 400600c:	b80b883a 	mov	r5,r23
 4006010:	a809883a 	mov	r4,r21
 4006014:	40051100 	call	4005110 <__sprint_r.part.0>
 4006018:	103fba1e 	bne	r2,zero,4005f04 <__alt_data_end+0xfc005f04>
 400601c:	d9001b17 	ldw	r4,108(sp)
 4006020:	d8801c17 	ldw	r2,112(sp)
 4006024:	d811883a 	mov	r8,sp
 4006028:	21400044 	addi	r5,r4,1
 400602c:	003fd606 	br	4005f88 <__alt_data_end+0xfc005f88>
 4006030:	d9402017 	ldw	r5,128(sp)
 4006034:	d9002117 	ldw	r4,132(sp)
 4006038:	d9801a04 	addi	r6,sp,104
 400603c:	40051100 	call	4005110 <__sprint_r.part.0>
 4006040:	103fb01e 	bne	r2,zero,4005f04 <__alt_data_end+0xfc005f04>
 4006044:	d8801c17 	ldw	r2,112(sp)
 4006048:	d8c02517 	ldw	r3,148(sp)
 400604c:	1cc0010e 	bge	r3,r19,4006054 <___vfiprintf_internal_r+0xe30>
 4006050:	9807883a 	mov	r3,r19
 4006054:	d9002417 	ldw	r4,144(sp)
 4006058:	20c9883a 	add	r4,r4,r3
 400605c:	d9002415 	stw	r4,144(sp)
 4006060:	103e0126 	beq	r2,zero,4005868 <__alt_data_end+0xfc005868>
 4006064:	d9402017 	ldw	r5,128(sp)
 4006068:	d9002117 	ldw	r4,132(sp)
 400606c:	d9801a04 	addi	r6,sp,104
 4006070:	40051100 	call	4005110 <__sprint_r.part.0>
 4006074:	103dfc26 	beq	r2,zero,4005868 <__alt_data_end+0xfc005868>
 4006078:	003fa206 	br	4005f04 <__alt_data_end+0xfc005f04>
 400607c:	d9402017 	ldw	r5,128(sp)
 4006080:	d9002117 	ldw	r4,132(sp)
 4006084:	d9801a04 	addi	r6,sp,104
 4006088:	d9c02b15 	stw	r7,172(sp)
 400608c:	40051100 	call	4005110 <__sprint_r.part.0>
 4006090:	d9c02b17 	ldw	r7,172(sp)
 4006094:	103f9b1e 	bne	r2,zero,4005f04 <__alt_data_end+0xfc005f04>
 4006098:	d9001b17 	ldw	r4,108(sp)
 400609c:	d8801c17 	ldw	r2,112(sp)
 40060a0:	d811883a 	mov	r8,sp
 40060a4:	21800044 	addi	r6,r4,1
 40060a8:	003dbf06 	br	40057a8 <__alt_data_end+0xfc0057a8>
 40060ac:	1000d81e 	bne	r2,zero,4006410 <___vfiprintf_internal_r+0x11ec>
 40060b0:	d9001d87 	ldb	r4,118(sp)
 40060b4:	20000a26 	beq	r4,zero,40060e0 <___vfiprintf_internal_r+0xebc>
 40060b8:	00800044 	movi	r2,1
 40060bc:	d9001d84 	addi	r4,sp,118
 40060c0:	100b883a 	mov	r5,r2
 40060c4:	d9000015 	stw	r4,0(sp)
 40060c8:	d8800115 	stw	r2,4(sp)
 40060cc:	d811883a 	mov	r8,sp
 40060d0:	2809883a 	mov	r4,r5
 40060d4:	42000204 	addi	r8,r8,8
 40060d8:	29400044 	addi	r5,r5,1
 40060dc:	003d9506 	br	4005734 <__alt_data_end+0xfc005734>
 40060e0:	3800fd26 	beq	r7,zero,40064d8 <___vfiprintf_internal_r+0x12b4>
 40060e4:	00800084 	movi	r2,2
 40060e8:	d9001d04 	addi	r4,sp,116
 40060ec:	d9000015 	stw	r4,0(sp)
 40060f0:	d8800115 	stw	r2,4(sp)
 40060f4:	01400044 	movi	r5,1
 40060f8:	d811883a 	mov	r8,sp
 40060fc:	2809883a 	mov	r4,r5
 4006100:	42000204 	addi	r8,r8,8
 4006104:	29400044 	addi	r5,r5,1
 4006108:	003f4606 	br	4005e24 <__alt_data_end+0xfc005e24>
 400610c:	d8802517 	ldw	r2,148(sp)
 4006110:	14c0010e 	bge	r2,r19,4006118 <___vfiprintf_internal_r+0xef4>
 4006114:	9805883a 	mov	r2,r19
 4006118:	d9402417 	ldw	r5,144(sp)
 400611c:	288b883a 	add	r5,r5,r2
 4006120:	d9402415 	stw	r5,144(sp)
 4006124:	003dd006 	br	4005868 <__alt_data_end+0xfc005868>
 4006128:	d8001d85 	stb	zero,118(sp)
 400612c:	80005d16 	blt	r16,zero,40062a4 <___vfiprintf_internal_r+0x1080>
 4006130:	00ffdfc4 	movi	r3,-129
 4006134:	9d04b03a 	or	r2,r19,r20
 4006138:	88e2703a 	and	r17,r17,r3
 400613c:	103d3726 	beq	r2,zero,400561c <__alt_data_end+0xfc00561c>
 4006140:	002b883a 	mov	r21,zero
 4006144:	d9002617 	ldw	r4,152(sp)
 4006148:	ddc01a04 	addi	r23,sp,104
 400614c:	988003cc 	andi	r2,r19,15
 4006150:	a006973a 	slli	r3,r20,28
 4006154:	2085883a 	add	r2,r4,r2
 4006158:	9826d13a 	srli	r19,r19,4
 400615c:	10800003 	ldbu	r2,0(r2)
 4006160:	a028d13a 	srli	r20,r20,4
 4006164:	bdffffc4 	addi	r23,r23,-1
 4006168:	1ce6b03a 	or	r19,r3,r19
 400616c:	b8800005 	stb	r2,0(r23)
 4006170:	9d04b03a 	or	r2,r19,r20
 4006174:	103ff51e 	bne	r2,zero,400614c <__alt_data_end+0xfc00614c>
 4006178:	d8801e17 	ldw	r2,120(sp)
 400617c:	15e9c83a 	sub	r20,r2,r23
 4006180:	003d2b06 	br	4005630 <__alt_data_end+0xfc005630>
 4006184:	d9402017 	ldw	r5,128(sp)
 4006188:	d9002117 	ldw	r4,132(sp)
 400618c:	d9801a04 	addi	r6,sp,104
 4006190:	40051100 	call	4005110 <__sprint_r.part.0>
 4006194:	103f5b1e 	bne	r2,zero,4005f04 <__alt_data_end+0xfc005f04>
 4006198:	d8801c17 	ldw	r2,112(sp)
 400619c:	d811883a 	mov	r8,sp
 40061a0:	003f6706 	br	4005f40 <__alt_data_end+0xfc005f40>
 40061a4:	d9402017 	ldw	r5,128(sp)
 40061a8:	d9002117 	ldw	r4,132(sp)
 40061ac:	d9801a04 	addi	r6,sp,104
 40061b0:	40051100 	call	4005110 <__sprint_r.part.0>
 40061b4:	103f531e 	bne	r2,zero,4005f04 <__alt_data_end+0xfc005f04>
 40061b8:	d811883a 	mov	r8,sp
 40061bc:	003cd906 	br	4005524 <__alt_data_end+0xfc005524>
 40061c0:	10803fcc 	andi	r2,r2,255
 40061c4:	1080201c 	xori	r2,r2,128
 40061c8:	10bfe004 	addi	r2,r2,-128
 40061cc:	00c00c04 	movi	r3,48
 40061d0:	10ffe926 	beq	r2,r3,4006178 <__alt_data_end+0xfc006178>
 40061d4:	b8ffffc5 	stb	r3,-1(r23)
 40061d8:	d8c01e17 	ldw	r3,120(sp)
 40061dc:	b8bfffc4 	addi	r2,r23,-1
 40061e0:	102f883a 	mov	r23,r2
 40061e4:	18a9c83a 	sub	r20,r3,r2
 40061e8:	003d1106 	br	4005630 <__alt_data_end+0xfc005630>
 40061ec:	d9402017 	ldw	r5,128(sp)
 40061f0:	d9002117 	ldw	r4,132(sp)
 40061f4:	d9801a04 	addi	r6,sp,104
 40061f8:	d8c02a15 	stw	r3,168(sp)
 40061fc:	d9c02b15 	stw	r7,172(sp)
 4006200:	40051100 	call	4005110 <__sprint_r.part.0>
 4006204:	d8c02a17 	ldw	r3,168(sp)
 4006208:	d9c02b17 	ldw	r7,172(sp)
 400620c:	103f3d1e 	bne	r2,zero,4005f04 <__alt_data_end+0xfc005f04>
 4006210:	d9001b17 	ldw	r4,108(sp)
 4006214:	d8801c17 	ldw	r2,112(sp)
 4006218:	d811883a 	mov	r8,sp
 400621c:	21400044 	addi	r5,r4,1
 4006220:	003d4406 	br	4005734 <__alt_data_end+0xfc005734>
 4006224:	d9402017 	ldw	r5,128(sp)
 4006228:	d9002117 	ldw	r4,132(sp)
 400622c:	d9801a04 	addi	r6,sp,104
 4006230:	d8c02a15 	stw	r3,168(sp)
 4006234:	40051100 	call	4005110 <__sprint_r.part.0>
 4006238:	d8c02a17 	ldw	r3,168(sp)
 400623c:	103f311e 	bne	r2,zero,4005f04 <__alt_data_end+0xfc005f04>
 4006240:	d9001b17 	ldw	r4,108(sp)
 4006244:	d8801c17 	ldw	r2,112(sp)
 4006248:	d811883a 	mov	r8,sp
 400624c:	21400044 	addi	r5,r4,1
 4006250:	003ef406 	br	4005e24 <__alt_data_end+0xfc005e24>
 4006254:	1000bd1e 	bne	r2,zero,400654c <___vfiprintf_internal_r+0x1328>
 4006258:	01400044 	movi	r5,1
 400625c:	0009883a 	mov	r4,zero
 4006260:	d811883a 	mov	r8,sp
 4006264:	003ef106 	br	4005e2c <__alt_data_end+0xfc005e2c>
 4006268:	d9402017 	ldw	r5,128(sp)
 400626c:	d9002117 	ldw	r4,132(sp)
 4006270:	d9801a04 	addi	r6,sp,104
 4006274:	40051100 	call	4005110 <__sprint_r.part.0>
 4006278:	103f221e 	bne	r2,zero,4005f04 <__alt_data_end+0xfc005f04>
 400627c:	d9401b17 	ldw	r5,108(sp)
 4006280:	d8801c17 	ldw	r2,112(sp)
 4006284:	d811883a 	mov	r8,sp
 4006288:	29400044 	addi	r5,r5,1
 400628c:	003d6206 	br	4005818 <__alt_data_end+0xfc005818>
 4006290:	01410074 	movhi	r5,1025
 4006294:	29756d04 	addi	r5,r5,-10828
 4006298:	d9402615 	stw	r5,152(sp)
 400629c:	d8c02215 	stw	r3,136(sp)
 40062a0:	1023883a 	mov	r17,r2
 40062a4:	9d04b03a 	or	r2,r19,r20
 40062a8:	103fa51e 	bne	r2,zero,4006140 <__alt_data_end+0xfc006140>
 40062ac:	002b883a 	mov	r21,zero
 40062b0:	00800084 	movi	r2,2
 40062b4:	003e4a06 	br	4005be0 <__alt_data_end+0xfc005be0>
 40062b8:	01410074 	movhi	r5,1025
 40062bc:	29756d04 	addi	r5,r5,-10828
 40062c0:	002b883a 	mov	r21,zero
 40062c4:	d9402615 	stw	r5,152(sp)
 40062c8:	003f9e06 	br	4006144 <__alt_data_end+0xfc006144>
 40062cc:	d9402217 	ldw	r5,136(sp)
 40062d0:	d8001d85 	stb	zero,118(sp)
 40062d4:	0029883a 	mov	r20,zero
 40062d8:	28800104 	addi	r2,r5,4
 40062dc:	2cc00017 	ldw	r19,0(r5)
 40062e0:	803e3a16 	blt	r16,zero,4005bcc <__alt_data_end+0xfc005bcc>
 40062e4:	00ffdfc4 	movi	r3,-129
 40062e8:	d8802215 	stw	r2,136(sp)
 40062ec:	88e2703a 	and	r17,r17,r3
 40062f0:	002b883a 	mov	r21,zero
 40062f4:	983e9b26 	beq	r19,zero,4005d64 <__alt_data_end+0xfc005d64>
 40062f8:	00800244 	movi	r2,9
 40062fc:	14fdc936 	bltu	r2,r19,4005a24 <__alt_data_end+0xfc005a24>
 4006300:	003e9a06 	br	4005d6c <__alt_data_end+0xfc005d6c>
 4006304:	00800c04 	movi	r2,48
 4006308:	d8c01d45 	stb	r3,117(sp)
 400630c:	d8801d05 	stb	r2,116(sp)
 4006310:	d8001d85 	stb	zero,118(sp)
 4006314:	88c00094 	ori	r3,r17,2
 4006318:	80009c16 	blt	r16,zero,400658c <___vfiprintf_internal_r+0x1368>
 400631c:	00bfdfc4 	movi	r2,-129
 4006320:	88a2703a 	and	r17,r17,r2
 4006324:	8c400094 	ori	r17,r17,2
 4006328:	002b883a 	mov	r21,zero
 400632c:	003f8506 	br	4006144 <__alt_data_end+0xfc006144>
 4006330:	b029883a 	mov	r20,r22
 4006334:	003c0b06 	br	4005364 <__alt_data_end+0xfc005364>
 4006338:	04e7c83a 	sub	r19,zero,r19
 400633c:	05400b44 	movi	r21,45
 4006340:	9804c03a 	cmpne	r2,r19,zero
 4006344:	0529c83a 	sub	r20,zero,r20
 4006348:	dd401d85 	stb	r21,118(sp)
 400634c:	a0a9c83a 	sub	r20,r20,r2
 4006350:	80009716 	blt	r16,zero,40065b0 <___vfiprintf_internal_r+0x138c>
 4006354:	00bfdfc4 	movi	r2,-129
 4006358:	88a2703a 	and	r17,r17,r2
 400635c:	003db006 	br	4005a20 <__alt_data_end+0xfc005a20>
 4006360:	b0c00007 	ldb	r3,0(r22)
 4006364:	003c0c06 	br	4005398 <__alt_data_end+0xfc005398>
 4006368:	8880100c 	andi	r2,r17,64
 400636c:	d8001d85 	stb	zero,118(sp)
 4006370:	1000461e 	bne	r2,zero,400648c <___vfiprintf_internal_r+0x1268>
 4006374:	d9002217 	ldw	r4,136(sp)
 4006378:	0029883a 	mov	r20,zero
 400637c:	20800104 	addi	r2,r4,4
 4006380:	24c00017 	ldw	r19,0(r4)
 4006384:	803df80e 	bge	r16,zero,4005b68 <__alt_data_end+0xfc005b68>
 4006388:	9d06b03a 	or	r3,r19,r20
 400638c:	d8802215 	stw	r2,136(sp)
 4006390:	183d5e1e 	bne	r3,zero,400590c <__alt_data_end+0xfc00590c>
 4006394:	002b883a 	mov	r21,zero
 4006398:	0005883a 	mov	r2,zero
 400639c:	003e1006 	br	4005be0 <__alt_data_end+0xfc005be0>
 40063a0:	8880040c 	andi	r2,r17,16
 40063a4:	1000321e 	bne	r2,zero,4006470 <___vfiprintf_internal_r+0x124c>
 40063a8:	8c40100c 	andi	r17,r17,64
 40063ac:	88008d26 	beq	r17,zero,40065e4 <___vfiprintf_internal_r+0x13c0>
 40063b0:	d9402217 	ldw	r5,136(sp)
 40063b4:	d8c02417 	ldw	r3,144(sp)
 40063b8:	28800017 	ldw	r2,0(r5)
 40063bc:	29400104 	addi	r5,r5,4
 40063c0:	d9402215 	stw	r5,136(sp)
 40063c4:	10c0000d 	sth	r3,0(r2)
 40063c8:	003bca06 	br	40052f4 <__alt_data_end+0xfc0052f4>
 40063cc:	8880100c 	andi	r2,r17,64
 40063d0:	10003a26 	beq	r2,zero,40064bc <___vfiprintf_internal_r+0x1298>
 40063d4:	d8802217 	ldw	r2,136(sp)
 40063d8:	14c0000f 	ldh	r19,0(r2)
 40063dc:	10800104 	addi	r2,r2,4
 40063e0:	d8802215 	stw	r2,136(sp)
 40063e4:	9829d7fa 	srai	r20,r19,31
 40063e8:	a005883a 	mov	r2,r20
 40063ec:	003d8506 	br	4005a04 <__alt_data_end+0xfc005a04>
 40063f0:	8880100c 	andi	r2,r17,64
 40063f4:	10002b26 	beq	r2,zero,40064a4 <___vfiprintf_internal_r+0x1280>
 40063f8:	d8802217 	ldw	r2,136(sp)
 40063fc:	0029883a 	mov	r20,zero
 4006400:	14c0000b 	ldhu	r19,0(r2)
 4006404:	10800104 	addi	r2,r2,4
 4006408:	d8802215 	stw	r2,136(sp)
 400640c:	003d5d06 	br	4005984 <__alt_data_end+0xfc005984>
 4006410:	d9402017 	ldw	r5,128(sp)
 4006414:	d9002117 	ldw	r4,132(sp)
 4006418:	d9801a04 	addi	r6,sp,104
 400641c:	d8c02a15 	stw	r3,168(sp)
 4006420:	d9c02b15 	stw	r7,172(sp)
 4006424:	40051100 	call	4005110 <__sprint_r.part.0>
 4006428:	d8c02a17 	ldw	r3,168(sp)
 400642c:	d9c02b17 	ldw	r7,172(sp)
 4006430:	103eb41e 	bne	r2,zero,4005f04 <__alt_data_end+0xfc005f04>
 4006434:	d9001b17 	ldw	r4,108(sp)
 4006438:	d8801c17 	ldw	r2,112(sp)
 400643c:	d811883a 	mov	r8,sp
 4006440:	21400044 	addi	r5,r4,1
 4006444:	003e6706 	br	4005de4 <__alt_data_end+0xfc005de4>
 4006448:	00bfffc4 	movi	r2,-1
 400644c:	003c4a06 	br	4005578 <__alt_data_end+0xfc005578>
 4006450:	9805883a 	mov	r2,r19
 4006454:	003ee806 	br	4005ff8 <__alt_data_end+0xfc005ff8>
 4006458:	d8c02217 	ldw	r3,136(sp)
 400645c:	0029883a 	mov	r20,zero
 4006460:	18800104 	addi	r2,r3,4
 4006464:	1cc0000b 	ldhu	r19,0(r3)
 4006468:	803f9e0e 	bge	r16,zero,40062e4 <__alt_data_end+0xfc0062e4>
 400646c:	003dd706 	br	4005bcc <__alt_data_end+0xfc005bcc>
 4006470:	d8c02217 	ldw	r3,136(sp)
 4006474:	d9002417 	ldw	r4,144(sp)
 4006478:	18800017 	ldw	r2,0(r3)
 400647c:	18c00104 	addi	r3,r3,4
 4006480:	d8c02215 	stw	r3,136(sp)
 4006484:	11000015 	stw	r4,0(r2)
 4006488:	003b9a06 	br	40052f4 <__alt_data_end+0xfc0052f4>
 400648c:	d8c02217 	ldw	r3,136(sp)
 4006490:	0029883a 	mov	r20,zero
 4006494:	18800104 	addi	r2,r3,4
 4006498:	1cc0000b 	ldhu	r19,0(r3)
 400649c:	803db20e 	bge	r16,zero,4005b68 <__alt_data_end+0xfc005b68>
 40064a0:	003fb906 	br	4006388 <__alt_data_end+0xfc006388>
 40064a4:	d9002217 	ldw	r4,136(sp)
 40064a8:	0029883a 	mov	r20,zero
 40064ac:	24c00017 	ldw	r19,0(r4)
 40064b0:	21000104 	addi	r4,r4,4
 40064b4:	d9002215 	stw	r4,136(sp)
 40064b8:	003d3206 	br	4005984 <__alt_data_end+0xfc005984>
 40064bc:	d8c02217 	ldw	r3,136(sp)
 40064c0:	1cc00017 	ldw	r19,0(r3)
 40064c4:	18c00104 	addi	r3,r3,4
 40064c8:	d8c02215 	stw	r3,136(sp)
 40064cc:	9829d7fa 	srai	r20,r19,31
 40064d0:	a005883a 	mov	r2,r20
 40064d4:	003d4b06 	br	4005a04 <__alt_data_end+0xfc005a04>
 40064d8:	0009883a 	mov	r4,zero
 40064dc:	01400044 	movi	r5,1
 40064e0:	d811883a 	mov	r8,sp
 40064e4:	003e4f06 	br	4005e24 <__alt_data_end+0xfc005e24>
 40064e8:	d8c02215 	stw	r3,136(sp)
 40064ec:	002b883a 	mov	r21,zero
 40064f0:	003db806 	br	4005bd4 <__alt_data_end+0xfc005bd4>
 40064f4:	d811883a 	mov	r8,sp
 40064f8:	003e9606 	br	4005f54 <__alt_data_end+0xfc005f54>
 40064fc:	01010074 	movhi	r4,1025
 4006500:	213573c4 	addi	r4,r4,-10801
 4006504:	d9002315 	stw	r4,140(sp)
 4006508:	003e6306 	br	4005e98 <__alt_data_end+0xfc005e98>
 400650c:	b0c00043 	ldbu	r3,1(r22)
 4006510:	8c400814 	ori	r17,r17,32
 4006514:	b5800044 	addi	r22,r22,1
 4006518:	18c03fcc 	andi	r3,r3,255
 400651c:	18c0201c 	xori	r3,r3,128
 4006520:	18ffe004 	addi	r3,r3,-128
 4006524:	003b9c06 	br	4005398 <__alt_data_end+0xfc005398>
 4006528:	b809883a 	mov	r4,r23
 400652c:	da002a15 	stw	r8,168(sp)
 4006530:	40090f40 	call	40090f4 <strlen>
 4006534:	1029883a 	mov	r20,r2
 4006538:	dd401d83 	ldbu	r21,118(sp)
 400653c:	df002215 	stw	fp,136(sp)
 4006540:	0021883a 	mov	r16,zero
 4006544:	da002a17 	ldw	r8,168(sp)
 4006548:	003c3906 	br	4005630 <__alt_data_end+0xfc005630>
 400654c:	d9402017 	ldw	r5,128(sp)
 4006550:	d9002117 	ldw	r4,132(sp)
 4006554:	d9801a04 	addi	r6,sp,104
 4006558:	40051100 	call	4005110 <__sprint_r.part.0>
 400655c:	103e691e 	bne	r2,zero,4005f04 <__alt_data_end+0xfc005f04>
 4006560:	d9001b17 	ldw	r4,108(sp)
 4006564:	d8801c17 	ldw	r2,112(sp)
 4006568:	d811883a 	mov	r8,sp
 400656c:	21400044 	addi	r5,r4,1
 4006570:	003e2e06 	br	4005e2c <__alt_data_end+0xfc005e2c>
 4006574:	01010074 	movhi	r4,1025
 4006578:	213577c4 	addi	r4,r4,-10785
 400657c:	d9002315 	stw	r4,140(sp)
 4006580:	d9001b17 	ldw	r4,108(sp)
 4006584:	21000044 	addi	r4,r4,1
 4006588:	003c5e06 	br	4005704 <__alt_data_end+0xfc005704>
 400658c:	002b883a 	mov	r21,zero
 4006590:	00800084 	movi	r2,2
 4006594:	10803fcc 	andi	r2,r2,255
 4006598:	01000044 	movi	r4,1
 400659c:	11002b26 	beq	r2,r4,400664c <___vfiprintf_internal_r+0x1428>
 40065a0:	01000084 	movi	r4,2
 40065a4:	11002b1e 	bne	r2,r4,4006654 <___vfiprintf_internal_r+0x1430>
 40065a8:	1823883a 	mov	r17,r3
 40065ac:	003ee506 	br	4006144 <__alt_data_end+0xfc006144>
 40065b0:	8807883a 	mov	r3,r17
 40065b4:	00800044 	movi	r2,1
 40065b8:	003ff606 	br	4006594 <__alt_data_end+0xfc006594>
 40065bc:	00800184 	movi	r2,6
 40065c0:	1400012e 	bgeu	r2,r16,40065c8 <___vfiprintf_internal_r+0x13a4>
 40065c4:	1021883a 	mov	r16,r2
 40065c8:	8029883a 	mov	r20,r16
 40065cc:	8027883a 	mov	r19,r16
 40065d0:	80002216 	blt	r16,zero,400665c <___vfiprintf_internal_r+0x1438>
 40065d4:	05c10074 	movhi	r23,1025
 40065d8:	df002215 	stw	fp,136(sp)
 40065dc:	bdf57204 	addi	r23,r23,-10808
 40065e0:	003cfb06 	br	40059d0 <__alt_data_end+0xfc0059d0>
 40065e4:	d9002217 	ldw	r4,136(sp)
 40065e8:	d9402417 	ldw	r5,144(sp)
 40065ec:	20800017 	ldw	r2,0(r4)
 40065f0:	21000104 	addi	r4,r4,4
 40065f4:	d9002215 	stw	r4,136(sp)
 40065f8:	11400015 	stw	r5,0(r2)
 40065fc:	003b3d06 	br	40052f4 <__alt_data_end+0xfc0052f4>
 4006600:	01410074 	movhi	r5,1025
 4006604:	297577c4 	addi	r5,r5,-10785
 4006608:	d9402315 	stw	r5,140(sp)
 400660c:	d9401b17 	ldw	r5,108(sp)
 4006610:	29400044 	addi	r5,r5,1
 4006614:	003e6d06 	br	4005fcc <__alt_data_end+0xfc005fcc>
 4006618:	8029883a 	mov	r20,r16
 400661c:	dd401d83 	ldbu	r21,118(sp)
 4006620:	df002215 	stw	fp,136(sp)
 4006624:	0021883a 	mov	r16,zero
 4006628:	003c0106 	br	4005630 <__alt_data_end+0xfc005630>
 400662c:	00c10074 	movhi	r3,1025
 4006630:	18f573c4 	addi	r3,r3,-10801
 4006634:	d8c02315 	stw	r3,140(sp)
 4006638:	280d883a 	mov	r6,r5
 400663c:	003c6906 	br	40057e4 <__alt_data_end+0xfc0057e4>
 4006640:	802d883a 	mov	r22,r16
 4006644:	0021883a 	mov	r16,zero
 4006648:	003b5406 	br	400539c <__alt_data_end+0xfc00539c>
 400664c:	1823883a 	mov	r17,r3
 4006650:	003cf306 	br	4005a20 <__alt_data_end+0xfc005a20>
 4006654:	1823883a 	mov	r17,r3
 4006658:	003cad06 	br	4005910 <__alt_data_end+0xfc005910>
 400665c:	0027883a 	mov	r19,zero
 4006660:	003fdc06 	br	40065d4 <__alt_data_end+0xfc0065d4>
 4006664:	d9402217 	ldw	r5,136(sp)
 4006668:	8005883a 	mov	r2,r16
 400666c:	b0c00043 	ldbu	r3,1(r22)
 4006670:	2c000017 	ldw	r16,0(r5)
 4006674:	29000104 	addi	r4,r5,4
 4006678:	d9002215 	stw	r4,136(sp)
 400667c:	102d883a 	mov	r22,r2
 4006680:	803fa50e 	bge	r16,zero,4006518 <__alt_data_end+0xfc006518>
 4006684:	18c03fcc 	andi	r3,r3,255
 4006688:	18c0201c 	xori	r3,r3,128
 400668c:	043fffc4 	movi	r16,-1
 4006690:	18ffe004 	addi	r3,r3,-128
 4006694:	003b4006 	br	4005398 <__alt_data_end+0xfc005398>
 4006698:	d9402303 	ldbu	r5,140(sp)
 400669c:	d9401d85 	stb	r5,118(sp)
 40066a0:	003cae06 	br	400595c <__alt_data_end+0xfc00595c>
 40066a4:	d8c02303 	ldbu	r3,140(sp)
 40066a8:	d8c01d85 	stb	r3,118(sp)
 40066ac:	003d1406 	br	4005b00 <__alt_data_end+0xfc005b00>
 40066b0:	d8c02303 	ldbu	r3,140(sp)
 40066b4:	d8c01d85 	stb	r3,118(sp)
 40066b8:	003cca06 	br	40059e4 <__alt_data_end+0xfc0059e4>
 40066bc:	8880004c 	andi	r2,r17,1
 40066c0:	002b883a 	mov	r21,zero
 40066c4:	10000526 	beq	r2,zero,40066dc <___vfiprintf_internal_r+0x14b8>
 40066c8:	00800c04 	movi	r2,48
 40066cc:	d88019c5 	stb	r2,103(sp)
 40066d0:	dd002817 	ldw	r20,160(sp)
 40066d4:	ddc019c4 	addi	r23,sp,103
 40066d8:	003bd506 	br	4005630 <__alt_data_end+0xfc005630>
 40066dc:	0029883a 	mov	r20,zero
 40066e0:	ddc01a04 	addi	r23,sp,104
 40066e4:	003bd206 	br	4005630 <__alt_data_end+0xfc005630>
 40066e8:	d9002303 	ldbu	r4,140(sp)
 40066ec:	d9001d85 	stb	r4,118(sp)
 40066f0:	003da606 	br	4005d8c <__alt_data_end+0xfc005d8c>
 40066f4:	d8c02303 	ldbu	r3,140(sp)
 40066f8:	d8c01d85 	stb	r3,118(sp)
 40066fc:	003c7606 	br	40058d8 <__alt_data_end+0xfc0058d8>
 4006700:	d8c02303 	ldbu	r3,140(sp)
 4006704:	d8c01d85 	stb	r3,118(sp)
 4006708:	003c6506 	br	40058a0 <__alt_data_end+0xfc0058a0>
 400670c:	d9002303 	ldbu	r4,140(sp)
 4006710:	d9001d85 	stb	r4,118(sp)
 4006714:	003d3d06 	br	4005c0c <__alt_data_end+0xfc005c0c>
 4006718:	d8c02303 	ldbu	r3,140(sp)
 400671c:	d8c01d85 	stb	r3,118(sp)
 4006720:	003d1d06 	br	4005b98 <__alt_data_end+0xfc005b98>
 4006724:	d8c02303 	ldbu	r3,140(sp)
 4006728:	d8c01d85 	stb	r3,118(sp)
 400672c:	003d0306 	br	4005b3c <__alt_data_end+0xfc005b3c>

04006730 <__vfiprintf_internal>:
 4006730:	00810074 	movhi	r2,1025
 4006734:	10bc5904 	addi	r2,r2,-3740
 4006738:	300f883a 	mov	r7,r6
 400673c:	280d883a 	mov	r6,r5
 4006740:	200b883a 	mov	r5,r4
 4006744:	11000017 	ldw	r4,0(r2)
 4006748:	40052241 	jmpi	4005224 <___vfiprintf_internal_r>

0400674c <__sbprintf>:
 400674c:	2880030b 	ldhu	r2,12(r5)
 4006750:	2ac01917 	ldw	r11,100(r5)
 4006754:	2a80038b 	ldhu	r10,14(r5)
 4006758:	2a400717 	ldw	r9,28(r5)
 400675c:	2a000917 	ldw	r8,36(r5)
 4006760:	defee204 	addi	sp,sp,-1144
 4006764:	00c10004 	movi	r3,1024
 4006768:	dc011a15 	stw	r16,1128(sp)
 400676c:	10bfff4c 	andi	r2,r2,65533
 4006770:	2821883a 	mov	r16,r5
 4006774:	d8cb883a 	add	r5,sp,r3
 4006778:	dc811c15 	stw	r18,1136(sp)
 400677c:	dc411b15 	stw	r17,1132(sp)
 4006780:	dfc11d15 	stw	ra,1140(sp)
 4006784:	2025883a 	mov	r18,r4
 4006788:	d881030d 	sth	r2,1036(sp)
 400678c:	dac11915 	stw	r11,1124(sp)
 4006790:	da81038d 	sth	r10,1038(sp)
 4006794:	da410715 	stw	r9,1052(sp)
 4006798:	da010915 	stw	r8,1060(sp)
 400679c:	dec10015 	stw	sp,1024(sp)
 40067a0:	dec10415 	stw	sp,1040(sp)
 40067a4:	d8c10215 	stw	r3,1032(sp)
 40067a8:	d8c10515 	stw	r3,1044(sp)
 40067ac:	d8010615 	stw	zero,1048(sp)
 40067b0:	40052240 	call	4005224 <___vfiprintf_internal_r>
 40067b4:	1023883a 	mov	r17,r2
 40067b8:	10000416 	blt	r2,zero,40067cc <__sbprintf+0x80>
 40067bc:	d9410004 	addi	r5,sp,1024
 40067c0:	9009883a 	mov	r4,r18
 40067c4:	4006b780 	call	4006b78 <_fflush_r>
 40067c8:	10000d1e 	bne	r2,zero,4006800 <__sbprintf+0xb4>
 40067cc:	d881030b 	ldhu	r2,1036(sp)
 40067d0:	1080100c 	andi	r2,r2,64
 40067d4:	10000326 	beq	r2,zero,40067e4 <__sbprintf+0x98>
 40067d8:	8080030b 	ldhu	r2,12(r16)
 40067dc:	10801014 	ori	r2,r2,64
 40067e0:	8080030d 	sth	r2,12(r16)
 40067e4:	8805883a 	mov	r2,r17
 40067e8:	dfc11d17 	ldw	ra,1140(sp)
 40067ec:	dc811c17 	ldw	r18,1136(sp)
 40067f0:	dc411b17 	ldw	r17,1132(sp)
 40067f4:	dc011a17 	ldw	r16,1128(sp)
 40067f8:	dec11e04 	addi	sp,sp,1144
 40067fc:	f800283a 	ret
 4006800:	047fffc4 	movi	r17,-1
 4006804:	003ff106 	br	40067cc <__alt_data_end+0xfc0067cc>

04006808 <__swsetup_r>:
 4006808:	00810074 	movhi	r2,1025
 400680c:	defffd04 	addi	sp,sp,-12
 4006810:	10bc5904 	addi	r2,r2,-3740
 4006814:	dc400115 	stw	r17,4(sp)
 4006818:	2023883a 	mov	r17,r4
 400681c:	11000017 	ldw	r4,0(r2)
 4006820:	dc000015 	stw	r16,0(sp)
 4006824:	dfc00215 	stw	ra,8(sp)
 4006828:	2821883a 	mov	r16,r5
 400682c:	20000226 	beq	r4,zero,4006838 <__swsetup_r+0x30>
 4006830:	20800e17 	ldw	r2,56(r4)
 4006834:	10003126 	beq	r2,zero,40068fc <__swsetup_r+0xf4>
 4006838:	8080030b 	ldhu	r2,12(r16)
 400683c:	10c0020c 	andi	r3,r2,8
 4006840:	1009883a 	mov	r4,r2
 4006844:	18000f26 	beq	r3,zero,4006884 <__swsetup_r+0x7c>
 4006848:	80c00417 	ldw	r3,16(r16)
 400684c:	18001526 	beq	r3,zero,40068a4 <__swsetup_r+0x9c>
 4006850:	1100004c 	andi	r4,r2,1
 4006854:	20001c1e 	bne	r4,zero,40068c8 <__swsetup_r+0xc0>
 4006858:	1080008c 	andi	r2,r2,2
 400685c:	1000291e 	bne	r2,zero,4006904 <__swsetup_r+0xfc>
 4006860:	80800517 	ldw	r2,20(r16)
 4006864:	80800215 	stw	r2,8(r16)
 4006868:	18001c26 	beq	r3,zero,40068dc <__swsetup_r+0xd4>
 400686c:	0005883a 	mov	r2,zero
 4006870:	dfc00217 	ldw	ra,8(sp)
 4006874:	dc400117 	ldw	r17,4(sp)
 4006878:	dc000017 	ldw	r16,0(sp)
 400687c:	dec00304 	addi	sp,sp,12
 4006880:	f800283a 	ret
 4006884:	2080040c 	andi	r2,r4,16
 4006888:	10002e26 	beq	r2,zero,4006944 <__swsetup_r+0x13c>
 400688c:	2080010c 	andi	r2,r4,4
 4006890:	10001e1e 	bne	r2,zero,400690c <__swsetup_r+0x104>
 4006894:	80c00417 	ldw	r3,16(r16)
 4006898:	20800214 	ori	r2,r4,8
 400689c:	8080030d 	sth	r2,12(r16)
 40068a0:	183feb1e 	bne	r3,zero,4006850 <__alt_data_end+0xfc006850>
 40068a4:	1100a00c 	andi	r4,r2,640
 40068a8:	01408004 	movi	r5,512
 40068ac:	217fe826 	beq	r4,r5,4006850 <__alt_data_end+0xfc006850>
 40068b0:	800b883a 	mov	r5,r16
 40068b4:	8809883a 	mov	r4,r17
 40068b8:	4007d1c0 	call	4007d1c <__smakebuf_r>
 40068bc:	8080030b 	ldhu	r2,12(r16)
 40068c0:	80c00417 	ldw	r3,16(r16)
 40068c4:	003fe206 	br	4006850 <__alt_data_end+0xfc006850>
 40068c8:	80800517 	ldw	r2,20(r16)
 40068cc:	80000215 	stw	zero,8(r16)
 40068d0:	0085c83a 	sub	r2,zero,r2
 40068d4:	80800615 	stw	r2,24(r16)
 40068d8:	183fe41e 	bne	r3,zero,400686c <__alt_data_end+0xfc00686c>
 40068dc:	80c0030b 	ldhu	r3,12(r16)
 40068e0:	0005883a 	mov	r2,zero
 40068e4:	1900200c 	andi	r4,r3,128
 40068e8:	203fe126 	beq	r4,zero,4006870 <__alt_data_end+0xfc006870>
 40068ec:	18c01014 	ori	r3,r3,64
 40068f0:	80c0030d 	sth	r3,12(r16)
 40068f4:	00bfffc4 	movi	r2,-1
 40068f8:	003fdd06 	br	4006870 <__alt_data_end+0xfc006870>
 40068fc:	4006f640 	call	4006f64 <__sinit>
 4006900:	003fcd06 	br	4006838 <__alt_data_end+0xfc006838>
 4006904:	0005883a 	mov	r2,zero
 4006908:	003fd606 	br	4006864 <__alt_data_end+0xfc006864>
 400690c:	81400c17 	ldw	r5,48(r16)
 4006910:	28000626 	beq	r5,zero,400692c <__swsetup_r+0x124>
 4006914:	80801004 	addi	r2,r16,64
 4006918:	28800326 	beq	r5,r2,4006928 <__swsetup_r+0x120>
 400691c:	8809883a 	mov	r4,r17
 4006920:	40072e00 	call	40072e0 <_free_r>
 4006924:	8100030b 	ldhu	r4,12(r16)
 4006928:	80000c15 	stw	zero,48(r16)
 400692c:	80c00417 	ldw	r3,16(r16)
 4006930:	00bff6c4 	movi	r2,-37
 4006934:	1108703a 	and	r4,r2,r4
 4006938:	80000115 	stw	zero,4(r16)
 400693c:	80c00015 	stw	r3,0(r16)
 4006940:	003fd506 	br	4006898 <__alt_data_end+0xfc006898>
 4006944:	00800244 	movi	r2,9
 4006948:	88800015 	stw	r2,0(r17)
 400694c:	20801014 	ori	r2,r4,64
 4006950:	8080030d 	sth	r2,12(r16)
 4006954:	00bfffc4 	movi	r2,-1
 4006958:	003fc506 	br	4006870 <__alt_data_end+0xfc006870>

0400695c <__sflush_r>:
 400695c:	2880030b 	ldhu	r2,12(r5)
 4006960:	defffb04 	addi	sp,sp,-20
 4006964:	dcc00315 	stw	r19,12(sp)
 4006968:	dc400115 	stw	r17,4(sp)
 400696c:	dfc00415 	stw	ra,16(sp)
 4006970:	dc800215 	stw	r18,8(sp)
 4006974:	dc000015 	stw	r16,0(sp)
 4006978:	10c0020c 	andi	r3,r2,8
 400697c:	2823883a 	mov	r17,r5
 4006980:	2027883a 	mov	r19,r4
 4006984:	1800311e 	bne	r3,zero,4006a4c <__sflush_r+0xf0>
 4006988:	28c00117 	ldw	r3,4(r5)
 400698c:	10820014 	ori	r2,r2,2048
 4006990:	2880030d 	sth	r2,12(r5)
 4006994:	00c04b0e 	bge	zero,r3,4006ac4 <__sflush_r+0x168>
 4006998:	8a000a17 	ldw	r8,40(r17)
 400699c:	40002326 	beq	r8,zero,4006a2c <__sflush_r+0xd0>
 40069a0:	9c000017 	ldw	r16,0(r19)
 40069a4:	10c4000c 	andi	r3,r2,4096
 40069a8:	98000015 	stw	zero,0(r19)
 40069ac:	18004826 	beq	r3,zero,4006ad0 <__sflush_r+0x174>
 40069b0:	89801417 	ldw	r6,80(r17)
 40069b4:	10c0010c 	andi	r3,r2,4
 40069b8:	18000626 	beq	r3,zero,40069d4 <__sflush_r+0x78>
 40069bc:	88c00117 	ldw	r3,4(r17)
 40069c0:	88800c17 	ldw	r2,48(r17)
 40069c4:	30cdc83a 	sub	r6,r6,r3
 40069c8:	10000226 	beq	r2,zero,40069d4 <__sflush_r+0x78>
 40069cc:	88800f17 	ldw	r2,60(r17)
 40069d0:	308dc83a 	sub	r6,r6,r2
 40069d4:	89400717 	ldw	r5,28(r17)
 40069d8:	000f883a 	mov	r7,zero
 40069dc:	9809883a 	mov	r4,r19
 40069e0:	403ee83a 	callr	r8
 40069e4:	00ffffc4 	movi	r3,-1
 40069e8:	10c04426 	beq	r2,r3,4006afc <__sflush_r+0x1a0>
 40069ec:	88c0030b 	ldhu	r3,12(r17)
 40069f0:	89000417 	ldw	r4,16(r17)
 40069f4:	88000115 	stw	zero,4(r17)
 40069f8:	197dffcc 	andi	r5,r3,63487
 40069fc:	8940030d 	sth	r5,12(r17)
 4006a00:	89000015 	stw	r4,0(r17)
 4006a04:	18c4000c 	andi	r3,r3,4096
 4006a08:	18002c1e 	bne	r3,zero,4006abc <__sflush_r+0x160>
 4006a0c:	89400c17 	ldw	r5,48(r17)
 4006a10:	9c000015 	stw	r16,0(r19)
 4006a14:	28000526 	beq	r5,zero,4006a2c <__sflush_r+0xd0>
 4006a18:	88801004 	addi	r2,r17,64
 4006a1c:	28800226 	beq	r5,r2,4006a28 <__sflush_r+0xcc>
 4006a20:	9809883a 	mov	r4,r19
 4006a24:	40072e00 	call	40072e0 <_free_r>
 4006a28:	88000c15 	stw	zero,48(r17)
 4006a2c:	0005883a 	mov	r2,zero
 4006a30:	dfc00417 	ldw	ra,16(sp)
 4006a34:	dcc00317 	ldw	r19,12(sp)
 4006a38:	dc800217 	ldw	r18,8(sp)
 4006a3c:	dc400117 	ldw	r17,4(sp)
 4006a40:	dc000017 	ldw	r16,0(sp)
 4006a44:	dec00504 	addi	sp,sp,20
 4006a48:	f800283a 	ret
 4006a4c:	2c800417 	ldw	r18,16(r5)
 4006a50:	903ff626 	beq	r18,zero,4006a2c <__alt_data_end+0xfc006a2c>
 4006a54:	2c000017 	ldw	r16,0(r5)
 4006a58:	108000cc 	andi	r2,r2,3
 4006a5c:	2c800015 	stw	r18,0(r5)
 4006a60:	84a1c83a 	sub	r16,r16,r18
 4006a64:	1000131e 	bne	r2,zero,4006ab4 <__sflush_r+0x158>
 4006a68:	28800517 	ldw	r2,20(r5)
 4006a6c:	88800215 	stw	r2,8(r17)
 4006a70:	04000316 	blt	zero,r16,4006a80 <__sflush_r+0x124>
 4006a74:	003fed06 	br	4006a2c <__alt_data_end+0xfc006a2c>
 4006a78:	90a5883a 	add	r18,r18,r2
 4006a7c:	043feb0e 	bge	zero,r16,4006a2c <__alt_data_end+0xfc006a2c>
 4006a80:	88800917 	ldw	r2,36(r17)
 4006a84:	89400717 	ldw	r5,28(r17)
 4006a88:	800f883a 	mov	r7,r16
 4006a8c:	900d883a 	mov	r6,r18
 4006a90:	9809883a 	mov	r4,r19
 4006a94:	103ee83a 	callr	r2
 4006a98:	80a1c83a 	sub	r16,r16,r2
 4006a9c:	00bff616 	blt	zero,r2,4006a78 <__alt_data_end+0xfc006a78>
 4006aa0:	88c0030b 	ldhu	r3,12(r17)
 4006aa4:	00bfffc4 	movi	r2,-1
 4006aa8:	18c01014 	ori	r3,r3,64
 4006aac:	88c0030d 	sth	r3,12(r17)
 4006ab0:	003fdf06 	br	4006a30 <__alt_data_end+0xfc006a30>
 4006ab4:	0005883a 	mov	r2,zero
 4006ab8:	003fec06 	br	4006a6c <__alt_data_end+0xfc006a6c>
 4006abc:	88801415 	stw	r2,80(r17)
 4006ac0:	003fd206 	br	4006a0c <__alt_data_end+0xfc006a0c>
 4006ac4:	28c00f17 	ldw	r3,60(r5)
 4006ac8:	00ffb316 	blt	zero,r3,4006998 <__alt_data_end+0xfc006998>
 4006acc:	003fd706 	br	4006a2c <__alt_data_end+0xfc006a2c>
 4006ad0:	89400717 	ldw	r5,28(r17)
 4006ad4:	000d883a 	mov	r6,zero
 4006ad8:	01c00044 	movi	r7,1
 4006adc:	9809883a 	mov	r4,r19
 4006ae0:	403ee83a 	callr	r8
 4006ae4:	100d883a 	mov	r6,r2
 4006ae8:	00bfffc4 	movi	r2,-1
 4006aec:	30801426 	beq	r6,r2,4006b40 <__sflush_r+0x1e4>
 4006af0:	8880030b 	ldhu	r2,12(r17)
 4006af4:	8a000a17 	ldw	r8,40(r17)
 4006af8:	003fae06 	br	40069b4 <__alt_data_end+0xfc0069b4>
 4006afc:	98c00017 	ldw	r3,0(r19)
 4006b00:	183fba26 	beq	r3,zero,40069ec <__alt_data_end+0xfc0069ec>
 4006b04:	01000744 	movi	r4,29
 4006b08:	19000626 	beq	r3,r4,4006b24 <__sflush_r+0x1c8>
 4006b0c:	01000584 	movi	r4,22
 4006b10:	19000426 	beq	r3,r4,4006b24 <__sflush_r+0x1c8>
 4006b14:	88c0030b 	ldhu	r3,12(r17)
 4006b18:	18c01014 	ori	r3,r3,64
 4006b1c:	88c0030d 	sth	r3,12(r17)
 4006b20:	003fc306 	br	4006a30 <__alt_data_end+0xfc006a30>
 4006b24:	8880030b 	ldhu	r2,12(r17)
 4006b28:	88c00417 	ldw	r3,16(r17)
 4006b2c:	88000115 	stw	zero,4(r17)
 4006b30:	10bdffcc 	andi	r2,r2,63487
 4006b34:	8880030d 	sth	r2,12(r17)
 4006b38:	88c00015 	stw	r3,0(r17)
 4006b3c:	003fb306 	br	4006a0c <__alt_data_end+0xfc006a0c>
 4006b40:	98800017 	ldw	r2,0(r19)
 4006b44:	103fea26 	beq	r2,zero,4006af0 <__alt_data_end+0xfc006af0>
 4006b48:	00c00744 	movi	r3,29
 4006b4c:	10c00226 	beq	r2,r3,4006b58 <__sflush_r+0x1fc>
 4006b50:	00c00584 	movi	r3,22
 4006b54:	10c0031e 	bne	r2,r3,4006b64 <__sflush_r+0x208>
 4006b58:	9c000015 	stw	r16,0(r19)
 4006b5c:	0005883a 	mov	r2,zero
 4006b60:	003fb306 	br	4006a30 <__alt_data_end+0xfc006a30>
 4006b64:	88c0030b 	ldhu	r3,12(r17)
 4006b68:	3005883a 	mov	r2,r6
 4006b6c:	18c01014 	ori	r3,r3,64
 4006b70:	88c0030d 	sth	r3,12(r17)
 4006b74:	003fae06 	br	4006a30 <__alt_data_end+0xfc006a30>

04006b78 <_fflush_r>:
 4006b78:	defffd04 	addi	sp,sp,-12
 4006b7c:	dc000115 	stw	r16,4(sp)
 4006b80:	dfc00215 	stw	ra,8(sp)
 4006b84:	2021883a 	mov	r16,r4
 4006b88:	20000226 	beq	r4,zero,4006b94 <_fflush_r+0x1c>
 4006b8c:	20800e17 	ldw	r2,56(r4)
 4006b90:	10000c26 	beq	r2,zero,4006bc4 <_fflush_r+0x4c>
 4006b94:	2880030f 	ldh	r2,12(r5)
 4006b98:	1000051e 	bne	r2,zero,4006bb0 <_fflush_r+0x38>
 4006b9c:	0005883a 	mov	r2,zero
 4006ba0:	dfc00217 	ldw	ra,8(sp)
 4006ba4:	dc000117 	ldw	r16,4(sp)
 4006ba8:	dec00304 	addi	sp,sp,12
 4006bac:	f800283a 	ret
 4006bb0:	8009883a 	mov	r4,r16
 4006bb4:	dfc00217 	ldw	ra,8(sp)
 4006bb8:	dc000117 	ldw	r16,4(sp)
 4006bbc:	dec00304 	addi	sp,sp,12
 4006bc0:	400695c1 	jmpi	400695c <__sflush_r>
 4006bc4:	d9400015 	stw	r5,0(sp)
 4006bc8:	4006f640 	call	4006f64 <__sinit>
 4006bcc:	d9400017 	ldw	r5,0(sp)
 4006bd0:	003ff006 	br	4006b94 <__alt_data_end+0xfc006b94>

04006bd4 <fflush>:
 4006bd4:	20000526 	beq	r4,zero,4006bec <fflush+0x18>
 4006bd8:	00810074 	movhi	r2,1025
 4006bdc:	10bc5904 	addi	r2,r2,-3740
 4006be0:	200b883a 	mov	r5,r4
 4006be4:	11000017 	ldw	r4,0(r2)
 4006be8:	4006b781 	jmpi	4006b78 <_fflush_r>
 4006bec:	00810074 	movhi	r2,1025
 4006bf0:	10bc5804 	addi	r2,r2,-3744
 4006bf4:	11000017 	ldw	r4,0(r2)
 4006bf8:	01410034 	movhi	r5,1024
 4006bfc:	295ade04 	addi	r5,r5,27512
 4006c00:	4007b7c1 	jmpi	4007b7c <_fwalk_reent>

04006c04 <__fp_unlock>:
 4006c04:	0005883a 	mov	r2,zero
 4006c08:	f800283a 	ret

04006c0c <_cleanup_r>:
 4006c0c:	01410074 	movhi	r5,1025
 4006c10:	29656004 	addi	r5,r5,-27264
 4006c14:	4007b7c1 	jmpi	4007b7c <_fwalk_reent>

04006c18 <__sinit.part.1>:
 4006c18:	defff704 	addi	sp,sp,-36
 4006c1c:	00c10034 	movhi	r3,1024
 4006c20:	dfc00815 	stw	ra,32(sp)
 4006c24:	ddc00715 	stw	r23,28(sp)
 4006c28:	dd800615 	stw	r22,24(sp)
 4006c2c:	dd400515 	stw	r21,20(sp)
 4006c30:	dd000415 	stw	r20,16(sp)
 4006c34:	dcc00315 	stw	r19,12(sp)
 4006c38:	dc800215 	stw	r18,8(sp)
 4006c3c:	dc400115 	stw	r17,4(sp)
 4006c40:	dc000015 	stw	r16,0(sp)
 4006c44:	18db0304 	addi	r3,r3,27660
 4006c48:	24000117 	ldw	r16,4(r4)
 4006c4c:	20c00f15 	stw	r3,60(r4)
 4006c50:	2080bb04 	addi	r2,r4,748
 4006c54:	00c000c4 	movi	r3,3
 4006c58:	20c0b915 	stw	r3,740(r4)
 4006c5c:	2080ba15 	stw	r2,744(r4)
 4006c60:	2000b815 	stw	zero,736(r4)
 4006c64:	05c00204 	movi	r23,8
 4006c68:	00800104 	movi	r2,4
 4006c6c:	2025883a 	mov	r18,r4
 4006c70:	b80d883a 	mov	r6,r23
 4006c74:	81001704 	addi	r4,r16,92
 4006c78:	000b883a 	mov	r5,zero
 4006c7c:	80000015 	stw	zero,0(r16)
 4006c80:	80000115 	stw	zero,4(r16)
 4006c84:	80000215 	stw	zero,8(r16)
 4006c88:	8080030d 	sth	r2,12(r16)
 4006c8c:	80001915 	stw	zero,100(r16)
 4006c90:	8000038d 	sth	zero,14(r16)
 4006c94:	80000415 	stw	zero,16(r16)
 4006c98:	80000515 	stw	zero,20(r16)
 4006c9c:	80000615 	stw	zero,24(r16)
 4006ca0:	4004cb40 	call	4004cb4 <memset>
 4006ca4:	05810074 	movhi	r22,1025
 4006ca8:	94400217 	ldw	r17,8(r18)
 4006cac:	05410074 	movhi	r21,1025
 4006cb0:	05010074 	movhi	r20,1025
 4006cb4:	04c10074 	movhi	r19,1025
 4006cb8:	b5a3b704 	addi	r22,r22,-28964
 4006cbc:	ad63ce04 	addi	r21,r21,-28872
 4006cc0:	a523ed04 	addi	r20,r20,-28748
 4006cc4:	9ce40404 	addi	r19,r19,-28656
 4006cc8:	85800815 	stw	r22,32(r16)
 4006ccc:	85400915 	stw	r21,36(r16)
 4006cd0:	85000a15 	stw	r20,40(r16)
 4006cd4:	84c00b15 	stw	r19,44(r16)
 4006cd8:	84000715 	stw	r16,28(r16)
 4006cdc:	00800284 	movi	r2,10
 4006ce0:	8880030d 	sth	r2,12(r17)
 4006ce4:	00800044 	movi	r2,1
 4006ce8:	b80d883a 	mov	r6,r23
 4006cec:	89001704 	addi	r4,r17,92
 4006cf0:	000b883a 	mov	r5,zero
 4006cf4:	88000015 	stw	zero,0(r17)
 4006cf8:	88000115 	stw	zero,4(r17)
 4006cfc:	88000215 	stw	zero,8(r17)
 4006d00:	88001915 	stw	zero,100(r17)
 4006d04:	8880038d 	sth	r2,14(r17)
 4006d08:	88000415 	stw	zero,16(r17)
 4006d0c:	88000515 	stw	zero,20(r17)
 4006d10:	88000615 	stw	zero,24(r17)
 4006d14:	4004cb40 	call	4004cb4 <memset>
 4006d18:	94000317 	ldw	r16,12(r18)
 4006d1c:	00800484 	movi	r2,18
 4006d20:	8c400715 	stw	r17,28(r17)
 4006d24:	8d800815 	stw	r22,32(r17)
 4006d28:	8d400915 	stw	r21,36(r17)
 4006d2c:	8d000a15 	stw	r20,40(r17)
 4006d30:	8cc00b15 	stw	r19,44(r17)
 4006d34:	8080030d 	sth	r2,12(r16)
 4006d38:	00800084 	movi	r2,2
 4006d3c:	80000015 	stw	zero,0(r16)
 4006d40:	80000115 	stw	zero,4(r16)
 4006d44:	80000215 	stw	zero,8(r16)
 4006d48:	80001915 	stw	zero,100(r16)
 4006d4c:	8080038d 	sth	r2,14(r16)
 4006d50:	80000415 	stw	zero,16(r16)
 4006d54:	80000515 	stw	zero,20(r16)
 4006d58:	80000615 	stw	zero,24(r16)
 4006d5c:	b80d883a 	mov	r6,r23
 4006d60:	000b883a 	mov	r5,zero
 4006d64:	81001704 	addi	r4,r16,92
 4006d68:	4004cb40 	call	4004cb4 <memset>
 4006d6c:	00800044 	movi	r2,1
 4006d70:	84000715 	stw	r16,28(r16)
 4006d74:	85800815 	stw	r22,32(r16)
 4006d78:	85400915 	stw	r21,36(r16)
 4006d7c:	85000a15 	stw	r20,40(r16)
 4006d80:	84c00b15 	stw	r19,44(r16)
 4006d84:	90800e15 	stw	r2,56(r18)
 4006d88:	dfc00817 	ldw	ra,32(sp)
 4006d8c:	ddc00717 	ldw	r23,28(sp)
 4006d90:	dd800617 	ldw	r22,24(sp)
 4006d94:	dd400517 	ldw	r21,20(sp)
 4006d98:	dd000417 	ldw	r20,16(sp)
 4006d9c:	dcc00317 	ldw	r19,12(sp)
 4006da0:	dc800217 	ldw	r18,8(sp)
 4006da4:	dc400117 	ldw	r17,4(sp)
 4006da8:	dc000017 	ldw	r16,0(sp)
 4006dac:	dec00904 	addi	sp,sp,36
 4006db0:	f800283a 	ret

04006db4 <__fp_lock>:
 4006db4:	0005883a 	mov	r2,zero
 4006db8:	f800283a 	ret

04006dbc <__sfmoreglue>:
 4006dbc:	defffc04 	addi	sp,sp,-16
 4006dc0:	dc800215 	stw	r18,8(sp)
 4006dc4:	2825883a 	mov	r18,r5
 4006dc8:	dc000015 	stw	r16,0(sp)
 4006dcc:	01401a04 	movi	r5,104
 4006dd0:	2021883a 	mov	r16,r4
 4006dd4:	913fffc4 	addi	r4,r18,-1
 4006dd8:	dfc00315 	stw	ra,12(sp)
 4006ddc:	dc400115 	stw	r17,4(sp)
 4006de0:	400359c0 	call	400359c <__mulsi3>
 4006de4:	8009883a 	mov	r4,r16
 4006de8:	11401d04 	addi	r5,r2,116
 4006dec:	1023883a 	mov	r17,r2
 4006df0:	4007ed80 	call	4007ed8 <_malloc_r>
 4006df4:	1021883a 	mov	r16,r2
 4006df8:	10000726 	beq	r2,zero,4006e18 <__sfmoreglue+0x5c>
 4006dfc:	11000304 	addi	r4,r2,12
 4006e00:	10000015 	stw	zero,0(r2)
 4006e04:	14800115 	stw	r18,4(r2)
 4006e08:	11000215 	stw	r4,8(r2)
 4006e0c:	89801a04 	addi	r6,r17,104
 4006e10:	000b883a 	mov	r5,zero
 4006e14:	4004cb40 	call	4004cb4 <memset>
 4006e18:	8005883a 	mov	r2,r16
 4006e1c:	dfc00317 	ldw	ra,12(sp)
 4006e20:	dc800217 	ldw	r18,8(sp)
 4006e24:	dc400117 	ldw	r17,4(sp)
 4006e28:	dc000017 	ldw	r16,0(sp)
 4006e2c:	dec00404 	addi	sp,sp,16
 4006e30:	f800283a 	ret

04006e34 <__sfp>:
 4006e34:	defffb04 	addi	sp,sp,-20
 4006e38:	dc000015 	stw	r16,0(sp)
 4006e3c:	04010074 	movhi	r16,1025
 4006e40:	843c5804 	addi	r16,r16,-3744
 4006e44:	dcc00315 	stw	r19,12(sp)
 4006e48:	2027883a 	mov	r19,r4
 4006e4c:	81000017 	ldw	r4,0(r16)
 4006e50:	dfc00415 	stw	ra,16(sp)
 4006e54:	dc800215 	stw	r18,8(sp)
 4006e58:	20800e17 	ldw	r2,56(r4)
 4006e5c:	dc400115 	stw	r17,4(sp)
 4006e60:	1000021e 	bne	r2,zero,4006e6c <__sfp+0x38>
 4006e64:	4006c180 	call	4006c18 <__sinit.part.1>
 4006e68:	81000017 	ldw	r4,0(r16)
 4006e6c:	2480b804 	addi	r18,r4,736
 4006e70:	047fffc4 	movi	r17,-1
 4006e74:	91000117 	ldw	r4,4(r18)
 4006e78:	94000217 	ldw	r16,8(r18)
 4006e7c:	213fffc4 	addi	r4,r4,-1
 4006e80:	20000a16 	blt	r4,zero,4006eac <__sfp+0x78>
 4006e84:	8080030f 	ldh	r2,12(r16)
 4006e88:	10000c26 	beq	r2,zero,4006ebc <__sfp+0x88>
 4006e8c:	80c01d04 	addi	r3,r16,116
 4006e90:	00000206 	br	4006e9c <__sfp+0x68>
 4006e94:	18bfe60f 	ldh	r2,-104(r3)
 4006e98:	10000826 	beq	r2,zero,4006ebc <__sfp+0x88>
 4006e9c:	213fffc4 	addi	r4,r4,-1
 4006ea0:	1c3ffd04 	addi	r16,r3,-12
 4006ea4:	18c01a04 	addi	r3,r3,104
 4006ea8:	247ffa1e 	bne	r4,r17,4006e94 <__alt_data_end+0xfc006e94>
 4006eac:	90800017 	ldw	r2,0(r18)
 4006eb0:	10001d26 	beq	r2,zero,4006f28 <__sfp+0xf4>
 4006eb4:	1025883a 	mov	r18,r2
 4006eb8:	003fee06 	br	4006e74 <__alt_data_end+0xfc006e74>
 4006ebc:	00bfffc4 	movi	r2,-1
 4006ec0:	8080038d 	sth	r2,14(r16)
 4006ec4:	00800044 	movi	r2,1
 4006ec8:	8080030d 	sth	r2,12(r16)
 4006ecc:	80001915 	stw	zero,100(r16)
 4006ed0:	80000015 	stw	zero,0(r16)
 4006ed4:	80000215 	stw	zero,8(r16)
 4006ed8:	80000115 	stw	zero,4(r16)
 4006edc:	80000415 	stw	zero,16(r16)
 4006ee0:	80000515 	stw	zero,20(r16)
 4006ee4:	80000615 	stw	zero,24(r16)
 4006ee8:	01800204 	movi	r6,8
 4006eec:	000b883a 	mov	r5,zero
 4006ef0:	81001704 	addi	r4,r16,92
 4006ef4:	4004cb40 	call	4004cb4 <memset>
 4006ef8:	8005883a 	mov	r2,r16
 4006efc:	80000c15 	stw	zero,48(r16)
 4006f00:	80000d15 	stw	zero,52(r16)
 4006f04:	80001115 	stw	zero,68(r16)
 4006f08:	80001215 	stw	zero,72(r16)
 4006f0c:	dfc00417 	ldw	ra,16(sp)
 4006f10:	dcc00317 	ldw	r19,12(sp)
 4006f14:	dc800217 	ldw	r18,8(sp)
 4006f18:	dc400117 	ldw	r17,4(sp)
 4006f1c:	dc000017 	ldw	r16,0(sp)
 4006f20:	dec00504 	addi	sp,sp,20
 4006f24:	f800283a 	ret
 4006f28:	01400104 	movi	r5,4
 4006f2c:	9809883a 	mov	r4,r19
 4006f30:	4006dbc0 	call	4006dbc <__sfmoreglue>
 4006f34:	90800015 	stw	r2,0(r18)
 4006f38:	103fde1e 	bne	r2,zero,4006eb4 <__alt_data_end+0xfc006eb4>
 4006f3c:	00800304 	movi	r2,12
 4006f40:	98800015 	stw	r2,0(r19)
 4006f44:	0005883a 	mov	r2,zero
 4006f48:	003ff006 	br	4006f0c <__alt_data_end+0xfc006f0c>

04006f4c <_cleanup>:
 4006f4c:	00810074 	movhi	r2,1025
 4006f50:	10bc5804 	addi	r2,r2,-3744
 4006f54:	11000017 	ldw	r4,0(r2)
 4006f58:	01410074 	movhi	r5,1025
 4006f5c:	29656004 	addi	r5,r5,-27264
 4006f60:	4007b7c1 	jmpi	4007b7c <_fwalk_reent>

04006f64 <__sinit>:
 4006f64:	20800e17 	ldw	r2,56(r4)
 4006f68:	10000126 	beq	r2,zero,4006f70 <__sinit+0xc>
 4006f6c:	f800283a 	ret
 4006f70:	4006c181 	jmpi	4006c18 <__sinit.part.1>

04006f74 <__sfp_lock_acquire>:
 4006f74:	f800283a 	ret

04006f78 <__sfp_lock_release>:
 4006f78:	f800283a 	ret

04006f7c <__sinit_lock_acquire>:
 4006f7c:	f800283a 	ret

04006f80 <__sinit_lock_release>:
 4006f80:	f800283a 	ret

04006f84 <__fp_lock_all>:
 4006f84:	00810074 	movhi	r2,1025
 4006f88:	10bc5904 	addi	r2,r2,-3740
 4006f8c:	11000017 	ldw	r4,0(r2)
 4006f90:	01410034 	movhi	r5,1024
 4006f94:	295b6d04 	addi	r5,r5,28084
 4006f98:	4007ab81 	jmpi	4007ab8 <_fwalk>

04006f9c <__fp_unlock_all>:
 4006f9c:	00810074 	movhi	r2,1025
 4006fa0:	10bc5904 	addi	r2,r2,-3740
 4006fa4:	11000017 	ldw	r4,0(r2)
 4006fa8:	01410034 	movhi	r5,1024
 4006fac:	295b0104 	addi	r5,r5,27652
 4006fb0:	4007ab81 	jmpi	4007ab8 <_fwalk>

04006fb4 <__fputwc>:
 4006fb4:	defff804 	addi	sp,sp,-32
 4006fb8:	dcc00415 	stw	r19,16(sp)
 4006fbc:	dc800315 	stw	r18,12(sp)
 4006fc0:	dc000115 	stw	r16,4(sp)
 4006fc4:	dfc00715 	stw	ra,28(sp)
 4006fc8:	dd400615 	stw	r21,24(sp)
 4006fcc:	dd000515 	stw	r20,20(sp)
 4006fd0:	dc400215 	stw	r17,8(sp)
 4006fd4:	2027883a 	mov	r19,r4
 4006fd8:	2825883a 	mov	r18,r5
 4006fdc:	3021883a 	mov	r16,r6
 4006fe0:	4007cc80 	call	4007cc8 <__locale_mb_cur_max>
 4006fe4:	00c00044 	movi	r3,1
 4006fe8:	10c03e26 	beq	r2,r3,40070e4 <__fputwc+0x130>
 4006fec:	81c01704 	addi	r7,r16,92
 4006ff0:	900d883a 	mov	r6,r18
 4006ff4:	d80b883a 	mov	r5,sp
 4006ff8:	9809883a 	mov	r4,r19
 4006ffc:	40092e40 	call	40092e4 <_wcrtomb_r>
 4007000:	1029883a 	mov	r20,r2
 4007004:	00bfffc4 	movi	r2,-1
 4007008:	a0802026 	beq	r20,r2,400708c <__fputwc+0xd8>
 400700c:	d9400003 	ldbu	r5,0(sp)
 4007010:	a0001c26 	beq	r20,zero,4007084 <__fputwc+0xd0>
 4007014:	0023883a 	mov	r17,zero
 4007018:	05400284 	movi	r21,10
 400701c:	00000906 	br	4007044 <__fputwc+0x90>
 4007020:	80800017 	ldw	r2,0(r16)
 4007024:	11400005 	stb	r5,0(r2)
 4007028:	80c00017 	ldw	r3,0(r16)
 400702c:	18c00044 	addi	r3,r3,1
 4007030:	80c00015 	stw	r3,0(r16)
 4007034:	8c400044 	addi	r17,r17,1
 4007038:	dc45883a 	add	r2,sp,r17
 400703c:	8d00112e 	bgeu	r17,r20,4007084 <__fputwc+0xd0>
 4007040:	11400003 	ldbu	r5,0(r2)
 4007044:	80c00217 	ldw	r3,8(r16)
 4007048:	18ffffc4 	addi	r3,r3,-1
 400704c:	80c00215 	stw	r3,8(r16)
 4007050:	183ff30e 	bge	r3,zero,4007020 <__alt_data_end+0xfc007020>
 4007054:	80800617 	ldw	r2,24(r16)
 4007058:	18801916 	blt	r3,r2,40070c0 <__fputwc+0x10c>
 400705c:	80800017 	ldw	r2,0(r16)
 4007060:	11400005 	stb	r5,0(r2)
 4007064:	80800017 	ldw	r2,0(r16)
 4007068:	10c00003 	ldbu	r3,0(r2)
 400706c:	10800044 	addi	r2,r2,1
 4007070:	1d402326 	beq	r3,r21,4007100 <__fputwc+0x14c>
 4007074:	80800015 	stw	r2,0(r16)
 4007078:	8c400044 	addi	r17,r17,1
 400707c:	dc45883a 	add	r2,sp,r17
 4007080:	8d3fef36 	bltu	r17,r20,4007040 <__alt_data_end+0xfc007040>
 4007084:	9005883a 	mov	r2,r18
 4007088:	00000406 	br	400709c <__fputwc+0xe8>
 400708c:	80c0030b 	ldhu	r3,12(r16)
 4007090:	a005883a 	mov	r2,r20
 4007094:	18c01014 	ori	r3,r3,64
 4007098:	80c0030d 	sth	r3,12(r16)
 400709c:	dfc00717 	ldw	ra,28(sp)
 40070a0:	dd400617 	ldw	r21,24(sp)
 40070a4:	dd000517 	ldw	r20,20(sp)
 40070a8:	dcc00417 	ldw	r19,16(sp)
 40070ac:	dc800317 	ldw	r18,12(sp)
 40070b0:	dc400217 	ldw	r17,8(sp)
 40070b4:	dc000117 	ldw	r16,4(sp)
 40070b8:	dec00804 	addi	sp,sp,32
 40070bc:	f800283a 	ret
 40070c0:	800d883a 	mov	r6,r16
 40070c4:	29403fcc 	andi	r5,r5,255
 40070c8:	9809883a 	mov	r4,r19
 40070cc:	400918c0 	call	400918c <__swbuf_r>
 40070d0:	10bfffe0 	cmpeqi	r2,r2,-1
 40070d4:	10803fcc 	andi	r2,r2,255
 40070d8:	103fd626 	beq	r2,zero,4007034 <__alt_data_end+0xfc007034>
 40070dc:	00bfffc4 	movi	r2,-1
 40070e0:	003fee06 	br	400709c <__alt_data_end+0xfc00709c>
 40070e4:	90ffffc4 	addi	r3,r18,-1
 40070e8:	01003f84 	movi	r4,254
 40070ec:	20ffbf36 	bltu	r4,r3,4006fec <__alt_data_end+0xfc006fec>
 40070f0:	900b883a 	mov	r5,r18
 40070f4:	dc800005 	stb	r18,0(sp)
 40070f8:	1029883a 	mov	r20,r2
 40070fc:	003fc506 	br	4007014 <__alt_data_end+0xfc007014>
 4007100:	800d883a 	mov	r6,r16
 4007104:	a80b883a 	mov	r5,r21
 4007108:	9809883a 	mov	r4,r19
 400710c:	400918c0 	call	400918c <__swbuf_r>
 4007110:	10bfffe0 	cmpeqi	r2,r2,-1
 4007114:	003fef06 	br	40070d4 <__alt_data_end+0xfc0070d4>

04007118 <_fputwc_r>:
 4007118:	3080030b 	ldhu	r2,12(r6)
 400711c:	10c8000c 	andi	r3,r2,8192
 4007120:	1800051e 	bne	r3,zero,4007138 <_fputwc_r+0x20>
 4007124:	30c01917 	ldw	r3,100(r6)
 4007128:	10880014 	ori	r2,r2,8192
 400712c:	3080030d 	sth	r2,12(r6)
 4007130:	18880014 	ori	r2,r3,8192
 4007134:	30801915 	stw	r2,100(r6)
 4007138:	4006fb41 	jmpi	4006fb4 <__fputwc>

0400713c <fputwc>:
 400713c:	00810074 	movhi	r2,1025
 4007140:	defffc04 	addi	sp,sp,-16
 4007144:	10bc5904 	addi	r2,r2,-3740
 4007148:	dc000115 	stw	r16,4(sp)
 400714c:	14000017 	ldw	r16,0(r2)
 4007150:	dc400215 	stw	r17,8(sp)
 4007154:	dfc00315 	stw	ra,12(sp)
 4007158:	2023883a 	mov	r17,r4
 400715c:	80000226 	beq	r16,zero,4007168 <fputwc+0x2c>
 4007160:	80800e17 	ldw	r2,56(r16)
 4007164:	10001026 	beq	r2,zero,40071a8 <fputwc+0x6c>
 4007168:	2880030b 	ldhu	r2,12(r5)
 400716c:	10c8000c 	andi	r3,r2,8192
 4007170:	1800051e 	bne	r3,zero,4007188 <fputwc+0x4c>
 4007174:	28c01917 	ldw	r3,100(r5)
 4007178:	10880014 	ori	r2,r2,8192
 400717c:	2880030d 	sth	r2,12(r5)
 4007180:	18880014 	ori	r2,r3,8192
 4007184:	28801915 	stw	r2,100(r5)
 4007188:	280d883a 	mov	r6,r5
 400718c:	8009883a 	mov	r4,r16
 4007190:	880b883a 	mov	r5,r17
 4007194:	dfc00317 	ldw	ra,12(sp)
 4007198:	dc400217 	ldw	r17,8(sp)
 400719c:	dc000117 	ldw	r16,4(sp)
 40071a0:	dec00404 	addi	sp,sp,16
 40071a4:	4006fb41 	jmpi	4006fb4 <__fputwc>
 40071a8:	8009883a 	mov	r4,r16
 40071ac:	d9400015 	stw	r5,0(sp)
 40071b0:	4006f640 	call	4006f64 <__sinit>
 40071b4:	d9400017 	ldw	r5,0(sp)
 40071b8:	003feb06 	br	4007168 <__alt_data_end+0xfc007168>

040071bc <_malloc_trim_r>:
 40071bc:	defffb04 	addi	sp,sp,-20
 40071c0:	dcc00315 	stw	r19,12(sp)
 40071c4:	04c10074 	movhi	r19,1025
 40071c8:	dc800215 	stw	r18,8(sp)
 40071cc:	dc400115 	stw	r17,4(sp)
 40071d0:	dc000015 	stw	r16,0(sp)
 40071d4:	dfc00415 	stw	ra,16(sp)
 40071d8:	2821883a 	mov	r16,r5
 40071dc:	9cf6b804 	addi	r19,r19,-9504
 40071e0:	2025883a 	mov	r18,r4
 40071e4:	400ab100 	call	400ab10 <__malloc_lock>
 40071e8:	98800217 	ldw	r2,8(r19)
 40071ec:	14400117 	ldw	r17,4(r2)
 40071f0:	00bfff04 	movi	r2,-4
 40071f4:	88a2703a 	and	r17,r17,r2
 40071f8:	8c21c83a 	sub	r16,r17,r16
 40071fc:	8403fbc4 	addi	r16,r16,4079
 4007200:	8020d33a 	srli	r16,r16,12
 4007204:	0083ffc4 	movi	r2,4095
 4007208:	843fffc4 	addi	r16,r16,-1
 400720c:	8020933a 	slli	r16,r16,12
 4007210:	1400060e 	bge	r2,r16,400722c <_malloc_trim_r+0x70>
 4007214:	000b883a 	mov	r5,zero
 4007218:	9009883a 	mov	r4,r18
 400721c:	4008e880 	call	4008e88 <_sbrk_r>
 4007220:	98c00217 	ldw	r3,8(r19)
 4007224:	1c47883a 	add	r3,r3,r17
 4007228:	10c00a26 	beq	r2,r3,4007254 <_malloc_trim_r+0x98>
 400722c:	9009883a 	mov	r4,r18
 4007230:	400ab340 	call	400ab34 <__malloc_unlock>
 4007234:	0005883a 	mov	r2,zero
 4007238:	dfc00417 	ldw	ra,16(sp)
 400723c:	dcc00317 	ldw	r19,12(sp)
 4007240:	dc800217 	ldw	r18,8(sp)
 4007244:	dc400117 	ldw	r17,4(sp)
 4007248:	dc000017 	ldw	r16,0(sp)
 400724c:	dec00504 	addi	sp,sp,20
 4007250:	f800283a 	ret
 4007254:	040bc83a 	sub	r5,zero,r16
 4007258:	9009883a 	mov	r4,r18
 400725c:	4008e880 	call	4008e88 <_sbrk_r>
 4007260:	00ffffc4 	movi	r3,-1
 4007264:	10c00d26 	beq	r2,r3,400729c <_malloc_trim_r+0xe0>
 4007268:	00c10074 	movhi	r3,1025
 400726c:	18c34f04 	addi	r3,r3,3388
 4007270:	18800017 	ldw	r2,0(r3)
 4007274:	99000217 	ldw	r4,8(r19)
 4007278:	8c23c83a 	sub	r17,r17,r16
 400727c:	8c400054 	ori	r17,r17,1
 4007280:	1421c83a 	sub	r16,r2,r16
 4007284:	24400115 	stw	r17,4(r4)
 4007288:	9009883a 	mov	r4,r18
 400728c:	1c000015 	stw	r16,0(r3)
 4007290:	400ab340 	call	400ab34 <__malloc_unlock>
 4007294:	00800044 	movi	r2,1
 4007298:	003fe706 	br	4007238 <__alt_data_end+0xfc007238>
 400729c:	000b883a 	mov	r5,zero
 40072a0:	9009883a 	mov	r4,r18
 40072a4:	4008e880 	call	4008e88 <_sbrk_r>
 40072a8:	99000217 	ldw	r4,8(r19)
 40072ac:	014003c4 	movi	r5,15
 40072b0:	1107c83a 	sub	r3,r2,r4
 40072b4:	28ffdd0e 	bge	r5,r3,400722c <__alt_data_end+0xfc00722c>
 40072b8:	01410074 	movhi	r5,1025
 40072bc:	297c5b04 	addi	r5,r5,-3732
 40072c0:	29400017 	ldw	r5,0(r5)
 40072c4:	18c00054 	ori	r3,r3,1
 40072c8:	20c00115 	stw	r3,4(r4)
 40072cc:	00c10074 	movhi	r3,1025
 40072d0:	1145c83a 	sub	r2,r2,r5
 40072d4:	18c34f04 	addi	r3,r3,3388
 40072d8:	18800015 	stw	r2,0(r3)
 40072dc:	003fd306 	br	400722c <__alt_data_end+0xfc00722c>

040072e0 <_free_r>:
 40072e0:	28004126 	beq	r5,zero,40073e8 <_free_r+0x108>
 40072e4:	defffd04 	addi	sp,sp,-12
 40072e8:	dc400115 	stw	r17,4(sp)
 40072ec:	dc000015 	stw	r16,0(sp)
 40072f0:	2023883a 	mov	r17,r4
 40072f4:	2821883a 	mov	r16,r5
 40072f8:	dfc00215 	stw	ra,8(sp)
 40072fc:	400ab100 	call	400ab10 <__malloc_lock>
 4007300:	81ffff17 	ldw	r7,-4(r16)
 4007304:	00bfff84 	movi	r2,-2
 4007308:	01010074 	movhi	r4,1025
 400730c:	81bffe04 	addi	r6,r16,-8
 4007310:	3884703a 	and	r2,r7,r2
 4007314:	2136b804 	addi	r4,r4,-9504
 4007318:	308b883a 	add	r5,r6,r2
 400731c:	2a400117 	ldw	r9,4(r5)
 4007320:	22000217 	ldw	r8,8(r4)
 4007324:	00ffff04 	movi	r3,-4
 4007328:	48c6703a 	and	r3,r9,r3
 400732c:	2a005726 	beq	r5,r8,400748c <_free_r+0x1ac>
 4007330:	28c00115 	stw	r3,4(r5)
 4007334:	39c0004c 	andi	r7,r7,1
 4007338:	3800091e 	bne	r7,zero,4007360 <_free_r+0x80>
 400733c:	823ffe17 	ldw	r8,-8(r16)
 4007340:	22400204 	addi	r9,r4,8
 4007344:	320dc83a 	sub	r6,r6,r8
 4007348:	31c00217 	ldw	r7,8(r6)
 400734c:	1205883a 	add	r2,r2,r8
 4007350:	3a406526 	beq	r7,r9,40074e8 <_free_r+0x208>
 4007354:	32000317 	ldw	r8,12(r6)
 4007358:	3a000315 	stw	r8,12(r7)
 400735c:	41c00215 	stw	r7,8(r8)
 4007360:	28cf883a 	add	r7,r5,r3
 4007364:	39c00117 	ldw	r7,4(r7)
 4007368:	39c0004c 	andi	r7,r7,1
 400736c:	38003a26 	beq	r7,zero,4007458 <_free_r+0x178>
 4007370:	10c00054 	ori	r3,r2,1
 4007374:	30c00115 	stw	r3,4(r6)
 4007378:	3087883a 	add	r3,r6,r2
 400737c:	18800015 	stw	r2,0(r3)
 4007380:	00c07fc4 	movi	r3,511
 4007384:	18801936 	bltu	r3,r2,40073ec <_free_r+0x10c>
 4007388:	1004d0fa 	srli	r2,r2,3
 400738c:	01c00044 	movi	r7,1
 4007390:	21400117 	ldw	r5,4(r4)
 4007394:	10c00044 	addi	r3,r2,1
 4007398:	18c7883a 	add	r3,r3,r3
 400739c:	1005d0ba 	srai	r2,r2,2
 40073a0:	18c7883a 	add	r3,r3,r3
 40073a4:	18c7883a 	add	r3,r3,r3
 40073a8:	1907883a 	add	r3,r3,r4
 40073ac:	3884983a 	sll	r2,r7,r2
 40073b0:	19c00017 	ldw	r7,0(r3)
 40073b4:	1a3ffe04 	addi	r8,r3,-8
 40073b8:	1144b03a 	or	r2,r2,r5
 40073bc:	32000315 	stw	r8,12(r6)
 40073c0:	31c00215 	stw	r7,8(r6)
 40073c4:	20800115 	stw	r2,4(r4)
 40073c8:	19800015 	stw	r6,0(r3)
 40073cc:	39800315 	stw	r6,12(r7)
 40073d0:	8809883a 	mov	r4,r17
 40073d4:	dfc00217 	ldw	ra,8(sp)
 40073d8:	dc400117 	ldw	r17,4(sp)
 40073dc:	dc000017 	ldw	r16,0(sp)
 40073e0:	dec00304 	addi	sp,sp,12
 40073e4:	400ab341 	jmpi	400ab34 <__malloc_unlock>
 40073e8:	f800283a 	ret
 40073ec:	100ad27a 	srli	r5,r2,9
 40073f0:	00c00104 	movi	r3,4
 40073f4:	19404a36 	bltu	r3,r5,4007520 <_free_r+0x240>
 40073f8:	100ad1ba 	srli	r5,r2,6
 40073fc:	28c00e44 	addi	r3,r5,57
 4007400:	18c7883a 	add	r3,r3,r3
 4007404:	29400e04 	addi	r5,r5,56
 4007408:	18c7883a 	add	r3,r3,r3
 400740c:	18c7883a 	add	r3,r3,r3
 4007410:	1909883a 	add	r4,r3,r4
 4007414:	20c00017 	ldw	r3,0(r4)
 4007418:	01c10074 	movhi	r7,1025
 400741c:	213ffe04 	addi	r4,r4,-8
 4007420:	39f6b804 	addi	r7,r7,-9504
 4007424:	20c04426 	beq	r4,r3,4007538 <_free_r+0x258>
 4007428:	01ffff04 	movi	r7,-4
 400742c:	19400117 	ldw	r5,4(r3)
 4007430:	29ca703a 	and	r5,r5,r7
 4007434:	1140022e 	bgeu	r2,r5,4007440 <_free_r+0x160>
 4007438:	18c00217 	ldw	r3,8(r3)
 400743c:	20fffb1e 	bne	r4,r3,400742c <__alt_data_end+0xfc00742c>
 4007440:	19000317 	ldw	r4,12(r3)
 4007444:	31000315 	stw	r4,12(r6)
 4007448:	30c00215 	stw	r3,8(r6)
 400744c:	21800215 	stw	r6,8(r4)
 4007450:	19800315 	stw	r6,12(r3)
 4007454:	003fde06 	br	40073d0 <__alt_data_end+0xfc0073d0>
 4007458:	29c00217 	ldw	r7,8(r5)
 400745c:	10c5883a 	add	r2,r2,r3
 4007460:	00c10074 	movhi	r3,1025
 4007464:	18f6ba04 	addi	r3,r3,-9496
 4007468:	38c03b26 	beq	r7,r3,4007558 <_free_r+0x278>
 400746c:	2a000317 	ldw	r8,12(r5)
 4007470:	11400054 	ori	r5,r2,1
 4007474:	3087883a 	add	r3,r6,r2
 4007478:	3a000315 	stw	r8,12(r7)
 400747c:	41c00215 	stw	r7,8(r8)
 4007480:	31400115 	stw	r5,4(r6)
 4007484:	18800015 	stw	r2,0(r3)
 4007488:	003fbd06 	br	4007380 <__alt_data_end+0xfc007380>
 400748c:	39c0004c 	andi	r7,r7,1
 4007490:	10c5883a 	add	r2,r2,r3
 4007494:	3800071e 	bne	r7,zero,40074b4 <_free_r+0x1d4>
 4007498:	81fffe17 	ldw	r7,-8(r16)
 400749c:	31cdc83a 	sub	r6,r6,r7
 40074a0:	30c00317 	ldw	r3,12(r6)
 40074a4:	31400217 	ldw	r5,8(r6)
 40074a8:	11c5883a 	add	r2,r2,r7
 40074ac:	28c00315 	stw	r3,12(r5)
 40074b0:	19400215 	stw	r5,8(r3)
 40074b4:	10c00054 	ori	r3,r2,1
 40074b8:	30c00115 	stw	r3,4(r6)
 40074bc:	00c10074 	movhi	r3,1025
 40074c0:	18fc5c04 	addi	r3,r3,-3728
 40074c4:	18c00017 	ldw	r3,0(r3)
 40074c8:	21800215 	stw	r6,8(r4)
 40074cc:	10ffc036 	bltu	r2,r3,40073d0 <__alt_data_end+0xfc0073d0>
 40074d0:	00810074 	movhi	r2,1025
 40074d4:	10834704 	addi	r2,r2,3356
 40074d8:	11400017 	ldw	r5,0(r2)
 40074dc:	8809883a 	mov	r4,r17
 40074e0:	40071bc0 	call	40071bc <_malloc_trim_r>
 40074e4:	003fba06 	br	40073d0 <__alt_data_end+0xfc0073d0>
 40074e8:	28c9883a 	add	r4,r5,r3
 40074ec:	21000117 	ldw	r4,4(r4)
 40074f0:	2100004c 	andi	r4,r4,1
 40074f4:	2000391e 	bne	r4,zero,40075dc <_free_r+0x2fc>
 40074f8:	29c00217 	ldw	r7,8(r5)
 40074fc:	29000317 	ldw	r4,12(r5)
 4007500:	1885883a 	add	r2,r3,r2
 4007504:	10c00054 	ori	r3,r2,1
 4007508:	39000315 	stw	r4,12(r7)
 400750c:	21c00215 	stw	r7,8(r4)
 4007510:	30c00115 	stw	r3,4(r6)
 4007514:	308d883a 	add	r6,r6,r2
 4007518:	30800015 	stw	r2,0(r6)
 400751c:	003fac06 	br	40073d0 <__alt_data_end+0xfc0073d0>
 4007520:	00c00504 	movi	r3,20
 4007524:	19401536 	bltu	r3,r5,400757c <_free_r+0x29c>
 4007528:	28c01704 	addi	r3,r5,92
 400752c:	18c7883a 	add	r3,r3,r3
 4007530:	294016c4 	addi	r5,r5,91
 4007534:	003fb406 	br	4007408 <__alt_data_end+0xfc007408>
 4007538:	280bd0ba 	srai	r5,r5,2
 400753c:	00c00044 	movi	r3,1
 4007540:	38800117 	ldw	r2,4(r7)
 4007544:	194a983a 	sll	r5,r3,r5
 4007548:	2007883a 	mov	r3,r4
 400754c:	2884b03a 	or	r2,r5,r2
 4007550:	38800115 	stw	r2,4(r7)
 4007554:	003fbb06 	br	4007444 <__alt_data_end+0xfc007444>
 4007558:	21800515 	stw	r6,20(r4)
 400755c:	21800415 	stw	r6,16(r4)
 4007560:	10c00054 	ori	r3,r2,1
 4007564:	31c00315 	stw	r7,12(r6)
 4007568:	31c00215 	stw	r7,8(r6)
 400756c:	30c00115 	stw	r3,4(r6)
 4007570:	308d883a 	add	r6,r6,r2
 4007574:	30800015 	stw	r2,0(r6)
 4007578:	003f9506 	br	40073d0 <__alt_data_end+0xfc0073d0>
 400757c:	00c01504 	movi	r3,84
 4007580:	19400536 	bltu	r3,r5,4007598 <_free_r+0x2b8>
 4007584:	100ad33a 	srli	r5,r2,12
 4007588:	28c01bc4 	addi	r3,r5,111
 400758c:	18c7883a 	add	r3,r3,r3
 4007590:	29401b84 	addi	r5,r5,110
 4007594:	003f9c06 	br	4007408 <__alt_data_end+0xfc007408>
 4007598:	00c05504 	movi	r3,340
 400759c:	19400536 	bltu	r3,r5,40075b4 <_free_r+0x2d4>
 40075a0:	100ad3fa 	srli	r5,r2,15
 40075a4:	28c01e04 	addi	r3,r5,120
 40075a8:	18c7883a 	add	r3,r3,r3
 40075ac:	29401dc4 	addi	r5,r5,119
 40075b0:	003f9506 	br	4007408 <__alt_data_end+0xfc007408>
 40075b4:	00c15504 	movi	r3,1364
 40075b8:	19400536 	bltu	r3,r5,40075d0 <_free_r+0x2f0>
 40075bc:	100ad4ba 	srli	r5,r2,18
 40075c0:	28c01f44 	addi	r3,r5,125
 40075c4:	18c7883a 	add	r3,r3,r3
 40075c8:	29401f04 	addi	r5,r5,124
 40075cc:	003f8e06 	br	4007408 <__alt_data_end+0xfc007408>
 40075d0:	00c03f84 	movi	r3,254
 40075d4:	01401f84 	movi	r5,126
 40075d8:	003f8b06 	br	4007408 <__alt_data_end+0xfc007408>
 40075dc:	10c00054 	ori	r3,r2,1
 40075e0:	30c00115 	stw	r3,4(r6)
 40075e4:	308d883a 	add	r6,r6,r2
 40075e8:	30800015 	stw	r2,0(r6)
 40075ec:	003f7806 	br	40073d0 <__alt_data_end+0xfc0073d0>

040075f0 <__sfvwrite_r>:
 40075f0:	30800217 	ldw	r2,8(r6)
 40075f4:	10006726 	beq	r2,zero,4007794 <__sfvwrite_r+0x1a4>
 40075f8:	28c0030b 	ldhu	r3,12(r5)
 40075fc:	defff404 	addi	sp,sp,-48
 4007600:	dd400715 	stw	r21,28(sp)
 4007604:	dd000615 	stw	r20,24(sp)
 4007608:	dc000215 	stw	r16,8(sp)
 400760c:	dfc00b15 	stw	ra,44(sp)
 4007610:	df000a15 	stw	fp,40(sp)
 4007614:	ddc00915 	stw	r23,36(sp)
 4007618:	dd800815 	stw	r22,32(sp)
 400761c:	dcc00515 	stw	r19,20(sp)
 4007620:	dc800415 	stw	r18,16(sp)
 4007624:	dc400315 	stw	r17,12(sp)
 4007628:	1880020c 	andi	r2,r3,8
 400762c:	2821883a 	mov	r16,r5
 4007630:	202b883a 	mov	r21,r4
 4007634:	3029883a 	mov	r20,r6
 4007638:	10002726 	beq	r2,zero,40076d8 <__sfvwrite_r+0xe8>
 400763c:	28800417 	ldw	r2,16(r5)
 4007640:	10002526 	beq	r2,zero,40076d8 <__sfvwrite_r+0xe8>
 4007644:	1880008c 	andi	r2,r3,2
 4007648:	a4400017 	ldw	r17,0(r20)
 400764c:	10002a26 	beq	r2,zero,40076f8 <__sfvwrite_r+0x108>
 4007650:	05a00034 	movhi	r22,32768
 4007654:	0027883a 	mov	r19,zero
 4007658:	0025883a 	mov	r18,zero
 400765c:	b5bf0004 	addi	r22,r22,-1024
 4007660:	980d883a 	mov	r6,r19
 4007664:	a809883a 	mov	r4,r21
 4007668:	90004626 	beq	r18,zero,4007784 <__sfvwrite_r+0x194>
 400766c:	900f883a 	mov	r7,r18
 4007670:	b480022e 	bgeu	r22,r18,400767c <__sfvwrite_r+0x8c>
 4007674:	01e00034 	movhi	r7,32768
 4007678:	39ff0004 	addi	r7,r7,-1024
 400767c:	80800917 	ldw	r2,36(r16)
 4007680:	81400717 	ldw	r5,28(r16)
 4007684:	103ee83a 	callr	r2
 4007688:	00805a0e 	bge	zero,r2,40077f4 <__sfvwrite_r+0x204>
 400768c:	a0c00217 	ldw	r3,8(r20)
 4007690:	98a7883a 	add	r19,r19,r2
 4007694:	90a5c83a 	sub	r18,r18,r2
 4007698:	1885c83a 	sub	r2,r3,r2
 400769c:	a0800215 	stw	r2,8(r20)
 40076a0:	103fef1e 	bne	r2,zero,4007660 <__alt_data_end+0xfc007660>
 40076a4:	0005883a 	mov	r2,zero
 40076a8:	dfc00b17 	ldw	ra,44(sp)
 40076ac:	df000a17 	ldw	fp,40(sp)
 40076b0:	ddc00917 	ldw	r23,36(sp)
 40076b4:	dd800817 	ldw	r22,32(sp)
 40076b8:	dd400717 	ldw	r21,28(sp)
 40076bc:	dd000617 	ldw	r20,24(sp)
 40076c0:	dcc00517 	ldw	r19,20(sp)
 40076c4:	dc800417 	ldw	r18,16(sp)
 40076c8:	dc400317 	ldw	r17,12(sp)
 40076cc:	dc000217 	ldw	r16,8(sp)
 40076d0:	dec00c04 	addi	sp,sp,48
 40076d4:	f800283a 	ret
 40076d8:	800b883a 	mov	r5,r16
 40076dc:	a809883a 	mov	r4,r21
 40076e0:	40068080 	call	4006808 <__swsetup_r>
 40076e4:	1000ee1e 	bne	r2,zero,4007aa0 <__sfvwrite_r+0x4b0>
 40076e8:	80c0030b 	ldhu	r3,12(r16)
 40076ec:	a4400017 	ldw	r17,0(r20)
 40076f0:	1880008c 	andi	r2,r3,2
 40076f4:	103fd61e 	bne	r2,zero,4007650 <__alt_data_end+0xfc007650>
 40076f8:	1880004c 	andi	r2,r3,1
 40076fc:	1000421e 	bne	r2,zero,4007808 <__sfvwrite_r+0x218>
 4007700:	0039883a 	mov	fp,zero
 4007704:	0025883a 	mov	r18,zero
 4007708:	90001a26 	beq	r18,zero,4007774 <__sfvwrite_r+0x184>
 400770c:	1880800c 	andi	r2,r3,512
 4007710:	84c00217 	ldw	r19,8(r16)
 4007714:	10002126 	beq	r2,zero,400779c <__sfvwrite_r+0x1ac>
 4007718:	982f883a 	mov	r23,r19
 400771c:	94c09636 	bltu	r18,r19,4007978 <__sfvwrite_r+0x388>
 4007720:	1881200c 	andi	r2,r3,1152
 4007724:	1000a11e 	bne	r2,zero,40079ac <__sfvwrite_r+0x3bc>
 4007728:	81000017 	ldw	r4,0(r16)
 400772c:	b80d883a 	mov	r6,r23
 4007730:	e00b883a 	mov	r5,fp
 4007734:	40087c80 	call	40087c8 <memmove>
 4007738:	80c00217 	ldw	r3,8(r16)
 400773c:	81000017 	ldw	r4,0(r16)
 4007740:	9005883a 	mov	r2,r18
 4007744:	1ce7c83a 	sub	r19,r3,r19
 4007748:	25cf883a 	add	r7,r4,r23
 400774c:	84c00215 	stw	r19,8(r16)
 4007750:	81c00015 	stw	r7,0(r16)
 4007754:	a0c00217 	ldw	r3,8(r20)
 4007758:	e0b9883a 	add	fp,fp,r2
 400775c:	90a5c83a 	sub	r18,r18,r2
 4007760:	18a7c83a 	sub	r19,r3,r2
 4007764:	a4c00215 	stw	r19,8(r20)
 4007768:	983fce26 	beq	r19,zero,40076a4 <__alt_data_end+0xfc0076a4>
 400776c:	80c0030b 	ldhu	r3,12(r16)
 4007770:	903fe61e 	bne	r18,zero,400770c <__alt_data_end+0xfc00770c>
 4007774:	8f000017 	ldw	fp,0(r17)
 4007778:	8c800117 	ldw	r18,4(r17)
 400777c:	8c400204 	addi	r17,r17,8
 4007780:	003fe106 	br	4007708 <__alt_data_end+0xfc007708>
 4007784:	8cc00017 	ldw	r19,0(r17)
 4007788:	8c800117 	ldw	r18,4(r17)
 400778c:	8c400204 	addi	r17,r17,8
 4007790:	003fb306 	br	4007660 <__alt_data_end+0xfc007660>
 4007794:	0005883a 	mov	r2,zero
 4007798:	f800283a 	ret
 400779c:	81000017 	ldw	r4,0(r16)
 40077a0:	80800417 	ldw	r2,16(r16)
 40077a4:	11005a36 	bltu	r2,r4,4007910 <__sfvwrite_r+0x320>
 40077a8:	85c00517 	ldw	r23,20(r16)
 40077ac:	95c05836 	bltu	r18,r23,4007910 <__sfvwrite_r+0x320>
 40077b0:	00a00034 	movhi	r2,32768
 40077b4:	10bfffc4 	addi	r2,r2,-1
 40077b8:	9009883a 	mov	r4,r18
 40077bc:	1480012e 	bgeu	r2,r18,40077c4 <__sfvwrite_r+0x1d4>
 40077c0:	1009883a 	mov	r4,r2
 40077c4:	b80b883a 	mov	r5,r23
 40077c8:	40033e80 	call	40033e8 <__divsi3>
 40077cc:	b80b883a 	mov	r5,r23
 40077d0:	1009883a 	mov	r4,r2
 40077d4:	400359c0 	call	400359c <__mulsi3>
 40077d8:	81400717 	ldw	r5,28(r16)
 40077dc:	80c00917 	ldw	r3,36(r16)
 40077e0:	100f883a 	mov	r7,r2
 40077e4:	e00d883a 	mov	r6,fp
 40077e8:	a809883a 	mov	r4,r21
 40077ec:	183ee83a 	callr	r3
 40077f0:	00bfd816 	blt	zero,r2,4007754 <__alt_data_end+0xfc007754>
 40077f4:	8080030b 	ldhu	r2,12(r16)
 40077f8:	10801014 	ori	r2,r2,64
 40077fc:	8080030d 	sth	r2,12(r16)
 4007800:	00bfffc4 	movi	r2,-1
 4007804:	003fa806 	br	40076a8 <__alt_data_end+0xfc0076a8>
 4007808:	0027883a 	mov	r19,zero
 400780c:	0011883a 	mov	r8,zero
 4007810:	0039883a 	mov	fp,zero
 4007814:	0025883a 	mov	r18,zero
 4007818:	90001f26 	beq	r18,zero,4007898 <__sfvwrite_r+0x2a8>
 400781c:	40005a26 	beq	r8,zero,4007988 <__sfvwrite_r+0x398>
 4007820:	982d883a 	mov	r22,r19
 4007824:	94c0012e 	bgeu	r18,r19,400782c <__sfvwrite_r+0x23c>
 4007828:	902d883a 	mov	r22,r18
 400782c:	81000017 	ldw	r4,0(r16)
 4007830:	80800417 	ldw	r2,16(r16)
 4007834:	b02f883a 	mov	r23,r22
 4007838:	81c00517 	ldw	r7,20(r16)
 400783c:	1100032e 	bgeu	r2,r4,400784c <__sfvwrite_r+0x25c>
 4007840:	80c00217 	ldw	r3,8(r16)
 4007844:	38c7883a 	add	r3,r7,r3
 4007848:	1d801816 	blt	r3,r22,40078ac <__sfvwrite_r+0x2bc>
 400784c:	b1c03e16 	blt	r22,r7,4007948 <__sfvwrite_r+0x358>
 4007850:	80800917 	ldw	r2,36(r16)
 4007854:	81400717 	ldw	r5,28(r16)
 4007858:	e00d883a 	mov	r6,fp
 400785c:	da000115 	stw	r8,4(sp)
 4007860:	a809883a 	mov	r4,r21
 4007864:	103ee83a 	callr	r2
 4007868:	102f883a 	mov	r23,r2
 400786c:	da000117 	ldw	r8,4(sp)
 4007870:	00bfe00e 	bge	zero,r2,40077f4 <__alt_data_end+0xfc0077f4>
 4007874:	9de7c83a 	sub	r19,r19,r23
 4007878:	98001f26 	beq	r19,zero,40078f8 <__sfvwrite_r+0x308>
 400787c:	a0800217 	ldw	r2,8(r20)
 4007880:	e5f9883a 	add	fp,fp,r23
 4007884:	95e5c83a 	sub	r18,r18,r23
 4007888:	15efc83a 	sub	r23,r2,r23
 400788c:	a5c00215 	stw	r23,8(r20)
 4007890:	b83f8426 	beq	r23,zero,40076a4 <__alt_data_end+0xfc0076a4>
 4007894:	903fe11e 	bne	r18,zero,400781c <__alt_data_end+0xfc00781c>
 4007898:	8f000017 	ldw	fp,0(r17)
 400789c:	8c800117 	ldw	r18,4(r17)
 40078a0:	0011883a 	mov	r8,zero
 40078a4:	8c400204 	addi	r17,r17,8
 40078a8:	003fdb06 	br	4007818 <__alt_data_end+0xfc007818>
 40078ac:	180d883a 	mov	r6,r3
 40078b0:	e00b883a 	mov	r5,fp
 40078b4:	da000115 	stw	r8,4(sp)
 40078b8:	d8c00015 	stw	r3,0(sp)
 40078bc:	40087c80 	call	40087c8 <memmove>
 40078c0:	d8c00017 	ldw	r3,0(sp)
 40078c4:	80800017 	ldw	r2,0(r16)
 40078c8:	800b883a 	mov	r5,r16
 40078cc:	a809883a 	mov	r4,r21
 40078d0:	10c5883a 	add	r2,r2,r3
 40078d4:	80800015 	stw	r2,0(r16)
 40078d8:	d8c00015 	stw	r3,0(sp)
 40078dc:	4006b780 	call	4006b78 <_fflush_r>
 40078e0:	d8c00017 	ldw	r3,0(sp)
 40078e4:	da000117 	ldw	r8,4(sp)
 40078e8:	103fc21e 	bne	r2,zero,40077f4 <__alt_data_end+0xfc0077f4>
 40078ec:	182f883a 	mov	r23,r3
 40078f0:	9de7c83a 	sub	r19,r19,r23
 40078f4:	983fe11e 	bne	r19,zero,400787c <__alt_data_end+0xfc00787c>
 40078f8:	800b883a 	mov	r5,r16
 40078fc:	a809883a 	mov	r4,r21
 4007900:	4006b780 	call	4006b78 <_fflush_r>
 4007904:	103fbb1e 	bne	r2,zero,40077f4 <__alt_data_end+0xfc0077f4>
 4007908:	0011883a 	mov	r8,zero
 400790c:	003fdb06 	br	400787c <__alt_data_end+0xfc00787c>
 4007910:	94c0012e 	bgeu	r18,r19,4007918 <__sfvwrite_r+0x328>
 4007914:	9027883a 	mov	r19,r18
 4007918:	980d883a 	mov	r6,r19
 400791c:	e00b883a 	mov	r5,fp
 4007920:	40087c80 	call	40087c8 <memmove>
 4007924:	80800217 	ldw	r2,8(r16)
 4007928:	80c00017 	ldw	r3,0(r16)
 400792c:	14c5c83a 	sub	r2,r2,r19
 4007930:	1cc7883a 	add	r3,r3,r19
 4007934:	80800215 	stw	r2,8(r16)
 4007938:	80c00015 	stw	r3,0(r16)
 400793c:	10004326 	beq	r2,zero,4007a4c <__sfvwrite_r+0x45c>
 4007940:	9805883a 	mov	r2,r19
 4007944:	003f8306 	br	4007754 <__alt_data_end+0xfc007754>
 4007948:	b00d883a 	mov	r6,r22
 400794c:	e00b883a 	mov	r5,fp
 4007950:	da000115 	stw	r8,4(sp)
 4007954:	40087c80 	call	40087c8 <memmove>
 4007958:	80800217 	ldw	r2,8(r16)
 400795c:	80c00017 	ldw	r3,0(r16)
 4007960:	da000117 	ldw	r8,4(sp)
 4007964:	1585c83a 	sub	r2,r2,r22
 4007968:	1dad883a 	add	r22,r3,r22
 400796c:	80800215 	stw	r2,8(r16)
 4007970:	85800015 	stw	r22,0(r16)
 4007974:	003fbf06 	br	4007874 <__alt_data_end+0xfc007874>
 4007978:	81000017 	ldw	r4,0(r16)
 400797c:	9027883a 	mov	r19,r18
 4007980:	902f883a 	mov	r23,r18
 4007984:	003f6906 	br	400772c <__alt_data_end+0xfc00772c>
 4007988:	900d883a 	mov	r6,r18
 400798c:	01400284 	movi	r5,10
 4007990:	e009883a 	mov	r4,fp
 4007994:	40086e40 	call	40086e4 <memchr>
 4007998:	10003e26 	beq	r2,zero,4007a94 <__sfvwrite_r+0x4a4>
 400799c:	10800044 	addi	r2,r2,1
 40079a0:	1727c83a 	sub	r19,r2,fp
 40079a4:	02000044 	movi	r8,1
 40079a8:	003f9d06 	br	4007820 <__alt_data_end+0xfc007820>
 40079ac:	80800517 	ldw	r2,20(r16)
 40079b0:	81400417 	ldw	r5,16(r16)
 40079b4:	81c00017 	ldw	r7,0(r16)
 40079b8:	10a7883a 	add	r19,r2,r2
 40079bc:	9885883a 	add	r2,r19,r2
 40079c0:	1026d7fa 	srli	r19,r2,31
 40079c4:	396dc83a 	sub	r22,r7,r5
 40079c8:	b1000044 	addi	r4,r22,1
 40079cc:	9885883a 	add	r2,r19,r2
 40079d0:	1027d07a 	srai	r19,r2,1
 40079d4:	2485883a 	add	r2,r4,r18
 40079d8:	980d883a 	mov	r6,r19
 40079dc:	9880022e 	bgeu	r19,r2,40079e8 <__sfvwrite_r+0x3f8>
 40079e0:	1027883a 	mov	r19,r2
 40079e4:	100d883a 	mov	r6,r2
 40079e8:	18c1000c 	andi	r3,r3,1024
 40079ec:	18001c26 	beq	r3,zero,4007a60 <__sfvwrite_r+0x470>
 40079f0:	300b883a 	mov	r5,r6
 40079f4:	a809883a 	mov	r4,r21
 40079f8:	4007ed80 	call	4007ed8 <_malloc_r>
 40079fc:	102f883a 	mov	r23,r2
 4007a00:	10002926 	beq	r2,zero,4007aa8 <__sfvwrite_r+0x4b8>
 4007a04:	81400417 	ldw	r5,16(r16)
 4007a08:	b00d883a 	mov	r6,r22
 4007a0c:	1009883a 	mov	r4,r2
 4007a10:	4004b6c0 	call	4004b6c <memcpy>
 4007a14:	8080030b 	ldhu	r2,12(r16)
 4007a18:	00fedfc4 	movi	r3,-1153
 4007a1c:	10c4703a 	and	r2,r2,r3
 4007a20:	10802014 	ori	r2,r2,128
 4007a24:	8080030d 	sth	r2,12(r16)
 4007a28:	bd89883a 	add	r4,r23,r22
 4007a2c:	9d8fc83a 	sub	r7,r19,r22
 4007a30:	85c00415 	stw	r23,16(r16)
 4007a34:	84c00515 	stw	r19,20(r16)
 4007a38:	81000015 	stw	r4,0(r16)
 4007a3c:	9027883a 	mov	r19,r18
 4007a40:	81c00215 	stw	r7,8(r16)
 4007a44:	902f883a 	mov	r23,r18
 4007a48:	003f3806 	br	400772c <__alt_data_end+0xfc00772c>
 4007a4c:	800b883a 	mov	r5,r16
 4007a50:	a809883a 	mov	r4,r21
 4007a54:	4006b780 	call	4006b78 <_fflush_r>
 4007a58:	103fb926 	beq	r2,zero,4007940 <__alt_data_end+0xfc007940>
 4007a5c:	003f6506 	br	40077f4 <__alt_data_end+0xfc0077f4>
 4007a60:	a809883a 	mov	r4,r21
 4007a64:	40089240 	call	4008924 <_realloc_r>
 4007a68:	102f883a 	mov	r23,r2
 4007a6c:	103fee1e 	bne	r2,zero,4007a28 <__alt_data_end+0xfc007a28>
 4007a70:	81400417 	ldw	r5,16(r16)
 4007a74:	a809883a 	mov	r4,r21
 4007a78:	40072e00 	call	40072e0 <_free_r>
 4007a7c:	8080030b 	ldhu	r2,12(r16)
 4007a80:	00ffdfc4 	movi	r3,-129
 4007a84:	1884703a 	and	r2,r3,r2
 4007a88:	00c00304 	movi	r3,12
 4007a8c:	a8c00015 	stw	r3,0(r21)
 4007a90:	003f5906 	br	40077f8 <__alt_data_end+0xfc0077f8>
 4007a94:	94c00044 	addi	r19,r18,1
 4007a98:	02000044 	movi	r8,1
 4007a9c:	003f6006 	br	4007820 <__alt_data_end+0xfc007820>
 4007aa0:	00bfffc4 	movi	r2,-1
 4007aa4:	003f0006 	br	40076a8 <__alt_data_end+0xfc0076a8>
 4007aa8:	00800304 	movi	r2,12
 4007aac:	a8800015 	stw	r2,0(r21)
 4007ab0:	8080030b 	ldhu	r2,12(r16)
 4007ab4:	003f5006 	br	40077f8 <__alt_data_end+0xfc0077f8>

04007ab8 <_fwalk>:
 4007ab8:	defff704 	addi	sp,sp,-36
 4007abc:	dd000415 	stw	r20,16(sp)
 4007ac0:	dfc00815 	stw	ra,32(sp)
 4007ac4:	ddc00715 	stw	r23,28(sp)
 4007ac8:	dd800615 	stw	r22,24(sp)
 4007acc:	dd400515 	stw	r21,20(sp)
 4007ad0:	dcc00315 	stw	r19,12(sp)
 4007ad4:	dc800215 	stw	r18,8(sp)
 4007ad8:	dc400115 	stw	r17,4(sp)
 4007adc:	dc000015 	stw	r16,0(sp)
 4007ae0:	2500b804 	addi	r20,r4,736
 4007ae4:	a0002326 	beq	r20,zero,4007b74 <_fwalk+0xbc>
 4007ae8:	282b883a 	mov	r21,r5
 4007aec:	002f883a 	mov	r23,zero
 4007af0:	05800044 	movi	r22,1
 4007af4:	04ffffc4 	movi	r19,-1
 4007af8:	a4400117 	ldw	r17,4(r20)
 4007afc:	a4800217 	ldw	r18,8(r20)
 4007b00:	8c7fffc4 	addi	r17,r17,-1
 4007b04:	88000d16 	blt	r17,zero,4007b3c <_fwalk+0x84>
 4007b08:	94000304 	addi	r16,r18,12
 4007b0c:	94800384 	addi	r18,r18,14
 4007b10:	8080000b 	ldhu	r2,0(r16)
 4007b14:	8c7fffc4 	addi	r17,r17,-1
 4007b18:	813ffd04 	addi	r4,r16,-12
 4007b1c:	b080042e 	bgeu	r22,r2,4007b30 <_fwalk+0x78>
 4007b20:	9080000f 	ldh	r2,0(r18)
 4007b24:	14c00226 	beq	r2,r19,4007b30 <_fwalk+0x78>
 4007b28:	a83ee83a 	callr	r21
 4007b2c:	b8aeb03a 	or	r23,r23,r2
 4007b30:	84001a04 	addi	r16,r16,104
 4007b34:	94801a04 	addi	r18,r18,104
 4007b38:	8cfff51e 	bne	r17,r19,4007b10 <__alt_data_end+0xfc007b10>
 4007b3c:	a5000017 	ldw	r20,0(r20)
 4007b40:	a03fed1e 	bne	r20,zero,4007af8 <__alt_data_end+0xfc007af8>
 4007b44:	b805883a 	mov	r2,r23
 4007b48:	dfc00817 	ldw	ra,32(sp)
 4007b4c:	ddc00717 	ldw	r23,28(sp)
 4007b50:	dd800617 	ldw	r22,24(sp)
 4007b54:	dd400517 	ldw	r21,20(sp)
 4007b58:	dd000417 	ldw	r20,16(sp)
 4007b5c:	dcc00317 	ldw	r19,12(sp)
 4007b60:	dc800217 	ldw	r18,8(sp)
 4007b64:	dc400117 	ldw	r17,4(sp)
 4007b68:	dc000017 	ldw	r16,0(sp)
 4007b6c:	dec00904 	addi	sp,sp,36
 4007b70:	f800283a 	ret
 4007b74:	002f883a 	mov	r23,zero
 4007b78:	003ff206 	br	4007b44 <__alt_data_end+0xfc007b44>

04007b7c <_fwalk_reent>:
 4007b7c:	defff704 	addi	sp,sp,-36
 4007b80:	dd000415 	stw	r20,16(sp)
 4007b84:	dfc00815 	stw	ra,32(sp)
 4007b88:	ddc00715 	stw	r23,28(sp)
 4007b8c:	dd800615 	stw	r22,24(sp)
 4007b90:	dd400515 	stw	r21,20(sp)
 4007b94:	dcc00315 	stw	r19,12(sp)
 4007b98:	dc800215 	stw	r18,8(sp)
 4007b9c:	dc400115 	stw	r17,4(sp)
 4007ba0:	dc000015 	stw	r16,0(sp)
 4007ba4:	2500b804 	addi	r20,r4,736
 4007ba8:	a0002326 	beq	r20,zero,4007c38 <_fwalk_reent+0xbc>
 4007bac:	282b883a 	mov	r21,r5
 4007bb0:	2027883a 	mov	r19,r4
 4007bb4:	002f883a 	mov	r23,zero
 4007bb8:	05800044 	movi	r22,1
 4007bbc:	04bfffc4 	movi	r18,-1
 4007bc0:	a4400117 	ldw	r17,4(r20)
 4007bc4:	a4000217 	ldw	r16,8(r20)
 4007bc8:	8c7fffc4 	addi	r17,r17,-1
 4007bcc:	88000c16 	blt	r17,zero,4007c00 <_fwalk_reent+0x84>
 4007bd0:	84000304 	addi	r16,r16,12
 4007bd4:	8080000b 	ldhu	r2,0(r16)
 4007bd8:	8c7fffc4 	addi	r17,r17,-1
 4007bdc:	817ffd04 	addi	r5,r16,-12
 4007be0:	b080052e 	bgeu	r22,r2,4007bf8 <_fwalk_reent+0x7c>
 4007be4:	8080008f 	ldh	r2,2(r16)
 4007be8:	9809883a 	mov	r4,r19
 4007bec:	14800226 	beq	r2,r18,4007bf8 <_fwalk_reent+0x7c>
 4007bf0:	a83ee83a 	callr	r21
 4007bf4:	b8aeb03a 	or	r23,r23,r2
 4007bf8:	84001a04 	addi	r16,r16,104
 4007bfc:	8cbff51e 	bne	r17,r18,4007bd4 <__alt_data_end+0xfc007bd4>
 4007c00:	a5000017 	ldw	r20,0(r20)
 4007c04:	a03fee1e 	bne	r20,zero,4007bc0 <__alt_data_end+0xfc007bc0>
 4007c08:	b805883a 	mov	r2,r23
 4007c0c:	dfc00817 	ldw	ra,32(sp)
 4007c10:	ddc00717 	ldw	r23,28(sp)
 4007c14:	dd800617 	ldw	r22,24(sp)
 4007c18:	dd400517 	ldw	r21,20(sp)
 4007c1c:	dd000417 	ldw	r20,16(sp)
 4007c20:	dcc00317 	ldw	r19,12(sp)
 4007c24:	dc800217 	ldw	r18,8(sp)
 4007c28:	dc400117 	ldw	r17,4(sp)
 4007c2c:	dc000017 	ldw	r16,0(sp)
 4007c30:	dec00904 	addi	sp,sp,36
 4007c34:	f800283a 	ret
 4007c38:	002f883a 	mov	r23,zero
 4007c3c:	003ff206 	br	4007c08 <__alt_data_end+0xfc007c08>

04007c40 <_setlocale_r>:
 4007c40:	30001b26 	beq	r6,zero,4007cb0 <_setlocale_r+0x70>
 4007c44:	01410074 	movhi	r5,1025
 4007c48:	defffe04 	addi	sp,sp,-8
 4007c4c:	29757c04 	addi	r5,r5,-10768
 4007c50:	3009883a 	mov	r4,r6
 4007c54:	dc000015 	stw	r16,0(sp)
 4007c58:	dfc00115 	stw	ra,4(sp)
 4007c5c:	3021883a 	mov	r16,r6
 4007c60:	40090180 	call	4009018 <strcmp>
 4007c64:	1000061e 	bne	r2,zero,4007c80 <_setlocale_r+0x40>
 4007c68:	00810074 	movhi	r2,1025
 4007c6c:	10b56704 	addi	r2,r2,-10852
 4007c70:	dfc00117 	ldw	ra,4(sp)
 4007c74:	dc000017 	ldw	r16,0(sp)
 4007c78:	dec00204 	addi	sp,sp,8
 4007c7c:	f800283a 	ret
 4007c80:	01410074 	movhi	r5,1025
 4007c84:	29756704 	addi	r5,r5,-10852
 4007c88:	8009883a 	mov	r4,r16
 4007c8c:	40090180 	call	4009018 <strcmp>
 4007c90:	103ff526 	beq	r2,zero,4007c68 <__alt_data_end+0xfc007c68>
 4007c94:	01410074 	movhi	r5,1025
 4007c98:	29755a04 	addi	r5,r5,-10904
 4007c9c:	8009883a 	mov	r4,r16
 4007ca0:	40090180 	call	4009018 <strcmp>
 4007ca4:	103ff026 	beq	r2,zero,4007c68 <__alt_data_end+0xfc007c68>
 4007ca8:	0005883a 	mov	r2,zero
 4007cac:	003ff006 	br	4007c70 <__alt_data_end+0xfc007c70>
 4007cb0:	00810074 	movhi	r2,1025
 4007cb4:	10b56704 	addi	r2,r2,-10852
 4007cb8:	f800283a 	ret

04007cbc <__locale_charset>:
 4007cbc:	00810074 	movhi	r2,1025
 4007cc0:	10b6a204 	addi	r2,r2,-9592
 4007cc4:	f800283a 	ret

04007cc8 <__locale_mb_cur_max>:
 4007cc8:	00810074 	movhi	r2,1025
 4007ccc:	10bc5a04 	addi	r2,r2,-3736
 4007cd0:	10800017 	ldw	r2,0(r2)
 4007cd4:	f800283a 	ret

04007cd8 <__locale_msgcharset>:
 4007cd8:	00810074 	movhi	r2,1025
 4007cdc:	10b69a04 	addi	r2,r2,-9624
 4007ce0:	f800283a 	ret

04007ce4 <__locale_cjk_lang>:
 4007ce4:	0005883a 	mov	r2,zero
 4007ce8:	f800283a 	ret

04007cec <_localeconv_r>:
 4007cec:	00810074 	movhi	r2,1025
 4007cf0:	10b6aa04 	addi	r2,r2,-9560
 4007cf4:	f800283a 	ret

04007cf8 <setlocale>:
 4007cf8:	00810074 	movhi	r2,1025
 4007cfc:	10bc5904 	addi	r2,r2,-3740
 4007d00:	280d883a 	mov	r6,r5
 4007d04:	200b883a 	mov	r5,r4
 4007d08:	11000017 	ldw	r4,0(r2)
 4007d0c:	4007c401 	jmpi	4007c40 <_setlocale_r>

04007d10 <localeconv>:
 4007d10:	00810074 	movhi	r2,1025
 4007d14:	10b6aa04 	addi	r2,r2,-9560
 4007d18:	f800283a 	ret

04007d1c <__smakebuf_r>:
 4007d1c:	2880030b 	ldhu	r2,12(r5)
 4007d20:	10c0008c 	andi	r3,r2,2
 4007d24:	1800411e 	bne	r3,zero,4007e2c <__smakebuf_r+0x110>
 4007d28:	deffec04 	addi	sp,sp,-80
 4007d2c:	dc000f15 	stw	r16,60(sp)
 4007d30:	2821883a 	mov	r16,r5
 4007d34:	2940038f 	ldh	r5,14(r5)
 4007d38:	dc401015 	stw	r17,64(sp)
 4007d3c:	dfc01315 	stw	ra,76(sp)
 4007d40:	dcc01215 	stw	r19,72(sp)
 4007d44:	dc801115 	stw	r18,68(sp)
 4007d48:	2023883a 	mov	r17,r4
 4007d4c:	28001c16 	blt	r5,zero,4007dc0 <__smakebuf_r+0xa4>
 4007d50:	d80d883a 	mov	r6,sp
 4007d54:	40096840 	call	4009684 <_fstat_r>
 4007d58:	10001816 	blt	r2,zero,4007dbc <__smakebuf_r+0xa0>
 4007d5c:	d8800117 	ldw	r2,4(sp)
 4007d60:	00e00014 	movui	r3,32768
 4007d64:	10bc000c 	andi	r2,r2,61440
 4007d68:	14c80020 	cmpeqi	r19,r2,8192
 4007d6c:	10c03726 	beq	r2,r3,4007e4c <__smakebuf_r+0x130>
 4007d70:	80c0030b 	ldhu	r3,12(r16)
 4007d74:	18c20014 	ori	r3,r3,2048
 4007d78:	80c0030d 	sth	r3,12(r16)
 4007d7c:	00c80004 	movi	r3,8192
 4007d80:	10c0521e 	bne	r2,r3,4007ecc <__smakebuf_r+0x1b0>
 4007d84:	8140038f 	ldh	r5,14(r16)
 4007d88:	8809883a 	mov	r4,r17
 4007d8c:	40096e00 	call	40096e0 <_isatty_r>
 4007d90:	10004c26 	beq	r2,zero,4007ec4 <__smakebuf_r+0x1a8>
 4007d94:	8080030b 	ldhu	r2,12(r16)
 4007d98:	80c010c4 	addi	r3,r16,67
 4007d9c:	80c00015 	stw	r3,0(r16)
 4007da0:	10800054 	ori	r2,r2,1
 4007da4:	8080030d 	sth	r2,12(r16)
 4007da8:	00800044 	movi	r2,1
 4007dac:	80c00415 	stw	r3,16(r16)
 4007db0:	80800515 	stw	r2,20(r16)
 4007db4:	04810004 	movi	r18,1024
 4007db8:	00000706 	br	4007dd8 <__smakebuf_r+0xbc>
 4007dbc:	8080030b 	ldhu	r2,12(r16)
 4007dc0:	10c0200c 	andi	r3,r2,128
 4007dc4:	18001f1e 	bne	r3,zero,4007e44 <__smakebuf_r+0x128>
 4007dc8:	04810004 	movi	r18,1024
 4007dcc:	10820014 	ori	r2,r2,2048
 4007dd0:	8080030d 	sth	r2,12(r16)
 4007dd4:	0027883a 	mov	r19,zero
 4007dd8:	900b883a 	mov	r5,r18
 4007ddc:	8809883a 	mov	r4,r17
 4007de0:	4007ed80 	call	4007ed8 <_malloc_r>
 4007de4:	10002c26 	beq	r2,zero,4007e98 <__smakebuf_r+0x17c>
 4007de8:	80c0030b 	ldhu	r3,12(r16)
 4007dec:	01010034 	movhi	r4,1024
 4007df0:	211b0304 	addi	r4,r4,27660
 4007df4:	89000f15 	stw	r4,60(r17)
 4007df8:	18c02014 	ori	r3,r3,128
 4007dfc:	80c0030d 	sth	r3,12(r16)
 4007e00:	80800015 	stw	r2,0(r16)
 4007e04:	80800415 	stw	r2,16(r16)
 4007e08:	84800515 	stw	r18,20(r16)
 4007e0c:	98001a1e 	bne	r19,zero,4007e78 <__smakebuf_r+0x15c>
 4007e10:	dfc01317 	ldw	ra,76(sp)
 4007e14:	dcc01217 	ldw	r19,72(sp)
 4007e18:	dc801117 	ldw	r18,68(sp)
 4007e1c:	dc401017 	ldw	r17,64(sp)
 4007e20:	dc000f17 	ldw	r16,60(sp)
 4007e24:	dec01404 	addi	sp,sp,80
 4007e28:	f800283a 	ret
 4007e2c:	288010c4 	addi	r2,r5,67
 4007e30:	28800015 	stw	r2,0(r5)
 4007e34:	28800415 	stw	r2,16(r5)
 4007e38:	00800044 	movi	r2,1
 4007e3c:	28800515 	stw	r2,20(r5)
 4007e40:	f800283a 	ret
 4007e44:	04801004 	movi	r18,64
 4007e48:	003fe006 	br	4007dcc <__alt_data_end+0xfc007dcc>
 4007e4c:	81000a17 	ldw	r4,40(r16)
 4007e50:	00c10074 	movhi	r3,1025
 4007e54:	18e3ed04 	addi	r3,r3,-28748
 4007e58:	20ffc51e 	bne	r4,r3,4007d70 <__alt_data_end+0xfc007d70>
 4007e5c:	8080030b 	ldhu	r2,12(r16)
 4007e60:	04810004 	movi	r18,1024
 4007e64:	84801315 	stw	r18,76(r16)
 4007e68:	1484b03a 	or	r2,r2,r18
 4007e6c:	8080030d 	sth	r2,12(r16)
 4007e70:	0027883a 	mov	r19,zero
 4007e74:	003fd806 	br	4007dd8 <__alt_data_end+0xfc007dd8>
 4007e78:	8140038f 	ldh	r5,14(r16)
 4007e7c:	8809883a 	mov	r4,r17
 4007e80:	40096e00 	call	40096e0 <_isatty_r>
 4007e84:	103fe226 	beq	r2,zero,4007e10 <__alt_data_end+0xfc007e10>
 4007e88:	8080030b 	ldhu	r2,12(r16)
 4007e8c:	10800054 	ori	r2,r2,1
 4007e90:	8080030d 	sth	r2,12(r16)
 4007e94:	003fde06 	br	4007e10 <__alt_data_end+0xfc007e10>
 4007e98:	8080030b 	ldhu	r2,12(r16)
 4007e9c:	10c0800c 	andi	r3,r2,512
 4007ea0:	183fdb1e 	bne	r3,zero,4007e10 <__alt_data_end+0xfc007e10>
 4007ea4:	10800094 	ori	r2,r2,2
 4007ea8:	80c010c4 	addi	r3,r16,67
 4007eac:	8080030d 	sth	r2,12(r16)
 4007eb0:	00800044 	movi	r2,1
 4007eb4:	80c00015 	stw	r3,0(r16)
 4007eb8:	80c00415 	stw	r3,16(r16)
 4007ebc:	80800515 	stw	r2,20(r16)
 4007ec0:	003fd306 	br	4007e10 <__alt_data_end+0xfc007e10>
 4007ec4:	04810004 	movi	r18,1024
 4007ec8:	003fc306 	br	4007dd8 <__alt_data_end+0xfc007dd8>
 4007ecc:	0027883a 	mov	r19,zero
 4007ed0:	04810004 	movi	r18,1024
 4007ed4:	003fc006 	br	4007dd8 <__alt_data_end+0xfc007dd8>

04007ed8 <_malloc_r>:
 4007ed8:	defff504 	addi	sp,sp,-44
 4007edc:	dc800315 	stw	r18,12(sp)
 4007ee0:	dfc00a15 	stw	ra,40(sp)
 4007ee4:	df000915 	stw	fp,36(sp)
 4007ee8:	ddc00815 	stw	r23,32(sp)
 4007eec:	dd800715 	stw	r22,28(sp)
 4007ef0:	dd400615 	stw	r21,24(sp)
 4007ef4:	dd000515 	stw	r20,20(sp)
 4007ef8:	dcc00415 	stw	r19,16(sp)
 4007efc:	dc400215 	stw	r17,8(sp)
 4007f00:	dc000115 	stw	r16,4(sp)
 4007f04:	288002c4 	addi	r2,r5,11
 4007f08:	00c00584 	movi	r3,22
 4007f0c:	2025883a 	mov	r18,r4
 4007f10:	18807f2e 	bgeu	r3,r2,4008110 <_malloc_r+0x238>
 4007f14:	047ffe04 	movi	r17,-8
 4007f18:	1462703a 	and	r17,r2,r17
 4007f1c:	8800a316 	blt	r17,zero,40081ac <_malloc_r+0x2d4>
 4007f20:	8940a236 	bltu	r17,r5,40081ac <_malloc_r+0x2d4>
 4007f24:	400ab100 	call	400ab10 <__malloc_lock>
 4007f28:	00807dc4 	movi	r2,503
 4007f2c:	1441e92e 	bgeu	r2,r17,40086d4 <_malloc_r+0x7fc>
 4007f30:	8804d27a 	srli	r2,r17,9
 4007f34:	1000a126 	beq	r2,zero,40081bc <_malloc_r+0x2e4>
 4007f38:	00c00104 	movi	r3,4
 4007f3c:	18811e36 	bltu	r3,r2,40083b8 <_malloc_r+0x4e0>
 4007f40:	8804d1ba 	srli	r2,r17,6
 4007f44:	12000e44 	addi	r8,r2,57
 4007f48:	11c00e04 	addi	r7,r2,56
 4007f4c:	4209883a 	add	r4,r8,r8
 4007f50:	04c10074 	movhi	r19,1025
 4007f54:	2109883a 	add	r4,r4,r4
 4007f58:	9cf6b804 	addi	r19,r19,-9504
 4007f5c:	2109883a 	add	r4,r4,r4
 4007f60:	9909883a 	add	r4,r19,r4
 4007f64:	24000117 	ldw	r16,4(r4)
 4007f68:	213ffe04 	addi	r4,r4,-8
 4007f6c:	24009726 	beq	r4,r16,40081cc <_malloc_r+0x2f4>
 4007f70:	80800117 	ldw	r2,4(r16)
 4007f74:	01bfff04 	movi	r6,-4
 4007f78:	014003c4 	movi	r5,15
 4007f7c:	1184703a 	and	r2,r2,r6
 4007f80:	1447c83a 	sub	r3,r2,r17
 4007f84:	28c00716 	blt	r5,r3,4007fa4 <_malloc_r+0xcc>
 4007f88:	1800920e 	bge	r3,zero,40081d4 <_malloc_r+0x2fc>
 4007f8c:	84000317 	ldw	r16,12(r16)
 4007f90:	24008e26 	beq	r4,r16,40081cc <_malloc_r+0x2f4>
 4007f94:	80800117 	ldw	r2,4(r16)
 4007f98:	1184703a 	and	r2,r2,r6
 4007f9c:	1447c83a 	sub	r3,r2,r17
 4007fa0:	28fff90e 	bge	r5,r3,4007f88 <__alt_data_end+0xfc007f88>
 4007fa4:	3809883a 	mov	r4,r7
 4007fa8:	01810074 	movhi	r6,1025
 4007fac:	9c000417 	ldw	r16,16(r19)
 4007fb0:	31b6b804 	addi	r6,r6,-9504
 4007fb4:	32000204 	addi	r8,r6,8
 4007fb8:	82013426 	beq	r16,r8,400848c <_malloc_r+0x5b4>
 4007fbc:	80c00117 	ldw	r3,4(r16)
 4007fc0:	00bfff04 	movi	r2,-4
 4007fc4:	188e703a 	and	r7,r3,r2
 4007fc8:	3c45c83a 	sub	r2,r7,r17
 4007fcc:	00c003c4 	movi	r3,15
 4007fd0:	18811f16 	blt	r3,r2,4008450 <_malloc_r+0x578>
 4007fd4:	32000515 	stw	r8,20(r6)
 4007fd8:	32000415 	stw	r8,16(r6)
 4007fdc:	10007f0e 	bge	r2,zero,40081dc <_malloc_r+0x304>
 4007fe0:	00807fc4 	movi	r2,511
 4007fe4:	11c0fd36 	bltu	r2,r7,40083dc <_malloc_r+0x504>
 4007fe8:	3806d0fa 	srli	r3,r7,3
 4007fec:	01c00044 	movi	r7,1
 4007ff0:	30800117 	ldw	r2,4(r6)
 4007ff4:	19400044 	addi	r5,r3,1
 4007ff8:	294b883a 	add	r5,r5,r5
 4007ffc:	1807d0ba 	srai	r3,r3,2
 4008000:	294b883a 	add	r5,r5,r5
 4008004:	294b883a 	add	r5,r5,r5
 4008008:	298b883a 	add	r5,r5,r6
 400800c:	38c6983a 	sll	r3,r7,r3
 4008010:	29c00017 	ldw	r7,0(r5)
 4008014:	2a7ffe04 	addi	r9,r5,-8
 4008018:	1886b03a 	or	r3,r3,r2
 400801c:	82400315 	stw	r9,12(r16)
 4008020:	81c00215 	stw	r7,8(r16)
 4008024:	30c00115 	stw	r3,4(r6)
 4008028:	2c000015 	stw	r16,0(r5)
 400802c:	3c000315 	stw	r16,12(r7)
 4008030:	2005d0ba 	srai	r2,r4,2
 4008034:	01400044 	movi	r5,1
 4008038:	288a983a 	sll	r5,r5,r2
 400803c:	19406f36 	bltu	r3,r5,40081fc <_malloc_r+0x324>
 4008040:	28c4703a 	and	r2,r5,r3
 4008044:	10000a1e 	bne	r2,zero,4008070 <_malloc_r+0x198>
 4008048:	00bfff04 	movi	r2,-4
 400804c:	294b883a 	add	r5,r5,r5
 4008050:	2088703a 	and	r4,r4,r2
 4008054:	28c4703a 	and	r2,r5,r3
 4008058:	21000104 	addi	r4,r4,4
 400805c:	1000041e 	bne	r2,zero,4008070 <_malloc_r+0x198>
 4008060:	294b883a 	add	r5,r5,r5
 4008064:	28c4703a 	and	r2,r5,r3
 4008068:	21000104 	addi	r4,r4,4
 400806c:	103ffc26 	beq	r2,zero,4008060 <__alt_data_end+0xfc008060>
 4008070:	02bfff04 	movi	r10,-4
 4008074:	024003c4 	movi	r9,15
 4008078:	21800044 	addi	r6,r4,1
 400807c:	318d883a 	add	r6,r6,r6
 4008080:	318d883a 	add	r6,r6,r6
 4008084:	318d883a 	add	r6,r6,r6
 4008088:	998d883a 	add	r6,r19,r6
 400808c:	333ffe04 	addi	r12,r6,-8
 4008090:	2017883a 	mov	r11,r4
 4008094:	31800104 	addi	r6,r6,4
 4008098:	34000017 	ldw	r16,0(r6)
 400809c:	31fffd04 	addi	r7,r6,-12
 40080a0:	81c0041e 	bne	r16,r7,40080b4 <_malloc_r+0x1dc>
 40080a4:	0000fb06 	br	4008494 <_malloc_r+0x5bc>
 40080a8:	1801030e 	bge	r3,zero,40084b8 <_malloc_r+0x5e0>
 40080ac:	84000317 	ldw	r16,12(r16)
 40080b0:	81c0f826 	beq	r16,r7,4008494 <_malloc_r+0x5bc>
 40080b4:	80800117 	ldw	r2,4(r16)
 40080b8:	1284703a 	and	r2,r2,r10
 40080bc:	1447c83a 	sub	r3,r2,r17
 40080c0:	48fff90e 	bge	r9,r3,40080a8 <__alt_data_end+0xfc0080a8>
 40080c4:	80800317 	ldw	r2,12(r16)
 40080c8:	81000217 	ldw	r4,8(r16)
 40080cc:	89400054 	ori	r5,r17,1
 40080d0:	81400115 	stw	r5,4(r16)
 40080d4:	20800315 	stw	r2,12(r4)
 40080d8:	11000215 	stw	r4,8(r2)
 40080dc:	8463883a 	add	r17,r16,r17
 40080e0:	9c400515 	stw	r17,20(r19)
 40080e4:	9c400415 	stw	r17,16(r19)
 40080e8:	18800054 	ori	r2,r3,1
 40080ec:	88800115 	stw	r2,4(r17)
 40080f0:	8a000315 	stw	r8,12(r17)
 40080f4:	8a000215 	stw	r8,8(r17)
 40080f8:	88e3883a 	add	r17,r17,r3
 40080fc:	88c00015 	stw	r3,0(r17)
 4008100:	9009883a 	mov	r4,r18
 4008104:	400ab340 	call	400ab34 <__malloc_unlock>
 4008108:	80800204 	addi	r2,r16,8
 400810c:	00001b06 	br	400817c <_malloc_r+0x2a4>
 4008110:	04400404 	movi	r17,16
 4008114:	89402536 	bltu	r17,r5,40081ac <_malloc_r+0x2d4>
 4008118:	400ab100 	call	400ab10 <__malloc_lock>
 400811c:	00800184 	movi	r2,6
 4008120:	01000084 	movi	r4,2
 4008124:	04c10074 	movhi	r19,1025
 4008128:	1085883a 	add	r2,r2,r2
 400812c:	9cf6b804 	addi	r19,r19,-9504
 4008130:	1085883a 	add	r2,r2,r2
 4008134:	9885883a 	add	r2,r19,r2
 4008138:	14000117 	ldw	r16,4(r2)
 400813c:	10fffe04 	addi	r3,r2,-8
 4008140:	80c0d926 	beq	r16,r3,40084a8 <_malloc_r+0x5d0>
 4008144:	80c00117 	ldw	r3,4(r16)
 4008148:	81000317 	ldw	r4,12(r16)
 400814c:	00bfff04 	movi	r2,-4
 4008150:	1884703a 	and	r2,r3,r2
 4008154:	81400217 	ldw	r5,8(r16)
 4008158:	8085883a 	add	r2,r16,r2
 400815c:	10c00117 	ldw	r3,4(r2)
 4008160:	29000315 	stw	r4,12(r5)
 4008164:	21400215 	stw	r5,8(r4)
 4008168:	18c00054 	ori	r3,r3,1
 400816c:	10c00115 	stw	r3,4(r2)
 4008170:	9009883a 	mov	r4,r18
 4008174:	400ab340 	call	400ab34 <__malloc_unlock>
 4008178:	80800204 	addi	r2,r16,8
 400817c:	dfc00a17 	ldw	ra,40(sp)
 4008180:	df000917 	ldw	fp,36(sp)
 4008184:	ddc00817 	ldw	r23,32(sp)
 4008188:	dd800717 	ldw	r22,28(sp)
 400818c:	dd400617 	ldw	r21,24(sp)
 4008190:	dd000517 	ldw	r20,20(sp)
 4008194:	dcc00417 	ldw	r19,16(sp)
 4008198:	dc800317 	ldw	r18,12(sp)
 400819c:	dc400217 	ldw	r17,8(sp)
 40081a0:	dc000117 	ldw	r16,4(sp)
 40081a4:	dec00b04 	addi	sp,sp,44
 40081a8:	f800283a 	ret
 40081ac:	00800304 	movi	r2,12
 40081b0:	90800015 	stw	r2,0(r18)
 40081b4:	0005883a 	mov	r2,zero
 40081b8:	003ff006 	br	400817c <__alt_data_end+0xfc00817c>
 40081bc:	01002004 	movi	r4,128
 40081c0:	02001004 	movi	r8,64
 40081c4:	01c00fc4 	movi	r7,63
 40081c8:	003f6106 	br	4007f50 <__alt_data_end+0xfc007f50>
 40081cc:	4009883a 	mov	r4,r8
 40081d0:	003f7506 	br	4007fa8 <__alt_data_end+0xfc007fa8>
 40081d4:	81000317 	ldw	r4,12(r16)
 40081d8:	003fde06 	br	4008154 <__alt_data_end+0xfc008154>
 40081dc:	81c5883a 	add	r2,r16,r7
 40081e0:	11400117 	ldw	r5,4(r2)
 40081e4:	9009883a 	mov	r4,r18
 40081e8:	29400054 	ori	r5,r5,1
 40081ec:	11400115 	stw	r5,4(r2)
 40081f0:	400ab340 	call	400ab34 <__malloc_unlock>
 40081f4:	80800204 	addi	r2,r16,8
 40081f8:	003fe006 	br	400817c <__alt_data_end+0xfc00817c>
 40081fc:	9c000217 	ldw	r16,8(r19)
 4008200:	00bfff04 	movi	r2,-4
 4008204:	85800117 	ldw	r22,4(r16)
 4008208:	b0ac703a 	and	r22,r22,r2
 400820c:	b4400336 	bltu	r22,r17,400821c <_malloc_r+0x344>
 4008210:	b445c83a 	sub	r2,r22,r17
 4008214:	00c003c4 	movi	r3,15
 4008218:	18805d16 	blt	r3,r2,4008390 <_malloc_r+0x4b8>
 400821c:	05c10074 	movhi	r23,1025
 4008220:	00810074 	movhi	r2,1025
 4008224:	10834704 	addi	r2,r2,3356
 4008228:	bdfc5b04 	addi	r23,r23,-3732
 400822c:	15400017 	ldw	r21,0(r2)
 4008230:	b8c00017 	ldw	r3,0(r23)
 4008234:	00bfffc4 	movi	r2,-1
 4008238:	858d883a 	add	r6,r16,r22
 400823c:	8d6b883a 	add	r21,r17,r21
 4008240:	1880ea26 	beq	r3,r2,40085ec <_malloc_r+0x714>
 4008244:	ad4403c4 	addi	r21,r21,4111
 4008248:	00bc0004 	movi	r2,-4096
 400824c:	a8aa703a 	and	r21,r21,r2
 4008250:	a80b883a 	mov	r5,r21
 4008254:	9009883a 	mov	r4,r18
 4008258:	d9800015 	stw	r6,0(sp)
 400825c:	4008e880 	call	4008e88 <_sbrk_r>
 4008260:	1029883a 	mov	r20,r2
 4008264:	00bfffc4 	movi	r2,-1
 4008268:	d9800017 	ldw	r6,0(sp)
 400826c:	a080e826 	beq	r20,r2,4008610 <_malloc_r+0x738>
 4008270:	a180a636 	bltu	r20,r6,400850c <_malloc_r+0x634>
 4008274:	07010074 	movhi	fp,1025
 4008278:	e7034f04 	addi	fp,fp,3388
 400827c:	e0800017 	ldw	r2,0(fp)
 4008280:	a887883a 	add	r3,r21,r2
 4008284:	e0c00015 	stw	r3,0(fp)
 4008288:	3500e626 	beq	r6,r20,4008624 <_malloc_r+0x74c>
 400828c:	b9000017 	ldw	r4,0(r23)
 4008290:	00bfffc4 	movi	r2,-1
 4008294:	2080ee26 	beq	r4,r2,4008650 <_malloc_r+0x778>
 4008298:	a185c83a 	sub	r2,r20,r6
 400829c:	10c5883a 	add	r2,r2,r3
 40082a0:	e0800015 	stw	r2,0(fp)
 40082a4:	a0c001cc 	andi	r3,r20,7
 40082a8:	1800bc26 	beq	r3,zero,400859c <_malloc_r+0x6c4>
 40082ac:	a0e9c83a 	sub	r20,r20,r3
 40082b0:	00840204 	movi	r2,4104
 40082b4:	a5000204 	addi	r20,r20,8
 40082b8:	10c7c83a 	sub	r3,r2,r3
 40082bc:	a545883a 	add	r2,r20,r21
 40082c0:	1083ffcc 	andi	r2,r2,4095
 40082c4:	18abc83a 	sub	r21,r3,r2
 40082c8:	a80b883a 	mov	r5,r21
 40082cc:	9009883a 	mov	r4,r18
 40082d0:	4008e880 	call	4008e88 <_sbrk_r>
 40082d4:	00ffffc4 	movi	r3,-1
 40082d8:	10c0e126 	beq	r2,r3,4008660 <_malloc_r+0x788>
 40082dc:	1505c83a 	sub	r2,r2,r20
 40082e0:	1545883a 	add	r2,r2,r21
 40082e4:	10800054 	ori	r2,r2,1
 40082e8:	e0c00017 	ldw	r3,0(fp)
 40082ec:	9d000215 	stw	r20,8(r19)
 40082f0:	a0800115 	stw	r2,4(r20)
 40082f4:	a8c7883a 	add	r3,r21,r3
 40082f8:	e0c00015 	stw	r3,0(fp)
 40082fc:	84c00e26 	beq	r16,r19,4008338 <_malloc_r+0x460>
 4008300:	018003c4 	movi	r6,15
 4008304:	3580a72e 	bgeu	r6,r22,40085a4 <_malloc_r+0x6cc>
 4008308:	81400117 	ldw	r5,4(r16)
 400830c:	013ffe04 	movi	r4,-8
 4008310:	b0bffd04 	addi	r2,r22,-12
 4008314:	1104703a 	and	r2,r2,r4
 4008318:	2900004c 	andi	r4,r5,1
 400831c:	2088b03a 	or	r4,r4,r2
 4008320:	81000115 	stw	r4,4(r16)
 4008324:	01400144 	movi	r5,5
 4008328:	8089883a 	add	r4,r16,r2
 400832c:	21400115 	stw	r5,4(r4)
 4008330:	21400215 	stw	r5,8(r4)
 4008334:	3080cd36 	bltu	r6,r2,400866c <_malloc_r+0x794>
 4008338:	00810074 	movhi	r2,1025
 400833c:	10834604 	addi	r2,r2,3352
 4008340:	11000017 	ldw	r4,0(r2)
 4008344:	20c0012e 	bgeu	r4,r3,400834c <_malloc_r+0x474>
 4008348:	10c00015 	stw	r3,0(r2)
 400834c:	00810074 	movhi	r2,1025
 4008350:	10834504 	addi	r2,r2,3348
 4008354:	11000017 	ldw	r4,0(r2)
 4008358:	9c000217 	ldw	r16,8(r19)
 400835c:	20c0012e 	bgeu	r4,r3,4008364 <_malloc_r+0x48c>
 4008360:	10c00015 	stw	r3,0(r2)
 4008364:	80c00117 	ldw	r3,4(r16)
 4008368:	00bfff04 	movi	r2,-4
 400836c:	1886703a 	and	r3,r3,r2
 4008370:	1c45c83a 	sub	r2,r3,r17
 4008374:	1c400236 	bltu	r3,r17,4008380 <_malloc_r+0x4a8>
 4008378:	00c003c4 	movi	r3,15
 400837c:	18800416 	blt	r3,r2,4008390 <_malloc_r+0x4b8>
 4008380:	9009883a 	mov	r4,r18
 4008384:	400ab340 	call	400ab34 <__malloc_unlock>
 4008388:	0005883a 	mov	r2,zero
 400838c:	003f7b06 	br	400817c <__alt_data_end+0xfc00817c>
 4008390:	88c00054 	ori	r3,r17,1
 4008394:	80c00115 	stw	r3,4(r16)
 4008398:	8463883a 	add	r17,r16,r17
 400839c:	10800054 	ori	r2,r2,1
 40083a0:	9c400215 	stw	r17,8(r19)
 40083a4:	88800115 	stw	r2,4(r17)
 40083a8:	9009883a 	mov	r4,r18
 40083ac:	400ab340 	call	400ab34 <__malloc_unlock>
 40083b0:	80800204 	addi	r2,r16,8
 40083b4:	003f7106 	br	400817c <__alt_data_end+0xfc00817c>
 40083b8:	00c00504 	movi	r3,20
 40083bc:	18804a2e 	bgeu	r3,r2,40084e8 <_malloc_r+0x610>
 40083c0:	00c01504 	movi	r3,84
 40083c4:	18806e36 	bltu	r3,r2,4008580 <_malloc_r+0x6a8>
 40083c8:	8804d33a 	srli	r2,r17,12
 40083cc:	12001bc4 	addi	r8,r2,111
 40083d0:	11c01b84 	addi	r7,r2,110
 40083d4:	4209883a 	add	r4,r8,r8
 40083d8:	003edd06 	br	4007f50 <__alt_data_end+0xfc007f50>
 40083dc:	3804d27a 	srli	r2,r7,9
 40083e0:	00c00104 	movi	r3,4
 40083e4:	1880442e 	bgeu	r3,r2,40084f8 <_malloc_r+0x620>
 40083e8:	00c00504 	movi	r3,20
 40083ec:	18808136 	bltu	r3,r2,40085f4 <_malloc_r+0x71c>
 40083f0:	11401704 	addi	r5,r2,92
 40083f4:	10c016c4 	addi	r3,r2,91
 40083f8:	294b883a 	add	r5,r5,r5
 40083fc:	294b883a 	add	r5,r5,r5
 4008400:	294b883a 	add	r5,r5,r5
 4008404:	994b883a 	add	r5,r19,r5
 4008408:	28800017 	ldw	r2,0(r5)
 400840c:	01810074 	movhi	r6,1025
 4008410:	297ffe04 	addi	r5,r5,-8
 4008414:	31b6b804 	addi	r6,r6,-9504
 4008418:	28806526 	beq	r5,r2,40085b0 <_malloc_r+0x6d8>
 400841c:	01bfff04 	movi	r6,-4
 4008420:	10c00117 	ldw	r3,4(r2)
 4008424:	1986703a 	and	r3,r3,r6
 4008428:	38c0022e 	bgeu	r7,r3,4008434 <_malloc_r+0x55c>
 400842c:	10800217 	ldw	r2,8(r2)
 4008430:	28bffb1e 	bne	r5,r2,4008420 <__alt_data_end+0xfc008420>
 4008434:	11400317 	ldw	r5,12(r2)
 4008438:	98c00117 	ldw	r3,4(r19)
 400843c:	81400315 	stw	r5,12(r16)
 4008440:	80800215 	stw	r2,8(r16)
 4008444:	2c000215 	stw	r16,8(r5)
 4008448:	14000315 	stw	r16,12(r2)
 400844c:	003ef806 	br	4008030 <__alt_data_end+0xfc008030>
 4008450:	88c00054 	ori	r3,r17,1
 4008454:	80c00115 	stw	r3,4(r16)
 4008458:	8463883a 	add	r17,r16,r17
 400845c:	34400515 	stw	r17,20(r6)
 4008460:	34400415 	stw	r17,16(r6)
 4008464:	10c00054 	ori	r3,r2,1
 4008468:	8a000315 	stw	r8,12(r17)
 400846c:	8a000215 	stw	r8,8(r17)
 4008470:	88c00115 	stw	r3,4(r17)
 4008474:	88a3883a 	add	r17,r17,r2
 4008478:	88800015 	stw	r2,0(r17)
 400847c:	9009883a 	mov	r4,r18
 4008480:	400ab340 	call	400ab34 <__malloc_unlock>
 4008484:	80800204 	addi	r2,r16,8
 4008488:	003f3c06 	br	400817c <__alt_data_end+0xfc00817c>
 400848c:	30c00117 	ldw	r3,4(r6)
 4008490:	003ee706 	br	4008030 <__alt_data_end+0xfc008030>
 4008494:	5ac00044 	addi	r11,r11,1
 4008498:	588000cc 	andi	r2,r11,3
 400849c:	31800204 	addi	r6,r6,8
 40084a0:	103efd1e 	bne	r2,zero,4008098 <__alt_data_end+0xfc008098>
 40084a4:	00002406 	br	4008538 <_malloc_r+0x660>
 40084a8:	14000317 	ldw	r16,12(r2)
 40084ac:	143f251e 	bne	r2,r16,4008144 <__alt_data_end+0xfc008144>
 40084b0:	21000084 	addi	r4,r4,2
 40084b4:	003ebc06 	br	4007fa8 <__alt_data_end+0xfc007fa8>
 40084b8:	8085883a 	add	r2,r16,r2
 40084bc:	10c00117 	ldw	r3,4(r2)
 40084c0:	81000317 	ldw	r4,12(r16)
 40084c4:	81400217 	ldw	r5,8(r16)
 40084c8:	18c00054 	ori	r3,r3,1
 40084cc:	10c00115 	stw	r3,4(r2)
 40084d0:	29000315 	stw	r4,12(r5)
 40084d4:	21400215 	stw	r5,8(r4)
 40084d8:	9009883a 	mov	r4,r18
 40084dc:	400ab340 	call	400ab34 <__malloc_unlock>
 40084e0:	80800204 	addi	r2,r16,8
 40084e4:	003f2506 	br	400817c <__alt_data_end+0xfc00817c>
 40084e8:	12001704 	addi	r8,r2,92
 40084ec:	11c016c4 	addi	r7,r2,91
 40084f0:	4209883a 	add	r4,r8,r8
 40084f4:	003e9606 	br	4007f50 <__alt_data_end+0xfc007f50>
 40084f8:	3804d1ba 	srli	r2,r7,6
 40084fc:	11400e44 	addi	r5,r2,57
 4008500:	10c00e04 	addi	r3,r2,56
 4008504:	294b883a 	add	r5,r5,r5
 4008508:	003fbc06 	br	40083fc <__alt_data_end+0xfc0083fc>
 400850c:	84ff5926 	beq	r16,r19,4008274 <__alt_data_end+0xfc008274>
 4008510:	00810074 	movhi	r2,1025
 4008514:	10b6b804 	addi	r2,r2,-9504
 4008518:	14000217 	ldw	r16,8(r2)
 400851c:	00bfff04 	movi	r2,-4
 4008520:	80c00117 	ldw	r3,4(r16)
 4008524:	1886703a 	and	r3,r3,r2
 4008528:	003f9106 	br	4008370 <__alt_data_end+0xfc008370>
 400852c:	60800217 	ldw	r2,8(r12)
 4008530:	213fffc4 	addi	r4,r4,-1
 4008534:	1300651e 	bne	r2,r12,40086cc <_malloc_r+0x7f4>
 4008538:	208000cc 	andi	r2,r4,3
 400853c:	633ffe04 	addi	r12,r12,-8
 4008540:	103ffa1e 	bne	r2,zero,400852c <__alt_data_end+0xfc00852c>
 4008544:	98800117 	ldw	r2,4(r19)
 4008548:	0146303a 	nor	r3,zero,r5
 400854c:	1884703a 	and	r2,r3,r2
 4008550:	98800115 	stw	r2,4(r19)
 4008554:	294b883a 	add	r5,r5,r5
 4008558:	117f2836 	bltu	r2,r5,40081fc <__alt_data_end+0xfc0081fc>
 400855c:	283f2726 	beq	r5,zero,40081fc <__alt_data_end+0xfc0081fc>
 4008560:	2886703a 	and	r3,r5,r2
 4008564:	5809883a 	mov	r4,r11
 4008568:	183ec31e 	bne	r3,zero,4008078 <__alt_data_end+0xfc008078>
 400856c:	294b883a 	add	r5,r5,r5
 4008570:	2886703a 	and	r3,r5,r2
 4008574:	21000104 	addi	r4,r4,4
 4008578:	183ffc26 	beq	r3,zero,400856c <__alt_data_end+0xfc00856c>
 400857c:	003ebe06 	br	4008078 <__alt_data_end+0xfc008078>
 4008580:	00c05504 	movi	r3,340
 4008584:	18801236 	bltu	r3,r2,40085d0 <_malloc_r+0x6f8>
 4008588:	8804d3fa 	srli	r2,r17,15
 400858c:	12001e04 	addi	r8,r2,120
 4008590:	11c01dc4 	addi	r7,r2,119
 4008594:	4209883a 	add	r4,r8,r8
 4008598:	003e6d06 	br	4007f50 <__alt_data_end+0xfc007f50>
 400859c:	00c40004 	movi	r3,4096
 40085a0:	003f4606 	br	40082bc <__alt_data_end+0xfc0082bc>
 40085a4:	00800044 	movi	r2,1
 40085a8:	a0800115 	stw	r2,4(r20)
 40085ac:	003f7406 	br	4008380 <__alt_data_end+0xfc008380>
 40085b0:	1805d0ba 	srai	r2,r3,2
 40085b4:	01c00044 	movi	r7,1
 40085b8:	30c00117 	ldw	r3,4(r6)
 40085bc:	388e983a 	sll	r7,r7,r2
 40085c0:	2805883a 	mov	r2,r5
 40085c4:	38c6b03a 	or	r3,r7,r3
 40085c8:	30c00115 	stw	r3,4(r6)
 40085cc:	003f9b06 	br	400843c <__alt_data_end+0xfc00843c>
 40085d0:	00c15504 	movi	r3,1364
 40085d4:	18801a36 	bltu	r3,r2,4008640 <_malloc_r+0x768>
 40085d8:	8804d4ba 	srli	r2,r17,18
 40085dc:	12001f44 	addi	r8,r2,125
 40085e0:	11c01f04 	addi	r7,r2,124
 40085e4:	4209883a 	add	r4,r8,r8
 40085e8:	003e5906 	br	4007f50 <__alt_data_end+0xfc007f50>
 40085ec:	ad400404 	addi	r21,r21,16
 40085f0:	003f1706 	br	4008250 <__alt_data_end+0xfc008250>
 40085f4:	00c01504 	movi	r3,84
 40085f8:	18802336 	bltu	r3,r2,4008688 <_malloc_r+0x7b0>
 40085fc:	3804d33a 	srli	r2,r7,12
 4008600:	11401bc4 	addi	r5,r2,111
 4008604:	10c01b84 	addi	r3,r2,110
 4008608:	294b883a 	add	r5,r5,r5
 400860c:	003f7b06 	br	40083fc <__alt_data_end+0xfc0083fc>
 4008610:	9c000217 	ldw	r16,8(r19)
 4008614:	00bfff04 	movi	r2,-4
 4008618:	80c00117 	ldw	r3,4(r16)
 400861c:	1886703a 	and	r3,r3,r2
 4008620:	003f5306 	br	4008370 <__alt_data_end+0xfc008370>
 4008624:	3083ffcc 	andi	r2,r6,4095
 4008628:	103f181e 	bne	r2,zero,400828c <__alt_data_end+0xfc00828c>
 400862c:	99000217 	ldw	r4,8(r19)
 4008630:	b545883a 	add	r2,r22,r21
 4008634:	10800054 	ori	r2,r2,1
 4008638:	20800115 	stw	r2,4(r4)
 400863c:	003f3e06 	br	4008338 <__alt_data_end+0xfc008338>
 4008640:	01003f84 	movi	r4,254
 4008644:	02001fc4 	movi	r8,127
 4008648:	01c01f84 	movi	r7,126
 400864c:	003e4006 	br	4007f50 <__alt_data_end+0xfc007f50>
 4008650:	00810074 	movhi	r2,1025
 4008654:	10bc5b04 	addi	r2,r2,-3732
 4008658:	15000015 	stw	r20,0(r2)
 400865c:	003f1106 	br	40082a4 <__alt_data_end+0xfc0082a4>
 4008660:	00800044 	movi	r2,1
 4008664:	002b883a 	mov	r21,zero
 4008668:	003f1f06 	br	40082e8 <__alt_data_end+0xfc0082e8>
 400866c:	81400204 	addi	r5,r16,8
 4008670:	9009883a 	mov	r4,r18
 4008674:	40072e00 	call	40072e0 <_free_r>
 4008678:	00810074 	movhi	r2,1025
 400867c:	10834f04 	addi	r2,r2,3388
 4008680:	10c00017 	ldw	r3,0(r2)
 4008684:	003f2c06 	br	4008338 <__alt_data_end+0xfc008338>
 4008688:	00c05504 	movi	r3,340
 400868c:	18800536 	bltu	r3,r2,40086a4 <_malloc_r+0x7cc>
 4008690:	3804d3fa 	srli	r2,r7,15
 4008694:	11401e04 	addi	r5,r2,120
 4008698:	10c01dc4 	addi	r3,r2,119
 400869c:	294b883a 	add	r5,r5,r5
 40086a0:	003f5606 	br	40083fc <__alt_data_end+0xfc0083fc>
 40086a4:	00c15504 	movi	r3,1364
 40086a8:	18800536 	bltu	r3,r2,40086c0 <_malloc_r+0x7e8>
 40086ac:	3804d4ba 	srli	r2,r7,18
 40086b0:	11401f44 	addi	r5,r2,125
 40086b4:	10c01f04 	addi	r3,r2,124
 40086b8:	294b883a 	add	r5,r5,r5
 40086bc:	003f4f06 	br	40083fc <__alt_data_end+0xfc0083fc>
 40086c0:	01403f84 	movi	r5,254
 40086c4:	00c01f84 	movi	r3,126
 40086c8:	003f4c06 	br	40083fc <__alt_data_end+0xfc0083fc>
 40086cc:	98800117 	ldw	r2,4(r19)
 40086d0:	003fa006 	br	4008554 <__alt_data_end+0xfc008554>
 40086d4:	8808d0fa 	srli	r4,r17,3
 40086d8:	20800044 	addi	r2,r4,1
 40086dc:	1085883a 	add	r2,r2,r2
 40086e0:	003e9006 	br	4008124 <__alt_data_end+0xfc008124>

040086e4 <memchr>:
 40086e4:	208000cc 	andi	r2,r4,3
 40086e8:	280f883a 	mov	r7,r5
 40086ec:	10003426 	beq	r2,zero,40087c0 <memchr+0xdc>
 40086f0:	30bfffc4 	addi	r2,r6,-1
 40086f4:	30001a26 	beq	r6,zero,4008760 <memchr+0x7c>
 40086f8:	20c00003 	ldbu	r3,0(r4)
 40086fc:	29803fcc 	andi	r6,r5,255
 4008700:	30c0051e 	bne	r6,r3,4008718 <memchr+0x34>
 4008704:	00001806 	br	4008768 <memchr+0x84>
 4008708:	10001526 	beq	r2,zero,4008760 <memchr+0x7c>
 400870c:	20c00003 	ldbu	r3,0(r4)
 4008710:	10bfffc4 	addi	r2,r2,-1
 4008714:	30c01426 	beq	r6,r3,4008768 <memchr+0x84>
 4008718:	21000044 	addi	r4,r4,1
 400871c:	20c000cc 	andi	r3,r4,3
 4008720:	183ff91e 	bne	r3,zero,4008708 <__alt_data_end+0xfc008708>
 4008724:	020000c4 	movi	r8,3
 4008728:	40801136 	bltu	r8,r2,4008770 <memchr+0x8c>
 400872c:	10000c26 	beq	r2,zero,4008760 <memchr+0x7c>
 4008730:	20c00003 	ldbu	r3,0(r4)
 4008734:	29403fcc 	andi	r5,r5,255
 4008738:	28c00b26 	beq	r5,r3,4008768 <memchr+0x84>
 400873c:	20c00044 	addi	r3,r4,1
 4008740:	39803fcc 	andi	r6,r7,255
 4008744:	2089883a 	add	r4,r4,r2
 4008748:	00000306 	br	4008758 <memchr+0x74>
 400874c:	18c00044 	addi	r3,r3,1
 4008750:	197fffc3 	ldbu	r5,-1(r3)
 4008754:	31400526 	beq	r6,r5,400876c <memchr+0x88>
 4008758:	1805883a 	mov	r2,r3
 400875c:	20fffb1e 	bne	r4,r3,400874c <__alt_data_end+0xfc00874c>
 4008760:	0005883a 	mov	r2,zero
 4008764:	f800283a 	ret
 4008768:	2005883a 	mov	r2,r4
 400876c:	f800283a 	ret
 4008770:	28c03fcc 	andi	r3,r5,255
 4008774:	1812923a 	slli	r9,r3,8
 4008778:	02ffbff4 	movhi	r11,65279
 400877c:	02a02074 	movhi	r10,32897
 4008780:	48d2b03a 	or	r9,r9,r3
 4008784:	4806943a 	slli	r3,r9,16
 4008788:	5affbfc4 	addi	r11,r11,-257
 400878c:	52a02004 	addi	r10,r10,-32640
 4008790:	48d2b03a 	or	r9,r9,r3
 4008794:	20c00017 	ldw	r3,0(r4)
 4008798:	48c6f03a 	xor	r3,r9,r3
 400879c:	1acd883a 	add	r6,r3,r11
 40087a0:	00c6303a 	nor	r3,zero,r3
 40087a4:	30c6703a 	and	r3,r6,r3
 40087a8:	1a86703a 	and	r3,r3,r10
 40087ac:	183fe01e 	bne	r3,zero,4008730 <__alt_data_end+0xfc008730>
 40087b0:	10bfff04 	addi	r2,r2,-4
 40087b4:	21000104 	addi	r4,r4,4
 40087b8:	40bff636 	bltu	r8,r2,4008794 <__alt_data_end+0xfc008794>
 40087bc:	003fdb06 	br	400872c <__alt_data_end+0xfc00872c>
 40087c0:	3005883a 	mov	r2,r6
 40087c4:	003fd706 	br	4008724 <__alt_data_end+0xfc008724>

040087c8 <memmove>:
 40087c8:	2005883a 	mov	r2,r4
 40087cc:	29000b2e 	bgeu	r5,r4,40087fc <memmove+0x34>
 40087d0:	298f883a 	add	r7,r5,r6
 40087d4:	21c0092e 	bgeu	r4,r7,40087fc <memmove+0x34>
 40087d8:	2187883a 	add	r3,r4,r6
 40087dc:	198bc83a 	sub	r5,r3,r6
 40087e0:	30004826 	beq	r6,zero,4008904 <memmove+0x13c>
 40087e4:	39ffffc4 	addi	r7,r7,-1
 40087e8:	39000003 	ldbu	r4,0(r7)
 40087ec:	18ffffc4 	addi	r3,r3,-1
 40087f0:	19000005 	stb	r4,0(r3)
 40087f4:	28fffb1e 	bne	r5,r3,40087e4 <__alt_data_end+0xfc0087e4>
 40087f8:	f800283a 	ret
 40087fc:	00c003c4 	movi	r3,15
 4008800:	1980412e 	bgeu	r3,r6,4008908 <memmove+0x140>
 4008804:	2886b03a 	or	r3,r5,r2
 4008808:	18c000cc 	andi	r3,r3,3
 400880c:	1800401e 	bne	r3,zero,4008910 <memmove+0x148>
 4008810:	33fffc04 	addi	r15,r6,-16
 4008814:	781ed13a 	srli	r15,r15,4
 4008818:	28c00104 	addi	r3,r5,4
 400881c:	13400104 	addi	r13,r2,4
 4008820:	781c913a 	slli	r14,r15,4
 4008824:	2b000204 	addi	r12,r5,8
 4008828:	12c00204 	addi	r11,r2,8
 400882c:	73800504 	addi	r14,r14,20
 4008830:	2a800304 	addi	r10,r5,12
 4008834:	12400304 	addi	r9,r2,12
 4008838:	2b9d883a 	add	r14,r5,r14
 400883c:	2811883a 	mov	r8,r5
 4008840:	100f883a 	mov	r7,r2
 4008844:	41000017 	ldw	r4,0(r8)
 4008848:	39c00404 	addi	r7,r7,16
 400884c:	18c00404 	addi	r3,r3,16
 4008850:	393ffc15 	stw	r4,-16(r7)
 4008854:	193ffc17 	ldw	r4,-16(r3)
 4008858:	6b400404 	addi	r13,r13,16
 400885c:	5ac00404 	addi	r11,r11,16
 4008860:	693ffc15 	stw	r4,-16(r13)
 4008864:	61000017 	ldw	r4,0(r12)
 4008868:	4a400404 	addi	r9,r9,16
 400886c:	42000404 	addi	r8,r8,16
 4008870:	593ffc15 	stw	r4,-16(r11)
 4008874:	51000017 	ldw	r4,0(r10)
 4008878:	63000404 	addi	r12,r12,16
 400887c:	52800404 	addi	r10,r10,16
 4008880:	493ffc15 	stw	r4,-16(r9)
 4008884:	1bbfef1e 	bne	r3,r14,4008844 <__alt_data_end+0xfc008844>
 4008888:	79000044 	addi	r4,r15,1
 400888c:	2008913a 	slli	r4,r4,4
 4008890:	328003cc 	andi	r10,r6,15
 4008894:	02c000c4 	movi	r11,3
 4008898:	1107883a 	add	r3,r2,r4
 400889c:	290b883a 	add	r5,r5,r4
 40088a0:	5a801e2e 	bgeu	r11,r10,400891c <memmove+0x154>
 40088a4:	1813883a 	mov	r9,r3
 40088a8:	2811883a 	mov	r8,r5
 40088ac:	500f883a 	mov	r7,r10
 40088b0:	41000017 	ldw	r4,0(r8)
 40088b4:	4a400104 	addi	r9,r9,4
 40088b8:	39ffff04 	addi	r7,r7,-4
 40088bc:	493fff15 	stw	r4,-4(r9)
 40088c0:	42000104 	addi	r8,r8,4
 40088c4:	59fffa36 	bltu	r11,r7,40088b0 <__alt_data_end+0xfc0088b0>
 40088c8:	513fff04 	addi	r4,r10,-4
 40088cc:	2008d0ba 	srli	r4,r4,2
 40088d0:	318000cc 	andi	r6,r6,3
 40088d4:	21000044 	addi	r4,r4,1
 40088d8:	2109883a 	add	r4,r4,r4
 40088dc:	2109883a 	add	r4,r4,r4
 40088e0:	1907883a 	add	r3,r3,r4
 40088e4:	290b883a 	add	r5,r5,r4
 40088e8:	30000b26 	beq	r6,zero,4008918 <memmove+0x150>
 40088ec:	198d883a 	add	r6,r3,r6
 40088f0:	29c00003 	ldbu	r7,0(r5)
 40088f4:	18c00044 	addi	r3,r3,1
 40088f8:	29400044 	addi	r5,r5,1
 40088fc:	19ffffc5 	stb	r7,-1(r3)
 4008900:	19bffb1e 	bne	r3,r6,40088f0 <__alt_data_end+0xfc0088f0>
 4008904:	f800283a 	ret
 4008908:	1007883a 	mov	r3,r2
 400890c:	003ff606 	br	40088e8 <__alt_data_end+0xfc0088e8>
 4008910:	1007883a 	mov	r3,r2
 4008914:	003ff506 	br	40088ec <__alt_data_end+0xfc0088ec>
 4008918:	f800283a 	ret
 400891c:	500d883a 	mov	r6,r10
 4008920:	003ff106 	br	40088e8 <__alt_data_end+0xfc0088e8>

04008924 <_realloc_r>:
 4008924:	defff604 	addi	sp,sp,-40
 4008928:	dc800215 	stw	r18,8(sp)
 400892c:	dfc00915 	stw	ra,36(sp)
 4008930:	df000815 	stw	fp,32(sp)
 4008934:	ddc00715 	stw	r23,28(sp)
 4008938:	dd800615 	stw	r22,24(sp)
 400893c:	dd400515 	stw	r21,20(sp)
 4008940:	dd000415 	stw	r20,16(sp)
 4008944:	dcc00315 	stw	r19,12(sp)
 4008948:	dc400115 	stw	r17,4(sp)
 400894c:	dc000015 	stw	r16,0(sp)
 4008950:	3025883a 	mov	r18,r6
 4008954:	2800b726 	beq	r5,zero,4008c34 <_realloc_r+0x310>
 4008958:	282b883a 	mov	r21,r5
 400895c:	2029883a 	mov	r20,r4
 4008960:	400ab100 	call	400ab10 <__malloc_lock>
 4008964:	a8bfff17 	ldw	r2,-4(r21)
 4008968:	043fff04 	movi	r16,-4
 400896c:	90c002c4 	addi	r3,r18,11
 4008970:	01000584 	movi	r4,22
 4008974:	acfffe04 	addi	r19,r21,-8
 4008978:	1420703a 	and	r16,r2,r16
 400897c:	20c0332e 	bgeu	r4,r3,4008a4c <_realloc_r+0x128>
 4008980:	047ffe04 	movi	r17,-8
 4008984:	1c62703a 	and	r17,r3,r17
 4008988:	8807883a 	mov	r3,r17
 400898c:	88005816 	blt	r17,zero,4008af0 <_realloc_r+0x1cc>
 4008990:	8c805736 	bltu	r17,r18,4008af0 <_realloc_r+0x1cc>
 4008994:	80c0300e 	bge	r16,r3,4008a58 <_realloc_r+0x134>
 4008998:	07010074 	movhi	fp,1025
 400899c:	e736b804 	addi	fp,fp,-9504
 40089a0:	e1c00217 	ldw	r7,8(fp)
 40089a4:	9c09883a 	add	r4,r19,r16
 40089a8:	22000117 	ldw	r8,4(r4)
 40089ac:	21c06326 	beq	r4,r7,4008b3c <_realloc_r+0x218>
 40089b0:	017fff84 	movi	r5,-2
 40089b4:	414a703a 	and	r5,r8,r5
 40089b8:	214b883a 	add	r5,r4,r5
 40089bc:	29800117 	ldw	r6,4(r5)
 40089c0:	3180004c 	andi	r6,r6,1
 40089c4:	30003f26 	beq	r6,zero,4008ac4 <_realloc_r+0x1a0>
 40089c8:	1080004c 	andi	r2,r2,1
 40089cc:	10008326 	beq	r2,zero,4008bdc <_realloc_r+0x2b8>
 40089d0:	900b883a 	mov	r5,r18
 40089d4:	a009883a 	mov	r4,r20
 40089d8:	4007ed80 	call	4007ed8 <_malloc_r>
 40089dc:	1025883a 	mov	r18,r2
 40089e0:	10011e26 	beq	r2,zero,4008e5c <_realloc_r+0x538>
 40089e4:	a93fff17 	ldw	r4,-4(r21)
 40089e8:	10fffe04 	addi	r3,r2,-8
 40089ec:	00bfff84 	movi	r2,-2
 40089f0:	2084703a 	and	r2,r4,r2
 40089f4:	9885883a 	add	r2,r19,r2
 40089f8:	1880ee26 	beq	r3,r2,4008db4 <_realloc_r+0x490>
 40089fc:	81bfff04 	addi	r6,r16,-4
 4008a00:	00800904 	movi	r2,36
 4008a04:	1180b836 	bltu	r2,r6,4008ce8 <_realloc_r+0x3c4>
 4008a08:	00c004c4 	movi	r3,19
 4008a0c:	19809636 	bltu	r3,r6,4008c68 <_realloc_r+0x344>
 4008a10:	9005883a 	mov	r2,r18
 4008a14:	a807883a 	mov	r3,r21
 4008a18:	19000017 	ldw	r4,0(r3)
 4008a1c:	11000015 	stw	r4,0(r2)
 4008a20:	19000117 	ldw	r4,4(r3)
 4008a24:	11000115 	stw	r4,4(r2)
 4008a28:	18c00217 	ldw	r3,8(r3)
 4008a2c:	10c00215 	stw	r3,8(r2)
 4008a30:	a80b883a 	mov	r5,r21
 4008a34:	a009883a 	mov	r4,r20
 4008a38:	40072e00 	call	40072e0 <_free_r>
 4008a3c:	a009883a 	mov	r4,r20
 4008a40:	400ab340 	call	400ab34 <__malloc_unlock>
 4008a44:	9005883a 	mov	r2,r18
 4008a48:	00001206 	br	4008a94 <_realloc_r+0x170>
 4008a4c:	00c00404 	movi	r3,16
 4008a50:	1823883a 	mov	r17,r3
 4008a54:	003fce06 	br	4008990 <__alt_data_end+0xfc008990>
 4008a58:	a825883a 	mov	r18,r21
 4008a5c:	8445c83a 	sub	r2,r16,r17
 4008a60:	00c003c4 	movi	r3,15
 4008a64:	18802636 	bltu	r3,r2,4008b00 <_realloc_r+0x1dc>
 4008a68:	99800117 	ldw	r6,4(r19)
 4008a6c:	9c07883a 	add	r3,r19,r16
 4008a70:	3180004c 	andi	r6,r6,1
 4008a74:	3420b03a 	or	r16,r6,r16
 4008a78:	9c000115 	stw	r16,4(r19)
 4008a7c:	18800117 	ldw	r2,4(r3)
 4008a80:	10800054 	ori	r2,r2,1
 4008a84:	18800115 	stw	r2,4(r3)
 4008a88:	a009883a 	mov	r4,r20
 4008a8c:	400ab340 	call	400ab34 <__malloc_unlock>
 4008a90:	9005883a 	mov	r2,r18
 4008a94:	dfc00917 	ldw	ra,36(sp)
 4008a98:	df000817 	ldw	fp,32(sp)
 4008a9c:	ddc00717 	ldw	r23,28(sp)
 4008aa0:	dd800617 	ldw	r22,24(sp)
 4008aa4:	dd400517 	ldw	r21,20(sp)
 4008aa8:	dd000417 	ldw	r20,16(sp)
 4008aac:	dcc00317 	ldw	r19,12(sp)
 4008ab0:	dc800217 	ldw	r18,8(sp)
 4008ab4:	dc400117 	ldw	r17,4(sp)
 4008ab8:	dc000017 	ldw	r16,0(sp)
 4008abc:	dec00a04 	addi	sp,sp,40
 4008ac0:	f800283a 	ret
 4008ac4:	017fff04 	movi	r5,-4
 4008ac8:	414a703a 	and	r5,r8,r5
 4008acc:	814d883a 	add	r6,r16,r5
 4008ad0:	30c01f16 	blt	r6,r3,4008b50 <_realloc_r+0x22c>
 4008ad4:	20800317 	ldw	r2,12(r4)
 4008ad8:	20c00217 	ldw	r3,8(r4)
 4008adc:	a825883a 	mov	r18,r21
 4008ae0:	3021883a 	mov	r16,r6
 4008ae4:	18800315 	stw	r2,12(r3)
 4008ae8:	10c00215 	stw	r3,8(r2)
 4008aec:	003fdb06 	br	4008a5c <__alt_data_end+0xfc008a5c>
 4008af0:	00800304 	movi	r2,12
 4008af4:	a0800015 	stw	r2,0(r20)
 4008af8:	0005883a 	mov	r2,zero
 4008afc:	003fe506 	br	4008a94 <__alt_data_end+0xfc008a94>
 4008b00:	98c00117 	ldw	r3,4(r19)
 4008b04:	9c4b883a 	add	r5,r19,r17
 4008b08:	11000054 	ori	r4,r2,1
 4008b0c:	18c0004c 	andi	r3,r3,1
 4008b10:	1c62b03a 	or	r17,r3,r17
 4008b14:	9c400115 	stw	r17,4(r19)
 4008b18:	29000115 	stw	r4,4(r5)
 4008b1c:	2885883a 	add	r2,r5,r2
 4008b20:	10c00117 	ldw	r3,4(r2)
 4008b24:	29400204 	addi	r5,r5,8
 4008b28:	a009883a 	mov	r4,r20
 4008b2c:	18c00054 	ori	r3,r3,1
 4008b30:	10c00115 	stw	r3,4(r2)
 4008b34:	40072e00 	call	40072e0 <_free_r>
 4008b38:	003fd306 	br	4008a88 <__alt_data_end+0xfc008a88>
 4008b3c:	017fff04 	movi	r5,-4
 4008b40:	414a703a 	and	r5,r8,r5
 4008b44:	89800404 	addi	r6,r17,16
 4008b48:	8151883a 	add	r8,r16,r5
 4008b4c:	4180590e 	bge	r8,r6,4008cb4 <_realloc_r+0x390>
 4008b50:	1080004c 	andi	r2,r2,1
 4008b54:	103f9e1e 	bne	r2,zero,40089d0 <__alt_data_end+0xfc0089d0>
 4008b58:	adbffe17 	ldw	r22,-8(r21)
 4008b5c:	00bfff04 	movi	r2,-4
 4008b60:	9dadc83a 	sub	r22,r19,r22
 4008b64:	b1800117 	ldw	r6,4(r22)
 4008b68:	3084703a 	and	r2,r6,r2
 4008b6c:	20002026 	beq	r4,zero,4008bf0 <_realloc_r+0x2cc>
 4008b70:	80af883a 	add	r23,r16,r2
 4008b74:	b96f883a 	add	r23,r23,r5
 4008b78:	21c05f26 	beq	r4,r7,4008cf8 <_realloc_r+0x3d4>
 4008b7c:	b8c01c16 	blt	r23,r3,4008bf0 <_realloc_r+0x2cc>
 4008b80:	20800317 	ldw	r2,12(r4)
 4008b84:	20c00217 	ldw	r3,8(r4)
 4008b88:	81bfff04 	addi	r6,r16,-4
 4008b8c:	01000904 	movi	r4,36
 4008b90:	18800315 	stw	r2,12(r3)
 4008b94:	10c00215 	stw	r3,8(r2)
 4008b98:	b0c00217 	ldw	r3,8(r22)
 4008b9c:	b0800317 	ldw	r2,12(r22)
 4008ba0:	b4800204 	addi	r18,r22,8
 4008ba4:	18800315 	stw	r2,12(r3)
 4008ba8:	10c00215 	stw	r3,8(r2)
 4008bac:	21801b36 	bltu	r4,r6,4008c1c <_realloc_r+0x2f8>
 4008bb0:	008004c4 	movi	r2,19
 4008bb4:	1180352e 	bgeu	r2,r6,4008c8c <_realloc_r+0x368>
 4008bb8:	a8800017 	ldw	r2,0(r21)
 4008bbc:	b0800215 	stw	r2,8(r22)
 4008bc0:	a8800117 	ldw	r2,4(r21)
 4008bc4:	b0800315 	stw	r2,12(r22)
 4008bc8:	008006c4 	movi	r2,27
 4008bcc:	11807f36 	bltu	r2,r6,4008dcc <_realloc_r+0x4a8>
 4008bd0:	b0800404 	addi	r2,r22,16
 4008bd4:	ad400204 	addi	r21,r21,8
 4008bd8:	00002d06 	br	4008c90 <_realloc_r+0x36c>
 4008bdc:	adbffe17 	ldw	r22,-8(r21)
 4008be0:	00bfff04 	movi	r2,-4
 4008be4:	9dadc83a 	sub	r22,r19,r22
 4008be8:	b1000117 	ldw	r4,4(r22)
 4008bec:	2084703a 	and	r2,r4,r2
 4008bf0:	b03f7726 	beq	r22,zero,40089d0 <__alt_data_end+0xfc0089d0>
 4008bf4:	80af883a 	add	r23,r16,r2
 4008bf8:	b8ff7516 	blt	r23,r3,40089d0 <__alt_data_end+0xfc0089d0>
 4008bfc:	b0800317 	ldw	r2,12(r22)
 4008c00:	b0c00217 	ldw	r3,8(r22)
 4008c04:	81bfff04 	addi	r6,r16,-4
 4008c08:	01000904 	movi	r4,36
 4008c0c:	18800315 	stw	r2,12(r3)
 4008c10:	10c00215 	stw	r3,8(r2)
 4008c14:	b4800204 	addi	r18,r22,8
 4008c18:	21bfe52e 	bgeu	r4,r6,4008bb0 <__alt_data_end+0xfc008bb0>
 4008c1c:	a80b883a 	mov	r5,r21
 4008c20:	9009883a 	mov	r4,r18
 4008c24:	40087c80 	call	40087c8 <memmove>
 4008c28:	b821883a 	mov	r16,r23
 4008c2c:	b027883a 	mov	r19,r22
 4008c30:	003f8a06 	br	4008a5c <__alt_data_end+0xfc008a5c>
 4008c34:	300b883a 	mov	r5,r6
 4008c38:	dfc00917 	ldw	ra,36(sp)
 4008c3c:	df000817 	ldw	fp,32(sp)
 4008c40:	ddc00717 	ldw	r23,28(sp)
 4008c44:	dd800617 	ldw	r22,24(sp)
 4008c48:	dd400517 	ldw	r21,20(sp)
 4008c4c:	dd000417 	ldw	r20,16(sp)
 4008c50:	dcc00317 	ldw	r19,12(sp)
 4008c54:	dc800217 	ldw	r18,8(sp)
 4008c58:	dc400117 	ldw	r17,4(sp)
 4008c5c:	dc000017 	ldw	r16,0(sp)
 4008c60:	dec00a04 	addi	sp,sp,40
 4008c64:	4007ed81 	jmpi	4007ed8 <_malloc_r>
 4008c68:	a8c00017 	ldw	r3,0(r21)
 4008c6c:	90c00015 	stw	r3,0(r18)
 4008c70:	a8c00117 	ldw	r3,4(r21)
 4008c74:	90c00115 	stw	r3,4(r18)
 4008c78:	00c006c4 	movi	r3,27
 4008c7c:	19804536 	bltu	r3,r6,4008d94 <_realloc_r+0x470>
 4008c80:	90800204 	addi	r2,r18,8
 4008c84:	a8c00204 	addi	r3,r21,8
 4008c88:	003f6306 	br	4008a18 <__alt_data_end+0xfc008a18>
 4008c8c:	9005883a 	mov	r2,r18
 4008c90:	a8c00017 	ldw	r3,0(r21)
 4008c94:	b821883a 	mov	r16,r23
 4008c98:	b027883a 	mov	r19,r22
 4008c9c:	10c00015 	stw	r3,0(r2)
 4008ca0:	a8c00117 	ldw	r3,4(r21)
 4008ca4:	10c00115 	stw	r3,4(r2)
 4008ca8:	a8c00217 	ldw	r3,8(r21)
 4008cac:	10c00215 	stw	r3,8(r2)
 4008cb0:	003f6a06 	br	4008a5c <__alt_data_end+0xfc008a5c>
 4008cb4:	9c67883a 	add	r19,r19,r17
 4008cb8:	4445c83a 	sub	r2,r8,r17
 4008cbc:	e4c00215 	stw	r19,8(fp)
 4008cc0:	10800054 	ori	r2,r2,1
 4008cc4:	98800115 	stw	r2,4(r19)
 4008cc8:	a8bfff17 	ldw	r2,-4(r21)
 4008ccc:	a009883a 	mov	r4,r20
 4008cd0:	1080004c 	andi	r2,r2,1
 4008cd4:	1462b03a 	or	r17,r2,r17
 4008cd8:	ac7fff15 	stw	r17,-4(r21)
 4008cdc:	400ab340 	call	400ab34 <__malloc_unlock>
 4008ce0:	a805883a 	mov	r2,r21
 4008ce4:	003f6b06 	br	4008a94 <__alt_data_end+0xfc008a94>
 4008ce8:	a80b883a 	mov	r5,r21
 4008cec:	9009883a 	mov	r4,r18
 4008cf0:	40087c80 	call	40087c8 <memmove>
 4008cf4:	003f4e06 	br	4008a30 <__alt_data_end+0xfc008a30>
 4008cf8:	89000404 	addi	r4,r17,16
 4008cfc:	b93fbc16 	blt	r23,r4,4008bf0 <__alt_data_end+0xfc008bf0>
 4008d00:	b0800317 	ldw	r2,12(r22)
 4008d04:	b0c00217 	ldw	r3,8(r22)
 4008d08:	81bfff04 	addi	r6,r16,-4
 4008d0c:	01000904 	movi	r4,36
 4008d10:	18800315 	stw	r2,12(r3)
 4008d14:	10c00215 	stw	r3,8(r2)
 4008d18:	b4800204 	addi	r18,r22,8
 4008d1c:	21804336 	bltu	r4,r6,4008e2c <_realloc_r+0x508>
 4008d20:	008004c4 	movi	r2,19
 4008d24:	11803f2e 	bgeu	r2,r6,4008e24 <_realloc_r+0x500>
 4008d28:	a8800017 	ldw	r2,0(r21)
 4008d2c:	b0800215 	stw	r2,8(r22)
 4008d30:	a8800117 	ldw	r2,4(r21)
 4008d34:	b0800315 	stw	r2,12(r22)
 4008d38:	008006c4 	movi	r2,27
 4008d3c:	11803f36 	bltu	r2,r6,4008e3c <_realloc_r+0x518>
 4008d40:	b0800404 	addi	r2,r22,16
 4008d44:	ad400204 	addi	r21,r21,8
 4008d48:	a8c00017 	ldw	r3,0(r21)
 4008d4c:	10c00015 	stw	r3,0(r2)
 4008d50:	a8c00117 	ldw	r3,4(r21)
 4008d54:	10c00115 	stw	r3,4(r2)
 4008d58:	a8c00217 	ldw	r3,8(r21)
 4008d5c:	10c00215 	stw	r3,8(r2)
 4008d60:	b447883a 	add	r3,r22,r17
 4008d64:	bc45c83a 	sub	r2,r23,r17
 4008d68:	e0c00215 	stw	r3,8(fp)
 4008d6c:	10800054 	ori	r2,r2,1
 4008d70:	18800115 	stw	r2,4(r3)
 4008d74:	b0800117 	ldw	r2,4(r22)
 4008d78:	a009883a 	mov	r4,r20
 4008d7c:	1080004c 	andi	r2,r2,1
 4008d80:	1462b03a 	or	r17,r2,r17
 4008d84:	b4400115 	stw	r17,4(r22)
 4008d88:	400ab340 	call	400ab34 <__malloc_unlock>
 4008d8c:	9005883a 	mov	r2,r18
 4008d90:	003f4006 	br	4008a94 <__alt_data_end+0xfc008a94>
 4008d94:	a8c00217 	ldw	r3,8(r21)
 4008d98:	90c00215 	stw	r3,8(r18)
 4008d9c:	a8c00317 	ldw	r3,12(r21)
 4008da0:	90c00315 	stw	r3,12(r18)
 4008da4:	30801126 	beq	r6,r2,4008dec <_realloc_r+0x4c8>
 4008da8:	90800404 	addi	r2,r18,16
 4008dac:	a8c00404 	addi	r3,r21,16
 4008db0:	003f1906 	br	4008a18 <__alt_data_end+0xfc008a18>
 4008db4:	90ffff17 	ldw	r3,-4(r18)
 4008db8:	00bfff04 	movi	r2,-4
 4008dbc:	a825883a 	mov	r18,r21
 4008dc0:	1884703a 	and	r2,r3,r2
 4008dc4:	80a1883a 	add	r16,r16,r2
 4008dc8:	003f2406 	br	4008a5c <__alt_data_end+0xfc008a5c>
 4008dcc:	a8800217 	ldw	r2,8(r21)
 4008dd0:	b0800415 	stw	r2,16(r22)
 4008dd4:	a8800317 	ldw	r2,12(r21)
 4008dd8:	b0800515 	stw	r2,20(r22)
 4008ddc:	31000a26 	beq	r6,r4,4008e08 <_realloc_r+0x4e4>
 4008de0:	b0800604 	addi	r2,r22,24
 4008de4:	ad400404 	addi	r21,r21,16
 4008de8:	003fa906 	br	4008c90 <__alt_data_end+0xfc008c90>
 4008dec:	a9000417 	ldw	r4,16(r21)
 4008df0:	90800604 	addi	r2,r18,24
 4008df4:	a8c00604 	addi	r3,r21,24
 4008df8:	91000415 	stw	r4,16(r18)
 4008dfc:	a9000517 	ldw	r4,20(r21)
 4008e00:	91000515 	stw	r4,20(r18)
 4008e04:	003f0406 	br	4008a18 <__alt_data_end+0xfc008a18>
 4008e08:	a8c00417 	ldw	r3,16(r21)
 4008e0c:	ad400604 	addi	r21,r21,24
 4008e10:	b0800804 	addi	r2,r22,32
 4008e14:	b0c00615 	stw	r3,24(r22)
 4008e18:	a8ffff17 	ldw	r3,-4(r21)
 4008e1c:	b0c00715 	stw	r3,28(r22)
 4008e20:	003f9b06 	br	4008c90 <__alt_data_end+0xfc008c90>
 4008e24:	9005883a 	mov	r2,r18
 4008e28:	003fc706 	br	4008d48 <__alt_data_end+0xfc008d48>
 4008e2c:	a80b883a 	mov	r5,r21
 4008e30:	9009883a 	mov	r4,r18
 4008e34:	40087c80 	call	40087c8 <memmove>
 4008e38:	003fc906 	br	4008d60 <__alt_data_end+0xfc008d60>
 4008e3c:	a8800217 	ldw	r2,8(r21)
 4008e40:	b0800415 	stw	r2,16(r22)
 4008e44:	a8800317 	ldw	r2,12(r21)
 4008e48:	b0800515 	stw	r2,20(r22)
 4008e4c:	31000726 	beq	r6,r4,4008e6c <_realloc_r+0x548>
 4008e50:	b0800604 	addi	r2,r22,24
 4008e54:	ad400404 	addi	r21,r21,16
 4008e58:	003fbb06 	br	4008d48 <__alt_data_end+0xfc008d48>
 4008e5c:	a009883a 	mov	r4,r20
 4008e60:	400ab340 	call	400ab34 <__malloc_unlock>
 4008e64:	0005883a 	mov	r2,zero
 4008e68:	003f0a06 	br	4008a94 <__alt_data_end+0xfc008a94>
 4008e6c:	a8c00417 	ldw	r3,16(r21)
 4008e70:	ad400604 	addi	r21,r21,24
 4008e74:	b0800804 	addi	r2,r22,32
 4008e78:	b0c00615 	stw	r3,24(r22)
 4008e7c:	a8ffff17 	ldw	r3,-4(r21)
 4008e80:	b0c00715 	stw	r3,28(r22)
 4008e84:	003fb006 	br	4008d48 <__alt_data_end+0xfc008d48>

04008e88 <_sbrk_r>:
 4008e88:	defffd04 	addi	sp,sp,-12
 4008e8c:	dc000015 	stw	r16,0(sp)
 4008e90:	04010074 	movhi	r16,1025
 4008e94:	dc400115 	stw	r17,4(sp)
 4008e98:	84034104 	addi	r16,r16,3332
 4008e9c:	2023883a 	mov	r17,r4
 4008ea0:	2809883a 	mov	r4,r5
 4008ea4:	dfc00215 	stw	ra,8(sp)
 4008ea8:	80000015 	stw	zero,0(r16)
 4008eac:	400ad1c0 	call	400ad1c <sbrk>
 4008eb0:	00ffffc4 	movi	r3,-1
 4008eb4:	10c00526 	beq	r2,r3,4008ecc <_sbrk_r+0x44>
 4008eb8:	dfc00217 	ldw	ra,8(sp)
 4008ebc:	dc400117 	ldw	r17,4(sp)
 4008ec0:	dc000017 	ldw	r16,0(sp)
 4008ec4:	dec00304 	addi	sp,sp,12
 4008ec8:	f800283a 	ret
 4008ecc:	80c00017 	ldw	r3,0(r16)
 4008ed0:	183ff926 	beq	r3,zero,4008eb8 <__alt_data_end+0xfc008eb8>
 4008ed4:	88c00015 	stw	r3,0(r17)
 4008ed8:	003ff706 	br	4008eb8 <__alt_data_end+0xfc008eb8>

04008edc <__sread>:
 4008edc:	defffe04 	addi	sp,sp,-8
 4008ee0:	dc000015 	stw	r16,0(sp)
 4008ee4:	2821883a 	mov	r16,r5
 4008ee8:	2940038f 	ldh	r5,14(r5)
 4008eec:	dfc00115 	stw	ra,4(sp)
 4008ef0:	40097940 	call	4009794 <_read_r>
 4008ef4:	10000716 	blt	r2,zero,4008f14 <__sread+0x38>
 4008ef8:	80c01417 	ldw	r3,80(r16)
 4008efc:	1887883a 	add	r3,r3,r2
 4008f00:	80c01415 	stw	r3,80(r16)
 4008f04:	dfc00117 	ldw	ra,4(sp)
 4008f08:	dc000017 	ldw	r16,0(sp)
 4008f0c:	dec00204 	addi	sp,sp,8
 4008f10:	f800283a 	ret
 4008f14:	80c0030b 	ldhu	r3,12(r16)
 4008f18:	18fbffcc 	andi	r3,r3,61439
 4008f1c:	80c0030d 	sth	r3,12(r16)
 4008f20:	dfc00117 	ldw	ra,4(sp)
 4008f24:	dc000017 	ldw	r16,0(sp)
 4008f28:	dec00204 	addi	sp,sp,8
 4008f2c:	f800283a 	ret

04008f30 <__seofread>:
 4008f30:	0005883a 	mov	r2,zero
 4008f34:	f800283a 	ret

04008f38 <__swrite>:
 4008f38:	2880030b 	ldhu	r2,12(r5)
 4008f3c:	defffb04 	addi	sp,sp,-20
 4008f40:	dcc00315 	stw	r19,12(sp)
 4008f44:	dc800215 	stw	r18,8(sp)
 4008f48:	dc400115 	stw	r17,4(sp)
 4008f4c:	dc000015 	stw	r16,0(sp)
 4008f50:	dfc00415 	stw	ra,16(sp)
 4008f54:	10c0400c 	andi	r3,r2,256
 4008f58:	2821883a 	mov	r16,r5
 4008f5c:	2023883a 	mov	r17,r4
 4008f60:	3025883a 	mov	r18,r6
 4008f64:	3827883a 	mov	r19,r7
 4008f68:	18000526 	beq	r3,zero,4008f80 <__swrite+0x48>
 4008f6c:	2940038f 	ldh	r5,14(r5)
 4008f70:	01c00084 	movi	r7,2
 4008f74:	000d883a 	mov	r6,zero
 4008f78:	40097340 	call	4009734 <_lseek_r>
 4008f7c:	8080030b 	ldhu	r2,12(r16)
 4008f80:	8140038f 	ldh	r5,14(r16)
 4008f84:	10bbffcc 	andi	r2,r2,61439
 4008f88:	980f883a 	mov	r7,r19
 4008f8c:	900d883a 	mov	r6,r18
 4008f90:	8809883a 	mov	r4,r17
 4008f94:	8080030d 	sth	r2,12(r16)
 4008f98:	dfc00417 	ldw	ra,16(sp)
 4008f9c:	dcc00317 	ldw	r19,12(sp)
 4008fa0:	dc800217 	ldw	r18,8(sp)
 4008fa4:	dc400117 	ldw	r17,4(sp)
 4008fa8:	dc000017 	ldw	r16,0(sp)
 4008fac:	dec00504 	addi	sp,sp,20
 4008fb0:	40094cc1 	jmpi	40094cc <_write_r>

04008fb4 <__sseek>:
 4008fb4:	defffe04 	addi	sp,sp,-8
 4008fb8:	dc000015 	stw	r16,0(sp)
 4008fbc:	2821883a 	mov	r16,r5
 4008fc0:	2940038f 	ldh	r5,14(r5)
 4008fc4:	dfc00115 	stw	ra,4(sp)
 4008fc8:	40097340 	call	4009734 <_lseek_r>
 4008fcc:	00ffffc4 	movi	r3,-1
 4008fd0:	10c00826 	beq	r2,r3,4008ff4 <__sseek+0x40>
 4008fd4:	80c0030b 	ldhu	r3,12(r16)
 4008fd8:	80801415 	stw	r2,80(r16)
 4008fdc:	18c40014 	ori	r3,r3,4096
 4008fe0:	80c0030d 	sth	r3,12(r16)
 4008fe4:	dfc00117 	ldw	ra,4(sp)
 4008fe8:	dc000017 	ldw	r16,0(sp)
 4008fec:	dec00204 	addi	sp,sp,8
 4008ff0:	f800283a 	ret
 4008ff4:	80c0030b 	ldhu	r3,12(r16)
 4008ff8:	18fbffcc 	andi	r3,r3,61439
 4008ffc:	80c0030d 	sth	r3,12(r16)
 4009000:	dfc00117 	ldw	ra,4(sp)
 4009004:	dc000017 	ldw	r16,0(sp)
 4009008:	dec00204 	addi	sp,sp,8
 400900c:	f800283a 	ret

04009010 <__sclose>:
 4009010:	2940038f 	ldh	r5,14(r5)
 4009014:	400952c1 	jmpi	400952c <_close_r>

04009018 <strcmp>:
 4009018:	2144b03a 	or	r2,r4,r5
 400901c:	108000cc 	andi	r2,r2,3
 4009020:	1000171e 	bne	r2,zero,4009080 <strcmp+0x68>
 4009024:	20800017 	ldw	r2,0(r4)
 4009028:	28c00017 	ldw	r3,0(r5)
 400902c:	10c0141e 	bne	r2,r3,4009080 <strcmp+0x68>
 4009030:	027fbff4 	movhi	r9,65279
 4009034:	4a7fbfc4 	addi	r9,r9,-257
 4009038:	0086303a 	nor	r3,zero,r2
 400903c:	02202074 	movhi	r8,32897
 4009040:	1245883a 	add	r2,r2,r9
 4009044:	42202004 	addi	r8,r8,-32640
 4009048:	10c4703a 	and	r2,r2,r3
 400904c:	1204703a 	and	r2,r2,r8
 4009050:	10000226 	beq	r2,zero,400905c <strcmp+0x44>
 4009054:	00002306 	br	40090e4 <strcmp+0xcc>
 4009058:	1000221e 	bne	r2,zero,40090e4 <strcmp+0xcc>
 400905c:	21000104 	addi	r4,r4,4
 4009060:	20c00017 	ldw	r3,0(r4)
 4009064:	29400104 	addi	r5,r5,4
 4009068:	29800017 	ldw	r6,0(r5)
 400906c:	1a4f883a 	add	r7,r3,r9
 4009070:	00c4303a 	nor	r2,zero,r3
 4009074:	3884703a 	and	r2,r7,r2
 4009078:	1204703a 	and	r2,r2,r8
 400907c:	19bff626 	beq	r3,r6,4009058 <__alt_data_end+0xfc009058>
 4009080:	20800003 	ldbu	r2,0(r4)
 4009084:	10c03fcc 	andi	r3,r2,255
 4009088:	18c0201c 	xori	r3,r3,128
 400908c:	18ffe004 	addi	r3,r3,-128
 4009090:	18000c26 	beq	r3,zero,40090c4 <strcmp+0xac>
 4009094:	29800007 	ldb	r6,0(r5)
 4009098:	19800326 	beq	r3,r6,40090a8 <strcmp+0x90>
 400909c:	00001306 	br	40090ec <strcmp+0xd4>
 40090a0:	29800007 	ldb	r6,0(r5)
 40090a4:	11800b1e 	bne	r2,r6,40090d4 <strcmp+0xbc>
 40090a8:	21000044 	addi	r4,r4,1
 40090ac:	20c00003 	ldbu	r3,0(r4)
 40090b0:	29400044 	addi	r5,r5,1
 40090b4:	18803fcc 	andi	r2,r3,255
 40090b8:	1080201c 	xori	r2,r2,128
 40090bc:	10bfe004 	addi	r2,r2,-128
 40090c0:	103ff71e 	bne	r2,zero,40090a0 <__alt_data_end+0xfc0090a0>
 40090c4:	0007883a 	mov	r3,zero
 40090c8:	28800003 	ldbu	r2,0(r5)
 40090cc:	1885c83a 	sub	r2,r3,r2
 40090d0:	f800283a 	ret
 40090d4:	28800003 	ldbu	r2,0(r5)
 40090d8:	18c03fcc 	andi	r3,r3,255
 40090dc:	1885c83a 	sub	r2,r3,r2
 40090e0:	f800283a 	ret
 40090e4:	0005883a 	mov	r2,zero
 40090e8:	f800283a 	ret
 40090ec:	10c03fcc 	andi	r3,r2,255
 40090f0:	003ff506 	br	40090c8 <__alt_data_end+0xfc0090c8>

040090f4 <strlen>:
 40090f4:	208000cc 	andi	r2,r4,3
 40090f8:	10002026 	beq	r2,zero,400917c <strlen+0x88>
 40090fc:	20800007 	ldb	r2,0(r4)
 4009100:	10002026 	beq	r2,zero,4009184 <strlen+0x90>
 4009104:	2005883a 	mov	r2,r4
 4009108:	00000206 	br	4009114 <strlen+0x20>
 400910c:	10c00007 	ldb	r3,0(r2)
 4009110:	18001826 	beq	r3,zero,4009174 <strlen+0x80>
 4009114:	10800044 	addi	r2,r2,1
 4009118:	10c000cc 	andi	r3,r2,3
 400911c:	183ffb1e 	bne	r3,zero,400910c <__alt_data_end+0xfc00910c>
 4009120:	10c00017 	ldw	r3,0(r2)
 4009124:	01ffbff4 	movhi	r7,65279
 4009128:	39ffbfc4 	addi	r7,r7,-257
 400912c:	00ca303a 	nor	r5,zero,r3
 4009130:	01a02074 	movhi	r6,32897
 4009134:	19c7883a 	add	r3,r3,r7
 4009138:	31a02004 	addi	r6,r6,-32640
 400913c:	1946703a 	and	r3,r3,r5
 4009140:	1986703a 	and	r3,r3,r6
 4009144:	1800091e 	bne	r3,zero,400916c <strlen+0x78>
 4009148:	10800104 	addi	r2,r2,4
 400914c:	10c00017 	ldw	r3,0(r2)
 4009150:	19cb883a 	add	r5,r3,r7
 4009154:	00c6303a 	nor	r3,zero,r3
 4009158:	28c6703a 	and	r3,r5,r3
 400915c:	1986703a 	and	r3,r3,r6
 4009160:	183ff926 	beq	r3,zero,4009148 <__alt_data_end+0xfc009148>
 4009164:	00000106 	br	400916c <strlen+0x78>
 4009168:	10800044 	addi	r2,r2,1
 400916c:	10c00007 	ldb	r3,0(r2)
 4009170:	183ffd1e 	bne	r3,zero,4009168 <__alt_data_end+0xfc009168>
 4009174:	1105c83a 	sub	r2,r2,r4
 4009178:	f800283a 	ret
 400917c:	2005883a 	mov	r2,r4
 4009180:	003fe706 	br	4009120 <__alt_data_end+0xfc009120>
 4009184:	0005883a 	mov	r2,zero
 4009188:	f800283a 	ret

0400918c <__swbuf_r>:
 400918c:	defffb04 	addi	sp,sp,-20
 4009190:	dcc00315 	stw	r19,12(sp)
 4009194:	dc800215 	stw	r18,8(sp)
 4009198:	dc000015 	stw	r16,0(sp)
 400919c:	dfc00415 	stw	ra,16(sp)
 40091a0:	dc400115 	stw	r17,4(sp)
 40091a4:	2025883a 	mov	r18,r4
 40091a8:	2827883a 	mov	r19,r5
 40091ac:	3021883a 	mov	r16,r6
 40091b0:	20000226 	beq	r4,zero,40091bc <__swbuf_r+0x30>
 40091b4:	20800e17 	ldw	r2,56(r4)
 40091b8:	10004226 	beq	r2,zero,40092c4 <__swbuf_r+0x138>
 40091bc:	80800617 	ldw	r2,24(r16)
 40091c0:	8100030b 	ldhu	r4,12(r16)
 40091c4:	80800215 	stw	r2,8(r16)
 40091c8:	2080020c 	andi	r2,r4,8
 40091cc:	10003626 	beq	r2,zero,40092a8 <__swbuf_r+0x11c>
 40091d0:	80c00417 	ldw	r3,16(r16)
 40091d4:	18003426 	beq	r3,zero,40092a8 <__swbuf_r+0x11c>
 40091d8:	2088000c 	andi	r2,r4,8192
 40091dc:	9c403fcc 	andi	r17,r19,255
 40091e0:	10001a26 	beq	r2,zero,400924c <__swbuf_r+0xc0>
 40091e4:	80800017 	ldw	r2,0(r16)
 40091e8:	81000517 	ldw	r4,20(r16)
 40091ec:	10c7c83a 	sub	r3,r2,r3
 40091f0:	1900200e 	bge	r3,r4,4009274 <__swbuf_r+0xe8>
 40091f4:	18c00044 	addi	r3,r3,1
 40091f8:	81000217 	ldw	r4,8(r16)
 40091fc:	11400044 	addi	r5,r2,1
 4009200:	81400015 	stw	r5,0(r16)
 4009204:	213fffc4 	addi	r4,r4,-1
 4009208:	81000215 	stw	r4,8(r16)
 400920c:	14c00005 	stb	r19,0(r2)
 4009210:	80800517 	ldw	r2,20(r16)
 4009214:	10c01e26 	beq	r2,r3,4009290 <__swbuf_r+0x104>
 4009218:	8080030b 	ldhu	r2,12(r16)
 400921c:	1080004c 	andi	r2,r2,1
 4009220:	10000226 	beq	r2,zero,400922c <__swbuf_r+0xa0>
 4009224:	00800284 	movi	r2,10
 4009228:	88801926 	beq	r17,r2,4009290 <__swbuf_r+0x104>
 400922c:	8805883a 	mov	r2,r17
 4009230:	dfc00417 	ldw	ra,16(sp)
 4009234:	dcc00317 	ldw	r19,12(sp)
 4009238:	dc800217 	ldw	r18,8(sp)
 400923c:	dc400117 	ldw	r17,4(sp)
 4009240:	dc000017 	ldw	r16,0(sp)
 4009244:	dec00504 	addi	sp,sp,20
 4009248:	f800283a 	ret
 400924c:	81401917 	ldw	r5,100(r16)
 4009250:	00b7ffc4 	movi	r2,-8193
 4009254:	21080014 	ori	r4,r4,8192
 4009258:	2884703a 	and	r2,r5,r2
 400925c:	80801915 	stw	r2,100(r16)
 4009260:	80800017 	ldw	r2,0(r16)
 4009264:	8100030d 	sth	r4,12(r16)
 4009268:	81000517 	ldw	r4,20(r16)
 400926c:	10c7c83a 	sub	r3,r2,r3
 4009270:	193fe016 	blt	r3,r4,40091f4 <__alt_data_end+0xfc0091f4>
 4009274:	800b883a 	mov	r5,r16
 4009278:	9009883a 	mov	r4,r18
 400927c:	4006b780 	call	4006b78 <_fflush_r>
 4009280:	1000071e 	bne	r2,zero,40092a0 <__swbuf_r+0x114>
 4009284:	80800017 	ldw	r2,0(r16)
 4009288:	00c00044 	movi	r3,1
 400928c:	003fda06 	br	40091f8 <__alt_data_end+0xfc0091f8>
 4009290:	800b883a 	mov	r5,r16
 4009294:	9009883a 	mov	r4,r18
 4009298:	4006b780 	call	4006b78 <_fflush_r>
 400929c:	103fe326 	beq	r2,zero,400922c <__alt_data_end+0xfc00922c>
 40092a0:	00bfffc4 	movi	r2,-1
 40092a4:	003fe206 	br	4009230 <__alt_data_end+0xfc009230>
 40092a8:	800b883a 	mov	r5,r16
 40092ac:	9009883a 	mov	r4,r18
 40092b0:	40068080 	call	4006808 <__swsetup_r>
 40092b4:	103ffa1e 	bne	r2,zero,40092a0 <__alt_data_end+0xfc0092a0>
 40092b8:	8100030b 	ldhu	r4,12(r16)
 40092bc:	80c00417 	ldw	r3,16(r16)
 40092c0:	003fc506 	br	40091d8 <__alt_data_end+0xfc0091d8>
 40092c4:	4006f640 	call	4006f64 <__sinit>
 40092c8:	003fbc06 	br	40091bc <__alt_data_end+0xfc0091bc>

040092cc <__swbuf>:
 40092cc:	00810074 	movhi	r2,1025
 40092d0:	10bc5904 	addi	r2,r2,-3740
 40092d4:	280d883a 	mov	r6,r5
 40092d8:	200b883a 	mov	r5,r4
 40092dc:	11000017 	ldw	r4,0(r2)
 40092e0:	400918c1 	jmpi	400918c <__swbuf_r>

040092e4 <_wcrtomb_r>:
 40092e4:	defff604 	addi	sp,sp,-40
 40092e8:	00810074 	movhi	r2,1025
 40092ec:	dc800815 	stw	r18,32(sp)
 40092f0:	dc400715 	stw	r17,28(sp)
 40092f4:	dc000615 	stw	r16,24(sp)
 40092f8:	10bc5d04 	addi	r2,r2,-3724
 40092fc:	dfc00915 	stw	ra,36(sp)
 4009300:	2021883a 	mov	r16,r4
 4009304:	3823883a 	mov	r17,r7
 4009308:	14800017 	ldw	r18,0(r2)
 400930c:	28001426 	beq	r5,zero,4009360 <_wcrtomb_r+0x7c>
 4009310:	d9400415 	stw	r5,16(sp)
 4009314:	d9800515 	stw	r6,20(sp)
 4009318:	4007cbc0 	call	4007cbc <__locale_charset>
 400931c:	d9800517 	ldw	r6,20(sp)
 4009320:	d9400417 	ldw	r5,16(sp)
 4009324:	100f883a 	mov	r7,r2
 4009328:	dc400015 	stw	r17,0(sp)
 400932c:	8009883a 	mov	r4,r16
 4009330:	903ee83a 	callr	r18
 4009334:	00ffffc4 	movi	r3,-1
 4009338:	10c0031e 	bne	r2,r3,4009348 <_wcrtomb_r+0x64>
 400933c:	88000015 	stw	zero,0(r17)
 4009340:	00c02284 	movi	r3,138
 4009344:	80c00015 	stw	r3,0(r16)
 4009348:	dfc00917 	ldw	ra,36(sp)
 400934c:	dc800817 	ldw	r18,32(sp)
 4009350:	dc400717 	ldw	r17,28(sp)
 4009354:	dc000617 	ldw	r16,24(sp)
 4009358:	dec00a04 	addi	sp,sp,40
 400935c:	f800283a 	ret
 4009360:	4007cbc0 	call	4007cbc <__locale_charset>
 4009364:	100f883a 	mov	r7,r2
 4009368:	dc400015 	stw	r17,0(sp)
 400936c:	000d883a 	mov	r6,zero
 4009370:	d9400104 	addi	r5,sp,4
 4009374:	8009883a 	mov	r4,r16
 4009378:	903ee83a 	callr	r18
 400937c:	003fed06 	br	4009334 <__alt_data_end+0xfc009334>

04009380 <wcrtomb>:
 4009380:	defff604 	addi	sp,sp,-40
 4009384:	00810074 	movhi	r2,1025
 4009388:	dc800615 	stw	r18,24(sp)
 400938c:	dc400515 	stw	r17,20(sp)
 4009390:	10bc5904 	addi	r2,r2,-3740
 4009394:	dfc00915 	stw	ra,36(sp)
 4009398:	dd000815 	stw	r20,32(sp)
 400939c:	dcc00715 	stw	r19,28(sp)
 40093a0:	dc000415 	stw	r16,16(sp)
 40093a4:	3025883a 	mov	r18,r6
 40093a8:	14400017 	ldw	r17,0(r2)
 40093ac:	20001926 	beq	r4,zero,4009414 <wcrtomb+0x94>
 40093b0:	00810074 	movhi	r2,1025
 40093b4:	10bc5d04 	addi	r2,r2,-3724
 40093b8:	15000017 	ldw	r20,0(r2)
 40093bc:	2021883a 	mov	r16,r4
 40093c0:	2827883a 	mov	r19,r5
 40093c4:	4007cbc0 	call	4007cbc <__locale_charset>
 40093c8:	100f883a 	mov	r7,r2
 40093cc:	dc800015 	stw	r18,0(sp)
 40093d0:	980d883a 	mov	r6,r19
 40093d4:	800b883a 	mov	r5,r16
 40093d8:	8809883a 	mov	r4,r17
 40093dc:	a03ee83a 	callr	r20
 40093e0:	00ffffc4 	movi	r3,-1
 40093e4:	10c0031e 	bne	r2,r3,40093f4 <wcrtomb+0x74>
 40093e8:	90000015 	stw	zero,0(r18)
 40093ec:	00c02284 	movi	r3,138
 40093f0:	88c00015 	stw	r3,0(r17)
 40093f4:	dfc00917 	ldw	ra,36(sp)
 40093f8:	dd000817 	ldw	r20,32(sp)
 40093fc:	dcc00717 	ldw	r19,28(sp)
 4009400:	dc800617 	ldw	r18,24(sp)
 4009404:	dc400517 	ldw	r17,20(sp)
 4009408:	dc000417 	ldw	r16,16(sp)
 400940c:	dec00a04 	addi	sp,sp,40
 4009410:	f800283a 	ret
 4009414:	00810074 	movhi	r2,1025
 4009418:	10bc5d04 	addi	r2,r2,-3724
 400941c:	14000017 	ldw	r16,0(r2)
 4009420:	4007cbc0 	call	4007cbc <__locale_charset>
 4009424:	100f883a 	mov	r7,r2
 4009428:	dc800015 	stw	r18,0(sp)
 400942c:	000d883a 	mov	r6,zero
 4009430:	d9400104 	addi	r5,sp,4
 4009434:	8809883a 	mov	r4,r17
 4009438:	803ee83a 	callr	r16
 400943c:	003fe806 	br	40093e0 <__alt_data_end+0xfc0093e0>

04009440 <__ascii_wctomb>:
 4009440:	28000526 	beq	r5,zero,4009458 <__ascii_wctomb+0x18>
 4009444:	00803fc4 	movi	r2,255
 4009448:	11800536 	bltu	r2,r6,4009460 <__ascii_wctomb+0x20>
 400944c:	29800005 	stb	r6,0(r5)
 4009450:	00800044 	movi	r2,1
 4009454:	f800283a 	ret
 4009458:	0005883a 	mov	r2,zero
 400945c:	f800283a 	ret
 4009460:	00802284 	movi	r2,138
 4009464:	20800015 	stw	r2,0(r4)
 4009468:	00bfffc4 	movi	r2,-1
 400946c:	f800283a 	ret

04009470 <_wctomb_r>:
 4009470:	00810074 	movhi	r2,1025
 4009474:	defff904 	addi	sp,sp,-28
 4009478:	10bc5d04 	addi	r2,r2,-3724
 400947c:	dfc00615 	stw	ra,24(sp)
 4009480:	dc400515 	stw	r17,20(sp)
 4009484:	dc000415 	stw	r16,16(sp)
 4009488:	3823883a 	mov	r17,r7
 400948c:	14000017 	ldw	r16,0(r2)
 4009490:	d9000115 	stw	r4,4(sp)
 4009494:	d9400215 	stw	r5,8(sp)
 4009498:	d9800315 	stw	r6,12(sp)
 400949c:	4007cbc0 	call	4007cbc <__locale_charset>
 40094a0:	d9800317 	ldw	r6,12(sp)
 40094a4:	d9400217 	ldw	r5,8(sp)
 40094a8:	d9000117 	ldw	r4,4(sp)
 40094ac:	100f883a 	mov	r7,r2
 40094b0:	dc400015 	stw	r17,0(sp)
 40094b4:	803ee83a 	callr	r16
 40094b8:	dfc00617 	ldw	ra,24(sp)
 40094bc:	dc400517 	ldw	r17,20(sp)
 40094c0:	dc000417 	ldw	r16,16(sp)
 40094c4:	dec00704 	addi	sp,sp,28
 40094c8:	f800283a 	ret

040094cc <_write_r>:
 40094cc:	defffd04 	addi	sp,sp,-12
 40094d0:	2805883a 	mov	r2,r5
 40094d4:	dc000015 	stw	r16,0(sp)
 40094d8:	04010074 	movhi	r16,1025
 40094dc:	dc400115 	stw	r17,4(sp)
 40094e0:	300b883a 	mov	r5,r6
 40094e4:	84034104 	addi	r16,r16,3332
 40094e8:	2023883a 	mov	r17,r4
 40094ec:	380d883a 	mov	r6,r7
 40094f0:	1009883a 	mov	r4,r2
 40094f4:	dfc00215 	stw	ra,8(sp)
 40094f8:	80000015 	stw	zero,0(r16)
 40094fc:	400ae380 	call	400ae38 <write>
 4009500:	00ffffc4 	movi	r3,-1
 4009504:	10c00526 	beq	r2,r3,400951c <_write_r+0x50>
 4009508:	dfc00217 	ldw	ra,8(sp)
 400950c:	dc400117 	ldw	r17,4(sp)
 4009510:	dc000017 	ldw	r16,0(sp)
 4009514:	dec00304 	addi	sp,sp,12
 4009518:	f800283a 	ret
 400951c:	80c00017 	ldw	r3,0(r16)
 4009520:	183ff926 	beq	r3,zero,4009508 <__alt_data_end+0xfc009508>
 4009524:	88c00015 	stw	r3,0(r17)
 4009528:	003ff706 	br	4009508 <__alt_data_end+0xfc009508>

0400952c <_close_r>:
 400952c:	defffd04 	addi	sp,sp,-12
 4009530:	dc000015 	stw	r16,0(sp)
 4009534:	04010074 	movhi	r16,1025
 4009538:	dc400115 	stw	r17,4(sp)
 400953c:	84034104 	addi	r16,r16,3332
 4009540:	2023883a 	mov	r17,r4
 4009544:	2809883a 	mov	r4,r5
 4009548:	dfc00215 	stw	ra,8(sp)
 400954c:	80000015 	stw	zero,0(r16)
 4009550:	400a3f00 	call	400a3f0 <close>
 4009554:	00ffffc4 	movi	r3,-1
 4009558:	10c00526 	beq	r2,r3,4009570 <_close_r+0x44>
 400955c:	dfc00217 	ldw	ra,8(sp)
 4009560:	dc400117 	ldw	r17,4(sp)
 4009564:	dc000017 	ldw	r16,0(sp)
 4009568:	dec00304 	addi	sp,sp,12
 400956c:	f800283a 	ret
 4009570:	80c00017 	ldw	r3,0(r16)
 4009574:	183ff926 	beq	r3,zero,400955c <__alt_data_end+0xfc00955c>
 4009578:	88c00015 	stw	r3,0(r17)
 400957c:	003ff706 	br	400955c <__alt_data_end+0xfc00955c>

04009580 <_fclose_r>:
 4009580:	28003926 	beq	r5,zero,4009668 <_fclose_r+0xe8>
 4009584:	defffc04 	addi	sp,sp,-16
 4009588:	dc400115 	stw	r17,4(sp)
 400958c:	dc000015 	stw	r16,0(sp)
 4009590:	dfc00315 	stw	ra,12(sp)
 4009594:	dc800215 	stw	r18,8(sp)
 4009598:	2023883a 	mov	r17,r4
 400959c:	2821883a 	mov	r16,r5
 40095a0:	20000226 	beq	r4,zero,40095ac <_fclose_r+0x2c>
 40095a4:	20800e17 	ldw	r2,56(r4)
 40095a8:	10002726 	beq	r2,zero,4009648 <_fclose_r+0xc8>
 40095ac:	8080030f 	ldh	r2,12(r16)
 40095b0:	1000071e 	bne	r2,zero,40095d0 <_fclose_r+0x50>
 40095b4:	0005883a 	mov	r2,zero
 40095b8:	dfc00317 	ldw	ra,12(sp)
 40095bc:	dc800217 	ldw	r18,8(sp)
 40095c0:	dc400117 	ldw	r17,4(sp)
 40095c4:	dc000017 	ldw	r16,0(sp)
 40095c8:	dec00404 	addi	sp,sp,16
 40095cc:	f800283a 	ret
 40095d0:	800b883a 	mov	r5,r16
 40095d4:	8809883a 	mov	r4,r17
 40095d8:	400695c0 	call	400695c <__sflush_r>
 40095dc:	1025883a 	mov	r18,r2
 40095e0:	80800b17 	ldw	r2,44(r16)
 40095e4:	10000426 	beq	r2,zero,40095f8 <_fclose_r+0x78>
 40095e8:	81400717 	ldw	r5,28(r16)
 40095ec:	8809883a 	mov	r4,r17
 40095f0:	103ee83a 	callr	r2
 40095f4:	10001616 	blt	r2,zero,4009650 <_fclose_r+0xd0>
 40095f8:	8080030b 	ldhu	r2,12(r16)
 40095fc:	1080200c 	andi	r2,r2,128
 4009600:	1000151e 	bne	r2,zero,4009658 <_fclose_r+0xd8>
 4009604:	81400c17 	ldw	r5,48(r16)
 4009608:	28000526 	beq	r5,zero,4009620 <_fclose_r+0xa0>
 400960c:	80801004 	addi	r2,r16,64
 4009610:	28800226 	beq	r5,r2,400961c <_fclose_r+0x9c>
 4009614:	8809883a 	mov	r4,r17
 4009618:	40072e00 	call	40072e0 <_free_r>
 400961c:	80000c15 	stw	zero,48(r16)
 4009620:	81401117 	ldw	r5,68(r16)
 4009624:	28000326 	beq	r5,zero,4009634 <_fclose_r+0xb4>
 4009628:	8809883a 	mov	r4,r17
 400962c:	40072e00 	call	40072e0 <_free_r>
 4009630:	80001115 	stw	zero,68(r16)
 4009634:	4006f740 	call	4006f74 <__sfp_lock_acquire>
 4009638:	8000030d 	sth	zero,12(r16)
 400963c:	4006f780 	call	4006f78 <__sfp_lock_release>
 4009640:	9005883a 	mov	r2,r18
 4009644:	003fdc06 	br	40095b8 <__alt_data_end+0xfc0095b8>
 4009648:	4006f640 	call	4006f64 <__sinit>
 400964c:	003fd706 	br	40095ac <__alt_data_end+0xfc0095ac>
 4009650:	04bfffc4 	movi	r18,-1
 4009654:	003fe806 	br	40095f8 <__alt_data_end+0xfc0095f8>
 4009658:	81400417 	ldw	r5,16(r16)
 400965c:	8809883a 	mov	r4,r17
 4009660:	40072e00 	call	40072e0 <_free_r>
 4009664:	003fe706 	br	4009604 <__alt_data_end+0xfc009604>
 4009668:	0005883a 	mov	r2,zero
 400966c:	f800283a 	ret

04009670 <fclose>:
 4009670:	00810074 	movhi	r2,1025
 4009674:	10bc5904 	addi	r2,r2,-3740
 4009678:	200b883a 	mov	r5,r4
 400967c:	11000017 	ldw	r4,0(r2)
 4009680:	40095801 	jmpi	4009580 <_fclose_r>

04009684 <_fstat_r>:
 4009684:	defffd04 	addi	sp,sp,-12
 4009688:	2805883a 	mov	r2,r5
 400968c:	dc000015 	stw	r16,0(sp)
 4009690:	04010074 	movhi	r16,1025
 4009694:	dc400115 	stw	r17,4(sp)
 4009698:	84034104 	addi	r16,r16,3332
 400969c:	2023883a 	mov	r17,r4
 40096a0:	300b883a 	mov	r5,r6
 40096a4:	1009883a 	mov	r4,r2
 40096a8:	dfc00215 	stw	ra,8(sp)
 40096ac:	80000015 	stw	zero,0(r16)
 40096b0:	400a5640 	call	400a564 <fstat>
 40096b4:	00ffffc4 	movi	r3,-1
 40096b8:	10c00526 	beq	r2,r3,40096d0 <_fstat_r+0x4c>
 40096bc:	dfc00217 	ldw	ra,8(sp)
 40096c0:	dc400117 	ldw	r17,4(sp)
 40096c4:	dc000017 	ldw	r16,0(sp)
 40096c8:	dec00304 	addi	sp,sp,12
 40096cc:	f800283a 	ret
 40096d0:	80c00017 	ldw	r3,0(r16)
 40096d4:	183ff926 	beq	r3,zero,40096bc <__alt_data_end+0xfc0096bc>
 40096d8:	88c00015 	stw	r3,0(r17)
 40096dc:	003ff706 	br	40096bc <__alt_data_end+0xfc0096bc>

040096e0 <_isatty_r>:
 40096e0:	defffd04 	addi	sp,sp,-12
 40096e4:	dc000015 	stw	r16,0(sp)
 40096e8:	04010074 	movhi	r16,1025
 40096ec:	dc400115 	stw	r17,4(sp)
 40096f0:	84034104 	addi	r16,r16,3332
 40096f4:	2023883a 	mov	r17,r4
 40096f8:	2809883a 	mov	r4,r5
 40096fc:	dfc00215 	stw	ra,8(sp)
 4009700:	80000015 	stw	zero,0(r16)
 4009704:	400a6780 	call	400a678 <isatty>
 4009708:	00ffffc4 	movi	r3,-1
 400970c:	10c00526 	beq	r2,r3,4009724 <_isatty_r+0x44>
 4009710:	dfc00217 	ldw	ra,8(sp)
 4009714:	dc400117 	ldw	r17,4(sp)
 4009718:	dc000017 	ldw	r16,0(sp)
 400971c:	dec00304 	addi	sp,sp,12
 4009720:	f800283a 	ret
 4009724:	80c00017 	ldw	r3,0(r16)
 4009728:	183ff926 	beq	r3,zero,4009710 <__alt_data_end+0xfc009710>
 400972c:	88c00015 	stw	r3,0(r17)
 4009730:	003ff706 	br	4009710 <__alt_data_end+0xfc009710>

04009734 <_lseek_r>:
 4009734:	defffd04 	addi	sp,sp,-12
 4009738:	2805883a 	mov	r2,r5
 400973c:	dc000015 	stw	r16,0(sp)
 4009740:	04010074 	movhi	r16,1025
 4009744:	dc400115 	stw	r17,4(sp)
 4009748:	300b883a 	mov	r5,r6
 400974c:	84034104 	addi	r16,r16,3332
 4009750:	2023883a 	mov	r17,r4
 4009754:	380d883a 	mov	r6,r7
 4009758:	1009883a 	mov	r4,r2
 400975c:	dfc00215 	stw	ra,8(sp)
 4009760:	80000015 	stw	zero,0(r16)
 4009764:	400a9b80 	call	400a9b8 <lseek>
 4009768:	00ffffc4 	movi	r3,-1
 400976c:	10c00526 	beq	r2,r3,4009784 <_lseek_r+0x50>
 4009770:	dfc00217 	ldw	ra,8(sp)
 4009774:	dc400117 	ldw	r17,4(sp)
 4009778:	dc000017 	ldw	r16,0(sp)
 400977c:	dec00304 	addi	sp,sp,12
 4009780:	f800283a 	ret
 4009784:	80c00017 	ldw	r3,0(r16)
 4009788:	183ff926 	beq	r3,zero,4009770 <__alt_data_end+0xfc009770>
 400978c:	88c00015 	stw	r3,0(r17)
 4009790:	003ff706 	br	4009770 <__alt_data_end+0xfc009770>

04009794 <_read_r>:
 4009794:	defffd04 	addi	sp,sp,-12
 4009798:	2805883a 	mov	r2,r5
 400979c:	dc000015 	stw	r16,0(sp)
 40097a0:	04010074 	movhi	r16,1025
 40097a4:	dc400115 	stw	r17,4(sp)
 40097a8:	300b883a 	mov	r5,r6
 40097ac:	84034104 	addi	r16,r16,3332
 40097b0:	2023883a 	mov	r17,r4
 40097b4:	380d883a 	mov	r6,r7
 40097b8:	1009883a 	mov	r4,r2
 40097bc:	dfc00215 	stw	ra,8(sp)
 40097c0:	80000015 	stw	zero,0(r16)
 40097c4:	400ab940 	call	400ab94 <read>
 40097c8:	00ffffc4 	movi	r3,-1
 40097cc:	10c00526 	beq	r2,r3,40097e4 <_read_r+0x50>
 40097d0:	dfc00217 	ldw	ra,8(sp)
 40097d4:	dc400117 	ldw	r17,4(sp)
 40097d8:	dc000017 	ldw	r16,0(sp)
 40097dc:	dec00304 	addi	sp,sp,12
 40097e0:	f800283a 	ret
 40097e4:	80c00017 	ldw	r3,0(r16)
 40097e8:	183ff926 	beq	r3,zero,40097d0 <__alt_data_end+0xfc0097d0>
 40097ec:	88c00015 	stw	r3,0(r17)
 40097f0:	003ff706 	br	40097d0 <__alt_data_end+0xfc0097d0>

040097f4 <__udivdi3>:
 40097f4:	defff404 	addi	sp,sp,-48
 40097f8:	dcc00515 	stw	r19,20(sp)
 40097fc:	dc000215 	stw	r16,8(sp)
 4009800:	dfc00b15 	stw	ra,44(sp)
 4009804:	df000a15 	stw	fp,40(sp)
 4009808:	ddc00915 	stw	r23,36(sp)
 400980c:	dd800815 	stw	r22,32(sp)
 4009810:	dd400715 	stw	r21,28(sp)
 4009814:	dd000615 	stw	r20,24(sp)
 4009818:	dc800415 	stw	r18,16(sp)
 400981c:	dc400315 	stw	r17,12(sp)
 4009820:	2027883a 	mov	r19,r4
 4009824:	2821883a 	mov	r16,r5
 4009828:	3800461e 	bne	r7,zero,4009944 <__udivdi3+0x150>
 400982c:	3023883a 	mov	r17,r6
 4009830:	2025883a 	mov	r18,r4
 4009834:	2980572e 	bgeu	r5,r6,4009994 <__udivdi3+0x1a0>
 4009838:	00bfffd4 	movui	r2,65535
 400983c:	282d883a 	mov	r22,r5
 4009840:	1180b236 	bltu	r2,r6,4009b0c <__udivdi3+0x318>
 4009844:	00803fc4 	movi	r2,255
 4009848:	1185803a 	cmpltu	r2,r2,r6
 400984c:	100490fa 	slli	r2,r2,3
 4009850:	3086d83a 	srl	r3,r6,r2
 4009854:	01010074 	movhi	r4,1025
 4009858:	21351644 	addi	r4,r4,-11175
 400985c:	20c7883a 	add	r3,r4,r3
 4009860:	18c00003 	ldbu	r3,0(r3)
 4009864:	1885883a 	add	r2,r3,r2
 4009868:	00c00804 	movi	r3,32
 400986c:	1887c83a 	sub	r3,r3,r2
 4009870:	18000526 	beq	r3,zero,4009888 <__udivdi3+0x94>
 4009874:	80e0983a 	sll	r16,r16,r3
 4009878:	9884d83a 	srl	r2,r19,r2
 400987c:	30e2983a 	sll	r17,r6,r3
 4009880:	98e4983a 	sll	r18,r19,r3
 4009884:	142cb03a 	or	r22,r2,r16
 4009888:	882ad43a 	srli	r21,r17,16
 400988c:	b009883a 	mov	r4,r22
 4009890:	8d3fffcc 	andi	r20,r17,65535
 4009894:	a80b883a 	mov	r5,r21
 4009898:	40035440 	call	4003544 <__umodsi3>
 400989c:	b009883a 	mov	r4,r22
 40098a0:	a80b883a 	mov	r5,r21
 40098a4:	1027883a 	mov	r19,r2
 40098a8:	40034e00 	call	40034e0 <__udivsi3>
 40098ac:	100b883a 	mov	r5,r2
 40098b0:	a009883a 	mov	r4,r20
 40098b4:	102d883a 	mov	r22,r2
 40098b8:	400359c0 	call	400359c <__mulsi3>
 40098bc:	9826943a 	slli	r19,r19,16
 40098c0:	9006d43a 	srli	r3,r18,16
 40098c4:	1cc6b03a 	or	r3,r3,r19
 40098c8:	1880052e 	bgeu	r3,r2,40098e0 <__udivdi3+0xec>
 40098cc:	1c47883a 	add	r3,r3,r17
 40098d0:	b13fffc4 	addi	r4,r22,-1
 40098d4:	1c400136 	bltu	r3,r17,40098dc <__udivdi3+0xe8>
 40098d8:	18814236 	bltu	r3,r2,4009de4 <__udivdi3+0x5f0>
 40098dc:	202d883a 	mov	r22,r4
 40098e0:	18a1c83a 	sub	r16,r3,r2
 40098e4:	8009883a 	mov	r4,r16
 40098e8:	a80b883a 	mov	r5,r21
 40098ec:	40035440 	call	4003544 <__umodsi3>
 40098f0:	1027883a 	mov	r19,r2
 40098f4:	8009883a 	mov	r4,r16
 40098f8:	a80b883a 	mov	r5,r21
 40098fc:	9826943a 	slli	r19,r19,16
 4009900:	40034e00 	call	40034e0 <__udivsi3>
 4009904:	100b883a 	mov	r5,r2
 4009908:	a009883a 	mov	r4,r20
 400990c:	94bfffcc 	andi	r18,r18,65535
 4009910:	1021883a 	mov	r16,r2
 4009914:	94e4b03a 	or	r18,r18,r19
 4009918:	400359c0 	call	400359c <__mulsi3>
 400991c:	9080052e 	bgeu	r18,r2,4009934 <__udivdi3+0x140>
 4009920:	8ca5883a 	add	r18,r17,r18
 4009924:	80ffffc4 	addi	r3,r16,-1
 4009928:	94410c36 	bltu	r18,r17,4009d5c <__udivdi3+0x568>
 400992c:	90810b2e 	bgeu	r18,r2,4009d5c <__udivdi3+0x568>
 4009930:	843fff84 	addi	r16,r16,-2
 4009934:	b004943a 	slli	r2,r22,16
 4009938:	0007883a 	mov	r3,zero
 400993c:	1404b03a 	or	r2,r2,r16
 4009940:	00005e06 	br	4009abc <__udivdi3+0x2c8>
 4009944:	29c05b36 	bltu	r5,r7,4009ab4 <__udivdi3+0x2c0>
 4009948:	00bfffd4 	movui	r2,65535
 400994c:	11c0672e 	bgeu	r2,r7,4009aec <__udivdi3+0x2f8>
 4009950:	00804034 	movhi	r2,256
 4009954:	10bfffc4 	addi	r2,r2,-1
 4009958:	11c10a36 	bltu	r2,r7,4009d84 <__udivdi3+0x590>
 400995c:	00800404 	movi	r2,16
 4009960:	3886d83a 	srl	r3,r7,r2
 4009964:	01010074 	movhi	r4,1025
 4009968:	21351644 	addi	r4,r4,-11175
 400996c:	20c7883a 	add	r3,r4,r3
 4009970:	18c00003 	ldbu	r3,0(r3)
 4009974:	05c00804 	movi	r23,32
 4009978:	1885883a 	add	r2,r3,r2
 400997c:	b8afc83a 	sub	r23,r23,r2
 4009980:	b800671e 	bne	r23,zero,4009b20 <__udivdi3+0x32c>
 4009984:	3c010536 	bltu	r7,r16,4009d9c <__udivdi3+0x5a8>
 4009988:	9985403a 	cmpgeu	r2,r19,r6
 400998c:	0007883a 	mov	r3,zero
 4009990:	00004a06 	br	4009abc <__udivdi3+0x2c8>
 4009994:	3000041e 	bne	r6,zero,40099a8 <__udivdi3+0x1b4>
 4009998:	000b883a 	mov	r5,zero
 400999c:	01000044 	movi	r4,1
 40099a0:	40034e00 	call	40034e0 <__udivsi3>
 40099a4:	1023883a 	mov	r17,r2
 40099a8:	00bfffd4 	movui	r2,65535
 40099ac:	1440532e 	bgeu	r2,r17,4009afc <__udivdi3+0x308>
 40099b0:	00804034 	movhi	r2,256
 40099b4:	10bfffc4 	addi	r2,r2,-1
 40099b8:	1440f436 	bltu	r2,r17,4009d8c <__udivdi3+0x598>
 40099bc:	00800404 	movi	r2,16
 40099c0:	8886d83a 	srl	r3,r17,r2
 40099c4:	01010074 	movhi	r4,1025
 40099c8:	21351644 	addi	r4,r4,-11175
 40099cc:	20c7883a 	add	r3,r4,r3
 40099d0:	18c00003 	ldbu	r3,0(r3)
 40099d4:	1885883a 	add	r2,r3,r2
 40099d8:	00c00804 	movi	r3,32
 40099dc:	1887c83a 	sub	r3,r3,r2
 40099e0:	1800a51e 	bne	r3,zero,4009c78 <__udivdi3+0x484>
 40099e4:	882ad43a 	srli	r21,r17,16
 40099e8:	8461c83a 	sub	r16,r16,r17
 40099ec:	8d3fffcc 	andi	r20,r17,65535
 40099f0:	00c00044 	movi	r3,1
 40099f4:	a80b883a 	mov	r5,r21
 40099f8:	8009883a 	mov	r4,r16
 40099fc:	d8c00115 	stw	r3,4(sp)
 4009a00:	40035440 	call	4003544 <__umodsi3>
 4009a04:	a80b883a 	mov	r5,r21
 4009a08:	8009883a 	mov	r4,r16
 4009a0c:	1027883a 	mov	r19,r2
 4009a10:	40034e00 	call	40034e0 <__udivsi3>
 4009a14:	a00b883a 	mov	r5,r20
 4009a18:	1009883a 	mov	r4,r2
 4009a1c:	102d883a 	mov	r22,r2
 4009a20:	400359c0 	call	400359c <__mulsi3>
 4009a24:	9826943a 	slli	r19,r19,16
 4009a28:	900ed43a 	srli	r7,r18,16
 4009a2c:	d8c00117 	ldw	r3,4(sp)
 4009a30:	3cceb03a 	or	r7,r7,r19
 4009a34:	3880052e 	bgeu	r7,r2,4009a4c <__udivdi3+0x258>
 4009a38:	3c4f883a 	add	r7,r7,r17
 4009a3c:	b13fffc4 	addi	r4,r22,-1
 4009a40:	3c400136 	bltu	r7,r17,4009a48 <__udivdi3+0x254>
 4009a44:	3880e436 	bltu	r7,r2,4009dd8 <__udivdi3+0x5e4>
 4009a48:	202d883a 	mov	r22,r4
 4009a4c:	38a1c83a 	sub	r16,r7,r2
 4009a50:	8009883a 	mov	r4,r16
 4009a54:	a80b883a 	mov	r5,r21
 4009a58:	d8c00115 	stw	r3,4(sp)
 4009a5c:	40035440 	call	4003544 <__umodsi3>
 4009a60:	1027883a 	mov	r19,r2
 4009a64:	8009883a 	mov	r4,r16
 4009a68:	a80b883a 	mov	r5,r21
 4009a6c:	9826943a 	slli	r19,r19,16
 4009a70:	40034e00 	call	40034e0 <__udivsi3>
 4009a74:	a00b883a 	mov	r5,r20
 4009a78:	1009883a 	mov	r4,r2
 4009a7c:	94bfffcc 	andi	r18,r18,65535
 4009a80:	1021883a 	mov	r16,r2
 4009a84:	94e4b03a 	or	r18,r18,r19
 4009a88:	400359c0 	call	400359c <__mulsi3>
 4009a8c:	d8c00117 	ldw	r3,4(sp)
 4009a90:	9080052e 	bgeu	r18,r2,4009aa8 <__udivdi3+0x2b4>
 4009a94:	8ca5883a 	add	r18,r17,r18
 4009a98:	813fffc4 	addi	r4,r16,-1
 4009a9c:	9440ad36 	bltu	r18,r17,4009d54 <__udivdi3+0x560>
 4009aa0:	9080ac2e 	bgeu	r18,r2,4009d54 <__udivdi3+0x560>
 4009aa4:	843fff84 	addi	r16,r16,-2
 4009aa8:	b004943a 	slli	r2,r22,16
 4009aac:	1404b03a 	or	r2,r2,r16
 4009ab0:	00000206 	br	4009abc <__udivdi3+0x2c8>
 4009ab4:	0007883a 	mov	r3,zero
 4009ab8:	0005883a 	mov	r2,zero
 4009abc:	dfc00b17 	ldw	ra,44(sp)
 4009ac0:	df000a17 	ldw	fp,40(sp)
 4009ac4:	ddc00917 	ldw	r23,36(sp)
 4009ac8:	dd800817 	ldw	r22,32(sp)
 4009acc:	dd400717 	ldw	r21,28(sp)
 4009ad0:	dd000617 	ldw	r20,24(sp)
 4009ad4:	dcc00517 	ldw	r19,20(sp)
 4009ad8:	dc800417 	ldw	r18,16(sp)
 4009adc:	dc400317 	ldw	r17,12(sp)
 4009ae0:	dc000217 	ldw	r16,8(sp)
 4009ae4:	dec00c04 	addi	sp,sp,48
 4009ae8:	f800283a 	ret
 4009aec:	00803fc4 	movi	r2,255
 4009af0:	11c5803a 	cmpltu	r2,r2,r7
 4009af4:	100490fa 	slli	r2,r2,3
 4009af8:	003f9906 	br	4009960 <__alt_data_end+0xfc009960>
 4009afc:	00803fc4 	movi	r2,255
 4009b00:	1445803a 	cmpltu	r2,r2,r17
 4009b04:	100490fa 	slli	r2,r2,3
 4009b08:	003fad06 	br	40099c0 <__alt_data_end+0xfc0099c0>
 4009b0c:	00804034 	movhi	r2,256
 4009b10:	10bfffc4 	addi	r2,r2,-1
 4009b14:	11809f36 	bltu	r2,r6,4009d94 <__udivdi3+0x5a0>
 4009b18:	00800404 	movi	r2,16
 4009b1c:	003f4c06 	br	4009850 <__alt_data_end+0xfc009850>
 4009b20:	3dce983a 	sll	r7,r7,r23
 4009b24:	30b8d83a 	srl	fp,r6,r2
 4009b28:	80a2d83a 	srl	r17,r16,r2
 4009b2c:	35cc983a 	sll	r6,r6,r23
 4009b30:	3f38b03a 	or	fp,r7,fp
 4009b34:	e024d43a 	srli	r18,fp,16
 4009b38:	9884d83a 	srl	r2,r19,r2
 4009b3c:	85e0983a 	sll	r16,r16,r23
 4009b40:	8809883a 	mov	r4,r17
 4009b44:	900b883a 	mov	r5,r18
 4009b48:	d9800015 	stw	r6,0(sp)
 4009b4c:	1420b03a 	or	r16,r2,r16
 4009b50:	40035440 	call	4003544 <__umodsi3>
 4009b54:	900b883a 	mov	r5,r18
 4009b58:	8809883a 	mov	r4,r17
 4009b5c:	1029883a 	mov	r20,r2
 4009b60:	e5bfffcc 	andi	r22,fp,65535
 4009b64:	40034e00 	call	40034e0 <__udivsi3>
 4009b68:	100b883a 	mov	r5,r2
 4009b6c:	b009883a 	mov	r4,r22
 4009b70:	102b883a 	mov	r21,r2
 4009b74:	400359c0 	call	400359c <__mulsi3>
 4009b78:	a028943a 	slli	r20,r20,16
 4009b7c:	8006d43a 	srli	r3,r16,16
 4009b80:	1d06b03a 	or	r3,r3,r20
 4009b84:	1880042e 	bgeu	r3,r2,4009b98 <__udivdi3+0x3a4>
 4009b88:	1f07883a 	add	r3,r3,fp
 4009b8c:	a93fffc4 	addi	r4,r21,-1
 4009b90:	1f00892e 	bgeu	r3,fp,4009db8 <__udivdi3+0x5c4>
 4009b94:	202b883a 	mov	r21,r4
 4009b98:	18a3c83a 	sub	r17,r3,r2
 4009b9c:	8809883a 	mov	r4,r17
 4009ba0:	900b883a 	mov	r5,r18
 4009ba4:	40035440 	call	4003544 <__umodsi3>
 4009ba8:	1029883a 	mov	r20,r2
 4009bac:	8809883a 	mov	r4,r17
 4009bb0:	900b883a 	mov	r5,r18
 4009bb4:	a028943a 	slli	r20,r20,16
 4009bb8:	40034e00 	call	40034e0 <__udivsi3>
 4009bbc:	100b883a 	mov	r5,r2
 4009bc0:	b009883a 	mov	r4,r22
 4009bc4:	843fffcc 	andi	r16,r16,65535
 4009bc8:	1023883a 	mov	r17,r2
 4009bcc:	8520b03a 	or	r16,r16,r20
 4009bd0:	400359c0 	call	400359c <__mulsi3>
 4009bd4:	8080042e 	bgeu	r16,r2,4009be8 <__udivdi3+0x3f4>
 4009bd8:	8721883a 	add	r16,r16,fp
 4009bdc:	88ffffc4 	addi	r3,r17,-1
 4009be0:	8700712e 	bgeu	r16,fp,4009da8 <__udivdi3+0x5b4>
 4009be4:	1823883a 	mov	r17,r3
 4009be8:	a80e943a 	slli	r7,r21,16
 4009bec:	d8c00017 	ldw	r3,0(sp)
 4009bf0:	80a1c83a 	sub	r16,r16,r2
 4009bf4:	3c64b03a 	or	r18,r7,r17
 4009bf8:	1d3fffcc 	andi	r20,r3,65535
 4009bfc:	9022d43a 	srli	r17,r18,16
 4009c00:	95bfffcc 	andi	r22,r18,65535
 4009c04:	a00b883a 	mov	r5,r20
 4009c08:	b009883a 	mov	r4,r22
 4009c0c:	182ad43a 	srli	r21,r3,16
 4009c10:	400359c0 	call	400359c <__mulsi3>
 4009c14:	a00b883a 	mov	r5,r20
 4009c18:	8809883a 	mov	r4,r17
 4009c1c:	1039883a 	mov	fp,r2
 4009c20:	400359c0 	call	400359c <__mulsi3>
 4009c24:	8809883a 	mov	r4,r17
 4009c28:	a80b883a 	mov	r5,r21
 4009c2c:	1029883a 	mov	r20,r2
 4009c30:	400359c0 	call	400359c <__mulsi3>
 4009c34:	a80b883a 	mov	r5,r21
 4009c38:	b009883a 	mov	r4,r22
 4009c3c:	1023883a 	mov	r17,r2
 4009c40:	400359c0 	call	400359c <__mulsi3>
 4009c44:	e006d43a 	srli	r3,fp,16
 4009c48:	1505883a 	add	r2,r2,r20
 4009c4c:	1887883a 	add	r3,r3,r2
 4009c50:	1d00022e 	bgeu	r3,r20,4009c5c <__udivdi3+0x468>
 4009c54:	00800074 	movhi	r2,1
 4009c58:	88a3883a 	add	r17,r17,r2
 4009c5c:	1804d43a 	srli	r2,r3,16
 4009c60:	1463883a 	add	r17,r2,r17
 4009c64:	84404436 	bltu	r16,r17,4009d78 <__udivdi3+0x584>
 4009c68:	84403e26 	beq	r16,r17,4009d64 <__udivdi3+0x570>
 4009c6c:	9005883a 	mov	r2,r18
 4009c70:	0007883a 	mov	r3,zero
 4009c74:	003f9106 	br	4009abc <__alt_data_end+0xfc009abc>
 4009c78:	88e2983a 	sll	r17,r17,r3
 4009c7c:	80aed83a 	srl	r23,r16,r2
 4009c80:	80e0983a 	sll	r16,r16,r3
 4009c84:	882ad43a 	srli	r21,r17,16
 4009c88:	9884d83a 	srl	r2,r19,r2
 4009c8c:	b809883a 	mov	r4,r23
 4009c90:	a80b883a 	mov	r5,r21
 4009c94:	98e4983a 	sll	r18,r19,r3
 4009c98:	142cb03a 	or	r22,r2,r16
 4009c9c:	40035440 	call	4003544 <__umodsi3>
 4009ca0:	b809883a 	mov	r4,r23
 4009ca4:	a80b883a 	mov	r5,r21
 4009ca8:	1027883a 	mov	r19,r2
 4009cac:	8d3fffcc 	andi	r20,r17,65535
 4009cb0:	40034e00 	call	40034e0 <__udivsi3>
 4009cb4:	a009883a 	mov	r4,r20
 4009cb8:	100b883a 	mov	r5,r2
 4009cbc:	102f883a 	mov	r23,r2
 4009cc0:	400359c0 	call	400359c <__mulsi3>
 4009cc4:	9826943a 	slli	r19,r19,16
 4009cc8:	b008d43a 	srli	r4,r22,16
 4009ccc:	24c8b03a 	or	r4,r4,r19
 4009cd0:	2080062e 	bgeu	r4,r2,4009cec <__udivdi3+0x4f8>
 4009cd4:	2449883a 	add	r4,r4,r17
 4009cd8:	b8ffffc4 	addi	r3,r23,-1
 4009cdc:	24403c36 	bltu	r4,r17,4009dd0 <__udivdi3+0x5dc>
 4009ce0:	20803b2e 	bgeu	r4,r2,4009dd0 <__udivdi3+0x5dc>
 4009ce4:	bdffff84 	addi	r23,r23,-2
 4009ce8:	2449883a 	add	r4,r4,r17
 4009cec:	20a1c83a 	sub	r16,r4,r2
 4009cf0:	a80b883a 	mov	r5,r21
 4009cf4:	8009883a 	mov	r4,r16
 4009cf8:	40035440 	call	4003544 <__umodsi3>
 4009cfc:	a80b883a 	mov	r5,r21
 4009d00:	8009883a 	mov	r4,r16
 4009d04:	1027883a 	mov	r19,r2
 4009d08:	40034e00 	call	40034e0 <__udivsi3>
 4009d0c:	a009883a 	mov	r4,r20
 4009d10:	100b883a 	mov	r5,r2
 4009d14:	9826943a 	slli	r19,r19,16
 4009d18:	1039883a 	mov	fp,r2
 4009d1c:	400359c0 	call	400359c <__mulsi3>
 4009d20:	b13fffcc 	andi	r4,r22,65535
 4009d24:	24c8b03a 	or	r4,r4,r19
 4009d28:	2080062e 	bgeu	r4,r2,4009d44 <__udivdi3+0x550>
 4009d2c:	2449883a 	add	r4,r4,r17
 4009d30:	e0ffffc4 	addi	r3,fp,-1
 4009d34:	24402436 	bltu	r4,r17,4009dc8 <__udivdi3+0x5d4>
 4009d38:	2080232e 	bgeu	r4,r2,4009dc8 <__udivdi3+0x5d4>
 4009d3c:	e73fff84 	addi	fp,fp,-2
 4009d40:	2449883a 	add	r4,r4,r17
 4009d44:	b82e943a 	slli	r23,r23,16
 4009d48:	20a1c83a 	sub	r16,r4,r2
 4009d4c:	bf06b03a 	or	r3,r23,fp
 4009d50:	003f2806 	br	40099f4 <__alt_data_end+0xfc0099f4>
 4009d54:	2021883a 	mov	r16,r4
 4009d58:	003f5306 	br	4009aa8 <__alt_data_end+0xfc009aa8>
 4009d5c:	1821883a 	mov	r16,r3
 4009d60:	003ef406 	br	4009934 <__alt_data_end+0xfc009934>
 4009d64:	1806943a 	slli	r3,r3,16
 4009d68:	9de6983a 	sll	r19,r19,r23
 4009d6c:	e73fffcc 	andi	fp,fp,65535
 4009d70:	1f07883a 	add	r3,r3,fp
 4009d74:	98ffbd2e 	bgeu	r19,r3,4009c6c <__alt_data_end+0xfc009c6c>
 4009d78:	90bfffc4 	addi	r2,r18,-1
 4009d7c:	0007883a 	mov	r3,zero
 4009d80:	003f4e06 	br	4009abc <__alt_data_end+0xfc009abc>
 4009d84:	00800604 	movi	r2,24
 4009d88:	003ef506 	br	4009960 <__alt_data_end+0xfc009960>
 4009d8c:	00800604 	movi	r2,24
 4009d90:	003f0b06 	br	40099c0 <__alt_data_end+0xfc0099c0>
 4009d94:	00800604 	movi	r2,24
 4009d98:	003ead06 	br	4009850 <__alt_data_end+0xfc009850>
 4009d9c:	0007883a 	mov	r3,zero
 4009da0:	00800044 	movi	r2,1
 4009da4:	003f4506 	br	4009abc <__alt_data_end+0xfc009abc>
 4009da8:	80bf8e2e 	bgeu	r16,r2,4009be4 <__alt_data_end+0xfc009be4>
 4009dac:	8c7fff84 	addi	r17,r17,-2
 4009db0:	8721883a 	add	r16,r16,fp
 4009db4:	003f8c06 	br	4009be8 <__alt_data_end+0xfc009be8>
 4009db8:	18bf762e 	bgeu	r3,r2,4009b94 <__alt_data_end+0xfc009b94>
 4009dbc:	ad7fff84 	addi	r21,r21,-2
 4009dc0:	1f07883a 	add	r3,r3,fp
 4009dc4:	003f7406 	br	4009b98 <__alt_data_end+0xfc009b98>
 4009dc8:	1839883a 	mov	fp,r3
 4009dcc:	003fdd06 	br	4009d44 <__alt_data_end+0xfc009d44>
 4009dd0:	182f883a 	mov	r23,r3
 4009dd4:	003fc506 	br	4009cec <__alt_data_end+0xfc009cec>
 4009dd8:	b5bfff84 	addi	r22,r22,-2
 4009ddc:	3c4f883a 	add	r7,r7,r17
 4009de0:	003f1a06 	br	4009a4c <__alt_data_end+0xfc009a4c>
 4009de4:	b5bfff84 	addi	r22,r22,-2
 4009de8:	1c47883a 	add	r3,r3,r17
 4009dec:	003ebc06 	br	40098e0 <__alt_data_end+0xfc0098e0>

04009df0 <__umoddi3>:
 4009df0:	defff304 	addi	sp,sp,-52
 4009df4:	df000b15 	stw	fp,44(sp)
 4009df8:	dc400415 	stw	r17,16(sp)
 4009dfc:	dc000315 	stw	r16,12(sp)
 4009e00:	dfc00c15 	stw	ra,48(sp)
 4009e04:	ddc00a15 	stw	r23,40(sp)
 4009e08:	dd800915 	stw	r22,36(sp)
 4009e0c:	dd400815 	stw	r21,32(sp)
 4009e10:	dd000715 	stw	r20,28(sp)
 4009e14:	dcc00615 	stw	r19,24(sp)
 4009e18:	dc800515 	stw	r18,20(sp)
 4009e1c:	2021883a 	mov	r16,r4
 4009e20:	2823883a 	mov	r17,r5
 4009e24:	2839883a 	mov	fp,r5
 4009e28:	3800401e 	bne	r7,zero,4009f2c <__umoddi3+0x13c>
 4009e2c:	3027883a 	mov	r19,r6
 4009e30:	2029883a 	mov	r20,r4
 4009e34:	2980552e 	bgeu	r5,r6,4009f8c <__umoddi3+0x19c>
 4009e38:	00bfffd4 	movui	r2,65535
 4009e3c:	1180a236 	bltu	r2,r6,400a0c8 <__umoddi3+0x2d8>
 4009e40:	01003fc4 	movi	r4,255
 4009e44:	2189803a 	cmpltu	r4,r4,r6
 4009e48:	200890fa 	slli	r4,r4,3
 4009e4c:	3104d83a 	srl	r2,r6,r4
 4009e50:	00c10074 	movhi	r3,1025
 4009e54:	18f51644 	addi	r3,r3,-11175
 4009e58:	1885883a 	add	r2,r3,r2
 4009e5c:	10c00003 	ldbu	r3,0(r2)
 4009e60:	00800804 	movi	r2,32
 4009e64:	1909883a 	add	r4,r3,r4
 4009e68:	1125c83a 	sub	r18,r2,r4
 4009e6c:	90000526 	beq	r18,zero,4009e84 <__umoddi3+0x94>
 4009e70:	8ca2983a 	sll	r17,r17,r18
 4009e74:	8108d83a 	srl	r4,r16,r4
 4009e78:	34a6983a 	sll	r19,r6,r18
 4009e7c:	84a8983a 	sll	r20,r16,r18
 4009e80:	2478b03a 	or	fp,r4,r17
 4009e84:	982cd43a 	srli	r22,r19,16
 4009e88:	e009883a 	mov	r4,fp
 4009e8c:	9dffffcc 	andi	r23,r19,65535
 4009e90:	b00b883a 	mov	r5,r22
 4009e94:	40035440 	call	4003544 <__umodsi3>
 4009e98:	b00b883a 	mov	r5,r22
 4009e9c:	e009883a 	mov	r4,fp
 4009ea0:	102b883a 	mov	r21,r2
 4009ea4:	40034e00 	call	40034e0 <__udivsi3>
 4009ea8:	100b883a 	mov	r5,r2
 4009eac:	b809883a 	mov	r4,r23
 4009eb0:	400359c0 	call	400359c <__mulsi3>
 4009eb4:	a82a943a 	slli	r21,r21,16
 4009eb8:	a006d43a 	srli	r3,r20,16
 4009ebc:	1d46b03a 	or	r3,r3,r21
 4009ec0:	1880032e 	bgeu	r3,r2,4009ed0 <__umoddi3+0xe0>
 4009ec4:	1cc7883a 	add	r3,r3,r19
 4009ec8:	1cc00136 	bltu	r3,r19,4009ed0 <__umoddi3+0xe0>
 4009ecc:	18813136 	bltu	r3,r2,400a394 <__umoddi3+0x5a4>
 4009ed0:	18a1c83a 	sub	r16,r3,r2
 4009ed4:	b00b883a 	mov	r5,r22
 4009ed8:	8009883a 	mov	r4,r16
 4009edc:	40035440 	call	4003544 <__umodsi3>
 4009ee0:	b00b883a 	mov	r5,r22
 4009ee4:	8009883a 	mov	r4,r16
 4009ee8:	1023883a 	mov	r17,r2
 4009eec:	40034e00 	call	40034e0 <__udivsi3>
 4009ef0:	100b883a 	mov	r5,r2
 4009ef4:	b809883a 	mov	r4,r23
 4009ef8:	8822943a 	slli	r17,r17,16
 4009efc:	400359c0 	call	400359c <__mulsi3>
 4009f00:	a0ffffcc 	andi	r3,r20,65535
 4009f04:	1c46b03a 	or	r3,r3,r17
 4009f08:	1880042e 	bgeu	r3,r2,4009f1c <__umoddi3+0x12c>
 4009f0c:	1cc7883a 	add	r3,r3,r19
 4009f10:	1cc00236 	bltu	r3,r19,4009f1c <__umoddi3+0x12c>
 4009f14:	1880012e 	bgeu	r3,r2,4009f1c <__umoddi3+0x12c>
 4009f18:	1cc7883a 	add	r3,r3,r19
 4009f1c:	1885c83a 	sub	r2,r3,r2
 4009f20:	1484d83a 	srl	r2,r2,r18
 4009f24:	0007883a 	mov	r3,zero
 4009f28:	00005306 	br	400a078 <__umoddi3+0x288>
 4009f2c:	29c05036 	bltu	r5,r7,400a070 <__umoddi3+0x280>
 4009f30:	00bfffd4 	movui	r2,65535
 4009f34:	11c05c2e 	bgeu	r2,r7,400a0a8 <__umoddi3+0x2b8>
 4009f38:	00804034 	movhi	r2,256
 4009f3c:	10bfffc4 	addi	r2,r2,-1
 4009f40:	11c10636 	bltu	r2,r7,400a35c <__umoddi3+0x56c>
 4009f44:	01000404 	movi	r4,16
 4009f48:	3904d83a 	srl	r2,r7,r4
 4009f4c:	00c10074 	movhi	r3,1025
 4009f50:	18f51644 	addi	r3,r3,-11175
 4009f54:	1885883a 	add	r2,r3,r2
 4009f58:	14c00003 	ldbu	r19,0(r2)
 4009f5c:	00c00804 	movi	r3,32
 4009f60:	9927883a 	add	r19,r19,r4
 4009f64:	1ce9c83a 	sub	r20,r3,r19
 4009f68:	a0005c1e 	bne	r20,zero,400a0dc <__umoddi3+0x2ec>
 4009f6c:	3c400136 	bltu	r7,r17,4009f74 <__umoddi3+0x184>
 4009f70:	81810a36 	bltu	r16,r6,400a39c <__umoddi3+0x5ac>
 4009f74:	8185c83a 	sub	r2,r16,r6
 4009f78:	89e3c83a 	sub	r17,r17,r7
 4009f7c:	8089803a 	cmpltu	r4,r16,r2
 4009f80:	8939c83a 	sub	fp,r17,r4
 4009f84:	e007883a 	mov	r3,fp
 4009f88:	00003b06 	br	400a078 <__umoddi3+0x288>
 4009f8c:	3000041e 	bne	r6,zero,4009fa0 <__umoddi3+0x1b0>
 4009f90:	000b883a 	mov	r5,zero
 4009f94:	01000044 	movi	r4,1
 4009f98:	40034e00 	call	40034e0 <__udivsi3>
 4009f9c:	1027883a 	mov	r19,r2
 4009fa0:	00bfffd4 	movui	r2,65535
 4009fa4:	14c0442e 	bgeu	r2,r19,400a0b8 <__umoddi3+0x2c8>
 4009fa8:	00804034 	movhi	r2,256
 4009fac:	10bfffc4 	addi	r2,r2,-1
 4009fb0:	14c0ec36 	bltu	r2,r19,400a364 <__umoddi3+0x574>
 4009fb4:	00800404 	movi	r2,16
 4009fb8:	9886d83a 	srl	r3,r19,r2
 4009fbc:	01010074 	movhi	r4,1025
 4009fc0:	21351644 	addi	r4,r4,-11175
 4009fc4:	20c7883a 	add	r3,r4,r3
 4009fc8:	18c00003 	ldbu	r3,0(r3)
 4009fcc:	1887883a 	add	r3,r3,r2
 4009fd0:	00800804 	movi	r2,32
 4009fd4:	10e5c83a 	sub	r18,r2,r3
 4009fd8:	9000ab1e 	bne	r18,zero,400a288 <__umoddi3+0x498>
 4009fdc:	982cd43a 	srli	r22,r19,16
 4009fe0:	8ce3c83a 	sub	r17,r17,r19
 4009fe4:	9dffffcc 	andi	r23,r19,65535
 4009fe8:	b00b883a 	mov	r5,r22
 4009fec:	8809883a 	mov	r4,r17
 4009ff0:	40035440 	call	4003544 <__umodsi3>
 4009ff4:	b00b883a 	mov	r5,r22
 4009ff8:	8809883a 	mov	r4,r17
 4009ffc:	102b883a 	mov	r21,r2
 400a000:	40034e00 	call	40034e0 <__udivsi3>
 400a004:	b80b883a 	mov	r5,r23
 400a008:	1009883a 	mov	r4,r2
 400a00c:	400359c0 	call	400359c <__mulsi3>
 400a010:	a82a943a 	slli	r21,r21,16
 400a014:	a006d43a 	srli	r3,r20,16
 400a018:	1d46b03a 	or	r3,r3,r21
 400a01c:	1880042e 	bgeu	r3,r2,400a030 <__umoddi3+0x240>
 400a020:	1cc7883a 	add	r3,r3,r19
 400a024:	1cc00236 	bltu	r3,r19,400a030 <__umoddi3+0x240>
 400a028:	1880012e 	bgeu	r3,r2,400a030 <__umoddi3+0x240>
 400a02c:	1cc7883a 	add	r3,r3,r19
 400a030:	18a1c83a 	sub	r16,r3,r2
 400a034:	b00b883a 	mov	r5,r22
 400a038:	8009883a 	mov	r4,r16
 400a03c:	40035440 	call	4003544 <__umodsi3>
 400a040:	1023883a 	mov	r17,r2
 400a044:	b00b883a 	mov	r5,r22
 400a048:	8009883a 	mov	r4,r16
 400a04c:	40034e00 	call	40034e0 <__udivsi3>
 400a050:	8822943a 	slli	r17,r17,16
 400a054:	b80b883a 	mov	r5,r23
 400a058:	1009883a 	mov	r4,r2
 400a05c:	400359c0 	call	400359c <__mulsi3>
 400a060:	a53fffcc 	andi	r20,r20,65535
 400a064:	a446b03a 	or	r3,r20,r17
 400a068:	18bfac2e 	bgeu	r3,r2,4009f1c <__alt_data_end+0xfc009f1c>
 400a06c:	003fa706 	br	4009f0c <__alt_data_end+0xfc009f0c>
 400a070:	2005883a 	mov	r2,r4
 400a074:	2807883a 	mov	r3,r5
 400a078:	dfc00c17 	ldw	ra,48(sp)
 400a07c:	df000b17 	ldw	fp,44(sp)
 400a080:	ddc00a17 	ldw	r23,40(sp)
 400a084:	dd800917 	ldw	r22,36(sp)
 400a088:	dd400817 	ldw	r21,32(sp)
 400a08c:	dd000717 	ldw	r20,28(sp)
 400a090:	dcc00617 	ldw	r19,24(sp)
 400a094:	dc800517 	ldw	r18,20(sp)
 400a098:	dc400417 	ldw	r17,16(sp)
 400a09c:	dc000317 	ldw	r16,12(sp)
 400a0a0:	dec00d04 	addi	sp,sp,52
 400a0a4:	f800283a 	ret
 400a0a8:	04c03fc4 	movi	r19,255
 400a0ac:	99c9803a 	cmpltu	r4,r19,r7
 400a0b0:	200890fa 	slli	r4,r4,3
 400a0b4:	003fa406 	br	4009f48 <__alt_data_end+0xfc009f48>
 400a0b8:	00803fc4 	movi	r2,255
 400a0bc:	14c5803a 	cmpltu	r2,r2,r19
 400a0c0:	100490fa 	slli	r2,r2,3
 400a0c4:	003fbc06 	br	4009fb8 <__alt_data_end+0xfc009fb8>
 400a0c8:	00804034 	movhi	r2,256
 400a0cc:	10bfffc4 	addi	r2,r2,-1
 400a0d0:	1180a636 	bltu	r2,r6,400a36c <__umoddi3+0x57c>
 400a0d4:	01000404 	movi	r4,16
 400a0d8:	003f5c06 	br	4009e4c <__alt_data_end+0xfc009e4c>
 400a0dc:	3d0e983a 	sll	r7,r7,r20
 400a0e0:	34ead83a 	srl	r21,r6,r19
 400a0e4:	8cc6d83a 	srl	r3,r17,r19
 400a0e8:	8d10983a 	sll	r8,r17,r20
 400a0ec:	3d6ab03a 	or	r21,r7,r21
 400a0f0:	a82cd43a 	srli	r22,r21,16
 400a0f4:	84e2d83a 	srl	r17,r16,r19
 400a0f8:	1809883a 	mov	r4,r3
 400a0fc:	b00b883a 	mov	r5,r22
 400a100:	8a22b03a 	or	r17,r17,r8
 400a104:	3524983a 	sll	r18,r6,r20
 400a108:	dc400015 	stw	r17,0(sp)
 400a10c:	d8c00115 	stw	r3,4(sp)
 400a110:	40035440 	call	4003544 <__umodsi3>
 400a114:	d8c00117 	ldw	r3,4(sp)
 400a118:	b00b883a 	mov	r5,r22
 400a11c:	1039883a 	mov	fp,r2
 400a120:	1809883a 	mov	r4,r3
 400a124:	40034e00 	call	40034e0 <__udivsi3>
 400a128:	adffffcc 	andi	r23,r21,65535
 400a12c:	100b883a 	mov	r5,r2
 400a130:	b809883a 	mov	r4,r23
 400a134:	1023883a 	mov	r17,r2
 400a138:	400359c0 	call	400359c <__mulsi3>
 400a13c:	d9400017 	ldw	r5,0(sp)
 400a140:	e008943a 	slli	r4,fp,16
 400a144:	8520983a 	sll	r16,r16,r20
 400a148:	2806d43a 	srli	r3,r5,16
 400a14c:	1906b03a 	or	r3,r3,r4
 400a150:	1880042e 	bgeu	r3,r2,400a164 <__umoddi3+0x374>
 400a154:	1d47883a 	add	r3,r3,r21
 400a158:	893fffc4 	addi	r4,r17,-1
 400a15c:	1d40892e 	bgeu	r3,r21,400a384 <__umoddi3+0x594>
 400a160:	2023883a 	mov	r17,r4
 400a164:	18b9c83a 	sub	fp,r3,r2
 400a168:	b00b883a 	mov	r5,r22
 400a16c:	e009883a 	mov	r4,fp
 400a170:	40035440 	call	4003544 <__umodsi3>
 400a174:	b00b883a 	mov	r5,r22
 400a178:	e009883a 	mov	r4,fp
 400a17c:	d8800215 	stw	r2,8(sp)
 400a180:	40034e00 	call	40034e0 <__udivsi3>
 400a184:	100b883a 	mov	r5,r2
 400a188:	b809883a 	mov	r4,r23
 400a18c:	102d883a 	mov	r22,r2
 400a190:	400359c0 	call	400359c <__mulsi3>
 400a194:	d9800217 	ldw	r6,8(sp)
 400a198:	d8c00017 	ldw	r3,0(sp)
 400a19c:	300c943a 	slli	r6,r6,16
 400a1a0:	1a3fffcc 	andi	r8,r3,65535
 400a1a4:	4190b03a 	or	r8,r8,r6
 400a1a8:	4080042e 	bgeu	r8,r2,400a1bc <__umoddi3+0x3cc>
 400a1ac:	4551883a 	add	r8,r8,r21
 400a1b0:	b0ffffc4 	addi	r3,r22,-1
 400a1b4:	45406f2e 	bgeu	r8,r21,400a374 <__umoddi3+0x584>
 400a1b8:	182d883a 	mov	r22,r3
 400a1bc:	880e943a 	slli	r7,r17,16
 400a1c0:	9006d43a 	srli	r3,r18,16
 400a1c4:	91bfffcc 	andi	r6,r18,65535
 400a1c8:	3dacb03a 	or	r22,r7,r22
 400a1cc:	b02ed43a 	srli	r23,r22,16
 400a1d0:	b5bfffcc 	andi	r22,r22,65535
 400a1d4:	300b883a 	mov	r5,r6
 400a1d8:	b009883a 	mov	r4,r22
 400a1dc:	40a3c83a 	sub	r17,r8,r2
 400a1e0:	d8c00115 	stw	r3,4(sp)
 400a1e4:	d9800215 	stw	r6,8(sp)
 400a1e8:	400359c0 	call	400359c <__mulsi3>
 400a1ec:	d9800217 	ldw	r6,8(sp)
 400a1f0:	b809883a 	mov	r4,r23
 400a1f4:	1039883a 	mov	fp,r2
 400a1f8:	300b883a 	mov	r5,r6
 400a1fc:	400359c0 	call	400359c <__mulsi3>
 400a200:	d8c00117 	ldw	r3,4(sp)
 400a204:	b809883a 	mov	r4,r23
 400a208:	d8800215 	stw	r2,8(sp)
 400a20c:	180b883a 	mov	r5,r3
 400a210:	400359c0 	call	400359c <__mulsi3>
 400a214:	d8c00117 	ldw	r3,4(sp)
 400a218:	b009883a 	mov	r4,r22
 400a21c:	102f883a 	mov	r23,r2
 400a220:	180b883a 	mov	r5,r3
 400a224:	400359c0 	call	400359c <__mulsi3>
 400a228:	d9800217 	ldw	r6,8(sp)
 400a22c:	e006d43a 	srli	r3,fp,16
 400a230:	1185883a 	add	r2,r2,r6
 400a234:	1885883a 	add	r2,r3,r2
 400a238:	1180022e 	bgeu	r2,r6,400a244 <__umoddi3+0x454>
 400a23c:	00c00074 	movhi	r3,1
 400a240:	b8ef883a 	add	r23,r23,r3
 400a244:	1006d43a 	srli	r3,r2,16
 400a248:	1004943a 	slli	r2,r2,16
 400a24c:	e73fffcc 	andi	fp,fp,65535
 400a250:	1dc7883a 	add	r3,r3,r23
 400a254:	1739883a 	add	fp,r2,fp
 400a258:	88c03a36 	bltu	r17,r3,400a344 <__umoddi3+0x554>
 400a25c:	88c05126 	beq	r17,r3,400a3a4 <__umoddi3+0x5b4>
 400a260:	88c9c83a 	sub	r4,r17,r3
 400a264:	e00f883a 	mov	r7,fp
 400a268:	81cfc83a 	sub	r7,r16,r7
 400a26c:	81c7803a 	cmpltu	r3,r16,r7
 400a270:	20c7c83a 	sub	r3,r4,r3
 400a274:	1cc4983a 	sll	r2,r3,r19
 400a278:	3d0ed83a 	srl	r7,r7,r20
 400a27c:	1d06d83a 	srl	r3,r3,r20
 400a280:	11c4b03a 	or	r2,r2,r7
 400a284:	003f7c06 	br	400a078 <__alt_data_end+0xfc00a078>
 400a288:	9ca6983a 	sll	r19,r19,r18
 400a28c:	88f8d83a 	srl	fp,r17,r3
 400a290:	80c4d83a 	srl	r2,r16,r3
 400a294:	982cd43a 	srli	r22,r19,16
 400a298:	8ca2983a 	sll	r17,r17,r18
 400a29c:	e009883a 	mov	r4,fp
 400a2a0:	b00b883a 	mov	r5,r22
 400a2a4:	146ab03a 	or	r21,r2,r17
 400a2a8:	40035440 	call	4003544 <__umodsi3>
 400a2ac:	b00b883a 	mov	r5,r22
 400a2b0:	e009883a 	mov	r4,fp
 400a2b4:	1029883a 	mov	r20,r2
 400a2b8:	9dffffcc 	andi	r23,r19,65535
 400a2bc:	40034e00 	call	40034e0 <__udivsi3>
 400a2c0:	b809883a 	mov	r4,r23
 400a2c4:	100b883a 	mov	r5,r2
 400a2c8:	400359c0 	call	400359c <__mulsi3>
 400a2cc:	a008943a 	slli	r4,r20,16
 400a2d0:	a806d43a 	srli	r3,r21,16
 400a2d4:	84a8983a 	sll	r20,r16,r18
 400a2d8:	1906b03a 	or	r3,r3,r4
 400a2dc:	1880042e 	bgeu	r3,r2,400a2f0 <__umoddi3+0x500>
 400a2e0:	1cc7883a 	add	r3,r3,r19
 400a2e4:	1cc00236 	bltu	r3,r19,400a2f0 <__umoddi3+0x500>
 400a2e8:	1880012e 	bgeu	r3,r2,400a2f0 <__umoddi3+0x500>
 400a2ec:	1cc7883a 	add	r3,r3,r19
 400a2f0:	18a3c83a 	sub	r17,r3,r2
 400a2f4:	b00b883a 	mov	r5,r22
 400a2f8:	8809883a 	mov	r4,r17
 400a2fc:	40035440 	call	4003544 <__umodsi3>
 400a300:	b00b883a 	mov	r5,r22
 400a304:	8809883a 	mov	r4,r17
 400a308:	1021883a 	mov	r16,r2
 400a30c:	40034e00 	call	40034e0 <__udivsi3>
 400a310:	100b883a 	mov	r5,r2
 400a314:	b809883a 	mov	r4,r23
 400a318:	8020943a 	slli	r16,r16,16
 400a31c:	400359c0 	call	400359c <__mulsi3>
 400a320:	a8ffffcc 	andi	r3,r21,65535
 400a324:	1c06b03a 	or	r3,r3,r16
 400a328:	1880042e 	bgeu	r3,r2,400a33c <__umoddi3+0x54c>
 400a32c:	1cc7883a 	add	r3,r3,r19
 400a330:	1cc00236 	bltu	r3,r19,400a33c <__umoddi3+0x54c>
 400a334:	1880012e 	bgeu	r3,r2,400a33c <__umoddi3+0x54c>
 400a338:	1cc7883a 	add	r3,r3,r19
 400a33c:	18a3c83a 	sub	r17,r3,r2
 400a340:	003f2906 	br	4009fe8 <__alt_data_end+0xfc009fe8>
 400a344:	e48fc83a 	sub	r7,fp,r18
 400a348:	1d49c83a 	sub	r4,r3,r21
 400a34c:	e1f9803a 	cmpltu	fp,fp,r7
 400a350:	2739c83a 	sub	fp,r4,fp
 400a354:	8f09c83a 	sub	r4,r17,fp
 400a358:	003fc306 	br	400a268 <__alt_data_end+0xfc00a268>
 400a35c:	01000604 	movi	r4,24
 400a360:	003ef906 	br	4009f48 <__alt_data_end+0xfc009f48>
 400a364:	00800604 	movi	r2,24
 400a368:	003f1306 	br	4009fb8 <__alt_data_end+0xfc009fb8>
 400a36c:	01000604 	movi	r4,24
 400a370:	003eb606 	br	4009e4c <__alt_data_end+0xfc009e4c>
 400a374:	40bf902e 	bgeu	r8,r2,400a1b8 <__alt_data_end+0xfc00a1b8>
 400a378:	b5bfff84 	addi	r22,r22,-2
 400a37c:	4551883a 	add	r8,r8,r21
 400a380:	003f8e06 	br	400a1bc <__alt_data_end+0xfc00a1bc>
 400a384:	18bf762e 	bgeu	r3,r2,400a160 <__alt_data_end+0xfc00a160>
 400a388:	8c7fff84 	addi	r17,r17,-2
 400a38c:	1d47883a 	add	r3,r3,r21
 400a390:	003f7406 	br	400a164 <__alt_data_end+0xfc00a164>
 400a394:	1cc7883a 	add	r3,r3,r19
 400a398:	003ecd06 	br	4009ed0 <__alt_data_end+0xfc009ed0>
 400a39c:	8005883a 	mov	r2,r16
 400a3a0:	003ef806 	br	4009f84 <__alt_data_end+0xfc009f84>
 400a3a4:	873fe736 	bltu	r16,fp,400a344 <__alt_data_end+0xfc00a344>
 400a3a8:	e00f883a 	mov	r7,fp
 400a3ac:	0009883a 	mov	r4,zero
 400a3b0:	003fad06 	br	400a268 <__alt_data_end+0xfc00a268>

0400a3b4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a3b4:	defffe04 	addi	sp,sp,-8
 400a3b8:	dfc00115 	stw	ra,4(sp)
 400a3bc:	df000015 	stw	fp,0(sp)
 400a3c0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a3c4:	d0a01017 	ldw	r2,-32704(gp)
 400a3c8:	10000326 	beq	r2,zero,400a3d8 <alt_get_errno+0x24>
 400a3cc:	d0a01017 	ldw	r2,-32704(gp)
 400a3d0:	103ee83a 	callr	r2
 400a3d4:	00000106 	br	400a3dc <alt_get_errno+0x28>
 400a3d8:	d0a6ee04 	addi	r2,gp,-25672
}
 400a3dc:	e037883a 	mov	sp,fp
 400a3e0:	dfc00117 	ldw	ra,4(sp)
 400a3e4:	df000017 	ldw	fp,0(sp)
 400a3e8:	dec00204 	addi	sp,sp,8
 400a3ec:	f800283a 	ret

0400a3f0 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400a3f0:	defffb04 	addi	sp,sp,-20
 400a3f4:	dfc00415 	stw	ra,16(sp)
 400a3f8:	df000315 	stw	fp,12(sp)
 400a3fc:	df000304 	addi	fp,sp,12
 400a400:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400a404:	e0bfff17 	ldw	r2,-4(fp)
 400a408:	10000816 	blt	r2,zero,400a42c <close+0x3c>
 400a40c:	01400304 	movi	r5,12
 400a410:	e13fff17 	ldw	r4,-4(fp)
 400a414:	400359c0 	call	400359c <__mulsi3>
 400a418:	1007883a 	mov	r3,r2
 400a41c:	00810074 	movhi	r2,1025
 400a420:	10b7c404 	addi	r2,r2,-8432
 400a424:	1885883a 	add	r2,r3,r2
 400a428:	00000106 	br	400a430 <close+0x40>
 400a42c:	0005883a 	mov	r2,zero
 400a430:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400a434:	e0bffd17 	ldw	r2,-12(fp)
 400a438:	10001926 	beq	r2,zero,400a4a0 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400a43c:	e0bffd17 	ldw	r2,-12(fp)
 400a440:	10800017 	ldw	r2,0(r2)
 400a444:	10800417 	ldw	r2,16(r2)
 400a448:	10000626 	beq	r2,zero,400a464 <close+0x74>
 400a44c:	e0bffd17 	ldw	r2,-12(fp)
 400a450:	10800017 	ldw	r2,0(r2)
 400a454:	10800417 	ldw	r2,16(r2)
 400a458:	e13ffd17 	ldw	r4,-12(fp)
 400a45c:	103ee83a 	callr	r2
 400a460:	00000106 	br	400a468 <close+0x78>
 400a464:	0005883a 	mov	r2,zero
 400a468:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400a46c:	e13fff17 	ldw	r4,-4(fp)
 400a470:	400ac980 	call	400ac98 <alt_release_fd>
    if (rval < 0)
 400a474:	e0bffe17 	ldw	r2,-8(fp)
 400a478:	1000070e 	bge	r2,zero,400a498 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 400a47c:	400a3b40 	call	400a3b4 <alt_get_errno>
 400a480:	1007883a 	mov	r3,r2
 400a484:	e0bffe17 	ldw	r2,-8(fp)
 400a488:	0085c83a 	sub	r2,zero,r2
 400a48c:	18800015 	stw	r2,0(r3)
      return -1;
 400a490:	00bfffc4 	movi	r2,-1
 400a494:	00000706 	br	400a4b4 <close+0xc4>
    }
    return 0;
 400a498:	0005883a 	mov	r2,zero
 400a49c:	00000506 	br	400a4b4 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400a4a0:	400a3b40 	call	400a3b4 <alt_get_errno>
 400a4a4:	1007883a 	mov	r3,r2
 400a4a8:	00801444 	movi	r2,81
 400a4ac:	18800015 	stw	r2,0(r3)
    return -1;
 400a4b0:	00bfffc4 	movi	r2,-1
  }
}
 400a4b4:	e037883a 	mov	sp,fp
 400a4b8:	dfc00117 	ldw	ra,4(sp)
 400a4bc:	df000017 	ldw	fp,0(sp)
 400a4c0:	dec00204 	addi	sp,sp,8
 400a4c4:	f800283a 	ret

0400a4c8 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400a4c8:	defffc04 	addi	sp,sp,-16
 400a4cc:	df000315 	stw	fp,12(sp)
 400a4d0:	df000304 	addi	fp,sp,12
 400a4d4:	e13ffd15 	stw	r4,-12(fp)
 400a4d8:	e17ffe15 	stw	r5,-8(fp)
 400a4dc:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400a4e0:	e0bfff17 	ldw	r2,-4(fp)
}
 400a4e4:	e037883a 	mov	sp,fp
 400a4e8:	df000017 	ldw	fp,0(sp)
 400a4ec:	dec00104 	addi	sp,sp,4
 400a4f0:	f800283a 	ret

0400a4f4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400a4f4:	defffd04 	addi	sp,sp,-12
 400a4f8:	df000215 	stw	fp,8(sp)
 400a4fc:	df000204 	addi	fp,sp,8
 400a500:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400a504:	0001883a 	nop
 400a508:	e0bfff17 	ldw	r2,-4(fp)
 400a50c:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 400a510:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400a514:	10000226 	beq	r2,zero,400a520 <_exit+0x2c>
    ALT_SIM_FAIL();
 400a518:	002af070 	cmpltui	zero,zero,43969
 400a51c:	00000106 	br	400a524 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 400a520:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 400a524:	003fff06 	br	400a524 <__alt_data_end+0xfc00a524>

0400a528 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a528:	defffe04 	addi	sp,sp,-8
 400a52c:	dfc00115 	stw	ra,4(sp)
 400a530:	df000015 	stw	fp,0(sp)
 400a534:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a538:	d0a01017 	ldw	r2,-32704(gp)
 400a53c:	10000326 	beq	r2,zero,400a54c <alt_get_errno+0x24>
 400a540:	d0a01017 	ldw	r2,-32704(gp)
 400a544:	103ee83a 	callr	r2
 400a548:	00000106 	br	400a550 <alt_get_errno+0x28>
 400a54c:	d0a6ee04 	addi	r2,gp,-25672
}
 400a550:	e037883a 	mov	sp,fp
 400a554:	dfc00117 	ldw	ra,4(sp)
 400a558:	df000017 	ldw	fp,0(sp)
 400a55c:	dec00204 	addi	sp,sp,8
 400a560:	f800283a 	ret

0400a564 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400a564:	defffb04 	addi	sp,sp,-20
 400a568:	dfc00415 	stw	ra,16(sp)
 400a56c:	df000315 	stw	fp,12(sp)
 400a570:	df000304 	addi	fp,sp,12
 400a574:	e13ffe15 	stw	r4,-8(fp)
 400a578:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a57c:	e0bffe17 	ldw	r2,-8(fp)
 400a580:	10000816 	blt	r2,zero,400a5a4 <fstat+0x40>
 400a584:	01400304 	movi	r5,12
 400a588:	e13ffe17 	ldw	r4,-8(fp)
 400a58c:	400359c0 	call	400359c <__mulsi3>
 400a590:	1007883a 	mov	r3,r2
 400a594:	00810074 	movhi	r2,1025
 400a598:	10b7c404 	addi	r2,r2,-8432
 400a59c:	1885883a 	add	r2,r3,r2
 400a5a0:	00000106 	br	400a5a8 <fstat+0x44>
 400a5a4:	0005883a 	mov	r2,zero
 400a5a8:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400a5ac:	e0bffd17 	ldw	r2,-12(fp)
 400a5b0:	10001026 	beq	r2,zero,400a5f4 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400a5b4:	e0bffd17 	ldw	r2,-12(fp)
 400a5b8:	10800017 	ldw	r2,0(r2)
 400a5bc:	10800817 	ldw	r2,32(r2)
 400a5c0:	10000726 	beq	r2,zero,400a5e0 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 400a5c4:	e0bffd17 	ldw	r2,-12(fp)
 400a5c8:	10800017 	ldw	r2,0(r2)
 400a5cc:	10800817 	ldw	r2,32(r2)
 400a5d0:	e17fff17 	ldw	r5,-4(fp)
 400a5d4:	e13ffd17 	ldw	r4,-12(fp)
 400a5d8:	103ee83a 	callr	r2
 400a5dc:	00000a06 	br	400a608 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400a5e0:	e0bfff17 	ldw	r2,-4(fp)
 400a5e4:	00c80004 	movi	r3,8192
 400a5e8:	10c00115 	stw	r3,4(r2)
      return 0;
 400a5ec:	0005883a 	mov	r2,zero
 400a5f0:	00000506 	br	400a608 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400a5f4:	400a5280 	call	400a528 <alt_get_errno>
 400a5f8:	1007883a 	mov	r3,r2
 400a5fc:	00801444 	movi	r2,81
 400a600:	18800015 	stw	r2,0(r3)
    return -1;
 400a604:	00bfffc4 	movi	r2,-1
  }
}
 400a608:	e037883a 	mov	sp,fp
 400a60c:	dfc00117 	ldw	ra,4(sp)
 400a610:	df000017 	ldw	fp,0(sp)
 400a614:	dec00204 	addi	sp,sp,8
 400a618:	f800283a 	ret

0400a61c <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 400a61c:	deffff04 	addi	sp,sp,-4
 400a620:	df000015 	stw	fp,0(sp)
 400a624:	d839883a 	mov	fp,sp
  return 0;
 400a628:	0005883a 	mov	r2,zero
}
 400a62c:	e037883a 	mov	sp,fp
 400a630:	df000017 	ldw	fp,0(sp)
 400a634:	dec00104 	addi	sp,sp,4
 400a638:	f800283a 	ret

0400a63c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a63c:	defffe04 	addi	sp,sp,-8
 400a640:	dfc00115 	stw	ra,4(sp)
 400a644:	df000015 	stw	fp,0(sp)
 400a648:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a64c:	d0a01017 	ldw	r2,-32704(gp)
 400a650:	10000326 	beq	r2,zero,400a660 <alt_get_errno+0x24>
 400a654:	d0a01017 	ldw	r2,-32704(gp)
 400a658:	103ee83a 	callr	r2
 400a65c:	00000106 	br	400a664 <alt_get_errno+0x28>
 400a660:	d0a6ee04 	addi	r2,gp,-25672
}
 400a664:	e037883a 	mov	sp,fp
 400a668:	dfc00117 	ldw	ra,4(sp)
 400a66c:	df000017 	ldw	fp,0(sp)
 400a670:	dec00204 	addi	sp,sp,8
 400a674:	f800283a 	ret

0400a678 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400a678:	deffed04 	addi	sp,sp,-76
 400a67c:	dfc01215 	stw	ra,72(sp)
 400a680:	df001115 	stw	fp,68(sp)
 400a684:	df001104 	addi	fp,sp,68
 400a688:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a68c:	e0bfff17 	ldw	r2,-4(fp)
 400a690:	10000816 	blt	r2,zero,400a6b4 <isatty+0x3c>
 400a694:	01400304 	movi	r5,12
 400a698:	e13fff17 	ldw	r4,-4(fp)
 400a69c:	400359c0 	call	400359c <__mulsi3>
 400a6a0:	1007883a 	mov	r3,r2
 400a6a4:	00810074 	movhi	r2,1025
 400a6a8:	10b7c404 	addi	r2,r2,-8432
 400a6ac:	1885883a 	add	r2,r3,r2
 400a6b0:	00000106 	br	400a6b8 <isatty+0x40>
 400a6b4:	0005883a 	mov	r2,zero
 400a6b8:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400a6bc:	e0bfef17 	ldw	r2,-68(fp)
 400a6c0:	10000e26 	beq	r2,zero,400a6fc <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400a6c4:	e0bfef17 	ldw	r2,-68(fp)
 400a6c8:	10800017 	ldw	r2,0(r2)
 400a6cc:	10800817 	ldw	r2,32(r2)
 400a6d0:	1000021e 	bne	r2,zero,400a6dc <isatty+0x64>
    {
      return 1;
 400a6d4:	00800044 	movi	r2,1
 400a6d8:	00000d06 	br	400a710 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400a6dc:	e0bff004 	addi	r2,fp,-64
 400a6e0:	100b883a 	mov	r5,r2
 400a6e4:	e13fff17 	ldw	r4,-4(fp)
 400a6e8:	400a5640 	call	400a564 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400a6ec:	e0bff117 	ldw	r2,-60(fp)
 400a6f0:	10880020 	cmpeqi	r2,r2,8192
 400a6f4:	10803fcc 	andi	r2,r2,255
 400a6f8:	00000506 	br	400a710 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400a6fc:	400a63c0 	call	400a63c <alt_get_errno>
 400a700:	1007883a 	mov	r3,r2
 400a704:	00801444 	movi	r2,81
 400a708:	18800015 	stw	r2,0(r3)
    return 0;
 400a70c:	0005883a 	mov	r2,zero
  }
}
 400a710:	e037883a 	mov	sp,fp
 400a714:	dfc00117 	ldw	ra,4(sp)
 400a718:	df000017 	ldw	fp,0(sp)
 400a71c:	dec00204 	addi	sp,sp,8
 400a720:	f800283a 	ret

0400a724 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a724:	defffe04 	addi	sp,sp,-8
 400a728:	dfc00115 	stw	ra,4(sp)
 400a72c:	df000015 	stw	fp,0(sp)
 400a730:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a734:	d0a01017 	ldw	r2,-32704(gp)
 400a738:	10000326 	beq	r2,zero,400a748 <alt_get_errno+0x24>
 400a73c:	d0a01017 	ldw	r2,-32704(gp)
 400a740:	103ee83a 	callr	r2
 400a744:	00000106 	br	400a74c <alt_get_errno+0x28>
 400a748:	d0a6ee04 	addi	r2,gp,-25672
}
 400a74c:	e037883a 	mov	sp,fp
 400a750:	dfc00117 	ldw	ra,4(sp)
 400a754:	df000017 	ldw	fp,0(sp)
 400a758:	dec00204 	addi	sp,sp,8
 400a75c:	f800283a 	ret

0400a760 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 400a760:	defffb04 	addi	sp,sp,-20
 400a764:	dfc00415 	stw	ra,16(sp)
 400a768:	df000315 	stw	fp,12(sp)
 400a76c:	df000304 	addi	fp,sp,12
 400a770:	e13ffe15 	stw	r4,-8(fp)
 400a774:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 400a778:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 400a77c:	e0bffe17 	ldw	r2,-8(fp)
 400a780:	00802f16 	blt	zero,r2,400a840 <kill+0xe0>
  {
    switch (sig)
 400a784:	e0bfff17 	ldw	r2,-4(fp)
 400a788:	10800828 	cmpgeui	r2,r2,32
 400a78c:	1000291e 	bne	r2,zero,400a834 <kill+0xd4>
 400a790:	e0bfff17 	ldw	r2,-4(fp)
 400a794:	100690ba 	slli	r3,r2,2
 400a798:	00810074 	movhi	r2,1025
 400a79c:	10a9eb04 	addi	r2,r2,-22612
 400a7a0:	1885883a 	add	r2,r3,r2
 400a7a4:	10800017 	ldw	r2,0(r2)
 400a7a8:	1000683a 	jmp	r2
 400a7ac:	0400a854 	movui	r16,673
 400a7b0:	0400a834 	movhi	r16,672
 400a7b4:	0400a834 	movhi	r16,672
 400a7b8:	0400a82c 	andhi	r16,zero,672
 400a7bc:	0400a82c 	andhi	r16,zero,672
 400a7c0:	0400a82c 	andhi	r16,zero,672
 400a7c4:	0400a82c 	andhi	r16,zero,672
 400a7c8:	0400a834 	movhi	r16,672
 400a7cc:	0400a82c 	andhi	r16,zero,672
 400a7d0:	0400a82c 	andhi	r16,zero,672
 400a7d4:	0400a82c 	andhi	r16,zero,672
 400a7d8:	0400a82c 	andhi	r16,zero,672
 400a7dc:	0400a82c 	andhi	r16,zero,672
 400a7e0:	0400a82c 	andhi	r16,zero,672
 400a7e4:	0400a82c 	andhi	r16,zero,672
 400a7e8:	0400a82c 	andhi	r16,zero,672
 400a7ec:	0400a854 	movui	r16,673
 400a7f0:	0400a834 	movhi	r16,672
 400a7f4:	0400a834 	movhi	r16,672
 400a7f8:	0400a834 	movhi	r16,672
 400a7fc:	0400a854 	movui	r16,673
 400a800:	0400a834 	movhi	r16,672
 400a804:	0400a834 	movhi	r16,672
 400a808:	0400a82c 	andhi	r16,zero,672
 400a80c:	0400a82c 	andhi	r16,zero,672
 400a810:	0400a82c 	andhi	r16,zero,672
 400a814:	0400a82c 	andhi	r16,zero,672
 400a818:	0400a82c 	andhi	r16,zero,672
 400a81c:	0400a834 	movhi	r16,672
 400a820:	0400a834 	movhi	r16,672
 400a824:	0400a82c 	andhi	r16,zero,672
 400a828:	0400a82c 	andhi	r16,zero,672
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 400a82c:	0009883a 	mov	r4,zero
 400a830:	400a4f40 	call	400a4f4 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 400a834:	00800584 	movi	r2,22
 400a838:	e0bffd15 	stw	r2,-12(fp)
 400a83c:	00000606 	br	400a858 <kill+0xf8>
    }
  }

  else if (pid > 0)
 400a840:	e0bffe17 	ldw	r2,-8(fp)
 400a844:	0080040e 	bge	zero,r2,400a858 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 400a848:	008000c4 	movi	r2,3
 400a84c:	e0bffd15 	stw	r2,-12(fp)
 400a850:	00000106 	br	400a858 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 400a854:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 400a858:	e0bffd17 	ldw	r2,-12(fp)
 400a85c:	10000626 	beq	r2,zero,400a878 <kill+0x118>
  {
    ALT_ERRNO = status;
 400a860:	400a7240 	call	400a724 <alt_get_errno>
 400a864:	1007883a 	mov	r3,r2
 400a868:	e0bffd17 	ldw	r2,-12(fp)
 400a86c:	18800015 	stw	r2,0(r3)
    return -1;
 400a870:	00bfffc4 	movi	r2,-1
 400a874:	00000106 	br	400a87c <kill+0x11c>
  }

  return 0;
 400a878:	0005883a 	mov	r2,zero
}
 400a87c:	e037883a 	mov	sp,fp
 400a880:	dfc00117 	ldw	ra,4(sp)
 400a884:	df000017 	ldw	fp,0(sp)
 400a888:	dec00204 	addi	sp,sp,8
 400a88c:	f800283a 	ret

0400a890 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400a890:	defffc04 	addi	sp,sp,-16
 400a894:	df000315 	stw	fp,12(sp)
 400a898:	df000304 	addi	fp,sp,12
 400a89c:	e13ffd15 	stw	r4,-12(fp)
 400a8a0:	e17ffe15 	stw	r5,-8(fp)
 400a8a4:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400a8a8:	e0fffe17 	ldw	r3,-8(fp)
 400a8ac:	e0bffd17 	ldw	r2,-12(fp)
 400a8b0:	18800c26 	beq	r3,r2,400a8e4 <alt_load_section+0x54>
  {
    while( to != end )
 400a8b4:	00000806 	br	400a8d8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 400a8b8:	e0bffe17 	ldw	r2,-8(fp)
 400a8bc:	10c00104 	addi	r3,r2,4
 400a8c0:	e0fffe15 	stw	r3,-8(fp)
 400a8c4:	e0fffd17 	ldw	r3,-12(fp)
 400a8c8:	19000104 	addi	r4,r3,4
 400a8cc:	e13ffd15 	stw	r4,-12(fp)
 400a8d0:	18c00017 	ldw	r3,0(r3)
 400a8d4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400a8d8:	e0fffe17 	ldw	r3,-8(fp)
 400a8dc:	e0bfff17 	ldw	r2,-4(fp)
 400a8e0:	18bff51e 	bne	r3,r2,400a8b8 <__alt_data_end+0xfc00a8b8>
    {
      *to++ = *from++;
    }
  }
}
 400a8e4:	0001883a 	nop
 400a8e8:	e037883a 	mov	sp,fp
 400a8ec:	df000017 	ldw	fp,0(sp)
 400a8f0:	dec00104 	addi	sp,sp,4
 400a8f4:	f800283a 	ret

0400a8f8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400a8f8:	defffe04 	addi	sp,sp,-8
 400a8fc:	dfc00115 	stw	ra,4(sp)
 400a900:	df000015 	stw	fp,0(sp)
 400a904:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400a908:	01810074 	movhi	r6,1025
 400a90c:	31bc6804 	addi	r6,r6,-3680
 400a910:	01410074 	movhi	r5,1025
 400a914:	29759104 	addi	r5,r5,-10684
 400a918:	01010074 	movhi	r4,1025
 400a91c:	213c6804 	addi	r4,r4,-3680
 400a920:	400a8900 	call	400a890 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400a924:	01810034 	movhi	r6,1024
 400a928:	31808c04 	addi	r6,r6,560
 400a92c:	01410034 	movhi	r5,1024
 400a930:	29400804 	addi	r5,r5,32
 400a934:	01010034 	movhi	r4,1024
 400a938:	21000804 	addi	r4,r4,32
 400a93c:	400a8900 	call	400a890 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400a940:	01810074 	movhi	r6,1025
 400a944:	31b59104 	addi	r6,r6,-10684
 400a948:	01410074 	movhi	r5,1025
 400a94c:	2973fb04 	addi	r5,r5,-12308
 400a950:	01010074 	movhi	r4,1025
 400a954:	2133fb04 	addi	r4,r4,-12308
 400a958:	400a8900 	call	400a890 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400a95c:	400bf680 	call	400bf68 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400a960:	400c1280 	call	400c128 <alt_icache_flush_all>
}
 400a964:	0001883a 	nop
 400a968:	e037883a 	mov	sp,fp
 400a96c:	dfc00117 	ldw	ra,4(sp)
 400a970:	df000017 	ldw	fp,0(sp)
 400a974:	dec00204 	addi	sp,sp,8
 400a978:	f800283a 	ret

0400a97c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a97c:	defffe04 	addi	sp,sp,-8
 400a980:	dfc00115 	stw	ra,4(sp)
 400a984:	df000015 	stw	fp,0(sp)
 400a988:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a98c:	d0a01017 	ldw	r2,-32704(gp)
 400a990:	10000326 	beq	r2,zero,400a9a0 <alt_get_errno+0x24>
 400a994:	d0a01017 	ldw	r2,-32704(gp)
 400a998:	103ee83a 	callr	r2
 400a99c:	00000106 	br	400a9a4 <alt_get_errno+0x28>
 400a9a0:	d0a6ee04 	addi	r2,gp,-25672
}
 400a9a4:	e037883a 	mov	sp,fp
 400a9a8:	dfc00117 	ldw	ra,4(sp)
 400a9ac:	df000017 	ldw	fp,0(sp)
 400a9b0:	dec00204 	addi	sp,sp,8
 400a9b4:	f800283a 	ret

0400a9b8 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400a9b8:	defff904 	addi	sp,sp,-28
 400a9bc:	dfc00615 	stw	ra,24(sp)
 400a9c0:	df000515 	stw	fp,20(sp)
 400a9c4:	df000504 	addi	fp,sp,20
 400a9c8:	e13ffd15 	stw	r4,-12(fp)
 400a9cc:	e17ffe15 	stw	r5,-8(fp)
 400a9d0:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400a9d4:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a9d8:	e0bffd17 	ldw	r2,-12(fp)
 400a9dc:	10000816 	blt	r2,zero,400aa00 <lseek+0x48>
 400a9e0:	01400304 	movi	r5,12
 400a9e4:	e13ffd17 	ldw	r4,-12(fp)
 400a9e8:	400359c0 	call	400359c <__mulsi3>
 400a9ec:	1007883a 	mov	r3,r2
 400a9f0:	00810074 	movhi	r2,1025
 400a9f4:	10b7c404 	addi	r2,r2,-8432
 400a9f8:	1885883a 	add	r2,r3,r2
 400a9fc:	00000106 	br	400aa04 <lseek+0x4c>
 400aa00:	0005883a 	mov	r2,zero
 400aa04:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400aa08:	e0bffc17 	ldw	r2,-16(fp)
 400aa0c:	10001026 	beq	r2,zero,400aa50 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400aa10:	e0bffc17 	ldw	r2,-16(fp)
 400aa14:	10800017 	ldw	r2,0(r2)
 400aa18:	10800717 	ldw	r2,28(r2)
 400aa1c:	10000926 	beq	r2,zero,400aa44 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400aa20:	e0bffc17 	ldw	r2,-16(fp)
 400aa24:	10800017 	ldw	r2,0(r2)
 400aa28:	10800717 	ldw	r2,28(r2)
 400aa2c:	e1bfff17 	ldw	r6,-4(fp)
 400aa30:	e17ffe17 	ldw	r5,-8(fp)
 400aa34:	e13ffc17 	ldw	r4,-16(fp)
 400aa38:	103ee83a 	callr	r2
 400aa3c:	e0bffb15 	stw	r2,-20(fp)
 400aa40:	00000506 	br	400aa58 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400aa44:	00bfde84 	movi	r2,-134
 400aa48:	e0bffb15 	stw	r2,-20(fp)
 400aa4c:	00000206 	br	400aa58 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 400aa50:	00bfebc4 	movi	r2,-81
 400aa54:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400aa58:	e0bffb17 	ldw	r2,-20(fp)
 400aa5c:	1000070e 	bge	r2,zero,400aa7c <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 400aa60:	400a97c0 	call	400a97c <alt_get_errno>
 400aa64:	1007883a 	mov	r3,r2
 400aa68:	e0bffb17 	ldw	r2,-20(fp)
 400aa6c:	0085c83a 	sub	r2,zero,r2
 400aa70:	18800015 	stw	r2,0(r3)
    rc = -1;
 400aa74:	00bfffc4 	movi	r2,-1
 400aa78:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400aa7c:	e0bffb17 	ldw	r2,-20(fp)
}
 400aa80:	e037883a 	mov	sp,fp
 400aa84:	dfc00117 	ldw	ra,4(sp)
 400aa88:	df000017 	ldw	fp,0(sp)
 400aa8c:	dec00204 	addi	sp,sp,8
 400aa90:	f800283a 	ret

0400aa94 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400aa94:	defffd04 	addi	sp,sp,-12
 400aa98:	dfc00215 	stw	ra,8(sp)
 400aa9c:	df000115 	stw	fp,4(sp)
 400aaa0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400aaa4:	0009883a 	mov	r4,zero
 400aaa8:	400af6c0 	call	400af6c <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400aaac:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400aab0:	400afa40 	call	400afa4 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400aab4:	01810074 	movhi	r6,1025
 400aab8:	31b58204 	addi	r6,r6,-10744
 400aabc:	01410074 	movhi	r5,1025
 400aac0:	29758204 	addi	r5,r5,-10744
 400aac4:	01010074 	movhi	r4,1025
 400aac8:	21358204 	addi	r4,r4,-10744
 400aacc:	400c4cc0 	call	400c4cc <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400aad0:	400c0680 	call	400c068 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400aad4:	01010074 	movhi	r4,1025
 400aad8:	21303204 	addi	r4,r4,-16184
 400aadc:	400cc8c0 	call	400cc8c <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400aae0:	d0a6f517 	ldw	r2,-25644(gp)
 400aae4:	d0e6f617 	ldw	r3,-25640(gp)
 400aae8:	d126f717 	ldw	r4,-25636(gp)
 400aaec:	200d883a 	mov	r6,r4
 400aaf0:	180b883a 	mov	r5,r3
 400aaf4:	1009883a 	mov	r4,r2
 400aaf8:	40030340 	call	4003034 <main>
 400aafc:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400ab00:	01000044 	movi	r4,1
 400ab04:	400a3f00 	call	400a3f0 <close>
  exit (result);
 400ab08:	e13fff17 	ldw	r4,-4(fp)
 400ab0c:	400cca00 	call	400cca0 <exit>

0400ab10 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400ab10:	defffe04 	addi	sp,sp,-8
 400ab14:	df000115 	stw	fp,4(sp)
 400ab18:	df000104 	addi	fp,sp,4
 400ab1c:	e13fff15 	stw	r4,-4(fp)
}
 400ab20:	0001883a 	nop
 400ab24:	e037883a 	mov	sp,fp
 400ab28:	df000017 	ldw	fp,0(sp)
 400ab2c:	dec00104 	addi	sp,sp,4
 400ab30:	f800283a 	ret

0400ab34 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400ab34:	defffe04 	addi	sp,sp,-8
 400ab38:	df000115 	stw	fp,4(sp)
 400ab3c:	df000104 	addi	fp,sp,4
 400ab40:	e13fff15 	stw	r4,-4(fp)
}
 400ab44:	0001883a 	nop
 400ab48:	e037883a 	mov	sp,fp
 400ab4c:	df000017 	ldw	fp,0(sp)
 400ab50:	dec00104 	addi	sp,sp,4
 400ab54:	f800283a 	ret

0400ab58 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ab58:	defffe04 	addi	sp,sp,-8
 400ab5c:	dfc00115 	stw	ra,4(sp)
 400ab60:	df000015 	stw	fp,0(sp)
 400ab64:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ab68:	d0a01017 	ldw	r2,-32704(gp)
 400ab6c:	10000326 	beq	r2,zero,400ab7c <alt_get_errno+0x24>
 400ab70:	d0a01017 	ldw	r2,-32704(gp)
 400ab74:	103ee83a 	callr	r2
 400ab78:	00000106 	br	400ab80 <alt_get_errno+0x28>
 400ab7c:	d0a6ee04 	addi	r2,gp,-25672
}
 400ab80:	e037883a 	mov	sp,fp
 400ab84:	dfc00117 	ldw	ra,4(sp)
 400ab88:	df000017 	ldw	fp,0(sp)
 400ab8c:	dec00204 	addi	sp,sp,8
 400ab90:	f800283a 	ret

0400ab94 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400ab94:	defff904 	addi	sp,sp,-28
 400ab98:	dfc00615 	stw	ra,24(sp)
 400ab9c:	df000515 	stw	fp,20(sp)
 400aba0:	df000504 	addi	fp,sp,20
 400aba4:	e13ffd15 	stw	r4,-12(fp)
 400aba8:	e17ffe15 	stw	r5,-8(fp)
 400abac:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400abb0:	e0bffd17 	ldw	r2,-12(fp)
 400abb4:	10000816 	blt	r2,zero,400abd8 <read+0x44>
 400abb8:	01400304 	movi	r5,12
 400abbc:	e13ffd17 	ldw	r4,-12(fp)
 400abc0:	400359c0 	call	400359c <__mulsi3>
 400abc4:	1007883a 	mov	r3,r2
 400abc8:	00810074 	movhi	r2,1025
 400abcc:	10b7c404 	addi	r2,r2,-8432
 400abd0:	1885883a 	add	r2,r3,r2
 400abd4:	00000106 	br	400abdc <read+0x48>
 400abd8:	0005883a 	mov	r2,zero
 400abdc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400abe0:	e0bffb17 	ldw	r2,-20(fp)
 400abe4:	10002226 	beq	r2,zero,400ac70 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400abe8:	e0bffb17 	ldw	r2,-20(fp)
 400abec:	10800217 	ldw	r2,8(r2)
 400abf0:	108000cc 	andi	r2,r2,3
 400abf4:	10800060 	cmpeqi	r2,r2,1
 400abf8:	1000181e 	bne	r2,zero,400ac5c <read+0xc8>
        (fd->dev->read))
 400abfc:	e0bffb17 	ldw	r2,-20(fp)
 400ac00:	10800017 	ldw	r2,0(r2)
 400ac04:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400ac08:	10001426 	beq	r2,zero,400ac5c <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400ac0c:	e0bffb17 	ldw	r2,-20(fp)
 400ac10:	10800017 	ldw	r2,0(r2)
 400ac14:	10800517 	ldw	r2,20(r2)
 400ac18:	e0ffff17 	ldw	r3,-4(fp)
 400ac1c:	180d883a 	mov	r6,r3
 400ac20:	e17ffe17 	ldw	r5,-8(fp)
 400ac24:	e13ffb17 	ldw	r4,-20(fp)
 400ac28:	103ee83a 	callr	r2
 400ac2c:	e0bffc15 	stw	r2,-16(fp)
 400ac30:	e0bffc17 	ldw	r2,-16(fp)
 400ac34:	1000070e 	bge	r2,zero,400ac54 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 400ac38:	400ab580 	call	400ab58 <alt_get_errno>
 400ac3c:	1007883a 	mov	r3,r2
 400ac40:	e0bffc17 	ldw	r2,-16(fp)
 400ac44:	0085c83a 	sub	r2,zero,r2
 400ac48:	18800015 	stw	r2,0(r3)
          return -1;
 400ac4c:	00bfffc4 	movi	r2,-1
 400ac50:	00000c06 	br	400ac84 <read+0xf0>
        }
        return rval;
 400ac54:	e0bffc17 	ldw	r2,-16(fp)
 400ac58:	00000a06 	br	400ac84 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400ac5c:	400ab580 	call	400ab58 <alt_get_errno>
 400ac60:	1007883a 	mov	r3,r2
 400ac64:	00800344 	movi	r2,13
 400ac68:	18800015 	stw	r2,0(r3)
 400ac6c:	00000406 	br	400ac80 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400ac70:	400ab580 	call	400ab58 <alt_get_errno>
 400ac74:	1007883a 	mov	r3,r2
 400ac78:	00801444 	movi	r2,81
 400ac7c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400ac80:	00bfffc4 	movi	r2,-1
}
 400ac84:	e037883a 	mov	sp,fp
 400ac88:	dfc00117 	ldw	ra,4(sp)
 400ac8c:	df000017 	ldw	fp,0(sp)
 400ac90:	dec00204 	addi	sp,sp,8
 400ac94:	f800283a 	ret

0400ac98 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400ac98:	defffc04 	addi	sp,sp,-16
 400ac9c:	dfc00315 	stw	ra,12(sp)
 400aca0:	df000215 	stw	fp,8(sp)
 400aca4:	dc000115 	stw	r16,4(sp)
 400aca8:	df000204 	addi	fp,sp,8
 400acac:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 400acb0:	e0bffe17 	ldw	r2,-8(fp)
 400acb4:	108000d0 	cmplti	r2,r2,3
 400acb8:	1000111e 	bne	r2,zero,400ad00 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 400acbc:	04010074 	movhi	r16,1025
 400acc0:	8437c404 	addi	r16,r16,-8432
 400acc4:	e0bffe17 	ldw	r2,-8(fp)
 400acc8:	01400304 	movi	r5,12
 400accc:	1009883a 	mov	r4,r2
 400acd0:	400359c0 	call	400359c <__mulsi3>
 400acd4:	8085883a 	add	r2,r16,r2
 400acd8:	10800204 	addi	r2,r2,8
 400acdc:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400ace0:	04010074 	movhi	r16,1025
 400ace4:	8437c404 	addi	r16,r16,-8432
 400ace8:	e0bffe17 	ldw	r2,-8(fp)
 400acec:	01400304 	movi	r5,12
 400acf0:	1009883a 	mov	r4,r2
 400acf4:	400359c0 	call	400359c <__mulsi3>
 400acf8:	8085883a 	add	r2,r16,r2
 400acfc:	10000015 	stw	zero,0(r2)
  }
}
 400ad00:	0001883a 	nop
 400ad04:	e6ffff04 	addi	sp,fp,-4
 400ad08:	dfc00217 	ldw	ra,8(sp)
 400ad0c:	df000117 	ldw	fp,4(sp)
 400ad10:	dc000017 	ldw	r16,0(sp)
 400ad14:	dec00304 	addi	sp,sp,12
 400ad18:	f800283a 	ret

0400ad1c <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400ad1c:	defff904 	addi	sp,sp,-28
 400ad20:	df000615 	stw	fp,24(sp)
 400ad24:	df000604 	addi	fp,sp,24
 400ad28:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ad2c:	0005303a 	rdctl	r2,status
 400ad30:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ad34:	e0fffe17 	ldw	r3,-8(fp)
 400ad38:	00bfff84 	movi	r2,-2
 400ad3c:	1884703a 	and	r2,r3,r2
 400ad40:	1001703a 	wrctl	status,r2
  
  return context;
 400ad44:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400ad48:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400ad4c:	d0a01117 	ldw	r2,-32700(gp)
 400ad50:	10c000c4 	addi	r3,r2,3
 400ad54:	00bfff04 	movi	r2,-4
 400ad58:	1884703a 	and	r2,r3,r2
 400ad5c:	d0a01115 	stw	r2,-32700(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400ad60:	d0e01117 	ldw	r3,-32700(gp)
 400ad64:	e0bfff17 	ldw	r2,-4(fp)
 400ad68:	1887883a 	add	r3,r3,r2
 400ad6c:	00820034 	movhi	r2,2048
 400ad70:	10800004 	addi	r2,r2,0
 400ad74:	10c0062e 	bgeu	r2,r3,400ad90 <sbrk+0x74>
 400ad78:	e0bffb17 	ldw	r2,-20(fp)
 400ad7c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ad80:	e0bffa17 	ldw	r2,-24(fp)
 400ad84:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400ad88:	00bfffc4 	movi	r2,-1
 400ad8c:	00000b06 	br	400adbc <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400ad90:	d0a01117 	ldw	r2,-32700(gp)
 400ad94:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400ad98:	d0e01117 	ldw	r3,-32700(gp)
 400ad9c:	e0bfff17 	ldw	r2,-4(fp)
 400ada0:	1885883a 	add	r2,r3,r2
 400ada4:	d0a01115 	stw	r2,-32700(gp)
 400ada8:	e0bffb17 	ldw	r2,-20(fp)
 400adac:	e0bffc15 	stw	r2,-16(fp)
 400adb0:	e0bffc17 	ldw	r2,-16(fp)
 400adb4:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400adb8:	e0bffd17 	ldw	r2,-12(fp)
} 
 400adbc:	e037883a 	mov	sp,fp
 400adc0:	df000017 	ldw	fp,0(sp)
 400adc4:	dec00104 	addi	sp,sp,4
 400adc8:	f800283a 	ret

0400adcc <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 400adcc:	defffd04 	addi	sp,sp,-12
 400add0:	dfc00215 	stw	ra,8(sp)
 400add4:	df000115 	stw	fp,4(sp)
 400add8:	df000104 	addi	fp,sp,4
 400addc:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 400ade0:	e13fff17 	ldw	r4,-4(fp)
 400ade4:	400be100 	call	400be10 <alt_busy_sleep>
}
 400ade8:	e037883a 	mov	sp,fp
 400adec:	dfc00117 	ldw	ra,4(sp)
 400adf0:	df000017 	ldw	fp,0(sp)
 400adf4:	dec00204 	addi	sp,sp,8
 400adf8:	f800283a 	ret

0400adfc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400adfc:	defffe04 	addi	sp,sp,-8
 400ae00:	dfc00115 	stw	ra,4(sp)
 400ae04:	df000015 	stw	fp,0(sp)
 400ae08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ae0c:	d0a01017 	ldw	r2,-32704(gp)
 400ae10:	10000326 	beq	r2,zero,400ae20 <alt_get_errno+0x24>
 400ae14:	d0a01017 	ldw	r2,-32704(gp)
 400ae18:	103ee83a 	callr	r2
 400ae1c:	00000106 	br	400ae24 <alt_get_errno+0x28>
 400ae20:	d0a6ee04 	addi	r2,gp,-25672
}
 400ae24:	e037883a 	mov	sp,fp
 400ae28:	dfc00117 	ldw	ra,4(sp)
 400ae2c:	df000017 	ldw	fp,0(sp)
 400ae30:	dec00204 	addi	sp,sp,8
 400ae34:	f800283a 	ret

0400ae38 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400ae38:	defff904 	addi	sp,sp,-28
 400ae3c:	dfc00615 	stw	ra,24(sp)
 400ae40:	df000515 	stw	fp,20(sp)
 400ae44:	df000504 	addi	fp,sp,20
 400ae48:	e13ffd15 	stw	r4,-12(fp)
 400ae4c:	e17ffe15 	stw	r5,-8(fp)
 400ae50:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400ae54:	e0bffd17 	ldw	r2,-12(fp)
 400ae58:	10000816 	blt	r2,zero,400ae7c <write+0x44>
 400ae5c:	01400304 	movi	r5,12
 400ae60:	e13ffd17 	ldw	r4,-12(fp)
 400ae64:	400359c0 	call	400359c <__mulsi3>
 400ae68:	1007883a 	mov	r3,r2
 400ae6c:	00810074 	movhi	r2,1025
 400ae70:	10b7c404 	addi	r2,r2,-8432
 400ae74:	1885883a 	add	r2,r3,r2
 400ae78:	00000106 	br	400ae80 <write+0x48>
 400ae7c:	0005883a 	mov	r2,zero
 400ae80:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400ae84:	e0bffb17 	ldw	r2,-20(fp)
 400ae88:	10002126 	beq	r2,zero,400af10 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400ae8c:	e0bffb17 	ldw	r2,-20(fp)
 400ae90:	10800217 	ldw	r2,8(r2)
 400ae94:	108000cc 	andi	r2,r2,3
 400ae98:	10001826 	beq	r2,zero,400aefc <write+0xc4>
 400ae9c:	e0bffb17 	ldw	r2,-20(fp)
 400aea0:	10800017 	ldw	r2,0(r2)
 400aea4:	10800617 	ldw	r2,24(r2)
 400aea8:	10001426 	beq	r2,zero,400aefc <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400aeac:	e0bffb17 	ldw	r2,-20(fp)
 400aeb0:	10800017 	ldw	r2,0(r2)
 400aeb4:	10800617 	ldw	r2,24(r2)
 400aeb8:	e0ffff17 	ldw	r3,-4(fp)
 400aebc:	180d883a 	mov	r6,r3
 400aec0:	e17ffe17 	ldw	r5,-8(fp)
 400aec4:	e13ffb17 	ldw	r4,-20(fp)
 400aec8:	103ee83a 	callr	r2
 400aecc:	e0bffc15 	stw	r2,-16(fp)
 400aed0:	e0bffc17 	ldw	r2,-16(fp)
 400aed4:	1000070e 	bge	r2,zero,400aef4 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 400aed8:	400adfc0 	call	400adfc <alt_get_errno>
 400aedc:	1007883a 	mov	r3,r2
 400aee0:	e0bffc17 	ldw	r2,-16(fp)
 400aee4:	0085c83a 	sub	r2,zero,r2
 400aee8:	18800015 	stw	r2,0(r3)
        return -1;
 400aeec:	00bfffc4 	movi	r2,-1
 400aef0:	00000c06 	br	400af24 <write+0xec>
      }
      return rval;
 400aef4:	e0bffc17 	ldw	r2,-16(fp)
 400aef8:	00000a06 	br	400af24 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400aefc:	400adfc0 	call	400adfc <alt_get_errno>
 400af00:	1007883a 	mov	r3,r2
 400af04:	00800344 	movi	r2,13
 400af08:	18800015 	stw	r2,0(r3)
 400af0c:	00000406 	br	400af20 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400af10:	400adfc0 	call	400adfc <alt_get_errno>
 400af14:	1007883a 	mov	r3,r2
 400af18:	00801444 	movi	r2,81
 400af1c:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400af20:	00bfffc4 	movi	r2,-1
}
 400af24:	e037883a 	mov	sp,fp
 400af28:	dfc00117 	ldw	ra,4(sp)
 400af2c:	df000017 	ldw	fp,0(sp)
 400af30:	dec00204 	addi	sp,sp,8
 400af34:	f800283a 	ret

0400af38 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400af38:	defffd04 	addi	sp,sp,-12
 400af3c:	dfc00215 	stw	ra,8(sp)
 400af40:	df000115 	stw	fp,4(sp)
 400af44:	df000104 	addi	fp,sp,4
 400af48:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400af4c:	d1600d04 	addi	r5,gp,-32716
 400af50:	e13fff17 	ldw	r4,-4(fp)
 400af54:	400bfc40 	call	400bfc4 <alt_dev_llist_insert>
}
 400af58:	e037883a 	mov	sp,fp
 400af5c:	dfc00117 	ldw	ra,4(sp)
 400af60:	df000017 	ldw	fp,0(sp)
 400af64:	dec00204 	addi	sp,sp,8
 400af68:	f800283a 	ret

0400af6c <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400af6c:	defffd04 	addi	sp,sp,-12
 400af70:	dfc00215 	stw	ra,8(sp)
 400af74:	df000115 	stw	fp,4(sp)
 400af78:	df000104 	addi	fp,sp,4
 400af7c:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 400af80:	400c9700 	call	400c970 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400af84:	00800044 	movi	r2,1
 400af88:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400af8c:	0001883a 	nop
 400af90:	e037883a 	mov	sp,fp
 400af94:	dfc00117 	ldw	ra,4(sp)
 400af98:	df000017 	ldw	fp,0(sp)
 400af9c:	dec00204 	addi	sp,sp,8
 400afa0:	f800283a 	ret

0400afa4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400afa4:	defffd04 	addi	sp,sp,-12
 400afa8:	dfc00215 	stw	ra,8(sp)
 400afac:	df000115 	stw	fp,4(sp)
 400afb0:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 400afb4:	000d883a 	mov	r6,zero
 400afb8:	000b883a 	mov	r5,zero
 400afbc:	01010074 	movhi	r4,1025
 400afc0:	21382e04 	addi	r4,r4,-8008
 400afc4:	400b3e00 	call	400b3e0 <altera_avalon_jtag_uart_init>
 400afc8:	01010074 	movhi	r4,1025
 400afcc:	21382404 	addi	r4,r4,-8048
 400afd0:	400af380 	call	400af38 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_DMA_CONTROLLER, video_dma_controller);
 400afd4:	00810074 	movhi	r2,1025
 400afd8:	10bc3c04 	addi	r2,r2,-3856
 400afdc:	10800a17 	ldw	r2,40(r2)
 400afe0:	10800017 	ldw	r2,0(r2)
 400afe4:	1007883a 	mov	r3,r2
 400afe8:	00810074 	movhi	r2,1025
 400afec:	10bc3c04 	addi	r2,r2,-3856
 400aff0:	10c00b15 	stw	r3,44(r2)
 400aff4:	00810074 	movhi	r2,1025
 400aff8:	10bc3c04 	addi	r2,r2,-3856
 400affc:	10800a17 	ldw	r2,40(r2)
 400b000:	10800104 	addi	r2,r2,4
 400b004:	10800017 	ldw	r2,0(r2)
 400b008:	1007883a 	mov	r3,r2
 400b00c:	00810074 	movhi	r2,1025
 400b010:	10bc3c04 	addi	r2,r2,-3856
 400b014:	10c00c15 	stw	r3,48(r2)
 400b018:	00810074 	movhi	r2,1025
 400b01c:	10bc3c04 	addi	r2,r2,-3856
 400b020:	10800a17 	ldw	r2,40(r2)
 400b024:	10800204 	addi	r2,r2,8
 400b028:	10800017 	ldw	r2,0(r2)
 400b02c:	10ffffcc 	andi	r3,r2,65535
 400b030:	00810074 	movhi	r2,1025
 400b034:	10bc3c04 	addi	r2,r2,-3856
 400b038:	10c01115 	stw	r3,68(r2)
 400b03c:	00810074 	movhi	r2,1025
 400b040:	10bc3c04 	addi	r2,r2,-3856
 400b044:	10800a17 	ldw	r2,40(r2)
 400b048:	10800204 	addi	r2,r2,8
 400b04c:	10800017 	ldw	r2,0(r2)
 400b050:	1006d43a 	srli	r3,r2,16
 400b054:	00810074 	movhi	r2,1025
 400b058:	10bc3c04 	addi	r2,r2,-3856
 400b05c:	10c01215 	stw	r3,72(r2)
 400b060:	00810074 	movhi	r2,1025
 400b064:	10bc3c04 	addi	r2,r2,-3856
 400b068:	10800a17 	ldw	r2,40(r2)
 400b06c:	10800304 	addi	r2,r2,12
 400b070:	10800017 	ldw	r2,0(r2)
 400b074:	1005d07a 	srai	r2,r2,1
 400b078:	10c0004c 	andi	r3,r2,1
 400b07c:	00810074 	movhi	r2,1025
 400b080:	10bc3c04 	addi	r2,r2,-3856
 400b084:	10c00d15 	stw	r3,52(r2)
 400b088:	00810074 	movhi	r2,1025
 400b08c:	10bc3c04 	addi	r2,r2,-3856
 400b090:	10800a17 	ldw	r2,40(r2)
 400b094:	10800304 	addi	r2,r2,12
 400b098:	10800017 	ldw	r2,0(r2)
 400b09c:	1005d23a 	srai	r2,r2,8
 400b0a0:	108003cc 	andi	r2,r2,15
 400b0a4:	10800044 	addi	r2,r2,1
 400b0a8:	1007883a 	mov	r3,r2
 400b0ac:	00810074 	movhi	r2,1025
 400b0b0:	10bc3c04 	addi	r2,r2,-3856
 400b0b4:	10c00e15 	stw	r3,56(r2)
 400b0b8:	00810074 	movhi	r2,1025
 400b0bc:	10bc3c04 	addi	r2,r2,-3856
 400b0c0:	10800a17 	ldw	r2,40(r2)
 400b0c4:	10800304 	addi	r2,r2,12
 400b0c8:	10800017 	ldw	r2,0(r2)
 400b0cc:	1005d1ba 	srai	r2,r2,6
 400b0d0:	108000cc 	andi	r2,r2,3
 400b0d4:	10800044 	addi	r2,r2,1
 400b0d8:	1007883a 	mov	r3,r2
 400b0dc:	00810074 	movhi	r2,1025
 400b0e0:	10bc3c04 	addi	r2,r2,-3856
 400b0e4:	10c00f15 	stw	r3,60(r2)
 400b0e8:	00810074 	movhi	r2,1025
 400b0ec:	10bc3c04 	addi	r2,r2,-3856
 400b0f0:	10800e17 	ldw	r2,56(r2)
 400b0f4:	1007883a 	mov	r3,r2
 400b0f8:	00810074 	movhi	r2,1025
 400b0fc:	10bc3c04 	addi	r2,r2,-3856
 400b100:	10800f17 	ldw	r2,60(r2)
 400b104:	100b883a 	mov	r5,r2
 400b108:	1809883a 	mov	r4,r3
 400b10c:	400359c0 	call	400359c <__mulsi3>
 400b110:	e0bfff05 	stb	r2,-4(fp)
 400b114:	e0bfff03 	ldbu	r2,-4(fp)
 400b118:	10800268 	cmpgeui	r2,r2,9
 400b11c:	1000051e 	bne	r2,zero,400b134 <alt_sys_init+0x190>
 400b120:	00810074 	movhi	r2,1025
 400b124:	10bc3c04 	addi	r2,r2,-3856
 400b128:	00c00044 	movi	r3,1
 400b12c:	10c01015 	stw	r3,64(r2)
 400b130:	00000c06 	br	400b164 <alt_sys_init+0x1c0>
 400b134:	e0bfff03 	ldbu	r2,-4(fp)
 400b138:	10800468 	cmpgeui	r2,r2,17
 400b13c:	1000051e 	bne	r2,zero,400b154 <alt_sys_init+0x1b0>
 400b140:	00810074 	movhi	r2,1025
 400b144:	10bc3c04 	addi	r2,r2,-3856
 400b148:	00c00084 	movi	r3,2
 400b14c:	10c01015 	stw	r3,64(r2)
 400b150:	00000406 	br	400b164 <alt_sys_init+0x1c0>
 400b154:	00810074 	movhi	r2,1025
 400b158:	10bc3c04 	addi	r2,r2,-3856
 400b15c:	00c00104 	movi	r3,4
 400b160:	10c01015 	stw	r3,64(r2)
 400b164:	00810074 	movhi	r2,1025
 400b168:	10bc3c04 	addi	r2,r2,-3856
 400b16c:	10800a17 	ldw	r2,40(r2)
 400b170:	10800304 	addi	r2,r2,12
 400b174:	10800017 	ldw	r2,0(r2)
 400b178:	1005d43a 	srai	r2,r2,16
 400b17c:	e0bfff45 	stb	r2,-3(fp)
 400b180:	00810074 	movhi	r2,1025
 400b184:	10bc3c04 	addi	r2,r2,-3856
 400b188:	10800a17 	ldw	r2,40(r2)
 400b18c:	10800304 	addi	r2,r2,12
 400b190:	10800017 	ldw	r2,0(r2)
 400b194:	1004d63a 	srli	r2,r2,24
 400b198:	e0bfff85 	stb	r2,-2(fp)
 400b19c:	00810074 	movhi	r2,1025
 400b1a0:	10bc3c04 	addi	r2,r2,-3856
 400b1a4:	10801017 	ldw	r2,64(r2)
 400b1a8:	10800058 	cmpnei	r2,r2,1
 400b1ac:	1000041e 	bne	r2,zero,400b1c0 <alt_sys_init+0x21c>
 400b1b0:	00810074 	movhi	r2,1025
 400b1b4:	10bc3c04 	addi	r2,r2,-3856
 400b1b8:	10001315 	stw	zero,76(r2)
 400b1bc:	00000e06 	br	400b1f8 <alt_sys_init+0x254>
 400b1c0:	00810074 	movhi	r2,1025
 400b1c4:	10bc3c04 	addi	r2,r2,-3856
 400b1c8:	10801017 	ldw	r2,64(r2)
 400b1cc:	10800098 	cmpnei	r2,r2,2
 400b1d0:	1000051e 	bne	r2,zero,400b1e8 <alt_sys_init+0x244>
 400b1d4:	00810074 	movhi	r2,1025
 400b1d8:	10bc3c04 	addi	r2,r2,-3856
 400b1dc:	00c00044 	movi	r3,1
 400b1e0:	10c01315 	stw	r3,76(r2)
 400b1e4:	00000406 	br	400b1f8 <alt_sys_init+0x254>
 400b1e8:	00810074 	movhi	r2,1025
 400b1ec:	10bc3c04 	addi	r2,r2,-3856
 400b1f0:	00c00084 	movi	r3,2
 400b1f4:	10c01315 	stw	r3,76(r2)
 400b1f8:	e0bfff43 	ldbu	r2,-3(fp)
 400b1fc:	00c00804 	movi	r3,32
 400b200:	1885c83a 	sub	r2,r3,r2
 400b204:	00ffffc4 	movi	r3,-1
 400b208:	1886d83a 	srl	r3,r3,r2
 400b20c:	00810074 	movhi	r2,1025
 400b210:	10bc3c04 	addi	r2,r2,-3856
 400b214:	10c01415 	stw	r3,80(r2)
 400b218:	e0ffff43 	ldbu	r3,-3(fp)
 400b21c:	00810074 	movhi	r2,1025
 400b220:	10bc3c04 	addi	r2,r2,-3856
 400b224:	10801317 	ldw	r2,76(r2)
 400b228:	1887883a 	add	r3,r3,r2
 400b22c:	00810074 	movhi	r2,1025
 400b230:	10bc3c04 	addi	r2,r2,-3856
 400b234:	10c01515 	stw	r3,84(r2)
 400b238:	e0bfff83 	ldbu	r2,-2(fp)
 400b23c:	00c00804 	movi	r3,32
 400b240:	1885c83a 	sub	r2,r3,r2
 400b244:	00ffffc4 	movi	r3,-1
 400b248:	1886d83a 	srl	r3,r3,r2
 400b24c:	00810074 	movhi	r2,1025
 400b250:	10bc3c04 	addi	r2,r2,-3856
 400b254:	10c01615 	stw	r3,88(r2)
 400b258:	01010074 	movhi	r4,1025
 400b25c:	213c3c04 	addi	r4,r4,-3856
 400b260:	400af380 	call	400af38 <alt_dev_reg>
}
 400b264:	0001883a 	nop
 400b268:	e037883a 	mov	sp,fp
 400b26c:	dfc00117 	ldw	ra,4(sp)
 400b270:	df000017 	ldw	fp,0(sp)
 400b274:	dec00204 	addi	sp,sp,8
 400b278:	f800283a 	ret

0400b27c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400b27c:	defffa04 	addi	sp,sp,-24
 400b280:	dfc00515 	stw	ra,20(sp)
 400b284:	df000415 	stw	fp,16(sp)
 400b288:	df000404 	addi	fp,sp,16
 400b28c:	e13ffd15 	stw	r4,-12(fp)
 400b290:	e17ffe15 	stw	r5,-8(fp)
 400b294:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400b298:	e0bffd17 	ldw	r2,-12(fp)
 400b29c:	10800017 	ldw	r2,0(r2)
 400b2a0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400b2a4:	e0bffc17 	ldw	r2,-16(fp)
 400b2a8:	10c00a04 	addi	r3,r2,40
 400b2ac:	e0bffd17 	ldw	r2,-12(fp)
 400b2b0:	10800217 	ldw	r2,8(r2)
 400b2b4:	100f883a 	mov	r7,r2
 400b2b8:	e1bfff17 	ldw	r6,-4(fp)
 400b2bc:	e17ffe17 	ldw	r5,-8(fp)
 400b2c0:	1809883a 	mov	r4,r3
 400b2c4:	400b8a40 	call	400b8a4 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400b2c8:	e037883a 	mov	sp,fp
 400b2cc:	dfc00117 	ldw	ra,4(sp)
 400b2d0:	df000017 	ldw	fp,0(sp)
 400b2d4:	dec00204 	addi	sp,sp,8
 400b2d8:	f800283a 	ret

0400b2dc <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400b2dc:	defffa04 	addi	sp,sp,-24
 400b2e0:	dfc00515 	stw	ra,20(sp)
 400b2e4:	df000415 	stw	fp,16(sp)
 400b2e8:	df000404 	addi	fp,sp,16
 400b2ec:	e13ffd15 	stw	r4,-12(fp)
 400b2f0:	e17ffe15 	stw	r5,-8(fp)
 400b2f4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400b2f8:	e0bffd17 	ldw	r2,-12(fp)
 400b2fc:	10800017 	ldw	r2,0(r2)
 400b300:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400b304:	e0bffc17 	ldw	r2,-16(fp)
 400b308:	10c00a04 	addi	r3,r2,40
 400b30c:	e0bffd17 	ldw	r2,-12(fp)
 400b310:	10800217 	ldw	r2,8(r2)
 400b314:	100f883a 	mov	r7,r2
 400b318:	e1bfff17 	ldw	r6,-4(fp)
 400b31c:	e17ffe17 	ldw	r5,-8(fp)
 400b320:	1809883a 	mov	r4,r3
 400b324:	400bac00 	call	400bac0 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400b328:	e037883a 	mov	sp,fp
 400b32c:	dfc00117 	ldw	ra,4(sp)
 400b330:	df000017 	ldw	fp,0(sp)
 400b334:	dec00204 	addi	sp,sp,8
 400b338:	f800283a 	ret

0400b33c <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400b33c:	defffc04 	addi	sp,sp,-16
 400b340:	dfc00315 	stw	ra,12(sp)
 400b344:	df000215 	stw	fp,8(sp)
 400b348:	df000204 	addi	fp,sp,8
 400b34c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400b350:	e0bfff17 	ldw	r2,-4(fp)
 400b354:	10800017 	ldw	r2,0(r2)
 400b358:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400b35c:	e0bffe17 	ldw	r2,-8(fp)
 400b360:	10c00a04 	addi	r3,r2,40
 400b364:	e0bfff17 	ldw	r2,-4(fp)
 400b368:	10800217 	ldw	r2,8(r2)
 400b36c:	100b883a 	mov	r5,r2
 400b370:	1809883a 	mov	r4,r3
 400b374:	400b74c0 	call	400b74c <altera_avalon_jtag_uart_close>
}
 400b378:	e037883a 	mov	sp,fp
 400b37c:	dfc00117 	ldw	ra,4(sp)
 400b380:	df000017 	ldw	fp,0(sp)
 400b384:	dec00204 	addi	sp,sp,8
 400b388:	f800283a 	ret

0400b38c <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400b38c:	defffa04 	addi	sp,sp,-24
 400b390:	dfc00515 	stw	ra,20(sp)
 400b394:	df000415 	stw	fp,16(sp)
 400b398:	df000404 	addi	fp,sp,16
 400b39c:	e13ffd15 	stw	r4,-12(fp)
 400b3a0:	e17ffe15 	stw	r5,-8(fp)
 400b3a4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400b3a8:	e0bffd17 	ldw	r2,-12(fp)
 400b3ac:	10800017 	ldw	r2,0(r2)
 400b3b0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400b3b4:	e0bffc17 	ldw	r2,-16(fp)
 400b3b8:	10800a04 	addi	r2,r2,40
 400b3bc:	e1bfff17 	ldw	r6,-4(fp)
 400b3c0:	e17ffe17 	ldw	r5,-8(fp)
 400b3c4:	1009883a 	mov	r4,r2
 400b3c8:	400b7b40 	call	400b7b4 <altera_avalon_jtag_uart_ioctl>
}
 400b3cc:	e037883a 	mov	sp,fp
 400b3d0:	dfc00117 	ldw	ra,4(sp)
 400b3d4:	df000017 	ldw	fp,0(sp)
 400b3d8:	dec00204 	addi	sp,sp,8
 400b3dc:	f800283a 	ret

0400b3e0 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400b3e0:	defffa04 	addi	sp,sp,-24
 400b3e4:	dfc00515 	stw	ra,20(sp)
 400b3e8:	df000415 	stw	fp,16(sp)
 400b3ec:	df000404 	addi	fp,sp,16
 400b3f0:	e13ffd15 	stw	r4,-12(fp)
 400b3f4:	e17ffe15 	stw	r5,-8(fp)
 400b3f8:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400b3fc:	e0bffd17 	ldw	r2,-12(fp)
 400b400:	00c00044 	movi	r3,1
 400b404:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400b408:	e0bffd17 	ldw	r2,-12(fp)
 400b40c:	10800017 	ldw	r2,0(r2)
 400b410:	10800104 	addi	r2,r2,4
 400b414:	1007883a 	mov	r3,r2
 400b418:	e0bffd17 	ldw	r2,-12(fp)
 400b41c:	10800817 	ldw	r2,32(r2)
 400b420:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400b424:	e0bffe17 	ldw	r2,-8(fp)
 400b428:	e0ffff17 	ldw	r3,-4(fp)
 400b42c:	d8000015 	stw	zero,0(sp)
 400b430:	e1fffd17 	ldw	r7,-12(fp)
 400b434:	01810074 	movhi	r6,1025
 400b438:	31ad2804 	addi	r6,r6,-19296
 400b43c:	180b883a 	mov	r5,r3
 400b440:	1009883a 	mov	r4,r2
 400b444:	400c1480 	call	400c148 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400b448:	e0bffd17 	ldw	r2,-12(fp)
 400b44c:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400b450:	e0bffd17 	ldw	r2,-12(fp)
 400b454:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400b458:	d0e6f917 	ldw	r3,-25628(gp)
 400b45c:	e1fffd17 	ldw	r7,-12(fp)
 400b460:	01810074 	movhi	r6,1025
 400b464:	31adab04 	addi	r6,r6,-18772
 400b468:	180b883a 	mov	r5,r3
 400b46c:	1009883a 	mov	r4,r2
 400b470:	400bce40 	call	400bce4 <alt_alarm_start>
 400b474:	1000040e 	bge	r2,zero,400b488 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400b478:	e0fffd17 	ldw	r3,-12(fp)
 400b47c:	00a00034 	movhi	r2,32768
 400b480:	10bfffc4 	addi	r2,r2,-1
 400b484:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400b488:	0001883a 	nop
 400b48c:	e037883a 	mov	sp,fp
 400b490:	dfc00117 	ldw	ra,4(sp)
 400b494:	df000017 	ldw	fp,0(sp)
 400b498:	dec00204 	addi	sp,sp,8
 400b49c:	f800283a 	ret

0400b4a0 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400b4a0:	defff804 	addi	sp,sp,-32
 400b4a4:	df000715 	stw	fp,28(sp)
 400b4a8:	df000704 	addi	fp,sp,28
 400b4ac:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400b4b0:	e0bfff17 	ldw	r2,-4(fp)
 400b4b4:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 400b4b8:	e0bffb17 	ldw	r2,-20(fp)
 400b4bc:	10800017 	ldw	r2,0(r2)
 400b4c0:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400b4c4:	e0bffc17 	ldw	r2,-16(fp)
 400b4c8:	10800104 	addi	r2,r2,4
 400b4cc:	10800037 	ldwio	r2,0(r2)
 400b4d0:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400b4d4:	e0bffd17 	ldw	r2,-12(fp)
 400b4d8:	1080c00c 	andi	r2,r2,768
 400b4dc:	10006d26 	beq	r2,zero,400b694 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400b4e0:	e0bffd17 	ldw	r2,-12(fp)
 400b4e4:	1080400c 	andi	r2,r2,256
 400b4e8:	10003526 	beq	r2,zero,400b5c0 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400b4ec:	00800074 	movhi	r2,1
 400b4f0:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400b4f4:	e0bffb17 	ldw	r2,-20(fp)
 400b4f8:	10800a17 	ldw	r2,40(r2)
 400b4fc:	10800044 	addi	r2,r2,1
 400b500:	1081ffcc 	andi	r2,r2,2047
 400b504:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 400b508:	e0bffb17 	ldw	r2,-20(fp)
 400b50c:	10c00b17 	ldw	r3,44(r2)
 400b510:	e0bffe17 	ldw	r2,-8(fp)
 400b514:	18801526 	beq	r3,r2,400b56c <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400b518:	e0bffc17 	ldw	r2,-16(fp)
 400b51c:	10800037 	ldwio	r2,0(r2)
 400b520:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400b524:	e0bff917 	ldw	r2,-28(fp)
 400b528:	10a0000c 	andi	r2,r2,32768
 400b52c:	10001126 	beq	r2,zero,400b574 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400b530:	e0bffb17 	ldw	r2,-20(fp)
 400b534:	10800a17 	ldw	r2,40(r2)
 400b538:	e0fff917 	ldw	r3,-28(fp)
 400b53c:	1809883a 	mov	r4,r3
 400b540:	e0fffb17 	ldw	r3,-20(fp)
 400b544:	1885883a 	add	r2,r3,r2
 400b548:	10800e04 	addi	r2,r2,56
 400b54c:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400b550:	e0bffb17 	ldw	r2,-20(fp)
 400b554:	10800a17 	ldw	r2,40(r2)
 400b558:	10800044 	addi	r2,r2,1
 400b55c:	10c1ffcc 	andi	r3,r2,2047
 400b560:	e0bffb17 	ldw	r2,-20(fp)
 400b564:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400b568:	003fe206 	br	400b4f4 <__alt_data_end+0xfc00b4f4>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 400b56c:	0001883a 	nop
 400b570:	00000106 	br	400b578 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 400b574:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400b578:	e0bff917 	ldw	r2,-28(fp)
 400b57c:	10bfffec 	andhi	r2,r2,65535
 400b580:	10000f26 	beq	r2,zero,400b5c0 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400b584:	e0bffb17 	ldw	r2,-20(fp)
 400b588:	10c00817 	ldw	r3,32(r2)
 400b58c:	00bfff84 	movi	r2,-2
 400b590:	1886703a 	and	r3,r3,r2
 400b594:	e0bffb17 	ldw	r2,-20(fp)
 400b598:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400b59c:	e0bffc17 	ldw	r2,-16(fp)
 400b5a0:	10800104 	addi	r2,r2,4
 400b5a4:	1007883a 	mov	r3,r2
 400b5a8:	e0bffb17 	ldw	r2,-20(fp)
 400b5ac:	10800817 	ldw	r2,32(r2)
 400b5b0:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400b5b4:	e0bffc17 	ldw	r2,-16(fp)
 400b5b8:	10800104 	addi	r2,r2,4
 400b5bc:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400b5c0:	e0bffd17 	ldw	r2,-12(fp)
 400b5c4:	1080800c 	andi	r2,r2,512
 400b5c8:	103fbe26 	beq	r2,zero,400b4c4 <__alt_data_end+0xfc00b4c4>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400b5cc:	e0bffd17 	ldw	r2,-12(fp)
 400b5d0:	1004d43a 	srli	r2,r2,16
 400b5d4:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400b5d8:	00001406 	br	400b62c <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400b5dc:	e0bffc17 	ldw	r2,-16(fp)
 400b5e0:	e0fffb17 	ldw	r3,-20(fp)
 400b5e4:	18c00d17 	ldw	r3,52(r3)
 400b5e8:	e13ffb17 	ldw	r4,-20(fp)
 400b5ec:	20c7883a 	add	r3,r4,r3
 400b5f0:	18c20e04 	addi	r3,r3,2104
 400b5f4:	18c00003 	ldbu	r3,0(r3)
 400b5f8:	18c03fcc 	andi	r3,r3,255
 400b5fc:	18c0201c 	xori	r3,r3,128
 400b600:	18ffe004 	addi	r3,r3,-128
 400b604:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400b608:	e0bffb17 	ldw	r2,-20(fp)
 400b60c:	10800d17 	ldw	r2,52(r2)
 400b610:	10800044 	addi	r2,r2,1
 400b614:	10c1ffcc 	andi	r3,r2,2047
 400b618:	e0bffb17 	ldw	r2,-20(fp)
 400b61c:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400b620:	e0bffa17 	ldw	r2,-24(fp)
 400b624:	10bfffc4 	addi	r2,r2,-1
 400b628:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400b62c:	e0bffa17 	ldw	r2,-24(fp)
 400b630:	10000526 	beq	r2,zero,400b648 <altera_avalon_jtag_uart_irq+0x1a8>
 400b634:	e0bffb17 	ldw	r2,-20(fp)
 400b638:	10c00d17 	ldw	r3,52(r2)
 400b63c:	e0bffb17 	ldw	r2,-20(fp)
 400b640:	10800c17 	ldw	r2,48(r2)
 400b644:	18bfe51e 	bne	r3,r2,400b5dc <__alt_data_end+0xfc00b5dc>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400b648:	e0bffa17 	ldw	r2,-24(fp)
 400b64c:	103f9d26 	beq	r2,zero,400b4c4 <__alt_data_end+0xfc00b4c4>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400b650:	e0bffb17 	ldw	r2,-20(fp)
 400b654:	10c00817 	ldw	r3,32(r2)
 400b658:	00bfff44 	movi	r2,-3
 400b65c:	1886703a 	and	r3,r3,r2
 400b660:	e0bffb17 	ldw	r2,-20(fp)
 400b664:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400b668:	e0bffb17 	ldw	r2,-20(fp)
 400b66c:	10800017 	ldw	r2,0(r2)
 400b670:	10800104 	addi	r2,r2,4
 400b674:	1007883a 	mov	r3,r2
 400b678:	e0bffb17 	ldw	r2,-20(fp)
 400b67c:	10800817 	ldw	r2,32(r2)
 400b680:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400b684:	e0bffc17 	ldw	r2,-16(fp)
 400b688:	10800104 	addi	r2,r2,4
 400b68c:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400b690:	003f8c06 	br	400b4c4 <__alt_data_end+0xfc00b4c4>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400b694:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 400b698:	0001883a 	nop
 400b69c:	e037883a 	mov	sp,fp
 400b6a0:	df000017 	ldw	fp,0(sp)
 400b6a4:	dec00104 	addi	sp,sp,4
 400b6a8:	f800283a 	ret

0400b6ac <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400b6ac:	defff804 	addi	sp,sp,-32
 400b6b0:	df000715 	stw	fp,28(sp)
 400b6b4:	df000704 	addi	fp,sp,28
 400b6b8:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400b6bc:	e0bffb17 	ldw	r2,-20(fp)
 400b6c0:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400b6c4:	e0bff917 	ldw	r2,-28(fp)
 400b6c8:	10800017 	ldw	r2,0(r2)
 400b6cc:	10800104 	addi	r2,r2,4
 400b6d0:	10800037 	ldwio	r2,0(r2)
 400b6d4:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400b6d8:	e0bffa17 	ldw	r2,-24(fp)
 400b6dc:	1081000c 	andi	r2,r2,1024
 400b6e0:	10000b26 	beq	r2,zero,400b710 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400b6e4:	e0bff917 	ldw	r2,-28(fp)
 400b6e8:	10800017 	ldw	r2,0(r2)
 400b6ec:	10800104 	addi	r2,r2,4
 400b6f0:	1007883a 	mov	r3,r2
 400b6f4:	e0bff917 	ldw	r2,-28(fp)
 400b6f8:	10800817 	ldw	r2,32(r2)
 400b6fc:	10810014 	ori	r2,r2,1024
 400b700:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400b704:	e0bff917 	ldw	r2,-28(fp)
 400b708:	10000915 	stw	zero,36(r2)
 400b70c:	00000a06 	br	400b738 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400b710:	e0bff917 	ldw	r2,-28(fp)
 400b714:	10c00917 	ldw	r3,36(r2)
 400b718:	00a00034 	movhi	r2,32768
 400b71c:	10bfff04 	addi	r2,r2,-4
 400b720:	10c00536 	bltu	r2,r3,400b738 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 400b724:	e0bff917 	ldw	r2,-28(fp)
 400b728:	10800917 	ldw	r2,36(r2)
 400b72c:	10c00044 	addi	r3,r2,1
 400b730:	e0bff917 	ldw	r2,-28(fp)
 400b734:	10c00915 	stw	r3,36(r2)
 400b738:	d0a6f917 	ldw	r2,-25628(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400b73c:	e037883a 	mov	sp,fp
 400b740:	df000017 	ldw	fp,0(sp)
 400b744:	dec00104 	addi	sp,sp,4
 400b748:	f800283a 	ret

0400b74c <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400b74c:	defffd04 	addi	sp,sp,-12
 400b750:	df000215 	stw	fp,8(sp)
 400b754:	df000204 	addi	fp,sp,8
 400b758:	e13ffe15 	stw	r4,-8(fp)
 400b75c:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400b760:	00000506 	br	400b778 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400b764:	e0bfff17 	ldw	r2,-4(fp)
 400b768:	1090000c 	andi	r2,r2,16384
 400b76c:	10000226 	beq	r2,zero,400b778 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400b770:	00bffd44 	movi	r2,-11
 400b774:	00000b06 	br	400b7a4 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400b778:	e0bffe17 	ldw	r2,-8(fp)
 400b77c:	10c00d17 	ldw	r3,52(r2)
 400b780:	e0bffe17 	ldw	r2,-8(fp)
 400b784:	10800c17 	ldw	r2,48(r2)
 400b788:	18800526 	beq	r3,r2,400b7a0 <altera_avalon_jtag_uart_close+0x54>
 400b78c:	e0bffe17 	ldw	r2,-8(fp)
 400b790:	10c00917 	ldw	r3,36(r2)
 400b794:	e0bffe17 	ldw	r2,-8(fp)
 400b798:	10800117 	ldw	r2,4(r2)
 400b79c:	18bff136 	bltu	r3,r2,400b764 <__alt_data_end+0xfc00b764>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400b7a0:	0005883a 	mov	r2,zero
}
 400b7a4:	e037883a 	mov	sp,fp
 400b7a8:	df000017 	ldw	fp,0(sp)
 400b7ac:	dec00104 	addi	sp,sp,4
 400b7b0:	f800283a 	ret

0400b7b4 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400b7b4:	defffa04 	addi	sp,sp,-24
 400b7b8:	df000515 	stw	fp,20(sp)
 400b7bc:	df000504 	addi	fp,sp,20
 400b7c0:	e13ffd15 	stw	r4,-12(fp)
 400b7c4:	e17ffe15 	stw	r5,-8(fp)
 400b7c8:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 400b7cc:	00bff9c4 	movi	r2,-25
 400b7d0:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400b7d4:	e0bffe17 	ldw	r2,-8(fp)
 400b7d8:	10da8060 	cmpeqi	r3,r2,27137
 400b7dc:	1800031e 	bne	r3,zero,400b7ec <altera_avalon_jtag_uart_ioctl+0x38>
 400b7e0:	109a80a0 	cmpeqi	r2,r2,27138
 400b7e4:	1000181e 	bne	r2,zero,400b848 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 400b7e8:	00002906 	br	400b890 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400b7ec:	e0bffd17 	ldw	r2,-12(fp)
 400b7f0:	10c00117 	ldw	r3,4(r2)
 400b7f4:	00a00034 	movhi	r2,32768
 400b7f8:	10bfffc4 	addi	r2,r2,-1
 400b7fc:	18802126 	beq	r3,r2,400b884 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 400b800:	e0bfff17 	ldw	r2,-4(fp)
 400b804:	10800017 	ldw	r2,0(r2)
 400b808:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400b80c:	e0bffc17 	ldw	r2,-16(fp)
 400b810:	10800090 	cmplti	r2,r2,2
 400b814:	1000061e 	bne	r2,zero,400b830 <altera_avalon_jtag_uart_ioctl+0x7c>
 400b818:	e0fffc17 	ldw	r3,-16(fp)
 400b81c:	00a00034 	movhi	r2,32768
 400b820:	10bfffc4 	addi	r2,r2,-1
 400b824:	18800226 	beq	r3,r2,400b830 <altera_avalon_jtag_uart_ioctl+0x7c>
 400b828:	e0bffc17 	ldw	r2,-16(fp)
 400b82c:	00000206 	br	400b838 <altera_avalon_jtag_uart_ioctl+0x84>
 400b830:	00a00034 	movhi	r2,32768
 400b834:	10bfff84 	addi	r2,r2,-2
 400b838:	e0fffd17 	ldw	r3,-12(fp)
 400b83c:	18800115 	stw	r2,4(r3)
      rc = 0;
 400b840:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400b844:	00000f06 	br	400b884 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400b848:	e0bffd17 	ldw	r2,-12(fp)
 400b84c:	10c00117 	ldw	r3,4(r2)
 400b850:	00a00034 	movhi	r2,32768
 400b854:	10bfffc4 	addi	r2,r2,-1
 400b858:	18800c26 	beq	r3,r2,400b88c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400b85c:	e0bffd17 	ldw	r2,-12(fp)
 400b860:	10c00917 	ldw	r3,36(r2)
 400b864:	e0bffd17 	ldw	r2,-12(fp)
 400b868:	10800117 	ldw	r2,4(r2)
 400b86c:	1885803a 	cmpltu	r2,r3,r2
 400b870:	10c03fcc 	andi	r3,r2,255
 400b874:	e0bfff17 	ldw	r2,-4(fp)
 400b878:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400b87c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400b880:	00000206 	br	400b88c <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 400b884:	0001883a 	nop
 400b888:	00000106 	br	400b890 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 400b88c:	0001883a 	nop

  default:
    break;
  }

  return rc;
 400b890:	e0bffb17 	ldw	r2,-20(fp)
}
 400b894:	e037883a 	mov	sp,fp
 400b898:	df000017 	ldw	fp,0(sp)
 400b89c:	dec00104 	addi	sp,sp,4
 400b8a0:	f800283a 	ret

0400b8a4 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400b8a4:	defff304 	addi	sp,sp,-52
 400b8a8:	dfc00c15 	stw	ra,48(sp)
 400b8ac:	df000b15 	stw	fp,44(sp)
 400b8b0:	df000b04 	addi	fp,sp,44
 400b8b4:	e13ffc15 	stw	r4,-16(fp)
 400b8b8:	e17ffd15 	stw	r5,-12(fp)
 400b8bc:	e1bffe15 	stw	r6,-8(fp)
 400b8c0:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 400b8c4:	e0bffd17 	ldw	r2,-12(fp)
 400b8c8:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400b8cc:	00004706 	br	400b9ec <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400b8d0:	e0bffc17 	ldw	r2,-16(fp)
 400b8d4:	10800a17 	ldw	r2,40(r2)
 400b8d8:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 400b8dc:	e0bffc17 	ldw	r2,-16(fp)
 400b8e0:	10800b17 	ldw	r2,44(r2)
 400b8e4:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 400b8e8:	e0fff717 	ldw	r3,-36(fp)
 400b8ec:	e0bff817 	ldw	r2,-32(fp)
 400b8f0:	18800536 	bltu	r3,r2,400b908 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400b8f4:	e0fff717 	ldw	r3,-36(fp)
 400b8f8:	e0bff817 	ldw	r2,-32(fp)
 400b8fc:	1885c83a 	sub	r2,r3,r2
 400b900:	e0bff615 	stw	r2,-40(fp)
 400b904:	00000406 	br	400b918 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400b908:	00c20004 	movi	r3,2048
 400b90c:	e0bff817 	ldw	r2,-32(fp)
 400b910:	1885c83a 	sub	r2,r3,r2
 400b914:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400b918:	e0bff617 	ldw	r2,-40(fp)
 400b91c:	10001e26 	beq	r2,zero,400b998 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 400b920:	e0fffe17 	ldw	r3,-8(fp)
 400b924:	e0bff617 	ldw	r2,-40(fp)
 400b928:	1880022e 	bgeu	r3,r2,400b934 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 400b92c:	e0bffe17 	ldw	r2,-8(fp)
 400b930:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400b934:	e0bffc17 	ldw	r2,-16(fp)
 400b938:	10c00e04 	addi	r3,r2,56
 400b93c:	e0bff817 	ldw	r2,-32(fp)
 400b940:	1885883a 	add	r2,r3,r2
 400b944:	e1bff617 	ldw	r6,-40(fp)
 400b948:	100b883a 	mov	r5,r2
 400b94c:	e13ff517 	ldw	r4,-44(fp)
 400b950:	4004b6c0 	call	4004b6c <memcpy>
      ptr   += n;
 400b954:	e0fff517 	ldw	r3,-44(fp)
 400b958:	e0bff617 	ldw	r2,-40(fp)
 400b95c:	1885883a 	add	r2,r3,r2
 400b960:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 400b964:	e0fffe17 	ldw	r3,-8(fp)
 400b968:	e0bff617 	ldw	r2,-40(fp)
 400b96c:	1885c83a 	sub	r2,r3,r2
 400b970:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400b974:	e0fff817 	ldw	r3,-32(fp)
 400b978:	e0bff617 	ldw	r2,-40(fp)
 400b97c:	1885883a 	add	r2,r3,r2
 400b980:	10c1ffcc 	andi	r3,r2,2047
 400b984:	e0bffc17 	ldw	r2,-16(fp)
 400b988:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400b98c:	e0bffe17 	ldw	r2,-8(fp)
 400b990:	00bfcf16 	blt	zero,r2,400b8d0 <__alt_data_end+0xfc00b8d0>
 400b994:	00000106 	br	400b99c <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 400b998:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400b99c:	e0fff517 	ldw	r3,-44(fp)
 400b9a0:	e0bffd17 	ldw	r2,-12(fp)
 400b9a4:	1880141e 	bne	r3,r2,400b9f8 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400b9a8:	e0bfff17 	ldw	r2,-4(fp)
 400b9ac:	1090000c 	andi	r2,r2,16384
 400b9b0:	1000131e 	bne	r2,zero,400ba00 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400b9b4:	0001883a 	nop
 400b9b8:	e0bffc17 	ldw	r2,-16(fp)
 400b9bc:	10c00a17 	ldw	r3,40(r2)
 400b9c0:	e0bff717 	ldw	r2,-36(fp)
 400b9c4:	1880051e 	bne	r3,r2,400b9dc <altera_avalon_jtag_uart_read+0x138>
 400b9c8:	e0bffc17 	ldw	r2,-16(fp)
 400b9cc:	10c00917 	ldw	r3,36(r2)
 400b9d0:	e0bffc17 	ldw	r2,-16(fp)
 400b9d4:	10800117 	ldw	r2,4(r2)
 400b9d8:	18bff736 	bltu	r3,r2,400b9b8 <__alt_data_end+0xfc00b9b8>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400b9dc:	e0bffc17 	ldw	r2,-16(fp)
 400b9e0:	10c00a17 	ldw	r3,40(r2)
 400b9e4:	e0bff717 	ldw	r2,-36(fp)
 400b9e8:	18800726 	beq	r3,r2,400ba08 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400b9ec:	e0bffe17 	ldw	r2,-8(fp)
 400b9f0:	00bfb716 	blt	zero,r2,400b8d0 <__alt_data_end+0xfc00b8d0>
 400b9f4:	00000506 	br	400ba0c <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 400b9f8:	0001883a 	nop
 400b9fc:	00000306 	br	400ba0c <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 400ba00:	0001883a 	nop
 400ba04:	00000106 	br	400ba0c <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 400ba08:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400ba0c:	e0fff517 	ldw	r3,-44(fp)
 400ba10:	e0bffd17 	ldw	r2,-12(fp)
 400ba14:	18801826 	beq	r3,r2,400ba78 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ba18:	0005303a 	rdctl	r2,status
 400ba1c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ba20:	e0fffb17 	ldw	r3,-20(fp)
 400ba24:	00bfff84 	movi	r2,-2
 400ba28:	1884703a 	and	r2,r3,r2
 400ba2c:	1001703a 	wrctl	status,r2
  
  return context;
 400ba30:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400ba34:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400ba38:	e0bffc17 	ldw	r2,-16(fp)
 400ba3c:	10800817 	ldw	r2,32(r2)
 400ba40:	10c00054 	ori	r3,r2,1
 400ba44:	e0bffc17 	ldw	r2,-16(fp)
 400ba48:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400ba4c:	e0bffc17 	ldw	r2,-16(fp)
 400ba50:	10800017 	ldw	r2,0(r2)
 400ba54:	10800104 	addi	r2,r2,4
 400ba58:	1007883a 	mov	r3,r2
 400ba5c:	e0bffc17 	ldw	r2,-16(fp)
 400ba60:	10800817 	ldw	r2,32(r2)
 400ba64:	18800035 	stwio	r2,0(r3)
 400ba68:	e0bffa17 	ldw	r2,-24(fp)
 400ba6c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ba70:	e0bff917 	ldw	r2,-28(fp)
 400ba74:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400ba78:	e0fff517 	ldw	r3,-44(fp)
 400ba7c:	e0bffd17 	ldw	r2,-12(fp)
 400ba80:	18800426 	beq	r3,r2,400ba94 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 400ba84:	e0fff517 	ldw	r3,-44(fp)
 400ba88:	e0bffd17 	ldw	r2,-12(fp)
 400ba8c:	1885c83a 	sub	r2,r3,r2
 400ba90:	00000606 	br	400baac <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 400ba94:	e0bfff17 	ldw	r2,-4(fp)
 400ba98:	1090000c 	andi	r2,r2,16384
 400ba9c:	10000226 	beq	r2,zero,400baa8 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 400baa0:	00bffd44 	movi	r2,-11
 400baa4:	00000106 	br	400baac <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 400baa8:	00bffec4 	movi	r2,-5
}
 400baac:	e037883a 	mov	sp,fp
 400bab0:	dfc00117 	ldw	ra,4(sp)
 400bab4:	df000017 	ldw	fp,0(sp)
 400bab8:	dec00204 	addi	sp,sp,8
 400babc:	f800283a 	ret

0400bac0 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400bac0:	defff304 	addi	sp,sp,-52
 400bac4:	dfc00c15 	stw	ra,48(sp)
 400bac8:	df000b15 	stw	fp,44(sp)
 400bacc:	df000b04 	addi	fp,sp,44
 400bad0:	e13ffc15 	stw	r4,-16(fp)
 400bad4:	e17ffd15 	stw	r5,-12(fp)
 400bad8:	e1bffe15 	stw	r6,-8(fp)
 400badc:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400bae0:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400bae4:	e0bffd17 	ldw	r2,-12(fp)
 400bae8:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400baec:	00003706 	br	400bbcc <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400baf0:	e0bffc17 	ldw	r2,-16(fp)
 400baf4:	10800c17 	ldw	r2,48(r2)
 400baf8:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 400bafc:	e0bffc17 	ldw	r2,-16(fp)
 400bb00:	10800d17 	ldw	r2,52(r2)
 400bb04:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 400bb08:	e0fff917 	ldw	r3,-28(fp)
 400bb0c:	e0bff517 	ldw	r2,-44(fp)
 400bb10:	1880062e 	bgeu	r3,r2,400bb2c <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400bb14:	e0fff517 	ldw	r3,-44(fp)
 400bb18:	e0bff917 	ldw	r2,-28(fp)
 400bb1c:	1885c83a 	sub	r2,r3,r2
 400bb20:	10bfffc4 	addi	r2,r2,-1
 400bb24:	e0bff615 	stw	r2,-40(fp)
 400bb28:	00000b06 	br	400bb58 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 400bb2c:	e0bff517 	ldw	r2,-44(fp)
 400bb30:	10000526 	beq	r2,zero,400bb48 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400bb34:	00c20004 	movi	r3,2048
 400bb38:	e0bff917 	ldw	r2,-28(fp)
 400bb3c:	1885c83a 	sub	r2,r3,r2
 400bb40:	e0bff615 	stw	r2,-40(fp)
 400bb44:	00000406 	br	400bb58 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400bb48:	00c1ffc4 	movi	r3,2047
 400bb4c:	e0bff917 	ldw	r2,-28(fp)
 400bb50:	1885c83a 	sub	r2,r3,r2
 400bb54:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400bb58:	e0bff617 	ldw	r2,-40(fp)
 400bb5c:	10001e26 	beq	r2,zero,400bbd8 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 400bb60:	e0fffe17 	ldw	r3,-8(fp)
 400bb64:	e0bff617 	ldw	r2,-40(fp)
 400bb68:	1880022e 	bgeu	r3,r2,400bb74 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 400bb6c:	e0bffe17 	ldw	r2,-8(fp)
 400bb70:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400bb74:	e0bffc17 	ldw	r2,-16(fp)
 400bb78:	10c20e04 	addi	r3,r2,2104
 400bb7c:	e0bff917 	ldw	r2,-28(fp)
 400bb80:	1885883a 	add	r2,r3,r2
 400bb84:	e1bff617 	ldw	r6,-40(fp)
 400bb88:	e17ffd17 	ldw	r5,-12(fp)
 400bb8c:	1009883a 	mov	r4,r2
 400bb90:	4004b6c0 	call	4004b6c <memcpy>
      ptr   += n;
 400bb94:	e0fffd17 	ldw	r3,-12(fp)
 400bb98:	e0bff617 	ldw	r2,-40(fp)
 400bb9c:	1885883a 	add	r2,r3,r2
 400bba0:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 400bba4:	e0fffe17 	ldw	r3,-8(fp)
 400bba8:	e0bff617 	ldw	r2,-40(fp)
 400bbac:	1885c83a 	sub	r2,r3,r2
 400bbb0:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400bbb4:	e0fff917 	ldw	r3,-28(fp)
 400bbb8:	e0bff617 	ldw	r2,-40(fp)
 400bbbc:	1885883a 	add	r2,r3,r2
 400bbc0:	10c1ffcc 	andi	r3,r2,2047
 400bbc4:	e0bffc17 	ldw	r2,-16(fp)
 400bbc8:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400bbcc:	e0bffe17 	ldw	r2,-8(fp)
 400bbd0:	00bfc716 	blt	zero,r2,400baf0 <__alt_data_end+0xfc00baf0>
 400bbd4:	00000106 	br	400bbdc <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 400bbd8:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400bbdc:	0005303a 	rdctl	r2,status
 400bbe0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400bbe4:	e0fffb17 	ldw	r3,-20(fp)
 400bbe8:	00bfff84 	movi	r2,-2
 400bbec:	1884703a 	and	r2,r3,r2
 400bbf0:	1001703a 	wrctl	status,r2
  
  return context;
 400bbf4:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400bbf8:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400bbfc:	e0bffc17 	ldw	r2,-16(fp)
 400bc00:	10800817 	ldw	r2,32(r2)
 400bc04:	10c00094 	ori	r3,r2,2
 400bc08:	e0bffc17 	ldw	r2,-16(fp)
 400bc0c:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400bc10:	e0bffc17 	ldw	r2,-16(fp)
 400bc14:	10800017 	ldw	r2,0(r2)
 400bc18:	10800104 	addi	r2,r2,4
 400bc1c:	1007883a 	mov	r3,r2
 400bc20:	e0bffc17 	ldw	r2,-16(fp)
 400bc24:	10800817 	ldw	r2,32(r2)
 400bc28:	18800035 	stwio	r2,0(r3)
 400bc2c:	e0bffa17 	ldw	r2,-24(fp)
 400bc30:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400bc34:	e0bff817 	ldw	r2,-32(fp)
 400bc38:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400bc3c:	e0bffe17 	ldw	r2,-8(fp)
 400bc40:	0080100e 	bge	zero,r2,400bc84 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 400bc44:	e0bfff17 	ldw	r2,-4(fp)
 400bc48:	1090000c 	andi	r2,r2,16384
 400bc4c:	1000101e 	bne	r2,zero,400bc90 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400bc50:	0001883a 	nop
 400bc54:	e0bffc17 	ldw	r2,-16(fp)
 400bc58:	10c00d17 	ldw	r3,52(r2)
 400bc5c:	e0bff517 	ldw	r2,-44(fp)
 400bc60:	1880051e 	bne	r3,r2,400bc78 <altera_avalon_jtag_uart_write+0x1b8>
 400bc64:	e0bffc17 	ldw	r2,-16(fp)
 400bc68:	10c00917 	ldw	r3,36(r2)
 400bc6c:	e0bffc17 	ldw	r2,-16(fp)
 400bc70:	10800117 	ldw	r2,4(r2)
 400bc74:	18bff736 	bltu	r3,r2,400bc54 <__alt_data_end+0xfc00bc54>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 400bc78:	e0bffc17 	ldw	r2,-16(fp)
 400bc7c:	10800917 	ldw	r2,36(r2)
 400bc80:	1000051e 	bne	r2,zero,400bc98 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 400bc84:	e0bffe17 	ldw	r2,-8(fp)
 400bc88:	00bfd016 	blt	zero,r2,400bbcc <__alt_data_end+0xfc00bbcc>
 400bc8c:	00000306 	br	400bc9c <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 400bc90:	0001883a 	nop
 400bc94:	00000106 	br	400bc9c <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 400bc98:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400bc9c:	e0fffd17 	ldw	r3,-12(fp)
 400bca0:	e0bff717 	ldw	r2,-36(fp)
 400bca4:	18800426 	beq	r3,r2,400bcb8 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 400bca8:	e0fffd17 	ldw	r3,-12(fp)
 400bcac:	e0bff717 	ldw	r2,-36(fp)
 400bcb0:	1885c83a 	sub	r2,r3,r2
 400bcb4:	00000606 	br	400bcd0 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 400bcb8:	e0bfff17 	ldw	r2,-4(fp)
 400bcbc:	1090000c 	andi	r2,r2,16384
 400bcc0:	10000226 	beq	r2,zero,400bccc <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 400bcc4:	00bffd44 	movi	r2,-11
 400bcc8:	00000106 	br	400bcd0 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400bccc:	00bffec4 	movi	r2,-5
}
 400bcd0:	e037883a 	mov	sp,fp
 400bcd4:	dfc00117 	ldw	ra,4(sp)
 400bcd8:	df000017 	ldw	fp,0(sp)
 400bcdc:	dec00204 	addi	sp,sp,8
 400bce0:	f800283a 	ret

0400bce4 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400bce4:	defff504 	addi	sp,sp,-44
 400bce8:	df000a15 	stw	fp,40(sp)
 400bcec:	df000a04 	addi	fp,sp,40
 400bcf0:	e13ffc15 	stw	r4,-16(fp)
 400bcf4:	e17ffd15 	stw	r5,-12(fp)
 400bcf8:	e1bffe15 	stw	r6,-8(fp)
 400bcfc:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400bd00:	e03ff615 	stw	zero,-40(fp)
 400bd04:	d0a6f917 	ldw	r2,-25628(gp)
  
  if (alt_ticks_per_second ())
 400bd08:	10003c26 	beq	r2,zero,400bdfc <alt_alarm_start+0x118>
  {
    if (alarm)
 400bd0c:	e0bffc17 	ldw	r2,-16(fp)
 400bd10:	10003826 	beq	r2,zero,400bdf4 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 400bd14:	e0bffc17 	ldw	r2,-16(fp)
 400bd18:	e0fffe17 	ldw	r3,-8(fp)
 400bd1c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400bd20:	e0bffc17 	ldw	r2,-16(fp)
 400bd24:	e0ffff17 	ldw	r3,-4(fp)
 400bd28:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400bd2c:	0005303a 	rdctl	r2,status
 400bd30:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400bd34:	e0fff917 	ldw	r3,-28(fp)
 400bd38:	00bfff84 	movi	r2,-2
 400bd3c:	1884703a 	and	r2,r3,r2
 400bd40:	1001703a 	wrctl	status,r2
  
  return context;
 400bd44:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 400bd48:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400bd4c:	d0a6fa17 	ldw	r2,-25624(gp)
      
      current_nticks = alt_nticks();
 400bd50:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400bd54:	e0fffd17 	ldw	r3,-12(fp)
 400bd58:	e0bff617 	ldw	r2,-40(fp)
 400bd5c:	1885883a 	add	r2,r3,r2
 400bd60:	10c00044 	addi	r3,r2,1
 400bd64:	e0bffc17 	ldw	r2,-16(fp)
 400bd68:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400bd6c:	e0bffc17 	ldw	r2,-16(fp)
 400bd70:	10c00217 	ldw	r3,8(r2)
 400bd74:	e0bff617 	ldw	r2,-40(fp)
 400bd78:	1880042e 	bgeu	r3,r2,400bd8c <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 400bd7c:	e0bffc17 	ldw	r2,-16(fp)
 400bd80:	00c00044 	movi	r3,1
 400bd84:	10c00405 	stb	r3,16(r2)
 400bd88:	00000206 	br	400bd94 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 400bd8c:	e0bffc17 	ldw	r2,-16(fp)
 400bd90:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400bd94:	e0bffc17 	ldw	r2,-16(fp)
 400bd98:	d0e01304 	addi	r3,gp,-32692
 400bd9c:	e0fffa15 	stw	r3,-24(fp)
 400bda0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400bda4:	e0bffb17 	ldw	r2,-20(fp)
 400bda8:	e0fffa17 	ldw	r3,-24(fp)
 400bdac:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400bdb0:	e0bffa17 	ldw	r2,-24(fp)
 400bdb4:	10c00017 	ldw	r3,0(r2)
 400bdb8:	e0bffb17 	ldw	r2,-20(fp)
 400bdbc:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400bdc0:	e0bffa17 	ldw	r2,-24(fp)
 400bdc4:	10800017 	ldw	r2,0(r2)
 400bdc8:	e0fffb17 	ldw	r3,-20(fp)
 400bdcc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400bdd0:	e0bffa17 	ldw	r2,-24(fp)
 400bdd4:	e0fffb17 	ldw	r3,-20(fp)
 400bdd8:	10c00015 	stw	r3,0(r2)
 400bddc:	e0bff817 	ldw	r2,-32(fp)
 400bde0:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400bde4:	e0bff717 	ldw	r2,-36(fp)
 400bde8:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400bdec:	0005883a 	mov	r2,zero
 400bdf0:	00000306 	br	400be00 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 400bdf4:	00bffa84 	movi	r2,-22
 400bdf8:	00000106 	br	400be00 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 400bdfc:	00bfde84 	movi	r2,-134
  }
}
 400be00:	e037883a 	mov	sp,fp
 400be04:	df000017 	ldw	fp,0(sp)
 400be08:	dec00104 	addi	sp,sp,4
 400be0c:	f800283a 	ret

0400be10 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 400be10:	defffa04 	addi	sp,sp,-24
 400be14:	dfc00515 	stw	ra,20(sp)
 400be18:	df000415 	stw	fp,16(sp)
 400be1c:	df000404 	addi	fp,sp,16
 400be20:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 400be24:	00800244 	movi	r2,9
 400be28:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 400be2c:	014003f4 	movhi	r5,15
 400be30:	29509004 	addi	r5,r5,16960
 400be34:	e13ffd17 	ldw	r4,-12(fp)
 400be38:	400359c0 	call	400359c <__mulsi3>
 400be3c:	100b883a 	mov	r5,r2
 400be40:	01017db4 	movhi	r4,1526
 400be44:	21384004 	addi	r4,r4,-7936
 400be48:	40034e00 	call	40034e0 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 400be4c:	100b883a 	mov	r5,r2
 400be50:	01200034 	movhi	r4,32768
 400be54:	213fffc4 	addi	r4,r4,-1
 400be58:	40034e00 	call	40034e0 <__udivsi3>
 400be5c:	100b883a 	mov	r5,r2
 400be60:	e13fff17 	ldw	r4,-4(fp)
 400be64:	40034e00 	call	40034e0 <__udivsi3>
 400be68:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 400be6c:	e0bffe17 	ldw	r2,-8(fp)
 400be70:	10002a26 	beq	r2,zero,400bf1c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 400be74:	e03ffc15 	stw	zero,-16(fp)
 400be78:	00001706 	br	400bed8 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 400be7c:	00a00034 	movhi	r2,32768
 400be80:	10bfffc4 	addi	r2,r2,-1
 400be84:	10bfffc4 	addi	r2,r2,-1
 400be88:	103ffe1e 	bne	r2,zero,400be84 <__alt_data_end+0xfc00be84>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 400be8c:	014003f4 	movhi	r5,15
 400be90:	29509004 	addi	r5,r5,16960
 400be94:	e13ffd17 	ldw	r4,-12(fp)
 400be98:	400359c0 	call	400359c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 400be9c:	100b883a 	mov	r5,r2
 400bea0:	01017db4 	movhi	r4,1526
 400bea4:	21384004 	addi	r4,r4,-7936
 400bea8:	40034e00 	call	40034e0 <__udivsi3>
 400beac:	100b883a 	mov	r5,r2
 400beb0:	01200034 	movhi	r4,32768
 400beb4:	213fffc4 	addi	r4,r4,-1
 400beb8:	40034e00 	call	40034e0 <__udivsi3>
 400bebc:	1007883a 	mov	r3,r2
 400bec0:	e0bfff17 	ldw	r2,-4(fp)
 400bec4:	10c5c83a 	sub	r2,r2,r3
 400bec8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 400becc:	e0bffc17 	ldw	r2,-16(fp)
 400bed0:	10800044 	addi	r2,r2,1
 400bed4:	e0bffc15 	stw	r2,-16(fp)
 400bed8:	e0fffc17 	ldw	r3,-16(fp)
 400bedc:	e0bffe17 	ldw	r2,-8(fp)
 400bee0:	18bfe616 	blt	r3,r2,400be7c <__alt_data_end+0xfc00be7c>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 400bee4:	014003f4 	movhi	r5,15
 400bee8:	29509004 	addi	r5,r5,16960
 400beec:	e13ffd17 	ldw	r4,-12(fp)
 400bef0:	400359c0 	call	400359c <__mulsi3>
 400bef4:	100b883a 	mov	r5,r2
 400bef8:	01017db4 	movhi	r4,1526
 400befc:	21384004 	addi	r4,r4,-7936
 400bf00:	40034e00 	call	40034e0 <__udivsi3>
 400bf04:	e17fff17 	ldw	r5,-4(fp)
 400bf08:	1009883a 	mov	r4,r2
 400bf0c:	400359c0 	call	400359c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400bf10:	10bfffc4 	addi	r2,r2,-1
 400bf14:	103ffe1e 	bne	r2,zero,400bf10 <__alt_data_end+0xfc00bf10>
 400bf18:	00000d06 	br	400bf50 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 400bf1c:	014003f4 	movhi	r5,15
 400bf20:	29509004 	addi	r5,r5,16960
 400bf24:	e13ffd17 	ldw	r4,-12(fp)
 400bf28:	400359c0 	call	400359c <__mulsi3>
 400bf2c:	100b883a 	mov	r5,r2
 400bf30:	01017db4 	movhi	r4,1526
 400bf34:	21384004 	addi	r4,r4,-7936
 400bf38:	40034e00 	call	40034e0 <__udivsi3>
 400bf3c:	e17fff17 	ldw	r5,-4(fp)
 400bf40:	1009883a 	mov	r4,r2
 400bf44:	400359c0 	call	400359c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400bf48:	10bfffc4 	addi	r2,r2,-1
 400bf4c:	00bffe16 	blt	zero,r2,400bf48 <__alt_data_end+0xfc00bf48>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 400bf50:	0005883a 	mov	r2,zero
}
 400bf54:	e037883a 	mov	sp,fp
 400bf58:	dfc00117 	ldw	ra,4(sp)
 400bf5c:	df000017 	ldw	fp,0(sp)
 400bf60:	dec00204 	addi	sp,sp,8
 400bf64:	f800283a 	ret

0400bf68 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400bf68:	deffff04 	addi	sp,sp,-4
 400bf6c:	df000015 	stw	fp,0(sp)
 400bf70:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400bf74:	0001883a 	nop
 400bf78:	e037883a 	mov	sp,fp
 400bf7c:	df000017 	ldw	fp,0(sp)
 400bf80:	dec00104 	addi	sp,sp,4
 400bf84:	f800283a 	ret

0400bf88 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400bf88:	defffe04 	addi	sp,sp,-8
 400bf8c:	dfc00115 	stw	ra,4(sp)
 400bf90:	df000015 	stw	fp,0(sp)
 400bf94:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400bf98:	d0a01017 	ldw	r2,-32704(gp)
 400bf9c:	10000326 	beq	r2,zero,400bfac <alt_get_errno+0x24>
 400bfa0:	d0a01017 	ldw	r2,-32704(gp)
 400bfa4:	103ee83a 	callr	r2
 400bfa8:	00000106 	br	400bfb0 <alt_get_errno+0x28>
 400bfac:	d0a6ee04 	addi	r2,gp,-25672
}
 400bfb0:	e037883a 	mov	sp,fp
 400bfb4:	dfc00117 	ldw	ra,4(sp)
 400bfb8:	df000017 	ldw	fp,0(sp)
 400bfbc:	dec00204 	addi	sp,sp,8
 400bfc0:	f800283a 	ret

0400bfc4 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400bfc4:	defffa04 	addi	sp,sp,-24
 400bfc8:	dfc00515 	stw	ra,20(sp)
 400bfcc:	df000415 	stw	fp,16(sp)
 400bfd0:	df000404 	addi	fp,sp,16
 400bfd4:	e13ffe15 	stw	r4,-8(fp)
 400bfd8:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400bfdc:	e0bffe17 	ldw	r2,-8(fp)
 400bfe0:	10000326 	beq	r2,zero,400bff0 <alt_dev_llist_insert+0x2c>
 400bfe4:	e0bffe17 	ldw	r2,-8(fp)
 400bfe8:	10800217 	ldw	r2,8(r2)
 400bfec:	1000061e 	bne	r2,zero,400c008 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 400bff0:	400bf880 	call	400bf88 <alt_get_errno>
 400bff4:	1007883a 	mov	r3,r2
 400bff8:	00800584 	movi	r2,22
 400bffc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400c000:	00bffa84 	movi	r2,-22
 400c004:	00001306 	br	400c054 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400c008:	e0bffe17 	ldw	r2,-8(fp)
 400c00c:	e0ffff17 	ldw	r3,-4(fp)
 400c010:	e0fffc15 	stw	r3,-16(fp)
 400c014:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400c018:	e0bffd17 	ldw	r2,-12(fp)
 400c01c:	e0fffc17 	ldw	r3,-16(fp)
 400c020:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400c024:	e0bffc17 	ldw	r2,-16(fp)
 400c028:	10c00017 	ldw	r3,0(r2)
 400c02c:	e0bffd17 	ldw	r2,-12(fp)
 400c030:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400c034:	e0bffc17 	ldw	r2,-16(fp)
 400c038:	10800017 	ldw	r2,0(r2)
 400c03c:	e0fffd17 	ldw	r3,-12(fp)
 400c040:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400c044:	e0bffc17 	ldw	r2,-16(fp)
 400c048:	e0fffd17 	ldw	r3,-12(fp)
 400c04c:	10c00015 	stw	r3,0(r2)

  return 0;  
 400c050:	0005883a 	mov	r2,zero
}
 400c054:	e037883a 	mov	sp,fp
 400c058:	dfc00117 	ldw	ra,4(sp)
 400c05c:	df000017 	ldw	fp,0(sp)
 400c060:	dec00204 	addi	sp,sp,8
 400c064:	f800283a 	ret

0400c068 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400c068:	defffd04 	addi	sp,sp,-12
 400c06c:	dfc00215 	stw	ra,8(sp)
 400c070:	df000115 	stw	fp,4(sp)
 400c074:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400c078:	00810074 	movhi	r2,1025
 400c07c:	10b3fa04 	addi	r2,r2,-12312
 400c080:	e0bfff15 	stw	r2,-4(fp)
 400c084:	00000606 	br	400c0a0 <_do_ctors+0x38>
        (*ctor) (); 
 400c088:	e0bfff17 	ldw	r2,-4(fp)
 400c08c:	10800017 	ldw	r2,0(r2)
 400c090:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400c094:	e0bfff17 	ldw	r2,-4(fp)
 400c098:	10bfff04 	addi	r2,r2,-4
 400c09c:	e0bfff15 	stw	r2,-4(fp)
 400c0a0:	e0ffff17 	ldw	r3,-4(fp)
 400c0a4:	00810074 	movhi	r2,1025
 400c0a8:	10b3fb04 	addi	r2,r2,-12308
 400c0ac:	18bff62e 	bgeu	r3,r2,400c088 <__alt_data_end+0xfc00c088>
        (*ctor) (); 
}
 400c0b0:	0001883a 	nop
 400c0b4:	e037883a 	mov	sp,fp
 400c0b8:	dfc00117 	ldw	ra,4(sp)
 400c0bc:	df000017 	ldw	fp,0(sp)
 400c0c0:	dec00204 	addi	sp,sp,8
 400c0c4:	f800283a 	ret

0400c0c8 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400c0c8:	defffd04 	addi	sp,sp,-12
 400c0cc:	dfc00215 	stw	ra,8(sp)
 400c0d0:	df000115 	stw	fp,4(sp)
 400c0d4:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400c0d8:	00810074 	movhi	r2,1025
 400c0dc:	10b3fa04 	addi	r2,r2,-12312
 400c0e0:	e0bfff15 	stw	r2,-4(fp)
 400c0e4:	00000606 	br	400c100 <_do_dtors+0x38>
        (*dtor) (); 
 400c0e8:	e0bfff17 	ldw	r2,-4(fp)
 400c0ec:	10800017 	ldw	r2,0(r2)
 400c0f0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400c0f4:	e0bfff17 	ldw	r2,-4(fp)
 400c0f8:	10bfff04 	addi	r2,r2,-4
 400c0fc:	e0bfff15 	stw	r2,-4(fp)
 400c100:	e0ffff17 	ldw	r3,-4(fp)
 400c104:	00810074 	movhi	r2,1025
 400c108:	10b3fb04 	addi	r2,r2,-12308
 400c10c:	18bff62e 	bgeu	r3,r2,400c0e8 <__alt_data_end+0xfc00c0e8>
        (*dtor) (); 
}
 400c110:	0001883a 	nop
 400c114:	e037883a 	mov	sp,fp
 400c118:	dfc00117 	ldw	ra,4(sp)
 400c11c:	df000017 	ldw	fp,0(sp)
 400c120:	dec00204 	addi	sp,sp,8
 400c124:	f800283a 	ret

0400c128 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400c128:	deffff04 	addi	sp,sp,-4
 400c12c:	df000015 	stw	fp,0(sp)
 400c130:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 400c134:	0001883a 	nop
 400c138:	e037883a 	mov	sp,fp
 400c13c:	df000017 	ldw	fp,0(sp)
 400c140:	dec00104 	addi	sp,sp,4
 400c144:	f800283a 	ret

0400c148 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400c148:	defff904 	addi	sp,sp,-28
 400c14c:	dfc00615 	stw	ra,24(sp)
 400c150:	df000515 	stw	fp,20(sp)
 400c154:	df000504 	addi	fp,sp,20
 400c158:	e13ffc15 	stw	r4,-16(fp)
 400c15c:	e17ffd15 	stw	r5,-12(fp)
 400c160:	e1bffe15 	stw	r6,-8(fp)
 400c164:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400c168:	e0800217 	ldw	r2,8(fp)
 400c16c:	d8800015 	stw	r2,0(sp)
 400c170:	e1ffff17 	ldw	r7,-4(fp)
 400c174:	e1bffe17 	ldw	r6,-8(fp)
 400c178:	e17ffd17 	ldw	r5,-12(fp)
 400c17c:	e13ffc17 	ldw	r4,-16(fp)
 400c180:	400c2f80 	call	400c2f8 <alt_iic_isr_register>
}  
 400c184:	e037883a 	mov	sp,fp
 400c188:	dfc00117 	ldw	ra,4(sp)
 400c18c:	df000017 	ldw	fp,0(sp)
 400c190:	dec00204 	addi	sp,sp,8
 400c194:	f800283a 	ret

0400c198 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400c198:	defff904 	addi	sp,sp,-28
 400c19c:	df000615 	stw	fp,24(sp)
 400c1a0:	df000604 	addi	fp,sp,24
 400c1a4:	e13ffe15 	stw	r4,-8(fp)
 400c1a8:	e17fff15 	stw	r5,-4(fp)
 400c1ac:	e0bfff17 	ldw	r2,-4(fp)
 400c1b0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c1b4:	0005303a 	rdctl	r2,status
 400c1b8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c1bc:	e0fffb17 	ldw	r3,-20(fp)
 400c1c0:	00bfff84 	movi	r2,-2
 400c1c4:	1884703a 	and	r2,r3,r2
 400c1c8:	1001703a 	wrctl	status,r2
  
  return context;
 400c1cc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400c1d0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 400c1d4:	00c00044 	movi	r3,1
 400c1d8:	e0bffa17 	ldw	r2,-24(fp)
 400c1dc:	1884983a 	sll	r2,r3,r2
 400c1e0:	1007883a 	mov	r3,r2
 400c1e4:	d0a6f817 	ldw	r2,-25632(gp)
 400c1e8:	1884b03a 	or	r2,r3,r2
 400c1ec:	d0a6f815 	stw	r2,-25632(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400c1f0:	d0a6f817 	ldw	r2,-25632(gp)
 400c1f4:	100170fa 	wrctl	ienable,r2
 400c1f8:	e0bffc17 	ldw	r2,-16(fp)
 400c1fc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c200:	e0bffd17 	ldw	r2,-12(fp)
 400c204:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400c208:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 400c20c:	0001883a 	nop
}
 400c210:	e037883a 	mov	sp,fp
 400c214:	df000017 	ldw	fp,0(sp)
 400c218:	dec00104 	addi	sp,sp,4
 400c21c:	f800283a 	ret

0400c220 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400c220:	defff904 	addi	sp,sp,-28
 400c224:	df000615 	stw	fp,24(sp)
 400c228:	df000604 	addi	fp,sp,24
 400c22c:	e13ffe15 	stw	r4,-8(fp)
 400c230:	e17fff15 	stw	r5,-4(fp)
 400c234:	e0bfff17 	ldw	r2,-4(fp)
 400c238:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c23c:	0005303a 	rdctl	r2,status
 400c240:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c244:	e0fffb17 	ldw	r3,-20(fp)
 400c248:	00bfff84 	movi	r2,-2
 400c24c:	1884703a 	and	r2,r3,r2
 400c250:	1001703a 	wrctl	status,r2
  
  return context;
 400c254:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400c258:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 400c25c:	00c00044 	movi	r3,1
 400c260:	e0bffa17 	ldw	r2,-24(fp)
 400c264:	1884983a 	sll	r2,r3,r2
 400c268:	0084303a 	nor	r2,zero,r2
 400c26c:	1007883a 	mov	r3,r2
 400c270:	d0a6f817 	ldw	r2,-25632(gp)
 400c274:	1884703a 	and	r2,r3,r2
 400c278:	d0a6f815 	stw	r2,-25632(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400c27c:	d0a6f817 	ldw	r2,-25632(gp)
 400c280:	100170fa 	wrctl	ienable,r2
 400c284:	e0bffc17 	ldw	r2,-16(fp)
 400c288:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c28c:	e0bffd17 	ldw	r2,-12(fp)
 400c290:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400c294:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 400c298:	0001883a 	nop
}
 400c29c:	e037883a 	mov	sp,fp
 400c2a0:	df000017 	ldw	fp,0(sp)
 400c2a4:	dec00104 	addi	sp,sp,4
 400c2a8:	f800283a 	ret

0400c2ac <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400c2ac:	defffc04 	addi	sp,sp,-16
 400c2b0:	df000315 	stw	fp,12(sp)
 400c2b4:	df000304 	addi	fp,sp,12
 400c2b8:	e13ffe15 	stw	r4,-8(fp)
 400c2bc:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400c2c0:	000530fa 	rdctl	r2,ienable
 400c2c4:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400c2c8:	00c00044 	movi	r3,1
 400c2cc:	e0bfff17 	ldw	r2,-4(fp)
 400c2d0:	1884983a 	sll	r2,r3,r2
 400c2d4:	1007883a 	mov	r3,r2
 400c2d8:	e0bffd17 	ldw	r2,-12(fp)
 400c2dc:	1884703a 	and	r2,r3,r2
 400c2e0:	1004c03a 	cmpne	r2,r2,zero
 400c2e4:	10803fcc 	andi	r2,r2,255
}
 400c2e8:	e037883a 	mov	sp,fp
 400c2ec:	df000017 	ldw	fp,0(sp)
 400c2f0:	dec00104 	addi	sp,sp,4
 400c2f4:	f800283a 	ret

0400c2f8 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400c2f8:	defff504 	addi	sp,sp,-44
 400c2fc:	dfc00a15 	stw	ra,40(sp)
 400c300:	df000915 	stw	fp,36(sp)
 400c304:	df000904 	addi	fp,sp,36
 400c308:	e13ffc15 	stw	r4,-16(fp)
 400c30c:	e17ffd15 	stw	r5,-12(fp)
 400c310:	e1bffe15 	stw	r6,-8(fp)
 400c314:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 400c318:	00bffa84 	movi	r2,-22
 400c31c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400c320:	e0bffd17 	ldw	r2,-12(fp)
 400c324:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400c328:	e0bff817 	ldw	r2,-32(fp)
 400c32c:	10800808 	cmpgei	r2,r2,32
 400c330:	1000271e 	bne	r2,zero,400c3d0 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c334:	0005303a 	rdctl	r2,status
 400c338:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c33c:	e0fffb17 	ldw	r3,-20(fp)
 400c340:	00bfff84 	movi	r2,-2
 400c344:	1884703a 	and	r2,r3,r2
 400c348:	1001703a 	wrctl	status,r2
  
  return context;
 400c34c:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400c350:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 400c354:	008101b4 	movhi	r2,1030
 400c358:	10af5904 	addi	r2,r2,-17052
 400c35c:	e0fff817 	ldw	r3,-32(fp)
 400c360:	180690fa 	slli	r3,r3,3
 400c364:	10c5883a 	add	r2,r2,r3
 400c368:	e0fffe17 	ldw	r3,-8(fp)
 400c36c:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 400c370:	008101b4 	movhi	r2,1030
 400c374:	10af5904 	addi	r2,r2,-17052
 400c378:	e0fff817 	ldw	r3,-32(fp)
 400c37c:	180690fa 	slli	r3,r3,3
 400c380:	10c5883a 	add	r2,r2,r3
 400c384:	10800104 	addi	r2,r2,4
 400c388:	e0ffff17 	ldw	r3,-4(fp)
 400c38c:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400c390:	e0bffe17 	ldw	r2,-8(fp)
 400c394:	10000526 	beq	r2,zero,400c3ac <alt_iic_isr_register+0xb4>
 400c398:	e0bff817 	ldw	r2,-32(fp)
 400c39c:	100b883a 	mov	r5,r2
 400c3a0:	e13ffc17 	ldw	r4,-16(fp)
 400c3a4:	400c1980 	call	400c198 <alt_ic_irq_enable>
 400c3a8:	00000406 	br	400c3bc <alt_iic_isr_register+0xc4>
 400c3ac:	e0bff817 	ldw	r2,-32(fp)
 400c3b0:	100b883a 	mov	r5,r2
 400c3b4:	e13ffc17 	ldw	r4,-16(fp)
 400c3b8:	400c2200 	call	400c220 <alt_ic_irq_disable>
 400c3bc:	e0bff715 	stw	r2,-36(fp)
 400c3c0:	e0bffa17 	ldw	r2,-24(fp)
 400c3c4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c3c8:	e0bff917 	ldw	r2,-28(fp)
 400c3cc:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400c3d0:	e0bff717 	ldw	r2,-36(fp)
}
 400c3d4:	e037883a 	mov	sp,fp
 400c3d8:	dfc00117 	ldw	ra,4(sp)
 400c3dc:	df000017 	ldw	fp,0(sp)
 400c3e0:	dec00204 	addi	sp,sp,8
 400c3e4:	f800283a 	ret

0400c3e8 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400c3e8:	defff804 	addi	sp,sp,-32
 400c3ec:	dfc00715 	stw	ra,28(sp)
 400c3f0:	df000615 	stw	fp,24(sp)
 400c3f4:	dc000515 	stw	r16,20(sp)
 400c3f8:	df000604 	addi	fp,sp,24
 400c3fc:	e13ffb15 	stw	r4,-20(fp)
 400c400:	e17ffc15 	stw	r5,-16(fp)
 400c404:	e1bffd15 	stw	r6,-12(fp)
 400c408:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 400c40c:	e1bffe17 	ldw	r6,-8(fp)
 400c410:	e17ffd17 	ldw	r5,-12(fp)
 400c414:	e13ffc17 	ldw	r4,-16(fp)
 400c418:	400c6700 	call	400c670 <open>
 400c41c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 400c420:	e0bffa17 	ldw	r2,-24(fp)
 400c424:	10002216 	blt	r2,zero,400c4b0 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 400c428:	04010074 	movhi	r16,1025
 400c42c:	8437c404 	addi	r16,r16,-8432
 400c430:	e0bffa17 	ldw	r2,-24(fp)
 400c434:	01400304 	movi	r5,12
 400c438:	1009883a 	mov	r4,r2
 400c43c:	400359c0 	call	400359c <__mulsi3>
 400c440:	8085883a 	add	r2,r16,r2
 400c444:	10c00017 	ldw	r3,0(r2)
 400c448:	e0bffb17 	ldw	r2,-20(fp)
 400c44c:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 400c450:	04010074 	movhi	r16,1025
 400c454:	8437c404 	addi	r16,r16,-8432
 400c458:	e0bffa17 	ldw	r2,-24(fp)
 400c45c:	01400304 	movi	r5,12
 400c460:	1009883a 	mov	r4,r2
 400c464:	400359c0 	call	400359c <__mulsi3>
 400c468:	8085883a 	add	r2,r16,r2
 400c46c:	10800104 	addi	r2,r2,4
 400c470:	10c00017 	ldw	r3,0(r2)
 400c474:	e0bffb17 	ldw	r2,-20(fp)
 400c478:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400c47c:	04010074 	movhi	r16,1025
 400c480:	8437c404 	addi	r16,r16,-8432
 400c484:	e0bffa17 	ldw	r2,-24(fp)
 400c488:	01400304 	movi	r5,12
 400c48c:	1009883a 	mov	r4,r2
 400c490:	400359c0 	call	400359c <__mulsi3>
 400c494:	8085883a 	add	r2,r16,r2
 400c498:	10800204 	addi	r2,r2,8
 400c49c:	10c00017 	ldw	r3,0(r2)
 400c4a0:	e0bffb17 	ldw	r2,-20(fp)
 400c4a4:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400c4a8:	e13ffa17 	ldw	r4,-24(fp)
 400c4ac:	400ac980 	call	400ac98 <alt_release_fd>
  }
} 
 400c4b0:	0001883a 	nop
 400c4b4:	e6ffff04 	addi	sp,fp,-4
 400c4b8:	dfc00217 	ldw	ra,8(sp)
 400c4bc:	df000117 	ldw	fp,4(sp)
 400c4c0:	dc000017 	ldw	r16,0(sp)
 400c4c4:	dec00304 	addi	sp,sp,12
 400c4c8:	f800283a 	ret

0400c4cc <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400c4cc:	defffb04 	addi	sp,sp,-20
 400c4d0:	dfc00415 	stw	ra,16(sp)
 400c4d4:	df000315 	stw	fp,12(sp)
 400c4d8:	df000304 	addi	fp,sp,12
 400c4dc:	e13ffd15 	stw	r4,-12(fp)
 400c4e0:	e17ffe15 	stw	r5,-8(fp)
 400c4e4:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400c4e8:	01c07fc4 	movi	r7,511
 400c4ec:	01800044 	movi	r6,1
 400c4f0:	e17ffd17 	ldw	r5,-12(fp)
 400c4f4:	01010074 	movhi	r4,1025
 400c4f8:	2137c704 	addi	r4,r4,-8420
 400c4fc:	400c3e80 	call	400c3e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400c500:	01c07fc4 	movi	r7,511
 400c504:	000d883a 	mov	r6,zero
 400c508:	e17ffe17 	ldw	r5,-8(fp)
 400c50c:	01010074 	movhi	r4,1025
 400c510:	2137c404 	addi	r4,r4,-8432
 400c514:	400c3e80 	call	400c3e8 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400c518:	01c07fc4 	movi	r7,511
 400c51c:	01800044 	movi	r6,1
 400c520:	e17fff17 	ldw	r5,-4(fp)
 400c524:	01010074 	movhi	r4,1025
 400c528:	2137ca04 	addi	r4,r4,-8408
 400c52c:	400c3e80 	call	400c3e8 <alt_open_fd>
}  
 400c530:	0001883a 	nop
 400c534:	e037883a 	mov	sp,fp
 400c538:	dfc00117 	ldw	ra,4(sp)
 400c53c:	df000017 	ldw	fp,0(sp)
 400c540:	dec00204 	addi	sp,sp,8
 400c544:	f800283a 	ret

0400c548 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400c548:	defffe04 	addi	sp,sp,-8
 400c54c:	dfc00115 	stw	ra,4(sp)
 400c550:	df000015 	stw	fp,0(sp)
 400c554:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400c558:	d0a01017 	ldw	r2,-32704(gp)
 400c55c:	10000326 	beq	r2,zero,400c56c <alt_get_errno+0x24>
 400c560:	d0a01017 	ldw	r2,-32704(gp)
 400c564:	103ee83a 	callr	r2
 400c568:	00000106 	br	400c570 <alt_get_errno+0x28>
 400c56c:	d0a6ee04 	addi	r2,gp,-25672
}
 400c570:	e037883a 	mov	sp,fp
 400c574:	dfc00117 	ldw	ra,4(sp)
 400c578:	df000017 	ldw	fp,0(sp)
 400c57c:	dec00204 	addi	sp,sp,8
 400c580:	f800283a 	ret

0400c584 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400c584:	defffb04 	addi	sp,sp,-20
 400c588:	dfc00415 	stw	ra,16(sp)
 400c58c:	df000315 	stw	fp,12(sp)
 400c590:	dc000215 	stw	r16,8(sp)
 400c594:	df000304 	addi	fp,sp,12
 400c598:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400c59c:	e0bffe17 	ldw	r2,-8(fp)
 400c5a0:	10800217 	ldw	r2,8(r2)
 400c5a4:	10d00034 	orhi	r3,r2,16384
 400c5a8:	e0bffe17 	ldw	r2,-8(fp)
 400c5ac:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400c5b0:	e03ffd15 	stw	zero,-12(fp)
 400c5b4:	00002306 	br	400c644 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400c5b8:	04010074 	movhi	r16,1025
 400c5bc:	8437c404 	addi	r16,r16,-8432
 400c5c0:	e0bffd17 	ldw	r2,-12(fp)
 400c5c4:	01400304 	movi	r5,12
 400c5c8:	1009883a 	mov	r4,r2
 400c5cc:	400359c0 	call	400359c <__mulsi3>
 400c5d0:	8085883a 	add	r2,r16,r2
 400c5d4:	10c00017 	ldw	r3,0(r2)
 400c5d8:	e0bffe17 	ldw	r2,-8(fp)
 400c5dc:	10800017 	ldw	r2,0(r2)
 400c5e0:	1880151e 	bne	r3,r2,400c638 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400c5e4:	04010074 	movhi	r16,1025
 400c5e8:	8437c404 	addi	r16,r16,-8432
 400c5ec:	e0bffd17 	ldw	r2,-12(fp)
 400c5f0:	01400304 	movi	r5,12
 400c5f4:	1009883a 	mov	r4,r2
 400c5f8:	400359c0 	call	400359c <__mulsi3>
 400c5fc:	8085883a 	add	r2,r16,r2
 400c600:	10800204 	addi	r2,r2,8
 400c604:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400c608:	10000b0e 	bge	r2,zero,400c638 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 400c60c:	01400304 	movi	r5,12
 400c610:	e13ffd17 	ldw	r4,-12(fp)
 400c614:	400359c0 	call	400359c <__mulsi3>
 400c618:	1007883a 	mov	r3,r2
 400c61c:	00810074 	movhi	r2,1025
 400c620:	10b7c404 	addi	r2,r2,-8432
 400c624:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400c628:	e0bffe17 	ldw	r2,-8(fp)
 400c62c:	18800226 	beq	r3,r2,400c638 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400c630:	00bffcc4 	movi	r2,-13
 400c634:	00000806 	br	400c658 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400c638:	e0bffd17 	ldw	r2,-12(fp)
 400c63c:	10800044 	addi	r2,r2,1
 400c640:	e0bffd15 	stw	r2,-12(fp)
 400c644:	d0a00f17 	ldw	r2,-32708(gp)
 400c648:	1007883a 	mov	r3,r2
 400c64c:	e0bffd17 	ldw	r2,-12(fp)
 400c650:	18bfd92e 	bgeu	r3,r2,400c5b8 <__alt_data_end+0xfc00c5b8>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400c654:	0005883a 	mov	r2,zero
}
 400c658:	e6ffff04 	addi	sp,fp,-4
 400c65c:	dfc00217 	ldw	ra,8(sp)
 400c660:	df000117 	ldw	fp,4(sp)
 400c664:	dc000017 	ldw	r16,0(sp)
 400c668:	dec00304 	addi	sp,sp,12
 400c66c:	f800283a 	ret

0400c670 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400c670:	defff604 	addi	sp,sp,-40
 400c674:	dfc00915 	stw	ra,36(sp)
 400c678:	df000815 	stw	fp,32(sp)
 400c67c:	df000804 	addi	fp,sp,32
 400c680:	e13ffd15 	stw	r4,-12(fp)
 400c684:	e17ffe15 	stw	r5,-8(fp)
 400c688:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400c68c:	00bfffc4 	movi	r2,-1
 400c690:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 400c694:	00bffb44 	movi	r2,-19
 400c698:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 400c69c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400c6a0:	d1600d04 	addi	r5,gp,-32716
 400c6a4:	e13ffd17 	ldw	r4,-12(fp)
 400c6a8:	400c9940 	call	400c994 <alt_find_dev>
 400c6ac:	e0bff815 	stw	r2,-32(fp)
 400c6b0:	e0bff817 	ldw	r2,-32(fp)
 400c6b4:	1000051e 	bne	r2,zero,400c6cc <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400c6b8:	e13ffd17 	ldw	r4,-12(fp)
 400c6bc:	400ca240 	call	400ca24 <alt_find_file>
 400c6c0:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 400c6c4:	00800044 	movi	r2,1
 400c6c8:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400c6cc:	e0bff817 	ldw	r2,-32(fp)
 400c6d0:	10002b26 	beq	r2,zero,400c780 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400c6d4:	e13ff817 	ldw	r4,-32(fp)
 400c6d8:	400cb2c0 	call	400cb2c <alt_get_fd>
 400c6dc:	e0bff915 	stw	r2,-28(fp)
 400c6e0:	e0bff917 	ldw	r2,-28(fp)
 400c6e4:	1000030e 	bge	r2,zero,400c6f4 <open+0x84>
    {
      status = index;
 400c6e8:	e0bff917 	ldw	r2,-28(fp)
 400c6ec:	e0bffa15 	stw	r2,-24(fp)
 400c6f0:	00002506 	br	400c788 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 400c6f4:	01400304 	movi	r5,12
 400c6f8:	e13ff917 	ldw	r4,-28(fp)
 400c6fc:	400359c0 	call	400359c <__mulsi3>
 400c700:	1007883a 	mov	r3,r2
 400c704:	00810074 	movhi	r2,1025
 400c708:	10b7c404 	addi	r2,r2,-8432
 400c70c:	1885883a 	add	r2,r3,r2
 400c710:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400c714:	e0fffe17 	ldw	r3,-8(fp)
 400c718:	00900034 	movhi	r2,16384
 400c71c:	10bfffc4 	addi	r2,r2,-1
 400c720:	1886703a 	and	r3,r3,r2
 400c724:	e0bffc17 	ldw	r2,-16(fp)
 400c728:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400c72c:	e0bffb17 	ldw	r2,-20(fp)
 400c730:	1000051e 	bne	r2,zero,400c748 <open+0xd8>
 400c734:	e13ffc17 	ldw	r4,-16(fp)
 400c738:	400c5840 	call	400c584 <alt_file_locked>
 400c73c:	e0bffa15 	stw	r2,-24(fp)
 400c740:	e0bffa17 	ldw	r2,-24(fp)
 400c744:	10001016 	blt	r2,zero,400c788 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400c748:	e0bff817 	ldw	r2,-32(fp)
 400c74c:	10800317 	ldw	r2,12(r2)
 400c750:	10000826 	beq	r2,zero,400c774 <open+0x104>
 400c754:	e0bff817 	ldw	r2,-32(fp)
 400c758:	10800317 	ldw	r2,12(r2)
 400c75c:	e1ffff17 	ldw	r7,-4(fp)
 400c760:	e1bffe17 	ldw	r6,-8(fp)
 400c764:	e17ffd17 	ldw	r5,-12(fp)
 400c768:	e13ffc17 	ldw	r4,-16(fp)
 400c76c:	103ee83a 	callr	r2
 400c770:	00000106 	br	400c778 <open+0x108>
 400c774:	0005883a 	mov	r2,zero
 400c778:	e0bffa15 	stw	r2,-24(fp)
 400c77c:	00000206 	br	400c788 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400c780:	00bffb44 	movi	r2,-19
 400c784:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400c788:	e0bffa17 	ldw	r2,-24(fp)
 400c78c:	1000090e 	bge	r2,zero,400c7b4 <open+0x144>
  {
    alt_release_fd (index);  
 400c790:	e13ff917 	ldw	r4,-28(fp)
 400c794:	400ac980 	call	400ac98 <alt_release_fd>
    ALT_ERRNO = -status;
 400c798:	400c5480 	call	400c548 <alt_get_errno>
 400c79c:	1007883a 	mov	r3,r2
 400c7a0:	e0bffa17 	ldw	r2,-24(fp)
 400c7a4:	0085c83a 	sub	r2,zero,r2
 400c7a8:	18800015 	stw	r2,0(r3)
    return -1;
 400c7ac:	00bfffc4 	movi	r2,-1
 400c7b0:	00000106 	br	400c7b8 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 400c7b4:	e0bff917 	ldw	r2,-28(fp)
}
 400c7b8:	e037883a 	mov	sp,fp
 400c7bc:	dfc00117 	ldw	ra,4(sp)
 400c7c0:	df000017 	ldw	fp,0(sp)
 400c7c4:	dec00204 	addi	sp,sp,8
 400c7c8:	f800283a 	ret

0400c7cc <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400c7cc:	defffa04 	addi	sp,sp,-24
 400c7d0:	df000515 	stw	fp,20(sp)
 400c7d4:	df000504 	addi	fp,sp,20
 400c7d8:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c7dc:	0005303a 	rdctl	r2,status
 400c7e0:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c7e4:	e0fffc17 	ldw	r3,-16(fp)
 400c7e8:	00bfff84 	movi	r2,-2
 400c7ec:	1884703a 	and	r2,r3,r2
 400c7f0:	1001703a 	wrctl	status,r2
  
  return context;
 400c7f4:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400c7f8:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 400c7fc:	e0bfff17 	ldw	r2,-4(fp)
 400c800:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400c804:	e0bffd17 	ldw	r2,-12(fp)
 400c808:	10800017 	ldw	r2,0(r2)
 400c80c:	e0fffd17 	ldw	r3,-12(fp)
 400c810:	18c00117 	ldw	r3,4(r3)
 400c814:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400c818:	e0bffd17 	ldw	r2,-12(fp)
 400c81c:	10800117 	ldw	r2,4(r2)
 400c820:	e0fffd17 	ldw	r3,-12(fp)
 400c824:	18c00017 	ldw	r3,0(r3)
 400c828:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400c82c:	e0bffd17 	ldw	r2,-12(fp)
 400c830:	e0fffd17 	ldw	r3,-12(fp)
 400c834:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400c838:	e0bffd17 	ldw	r2,-12(fp)
 400c83c:	e0fffd17 	ldw	r3,-12(fp)
 400c840:	10c00015 	stw	r3,0(r2)
 400c844:	e0bffb17 	ldw	r2,-20(fp)
 400c848:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c84c:	e0bffe17 	ldw	r2,-8(fp)
 400c850:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400c854:	0001883a 	nop
 400c858:	e037883a 	mov	sp,fp
 400c85c:	df000017 	ldw	fp,0(sp)
 400c860:	dec00104 	addi	sp,sp,4
 400c864:	f800283a 	ret

0400c868 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400c868:	defffb04 	addi	sp,sp,-20
 400c86c:	dfc00415 	stw	ra,16(sp)
 400c870:	df000315 	stw	fp,12(sp)
 400c874:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400c878:	d0a01317 	ldw	r2,-32692(gp)
 400c87c:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400c880:	d0a6fa17 	ldw	r2,-25624(gp)
 400c884:	10800044 	addi	r2,r2,1
 400c888:	d0a6fa15 	stw	r2,-25624(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400c88c:	00002e06 	br	400c948 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400c890:	e0bffd17 	ldw	r2,-12(fp)
 400c894:	10800017 	ldw	r2,0(r2)
 400c898:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400c89c:	e0bffd17 	ldw	r2,-12(fp)
 400c8a0:	10800403 	ldbu	r2,16(r2)
 400c8a4:	10803fcc 	andi	r2,r2,255
 400c8a8:	10000426 	beq	r2,zero,400c8bc <alt_tick+0x54>
 400c8ac:	d0a6fa17 	ldw	r2,-25624(gp)
 400c8b0:	1000021e 	bne	r2,zero,400c8bc <alt_tick+0x54>
    {
      alarm->rollover = 0;
 400c8b4:	e0bffd17 	ldw	r2,-12(fp)
 400c8b8:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400c8bc:	e0bffd17 	ldw	r2,-12(fp)
 400c8c0:	10800217 	ldw	r2,8(r2)
 400c8c4:	d0e6fa17 	ldw	r3,-25624(gp)
 400c8c8:	18801d36 	bltu	r3,r2,400c940 <alt_tick+0xd8>
 400c8cc:	e0bffd17 	ldw	r2,-12(fp)
 400c8d0:	10800403 	ldbu	r2,16(r2)
 400c8d4:	10803fcc 	andi	r2,r2,255
 400c8d8:	1000191e 	bne	r2,zero,400c940 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 400c8dc:	e0bffd17 	ldw	r2,-12(fp)
 400c8e0:	10800317 	ldw	r2,12(r2)
 400c8e4:	e0fffd17 	ldw	r3,-12(fp)
 400c8e8:	18c00517 	ldw	r3,20(r3)
 400c8ec:	1809883a 	mov	r4,r3
 400c8f0:	103ee83a 	callr	r2
 400c8f4:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400c8f8:	e0bfff17 	ldw	r2,-4(fp)
 400c8fc:	1000031e 	bne	r2,zero,400c90c <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 400c900:	e13ffd17 	ldw	r4,-12(fp)
 400c904:	400c7cc0 	call	400c7cc <alt_alarm_stop>
 400c908:	00000d06 	br	400c940 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 400c90c:	e0bffd17 	ldw	r2,-12(fp)
 400c910:	10c00217 	ldw	r3,8(r2)
 400c914:	e0bfff17 	ldw	r2,-4(fp)
 400c918:	1887883a 	add	r3,r3,r2
 400c91c:	e0bffd17 	ldw	r2,-12(fp)
 400c920:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400c924:	e0bffd17 	ldw	r2,-12(fp)
 400c928:	10c00217 	ldw	r3,8(r2)
 400c92c:	d0a6fa17 	ldw	r2,-25624(gp)
 400c930:	1880032e 	bgeu	r3,r2,400c940 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 400c934:	e0bffd17 	ldw	r2,-12(fp)
 400c938:	00c00044 	movi	r3,1
 400c93c:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 400c940:	e0bffe17 	ldw	r2,-8(fp)
 400c944:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400c948:	e0fffd17 	ldw	r3,-12(fp)
 400c94c:	d0a01304 	addi	r2,gp,-32692
 400c950:	18bfcf1e 	bne	r3,r2,400c890 <__alt_data_end+0xfc00c890>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400c954:	0001883a 	nop
}
 400c958:	0001883a 	nop
 400c95c:	e037883a 	mov	sp,fp
 400c960:	dfc00117 	ldw	ra,4(sp)
 400c964:	df000017 	ldw	fp,0(sp)
 400c968:	dec00204 	addi	sp,sp,8
 400c96c:	f800283a 	ret

0400c970 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 400c970:	deffff04 	addi	sp,sp,-4
 400c974:	df000015 	stw	fp,0(sp)
 400c978:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 400c97c:	000170fa 	wrctl	ienable,zero
}
 400c980:	0001883a 	nop
 400c984:	e037883a 	mov	sp,fp
 400c988:	df000017 	ldw	fp,0(sp)
 400c98c:	dec00104 	addi	sp,sp,4
 400c990:	f800283a 	ret

0400c994 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400c994:	defffa04 	addi	sp,sp,-24
 400c998:	dfc00515 	stw	ra,20(sp)
 400c99c:	df000415 	stw	fp,16(sp)
 400c9a0:	df000404 	addi	fp,sp,16
 400c9a4:	e13ffe15 	stw	r4,-8(fp)
 400c9a8:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400c9ac:	e0bfff17 	ldw	r2,-4(fp)
 400c9b0:	10800017 	ldw	r2,0(r2)
 400c9b4:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400c9b8:	e13ffe17 	ldw	r4,-8(fp)
 400c9bc:	40090f40 	call	40090f4 <strlen>
 400c9c0:	10800044 	addi	r2,r2,1
 400c9c4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400c9c8:	00000d06 	br	400ca00 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400c9cc:	e0bffc17 	ldw	r2,-16(fp)
 400c9d0:	10800217 	ldw	r2,8(r2)
 400c9d4:	e0fffd17 	ldw	r3,-12(fp)
 400c9d8:	180d883a 	mov	r6,r3
 400c9dc:	e17ffe17 	ldw	r5,-8(fp)
 400c9e0:	1009883a 	mov	r4,r2
 400c9e4:	400ccd80 	call	400ccd8 <memcmp>
 400c9e8:	1000021e 	bne	r2,zero,400c9f4 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400c9ec:	e0bffc17 	ldw	r2,-16(fp)
 400c9f0:	00000706 	br	400ca10 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400c9f4:	e0bffc17 	ldw	r2,-16(fp)
 400c9f8:	10800017 	ldw	r2,0(r2)
 400c9fc:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400ca00:	e0fffc17 	ldw	r3,-16(fp)
 400ca04:	e0bfff17 	ldw	r2,-4(fp)
 400ca08:	18bff01e 	bne	r3,r2,400c9cc <__alt_data_end+0xfc00c9cc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400ca0c:	0005883a 	mov	r2,zero
}
 400ca10:	e037883a 	mov	sp,fp
 400ca14:	dfc00117 	ldw	ra,4(sp)
 400ca18:	df000017 	ldw	fp,0(sp)
 400ca1c:	dec00204 	addi	sp,sp,8
 400ca20:	f800283a 	ret

0400ca24 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400ca24:	defffb04 	addi	sp,sp,-20
 400ca28:	dfc00415 	stw	ra,16(sp)
 400ca2c:	df000315 	stw	fp,12(sp)
 400ca30:	df000304 	addi	fp,sp,12
 400ca34:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400ca38:	d0a00b17 	ldw	r2,-32724(gp)
 400ca3c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400ca40:	00003106 	br	400cb08 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 400ca44:	e0bffd17 	ldw	r2,-12(fp)
 400ca48:	10800217 	ldw	r2,8(r2)
 400ca4c:	1009883a 	mov	r4,r2
 400ca50:	40090f40 	call	40090f4 <strlen>
 400ca54:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 400ca58:	e0bffd17 	ldw	r2,-12(fp)
 400ca5c:	10c00217 	ldw	r3,8(r2)
 400ca60:	e0bffe17 	ldw	r2,-8(fp)
 400ca64:	10bfffc4 	addi	r2,r2,-1
 400ca68:	1885883a 	add	r2,r3,r2
 400ca6c:	10800003 	ldbu	r2,0(r2)
 400ca70:	10803fcc 	andi	r2,r2,255
 400ca74:	1080201c 	xori	r2,r2,128
 400ca78:	10bfe004 	addi	r2,r2,-128
 400ca7c:	10800bd8 	cmpnei	r2,r2,47
 400ca80:	1000031e 	bne	r2,zero,400ca90 <alt_find_file+0x6c>
    {
      len -= 1;
 400ca84:	e0bffe17 	ldw	r2,-8(fp)
 400ca88:	10bfffc4 	addi	r2,r2,-1
 400ca8c:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400ca90:	e0bffe17 	ldw	r2,-8(fp)
 400ca94:	e0ffff17 	ldw	r3,-4(fp)
 400ca98:	1885883a 	add	r2,r3,r2
 400ca9c:	10800003 	ldbu	r2,0(r2)
 400caa0:	10803fcc 	andi	r2,r2,255
 400caa4:	1080201c 	xori	r2,r2,128
 400caa8:	10bfe004 	addi	r2,r2,-128
 400caac:	10800be0 	cmpeqi	r2,r2,47
 400cab0:	1000081e 	bne	r2,zero,400cad4 <alt_find_file+0xb0>
 400cab4:	e0bffe17 	ldw	r2,-8(fp)
 400cab8:	e0ffff17 	ldw	r3,-4(fp)
 400cabc:	1885883a 	add	r2,r3,r2
 400cac0:	10800003 	ldbu	r2,0(r2)
 400cac4:	10803fcc 	andi	r2,r2,255
 400cac8:	1080201c 	xori	r2,r2,128
 400cacc:	10bfe004 	addi	r2,r2,-128
 400cad0:	10000a1e 	bne	r2,zero,400cafc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 400cad4:	e0bffd17 	ldw	r2,-12(fp)
 400cad8:	10800217 	ldw	r2,8(r2)
 400cadc:	e0fffe17 	ldw	r3,-8(fp)
 400cae0:	180d883a 	mov	r6,r3
 400cae4:	e17fff17 	ldw	r5,-4(fp)
 400cae8:	1009883a 	mov	r4,r2
 400caec:	400ccd80 	call	400ccd8 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400caf0:	1000021e 	bne	r2,zero,400cafc <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400caf4:	e0bffd17 	ldw	r2,-12(fp)
 400caf8:	00000706 	br	400cb18 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 400cafc:	e0bffd17 	ldw	r2,-12(fp)
 400cb00:	10800017 	ldw	r2,0(r2)
 400cb04:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400cb08:	e0fffd17 	ldw	r3,-12(fp)
 400cb0c:	d0a00b04 	addi	r2,gp,-32724
 400cb10:	18bfcc1e 	bne	r3,r2,400ca44 <__alt_data_end+0xfc00ca44>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400cb14:	0005883a 	mov	r2,zero
}
 400cb18:	e037883a 	mov	sp,fp
 400cb1c:	dfc00117 	ldw	ra,4(sp)
 400cb20:	df000017 	ldw	fp,0(sp)
 400cb24:	dec00204 	addi	sp,sp,8
 400cb28:	f800283a 	ret

0400cb2c <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400cb2c:	defffa04 	addi	sp,sp,-24
 400cb30:	dfc00515 	stw	ra,20(sp)
 400cb34:	df000415 	stw	fp,16(sp)
 400cb38:	dc000315 	stw	r16,12(sp)
 400cb3c:	df000404 	addi	fp,sp,16
 400cb40:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 400cb44:	00bffa04 	movi	r2,-24
 400cb48:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400cb4c:	e03ffc15 	stw	zero,-16(fp)
 400cb50:	00001d06 	br	400cbc8 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 400cb54:	04010074 	movhi	r16,1025
 400cb58:	8437c404 	addi	r16,r16,-8432
 400cb5c:	e0bffc17 	ldw	r2,-16(fp)
 400cb60:	01400304 	movi	r5,12
 400cb64:	1009883a 	mov	r4,r2
 400cb68:	400359c0 	call	400359c <__mulsi3>
 400cb6c:	8085883a 	add	r2,r16,r2
 400cb70:	10800017 	ldw	r2,0(r2)
 400cb74:	1000111e 	bne	r2,zero,400cbbc <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 400cb78:	04010074 	movhi	r16,1025
 400cb7c:	8437c404 	addi	r16,r16,-8432
 400cb80:	e0bffc17 	ldw	r2,-16(fp)
 400cb84:	01400304 	movi	r5,12
 400cb88:	1009883a 	mov	r4,r2
 400cb8c:	400359c0 	call	400359c <__mulsi3>
 400cb90:	8085883a 	add	r2,r16,r2
 400cb94:	e0fffe17 	ldw	r3,-8(fp)
 400cb98:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 400cb9c:	d0e00f17 	ldw	r3,-32708(gp)
 400cba0:	e0bffc17 	ldw	r2,-16(fp)
 400cba4:	1880020e 	bge	r3,r2,400cbb0 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 400cba8:	e0bffc17 	ldw	r2,-16(fp)
 400cbac:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
 400cbb0:	e0bffc17 	ldw	r2,-16(fp)
 400cbb4:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 400cbb8:	00000606 	br	400cbd4 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400cbbc:	e0bffc17 	ldw	r2,-16(fp)
 400cbc0:	10800044 	addi	r2,r2,1
 400cbc4:	e0bffc15 	stw	r2,-16(fp)
 400cbc8:	e0bffc17 	ldw	r2,-16(fp)
 400cbcc:	10800810 	cmplti	r2,r2,32
 400cbd0:	103fe01e 	bne	r2,zero,400cb54 <__alt_data_end+0xfc00cb54>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400cbd4:	e0bffd17 	ldw	r2,-12(fp)
}
 400cbd8:	e6ffff04 	addi	sp,fp,-4
 400cbdc:	dfc00217 	ldw	ra,8(sp)
 400cbe0:	df000117 	ldw	fp,4(sp)
 400cbe4:	dc000017 	ldw	r16,0(sp)
 400cbe8:	dec00304 	addi	sp,sp,12
 400cbec:	f800283a 	ret

0400cbf0 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 400cbf0:	defffe04 	addi	sp,sp,-8
 400cbf4:	df000115 	stw	fp,4(sp)
 400cbf8:	df000104 	addi	fp,sp,4
 400cbfc:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 400cc00:	e0bfff17 	ldw	r2,-4(fp)
 400cc04:	10bffe84 	addi	r2,r2,-6
 400cc08:	10c00428 	cmpgeui	r3,r2,16
 400cc0c:	18001a1e 	bne	r3,zero,400cc78 <alt_exception_cause_generated_bad_addr+0x88>
 400cc10:	100690ba 	slli	r3,r2,2
 400cc14:	00810074 	movhi	r2,1025
 400cc18:	10b30a04 	addi	r2,r2,-13272
 400cc1c:	1885883a 	add	r2,r3,r2
 400cc20:	10800017 	ldw	r2,0(r2)
 400cc24:	1000683a 	jmp	r2
 400cc28:	0400cc68 	cmpgeui	r16,zero,817
 400cc2c:	0400cc68 	cmpgeui	r16,zero,817
 400cc30:	0400cc78 	rdprs	r16,zero,817
 400cc34:	0400cc78 	rdprs	r16,zero,817
 400cc38:	0400cc78 	rdprs	r16,zero,817
 400cc3c:	0400cc68 	cmpgeui	r16,zero,817
 400cc40:	0400cc70 	cmpltui	r16,zero,817
 400cc44:	0400cc78 	rdprs	r16,zero,817
 400cc48:	0400cc68 	cmpgeui	r16,zero,817
 400cc4c:	0400cc68 	cmpgeui	r16,zero,817
 400cc50:	0400cc78 	rdprs	r16,zero,817
 400cc54:	0400cc68 	cmpgeui	r16,zero,817
 400cc58:	0400cc70 	cmpltui	r16,zero,817
 400cc5c:	0400cc78 	rdprs	r16,zero,817
 400cc60:	0400cc78 	rdprs	r16,zero,817
 400cc64:	0400cc68 	cmpgeui	r16,zero,817
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 400cc68:	00800044 	movi	r2,1
 400cc6c:	00000306 	br	400cc7c <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 400cc70:	0005883a 	mov	r2,zero
 400cc74:	00000106 	br	400cc7c <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 400cc78:	0005883a 	mov	r2,zero
  }
}
 400cc7c:	e037883a 	mov	sp,fp
 400cc80:	df000017 	ldw	fp,0(sp)
 400cc84:	dec00104 	addi	sp,sp,4
 400cc88:	f800283a 	ret

0400cc8c <atexit>:
 400cc8c:	200b883a 	mov	r5,r4
 400cc90:	000f883a 	mov	r7,zero
 400cc94:	000d883a 	mov	r6,zero
 400cc98:	0009883a 	mov	r4,zero
 400cc9c:	400cd541 	jmpi	400cd54 <__register_exitproc>

0400cca0 <exit>:
 400cca0:	defffe04 	addi	sp,sp,-8
 400cca4:	000b883a 	mov	r5,zero
 400cca8:	dc000015 	stw	r16,0(sp)
 400ccac:	dfc00115 	stw	ra,4(sp)
 400ccb0:	2021883a 	mov	r16,r4
 400ccb4:	400ce6c0 	call	400ce6c <__call_exitprocs>
 400ccb8:	00810074 	movhi	r2,1025
 400ccbc:	10bc5804 	addi	r2,r2,-3744
 400ccc0:	11000017 	ldw	r4,0(r2)
 400ccc4:	20800f17 	ldw	r2,60(r4)
 400ccc8:	10000126 	beq	r2,zero,400ccd0 <exit+0x30>
 400cccc:	103ee83a 	callr	r2
 400ccd0:	8009883a 	mov	r4,r16
 400ccd4:	400a4f40 	call	400a4f4 <_exit>

0400ccd8 <memcmp>:
 400ccd8:	01c000c4 	movi	r7,3
 400ccdc:	3980192e 	bgeu	r7,r6,400cd44 <memcmp+0x6c>
 400cce0:	2144b03a 	or	r2,r4,r5
 400cce4:	11c4703a 	and	r2,r2,r7
 400cce8:	10000f26 	beq	r2,zero,400cd28 <memcmp+0x50>
 400ccec:	20800003 	ldbu	r2,0(r4)
 400ccf0:	28c00003 	ldbu	r3,0(r5)
 400ccf4:	10c0151e 	bne	r2,r3,400cd4c <memcmp+0x74>
 400ccf8:	31bfff84 	addi	r6,r6,-2
 400ccfc:	01ffffc4 	movi	r7,-1
 400cd00:	00000406 	br	400cd14 <memcmp+0x3c>
 400cd04:	20800003 	ldbu	r2,0(r4)
 400cd08:	28c00003 	ldbu	r3,0(r5)
 400cd0c:	31bfffc4 	addi	r6,r6,-1
 400cd10:	10c00e1e 	bne	r2,r3,400cd4c <memcmp+0x74>
 400cd14:	21000044 	addi	r4,r4,1
 400cd18:	29400044 	addi	r5,r5,1
 400cd1c:	31fff91e 	bne	r6,r7,400cd04 <__alt_data_end+0xfc00cd04>
 400cd20:	0005883a 	mov	r2,zero
 400cd24:	f800283a 	ret
 400cd28:	20c00017 	ldw	r3,0(r4)
 400cd2c:	28800017 	ldw	r2,0(r5)
 400cd30:	18bfee1e 	bne	r3,r2,400ccec <__alt_data_end+0xfc00ccec>
 400cd34:	31bfff04 	addi	r6,r6,-4
 400cd38:	21000104 	addi	r4,r4,4
 400cd3c:	29400104 	addi	r5,r5,4
 400cd40:	39bff936 	bltu	r7,r6,400cd28 <__alt_data_end+0xfc00cd28>
 400cd44:	303fe91e 	bne	r6,zero,400ccec <__alt_data_end+0xfc00ccec>
 400cd48:	003ff506 	br	400cd20 <__alt_data_end+0xfc00cd20>
 400cd4c:	10c5c83a 	sub	r2,r2,r3
 400cd50:	f800283a 	ret

0400cd54 <__register_exitproc>:
 400cd54:	defffa04 	addi	sp,sp,-24
 400cd58:	dc000315 	stw	r16,12(sp)
 400cd5c:	04010074 	movhi	r16,1025
 400cd60:	843c5804 	addi	r16,r16,-3744
 400cd64:	80c00017 	ldw	r3,0(r16)
 400cd68:	dc400415 	stw	r17,16(sp)
 400cd6c:	dfc00515 	stw	ra,20(sp)
 400cd70:	18805217 	ldw	r2,328(r3)
 400cd74:	2023883a 	mov	r17,r4
 400cd78:	10003726 	beq	r2,zero,400ce58 <__register_exitproc+0x104>
 400cd7c:	10c00117 	ldw	r3,4(r2)
 400cd80:	010007c4 	movi	r4,31
 400cd84:	20c00e16 	blt	r4,r3,400cdc0 <__register_exitproc+0x6c>
 400cd88:	1a000044 	addi	r8,r3,1
 400cd8c:	8800221e 	bne	r17,zero,400ce18 <__register_exitproc+0xc4>
 400cd90:	18c00084 	addi	r3,r3,2
 400cd94:	18c7883a 	add	r3,r3,r3
 400cd98:	18c7883a 	add	r3,r3,r3
 400cd9c:	12000115 	stw	r8,4(r2)
 400cda0:	10c7883a 	add	r3,r2,r3
 400cda4:	19400015 	stw	r5,0(r3)
 400cda8:	0005883a 	mov	r2,zero
 400cdac:	dfc00517 	ldw	ra,20(sp)
 400cdb0:	dc400417 	ldw	r17,16(sp)
 400cdb4:	dc000317 	ldw	r16,12(sp)
 400cdb8:	dec00604 	addi	sp,sp,24
 400cdbc:	f800283a 	ret
 400cdc0:	00800034 	movhi	r2,0
 400cdc4:	10800004 	addi	r2,r2,0
 400cdc8:	10002626 	beq	r2,zero,400ce64 <__register_exitproc+0x110>
 400cdcc:	01006404 	movi	r4,400
 400cdd0:	d9400015 	stw	r5,0(sp)
 400cdd4:	d9800115 	stw	r6,4(sp)
 400cdd8:	d9c00215 	stw	r7,8(sp)
 400cddc:	00000000 	call	0 <__reset-0x4000000>
 400cde0:	d9400017 	ldw	r5,0(sp)
 400cde4:	d9800117 	ldw	r6,4(sp)
 400cde8:	d9c00217 	ldw	r7,8(sp)
 400cdec:	10001d26 	beq	r2,zero,400ce64 <__register_exitproc+0x110>
 400cdf0:	81000017 	ldw	r4,0(r16)
 400cdf4:	10000115 	stw	zero,4(r2)
 400cdf8:	02000044 	movi	r8,1
 400cdfc:	22405217 	ldw	r9,328(r4)
 400ce00:	0007883a 	mov	r3,zero
 400ce04:	12400015 	stw	r9,0(r2)
 400ce08:	20805215 	stw	r2,328(r4)
 400ce0c:	10006215 	stw	zero,392(r2)
 400ce10:	10006315 	stw	zero,396(r2)
 400ce14:	883fde26 	beq	r17,zero,400cd90 <__alt_data_end+0xfc00cd90>
 400ce18:	18c9883a 	add	r4,r3,r3
 400ce1c:	2109883a 	add	r4,r4,r4
 400ce20:	1109883a 	add	r4,r2,r4
 400ce24:	21802215 	stw	r6,136(r4)
 400ce28:	01800044 	movi	r6,1
 400ce2c:	12406217 	ldw	r9,392(r2)
 400ce30:	30cc983a 	sll	r6,r6,r3
 400ce34:	4992b03a 	or	r9,r9,r6
 400ce38:	12406215 	stw	r9,392(r2)
 400ce3c:	21c04215 	stw	r7,264(r4)
 400ce40:	01000084 	movi	r4,2
 400ce44:	893fd21e 	bne	r17,r4,400cd90 <__alt_data_end+0xfc00cd90>
 400ce48:	11006317 	ldw	r4,396(r2)
 400ce4c:	218cb03a 	or	r6,r4,r6
 400ce50:	11806315 	stw	r6,396(r2)
 400ce54:	003fce06 	br	400cd90 <__alt_data_end+0xfc00cd90>
 400ce58:	18805304 	addi	r2,r3,332
 400ce5c:	18805215 	stw	r2,328(r3)
 400ce60:	003fc606 	br	400cd7c <__alt_data_end+0xfc00cd7c>
 400ce64:	00bfffc4 	movi	r2,-1
 400ce68:	003fd006 	br	400cdac <__alt_data_end+0xfc00cdac>

0400ce6c <__call_exitprocs>:
 400ce6c:	defff504 	addi	sp,sp,-44
 400ce70:	df000915 	stw	fp,36(sp)
 400ce74:	dd400615 	stw	r21,24(sp)
 400ce78:	dc800315 	stw	r18,12(sp)
 400ce7c:	dfc00a15 	stw	ra,40(sp)
 400ce80:	ddc00815 	stw	r23,32(sp)
 400ce84:	dd800715 	stw	r22,28(sp)
 400ce88:	dd000515 	stw	r20,20(sp)
 400ce8c:	dcc00415 	stw	r19,16(sp)
 400ce90:	dc400215 	stw	r17,8(sp)
 400ce94:	dc000115 	stw	r16,4(sp)
 400ce98:	d9000015 	stw	r4,0(sp)
 400ce9c:	2839883a 	mov	fp,r5
 400cea0:	04800044 	movi	r18,1
 400cea4:	057fffc4 	movi	r21,-1
 400cea8:	00810074 	movhi	r2,1025
 400ceac:	10bc5804 	addi	r2,r2,-3744
 400ceb0:	12000017 	ldw	r8,0(r2)
 400ceb4:	45005217 	ldw	r20,328(r8)
 400ceb8:	44c05204 	addi	r19,r8,328
 400cebc:	a0001c26 	beq	r20,zero,400cf30 <__call_exitprocs+0xc4>
 400cec0:	a0800117 	ldw	r2,4(r20)
 400cec4:	15ffffc4 	addi	r23,r2,-1
 400cec8:	b8000d16 	blt	r23,zero,400cf00 <__call_exitprocs+0x94>
 400cecc:	14000044 	addi	r16,r2,1
 400ced0:	8421883a 	add	r16,r16,r16
 400ced4:	8421883a 	add	r16,r16,r16
 400ced8:	84402004 	addi	r17,r16,128
 400cedc:	a463883a 	add	r17,r20,r17
 400cee0:	a421883a 	add	r16,r20,r16
 400cee4:	e0001e26 	beq	fp,zero,400cf60 <__call_exitprocs+0xf4>
 400cee8:	80804017 	ldw	r2,256(r16)
 400ceec:	e0801c26 	beq	fp,r2,400cf60 <__call_exitprocs+0xf4>
 400cef0:	bdffffc4 	addi	r23,r23,-1
 400cef4:	843fff04 	addi	r16,r16,-4
 400cef8:	8c7fff04 	addi	r17,r17,-4
 400cefc:	bd7ff91e 	bne	r23,r21,400cee4 <__alt_data_end+0xfc00cee4>
 400cf00:	00800034 	movhi	r2,0
 400cf04:	10800004 	addi	r2,r2,0
 400cf08:	10000926 	beq	r2,zero,400cf30 <__call_exitprocs+0xc4>
 400cf0c:	a0800117 	ldw	r2,4(r20)
 400cf10:	1000301e 	bne	r2,zero,400cfd4 <__call_exitprocs+0x168>
 400cf14:	a0800017 	ldw	r2,0(r20)
 400cf18:	10003226 	beq	r2,zero,400cfe4 <__call_exitprocs+0x178>
 400cf1c:	a009883a 	mov	r4,r20
 400cf20:	98800015 	stw	r2,0(r19)
 400cf24:	00000000 	call	0 <__reset-0x4000000>
 400cf28:	9d000017 	ldw	r20,0(r19)
 400cf2c:	a03fe41e 	bne	r20,zero,400cec0 <__alt_data_end+0xfc00cec0>
 400cf30:	dfc00a17 	ldw	ra,40(sp)
 400cf34:	df000917 	ldw	fp,36(sp)
 400cf38:	ddc00817 	ldw	r23,32(sp)
 400cf3c:	dd800717 	ldw	r22,28(sp)
 400cf40:	dd400617 	ldw	r21,24(sp)
 400cf44:	dd000517 	ldw	r20,20(sp)
 400cf48:	dcc00417 	ldw	r19,16(sp)
 400cf4c:	dc800317 	ldw	r18,12(sp)
 400cf50:	dc400217 	ldw	r17,8(sp)
 400cf54:	dc000117 	ldw	r16,4(sp)
 400cf58:	dec00b04 	addi	sp,sp,44
 400cf5c:	f800283a 	ret
 400cf60:	a0800117 	ldw	r2,4(r20)
 400cf64:	80c00017 	ldw	r3,0(r16)
 400cf68:	10bfffc4 	addi	r2,r2,-1
 400cf6c:	15c01426 	beq	r2,r23,400cfc0 <__call_exitprocs+0x154>
 400cf70:	80000015 	stw	zero,0(r16)
 400cf74:	183fde26 	beq	r3,zero,400cef0 <__alt_data_end+0xfc00cef0>
 400cf78:	95c8983a 	sll	r4,r18,r23
 400cf7c:	a0806217 	ldw	r2,392(r20)
 400cf80:	a5800117 	ldw	r22,4(r20)
 400cf84:	2084703a 	and	r2,r4,r2
 400cf88:	10000b26 	beq	r2,zero,400cfb8 <__call_exitprocs+0x14c>
 400cf8c:	a0806317 	ldw	r2,396(r20)
 400cf90:	2088703a 	and	r4,r4,r2
 400cf94:	20000c1e 	bne	r4,zero,400cfc8 <__call_exitprocs+0x15c>
 400cf98:	89400017 	ldw	r5,0(r17)
 400cf9c:	d9000017 	ldw	r4,0(sp)
 400cfa0:	183ee83a 	callr	r3
 400cfa4:	a0800117 	ldw	r2,4(r20)
 400cfa8:	15bfbf1e 	bne	r2,r22,400cea8 <__alt_data_end+0xfc00cea8>
 400cfac:	98800017 	ldw	r2,0(r19)
 400cfb0:	153fcf26 	beq	r2,r20,400cef0 <__alt_data_end+0xfc00cef0>
 400cfb4:	003fbc06 	br	400cea8 <__alt_data_end+0xfc00cea8>
 400cfb8:	183ee83a 	callr	r3
 400cfbc:	003ff906 	br	400cfa4 <__alt_data_end+0xfc00cfa4>
 400cfc0:	a5c00115 	stw	r23,4(r20)
 400cfc4:	003feb06 	br	400cf74 <__alt_data_end+0xfc00cf74>
 400cfc8:	89000017 	ldw	r4,0(r17)
 400cfcc:	183ee83a 	callr	r3
 400cfd0:	003ff406 	br	400cfa4 <__alt_data_end+0xfc00cfa4>
 400cfd4:	a0800017 	ldw	r2,0(r20)
 400cfd8:	a027883a 	mov	r19,r20
 400cfdc:	1029883a 	mov	r20,r2
 400cfe0:	003fb606 	br	400cebc <__alt_data_end+0xfc00cebc>
 400cfe4:	0005883a 	mov	r2,zero
 400cfe8:	003ffb06 	br	400cfd8 <__alt_data_end+0xfc00cfd8>
