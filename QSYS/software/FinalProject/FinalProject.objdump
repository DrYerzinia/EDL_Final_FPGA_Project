
FinalProject.elf:     file format elf32-littlenios2
FinalProject.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x02000000 paddr 0x02000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00014ec4 memsz 0x00015140 flags rwx

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  02000000  02000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00012aa8  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000354  04012cd8  04012cd8  00013cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001eb8  0401302c  0401302c  0001402c  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000027c  04014ee4  04014ee4  00015ee4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_flash_data 00000000  02000020  02000020  00015ee4  2**0
                  CONTENTS
  7 .sdram        00000000  04015160  04015160  00015ee4  2**0
                  CONTENTS
  8 .comment      00000023  00000000  00000000  00015ee4  2**0
                  CONTENTS, READONLY
  9 .debug_aranges 00000cf8  00000000  00000000  00015f08  2**3
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_info   00019fd8  00000000  00000000  00016c00  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000075e3  00000000  00000000  00030bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00009c67  00000000  00000000  000381bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_frame  00002190  00000000  00000000  00041e24  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_str    000045e1  00000000  00000000  00043fb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    00018088  00000000  00000000  00048595  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_alt_sim_info 00000040  00000000  00000000  00060620  2**2
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_ranges 00001960  00000000  00000000  00060660  2**3
                  CONTENTS, READONLY, DEBUGGING
 18 .thread_model 00000003  00000000  00000000  000657fd  2**0
                  CONTENTS, READONLY
 19 .cpu          00000003  00000000  00000000  00065800  2**0
                  CONTENTS, READONLY
 20 .qsys         00000001  00000000  00000000  00065803  2**0
                  CONTENTS, READONLY
 21 .simulation_enabled 00000001  00000000  00000000  00065804  2**0
                  CONTENTS, READONLY
 22 .stderr_dev   00000009  00000000  00000000  00065805  2**0
                  CONTENTS, READONLY
 23 .stdin_dev    00000009  00000000  00000000  0006580e  2**0
                  CONTENTS, READONLY
 24 .stdout_dev   00000009  00000000  00000000  00065817  2**0
                  CONTENTS, READONLY
 25 .sopc_system_name 00000009  00000000  00000000  00065820  2**0
                  CONTENTS, READONLY
 26 .quartus_project_dir 00000039  00000000  00000000  00065829  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     0009ec1a  00000000  00000000  00065862  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
02000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
04012cd8 l    d  .rodata	00000000 .rodata
0401302c l    d  .rwdata	00000000 .rwdata
04014ee4 l    d  .bss	00000000 .bss
02000020 l    d  .onchip_flash_data	00000000 .onchip_flash_data
04015160 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FinalProject_bsp//obj/HAL/src/crt0.o
04000264 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 hello_world.c
04000268 l     F .text	00000050 jtag_kiss_send
040002b8 l     F .text	0000006c camera_dma_enable
04000324 l     F .text	000000a4 swap_buffer
040003c8 l     F .text	00000114 take_raw_picture_and_send_to_jtag
040004dc l     F .text	0000004c jpeg_jtag_send
04000528 l     F .text	00000028 read_uptime
04000550 l     F .text	00000028 read_line_detect
04000578 l     F .text	00000028 read_encoder_left
040005a0 l     F .text	00000028 read_encoder_right
040005c8 l     F .text	000000dc set_motors
04000954 l     F .text	000000e8 motor_init
04000a3c l     F .text	00000048 wait_button_press
04000a84 l     F .text	0000056c motor_control_loop
04000ff0 l     F .text	000000c0 encoder_test
040010b0 l     F .text	000000e4 follow_line
04001194 l     F .text	000000ac motor_ramp_test
04001240 l     F .text	00000038 image_download_test
04014e97 l     O .rwdata	00000001 jpeg_transfer.3476
00000000 l    df *ABS*	00000000 kiss.c
00000000 l    df *ABS*	00000000 pid.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
04012e26 l     O .rodata	00000010 zeroes.4389
04012e36 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
040089e0 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 impure.c
040130e0 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
04013524 l     O .rwdata	00000020 lc_ctype_charset
04013504 l     O .rwdata	00000020 lc_message_charset
04013544 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mprec.c
04012e68 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
04012f8c l     O .rodata	00000010 zeroes.4333
04012f9c l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04014eb0 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400f124 l     F .text	00000034 alt_dev_reg
04013984 l     O .rwdata	00001060 jtag_uart
040149e4 l     O .rwdata	000000c4 ble_uart
04014aa8 l     O .rwdata	000000c4 lidar_uart
04014b6c l     O .rwdata	00000100 onchip_flash
04014c6c l     O .rwdata	0000005c video_dma_controller
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400f6d8 l     F .text	0000020c altera_avalon_jtag_uart_irq
0400f8e4 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
040100d8 l     F .text	0000009c altera_avalon_uart_irq
04010174 l     F .text	000000e4 altera_avalon_uart_rxirq
04010258 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
040103f4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0401060c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_onchip_flash.c
040107f4 l     F .text	00000034 alt_flash_device_register
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
040119b8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush.c
00000000 l    df *ABS*	00000000 alt_dev.c
04011af4 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04011b20 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_flash_dev.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401201c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0401217c l     F .text	0000003c alt_get_errno
040121b8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04014f4c g     O .bss	00000004 alt_instruction_exception_handler
02000000 g       *ABS*	00000000 __alt_mem_onchip_flash_data
0400bb9c g     F .text	00000074 _mprec_log10
04001a04 g     F .text	00000064 arm_peak_detector
0400bc88 g     F .text	0000008c __any_on
04012e74 g     O .rodata	00000028 __mprec_tinytens
0400ef80 g     F .text	0000007c alt_main
04015060 g     O .bss	00000100 alt_irq
04014f02 g     O .bss	00000002 smallest_distance_angle
0400ed78 g     F .text	00000088 .hidden __eqdf2
04015160 g       *ABS*	00000000 __alt_heap_start
04014f50 g     O .bss	00000014 ble_buffer
0400a290 g     F .text	0000007c _setlocale_r
0400f020 g     F .text	00000024 __malloc_unlock
04002950 g     F .text	00000440 .hidden __divsf3
04013098 g     O .rwdata	0000000c spin_5_times_ctrl
0400d9d0 g     F .text	0000015c memmove
04006640 g     F .text	000000e4 snprintf
0400ac5c g     F .text	000000a8 _Balloc
04004bc8 g     F .text	000000dc .hidden __gtdf2
04012628 g     F .text	00000024 altera_nios2_gen2_irq_init
02000000 g     F .entry	0000000c __reset
04014f10 g     O .bss	00000002 packet_length
04014f30 g     O .bss	00000004 errno
0400c120 g     F .text	000013a0 ___svfiprintf_internal_r
04014f3c g     O .bss	00000004 alt_argv
04014e96 g     O .rwdata	00000001 running
0401ce70 g       *ABS*	00000000 _gp
04001470 g     F .text	00000298 ble_uart_handler
0400f0f4 g     F .text	00000030 usleep
04014e8c g     O .rwdata	00000004 left_yaw_changes
04003344 g     F .text	000004e4 .hidden __subsf3
040116a4 g     F .text	00000090 alt_onchip_flash_poll_for_status_write_passed
04014cf0 g     O .rwdata	00000180 alt_fd_list
040019b0 g     F .text	00000054 peak_detect_handler
040130b0 g     O .rwdata	0000000c forward_ctrl
0401264c g     F .text	00000090 alt_find_dev
04006420 g     F .text	00000148 memcpy
04005f80 g     F .text	000000dc .hidden __floatsidf
04012100 g     F .text	0000007c alt_io_redirect
04004ca4 g     F .text	000000f4 .hidden __ltdf2
04014e84 g     O .rwdata	00000004 forward_drive_changes
04012cd8 g       *ABS*	00000000 __DTOR_END__
04001a68 g     F .text	000000e0 peak_detect
04014e78 g     O .rwdata	00000001 maxPWM
040128a8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400bd14 g     F .text	00000074 __fpclassifyd
0400baf8 g     F .text	000000a4 __ratio
0400fadc g     F .text	0000021c altera_avalon_jtag_uart_read
04001708 g     F .text	00000210 lidar_uart_handler
040023a4 g     F .text	00000064 .hidden __udivsi3
04011614 g     F .text	00000090 alt_onchip_flash_poll_for_status_erase_passed
04014efc g     O .bss	00000004 lidar_state
04012ec4 g     O .rodata	000000c8 __mprec_tens
0400a30c g     F .text	0000000c __locale_charset
04002e4c g     F .text	000000c8 .hidden __lesf2
04014f2c g     O .bss	00000004 __malloc_top_pad
04014eb4 g     O .rwdata	00000008 altera_onchip_flash_list
04014f0d g     O .bss	00000001 follow_event
04014f8c g     O .bss	00000014 jtag_kiss
04014ea0 g     O .rwdata	00000004 __mb_cur_max
0400a33c g     F .text	0000000c _localeconv_r
0400b090 g     F .text	0000003c __i2b
0400bd88 g     F .text	00000054 _sbrk_r
04011acc g     F .text	00000028 alt_dcache_flush
04010990 g     F .text	00000168 alt_onchip_flash_erase_block
04014ecc g     O .rwdata	00000004 alt_max_fd
04014f06 g     O .bss	00000002 nearest_distance
04014e74 g     O .rwdata	00000004 image_buffer_b
04014f28 g     O .bss	00000004 __malloc_max_sbrked_mem
0400ee00 g     F .text	00000180 alt_irq_register
04014fa0 g     O .bss	00000064 jtag_kiss_rx_buffer
04006104 g     F .text	00000110 .hidden __extendsfdf2
0400394c g     F .text	000008ac .hidden __adddf3
0400b8a0 g     F .text	0000010c __b2d
0400e7b4 g     F .text	000005c4 .hidden __umoddi3
04014e98 g     O .rwdata	00000004 _global_impure_ptr
04014ef0 g     O .bss	00000004 backward_yaw_changes
0400dc54 g     F .text	00000564 _realloc_r
04015160 g       *ABS*	00000000 __bss_end
04011f2c g     F .text	000000f0 alt_iic_isr_register
04012520 g     F .text	00000108 alt_tick
0400e1b8 g     F .text	000005fc .hidden __udivdi3
04012e9c g     O .rodata	00000028 __mprec_bigtens
0400ae74 g     F .text	00000104 __s2b
040130d4 g     O .rwdata	0000000c right_ctrl
0400605c g     F .text	000000a8 .hidden __floatunsidf
0400b5e0 g     F .text	00000060 __mcmp
0401002c g     F .text	000000ac altera_avalon_uart_init
04011ee0 g     F .text	0000004c alt_ic_irq_enabled
04012484 g     F .text	0000009c alt_alarm_stop
04014f34 g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d4 alt_irq_handler
04014cc8 g     O .rwdata	00000028 alt_dev_null
04014e88 g     O .rwdata	00000004 backward_drive_changes
0400af78 g     F .text	00000068 __hi0bits
04005f00 g     F .text	00000080 .hidden __fixdfsi
04014f0b g     O .bss	00000001 stop_event
04014f0e g     O .bss	00000001 tdoa_event
04014e90 g     O .rwdata	00000004 right_yaw_changes
04014ec4 g     O .rwdata	00000008 alt_dev_list
04002d90 g     F .text	000000bc .hidden __gtsf2
04004ca4 g     F .text	000000f4 .hidden __ledf2
04000744 g     F .text	00000210 normalize_output
040006a4 g     F .text	000000a0 scale_output
0400b358 g     F .text	00000140 __pow5mult
04014f20 g     O .bss	00000004 __nlocale_changed
04002408 g     F .text	00000058 .hidden __umodsi3
04015160 g       *ABS*	00000000 end
04010648 g     F .text	000001ac altera_avalon_uart_write
0400f618 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
04012cd8 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0400ff7c g     F .text	00000060 altera_avalon_uart_write_fd
040063bc g     F .text	00000064 .hidden __clzsi2
04006568 g     F .text	000000d8 _snprintf_r
0400ffdc g     F .text	00000050 altera_avalon_uart_close_fd
0400fcf8 g     F .text	00000224 altera_avalon_jtag_uart_write
04014e7a g     O .rwdata	00000001 minimum_stable_pwm
0400ab78 g     F .text	000000e4 memchr
040108f4 g     F .text	0000009c alt_onchip_flash_get_info
0400d6c0 g     F .text	00000310 _free_r
0400a318 g     F .text	00000010 __locale_mb_cur_max
04012b24 g     F .text	00000180 __call_exitprocs
04014f1c g     O .bss	00000004 __mlocale_changed
04014ea4 g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	00000038 _start
04014f44 g     O .bss	00000004 _alt_tick_rate
0400b498 g     F .text	00000148 __lshift
04014f48 g     O .bss	00000004 _alt_nticks
0400f190 g     F .text	00000324 alt_sys_init
04003828 g     F .text	00000124 .hidden __floatsisf
0400bf50 g     F .text	000001d0 __ssprint_r
04012a0c g     F .text	00000118 __register_exitproc
0400b0cc g     F .text	0000028c __multiply
0400f984 g     F .text	00000068 altera_avalon_jtag_uart_close
04002460 g     F .text	00000028 .hidden __mulsi3
04014f64 g     O .bss	00000028 __malloc_current_mallinfo
0400b9ac g     F .text	0000014c __d2b
040130c8 g     O .rwdata	0000000c left_ctrl
04014e80 g     O .rwdata	00000004 spin_1_yaw_changes
0400f4b4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040127e4 g     F .text	000000c4 alt_get_fd
04011860 g     F .text	00000158 alt_busy_sleep
04014f12 g     O .bss	00000001 peak_detected
04012990 g     F .text	0000007c memcmp
0400f574 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04015160 g       *ABS*	00000000 __alt_stack_base
0400f5c4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04015004 g     O .bss	00000028 yaw_pid
040041f8 g     F .text	000009d0 .hidden __divdf3
04010828 g     F .text	000000cc alt_onchip_flash_read
0400bc10 g     F .text	00000078 __copybits
0401357c g     O .rwdata	00000408 __malloc_av_
0401502c g     O .bss	0000000c peak
04004d98 g     F .text	0000086c .hidden __muldf3
040126dc g     F .text	00000108 alt_find_file
04014ef4 g     O .bss	00000004 left_drive_changes
04011b5c g     F .text	000000a4 alt_dev_llist_insert
0400effc g     F .text	00000024 __malloc_lock
0400f044 g     F .text	000000b0 sbrk
04006724 g     F .text	000022bc ___svfprintf_internal_r
04014f0a g     O .bss	00000001 ble_buffer_position
0400d4c0 g     F .text	000000dc _calloc_r
04014ed4 g     O .rwdata	00000008 alt_flash_dev_list
04014ee4 g       *ABS*	00000000 __bss_start
04014f04 g     O .bss	00000001 new_nearest
0400db2c g     F .text	00000128 memset
04001b48 g     F .text	000001d4 main
04014ef8 g     O .bss	00000004 right_drive_changes
04014f40 g     O .bss	00000004 alt_envp
04014f24 g     O .bss	00000004 __malloc_max_total_mem
0400f514 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04002e4c g     F .text	000000c8 .hidden __ltsf2
08000000 g       *ABS*	00000000 __alt_heap_limit
04006214 g     F .text	000001a8 .hidden __truncdfsf2
04001d70 g     F .text	00000044 kiss_start
040130bc g     O .rwdata	0000000c backward_ctrl
04008c08 g     F .text	00001688 _dtoa_r
0400a36c g     F .text	0000080c _malloc_r
04014ed0 g     O .rwdata	00000004 alt_errno
04011584 g     F .text	00000090 alt_onchip_flash_poll_for_status_to_go_idle
040022ac g     F .text	00000084 .hidden __divsi3
0400d59c g     F .text	00000124 _malloc_trim_r
04012cd8 g       *ABS*	00000000 __CTOR_END__
040110a8 g     F .text	000004dc altera_onchip_flash_init
04002f14 g     F .text	00000430 .hidden __mulsf3
04014e7c g     O .rwdata	00000004 spin_5_yaw_changes
0400bddc g     F .text	000000dc strcmp
04014f00 g     O .bss	00000001 lidar_error
04012cd8 g       *ABS*	00000000 __DTOR_LIST__
04014f08 g     O .bss	00000002 nearest_direction
04001278 g     F .text	000001f8 lidar_test
0400ed78 g     F .text	00000088 .hidden __nedf2
0400f158 g     F .text	00000038 alt_irq_init
04012400 g     F .text	00000084 alt_release_fd
04012ce2 g     O .rodata	00000100 .hidden __clz_tab
04014f18 g     O .bss	00000004 _PathLocale
04012944 g     F .text	00000014 atexit
04002d90 g     F .text	000000bc .hidden __gesf2
040130a4 g     O .rwdata	0000000c spin_1_time_ctrl
0400a348 g     F .text	00000018 setlocale
04014f0c g     O .bss	00000001 line_event
04014e9c g     O .rwdata	00000004 _impure_ptr
04014f38 g     O .bss	00000004 alt_argc
0401302c g     O .rwdata	00000030 figure_8_drive_changes
04001f24 g     F .text	00000160 kiss_rx_byte
04011c60 g     F .text	00000060 _do_dtors
0400a334 g     F .text	00000008 __locale_cjk_lang
04014ee8 g     O .bss	00000004 spin_1_drive_changes
04000020 g       .exceptions	00000000 alt_irq_entry
0400b83c g     F .text	00000064 __ulp
04001ee0 g     F .text	00000044 kiss_end
04014ebc g     O .rwdata	00000008 alt_fs_list
04010af8 g     F .text	000002d8 alt_onchip_flash_write_block
0400a360 g     F .text	0000000c localeconv
04014e94 g     O .rwdata	00000002 smallest_distance
04011d7c g     F .text	00000050 alt_ic_isr_register
0401305c g     O .rwdata	00000030 figure_8_yaw_changes
04014ee4 g       *ABS*	00000000 _edata
0400ff1c g     F .text	00000060 altera_avalon_uart_read_fd
04010dd0 g     F .text	000002d8 alt_onchip_flash_write
04015160 g       *ABS*	00000000 _end
04011cc0 g     F .text	00000068 alt_flash_open_dev
0400f9ec g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04002084 g     F .text	00000228 pid_compute
04011e54 g     F .text	0000008c alt_ic_irq_disable
04014ea8 g     O .rwdata	00000004 __malloc_trim_threshold
0400a328 g     F .text	0000000c __locale_msgcharset
04012958 g     F .text	00000038 exit
0400b640 g     F .text	000001fc __mdiff
04011d28 g     F .text	00000054 alt_flash_close_dev
04002330 g     F .text	00000074 .hidden __modsi3
04014f0f g     O .bss	00000001 packet_ready
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
04001918 g     F .text	00000098 jtag_uart_handler
04014eec g     O .bss	00000004 forward_yaw_changes
040103a0 g     F .text	00000054 altera_avalon_uart_close
04014f13 g     O .bss	00000005 lidar_data_point
04012ca4 g     F .text	00000034 _exit
04011734 g     F .text	0000012c alt_alarm_start
0401308c g     O .rwdata	0000000c figure_8_ctrl
0400beb8 g     F .text	00000098 strlen
040122a4 g     F .text	0000015c open
04004bc8 g     F .text	000000dc .hidden __gedf2
04014ee4 g     O .bss	00000004 spin_5_drive_changes
04014e70 g     O .rwdata	00000004 image_buffer_a
04014e79 g     O .rwdata	00000001 minimum_zero
04014eac g     O .rwdata	00000004 alt_priority_mask
04011dcc g     F .text	00000088 alt_ic_irq_enable
04010430 g     F .text	000001dc altera_avalon_uart_read
04005604 g     F .text	000008fc .hidden __subdf3
0400afe0 g     F .text	000000b0 __lo0bits
04014edc g     O .rwdata	00000008 alt_alarm_list
04011c00 g     F .text	00000060 _do_ctors
040119f4 g     F .text	000000d8 close
04002488 g     F .text	000004c8 .hidden __addsf3
04001d1c g     F .text	00000054 kiss_send_packet
04001db4 g     F .text	0000012c kiss_send_data
04015038 g     O .bss	00000028 drive_pid
0400ad2c g     F .text	00000148 __multadd
0400ad04 g     F .text	00000028 _Bfree



Disassembly of section .entry:

02000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 2000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 2000004:	08408c14 	ori	at,at,560
    jmp r1
 2000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810074 	movhi	r2,1025
 4000140:	10941804 	addi	r2,r2,20576
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810074 	movhi	r2,1025
 4000158:	10941804 	addi	r2,r2,20576
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a03717 	ldw	r2,-32548(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a03717 	ldw	r2,-32548(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 400023c:	d6b39c14 	ori	gp,gp,52848
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000244:	1093b914 	ori	r2,r2,20196

    movhi r3, %hi(__bss_end)
 4000248:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 400024c:	18d45814 	ori	r3,r3,20832

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000260:	400ef800 	call	400ef80 <alt_main>

04000264 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000264:	003fff06 	br	4000264 <__alt_data_end+0xfc000264>

04000268 <jtag_kiss_send>:
#define JTAG_UART__MASK__RVALID		0x00008000

#define max( a, b ) ( ( a > b) ? a : b )
#define min( a, b ) ( ( a < b) ? a : b )

static void jtag_kiss_send(uint8_t byte){
 4000268:	defffe04 	addi	sp,sp,-8
 400026c:	df000115 	stw	fp,4(sp)
 4000270:	df000104 	addi	fp,sp,4
 4000274:	2005883a 	mov	r2,r4
 4000278:	e0bfff05 	stb	r2,-4(fp)

         // Wait for room in buffer
         while( ! ( (*JTAG_UART_CONTROL) & 0xffff0000 ) );
 400027c:	0001883a 	nop
 4000280:	00820034 	movhi	r2,2048
 4000284:	10842504 	addi	r2,r2,4244
 4000288:	10800017 	ldw	r2,0(r2)
 400028c:	10bfffec 	andhi	r2,r2,65535
 4000290:	103ffb26 	beq	r2,zero,4000280 <__alt_data_end+0xfc000280>

         // Send byte
         *JTAG_UART_DATA = byte;
 4000294:	00820034 	movhi	r2,2048
 4000298:	10842404 	addi	r2,r2,4240
 400029c:	e0ffff03 	ldbu	r3,-4(fp)
 40002a0:	10c00015 	stw	r3,0(r2)

}
 40002a4:	0001883a 	nop
 40002a8:	e037883a 	mov	sp,fp
 40002ac:	df000017 	ldw	fp,0(sp)
 40002b0:	dec00104 	addi	sp,sp,4
 40002b4:	f800283a 	ret

040002b8 <camera_dma_enable>:

static void camera_dma_enable(bool enable){
 40002b8:	defffd04 	addi	sp,sp,-12
 40002bc:	df000215 	stw	fp,8(sp)
 40002c0:	df000204 	addi	fp,sp,8
 40002c4:	2005883a 	mov	r2,r4
 40002c8:	e0bfff05 	stb	r2,-4(fp)

	volatile uint32_t * control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
 40002cc:	00820034 	movhi	r2,2048
 40002d0:	10842304 	addi	r2,r2,4236
 40002d4:	e0bffe15 	stw	r2,-8(fp)
	if(enable){
 40002d8:	e0bfff03 	ldbu	r2,-4(fp)
 40002dc:	10000626 	beq	r2,zero,40002f8 <camera_dma_enable+0x40>
		*control |= ~VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
 40002e0:	e0bffe17 	ldw	r2,-8(fp)
 40002e4:	10800017 	ldw	r2,0(r2)
 40002e8:	10c00114 	ori	r3,r2,4
 40002ec:	e0bffe17 	ldw	r2,-8(fp)
 40002f0:	10c00015 	stw	r3,0(r2)
	} else {
		*control &= VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
	}

}
 40002f4:	00000606 	br	4000310 <camera_dma_enable+0x58>

	volatile uint32_t * control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
	if(enable){
		*control |= ~VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
	} else {
		*control &= VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
 40002f8:	e0bffe17 	ldw	r2,-8(fp)
 40002fc:	10c00017 	ldw	r3,0(r2)
 4000300:	00bffec4 	movi	r2,-5
 4000304:	1886703a 	and	r3,r3,r2
 4000308:	e0bffe17 	ldw	r2,-8(fp)
 400030c:	10c00015 	stw	r3,0(r2)
	}

}
 4000310:	0001883a 	nop
 4000314:	e037883a 	mov	sp,fp
 4000318:	df000017 	ldw	fp,0(sp)
 400031c:	dec00104 	addi	sp,sp,4
 4000320:	f800283a 	ret

04000324 <swap_buffer>:

static volatile uint32_t * swap_buffer(){
 4000324:	defffb04 	addi	sp,sp,-20
 4000328:	df000415 	stw	fp,16(sp)
 400032c:	df000404 	addi	fp,sp,16

	volatile uint32_t * buffer_address = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + 	VIDEO_DMA_CONTROLLER__BUFFER_OFFSET);
 4000330:	00820034 	movhi	r2,2048
 4000334:	10842004 	addi	r2,r2,4224
 4000338:	e0bffd15 	stw	r2,-12(fp)
	volatile uint32_t * back_buffer_address = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + 	VIDEO_DMA_CONTROLLER__BACK_BUFFER_OFFSET);
 400033c:	00820034 	movhi	r2,2048
 4000340:	10842104 	addi	r2,r2,4228
 4000344:	e0bffe15 	stw	r2,-8(fp)

	volatile uint32_t * status_control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
 4000348:	00820034 	movhi	r2,2048
 400034c:	10842304 	addi	r2,r2,4236
 4000350:	e0bfff15 	stw	r2,-4(fp)

	// instead of disabling DMA trigger buffer swap
	{

		// Setup back buffer register for swap
		if(*buffer_address == (uint32_t) image_buffer_a){
 4000354:	e0bffd17 	ldw	r2,-12(fp)
 4000358:	10800017 	ldw	r2,0(r2)
 400035c:	00c18034 	movhi	r3,1536
 4000360:	10c0071e 	bne	r2,r3,4000380 <swap_buffer+0x5c>
			current_image_buffer = image_buffer_a;
 4000364:	00818034 	movhi	r2,1536
 4000368:	e0bffc15 	stw	r2,-16(fp)
			*back_buffer_address = (uint32_t) image_buffer_b;
 400036c:	0081c034 	movhi	r2,1792
 4000370:	1007883a 	mov	r3,r2
 4000374:	e0bffe17 	ldw	r2,-8(fp)
 4000378:	10c00015 	stw	r3,0(r2)
 400037c:	00000606 	br	4000398 <swap_buffer+0x74>
		} else {
			current_image_buffer = image_buffer_b;
 4000380:	0081c034 	movhi	r2,1792
 4000384:	e0bffc15 	stw	r2,-16(fp)
			*back_buffer_address = (uint32_t) image_buffer_a;
 4000388:	00818034 	movhi	r2,1536
 400038c:	1007883a 	mov	r3,r2
 4000390:	e0bffe17 	ldw	r2,-8(fp)
 4000394:	10c00015 	stw	r3,0(r2)
		}

		// Trigger buffer swap
		*buffer_address = 0;
 4000398:	e0bffd17 	ldw	r2,-12(fp)
 400039c:	10000015 	stw	zero,0(r2)

		// Wait for buffer swap
		while(*status_control & VIDEO_DMA_CONTROLLER__STATUS_CONTROL__MASK__SWAP);
 40003a0:	0001883a 	nop
 40003a4:	e0bfff17 	ldw	r2,-4(fp)
 40003a8:	10800017 	ldw	r2,0(r2)
 40003ac:	1080004c 	andi	r2,r2,1
 40003b0:	103ffc1e 	bne	r2,zero,40003a4 <__alt_data_end+0xfc0003a4>

	}

	return current_image_buffer;
 40003b4:	e0bffc17 	ldw	r2,-16(fp)

}
 40003b8:	e037883a 	mov	sp,fp
 40003bc:	df000017 	ldw	fp,0(sp)
 40003c0:	dec00104 	addi	sp,sp,4
 40003c4:	f800283a 	ret

040003c8 <take_raw_picture_and_send_to_jtag>:


static void  take_raw_picture_and_send_to_jtag(void){
 40003c8:	defffb04 	addi	sp,sp,-20
 40003cc:	dfc00415 	stw	ra,16(sp)
 40003d0:	df000315 	stw	fp,12(sp)
 40003d4:	df000304 	addi	fp,sp,12

	volatile uint32_t * current_image_buffer = swap_buffer();
 40003d8:	40003240 	call	4000324 <swap_buffer>
 40003dc:	e0bffe15 	stw	r2,-8(fp)

	kiss_start(&jtag_kiss);
 40003e0:	01010074 	movhi	r4,1025
 40003e4:	2113e304 	addi	r4,r4,20364
 40003e8:	4001d700 	call	4001d70 <kiss_start>

	// Inject packet type
	uint8_t packet_type = KISS_PACKET_OPCODES__RAW_IMAGE;
 40003ec:	00bfe0c4 	movi	r2,-125
 40003f0:	e0bfff05 	stb	r2,-4(fp)
	kiss_send_data(&jtag_kiss, &packet_type, 1);
 40003f4:	e0bfff04 	addi	r2,fp,-4
 40003f8:	01800044 	movi	r6,1
 40003fc:	100b883a 	mov	r5,r2
 4000400:	01010074 	movhi	r4,1025
 4000404:	2113e304 	addi	r4,r4,20364
 4000408:	4001db40 	call	4001db4 <kiss_send_data>


	uint32_t i;
	for (i = 0; i < IMAGE_SIZE; i++) {
 400040c:	e03ffd15 	stw	zero,-12(fp)
 4000410:	00002506 	br	40004a8 <take_raw_picture_and_send_to_jtag+0xe0>

		uint8_t pixel_data[3];

		pixel_data[0] = (current_image_buffer[i] & 0x00FF0000) >> 16;
 4000414:	e0bffd17 	ldw	r2,-12(fp)
 4000418:	1085883a 	add	r2,r2,r2
 400041c:	1085883a 	add	r2,r2,r2
 4000420:	1007883a 	mov	r3,r2
 4000424:	e0bffe17 	ldw	r2,-8(fp)
 4000428:	10c5883a 	add	r2,r2,r3
 400042c:	10800017 	ldw	r2,0(r2)
 4000430:	10803fec 	andhi	r2,r2,255
 4000434:	1004d43a 	srli	r2,r2,16
 4000438:	e0bfff45 	stb	r2,-3(fp)
		pixel_data[1] = (current_image_buffer[i] & 0x0000FF00) >> 8;
 400043c:	e0bffd17 	ldw	r2,-12(fp)
 4000440:	1085883a 	add	r2,r2,r2
 4000444:	1085883a 	add	r2,r2,r2
 4000448:	1007883a 	mov	r3,r2
 400044c:	e0bffe17 	ldw	r2,-8(fp)
 4000450:	10c5883a 	add	r2,r2,r3
 4000454:	10800017 	ldw	r2,0(r2)
 4000458:	10bfc00c 	andi	r2,r2,65280
 400045c:	1004d23a 	srli	r2,r2,8
 4000460:	e0bfff85 	stb	r2,-2(fp)
		pixel_data[2] = (current_image_buffer[i] & 0x000000FF) >> 0;
 4000464:	e0bffd17 	ldw	r2,-12(fp)
 4000468:	1085883a 	add	r2,r2,r2
 400046c:	1085883a 	add	r2,r2,r2
 4000470:	1007883a 	mov	r3,r2
 4000474:	e0bffe17 	ldw	r2,-8(fp)
 4000478:	10c5883a 	add	r2,r2,r3
 400047c:	10800017 	ldw	r2,0(r2)
 4000480:	e0bfffc5 	stb	r2,-1(fp)

		kiss_send_data(&jtag_kiss, pixel_data, 3);
 4000484:	e0bfff44 	addi	r2,fp,-3
 4000488:	018000c4 	movi	r6,3
 400048c:	100b883a 	mov	r5,r2
 4000490:	01010074 	movhi	r4,1025
 4000494:	2113e304 	addi	r4,r4,20364
 4000498:	4001db40 	call	4001db4 <kiss_send_data>
	uint8_t packet_type = KISS_PACKET_OPCODES__RAW_IMAGE;
	kiss_send_data(&jtag_kiss, &packet_type, 1);


	uint32_t i;
	for (i = 0; i < IMAGE_SIZE; i++) {
 400049c:	e0bffd17 	ldw	r2,-12(fp)
 40004a0:	10800044 	addi	r2,r2,1
 40004a4:	e0bffd15 	stw	r2,-12(fp)
 40004a8:	e0fffd17 	ldw	r3,-12(fp)
 40004ac:	00800174 	movhi	r2,5
 40004b0:	10abffc4 	addi	r2,r2,-20481
 40004b4:	10ffd72e 	bgeu	r2,r3,4000414 <__alt_data_end+0xfc000414>

		kiss_send_data(&jtag_kiss, pixel_data, 3);

	}

	kiss_end(&jtag_kiss);
 40004b8:	01010074 	movhi	r4,1025
 40004bc:	2113e304 	addi	r4,r4,20364
 40004c0:	4001ee00 	call	4001ee0 <kiss_end>
}
 40004c4:	0001883a 	nop
 40004c8:	e037883a 	mov	sp,fp
 40004cc:	dfc00117 	ldw	ra,4(sp)
 40004d0:	df000017 	ldw	fp,0(sp)
 40004d4:	dec00204 	addi	sp,sp,8
 40004d8:	f800283a 	ret

040004dc <jpeg_jtag_send>:

static void jpeg_jtag_send(void* context, void* data, int size) {
 40004dc:	defffb04 	addi	sp,sp,-20
 40004e0:	dfc00415 	stw	ra,16(sp)
 40004e4:	df000315 	stw	fp,12(sp)
 40004e8:	df000304 	addi	fp,sp,12
 40004ec:	e13ffd15 	stw	r4,-12(fp)
 40004f0:	e17ffe15 	stw	r5,-8(fp)
 40004f4:	e1bfff15 	stw	r6,-4(fp)

	kiss_send_data(&jtag_kiss, data, size);
 40004f8:	e0bfff17 	ldw	r2,-4(fp)
 40004fc:	100d883a 	mov	r6,r2
 4000500:	e17ffe17 	ldw	r5,-8(fp)
 4000504:	01010074 	movhi	r4,1025
 4000508:	2113e304 	addi	r4,r4,20364
 400050c:	4001db40 	call	4001db4 <kiss_send_data>

};
 4000510:	0001883a 	nop
 4000514:	e037883a 	mov	sp,fp
 4000518:	dfc00117 	ldw	ra,4(sp)
 400051c:	df000017 	ldw	fp,0(sp)
 4000520:	dec00204 	addi	sp,sp,8
 4000524:	f800283a 	ret

04000528 <read_uptime>:
/**
 * Gets system uptime in ms
 *
 * @return uptime in ms
 */
static uint32_t read_uptime(void){
 4000528:	deffff04 	addi	sp,sp,-4
 400052c:	df000015 	stw	fp,0(sp)
 4000530:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(UPTIME_BASE);
 4000534:	00820034 	movhi	r2,2048
 4000538:	10840004 	addi	r2,r2,4096
 400053c:	10800037 	ldwio	r2,0(r2)

}
 4000540:	e037883a 	mov	sp,fp
 4000544:	df000017 	ldw	fp,0(sp)
 4000548:	dec00104 	addi	sp,sp,4
 400054c:	f800283a 	ret

04000550 <read_line_detect>:
 *************************************************/

PID_t drive_pid;
PID_t yaw_pid;

static uint32_t read_line_detect(void){
 4000550:	deffff04 	addi	sp,sp,-4
 4000554:	df000015 	stw	fp,0(sp)
 4000558:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(LINE_DETECT_BASE);
 400055c:	00820034 	movhi	r2,2048
 4000560:	10842804 	addi	r2,r2,4256
 4000564:	10800037 	ldwio	r2,0(r2)

}
 4000568:	e037883a 	mov	sp,fp
 400056c:	df000017 	ldw	fp,0(sp)
 4000570:	dec00104 	addi	sp,sp,4
 4000574:	f800283a 	ret

04000578 <read_encoder_left>:
/**
 * Reads the left encoder ticks
 *
 * @return left encoder ticks
 */
static int32_t read_encoder_left(void){
 4000578:	deffff04 	addi	sp,sp,-4
 400057c:	df000015 	stw	fp,0(sp)
 4000580:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(ENCODER_LEFT_BASE);
 4000584:	00820034 	movhi	r2,2048
 4000588:	10840c04 	addi	r2,r2,4144
 400058c:	10800037 	ldwio	r2,0(r2)

}
 4000590:	e037883a 	mov	sp,fp
 4000594:	df000017 	ldw	fp,0(sp)
 4000598:	dec00104 	addi	sp,sp,4
 400059c:	f800283a 	ret

040005a0 <read_encoder_right>:
/**
 * Reads the right encoder ticks
 *
 * @return right encoder ticks
 */
static int32_t read_encoder_right(void){
 40005a0:	deffff04 	addi	sp,sp,-4
 40005a4:	df000015 	stw	fp,0(sp)
 40005a8:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(ENCODER_RIGHT_BASE);
 40005ac:	00820034 	movhi	r2,2048
 40005b0:	10841004 	addi	r2,r2,4160
 40005b4:	10800037 	ldwio	r2,0(r2)

}
 40005b8:	e037883a 	mov	sp,fp
 40005bc:	df000017 	ldw	fp,0(sp)
 40005c0:	dec00104 	addi	sp,sp,4
 40005c4:	f800283a 	ret

040005c8 <set_motors>:
 * Sets the motors forward/reverse and speed reference using a -255 to 255 pwm output for each motor
 *
 * @param speed_left The desired PWM control signal for the left motor
 * @param speed_right The desired PWM control signal for the right motor
 */
static void set_motors(int16_t speed_right, int16_t speed_left){
 40005c8:	defffb04 	addi	sp,sp,-20
 40005cc:	df000415 	stw	fp,16(sp)
 40005d0:	df000404 	addi	fp,sp,16
 40005d4:	2007883a 	mov	r3,r4
 40005d8:	2805883a 	mov	r2,r5
 40005dc:	e0fffe0d 	sth	r3,-8(fp)
 40005e0:	e0bfff0d 	sth	r2,-4(fp)

	uint32_t motor_direction = 0;
 40005e4:	e03ffc15 	stw	zero,-16(fp)

	if(speed_left == 0){               // Stop left motor if input 0
 40005e8:	e0bfff0f 	ldh	r2,-4(fp)
 40005ec:	10000c26 	beq	r2,zero,4000620 <set_motors+0x58>
		motor_direction |= 0b00;
	} else if(speed_left < 0){
 40005f0:	e0bfff0f 	ldh	r2,-4(fp)
 40005f4:	1000070e 	bge	r2,zero,4000614 <set_motors+0x4c>
		motor_direction |= 0b01;
 40005f8:	e0bffc17 	ldw	r2,-16(fp)
 40005fc:	10800054 	ori	r2,r2,1
 4000600:	e0bffc15 	stw	r2,-16(fp)
		speed_left *= -1;
 4000604:	e0bfff0b 	ldhu	r2,-4(fp)
 4000608:	0085c83a 	sub	r2,zero,r2
 400060c:	e0bfff0d 	sth	r2,-4(fp)
 4000610:	00000306 	br	4000620 <set_motors+0x58>
	} else {
		motor_direction |= 0b10;
 4000614:	e0bffc17 	ldw	r2,-16(fp)
 4000618:	10800094 	ori	r2,r2,2
 400061c:	e0bffc15 	stw	r2,-16(fp)
	}

	if(speed_right == 0){              // Stop right motor if input 0
 4000620:	e0bffe0f 	ldh	r2,-8(fp)
 4000624:	10000c26 	beq	r2,zero,4000658 <set_motors+0x90>
		motor_direction |= 0b0000;
	} else if(speed_right < 0){
 4000628:	e0bffe0f 	ldh	r2,-8(fp)
 400062c:	1000070e 	bge	r2,zero,400064c <set_motors+0x84>
		motor_direction |= 0b1000;
 4000630:	e0bffc17 	ldw	r2,-16(fp)
 4000634:	10800214 	ori	r2,r2,8
 4000638:	e0bffc15 	stw	r2,-16(fp)
		speed_right *= -1;
 400063c:	e0bffe0b 	ldhu	r2,-8(fp)
 4000640:	0085c83a 	sub	r2,zero,r2
 4000644:	e0bffe0d 	sth	r2,-8(fp)
 4000648:	00000306 	br	4000658 <set_motors+0x90>
	} else {
		motor_direction |= 0b0100;
 400064c:	e0bffc17 	ldw	r2,-16(fp)
 4000650:	10800114 	ori	r2,r2,4
 4000654:	e0bffc15 	stw	r2,-16(fp)
	}

	// Set motor directions
	IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_DIRECTION_BASE, motor_direction);
 4000658:	e0fffc17 	ldw	r3,-16(fp)
 400065c:	00820034 	movhi	r2,2048
 4000660:	10840804 	addi	r2,r2,4128
 4000664:	10c00035 	stwio	r3,0(r2)

	// Set the PWM values
	volatile uint32_t pwm_command = ( ((uint32_t)speed_right) << 8) | ((uint32_t)speed_left);
 4000668:	e0bffe0f 	ldh	r2,-8(fp)
 400066c:	1006923a 	slli	r3,r2,8
 4000670:	e0bfff0f 	ldh	r2,-4(fp)
 4000674:	1884b03a 	or	r2,r3,r2
 4000678:	e0bffd15 	stw	r2,-12(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM_BASE, pwm_command);
 400067c:	e0bffd17 	ldw	r2,-12(fp)
 4000680:	1007883a 	mov	r3,r2
 4000684:	00820034 	movhi	r2,2048
 4000688:	10841404 	addi	r2,r2,4176
 400068c:	10c00035 	stwio	r3,0(r2)

}
 4000690:	0001883a 	nop
 4000694:	e037883a 	mov	sp,fp
 4000698:	df000017 	ldw	fp,0(sp)
 400069c:	dec00104 	addi	sp,sp,4
 40006a0:	f800283a 	ret

040006a4 <scale_output>:
/**
 * Scales the PWM value from max scale ot match the maximum possible motor speed
 *
 * @param output The desired PWM control signal for the motor before scaling
 */
double scale_output(double output){
 40006a4:	defffc04 	addi	sp,sp,-16
 40006a8:	dfc00315 	stw	ra,12(sp)
 40006ac:	df000215 	stw	fp,8(sp)
 40006b0:	df000204 	addi	fp,sp,8
 40006b4:	e13ffe15 	stw	r4,-8(fp)
 40006b8:	e17fff15 	stw	r5,-4(fp)

  return output * (maxPWM / 255.0);
 40006bc:	00bff704 	movi	r2,-36
 40006c0:	10803fcc 	andi	r2,r2,255
 40006c4:	1009883a 	mov	r4,r2
 40006c8:	4005f800 	call	4005f80 <__floatsidf>
 40006cc:	1011883a 	mov	r8,r2
 40006d0:	1813883a 	mov	r9,r3
 40006d4:	000d883a 	mov	r6,zero
 40006d8:	01d01c34 	movhi	r7,16496
 40006dc:	39f80004 	addi	r7,r7,-8192
 40006e0:	4009883a 	mov	r4,r8
 40006e4:	480b883a 	mov	r5,r9
 40006e8:	40041f80 	call	40041f8 <__divdf3>
 40006ec:	1009883a 	mov	r4,r2
 40006f0:	180b883a 	mov	r5,r3
 40006f4:	2005883a 	mov	r2,r4
 40006f8:	2807883a 	mov	r3,r5
 40006fc:	e1bffe17 	ldw	r6,-8(fp)
 4000700:	e1ffff17 	ldw	r7,-4(fp)
 4000704:	1009883a 	mov	r4,r2
 4000708:	180b883a 	mov	r5,r3
 400070c:	4004d980 	call	4004d98 <__muldf3>
 4000710:	100f883a 	mov	r7,r2
 4000714:	1811883a 	mov	r8,r3
 4000718:	380b883a 	mov	r5,r7
 400071c:	400d883a 	mov	r6,r8
 4000720:	2807883a 	mov	r3,r5
 4000724:	3009883a 	mov	r4,r6

}
 4000728:	1805883a 	mov	r2,r3
 400072c:	2007883a 	mov	r3,r4
 4000730:	e037883a 	mov	sp,fp
 4000734:	dfc00117 	ldw	ra,4(sp)
 4000738:	df000017 	ldw	fp,0(sp)
 400073c:	dec00204 	addi	sp,sp,8
 4000740:	f800283a 	ret

04000744 <normalize_output>:
 * the zone where the motor jumps, opting for a higher minimum speed before
 * cutoff
 *
 * @param output The desired PWM control signal for the motor before correction
 */
int normalize_output(double output){
 4000744:	defffb04 	addi	sp,sp,-20
 4000748:	dfc00415 	stw	ra,16(sp)
 400074c:	df000315 	stw	fp,12(sp)
 4000750:	dc000215 	stw	r16,8(sp)
 4000754:	df000304 	addi	fp,sp,12
 4000758:	e13ffd15 	stw	r4,-12(fp)
 400075c:	e17ffe15 	stw	r5,-8(fp)

  output = max(min(output, 255.0), -255.0);
 4000760:	000d883a 	mov	r6,zero
 4000764:	01d01c34 	movhi	r7,16496
 4000768:	39f80004 	addi	r7,r7,-8192
 400076c:	e13ffd17 	ldw	r4,-12(fp)
 4000770:	e17ffe17 	ldw	r5,-8(fp)
 4000774:	4004ca40 	call	4004ca4 <__ledf2>
 4000778:	10000a0e 	bge	r2,zero,40007a4 <normalize_output+0x60>
 400077c:	04000044 	movi	r16,1
 4000780:	000d883a 	mov	r6,zero
 4000784:	01f01c34 	movhi	r7,49264
 4000788:	39f80004 	addi	r7,r7,-8192
 400078c:	e13ffd17 	ldw	r4,-12(fp)
 4000790:	e17ffe17 	ldw	r5,-8(fp)
 4000794:	4004bc80 	call	4004bc8 <__gedf2>
 4000798:	00800316 	blt	zero,r2,40007a8 <normalize_output+0x64>
 400079c:	0021883a 	mov	r16,zero
 40007a0:	00000106 	br	40007a8 <normalize_output+0x64>
 40007a4:	04000044 	movi	r16,1
 40007a8:	80803fcc 	andi	r2,r16,255
 40007ac:	10000e26 	beq	r2,zero,40007e8 <normalize_output+0xa4>
 40007b0:	000d883a 	mov	r6,zero
 40007b4:	01d01c34 	movhi	r7,16496
 40007b8:	39f80004 	addi	r7,r7,-8192
 40007bc:	e13ffd17 	ldw	r4,-12(fp)
 40007c0:	e17ffe17 	ldw	r5,-8(fp)
 40007c4:	4004ca40 	call	4004ca4 <__ledf2>
 40007c8:	1000030e 	bge	r2,zero,40007d8 <normalize_output+0x94>
 40007cc:	e0bffd17 	ldw	r2,-12(fp)
 40007d0:	e0fffe17 	ldw	r3,-8(fp)
 40007d4:	00000706 	br	40007f4 <normalize_output+0xb0>
 40007d8:	0005883a 	mov	r2,zero
 40007dc:	00d01c34 	movhi	r3,16496
 40007e0:	18f80004 	addi	r3,r3,-8192
 40007e4:	00000306 	br	40007f4 <normalize_output+0xb0>
 40007e8:	0005883a 	mov	r2,zero
 40007ec:	00f01c34 	movhi	r3,49264
 40007f0:	18f80004 	addi	r3,r3,-8192
 40007f4:	e0bffd15 	stw	r2,-12(fp)
 40007f8:	e0fffe15 	stw	r3,-8(fp)

  if( output < minimum_zero && output > -1 * minimum_zero){
 40007fc:	00800044 	movi	r2,1
 4000800:	10803fcc 	andi	r2,r2,255
 4000804:	1009883a 	mov	r4,r2
 4000808:	4005f800 	call	4005f80 <__floatsidf>
 400080c:	1011883a 	mov	r8,r2
 4000810:	1813883a 	mov	r9,r3
 4000814:	e1bffd17 	ldw	r6,-12(fp)
 4000818:	e1fffe17 	ldw	r7,-8(fp)
 400081c:	4009883a 	mov	r4,r8
 4000820:	480b883a 	mov	r5,r9
 4000824:	4004bc80 	call	4004bc8 <__gedf2>
 4000828:	0080100e 	bge	zero,r2,400086c <normalize_output+0x128>
 400082c:	00800044 	movi	r2,1
 4000830:	10803fcc 	andi	r2,r2,255
 4000834:	0085c83a 	sub	r2,zero,r2
 4000838:	1009883a 	mov	r4,r2
 400083c:	4005f800 	call	4005f80 <__floatsidf>
 4000840:	1011883a 	mov	r8,r2
 4000844:	1813883a 	mov	r9,r3
 4000848:	e1bffd17 	ldw	r6,-12(fp)
 400084c:	e1fffe17 	ldw	r7,-8(fp)
 4000850:	4009883a 	mov	r4,r8
 4000854:	480b883a 	mov	r5,r9
 4000858:	4004ca40 	call	4004ca4 <__ledf2>
 400085c:	1000030e 	bge	r2,zero,400086c <normalize_output+0x128>

    output = 0;
 4000860:	e03ffd15 	stw	zero,-12(fp)
 4000864:	e03ffe15 	stw	zero,-8(fp)
 4000868:	00003106 	br	4000930 <normalize_output+0x1ec>

  } else if( output < minimum_stable_pwm && output > -1 * minimum_stable_pwm ){
 400086c:	00800f04 	movi	r2,60
 4000870:	10803fcc 	andi	r2,r2,255
 4000874:	1009883a 	mov	r4,r2
 4000878:	4005f800 	call	4005f80 <__floatsidf>
 400087c:	1011883a 	mov	r8,r2
 4000880:	1813883a 	mov	r9,r3
 4000884:	e1bffd17 	ldw	r6,-12(fp)
 4000888:	e1fffe17 	ldw	r7,-8(fp)
 400088c:	4009883a 	mov	r4,r8
 4000890:	480b883a 	mov	r5,r9
 4000894:	4004bc80 	call	4004bc8 <__gedf2>
 4000898:	0080250e 	bge	zero,r2,4000930 <normalize_output+0x1ec>
 400089c:	00800f04 	movi	r2,60
 40008a0:	10803fcc 	andi	r2,r2,255
 40008a4:	0085c83a 	sub	r2,zero,r2
 40008a8:	1009883a 	mov	r4,r2
 40008ac:	4005f800 	call	4005f80 <__floatsidf>
 40008b0:	1011883a 	mov	r8,r2
 40008b4:	1813883a 	mov	r9,r3
 40008b8:	e1bffd17 	ldw	r6,-12(fp)
 40008bc:	e1fffe17 	ldw	r7,-8(fp)
 40008c0:	4009883a 	mov	r4,r8
 40008c4:	480b883a 	mov	r5,r9
 40008c8:	4004ca40 	call	4004ca4 <__ledf2>
 40008cc:	1000180e 	bge	r2,zero,4000930 <normalize_output+0x1ec>

    if(output > 0){
 40008d0:	000d883a 	mov	r6,zero
 40008d4:	000f883a 	mov	r7,zero
 40008d8:	e13ffd17 	ldw	r4,-12(fp)
 40008dc:	e17ffe17 	ldw	r5,-8(fp)
 40008e0:	4004bc80 	call	4004bc8 <__gedf2>
 40008e4:	0080090e 	bge	zero,r2,400090c <normalize_output+0x1c8>
      output = minimum_stable_pwm;
 40008e8:	00800f04 	movi	r2,60
 40008ec:	10803fcc 	andi	r2,r2,255
 40008f0:	1009883a 	mov	r4,r2
 40008f4:	400605c0 	call	400605c <__floatunsidf>
 40008f8:	1009883a 	mov	r4,r2
 40008fc:	180b883a 	mov	r5,r3
 4000900:	e13ffd15 	stw	r4,-12(fp)
 4000904:	e17ffe15 	stw	r5,-8(fp)
 4000908:	00000906 	br	4000930 <normalize_output+0x1ec>
    } else {
      output = -1 * minimum_stable_pwm;
 400090c:	00800f04 	movi	r2,60
 4000910:	10803fcc 	andi	r2,r2,255
 4000914:	0085c83a 	sub	r2,zero,r2
 4000918:	1009883a 	mov	r4,r2
 400091c:	4005f800 	call	4005f80 <__floatsidf>
 4000920:	1009883a 	mov	r4,r2
 4000924:	180b883a 	mov	r5,r3
 4000928:	e13ffd15 	stw	r4,-12(fp)
 400092c:	e17ffe15 	stw	r5,-8(fp)
    }

  }

  return output;
 4000930:	e13ffd17 	ldw	r4,-12(fp)
 4000934:	e17ffe17 	ldw	r5,-8(fp)
 4000938:	4005f000 	call	4005f00 <__fixdfsi>

}
 400093c:	e6ffff04 	addi	sp,fp,-4
 4000940:	dfc00217 	ldw	ra,8(sp)
 4000944:	df000117 	ldw	fp,4(sp)
 4000948:	dc000017 	ldw	r16,0(sp)
 400094c:	dec00304 	addi	sp,sp,12
 4000950:	f800283a 	ret

04000954 <motor_init>:

// Init motor pin states
static void motor_init(void){
 4000954:	defffe04 	addi	sp,sp,-8
 4000958:	dfc00115 	stw	ra,4(sp)
 400095c:	df000015 	stw	fp,0(sp)
 4000960:	d839883a 	mov	fp,sp
	// Default state to motors not enabled
	//digitalWrite(pinCW_Left, LOW);   // stop clockwise
	//digitalWrite(pinCC_Left, LOW);   // stop counter-clockwise

	// Stop motors
	set_motors(0, 0);
 4000964:	000b883a 	mov	r5,zero
 4000968:	0009883a 	mov	r4,zero
 400096c:	40005c80 	call	40005c8 <set_motors>
	* when the drive PID is at full output.
	*/

	// Setup the Drive PID

	drive_pid.kp   = 15;
 4000970:	00810074 	movhi	r2,1025
 4000974:	10940e04 	addi	r2,r2,20536
 4000978:	00d05c34 	movhi	r3,16752
 400097c:	10c00315 	stw	r3,12(r2)
	drive_pid.ki   = 0;
 4000980:	00810074 	movhi	r2,1025
 4000984:	10940e04 	addi	r2,r2,20536
 4000988:	10000415 	stw	zero,16(r2)
	drive_pid.kd   = 2;
 400098c:	00810074 	movhi	r2,1025
 4000990:	10940e04 	addi	r2,r2,20536
 4000994:	00d00034 	movhi	r3,16384
 4000998:	10c00515 	stw	r3,20(r2)
	drive_pid.max  =  120;					// Limit range to -128 to 128
 400099c:	00810074 	movhi	r2,1025
 40009a0:	10940e04 	addi	r2,r2,20536
 40009a4:	00d0bc34 	movhi	r3,17136
 40009a8:	10c00715 	stw	r3,28(r2)
	drive_pid.min  = -120;
 40009ac:	00810074 	movhi	r2,1025
 40009b0:	10940e04 	addi	r2,r2,20536
 40009b4:	00f0bc34 	movhi	r3,49904
 40009b8:	10c00815 	stw	r3,32(r2)
	drive_pid.mode = FORWARD;
 40009bc:	00810074 	movhi	r2,1025
 40009c0:	10940e04 	addi	r2,r2,20536
 40009c4:	10000915 	stw	zero,36(r2)
	//drive_pid.SetSampleTime(20);          // 50 Hz update rate

	// Setup the Yaw PID
	yaw_pid.kp   = 20;
 40009c8:	00810074 	movhi	r2,1025
 40009cc:	10940104 	addi	r2,r2,20484
 40009d0:	00d06834 	movhi	r3,16800
 40009d4:	10c00315 	stw	r3,12(r2)
	yaw_pid.ki   = 0;
 40009d8:	00810074 	movhi	r2,1025
 40009dc:	10940104 	addi	r2,r2,20484
 40009e0:	10000415 	stw	zero,16(r2)
	yaw_pid.kd   = 2;
 40009e4:	00810074 	movhi	r2,1025
 40009e8:	10940104 	addi	r2,r2,20484
 40009ec:	00d00034 	movhi	r3,16384
 40009f0:	10c00515 	stw	r3,20(r2)
	yaw_pid.max  =  140;
 40009f4:	00810074 	movhi	r2,1025
 40009f8:	10940104 	addi	r2,r2,20484
 40009fc:	00d0c334 	movhi	r3,17164
 4000a00:	10c00715 	stw	r3,28(r2)
	yaw_pid.min  = -140;
 4000a04:	00810074 	movhi	r2,1025
 4000a08:	10940104 	addi	r2,r2,20484
 4000a0c:	00f0c334 	movhi	r3,49932
 4000a10:	10c00815 	stw	r3,32(r2)
	yaw_pid.mode = REVERSE;
 4000a14:	00810074 	movhi	r2,1025
 4000a18:	10940104 	addi	r2,r2,20484
 4000a1c:	00c00044 	movi	r3,1
 4000a20:	10c00915 	stw	r3,36(r2)

}
 4000a24:	0001883a 	nop
 4000a28:	e037883a 	mov	sp,fp
 4000a2c:	dfc00117 	ldw	ra,4(sp)
 4000a30:	df000017 	ldw	fp,0(sp)
 4000a34:	dec00204 	addi	sp,sp,8
 4000a38:	f800283a 	ret

04000a3c <wait_button_press>:
	.num_states = 1,
	.drive_changes = right_drive_changes,
	.yaw_changes = right_yaw_changes
};

static void wait_button_press(void){
 4000a3c:	defffe04 	addi	sp,sp,-8
 4000a40:	dfc00115 	stw	ra,4(sp)
 4000a44:	df000015 	stw	fp,0(sp)
 4000a48:	d839883a 	mov	fp,sp

	// wait for ON switch
	while ( ( IORD_ALTERA_AVALON_PIO_DATA(ON_BUTTON_BASE) & 1 )  == 1){
 4000a4c:	00000206 	br	4000a58 <wait_button_press+0x1c>
		usleep(1000);
 4000a50:	0100fa04 	movi	r4,1000
 4000a54:	400f0f40 	call	400f0f4 <usleep>
};

static void wait_button_press(void){

	// wait for ON switch
	while ( ( IORD_ALTERA_AVALON_PIO_DATA(ON_BUTTON_BASE) & 1 )  == 1){
 4000a58:	00820034 	movhi	r2,2048
 4000a5c:	10840404 	addi	r2,r2,4112
 4000a60:	10800037 	ldwio	r2,0(r2)
 4000a64:	1080004c 	andi	r2,r2,1
 4000a68:	103ff91e 	bne	r2,zero,4000a50 <__alt_data_end+0xfc000a50>
		usleep(1000);
	}

}
 4000a6c:	0001883a 	nop
 4000a70:	e037883a 	mov	sp,fp
 4000a74:	dfc00117 	ldw	ra,4(sp)
 4000a78:	df000017 	ldw	fp,0(sp)
 4000a7c:	dec00204 	addi	sp,sp,8
 4000a80:	f800283a 	ret

04000a84 <motor_control_loop>:
static void motor_control_loop(control_t * instructions, bool wait){
 4000a84:	deffec04 	addi	sp,sp,-80
 4000a88:	dfc01315 	stw	ra,76(sp)
 4000a8c:	df001215 	stw	fp,72(sp)
 4000a90:	dc401115 	stw	r17,68(sp)
 4000a94:	dc001015 	stw	r16,64(sp)
 4000a98:	df001204 	addi	fp,sp,72
 4000a9c:	e13ffc15 	stw	r4,-16(fp)
 4000aa0:	2805883a 	mov	r2,r5
 4000aa4:	e0bffd05 	stb	r2,-12(fp)

	motor_init();
 4000aa8:	40009540 	call	4000954 <motor_init>

	//  Initialize drive and yaw setpoints to 0
	drive_pid.setpoint = 0.0f;
 4000aac:	00810074 	movhi	r2,1025
 4000ab0:	10940e04 	addi	r2,r2,20536
 4000ab4:	10000015 	stw	zero,0(r2)
	yaw_pid.setpoint = 0.0f;
 4000ab8:	00810074 	movhi	r2,1025
 4000abc:	10940104 	addi	r2,r2,20484
 4000ac0:	10000015 	stw	zero,0(r2)

	// State machine variables to allow transition between pre-programmed motions
	int state = 0;
 4000ac4:	e03fee15 	stw	zero,-72(fp)
	bool state_change = false;
 4000ac8:	e03fef05 	stb	zero,-68(fp)

	// State machine finished, allows exiting of task loop to wait for another switch press to run again
	bool done = false;
 4000acc:	e03fef45 	stb	zero,-67(fp)

	if(wait){
 4000ad0:	e0bffd03 	ldbu	r2,-12(fp)
 4000ad4:	10000126 	beq	r2,zero,4000adc <motor_control_loop+0x58>
		wait_button_press();
 4000ad8:	4000a3c0 	call	4000a3c <wait_button_press>
	}

	usleep(100000);    // Allow user to step away before robot moves
 4000adc:	010000b4 	movhi	r4,2
 4000ae0:	2121a804 	addi	r4,r4,-31072
 4000ae4:	400f0f40 	call	400f0f4 <usleep>

	// Reset state variables
	done = false;
 4000ae8:	e03fef45 	stb	zero,-67(fp)
	state = 0;
 4000aec:	e03fee15 	stw	zero,-72(fp)

	// setup encoder offsets
	float left_offset = read_encoder_left() / 1000.0f;
 4000af0:	40005780 	call	4000578 <read_encoder_left>
 4000af4:	1009883a 	mov	r4,r2
 4000af8:	40038280 	call	4003828 <__floatsisf>
 4000afc:	1007883a 	mov	r3,r2
 4000b00:	01511eb4 	movhi	r5,17530
 4000b04:	1809883a 	mov	r4,r3
 4000b08:	40029500 	call	4002950 <__divsf3>
 4000b0c:	1007883a 	mov	r3,r2
 4000b10:	e0fff115 	stw	r3,-60(fp)
	float right_offset = read_encoder_right() / 1000.0f;
 4000b14:	40005a00 	call	40005a0 <read_encoder_right>
 4000b18:	1009883a 	mov	r4,r2
 4000b1c:	40038280 	call	4003828 <__floatsisf>
 4000b20:	1007883a 	mov	r3,r2
 4000b24:	01511eb4 	movhi	r5,17530
 4000b28:	1809883a 	mov	r4,r3
 4000b2c:	40029500 	call	4002950 <__divsf3>
 4000b30:	1007883a 	mov	r3,r2
 4000b34:	e0fff215 	stw	r3,-56(fp)

	// reset state
	drive_pid.setpoint = 0.0f;
 4000b38:	00810074 	movhi	r2,1025
 4000b3c:	10940e04 	addi	r2,r2,20536
 4000b40:	10000015 	stw	zero,0(r2)
	yaw_pid.setpoint = 0.0f;
 4000b44:	00810074 	movhi	r2,1025
 4000b48:	10940104 	addi	r2,r2,20484
 4000b4c:	10000015 	stw	zero,0(r2)

	float last_time = read_uptime() / 1000.0;
 4000b50:	40005280 	call	4000528 <read_uptime>
 4000b54:	1009883a 	mov	r4,r2
 4000b58:	400605c0 	call	400605c <__floatunsidf>
 4000b5c:	1011883a 	mov	r8,r2
 4000b60:	1813883a 	mov	r9,r3
 4000b64:	000d883a 	mov	r6,zero
 4000b68:	01d023f4 	movhi	r7,16527
 4000b6c:	39d00004 	addi	r7,r7,16384
 4000b70:	4009883a 	mov	r4,r8
 4000b74:	480b883a 	mov	r5,r9
 4000b78:	40041f80 	call	40041f8 <__divdf3>
 4000b7c:	1009883a 	mov	r4,r2
 4000b80:	180b883a 	mov	r5,r3
 4000b84:	2005883a 	mov	r2,r4
 4000b88:	2807883a 	mov	r3,r5
 4000b8c:	1009883a 	mov	r4,r2
 4000b90:	180b883a 	mov	r5,r3
 4000b94:	40062140 	call	4006214 <__truncdfsf2>
 4000b98:	1007883a 	mov	r3,r2
 4000b9c:	e0fff015 	stw	r3,-64(fp)

	// Run control loops while robot is operating
	while(!done){
 4000ba0:	00010706 	br	4000fc0 <motor_control_loop+0x53c>

		float uptime = read_uptime() / 1000.0;
 4000ba4:	40005280 	call	4000528 <read_uptime>
 4000ba8:	1009883a 	mov	r4,r2
 4000bac:	400605c0 	call	400605c <__floatunsidf>
 4000bb0:	1011883a 	mov	r8,r2
 4000bb4:	1813883a 	mov	r9,r3
 4000bb8:	000d883a 	mov	r6,zero
 4000bbc:	01d023f4 	movhi	r7,16527
 4000bc0:	39d00004 	addi	r7,r7,16384
 4000bc4:	4009883a 	mov	r4,r8
 4000bc8:	480b883a 	mov	r5,r9
 4000bcc:	40041f80 	call	40041f8 <__divdf3>
 4000bd0:	1009883a 	mov	r4,r2
 4000bd4:	180b883a 	mov	r5,r3
 4000bd8:	2005883a 	mov	r2,r4
 4000bdc:	2807883a 	mov	r3,r5
 4000be0:	1009883a 	mov	r4,r2
 4000be4:	180b883a 	mov	r5,r3
 4000be8:	40062140 	call	4006214 <__truncdfsf2>
 4000bec:	1007883a 	mov	r3,r2
 4000bf0:	e0fff315 	stw	r3,-52(fp)

		float dt = uptime - last_time;
 4000bf4:	e17ff017 	ldw	r5,-64(fp)
 4000bf8:	e13ff317 	ldw	r4,-52(fp)
 4000bfc:	40033440 	call	4003344 <__subsf3>
 4000c00:	1007883a 	mov	r3,r2
 4000c04:	e0fff415 	stw	r3,-48(fp)

		// scale encoder outputs to be more consistent with PID gains
		float left_value = ( read_encoder_left() / 1000.0f ) - left_offset;
 4000c08:	40005780 	call	4000578 <read_encoder_left>
 4000c0c:	1009883a 	mov	r4,r2
 4000c10:	40038280 	call	4003828 <__floatsisf>
 4000c14:	1007883a 	mov	r3,r2
 4000c18:	01511eb4 	movhi	r5,17530
 4000c1c:	1809883a 	mov	r4,r3
 4000c20:	40029500 	call	4002950 <__divsf3>
 4000c24:	1007883a 	mov	r3,r2
 4000c28:	1805883a 	mov	r2,r3
 4000c2c:	e17ff117 	ldw	r5,-60(fp)
 4000c30:	1009883a 	mov	r4,r2
 4000c34:	40033440 	call	4003344 <__subsf3>
 4000c38:	1007883a 	mov	r3,r2
 4000c3c:	e0fff515 	stw	r3,-44(fp)
		float right_value = ( read_encoder_right() / 1000.0f ) - right_offset;
 4000c40:	40005a00 	call	40005a0 <read_encoder_right>
 4000c44:	1009883a 	mov	r4,r2
 4000c48:	40038280 	call	4003828 <__floatsisf>
 4000c4c:	1007883a 	mov	r3,r2
 4000c50:	01511eb4 	movhi	r5,17530
 4000c54:	1809883a 	mov	r4,r3
 4000c58:	40029500 	call	4002950 <__divsf3>
 4000c5c:	1007883a 	mov	r3,r2
 4000c60:	1805883a 	mov	r2,r3
 4000c64:	e17ff217 	ldw	r5,-56(fp)
 4000c68:	1009883a 	mov	r4,r2
 4000c6c:	40033440 	call	4003344 <__subsf3>
 4000c70:	1007883a 	mov	r3,r2
 4000c74:	e0fff615 	stw	r3,-40(fp)

		// Convert encoder values to Drive and Yaw state values for control
		float drive_value = ( left_value + right_value ) / 2.0f;
 4000c78:	e17ff617 	ldw	r5,-40(fp)
 4000c7c:	e13ff517 	ldw	r4,-44(fp)
 4000c80:	40024880 	call	4002488 <__addsf3>
 4000c84:	1007883a 	mov	r3,r2
 4000c88:	1805883a 	mov	r2,r3
 4000c8c:	01500034 	movhi	r5,16384
 4000c90:	1009883a 	mov	r4,r2
 4000c94:	40029500 	call	4002950 <__divsf3>
 4000c98:	1007883a 	mov	r3,r2
 4000c9c:	e0fff715 	stw	r3,-36(fp)
		float yaw_value = left_value - right_value;
 4000ca0:	e17ff617 	ldw	r5,-40(fp)
 4000ca4:	e13ff517 	ldw	r4,-44(fp)
 4000ca8:	40033440 	call	4003344 <__subsf3>
 4000cac:	1007883a 	mov	r3,r2
 4000cb0:	e0fff815 	stw	r3,-32(fp)

			kiss_send_packet(&jtag_kiss, (const uint8_t *) states_msg, 9);
		}*/

		// Compute the control efforts from the PID loops
		fp_t drive_output = pid_compute(&drive_pid, drive_value, dt);
 4000cb4:	e1bff417 	ldw	r6,-48(fp)
 4000cb8:	e17ff717 	ldw	r5,-36(fp)
 4000cbc:	01010074 	movhi	r4,1025
 4000cc0:	21140e04 	addi	r4,r4,20536
 4000cc4:	40020840 	call	4002084 <pid_compute>
 4000cc8:	e0bff915 	stw	r2,-28(fp)
		fp_t yaw_output   = pid_compute(&yaw_pid, yaw_value, dt);
 4000ccc:	e1bff417 	ldw	r6,-48(fp)
 4000cd0:	e17ff817 	ldw	r5,-32(fp)
 4000cd4:	01010074 	movhi	r4,1025
 4000cd8:	21140104 	addi	r4,r4,20484
 4000cdc:	40020840 	call	4002084 <pid_compute>
 4000ce0:	e0bffa15 	stw	r2,-24(fp)

		// Mix the control efforts into the motors
		int16_t left_output = normalize_output(scale_output(drive_output) + scale_output(yaw_output));
 4000ce4:	e13ff917 	ldw	r4,-28(fp)
 4000ce8:	40061040 	call	4006104 <__extendsfdf2>
 4000cec:	100b883a 	mov	r5,r2
 4000cf0:	180d883a 	mov	r6,r3
 4000cf4:	2809883a 	mov	r4,r5
 4000cf8:	300b883a 	mov	r5,r6
 4000cfc:	40006a40 	call	40006a4 <scale_output>
 4000d00:	1021883a 	mov	r16,r2
 4000d04:	1823883a 	mov	r17,r3
 4000d08:	e13ffa17 	ldw	r4,-24(fp)
 4000d0c:	40061040 	call	4006104 <__extendsfdf2>
 4000d10:	100b883a 	mov	r5,r2
 4000d14:	180d883a 	mov	r6,r3
 4000d18:	2809883a 	mov	r4,r5
 4000d1c:	300b883a 	mov	r5,r6
 4000d20:	40006a40 	call	40006a4 <scale_output>
 4000d24:	1009883a 	mov	r4,r2
 4000d28:	180b883a 	mov	r5,r3
 4000d2c:	200d883a 	mov	r6,r4
 4000d30:	280f883a 	mov	r7,r5
 4000d34:	8009883a 	mov	r4,r16
 4000d38:	880b883a 	mov	r5,r17
 4000d3c:	400394c0 	call	400394c <__adddf3>
 4000d40:	1009883a 	mov	r4,r2
 4000d44:	180b883a 	mov	r5,r3
 4000d48:	2005883a 	mov	r2,r4
 4000d4c:	2807883a 	mov	r3,r5
 4000d50:	1009883a 	mov	r4,r2
 4000d54:	180b883a 	mov	r5,r3
 4000d58:	40007440 	call	4000744 <normalize_output>
 4000d5c:	e0bffb0d 	sth	r2,-20(fp)
		int16_t right_output = normalize_output(scale_output(drive_output) - scale_output(yaw_output));
 4000d60:	e13ff917 	ldw	r4,-28(fp)
 4000d64:	40061040 	call	4006104 <__extendsfdf2>
 4000d68:	100b883a 	mov	r5,r2
 4000d6c:	180d883a 	mov	r6,r3
 4000d70:	2809883a 	mov	r4,r5
 4000d74:	300b883a 	mov	r5,r6
 4000d78:	40006a40 	call	40006a4 <scale_output>
 4000d7c:	1021883a 	mov	r16,r2
 4000d80:	1823883a 	mov	r17,r3
 4000d84:	e13ffa17 	ldw	r4,-24(fp)
 4000d88:	40061040 	call	4006104 <__extendsfdf2>
 4000d8c:	100b883a 	mov	r5,r2
 4000d90:	180d883a 	mov	r6,r3
 4000d94:	2809883a 	mov	r4,r5
 4000d98:	300b883a 	mov	r5,r6
 4000d9c:	40006a40 	call	40006a4 <scale_output>
 4000da0:	1009883a 	mov	r4,r2
 4000da4:	180b883a 	mov	r5,r3
 4000da8:	200d883a 	mov	r6,r4
 4000dac:	280f883a 	mov	r7,r5
 4000db0:	8009883a 	mov	r4,r16
 4000db4:	880b883a 	mov	r5,r17
 4000db8:	40056040 	call	4005604 <__subdf3>
 4000dbc:	1009883a 	mov	r4,r2
 4000dc0:	180b883a 	mov	r5,r3
 4000dc4:	2005883a 	mov	r2,r4
 4000dc8:	2807883a 	mov	r3,r5
 4000dcc:	1009883a 	mov	r4,r2
 4000dd0:	180b883a 	mov	r5,r3
 4000dd4:	40007440 	call	4000744 <normalize_output>
 4000dd8:	e0bffb8d 	sth	r2,-18(fp)

		// send the control efforts to the motors
		set_motors(left_output, right_output);
 4000ddc:	e0bffb0f 	ldh	r2,-20(fp)
 4000de0:	e0fffb8f 	ldh	r3,-18(fp)
 4000de4:	180b883a 	mov	r5,r3
 4000de8:	1009883a 	mov	r4,r2
 4000dec:	40005c80 	call	40005c8 <set_motors>

		// Wait for drive and yaw goals to be met, then start a state transition
		if(drive_value < drive_pid.setpoint + TOLERANCE && drive_value > drive_pid.setpoint - TOLERANCE
 4000df0:	00810074 	movhi	r2,1025
 4000df4:	10940e04 	addi	r2,r2,20536
 4000df8:	10c00017 	ldw	r3,0(r2)
 4000dfc:	014f7374 	movhi	r5,15821
 4000e00:	29733344 	addi	r5,r5,-13107
 4000e04:	1809883a 	mov	r4,r3
 4000e08:	40024880 	call	4002488 <__addsf3>
 4000e0c:	1007883a 	mov	r3,r2
 4000e10:	1805883a 	mov	r2,r3
 4000e14:	e17ff717 	ldw	r5,-36(fp)
 4000e18:	1009883a 	mov	r4,r2
 4000e1c:	4002d900 	call	4002d90 <__gesf2>
 4000e20:	00802c0e 	bge	zero,r2,4000ed4 <motor_control_loop+0x450>
 4000e24:	00810074 	movhi	r2,1025
 4000e28:	10940e04 	addi	r2,r2,20536
 4000e2c:	10c00017 	ldw	r3,0(r2)
 4000e30:	014f7374 	movhi	r5,15821
 4000e34:	29733344 	addi	r5,r5,-13107
 4000e38:	1809883a 	mov	r4,r3
 4000e3c:	40033440 	call	4003344 <__subsf3>
 4000e40:	1007883a 	mov	r3,r2
 4000e44:	1805883a 	mov	r2,r3
 4000e48:	e17ff717 	ldw	r5,-36(fp)
 4000e4c:	1009883a 	mov	r4,r2
 4000e50:	4002e4c0 	call	4002e4c <__lesf2>
 4000e54:	10001f0e 	bge	r2,zero,4000ed4 <motor_control_loop+0x450>
		   && yaw_value < yaw_pid.setpoint + TOLERANCE && yaw_value > yaw_pid.setpoint - TOLERANCE){
 4000e58:	00810074 	movhi	r2,1025
 4000e5c:	10940104 	addi	r2,r2,20484
 4000e60:	10c00017 	ldw	r3,0(r2)
 4000e64:	014f7374 	movhi	r5,15821
 4000e68:	29733344 	addi	r5,r5,-13107
 4000e6c:	1809883a 	mov	r4,r3
 4000e70:	40024880 	call	4002488 <__addsf3>
 4000e74:	1007883a 	mov	r3,r2
 4000e78:	1805883a 	mov	r2,r3
 4000e7c:	e17ff817 	ldw	r5,-32(fp)
 4000e80:	1009883a 	mov	r4,r2
 4000e84:	4002d900 	call	4002d90 <__gesf2>
 4000e88:	0080120e 	bge	zero,r2,4000ed4 <motor_control_loop+0x450>
 4000e8c:	00810074 	movhi	r2,1025
 4000e90:	10940104 	addi	r2,r2,20484
 4000e94:	10c00017 	ldw	r3,0(r2)
 4000e98:	014f7374 	movhi	r5,15821
 4000e9c:	29733344 	addi	r5,r5,-13107
 4000ea0:	1809883a 	mov	r4,r3
 4000ea4:	40033440 	call	4003344 <__subsf3>
 4000ea8:	1007883a 	mov	r3,r2
 4000eac:	1805883a 	mov	r2,r3
 4000eb0:	e17ff817 	ldw	r5,-32(fp)
 4000eb4:	1009883a 	mov	r4,r2
 4000eb8:	4002e4c0 	call	4002e4c <__lesf2>
 4000ebc:	1000050e 	bge	r2,zero,4000ed4 <motor_control_loop+0x450>
			state++;
 4000ec0:	e0bfee17 	ldw	r2,-72(fp)
 4000ec4:	10800044 	addi	r2,r2,1
 4000ec8:	e0bfee15 	stw	r2,-72(fp)
			state_change = true;
 4000ecc:	00800044 	movi	r2,1
 4000ed0:	e0bfef05 	stb	r2,-68(fp)
		}

		// Switch states to perform a figure 8 motion
		if(state_change){
 4000ed4:	e0bfef03 	ldbu	r2,-68(fp)
 4000ed8:	10003726 	beq	r2,zero,4000fb8 <motor_control_loop+0x534>

			if(state == ( instructions->num_states + 1) ){
 4000edc:	e0bffc17 	ldw	r2,-16(fp)
 4000ee0:	1080000b 	ldhu	r2,0(r2)
 4000ee4:	10bfffcc 	andi	r2,r2,65535
 4000ee8:	10c00044 	addi	r3,r2,1
 4000eec:	e0bfee17 	ldw	r2,-72(fp)
 4000ef0:	1880061e 	bne	r3,r2,4000f0c <motor_control_loop+0x488>
				set_motors(0, 0);
 4000ef4:	000b883a 	mov	r5,zero
 4000ef8:	0009883a 	mov	r4,zero
 4000efc:	40005c80 	call	40005c8 <set_motors>
				done = true;
 4000f00:	00800044 	movi	r2,1
 4000f04:	e0bfef45 	stb	r2,-67(fp)
 4000f08:	00002a06 	br	4000fb4 <motor_control_loop+0x530>
			} else {
				drive_pid.setpoint += instructions->drive_changes[state - 1];
 4000f0c:	00810074 	movhi	r2,1025
 4000f10:	10940e04 	addi	r2,r2,20536
 4000f14:	11800017 	ldw	r6,0(r2)
 4000f18:	e0bffc17 	ldw	r2,-16(fp)
 4000f1c:	10c00117 	ldw	r3,4(r2)
 4000f20:	e13fee17 	ldw	r4,-72(fp)
 4000f24:	00900034 	movhi	r2,16384
 4000f28:	10bfffc4 	addi	r2,r2,-1
 4000f2c:	2085883a 	add	r2,r4,r2
 4000f30:	1085883a 	add	r2,r2,r2
 4000f34:	1085883a 	add	r2,r2,r2
 4000f38:	1885883a 	add	r2,r3,r2
 4000f3c:	10c00017 	ldw	r3,0(r2)
 4000f40:	180b883a 	mov	r5,r3
 4000f44:	3009883a 	mov	r4,r6
 4000f48:	40024880 	call	4002488 <__addsf3>
 4000f4c:	1009883a 	mov	r4,r2
 4000f50:	2007883a 	mov	r3,r4
 4000f54:	00810074 	movhi	r2,1025
 4000f58:	10940e04 	addi	r2,r2,20536
 4000f5c:	10c00015 	stw	r3,0(r2)
				yaw_pid.setpoint += instructions->yaw_changes[state - 1];
 4000f60:	00810074 	movhi	r2,1025
 4000f64:	10940104 	addi	r2,r2,20484
 4000f68:	11800017 	ldw	r6,0(r2)
 4000f6c:	e0bffc17 	ldw	r2,-16(fp)
 4000f70:	10c00217 	ldw	r3,8(r2)
 4000f74:	e13fee17 	ldw	r4,-72(fp)
 4000f78:	00900034 	movhi	r2,16384
 4000f7c:	10bfffc4 	addi	r2,r2,-1
 4000f80:	2085883a 	add	r2,r4,r2
 4000f84:	1085883a 	add	r2,r2,r2
 4000f88:	1085883a 	add	r2,r2,r2
 4000f8c:	1885883a 	add	r2,r3,r2
 4000f90:	10c00017 	ldw	r3,0(r2)
 4000f94:	180b883a 	mov	r5,r3
 4000f98:	3009883a 	mov	r4,r6
 4000f9c:	40024880 	call	4002488 <__addsf3>
 4000fa0:	1009883a 	mov	r4,r2
 4000fa4:	2007883a 	mov	r3,r4
 4000fa8:	00810074 	movhi	r2,1025
 4000fac:	10940104 	addi	r2,r2,20484
 4000fb0:	10c00015 	stw	r3,0(r2)
			}

			state_change = false;
 4000fb4:	e03fef05 	stb	zero,-68(fp)

		}

		last_time = uptime;
 4000fb8:	e0bff317 	ldw	r2,-52(fp)
 4000fbc:	e0bff015 	stw	r2,-64(fp)
	yaw_pid.setpoint = 0.0f;

	float last_time = read_uptime() / 1000.0;

	// Run control loops while robot is operating
	while(!done){
 4000fc0:	e0bfef43 	ldbu	r2,-67(fp)
 4000fc4:	1080005c 	xori	r2,r2,1
 4000fc8:	10803fcc 	andi	r2,r2,255
 4000fcc:	103ef51e 	bne	r2,zero,4000ba4 <__alt_data_end+0xfc000ba4>

		last_time = uptime;

	}

}
 4000fd0:	0001883a 	nop
 4000fd4:	e6fffe04 	addi	sp,fp,-8
 4000fd8:	dfc00317 	ldw	ra,12(sp)
 4000fdc:	df000217 	ldw	fp,8(sp)
 4000fe0:	dc400117 	ldw	r17,4(sp)
 4000fe4:	dc000017 	ldw	r16,0(sp)
 4000fe8:	dec00404 	addi	sp,sp,16
 4000fec:	f800283a 	ret

04000ff0 <encoder_test>:

// Tests //////////////////////////////////////////////////////////////////////

static void encoder_test(){
 4000ff0:	defff904 	addi	sp,sp,-28
 4000ff4:	dfc00615 	stw	ra,24(sp)
 4000ff8:	df000515 	stw	fp,20(sp)
 4000ffc:	df000504 	addi	fp,sp,20

	while(1){

		float left_value = read_encoder_left() / 1000.0f;
 4001000:	40005780 	call	4000578 <read_encoder_left>
 4001004:	1009883a 	mov	r4,r2
 4001008:	40038280 	call	4003828 <__floatsisf>
 400100c:	1007883a 	mov	r3,r2
 4001010:	01511eb4 	movhi	r5,17530
 4001014:	1809883a 	mov	r4,r3
 4001018:	40029500 	call	4002950 <__divsf3>
 400101c:	1007883a 	mov	r3,r2
 4001020:	1805883a 	mov	r2,r3
 4001024:	e0bffb15 	stw	r2,-20(fp)
		float right_value = read_encoder_right() / 1000.0f;
 4001028:	40005a00 	call	40005a0 <read_encoder_right>
 400102c:	1009883a 	mov	r4,r2
 4001030:	40038280 	call	4003828 <__floatsisf>
 4001034:	1007883a 	mov	r3,r2
 4001038:	01511eb4 	movhi	r5,17530
 400103c:	1809883a 	mov	r4,r3
 4001040:	40029500 	call	4002950 <__divsf3>
 4001044:	1007883a 	mov	r3,r2
 4001048:	1805883a 	mov	r2,r3
 400104c:	e0bffc15 	stw	r2,-16(fp)

		uint8_t states_msg[9];

		states_msg[0] = KISS_PACKET_OPCODES__STATES;
 4001050:	00bfe404 	movi	r2,-112
 4001054:	e0bffd05 	stb	r2,-12(fp)
		memcpy(states_msg + 1, &left_value, sizeof(left_value));
 4001058:	e0bffd04 	addi	r2,fp,-12
 400105c:	10800044 	addi	r2,r2,1
 4001060:	01800104 	movi	r6,4
 4001064:	e17ffb04 	addi	r5,fp,-20
 4001068:	1009883a 	mov	r4,r2
 400106c:	40064200 	call	4006420 <memcpy>
		memcpy(states_msg + 5, &right_value, sizeof(right_value));
 4001070:	e0bffd04 	addi	r2,fp,-12
 4001074:	10800144 	addi	r2,r2,5
 4001078:	e0fffc04 	addi	r3,fp,-16
 400107c:	01800104 	movi	r6,4
 4001080:	180b883a 	mov	r5,r3
 4001084:	1009883a 	mov	r4,r2
 4001088:	40064200 	call	4006420 <memcpy>

		kiss_send_packet(&jtag_kiss, (const uint8_t *) states_msg, 9);
 400108c:	e0bffd04 	addi	r2,fp,-12
 4001090:	01800244 	movi	r6,9
 4001094:	100b883a 	mov	r5,r2
 4001098:	01010074 	movhi	r4,1025
 400109c:	2113e304 	addi	r4,r4,20364
 40010a0:	4001d1c0 	call	4001d1c <kiss_send_packet>

		usleep(10000);
 40010a4:	0109c404 	movi	r4,10000
 40010a8:	400f0f40 	call	400f0f4 <usleep>
	}
 40010ac:	003fd406 	br	4001000 <__alt_data_end+0xfc001000>

040010b0 <follow_line>:

}

static void follow_line(){
 40010b0:	defffc04 	addi	sp,sp,-16
 40010b4:	dfc00315 	stw	ra,12(sp)
 40010b8:	df000215 	stw	fp,8(sp)
 40010bc:	df000204 	addi	fp,sp,8

	uint32_t i;
	for(i = 0; i < 100000; i++){
 40010c0:	e03ffe15 	stw	zero,-8(fp)
 40010c4:	00002606 	br	4001160 <follow_line+0xb0>

		// line position -8 to 8
		int8_t line = read_line_detect() - 8;
 40010c8:	40005500 	call	4000550 <read_line_detect>
 40010cc:	10bffe04 	addi	r2,r2,-8
 40010d0:	e0bfff45 	stb	r2,-3(fp)

		int8_t yaw_bias = 0;
 40010d4:	e03fff05 	stb	zero,-4(fp)

		if(line < 0){
 40010d8:	e0bfff47 	ldb	r2,-3(fp)
 40010dc:	1000060e 	bge	r2,zero,40010f8 <follow_line+0x48>
			yaw_bias = line * -10;
 40010e0:	e0bfff43 	ldbu	r2,-3(fp)
 40010e4:	017ffd84 	movi	r5,-10
 40010e8:	1009883a 	mov	r4,r2
 40010ec:	40024600 	call	4002460 <__mulsi3>
 40010f0:	e0bfff05 	stb	r2,-4(fp)
 40010f4:	00000706 	br	4001114 <follow_line+0x64>
			//set_motors(-1 * 15, 15);
		} else if(line > 0){
 40010f8:	e0bfff47 	ldb	r2,-3(fp)
 40010fc:	0080050e 	bge	zero,r2,4001114 <follow_line+0x64>
			yaw_bias = line * -10;
 4001100:	e0bfff43 	ldbu	r2,-3(fp)
 4001104:	017ffd84 	movi	r5,-10
 4001108:	1009883a 	mov	r4,r2
 400110c:	40024600 	call	4002460 <__mulsi3>
 4001110:	e0bfff05 	stb	r2,-4(fp)
		} else {
			//set_motors(0, 0);
			//break;
		}

		set_motors(35 - yaw_bias, 35 + yaw_bias);
 4001114:	e0bfff07 	ldb	r2,-4(fp)
 4001118:	00c008c4 	movi	r3,35
 400111c:	1885c83a 	sub	r2,r3,r2
 4001120:	10ffffcc 	andi	r3,r2,65535
 4001124:	18e0001c 	xori	r3,r3,32768
 4001128:	18e00004 	addi	r3,r3,-32768
 400112c:	e0bfff07 	ldb	r2,-4(fp)
 4001130:	108008c4 	addi	r2,r2,35
 4001134:	10bfffcc 	andi	r2,r2,65535
 4001138:	10a0001c 	xori	r2,r2,32768
 400113c:	10a00004 	addi	r2,r2,-32768
 4001140:	100b883a 	mov	r5,r2
 4001144:	1809883a 	mov	r4,r3
 4001148:	40005c80 	call	40005c8 <set_motors>

		usleep(100);
 400114c:	01001904 	movi	r4,100
 4001150:	400f0f40 	call	400f0f4 <usleep>
}

static void follow_line(){

	uint32_t i;
	for(i = 0; i < 100000; i++){
 4001154:	e0bffe17 	ldw	r2,-8(fp)
 4001158:	10800044 	addi	r2,r2,1
 400115c:	e0bffe15 	stw	r2,-8(fp)
 4001160:	e0fffe17 	ldw	r3,-8(fp)
 4001164:	008000b4 	movhi	r2,2
 4001168:	10a1a7c4 	addi	r2,r2,-31073
 400116c:	10ffd62e 	bgeu	r2,r3,40010c8 <__alt_data_end+0xfc0010c8>

		usleep(100);

	}

	set_motors(0, 0);
 4001170:	000b883a 	mov	r5,zero
 4001174:	0009883a 	mov	r4,zero
 4001178:	40005c80 	call	40005c8 <set_motors>

}
 400117c:	0001883a 	nop
 4001180:	e037883a 	mov	sp,fp
 4001184:	dfc00117 	ldw	ra,4(sp)
 4001188:	df000017 	ldw	fp,0(sp)
 400118c:	dec00204 	addi	sp,sp,8
 4001190:	f800283a 	ret

04001194 <motor_ramp_test>:

static void motor_ramp_test(){
 4001194:	defffd04 	addi	sp,sp,-12
 4001198:	dfc00215 	stw	ra,8(sp)
 400119c:	df000115 	stw	fp,4(sp)
 40011a0:	df000104 	addi	fp,sp,4
	while(1){

		int16_t i;

		// Ramp up
		for(i = -255; i < 255; i++){
 40011a4:	00bfc044 	movi	r2,-255
 40011a8:	e0bfff0d 	sth	r2,-4(fp)
 40011ac:	00000a06 	br	40011d8 <motor_ramp_test+0x44>
			set_motors(i, i);
 40011b0:	e0bfff0f 	ldh	r2,-4(fp)
 40011b4:	e0ffff0f 	ldh	r3,-4(fp)
 40011b8:	180b883a 	mov	r5,r3
 40011bc:	1009883a 	mov	r4,r2
 40011c0:	40005c80 	call	40005c8 <set_motors>
			usleep(2000);
 40011c4:	0101f404 	movi	r4,2000
 40011c8:	400f0f40 	call	400f0f4 <usleep>
	while(1){

		int16_t i;

		// Ramp up
		for(i = -255; i < 255; i++){
 40011cc:	e0bfff0b 	ldhu	r2,-4(fp)
 40011d0:	10800044 	addi	r2,r2,1
 40011d4:	e0bfff0d 	sth	r2,-4(fp)
 40011d8:	e0bfff0f 	ldh	r2,-4(fp)
 40011dc:	10803fd0 	cmplti	r2,r2,255
 40011e0:	103ff31e 	bne	r2,zero,40011b0 <__alt_data_end+0xfc0011b0>
			set_motors(i, i);
			usleep(2000);
		}

		// Ramp down
		for(i = 255; i > -255; i--){
 40011e4:	00803fc4 	movi	r2,255
 40011e8:	e0bfff0d 	sth	r2,-4(fp)
 40011ec:	00000a06 	br	4001218 <motor_ramp_test+0x84>
			set_motors(i, i);
 40011f0:	e0bfff0f 	ldh	r2,-4(fp)
 40011f4:	e0ffff0f 	ldh	r3,-4(fp)
 40011f8:	180b883a 	mov	r5,r3
 40011fc:	1009883a 	mov	r4,r2
 4001200:	40005c80 	call	40005c8 <set_motors>
			usleep(2000);
 4001204:	0101f404 	movi	r4,2000
 4001208:	400f0f40 	call	400f0f4 <usleep>
			set_motors(i, i);
			usleep(2000);
		}

		// Ramp down
		for(i = 255; i > -255; i--){
 400120c:	e0bfff0b 	ldhu	r2,-4(fp)
 4001210:	10bfffc4 	addi	r2,r2,-1
 4001214:	e0bfff0d 	sth	r2,-4(fp)
 4001218:	e0bfff0f 	ldh	r2,-4(fp)
 400121c:	10bfc088 	cmpgei	r2,r2,-254
 4001220:	103ff31e 	bne	r2,zero,40011f0 <__alt_data_end+0xfc0011f0>
			set_motors(i, i);
			usleep(2000);
		}

		set_motors(0, 0);
 4001224:	000b883a 	mov	r5,zero
 4001228:	0009883a 	mov	r4,zero
 400122c:	40005c80 	call	40005c8 <set_motors>
		usleep(1000000);
 4001230:	010003f4 	movhi	r4,15
 4001234:	21109004 	addi	r4,r4,16960
 4001238:	400f0f40 	call	400f0f4 <usleep>

	}
 400123c:	003fd906 	br	40011a4 <__alt_data_end+0xfc0011a4>

04001240 <image_download_test>:

}

static void image_download_test(){
 4001240:	defffe04 	addi	sp,sp,-8
 4001244:	dfc00115 	stw	ra,4(sp)
 4001248:	df000015 	stw	fp,0(sp)
 400124c:	d839883a 	mov	fp,sp

	// Send image
	const static bool jpeg_transfer = false;
	if(jpeg_transfer){
 4001250:	d0a009c3 	ldbu	r2,-32729(gp)
 4001254:	10803fcc 	andi	r2,r2,255
 4001258:	1000011e 	bne	r2,zero,4001260 <image_download_test+0x20>
		//take_jpeg_picture_and_send_to_jtag();
	} else {
		// Naive Slow Transfer
		take_raw_picture_and_send_to_jtag();
 400125c:	40003c80 	call	40003c8 <take_raw_picture_and_send_to_jtag>
	}

}
 4001260:	0001883a 	nop
 4001264:	e037883a 	mov	sp,fp
 4001268:	dfc00117 	ldw	ra,4(sp)
 400126c:	df000017 	ldw	fp,0(sp)
 4001270:	dec00204 	addi	sp,sp,8
 4001274:	f800283a 	ret

04001278 <lidar_test>:
uint16_t nearest_distance = 0;
uint16_t nearest_direction = 0;

bool running = true;

void lidar_test(){
 4001278:	defffc04 	addi	sp,sp,-16
 400127c:	dfc00315 	stw	ra,12(sp)
 4001280:	df000215 	stw	fp,8(sp)
 4001284:	df000204 	addi	fp,sp,8

	lidar_error = false;
 4001288:	d0202405 	stb	zero,-32624(gp)

	IOWR_ALTERA_AVALON_PIO_DATA(LIDAR_MOTOR_EN_BASE, 1);
 400128c:	00c00044 	movi	r3,1
 4001290:	00820034 	movhi	r2,2048
 4001294:	10881004 	addi	r2,r2,8256
 4001298:	10c00035 	stwio	r3,0(r2)

	usleep(1000000);
 400129c:	010003f4 	movhi	r4,15
 40012a0:	21109004 	addi	r4,r4,16960
 40012a4:	400f0f40 	call	400f0f4 <usleep>

	lidar_state = LIDAR_STATE_WAIT_SYNC;
 40012a8:	d0202315 	stw	zero,-32628(gp)

	// Start LIDAR scan
	{
		*LIDAR_UART_TX_DATA = 0xA5;
 40012ac:	00820034 	movhi	r2,2048
 40012b0:	10843904 	addi	r2,r2,4324
 40012b4:	00c02944 	movi	r3,165
 40012b8:	10c00015 	stw	r3,0(r2)
		*LIDAR_UART_TX_DATA = 0x20;
 40012bc:	00820034 	movhi	r2,2048
 40012c0:	10843904 	addi	r2,r2,4324
 40012c4:	00c00804 	movi	r3,32
 40012c8:	10c00015 	stw	r3,0(r2)
	}

	uint32_t i;
	for(i = 0; i < 210;){
 40012cc:	e03ffe15 	stw	zero,-8(fp)
 40012d0:	00004d06 	br	4001408 <lidar_test+0x190>

		if(!running | lidar_error){
 40012d4:	d0a00983 	ldbu	r2,-32730(gp)
 40012d8:	1080005c 	xori	r2,r2,1
 40012dc:	1007883a 	mov	r3,r2
 40012e0:	d0a02403 	ldbu	r2,-32624(gp)
 40012e4:	1884b03a 	or	r2,r3,r2
 40012e8:	10803fcc 	andi	r2,r2,255
 40012ec:	10004a1e 	bne	r2,zero,4001418 <lidar_test+0x1a0>
			break;
		}

		if(new_nearest){
 40012f0:	d0a02503 	ldbu	r2,-32620(gp)
 40012f4:	10803fcc 	andi	r2,r2,255
 40012f8:	10004326 	beq	r2,zero,4001408 <lidar_test+0x190>

			new_nearest = false;
 40012fc:	d0202505 	stb	zero,-32620(gp)
			char buffer[32];
			int len = snprintf(buffer, 32, "\x81%0d %d", nearest_direction, nearest_distance);
			kiss_send_packet(&jtag_kiss, (const uint8_t *) buffer, len);
			*/

			int16_t drive = 0;
 4001300:	e03fff0d 	sth	zero,-4(fp)
			int16_t yaw = 0;
 4001304:	e03fff8d 	sth	zero,-2(fp)

			// LIDAR driving
			drive = ( nearest_distance - 2000 ) / 10; // stay 0.25meters away from nearest object
 4001308:	d0a0258b 	ldhu	r2,-32618(gp)
 400130c:	10bfffcc 	andi	r2,r2,65535
 4001310:	10be0c04 	addi	r2,r2,-2000
 4001314:	01400284 	movi	r5,10
 4001318:	1009883a 	mov	r4,r2
 400131c:	40022ac0 	call	40022ac <__divsi3>
 4001320:	e0bfff0d 	sth	r2,-4(fp)

			if(drive > 128){
 4001324:	e0bfff0f 	ldh	r2,-4(fp)
 4001328:	10802050 	cmplti	r2,r2,129
 400132c:	1000031e 	bne	r2,zero,400133c <lidar_test+0xc4>
				drive = 128;
 4001330:	00802004 	movi	r2,128
 4001334:	e0bfff0d 	sth	r2,-4(fp)
 4001338:	00000506 	br	4001350 <lidar_test+0xd8>
			} else if(drive < -128){
 400133c:	e0bfff0f 	ldh	r2,-4(fp)
 4001340:	10bfe008 	cmpgei	r2,r2,-128
 4001344:	1000021e 	bne	r2,zero,4001350 <lidar_test+0xd8>
				drive = -128;
 4001348:	00bfe004 	movi	r2,-128
 400134c:	e0bfff0d 	sth	r2,-4(fp)
			}

			// LIDAR steering
			if(nearest_direction > 11520){	// LEFT
 4001350:	d0a0260b 	ldhu	r2,-32616(gp)
 4001354:	10bfffcc 	andi	r2,r2,65535
 4001358:	108b4070 	cmpltui	r2,r2,11521
 400135c:	10000a1e 	bne	r2,zero,4001388 <lidar_test+0x110>

				yaw = ( 23040 - nearest_direction )  / -32;
 4001360:	d0a0260b 	ldhu	r2,-32616(gp)
 4001364:	10bfffcc 	andi	r2,r2,65535
 4001368:	00d68004 	movi	r3,23040
 400136c:	1885c83a 	sub	r2,r3,r2
 4001370:	1000010e 	bge	r2,zero,4001378 <lidar_test+0x100>
 4001374:	108007c4 	addi	r2,r2,31
 4001378:	1005d17a 	srai	r2,r2,5
 400137c:	0085c83a 	sub	r2,zero,r2
 4001380:	e0bfff8d 	sth	r2,-2(fp)
 4001384:	00000406 	br	4001398 <lidar_test+0x120>

			} else {						// RIGHT

				yaw = ( nearest_direction )  / 32;
 4001388:	d0a0260b 	ldhu	r2,-32616(gp)
 400138c:	10bfffcc 	andi	r2,r2,65535
 4001390:	1004d17a 	srli	r2,r2,5
 4001394:	e0bfff8d 	sth	r2,-2(fp)

			}

			if(yaw > 128){
 4001398:	e0bfff8f 	ldh	r2,-2(fp)
 400139c:	10802050 	cmplti	r2,r2,129
 40013a0:	1000031e 	bne	r2,zero,40013b0 <lidar_test+0x138>
				yaw = 128;
 40013a4:	00802004 	movi	r2,128
 40013a8:	e0bfff8d 	sth	r2,-2(fp)
 40013ac:	00000506 	br	40013c4 <lidar_test+0x14c>
			} else if(yaw < -128){
 40013b0:	e0bfff8f 	ldh	r2,-2(fp)
 40013b4:	10bfe008 	cmpgei	r2,r2,-128
 40013b8:	1000021e 	bne	r2,zero,40013c4 <lidar_test+0x14c>
				yaw = -128;
 40013bc:	00bfe004 	movi	r2,-128
 40013c0:	e0bfff8d 	sth	r2,-2(fp)
			}

			set_motors(drive + yaw, drive - yaw);
 40013c4:	e0ffff0b 	ldhu	r3,-4(fp)
 40013c8:	e0bfff8b 	ldhu	r2,-2(fp)
 40013cc:	1885883a 	add	r2,r3,r2
 40013d0:	113fffcc 	andi	r4,r2,65535
 40013d4:	2120001c 	xori	r4,r4,32768
 40013d8:	21200004 	addi	r4,r4,-32768
 40013dc:	e0ffff0b 	ldhu	r3,-4(fp)
 40013e0:	e0bfff8b 	ldhu	r2,-2(fp)
 40013e4:	1885c83a 	sub	r2,r3,r2
 40013e8:	10bfffcc 	andi	r2,r2,65535
 40013ec:	10a0001c 	xori	r2,r2,32768
 40013f0:	10a00004 	addi	r2,r2,-32768
 40013f4:	100b883a 	mov	r5,r2
 40013f8:	40005c80 	call	40005c8 <set_motors>

			i++;
 40013fc:	e0bffe17 	ldw	r2,-8(fp)
 4001400:	10800044 	addi	r2,r2,1
 4001404:	e0bffe15 	stw	r2,-8(fp)
		*LIDAR_UART_TX_DATA = 0xA5;
		*LIDAR_UART_TX_DATA = 0x20;
	}

	uint32_t i;
	for(i = 0; i < 210;){
 4001408:	e0bffe17 	ldw	r2,-8(fp)
 400140c:	108034b0 	cmpltui	r2,r2,210
 4001410:	103fb01e 	bne	r2,zero,40012d4 <__alt_data_end+0xfc0012d4>
 4001414:	00000106 	br	400141c <lidar_test+0x1a4>

		if(!running | lidar_error){
			break;
 4001418:	0001883a 	nop

		}

	}

	set_motors(0, 0);
 400141c:	000b883a 	mov	r5,zero
 4001420:	0009883a 	mov	r4,zero
 4001424:	40005c80 	call	40005c8 <set_motors>

	// Stop LIDAR scan
	{
		*LIDAR_UART_TX_DATA = 0xA5;
 4001428:	00820034 	movhi	r2,2048
 400142c:	10843904 	addi	r2,r2,4324
 4001430:	00c02944 	movi	r3,165
 4001434:	10c00015 	stw	r3,0(r2)
		*LIDAR_UART_TX_DATA = 0x25;
 4001438:	00820034 	movhi	r2,2048
 400143c:	10843904 	addi	r2,r2,4324
 4001440:	00c00944 	movi	r3,37
 4001444:	10c00015 	stw	r3,0(r2)
	}

	IOWR_ALTERA_AVALON_PIO_DATA(LIDAR_MOTOR_EN_BASE, 0);
 4001448:	0007883a 	mov	r3,zero
 400144c:	00820034 	movhi	r2,2048
 4001450:	10881004 	addi	r2,r2,8256
 4001454:	10c00035 	stwio	r3,0(r2)

}
 4001458:	0001883a 	nop
 400145c:	e037883a 	mov	sp,fp
 4001460:	dfc00117 	ldw	ra,4(sp)
 4001464:	df000017 	ldw	fp,0(sp)
 4001468:	dec00204 	addi	sp,sp,8
 400146c:	f800283a 	ret

04001470 <ble_uart_handler>:
bool stop_event = false;
bool line_event = false;
bool follow_event = false;
bool tdoa_event = false;

void ble_uart_handler(void * context){
 4001470:	defffa04 	addi	sp,sp,-24
 4001474:	dfc00515 	stw	ra,20(sp)
 4001478:	df000415 	stw	fp,16(sp)
 400147c:	dc000315 	stw	r16,12(sp)
 4001480:	df000404 	addi	fp,sp,16
 4001484:	e13ffe15 	stw	r4,-8(fp)

	if( (*BLE_UART_STATUS & 0x0080 ) != 0){
 4001488:	00820034 	movhi	r2,2048
 400148c:	10803204 	addi	r2,r2,200
 4001490:	10800017 	ldw	r2,0(r2)
 4001494:	1080200c 	andi	r2,r2,128
 4001498:	10009426 	beq	r2,zero,40016ec <ble_uart_handler+0x27c>

		uint8_t byte = *BLE_UART_RX_DATA;
 400149c:	00820034 	movhi	r2,2048
 40014a0:	10803004 	addi	r2,r2,192
 40014a4:	10800017 	ldw	r2,0(r2)
 40014a8:	e0bffd05 	stb	r2,-12(fp)

		ble_buffer[ble_buffer_position++] = byte;
 40014ac:	d0a02683 	ldbu	r2,-32614(gp)
 40014b0:	10c00044 	addi	r3,r2,1
 40014b4:	d0e02685 	stb	r3,-32614(gp)
 40014b8:	10c03fcc 	andi	r3,r2,255
 40014bc:	00810074 	movhi	r2,1025
 40014c0:	1093d404 	addi	r2,r2,20304
 40014c4:	10c5883a 	add	r2,r2,r3
 40014c8:	e0fffd03 	ldbu	r3,-12(fp)
 40014cc:	10c00005 	stb	r3,0(r2)

		if((byte & 0xFF) == '\n'){
 40014d0:	e0bffd03 	ldbu	r2,-12(fp)
 40014d4:	10800298 	cmpnei	r2,r2,10
 40014d8:	1000841e 	bne	r2,zero,40016ec <ble_uart_handler+0x27c>
			 * M+000,+000 for stop
			 * M+255,+255 forward
			 * M-255,-255 reverse
			 * M-255,+255 right
			 */
			if( ble_buffer[0] == 'M' && ble_buffer_position == 11 ){
 40014dc:	00810074 	movhi	r2,1025
 40014e0:	1093d404 	addi	r2,r2,20304
 40014e4:	10800003 	ldbu	r2,0(r2)
 40014e8:	10803fcc 	andi	r2,r2,255
 40014ec:	10801358 	cmpnei	r2,r2,77
 40014f0:	10005a1e 	bne	r2,zero,400165c <ble_uart_handler+0x1ec>
 40014f4:	d0a02683 	ldbu	r2,-32614(gp)
 40014f8:	10803fcc 	andi	r2,r2,255
 40014fc:	108002d8 	cmpnei	r2,r2,11
 4001500:	1000561e 	bne	r2,zero,400165c <ble_uart_handler+0x1ec>

				int16_t left = 1;
 4001504:	00800044 	movi	r2,1
 4001508:	e0bffc0d 	sth	r2,-16(fp)
				int16_t right = 1;
 400150c:	00800044 	movi	r2,1
 4001510:	e0bffc8d 	sth	r2,-14(fp)

				// Deal with negatives
				if(ble_buffer[1] == '-'){
 4001514:	00810074 	movhi	r2,1025
 4001518:	1093d404 	addi	r2,r2,20304
 400151c:	10800043 	ldbu	r2,1(r2)
 4001520:	10803fcc 	andi	r2,r2,255
 4001524:	10800b58 	cmpnei	r2,r2,45
 4001528:	1000021e 	bne	r2,zero,4001534 <ble_uart_handler+0xc4>
					left = -1;
 400152c:	00bfffc4 	movi	r2,-1
 4001530:	e0bffc0d 	sth	r2,-16(fp)
				}
				if(ble_buffer[6] == '-'){
 4001534:	00810074 	movhi	r2,1025
 4001538:	1093d404 	addi	r2,r2,20304
 400153c:	10800183 	ldbu	r2,6(r2)
 4001540:	10803fcc 	andi	r2,r2,255
 4001544:	10800b58 	cmpnei	r2,r2,45
 4001548:	1000021e 	bne	r2,zero,4001554 <ble_uart_handler+0xe4>
					right = -1;
 400154c:	00bfffc4 	movi	r2,-1
 4001550:	e0bffc8d 	sth	r2,-14(fp)
				}

				// Convert text to magnitude
				left *=   ( ( ble_buffer[2] - '0' ) * 100 )
 4001554:	00810074 	movhi	r2,1025
 4001558:	1093d404 	addi	r2,r2,20304
 400155c:	10800083 	ldbu	r2,2(r2)
 4001560:	10803fcc 	andi	r2,r2,255
 4001564:	10bff404 	addi	r2,r2,-48
 4001568:	01401904 	movi	r5,100
 400156c:	1009883a 	mov	r4,r2
 4001570:	40024600 	call	4002460 <__mulsi3>
 4001574:	1021883a 	mov	r16,r2
						+ ( ( ble_buffer[3] - '0' ) *  10 )
 4001578:	00810074 	movhi	r2,1025
 400157c:	1093d404 	addi	r2,r2,20304
 4001580:	108000c3 	ldbu	r2,3(r2)
 4001584:	10803fcc 	andi	r2,r2,255
 4001588:	10bff404 	addi	r2,r2,-48
 400158c:	01400284 	movi	r5,10
 4001590:	1009883a 	mov	r4,r2
 4001594:	40024600 	call	4002460 <__mulsi3>
 4001598:	8087883a 	add	r3,r16,r2
						+ ( ( ble_buffer[4] - '0' )       );
 400159c:	00810074 	movhi	r2,1025
 40015a0:	1093d404 	addi	r2,r2,20304
 40015a4:	10800103 	ldbu	r2,4(r2)
 40015a8:	10803fcc 	andi	r2,r2,255
 40015ac:	10bff404 	addi	r2,r2,-48
 40015b0:	1885883a 	add	r2,r3,r2
				if(ble_buffer[6] == '-'){
					right = -1;
				}

				// Convert text to magnitude
				left *=   ( ( ble_buffer[2] - '0' ) * 100 )
 40015b4:	1007883a 	mov	r3,r2
 40015b8:	e0bffc0b 	ldhu	r2,-16(fp)
 40015bc:	100b883a 	mov	r5,r2
 40015c0:	1809883a 	mov	r4,r3
 40015c4:	40024600 	call	4002460 <__mulsi3>
 40015c8:	e0bffc0d 	sth	r2,-16(fp)
						+ ( ( ble_buffer[3] - '0' ) *  10 )
						+ ( ( ble_buffer[4] - '0' )       );

				right *=   ( ( ble_buffer[7] - '0' ) * 100 )
 40015cc:	00810074 	movhi	r2,1025
 40015d0:	1093d404 	addi	r2,r2,20304
 40015d4:	108001c3 	ldbu	r2,7(r2)
 40015d8:	10803fcc 	andi	r2,r2,255
 40015dc:	10bff404 	addi	r2,r2,-48
 40015e0:	01401904 	movi	r5,100
 40015e4:	1009883a 	mov	r4,r2
 40015e8:	40024600 	call	4002460 <__mulsi3>
 40015ec:	1021883a 	mov	r16,r2
						 + ( ( ble_buffer[8] - '0' ) *  10 )
 40015f0:	00810074 	movhi	r2,1025
 40015f4:	1093d404 	addi	r2,r2,20304
 40015f8:	10800203 	ldbu	r2,8(r2)
 40015fc:	10803fcc 	andi	r2,r2,255
 4001600:	10bff404 	addi	r2,r2,-48
 4001604:	01400284 	movi	r5,10
 4001608:	1009883a 	mov	r4,r2
 400160c:	40024600 	call	4002460 <__mulsi3>
 4001610:	8087883a 	add	r3,r16,r2
						 + ( ( ble_buffer[9] - '0' )       );
 4001614:	00810074 	movhi	r2,1025
 4001618:	1093d404 	addi	r2,r2,20304
 400161c:	10800243 	ldbu	r2,9(r2)
 4001620:	10803fcc 	andi	r2,r2,255
 4001624:	10bff404 	addi	r2,r2,-48
 4001628:	1885883a 	add	r2,r3,r2
				// Convert text to magnitude
				left *=   ( ( ble_buffer[2] - '0' ) * 100 )
						+ ( ( ble_buffer[3] - '0' ) *  10 )
						+ ( ( ble_buffer[4] - '0' )       );

				right *=   ( ( ble_buffer[7] - '0' ) * 100 )
 400162c:	1007883a 	mov	r3,r2
 4001630:	e0bffc8b 	ldhu	r2,-14(fp)
 4001634:	100b883a 	mov	r5,r2
 4001638:	1809883a 	mov	r4,r3
 400163c:	40024600 	call	4002460 <__mulsi3>
 4001640:	e0bffc8d 	sth	r2,-14(fp)
						 + ( ( ble_buffer[8] - '0' ) *  10 )
						 + ( ( ble_buffer[9] - '0' )       );

				set_motors(left, right);
 4001644:	e0bffc0f 	ldh	r2,-16(fp)
 4001648:	e0fffc8f 	ldh	r3,-14(fp)
 400164c:	180b883a 	mov	r5,r3
 4001650:	1009883a 	mov	r4,r2
 4001654:	40005c80 	call	40005c8 <set_motors>
			 * M+000,+000 for stop
			 * M+255,+255 forward
			 * M-255,-255 reverse
			 * M-255,+255 right
			 */
			if( ble_buffer[0] == 'M' && ble_buffer_position == 11 ){
 4001658:	00002306 	br	40016e8 <ble_uart_handler+0x278>
						 + ( ( ble_buffer[8] - '0' ) *  10 )
						 + ( ( ble_buffer[9] - '0' )       );

				set_motors(left, right);

			} else if(ble_buffer[0] == 'S') {
 400165c:	00810074 	movhi	r2,1025
 4001660:	1093d404 	addi	r2,r2,20304
 4001664:	10800003 	ldbu	r2,0(r2)
 4001668:	10803fcc 	andi	r2,r2,255
 400166c:	108014d8 	cmpnei	r2,r2,83
 4001670:	1000031e 	bne	r2,zero,4001680 <ble_uart_handler+0x210>
				stop_event = true;
 4001674:	00800044 	movi	r2,1
 4001678:	d0a026c5 	stb	r2,-32613(gp)
 400167c:	00001a06 	br	40016e8 <ble_uart_handler+0x278>
			} else if(ble_buffer[0] == 'F'){
 4001680:	00810074 	movhi	r2,1025
 4001684:	1093d404 	addi	r2,r2,20304
 4001688:	10800003 	ldbu	r2,0(r2)
 400168c:	10803fcc 	andi	r2,r2,255
 4001690:	10801198 	cmpnei	r2,r2,70
 4001694:	1000031e 	bne	r2,zero,40016a4 <ble_uart_handler+0x234>
				follow_event = true;
 4001698:	00800044 	movi	r2,1
 400169c:	d0a02745 	stb	r2,-32611(gp)
 40016a0:	00001106 	br	40016e8 <ble_uart_handler+0x278>
			} else if(ble_buffer[0] == 'L'){
 40016a4:	00810074 	movhi	r2,1025
 40016a8:	1093d404 	addi	r2,r2,20304
 40016ac:	10800003 	ldbu	r2,0(r2)
 40016b0:	10803fcc 	andi	r2,r2,255
 40016b4:	10801318 	cmpnei	r2,r2,76
 40016b8:	1000031e 	bne	r2,zero,40016c8 <ble_uart_handler+0x258>
				line_event = true;
 40016bc:	00800044 	movi	r2,1
 40016c0:	d0a02705 	stb	r2,-32612(gp)
 40016c4:	00000806 	br	40016e8 <ble_uart_handler+0x278>
			} else if(ble_buffer[0] == 'T'){
 40016c8:	00810074 	movhi	r2,1025
 40016cc:	1093d404 	addi	r2,r2,20304
 40016d0:	10800003 	ldbu	r2,0(r2)
 40016d4:	10803fcc 	andi	r2,r2,255
 40016d8:	10801518 	cmpnei	r2,r2,84
 40016dc:	1000021e 	bne	r2,zero,40016e8 <ble_uart_handler+0x278>
				tdoa_event = true;
 40016e0:	00800044 	movi	r2,1
 40016e4:	d0a02785 	stb	r2,-32610(gp)
				while( ! ( (*BLE_UART_STATUS) & 0x0040 ) );
				*BLE_UART_TX_DATA = ble_buffer[i];
			}
			 */

			ble_buffer_position = 0;
 40016e8:	d0202685 	stb	zero,-32614(gp)

		}

	}

}
 40016ec:	0001883a 	nop
 40016f0:	e6ffff04 	addi	sp,fp,-4
 40016f4:	dfc00217 	ldw	ra,8(sp)
 40016f8:	df000117 	ldw	fp,4(sp)
 40016fc:	dc000017 	ldw	r16,0(sp)
 4001700:	dec00304 	addi	sp,sp,12
 4001704:	f800283a 	ret

04001708 <lidar_uart_handler>:

// Lidar code simply gets direction of nearest obstacle

void lidar_uart_handler(void * context){
 4001708:	defffb04 	addi	sp,sp,-20
 400170c:	df000415 	stw	fp,16(sp)
 4001710:	df000404 	addi	fp,sp,16
 4001714:	e13fff15 	stw	r4,-4(fp)

	uint16_t status = *LIDAR_UART_STATUS;
 4001718:	00820034 	movhi	r2,2048
 400171c:	10843a04 	addi	r2,r2,4328
 4001720:	10800017 	ldw	r2,0(r2)
 4001724:	e0bffc0d 	sth	r2,-16(fp)

	if( (status & 0x0008) != 0){
 4001728:	e0bffc0b 	ldhu	r2,-16(fp)
 400172c:	1080020c 	andi	r2,r2,8
 4001730:	10000726 	beq	r2,zero,4001750 <lidar_uart_handler+0x48>
		volatile uint8_t dummy = *LIDAR_UART_RX_DATA;
 4001734:	00820034 	movhi	r2,2048
 4001738:	10843804 	addi	r2,r2,4320
 400173c:	10800017 	ldw	r2,0(r2)
 4001740:	e0bffe05 	stb	r2,-8(fp)
		lidar_error = true;
 4001744:	00800044 	movi	r2,1
 4001748:	d0a02405 	stb	r2,-32624(gp)
		return;
 400174c:	00006e06 	br	4001908 <lidar_uart_handler+0x200>
	}

	if( (status & 0x0080 ) != 0){
 4001750:	e0bffc0b 	ldhu	r2,-16(fp)
 4001754:	1080200c 	andi	r2,r2,128
 4001758:	10006b26 	beq	r2,zero,4001908 <lidar_uart_handler+0x200>

		uint8_t byte = *LIDAR_UART_RX_DATA;
 400175c:	00820034 	movhi	r2,2048
 4001760:	10843804 	addi	r2,r2,4320
 4001764:	10800017 	ldw	r2,0(r2)
 4001768:	e0bffc85 	stb	r2,-14(fp)

		if(lidar_state == LIDAR_STATE_WAIT_SYNC){
 400176c:	d0a02317 	ldw	r2,-32628(gp)
 4001770:	1000061e 	bne	r2,zero,400178c <lidar_uart_handler+0x84>

			if(byte == LIDAR_SYNC_1){
 4001774:	e0bffc83 	ldbu	r2,-14(fp)
 4001778:	10802958 	cmpnei	r2,r2,165
 400177c:	1000621e 	bne	r2,zero,4001908 <lidar_uart_handler+0x200>

				lidar_state = LIDAR_STATE_SYNC_1;
 4001780:	00800044 	movi	r2,1
 4001784:	d0a02315 	stw	r2,-32628(gp)
 4001788:	00005f06 	br	4001908 <lidar_uart_handler+0x200>

			}

		}

		else if(lidar_state == LIDAR_STATE_SYNC_1){
 400178c:	d0a02317 	ldw	r2,-32628(gp)
 4001790:	10800058 	cmpnei	r2,r2,1
 4001794:	1000081e 	bne	r2,zero,40017b8 <lidar_uart_handler+0xb0>

			if(byte == LIDAR_SYNC_2){
 4001798:	e0bffc83 	ldbu	r2,-14(fp)
 400179c:	10801698 	cmpnei	r2,r2,90
 40017a0:	1000031e 	bne	r2,zero,40017b0 <lidar_uart_handler+0xa8>
				lidar_state = LIDAR_STATE_SYNC_2;
 40017a4:	00800084 	movi	r2,2
 40017a8:	d0a02315 	stw	r2,-32628(gp)
 40017ac:	00005606 	br	4001908 <lidar_uart_handler+0x200>
			} else {
				lidar_state = LIDAR_STATE_WAIT_SYNC;
 40017b0:	d0202315 	stw	zero,-32628(gp)
 40017b4:	00005406 	br	4001908 <lidar_uart_handler+0x200>
			}

		}

		else if(lidar_state >= LIDAR_STATE_SYNC_2 && lidar_state <= LIDAR_STATE_SYNC_6){
 40017b8:	d0a02317 	ldw	r2,-32628(gp)
 40017bc:	108000b0 	cmpltui	r2,r2,2
 40017c0:	1000071e 	bne	r2,zero,40017e0 <lidar_uart_handler+0xd8>
 40017c4:	d0a02317 	ldw	r2,-32628(gp)
 40017c8:	108001e8 	cmpgeui	r2,r2,7
 40017cc:	1000041e 	bne	r2,zero,40017e0 <lidar_uart_handler+0xd8>

			lidar_state++;
 40017d0:	d0a02317 	ldw	r2,-32628(gp)
 40017d4:	10800044 	addi	r2,r2,1
 40017d8:	d0a02315 	stw	r2,-32628(gp)
 40017dc:	00004a06 	br	4001908 <lidar_uart_handler+0x200>

		}

		else if(lidar_state >= LIDAR_STATE_DATA_0 && lidar_state <= LIDAR_STATE_DATA_3){
 40017e0:	d0a02317 	ldw	r2,-32628(gp)
 40017e4:	108001f0 	cmpltui	r2,r2,7
 40017e8:	10000d1e 	bne	r2,zero,4001820 <lidar_uart_handler+0x118>
 40017ec:	d0a02317 	ldw	r2,-32628(gp)
 40017f0:	108002e8 	cmpgeui	r2,r2,11
 40017f4:	10000a1e 	bne	r2,zero,4001820 <lidar_uart_handler+0x118>

			lidar_data_point[lidar_state - LIDAR_STATE_DATA_0] = byte;
 40017f8:	d0a02317 	ldw	r2,-32628(gp)
 40017fc:	10fffe44 	addi	r3,r2,-7
 4001800:	d0a028c4 	addi	r2,gp,-32605
 4001804:	1885883a 	add	r2,r3,r2
 4001808:	e0fffc83 	ldbu	r3,-14(fp)
 400180c:	10c00005 	stb	r3,0(r2)

			lidar_state++;
 4001810:	d0a02317 	ldw	r2,-32628(gp)
 4001814:	10800044 	addi	r2,r2,1
 4001818:	d0a02315 	stw	r2,-32628(gp)
 400181c:	00003a06 	br	4001908 <lidar_uart_handler+0x200>

		}

		else if(lidar_state == LIDAR_STATE_DATA_4){
 4001820:	d0a02317 	ldw	r2,-32628(gp)
 4001824:	108002d8 	cmpnei	r2,r2,11
 4001828:	1000371e 	bne	r2,zero,4001908 <lidar_uart_handler+0x200>

			lidar_data_point[4] = byte;
 400182c:	e0bffc83 	ldbu	r2,-14(fp)
 4001830:	d0a029c5 	stb	r2,-32601(gp)
			char buffer[20];
			int len = snprintf(buffer, 20, "\x81%02X%02X%02X%02X%02X", lidar_data_point[0], lidar_data_point[1], lidar_data_point[2], lidar_data_point[3], lidar_data_point[4]);
			kiss_send_packet(&jtag_kiss, (const uint8_t *) buffer, len);
			*/

			uint8_t start = lidar_data_point[0] & 0x3;
 4001834:	d0a028c3 	ldbu	r2,-32605(gp)
 4001838:	108000cc 	andi	r2,r2,3
 400183c:	e0bffcc5 	stb	r2,-13(fp)

			if(start == 0x01){
 4001840:	e0bffcc3 	ldbu	r2,-13(fp)
 4001844:	10800058 	cmpnei	r2,r2,1
 4001848:	10000d1e 	bne	r2,zero,4001880 <lidar_uart_handler+0x178>

				// beginning of scan, report nearest and restart

				if(smallest_distance != 10000){
 400184c:	d0a0090b 	ldhu	r2,-32732(gp)
 4001850:	10bfffcc 	andi	r2,r2,65535
 4001854:	1089c420 	cmpeqi	r2,r2,10000
 4001858:	1000061e 	bne	r2,zero,4001874 <lidar_uart_handler+0x16c>

					nearest_distance = smallest_distance;
 400185c:	d0a0090b 	ldhu	r2,-32732(gp)
 4001860:	d0a0258d 	sth	r2,-32618(gp)
					nearest_direction = smallest_distance_angle;
 4001864:	d0a0248b 	ldhu	r2,-32622(gp)
 4001868:	d0a0260d 	sth	r2,-32616(gp)

					new_nearest = true;
 400186c:	00800044 	movi	r2,1
 4001870:	d0a02505 	stb	r2,-32620(gp)

				}

				smallest_distance = 10000;
 4001874:	0089c404 	movi	r2,10000
 4001878:	d0a0090d 	sth	r2,-32732(gp)
				smallest_distance_angle = 0;
 400187c:	d020248d 	sth	zero,-32622(gp)

			}

			uint8_t quality = lidar_data_point[0] >> 2;
 4001880:	d0a028c3 	ldbu	r2,-32605(gp)
 4001884:	10803fcc 	andi	r2,r2,255
 4001888:	1004d0ba 	srli	r2,r2,2
 400188c:	e0bffd05 	stb	r2,-12(fp)

			// Ignore data with quality below 3
			if(quality > 3){
 4001890:	e0bffd03 	ldbu	r2,-12(fp)
 4001894:	10800130 	cmpltui	r2,r2,4
 4001898:	1000191e 	bne	r2,zero,4001900 <lidar_uart_handler+0x1f8>

				uint16_t distance = ( lidar_data_point[3] + ( lidar_data_point[4] << 8 ) );
 400189c:	d0a02983 	ldbu	r2,-32602(gp)
 40018a0:	10803fcc 	andi	r2,r2,255
 40018a4:	d0e029c3 	ldbu	r3,-32601(gp)
 40018a8:	18c03fcc 	andi	r3,r3,255
 40018ac:	1806923a 	slli	r3,r3,8
 40018b0:	10c5883a 	add	r2,r2,r3
 40018b4:	e0bffd8d 	sth	r2,-10(fp)

				// Ignore invalid distances
				if (distance > 4){
 40018b8:	e0bffd8b 	ldhu	r2,-10(fp)
 40018bc:	10800170 	cmpltui	r2,r2,5
 40018c0:	10000f1e 	bne	r2,zero,4001900 <lidar_uart_handler+0x1f8>

					if (distance < smallest_distance){
 40018c4:	d0a0090b 	ldhu	r2,-32732(gp)
 40018c8:	e0fffd8b 	ldhu	r3,-10(fp)
 40018cc:	10bfffcc 	andi	r2,r2,65535
 40018d0:	18800b2e 	bgeu	r3,r2,4001900 <lidar_uart_handler+0x1f8>

						smallest_distance = distance;
 40018d4:	e0bffd8b 	ldhu	r2,-10(fp)
 40018d8:	d0a0090d 	sth	r2,-32732(gp)
						smallest_distance_angle = ( ( lidar_data_point[1] >> 1 ) + ( lidar_data_point[2] << 7 ) );
 40018dc:	d0a02903 	ldbu	r2,-32604(gp)
 40018e0:	10803fcc 	andi	r2,r2,255
 40018e4:	1004d07a 	srli	r2,r2,1
 40018e8:	10803fcc 	andi	r2,r2,255
 40018ec:	d0e02943 	ldbu	r3,-32603(gp)
 40018f0:	18c03fcc 	andi	r3,r3,255
 40018f4:	180691fa 	slli	r3,r3,7
 40018f8:	10c5883a 	add	r2,r2,r3
 40018fc:	d0a0248d 	sth	r2,-32622(gp)

				}

			}

			lidar_state = LIDAR_STATE_DATA_0;
 4001900:	008001c4 	movi	r2,7
 4001904:	d0a02315 	stw	r2,-32628(gp)

		}

	}

}
 4001908:	e037883a 	mov	sp,fp
 400190c:	df000017 	ldw	fp,0(sp)
 4001910:	dec00104 	addi	sp,sp,4
 4001914:	f800283a 	ret

04001918 <jtag_uart_handler>:

bool packet_ready = false;
uint16_t packet_length = 0;

void jtag_uart_handler(void * context){
 4001918:	defffa04 	addi	sp,sp,-24
 400191c:	dfc00515 	stw	ra,20(sp)
 4001920:	df000415 	stw	fp,16(sp)
 4001924:	df000404 	addi	fp,sp,16
 4001928:	e13fff15 	stw	r4,-4(fp)

	bool has_data = true;
 400192c:	00800044 	movi	r2,1
 4001930:	e0bffc05 	stb	r2,-16(fp)

	while(has_data){
 4001934:	00001606 	br	4001990 <jtag_uart_handler+0x78>

		// Read UART and see if there is data
		uint32_t data = *JTAG_UART_DATA;
 4001938:	00820034 	movhi	r2,2048
 400193c:	10842404 	addi	r2,r2,4240
 4001940:	10800017 	ldw	r2,0(r2)
 4001944:	e0bffd15 	stw	r2,-12(fp)
		if( (data & JTAG_UART__MASK__RVALID ) != 0){
 4001948:	e0bffd17 	ldw	r2,-12(fp)
 400194c:	10a0000c 	andi	r2,r2,32768
 4001950:	10000e26 	beq	r2,zero,400198c <jtag_uart_handler+0x74>

			uint16_t len = kiss_rx_byte(&jtag_kiss, (uint8_t)( data & 0xFF ) );
 4001954:	e0bffd17 	ldw	r2,-12(fp)
 4001958:	10803fcc 	andi	r2,r2,255
 400195c:	100b883a 	mov	r5,r2
 4001960:	01010074 	movhi	r4,1025
 4001964:	2113e304 	addi	r4,r4,20364
 4001968:	4001f240 	call	4001f24 <kiss_rx_byte>
 400196c:	e0bffe0d 	sth	r2,-8(fp)

			if(len > 0){
 4001970:	e0bffe0b 	ldhu	r2,-8(fp)
 4001974:	10000626 	beq	r2,zero,4001990 <jtag_uart_handler+0x78>

				packet_ready = true;
 4001978:	00800044 	movi	r2,1
 400197c:	d0a027c5 	stb	r2,-32609(gp)
				packet_length = len;
 4001980:	e0bffe0b 	ldhu	r2,-8(fp)
 4001984:	d0a0280d 	sth	r2,-32608(gp)
 4001988:	00000106 	br	4001990 <jtag_uart_handler+0x78>

			}

		} else {

			has_data = false;
 400198c:	e03ffc05 	stb	zero,-16(fp)

void jtag_uart_handler(void * context){

	bool has_data = true;

	while(has_data){
 4001990:	e0bffc03 	ldbu	r2,-16(fp)
 4001994:	103fe81e 	bne	r2,zero,4001938 <__alt_data_end+0xfc001938>

		}

	}

}
 4001998:	0001883a 	nop
 400199c:	e037883a 	mov	sp,fp
 40019a0:	dfc00117 	ldw	ra,4(sp)
 40019a4:	df000017 	ldw	fp,0(sp)
 40019a8:	dec00204 	addi	sp,sp,8
 40019ac:	f800283a 	ret

040019b0 <peak_detect_handler>:

bool peak_detected = false;

uint32_t peak[3];

void peak_detect_handler(void * context){
 40019b0:	defffe04 	addi	sp,sp,-8
 40019b4:	df000115 	stw	fp,4(sp)
 40019b8:	df000104 	addi	fp,sp,4
 40019bc:	e13fff15 	stw	r4,-4(fp)

	peak_detected = true;
 40019c0:	00800044 	movi	r2,1
 40019c4:	d0a02885 	stb	r2,-32606(gp)

	peak[0] = IORD_ALTERA_AVALON_PIO_DATA(PEAK_1_BASE);
 40019c8:	00820034 	movhi	r2,2048
 40019cc:	10880004 	addi	r2,r2,8192
 40019d0:	10800037 	ldwio	r2,0(r2)
 40019d4:	1007883a 	mov	r3,r2
 40019d8:	00810074 	movhi	r2,1025
 40019dc:	10940b04 	addi	r2,r2,20524
 40019e0:	10c00015 	stw	r3,0(r2)
	//peak[1] = IORD_ALTERA_AVALON_PIO_DATA(PEAK_2_BASE);
	//peak[2] = IORD_ALTERA_AVALON_PIO_DATA(PEAK_3_BASE);

	// Disable interrupts
	*PEAK_1_INTERRUPT = 0;
 40019e4:	00820034 	movhi	r2,2048
 40019e8:	10880204 	addi	r2,r2,8200
 40019ec:	10000015 	stw	zero,0(r2)

}
 40019f0:	0001883a 	nop
 40019f4:	e037883a 	mov	sp,fp
 40019f8:	df000017 	ldw	fp,0(sp)
 40019fc:	dec00104 	addi	sp,sp,4
 4001a00:	f800283a 	ret

04001a04 <arm_peak_detector>:

void arm_peak_detector(){
 4001a04:	defffe04 	addi	sp,sp,-8
 4001a08:	dfc00115 	stw	ra,4(sp)
 4001a0c:	df000015 	stw	fp,0(sp)
 4001a10:	d839883a 	mov	fp,sp

	peak_detected = false;
 4001a14:	d0202885 	stb	zero,-32606(gp)

	// Arm peak detector
	IOWR_ALTERA_AVALON_PIO_DATA(PEAK_RESET_BASE, 1);
 4001a18:	00c00044 	movi	r3,1
 4001a1c:	00820034 	movhi	r2,2048
 4001a20:	10880c04 	addi	r2,r2,8240
 4001a24:	10c00035 	stwio	r3,0(r2)
	usleep(1);
 4001a28:	01000044 	movi	r4,1
 4001a2c:	400f0f40 	call	400f0f4 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(PEAK_RESET_BASE, 0);
 4001a30:	0007883a 	mov	r3,zero
 4001a34:	00820034 	movhi	r2,2048
 4001a38:	10880c04 	addi	r2,r2,8240
 4001a3c:	10c00035 	stwio	r3,0(r2)

	*PEAK_1_INTERRUPT = 0xFFFFFFFF; // Interrupt on any signal high
 4001a40:	00820034 	movhi	r2,2048
 4001a44:	10880204 	addi	r2,r2,8200
 4001a48:	00ffffc4 	movi	r3,-1
 4001a4c:	10c00015 	stw	r3,0(r2)

}
 4001a50:	0001883a 	nop
 4001a54:	e037883a 	mov	sp,fp
 4001a58:	dfc00117 	ldw	ra,4(sp)
 4001a5c:	df000017 	ldw	fp,0(sp)
 4001a60:	dec00204 	addi	sp,sp,8
 4001a64:	f800283a 	ret

04001a68 <peak_detect>:

#define MAX_DEVIATION 30

void peak_detect(){
 4001a68:	defff304 	addi	sp,sp,-52
 4001a6c:	dfc00c15 	stw	ra,48(sp)
 4001a70:	df000b15 	stw	fp,44(sp)
 4001a74:	df000b04 	addi	fp,sp,44

	running = true;
 4001a78:	00800044 	movi	r2,1
 4001a7c:	d0a00985 	stb	r2,-32730(gp)

	arm_peak_detector();
 4001a80:	4001a040 	call	4001a04 <arm_peak_detector>

	while(1){

		if(peak_detected){
 4001a84:	d0a02883 	ldbu	r2,-32606(gp)
 4001a88:	10803fcc 	andi	r2,r2,255
 4001a8c:	103ffd26 	beq	r2,zero,4001a84 <__alt_data_end+0xfc001a84>

			int16_t offset_1 = ((peak[0] >> 8) & 0xFF) - MAX_DEVIATION;
 4001a90:	00810074 	movhi	r2,1025
 4001a94:	10940b04 	addi	r2,r2,20524
 4001a98:	10800017 	ldw	r2,0(r2)
 4001a9c:	1004d23a 	srli	r2,r2,8
 4001aa0:	10803fcc 	andi	r2,r2,255
 4001aa4:	10bff884 	addi	r2,r2,-30
 4001aa8:	e0bff60d 	sth	r2,-40(fp)
			int16_t offset_2 = (peak[0] & 0xFF) - MAX_DEVIATION;
 4001aac:	00810074 	movhi	r2,1025
 4001ab0:	10940b04 	addi	r2,r2,20524
 4001ab4:	10800017 	ldw	r2,0(r2)
 4001ab8:	10803fcc 	andi	r2,r2,255
 4001abc:	10bff884 	addi	r2,r2,-30
 4001ac0:	e0bff68d 	sth	r2,-38(fp)

			char buffer[32];
			int len = snprintf(buffer, 32, "\x81 0 %d %d", offset_1, offset_2);
 4001ac4:	e13ff60f 	ldh	r4,-40(fp)
 4001ac8:	e0bff68f 	ldh	r2,-38(fp)
 4001acc:	e0fff804 	addi	r3,fp,-32
 4001ad0:	d8800015 	stw	r2,0(sp)
 4001ad4:	200f883a 	mov	r7,r4
 4001ad8:	01810074 	movhi	r6,1025
 4001adc:	318b3604 	addi	r6,r6,11480
 4001ae0:	01400804 	movi	r5,32
 4001ae4:	1809883a 	mov	r4,r3
 4001ae8:	40066400 	call	4006640 <snprintf>
 4001aec:	e0bff715 	stw	r2,-36(fp)
			kiss_send_packet(&jtag_kiss, (const uint8_t *) buffer, len);
 4001af0:	e0fff717 	ldw	r3,-36(fp)
 4001af4:	e0bff804 	addi	r2,fp,-32
 4001af8:	180d883a 	mov	r6,r3
 4001afc:	100b883a 	mov	r5,r2
 4001b00:	01010074 	movhi	r4,1025
 4001b04:	2113e304 	addi	r4,r4,20364
 4001b08:	4001d1c0 	call	4001d1c <kiss_send_packet>

			usleep(100000);
 4001b0c:	010000b4 	movhi	r4,2
 4001b10:	2121a804 	addi	r4,r4,-31072
 4001b14:	400f0f40 	call	400f0f4 <usleep>

			if(!running){
 4001b18:	d0a00983 	ldbu	r2,-32730(gp)
 4001b1c:	1080005c 	xori	r2,r2,1
 4001b20:	10803fcc 	andi	r2,r2,255
 4001b24:	1000021e 	bne	r2,zero,4001b30 <peak_detect+0xc8>
				break;
			}

			arm_peak_detector();
 4001b28:	4001a040 	call	4001a04 <arm_peak_detector>

		}

	}
 4001b2c:	003fd506 	br	4001a84 <__alt_data_end+0xfc001a84>
}
 4001b30:	0001883a 	nop
 4001b34:	e037883a 	mov	sp,fp
 4001b38:	dfc00117 	ldw	ra,4(sp)
 4001b3c:	df000017 	ldw	fp,0(sp)
 4001b40:	dec00204 	addi	sp,sp,8
 4001b44:	f800283a 	ret

04001b48 <main>:

int main()
{
 4001b48:	defff804 	addi	sp,sp,-32
 4001b4c:	dfc00715 	stw	ra,28(sp)
 4001b50:	df000615 	stw	fp,24(sp)
 4001b54:	df000604 	addi	fp,sp,24

	set_motors(0, 0);
 4001b58:	000b883a 	mov	r5,zero
 4001b5c:	0009883a 	mov	r4,zero
 4001b60:	40005c80 	call	40005c8 <set_motors>

	// Setup JTAG kiss interface
	jtag_kiss.send 				 = jtag_kiss_send;
 4001b64:	00810074 	movhi	r2,1025
 4001b68:	1093e304 	addi	r2,r2,20364
 4001b6c:	00c10034 	movhi	r3,1024
 4001b70:	18c09a04 	addi	r3,r3,616
 4001b74:	10c00115 	stw	r3,4(r2)
	jtag_kiss.rx_state 			 = KISS_STATE__NORMAL;
 4001b78:	00810074 	movhi	r2,1025
 4001b7c:	1093e304 	addi	r2,r2,20364
 4001b80:	10000215 	stw	zero,8(r2)
	jtag_kiss.rx_buffer 		 = jtag_kiss_rx_buffer;
 4001b84:	00810074 	movhi	r2,1025
 4001b88:	1093e304 	addi	r2,r2,20364
 4001b8c:	00c10074 	movhi	r3,1025
 4001b90:	18d3e804 	addi	r3,r3,20384
 4001b94:	10c00315 	stw	r3,12(r2)
	jtag_kiss.rx_buffer_position = 0;
 4001b98:	00810074 	movhi	r2,1025
 4001b9c:	1093e304 	addi	r2,r2,20364
 4001ba0:	1000040d 	sth	zero,16(r2)

	//alt_ic_isr_register(JTAG_UART_IRQ, JTAG_UART_IRQ_INTERRUPT_CONTROLLER_ID, jtag_uart_handler, NULL, NULL);

	*JTAG_UART_CONTROL = 0; // Disable interrupts
 4001ba4:	00820034 	movhi	r2,2048
 4001ba8:	10842504 	addi	r2,r2,4244
 4001bac:	10000015 	stw	zero,0(r2)
	alt_irq_register(JTAG_UART_IRQ, NULL,  jtag_uart_handler);
 4001bb0:	01810034 	movhi	r6,1024
 4001bb4:	31864604 	addi	r6,r6,6424
 4001bb8:	000b883a 	mov	r5,zero
 4001bbc:	0009883a 	mov	r4,zero
 4001bc0:	400ee000 	call	400ee00 <alt_irq_register>
	*JTAG_UART_CONTROL = 0x00000001; // Read interrupt
 4001bc4:	00820034 	movhi	r2,2048
 4001bc8:	10842504 	addi	r2,r2,4244
 4001bcc:	00c00044 	movi	r3,1
 4001bd0:	10c00015 	stw	r3,0(r2)

	*BLE_UART_CONTROL = 0; // Disable interrupts
 4001bd4:	00820034 	movhi	r2,2048
 4001bd8:	10803304 	addi	r2,r2,204
 4001bdc:	10000015 	stw	zero,0(r2)
	alt_irq_register(BLE_UART_IRQ, NULL,  ble_uart_handler);
 4001be0:	01810034 	movhi	r6,1024
 4001be4:	31851c04 	addi	r6,r6,5232
 4001be8:	000b883a 	mov	r5,zero
 4001bec:	01000044 	movi	r4,1
 4001bf0:	400ee000 	call	400ee00 <alt_irq_register>
	*BLE_UART_CONTROL = 0x0000080; // Read interrupt
 4001bf4:	00820034 	movhi	r2,2048
 4001bf8:	10803304 	addi	r2,r2,204
 4001bfc:	00c02004 	movi	r3,128
 4001c00:	10c00015 	stw	r3,0(r2)

	// Stop LIDAR scan
	{
		*LIDAR_UART_TX_DATA = 0xA5;
 4001c04:	00820034 	movhi	r2,2048
 4001c08:	10843904 	addi	r2,r2,4324
 4001c0c:	00c02944 	movi	r3,165
 4001c10:	10c00015 	stw	r3,0(r2)
		*LIDAR_UART_TX_DATA = 0x25;
 4001c14:	00820034 	movhi	r2,2048
 4001c18:	10843904 	addi	r2,r2,4324
 4001c1c:	00c00944 	movi	r3,37
 4001c20:	10c00015 	stw	r3,0(r2)
	}

	// Disable lidar motor
	IOWR_ALTERA_AVALON_PIO_DATA(LIDAR_MOTOR_EN_BASE, 0);
 4001c24:	0007883a 	mov	r3,zero
 4001c28:	00820034 	movhi	r2,2048
 4001c2c:	10881004 	addi	r2,r2,8256
 4001c30:	10c00035 	stwio	r3,0(r2)

	*LIDAR_UART_CONTROL = 0; // Disable interrupts
 4001c34:	00820034 	movhi	r2,2048
 4001c38:	10843b04 	addi	r2,r2,4332
 4001c3c:	10000015 	stw	zero,0(r2)
	alt_irq_register(LIDAR_UART_IRQ, NULL,  lidar_uart_handler);
 4001c40:	01810034 	movhi	r6,1024
 4001c44:	3185c204 	addi	r6,r6,5896
 4001c48:	000b883a 	mov	r5,zero
 4001c4c:	01000084 	movi	r4,2
 4001c50:	400ee000 	call	400ee00 <alt_irq_register>
	*LIDAR_UART_CONTROL = 0x0000080; // Read interrupt
 4001c54:	00820034 	movhi	r2,2048
 4001c58:	10843b04 	addi	r2,r2,4332
 4001c5c:	00c02004 	movi	r3,128
 4001c60:	10c00015 	stw	r3,0(r2)

	// Reset peak detectors
	IOWR_ALTERA_AVALON_PIO_DATA(PEAK_RESET_BASE, 1);
 4001c64:	00c00044 	movi	r3,1
 4001c68:	00820034 	movhi	r2,2048
 4001c6c:	10880c04 	addi	r2,r2,8240
 4001c70:	10c00035 	stwio	r3,0(r2)
	usleep(1);
 4001c74:	01000044 	movi	r4,1
 4001c78:	400f0f40 	call	400f0f4 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(PEAK_RESET_BASE, 0);
 4001c7c:	0007883a 	mov	r3,zero
 4001c80:	00820034 	movhi	r2,2048
 4001c84:	10880c04 	addi	r2,r2,8240
 4001c88:	10c00035 	stwio	r3,0(r2)

	*PEAK_1_INTERRUPT = 0;
 4001c8c:	00820034 	movhi	r2,2048
 4001c90:	10880204 	addi	r2,r2,8200
 4001c94:	10000015 	stw	zero,0(r2)
	alt_irq_register(PEAK_1_IRQ, NULL, peak_detect_handler);
 4001c98:	01810034 	movhi	r6,1024
 4001c9c:	31866c04 	addi	r6,r6,6576
 4001ca0:	000b883a 	mov	r5,zero
 4001ca4:	010000c4 	movi	r4,3
 4001ca8:	400ee000 	call	400ee00 <alt_irq_register>

	// Send startup message
	const char hello_world[] = "\x81Hello from Nios II!";
 4001cac:	009b1974 	movhi	r2,27749
 4001cb0:	10922044 	addi	r2,r2,18561
 4001cb4:	e0bffa15 	stw	r2,-24(fp)
 4001cb8:	00998834 	movhi	r2,26144
 4001cbc:	109bdb04 	addi	r2,r2,28524
 4001cc0:	e0bffb15 	stw	r2,-20(fp)
 4001cc4:	00881b74 	movhi	r2,8301
 4001cc8:	109bdc84 	addi	r2,r2,28530
 4001ccc:	e0bffc15 	stw	r2,-16(fp)
 4001cd0:	009cdbf4 	movhi	r2,29551
 4001cd4:	109a5384 	addi	r2,r2,26958
 4001cd8:	e0bffd15 	stw	r2,-12(fp)
 4001cdc:	00885274 	movhi	r2,8521
 4001ce0:	10924804 	addi	r2,r2,18720
 4001ce4:	e0bffe15 	stw	r2,-8(fp)
 4001ce8:	e03fff05 	stb	zero,-4(fp)
	kiss_send_packet(&jtag_kiss, (const uint8_t *) hello_world, sizeof(hello_world) - 1);
 4001cec:	01800504 	movi	r6,20
 4001cf0:	e17ffa04 	addi	r5,fp,-24
 4001cf4:	01010074 	movhi	r4,1025
 4001cf8:	2113e304 	addi	r4,r4,20364
 4001cfc:	4001d1c0 	call	4001d1c <kiss_send_packet>

	usleep(1000000);
 4001d00:	010003f4 	movhi	r4,15
 4001d04:	21109004 	addi	r4,r4,16960
 4001d08:	400f0f40 	call	400f0f4 <usleep>

	peak_detect();
 4001d0c:	4001a680 	call	4001a68 <peak_detect>

	while(1){
		wait_button_press();
 4001d10:	4000a3c0 	call	4000a3c <wait_button_press>
		lidar_test();
 4001d14:	40012780 	call	4001278 <lidar_test>
	}
 4001d18:	003ffd06 	br	4001d10 <__alt_data_end+0xfc001d10>

04001d1c <kiss_send_packet>:
 *      Author: DrYerzinia
 */

#include "kiss.h"

void kiss_send_packet(kiss_t * kiss, const uint8_t * data, size_t len){
 4001d1c:	defffb04 	addi	sp,sp,-20
 4001d20:	dfc00415 	stw	ra,16(sp)
 4001d24:	df000315 	stw	fp,12(sp)
 4001d28:	df000304 	addi	fp,sp,12
 4001d2c:	e13ffd15 	stw	r4,-12(fp)
 4001d30:	e17ffe15 	stw	r5,-8(fp)
 4001d34:	e1bfff15 	stw	r6,-4(fp)

	kiss_start(kiss);
 4001d38:	e13ffd17 	ldw	r4,-12(fp)
 4001d3c:	4001d700 	call	4001d70 <kiss_start>
	kiss_send_data(kiss, data, len);
 4001d40:	e1bfff17 	ldw	r6,-4(fp)
 4001d44:	e17ffe17 	ldw	r5,-8(fp)
 4001d48:	e13ffd17 	ldw	r4,-12(fp)
 4001d4c:	4001db40 	call	4001db4 <kiss_send_data>
	kiss_end(kiss);
 4001d50:	e13ffd17 	ldw	r4,-12(fp)
 4001d54:	4001ee00 	call	4001ee0 <kiss_end>

}
 4001d58:	0001883a 	nop
 4001d5c:	e037883a 	mov	sp,fp
 4001d60:	dfc00117 	ldw	ra,4(sp)
 4001d64:	df000017 	ldw	fp,0(sp)
 4001d68:	dec00204 	addi	sp,sp,8
 4001d6c:	f800283a 	ret

04001d70 <kiss_start>:

void kiss_start(kiss_t * kiss){
 4001d70:	defffd04 	addi	sp,sp,-12
 4001d74:	dfc00215 	stw	ra,8(sp)
 4001d78:	df000115 	stw	fp,4(sp)
 4001d7c:	df000104 	addi	fp,sp,4
 4001d80:	e13fff15 	stw	r4,-4(fp)

	kiss->state = KISS_STATE__NORMAL;
 4001d84:	e0bfff17 	ldw	r2,-4(fp)
 4001d88:	10000015 	stw	zero,0(r2)
	kiss->send(KISS_SYMBOLS__FEND);
 4001d8c:	e0bfff17 	ldw	r2,-4(fp)
 4001d90:	10800117 	ldw	r2,4(r2)
 4001d94:	01003004 	movi	r4,192
 4001d98:	103ee83a 	callr	r2

}
 4001d9c:	0001883a 	nop
 4001da0:	e037883a 	mov	sp,fp
 4001da4:	dfc00117 	ldw	ra,4(sp)
 4001da8:	df000017 	ldw	fp,0(sp)
 4001dac:	dec00204 	addi	sp,sp,8
 4001db0:	f800283a 	ret

04001db4 <kiss_send_data>:

void kiss_send_data(kiss_t * kiss, const uint8_t * data, size_t len){
 4001db4:	defffa04 	addi	sp,sp,-24
 4001db8:	dfc00515 	stw	ra,20(sp)
 4001dbc:	df000415 	stw	fp,16(sp)
 4001dc0:	df000404 	addi	fp,sp,16
 4001dc4:	e13ffd15 	stw	r4,-12(fp)
 4001dc8:	e17ffe15 	stw	r5,-8(fp)
 4001dcc:	e1bfff15 	stw	r6,-4(fp)

	while(len > 0){
 4001dd0:	00003b06 	br	4001ec0 <kiss_send_data+0x10c>

		switch( kiss->state ){
 4001dd4:	e0bffd17 	ldw	r2,-12(fp)
 4001dd8:	10800017 	ldw	r2,0(r2)
 4001ddc:	10c00060 	cmpeqi	r3,r2,1
 4001de0:	1800291e 	bne	r3,zero,4001e88 <kiss_send_data+0xd4>
 4001de4:	0080032e 	bgeu	zero,r2,4001df4 <kiss_send_data+0x40>
 4001de8:	108000a0 	cmpeqi	r2,r2,2
 4001dec:	10002d1e 	bne	r2,zero,4001ea4 <kiss_send_data+0xf0>
 4001df0:	00003306 	br	4001ec0 <kiss_send_data+0x10c>

			case KISS_STATE__NORMAL:
				{

					len--;
 4001df4:	e0bfff17 	ldw	r2,-4(fp)
 4001df8:	10bfffc4 	addi	r2,r2,-1
 4001dfc:	e0bfff15 	stw	r2,-4(fp)

					uint8_t next_symbol = (*data++);
 4001e00:	e0bffe17 	ldw	r2,-8(fp)
 4001e04:	10c00044 	addi	r3,r2,1
 4001e08:	e0fffe15 	stw	r3,-8(fp)
 4001e0c:	10800003 	ldbu	r2,0(r2)
 4001e10:	e0bffc05 	stb	r2,-16(fp)
					switch( next_symbol ){
 4001e14:	e0bffc03 	ldbu	r2,-16(fp)
 4001e18:	10c03020 	cmpeqi	r3,r2,192
 4001e1c:	1800031e 	bne	r3,zero,4001e2c <kiss_send_data+0x78>
 4001e20:	108036e0 	cmpeqi	r2,r2,219
 4001e24:	1000091e 	bne	r2,zero,4001e4c <kiss_send_data+0x98>
 4001e28:	00001006 	br	4001e6c <kiss_send_data+0xb8>
						case KISS_SYMBOLS__FEND:
							kiss->state = KISS_STATE__END;
 4001e2c:	e0bffd17 	ldw	r2,-12(fp)
 4001e30:	00c00084 	movi	r3,2
 4001e34:	10c00015 	stw	r3,0(r2)
							kiss->send(KISS_SYMBOLS__FESC);
 4001e38:	e0bffd17 	ldw	r2,-12(fp)
 4001e3c:	10800117 	ldw	r2,4(r2)
 4001e40:	010036c4 	movi	r4,219
 4001e44:	103ee83a 	callr	r2
							break;
 4001e48:	00000e06 	br	4001e84 <kiss_send_data+0xd0>
						case KISS_SYMBOLS__FESC:
							kiss->state = KISS_STATE__ESC;
 4001e4c:	e0bffd17 	ldw	r2,-12(fp)
 4001e50:	00c00044 	movi	r3,1
 4001e54:	10c00015 	stw	r3,0(r2)
							kiss->send(KISS_SYMBOLS__FESC);
 4001e58:	e0bffd17 	ldw	r2,-12(fp)
 4001e5c:	10800117 	ldw	r2,4(r2)
 4001e60:	010036c4 	movi	r4,219
 4001e64:	103ee83a 	callr	r2
							break;
 4001e68:	00000606 	br	4001e84 <kiss_send_data+0xd0>
						default:
							kiss->send(next_symbol);
 4001e6c:	e0bffd17 	ldw	r2,-12(fp)
 4001e70:	10800117 	ldw	r2,4(r2)
 4001e74:	e0fffc03 	ldbu	r3,-16(fp)
 4001e78:	1809883a 	mov	r4,r3
 4001e7c:	103ee83a 	callr	r2
							break;
 4001e80:	0001883a 	nop
					}
				}
				break;
 4001e84:	00000e06 	br	4001ec0 <kiss_send_data+0x10c>

			case KISS_STATE__ESC:
				kiss->state = KISS_STATE__NORMAL;
 4001e88:	e0bffd17 	ldw	r2,-12(fp)
 4001e8c:	10000015 	stw	zero,0(r2)
				kiss->send(KISS_SYMBOLS__TFESC);
 4001e90:	e0bffd17 	ldw	r2,-12(fp)
 4001e94:	10800117 	ldw	r2,4(r2)
 4001e98:	01003744 	movi	r4,221
 4001e9c:	103ee83a 	callr	r2
				break;
 4001ea0:	00000706 	br	4001ec0 <kiss_send_data+0x10c>

			case KISS_STATE__END:
				kiss->state = KISS_STATE__NORMAL;
 4001ea4:	e0bffd17 	ldw	r2,-12(fp)
 4001ea8:	10000015 	stw	zero,0(r2)
				kiss->send(KISS_SYMBOLS__TFEND);
 4001eac:	e0bffd17 	ldw	r2,-12(fp)
 4001eb0:	10800117 	ldw	r2,4(r2)
 4001eb4:	01003704 	movi	r4,220
 4001eb8:	103ee83a 	callr	r2
				break;
 4001ebc:	0001883a 	nop

}

void kiss_send_data(kiss_t * kiss, const uint8_t * data, size_t len){

	while(len > 0){
 4001ec0:	e0bfff17 	ldw	r2,-4(fp)
 4001ec4:	103fc31e 	bne	r2,zero,4001dd4 <__alt_data_end+0xfc001dd4>

		}

	}

}
 4001ec8:	0001883a 	nop
 4001ecc:	e037883a 	mov	sp,fp
 4001ed0:	dfc00117 	ldw	ra,4(sp)
 4001ed4:	df000017 	ldw	fp,0(sp)
 4001ed8:	dec00204 	addi	sp,sp,8
 4001edc:	f800283a 	ret

04001ee0 <kiss_end>:

void kiss_end(kiss_t * kiss){
 4001ee0:	defffd04 	addi	sp,sp,-12
 4001ee4:	dfc00215 	stw	ra,8(sp)
 4001ee8:	df000115 	stw	fp,4(sp)
 4001eec:	df000104 	addi	fp,sp,4
 4001ef0:	e13fff15 	stw	r4,-4(fp)

	kiss->state = KISS_STATE__NORMAL;
 4001ef4:	e0bfff17 	ldw	r2,-4(fp)
 4001ef8:	10000015 	stw	zero,0(r2)
	kiss->send(KISS_SYMBOLS__FEND);
 4001efc:	e0bfff17 	ldw	r2,-4(fp)
 4001f00:	10800117 	ldw	r2,4(r2)
 4001f04:	01003004 	movi	r4,192
 4001f08:	103ee83a 	callr	r2

}
 4001f0c:	0001883a 	nop
 4001f10:	e037883a 	mov	sp,fp
 4001f14:	dfc00117 	ldw	ra,4(sp)
 4001f18:	df000017 	ldw	fp,0(sp)
 4001f1c:	dec00204 	addi	sp,sp,8
 4001f20:	f800283a 	ret

04001f24 <kiss_rx_byte>:

uint16_t kiss_rx_byte(kiss_t * kiss, uint8_t next_symbol){
 4001f24:	defffc04 	addi	sp,sp,-16
 4001f28:	df000315 	stw	fp,12(sp)
 4001f2c:	df000304 	addi	fp,sp,12
 4001f30:	e13ffe15 	stw	r4,-8(fp)
 4001f34:	2805883a 	mov	r2,r5
 4001f38:	e0bfff05 	stb	r2,-4(fp)

	switch( kiss->rx_state ){
 4001f3c:	e0bffe17 	ldw	r2,-8(fp)
 4001f40:	10800217 	ldw	r2,8(r2)
 4001f44:	10000326 	beq	r2,zero,4001f54 <kiss_rx_byte+0x30>
 4001f48:	10800060 	cmpeqi	r2,r2,1
 4001f4c:	1000251e 	bne	r2,zero,4001fe4 <kiss_rx_byte+0xc0>
 4001f50:	00004706 	br	4002070 <kiss_rx_byte+0x14c>

		case KISS_STATE__NORMAL:
			{

				switch( next_symbol ){
 4001f54:	e0bfff03 	ldbu	r2,-4(fp)
 4001f58:	10c03020 	cmpeqi	r3,r2,192
 4001f5c:	1800031e 	bne	r3,zero,4001f6c <kiss_rx_byte+0x48>
 4001f60:	108036e0 	cmpeqi	r2,r2,219
 4001f64:	10000c1e 	bne	r2,zero,4001f98 <kiss_rx_byte+0x74>
 4001f68:	00000f06 	br	4001fa8 <kiss_rx_byte+0x84>

					case KISS_SYMBOLS__FEND:
						{

							uint16_t len = kiss->rx_buffer_position;
 4001f6c:	e0bffe17 	ldw	r2,-8(fp)
 4001f70:	1080040b 	ldhu	r2,16(r2)
 4001f74:	e0bffd0d 	sth	r2,-12(fp)

							kiss->rx_state = KISS_STATE__NORMAL;
 4001f78:	e0bffe17 	ldw	r2,-8(fp)
 4001f7c:	10000215 	stw	zero,8(r2)
							kiss->rx_buffer_position = 0;
 4001f80:	e0bffe17 	ldw	r2,-8(fp)
 4001f84:	1000040d 	sth	zero,16(r2)

							if(len > 0){
 4001f88:	e0bffd0b 	ldhu	r2,-12(fp)
 4001f8c:	10001326 	beq	r2,zero,4001fdc <kiss_rx_byte+0xb8>
								return len;
 4001f90:	e0bffd0b 	ldhu	r2,-12(fp)
 4001f94:	00003706 	br	4002074 <kiss_rx_byte+0x150>
						}

						break;

					case KISS_SYMBOLS__FESC:
						kiss->rx_state = KISS_STATE__ESC;
 4001f98:	e0bffe17 	ldw	r2,-8(fp)
 4001f9c:	00c00044 	movi	r3,1
 4001fa0:	10c00215 	stw	r3,8(r2)
						break;
 4001fa4:	00000e06 	br	4001fe0 <kiss_rx_byte+0xbc>

					default:
						kiss->rx_buffer[kiss->rx_buffer_position++] = next_symbol;
 4001fa8:	e0bffe17 	ldw	r2,-8(fp)
 4001fac:	10c00317 	ldw	r3,12(r2)
 4001fb0:	e0bffe17 	ldw	r2,-8(fp)
 4001fb4:	1080040b 	ldhu	r2,16(r2)
 4001fb8:	11000044 	addi	r4,r2,1
 4001fbc:	200b883a 	mov	r5,r4
 4001fc0:	e13ffe17 	ldw	r4,-8(fp)
 4001fc4:	2140040d 	sth	r5,16(r4)
 4001fc8:	10bfffcc 	andi	r2,r2,65535
 4001fcc:	1885883a 	add	r2,r3,r2
 4001fd0:	e0ffff03 	ldbu	r3,-4(fp)
 4001fd4:	10c00005 	stb	r3,0(r2)
						break;
 4001fd8:	00000106 	br	4001fe0 <kiss_rx_byte+0xbc>
								return len;
							}

						}

						break;
 4001fdc:	0001883a 	nop
						kiss->rx_buffer[kiss->rx_buffer_position++] = next_symbol;
						break;

				}
			}
			break;
 4001fe0:	00002306 	br	4002070 <kiss_rx_byte+0x14c>

		case KISS_STATE__ESC:
			switch( next_symbol ){
 4001fe4:	e0bfff03 	ldbu	r2,-4(fp)
 4001fe8:	10c03720 	cmpeqi	r3,r2,220
 4001fec:	1800031e 	bne	r3,zero,4001ffc <kiss_rx_byte+0xd8>
 4001ff0:	10803760 	cmpeqi	r2,r2,221
 4001ff4:	10000e1e 	bne	r2,zero,4002030 <kiss_rx_byte+0x10c>
					kiss->rx_buffer[kiss->rx_buffer_position++] = KISS_SYMBOLS__FEND;
					break;

				default:
					// State machine hurt itself in confusion
					break;
 4001ff8:	00001a06 	br	4002064 <kiss_rx_byte+0x140>
			break;

		case KISS_STATE__ESC:
			switch( next_symbol ){
				case KISS_SYMBOLS__TFEND:
					kiss->rx_buffer[kiss->rx_buffer_position++] = KISS_SYMBOLS__FEND;
 4001ffc:	e0bffe17 	ldw	r2,-8(fp)
 4002000:	10c00317 	ldw	r3,12(r2)
 4002004:	e0bffe17 	ldw	r2,-8(fp)
 4002008:	1080040b 	ldhu	r2,16(r2)
 400200c:	11000044 	addi	r4,r2,1
 4002010:	200b883a 	mov	r5,r4
 4002014:	e13ffe17 	ldw	r4,-8(fp)
 4002018:	2140040d 	sth	r5,16(r4)
 400201c:	10bfffcc 	andi	r2,r2,65535
 4002020:	1885883a 	add	r2,r3,r2
 4002024:	00fff004 	movi	r3,-64
 4002028:	10c00005 	stb	r3,0(r2)
					break;
 400202c:	00000d06 	br	4002064 <kiss_rx_byte+0x140>

				case KISS_SYMBOLS__TFESC:
					kiss->rx_buffer[kiss->rx_buffer_position++] = KISS_SYMBOLS__FEND;
 4002030:	e0bffe17 	ldw	r2,-8(fp)
 4002034:	10c00317 	ldw	r3,12(r2)
 4002038:	e0bffe17 	ldw	r2,-8(fp)
 400203c:	1080040b 	ldhu	r2,16(r2)
 4002040:	11000044 	addi	r4,r2,1
 4002044:	200b883a 	mov	r5,r4
 4002048:	e13ffe17 	ldw	r4,-8(fp)
 400204c:	2140040d 	sth	r5,16(r4)
 4002050:	10bfffcc 	andi	r2,r2,65535
 4002054:	1885883a 	add	r2,r3,r2
 4002058:	00fff004 	movi	r3,-64
 400205c:	10c00005 	stb	r3,0(r2)
					break;
 4002060:	0001883a 	nop

				default:
					// State machine hurt itself in confusion
					break;
			}
			kiss->rx_state = KISS_STATE__NORMAL;
 4002064:	e0bffe17 	ldw	r2,-8(fp)
 4002068:	10000215 	stw	zero,8(r2)
			break;
 400206c:	0001883a 	nop

	}

	return 0;
 4002070:	0005883a 	mov	r2,zero

}
 4002074:	e037883a 	mov	sp,fp
 4002078:	df000017 	ldw	fp,0(sp)
 400207c:	dec00104 	addi	sp,sp,4
 4002080:	f800283a 	ret

04002084 <pid_compute>:
 * @param pid PID controller object
 * @param input Current state
 *
 * @return Control effort
 */
fp_t pid_compute(PID_t * pid, fp_t input, fp_t dt){
 4002084:	defff704 	addi	sp,sp,-36
 4002088:	dfc00815 	stw	ra,32(sp)
 400208c:	df000715 	stw	fp,28(sp)
 4002090:	dc000615 	stw	r16,24(sp)
 4002094:	df000704 	addi	fp,sp,28
 4002098:	e13ffc15 	stw	r4,-16(fp)
 400209c:	e17ffd15 	stw	r5,-12(fp)
 40020a0:	e1bffe15 	stw	r6,-8(fp)

	fp_t err = pid->setpoint - input;
 40020a4:	e0bffc17 	ldw	r2,-16(fp)
 40020a8:	10c00017 	ldw	r3,0(r2)
 40020ac:	e17ffd17 	ldw	r5,-12(fp)
 40020b0:	1809883a 	mov	r4,r3
 40020b4:	40033440 	call	4003344 <__subsf3>
 40020b8:	1007883a 	mov	r3,r2
 40020bc:	e0fffa15 	stw	r3,-24(fp)

	// Integrate error
	pid->i += err;
 40020c0:	e0bffc17 	ldw	r2,-16(fp)
 40020c4:	10c00117 	ldw	r3,4(r2)
 40020c8:	e17ffa17 	ldw	r5,-24(fp)
 40020cc:	1809883a 	mov	r4,r3
 40020d0:	40024880 	call	4002488 <__addsf3>
 40020d4:	1009883a 	mov	r4,r2
 40020d8:	2007883a 	mov	r3,r4
 40020dc:	e0bffc17 	ldw	r2,-16(fp)
 40020e0:	10c00115 	stw	r3,4(r2)

	// Check wind-up limit
	if(pid->i > pid->windup_limit){
 40020e4:	e0bffc17 	ldw	r2,-16(fp)
 40020e8:	10c00117 	ldw	r3,4(r2)
 40020ec:	e0bffc17 	ldw	r2,-16(fp)
 40020f0:	11000617 	ldw	r4,24(r2)
 40020f4:	200b883a 	mov	r5,r4
 40020f8:	1809883a 	mov	r4,r3
 40020fc:	4002d900 	call	4002d90 <__gesf2>
 4002100:	0080050e 	bge	zero,r2,4002118 <pid_compute+0x94>
		pid->i = pid->windup_limit;
 4002104:	e0bffc17 	ldw	r2,-16(fp)
 4002108:	10c00617 	ldw	r3,24(r2)
 400210c:	e0bffc17 	ldw	r2,-16(fp)
 4002110:	10c00115 	stw	r3,4(r2)
 4002114:	00000d06 	br	400214c <pid_compute+0xc8>
	} else if(pid->i < -1.0f * pid->windup_limit){
 4002118:	e0bffc17 	ldw	r2,-16(fp)
 400211c:	11000117 	ldw	r4,4(r2)
 4002120:	e0fffc17 	ldw	r3,-16(fp)
 4002124:	18800617 	ldw	r2,24(r3)
 4002128:	10a0003c 	xorhi	r2,r2,32768
 400212c:	100b883a 	mov	r5,r2
 4002130:	4002e4c0 	call	4002e4c <__lesf2>
 4002134:	1000050e 	bge	r2,zero,400214c <pid_compute+0xc8>
		pid->i = -1.0f * pid->windup_limit;
 4002138:	e0fffc17 	ldw	r3,-16(fp)
 400213c:	18800617 	ldw	r2,24(r3)
 4002140:	10e0003c 	xorhi	r3,r2,32768
 4002144:	e0bffc17 	ldw	r2,-16(fp)
 4002148:	10c00115 	stw	r3,4(r2)
	}

	fp_t der = err - pid->prev_err;
 400214c:	e0bffc17 	ldw	r2,-16(fp)
 4002150:	10c00217 	ldw	r3,8(r2)
 4002154:	180b883a 	mov	r5,r3
 4002158:	e13ffa17 	ldw	r4,-24(fp)
 400215c:	40033440 	call	4003344 <__subsf3>
 4002160:	1007883a 	mov	r3,r2
 4002164:	e0fffb15 	stw	r3,-20(fp)

	pid->prev_err = err;
 4002168:	e0bffc17 	ldw	r2,-16(fp)
 400216c:	e0fffa17 	ldw	r3,-24(fp)
 4002170:	10c00215 	stw	r3,8(r2)

	fp_t output = ( pid->kp * err ) + ( pid->ki * pid->i * dt ) + ( pid->kd * der / dt );
 4002174:	e0bffc17 	ldw	r2,-16(fp)
 4002178:	10c00317 	ldw	r3,12(r2)
 400217c:	e17ffa17 	ldw	r5,-24(fp)
 4002180:	1809883a 	mov	r4,r3
 4002184:	4002f140 	call	4002f14 <__mulsf3>
 4002188:	1007883a 	mov	r3,r2
 400218c:	1821883a 	mov	r16,r3
 4002190:	e0bffc17 	ldw	r2,-16(fp)
 4002194:	10c00417 	ldw	r3,16(r2)
 4002198:	e0bffc17 	ldw	r2,-16(fp)
 400219c:	11000117 	ldw	r4,4(r2)
 40021a0:	200b883a 	mov	r5,r4
 40021a4:	1809883a 	mov	r4,r3
 40021a8:	4002f140 	call	4002f14 <__mulsf3>
 40021ac:	1007883a 	mov	r3,r2
 40021b0:	1805883a 	mov	r2,r3
 40021b4:	e17ffe17 	ldw	r5,-8(fp)
 40021b8:	1009883a 	mov	r4,r2
 40021bc:	4002f140 	call	4002f14 <__mulsf3>
 40021c0:	1007883a 	mov	r3,r2
 40021c4:	1805883a 	mov	r2,r3
 40021c8:	100b883a 	mov	r5,r2
 40021cc:	8009883a 	mov	r4,r16
 40021d0:	40024880 	call	4002488 <__addsf3>
 40021d4:	1007883a 	mov	r3,r2
 40021d8:	1821883a 	mov	r16,r3
 40021dc:	e0bffc17 	ldw	r2,-16(fp)
 40021e0:	10c00517 	ldw	r3,20(r2)
 40021e4:	e17ffb17 	ldw	r5,-20(fp)
 40021e8:	1809883a 	mov	r4,r3
 40021ec:	4002f140 	call	4002f14 <__mulsf3>
 40021f0:	1007883a 	mov	r3,r2
 40021f4:	1805883a 	mov	r2,r3
 40021f8:	e17ffe17 	ldw	r5,-8(fp)
 40021fc:	1009883a 	mov	r4,r2
 4002200:	40029500 	call	4002950 <__divsf3>
 4002204:	1007883a 	mov	r3,r2
 4002208:	1805883a 	mov	r2,r3
 400220c:	100b883a 	mov	r5,r2
 4002210:	8009883a 	mov	r4,r16
 4002214:	40024880 	call	4002488 <__addsf3>
 4002218:	1007883a 	mov	r3,r2
 400221c:	e0fff915 	stw	r3,-28(fp)

	// Don't command more than maximum value
	if( output > pid->max){
 4002220:	e0bffc17 	ldw	r2,-16(fp)
 4002224:	10c00717 	ldw	r3,28(r2)
 4002228:	e17ff917 	ldw	r5,-28(fp)
 400222c:	1809883a 	mov	r4,r3
 4002230:	4002e4c0 	call	4002e4c <__lesf2>
 4002234:	1000040e 	bge	r2,zero,4002248 <pid_compute+0x1c4>
		output = pid->max;
 4002238:	e0bffc17 	ldw	r2,-16(fp)
 400223c:	10800717 	ldw	r2,28(r2)
 4002240:	e0bff915 	stw	r2,-28(fp)
 4002244:	00000906 	br	400226c <pid_compute+0x1e8>
	} else if( output < pid->min){
 4002248:	e0bffc17 	ldw	r2,-16(fp)
 400224c:	10c00817 	ldw	r3,32(r2)
 4002250:	e17ff917 	ldw	r5,-28(fp)
 4002254:	1809883a 	mov	r4,r3
 4002258:	4002d900 	call	4002d90 <__gesf2>
 400225c:	0080030e 	bge	zero,r2,400226c <pid_compute+0x1e8>
		output = pid->min;
 4002260:	e0bffc17 	ldw	r2,-16(fp)
 4002264:	10800817 	ldw	r2,32(r2)
 4002268:	e0bff915 	stw	r2,-28(fp)
	}

	if( pid->mode == REVERSE){
 400226c:	e0bffc17 	ldw	r2,-16(fp)
 4002270:	10800917 	ldw	r2,36(r2)
 4002274:	10800058 	cmpnei	r2,r2,1
 4002278:	1000031e 	bne	r2,zero,4002288 <pid_compute+0x204>
		output *= -1.0f;
 400227c:	e0bff917 	ldw	r2,-28(fp)
 4002280:	10a0003c 	xorhi	r2,r2,32768
 4002284:	e0bff915 	stw	r2,-28(fp)
	}

	return output;
 4002288:	e0bff917 	ldw	r2,-28(fp)
 400228c:	1007883a 	mov	r3,r2

}
 4002290:	1805883a 	mov	r2,r3
 4002294:	e6ffff04 	addi	sp,fp,-4
 4002298:	dfc00217 	ldw	ra,8(sp)
 400229c:	df000117 	ldw	fp,4(sp)
 40022a0:	dc000017 	ldw	r16,0(sp)
 40022a4:	dec00304 	addi	sp,sp,12
 40022a8:	f800283a 	ret

040022ac <__divsi3>:
 40022ac:	20001b16 	blt	r4,zero,400231c <__divsi3+0x70>
 40022b0:	000f883a 	mov	r7,zero
 40022b4:	28001616 	blt	r5,zero,4002310 <__divsi3+0x64>
 40022b8:	200d883a 	mov	r6,r4
 40022bc:	29001a2e 	bgeu	r5,r4,4002328 <__divsi3+0x7c>
 40022c0:	00800804 	movi	r2,32
 40022c4:	00c00044 	movi	r3,1
 40022c8:	00000106 	br	40022d0 <__divsi3+0x24>
 40022cc:	10000d26 	beq	r2,zero,4002304 <__divsi3+0x58>
 40022d0:	294b883a 	add	r5,r5,r5
 40022d4:	10bfffc4 	addi	r2,r2,-1
 40022d8:	18c7883a 	add	r3,r3,r3
 40022dc:	293ffb36 	bltu	r5,r4,40022cc <__alt_data_end+0xfc0022cc>
 40022e0:	0005883a 	mov	r2,zero
 40022e4:	18000726 	beq	r3,zero,4002304 <__divsi3+0x58>
 40022e8:	0005883a 	mov	r2,zero
 40022ec:	31400236 	bltu	r6,r5,40022f8 <__divsi3+0x4c>
 40022f0:	314dc83a 	sub	r6,r6,r5
 40022f4:	10c4b03a 	or	r2,r2,r3
 40022f8:	1806d07a 	srli	r3,r3,1
 40022fc:	280ad07a 	srli	r5,r5,1
 4002300:	183ffa1e 	bne	r3,zero,40022ec <__alt_data_end+0xfc0022ec>
 4002304:	38000126 	beq	r7,zero,400230c <__divsi3+0x60>
 4002308:	0085c83a 	sub	r2,zero,r2
 400230c:	f800283a 	ret
 4002310:	014bc83a 	sub	r5,zero,r5
 4002314:	39c0005c 	xori	r7,r7,1
 4002318:	003fe706 	br	40022b8 <__alt_data_end+0xfc0022b8>
 400231c:	0109c83a 	sub	r4,zero,r4
 4002320:	01c00044 	movi	r7,1
 4002324:	003fe306 	br	40022b4 <__alt_data_end+0xfc0022b4>
 4002328:	00c00044 	movi	r3,1
 400232c:	003fee06 	br	40022e8 <__alt_data_end+0xfc0022e8>

04002330 <__modsi3>:
 4002330:	20001716 	blt	r4,zero,4002390 <__modsi3+0x60>
 4002334:	000f883a 	mov	r7,zero
 4002338:	2005883a 	mov	r2,r4
 400233c:	28001216 	blt	r5,zero,4002388 <__modsi3+0x58>
 4002340:	2900162e 	bgeu	r5,r4,400239c <__modsi3+0x6c>
 4002344:	01800804 	movi	r6,32
 4002348:	00c00044 	movi	r3,1
 400234c:	00000106 	br	4002354 <__modsi3+0x24>
 4002350:	30000a26 	beq	r6,zero,400237c <__modsi3+0x4c>
 4002354:	294b883a 	add	r5,r5,r5
 4002358:	31bfffc4 	addi	r6,r6,-1
 400235c:	18c7883a 	add	r3,r3,r3
 4002360:	293ffb36 	bltu	r5,r4,4002350 <__alt_data_end+0xfc002350>
 4002364:	18000526 	beq	r3,zero,400237c <__modsi3+0x4c>
 4002368:	1806d07a 	srli	r3,r3,1
 400236c:	11400136 	bltu	r2,r5,4002374 <__modsi3+0x44>
 4002370:	1145c83a 	sub	r2,r2,r5
 4002374:	280ad07a 	srli	r5,r5,1
 4002378:	183ffb1e 	bne	r3,zero,4002368 <__alt_data_end+0xfc002368>
 400237c:	38000126 	beq	r7,zero,4002384 <__modsi3+0x54>
 4002380:	0085c83a 	sub	r2,zero,r2
 4002384:	f800283a 	ret
 4002388:	014bc83a 	sub	r5,zero,r5
 400238c:	003fec06 	br	4002340 <__alt_data_end+0xfc002340>
 4002390:	0109c83a 	sub	r4,zero,r4
 4002394:	01c00044 	movi	r7,1
 4002398:	003fe706 	br	4002338 <__alt_data_end+0xfc002338>
 400239c:	00c00044 	movi	r3,1
 40023a0:	003ff106 	br	4002368 <__alt_data_end+0xfc002368>

040023a4 <__udivsi3>:
 40023a4:	200d883a 	mov	r6,r4
 40023a8:	2900152e 	bgeu	r5,r4,4002400 <__udivsi3+0x5c>
 40023ac:	28001416 	blt	r5,zero,4002400 <__udivsi3+0x5c>
 40023b0:	00800804 	movi	r2,32
 40023b4:	00c00044 	movi	r3,1
 40023b8:	00000206 	br	40023c4 <__udivsi3+0x20>
 40023bc:	10000e26 	beq	r2,zero,40023f8 <__udivsi3+0x54>
 40023c0:	28000516 	blt	r5,zero,40023d8 <__udivsi3+0x34>
 40023c4:	294b883a 	add	r5,r5,r5
 40023c8:	10bfffc4 	addi	r2,r2,-1
 40023cc:	18c7883a 	add	r3,r3,r3
 40023d0:	293ffa36 	bltu	r5,r4,40023bc <__alt_data_end+0xfc0023bc>
 40023d4:	18000826 	beq	r3,zero,40023f8 <__udivsi3+0x54>
 40023d8:	0005883a 	mov	r2,zero
 40023dc:	31400236 	bltu	r6,r5,40023e8 <__udivsi3+0x44>
 40023e0:	314dc83a 	sub	r6,r6,r5
 40023e4:	10c4b03a 	or	r2,r2,r3
 40023e8:	1806d07a 	srli	r3,r3,1
 40023ec:	280ad07a 	srli	r5,r5,1
 40023f0:	183ffa1e 	bne	r3,zero,40023dc <__alt_data_end+0xfc0023dc>
 40023f4:	f800283a 	ret
 40023f8:	0005883a 	mov	r2,zero
 40023fc:	f800283a 	ret
 4002400:	00c00044 	movi	r3,1
 4002404:	003ff406 	br	40023d8 <__alt_data_end+0xfc0023d8>

04002408 <__umodsi3>:
 4002408:	2005883a 	mov	r2,r4
 400240c:	2900122e 	bgeu	r5,r4,4002458 <__umodsi3+0x50>
 4002410:	28001116 	blt	r5,zero,4002458 <__umodsi3+0x50>
 4002414:	01800804 	movi	r6,32
 4002418:	00c00044 	movi	r3,1
 400241c:	00000206 	br	4002428 <__umodsi3+0x20>
 4002420:	30000c26 	beq	r6,zero,4002454 <__umodsi3+0x4c>
 4002424:	28000516 	blt	r5,zero,400243c <__umodsi3+0x34>
 4002428:	294b883a 	add	r5,r5,r5
 400242c:	31bfffc4 	addi	r6,r6,-1
 4002430:	18c7883a 	add	r3,r3,r3
 4002434:	293ffa36 	bltu	r5,r4,4002420 <__alt_data_end+0xfc002420>
 4002438:	18000626 	beq	r3,zero,4002454 <__umodsi3+0x4c>
 400243c:	1806d07a 	srli	r3,r3,1
 4002440:	11400136 	bltu	r2,r5,4002448 <__umodsi3+0x40>
 4002444:	1145c83a 	sub	r2,r2,r5
 4002448:	280ad07a 	srli	r5,r5,1
 400244c:	183ffb1e 	bne	r3,zero,400243c <__alt_data_end+0xfc00243c>
 4002450:	f800283a 	ret
 4002454:	f800283a 	ret
 4002458:	00c00044 	movi	r3,1
 400245c:	003ff706 	br	400243c <__alt_data_end+0xfc00243c>

04002460 <__mulsi3>:
 4002460:	0005883a 	mov	r2,zero
 4002464:	20000726 	beq	r4,zero,4002484 <__mulsi3+0x24>
 4002468:	20c0004c 	andi	r3,r4,1
 400246c:	2008d07a 	srli	r4,r4,1
 4002470:	18000126 	beq	r3,zero,4002478 <__mulsi3+0x18>
 4002474:	1145883a 	add	r2,r2,r5
 4002478:	294b883a 	add	r5,r5,r5
 400247c:	203ffa1e 	bne	r4,zero,4002468 <__alt_data_end+0xfc002468>
 4002480:	f800283a 	ret
 4002484:	f800283a 	ret

04002488 <__addsf3>:
 4002488:	defffc04 	addi	sp,sp,-16
 400248c:	2004d7fa 	srli	r2,r4,31
 4002490:	280cd5fa 	srli	r6,r5,23
 4002494:	dc000015 	stw	r16,0(sp)
 4002498:	00c02034 	movhi	r3,128
 400249c:	2020d5fa 	srli	r16,r4,23
 40024a0:	280ed7fa 	srli	r7,r5,31
 40024a4:	18ffffc4 	addi	r3,r3,-1
 40024a8:	dc400115 	stw	r17,4(sp)
 40024ac:	1908703a 	and	r4,r3,r4
 40024b0:	194a703a 	and	r5,r3,r5
 40024b4:	dfc00315 	stw	ra,12(sp)
 40024b8:	dc800215 	stw	r18,8(sp)
 40024bc:	14403fcc 	andi	r17,r2,255
 40024c0:	84003fcc 	andi	r16,r16,255
 40024c4:	200890fa 	slli	r4,r4,3
 40024c8:	31803fcc 	andi	r6,r6,255
 40024cc:	280a90fa 	slli	r5,r5,3
 40024d0:	89c05026 	beq	r17,r7,4002614 <__addsf3+0x18c>
 40024d4:	8185c83a 	sub	r2,r16,r6
 40024d8:	00807a0e 	bge	zero,r2,40026c4 <__addsf3+0x23c>
 40024dc:	30001e1e 	bne	r6,zero,4002558 <__addsf3+0xd0>
 40024e0:	28006d1e 	bne	r5,zero,4002698 <__addsf3+0x210>
 40024e4:	208001cc 	andi	r2,r4,7
 40024e8:	10000426 	beq	r2,zero,40024fc <__addsf3+0x74>
 40024ec:	208003cc 	andi	r2,r4,15
 40024f0:	00c00104 	movi	r3,4
 40024f4:	10c00126 	beq	r2,r3,40024fc <__addsf3+0x74>
 40024f8:	20c9883a 	add	r4,r4,r3
 40024fc:	2081002c 	andhi	r2,r4,1024
 4002500:	10003926 	beq	r2,zero,40025e8 <__addsf3+0x160>
 4002504:	84000044 	addi	r16,r16,1
 4002508:	00803fc4 	movi	r2,255
 400250c:	80807826 	beq	r16,r2,40026f0 <__addsf3+0x268>
 4002510:	200891ba 	slli	r4,r4,6
 4002514:	8805883a 	mov	r2,r17
 4002518:	2008d27a 	srli	r4,r4,9
 400251c:	84003fcc 	andi	r16,r16,255
 4002520:	800695fa 	slli	r3,r16,23
 4002524:	10803fcc 	andi	r2,r2,255
 4002528:	04002034 	movhi	r16,128
 400252c:	843fffc4 	addi	r16,r16,-1
 4002530:	100497fa 	slli	r2,r2,31
 4002534:	2408703a 	and	r4,r4,r16
 4002538:	20e0b03a 	or	r16,r4,r3
 400253c:	8084b03a 	or	r2,r16,r2
 4002540:	dfc00317 	ldw	ra,12(sp)
 4002544:	dc800217 	ldw	r18,8(sp)
 4002548:	dc400117 	ldw	r17,4(sp)
 400254c:	dc000017 	ldw	r16,0(sp)
 4002550:	dec00404 	addi	sp,sp,16
 4002554:	f800283a 	ret
 4002558:	00c03fc4 	movi	r3,255
 400255c:	80ffe126 	beq	r16,r3,40024e4 <__alt_data_end+0xfc0024e4>
 4002560:	29410034 	orhi	r5,r5,1024
 4002564:	00c006c4 	movi	r3,27
 4002568:	18807516 	blt	r3,r2,4002740 <__addsf3+0x2b8>
 400256c:	00c00804 	movi	r3,32
 4002570:	1887c83a 	sub	r3,r3,r2
 4002574:	28c6983a 	sll	r3,r5,r3
 4002578:	288ad83a 	srl	r5,r5,r2
 400257c:	1804c03a 	cmpne	r2,r3,zero
 4002580:	288ab03a 	or	r5,r5,r2
 4002584:	2149c83a 	sub	r4,r4,r5
 4002588:	2081002c 	andhi	r2,r4,1024
 400258c:	10001426 	beq	r2,zero,40025e0 <__addsf3+0x158>
 4002590:	04810034 	movhi	r18,1024
 4002594:	94bfffc4 	addi	r18,r18,-1
 4002598:	24a4703a 	and	r18,r4,r18
 400259c:	9009883a 	mov	r4,r18
 40025a0:	40063bc0 	call	40063bc <__clzsi2>
 40025a4:	10bffec4 	addi	r2,r2,-5
 40025a8:	90a4983a 	sll	r18,r18,r2
 40025ac:	14005416 	blt	r2,r16,4002700 <__addsf3+0x278>
 40025b0:	1405c83a 	sub	r2,r2,r16
 40025b4:	11000044 	addi	r4,r2,1
 40025b8:	00800804 	movi	r2,32
 40025bc:	1105c83a 	sub	r2,r2,r4
 40025c0:	9084983a 	sll	r2,r18,r2
 40025c4:	9124d83a 	srl	r18,r18,r4
 40025c8:	0021883a 	mov	r16,zero
 40025cc:	1008c03a 	cmpne	r4,r2,zero
 40025d0:	9108b03a 	or	r4,r18,r4
 40025d4:	003fc306 	br	40024e4 <__alt_data_end+0xfc0024e4>
 40025d8:	1000db26 	beq	r2,zero,4002948 <__addsf3+0x4c0>
 40025dc:	1009883a 	mov	r4,r2
 40025e0:	208001cc 	andi	r2,r4,7
 40025e4:	103fc11e 	bne	r2,zero,40024ec <__alt_data_end+0xfc0024ec>
 40025e8:	2006d0fa 	srli	r3,r4,3
 40025ec:	01003fc4 	movi	r4,255
 40025f0:	8805883a 	mov	r2,r17
 40025f4:	8100241e 	bne	r16,r4,4002688 <__addsf3+0x200>
 40025f8:	18006e26 	beq	r3,zero,40027b4 <__addsf3+0x32c>
 40025fc:	19001034 	orhi	r4,r3,64
 4002600:	00c02034 	movhi	r3,128
 4002604:	18ffffc4 	addi	r3,r3,-1
 4002608:	043fffc4 	movi	r16,-1
 400260c:	20c8703a 	and	r4,r4,r3
 4002610:	003fc206 	br	400251c <__alt_data_end+0xfc00251c>
 4002614:	8187c83a 	sub	r3,r16,r6
 4002618:	00c03e0e 	bge	zero,r3,4002714 <__addsf3+0x28c>
 400261c:	30002326 	beq	r6,zero,40026ac <__addsf3+0x224>
 4002620:	01803fc4 	movi	r6,255
 4002624:	81bfaf26 	beq	r16,r6,40024e4 <__alt_data_end+0xfc0024e4>
 4002628:	29410034 	orhi	r5,r5,1024
 400262c:	018006c4 	movi	r6,27
 4002630:	30c07416 	blt	r6,r3,4002804 <__addsf3+0x37c>
 4002634:	01800804 	movi	r6,32
 4002638:	30cdc83a 	sub	r6,r6,r3
 400263c:	298c983a 	sll	r6,r5,r6
 4002640:	28cad83a 	srl	r5,r5,r3
 4002644:	3006c03a 	cmpne	r3,r6,zero
 4002648:	28cab03a 	or	r5,r5,r3
 400264c:	2149883a 	add	r4,r4,r5
 4002650:	20c1002c 	andhi	r3,r4,1024
 4002654:	183fe226 	beq	r3,zero,40025e0 <__alt_data_end+0xfc0025e0>
 4002658:	84000044 	addi	r16,r16,1
 400265c:	00c03fc4 	movi	r3,255
 4002660:	80c05426 	beq	r16,r3,40027b4 <__addsf3+0x32c>
 4002664:	00bf0034 	movhi	r2,64512
 4002668:	10bfffc4 	addi	r2,r2,-1
 400266c:	20c0004c 	andi	r3,r4,1
 4002670:	2088703a 	and	r4,r4,r2
 4002674:	2008d07a 	srli	r4,r4,1
 4002678:	20c8b03a 	or	r4,r4,r3
 400267c:	003f9906 	br	40024e4 <__alt_data_end+0xfc0024e4>
 4002680:	0007883a 	mov	r3,zero
 4002684:	0005883a 	mov	r2,zero
 4002688:	01002034 	movhi	r4,128
 400268c:	213fffc4 	addi	r4,r4,-1
 4002690:	1908703a 	and	r4,r3,r4
 4002694:	003fa106 	br	400251c <__alt_data_end+0xfc00251c>
 4002698:	10bfffc4 	addi	r2,r2,-1
 400269c:	103fb926 	beq	r2,zero,4002584 <__alt_data_end+0xfc002584>
 40026a0:	00c03fc4 	movi	r3,255
 40026a4:	80ffaf1e 	bne	r16,r3,4002564 <__alt_data_end+0xfc002564>
 40026a8:	003f8e06 	br	40024e4 <__alt_data_end+0xfc0024e4>
 40026ac:	283f8d26 	beq	r5,zero,40024e4 <__alt_data_end+0xfc0024e4>
 40026b0:	18ffffc4 	addi	r3,r3,-1
 40026b4:	183fe526 	beq	r3,zero,400264c <__alt_data_end+0xfc00264c>
 40026b8:	01803fc4 	movi	r6,255
 40026bc:	81bfdb1e 	bne	r16,r6,400262c <__alt_data_end+0xfc00262c>
 40026c0:	003f8806 	br	40024e4 <__alt_data_end+0xfc0024e4>
 40026c4:	1000201e 	bne	r2,zero,4002748 <__addsf3+0x2c0>
 40026c8:	80800044 	addi	r2,r16,1
 40026cc:	10803fcc 	andi	r2,r2,255
 40026d0:	01800044 	movi	r6,1
 40026d4:	3080450e 	bge	r6,r2,40027ec <__addsf3+0x364>
 40026d8:	2165c83a 	sub	r18,r4,r5
 40026dc:	90c1002c 	andhi	r3,r18,1024
 40026e0:	18002b26 	beq	r3,zero,4002790 <__addsf3+0x308>
 40026e4:	2925c83a 	sub	r18,r5,r4
 40026e8:	3823883a 	mov	r17,r7
 40026ec:	003fab06 	br	400259c <__alt_data_end+0xfc00259c>
 40026f0:	8805883a 	mov	r2,r17
 40026f4:	043fffc4 	movi	r16,-1
 40026f8:	0009883a 	mov	r4,zero
 40026fc:	003f8706 	br	400251c <__alt_data_end+0xfc00251c>
 4002700:	013f0034 	movhi	r4,64512
 4002704:	213fffc4 	addi	r4,r4,-1
 4002708:	80a1c83a 	sub	r16,r16,r2
 400270c:	9108703a 	and	r4,r18,r4
 4002710:	003f7406 	br	40024e4 <__alt_data_end+0xfc0024e4>
 4002714:	1800411e 	bne	r3,zero,400281c <__addsf3+0x394>
 4002718:	80c00044 	addi	r3,r16,1
 400271c:	19c03fcc 	andi	r7,r3,255
 4002720:	01800044 	movi	r6,1
 4002724:	31c0260e 	bge	r6,r7,40027c0 <__addsf3+0x338>
 4002728:	01803fc4 	movi	r6,255
 400272c:	19802126 	beq	r3,r6,40027b4 <__addsf3+0x32c>
 4002730:	2149883a 	add	r4,r4,r5
 4002734:	2008d07a 	srli	r4,r4,1
 4002738:	1821883a 	mov	r16,r3
 400273c:	003f6906 	br	40024e4 <__alt_data_end+0xfc0024e4>
 4002740:	01400044 	movi	r5,1
 4002744:	003f8f06 	br	4002584 <__alt_data_end+0xfc002584>
 4002748:	8000151e 	bne	r16,zero,40027a0 <__addsf3+0x318>
 400274c:	20002f26 	beq	r4,zero,400280c <__addsf3+0x384>
 4002750:	0084303a 	nor	r2,zero,r2
 4002754:	10000a26 	beq	r2,zero,4002780 <__addsf3+0x2f8>
 4002758:	00c03fc4 	movi	r3,255
 400275c:	30c02b26 	beq	r6,r3,400280c <__addsf3+0x384>
 4002760:	00c006c4 	movi	r3,27
 4002764:	18806d16 	blt	r3,r2,400291c <__addsf3+0x494>
 4002768:	00c00804 	movi	r3,32
 400276c:	1887c83a 	sub	r3,r3,r2
 4002770:	20c6983a 	sll	r3,r4,r3
 4002774:	2084d83a 	srl	r2,r4,r2
 4002778:	1808c03a 	cmpne	r4,r3,zero
 400277c:	1108b03a 	or	r4,r2,r4
 4002780:	2909c83a 	sub	r4,r5,r4
 4002784:	3021883a 	mov	r16,r6
 4002788:	3823883a 	mov	r17,r7
 400278c:	003f7e06 	br	4002588 <__alt_data_end+0xfc002588>
 4002790:	903f821e 	bne	r18,zero,400259c <__alt_data_end+0xfc00259c>
 4002794:	0005883a 	mov	r2,zero
 4002798:	0021883a 	mov	r16,zero
 400279c:	003fba06 	br	4002688 <__alt_data_end+0xfc002688>
 40027a0:	00c03fc4 	movi	r3,255
 40027a4:	30c01926 	beq	r6,r3,400280c <__addsf3+0x384>
 40027a8:	0085c83a 	sub	r2,zero,r2
 40027ac:	21010034 	orhi	r4,r4,1024
 40027b0:	003feb06 	br	4002760 <__alt_data_end+0xfc002760>
 40027b4:	043fffc4 	movi	r16,-1
 40027b8:	0009883a 	mov	r4,zero
 40027bc:	003f5706 	br	400251c <__alt_data_end+0xfc00251c>
 40027c0:	80004a1e 	bne	r16,zero,40028ec <__addsf3+0x464>
 40027c4:	20005926 	beq	r4,zero,400292c <__addsf3+0x4a4>
 40027c8:	283f4626 	beq	r5,zero,40024e4 <__alt_data_end+0xfc0024e4>
 40027cc:	2149883a 	add	r4,r4,r5
 40027d0:	2081002c 	andhi	r2,r4,1024
 40027d4:	103f8226 	beq	r2,zero,40025e0 <__alt_data_end+0xfc0025e0>
 40027d8:	00bf0034 	movhi	r2,64512
 40027dc:	10bfffc4 	addi	r2,r2,-1
 40027e0:	3021883a 	mov	r16,r6
 40027e4:	2088703a 	and	r4,r4,r2
 40027e8:	003f3e06 	br	40024e4 <__alt_data_end+0xfc0024e4>
 40027ec:	8000121e 	bne	r16,zero,4002838 <__addsf3+0x3b0>
 40027f0:	2000261e 	bne	r4,zero,400288c <__addsf3+0x404>
 40027f4:	283fa226 	beq	r5,zero,4002680 <__alt_data_end+0xfc002680>
 40027f8:	2809883a 	mov	r4,r5
 40027fc:	3823883a 	mov	r17,r7
 4002800:	003f3806 	br	40024e4 <__alt_data_end+0xfc0024e4>
 4002804:	01400044 	movi	r5,1
 4002808:	003f9006 	br	400264c <__alt_data_end+0xfc00264c>
 400280c:	2809883a 	mov	r4,r5
 4002810:	3021883a 	mov	r16,r6
 4002814:	3823883a 	mov	r17,r7
 4002818:	003f3206 	br	40024e4 <__alt_data_end+0xfc0024e4>
 400281c:	80000c1e 	bne	r16,zero,4002850 <__addsf3+0x3c8>
 4002820:	20002f26 	beq	r4,zero,40028e0 <__addsf3+0x458>
 4002824:	00c6303a 	nor	r3,zero,r3
 4002828:	18002b1e 	bne	r3,zero,40028d8 <__addsf3+0x450>
 400282c:	2149883a 	add	r4,r4,r5
 4002830:	3021883a 	mov	r16,r6
 4002834:	003f8606 	br	4002650 <__alt_data_end+0xfc002650>
 4002838:	20001b1e 	bne	r4,zero,40028a8 <__addsf3+0x420>
 400283c:	28003926 	beq	r5,zero,4002924 <__addsf3+0x49c>
 4002840:	2809883a 	mov	r4,r5
 4002844:	3823883a 	mov	r17,r7
 4002848:	04003fc4 	movi	r16,255
 400284c:	003f2506 	br	40024e4 <__alt_data_end+0xfc0024e4>
 4002850:	01c03fc4 	movi	r7,255
 4002854:	31c02226 	beq	r6,r7,40028e0 <__addsf3+0x458>
 4002858:	00c7c83a 	sub	r3,zero,r3
 400285c:	21010034 	orhi	r4,r4,1024
 4002860:	01c006c4 	movi	r7,27
 4002864:	38c03616 	blt	r7,r3,4002940 <__addsf3+0x4b8>
 4002868:	01c00804 	movi	r7,32
 400286c:	38cfc83a 	sub	r7,r7,r3
 4002870:	21ce983a 	sll	r7,r4,r7
 4002874:	20c6d83a 	srl	r3,r4,r3
 4002878:	3808c03a 	cmpne	r4,r7,zero
 400287c:	1906b03a 	or	r3,r3,r4
 4002880:	1949883a 	add	r4,r3,r5
 4002884:	3021883a 	mov	r16,r6
 4002888:	003f7106 	br	4002650 <__alt_data_end+0xfc002650>
 400288c:	283f1526 	beq	r5,zero,40024e4 <__alt_data_end+0xfc0024e4>
 4002890:	2145c83a 	sub	r2,r4,r5
 4002894:	10c1002c 	andhi	r3,r2,1024
 4002898:	183f4f26 	beq	r3,zero,40025d8 <__alt_data_end+0xfc0025d8>
 400289c:	2909c83a 	sub	r4,r5,r4
 40028a0:	3823883a 	mov	r17,r7
 40028a4:	003f0f06 	br	40024e4 <__alt_data_end+0xfc0024e4>
 40028a8:	28001a26 	beq	r5,zero,4002914 <__addsf3+0x48c>
 40028ac:	2008d0fa 	srli	r4,r4,3
 40028b0:	2080102c 	andhi	r2,r4,64
 40028b4:	10000526 	beq	r2,zero,40028cc <__addsf3+0x444>
 40028b8:	280ad0fa 	srli	r5,r5,3
 40028bc:	2880102c 	andhi	r2,r5,64
 40028c0:	1000021e 	bne	r2,zero,40028cc <__addsf3+0x444>
 40028c4:	2809883a 	mov	r4,r5
 40028c8:	3823883a 	mov	r17,r7
 40028cc:	200890fa 	slli	r4,r4,3
 40028d0:	04003fc4 	movi	r16,255
 40028d4:	003f0306 	br	40024e4 <__alt_data_end+0xfc0024e4>
 40028d8:	01c03fc4 	movi	r7,255
 40028dc:	31ffe01e 	bne	r6,r7,4002860 <__alt_data_end+0xfc002860>
 40028e0:	2809883a 	mov	r4,r5
 40028e4:	3021883a 	mov	r16,r6
 40028e8:	003efe06 	br	40024e4 <__alt_data_end+0xfc0024e4>
 40028ec:	20001126 	beq	r4,zero,4002934 <__addsf3+0x4ac>
 40028f0:	28000826 	beq	r5,zero,4002914 <__addsf3+0x48c>
 40028f4:	2008d0fa 	srli	r4,r4,3
 40028f8:	2080102c 	andhi	r2,r4,64
 40028fc:	103ff326 	beq	r2,zero,40028cc <__alt_data_end+0xfc0028cc>
 4002900:	280ad0fa 	srli	r5,r5,3
 4002904:	2880102c 	andhi	r2,r5,64
 4002908:	103ff01e 	bne	r2,zero,40028cc <__alt_data_end+0xfc0028cc>
 400290c:	2809883a 	mov	r4,r5
 4002910:	003fee06 	br	40028cc <__alt_data_end+0xfc0028cc>
 4002914:	04003fc4 	movi	r16,255
 4002918:	003ef206 	br	40024e4 <__alt_data_end+0xfc0024e4>
 400291c:	01000044 	movi	r4,1
 4002920:	003f9706 	br	4002780 <__alt_data_end+0xfc002780>
 4002924:	0005883a 	mov	r2,zero
 4002928:	003f3406 	br	40025fc <__alt_data_end+0xfc0025fc>
 400292c:	2809883a 	mov	r4,r5
 4002930:	003eec06 	br	40024e4 <__alt_data_end+0xfc0024e4>
 4002934:	2809883a 	mov	r4,r5
 4002938:	04003fc4 	movi	r16,255
 400293c:	003ee906 	br	40024e4 <__alt_data_end+0xfc0024e4>
 4002940:	00c00044 	movi	r3,1
 4002944:	003fce06 	br	4002880 <__alt_data_end+0xfc002880>
 4002948:	0005883a 	mov	r2,zero
 400294c:	003f4e06 	br	4002688 <__alt_data_end+0xfc002688>

04002950 <__divsf3>:
 4002950:	defff504 	addi	sp,sp,-44
 4002954:	200cd5fa 	srli	r6,r4,23
 4002958:	dcc00415 	stw	r19,16(sp)
 400295c:	2026d7fa 	srli	r19,r4,31
 4002960:	00c02034 	movhi	r3,128
 4002964:	dd800715 	stw	r22,28(sp)
 4002968:	dd000515 	stw	r20,20(sp)
 400296c:	dc800315 	stw	r18,12(sp)
 4002970:	18ffffc4 	addi	r3,r3,-1
 4002974:	dfc00a15 	stw	ra,40(sp)
 4002978:	df000915 	stw	fp,36(sp)
 400297c:	ddc00815 	stw	r23,32(sp)
 4002980:	dd400615 	stw	r21,24(sp)
 4002984:	dc400215 	stw	r17,8(sp)
 4002988:	dc000115 	stw	r16,4(sp)
 400298c:	35003fcc 	andi	r20,r6,255
 4002990:	1924703a 	and	r18,r3,r4
 4002994:	9d803fcc 	andi	r22,r19,255
 4002998:	a0005226 	beq	r20,zero,4002ae4 <__divsf3+0x194>
 400299c:	00803fc4 	movi	r2,255
 40029a0:	a0802e26 	beq	r20,r2,4002a5c <__divsf3+0x10c>
 40029a4:	91002034 	orhi	r4,r18,128
 40029a8:	202490fa 	slli	r18,r4,3
 40029ac:	a53fe044 	addi	r20,r20,-127
 40029b0:	0021883a 	mov	r16,zero
 40029b4:	002f883a 	mov	r23,zero
 40029b8:	280cd5fa 	srli	r6,r5,23
 40029bc:	282ad7fa 	srli	r21,r5,31
 40029c0:	00c02034 	movhi	r3,128
 40029c4:	18ffffc4 	addi	r3,r3,-1
 40029c8:	31803fcc 	andi	r6,r6,255
 40029cc:	1962703a 	and	r17,r3,r5
 40029d0:	af003fcc 	andi	fp,r21,255
 40029d4:	30004a26 	beq	r6,zero,4002b00 <__divsf3+0x1b0>
 40029d8:	00803fc4 	movi	r2,255
 40029dc:	30804526 	beq	r6,r2,4002af4 <__divsf3+0x1a4>
 40029e0:	89402034 	orhi	r5,r17,128
 40029e4:	282290fa 	slli	r17,r5,3
 40029e8:	31bfe044 	addi	r6,r6,-127
 40029ec:	000b883a 	mov	r5,zero
 40029f0:	2c20b03a 	or	r16,r5,r16
 40029f4:	802090ba 	slli	r16,r16,2
 40029f8:	00810034 	movhi	r2,1024
 40029fc:	108a8704 	addi	r2,r2,10780
 4002a00:	80a1883a 	add	r16,r16,r2
 4002a04:	81000017 	ldw	r4,0(r16)
 4002a08:	9d46f03a 	xor	r3,r19,r21
 4002a0c:	180f883a 	mov	r7,r3
 4002a10:	18803fcc 	andi	r2,r3,255
 4002a14:	a18dc83a 	sub	r6,r20,r6
 4002a18:	2000683a 	jmp	r4
 4002a1c:	04002c00 	call	4002c0 <__alt_mem_onchip_flash_data-0x1bffd40>
 4002a20:	04002a84 	movi	r16,170
 4002a24:	04002bf4 	movhi	r16,175
 4002a28:	04002a70 	cmpltui	r16,zero,169
 4002a2c:	04002bf4 	movhi	r16,175
 4002a30:	04002bcc 	andi	r16,zero,175
 4002a34:	04002bf4 	movhi	r16,175
 4002a38:	04002a70 	cmpltui	r16,zero,169
 4002a3c:	04002a84 	movi	r16,170
 4002a40:	04002a84 	movi	r16,170
 4002a44:	04002bcc 	andi	r16,zero,175
 4002a48:	04002a70 	cmpltui	r16,zero,169
 4002a4c:	04002ce0 	cmpeqi	r16,zero,179
 4002a50:	04002ce0 	cmpeqi	r16,zero,179
 4002a54:	04002ce0 	cmpeqi	r16,zero,179
 4002a58:	04002c94 	movui	r16,178
 4002a5c:	9000581e 	bne	r18,zero,4002bc0 <__divsf3+0x270>
 4002a60:	04000204 	movi	r16,8
 4002a64:	05c00084 	movi	r23,2
 4002a68:	003fd306 	br	40029b8 <__alt_data_end+0xfc0029b8>
 4002a6c:	0023883a 	mov	r17,zero
 4002a70:	e02d883a 	mov	r22,fp
 4002a74:	282f883a 	mov	r23,r5
 4002a78:	00800084 	movi	r2,2
 4002a7c:	b8808f1e 	bne	r23,r2,4002cbc <__divsf3+0x36c>
 4002a80:	b005883a 	mov	r2,r22
 4002a84:	11c0004c 	andi	r7,r2,1
 4002a88:	013fffc4 	movi	r4,-1
 4002a8c:	000d883a 	mov	r6,zero
 4002a90:	21003fcc 	andi	r4,r4,255
 4002a94:	200895fa 	slli	r4,r4,23
 4002a98:	38803fcc 	andi	r2,r7,255
 4002a9c:	00c02034 	movhi	r3,128
 4002aa0:	100497fa 	slli	r2,r2,31
 4002aa4:	18ffffc4 	addi	r3,r3,-1
 4002aa8:	30c6703a 	and	r3,r6,r3
 4002aac:	1906b03a 	or	r3,r3,r4
 4002ab0:	1884b03a 	or	r2,r3,r2
 4002ab4:	dfc00a17 	ldw	ra,40(sp)
 4002ab8:	df000917 	ldw	fp,36(sp)
 4002abc:	ddc00817 	ldw	r23,32(sp)
 4002ac0:	dd800717 	ldw	r22,28(sp)
 4002ac4:	dd400617 	ldw	r21,24(sp)
 4002ac8:	dd000517 	ldw	r20,20(sp)
 4002acc:	dcc00417 	ldw	r19,16(sp)
 4002ad0:	dc800317 	ldw	r18,12(sp)
 4002ad4:	dc400217 	ldw	r17,8(sp)
 4002ad8:	dc000117 	ldw	r16,4(sp)
 4002adc:	dec00b04 	addi	sp,sp,44
 4002ae0:	f800283a 	ret
 4002ae4:	90002b1e 	bne	r18,zero,4002b94 <__divsf3+0x244>
 4002ae8:	04000104 	movi	r16,4
 4002aec:	05c00044 	movi	r23,1
 4002af0:	003fb106 	br	40029b8 <__alt_data_end+0xfc0029b8>
 4002af4:	8800251e 	bne	r17,zero,4002b8c <__divsf3+0x23c>
 4002af8:	01400084 	movi	r5,2
 4002afc:	00000206 	br	4002b08 <__divsf3+0x1b8>
 4002b00:	88001a1e 	bne	r17,zero,4002b6c <__divsf3+0x21c>
 4002b04:	01400044 	movi	r5,1
 4002b08:	8160b03a 	or	r16,r16,r5
 4002b0c:	802090ba 	slli	r16,r16,2
 4002b10:	00c10034 	movhi	r3,1024
 4002b14:	18cacb04 	addi	r3,r3,11052
 4002b18:	80e1883a 	add	r16,r16,r3
 4002b1c:	80c00017 	ldw	r3,0(r16)
 4002b20:	9d44f03a 	xor	r2,r19,r21
 4002b24:	a18dc83a 	sub	r6,r20,r6
 4002b28:	1800683a 	jmp	r3
 4002b2c:	04002a84 	movi	r16,170
 4002b30:	04002a84 	movi	r16,170
 4002b34:	04002cd0 	cmplti	r16,zero,179
 4002b38:	04002a6c 	andhi	r16,zero,169
 4002b3c:	04002cd0 	cmplti	r16,zero,179
 4002b40:	04002bcc 	andi	r16,zero,175
 4002b44:	04002cd0 	cmplti	r16,zero,179
 4002b48:	04002a6c 	andhi	r16,zero,169
 4002b4c:	04002a84 	movi	r16,170
 4002b50:	04002a84 	movi	r16,170
 4002b54:	04002bcc 	andi	r16,zero,175
 4002b58:	04002a6c 	andhi	r16,zero,169
 4002b5c:	04002ce0 	cmpeqi	r16,zero,179
 4002b60:	04002ce0 	cmpeqi	r16,zero,179
 4002b64:	04002ce0 	cmpeqi	r16,zero,179
 4002b68:	04002cf8 	rdprs	r16,zero,179
 4002b6c:	8809883a 	mov	r4,r17
 4002b70:	40063bc0 	call	40063bc <__clzsi2>
 4002b74:	10fffec4 	addi	r3,r2,-5
 4002b78:	10801d84 	addi	r2,r2,118
 4002b7c:	88e2983a 	sll	r17,r17,r3
 4002b80:	008dc83a 	sub	r6,zero,r2
 4002b84:	000b883a 	mov	r5,zero
 4002b88:	003f9906 	br	40029f0 <__alt_data_end+0xfc0029f0>
 4002b8c:	014000c4 	movi	r5,3
 4002b90:	003f9706 	br	40029f0 <__alt_data_end+0xfc0029f0>
 4002b94:	9009883a 	mov	r4,r18
 4002b98:	d9400015 	stw	r5,0(sp)
 4002b9c:	40063bc0 	call	40063bc <__clzsi2>
 4002ba0:	10fffec4 	addi	r3,r2,-5
 4002ba4:	11801d84 	addi	r6,r2,118
 4002ba8:	90e4983a 	sll	r18,r18,r3
 4002bac:	01a9c83a 	sub	r20,zero,r6
 4002bb0:	0021883a 	mov	r16,zero
 4002bb4:	002f883a 	mov	r23,zero
 4002bb8:	d9400017 	ldw	r5,0(sp)
 4002bbc:	003f7e06 	br	40029b8 <__alt_data_end+0xfc0029b8>
 4002bc0:	04000304 	movi	r16,12
 4002bc4:	05c000c4 	movi	r23,3
 4002bc8:	003f7b06 	br	40029b8 <__alt_data_end+0xfc0029b8>
 4002bcc:	01802034 	movhi	r6,128
 4002bd0:	000f883a 	mov	r7,zero
 4002bd4:	31bfffc4 	addi	r6,r6,-1
 4002bd8:	013fffc4 	movi	r4,-1
 4002bdc:	003fac06 	br	4002a90 <__alt_data_end+0xfc002a90>
 4002be0:	01400044 	movi	r5,1
 4002be4:	2909c83a 	sub	r4,r5,r4
 4002be8:	00c006c4 	movi	r3,27
 4002bec:	19004b0e 	bge	r3,r4,4002d1c <__divsf3+0x3cc>
 4002bf0:	114e703a 	and	r7,r2,r5
 4002bf4:	0009883a 	mov	r4,zero
 4002bf8:	000d883a 	mov	r6,zero
 4002bfc:	003fa406 	br	4002a90 <__alt_data_end+0xfc002a90>
 4002c00:	9006917a 	slli	r3,r18,5
 4002c04:	8822917a 	slli	r17,r17,5
 4002c08:	1c40372e 	bgeu	r3,r17,4002ce8 <__divsf3+0x398>
 4002c0c:	31bfffc4 	addi	r6,r6,-1
 4002c10:	010006c4 	movi	r4,27
 4002c14:	000b883a 	mov	r5,zero
 4002c18:	180f883a 	mov	r7,r3
 4002c1c:	294b883a 	add	r5,r5,r5
 4002c20:	18c7883a 	add	r3,r3,r3
 4002c24:	38000116 	blt	r7,zero,4002c2c <__divsf3+0x2dc>
 4002c28:	1c400236 	bltu	r3,r17,4002c34 <__divsf3+0x2e4>
 4002c2c:	1c47c83a 	sub	r3,r3,r17
 4002c30:	29400054 	ori	r5,r5,1
 4002c34:	213fffc4 	addi	r4,r4,-1
 4002c38:	203ff71e 	bne	r4,zero,4002c18 <__alt_data_end+0xfc002c18>
 4002c3c:	1806c03a 	cmpne	r3,r3,zero
 4002c40:	1962b03a 	or	r17,r3,r5
 4002c44:	31001fc4 	addi	r4,r6,127
 4002c48:	013fe50e 	bge	zero,r4,4002be0 <__alt_data_end+0xfc002be0>
 4002c4c:	88c001cc 	andi	r3,r17,7
 4002c50:	18000426 	beq	r3,zero,4002c64 <__divsf3+0x314>
 4002c54:	88c003cc 	andi	r3,r17,15
 4002c58:	01400104 	movi	r5,4
 4002c5c:	19400126 	beq	r3,r5,4002c64 <__divsf3+0x314>
 4002c60:	8963883a 	add	r17,r17,r5
 4002c64:	88c2002c 	andhi	r3,r17,2048
 4002c68:	18000426 	beq	r3,zero,4002c7c <__divsf3+0x32c>
 4002c6c:	00fe0034 	movhi	r3,63488
 4002c70:	18ffffc4 	addi	r3,r3,-1
 4002c74:	31002004 	addi	r4,r6,128
 4002c78:	88e2703a 	and	r17,r17,r3
 4002c7c:	00c03f84 	movi	r3,254
 4002c80:	193f8016 	blt	r3,r4,4002a84 <__alt_data_end+0xfc002a84>
 4002c84:	880c91ba 	slli	r6,r17,6
 4002c88:	11c0004c 	andi	r7,r2,1
 4002c8c:	300cd27a 	srli	r6,r6,9
 4002c90:	003f7f06 	br	4002a90 <__alt_data_end+0xfc002a90>
 4002c94:	9080102c 	andhi	r2,r18,64
 4002c98:	10000226 	beq	r2,zero,4002ca4 <__divsf3+0x354>
 4002c9c:	8880102c 	andhi	r2,r17,64
 4002ca0:	10001826 	beq	r2,zero,4002d04 <__divsf3+0x3b4>
 4002ca4:	00802034 	movhi	r2,128
 4002ca8:	91801034 	orhi	r6,r18,64
 4002cac:	10bfffc4 	addi	r2,r2,-1
 4002cb0:	980f883a 	mov	r7,r19
 4002cb4:	308c703a 	and	r6,r6,r2
 4002cb8:	003fc706 	br	4002bd8 <__alt_data_end+0xfc002bd8>
 4002cbc:	008000c4 	movi	r2,3
 4002cc0:	b8802d26 	beq	r23,r2,4002d78 <__divsf3+0x428>
 4002cc4:	00c00044 	movi	r3,1
 4002cc8:	b005883a 	mov	r2,r22
 4002ccc:	b8ffdd1e 	bne	r23,r3,4002c44 <__alt_data_end+0xfc002c44>
 4002cd0:	11c0004c 	andi	r7,r2,1
 4002cd4:	0009883a 	mov	r4,zero
 4002cd8:	000d883a 	mov	r6,zero
 4002cdc:	003f6c06 	br	4002a90 <__alt_data_end+0xfc002a90>
 4002ce0:	9023883a 	mov	r17,r18
 4002ce4:	003f6406 	br	4002a78 <__alt_data_end+0xfc002a78>
 4002ce8:	1c47c83a 	sub	r3,r3,r17
 4002cec:	01000684 	movi	r4,26
 4002cf0:	01400044 	movi	r5,1
 4002cf4:	003fc806 	br	4002c18 <__alt_data_end+0xfc002c18>
 4002cf8:	9080102c 	andhi	r2,r18,64
 4002cfc:	103fe926 	beq	r2,zero,4002ca4 <__alt_data_end+0xfc002ca4>
 4002d00:	0023883a 	mov	r17,zero
 4002d04:	00802034 	movhi	r2,128
 4002d08:	89801034 	orhi	r6,r17,64
 4002d0c:	10bfffc4 	addi	r2,r2,-1
 4002d10:	a80f883a 	mov	r7,r21
 4002d14:	308c703a 	and	r6,r6,r2
 4002d18:	003faf06 	br	4002bd8 <__alt_data_end+0xfc002bd8>
 4002d1c:	01c00804 	movi	r7,32
 4002d20:	390fc83a 	sub	r7,r7,r4
 4002d24:	89ce983a 	sll	r7,r17,r7
 4002d28:	890ad83a 	srl	r5,r17,r4
 4002d2c:	380ec03a 	cmpne	r7,r7,zero
 4002d30:	29cab03a 	or	r5,r5,r7
 4002d34:	28c001cc 	andi	r3,r5,7
 4002d38:	18000426 	beq	r3,zero,4002d4c <__divsf3+0x3fc>
 4002d3c:	28c003cc 	andi	r3,r5,15
 4002d40:	01000104 	movi	r4,4
 4002d44:	19000126 	beq	r3,r4,4002d4c <__divsf3+0x3fc>
 4002d48:	290b883a 	add	r5,r5,r4
 4002d4c:	28c1002c 	andhi	r3,r5,1024
 4002d50:	18000426 	beq	r3,zero,4002d64 <__divsf3+0x414>
 4002d54:	11c0004c 	andi	r7,r2,1
 4002d58:	01000044 	movi	r4,1
 4002d5c:	000d883a 	mov	r6,zero
 4002d60:	003f4b06 	br	4002a90 <__alt_data_end+0xfc002a90>
 4002d64:	280a91ba 	slli	r5,r5,6
 4002d68:	11c0004c 	andi	r7,r2,1
 4002d6c:	0009883a 	mov	r4,zero
 4002d70:	280cd27a 	srli	r6,r5,9
 4002d74:	003f4606 	br	4002a90 <__alt_data_end+0xfc002a90>
 4002d78:	00802034 	movhi	r2,128
 4002d7c:	89801034 	orhi	r6,r17,64
 4002d80:	10bfffc4 	addi	r2,r2,-1
 4002d84:	b00f883a 	mov	r7,r22
 4002d88:	308c703a 	and	r6,r6,r2
 4002d8c:	003f9206 	br	4002bd8 <__alt_data_end+0xfc002bd8>

04002d90 <__gesf2>:
 4002d90:	2004d5fa 	srli	r2,r4,23
 4002d94:	2806d5fa 	srli	r3,r5,23
 4002d98:	01802034 	movhi	r6,128
 4002d9c:	31bfffc4 	addi	r6,r6,-1
 4002da0:	10803fcc 	andi	r2,r2,255
 4002da4:	01c03fc4 	movi	r7,255
 4002da8:	3110703a 	and	r8,r6,r4
 4002dac:	18c03fcc 	andi	r3,r3,255
 4002db0:	314c703a 	and	r6,r6,r5
 4002db4:	2008d7fa 	srli	r4,r4,31
 4002db8:	280ad7fa 	srli	r5,r5,31
 4002dbc:	11c01926 	beq	r2,r7,4002e24 <__gesf2+0x94>
 4002dc0:	01c03fc4 	movi	r7,255
 4002dc4:	19c00f26 	beq	r3,r7,4002e04 <__gesf2+0x74>
 4002dc8:	1000061e 	bne	r2,zero,4002de4 <__gesf2+0x54>
 4002dcc:	400f003a 	cmpeq	r7,r8,zero
 4002dd0:	1800071e 	bne	r3,zero,4002df0 <__gesf2+0x60>
 4002dd4:	3000061e 	bne	r6,zero,4002df0 <__gesf2+0x60>
 4002dd8:	0005883a 	mov	r2,zero
 4002ddc:	40000e1e 	bne	r8,zero,4002e18 <__gesf2+0x88>
 4002de0:	f800283a 	ret
 4002de4:	18000a1e 	bne	r3,zero,4002e10 <__gesf2+0x80>
 4002de8:	30000b26 	beq	r6,zero,4002e18 <__gesf2+0x88>
 4002dec:	000f883a 	mov	r7,zero
 4002df0:	29403fcc 	andi	r5,r5,255
 4002df4:	38000726 	beq	r7,zero,4002e14 <__gesf2+0x84>
 4002df8:	28000826 	beq	r5,zero,4002e1c <__gesf2+0x8c>
 4002dfc:	00800044 	movi	r2,1
 4002e00:	f800283a 	ret
 4002e04:	303ff026 	beq	r6,zero,4002dc8 <__alt_data_end+0xfc002dc8>
 4002e08:	00bfff84 	movi	r2,-2
 4002e0c:	f800283a 	ret
 4002e10:	29403fcc 	andi	r5,r5,255
 4002e14:	21400526 	beq	r4,r5,4002e2c <__gesf2+0x9c>
 4002e18:	203ff826 	beq	r4,zero,4002dfc <__alt_data_end+0xfc002dfc>
 4002e1c:	00bfffc4 	movi	r2,-1
 4002e20:	f800283a 	ret
 4002e24:	403fe626 	beq	r8,zero,4002dc0 <__alt_data_end+0xfc002dc0>
 4002e28:	003ff706 	br	4002e08 <__alt_data_end+0xfc002e08>
 4002e2c:	18bffa16 	blt	r3,r2,4002e18 <__alt_data_end+0xfc002e18>
 4002e30:	10c00216 	blt	r2,r3,4002e3c <__gesf2+0xac>
 4002e34:	323ff836 	bltu	r6,r8,4002e18 <__alt_data_end+0xfc002e18>
 4002e38:	4180022e 	bgeu	r8,r6,4002e44 <__gesf2+0xb4>
 4002e3c:	203fef1e 	bne	r4,zero,4002dfc <__alt_data_end+0xfc002dfc>
 4002e40:	003ff606 	br	4002e1c <__alt_data_end+0xfc002e1c>
 4002e44:	0005883a 	mov	r2,zero
 4002e48:	f800283a 	ret

04002e4c <__lesf2>:
 4002e4c:	2004d5fa 	srli	r2,r4,23
 4002e50:	280cd5fa 	srli	r6,r5,23
 4002e54:	00c02034 	movhi	r3,128
 4002e58:	18ffffc4 	addi	r3,r3,-1
 4002e5c:	10803fcc 	andi	r2,r2,255
 4002e60:	01c03fc4 	movi	r7,255
 4002e64:	1910703a 	and	r8,r3,r4
 4002e68:	31803fcc 	andi	r6,r6,255
 4002e6c:	1946703a 	and	r3,r3,r5
 4002e70:	2008d7fa 	srli	r4,r4,31
 4002e74:	280ad7fa 	srli	r5,r5,31
 4002e78:	11c01b26 	beq	r2,r7,4002ee8 <__lesf2+0x9c>
 4002e7c:	01c03fc4 	movi	r7,255
 4002e80:	31c01126 	beq	r6,r7,4002ec8 <__lesf2+0x7c>
 4002e84:	1000071e 	bne	r2,zero,4002ea4 <__lesf2+0x58>
 4002e88:	400f003a 	cmpeq	r7,r8,zero
 4002e8c:	21003fcc 	andi	r4,r4,255
 4002e90:	3000081e 	bne	r6,zero,4002eb4 <__lesf2+0x68>
 4002e94:	1800071e 	bne	r3,zero,4002eb4 <__lesf2+0x68>
 4002e98:	0005883a 	mov	r2,zero
 4002e9c:	40000f1e 	bne	r8,zero,4002edc <__lesf2+0x90>
 4002ea0:	f800283a 	ret
 4002ea4:	21003fcc 	andi	r4,r4,255
 4002ea8:	30000a1e 	bne	r6,zero,4002ed4 <__lesf2+0x88>
 4002eac:	18000b26 	beq	r3,zero,4002edc <__lesf2+0x90>
 4002eb0:	000f883a 	mov	r7,zero
 4002eb4:	29403fcc 	andi	r5,r5,255
 4002eb8:	38000726 	beq	r7,zero,4002ed8 <__lesf2+0x8c>
 4002ebc:	28000826 	beq	r5,zero,4002ee0 <__lesf2+0x94>
 4002ec0:	00800044 	movi	r2,1
 4002ec4:	f800283a 	ret
 4002ec8:	183fee26 	beq	r3,zero,4002e84 <__alt_data_end+0xfc002e84>
 4002ecc:	00800084 	movi	r2,2
 4002ed0:	f800283a 	ret
 4002ed4:	29403fcc 	andi	r5,r5,255
 4002ed8:	21400626 	beq	r4,r5,4002ef4 <__lesf2+0xa8>
 4002edc:	203ff826 	beq	r4,zero,4002ec0 <__alt_data_end+0xfc002ec0>
 4002ee0:	00bfffc4 	movi	r2,-1
 4002ee4:	f800283a 	ret
 4002ee8:	403fe426 	beq	r8,zero,4002e7c <__alt_data_end+0xfc002e7c>
 4002eec:	00800084 	movi	r2,2
 4002ef0:	f800283a 	ret
 4002ef4:	30bff916 	blt	r6,r2,4002edc <__alt_data_end+0xfc002edc>
 4002ef8:	11800216 	blt	r2,r6,4002f04 <__lesf2+0xb8>
 4002efc:	1a3ff736 	bltu	r3,r8,4002edc <__alt_data_end+0xfc002edc>
 4002f00:	40c0022e 	bgeu	r8,r3,4002f0c <__lesf2+0xc0>
 4002f04:	203fee1e 	bne	r4,zero,4002ec0 <__alt_data_end+0xfc002ec0>
 4002f08:	003ff506 	br	4002ee0 <__alt_data_end+0xfc002ee0>
 4002f0c:	0005883a 	mov	r2,zero
 4002f10:	f800283a 	ret

04002f14 <__mulsf3>:
 4002f14:	defff504 	addi	sp,sp,-44
 4002f18:	dc000115 	stw	r16,4(sp)
 4002f1c:	2020d5fa 	srli	r16,r4,23
 4002f20:	dd400615 	stw	r21,24(sp)
 4002f24:	202ad7fa 	srli	r21,r4,31
 4002f28:	dc800315 	stw	r18,12(sp)
 4002f2c:	04802034 	movhi	r18,128
 4002f30:	df000915 	stw	fp,36(sp)
 4002f34:	dd000515 	stw	r20,20(sp)
 4002f38:	94bfffc4 	addi	r18,r18,-1
 4002f3c:	dfc00a15 	stw	ra,40(sp)
 4002f40:	ddc00815 	stw	r23,32(sp)
 4002f44:	dd800715 	stw	r22,28(sp)
 4002f48:	dcc00415 	stw	r19,16(sp)
 4002f4c:	dc400215 	stw	r17,8(sp)
 4002f50:	84003fcc 	andi	r16,r16,255
 4002f54:	9124703a 	and	r18,r18,r4
 4002f58:	a829883a 	mov	r20,r21
 4002f5c:	af003fcc 	andi	fp,r21,255
 4002f60:	80005426 	beq	r16,zero,40030b4 <__mulsf3+0x1a0>
 4002f64:	00803fc4 	movi	r2,255
 4002f68:	80802f26 	beq	r16,r2,4003028 <__mulsf3+0x114>
 4002f6c:	91002034 	orhi	r4,r18,128
 4002f70:	202490fa 	slli	r18,r4,3
 4002f74:	843fe044 	addi	r16,r16,-127
 4002f78:	0023883a 	mov	r17,zero
 4002f7c:	002f883a 	mov	r23,zero
 4002f80:	2804d5fa 	srli	r2,r5,23
 4002f84:	282cd7fa 	srli	r22,r5,31
 4002f88:	01002034 	movhi	r4,128
 4002f8c:	213fffc4 	addi	r4,r4,-1
 4002f90:	10803fcc 	andi	r2,r2,255
 4002f94:	2166703a 	and	r19,r4,r5
 4002f98:	b1803fcc 	andi	r6,r22,255
 4002f9c:	10004c26 	beq	r2,zero,40030d0 <__mulsf3+0x1bc>
 4002fa0:	00c03fc4 	movi	r3,255
 4002fa4:	10c04726 	beq	r2,r3,40030c4 <__mulsf3+0x1b0>
 4002fa8:	99002034 	orhi	r4,r19,128
 4002fac:	202690fa 	slli	r19,r4,3
 4002fb0:	10bfe044 	addi	r2,r2,-127
 4002fb4:	0007883a 	mov	r3,zero
 4002fb8:	80a1883a 	add	r16,r16,r2
 4002fbc:	010003c4 	movi	r4,15
 4002fc0:	1c44b03a 	or	r2,r3,r17
 4002fc4:	b56af03a 	xor	r21,r22,r21
 4002fc8:	81c00044 	addi	r7,r16,1
 4002fcc:	20806b36 	bltu	r4,r2,400317c <__mulsf3+0x268>
 4002fd0:	100490ba 	slli	r2,r2,2
 4002fd4:	01010034 	movhi	r4,1024
 4002fd8:	210bfa04 	addi	r4,r4,12264
 4002fdc:	1105883a 	add	r2,r2,r4
 4002fe0:	10800017 	ldw	r2,0(r2)
 4002fe4:	1000683a 	jmp	r2
 4002fe8:	0400317c 	xorhi	r16,zero,197
 4002fec:	0400303c 	xorhi	r16,zero,192
 4002ff0:	0400303c 	xorhi	r16,zero,192
 4002ff4:	04003038 	rdprs	r16,zero,192
 4002ff8:	04003160 	cmpeqi	r16,zero,197
 4002ffc:	04003160 	cmpeqi	r16,zero,197
 4003000:	0400314c 	andi	r16,zero,197
 4003004:	04003038 	rdprs	r16,zero,192
 4003008:	04003160 	cmpeqi	r16,zero,197
 400300c:	0400314c 	andi	r16,zero,197
 4003010:	04003160 	cmpeqi	r16,zero,197
 4003014:	04003038 	rdprs	r16,zero,192
 4003018:	0400316c 	andhi	r16,zero,197
 400301c:	0400316c 	andhi	r16,zero,197
 4003020:	0400316c 	andhi	r16,zero,197
 4003024:	0400327c 	xorhi	r16,zero,201
 4003028:	90003b1e 	bne	r18,zero,4003118 <__mulsf3+0x204>
 400302c:	04400204 	movi	r17,8
 4003030:	05c00084 	movi	r23,2
 4003034:	003fd206 	br	4002f80 <__alt_data_end+0xfc002f80>
 4003038:	302b883a 	mov	r21,r6
 400303c:	00800084 	movi	r2,2
 4003040:	18802626 	beq	r3,r2,40030dc <__mulsf3+0x1c8>
 4003044:	008000c4 	movi	r2,3
 4003048:	1880b826 	beq	r3,r2,400332c <__mulsf3+0x418>
 400304c:	00800044 	movi	r2,1
 4003050:	1880af1e 	bne	r3,r2,4003310 <__mulsf3+0x3fc>
 4003054:	a829883a 	mov	r20,r21
 4003058:	0007883a 	mov	r3,zero
 400305c:	0009883a 	mov	r4,zero
 4003060:	18803fcc 	andi	r2,r3,255
 4003064:	100695fa 	slli	r3,r2,23
 4003068:	a0803fcc 	andi	r2,r20,255
 400306c:	100a97fa 	slli	r5,r2,31
 4003070:	00802034 	movhi	r2,128
 4003074:	10bfffc4 	addi	r2,r2,-1
 4003078:	2084703a 	and	r2,r4,r2
 400307c:	10c4b03a 	or	r2,r2,r3
 4003080:	1144b03a 	or	r2,r2,r5
 4003084:	dfc00a17 	ldw	ra,40(sp)
 4003088:	df000917 	ldw	fp,36(sp)
 400308c:	ddc00817 	ldw	r23,32(sp)
 4003090:	dd800717 	ldw	r22,28(sp)
 4003094:	dd400617 	ldw	r21,24(sp)
 4003098:	dd000517 	ldw	r20,20(sp)
 400309c:	dcc00417 	ldw	r19,16(sp)
 40030a0:	dc800317 	ldw	r18,12(sp)
 40030a4:	dc400217 	ldw	r17,8(sp)
 40030a8:	dc000117 	ldw	r16,4(sp)
 40030ac:	dec00b04 	addi	sp,sp,44
 40030b0:	f800283a 	ret
 40030b4:	90000d1e 	bne	r18,zero,40030ec <__mulsf3+0x1d8>
 40030b8:	04400104 	movi	r17,4
 40030bc:	05c00044 	movi	r23,1
 40030c0:	003faf06 	br	4002f80 <__alt_data_end+0xfc002f80>
 40030c4:	9806c03a 	cmpne	r3,r19,zero
 40030c8:	18c00084 	addi	r3,r3,2
 40030cc:	003fba06 	br	4002fb8 <__alt_data_end+0xfc002fb8>
 40030d0:	9800141e 	bne	r19,zero,4003124 <__mulsf3+0x210>
 40030d4:	00c00044 	movi	r3,1
 40030d8:	003fb706 	br	4002fb8 <__alt_data_end+0xfc002fb8>
 40030dc:	a829883a 	mov	r20,r21
 40030e0:	00ffffc4 	movi	r3,-1
 40030e4:	0009883a 	mov	r4,zero
 40030e8:	003fdd06 	br	4003060 <__alt_data_end+0xfc003060>
 40030ec:	9009883a 	mov	r4,r18
 40030f0:	d9400015 	stw	r5,0(sp)
 40030f4:	40063bc0 	call	40063bc <__clzsi2>
 40030f8:	10fffec4 	addi	r3,r2,-5
 40030fc:	10801d84 	addi	r2,r2,118
 4003100:	90e4983a 	sll	r18,r18,r3
 4003104:	00a1c83a 	sub	r16,zero,r2
 4003108:	0023883a 	mov	r17,zero
 400310c:	002f883a 	mov	r23,zero
 4003110:	d9400017 	ldw	r5,0(sp)
 4003114:	003f9a06 	br	4002f80 <__alt_data_end+0xfc002f80>
 4003118:	04400304 	movi	r17,12
 400311c:	05c000c4 	movi	r23,3
 4003120:	003f9706 	br	4002f80 <__alt_data_end+0xfc002f80>
 4003124:	9809883a 	mov	r4,r19
 4003128:	d9800015 	stw	r6,0(sp)
 400312c:	40063bc0 	call	40063bc <__clzsi2>
 4003130:	10fffec4 	addi	r3,r2,-5
 4003134:	10801d84 	addi	r2,r2,118
 4003138:	98e6983a 	sll	r19,r19,r3
 400313c:	0085c83a 	sub	r2,zero,r2
 4003140:	0007883a 	mov	r3,zero
 4003144:	d9800017 	ldw	r6,0(sp)
 4003148:	003f9b06 	br	4002fb8 <__alt_data_end+0xfc002fb8>
 400314c:	01002034 	movhi	r4,128
 4003150:	0029883a 	mov	r20,zero
 4003154:	213fffc4 	addi	r4,r4,-1
 4003158:	00ffffc4 	movi	r3,-1
 400315c:	003fc006 	br	4003060 <__alt_data_end+0xfc003060>
 4003160:	9027883a 	mov	r19,r18
 4003164:	b807883a 	mov	r3,r23
 4003168:	003fb406 	br	400303c <__alt_data_end+0xfc00303c>
 400316c:	9027883a 	mov	r19,r18
 4003170:	e02b883a 	mov	r21,fp
 4003174:	b807883a 	mov	r3,r23
 4003178:	003fb006 	br	400303c <__alt_data_end+0xfc00303c>
 400317c:	9028d43a 	srli	r20,r18,16
 4003180:	982cd43a 	srli	r22,r19,16
 4003184:	94bfffcc 	andi	r18,r18,65535
 4003188:	9cffffcc 	andi	r19,r19,65535
 400318c:	980b883a 	mov	r5,r19
 4003190:	9009883a 	mov	r4,r18
 4003194:	d9c00015 	stw	r7,0(sp)
 4003198:	40024600 	call	4002460 <__mulsi3>
 400319c:	a00b883a 	mov	r5,r20
 40031a0:	9809883a 	mov	r4,r19
 40031a4:	1023883a 	mov	r17,r2
 40031a8:	40024600 	call	4002460 <__mulsi3>
 40031ac:	a009883a 	mov	r4,r20
 40031b0:	b00b883a 	mov	r5,r22
 40031b4:	1027883a 	mov	r19,r2
 40031b8:	40024600 	call	4002460 <__mulsi3>
 40031bc:	b00b883a 	mov	r5,r22
 40031c0:	9009883a 	mov	r4,r18
 40031c4:	1029883a 	mov	r20,r2
 40031c8:	40024600 	call	4002460 <__mulsi3>
 40031cc:	8806d43a 	srli	r3,r17,16
 40031d0:	14c5883a 	add	r2,r2,r19
 40031d4:	d9c00017 	ldw	r7,0(sp)
 40031d8:	1885883a 	add	r2,r3,r2
 40031dc:	14c0022e 	bgeu	r2,r19,40031e8 <__mulsf3+0x2d4>
 40031e0:	00c00074 	movhi	r3,1
 40031e4:	a0e9883a 	add	r20,r20,r3
 40031e8:	1026943a 	slli	r19,r2,16
 40031ec:	8c7fffcc 	andi	r17,r17,65535
 40031f0:	1004d43a 	srli	r2,r2,16
 40031f4:	9c63883a 	add	r17,r19,r17
 40031f8:	882691ba 	slli	r19,r17,6
 40031fc:	1505883a 	add	r2,r2,r20
 4003200:	8822d6ba 	srli	r17,r17,26
 4003204:	100891ba 	slli	r4,r2,6
 4003208:	9826c03a 	cmpne	r19,r19,zero
 400320c:	9c62b03a 	or	r17,r19,r17
 4003210:	8926b03a 	or	r19,r17,r4
 4003214:	9882002c 	andhi	r2,r19,2048
 4003218:	10000426 	beq	r2,zero,400322c <__mulsf3+0x318>
 400321c:	9804d07a 	srli	r2,r19,1
 4003220:	9900004c 	andi	r4,r19,1
 4003224:	3821883a 	mov	r16,r7
 4003228:	1126b03a 	or	r19,r2,r4
 400322c:	80c01fc4 	addi	r3,r16,127
 4003230:	00c0210e 	bge	zero,r3,40032b8 <__mulsf3+0x3a4>
 4003234:	988001cc 	andi	r2,r19,7
 4003238:	10000426 	beq	r2,zero,400324c <__mulsf3+0x338>
 400323c:	988003cc 	andi	r2,r19,15
 4003240:	01000104 	movi	r4,4
 4003244:	11000126 	beq	r2,r4,400324c <__mulsf3+0x338>
 4003248:	9927883a 	add	r19,r19,r4
 400324c:	9882002c 	andhi	r2,r19,2048
 4003250:	10000426 	beq	r2,zero,4003264 <__mulsf3+0x350>
 4003254:	00be0034 	movhi	r2,63488
 4003258:	10bfffc4 	addi	r2,r2,-1
 400325c:	80c02004 	addi	r3,r16,128
 4003260:	98a6703a 	and	r19,r19,r2
 4003264:	00803f84 	movi	r2,254
 4003268:	10ff9c16 	blt	r2,r3,40030dc <__alt_data_end+0xfc0030dc>
 400326c:	980891ba 	slli	r4,r19,6
 4003270:	a829883a 	mov	r20,r21
 4003274:	2008d27a 	srli	r4,r4,9
 4003278:	003f7906 	br	4003060 <__alt_data_end+0xfc003060>
 400327c:	9080102c 	andhi	r2,r18,64
 4003280:	10000826 	beq	r2,zero,40032a4 <__mulsf3+0x390>
 4003284:	9880102c 	andhi	r2,r19,64
 4003288:	1000061e 	bne	r2,zero,40032a4 <__mulsf3+0x390>
 400328c:	00802034 	movhi	r2,128
 4003290:	99001034 	orhi	r4,r19,64
 4003294:	10bfffc4 	addi	r2,r2,-1
 4003298:	b029883a 	mov	r20,r22
 400329c:	2088703a 	and	r4,r4,r2
 40032a0:	003fad06 	br	4003158 <__alt_data_end+0xfc003158>
 40032a4:	00802034 	movhi	r2,128
 40032a8:	91001034 	orhi	r4,r18,64
 40032ac:	10bfffc4 	addi	r2,r2,-1
 40032b0:	2088703a 	and	r4,r4,r2
 40032b4:	003fa806 	br	4003158 <__alt_data_end+0xfc003158>
 40032b8:	00800044 	movi	r2,1
 40032bc:	10c7c83a 	sub	r3,r2,r3
 40032c0:	008006c4 	movi	r2,27
 40032c4:	10ff6316 	blt	r2,r3,4003054 <__alt_data_end+0xfc003054>
 40032c8:	00800804 	movi	r2,32
 40032cc:	10c5c83a 	sub	r2,r2,r3
 40032d0:	9884983a 	sll	r2,r19,r2
 40032d4:	98c6d83a 	srl	r3,r19,r3
 40032d8:	1004c03a 	cmpne	r2,r2,zero
 40032dc:	1884b03a 	or	r2,r3,r2
 40032e0:	10c001cc 	andi	r3,r2,7
 40032e4:	18000426 	beq	r3,zero,40032f8 <__mulsf3+0x3e4>
 40032e8:	10c003cc 	andi	r3,r2,15
 40032ec:	01000104 	movi	r4,4
 40032f0:	19000126 	beq	r3,r4,40032f8 <__mulsf3+0x3e4>
 40032f4:	1105883a 	add	r2,r2,r4
 40032f8:	10c1002c 	andhi	r3,r2,1024
 40032fc:	18000626 	beq	r3,zero,4003318 <__mulsf3+0x404>
 4003300:	a829883a 	mov	r20,r21
 4003304:	00c00044 	movi	r3,1
 4003308:	0009883a 	mov	r4,zero
 400330c:	003f5406 	br	4003060 <__alt_data_end+0xfc003060>
 4003310:	3821883a 	mov	r16,r7
 4003314:	003fc506 	br	400322c <__alt_data_end+0xfc00322c>
 4003318:	100491ba 	slli	r2,r2,6
 400331c:	a829883a 	mov	r20,r21
 4003320:	0007883a 	mov	r3,zero
 4003324:	1008d27a 	srli	r4,r2,9
 4003328:	003f4d06 	br	4003060 <__alt_data_end+0xfc003060>
 400332c:	00802034 	movhi	r2,128
 4003330:	99001034 	orhi	r4,r19,64
 4003334:	10bfffc4 	addi	r2,r2,-1
 4003338:	a829883a 	mov	r20,r21
 400333c:	2088703a 	and	r4,r4,r2
 4003340:	003f8506 	br	4003158 <__alt_data_end+0xfc003158>

04003344 <__subsf3>:
 4003344:	defffc04 	addi	sp,sp,-16
 4003348:	280cd5fa 	srli	r6,r5,23
 400334c:	dc000015 	stw	r16,0(sp)
 4003350:	01c02034 	movhi	r7,128
 4003354:	2020d5fa 	srli	r16,r4,23
 4003358:	39ffffc4 	addi	r7,r7,-1
 400335c:	3906703a 	and	r3,r7,r4
 4003360:	dc400115 	stw	r17,4(sp)
 4003364:	394e703a 	and	r7,r7,r5
 4003368:	2022d7fa 	srli	r17,r4,31
 400336c:	dfc00315 	stw	ra,12(sp)
 4003370:	dc800215 	stw	r18,8(sp)
 4003374:	31803fcc 	andi	r6,r6,255
 4003378:	01003fc4 	movi	r4,255
 400337c:	84003fcc 	andi	r16,r16,255
 4003380:	180690fa 	slli	r3,r3,3
 4003384:	2804d7fa 	srli	r2,r5,31
 4003388:	380e90fa 	slli	r7,r7,3
 400338c:	31006d26 	beq	r6,r4,4003544 <__subsf3+0x200>
 4003390:	1080005c 	xori	r2,r2,1
 4003394:	8189c83a 	sub	r4,r16,r6
 4003398:	14404f26 	beq	r2,r17,40034d8 <__subsf3+0x194>
 400339c:	0100770e 	bge	zero,r4,400357c <__subsf3+0x238>
 40033a0:	30001e1e 	bne	r6,zero,400341c <__subsf3+0xd8>
 40033a4:	38006a1e 	bne	r7,zero,4003550 <__subsf3+0x20c>
 40033a8:	188001cc 	andi	r2,r3,7
 40033ac:	10000426 	beq	r2,zero,40033c0 <__subsf3+0x7c>
 40033b0:	188003cc 	andi	r2,r3,15
 40033b4:	01000104 	movi	r4,4
 40033b8:	11000126 	beq	r2,r4,40033c0 <__subsf3+0x7c>
 40033bc:	1907883a 	add	r3,r3,r4
 40033c0:	1881002c 	andhi	r2,r3,1024
 40033c4:	10003926 	beq	r2,zero,40034ac <__subsf3+0x168>
 40033c8:	84000044 	addi	r16,r16,1
 40033cc:	00803fc4 	movi	r2,255
 40033d0:	80807526 	beq	r16,r2,40035a8 <__subsf3+0x264>
 40033d4:	180691ba 	slli	r3,r3,6
 40033d8:	8880004c 	andi	r2,r17,1
 40033dc:	180ad27a 	srli	r5,r3,9
 40033e0:	84003fcc 	andi	r16,r16,255
 40033e4:	800695fa 	slli	r3,r16,23
 40033e8:	10803fcc 	andi	r2,r2,255
 40033ec:	01002034 	movhi	r4,128
 40033f0:	213fffc4 	addi	r4,r4,-1
 40033f4:	100497fa 	slli	r2,r2,31
 40033f8:	2920703a 	and	r16,r5,r4
 40033fc:	80e0b03a 	or	r16,r16,r3
 4003400:	8084b03a 	or	r2,r16,r2
 4003404:	dfc00317 	ldw	ra,12(sp)
 4003408:	dc800217 	ldw	r18,8(sp)
 400340c:	dc400117 	ldw	r17,4(sp)
 4003410:	dc000017 	ldw	r16,0(sp)
 4003414:	dec00404 	addi	sp,sp,16
 4003418:	f800283a 	ret
 400341c:	00803fc4 	movi	r2,255
 4003420:	80bfe126 	beq	r16,r2,40033a8 <__alt_data_end+0xfc0033a8>
 4003424:	39c10034 	orhi	r7,r7,1024
 4003428:	008006c4 	movi	r2,27
 400342c:	11007416 	blt	r2,r4,4003600 <__subsf3+0x2bc>
 4003430:	00800804 	movi	r2,32
 4003434:	1105c83a 	sub	r2,r2,r4
 4003438:	3884983a 	sll	r2,r7,r2
 400343c:	390ed83a 	srl	r7,r7,r4
 4003440:	1008c03a 	cmpne	r4,r2,zero
 4003444:	390eb03a 	or	r7,r7,r4
 4003448:	19c7c83a 	sub	r3,r3,r7
 400344c:	1881002c 	andhi	r2,r3,1024
 4003450:	10001426 	beq	r2,zero,40034a4 <__subsf3+0x160>
 4003454:	04810034 	movhi	r18,1024
 4003458:	94bfffc4 	addi	r18,r18,-1
 400345c:	1ca4703a 	and	r18,r3,r18
 4003460:	9009883a 	mov	r4,r18
 4003464:	40063bc0 	call	40063bc <__clzsi2>
 4003468:	10bffec4 	addi	r2,r2,-5
 400346c:	90a4983a 	sll	r18,r18,r2
 4003470:	14005116 	blt	r2,r16,40035b8 <__subsf3+0x274>
 4003474:	1405c83a 	sub	r2,r2,r16
 4003478:	10c00044 	addi	r3,r2,1
 400347c:	00800804 	movi	r2,32
 4003480:	10c5c83a 	sub	r2,r2,r3
 4003484:	9084983a 	sll	r2,r18,r2
 4003488:	90e4d83a 	srl	r18,r18,r3
 400348c:	0021883a 	mov	r16,zero
 4003490:	1006c03a 	cmpne	r3,r2,zero
 4003494:	90c6b03a 	or	r3,r18,r3
 4003498:	003fc306 	br	40033a8 <__alt_data_end+0xfc0033a8>
 400349c:	2000e026 	beq	r4,zero,4003820 <__subsf3+0x4dc>
 40034a0:	2007883a 	mov	r3,r4
 40034a4:	188001cc 	andi	r2,r3,7
 40034a8:	103fc11e 	bne	r2,zero,40033b0 <__alt_data_end+0xfc0033b0>
 40034ac:	180ad0fa 	srli	r5,r3,3
 40034b0:	00c03fc4 	movi	r3,255
 40034b4:	8880004c 	andi	r2,r17,1
 40034b8:	80c0031e 	bne	r16,r3,40034c8 <__subsf3+0x184>
 40034bc:	28006d26 	beq	r5,zero,4003674 <__subsf3+0x330>
 40034c0:	29401034 	orhi	r5,r5,64
 40034c4:	043fffc4 	movi	r16,-1
 40034c8:	00c02034 	movhi	r3,128
 40034cc:	18ffffc4 	addi	r3,r3,-1
 40034d0:	28ca703a 	and	r5,r5,r3
 40034d4:	003fc206 	br	40033e0 <__alt_data_end+0xfc0033e0>
 40034d8:	01003c0e 	bge	zero,r4,40035cc <__subsf3+0x288>
 40034dc:	30002126 	beq	r6,zero,4003564 <__subsf3+0x220>
 40034e0:	01403fc4 	movi	r5,255
 40034e4:	817fb026 	beq	r16,r5,40033a8 <__alt_data_end+0xfc0033a8>
 40034e8:	39c10034 	orhi	r7,r7,1024
 40034ec:	014006c4 	movi	r5,27
 40034f0:	29007416 	blt	r5,r4,40036c4 <__subsf3+0x380>
 40034f4:	01400804 	movi	r5,32
 40034f8:	290bc83a 	sub	r5,r5,r4
 40034fc:	394a983a 	sll	r5,r7,r5
 4003500:	390ed83a 	srl	r7,r7,r4
 4003504:	2808c03a 	cmpne	r4,r5,zero
 4003508:	390eb03a 	or	r7,r7,r4
 400350c:	19c7883a 	add	r3,r3,r7
 4003510:	1901002c 	andhi	r4,r3,1024
 4003514:	20003826 	beq	r4,zero,40035f8 <__subsf3+0x2b4>
 4003518:	84000044 	addi	r16,r16,1
 400351c:	01003fc4 	movi	r4,255
 4003520:	81005426 	beq	r16,r4,4003674 <__subsf3+0x330>
 4003524:	1023883a 	mov	r17,r2
 4003528:	00bf0034 	movhi	r2,64512
 400352c:	10bfffc4 	addi	r2,r2,-1
 4003530:	1900004c 	andi	r4,r3,1
 4003534:	1886703a 	and	r3,r3,r2
 4003538:	1806d07a 	srli	r3,r3,1
 400353c:	1906b03a 	or	r3,r3,r4
 4003540:	003f9906 	br	40033a8 <__alt_data_end+0xfc0033a8>
 4003544:	383f9226 	beq	r7,zero,4003390 <__alt_data_end+0xfc003390>
 4003548:	10803fcc 	andi	r2,r2,255
 400354c:	003f9106 	br	4003394 <__alt_data_end+0xfc003394>
 4003550:	213fffc4 	addi	r4,r4,-1
 4003554:	203fbc26 	beq	r4,zero,4003448 <__alt_data_end+0xfc003448>
 4003558:	00803fc4 	movi	r2,255
 400355c:	80bfb21e 	bne	r16,r2,4003428 <__alt_data_end+0xfc003428>
 4003560:	003f9106 	br	40033a8 <__alt_data_end+0xfc0033a8>
 4003564:	383f9026 	beq	r7,zero,40033a8 <__alt_data_end+0xfc0033a8>
 4003568:	213fffc4 	addi	r4,r4,-1
 400356c:	203fe726 	beq	r4,zero,400350c <__alt_data_end+0xfc00350c>
 4003570:	01403fc4 	movi	r5,255
 4003574:	817fdd1e 	bne	r16,r5,40034ec <__alt_data_end+0xfc0034ec>
 4003578:	003f8b06 	br	40033a8 <__alt_data_end+0xfc0033a8>
 400357c:	2000221e 	bne	r4,zero,4003608 <__subsf3+0x2c4>
 4003580:	81000044 	addi	r4,r16,1
 4003584:	21003fcc 	andi	r4,r4,255
 4003588:	01400044 	movi	r5,1
 400358c:	2900470e 	bge	r5,r4,40036ac <__subsf3+0x368>
 4003590:	19e5c83a 	sub	r18,r3,r7
 4003594:	9141002c 	andhi	r5,r18,1024
 4003598:	28002d26 	beq	r5,zero,4003650 <__subsf3+0x30c>
 400359c:	38e5c83a 	sub	r18,r7,r3
 40035a0:	1023883a 	mov	r17,r2
 40035a4:	003fae06 	br	4003460 <__alt_data_end+0xfc003460>
 40035a8:	8880004c 	andi	r2,r17,1
 40035ac:	043fffc4 	movi	r16,-1
 40035b0:	000b883a 	mov	r5,zero
 40035b4:	003f8a06 	br	40033e0 <__alt_data_end+0xfc0033e0>
 40035b8:	00ff0034 	movhi	r3,64512
 40035bc:	18ffffc4 	addi	r3,r3,-1
 40035c0:	80a1c83a 	sub	r16,r16,r2
 40035c4:	90c6703a 	and	r3,r18,r3
 40035c8:	003f7706 	br	40033a8 <__alt_data_end+0xfc0033a8>
 40035cc:	2000431e 	bne	r4,zero,40036dc <__subsf3+0x398>
 40035d0:	81000044 	addi	r4,r16,1
 40035d4:	21803fcc 	andi	r6,r4,255
 40035d8:	01400044 	movi	r5,1
 40035dc:	2980280e 	bge	r5,r6,4003680 <__subsf3+0x33c>
 40035e0:	01403fc4 	movi	r5,255
 40035e4:	21402326 	beq	r4,r5,4003674 <__subsf3+0x330>
 40035e8:	19c7883a 	add	r3,r3,r7
 40035ec:	1806d07a 	srli	r3,r3,1
 40035f0:	2021883a 	mov	r16,r4
 40035f4:	003f6c06 	br	40033a8 <__alt_data_end+0xfc0033a8>
 40035f8:	1023883a 	mov	r17,r2
 40035fc:	003fa906 	br	40034a4 <__alt_data_end+0xfc0034a4>
 4003600:	01c00044 	movi	r7,1
 4003604:	003f9006 	br	4003448 <__alt_data_end+0xfc003448>
 4003608:	8000151e 	bne	r16,zero,4003660 <__subsf3+0x31c>
 400360c:	18002f26 	beq	r3,zero,40036cc <__subsf3+0x388>
 4003610:	0108303a 	nor	r4,zero,r4
 4003614:	20000a26 	beq	r4,zero,4003640 <__subsf3+0x2fc>
 4003618:	01403fc4 	movi	r5,255
 400361c:	31402b26 	beq	r6,r5,40036cc <__subsf3+0x388>
 4003620:	014006c4 	movi	r5,27
 4003624:	29006e16 	blt	r5,r4,40037e0 <__subsf3+0x49c>
 4003628:	01400804 	movi	r5,32
 400362c:	290bc83a 	sub	r5,r5,r4
 4003630:	194a983a 	sll	r5,r3,r5
 4003634:	1908d83a 	srl	r4,r3,r4
 4003638:	2806c03a 	cmpne	r3,r5,zero
 400363c:	20c6b03a 	or	r3,r4,r3
 4003640:	38c7c83a 	sub	r3,r7,r3
 4003644:	3021883a 	mov	r16,r6
 4003648:	1023883a 	mov	r17,r2
 400364c:	003f7f06 	br	400344c <__alt_data_end+0xfc00344c>
 4003650:	903f831e 	bne	r18,zero,4003460 <__alt_data_end+0xfc003460>
 4003654:	0005883a 	mov	r2,zero
 4003658:	0021883a 	mov	r16,zero
 400365c:	003f9a06 	br	40034c8 <__alt_data_end+0xfc0034c8>
 4003660:	01403fc4 	movi	r5,255
 4003664:	31401926 	beq	r6,r5,40036cc <__subsf3+0x388>
 4003668:	0109c83a 	sub	r4,zero,r4
 400366c:	18c10034 	orhi	r3,r3,1024
 4003670:	003feb06 	br	4003620 <__alt_data_end+0xfc003620>
 4003674:	043fffc4 	movi	r16,-1
 4003678:	000b883a 	mov	r5,zero
 400367c:	003f5806 	br	40033e0 <__alt_data_end+0xfc0033e0>
 4003680:	8000481e 	bne	r16,zero,40037a4 <__subsf3+0x460>
 4003684:	18006226 	beq	r3,zero,4003810 <__subsf3+0x4cc>
 4003688:	383f4726 	beq	r7,zero,40033a8 <__alt_data_end+0xfc0033a8>
 400368c:	19c7883a 	add	r3,r3,r7
 4003690:	1881002c 	andhi	r2,r3,1024
 4003694:	103f8326 	beq	r2,zero,40034a4 <__alt_data_end+0xfc0034a4>
 4003698:	00bf0034 	movhi	r2,64512
 400369c:	10bfffc4 	addi	r2,r2,-1
 40036a0:	2821883a 	mov	r16,r5
 40036a4:	1886703a 	and	r3,r3,r2
 40036a8:	003f3f06 	br	40033a8 <__alt_data_end+0xfc0033a8>
 40036ac:	80001c1e 	bne	r16,zero,4003720 <__subsf3+0x3dc>
 40036b0:	1800261e 	bne	r3,zero,400374c <__subsf3+0x408>
 40036b4:	38004c26 	beq	r7,zero,40037e8 <__subsf3+0x4a4>
 40036b8:	3807883a 	mov	r3,r7
 40036bc:	1023883a 	mov	r17,r2
 40036c0:	003f3906 	br	40033a8 <__alt_data_end+0xfc0033a8>
 40036c4:	01c00044 	movi	r7,1
 40036c8:	003f9006 	br	400350c <__alt_data_end+0xfc00350c>
 40036cc:	3807883a 	mov	r3,r7
 40036d0:	3021883a 	mov	r16,r6
 40036d4:	1023883a 	mov	r17,r2
 40036d8:	003f3306 	br	40033a8 <__alt_data_end+0xfc0033a8>
 40036dc:	8000161e 	bne	r16,zero,4003738 <__subsf3+0x3f4>
 40036e0:	18002d26 	beq	r3,zero,4003798 <__subsf3+0x454>
 40036e4:	0108303a 	nor	r4,zero,r4
 40036e8:	20000a26 	beq	r4,zero,4003714 <__subsf3+0x3d0>
 40036ec:	01403fc4 	movi	r5,255
 40036f0:	31402926 	beq	r6,r5,4003798 <__subsf3+0x454>
 40036f4:	014006c4 	movi	r5,27
 40036f8:	29004716 	blt	r5,r4,4003818 <__subsf3+0x4d4>
 40036fc:	01400804 	movi	r5,32
 4003700:	290bc83a 	sub	r5,r5,r4
 4003704:	194a983a 	sll	r5,r3,r5
 4003708:	1908d83a 	srl	r4,r3,r4
 400370c:	2806c03a 	cmpne	r3,r5,zero
 4003710:	20c6b03a 	or	r3,r4,r3
 4003714:	19c7883a 	add	r3,r3,r7
 4003718:	3021883a 	mov	r16,r6
 400371c:	003f7c06 	br	4003510 <__alt_data_end+0xfc003510>
 4003720:	1800111e 	bne	r3,zero,4003768 <__subsf3+0x424>
 4003724:	38003326 	beq	r7,zero,40037f4 <__subsf3+0x4b0>
 4003728:	3807883a 	mov	r3,r7
 400372c:	1023883a 	mov	r17,r2
 4003730:	04003fc4 	movi	r16,255
 4003734:	003f1c06 	br	40033a8 <__alt_data_end+0xfc0033a8>
 4003738:	01403fc4 	movi	r5,255
 400373c:	31401626 	beq	r6,r5,4003798 <__subsf3+0x454>
 4003740:	0109c83a 	sub	r4,zero,r4
 4003744:	18c10034 	orhi	r3,r3,1024
 4003748:	003fea06 	br	40036f4 <__alt_data_end+0xfc0036f4>
 400374c:	383f1626 	beq	r7,zero,40033a8 <__alt_data_end+0xfc0033a8>
 4003750:	19c9c83a 	sub	r4,r3,r7
 4003754:	2141002c 	andhi	r5,r4,1024
 4003758:	283f5026 	beq	r5,zero,400349c <__alt_data_end+0xfc00349c>
 400375c:	38c7c83a 	sub	r3,r7,r3
 4003760:	1023883a 	mov	r17,r2
 4003764:	003f1006 	br	40033a8 <__alt_data_end+0xfc0033a8>
 4003768:	38001b26 	beq	r7,zero,40037d8 <__subsf3+0x494>
 400376c:	1806d0fa 	srli	r3,r3,3
 4003770:	1900102c 	andhi	r4,r3,64
 4003774:	20000526 	beq	r4,zero,400378c <__subsf3+0x448>
 4003778:	380ed0fa 	srli	r7,r7,3
 400377c:	3900102c 	andhi	r4,r7,64
 4003780:	2000021e 	bne	r4,zero,400378c <__subsf3+0x448>
 4003784:	3807883a 	mov	r3,r7
 4003788:	1023883a 	mov	r17,r2
 400378c:	180690fa 	slli	r3,r3,3
 4003790:	04003fc4 	movi	r16,255
 4003794:	003f0406 	br	40033a8 <__alt_data_end+0xfc0033a8>
 4003798:	3807883a 	mov	r3,r7
 400379c:	3021883a 	mov	r16,r6
 40037a0:	003f0106 	br	40033a8 <__alt_data_end+0xfc0033a8>
 40037a4:	18001726 	beq	r3,zero,4003804 <__subsf3+0x4c0>
 40037a8:	38000b26 	beq	r7,zero,40037d8 <__subsf3+0x494>
 40037ac:	1806d0fa 	srli	r3,r3,3
 40037b0:	1900102c 	andhi	r4,r3,64
 40037b4:	20000426 	beq	r4,zero,40037c8 <__subsf3+0x484>
 40037b8:	380ed0fa 	srli	r7,r7,3
 40037bc:	3900102c 	andhi	r4,r7,64
 40037c0:	2000011e 	bne	r4,zero,40037c8 <__subsf3+0x484>
 40037c4:	3807883a 	mov	r3,r7
 40037c8:	180690fa 	slli	r3,r3,3
 40037cc:	1023883a 	mov	r17,r2
 40037d0:	04003fc4 	movi	r16,255
 40037d4:	003ef406 	br	40033a8 <__alt_data_end+0xfc0033a8>
 40037d8:	04003fc4 	movi	r16,255
 40037dc:	003ef206 	br	40033a8 <__alt_data_end+0xfc0033a8>
 40037e0:	00c00044 	movi	r3,1
 40037e4:	003f9606 	br	4003640 <__alt_data_end+0xfc003640>
 40037e8:	000b883a 	mov	r5,zero
 40037ec:	0005883a 	mov	r2,zero
 40037f0:	003f3506 	br	40034c8 <__alt_data_end+0xfc0034c8>
 40037f4:	01402034 	movhi	r5,128
 40037f8:	297fffc4 	addi	r5,r5,-1
 40037fc:	0005883a 	mov	r2,zero
 4003800:	003f2f06 	br	40034c0 <__alt_data_end+0xfc0034c0>
 4003804:	3807883a 	mov	r3,r7
 4003808:	04003fc4 	movi	r16,255
 400380c:	003ee606 	br	40033a8 <__alt_data_end+0xfc0033a8>
 4003810:	3807883a 	mov	r3,r7
 4003814:	003ee406 	br	40033a8 <__alt_data_end+0xfc0033a8>
 4003818:	00c00044 	movi	r3,1
 400381c:	003fbd06 	br	4003714 <__alt_data_end+0xfc003714>
 4003820:	0005883a 	mov	r2,zero
 4003824:	003f2806 	br	40034c8 <__alt_data_end+0xfc0034c8>

04003828 <__floatsisf>:
 4003828:	defffd04 	addi	sp,sp,-12
 400382c:	dfc00215 	stw	ra,8(sp)
 4003830:	dc400115 	stw	r17,4(sp)
 4003834:	dc000015 	stw	r16,0(sp)
 4003838:	20003526 	beq	r4,zero,4003910 <__floatsisf+0xe8>
 400383c:	2021883a 	mov	r16,r4
 4003840:	2022d7fa 	srli	r17,r4,31
 4003844:	20003616 	blt	r4,zero,4003920 <__floatsisf+0xf8>
 4003848:	8009883a 	mov	r4,r16
 400384c:	40063bc0 	call	40063bc <__clzsi2>
 4003850:	00c02784 	movi	r3,158
 4003854:	1887c83a 	sub	r3,r3,r2
 4003858:	01002584 	movi	r4,150
 400385c:	20c01416 	blt	r4,r3,40038b0 <__floatsisf+0x88>
 4003860:	20c9c83a 	sub	r4,r4,r3
 4003864:	8120983a 	sll	r16,r16,r4
 4003868:	00802034 	movhi	r2,128
 400386c:	10bfffc4 	addi	r2,r2,-1
 4003870:	8809883a 	mov	r4,r17
 4003874:	80a0703a 	and	r16,r16,r2
 4003878:	18803fcc 	andi	r2,r3,255
 400387c:	100695fa 	slli	r3,r2,23
 4003880:	20803fcc 	andi	r2,r4,255
 4003884:	100897fa 	slli	r4,r2,31
 4003888:	00802034 	movhi	r2,128
 400388c:	10bfffc4 	addi	r2,r2,-1
 4003890:	8084703a 	and	r2,r16,r2
 4003894:	10c4b03a 	or	r2,r2,r3
 4003898:	1104b03a 	or	r2,r2,r4
 400389c:	dfc00217 	ldw	ra,8(sp)
 40038a0:	dc400117 	ldw	r17,4(sp)
 40038a4:	dc000017 	ldw	r16,0(sp)
 40038a8:	dec00304 	addi	sp,sp,12
 40038ac:	f800283a 	ret
 40038b0:	01002644 	movi	r4,153
 40038b4:	20c01c16 	blt	r4,r3,4003928 <__floatsisf+0x100>
 40038b8:	20c9c83a 	sub	r4,r4,r3
 40038bc:	8120983a 	sll	r16,r16,r4
 40038c0:	013f0034 	movhi	r4,64512
 40038c4:	213fffc4 	addi	r4,r4,-1
 40038c8:	814001cc 	andi	r5,r16,7
 40038cc:	8108703a 	and	r4,r16,r4
 40038d0:	28000426 	beq	r5,zero,40038e4 <__floatsisf+0xbc>
 40038d4:	840003cc 	andi	r16,r16,15
 40038d8:	01400104 	movi	r5,4
 40038dc:	81400126 	beq	r16,r5,40038e4 <__floatsisf+0xbc>
 40038e0:	2149883a 	add	r4,r4,r5
 40038e4:	2141002c 	andhi	r5,r4,1024
 40038e8:	28000526 	beq	r5,zero,4003900 <__floatsisf+0xd8>
 40038ec:	00c027c4 	movi	r3,159
 40038f0:	1887c83a 	sub	r3,r3,r2
 40038f4:	00bf0034 	movhi	r2,64512
 40038f8:	10bfffc4 	addi	r2,r2,-1
 40038fc:	2088703a 	and	r4,r4,r2
 4003900:	202091ba 	slli	r16,r4,6
 4003904:	8809883a 	mov	r4,r17
 4003908:	8020d27a 	srli	r16,r16,9
 400390c:	003fda06 	br	4003878 <__alt_data_end+0xfc003878>
 4003910:	0009883a 	mov	r4,zero
 4003914:	0007883a 	mov	r3,zero
 4003918:	0021883a 	mov	r16,zero
 400391c:	003fd606 	br	4003878 <__alt_data_end+0xfc003878>
 4003920:	0121c83a 	sub	r16,zero,r4
 4003924:	003fc806 	br	4003848 <__alt_data_end+0xfc003848>
 4003928:	01002e44 	movi	r4,185
 400392c:	20c9c83a 	sub	r4,r4,r3
 4003930:	01400144 	movi	r5,5
 4003934:	8108983a 	sll	r4,r16,r4
 4003938:	288bc83a 	sub	r5,r5,r2
 400393c:	8160d83a 	srl	r16,r16,r5
 4003940:	2008c03a 	cmpne	r4,r4,zero
 4003944:	8120b03a 	or	r16,r16,r4
 4003948:	003fdd06 	br	40038c0 <__alt_data_end+0xfc0038c0>

0400394c <__adddf3>:
 400394c:	02c00434 	movhi	r11,16
 4003950:	5affffc4 	addi	r11,r11,-1
 4003954:	2806d7fa 	srli	r3,r5,31
 4003958:	2ad4703a 	and	r10,r5,r11
 400395c:	3ad2703a 	and	r9,r7,r11
 4003960:	3804d53a 	srli	r2,r7,20
 4003964:	3018d77a 	srli	r12,r6,29
 4003968:	280ad53a 	srli	r5,r5,20
 400396c:	501490fa 	slli	r10,r10,3
 4003970:	2010d77a 	srli	r8,r4,29
 4003974:	481290fa 	slli	r9,r9,3
 4003978:	380ed7fa 	srli	r7,r7,31
 400397c:	defffb04 	addi	sp,sp,-20
 4003980:	dc800215 	stw	r18,8(sp)
 4003984:	dc400115 	stw	r17,4(sp)
 4003988:	dc000015 	stw	r16,0(sp)
 400398c:	dfc00415 	stw	ra,16(sp)
 4003990:	dcc00315 	stw	r19,12(sp)
 4003994:	1c803fcc 	andi	r18,r3,255
 4003998:	2c01ffcc 	andi	r16,r5,2047
 400399c:	5210b03a 	or	r8,r10,r8
 40039a0:	202290fa 	slli	r17,r4,3
 40039a4:	1081ffcc 	andi	r2,r2,2047
 40039a8:	4b12b03a 	or	r9,r9,r12
 40039ac:	300c90fa 	slli	r6,r6,3
 40039b0:	91c07526 	beq	r18,r7,4003b88 <__adddf3+0x23c>
 40039b4:	8087c83a 	sub	r3,r16,r2
 40039b8:	00c0ab0e 	bge	zero,r3,4003c68 <__adddf3+0x31c>
 40039bc:	10002a1e 	bne	r2,zero,4003a68 <__adddf3+0x11c>
 40039c0:	4984b03a 	or	r2,r9,r6
 40039c4:	1000961e 	bne	r2,zero,4003c20 <__adddf3+0x2d4>
 40039c8:	888001cc 	andi	r2,r17,7
 40039cc:	10000726 	beq	r2,zero,40039ec <__adddf3+0xa0>
 40039d0:	888003cc 	andi	r2,r17,15
 40039d4:	00c00104 	movi	r3,4
 40039d8:	10c00426 	beq	r2,r3,40039ec <__adddf3+0xa0>
 40039dc:	88c7883a 	add	r3,r17,r3
 40039e0:	1c63803a 	cmpltu	r17,r3,r17
 40039e4:	4451883a 	add	r8,r8,r17
 40039e8:	1823883a 	mov	r17,r3
 40039ec:	4080202c 	andhi	r2,r8,128
 40039f0:	10005926 	beq	r2,zero,4003b58 <__adddf3+0x20c>
 40039f4:	84000044 	addi	r16,r16,1
 40039f8:	0081ffc4 	movi	r2,2047
 40039fc:	8080ba26 	beq	r16,r2,4003ce8 <__adddf3+0x39c>
 4003a00:	00bfe034 	movhi	r2,65408
 4003a04:	10bfffc4 	addi	r2,r2,-1
 4003a08:	4090703a 	and	r8,r8,r2
 4003a0c:	4004977a 	slli	r2,r8,29
 4003a10:	4010927a 	slli	r8,r8,9
 4003a14:	8822d0fa 	srli	r17,r17,3
 4003a18:	8401ffcc 	andi	r16,r16,2047
 4003a1c:	4010d33a 	srli	r8,r8,12
 4003a20:	9007883a 	mov	r3,r18
 4003a24:	1444b03a 	or	r2,r2,r17
 4003a28:	8401ffcc 	andi	r16,r16,2047
 4003a2c:	8020953a 	slli	r16,r16,20
 4003a30:	18c03fcc 	andi	r3,r3,255
 4003a34:	01000434 	movhi	r4,16
 4003a38:	213fffc4 	addi	r4,r4,-1
 4003a3c:	180697fa 	slli	r3,r3,31
 4003a40:	4110703a 	and	r8,r8,r4
 4003a44:	4410b03a 	or	r8,r8,r16
 4003a48:	40c6b03a 	or	r3,r8,r3
 4003a4c:	dfc00417 	ldw	ra,16(sp)
 4003a50:	dcc00317 	ldw	r19,12(sp)
 4003a54:	dc800217 	ldw	r18,8(sp)
 4003a58:	dc400117 	ldw	r17,4(sp)
 4003a5c:	dc000017 	ldw	r16,0(sp)
 4003a60:	dec00504 	addi	sp,sp,20
 4003a64:	f800283a 	ret
 4003a68:	0081ffc4 	movi	r2,2047
 4003a6c:	80bfd626 	beq	r16,r2,40039c8 <__alt_data_end+0xfc0039c8>
 4003a70:	4a402034 	orhi	r9,r9,128
 4003a74:	00800e04 	movi	r2,56
 4003a78:	10c09f16 	blt	r2,r3,4003cf8 <__adddf3+0x3ac>
 4003a7c:	008007c4 	movi	r2,31
 4003a80:	10c0c216 	blt	r2,r3,4003d8c <__adddf3+0x440>
 4003a84:	00800804 	movi	r2,32
 4003a88:	10c5c83a 	sub	r2,r2,r3
 4003a8c:	488a983a 	sll	r5,r9,r2
 4003a90:	30c8d83a 	srl	r4,r6,r3
 4003a94:	3084983a 	sll	r2,r6,r2
 4003a98:	48c6d83a 	srl	r3,r9,r3
 4003a9c:	290cb03a 	or	r6,r5,r4
 4003aa0:	1004c03a 	cmpne	r2,r2,zero
 4003aa4:	308cb03a 	or	r6,r6,r2
 4003aa8:	898dc83a 	sub	r6,r17,r6
 4003aac:	89a3803a 	cmpltu	r17,r17,r6
 4003ab0:	40d1c83a 	sub	r8,r8,r3
 4003ab4:	4451c83a 	sub	r8,r8,r17
 4003ab8:	3023883a 	mov	r17,r6
 4003abc:	4080202c 	andhi	r2,r8,128
 4003ac0:	10002326 	beq	r2,zero,4003b50 <__adddf3+0x204>
 4003ac4:	04c02034 	movhi	r19,128
 4003ac8:	9cffffc4 	addi	r19,r19,-1
 4003acc:	44e6703a 	and	r19,r8,r19
 4003ad0:	98007626 	beq	r19,zero,4003cac <__adddf3+0x360>
 4003ad4:	9809883a 	mov	r4,r19
 4003ad8:	40063bc0 	call	40063bc <__clzsi2>
 4003adc:	10fffe04 	addi	r3,r2,-8
 4003ae0:	010007c4 	movi	r4,31
 4003ae4:	20c07716 	blt	r4,r3,4003cc4 <__adddf3+0x378>
 4003ae8:	00800804 	movi	r2,32
 4003aec:	10c5c83a 	sub	r2,r2,r3
 4003af0:	8884d83a 	srl	r2,r17,r2
 4003af4:	98d0983a 	sll	r8,r19,r3
 4003af8:	88e2983a 	sll	r17,r17,r3
 4003afc:	1204b03a 	or	r2,r2,r8
 4003b00:	1c007416 	blt	r3,r16,4003cd4 <__adddf3+0x388>
 4003b04:	1c21c83a 	sub	r16,r3,r16
 4003b08:	82000044 	addi	r8,r16,1
 4003b0c:	00c007c4 	movi	r3,31
 4003b10:	1a009116 	blt	r3,r8,4003d58 <__adddf3+0x40c>
 4003b14:	00c00804 	movi	r3,32
 4003b18:	1a07c83a 	sub	r3,r3,r8
 4003b1c:	8a08d83a 	srl	r4,r17,r8
 4003b20:	88e2983a 	sll	r17,r17,r3
 4003b24:	10c6983a 	sll	r3,r2,r3
 4003b28:	1210d83a 	srl	r8,r2,r8
 4003b2c:	8804c03a 	cmpne	r2,r17,zero
 4003b30:	1906b03a 	or	r3,r3,r4
 4003b34:	18a2b03a 	or	r17,r3,r2
 4003b38:	0021883a 	mov	r16,zero
 4003b3c:	003fa206 	br	40039c8 <__alt_data_end+0xfc0039c8>
 4003b40:	1890b03a 	or	r8,r3,r2
 4003b44:	40017d26 	beq	r8,zero,400413c <__adddf3+0x7f0>
 4003b48:	1011883a 	mov	r8,r2
 4003b4c:	1823883a 	mov	r17,r3
 4003b50:	888001cc 	andi	r2,r17,7
 4003b54:	103f9e1e 	bne	r2,zero,40039d0 <__alt_data_end+0xfc0039d0>
 4003b58:	4004977a 	slli	r2,r8,29
 4003b5c:	8822d0fa 	srli	r17,r17,3
 4003b60:	4010d0fa 	srli	r8,r8,3
 4003b64:	9007883a 	mov	r3,r18
 4003b68:	1444b03a 	or	r2,r2,r17
 4003b6c:	0101ffc4 	movi	r4,2047
 4003b70:	81002426 	beq	r16,r4,4003c04 <__adddf3+0x2b8>
 4003b74:	8120703a 	and	r16,r16,r4
 4003b78:	01000434 	movhi	r4,16
 4003b7c:	213fffc4 	addi	r4,r4,-1
 4003b80:	4110703a 	and	r8,r8,r4
 4003b84:	003fa806 	br	4003a28 <__alt_data_end+0xfc003a28>
 4003b88:	8089c83a 	sub	r4,r16,r2
 4003b8c:	01005e0e 	bge	zero,r4,4003d08 <__adddf3+0x3bc>
 4003b90:	10002b26 	beq	r2,zero,4003c40 <__adddf3+0x2f4>
 4003b94:	0081ffc4 	movi	r2,2047
 4003b98:	80bf8b26 	beq	r16,r2,40039c8 <__alt_data_end+0xfc0039c8>
 4003b9c:	4a402034 	orhi	r9,r9,128
 4003ba0:	00800e04 	movi	r2,56
 4003ba4:	1100a40e 	bge	r2,r4,4003e38 <__adddf3+0x4ec>
 4003ba8:	498cb03a 	or	r6,r9,r6
 4003bac:	300ac03a 	cmpne	r5,r6,zero
 4003bb0:	0013883a 	mov	r9,zero
 4003bb4:	2c4b883a 	add	r5,r5,r17
 4003bb8:	2c63803a 	cmpltu	r17,r5,r17
 4003bbc:	4a11883a 	add	r8,r9,r8
 4003bc0:	8a11883a 	add	r8,r17,r8
 4003bc4:	2823883a 	mov	r17,r5
 4003bc8:	4080202c 	andhi	r2,r8,128
 4003bcc:	103fe026 	beq	r2,zero,4003b50 <__alt_data_end+0xfc003b50>
 4003bd0:	84000044 	addi	r16,r16,1
 4003bd4:	0081ffc4 	movi	r2,2047
 4003bd8:	8080d226 	beq	r16,r2,4003f24 <__adddf3+0x5d8>
 4003bdc:	00bfe034 	movhi	r2,65408
 4003be0:	10bfffc4 	addi	r2,r2,-1
 4003be4:	4090703a 	and	r8,r8,r2
 4003be8:	880ad07a 	srli	r5,r17,1
 4003bec:	400897fa 	slli	r4,r8,31
 4003bf0:	88c0004c 	andi	r3,r17,1
 4003bf4:	28e2b03a 	or	r17,r5,r3
 4003bf8:	4010d07a 	srli	r8,r8,1
 4003bfc:	2462b03a 	or	r17,r4,r17
 4003c00:	003f7106 	br	40039c8 <__alt_data_end+0xfc0039c8>
 4003c04:	4088b03a 	or	r4,r8,r2
 4003c08:	20014526 	beq	r4,zero,4004120 <__adddf3+0x7d4>
 4003c0c:	01000434 	movhi	r4,16
 4003c10:	42000234 	orhi	r8,r8,8
 4003c14:	213fffc4 	addi	r4,r4,-1
 4003c18:	4110703a 	and	r8,r8,r4
 4003c1c:	003f8206 	br	4003a28 <__alt_data_end+0xfc003a28>
 4003c20:	18ffffc4 	addi	r3,r3,-1
 4003c24:	1800491e 	bne	r3,zero,4003d4c <__adddf3+0x400>
 4003c28:	898bc83a 	sub	r5,r17,r6
 4003c2c:	8963803a 	cmpltu	r17,r17,r5
 4003c30:	4251c83a 	sub	r8,r8,r9
 4003c34:	4451c83a 	sub	r8,r8,r17
 4003c38:	2823883a 	mov	r17,r5
 4003c3c:	003f9f06 	br	4003abc <__alt_data_end+0xfc003abc>
 4003c40:	4984b03a 	or	r2,r9,r6
 4003c44:	103f6026 	beq	r2,zero,40039c8 <__alt_data_end+0xfc0039c8>
 4003c48:	213fffc4 	addi	r4,r4,-1
 4003c4c:	2000931e 	bne	r4,zero,4003e9c <__adddf3+0x550>
 4003c50:	898d883a 	add	r6,r17,r6
 4003c54:	3463803a 	cmpltu	r17,r6,r17
 4003c58:	4251883a 	add	r8,r8,r9
 4003c5c:	8a11883a 	add	r8,r17,r8
 4003c60:	3023883a 	mov	r17,r6
 4003c64:	003fd806 	br	4003bc8 <__alt_data_end+0xfc003bc8>
 4003c68:	1800541e 	bne	r3,zero,4003dbc <__adddf3+0x470>
 4003c6c:	80800044 	addi	r2,r16,1
 4003c70:	1081ffcc 	andi	r2,r2,2047
 4003c74:	00c00044 	movi	r3,1
 4003c78:	1880a00e 	bge	r3,r2,4003efc <__adddf3+0x5b0>
 4003c7c:	8989c83a 	sub	r4,r17,r6
 4003c80:	8905803a 	cmpltu	r2,r17,r4
 4003c84:	4267c83a 	sub	r19,r8,r9
 4003c88:	98a7c83a 	sub	r19,r19,r2
 4003c8c:	9880202c 	andhi	r2,r19,128
 4003c90:	10006326 	beq	r2,zero,4003e20 <__adddf3+0x4d4>
 4003c94:	3463c83a 	sub	r17,r6,r17
 4003c98:	4a07c83a 	sub	r3,r9,r8
 4003c9c:	344d803a 	cmpltu	r6,r6,r17
 4003ca0:	19a7c83a 	sub	r19,r3,r6
 4003ca4:	3825883a 	mov	r18,r7
 4003ca8:	983f8a1e 	bne	r19,zero,4003ad4 <__alt_data_end+0xfc003ad4>
 4003cac:	8809883a 	mov	r4,r17
 4003cb0:	40063bc0 	call	40063bc <__clzsi2>
 4003cb4:	10800804 	addi	r2,r2,32
 4003cb8:	10fffe04 	addi	r3,r2,-8
 4003cbc:	010007c4 	movi	r4,31
 4003cc0:	20ff890e 	bge	r4,r3,4003ae8 <__alt_data_end+0xfc003ae8>
 4003cc4:	10bff604 	addi	r2,r2,-40
 4003cc8:	8884983a 	sll	r2,r17,r2
 4003ccc:	0023883a 	mov	r17,zero
 4003cd0:	1c3f8c0e 	bge	r3,r16,4003b04 <__alt_data_end+0xfc003b04>
 4003cd4:	023fe034 	movhi	r8,65408
 4003cd8:	423fffc4 	addi	r8,r8,-1
 4003cdc:	80e1c83a 	sub	r16,r16,r3
 4003ce0:	1210703a 	and	r8,r2,r8
 4003ce4:	003f3806 	br	40039c8 <__alt_data_end+0xfc0039c8>
 4003ce8:	9007883a 	mov	r3,r18
 4003cec:	0011883a 	mov	r8,zero
 4003cf0:	0005883a 	mov	r2,zero
 4003cf4:	003f4c06 	br	4003a28 <__alt_data_end+0xfc003a28>
 4003cf8:	498cb03a 	or	r6,r9,r6
 4003cfc:	300cc03a 	cmpne	r6,r6,zero
 4003d00:	0007883a 	mov	r3,zero
 4003d04:	003f6806 	br	4003aa8 <__alt_data_end+0xfc003aa8>
 4003d08:	20009c1e 	bne	r4,zero,4003f7c <__adddf3+0x630>
 4003d0c:	80800044 	addi	r2,r16,1
 4003d10:	1141ffcc 	andi	r5,r2,2047
 4003d14:	01000044 	movi	r4,1
 4003d18:	2140670e 	bge	r4,r5,4003eb8 <__adddf3+0x56c>
 4003d1c:	0101ffc4 	movi	r4,2047
 4003d20:	11007f26 	beq	r2,r4,4003f20 <__adddf3+0x5d4>
 4003d24:	898d883a 	add	r6,r17,r6
 4003d28:	4247883a 	add	r3,r8,r9
 4003d2c:	3451803a 	cmpltu	r8,r6,r17
 4003d30:	40d1883a 	add	r8,r8,r3
 4003d34:	402297fa 	slli	r17,r8,31
 4003d38:	300cd07a 	srli	r6,r6,1
 4003d3c:	4010d07a 	srli	r8,r8,1
 4003d40:	1021883a 	mov	r16,r2
 4003d44:	89a2b03a 	or	r17,r17,r6
 4003d48:	003f1f06 	br	40039c8 <__alt_data_end+0xfc0039c8>
 4003d4c:	0081ffc4 	movi	r2,2047
 4003d50:	80bf481e 	bne	r16,r2,4003a74 <__alt_data_end+0xfc003a74>
 4003d54:	003f1c06 	br	40039c8 <__alt_data_end+0xfc0039c8>
 4003d58:	843ff844 	addi	r16,r16,-31
 4003d5c:	01000804 	movi	r4,32
 4003d60:	1406d83a 	srl	r3,r2,r16
 4003d64:	41005026 	beq	r8,r4,4003ea8 <__adddf3+0x55c>
 4003d68:	01001004 	movi	r4,64
 4003d6c:	2211c83a 	sub	r8,r4,r8
 4003d70:	1204983a 	sll	r2,r2,r8
 4003d74:	88a2b03a 	or	r17,r17,r2
 4003d78:	8822c03a 	cmpne	r17,r17,zero
 4003d7c:	1c62b03a 	or	r17,r3,r17
 4003d80:	0011883a 	mov	r8,zero
 4003d84:	0021883a 	mov	r16,zero
 4003d88:	003f7106 	br	4003b50 <__alt_data_end+0xfc003b50>
 4003d8c:	193ff804 	addi	r4,r3,-32
 4003d90:	00800804 	movi	r2,32
 4003d94:	4908d83a 	srl	r4,r9,r4
 4003d98:	18804526 	beq	r3,r2,4003eb0 <__adddf3+0x564>
 4003d9c:	00801004 	movi	r2,64
 4003da0:	10c5c83a 	sub	r2,r2,r3
 4003da4:	4886983a 	sll	r3,r9,r2
 4003da8:	198cb03a 	or	r6,r3,r6
 4003dac:	300cc03a 	cmpne	r6,r6,zero
 4003db0:	218cb03a 	or	r6,r4,r6
 4003db4:	0007883a 	mov	r3,zero
 4003db8:	003f3b06 	br	4003aa8 <__alt_data_end+0xfc003aa8>
 4003dbc:	80002a26 	beq	r16,zero,4003e68 <__adddf3+0x51c>
 4003dc0:	0101ffc4 	movi	r4,2047
 4003dc4:	11006826 	beq	r2,r4,4003f68 <__adddf3+0x61c>
 4003dc8:	00c7c83a 	sub	r3,zero,r3
 4003dcc:	42002034 	orhi	r8,r8,128
 4003dd0:	01000e04 	movi	r4,56
 4003dd4:	20c07c16 	blt	r4,r3,4003fc8 <__adddf3+0x67c>
 4003dd8:	010007c4 	movi	r4,31
 4003ddc:	20c0da16 	blt	r4,r3,4004148 <__adddf3+0x7fc>
 4003de0:	01000804 	movi	r4,32
 4003de4:	20c9c83a 	sub	r4,r4,r3
 4003de8:	4114983a 	sll	r10,r8,r4
 4003dec:	88cad83a 	srl	r5,r17,r3
 4003df0:	8908983a 	sll	r4,r17,r4
 4003df4:	40c6d83a 	srl	r3,r8,r3
 4003df8:	5162b03a 	or	r17,r10,r5
 4003dfc:	2008c03a 	cmpne	r4,r4,zero
 4003e00:	8922b03a 	or	r17,r17,r4
 4003e04:	3463c83a 	sub	r17,r6,r17
 4003e08:	48c7c83a 	sub	r3,r9,r3
 4003e0c:	344d803a 	cmpltu	r6,r6,r17
 4003e10:	1991c83a 	sub	r8,r3,r6
 4003e14:	1021883a 	mov	r16,r2
 4003e18:	3825883a 	mov	r18,r7
 4003e1c:	003f2706 	br	4003abc <__alt_data_end+0xfc003abc>
 4003e20:	24d0b03a 	or	r8,r4,r19
 4003e24:	40001b1e 	bne	r8,zero,4003e94 <__adddf3+0x548>
 4003e28:	0005883a 	mov	r2,zero
 4003e2c:	0007883a 	mov	r3,zero
 4003e30:	0021883a 	mov	r16,zero
 4003e34:	003f4d06 	br	4003b6c <__alt_data_end+0xfc003b6c>
 4003e38:	008007c4 	movi	r2,31
 4003e3c:	11003c16 	blt	r2,r4,4003f30 <__adddf3+0x5e4>
 4003e40:	00800804 	movi	r2,32
 4003e44:	1105c83a 	sub	r2,r2,r4
 4003e48:	488e983a 	sll	r7,r9,r2
 4003e4c:	310ad83a 	srl	r5,r6,r4
 4003e50:	3084983a 	sll	r2,r6,r2
 4003e54:	4912d83a 	srl	r9,r9,r4
 4003e58:	394ab03a 	or	r5,r7,r5
 4003e5c:	1004c03a 	cmpne	r2,r2,zero
 4003e60:	288ab03a 	or	r5,r5,r2
 4003e64:	003f5306 	br	4003bb4 <__alt_data_end+0xfc003bb4>
 4003e68:	4448b03a 	or	r4,r8,r17
 4003e6c:	20003e26 	beq	r4,zero,4003f68 <__adddf3+0x61c>
 4003e70:	00c6303a 	nor	r3,zero,r3
 4003e74:	18003a1e 	bne	r3,zero,4003f60 <__adddf3+0x614>
 4003e78:	3463c83a 	sub	r17,r6,r17
 4003e7c:	4a07c83a 	sub	r3,r9,r8
 4003e80:	344d803a 	cmpltu	r6,r6,r17
 4003e84:	1991c83a 	sub	r8,r3,r6
 4003e88:	1021883a 	mov	r16,r2
 4003e8c:	3825883a 	mov	r18,r7
 4003e90:	003f0a06 	br	4003abc <__alt_data_end+0xfc003abc>
 4003e94:	2023883a 	mov	r17,r4
 4003e98:	003f0d06 	br	4003ad0 <__alt_data_end+0xfc003ad0>
 4003e9c:	0081ffc4 	movi	r2,2047
 4003ea0:	80bf3f1e 	bne	r16,r2,4003ba0 <__alt_data_end+0xfc003ba0>
 4003ea4:	003ec806 	br	40039c8 <__alt_data_end+0xfc0039c8>
 4003ea8:	0005883a 	mov	r2,zero
 4003eac:	003fb106 	br	4003d74 <__alt_data_end+0xfc003d74>
 4003eb0:	0007883a 	mov	r3,zero
 4003eb4:	003fbc06 	br	4003da8 <__alt_data_end+0xfc003da8>
 4003eb8:	4444b03a 	or	r2,r8,r17
 4003ebc:	8000871e 	bne	r16,zero,40040dc <__adddf3+0x790>
 4003ec0:	1000ba26 	beq	r2,zero,40041ac <__adddf3+0x860>
 4003ec4:	4984b03a 	or	r2,r9,r6
 4003ec8:	103ebf26 	beq	r2,zero,40039c8 <__alt_data_end+0xfc0039c8>
 4003ecc:	8985883a 	add	r2,r17,r6
 4003ed0:	4247883a 	add	r3,r8,r9
 4003ed4:	1451803a 	cmpltu	r8,r2,r17
 4003ed8:	40d1883a 	add	r8,r8,r3
 4003edc:	40c0202c 	andhi	r3,r8,128
 4003ee0:	1023883a 	mov	r17,r2
 4003ee4:	183f1a26 	beq	r3,zero,4003b50 <__alt_data_end+0xfc003b50>
 4003ee8:	00bfe034 	movhi	r2,65408
 4003eec:	10bfffc4 	addi	r2,r2,-1
 4003ef0:	2021883a 	mov	r16,r4
 4003ef4:	4090703a 	and	r8,r8,r2
 4003ef8:	003eb306 	br	40039c8 <__alt_data_end+0xfc0039c8>
 4003efc:	4444b03a 	or	r2,r8,r17
 4003f00:	8000291e 	bne	r16,zero,4003fa8 <__adddf3+0x65c>
 4003f04:	10004b1e 	bne	r2,zero,4004034 <__adddf3+0x6e8>
 4003f08:	4990b03a 	or	r8,r9,r6
 4003f0c:	40008b26 	beq	r8,zero,400413c <__adddf3+0x7f0>
 4003f10:	4811883a 	mov	r8,r9
 4003f14:	3023883a 	mov	r17,r6
 4003f18:	3825883a 	mov	r18,r7
 4003f1c:	003eaa06 	br	40039c8 <__alt_data_end+0xfc0039c8>
 4003f20:	1021883a 	mov	r16,r2
 4003f24:	0011883a 	mov	r8,zero
 4003f28:	0005883a 	mov	r2,zero
 4003f2c:	003f0f06 	br	4003b6c <__alt_data_end+0xfc003b6c>
 4003f30:	217ff804 	addi	r5,r4,-32
 4003f34:	00800804 	movi	r2,32
 4003f38:	494ad83a 	srl	r5,r9,r5
 4003f3c:	20807d26 	beq	r4,r2,4004134 <__adddf3+0x7e8>
 4003f40:	00801004 	movi	r2,64
 4003f44:	1109c83a 	sub	r4,r2,r4
 4003f48:	4912983a 	sll	r9,r9,r4
 4003f4c:	498cb03a 	or	r6,r9,r6
 4003f50:	300cc03a 	cmpne	r6,r6,zero
 4003f54:	298ab03a 	or	r5,r5,r6
 4003f58:	0013883a 	mov	r9,zero
 4003f5c:	003f1506 	br	4003bb4 <__alt_data_end+0xfc003bb4>
 4003f60:	0101ffc4 	movi	r4,2047
 4003f64:	113f9a1e 	bne	r2,r4,4003dd0 <__alt_data_end+0xfc003dd0>
 4003f68:	4811883a 	mov	r8,r9
 4003f6c:	3023883a 	mov	r17,r6
 4003f70:	1021883a 	mov	r16,r2
 4003f74:	3825883a 	mov	r18,r7
 4003f78:	003e9306 	br	40039c8 <__alt_data_end+0xfc0039c8>
 4003f7c:	8000161e 	bne	r16,zero,4003fd8 <__adddf3+0x68c>
 4003f80:	444ab03a 	or	r5,r8,r17
 4003f84:	28005126 	beq	r5,zero,40040cc <__adddf3+0x780>
 4003f88:	0108303a 	nor	r4,zero,r4
 4003f8c:	20004d1e 	bne	r4,zero,40040c4 <__adddf3+0x778>
 4003f90:	89a3883a 	add	r17,r17,r6
 4003f94:	4253883a 	add	r9,r8,r9
 4003f98:	898d803a 	cmpltu	r6,r17,r6
 4003f9c:	3251883a 	add	r8,r6,r9
 4003fa0:	1021883a 	mov	r16,r2
 4003fa4:	003f0806 	br	4003bc8 <__alt_data_end+0xfc003bc8>
 4003fa8:	1000301e 	bne	r2,zero,400406c <__adddf3+0x720>
 4003fac:	4984b03a 	or	r2,r9,r6
 4003fb0:	10007126 	beq	r2,zero,4004178 <__adddf3+0x82c>
 4003fb4:	4811883a 	mov	r8,r9
 4003fb8:	3023883a 	mov	r17,r6
 4003fbc:	3825883a 	mov	r18,r7
 4003fc0:	0401ffc4 	movi	r16,2047
 4003fc4:	003e8006 	br	40039c8 <__alt_data_end+0xfc0039c8>
 4003fc8:	4462b03a 	or	r17,r8,r17
 4003fcc:	8822c03a 	cmpne	r17,r17,zero
 4003fd0:	0007883a 	mov	r3,zero
 4003fd4:	003f8b06 	br	4003e04 <__alt_data_end+0xfc003e04>
 4003fd8:	0141ffc4 	movi	r5,2047
 4003fdc:	11403b26 	beq	r2,r5,40040cc <__adddf3+0x780>
 4003fe0:	0109c83a 	sub	r4,zero,r4
 4003fe4:	42002034 	orhi	r8,r8,128
 4003fe8:	01400e04 	movi	r5,56
 4003fec:	29006716 	blt	r5,r4,400418c <__adddf3+0x840>
 4003ff0:	014007c4 	movi	r5,31
 4003ff4:	29007016 	blt	r5,r4,40041b8 <__adddf3+0x86c>
 4003ff8:	01400804 	movi	r5,32
 4003ffc:	290bc83a 	sub	r5,r5,r4
 4004000:	4154983a 	sll	r10,r8,r5
 4004004:	890ed83a 	srl	r7,r17,r4
 4004008:	894a983a 	sll	r5,r17,r5
 400400c:	4108d83a 	srl	r4,r8,r4
 4004010:	51e2b03a 	or	r17,r10,r7
 4004014:	280ac03a 	cmpne	r5,r5,zero
 4004018:	8962b03a 	or	r17,r17,r5
 400401c:	89a3883a 	add	r17,r17,r6
 4004020:	2253883a 	add	r9,r4,r9
 4004024:	898d803a 	cmpltu	r6,r17,r6
 4004028:	3251883a 	add	r8,r6,r9
 400402c:	1021883a 	mov	r16,r2
 4004030:	003ee506 	br	4003bc8 <__alt_data_end+0xfc003bc8>
 4004034:	4984b03a 	or	r2,r9,r6
 4004038:	103e6326 	beq	r2,zero,40039c8 <__alt_data_end+0xfc0039c8>
 400403c:	8987c83a 	sub	r3,r17,r6
 4004040:	88c9803a 	cmpltu	r4,r17,r3
 4004044:	4245c83a 	sub	r2,r8,r9
 4004048:	1105c83a 	sub	r2,r2,r4
 400404c:	1100202c 	andhi	r4,r2,128
 4004050:	203ebb26 	beq	r4,zero,4003b40 <__alt_data_end+0xfc003b40>
 4004054:	3463c83a 	sub	r17,r6,r17
 4004058:	4a07c83a 	sub	r3,r9,r8
 400405c:	344d803a 	cmpltu	r6,r6,r17
 4004060:	1991c83a 	sub	r8,r3,r6
 4004064:	3825883a 	mov	r18,r7
 4004068:	003e5706 	br	40039c8 <__alt_data_end+0xfc0039c8>
 400406c:	4984b03a 	or	r2,r9,r6
 4004070:	10002e26 	beq	r2,zero,400412c <__adddf3+0x7e0>
 4004074:	4004d0fa 	srli	r2,r8,3
 4004078:	8822d0fa 	srli	r17,r17,3
 400407c:	4010977a 	slli	r8,r8,29
 4004080:	10c0022c 	andhi	r3,r2,8
 4004084:	4462b03a 	or	r17,r8,r17
 4004088:	18000826 	beq	r3,zero,40040ac <__adddf3+0x760>
 400408c:	4808d0fa 	srli	r4,r9,3
 4004090:	20c0022c 	andhi	r3,r4,8
 4004094:	1800051e 	bne	r3,zero,40040ac <__adddf3+0x760>
 4004098:	300cd0fa 	srli	r6,r6,3
 400409c:	4806977a 	slli	r3,r9,29
 40040a0:	2005883a 	mov	r2,r4
 40040a4:	3825883a 	mov	r18,r7
 40040a8:	19a2b03a 	or	r17,r3,r6
 40040ac:	8810d77a 	srli	r8,r17,29
 40040b0:	100490fa 	slli	r2,r2,3
 40040b4:	882290fa 	slli	r17,r17,3
 40040b8:	0401ffc4 	movi	r16,2047
 40040bc:	4090b03a 	or	r8,r8,r2
 40040c0:	003e4106 	br	40039c8 <__alt_data_end+0xfc0039c8>
 40040c4:	0141ffc4 	movi	r5,2047
 40040c8:	117fc71e 	bne	r2,r5,4003fe8 <__alt_data_end+0xfc003fe8>
 40040cc:	4811883a 	mov	r8,r9
 40040d0:	3023883a 	mov	r17,r6
 40040d4:	1021883a 	mov	r16,r2
 40040d8:	003e3b06 	br	40039c8 <__alt_data_end+0xfc0039c8>
 40040dc:	10002f26 	beq	r2,zero,400419c <__adddf3+0x850>
 40040e0:	4984b03a 	or	r2,r9,r6
 40040e4:	10001126 	beq	r2,zero,400412c <__adddf3+0x7e0>
 40040e8:	4004d0fa 	srli	r2,r8,3
 40040ec:	8822d0fa 	srli	r17,r17,3
 40040f0:	4010977a 	slli	r8,r8,29
 40040f4:	10c0022c 	andhi	r3,r2,8
 40040f8:	4462b03a 	or	r17,r8,r17
 40040fc:	183feb26 	beq	r3,zero,40040ac <__alt_data_end+0xfc0040ac>
 4004100:	4808d0fa 	srli	r4,r9,3
 4004104:	20c0022c 	andhi	r3,r4,8
 4004108:	183fe81e 	bne	r3,zero,40040ac <__alt_data_end+0xfc0040ac>
 400410c:	300cd0fa 	srli	r6,r6,3
 4004110:	4806977a 	slli	r3,r9,29
 4004114:	2005883a 	mov	r2,r4
 4004118:	19a2b03a 	or	r17,r3,r6
 400411c:	003fe306 	br	40040ac <__alt_data_end+0xfc0040ac>
 4004120:	0011883a 	mov	r8,zero
 4004124:	0005883a 	mov	r2,zero
 4004128:	003e3f06 	br	4003a28 <__alt_data_end+0xfc003a28>
 400412c:	0401ffc4 	movi	r16,2047
 4004130:	003e2506 	br	40039c8 <__alt_data_end+0xfc0039c8>
 4004134:	0013883a 	mov	r9,zero
 4004138:	003f8406 	br	4003f4c <__alt_data_end+0xfc003f4c>
 400413c:	0005883a 	mov	r2,zero
 4004140:	0007883a 	mov	r3,zero
 4004144:	003e8906 	br	4003b6c <__alt_data_end+0xfc003b6c>
 4004148:	197ff804 	addi	r5,r3,-32
 400414c:	01000804 	movi	r4,32
 4004150:	414ad83a 	srl	r5,r8,r5
 4004154:	19002426 	beq	r3,r4,40041e8 <__adddf3+0x89c>
 4004158:	01001004 	movi	r4,64
 400415c:	20c7c83a 	sub	r3,r4,r3
 4004160:	40c6983a 	sll	r3,r8,r3
 4004164:	1c46b03a 	or	r3,r3,r17
 4004168:	1806c03a 	cmpne	r3,r3,zero
 400416c:	28e2b03a 	or	r17,r5,r3
 4004170:	0007883a 	mov	r3,zero
 4004174:	003f2306 	br	4003e04 <__alt_data_end+0xfc003e04>
 4004178:	0007883a 	mov	r3,zero
 400417c:	5811883a 	mov	r8,r11
 4004180:	00bfffc4 	movi	r2,-1
 4004184:	0401ffc4 	movi	r16,2047
 4004188:	003e7806 	br	4003b6c <__alt_data_end+0xfc003b6c>
 400418c:	4462b03a 	or	r17,r8,r17
 4004190:	8822c03a 	cmpne	r17,r17,zero
 4004194:	0009883a 	mov	r4,zero
 4004198:	003fa006 	br	400401c <__alt_data_end+0xfc00401c>
 400419c:	4811883a 	mov	r8,r9
 40041a0:	3023883a 	mov	r17,r6
 40041a4:	0401ffc4 	movi	r16,2047
 40041a8:	003e0706 	br	40039c8 <__alt_data_end+0xfc0039c8>
 40041ac:	4811883a 	mov	r8,r9
 40041b0:	3023883a 	mov	r17,r6
 40041b4:	003e0406 	br	40039c8 <__alt_data_end+0xfc0039c8>
 40041b8:	21fff804 	addi	r7,r4,-32
 40041bc:	01400804 	movi	r5,32
 40041c0:	41ced83a 	srl	r7,r8,r7
 40041c4:	21400a26 	beq	r4,r5,40041f0 <__adddf3+0x8a4>
 40041c8:	01401004 	movi	r5,64
 40041cc:	2909c83a 	sub	r4,r5,r4
 40041d0:	4108983a 	sll	r4,r8,r4
 40041d4:	2448b03a 	or	r4,r4,r17
 40041d8:	2008c03a 	cmpne	r4,r4,zero
 40041dc:	3922b03a 	or	r17,r7,r4
 40041e0:	0009883a 	mov	r4,zero
 40041e4:	003f8d06 	br	400401c <__alt_data_end+0xfc00401c>
 40041e8:	0007883a 	mov	r3,zero
 40041ec:	003fdd06 	br	4004164 <__alt_data_end+0xfc004164>
 40041f0:	0009883a 	mov	r4,zero
 40041f4:	003ff706 	br	40041d4 <__alt_data_end+0xfc0041d4>

040041f8 <__divdf3>:
 40041f8:	defff004 	addi	sp,sp,-64
 40041fc:	dc800815 	stw	r18,32(sp)
 4004200:	2824d53a 	srli	r18,r5,20
 4004204:	dd800c15 	stw	r22,48(sp)
 4004208:	282cd7fa 	srli	r22,r5,31
 400420c:	dc000615 	stw	r16,24(sp)
 4004210:	04000434 	movhi	r16,16
 4004214:	843fffc4 	addi	r16,r16,-1
 4004218:	dfc00f15 	stw	ra,60(sp)
 400421c:	df000e15 	stw	fp,56(sp)
 4004220:	ddc00d15 	stw	r23,52(sp)
 4004224:	dd400b15 	stw	r21,44(sp)
 4004228:	dd000a15 	stw	r20,40(sp)
 400422c:	dcc00915 	stw	r19,36(sp)
 4004230:	dc400715 	stw	r17,28(sp)
 4004234:	9481ffcc 	andi	r18,r18,2047
 4004238:	2c20703a 	and	r16,r5,r16
 400423c:	b2003fcc 	andi	r8,r22,255
 4004240:	90006126 	beq	r18,zero,40043c8 <__divdf3+0x1d0>
 4004244:	0081ffc4 	movi	r2,2047
 4004248:	202b883a 	mov	r21,r4
 400424c:	90803726 	beq	r18,r2,400432c <__divdf3+0x134>
 4004250:	80800434 	orhi	r2,r16,16
 4004254:	100490fa 	slli	r2,r2,3
 4004258:	2020d77a 	srli	r16,r4,29
 400425c:	202a90fa 	slli	r21,r4,3
 4004260:	94bf0044 	addi	r18,r18,-1023
 4004264:	80a0b03a 	or	r16,r16,r2
 4004268:	0013883a 	mov	r9,zero
 400426c:	000b883a 	mov	r5,zero
 4004270:	3806d53a 	srli	r3,r7,20
 4004274:	382ed7fa 	srli	r23,r7,31
 4004278:	04400434 	movhi	r17,16
 400427c:	8c7fffc4 	addi	r17,r17,-1
 4004280:	18c1ffcc 	andi	r3,r3,2047
 4004284:	3029883a 	mov	r20,r6
 4004288:	3c62703a 	and	r17,r7,r17
 400428c:	bf003fcc 	andi	fp,r23,255
 4004290:	18006e26 	beq	r3,zero,400444c <__divdf3+0x254>
 4004294:	0081ffc4 	movi	r2,2047
 4004298:	18806626 	beq	r3,r2,4004434 <__divdf3+0x23c>
 400429c:	88800434 	orhi	r2,r17,16
 40042a0:	100490fa 	slli	r2,r2,3
 40042a4:	3022d77a 	srli	r17,r6,29
 40042a8:	302890fa 	slli	r20,r6,3
 40042ac:	18ff0044 	addi	r3,r3,-1023
 40042b0:	88a2b03a 	or	r17,r17,r2
 40042b4:	000f883a 	mov	r7,zero
 40042b8:	b5e6f03a 	xor	r19,r22,r23
 40042bc:	3a4cb03a 	or	r6,r7,r9
 40042c0:	008003c4 	movi	r2,15
 40042c4:	9809883a 	mov	r4,r19
 40042c8:	90c7c83a 	sub	r3,r18,r3
 40042cc:	9cc03fcc 	andi	r19,r19,255
 40042d0:	11809636 	bltu	r2,r6,400452c <__divdf3+0x334>
 40042d4:	300c90ba 	slli	r6,r6,2
 40042d8:	00810034 	movhi	r2,1024
 40042dc:	1090bb04 	addi	r2,r2,17132
 40042e0:	308d883a 	add	r6,r6,r2
 40042e4:	30800017 	ldw	r2,0(r6)
 40042e8:	1000683a 	jmp	r2
 40042ec:	0400452c 	andhi	r16,zero,276
 40042f0:	04004364 	muli	r16,zero,269
 40042f4:	0400451c 	xori	r16,zero,276
 40042f8:	04004358 	cmpnei	r16,zero,269
 40042fc:	0400451c 	xori	r16,zero,276
 4004300:	040044f0 	cmpltui	r16,zero,275
 4004304:	0400451c 	xori	r16,zero,276
 4004308:	04004358 	cmpnei	r16,zero,269
 400430c:	04004364 	muli	r16,zero,269
 4004310:	04004364 	muli	r16,zero,269
 4004314:	040044f0 	cmpltui	r16,zero,275
 4004318:	04004358 	cmpnei	r16,zero,269
 400431c:	04004348 	cmpgei	r16,zero,269
 4004320:	04004348 	cmpgei	r16,zero,269
 4004324:	04004348 	cmpgei	r16,zero,269
 4004328:	040048b4 	movhi	r16,290
 400432c:	2404b03a 	or	r2,r4,r16
 4004330:	10006c1e 	bne	r2,zero,40044e4 <__divdf3+0x2ec>
 4004334:	02400204 	movi	r9,8
 4004338:	0021883a 	mov	r16,zero
 400433c:	002b883a 	mov	r21,zero
 4004340:	01400084 	movi	r5,2
 4004344:	003fca06 	br	4004270 <__alt_data_end+0xfc004270>
 4004348:	8023883a 	mov	r17,r16
 400434c:	a829883a 	mov	r20,r21
 4004350:	4039883a 	mov	fp,r8
 4004354:	280f883a 	mov	r7,r5
 4004358:	00800084 	movi	r2,2
 400435c:	3881601e 	bne	r7,r2,40048e0 <__divdf3+0x6e8>
 4004360:	e027883a 	mov	r19,fp
 4004364:	9900004c 	andi	r4,r19,1
 4004368:	0081ffc4 	movi	r2,2047
 400436c:	0021883a 	mov	r16,zero
 4004370:	002b883a 	mov	r21,zero
 4004374:	1004953a 	slli	r2,r2,20
 4004378:	20c03fcc 	andi	r3,r4,255
 400437c:	01400434 	movhi	r5,16
 4004380:	297fffc4 	addi	r5,r5,-1
 4004384:	180697fa 	slli	r3,r3,31
 4004388:	8160703a 	and	r16,r16,r5
 400438c:	80a0b03a 	or	r16,r16,r2
 4004390:	80c6b03a 	or	r3,r16,r3
 4004394:	a805883a 	mov	r2,r21
 4004398:	dfc00f17 	ldw	ra,60(sp)
 400439c:	df000e17 	ldw	fp,56(sp)
 40043a0:	ddc00d17 	ldw	r23,52(sp)
 40043a4:	dd800c17 	ldw	r22,48(sp)
 40043a8:	dd400b17 	ldw	r21,44(sp)
 40043ac:	dd000a17 	ldw	r20,40(sp)
 40043b0:	dcc00917 	ldw	r19,36(sp)
 40043b4:	dc800817 	ldw	r18,32(sp)
 40043b8:	dc400717 	ldw	r17,28(sp)
 40043bc:	dc000617 	ldw	r16,24(sp)
 40043c0:	dec01004 	addi	sp,sp,64
 40043c4:	f800283a 	ret
 40043c8:	2404b03a 	or	r2,r4,r16
 40043cc:	2023883a 	mov	r17,r4
 40043d0:	10003f26 	beq	r2,zero,40044d0 <__divdf3+0x2d8>
 40043d4:	80015e26 	beq	r16,zero,4004950 <__divdf3+0x758>
 40043d8:	8009883a 	mov	r4,r16
 40043dc:	d9800215 	stw	r6,8(sp)
 40043e0:	d9c00515 	stw	r7,20(sp)
 40043e4:	da000415 	stw	r8,16(sp)
 40043e8:	40063bc0 	call	40063bc <__clzsi2>
 40043ec:	d9800217 	ldw	r6,8(sp)
 40043f0:	d9c00517 	ldw	r7,20(sp)
 40043f4:	da000417 	ldw	r8,16(sp)
 40043f8:	113ffd44 	addi	r4,r2,-11
 40043fc:	00c00704 	movi	r3,28
 4004400:	19014f16 	blt	r3,r4,4004940 <__divdf3+0x748>
 4004404:	00c00744 	movi	r3,29
 4004408:	157ffe04 	addi	r21,r2,-8
 400440c:	1907c83a 	sub	r3,r3,r4
 4004410:	8560983a 	sll	r16,r16,r21
 4004414:	88c6d83a 	srl	r3,r17,r3
 4004418:	8d6a983a 	sll	r21,r17,r21
 400441c:	1c20b03a 	or	r16,r3,r16
 4004420:	1080fcc4 	addi	r2,r2,1011
 4004424:	00a5c83a 	sub	r18,zero,r2
 4004428:	0013883a 	mov	r9,zero
 400442c:	000b883a 	mov	r5,zero
 4004430:	003f8f06 	br	4004270 <__alt_data_end+0xfc004270>
 4004434:	3444b03a 	or	r2,r6,r17
 4004438:	1000231e 	bne	r2,zero,40044c8 <__divdf3+0x2d0>
 400443c:	0023883a 	mov	r17,zero
 4004440:	0029883a 	mov	r20,zero
 4004444:	01c00084 	movi	r7,2
 4004448:	003f9b06 	br	40042b8 <__alt_data_end+0xfc0042b8>
 400444c:	3444b03a 	or	r2,r6,r17
 4004450:	10001926 	beq	r2,zero,40044b8 <__divdf3+0x2c0>
 4004454:	88014b26 	beq	r17,zero,4004984 <__divdf3+0x78c>
 4004458:	8809883a 	mov	r4,r17
 400445c:	d9400115 	stw	r5,4(sp)
 4004460:	d9800215 	stw	r6,8(sp)
 4004464:	da000415 	stw	r8,16(sp)
 4004468:	da400315 	stw	r9,12(sp)
 400446c:	40063bc0 	call	40063bc <__clzsi2>
 4004470:	d9400117 	ldw	r5,4(sp)
 4004474:	d9800217 	ldw	r6,8(sp)
 4004478:	da000417 	ldw	r8,16(sp)
 400447c:	da400317 	ldw	r9,12(sp)
 4004480:	113ffd44 	addi	r4,r2,-11
 4004484:	00c00704 	movi	r3,28
 4004488:	19013a16 	blt	r3,r4,4004974 <__divdf3+0x77c>
 400448c:	00c00744 	movi	r3,29
 4004490:	153ffe04 	addi	r20,r2,-8
 4004494:	1907c83a 	sub	r3,r3,r4
 4004498:	8d22983a 	sll	r17,r17,r20
 400449c:	30c6d83a 	srl	r3,r6,r3
 40044a0:	3528983a 	sll	r20,r6,r20
 40044a4:	1c62b03a 	or	r17,r3,r17
 40044a8:	1080fcc4 	addi	r2,r2,1011
 40044ac:	0087c83a 	sub	r3,zero,r2
 40044b0:	000f883a 	mov	r7,zero
 40044b4:	003f8006 	br	40042b8 <__alt_data_end+0xfc0042b8>
 40044b8:	0023883a 	mov	r17,zero
 40044bc:	0029883a 	mov	r20,zero
 40044c0:	01c00044 	movi	r7,1
 40044c4:	003f7c06 	br	40042b8 <__alt_data_end+0xfc0042b8>
 40044c8:	01c000c4 	movi	r7,3
 40044cc:	003f7a06 	br	40042b8 <__alt_data_end+0xfc0042b8>
 40044d0:	02400104 	movi	r9,4
 40044d4:	0021883a 	mov	r16,zero
 40044d8:	002b883a 	mov	r21,zero
 40044dc:	01400044 	movi	r5,1
 40044e0:	003f6306 	br	4004270 <__alt_data_end+0xfc004270>
 40044e4:	02400304 	movi	r9,12
 40044e8:	014000c4 	movi	r5,3
 40044ec:	003f6006 	br	4004270 <__alt_data_end+0xfc004270>
 40044f0:	04000434 	movhi	r16,16
 40044f4:	0009883a 	mov	r4,zero
 40044f8:	843fffc4 	addi	r16,r16,-1
 40044fc:	057fffc4 	movi	r21,-1
 4004500:	0081ffc4 	movi	r2,2047
 4004504:	003f9b06 	br	4004374 <__alt_data_end+0xfc004374>
 4004508:	00c00044 	movi	r3,1
 400450c:	1887c83a 	sub	r3,r3,r2
 4004510:	01000e04 	movi	r4,56
 4004514:	20c1530e 	bge	r4,r3,4004a64 <__divdf3+0x86c>
 4004518:	9900004c 	andi	r4,r19,1
 400451c:	0005883a 	mov	r2,zero
 4004520:	0021883a 	mov	r16,zero
 4004524:	002b883a 	mov	r21,zero
 4004528:	003f9206 	br	4004374 <__alt_data_end+0xfc004374>
 400452c:	8c012e36 	bltu	r17,r16,40049e8 <__divdf3+0x7f0>
 4004530:	84412c26 	beq	r16,r17,40049e4 <__divdf3+0x7ec>
 4004534:	a82f883a 	mov	r23,r21
 4004538:	18ffffc4 	addi	r3,r3,-1
 400453c:	002b883a 	mov	r21,zero
 4004540:	a004d63a 	srli	r2,r20,24
 4004544:	8822923a 	slli	r17,r17,8
 4004548:	a028923a 	slli	r20,r20,8
 400454c:	8009883a 	mov	r4,r16
 4004550:	88acb03a 	or	r22,r17,r2
 4004554:	dd000015 	stw	r20,0(sp)
 4004558:	b028d43a 	srli	r20,r22,16
 400455c:	d8c00215 	stw	r3,8(sp)
 4004560:	b4bfffcc 	andi	r18,r22,65535
 4004564:	a00b883a 	mov	r5,r20
 4004568:	40023a40 	call	40023a4 <__udivsi3>
 400456c:	100b883a 	mov	r5,r2
 4004570:	9009883a 	mov	r4,r18
 4004574:	1023883a 	mov	r17,r2
 4004578:	40024600 	call	4002460 <__mulsi3>
 400457c:	8009883a 	mov	r4,r16
 4004580:	a00b883a 	mov	r5,r20
 4004584:	1039883a 	mov	fp,r2
 4004588:	40024080 	call	4002408 <__umodsi3>
 400458c:	1004943a 	slli	r2,r2,16
 4004590:	b808d43a 	srli	r4,r23,16
 4004594:	d8c00217 	ldw	r3,8(sp)
 4004598:	2084b03a 	or	r2,r4,r2
 400459c:	1700062e 	bgeu	r2,fp,40045b8 <__divdf3+0x3c0>
 40045a0:	1585883a 	add	r2,r2,r22
 40045a4:	893fffc4 	addi	r4,r17,-1
 40045a8:	15811d36 	bltu	r2,r22,4004a20 <__divdf3+0x828>
 40045ac:	17011c2e 	bgeu	r2,fp,4004a20 <__divdf3+0x828>
 40045b0:	8c7fff84 	addi	r17,r17,-2
 40045b4:	1585883a 	add	r2,r2,r22
 40045b8:	1739c83a 	sub	fp,r2,fp
 40045bc:	a00b883a 	mov	r5,r20
 40045c0:	e009883a 	mov	r4,fp
 40045c4:	d8c00215 	stw	r3,8(sp)
 40045c8:	40023a40 	call	40023a4 <__udivsi3>
 40045cc:	100b883a 	mov	r5,r2
 40045d0:	9009883a 	mov	r4,r18
 40045d4:	1021883a 	mov	r16,r2
 40045d8:	40024600 	call	4002460 <__mulsi3>
 40045dc:	a00b883a 	mov	r5,r20
 40045e0:	e009883a 	mov	r4,fp
 40045e4:	d8800415 	stw	r2,16(sp)
 40045e8:	40024080 	call	4002408 <__umodsi3>
 40045ec:	1004943a 	slli	r2,r2,16
 40045f0:	da000417 	ldw	r8,16(sp)
 40045f4:	bdffffcc 	andi	r23,r23,65535
 40045f8:	b884b03a 	or	r2,r23,r2
 40045fc:	d8c00217 	ldw	r3,8(sp)
 4004600:	1200062e 	bgeu	r2,r8,400461c <__divdf3+0x424>
 4004604:	1585883a 	add	r2,r2,r22
 4004608:	813fffc4 	addi	r4,r16,-1
 400460c:	15810236 	bltu	r2,r22,4004a18 <__divdf3+0x820>
 4004610:	1201012e 	bgeu	r2,r8,4004a18 <__divdf3+0x820>
 4004614:	843fff84 	addi	r16,r16,-2
 4004618:	1585883a 	add	r2,r2,r22
 400461c:	8822943a 	slli	r17,r17,16
 4004620:	d9800017 	ldw	r6,0(sp)
 4004624:	1211c83a 	sub	r8,r2,r8
 4004628:	8c22b03a 	or	r17,r17,r16
 400462c:	373fffcc 	andi	fp,r6,65535
 4004630:	8abfffcc 	andi	r10,r17,65535
 4004634:	8820d43a 	srli	r16,r17,16
 4004638:	5009883a 	mov	r4,r10
 400463c:	e00b883a 	mov	r5,fp
 4004640:	302ed43a 	srli	r23,r6,16
 4004644:	d8c00215 	stw	r3,8(sp)
 4004648:	da000415 	stw	r8,16(sp)
 400464c:	da800115 	stw	r10,4(sp)
 4004650:	40024600 	call	4002460 <__mulsi3>
 4004654:	800b883a 	mov	r5,r16
 4004658:	e009883a 	mov	r4,fp
 400465c:	d8800515 	stw	r2,20(sp)
 4004660:	40024600 	call	4002460 <__mulsi3>
 4004664:	8009883a 	mov	r4,r16
 4004668:	b80b883a 	mov	r5,r23
 400466c:	d8800315 	stw	r2,12(sp)
 4004670:	40024600 	call	4002460 <__mulsi3>
 4004674:	da800117 	ldw	r10,4(sp)
 4004678:	b80b883a 	mov	r5,r23
 400467c:	1021883a 	mov	r16,r2
 4004680:	5009883a 	mov	r4,r10
 4004684:	40024600 	call	4002460 <__mulsi3>
 4004688:	d9c00517 	ldw	r7,20(sp)
 400468c:	da400317 	ldw	r9,12(sp)
 4004690:	d8c00217 	ldw	r3,8(sp)
 4004694:	3808d43a 	srli	r4,r7,16
 4004698:	1245883a 	add	r2,r2,r9
 400469c:	da000417 	ldw	r8,16(sp)
 40046a0:	2085883a 	add	r2,r4,r2
 40046a4:	1240022e 	bgeu	r2,r9,40046b0 <__divdf3+0x4b8>
 40046a8:	01000074 	movhi	r4,1
 40046ac:	8121883a 	add	r16,r16,r4
 40046b0:	1008d43a 	srli	r4,r2,16
 40046b4:	1004943a 	slli	r2,r2,16
 40046b8:	39ffffcc 	andi	r7,r7,65535
 40046bc:	2409883a 	add	r4,r4,r16
 40046c0:	11c5883a 	add	r2,r2,r7
 40046c4:	4100bb36 	bltu	r8,r4,40049b4 <__divdf3+0x7bc>
 40046c8:	4100d726 	beq	r8,r4,4004a28 <__divdf3+0x830>
 40046cc:	4109c83a 	sub	r4,r8,r4
 40046d0:	a8a1c83a 	sub	r16,r21,r2
 40046d4:	ac2b803a 	cmpltu	r21,r21,r16
 40046d8:	256bc83a 	sub	r21,r4,r21
 40046dc:	b540d926 	beq	r22,r21,4004a44 <__divdf3+0x84c>
 40046e0:	a00b883a 	mov	r5,r20
 40046e4:	a809883a 	mov	r4,r21
 40046e8:	d8c00215 	stw	r3,8(sp)
 40046ec:	40023a40 	call	40023a4 <__udivsi3>
 40046f0:	100b883a 	mov	r5,r2
 40046f4:	9009883a 	mov	r4,r18
 40046f8:	d8800515 	stw	r2,20(sp)
 40046fc:	40024600 	call	4002460 <__mulsi3>
 4004700:	a809883a 	mov	r4,r21
 4004704:	a00b883a 	mov	r5,r20
 4004708:	d8800415 	stw	r2,16(sp)
 400470c:	40024080 	call	4002408 <__umodsi3>
 4004710:	1004943a 	slli	r2,r2,16
 4004714:	8008d43a 	srli	r4,r16,16
 4004718:	da000417 	ldw	r8,16(sp)
 400471c:	d8c00217 	ldw	r3,8(sp)
 4004720:	2084b03a 	or	r2,r4,r2
 4004724:	d9c00517 	ldw	r7,20(sp)
 4004728:	1200062e 	bgeu	r2,r8,4004744 <__divdf3+0x54c>
 400472c:	1585883a 	add	r2,r2,r22
 4004730:	393fffc4 	addi	r4,r7,-1
 4004734:	1580c536 	bltu	r2,r22,4004a4c <__divdf3+0x854>
 4004738:	1200c42e 	bgeu	r2,r8,4004a4c <__divdf3+0x854>
 400473c:	39ffff84 	addi	r7,r7,-2
 4004740:	1585883a 	add	r2,r2,r22
 4004744:	122bc83a 	sub	r21,r2,r8
 4004748:	a00b883a 	mov	r5,r20
 400474c:	a809883a 	mov	r4,r21
 4004750:	d8c00215 	stw	r3,8(sp)
 4004754:	d9c00515 	stw	r7,20(sp)
 4004758:	40023a40 	call	40023a4 <__udivsi3>
 400475c:	9009883a 	mov	r4,r18
 4004760:	100b883a 	mov	r5,r2
 4004764:	d8800415 	stw	r2,16(sp)
 4004768:	40024600 	call	4002460 <__mulsi3>
 400476c:	a809883a 	mov	r4,r21
 4004770:	a00b883a 	mov	r5,r20
 4004774:	1025883a 	mov	r18,r2
 4004778:	40024080 	call	4002408 <__umodsi3>
 400477c:	1004943a 	slli	r2,r2,16
 4004780:	813fffcc 	andi	r4,r16,65535
 4004784:	d8c00217 	ldw	r3,8(sp)
 4004788:	20a0b03a 	or	r16,r4,r2
 400478c:	d9c00517 	ldw	r7,20(sp)
 4004790:	da000417 	ldw	r8,16(sp)
 4004794:	8480062e 	bgeu	r16,r18,40047b0 <__divdf3+0x5b8>
 4004798:	85a1883a 	add	r16,r16,r22
 400479c:	40bfffc4 	addi	r2,r8,-1
 40047a0:	8580ac36 	bltu	r16,r22,4004a54 <__divdf3+0x85c>
 40047a4:	8480ab2e 	bgeu	r16,r18,4004a54 <__divdf3+0x85c>
 40047a8:	423fff84 	addi	r8,r8,-2
 40047ac:	85a1883a 	add	r16,r16,r22
 40047b0:	3804943a 	slli	r2,r7,16
 40047b4:	84a1c83a 	sub	r16,r16,r18
 40047b8:	e009883a 	mov	r4,fp
 40047bc:	1228b03a 	or	r20,r2,r8
 40047c0:	a1ffffcc 	andi	r7,r20,65535
 40047c4:	a024d43a 	srli	r18,r20,16
 40047c8:	380b883a 	mov	r5,r7
 40047cc:	d8c00215 	stw	r3,8(sp)
 40047d0:	d9c00515 	stw	r7,20(sp)
 40047d4:	40024600 	call	4002460 <__mulsi3>
 40047d8:	900b883a 	mov	r5,r18
 40047dc:	e009883a 	mov	r4,fp
 40047e0:	102b883a 	mov	r21,r2
 40047e4:	40024600 	call	4002460 <__mulsi3>
 40047e8:	900b883a 	mov	r5,r18
 40047ec:	b809883a 	mov	r4,r23
 40047f0:	1039883a 	mov	fp,r2
 40047f4:	40024600 	call	4002460 <__mulsi3>
 40047f8:	d9c00517 	ldw	r7,20(sp)
 40047fc:	b80b883a 	mov	r5,r23
 4004800:	1025883a 	mov	r18,r2
 4004804:	3809883a 	mov	r4,r7
 4004808:	40024600 	call	4002460 <__mulsi3>
 400480c:	a808d43a 	srli	r4,r21,16
 4004810:	1705883a 	add	r2,r2,fp
 4004814:	d8c00217 	ldw	r3,8(sp)
 4004818:	2085883a 	add	r2,r4,r2
 400481c:	1700022e 	bgeu	r2,fp,4004828 <__divdf3+0x630>
 4004820:	01000074 	movhi	r4,1
 4004824:	9125883a 	add	r18,r18,r4
 4004828:	1008d43a 	srli	r4,r2,16
 400482c:	1004943a 	slli	r2,r2,16
 4004830:	ad7fffcc 	andi	r21,r21,65535
 4004834:	2489883a 	add	r4,r4,r18
 4004838:	1545883a 	add	r2,r2,r21
 400483c:	81003836 	bltu	r16,r4,4004920 <__divdf3+0x728>
 4004840:	81003626 	beq	r16,r4,400491c <__divdf3+0x724>
 4004844:	a5000054 	ori	r20,r20,1
 4004848:	1880ffc4 	addi	r2,r3,1023
 400484c:	00bf2e0e 	bge	zero,r2,4004508 <__alt_data_end+0xfc004508>
 4004850:	a10001cc 	andi	r4,r20,7
 4004854:	20000726 	beq	r4,zero,4004874 <__divdf3+0x67c>
 4004858:	a10003cc 	andi	r4,r20,15
 400485c:	01400104 	movi	r5,4
 4004860:	21400426 	beq	r4,r5,4004874 <__divdf3+0x67c>
 4004864:	a149883a 	add	r4,r20,r5
 4004868:	2529803a 	cmpltu	r20,r4,r20
 400486c:	8d23883a 	add	r17,r17,r20
 4004870:	2029883a 	mov	r20,r4
 4004874:	8900402c 	andhi	r4,r17,256
 4004878:	20000426 	beq	r4,zero,400488c <__divdf3+0x694>
 400487c:	18810004 	addi	r2,r3,1024
 4004880:	00ffc034 	movhi	r3,65280
 4004884:	18ffffc4 	addi	r3,r3,-1
 4004888:	88e2703a 	and	r17,r17,r3
 400488c:	00c1ff84 	movi	r3,2046
 4004890:	18beb416 	blt	r3,r2,4004364 <__alt_data_end+0xfc004364>
 4004894:	a028d0fa 	srli	r20,r20,3
 4004898:	882a977a 	slli	r21,r17,29
 400489c:	8820927a 	slli	r16,r17,9
 40048a0:	1081ffcc 	andi	r2,r2,2047
 40048a4:	ad2ab03a 	or	r21,r21,r20
 40048a8:	8020d33a 	srli	r16,r16,12
 40048ac:	9900004c 	andi	r4,r19,1
 40048b0:	003eb006 	br	4004374 <__alt_data_end+0xfc004374>
 40048b4:	8080022c 	andhi	r2,r16,8
 40048b8:	10001226 	beq	r2,zero,4004904 <__divdf3+0x70c>
 40048bc:	8880022c 	andhi	r2,r17,8
 40048c0:	1000101e 	bne	r2,zero,4004904 <__divdf3+0x70c>
 40048c4:	00800434 	movhi	r2,16
 40048c8:	8c000234 	orhi	r16,r17,8
 40048cc:	10bfffc4 	addi	r2,r2,-1
 40048d0:	b809883a 	mov	r4,r23
 40048d4:	80a0703a 	and	r16,r16,r2
 40048d8:	a02b883a 	mov	r21,r20
 40048dc:	003f0806 	br	4004500 <__alt_data_end+0xfc004500>
 40048e0:	008000c4 	movi	r2,3
 40048e4:	3880b126 	beq	r7,r2,4004bac <__divdf3+0x9b4>
 40048e8:	00800044 	movi	r2,1
 40048ec:	38805b1e 	bne	r7,r2,4004a5c <__divdf3+0x864>
 40048f0:	e009883a 	mov	r4,fp
 40048f4:	0005883a 	mov	r2,zero
 40048f8:	0021883a 	mov	r16,zero
 40048fc:	002b883a 	mov	r21,zero
 4004900:	003e9c06 	br	4004374 <__alt_data_end+0xfc004374>
 4004904:	00800434 	movhi	r2,16
 4004908:	84000234 	orhi	r16,r16,8
 400490c:	10bfffc4 	addi	r2,r2,-1
 4004910:	b009883a 	mov	r4,r22
 4004914:	80a0703a 	and	r16,r16,r2
 4004918:	003ef906 	br	4004500 <__alt_data_end+0xfc004500>
 400491c:	103fca26 	beq	r2,zero,4004848 <__alt_data_end+0xfc004848>
 4004920:	b421883a 	add	r16,r22,r16
 4004924:	a17fffc4 	addi	r5,r20,-1
 4004928:	8580422e 	bgeu	r16,r22,4004a34 <__divdf3+0x83c>
 400492c:	2829883a 	mov	r20,r5
 4004930:	813fc41e 	bne	r16,r4,4004844 <__alt_data_end+0xfc004844>
 4004934:	d9800017 	ldw	r6,0(sp)
 4004938:	30bfc21e 	bne	r6,r2,4004844 <__alt_data_end+0xfc004844>
 400493c:	003fc206 	br	4004848 <__alt_data_end+0xfc004848>
 4004940:	143ff604 	addi	r16,r2,-40
 4004944:	8c20983a 	sll	r16,r17,r16
 4004948:	002b883a 	mov	r21,zero
 400494c:	003eb406 	br	4004420 <__alt_data_end+0xfc004420>
 4004950:	d9800215 	stw	r6,8(sp)
 4004954:	d9c00515 	stw	r7,20(sp)
 4004958:	da000415 	stw	r8,16(sp)
 400495c:	40063bc0 	call	40063bc <__clzsi2>
 4004960:	10800804 	addi	r2,r2,32
 4004964:	da000417 	ldw	r8,16(sp)
 4004968:	d9c00517 	ldw	r7,20(sp)
 400496c:	d9800217 	ldw	r6,8(sp)
 4004970:	003ea106 	br	40043f8 <__alt_data_end+0xfc0043f8>
 4004974:	147ff604 	addi	r17,r2,-40
 4004978:	3462983a 	sll	r17,r6,r17
 400497c:	0029883a 	mov	r20,zero
 4004980:	003ec906 	br	40044a8 <__alt_data_end+0xfc0044a8>
 4004984:	3009883a 	mov	r4,r6
 4004988:	d9400115 	stw	r5,4(sp)
 400498c:	d9800215 	stw	r6,8(sp)
 4004990:	da000415 	stw	r8,16(sp)
 4004994:	da400315 	stw	r9,12(sp)
 4004998:	40063bc0 	call	40063bc <__clzsi2>
 400499c:	10800804 	addi	r2,r2,32
 40049a0:	da400317 	ldw	r9,12(sp)
 40049a4:	da000417 	ldw	r8,16(sp)
 40049a8:	d9800217 	ldw	r6,8(sp)
 40049ac:	d9400117 	ldw	r5,4(sp)
 40049b0:	003eb306 	br	4004480 <__alt_data_end+0xfc004480>
 40049b4:	d9800017 	ldw	r6,0(sp)
 40049b8:	a9ab883a 	add	r21,r21,r6
 40049bc:	a98b803a 	cmpltu	r5,r21,r6
 40049c0:	2d8b883a 	add	r5,r5,r22
 40049c4:	2a11883a 	add	r8,r5,r8
 40049c8:	897fffc4 	addi	r5,r17,-1
 40049cc:	b2000c2e 	bgeu	r22,r8,4004a00 <__divdf3+0x808>
 40049d0:	41003f36 	bltu	r8,r4,4004ad0 <__divdf3+0x8d8>
 40049d4:	22006c26 	beq	r4,r8,4004b88 <__divdf3+0x990>
 40049d8:	4109c83a 	sub	r4,r8,r4
 40049dc:	2823883a 	mov	r17,r5
 40049e0:	003f3b06 	br	40046d0 <__alt_data_end+0xfc0046d0>
 40049e4:	ad3ed336 	bltu	r21,r20,4004534 <__alt_data_end+0xfc004534>
 40049e8:	a804d07a 	srli	r2,r21,1
 40049ec:	802e97fa 	slli	r23,r16,31
 40049f0:	a82a97fa 	slli	r21,r21,31
 40049f4:	8020d07a 	srli	r16,r16,1
 40049f8:	b8aeb03a 	or	r23,r23,r2
 40049fc:	003ed006 	br	4004540 <__alt_data_end+0xfc004540>
 4004a00:	b23ff51e 	bne	r22,r8,40049d8 <__alt_data_end+0xfc0049d8>
 4004a04:	d9800017 	ldw	r6,0(sp)
 4004a08:	a9bff12e 	bgeu	r21,r6,40049d0 <__alt_data_end+0xfc0049d0>
 4004a0c:	b109c83a 	sub	r4,r22,r4
 4004a10:	2823883a 	mov	r17,r5
 4004a14:	003f2e06 	br	40046d0 <__alt_data_end+0xfc0046d0>
 4004a18:	2021883a 	mov	r16,r4
 4004a1c:	003eff06 	br	400461c <__alt_data_end+0xfc00461c>
 4004a20:	2023883a 	mov	r17,r4
 4004a24:	003ee406 	br	40045b8 <__alt_data_end+0xfc0045b8>
 4004a28:	a8bfe236 	bltu	r21,r2,40049b4 <__alt_data_end+0xfc0049b4>
 4004a2c:	0009883a 	mov	r4,zero
 4004a30:	003f2706 	br	40046d0 <__alt_data_end+0xfc0046d0>
 4004a34:	81002d36 	bltu	r16,r4,4004aec <__divdf3+0x8f4>
 4004a38:	24005626 	beq	r4,r16,4004b94 <__divdf3+0x99c>
 4004a3c:	2829883a 	mov	r20,r5
 4004a40:	003f8006 	br	4004844 <__alt_data_end+0xfc004844>
 4004a44:	053fffc4 	movi	r20,-1
 4004a48:	003f7f06 	br	4004848 <__alt_data_end+0xfc004848>
 4004a4c:	200f883a 	mov	r7,r4
 4004a50:	003f3c06 	br	4004744 <__alt_data_end+0xfc004744>
 4004a54:	1011883a 	mov	r8,r2
 4004a58:	003f5506 	br	40047b0 <__alt_data_end+0xfc0047b0>
 4004a5c:	e027883a 	mov	r19,fp
 4004a60:	003f7906 	br	4004848 <__alt_data_end+0xfc004848>
 4004a64:	010007c4 	movi	r4,31
 4004a68:	20c02816 	blt	r4,r3,4004b0c <__divdf3+0x914>
 4004a6c:	00800804 	movi	r2,32
 4004a70:	10c5c83a 	sub	r2,r2,r3
 4004a74:	888a983a 	sll	r5,r17,r2
 4004a78:	a0c8d83a 	srl	r4,r20,r3
 4004a7c:	a084983a 	sll	r2,r20,r2
 4004a80:	88e2d83a 	srl	r17,r17,r3
 4004a84:	2906b03a 	or	r3,r5,r4
 4004a88:	1004c03a 	cmpne	r2,r2,zero
 4004a8c:	1886b03a 	or	r3,r3,r2
 4004a90:	188001cc 	andi	r2,r3,7
 4004a94:	10000726 	beq	r2,zero,4004ab4 <__divdf3+0x8bc>
 4004a98:	188003cc 	andi	r2,r3,15
 4004a9c:	01000104 	movi	r4,4
 4004aa0:	11000426 	beq	r2,r4,4004ab4 <__divdf3+0x8bc>
 4004aa4:	1805883a 	mov	r2,r3
 4004aa8:	10c00104 	addi	r3,r2,4
 4004aac:	1885803a 	cmpltu	r2,r3,r2
 4004ab0:	88a3883a 	add	r17,r17,r2
 4004ab4:	8880202c 	andhi	r2,r17,128
 4004ab8:	10002926 	beq	r2,zero,4004b60 <__divdf3+0x968>
 4004abc:	9900004c 	andi	r4,r19,1
 4004ac0:	00800044 	movi	r2,1
 4004ac4:	0021883a 	mov	r16,zero
 4004ac8:	002b883a 	mov	r21,zero
 4004acc:	003e2906 	br	4004374 <__alt_data_end+0xfc004374>
 4004ad0:	d9800017 	ldw	r6,0(sp)
 4004ad4:	8c7fff84 	addi	r17,r17,-2
 4004ad8:	a9ab883a 	add	r21,r21,r6
 4004adc:	a98b803a 	cmpltu	r5,r21,r6
 4004ae0:	2d8b883a 	add	r5,r5,r22
 4004ae4:	2a11883a 	add	r8,r5,r8
 4004ae8:	003ef806 	br	40046cc <__alt_data_end+0xfc0046cc>
 4004aec:	d9800017 	ldw	r6,0(sp)
 4004af0:	318f883a 	add	r7,r6,r6
 4004af4:	398b803a 	cmpltu	r5,r7,r6
 4004af8:	2d8d883a 	add	r6,r5,r22
 4004afc:	81a1883a 	add	r16,r16,r6
 4004b00:	a17fff84 	addi	r5,r20,-2
 4004b04:	d9c00015 	stw	r7,0(sp)
 4004b08:	003f8806 	br	400492c <__alt_data_end+0xfc00492c>
 4004b0c:	013ff844 	movi	r4,-31
 4004b10:	2085c83a 	sub	r2,r4,r2
 4004b14:	8888d83a 	srl	r4,r17,r2
 4004b18:	00800804 	movi	r2,32
 4004b1c:	18802126 	beq	r3,r2,4004ba4 <__divdf3+0x9ac>
 4004b20:	04001004 	movi	r16,64
 4004b24:	80c7c83a 	sub	r3,r16,r3
 4004b28:	88e0983a 	sll	r16,r17,r3
 4004b2c:	8504b03a 	or	r2,r16,r20
 4004b30:	1004c03a 	cmpne	r2,r2,zero
 4004b34:	2084b03a 	or	r2,r4,r2
 4004b38:	144001cc 	andi	r17,r2,7
 4004b3c:	88000d1e 	bne	r17,zero,4004b74 <__divdf3+0x97c>
 4004b40:	0021883a 	mov	r16,zero
 4004b44:	102ad0fa 	srli	r21,r2,3
 4004b48:	9900004c 	andi	r4,r19,1
 4004b4c:	0005883a 	mov	r2,zero
 4004b50:	ac6ab03a 	or	r21,r21,r17
 4004b54:	003e0706 	br	4004374 <__alt_data_end+0xfc004374>
 4004b58:	1007883a 	mov	r3,r2
 4004b5c:	0023883a 	mov	r17,zero
 4004b60:	8820927a 	slli	r16,r17,9
 4004b64:	1805883a 	mov	r2,r3
 4004b68:	8822977a 	slli	r17,r17,29
 4004b6c:	8020d33a 	srli	r16,r16,12
 4004b70:	003ff406 	br	4004b44 <__alt_data_end+0xfc004b44>
 4004b74:	10c003cc 	andi	r3,r2,15
 4004b78:	01000104 	movi	r4,4
 4004b7c:	193ff626 	beq	r3,r4,4004b58 <__alt_data_end+0xfc004b58>
 4004b80:	0023883a 	mov	r17,zero
 4004b84:	003fc806 	br	4004aa8 <__alt_data_end+0xfc004aa8>
 4004b88:	a8bfd136 	bltu	r21,r2,4004ad0 <__alt_data_end+0xfc004ad0>
 4004b8c:	2823883a 	mov	r17,r5
 4004b90:	003fa606 	br	4004a2c <__alt_data_end+0xfc004a2c>
 4004b94:	d9800017 	ldw	r6,0(sp)
 4004b98:	30bfd436 	bltu	r6,r2,4004aec <__alt_data_end+0xfc004aec>
 4004b9c:	2829883a 	mov	r20,r5
 4004ba0:	003f6406 	br	4004934 <__alt_data_end+0xfc004934>
 4004ba4:	0021883a 	mov	r16,zero
 4004ba8:	003fe006 	br	4004b2c <__alt_data_end+0xfc004b2c>
 4004bac:	00800434 	movhi	r2,16
 4004bb0:	8c000234 	orhi	r16,r17,8
 4004bb4:	10bfffc4 	addi	r2,r2,-1
 4004bb8:	e009883a 	mov	r4,fp
 4004bbc:	80a0703a 	and	r16,r16,r2
 4004bc0:	a02b883a 	mov	r21,r20
 4004bc4:	003e4e06 	br	4004500 <__alt_data_end+0xfc004500>

04004bc8 <__gedf2>:
 4004bc8:	2804d53a 	srli	r2,r5,20
 4004bcc:	3806d53a 	srli	r3,r7,20
 4004bd0:	02000434 	movhi	r8,16
 4004bd4:	423fffc4 	addi	r8,r8,-1
 4004bd8:	1081ffcc 	andi	r2,r2,2047
 4004bdc:	0241ffc4 	movi	r9,2047
 4004be0:	2a14703a 	and	r10,r5,r8
 4004be4:	18c1ffcc 	andi	r3,r3,2047
 4004be8:	3a10703a 	and	r8,r7,r8
 4004bec:	280ad7fa 	srli	r5,r5,31
 4004bf0:	380ed7fa 	srli	r7,r7,31
 4004bf4:	12401d26 	beq	r2,r9,4004c6c <__gedf2+0xa4>
 4004bf8:	0241ffc4 	movi	r9,2047
 4004bfc:	1a401226 	beq	r3,r9,4004c48 <__gedf2+0x80>
 4004c00:	1000081e 	bne	r2,zero,4004c24 <__gedf2+0x5c>
 4004c04:	2296b03a 	or	r11,r4,r10
 4004c08:	5813003a 	cmpeq	r9,r11,zero
 4004c0c:	1800091e 	bne	r3,zero,4004c34 <__gedf2+0x6c>
 4004c10:	3218b03a 	or	r12,r6,r8
 4004c14:	6000071e 	bne	r12,zero,4004c34 <__gedf2+0x6c>
 4004c18:	0005883a 	mov	r2,zero
 4004c1c:	5800101e 	bne	r11,zero,4004c60 <__gedf2+0x98>
 4004c20:	f800283a 	ret
 4004c24:	18000c1e 	bne	r3,zero,4004c58 <__gedf2+0x90>
 4004c28:	3212b03a 	or	r9,r6,r8
 4004c2c:	48000c26 	beq	r9,zero,4004c60 <__gedf2+0x98>
 4004c30:	0013883a 	mov	r9,zero
 4004c34:	39c03fcc 	andi	r7,r7,255
 4004c38:	48000826 	beq	r9,zero,4004c5c <__gedf2+0x94>
 4004c3c:	38000926 	beq	r7,zero,4004c64 <__gedf2+0x9c>
 4004c40:	00800044 	movi	r2,1
 4004c44:	f800283a 	ret
 4004c48:	3212b03a 	or	r9,r6,r8
 4004c4c:	483fec26 	beq	r9,zero,4004c00 <__alt_data_end+0xfc004c00>
 4004c50:	00bfff84 	movi	r2,-2
 4004c54:	f800283a 	ret
 4004c58:	39c03fcc 	andi	r7,r7,255
 4004c5c:	29c00626 	beq	r5,r7,4004c78 <__gedf2+0xb0>
 4004c60:	283ff726 	beq	r5,zero,4004c40 <__alt_data_end+0xfc004c40>
 4004c64:	00bfffc4 	movi	r2,-1
 4004c68:	f800283a 	ret
 4004c6c:	2292b03a 	or	r9,r4,r10
 4004c70:	483fe126 	beq	r9,zero,4004bf8 <__alt_data_end+0xfc004bf8>
 4004c74:	003ff606 	br	4004c50 <__alt_data_end+0xfc004c50>
 4004c78:	18bff916 	blt	r3,r2,4004c60 <__alt_data_end+0xfc004c60>
 4004c7c:	10c00316 	blt	r2,r3,4004c8c <__gedf2+0xc4>
 4004c80:	42bff736 	bltu	r8,r10,4004c60 <__alt_data_end+0xfc004c60>
 4004c84:	52000326 	beq	r10,r8,4004c94 <__gedf2+0xcc>
 4004c88:	5200042e 	bgeu	r10,r8,4004c9c <__gedf2+0xd4>
 4004c8c:	283fec1e 	bne	r5,zero,4004c40 <__alt_data_end+0xfc004c40>
 4004c90:	003ff406 	br	4004c64 <__alt_data_end+0xfc004c64>
 4004c94:	313ff236 	bltu	r6,r4,4004c60 <__alt_data_end+0xfc004c60>
 4004c98:	21bffc36 	bltu	r4,r6,4004c8c <__alt_data_end+0xfc004c8c>
 4004c9c:	0005883a 	mov	r2,zero
 4004ca0:	f800283a 	ret

04004ca4 <__ledf2>:
 4004ca4:	2804d53a 	srli	r2,r5,20
 4004ca8:	3810d53a 	srli	r8,r7,20
 4004cac:	00c00434 	movhi	r3,16
 4004cb0:	18ffffc4 	addi	r3,r3,-1
 4004cb4:	1081ffcc 	andi	r2,r2,2047
 4004cb8:	0241ffc4 	movi	r9,2047
 4004cbc:	28d4703a 	and	r10,r5,r3
 4004cc0:	4201ffcc 	andi	r8,r8,2047
 4004cc4:	38c6703a 	and	r3,r7,r3
 4004cc8:	280ad7fa 	srli	r5,r5,31
 4004ccc:	380ed7fa 	srli	r7,r7,31
 4004cd0:	12401f26 	beq	r2,r9,4004d50 <__ledf2+0xac>
 4004cd4:	0241ffc4 	movi	r9,2047
 4004cd8:	42401426 	beq	r8,r9,4004d2c <__ledf2+0x88>
 4004cdc:	1000091e 	bne	r2,zero,4004d04 <__ledf2+0x60>
 4004ce0:	2296b03a 	or	r11,r4,r10
 4004ce4:	5813003a 	cmpeq	r9,r11,zero
 4004ce8:	29403fcc 	andi	r5,r5,255
 4004cec:	40000a1e 	bne	r8,zero,4004d18 <__ledf2+0x74>
 4004cf0:	30d8b03a 	or	r12,r6,r3
 4004cf4:	6000081e 	bne	r12,zero,4004d18 <__ledf2+0x74>
 4004cf8:	0005883a 	mov	r2,zero
 4004cfc:	5800111e 	bne	r11,zero,4004d44 <__ledf2+0xa0>
 4004d00:	f800283a 	ret
 4004d04:	29403fcc 	andi	r5,r5,255
 4004d08:	40000c1e 	bne	r8,zero,4004d3c <__ledf2+0x98>
 4004d0c:	30d2b03a 	or	r9,r6,r3
 4004d10:	48000c26 	beq	r9,zero,4004d44 <__ledf2+0xa0>
 4004d14:	0013883a 	mov	r9,zero
 4004d18:	39c03fcc 	andi	r7,r7,255
 4004d1c:	48000826 	beq	r9,zero,4004d40 <__ledf2+0x9c>
 4004d20:	38001126 	beq	r7,zero,4004d68 <__ledf2+0xc4>
 4004d24:	00800044 	movi	r2,1
 4004d28:	f800283a 	ret
 4004d2c:	30d2b03a 	or	r9,r6,r3
 4004d30:	483fea26 	beq	r9,zero,4004cdc <__alt_data_end+0xfc004cdc>
 4004d34:	00800084 	movi	r2,2
 4004d38:	f800283a 	ret
 4004d3c:	39c03fcc 	andi	r7,r7,255
 4004d40:	39400726 	beq	r7,r5,4004d60 <__ledf2+0xbc>
 4004d44:	2800081e 	bne	r5,zero,4004d68 <__ledf2+0xc4>
 4004d48:	00800044 	movi	r2,1
 4004d4c:	f800283a 	ret
 4004d50:	2292b03a 	or	r9,r4,r10
 4004d54:	483fdf26 	beq	r9,zero,4004cd4 <__alt_data_end+0xfc004cd4>
 4004d58:	00800084 	movi	r2,2
 4004d5c:	f800283a 	ret
 4004d60:	4080030e 	bge	r8,r2,4004d70 <__ledf2+0xcc>
 4004d64:	383fef26 	beq	r7,zero,4004d24 <__alt_data_end+0xfc004d24>
 4004d68:	00bfffc4 	movi	r2,-1
 4004d6c:	f800283a 	ret
 4004d70:	123feb16 	blt	r2,r8,4004d20 <__alt_data_end+0xfc004d20>
 4004d74:	1abff336 	bltu	r3,r10,4004d44 <__alt_data_end+0xfc004d44>
 4004d78:	50c00326 	beq	r10,r3,4004d88 <__ledf2+0xe4>
 4004d7c:	50c0042e 	bgeu	r10,r3,4004d90 <__ledf2+0xec>
 4004d80:	283fe81e 	bne	r5,zero,4004d24 <__alt_data_end+0xfc004d24>
 4004d84:	003ff806 	br	4004d68 <__alt_data_end+0xfc004d68>
 4004d88:	313fee36 	bltu	r6,r4,4004d44 <__alt_data_end+0xfc004d44>
 4004d8c:	21bffc36 	bltu	r4,r6,4004d80 <__alt_data_end+0xfc004d80>
 4004d90:	0005883a 	mov	r2,zero
 4004d94:	f800283a 	ret

04004d98 <__muldf3>:
 4004d98:	deffee04 	addi	sp,sp,-72
 4004d9c:	dd000c15 	stw	r20,48(sp)
 4004da0:	2828d53a 	srli	r20,r5,20
 4004da4:	ddc00f15 	stw	r23,60(sp)
 4004da8:	282ed7fa 	srli	r23,r5,31
 4004dac:	dc000815 	stw	r16,32(sp)
 4004db0:	04000434 	movhi	r16,16
 4004db4:	dcc00b15 	stw	r19,44(sp)
 4004db8:	843fffc4 	addi	r16,r16,-1
 4004dbc:	dfc01115 	stw	ra,68(sp)
 4004dc0:	df001015 	stw	fp,64(sp)
 4004dc4:	dd800e15 	stw	r22,56(sp)
 4004dc8:	dd400d15 	stw	r21,52(sp)
 4004dcc:	dc800a15 	stw	r18,40(sp)
 4004dd0:	dc400915 	stw	r17,36(sp)
 4004dd4:	a501ffcc 	andi	r20,r20,2047
 4004dd8:	2c20703a 	and	r16,r5,r16
 4004ddc:	b827883a 	mov	r19,r23
 4004de0:	ba403fcc 	andi	r9,r23,255
 4004de4:	a0006026 	beq	r20,zero,4004f68 <__muldf3+0x1d0>
 4004de8:	0081ffc4 	movi	r2,2047
 4004dec:	202d883a 	mov	r22,r4
 4004df0:	a0803626 	beq	r20,r2,4004ecc <__muldf3+0x134>
 4004df4:	84000434 	orhi	r16,r16,16
 4004df8:	200ad77a 	srli	r5,r4,29
 4004dfc:	800490fa 	slli	r2,r16,3
 4004e00:	202c90fa 	slli	r22,r4,3
 4004e04:	a53f0044 	addi	r20,r20,-1023
 4004e08:	28a0b03a 	or	r16,r5,r2
 4004e0c:	002b883a 	mov	r21,zero
 4004e10:	000b883a 	mov	r5,zero
 4004e14:	3804d53a 	srli	r2,r7,20
 4004e18:	3838d7fa 	srli	fp,r7,31
 4004e1c:	04400434 	movhi	r17,16
 4004e20:	8c7fffc4 	addi	r17,r17,-1
 4004e24:	1081ffcc 	andi	r2,r2,2047
 4004e28:	3025883a 	mov	r18,r6
 4004e2c:	3c62703a 	and	r17,r7,r17
 4004e30:	e2803fcc 	andi	r10,fp,255
 4004e34:	10006d26 	beq	r2,zero,4004fec <__muldf3+0x254>
 4004e38:	00c1ffc4 	movi	r3,2047
 4004e3c:	10c06526 	beq	r2,r3,4004fd4 <__muldf3+0x23c>
 4004e40:	8c400434 	orhi	r17,r17,16
 4004e44:	300ed77a 	srli	r7,r6,29
 4004e48:	880690fa 	slli	r3,r17,3
 4004e4c:	302490fa 	slli	r18,r6,3
 4004e50:	10bf0044 	addi	r2,r2,-1023
 4004e54:	38e2b03a 	or	r17,r7,r3
 4004e58:	000f883a 	mov	r7,zero
 4004e5c:	a087883a 	add	r3,r20,r2
 4004e60:	010003c4 	movi	r4,15
 4004e64:	3d44b03a 	or	r2,r7,r21
 4004e68:	e5ccf03a 	xor	r6,fp,r23
 4004e6c:	1a000044 	addi	r8,r3,1
 4004e70:	20809b36 	bltu	r4,r2,40050e0 <__muldf3+0x348>
 4004e74:	100490ba 	slli	r2,r2,2
 4004e78:	01010034 	movhi	r4,1024
 4004e7c:	2113a304 	addi	r4,r4,20108
 4004e80:	1105883a 	add	r2,r2,r4
 4004e84:	10800017 	ldw	r2,0(r2)
 4004e88:	1000683a 	jmp	r2
 4004e8c:	040050e0 	cmpeqi	r16,zero,323
 4004e90:	04004eec 	andhi	r16,zero,315
 4004e94:	04004eec 	andhi	r16,zero,315
 4004e98:	04004ee8 	cmpgeui	r16,zero,315
 4004e9c:	040050bc 	xorhi	r16,zero,322
 4004ea0:	040050bc 	xorhi	r16,zero,322
 4004ea4:	040050a4 	muli	r16,zero,322
 4004ea8:	04004ee8 	cmpgeui	r16,zero,315
 4004eac:	040050bc 	xorhi	r16,zero,322
 4004eb0:	040050a4 	muli	r16,zero,322
 4004eb4:	040050bc 	xorhi	r16,zero,322
 4004eb8:	04004ee8 	cmpgeui	r16,zero,315
 4004ebc:	040050cc 	andi	r16,zero,323
 4004ec0:	040050cc 	andi	r16,zero,323
 4004ec4:	040050cc 	andi	r16,zero,323
 4004ec8:	0400542c 	andhi	r16,zero,336
 4004ecc:	2404b03a 	or	r2,r4,r16
 4004ed0:	1000711e 	bne	r2,zero,4005098 <__muldf3+0x300>
 4004ed4:	05400204 	movi	r21,8
 4004ed8:	0021883a 	mov	r16,zero
 4004edc:	002d883a 	mov	r22,zero
 4004ee0:	01400084 	movi	r5,2
 4004ee4:	003fcb06 	br	4004e14 <__alt_data_end+0xfc004e14>
 4004ee8:	500d883a 	mov	r6,r10
 4004eec:	00800084 	movi	r2,2
 4004ef0:	38805926 	beq	r7,r2,4005058 <__muldf3+0x2c0>
 4004ef4:	008000c4 	movi	r2,3
 4004ef8:	3881bb26 	beq	r7,r2,40055e8 <__muldf3+0x850>
 4004efc:	00800044 	movi	r2,1
 4004f00:	3881961e 	bne	r7,r2,400555c <__muldf3+0x7c4>
 4004f04:	3027883a 	mov	r19,r6
 4004f08:	0005883a 	mov	r2,zero
 4004f0c:	0021883a 	mov	r16,zero
 4004f10:	002d883a 	mov	r22,zero
 4004f14:	1004953a 	slli	r2,r2,20
 4004f18:	98c03fcc 	andi	r3,r19,255
 4004f1c:	04400434 	movhi	r17,16
 4004f20:	8c7fffc4 	addi	r17,r17,-1
 4004f24:	180697fa 	slli	r3,r3,31
 4004f28:	8460703a 	and	r16,r16,r17
 4004f2c:	80a0b03a 	or	r16,r16,r2
 4004f30:	80c6b03a 	or	r3,r16,r3
 4004f34:	b005883a 	mov	r2,r22
 4004f38:	dfc01117 	ldw	ra,68(sp)
 4004f3c:	df001017 	ldw	fp,64(sp)
 4004f40:	ddc00f17 	ldw	r23,60(sp)
 4004f44:	dd800e17 	ldw	r22,56(sp)
 4004f48:	dd400d17 	ldw	r21,52(sp)
 4004f4c:	dd000c17 	ldw	r20,48(sp)
 4004f50:	dcc00b17 	ldw	r19,44(sp)
 4004f54:	dc800a17 	ldw	r18,40(sp)
 4004f58:	dc400917 	ldw	r17,36(sp)
 4004f5c:	dc000817 	ldw	r16,32(sp)
 4004f60:	dec01204 	addi	sp,sp,72
 4004f64:	f800283a 	ret
 4004f68:	2404b03a 	or	r2,r4,r16
 4004f6c:	202b883a 	mov	r21,r4
 4004f70:	10004426 	beq	r2,zero,4005084 <__muldf3+0x2ec>
 4004f74:	80015126 	beq	r16,zero,40054bc <__muldf3+0x724>
 4004f78:	8009883a 	mov	r4,r16
 4004f7c:	d9800715 	stw	r6,28(sp)
 4004f80:	d9c00215 	stw	r7,8(sp)
 4004f84:	da400415 	stw	r9,16(sp)
 4004f88:	40063bc0 	call	40063bc <__clzsi2>
 4004f8c:	d9800717 	ldw	r6,28(sp)
 4004f90:	d9c00217 	ldw	r7,8(sp)
 4004f94:	da400417 	ldw	r9,16(sp)
 4004f98:	113ffd44 	addi	r4,r2,-11
 4004f9c:	00c00704 	movi	r3,28
 4004fa0:	19014216 	blt	r3,r4,40054ac <__muldf3+0x714>
 4004fa4:	00c00744 	movi	r3,29
 4004fa8:	15bffe04 	addi	r22,r2,-8
 4004fac:	1907c83a 	sub	r3,r3,r4
 4004fb0:	85a0983a 	sll	r16,r16,r22
 4004fb4:	a8c6d83a 	srl	r3,r21,r3
 4004fb8:	adac983a 	sll	r22,r21,r22
 4004fbc:	1c20b03a 	or	r16,r3,r16
 4004fc0:	1080fcc4 	addi	r2,r2,1011
 4004fc4:	00a9c83a 	sub	r20,zero,r2
 4004fc8:	002b883a 	mov	r21,zero
 4004fcc:	000b883a 	mov	r5,zero
 4004fd0:	003f9006 	br	4004e14 <__alt_data_end+0xfc004e14>
 4004fd4:	3446b03a 	or	r3,r6,r17
 4004fd8:	1800281e 	bne	r3,zero,400507c <__muldf3+0x2e4>
 4004fdc:	0023883a 	mov	r17,zero
 4004fe0:	0025883a 	mov	r18,zero
 4004fe4:	01c00084 	movi	r7,2
 4004fe8:	003f9c06 	br	4004e5c <__alt_data_end+0xfc004e5c>
 4004fec:	3446b03a 	or	r3,r6,r17
 4004ff0:	18001e26 	beq	r3,zero,400506c <__muldf3+0x2d4>
 4004ff4:	88012126 	beq	r17,zero,400547c <__muldf3+0x6e4>
 4004ff8:	8809883a 	mov	r4,r17
 4004ffc:	d9400215 	stw	r5,8(sp)
 4005000:	d9800715 	stw	r6,28(sp)
 4005004:	da400415 	stw	r9,16(sp)
 4005008:	da800315 	stw	r10,12(sp)
 400500c:	40063bc0 	call	40063bc <__clzsi2>
 4005010:	d9400217 	ldw	r5,8(sp)
 4005014:	d9800717 	ldw	r6,28(sp)
 4005018:	da400417 	ldw	r9,16(sp)
 400501c:	da800317 	ldw	r10,12(sp)
 4005020:	113ffd44 	addi	r4,r2,-11
 4005024:	00c00704 	movi	r3,28
 4005028:	19011016 	blt	r3,r4,400546c <__muldf3+0x6d4>
 400502c:	00c00744 	movi	r3,29
 4005030:	14bffe04 	addi	r18,r2,-8
 4005034:	1907c83a 	sub	r3,r3,r4
 4005038:	8ca2983a 	sll	r17,r17,r18
 400503c:	30c6d83a 	srl	r3,r6,r3
 4005040:	34a4983a 	sll	r18,r6,r18
 4005044:	1c62b03a 	or	r17,r3,r17
 4005048:	1080fcc4 	addi	r2,r2,1011
 400504c:	0085c83a 	sub	r2,zero,r2
 4005050:	000f883a 	mov	r7,zero
 4005054:	003f8106 	br	4004e5c <__alt_data_end+0xfc004e5c>
 4005058:	3027883a 	mov	r19,r6
 400505c:	0081ffc4 	movi	r2,2047
 4005060:	0021883a 	mov	r16,zero
 4005064:	002d883a 	mov	r22,zero
 4005068:	003faa06 	br	4004f14 <__alt_data_end+0xfc004f14>
 400506c:	0023883a 	mov	r17,zero
 4005070:	0025883a 	mov	r18,zero
 4005074:	01c00044 	movi	r7,1
 4005078:	003f7806 	br	4004e5c <__alt_data_end+0xfc004e5c>
 400507c:	01c000c4 	movi	r7,3
 4005080:	003f7606 	br	4004e5c <__alt_data_end+0xfc004e5c>
 4005084:	05400104 	movi	r21,4
 4005088:	0021883a 	mov	r16,zero
 400508c:	002d883a 	mov	r22,zero
 4005090:	01400044 	movi	r5,1
 4005094:	003f5f06 	br	4004e14 <__alt_data_end+0xfc004e14>
 4005098:	05400304 	movi	r21,12
 400509c:	014000c4 	movi	r5,3
 40050a0:	003f5c06 	br	4004e14 <__alt_data_end+0xfc004e14>
 40050a4:	04000434 	movhi	r16,16
 40050a8:	0027883a 	mov	r19,zero
 40050ac:	843fffc4 	addi	r16,r16,-1
 40050b0:	05bfffc4 	movi	r22,-1
 40050b4:	0081ffc4 	movi	r2,2047
 40050b8:	003f9606 	br	4004f14 <__alt_data_end+0xfc004f14>
 40050bc:	8023883a 	mov	r17,r16
 40050c0:	b025883a 	mov	r18,r22
 40050c4:	280f883a 	mov	r7,r5
 40050c8:	003f8806 	br	4004eec <__alt_data_end+0xfc004eec>
 40050cc:	8023883a 	mov	r17,r16
 40050d0:	b025883a 	mov	r18,r22
 40050d4:	480d883a 	mov	r6,r9
 40050d8:	280f883a 	mov	r7,r5
 40050dc:	003f8306 	br	4004eec <__alt_data_end+0xfc004eec>
 40050e0:	b026d43a 	srli	r19,r22,16
 40050e4:	902ed43a 	srli	r23,r18,16
 40050e8:	b5bfffcc 	andi	r22,r22,65535
 40050ec:	94bfffcc 	andi	r18,r18,65535
 40050f0:	b00b883a 	mov	r5,r22
 40050f4:	9009883a 	mov	r4,r18
 40050f8:	d8c00515 	stw	r3,20(sp)
 40050fc:	d9800715 	stw	r6,28(sp)
 4005100:	da000615 	stw	r8,24(sp)
 4005104:	40024600 	call	4002460 <__mulsi3>
 4005108:	980b883a 	mov	r5,r19
 400510c:	9009883a 	mov	r4,r18
 4005110:	1029883a 	mov	r20,r2
 4005114:	40024600 	call	4002460 <__mulsi3>
 4005118:	b80b883a 	mov	r5,r23
 400511c:	9809883a 	mov	r4,r19
 4005120:	102b883a 	mov	r21,r2
 4005124:	40024600 	call	4002460 <__mulsi3>
 4005128:	b809883a 	mov	r4,r23
 400512c:	b00b883a 	mov	r5,r22
 4005130:	1039883a 	mov	fp,r2
 4005134:	40024600 	call	4002460 <__mulsi3>
 4005138:	a008d43a 	srli	r4,r20,16
 400513c:	1545883a 	add	r2,r2,r21
 4005140:	d8c00517 	ldw	r3,20(sp)
 4005144:	2085883a 	add	r2,r4,r2
 4005148:	d9800717 	ldw	r6,28(sp)
 400514c:	da000617 	ldw	r8,24(sp)
 4005150:	1540022e 	bgeu	r2,r21,400515c <__muldf3+0x3c4>
 4005154:	01000074 	movhi	r4,1
 4005158:	e139883a 	add	fp,fp,r4
 400515c:	100e943a 	slli	r7,r2,16
 4005160:	1004d43a 	srli	r2,r2,16
 4005164:	882ad43a 	srli	r21,r17,16
 4005168:	a53fffcc 	andi	r20,r20,65535
 400516c:	8c7fffcc 	andi	r17,r17,65535
 4005170:	3d29883a 	add	r20,r7,r20
 4005174:	b00b883a 	mov	r5,r22
 4005178:	8809883a 	mov	r4,r17
 400517c:	d8c00515 	stw	r3,20(sp)
 4005180:	d9800715 	stw	r6,28(sp)
 4005184:	da000615 	stw	r8,24(sp)
 4005188:	dd000115 	stw	r20,4(sp)
 400518c:	d8800015 	stw	r2,0(sp)
 4005190:	40024600 	call	4002460 <__mulsi3>
 4005194:	980b883a 	mov	r5,r19
 4005198:	8809883a 	mov	r4,r17
 400519c:	d8800215 	stw	r2,8(sp)
 40051a0:	40024600 	call	4002460 <__mulsi3>
 40051a4:	9809883a 	mov	r4,r19
 40051a8:	a80b883a 	mov	r5,r21
 40051ac:	1029883a 	mov	r20,r2
 40051b0:	40024600 	call	4002460 <__mulsi3>
 40051b4:	b00b883a 	mov	r5,r22
 40051b8:	a809883a 	mov	r4,r21
 40051bc:	d8800415 	stw	r2,16(sp)
 40051c0:	40024600 	call	4002460 <__mulsi3>
 40051c4:	d9c00217 	ldw	r7,8(sp)
 40051c8:	1505883a 	add	r2,r2,r20
 40051cc:	d8c00517 	ldw	r3,20(sp)
 40051d0:	3826d43a 	srli	r19,r7,16
 40051d4:	d9800717 	ldw	r6,28(sp)
 40051d8:	da000617 	ldw	r8,24(sp)
 40051dc:	9885883a 	add	r2,r19,r2
 40051e0:	da400417 	ldw	r9,16(sp)
 40051e4:	1500022e 	bgeu	r2,r20,40051f0 <__muldf3+0x458>
 40051e8:	01000074 	movhi	r4,1
 40051ec:	4913883a 	add	r9,r9,r4
 40051f0:	1028d43a 	srli	r20,r2,16
 40051f4:	1004943a 	slli	r2,r2,16
 40051f8:	802cd43a 	srli	r22,r16,16
 40051fc:	843fffcc 	andi	r16,r16,65535
 4005200:	3cffffcc 	andi	r19,r7,65535
 4005204:	9009883a 	mov	r4,r18
 4005208:	800b883a 	mov	r5,r16
 400520c:	a269883a 	add	r20,r20,r9
 4005210:	d8c00515 	stw	r3,20(sp)
 4005214:	d9800715 	stw	r6,28(sp)
 4005218:	da000615 	stw	r8,24(sp)
 400521c:	14e7883a 	add	r19,r2,r19
 4005220:	40024600 	call	4002460 <__mulsi3>
 4005224:	9009883a 	mov	r4,r18
 4005228:	b00b883a 	mov	r5,r22
 400522c:	d8800315 	stw	r2,12(sp)
 4005230:	40024600 	call	4002460 <__mulsi3>
 4005234:	b809883a 	mov	r4,r23
 4005238:	b00b883a 	mov	r5,r22
 400523c:	d8800215 	stw	r2,8(sp)
 4005240:	40024600 	call	4002460 <__mulsi3>
 4005244:	b80b883a 	mov	r5,r23
 4005248:	8009883a 	mov	r4,r16
 400524c:	d8800415 	stw	r2,16(sp)
 4005250:	40024600 	call	4002460 <__mulsi3>
 4005254:	da800317 	ldw	r10,12(sp)
 4005258:	d9c00217 	ldw	r7,8(sp)
 400525c:	d9000017 	ldw	r4,0(sp)
 4005260:	502ed43a 	srli	r23,r10,16
 4005264:	11c5883a 	add	r2,r2,r7
 4005268:	24e5883a 	add	r18,r4,r19
 400526c:	b885883a 	add	r2,r23,r2
 4005270:	d8c00517 	ldw	r3,20(sp)
 4005274:	d9800717 	ldw	r6,28(sp)
 4005278:	da000617 	ldw	r8,24(sp)
 400527c:	da400417 	ldw	r9,16(sp)
 4005280:	11c0022e 	bgeu	r2,r7,400528c <__muldf3+0x4f4>
 4005284:	01000074 	movhi	r4,1
 4005288:	4913883a 	add	r9,r9,r4
 400528c:	100ed43a 	srli	r7,r2,16
 4005290:	1004943a 	slli	r2,r2,16
 4005294:	55ffffcc 	andi	r23,r10,65535
 4005298:	3a53883a 	add	r9,r7,r9
 400529c:	8809883a 	mov	r4,r17
 40052a0:	800b883a 	mov	r5,r16
 40052a4:	d8c00515 	stw	r3,20(sp)
 40052a8:	d9800715 	stw	r6,28(sp)
 40052ac:	da000615 	stw	r8,24(sp)
 40052b0:	da400415 	stw	r9,16(sp)
 40052b4:	15ef883a 	add	r23,r2,r23
 40052b8:	40024600 	call	4002460 <__mulsi3>
 40052bc:	8809883a 	mov	r4,r17
 40052c0:	b00b883a 	mov	r5,r22
 40052c4:	d8800215 	stw	r2,8(sp)
 40052c8:	40024600 	call	4002460 <__mulsi3>
 40052cc:	b00b883a 	mov	r5,r22
 40052d0:	a809883a 	mov	r4,r21
 40052d4:	d8800315 	stw	r2,12(sp)
 40052d8:	40024600 	call	4002460 <__mulsi3>
 40052dc:	8009883a 	mov	r4,r16
 40052e0:	a80b883a 	mov	r5,r21
 40052e4:	1023883a 	mov	r17,r2
 40052e8:	40024600 	call	4002460 <__mulsi3>
 40052ec:	d9c00217 	ldw	r7,8(sp)
 40052f0:	da800317 	ldw	r10,12(sp)
 40052f4:	d8c00517 	ldw	r3,20(sp)
 40052f8:	3808d43a 	srli	r4,r7,16
 40052fc:	1285883a 	add	r2,r2,r10
 4005300:	d9800717 	ldw	r6,28(sp)
 4005304:	2085883a 	add	r2,r4,r2
 4005308:	da000617 	ldw	r8,24(sp)
 400530c:	da400417 	ldw	r9,16(sp)
 4005310:	1280022e 	bgeu	r2,r10,400531c <__muldf3+0x584>
 4005314:	01000074 	movhi	r4,1
 4005318:	8923883a 	add	r17,r17,r4
 400531c:	1008943a 	slli	r4,r2,16
 4005320:	39ffffcc 	andi	r7,r7,65535
 4005324:	e4b9883a 	add	fp,fp,r18
 4005328:	21cf883a 	add	r7,r4,r7
 400532c:	e4e7803a 	cmpltu	r19,fp,r19
 4005330:	3d0f883a 	add	r7,r7,r20
 4005334:	bf39883a 	add	fp,r23,fp
 4005338:	99c9883a 	add	r4,r19,r7
 400533c:	e5ef803a 	cmpltu	r23,fp,r23
 4005340:	490b883a 	add	r5,r9,r4
 4005344:	1004d43a 	srli	r2,r2,16
 4005348:	b965883a 	add	r18,r23,r5
 400534c:	24c9803a 	cmpltu	r4,r4,r19
 4005350:	3d29803a 	cmpltu	r20,r7,r20
 4005354:	a128b03a 	or	r20,r20,r4
 4005358:	95ef803a 	cmpltu	r23,r18,r23
 400535c:	2a53803a 	cmpltu	r9,r5,r9
 4005360:	a0a9883a 	add	r20,r20,r2
 4005364:	4deeb03a 	or	r23,r9,r23
 4005368:	a5ef883a 	add	r23,r20,r23
 400536c:	bc63883a 	add	r17,r23,r17
 4005370:	e004927a 	slli	r2,fp,9
 4005374:	d9000117 	ldw	r4,4(sp)
 4005378:	882e927a 	slli	r23,r17,9
 400537c:	9022d5fa 	srli	r17,r18,23
 4005380:	e038d5fa 	srli	fp,fp,23
 4005384:	1104b03a 	or	r2,r2,r4
 4005388:	9024927a 	slli	r18,r18,9
 400538c:	1004c03a 	cmpne	r2,r2,zero
 4005390:	bc62b03a 	or	r17,r23,r17
 4005394:	1738b03a 	or	fp,r2,fp
 4005398:	8880402c 	andhi	r2,r17,256
 400539c:	e4a4b03a 	or	r18,fp,r18
 40053a0:	10000726 	beq	r2,zero,40053c0 <__muldf3+0x628>
 40053a4:	9006d07a 	srli	r3,r18,1
 40053a8:	880497fa 	slli	r2,r17,31
 40053ac:	9480004c 	andi	r18,r18,1
 40053b0:	8822d07a 	srli	r17,r17,1
 40053b4:	1ca4b03a 	or	r18,r3,r18
 40053b8:	14a4b03a 	or	r18,r2,r18
 40053bc:	4007883a 	mov	r3,r8
 40053c0:	1880ffc4 	addi	r2,r3,1023
 40053c4:	0080460e 	bge	zero,r2,40054e0 <__muldf3+0x748>
 40053c8:	910001cc 	andi	r4,r18,7
 40053cc:	20000726 	beq	r4,zero,40053ec <__muldf3+0x654>
 40053d0:	910003cc 	andi	r4,r18,15
 40053d4:	01400104 	movi	r5,4
 40053d8:	21400426 	beq	r4,r5,40053ec <__muldf3+0x654>
 40053dc:	9149883a 	add	r4,r18,r5
 40053e0:	24a5803a 	cmpltu	r18,r4,r18
 40053e4:	8ca3883a 	add	r17,r17,r18
 40053e8:	2025883a 	mov	r18,r4
 40053ec:	8900402c 	andhi	r4,r17,256
 40053f0:	20000426 	beq	r4,zero,4005404 <__muldf3+0x66c>
 40053f4:	18810004 	addi	r2,r3,1024
 40053f8:	00ffc034 	movhi	r3,65280
 40053fc:	18ffffc4 	addi	r3,r3,-1
 4005400:	88e2703a 	and	r17,r17,r3
 4005404:	00c1ff84 	movi	r3,2046
 4005408:	18bf1316 	blt	r3,r2,4005058 <__alt_data_end+0xfc005058>
 400540c:	882c977a 	slli	r22,r17,29
 4005410:	9024d0fa 	srli	r18,r18,3
 4005414:	8822927a 	slli	r17,r17,9
 4005418:	1081ffcc 	andi	r2,r2,2047
 400541c:	b4acb03a 	or	r22,r22,r18
 4005420:	8820d33a 	srli	r16,r17,12
 4005424:	3027883a 	mov	r19,r6
 4005428:	003eba06 	br	4004f14 <__alt_data_end+0xfc004f14>
 400542c:	8080022c 	andhi	r2,r16,8
 4005430:	10000926 	beq	r2,zero,4005458 <__muldf3+0x6c0>
 4005434:	8880022c 	andhi	r2,r17,8
 4005438:	1000071e 	bne	r2,zero,4005458 <__muldf3+0x6c0>
 400543c:	00800434 	movhi	r2,16
 4005440:	8c000234 	orhi	r16,r17,8
 4005444:	10bfffc4 	addi	r2,r2,-1
 4005448:	e027883a 	mov	r19,fp
 400544c:	80a0703a 	and	r16,r16,r2
 4005450:	902d883a 	mov	r22,r18
 4005454:	003f1706 	br	40050b4 <__alt_data_end+0xfc0050b4>
 4005458:	00800434 	movhi	r2,16
 400545c:	84000234 	orhi	r16,r16,8
 4005460:	10bfffc4 	addi	r2,r2,-1
 4005464:	80a0703a 	and	r16,r16,r2
 4005468:	003f1206 	br	40050b4 <__alt_data_end+0xfc0050b4>
 400546c:	147ff604 	addi	r17,r2,-40
 4005470:	3462983a 	sll	r17,r6,r17
 4005474:	0025883a 	mov	r18,zero
 4005478:	003ef306 	br	4005048 <__alt_data_end+0xfc005048>
 400547c:	3009883a 	mov	r4,r6
 4005480:	d9400215 	stw	r5,8(sp)
 4005484:	d9800715 	stw	r6,28(sp)
 4005488:	da400415 	stw	r9,16(sp)
 400548c:	da800315 	stw	r10,12(sp)
 4005490:	40063bc0 	call	40063bc <__clzsi2>
 4005494:	10800804 	addi	r2,r2,32
 4005498:	da800317 	ldw	r10,12(sp)
 400549c:	da400417 	ldw	r9,16(sp)
 40054a0:	d9800717 	ldw	r6,28(sp)
 40054a4:	d9400217 	ldw	r5,8(sp)
 40054a8:	003edd06 	br	4005020 <__alt_data_end+0xfc005020>
 40054ac:	143ff604 	addi	r16,r2,-40
 40054b0:	ac20983a 	sll	r16,r21,r16
 40054b4:	002d883a 	mov	r22,zero
 40054b8:	003ec106 	br	4004fc0 <__alt_data_end+0xfc004fc0>
 40054bc:	d9800715 	stw	r6,28(sp)
 40054c0:	d9c00215 	stw	r7,8(sp)
 40054c4:	da400415 	stw	r9,16(sp)
 40054c8:	40063bc0 	call	40063bc <__clzsi2>
 40054cc:	10800804 	addi	r2,r2,32
 40054d0:	da400417 	ldw	r9,16(sp)
 40054d4:	d9c00217 	ldw	r7,8(sp)
 40054d8:	d9800717 	ldw	r6,28(sp)
 40054dc:	003eae06 	br	4004f98 <__alt_data_end+0xfc004f98>
 40054e0:	00c00044 	movi	r3,1
 40054e4:	1887c83a 	sub	r3,r3,r2
 40054e8:	01000e04 	movi	r4,56
 40054ec:	20fe8516 	blt	r4,r3,4004f04 <__alt_data_end+0xfc004f04>
 40054f0:	010007c4 	movi	r4,31
 40054f4:	20c01b16 	blt	r4,r3,4005564 <__muldf3+0x7cc>
 40054f8:	00800804 	movi	r2,32
 40054fc:	10c5c83a 	sub	r2,r2,r3
 4005500:	888a983a 	sll	r5,r17,r2
 4005504:	90c8d83a 	srl	r4,r18,r3
 4005508:	9084983a 	sll	r2,r18,r2
 400550c:	88e2d83a 	srl	r17,r17,r3
 4005510:	2906b03a 	or	r3,r5,r4
 4005514:	1004c03a 	cmpne	r2,r2,zero
 4005518:	1886b03a 	or	r3,r3,r2
 400551c:	188001cc 	andi	r2,r3,7
 4005520:	10000726 	beq	r2,zero,4005540 <__muldf3+0x7a8>
 4005524:	188003cc 	andi	r2,r3,15
 4005528:	01000104 	movi	r4,4
 400552c:	11000426 	beq	r2,r4,4005540 <__muldf3+0x7a8>
 4005530:	1805883a 	mov	r2,r3
 4005534:	10c00104 	addi	r3,r2,4
 4005538:	1885803a 	cmpltu	r2,r3,r2
 400553c:	88a3883a 	add	r17,r17,r2
 4005540:	8880202c 	andhi	r2,r17,128
 4005544:	10001c26 	beq	r2,zero,40055b8 <__muldf3+0x820>
 4005548:	3027883a 	mov	r19,r6
 400554c:	00800044 	movi	r2,1
 4005550:	0021883a 	mov	r16,zero
 4005554:	002d883a 	mov	r22,zero
 4005558:	003e6e06 	br	4004f14 <__alt_data_end+0xfc004f14>
 400555c:	4007883a 	mov	r3,r8
 4005560:	003f9706 	br	40053c0 <__alt_data_end+0xfc0053c0>
 4005564:	017ff844 	movi	r5,-31
 4005568:	2885c83a 	sub	r2,r5,r2
 400556c:	888ad83a 	srl	r5,r17,r2
 4005570:	00800804 	movi	r2,32
 4005574:	18801a26 	beq	r3,r2,40055e0 <__muldf3+0x848>
 4005578:	01001004 	movi	r4,64
 400557c:	20c7c83a 	sub	r3,r4,r3
 4005580:	88e2983a 	sll	r17,r17,r3
 4005584:	8ca4b03a 	or	r18,r17,r18
 4005588:	9004c03a 	cmpne	r2,r18,zero
 400558c:	2884b03a 	or	r2,r5,r2
 4005590:	144001cc 	andi	r17,r2,7
 4005594:	88000d1e 	bne	r17,zero,40055cc <__muldf3+0x834>
 4005598:	0021883a 	mov	r16,zero
 400559c:	102cd0fa 	srli	r22,r2,3
 40055a0:	3027883a 	mov	r19,r6
 40055a4:	0005883a 	mov	r2,zero
 40055a8:	b46cb03a 	or	r22,r22,r17
 40055ac:	003e5906 	br	4004f14 <__alt_data_end+0xfc004f14>
 40055b0:	1007883a 	mov	r3,r2
 40055b4:	0023883a 	mov	r17,zero
 40055b8:	8820927a 	slli	r16,r17,9
 40055bc:	1805883a 	mov	r2,r3
 40055c0:	8822977a 	slli	r17,r17,29
 40055c4:	8020d33a 	srli	r16,r16,12
 40055c8:	003ff406 	br	400559c <__alt_data_end+0xfc00559c>
 40055cc:	10c003cc 	andi	r3,r2,15
 40055d0:	01000104 	movi	r4,4
 40055d4:	193ff626 	beq	r3,r4,40055b0 <__alt_data_end+0xfc0055b0>
 40055d8:	0023883a 	mov	r17,zero
 40055dc:	003fd506 	br	4005534 <__alt_data_end+0xfc005534>
 40055e0:	0023883a 	mov	r17,zero
 40055e4:	003fe706 	br	4005584 <__alt_data_end+0xfc005584>
 40055e8:	00800434 	movhi	r2,16
 40055ec:	8c000234 	orhi	r16,r17,8
 40055f0:	10bfffc4 	addi	r2,r2,-1
 40055f4:	3027883a 	mov	r19,r6
 40055f8:	80a0703a 	and	r16,r16,r2
 40055fc:	902d883a 	mov	r22,r18
 4005600:	003eac06 	br	40050b4 <__alt_data_end+0xfc0050b4>

04005604 <__subdf3>:
 4005604:	02000434 	movhi	r8,16
 4005608:	423fffc4 	addi	r8,r8,-1
 400560c:	defffb04 	addi	sp,sp,-20
 4005610:	2a14703a 	and	r10,r5,r8
 4005614:	3812d53a 	srli	r9,r7,20
 4005618:	3a10703a 	and	r8,r7,r8
 400561c:	2006d77a 	srli	r3,r4,29
 4005620:	3004d77a 	srli	r2,r6,29
 4005624:	dc000015 	stw	r16,0(sp)
 4005628:	501490fa 	slli	r10,r10,3
 400562c:	2820d53a 	srli	r16,r5,20
 4005630:	401090fa 	slli	r8,r8,3
 4005634:	dc800215 	stw	r18,8(sp)
 4005638:	dc400115 	stw	r17,4(sp)
 400563c:	dfc00415 	stw	ra,16(sp)
 4005640:	202290fa 	slli	r17,r4,3
 4005644:	dcc00315 	stw	r19,12(sp)
 4005648:	4a41ffcc 	andi	r9,r9,2047
 400564c:	0101ffc4 	movi	r4,2047
 4005650:	2824d7fa 	srli	r18,r5,31
 4005654:	8401ffcc 	andi	r16,r16,2047
 4005658:	50c6b03a 	or	r3,r10,r3
 400565c:	380ed7fa 	srli	r7,r7,31
 4005660:	408ab03a 	or	r5,r8,r2
 4005664:	300c90fa 	slli	r6,r6,3
 4005668:	49009626 	beq	r9,r4,40058c4 <__subdf3+0x2c0>
 400566c:	39c0005c 	xori	r7,r7,1
 4005670:	8245c83a 	sub	r2,r16,r9
 4005674:	3c807426 	beq	r7,r18,4005848 <__subdf3+0x244>
 4005678:	0080af0e 	bge	zero,r2,4005938 <__subdf3+0x334>
 400567c:	48002a1e 	bne	r9,zero,4005728 <__subdf3+0x124>
 4005680:	2988b03a 	or	r4,r5,r6
 4005684:	20009a1e 	bne	r4,zero,40058f0 <__subdf3+0x2ec>
 4005688:	888001cc 	andi	r2,r17,7
 400568c:	10000726 	beq	r2,zero,40056ac <__subdf3+0xa8>
 4005690:	888003cc 	andi	r2,r17,15
 4005694:	01000104 	movi	r4,4
 4005698:	11000426 	beq	r2,r4,40056ac <__subdf3+0xa8>
 400569c:	890b883a 	add	r5,r17,r4
 40056a0:	2c63803a 	cmpltu	r17,r5,r17
 40056a4:	1c47883a 	add	r3,r3,r17
 40056a8:	2823883a 	mov	r17,r5
 40056ac:	1880202c 	andhi	r2,r3,128
 40056b0:	10005926 	beq	r2,zero,4005818 <__subdf3+0x214>
 40056b4:	84000044 	addi	r16,r16,1
 40056b8:	0081ffc4 	movi	r2,2047
 40056bc:	8080be26 	beq	r16,r2,40059b8 <__subdf3+0x3b4>
 40056c0:	017fe034 	movhi	r5,65408
 40056c4:	297fffc4 	addi	r5,r5,-1
 40056c8:	1946703a 	and	r3,r3,r5
 40056cc:	1804977a 	slli	r2,r3,29
 40056d0:	1806927a 	slli	r3,r3,9
 40056d4:	8822d0fa 	srli	r17,r17,3
 40056d8:	8401ffcc 	andi	r16,r16,2047
 40056dc:	180ad33a 	srli	r5,r3,12
 40056e0:	9100004c 	andi	r4,r18,1
 40056e4:	1444b03a 	or	r2,r2,r17
 40056e8:	80c1ffcc 	andi	r3,r16,2047
 40056ec:	1820953a 	slli	r16,r3,20
 40056f0:	20c03fcc 	andi	r3,r4,255
 40056f4:	180897fa 	slli	r4,r3,31
 40056f8:	00c00434 	movhi	r3,16
 40056fc:	18ffffc4 	addi	r3,r3,-1
 4005700:	28c6703a 	and	r3,r5,r3
 4005704:	1c06b03a 	or	r3,r3,r16
 4005708:	1906b03a 	or	r3,r3,r4
 400570c:	dfc00417 	ldw	ra,16(sp)
 4005710:	dcc00317 	ldw	r19,12(sp)
 4005714:	dc800217 	ldw	r18,8(sp)
 4005718:	dc400117 	ldw	r17,4(sp)
 400571c:	dc000017 	ldw	r16,0(sp)
 4005720:	dec00504 	addi	sp,sp,20
 4005724:	f800283a 	ret
 4005728:	0101ffc4 	movi	r4,2047
 400572c:	813fd626 	beq	r16,r4,4005688 <__alt_data_end+0xfc005688>
 4005730:	29402034 	orhi	r5,r5,128
 4005734:	01000e04 	movi	r4,56
 4005738:	2080a316 	blt	r4,r2,40059c8 <__subdf3+0x3c4>
 400573c:	010007c4 	movi	r4,31
 4005740:	2080c616 	blt	r4,r2,4005a5c <__subdf3+0x458>
 4005744:	01000804 	movi	r4,32
 4005748:	2089c83a 	sub	r4,r4,r2
 400574c:	2910983a 	sll	r8,r5,r4
 4005750:	308ed83a 	srl	r7,r6,r2
 4005754:	3108983a 	sll	r4,r6,r4
 4005758:	2884d83a 	srl	r2,r5,r2
 400575c:	41ccb03a 	or	r6,r8,r7
 4005760:	2008c03a 	cmpne	r4,r4,zero
 4005764:	310cb03a 	or	r6,r6,r4
 4005768:	898dc83a 	sub	r6,r17,r6
 400576c:	89a3803a 	cmpltu	r17,r17,r6
 4005770:	1887c83a 	sub	r3,r3,r2
 4005774:	1c47c83a 	sub	r3,r3,r17
 4005778:	3023883a 	mov	r17,r6
 400577c:	1880202c 	andhi	r2,r3,128
 4005780:	10002326 	beq	r2,zero,4005810 <__subdf3+0x20c>
 4005784:	04c02034 	movhi	r19,128
 4005788:	9cffffc4 	addi	r19,r19,-1
 400578c:	1ce6703a 	and	r19,r3,r19
 4005790:	98007a26 	beq	r19,zero,400597c <__subdf3+0x378>
 4005794:	9809883a 	mov	r4,r19
 4005798:	40063bc0 	call	40063bc <__clzsi2>
 400579c:	113ffe04 	addi	r4,r2,-8
 40057a0:	00c007c4 	movi	r3,31
 40057a4:	19007b16 	blt	r3,r4,4005994 <__subdf3+0x390>
 40057a8:	00800804 	movi	r2,32
 40057ac:	1105c83a 	sub	r2,r2,r4
 40057b0:	8884d83a 	srl	r2,r17,r2
 40057b4:	9906983a 	sll	r3,r19,r4
 40057b8:	8922983a 	sll	r17,r17,r4
 40057bc:	10c4b03a 	or	r2,r2,r3
 40057c0:	24007816 	blt	r4,r16,40059a4 <__subdf3+0x3a0>
 40057c4:	2421c83a 	sub	r16,r4,r16
 40057c8:	80c00044 	addi	r3,r16,1
 40057cc:	010007c4 	movi	r4,31
 40057d0:	20c09516 	blt	r4,r3,4005a28 <__subdf3+0x424>
 40057d4:	01400804 	movi	r5,32
 40057d8:	28cbc83a 	sub	r5,r5,r3
 40057dc:	88c8d83a 	srl	r4,r17,r3
 40057e0:	8962983a 	sll	r17,r17,r5
 40057e4:	114a983a 	sll	r5,r2,r5
 40057e8:	10c6d83a 	srl	r3,r2,r3
 40057ec:	8804c03a 	cmpne	r2,r17,zero
 40057f0:	290ab03a 	or	r5,r5,r4
 40057f4:	28a2b03a 	or	r17,r5,r2
 40057f8:	0021883a 	mov	r16,zero
 40057fc:	003fa206 	br	4005688 <__alt_data_end+0xfc005688>
 4005800:	2090b03a 	or	r8,r4,r2
 4005804:	40018e26 	beq	r8,zero,4005e40 <__subdf3+0x83c>
 4005808:	1007883a 	mov	r3,r2
 400580c:	2023883a 	mov	r17,r4
 4005810:	888001cc 	andi	r2,r17,7
 4005814:	103f9e1e 	bne	r2,zero,4005690 <__alt_data_end+0xfc005690>
 4005818:	1804977a 	slli	r2,r3,29
 400581c:	8822d0fa 	srli	r17,r17,3
 4005820:	1810d0fa 	srli	r8,r3,3
 4005824:	9100004c 	andi	r4,r18,1
 4005828:	1444b03a 	or	r2,r2,r17
 400582c:	00c1ffc4 	movi	r3,2047
 4005830:	80c02826 	beq	r16,r3,40058d4 <__subdf3+0x2d0>
 4005834:	01400434 	movhi	r5,16
 4005838:	297fffc4 	addi	r5,r5,-1
 400583c:	80e0703a 	and	r16,r16,r3
 4005840:	414a703a 	and	r5,r8,r5
 4005844:	003fa806 	br	40056e8 <__alt_data_end+0xfc0056e8>
 4005848:	0080630e 	bge	zero,r2,40059d8 <__subdf3+0x3d4>
 400584c:	48003026 	beq	r9,zero,4005910 <__subdf3+0x30c>
 4005850:	0101ffc4 	movi	r4,2047
 4005854:	813f8c26 	beq	r16,r4,4005688 <__alt_data_end+0xfc005688>
 4005858:	29402034 	orhi	r5,r5,128
 400585c:	01000e04 	movi	r4,56
 4005860:	2080a90e 	bge	r4,r2,4005b08 <__subdf3+0x504>
 4005864:	298cb03a 	or	r6,r5,r6
 4005868:	3012c03a 	cmpne	r9,r6,zero
 400586c:	0005883a 	mov	r2,zero
 4005870:	4c53883a 	add	r9,r9,r17
 4005874:	4c63803a 	cmpltu	r17,r9,r17
 4005878:	10c7883a 	add	r3,r2,r3
 400587c:	88c7883a 	add	r3,r17,r3
 4005880:	4823883a 	mov	r17,r9
 4005884:	1880202c 	andhi	r2,r3,128
 4005888:	1000d026 	beq	r2,zero,4005bcc <__subdf3+0x5c8>
 400588c:	84000044 	addi	r16,r16,1
 4005890:	0081ffc4 	movi	r2,2047
 4005894:	8080fe26 	beq	r16,r2,4005c90 <__subdf3+0x68c>
 4005898:	00bfe034 	movhi	r2,65408
 400589c:	10bfffc4 	addi	r2,r2,-1
 40058a0:	1886703a 	and	r3,r3,r2
 40058a4:	880ad07a 	srli	r5,r17,1
 40058a8:	180497fa 	slli	r2,r3,31
 40058ac:	8900004c 	andi	r4,r17,1
 40058b0:	2922b03a 	or	r17,r5,r4
 40058b4:	1806d07a 	srli	r3,r3,1
 40058b8:	1462b03a 	or	r17,r2,r17
 40058bc:	3825883a 	mov	r18,r7
 40058c0:	003f7106 	br	4005688 <__alt_data_end+0xfc005688>
 40058c4:	2984b03a 	or	r2,r5,r6
 40058c8:	103f6826 	beq	r2,zero,400566c <__alt_data_end+0xfc00566c>
 40058cc:	39c03fcc 	andi	r7,r7,255
 40058d0:	003f6706 	br	4005670 <__alt_data_end+0xfc005670>
 40058d4:	4086b03a 	or	r3,r8,r2
 40058d8:	18015226 	beq	r3,zero,4005e24 <__subdf3+0x820>
 40058dc:	00c00434 	movhi	r3,16
 40058e0:	41400234 	orhi	r5,r8,8
 40058e4:	18ffffc4 	addi	r3,r3,-1
 40058e8:	28ca703a 	and	r5,r5,r3
 40058ec:	003f7e06 	br	40056e8 <__alt_data_end+0xfc0056e8>
 40058f0:	10bfffc4 	addi	r2,r2,-1
 40058f4:	1000491e 	bne	r2,zero,4005a1c <__subdf3+0x418>
 40058f8:	898fc83a 	sub	r7,r17,r6
 40058fc:	89e3803a 	cmpltu	r17,r17,r7
 4005900:	1947c83a 	sub	r3,r3,r5
 4005904:	1c47c83a 	sub	r3,r3,r17
 4005908:	3823883a 	mov	r17,r7
 400590c:	003f9b06 	br	400577c <__alt_data_end+0xfc00577c>
 4005910:	2988b03a 	or	r4,r5,r6
 4005914:	203f5c26 	beq	r4,zero,4005688 <__alt_data_end+0xfc005688>
 4005918:	10bfffc4 	addi	r2,r2,-1
 400591c:	1000931e 	bne	r2,zero,4005b6c <__subdf3+0x568>
 4005920:	898d883a 	add	r6,r17,r6
 4005924:	3463803a 	cmpltu	r17,r6,r17
 4005928:	1947883a 	add	r3,r3,r5
 400592c:	88c7883a 	add	r3,r17,r3
 4005930:	3023883a 	mov	r17,r6
 4005934:	003fd306 	br	4005884 <__alt_data_end+0xfc005884>
 4005938:	1000541e 	bne	r2,zero,4005a8c <__subdf3+0x488>
 400593c:	80800044 	addi	r2,r16,1
 4005940:	1081ffcc 	andi	r2,r2,2047
 4005944:	01000044 	movi	r4,1
 4005948:	2080a20e 	bge	r4,r2,4005bd4 <__subdf3+0x5d0>
 400594c:	8989c83a 	sub	r4,r17,r6
 4005950:	8905803a 	cmpltu	r2,r17,r4
 4005954:	1967c83a 	sub	r19,r3,r5
 4005958:	98a7c83a 	sub	r19,r19,r2
 400595c:	9880202c 	andhi	r2,r19,128
 4005960:	10006326 	beq	r2,zero,4005af0 <__subdf3+0x4ec>
 4005964:	3463c83a 	sub	r17,r6,r17
 4005968:	28c7c83a 	sub	r3,r5,r3
 400596c:	344d803a 	cmpltu	r6,r6,r17
 4005970:	19a7c83a 	sub	r19,r3,r6
 4005974:	3825883a 	mov	r18,r7
 4005978:	983f861e 	bne	r19,zero,4005794 <__alt_data_end+0xfc005794>
 400597c:	8809883a 	mov	r4,r17
 4005980:	40063bc0 	call	40063bc <__clzsi2>
 4005984:	10800804 	addi	r2,r2,32
 4005988:	113ffe04 	addi	r4,r2,-8
 400598c:	00c007c4 	movi	r3,31
 4005990:	193f850e 	bge	r3,r4,40057a8 <__alt_data_end+0xfc0057a8>
 4005994:	10bff604 	addi	r2,r2,-40
 4005998:	8884983a 	sll	r2,r17,r2
 400599c:	0023883a 	mov	r17,zero
 40059a0:	243f880e 	bge	r4,r16,40057c4 <__alt_data_end+0xfc0057c4>
 40059a4:	00ffe034 	movhi	r3,65408
 40059a8:	18ffffc4 	addi	r3,r3,-1
 40059ac:	8121c83a 	sub	r16,r16,r4
 40059b0:	10c6703a 	and	r3,r2,r3
 40059b4:	003f3406 	br	4005688 <__alt_data_end+0xfc005688>
 40059b8:	9100004c 	andi	r4,r18,1
 40059bc:	000b883a 	mov	r5,zero
 40059c0:	0005883a 	mov	r2,zero
 40059c4:	003f4806 	br	40056e8 <__alt_data_end+0xfc0056e8>
 40059c8:	298cb03a 	or	r6,r5,r6
 40059cc:	300cc03a 	cmpne	r6,r6,zero
 40059d0:	0005883a 	mov	r2,zero
 40059d4:	003f6406 	br	4005768 <__alt_data_end+0xfc005768>
 40059d8:	10009a1e 	bne	r2,zero,4005c44 <__subdf3+0x640>
 40059dc:	82400044 	addi	r9,r16,1
 40059e0:	4881ffcc 	andi	r2,r9,2047
 40059e4:	02800044 	movi	r10,1
 40059e8:	5080670e 	bge	r10,r2,4005b88 <__subdf3+0x584>
 40059ec:	0081ffc4 	movi	r2,2047
 40059f0:	4880af26 	beq	r9,r2,4005cb0 <__subdf3+0x6ac>
 40059f4:	898d883a 	add	r6,r17,r6
 40059f8:	1945883a 	add	r2,r3,r5
 40059fc:	3447803a 	cmpltu	r3,r6,r17
 4005a00:	1887883a 	add	r3,r3,r2
 4005a04:	182297fa 	slli	r17,r3,31
 4005a08:	300cd07a 	srli	r6,r6,1
 4005a0c:	1806d07a 	srli	r3,r3,1
 4005a10:	4821883a 	mov	r16,r9
 4005a14:	89a2b03a 	or	r17,r17,r6
 4005a18:	003f1b06 	br	4005688 <__alt_data_end+0xfc005688>
 4005a1c:	0101ffc4 	movi	r4,2047
 4005a20:	813f441e 	bne	r16,r4,4005734 <__alt_data_end+0xfc005734>
 4005a24:	003f1806 	br	4005688 <__alt_data_end+0xfc005688>
 4005a28:	843ff844 	addi	r16,r16,-31
 4005a2c:	01400804 	movi	r5,32
 4005a30:	1408d83a 	srl	r4,r2,r16
 4005a34:	19405026 	beq	r3,r5,4005b78 <__subdf3+0x574>
 4005a38:	01401004 	movi	r5,64
 4005a3c:	28c7c83a 	sub	r3,r5,r3
 4005a40:	10c4983a 	sll	r2,r2,r3
 4005a44:	88a2b03a 	or	r17,r17,r2
 4005a48:	8822c03a 	cmpne	r17,r17,zero
 4005a4c:	2462b03a 	or	r17,r4,r17
 4005a50:	0007883a 	mov	r3,zero
 4005a54:	0021883a 	mov	r16,zero
 4005a58:	003f6d06 	br	4005810 <__alt_data_end+0xfc005810>
 4005a5c:	11fff804 	addi	r7,r2,-32
 4005a60:	01000804 	movi	r4,32
 4005a64:	29ced83a 	srl	r7,r5,r7
 4005a68:	11004526 	beq	r2,r4,4005b80 <__subdf3+0x57c>
 4005a6c:	01001004 	movi	r4,64
 4005a70:	2089c83a 	sub	r4,r4,r2
 4005a74:	2904983a 	sll	r2,r5,r4
 4005a78:	118cb03a 	or	r6,r2,r6
 4005a7c:	300cc03a 	cmpne	r6,r6,zero
 4005a80:	398cb03a 	or	r6,r7,r6
 4005a84:	0005883a 	mov	r2,zero
 4005a88:	003f3706 	br	4005768 <__alt_data_end+0xfc005768>
 4005a8c:	80002a26 	beq	r16,zero,4005b38 <__subdf3+0x534>
 4005a90:	0101ffc4 	movi	r4,2047
 4005a94:	49006626 	beq	r9,r4,4005c30 <__subdf3+0x62c>
 4005a98:	0085c83a 	sub	r2,zero,r2
 4005a9c:	18c02034 	orhi	r3,r3,128
 4005aa0:	01000e04 	movi	r4,56
 4005aa4:	20807e16 	blt	r4,r2,4005ca0 <__subdf3+0x69c>
 4005aa8:	010007c4 	movi	r4,31
 4005aac:	2080e716 	blt	r4,r2,4005e4c <__subdf3+0x848>
 4005ab0:	01000804 	movi	r4,32
 4005ab4:	2089c83a 	sub	r4,r4,r2
 4005ab8:	1914983a 	sll	r10,r3,r4
 4005abc:	8890d83a 	srl	r8,r17,r2
 4005ac0:	8908983a 	sll	r4,r17,r4
 4005ac4:	1884d83a 	srl	r2,r3,r2
 4005ac8:	5222b03a 	or	r17,r10,r8
 4005acc:	2006c03a 	cmpne	r3,r4,zero
 4005ad0:	88e2b03a 	or	r17,r17,r3
 4005ad4:	3463c83a 	sub	r17,r6,r17
 4005ad8:	2885c83a 	sub	r2,r5,r2
 4005adc:	344d803a 	cmpltu	r6,r6,r17
 4005ae0:	1187c83a 	sub	r3,r2,r6
 4005ae4:	4821883a 	mov	r16,r9
 4005ae8:	3825883a 	mov	r18,r7
 4005aec:	003f2306 	br	400577c <__alt_data_end+0xfc00577c>
 4005af0:	24d0b03a 	or	r8,r4,r19
 4005af4:	40001b1e 	bne	r8,zero,4005b64 <__subdf3+0x560>
 4005af8:	0005883a 	mov	r2,zero
 4005afc:	0009883a 	mov	r4,zero
 4005b00:	0021883a 	mov	r16,zero
 4005b04:	003f4906 	br	400582c <__alt_data_end+0xfc00582c>
 4005b08:	010007c4 	movi	r4,31
 4005b0c:	20803a16 	blt	r4,r2,4005bf8 <__subdf3+0x5f4>
 4005b10:	01000804 	movi	r4,32
 4005b14:	2089c83a 	sub	r4,r4,r2
 4005b18:	2912983a 	sll	r9,r5,r4
 4005b1c:	3090d83a 	srl	r8,r6,r2
 4005b20:	3108983a 	sll	r4,r6,r4
 4005b24:	2884d83a 	srl	r2,r5,r2
 4005b28:	4a12b03a 	or	r9,r9,r8
 4005b2c:	2008c03a 	cmpne	r4,r4,zero
 4005b30:	4912b03a 	or	r9,r9,r4
 4005b34:	003f4e06 	br	4005870 <__alt_data_end+0xfc005870>
 4005b38:	1c48b03a 	or	r4,r3,r17
 4005b3c:	20003c26 	beq	r4,zero,4005c30 <__subdf3+0x62c>
 4005b40:	0084303a 	nor	r2,zero,r2
 4005b44:	1000381e 	bne	r2,zero,4005c28 <__subdf3+0x624>
 4005b48:	3463c83a 	sub	r17,r6,r17
 4005b4c:	28c5c83a 	sub	r2,r5,r3
 4005b50:	344d803a 	cmpltu	r6,r6,r17
 4005b54:	1187c83a 	sub	r3,r2,r6
 4005b58:	4821883a 	mov	r16,r9
 4005b5c:	3825883a 	mov	r18,r7
 4005b60:	003f0606 	br	400577c <__alt_data_end+0xfc00577c>
 4005b64:	2023883a 	mov	r17,r4
 4005b68:	003f0906 	br	4005790 <__alt_data_end+0xfc005790>
 4005b6c:	0101ffc4 	movi	r4,2047
 4005b70:	813f3a1e 	bne	r16,r4,400585c <__alt_data_end+0xfc00585c>
 4005b74:	003ec406 	br	4005688 <__alt_data_end+0xfc005688>
 4005b78:	0005883a 	mov	r2,zero
 4005b7c:	003fb106 	br	4005a44 <__alt_data_end+0xfc005a44>
 4005b80:	0005883a 	mov	r2,zero
 4005b84:	003fbc06 	br	4005a78 <__alt_data_end+0xfc005a78>
 4005b88:	1c44b03a 	or	r2,r3,r17
 4005b8c:	80008e1e 	bne	r16,zero,4005dc8 <__subdf3+0x7c4>
 4005b90:	1000c826 	beq	r2,zero,4005eb4 <__subdf3+0x8b0>
 4005b94:	2984b03a 	or	r2,r5,r6
 4005b98:	103ebb26 	beq	r2,zero,4005688 <__alt_data_end+0xfc005688>
 4005b9c:	8989883a 	add	r4,r17,r6
 4005ba0:	1945883a 	add	r2,r3,r5
 4005ba4:	2447803a 	cmpltu	r3,r4,r17
 4005ba8:	1887883a 	add	r3,r3,r2
 4005bac:	1880202c 	andhi	r2,r3,128
 4005bb0:	2023883a 	mov	r17,r4
 4005bb4:	103f1626 	beq	r2,zero,4005810 <__alt_data_end+0xfc005810>
 4005bb8:	00bfe034 	movhi	r2,65408
 4005bbc:	10bfffc4 	addi	r2,r2,-1
 4005bc0:	5021883a 	mov	r16,r10
 4005bc4:	1886703a 	and	r3,r3,r2
 4005bc8:	003eaf06 	br	4005688 <__alt_data_end+0xfc005688>
 4005bcc:	3825883a 	mov	r18,r7
 4005bd0:	003f0f06 	br	4005810 <__alt_data_end+0xfc005810>
 4005bd4:	1c44b03a 	or	r2,r3,r17
 4005bd8:	8000251e 	bne	r16,zero,4005c70 <__subdf3+0x66c>
 4005bdc:	1000661e 	bne	r2,zero,4005d78 <__subdf3+0x774>
 4005be0:	2990b03a 	or	r8,r5,r6
 4005be4:	40009626 	beq	r8,zero,4005e40 <__subdf3+0x83c>
 4005be8:	2807883a 	mov	r3,r5
 4005bec:	3023883a 	mov	r17,r6
 4005bf0:	3825883a 	mov	r18,r7
 4005bf4:	003ea406 	br	4005688 <__alt_data_end+0xfc005688>
 4005bf8:	127ff804 	addi	r9,r2,-32
 4005bfc:	01000804 	movi	r4,32
 4005c00:	2a52d83a 	srl	r9,r5,r9
 4005c04:	11008c26 	beq	r2,r4,4005e38 <__subdf3+0x834>
 4005c08:	01001004 	movi	r4,64
 4005c0c:	2085c83a 	sub	r2,r4,r2
 4005c10:	2884983a 	sll	r2,r5,r2
 4005c14:	118cb03a 	or	r6,r2,r6
 4005c18:	300cc03a 	cmpne	r6,r6,zero
 4005c1c:	4992b03a 	or	r9,r9,r6
 4005c20:	0005883a 	mov	r2,zero
 4005c24:	003f1206 	br	4005870 <__alt_data_end+0xfc005870>
 4005c28:	0101ffc4 	movi	r4,2047
 4005c2c:	493f9c1e 	bne	r9,r4,4005aa0 <__alt_data_end+0xfc005aa0>
 4005c30:	2807883a 	mov	r3,r5
 4005c34:	3023883a 	mov	r17,r6
 4005c38:	4821883a 	mov	r16,r9
 4005c3c:	3825883a 	mov	r18,r7
 4005c40:	003e9106 	br	4005688 <__alt_data_end+0xfc005688>
 4005c44:	80001f1e 	bne	r16,zero,4005cc4 <__subdf3+0x6c0>
 4005c48:	1c48b03a 	or	r4,r3,r17
 4005c4c:	20005a26 	beq	r4,zero,4005db8 <__subdf3+0x7b4>
 4005c50:	0084303a 	nor	r2,zero,r2
 4005c54:	1000561e 	bne	r2,zero,4005db0 <__subdf3+0x7ac>
 4005c58:	89a3883a 	add	r17,r17,r6
 4005c5c:	1945883a 	add	r2,r3,r5
 4005c60:	898d803a 	cmpltu	r6,r17,r6
 4005c64:	3087883a 	add	r3,r6,r2
 4005c68:	4821883a 	mov	r16,r9
 4005c6c:	003f0506 	br	4005884 <__alt_data_end+0xfc005884>
 4005c70:	10002b1e 	bne	r2,zero,4005d20 <__subdf3+0x71c>
 4005c74:	2984b03a 	or	r2,r5,r6
 4005c78:	10008026 	beq	r2,zero,4005e7c <__subdf3+0x878>
 4005c7c:	2807883a 	mov	r3,r5
 4005c80:	3023883a 	mov	r17,r6
 4005c84:	3825883a 	mov	r18,r7
 4005c88:	0401ffc4 	movi	r16,2047
 4005c8c:	003e7e06 	br	4005688 <__alt_data_end+0xfc005688>
 4005c90:	3809883a 	mov	r4,r7
 4005c94:	0011883a 	mov	r8,zero
 4005c98:	0005883a 	mov	r2,zero
 4005c9c:	003ee306 	br	400582c <__alt_data_end+0xfc00582c>
 4005ca0:	1c62b03a 	or	r17,r3,r17
 4005ca4:	8822c03a 	cmpne	r17,r17,zero
 4005ca8:	0005883a 	mov	r2,zero
 4005cac:	003f8906 	br	4005ad4 <__alt_data_end+0xfc005ad4>
 4005cb0:	3809883a 	mov	r4,r7
 4005cb4:	4821883a 	mov	r16,r9
 4005cb8:	0011883a 	mov	r8,zero
 4005cbc:	0005883a 	mov	r2,zero
 4005cc0:	003eda06 	br	400582c <__alt_data_end+0xfc00582c>
 4005cc4:	0101ffc4 	movi	r4,2047
 4005cc8:	49003b26 	beq	r9,r4,4005db8 <__subdf3+0x7b4>
 4005ccc:	0085c83a 	sub	r2,zero,r2
 4005cd0:	18c02034 	orhi	r3,r3,128
 4005cd4:	01000e04 	movi	r4,56
 4005cd8:	20806e16 	blt	r4,r2,4005e94 <__subdf3+0x890>
 4005cdc:	010007c4 	movi	r4,31
 4005ce0:	20807716 	blt	r4,r2,4005ec0 <__subdf3+0x8bc>
 4005ce4:	01000804 	movi	r4,32
 4005ce8:	2089c83a 	sub	r4,r4,r2
 4005cec:	1914983a 	sll	r10,r3,r4
 4005cf0:	8890d83a 	srl	r8,r17,r2
 4005cf4:	8908983a 	sll	r4,r17,r4
 4005cf8:	1884d83a 	srl	r2,r3,r2
 4005cfc:	5222b03a 	or	r17,r10,r8
 4005d00:	2006c03a 	cmpne	r3,r4,zero
 4005d04:	88e2b03a 	or	r17,r17,r3
 4005d08:	89a3883a 	add	r17,r17,r6
 4005d0c:	1145883a 	add	r2,r2,r5
 4005d10:	898d803a 	cmpltu	r6,r17,r6
 4005d14:	3087883a 	add	r3,r6,r2
 4005d18:	4821883a 	mov	r16,r9
 4005d1c:	003ed906 	br	4005884 <__alt_data_end+0xfc005884>
 4005d20:	2984b03a 	or	r2,r5,r6
 4005d24:	10004226 	beq	r2,zero,4005e30 <__subdf3+0x82c>
 4005d28:	1808d0fa 	srli	r4,r3,3
 4005d2c:	8822d0fa 	srli	r17,r17,3
 4005d30:	1806977a 	slli	r3,r3,29
 4005d34:	2080022c 	andhi	r2,r4,8
 4005d38:	1c62b03a 	or	r17,r3,r17
 4005d3c:	10000826 	beq	r2,zero,4005d60 <__subdf3+0x75c>
 4005d40:	2812d0fa 	srli	r9,r5,3
 4005d44:	4880022c 	andhi	r2,r9,8
 4005d48:	1000051e 	bne	r2,zero,4005d60 <__subdf3+0x75c>
 4005d4c:	300cd0fa 	srli	r6,r6,3
 4005d50:	2804977a 	slli	r2,r5,29
 4005d54:	4809883a 	mov	r4,r9
 4005d58:	3825883a 	mov	r18,r7
 4005d5c:	11a2b03a 	or	r17,r2,r6
 4005d60:	8806d77a 	srli	r3,r17,29
 4005d64:	200890fa 	slli	r4,r4,3
 4005d68:	882290fa 	slli	r17,r17,3
 4005d6c:	0401ffc4 	movi	r16,2047
 4005d70:	1906b03a 	or	r3,r3,r4
 4005d74:	003e4406 	br	4005688 <__alt_data_end+0xfc005688>
 4005d78:	2984b03a 	or	r2,r5,r6
 4005d7c:	103e4226 	beq	r2,zero,4005688 <__alt_data_end+0xfc005688>
 4005d80:	8989c83a 	sub	r4,r17,r6
 4005d84:	8911803a 	cmpltu	r8,r17,r4
 4005d88:	1945c83a 	sub	r2,r3,r5
 4005d8c:	1205c83a 	sub	r2,r2,r8
 4005d90:	1200202c 	andhi	r8,r2,128
 4005d94:	403e9a26 	beq	r8,zero,4005800 <__alt_data_end+0xfc005800>
 4005d98:	3463c83a 	sub	r17,r6,r17
 4005d9c:	28c5c83a 	sub	r2,r5,r3
 4005da0:	344d803a 	cmpltu	r6,r6,r17
 4005da4:	1187c83a 	sub	r3,r2,r6
 4005da8:	3825883a 	mov	r18,r7
 4005dac:	003e3606 	br	4005688 <__alt_data_end+0xfc005688>
 4005db0:	0101ffc4 	movi	r4,2047
 4005db4:	493fc71e 	bne	r9,r4,4005cd4 <__alt_data_end+0xfc005cd4>
 4005db8:	2807883a 	mov	r3,r5
 4005dbc:	3023883a 	mov	r17,r6
 4005dc0:	4821883a 	mov	r16,r9
 4005dc4:	003e3006 	br	4005688 <__alt_data_end+0xfc005688>
 4005dc8:	10003626 	beq	r2,zero,4005ea4 <__subdf3+0x8a0>
 4005dcc:	2984b03a 	or	r2,r5,r6
 4005dd0:	10001726 	beq	r2,zero,4005e30 <__subdf3+0x82c>
 4005dd4:	1808d0fa 	srli	r4,r3,3
 4005dd8:	8822d0fa 	srli	r17,r17,3
 4005ddc:	1806977a 	slli	r3,r3,29
 4005de0:	2080022c 	andhi	r2,r4,8
 4005de4:	1c62b03a 	or	r17,r3,r17
 4005de8:	10000726 	beq	r2,zero,4005e08 <__subdf3+0x804>
 4005dec:	2812d0fa 	srli	r9,r5,3
 4005df0:	4880022c 	andhi	r2,r9,8
 4005df4:	1000041e 	bne	r2,zero,4005e08 <__subdf3+0x804>
 4005df8:	300cd0fa 	srli	r6,r6,3
 4005dfc:	2804977a 	slli	r2,r5,29
 4005e00:	4809883a 	mov	r4,r9
 4005e04:	11a2b03a 	or	r17,r2,r6
 4005e08:	8806d77a 	srli	r3,r17,29
 4005e0c:	200890fa 	slli	r4,r4,3
 4005e10:	882290fa 	slli	r17,r17,3
 4005e14:	3825883a 	mov	r18,r7
 4005e18:	1906b03a 	or	r3,r3,r4
 4005e1c:	0401ffc4 	movi	r16,2047
 4005e20:	003e1906 	br	4005688 <__alt_data_end+0xfc005688>
 4005e24:	000b883a 	mov	r5,zero
 4005e28:	0005883a 	mov	r2,zero
 4005e2c:	003e2e06 	br	40056e8 <__alt_data_end+0xfc0056e8>
 4005e30:	0401ffc4 	movi	r16,2047
 4005e34:	003e1406 	br	4005688 <__alt_data_end+0xfc005688>
 4005e38:	0005883a 	mov	r2,zero
 4005e3c:	003f7506 	br	4005c14 <__alt_data_end+0xfc005c14>
 4005e40:	0005883a 	mov	r2,zero
 4005e44:	0009883a 	mov	r4,zero
 4005e48:	003e7806 	br	400582c <__alt_data_end+0xfc00582c>
 4005e4c:	123ff804 	addi	r8,r2,-32
 4005e50:	01000804 	movi	r4,32
 4005e54:	1a10d83a 	srl	r8,r3,r8
 4005e58:	11002526 	beq	r2,r4,4005ef0 <__subdf3+0x8ec>
 4005e5c:	01001004 	movi	r4,64
 4005e60:	2085c83a 	sub	r2,r4,r2
 4005e64:	1884983a 	sll	r2,r3,r2
 4005e68:	1444b03a 	or	r2,r2,r17
 4005e6c:	1004c03a 	cmpne	r2,r2,zero
 4005e70:	40a2b03a 	or	r17,r8,r2
 4005e74:	0005883a 	mov	r2,zero
 4005e78:	003f1606 	br	4005ad4 <__alt_data_end+0xfc005ad4>
 4005e7c:	02000434 	movhi	r8,16
 4005e80:	0009883a 	mov	r4,zero
 4005e84:	423fffc4 	addi	r8,r8,-1
 4005e88:	00bfffc4 	movi	r2,-1
 4005e8c:	0401ffc4 	movi	r16,2047
 4005e90:	003e6606 	br	400582c <__alt_data_end+0xfc00582c>
 4005e94:	1c62b03a 	or	r17,r3,r17
 4005e98:	8822c03a 	cmpne	r17,r17,zero
 4005e9c:	0005883a 	mov	r2,zero
 4005ea0:	003f9906 	br	4005d08 <__alt_data_end+0xfc005d08>
 4005ea4:	2807883a 	mov	r3,r5
 4005ea8:	3023883a 	mov	r17,r6
 4005eac:	0401ffc4 	movi	r16,2047
 4005eb0:	003df506 	br	4005688 <__alt_data_end+0xfc005688>
 4005eb4:	2807883a 	mov	r3,r5
 4005eb8:	3023883a 	mov	r17,r6
 4005ebc:	003df206 	br	4005688 <__alt_data_end+0xfc005688>
 4005ec0:	123ff804 	addi	r8,r2,-32
 4005ec4:	01000804 	movi	r4,32
 4005ec8:	1a10d83a 	srl	r8,r3,r8
 4005ecc:	11000a26 	beq	r2,r4,4005ef8 <__subdf3+0x8f4>
 4005ed0:	01001004 	movi	r4,64
 4005ed4:	2085c83a 	sub	r2,r4,r2
 4005ed8:	1884983a 	sll	r2,r3,r2
 4005edc:	1444b03a 	or	r2,r2,r17
 4005ee0:	1004c03a 	cmpne	r2,r2,zero
 4005ee4:	40a2b03a 	or	r17,r8,r2
 4005ee8:	0005883a 	mov	r2,zero
 4005eec:	003f8606 	br	4005d08 <__alt_data_end+0xfc005d08>
 4005ef0:	0005883a 	mov	r2,zero
 4005ef4:	003fdc06 	br	4005e68 <__alt_data_end+0xfc005e68>
 4005ef8:	0005883a 	mov	r2,zero
 4005efc:	003ff706 	br	4005edc <__alt_data_end+0xfc005edc>

04005f00 <__fixdfsi>:
 4005f00:	280cd53a 	srli	r6,r5,20
 4005f04:	00c00434 	movhi	r3,16
 4005f08:	18ffffc4 	addi	r3,r3,-1
 4005f0c:	3181ffcc 	andi	r6,r6,2047
 4005f10:	01c0ff84 	movi	r7,1022
 4005f14:	28c6703a 	and	r3,r5,r3
 4005f18:	280ad7fa 	srli	r5,r5,31
 4005f1c:	3980120e 	bge	r7,r6,4005f68 <__fixdfsi+0x68>
 4005f20:	00810744 	movi	r2,1053
 4005f24:	11800c16 	blt	r2,r6,4005f58 <__fixdfsi+0x58>
 4005f28:	00810cc4 	movi	r2,1075
 4005f2c:	1185c83a 	sub	r2,r2,r6
 4005f30:	01c007c4 	movi	r7,31
 4005f34:	18c00434 	orhi	r3,r3,16
 4005f38:	38800d16 	blt	r7,r2,4005f70 <__fixdfsi+0x70>
 4005f3c:	31befb44 	addi	r6,r6,-1043
 4005f40:	2084d83a 	srl	r2,r4,r2
 4005f44:	1986983a 	sll	r3,r3,r6
 4005f48:	1884b03a 	or	r2,r3,r2
 4005f4c:	28000726 	beq	r5,zero,4005f6c <__fixdfsi+0x6c>
 4005f50:	0085c83a 	sub	r2,zero,r2
 4005f54:	f800283a 	ret
 4005f58:	00a00034 	movhi	r2,32768
 4005f5c:	10bfffc4 	addi	r2,r2,-1
 4005f60:	2885883a 	add	r2,r5,r2
 4005f64:	f800283a 	ret
 4005f68:	0005883a 	mov	r2,zero
 4005f6c:	f800283a 	ret
 4005f70:	008104c4 	movi	r2,1043
 4005f74:	1185c83a 	sub	r2,r2,r6
 4005f78:	1884d83a 	srl	r2,r3,r2
 4005f7c:	003ff306 	br	4005f4c <__alt_data_end+0xfc005f4c>

04005f80 <__floatsidf>:
 4005f80:	defffd04 	addi	sp,sp,-12
 4005f84:	dfc00215 	stw	ra,8(sp)
 4005f88:	dc400115 	stw	r17,4(sp)
 4005f8c:	dc000015 	stw	r16,0(sp)
 4005f90:	20002b26 	beq	r4,zero,4006040 <__floatsidf+0xc0>
 4005f94:	2023883a 	mov	r17,r4
 4005f98:	2020d7fa 	srli	r16,r4,31
 4005f9c:	20002d16 	blt	r4,zero,4006054 <__floatsidf+0xd4>
 4005fa0:	8809883a 	mov	r4,r17
 4005fa4:	40063bc0 	call	40063bc <__clzsi2>
 4005fa8:	01410784 	movi	r5,1054
 4005fac:	288bc83a 	sub	r5,r5,r2
 4005fb0:	01010cc4 	movi	r4,1075
 4005fb4:	2149c83a 	sub	r4,r4,r5
 4005fb8:	00c007c4 	movi	r3,31
 4005fbc:	1900160e 	bge	r3,r4,4006018 <__floatsidf+0x98>
 4005fc0:	00c104c4 	movi	r3,1043
 4005fc4:	1947c83a 	sub	r3,r3,r5
 4005fc8:	88c6983a 	sll	r3,r17,r3
 4005fcc:	00800434 	movhi	r2,16
 4005fd0:	10bfffc4 	addi	r2,r2,-1
 4005fd4:	1886703a 	and	r3,r3,r2
 4005fd8:	2941ffcc 	andi	r5,r5,2047
 4005fdc:	800d883a 	mov	r6,r16
 4005fe0:	0005883a 	mov	r2,zero
 4005fe4:	280a953a 	slli	r5,r5,20
 4005fe8:	31803fcc 	andi	r6,r6,255
 4005fec:	01000434 	movhi	r4,16
 4005ff0:	300c97fa 	slli	r6,r6,31
 4005ff4:	213fffc4 	addi	r4,r4,-1
 4005ff8:	1906703a 	and	r3,r3,r4
 4005ffc:	1946b03a 	or	r3,r3,r5
 4006000:	1986b03a 	or	r3,r3,r6
 4006004:	dfc00217 	ldw	ra,8(sp)
 4006008:	dc400117 	ldw	r17,4(sp)
 400600c:	dc000017 	ldw	r16,0(sp)
 4006010:	dec00304 	addi	sp,sp,12
 4006014:	f800283a 	ret
 4006018:	00c002c4 	movi	r3,11
 400601c:	1887c83a 	sub	r3,r3,r2
 4006020:	88c6d83a 	srl	r3,r17,r3
 4006024:	8904983a 	sll	r2,r17,r4
 4006028:	01000434 	movhi	r4,16
 400602c:	213fffc4 	addi	r4,r4,-1
 4006030:	2941ffcc 	andi	r5,r5,2047
 4006034:	1906703a 	and	r3,r3,r4
 4006038:	800d883a 	mov	r6,r16
 400603c:	003fe906 	br	4005fe4 <__alt_data_end+0xfc005fe4>
 4006040:	000d883a 	mov	r6,zero
 4006044:	000b883a 	mov	r5,zero
 4006048:	0007883a 	mov	r3,zero
 400604c:	0005883a 	mov	r2,zero
 4006050:	003fe406 	br	4005fe4 <__alt_data_end+0xfc005fe4>
 4006054:	0123c83a 	sub	r17,zero,r4
 4006058:	003fd106 	br	4005fa0 <__alt_data_end+0xfc005fa0>

0400605c <__floatunsidf>:
 400605c:	defffe04 	addi	sp,sp,-8
 4006060:	dc000015 	stw	r16,0(sp)
 4006064:	dfc00115 	stw	ra,4(sp)
 4006068:	2021883a 	mov	r16,r4
 400606c:	20002226 	beq	r4,zero,40060f8 <__floatunsidf+0x9c>
 4006070:	40063bc0 	call	40063bc <__clzsi2>
 4006074:	01010784 	movi	r4,1054
 4006078:	2089c83a 	sub	r4,r4,r2
 400607c:	01810cc4 	movi	r6,1075
 4006080:	310dc83a 	sub	r6,r6,r4
 4006084:	00c007c4 	movi	r3,31
 4006088:	1980120e 	bge	r3,r6,40060d4 <__floatunsidf+0x78>
 400608c:	00c104c4 	movi	r3,1043
 4006090:	1907c83a 	sub	r3,r3,r4
 4006094:	80ca983a 	sll	r5,r16,r3
 4006098:	00800434 	movhi	r2,16
 400609c:	10bfffc4 	addi	r2,r2,-1
 40060a0:	2101ffcc 	andi	r4,r4,2047
 40060a4:	0021883a 	mov	r16,zero
 40060a8:	288a703a 	and	r5,r5,r2
 40060ac:	2008953a 	slli	r4,r4,20
 40060b0:	00c00434 	movhi	r3,16
 40060b4:	18ffffc4 	addi	r3,r3,-1
 40060b8:	28c6703a 	and	r3,r5,r3
 40060bc:	8005883a 	mov	r2,r16
 40060c0:	1906b03a 	or	r3,r3,r4
 40060c4:	dfc00117 	ldw	ra,4(sp)
 40060c8:	dc000017 	ldw	r16,0(sp)
 40060cc:	dec00204 	addi	sp,sp,8
 40060d0:	f800283a 	ret
 40060d4:	00c002c4 	movi	r3,11
 40060d8:	188bc83a 	sub	r5,r3,r2
 40060dc:	814ad83a 	srl	r5,r16,r5
 40060e0:	00c00434 	movhi	r3,16
 40060e4:	18ffffc4 	addi	r3,r3,-1
 40060e8:	81a0983a 	sll	r16,r16,r6
 40060ec:	2101ffcc 	andi	r4,r4,2047
 40060f0:	28ca703a 	and	r5,r5,r3
 40060f4:	003fed06 	br	40060ac <__alt_data_end+0xfc0060ac>
 40060f8:	0009883a 	mov	r4,zero
 40060fc:	000b883a 	mov	r5,zero
 4006100:	003fea06 	br	40060ac <__alt_data_end+0xfc0060ac>

04006104 <__extendsfdf2>:
 4006104:	200ad5fa 	srli	r5,r4,23
 4006108:	defffd04 	addi	sp,sp,-12
 400610c:	dc400115 	stw	r17,4(sp)
 4006110:	29403fcc 	andi	r5,r5,255
 4006114:	29800044 	addi	r6,r5,1
 4006118:	04402034 	movhi	r17,128
 400611c:	dc000015 	stw	r16,0(sp)
 4006120:	8c7fffc4 	addi	r17,r17,-1
 4006124:	dfc00215 	stw	ra,8(sp)
 4006128:	31803fcc 	andi	r6,r6,255
 400612c:	00800044 	movi	r2,1
 4006130:	8922703a 	and	r17,r17,r4
 4006134:	2020d7fa 	srli	r16,r4,31
 4006138:	1180110e 	bge	r2,r6,4006180 <__extendsfdf2+0x7c>
 400613c:	880cd0fa 	srli	r6,r17,3
 4006140:	8822977a 	slli	r17,r17,29
 4006144:	2940e004 	addi	r5,r5,896
 4006148:	2941ffcc 	andi	r5,r5,2047
 400614c:	2804953a 	slli	r2,r5,20
 4006150:	01400434 	movhi	r5,16
 4006154:	800697fa 	slli	r3,r16,31
 4006158:	297fffc4 	addi	r5,r5,-1
 400615c:	314a703a 	and	r5,r6,r5
 4006160:	288ab03a 	or	r5,r5,r2
 4006164:	28c6b03a 	or	r3,r5,r3
 4006168:	8805883a 	mov	r2,r17
 400616c:	dfc00217 	ldw	ra,8(sp)
 4006170:	dc400117 	ldw	r17,4(sp)
 4006174:	dc000017 	ldw	r16,0(sp)
 4006178:	dec00304 	addi	sp,sp,12
 400617c:	f800283a 	ret
 4006180:	2800111e 	bne	r5,zero,40061c8 <__extendsfdf2+0xc4>
 4006184:	88001c26 	beq	r17,zero,40061f8 <__extendsfdf2+0xf4>
 4006188:	8809883a 	mov	r4,r17
 400618c:	40063bc0 	call	40063bc <__clzsi2>
 4006190:	00c00284 	movi	r3,10
 4006194:	18801b16 	blt	r3,r2,4006204 <__extendsfdf2+0x100>
 4006198:	018002c4 	movi	r6,11
 400619c:	308dc83a 	sub	r6,r6,r2
 40061a0:	11000544 	addi	r4,r2,21
 40061a4:	8986d83a 	srl	r3,r17,r6
 40061a8:	8922983a 	sll	r17,r17,r4
 40061ac:	0180e244 	movi	r6,905
 40061b0:	01400434 	movhi	r5,16
 40061b4:	3085c83a 	sub	r2,r6,r2
 40061b8:	297fffc4 	addi	r5,r5,-1
 40061bc:	194c703a 	and	r6,r3,r5
 40061c0:	1141ffcc 	andi	r5,r2,2047
 40061c4:	003fe006 	br	4006148 <__alt_data_end+0xfc006148>
 40061c8:	88000826 	beq	r17,zero,40061ec <__extendsfdf2+0xe8>
 40061cc:	880cd0fa 	srli	r6,r17,3
 40061d0:	00800434 	movhi	r2,16
 40061d4:	10bfffc4 	addi	r2,r2,-1
 40061d8:	31800234 	orhi	r6,r6,8
 40061dc:	8822977a 	slli	r17,r17,29
 40061e0:	308c703a 	and	r6,r6,r2
 40061e4:	0141ffc4 	movi	r5,2047
 40061e8:	003fd706 	br	4006148 <__alt_data_end+0xfc006148>
 40061ec:	0141ffc4 	movi	r5,2047
 40061f0:	000d883a 	mov	r6,zero
 40061f4:	003fd406 	br	4006148 <__alt_data_end+0xfc006148>
 40061f8:	000b883a 	mov	r5,zero
 40061fc:	000d883a 	mov	r6,zero
 4006200:	003fd106 	br	4006148 <__alt_data_end+0xfc006148>
 4006204:	11bffd44 	addi	r6,r2,-11
 4006208:	8986983a 	sll	r3,r17,r6
 400620c:	0023883a 	mov	r17,zero
 4006210:	003fe606 	br	40061ac <__alt_data_end+0xfc0061ac>

04006214 <__truncdfsf2>:
 4006214:	2810d53a 	srli	r8,r5,20
 4006218:	01c00434 	movhi	r7,16
 400621c:	39ffffc4 	addi	r7,r7,-1
 4006220:	29ce703a 	and	r7,r5,r7
 4006224:	4201ffcc 	andi	r8,r8,2047
 4006228:	380e90fa 	slli	r7,r7,3
 400622c:	200cd77a 	srli	r6,r4,29
 4006230:	42400044 	addi	r9,r8,1
 4006234:	4a41ffcc 	andi	r9,r9,2047
 4006238:	00c00044 	movi	r3,1
 400623c:	280ad7fa 	srli	r5,r5,31
 4006240:	31ceb03a 	or	r7,r6,r7
 4006244:	200490fa 	slli	r2,r4,3
 4006248:	1a40230e 	bge	r3,r9,40062d8 <__truncdfsf2+0xc4>
 400624c:	40ff2004 	addi	r3,r8,-896
 4006250:	01803f84 	movi	r6,254
 4006254:	30c01516 	blt	r6,r3,40062ac <__truncdfsf2+0x98>
 4006258:	00c0380e 	bge	zero,r3,400633c <__truncdfsf2+0x128>
 400625c:	200c91ba 	slli	r6,r4,6
 4006260:	380e90fa 	slli	r7,r7,3
 4006264:	1004d77a 	srli	r2,r2,29
 4006268:	300cc03a 	cmpne	r6,r6,zero
 400626c:	31ccb03a 	or	r6,r6,r7
 4006270:	308cb03a 	or	r6,r6,r2
 4006274:	308001cc 	andi	r2,r6,7
 4006278:	10000426 	beq	r2,zero,400628c <__truncdfsf2+0x78>
 400627c:	308003cc 	andi	r2,r6,15
 4006280:	01000104 	movi	r4,4
 4006284:	11000126 	beq	r2,r4,400628c <__truncdfsf2+0x78>
 4006288:	31800104 	addi	r6,r6,4
 400628c:	3081002c 	andhi	r2,r6,1024
 4006290:	10001626 	beq	r2,zero,40062ec <__truncdfsf2+0xd8>
 4006294:	18c00044 	addi	r3,r3,1
 4006298:	00803fc4 	movi	r2,255
 400629c:	18800326 	beq	r3,r2,40062ac <__truncdfsf2+0x98>
 40062a0:	300c91ba 	slli	r6,r6,6
 40062a4:	300cd27a 	srli	r6,r6,9
 40062a8:	00000206 	br	40062b4 <__truncdfsf2+0xa0>
 40062ac:	00ffffc4 	movi	r3,-1
 40062b0:	000d883a 	mov	r6,zero
 40062b4:	18c03fcc 	andi	r3,r3,255
 40062b8:	180895fa 	slli	r4,r3,23
 40062bc:	00c02034 	movhi	r3,128
 40062c0:	280a97fa 	slli	r5,r5,31
 40062c4:	18ffffc4 	addi	r3,r3,-1
 40062c8:	30c6703a 	and	r3,r6,r3
 40062cc:	1906b03a 	or	r3,r3,r4
 40062d0:	1944b03a 	or	r2,r3,r5
 40062d4:	f800283a 	ret
 40062d8:	40000b1e 	bne	r8,zero,4006308 <__truncdfsf2+0xf4>
 40062dc:	388cb03a 	or	r6,r7,r2
 40062e0:	0007883a 	mov	r3,zero
 40062e4:	30000426 	beq	r6,zero,40062f8 <__truncdfsf2+0xe4>
 40062e8:	01800144 	movi	r6,5
 40062ec:	00803fc4 	movi	r2,255
 40062f0:	300cd0fa 	srli	r6,r6,3
 40062f4:	18800a26 	beq	r3,r2,4006320 <__truncdfsf2+0x10c>
 40062f8:	00802034 	movhi	r2,128
 40062fc:	10bfffc4 	addi	r2,r2,-1
 4006300:	308c703a 	and	r6,r6,r2
 4006304:	003feb06 	br	40062b4 <__alt_data_end+0xfc0062b4>
 4006308:	3888b03a 	or	r4,r7,r2
 400630c:	203fe726 	beq	r4,zero,40062ac <__alt_data_end+0xfc0062ac>
 4006310:	380c90fa 	slli	r6,r7,3
 4006314:	00c03fc4 	movi	r3,255
 4006318:	31808034 	orhi	r6,r6,512
 400631c:	003fd506 	br	4006274 <__alt_data_end+0xfc006274>
 4006320:	303fe226 	beq	r6,zero,40062ac <__alt_data_end+0xfc0062ac>
 4006324:	00802034 	movhi	r2,128
 4006328:	31801034 	orhi	r6,r6,64
 400632c:	10bfffc4 	addi	r2,r2,-1
 4006330:	00ffffc4 	movi	r3,-1
 4006334:	308c703a 	and	r6,r6,r2
 4006338:	003fde06 	br	40062b4 <__alt_data_end+0xfc0062b4>
 400633c:	013ffa44 	movi	r4,-23
 4006340:	19000e16 	blt	r3,r4,400637c <__truncdfsf2+0x168>
 4006344:	01000784 	movi	r4,30
 4006348:	20c9c83a 	sub	r4,r4,r3
 400634c:	018007c4 	movi	r6,31
 4006350:	39c02034 	orhi	r7,r7,128
 4006354:	31000b16 	blt	r6,r4,4006384 <__truncdfsf2+0x170>
 4006358:	423f2084 	addi	r8,r8,-894
 400635c:	120c983a 	sll	r6,r2,r8
 4006360:	3a0e983a 	sll	r7,r7,r8
 4006364:	1104d83a 	srl	r2,r2,r4
 4006368:	300cc03a 	cmpne	r6,r6,zero
 400636c:	31ceb03a 	or	r7,r6,r7
 4006370:	388cb03a 	or	r6,r7,r2
 4006374:	0007883a 	mov	r3,zero
 4006378:	003fbe06 	br	4006274 <__alt_data_end+0xfc006274>
 400637c:	0007883a 	mov	r3,zero
 4006380:	003fd906 	br	40062e8 <__alt_data_end+0xfc0062e8>
 4006384:	01bfff84 	movi	r6,-2
 4006388:	30cdc83a 	sub	r6,r6,r3
 400638c:	00c00804 	movi	r3,32
 4006390:	398cd83a 	srl	r6,r7,r6
 4006394:	20c00726 	beq	r4,r3,40063b4 <__truncdfsf2+0x1a0>
 4006398:	423f2884 	addi	r8,r8,-862
 400639c:	3a0e983a 	sll	r7,r7,r8
 40063a0:	3884b03a 	or	r2,r7,r2
 40063a4:	1004c03a 	cmpne	r2,r2,zero
 40063a8:	118cb03a 	or	r6,r2,r6
 40063ac:	0007883a 	mov	r3,zero
 40063b0:	003fb006 	br	4006274 <__alt_data_end+0xfc006274>
 40063b4:	000f883a 	mov	r7,zero
 40063b8:	003ff906 	br	40063a0 <__alt_data_end+0xfc0063a0>

040063bc <__clzsi2>:
 40063bc:	00bfffd4 	movui	r2,65535
 40063c0:	11000536 	bltu	r2,r4,40063d8 <__clzsi2+0x1c>
 40063c4:	00803fc4 	movi	r2,255
 40063c8:	11000f36 	bltu	r2,r4,4006408 <__clzsi2+0x4c>
 40063cc:	00800804 	movi	r2,32
 40063d0:	0007883a 	mov	r3,zero
 40063d4:	00000506 	br	40063ec <__clzsi2+0x30>
 40063d8:	00804034 	movhi	r2,256
 40063dc:	10bfffc4 	addi	r2,r2,-1
 40063e0:	11000c2e 	bgeu	r2,r4,4006414 <__clzsi2+0x58>
 40063e4:	00800204 	movi	r2,8
 40063e8:	00c00604 	movi	r3,24
 40063ec:	20c8d83a 	srl	r4,r4,r3
 40063f0:	00c10074 	movhi	r3,1025
 40063f4:	18cb3884 	addi	r3,r3,11490
 40063f8:	1909883a 	add	r4,r3,r4
 40063fc:	20c00003 	ldbu	r3,0(r4)
 4006400:	10c5c83a 	sub	r2,r2,r3
 4006404:	f800283a 	ret
 4006408:	00800604 	movi	r2,24
 400640c:	00c00204 	movi	r3,8
 4006410:	003ff606 	br	40063ec <__alt_data_end+0xfc0063ec>
 4006414:	00800404 	movi	r2,16
 4006418:	1007883a 	mov	r3,r2
 400641c:	003ff306 	br	40063ec <__alt_data_end+0xfc0063ec>

04006420 <memcpy>:
 4006420:	defffd04 	addi	sp,sp,-12
 4006424:	dfc00215 	stw	ra,8(sp)
 4006428:	dc400115 	stw	r17,4(sp)
 400642c:	dc000015 	stw	r16,0(sp)
 4006430:	00c003c4 	movi	r3,15
 4006434:	2005883a 	mov	r2,r4
 4006438:	1980452e 	bgeu	r3,r6,4006550 <memcpy+0x130>
 400643c:	2906b03a 	or	r3,r5,r4
 4006440:	18c000cc 	andi	r3,r3,3
 4006444:	1800441e 	bne	r3,zero,4006558 <memcpy+0x138>
 4006448:	347ffc04 	addi	r17,r6,-16
 400644c:	8822d13a 	srli	r17,r17,4
 4006450:	28c00104 	addi	r3,r5,4
 4006454:	23400104 	addi	r13,r4,4
 4006458:	8820913a 	slli	r16,r17,4
 400645c:	2b000204 	addi	r12,r5,8
 4006460:	22c00204 	addi	r11,r4,8
 4006464:	84000504 	addi	r16,r16,20
 4006468:	2a800304 	addi	r10,r5,12
 400646c:	22400304 	addi	r9,r4,12
 4006470:	2c21883a 	add	r16,r5,r16
 4006474:	2811883a 	mov	r8,r5
 4006478:	200f883a 	mov	r7,r4
 400647c:	41000017 	ldw	r4,0(r8)
 4006480:	1fc00017 	ldw	ra,0(r3)
 4006484:	63c00017 	ldw	r15,0(r12)
 4006488:	39000015 	stw	r4,0(r7)
 400648c:	53800017 	ldw	r14,0(r10)
 4006490:	6fc00015 	stw	ra,0(r13)
 4006494:	5bc00015 	stw	r15,0(r11)
 4006498:	4b800015 	stw	r14,0(r9)
 400649c:	18c00404 	addi	r3,r3,16
 40064a0:	39c00404 	addi	r7,r7,16
 40064a4:	42000404 	addi	r8,r8,16
 40064a8:	6b400404 	addi	r13,r13,16
 40064ac:	63000404 	addi	r12,r12,16
 40064b0:	5ac00404 	addi	r11,r11,16
 40064b4:	52800404 	addi	r10,r10,16
 40064b8:	4a400404 	addi	r9,r9,16
 40064bc:	1c3fef1e 	bne	r3,r16,400647c <__alt_data_end+0xfc00647c>
 40064c0:	89c00044 	addi	r7,r17,1
 40064c4:	380e913a 	slli	r7,r7,4
 40064c8:	310003cc 	andi	r4,r6,15
 40064cc:	02c000c4 	movi	r11,3
 40064d0:	11c7883a 	add	r3,r2,r7
 40064d4:	29cb883a 	add	r5,r5,r7
 40064d8:	5900212e 	bgeu	r11,r4,4006560 <memcpy+0x140>
 40064dc:	1813883a 	mov	r9,r3
 40064e0:	2811883a 	mov	r8,r5
 40064e4:	200f883a 	mov	r7,r4
 40064e8:	42800017 	ldw	r10,0(r8)
 40064ec:	4a400104 	addi	r9,r9,4
 40064f0:	39ffff04 	addi	r7,r7,-4
 40064f4:	4abfff15 	stw	r10,-4(r9)
 40064f8:	42000104 	addi	r8,r8,4
 40064fc:	59fffa36 	bltu	r11,r7,40064e8 <__alt_data_end+0xfc0064e8>
 4006500:	213fff04 	addi	r4,r4,-4
 4006504:	2008d0ba 	srli	r4,r4,2
 4006508:	318000cc 	andi	r6,r6,3
 400650c:	21000044 	addi	r4,r4,1
 4006510:	2109883a 	add	r4,r4,r4
 4006514:	2109883a 	add	r4,r4,r4
 4006518:	1907883a 	add	r3,r3,r4
 400651c:	290b883a 	add	r5,r5,r4
 4006520:	30000626 	beq	r6,zero,400653c <memcpy+0x11c>
 4006524:	198d883a 	add	r6,r3,r6
 4006528:	29c00003 	ldbu	r7,0(r5)
 400652c:	18c00044 	addi	r3,r3,1
 4006530:	29400044 	addi	r5,r5,1
 4006534:	19ffffc5 	stb	r7,-1(r3)
 4006538:	19bffb1e 	bne	r3,r6,4006528 <__alt_data_end+0xfc006528>
 400653c:	dfc00217 	ldw	ra,8(sp)
 4006540:	dc400117 	ldw	r17,4(sp)
 4006544:	dc000017 	ldw	r16,0(sp)
 4006548:	dec00304 	addi	sp,sp,12
 400654c:	f800283a 	ret
 4006550:	2007883a 	mov	r3,r4
 4006554:	003ff206 	br	4006520 <__alt_data_end+0xfc006520>
 4006558:	2007883a 	mov	r3,r4
 400655c:	003ff106 	br	4006524 <__alt_data_end+0xfc006524>
 4006560:	200d883a 	mov	r6,r4
 4006564:	003fee06 	br	4006520 <__alt_data_end+0xfc006520>

04006568 <_snprintf_r>:
 4006568:	30003116 	blt	r6,zero,4006630 <_snprintf_r+0xc8>
 400656c:	deffe404 	addi	sp,sp,-112
 4006570:	00c08204 	movi	r3,520
 4006574:	dc001a15 	stw	r16,104(sp)
 4006578:	3005883a 	mov	r2,r6
 400657c:	dfc01b15 	stw	ra,108(sp)
 4006580:	d8c0030d 	sth	r3,12(sp)
 4006584:	d9400015 	stw	r5,0(sp)
 4006588:	d9400415 	stw	r5,16(sp)
 400658c:	380d883a 	mov	r6,r7
 4006590:	2021883a 	mov	r16,r4
 4006594:	10001026 	beq	r2,zero,40065d8 <_snprintf_r+0x70>
 4006598:	10bfffc4 	addi	r2,r2,-1
 400659c:	d8800215 	stw	r2,8(sp)
 40065a0:	d8800515 	stw	r2,20(sp)
 40065a4:	d9c01c04 	addi	r7,sp,112
 40065a8:	00bfffc4 	movi	r2,-1
 40065ac:	d80b883a 	mov	r5,sp
 40065b0:	d880038d 	sth	r2,14(sp)
 40065b4:	40067240 	call	4006724 <___svfprintf_internal_r>
 40065b8:	00ffffc4 	movi	r3,-1
 40065bc:	10c01316 	blt	r2,r3,400660c <_snprintf_r+0xa4>
 40065c0:	d8c00017 	ldw	r3,0(sp)
 40065c4:	18000005 	stb	zero,0(r3)
 40065c8:	dfc01b17 	ldw	ra,108(sp)
 40065cc:	dc001a17 	ldw	r16,104(sp)
 40065d0:	dec01c04 	addi	sp,sp,112
 40065d4:	f800283a 	ret
 40065d8:	00bfffc4 	movi	r2,-1
 40065dc:	d9c01c04 	addi	r7,sp,112
 40065e0:	d80b883a 	mov	r5,sp
 40065e4:	d8000215 	stw	zero,8(sp)
 40065e8:	d8000515 	stw	zero,20(sp)
 40065ec:	d880038d 	sth	r2,14(sp)
 40065f0:	40067240 	call	4006724 <___svfprintf_internal_r>
 40065f4:	00ffffc4 	movi	r3,-1
 40065f8:	10c00716 	blt	r2,r3,4006618 <_snprintf_r+0xb0>
 40065fc:	dfc01b17 	ldw	ra,108(sp)
 4006600:	dc001a17 	ldw	r16,104(sp)
 4006604:	dec01c04 	addi	sp,sp,112
 4006608:	f800283a 	ret
 400660c:	00c022c4 	movi	r3,139
 4006610:	80c00015 	stw	r3,0(r16)
 4006614:	003fea06 	br	40065c0 <__alt_data_end+0xfc0065c0>
 4006618:	00c022c4 	movi	r3,139
 400661c:	80c00015 	stw	r3,0(r16)
 4006620:	dfc01b17 	ldw	ra,108(sp)
 4006624:	dc001a17 	ldw	r16,104(sp)
 4006628:	dec01c04 	addi	sp,sp,112
 400662c:	f800283a 	ret
 4006630:	008022c4 	movi	r2,139
 4006634:	20800015 	stw	r2,0(r4)
 4006638:	00bfffc4 	movi	r2,-1
 400663c:	f800283a 	ret

04006640 <snprintf>:
 4006640:	deffe304 	addi	sp,sp,-116
 4006644:	dfc01b15 	stw	ra,108(sp)
 4006648:	dc001a15 	stw	r16,104(sp)
 400664c:	d9c01c15 	stw	r7,112(sp)
 4006650:	00810074 	movhi	r2,1025
 4006654:	1093a704 	addi	r2,r2,20124
 4006658:	14000017 	ldw	r16,0(r2)
 400665c:	28002d16 	blt	r5,zero,4006714 <snprintf+0xd4>
 4006660:	00808204 	movi	r2,520
 4006664:	d880030d 	sth	r2,12(sp)
 4006668:	d9000015 	stw	r4,0(sp)
 400666c:	d9000415 	stw	r4,16(sp)
 4006670:	28001126 	beq	r5,zero,40066b8 <snprintf+0x78>
 4006674:	28bfffc4 	addi	r2,r5,-1
 4006678:	d8800215 	stw	r2,8(sp)
 400667c:	d8800515 	stw	r2,20(sp)
 4006680:	d9c01c04 	addi	r7,sp,112
 4006684:	00bfffc4 	movi	r2,-1
 4006688:	d80b883a 	mov	r5,sp
 400668c:	8009883a 	mov	r4,r16
 4006690:	d880038d 	sth	r2,14(sp)
 4006694:	40067240 	call	4006724 <___svfprintf_internal_r>
 4006698:	00ffffc4 	movi	r3,-1
 400669c:	10c01416 	blt	r2,r3,40066f0 <snprintf+0xb0>
 40066a0:	d8c00017 	ldw	r3,0(sp)
 40066a4:	18000005 	stb	zero,0(r3)
 40066a8:	dfc01b17 	ldw	ra,108(sp)
 40066ac:	dc001a17 	ldw	r16,104(sp)
 40066b0:	dec01d04 	addi	sp,sp,116
 40066b4:	f800283a 	ret
 40066b8:	00bfffc4 	movi	r2,-1
 40066bc:	d9c01c04 	addi	r7,sp,112
 40066c0:	d80b883a 	mov	r5,sp
 40066c4:	8009883a 	mov	r4,r16
 40066c8:	d8000215 	stw	zero,8(sp)
 40066cc:	d8000515 	stw	zero,20(sp)
 40066d0:	d880038d 	sth	r2,14(sp)
 40066d4:	40067240 	call	4006724 <___svfprintf_internal_r>
 40066d8:	00ffffc4 	movi	r3,-1
 40066dc:	10c00716 	blt	r2,r3,40066fc <snprintf+0xbc>
 40066e0:	dfc01b17 	ldw	ra,108(sp)
 40066e4:	dc001a17 	ldw	r16,104(sp)
 40066e8:	dec01d04 	addi	sp,sp,116
 40066ec:	f800283a 	ret
 40066f0:	00c022c4 	movi	r3,139
 40066f4:	80c00015 	stw	r3,0(r16)
 40066f8:	003fe906 	br	40066a0 <__alt_data_end+0xfc0066a0>
 40066fc:	00c022c4 	movi	r3,139
 4006700:	80c00015 	stw	r3,0(r16)
 4006704:	dfc01b17 	ldw	ra,108(sp)
 4006708:	dc001a17 	ldw	r16,104(sp)
 400670c:	dec01d04 	addi	sp,sp,116
 4006710:	f800283a 	ret
 4006714:	008022c4 	movi	r2,139
 4006718:	80800015 	stw	r2,0(r16)
 400671c:	00bfffc4 	movi	r2,-1
 4006720:	003fef06 	br	40066e0 <__alt_data_end+0xfc0066e0>

04006724 <___svfprintf_internal_r>:
 4006724:	deffb704 	addi	sp,sp,-292
 4006728:	dfc04815 	stw	ra,288(sp)
 400672c:	ddc04615 	stw	r23,280(sp)
 4006730:	d9402d15 	stw	r5,180(sp)
 4006734:	d9003915 	stw	r4,228(sp)
 4006738:	302f883a 	mov	r23,r6
 400673c:	d9c02e15 	stw	r7,184(sp)
 4006740:	df004715 	stw	fp,284(sp)
 4006744:	dd804515 	stw	r22,276(sp)
 4006748:	dd404415 	stw	r21,272(sp)
 400674c:	dd004315 	stw	r20,268(sp)
 4006750:	dcc04215 	stw	r19,264(sp)
 4006754:	dc804115 	stw	r18,260(sp)
 4006758:	dc404015 	stw	r17,256(sp)
 400675c:	dc003f15 	stw	r16,252(sp)
 4006760:	400a33c0 	call	400a33c <_localeconv_r>
 4006764:	10800017 	ldw	r2,0(r2)
 4006768:	1009883a 	mov	r4,r2
 400676c:	d8803415 	stw	r2,208(sp)
 4006770:	400beb80 	call	400beb8 <strlen>
 4006774:	d8c02d17 	ldw	r3,180(sp)
 4006778:	d8803815 	stw	r2,224(sp)
 400677c:	1880030b 	ldhu	r2,12(r3)
 4006780:	1080200c 	andi	r2,r2,128
 4006784:	10000226 	beq	r2,zero,4006790 <___svfprintf_internal_r+0x6c>
 4006788:	18800417 	ldw	r2,16(r3)
 400678c:	1006b126 	beq	r2,zero,4008254 <___svfprintf_internal_r+0x1b30>
 4006790:	dcc03917 	ldw	r19,228(sp)
 4006794:	d8c00404 	addi	r3,sp,16
 4006798:	05410074 	movhi	r21,1025
 400679c:	d9001e04 	addi	r4,sp,120
 40067a0:	ad4b8984 	addi	r21,r21,11814
 40067a4:	d8c01e15 	stw	r3,120(sp)
 40067a8:	d8002015 	stw	zero,128(sp)
 40067ac:	d8001f15 	stw	zero,124(sp)
 40067b0:	d8003315 	stw	zero,204(sp)
 40067b4:	d8003615 	stw	zero,216(sp)
 40067b8:	d8003715 	stw	zero,220(sp)
 40067bc:	1811883a 	mov	r8,r3
 40067c0:	d8003a15 	stw	zero,232(sp)
 40067c4:	d8003b15 	stw	zero,236(sp)
 40067c8:	d8002f15 	stw	zero,188(sp)
 40067cc:	d9002815 	stw	r4,160(sp)
 40067d0:	b8800007 	ldb	r2,0(r23)
 40067d4:	10027726 	beq	r2,zero,40071b4 <___svfprintf_internal_r+0xa90>
 40067d8:	00c00944 	movi	r3,37
 40067dc:	b823883a 	mov	r17,r23
 40067e0:	10c0021e 	bne	r2,r3,40067ec <___svfprintf_internal_r+0xc8>
 40067e4:	00001406 	br	4006838 <___svfprintf_internal_r+0x114>
 40067e8:	10c00326 	beq	r2,r3,40067f8 <___svfprintf_internal_r+0xd4>
 40067ec:	8c400044 	addi	r17,r17,1
 40067f0:	88800007 	ldb	r2,0(r17)
 40067f4:	103ffc1e 	bne	r2,zero,40067e8 <__alt_data_end+0xfc0067e8>
 40067f8:	8de1c83a 	sub	r16,r17,r23
 40067fc:	80000e26 	beq	r16,zero,4006838 <___svfprintf_internal_r+0x114>
 4006800:	d8c02017 	ldw	r3,128(sp)
 4006804:	d8801f17 	ldw	r2,124(sp)
 4006808:	45c00015 	stw	r23,0(r8)
 400680c:	1c07883a 	add	r3,r3,r16
 4006810:	10800044 	addi	r2,r2,1
 4006814:	d8c02015 	stw	r3,128(sp)
 4006818:	44000115 	stw	r16,4(r8)
 400681c:	d8801f15 	stw	r2,124(sp)
 4006820:	00c001c4 	movi	r3,7
 4006824:	18809916 	blt	r3,r2,4006a8c <___svfprintf_internal_r+0x368>
 4006828:	42000204 	addi	r8,r8,8
 400682c:	d9402f17 	ldw	r5,188(sp)
 4006830:	2c0b883a 	add	r5,r5,r16
 4006834:	d9402f15 	stw	r5,188(sp)
 4006838:	88800007 	ldb	r2,0(r17)
 400683c:	10009a26 	beq	r2,zero,4006aa8 <___svfprintf_internal_r+0x384>
 4006840:	8dc00044 	addi	r23,r17,1
 4006844:	8c400047 	ldb	r17,1(r17)
 4006848:	0021883a 	mov	r16,zero
 400684c:	00bfffc4 	movi	r2,-1
 4006850:	0025883a 	mov	r18,zero
 4006854:	dc002905 	stb	r16,164(sp)
 4006858:	d8002785 	stb	zero,158(sp)
 400685c:	d8002b05 	stb	zero,172(sp)
 4006860:	d8802a15 	stw	r2,168(sp)
 4006864:	d8003115 	stw	zero,196(sp)
 4006868:	05001604 	movi	r20,88
 400686c:	05800244 	movi	r22,9
 4006870:	4039883a 	mov	fp,r8
 4006874:	9021883a 	mov	r16,r18
 4006878:	bdc00044 	addi	r23,r23,1
 400687c:	88bff804 	addi	r2,r17,-32
 4006880:	a0831e36 	bltu	r20,r2,40074fc <___svfprintf_internal_r+0xdd8>
 4006884:	100490ba 	slli	r2,r2,2
 4006888:	00c10034 	movhi	r3,1024
 400688c:	18da2704 	addi	r3,r3,26780
 4006890:	10c5883a 	add	r2,r2,r3
 4006894:	10800017 	ldw	r2,0(r2)
 4006898:	1000683a 	jmp	r2
 400689c:	04007444 	movi	r16,465
 40068a0:	040074fc 	xorhi	r16,zero,467
 40068a4:	040074fc 	xorhi	r16,zero,467
 40068a8:	04007438 	rdprs	r16,zero,464
 40068ac:	040074fc 	xorhi	r16,zero,467
 40068b0:	040074fc 	xorhi	r16,zero,467
 40068b4:	040074fc 	xorhi	r16,zero,467
 40068b8:	040074fc 	xorhi	r16,zero,467
 40068bc:	040074fc 	xorhi	r16,zero,467
 40068c0:	040074fc 	xorhi	r16,zero,467
 40068c4:	04006b04 	movi	r16,428
 40068c8:	04007348 	cmpgei	r16,zero,461
 40068cc:	040074fc 	xorhi	r16,zero,467
 40068d0:	04006a10 	cmplti	r16,zero,424
 40068d4:	04006b28 	cmpgeui	r16,zero,428
 40068d8:	040074fc 	xorhi	r16,zero,467
 40068dc:	04006bb4 	movhi	r16,430
 40068e0:	04006b78 	rdprs	r16,zero,429
 40068e4:	04006b78 	rdprs	r16,zero,429
 40068e8:	04006b78 	rdprs	r16,zero,429
 40068ec:	04006b78 	rdprs	r16,zero,429
 40068f0:	04006b78 	rdprs	r16,zero,429
 40068f4:	04006b78 	rdprs	r16,zero,429
 40068f8:	04006b78 	rdprs	r16,zero,429
 40068fc:	04006b78 	rdprs	r16,zero,429
 4006900:	04006b78 	rdprs	r16,zero,429
 4006904:	040074fc 	xorhi	r16,zero,467
 4006908:	040074fc 	xorhi	r16,zero,467
 400690c:	040074fc 	xorhi	r16,zero,467
 4006910:	040074fc 	xorhi	r16,zero,467
 4006914:	040074fc 	xorhi	r16,zero,467
 4006918:	040074fc 	xorhi	r16,zero,467
 400691c:	040074fc 	xorhi	r16,zero,467
 4006920:	040074fc 	xorhi	r16,zero,467
 4006924:	040074fc 	xorhi	r16,zero,467
 4006928:	040074fc 	xorhi	r16,zero,467
 400692c:	04006c78 	rdprs	r16,zero,433
 4006930:	04006bc0 	call	4006bc <__alt_mem_onchip_flash_data-0x1bff944>
 4006934:	040074fc 	xorhi	r16,zero,467
 4006938:	04006bc0 	call	4006bc <__alt_mem_onchip_flash_data-0x1bff944>
 400693c:	040074fc 	xorhi	r16,zero,467
 4006940:	040074fc 	xorhi	r16,zero,467
 4006944:	040074fc 	xorhi	r16,zero,467
 4006948:	040074fc 	xorhi	r16,zero,467
 400694c:	04006c6c 	andhi	r16,zero,433
 4006950:	040074fc 	xorhi	r16,zero,467
 4006954:	040074fc 	xorhi	r16,zero,467
 4006958:	04006d40 	call	4006d4 <__alt_mem_onchip_flash_data-0x1bff92c>
 400695c:	040074fc 	xorhi	r16,zero,467
 4006960:	040074fc 	xorhi	r16,zero,467
 4006964:	040074fc 	xorhi	r16,zero,467
 4006968:	040074fc 	xorhi	r16,zero,467
 400696c:	040074fc 	xorhi	r16,zero,467
 4006970:	040071bc 	xorhi	r16,zero,454
 4006974:	040074fc 	xorhi	r16,zero,467
 4006978:	040074fc 	xorhi	r16,zero,467
 400697c:	04007228 	cmpgeui	r16,zero,456
 4006980:	040074fc 	xorhi	r16,zero,467
 4006984:	040074fc 	xorhi	r16,zero,467
 4006988:	040074fc 	xorhi	r16,zero,467
 400698c:	040074fc 	xorhi	r16,zero,467
 4006990:	040074fc 	xorhi	r16,zero,467
 4006994:	040074fc 	xorhi	r16,zero,467
 4006998:	040074fc 	xorhi	r16,zero,467
 400699c:	040074fc 	xorhi	r16,zero,467
 40069a0:	040074fc 	xorhi	r16,zero,467
 40069a4:	040074fc 	xorhi	r16,zero,467
 40069a8:	040072e4 	muli	r16,zero,459
 40069ac:	04007464 	muli	r16,zero,465
 40069b0:	04006bc0 	call	4006bc <__alt_mem_onchip_flash_data-0x1bff944>
 40069b4:	04006bc0 	call	4006bc <__alt_mem_onchip_flash_data-0x1bff944>
 40069b8:	04006bc0 	call	4006bc <__alt_mem_onchip_flash_data-0x1bff944>
 40069bc:	040074d8 	cmpnei	r16,zero,467
 40069c0:	04007464 	muli	r16,zero,465
 40069c4:	040074fc 	xorhi	r16,zero,467
 40069c8:	040074fc 	xorhi	r16,zero,467
 40069cc:	04007484 	movi	r16,466
 40069d0:	040074fc 	xorhi	r16,zero,467
 40069d4:	04007498 	cmpnei	r16,zero,466
 40069d8:	04007328 	cmpgeui	r16,zero,460
 40069dc:	04006a1c 	xori	r16,zero,424
 40069e0:	04007360 	cmpeqi	r16,zero,461
 40069e4:	040074fc 	xorhi	r16,zero,467
 40069e8:	0400736c 	andhi	r16,zero,461
 40069ec:	040074fc 	xorhi	r16,zero,467
 40069f0:	040073d0 	cmplti	r16,zero,463
 40069f4:	040074fc 	xorhi	r16,zero,467
 40069f8:	040074fc 	xorhi	r16,zero,467
 40069fc:	040073f0 	cmpltui	r16,zero,463
 4006a00:	d8c03117 	ldw	r3,196(sp)
 4006a04:	d8802e15 	stw	r2,184(sp)
 4006a08:	00c7c83a 	sub	r3,zero,r3
 4006a0c:	d8c03115 	stw	r3,196(sp)
 4006a10:	84000114 	ori	r16,r16,4
 4006a14:	bc400007 	ldb	r17,0(r23)
 4006a18:	003f9706 	br	4006878 <__alt_data_end+0xfc006878>
 4006a1c:	00800c04 	movi	r2,48
 4006a20:	d8802705 	stb	r2,156(sp)
 4006a24:	00801e04 	movi	r2,120
 4006a28:	d8802745 	stb	r2,157(sp)
 4006a2c:	d9002a17 	ldw	r4,168(sp)
 4006a30:	d8802e17 	ldw	r2,184(sp)
 4006a34:	d8002785 	stb	zero,158(sp)
 4006a38:	e011883a 	mov	r8,fp
 4006a3c:	10c00104 	addi	r3,r2,4
 4006a40:	15000017 	ldw	r20,0(r2)
 4006a44:	002d883a 	mov	r22,zero
 4006a48:	80800094 	ori	r2,r16,2
 4006a4c:	2002b616 	blt	r4,zero,4007528 <___svfprintf_internal_r+0xe04>
 4006a50:	00bfdfc4 	movi	r2,-129
 4006a54:	80a4703a 	and	r18,r16,r2
 4006a58:	d8c02e15 	stw	r3,184(sp)
 4006a5c:	94800094 	ori	r18,r18,2
 4006a60:	a002a01e 	bne	r20,zero,40074e4 <___svfprintf_internal_r+0xdc0>
 4006a64:	01410074 	movhi	r5,1025
 4006a68:	294b8204 	addi	r5,r5,11784
 4006a6c:	d9403a15 	stw	r5,232(sp)
 4006a70:	04401e04 	movi	r17,120
 4006a74:	d8c02a17 	ldw	r3,168(sp)
 4006a78:	0039883a 	mov	fp,zero
 4006a7c:	1801e626 	beq	r3,zero,4007218 <___svfprintf_internal_r+0xaf4>
 4006a80:	0029883a 	mov	r20,zero
 4006a84:	002d883a 	mov	r22,zero
 4006a88:	00020506 	br	40072a0 <___svfprintf_internal_r+0xb7c>
 4006a8c:	d9402d17 	ldw	r5,180(sp)
 4006a90:	d9801e04 	addi	r6,sp,120
 4006a94:	9809883a 	mov	r4,r19
 4006a98:	400bf500 	call	400bf50 <__ssprint_r>
 4006a9c:	1000081e 	bne	r2,zero,4006ac0 <___svfprintf_internal_r+0x39c>
 4006aa0:	da000404 	addi	r8,sp,16
 4006aa4:	003f6106 	br	400682c <__alt_data_end+0xfc00682c>
 4006aa8:	d8802017 	ldw	r2,128(sp)
 4006aac:	10000426 	beq	r2,zero,4006ac0 <___svfprintf_internal_r+0x39c>
 4006ab0:	d9402d17 	ldw	r5,180(sp)
 4006ab4:	d9003917 	ldw	r4,228(sp)
 4006ab8:	d9801e04 	addi	r6,sp,120
 4006abc:	400bf500 	call	400bf50 <__ssprint_r>
 4006ac0:	d8802d17 	ldw	r2,180(sp)
 4006ac4:	10c0030b 	ldhu	r3,12(r2)
 4006ac8:	d8802f17 	ldw	r2,188(sp)
 4006acc:	18c0100c 	andi	r3,r3,64
 4006ad0:	1806251e 	bne	r3,zero,4008368 <___svfprintf_internal_r+0x1c44>
 4006ad4:	dfc04817 	ldw	ra,288(sp)
 4006ad8:	df004717 	ldw	fp,284(sp)
 4006adc:	ddc04617 	ldw	r23,280(sp)
 4006ae0:	dd804517 	ldw	r22,276(sp)
 4006ae4:	dd404417 	ldw	r21,272(sp)
 4006ae8:	dd004317 	ldw	r20,268(sp)
 4006aec:	dcc04217 	ldw	r19,264(sp)
 4006af0:	dc804117 	ldw	r18,260(sp)
 4006af4:	dc404017 	ldw	r17,256(sp)
 4006af8:	dc003f17 	ldw	r16,252(sp)
 4006afc:	dec04904 	addi	sp,sp,292
 4006b00:	f800283a 	ret
 4006b04:	d9002e17 	ldw	r4,184(sp)
 4006b08:	d9402e17 	ldw	r5,184(sp)
 4006b0c:	21000017 	ldw	r4,0(r4)
 4006b10:	28800104 	addi	r2,r5,4
 4006b14:	d9003115 	stw	r4,196(sp)
 4006b18:	203fb916 	blt	r4,zero,4006a00 <__alt_data_end+0xfc006a00>
 4006b1c:	d8802e15 	stw	r2,184(sp)
 4006b20:	bc400007 	ldb	r17,0(r23)
 4006b24:	003f5406 	br	4006878 <__alt_data_end+0xfc006878>
 4006b28:	bc400007 	ldb	r17,0(r23)
 4006b2c:	01000a84 	movi	r4,42
 4006b30:	b8c00044 	addi	r3,r23,1
 4006b34:	89076926 	beq	r17,r4,40088dc <___svfprintf_internal_r+0x21b8>
 4006b38:	8cbff404 	addi	r18,r17,-48
 4006b3c:	b486b936 	bltu	r22,r18,4008624 <___svfprintf_internal_r+0x1f00>
 4006b40:	0009883a 	mov	r4,zero
 4006b44:	1823883a 	mov	r17,r3
 4006b48:	01400284 	movi	r5,10
 4006b4c:	40024600 	call	4002460 <__mulsi3>
 4006b50:	88c00007 	ldb	r3,0(r17)
 4006b54:	1489883a 	add	r4,r2,r18
 4006b58:	8dc00044 	addi	r23,r17,1
 4006b5c:	1cbff404 	addi	r18,r3,-48
 4006b60:	b823883a 	mov	r17,r23
 4006b64:	b4bff82e 	bgeu	r22,r18,4006b48 <__alt_data_end+0xfc006b48>
 4006b68:	1823883a 	mov	r17,r3
 4006b6c:	20060416 	blt	r4,zero,4008380 <___svfprintf_internal_r+0x1c5c>
 4006b70:	d9002a15 	stw	r4,168(sp)
 4006b74:	003f4106 	br	400687c <__alt_data_end+0xfc00687c>
 4006b78:	8cbff404 	addi	r18,r17,-48
 4006b7c:	d8003115 	stw	zero,196(sp)
 4006b80:	0009883a 	mov	r4,zero
 4006b84:	b823883a 	mov	r17,r23
 4006b88:	01400284 	movi	r5,10
 4006b8c:	40024600 	call	4002460 <__mulsi3>
 4006b90:	88c00007 	ldb	r3,0(r17)
 4006b94:	9089883a 	add	r4,r18,r2
 4006b98:	bdc00044 	addi	r23,r23,1
 4006b9c:	1cbff404 	addi	r18,r3,-48
 4006ba0:	b823883a 	mov	r17,r23
 4006ba4:	b4bff82e 	bgeu	r22,r18,4006b88 <__alt_data_end+0xfc006b88>
 4006ba8:	1823883a 	mov	r17,r3
 4006bac:	d9003115 	stw	r4,196(sp)
 4006bb0:	003f3206 	br	400687c <__alt_data_end+0xfc00687c>
 4006bb4:	84002014 	ori	r16,r16,128
 4006bb8:	bc400007 	ldb	r17,0(r23)
 4006bbc:	003f2e06 	br	4006878 <__alt_data_end+0xfc006878>
 4006bc0:	8025883a 	mov	r18,r16
 4006bc4:	dc002903 	ldbu	r16,164(sp)
 4006bc8:	e011883a 	mov	r8,fp
 4006bcc:	84003fcc 	andi	r16,r16,255
 4006bd0:	8007721e 	bne	r16,zero,400899c <___svfprintf_internal_r+0x2278>
 4006bd4:	9080020c 	andi	r2,r18,8
 4006bd8:	1004a526 	beq	r2,zero,4007e70 <___svfprintf_internal_r+0x174c>
 4006bdc:	d9002e17 	ldw	r4,184(sp)
 4006be0:	d9402e17 	ldw	r5,184(sp)
 4006be4:	d8802e17 	ldw	r2,184(sp)
 4006be8:	21000017 	ldw	r4,0(r4)
 4006bec:	29400117 	ldw	r5,4(r5)
 4006bf0:	10800204 	addi	r2,r2,8
 4006bf4:	d9003615 	stw	r4,216(sp)
 4006bf8:	d9403715 	stw	r5,220(sp)
 4006bfc:	d8802e15 	stw	r2,184(sp)
 4006c00:	d9003617 	ldw	r4,216(sp)
 4006c04:	d9403717 	ldw	r5,220(sp)
 4006c08:	da003e15 	stw	r8,248(sp)
 4006c0c:	04000044 	movi	r16,1
 4006c10:	400bd140 	call	400bd14 <__fpclassifyd>
 4006c14:	da003e17 	ldw	r8,248(sp)
 4006c18:	1404731e 	bne	r2,r16,4007de8 <___svfprintf_internal_r+0x16c4>
 4006c1c:	d9003617 	ldw	r4,216(sp)
 4006c20:	d9403717 	ldw	r5,220(sp)
 4006c24:	000d883a 	mov	r6,zero
 4006c28:	000f883a 	mov	r7,zero
 4006c2c:	4004ca40 	call	4004ca4 <__ledf2>
 4006c30:	da003e17 	ldw	r8,248(sp)
 4006c34:	10061b16 	blt	r2,zero,40084a4 <___svfprintf_internal_r+0x1d80>
 4006c38:	df002783 	ldbu	fp,158(sp)
 4006c3c:	008011c4 	movi	r2,71
 4006c40:	1445810e 	bge	r2,r17,4008248 <___svfprintf_internal_r+0x1b24>
 4006c44:	04010074 	movhi	r16,1025
 4006c48:	840b7a04 	addi	r16,r16,11752
 4006c4c:	00c000c4 	movi	r3,3
 4006c50:	00bfdfc4 	movi	r2,-129
 4006c54:	d8c02915 	stw	r3,164(sp)
 4006c58:	90a4703a 	and	r18,r18,r2
 4006c5c:	d8c02b15 	stw	r3,172(sp)
 4006c60:	d8002a15 	stw	zero,168(sp)
 4006c64:	d8003215 	stw	zero,200(sp)
 4006c68:	00006c06 	br	4006e1c <___svfprintf_internal_r+0x6f8>
 4006c6c:	84000214 	ori	r16,r16,8
 4006c70:	bc400007 	ldb	r17,0(r23)
 4006c74:	003f0006 	br	4006878 <__alt_data_end+0xfc006878>
 4006c78:	8025883a 	mov	r18,r16
 4006c7c:	dc002903 	ldbu	r16,164(sp)
 4006c80:	e011883a 	mov	r8,fp
 4006c84:	84003fcc 	andi	r16,r16,255
 4006c88:	80073f1e 	bne	r16,zero,4008988 <___svfprintf_internal_r+0x2264>
 4006c8c:	94800414 	ori	r18,r18,16
 4006c90:	9080080c 	andi	r2,r18,32
 4006c94:	1003bb26 	beq	r2,zero,4007b84 <___svfprintf_internal_r+0x1460>
 4006c98:	d9002e17 	ldw	r4,184(sp)
 4006c9c:	20800117 	ldw	r2,4(r4)
 4006ca0:	25000017 	ldw	r20,0(r4)
 4006ca4:	21000204 	addi	r4,r4,8
 4006ca8:	d9002e15 	stw	r4,184(sp)
 4006cac:	102d883a 	mov	r22,r2
 4006cb0:	1003bd16 	blt	r2,zero,4007ba8 <___svfprintf_internal_r+0x1484>
 4006cb4:	d9002a17 	ldw	r4,168(sp)
 4006cb8:	df002783 	ldbu	fp,158(sp)
 4006cbc:	2003d016 	blt	r4,zero,4007c00 <___svfprintf_internal_r+0x14dc>
 4006cc0:	00ffdfc4 	movi	r3,-129
 4006cc4:	a584b03a 	or	r2,r20,r22
 4006cc8:	90e4703a 	and	r18,r18,r3
 4006ccc:	10015026 	beq	r2,zero,4007210 <___svfprintf_internal_r+0xaec>
 4006cd0:	b0037026 	beq	r22,zero,4007a94 <___svfprintf_internal_r+0x1370>
 4006cd4:	dc402915 	stw	r17,164(sp)
 4006cd8:	dc001e04 	addi	r16,sp,120
 4006cdc:	b023883a 	mov	r17,r22
 4006ce0:	402d883a 	mov	r22,r8
 4006ce4:	a009883a 	mov	r4,r20
 4006ce8:	880b883a 	mov	r5,r17
 4006cec:	01800284 	movi	r6,10
 4006cf0:	000f883a 	mov	r7,zero
 4006cf4:	400e7b40 	call	400e7b4 <__umoddi3>
 4006cf8:	10800c04 	addi	r2,r2,48
 4006cfc:	843fffc4 	addi	r16,r16,-1
 4006d00:	a009883a 	mov	r4,r20
 4006d04:	880b883a 	mov	r5,r17
 4006d08:	80800005 	stb	r2,0(r16)
 4006d0c:	01800284 	movi	r6,10
 4006d10:	000f883a 	mov	r7,zero
 4006d14:	400e1b80 	call	400e1b8 <__udivdi3>
 4006d18:	1029883a 	mov	r20,r2
 4006d1c:	10c4b03a 	or	r2,r2,r3
 4006d20:	1823883a 	mov	r17,r3
 4006d24:	103fef1e 	bne	r2,zero,4006ce4 <__alt_data_end+0xfc006ce4>
 4006d28:	d8c02817 	ldw	r3,160(sp)
 4006d2c:	dc402917 	ldw	r17,164(sp)
 4006d30:	b011883a 	mov	r8,r22
 4006d34:	1c07c83a 	sub	r3,r3,r16
 4006d38:	d8c02b15 	stw	r3,172(sp)
 4006d3c:	00003106 	br	4006e04 <___svfprintf_internal_r+0x6e0>
 4006d40:	8025883a 	mov	r18,r16
 4006d44:	dc002903 	ldbu	r16,164(sp)
 4006d48:	e011883a 	mov	r8,fp
 4006d4c:	84003fcc 	andi	r16,r16,255
 4006d50:	80070a1e 	bne	r16,zero,400897c <___svfprintf_internal_r+0x2258>
 4006d54:	94800414 	ori	r18,r18,16
 4006d58:	9080080c 	andi	r2,r18,32
 4006d5c:	1002f626 	beq	r2,zero,4007938 <___svfprintf_internal_r+0x1214>
 4006d60:	d9002e17 	ldw	r4,184(sp)
 4006d64:	d9402a17 	ldw	r5,168(sp)
 4006d68:	d8002785 	stb	zero,158(sp)
 4006d6c:	20800204 	addi	r2,r4,8
 4006d70:	25000017 	ldw	r20,0(r4)
 4006d74:	25800117 	ldw	r22,4(r4)
 4006d78:	28043716 	blt	r5,zero,4007e58 <___svfprintf_internal_r+0x1734>
 4006d7c:	013fdfc4 	movi	r4,-129
 4006d80:	a586b03a 	or	r3,r20,r22
 4006d84:	d8802e15 	stw	r2,184(sp)
 4006d88:	9124703a 	and	r18,r18,r4
 4006d8c:	1802f71e 	bne	r3,zero,400796c <___svfprintf_internal_r+0x1248>
 4006d90:	d9402a17 	ldw	r5,168(sp)
 4006d94:	0039883a 	mov	fp,zero
 4006d98:	2806df26 	beq	r5,zero,4008918 <___svfprintf_internal_r+0x21f4>
 4006d9c:	0029883a 	mov	r20,zero
 4006da0:	002d883a 	mov	r22,zero
 4006da4:	dc001e04 	addi	r16,sp,120
 4006da8:	a006d0fa 	srli	r3,r20,3
 4006dac:	b008977a 	slli	r4,r22,29
 4006db0:	b02cd0fa 	srli	r22,r22,3
 4006db4:	a50001cc 	andi	r20,r20,7
 4006db8:	a0800c04 	addi	r2,r20,48
 4006dbc:	843fffc4 	addi	r16,r16,-1
 4006dc0:	20e8b03a 	or	r20,r4,r3
 4006dc4:	80800005 	stb	r2,0(r16)
 4006dc8:	a586b03a 	or	r3,r20,r22
 4006dcc:	183ff61e 	bne	r3,zero,4006da8 <__alt_data_end+0xfc006da8>
 4006dd0:	90c0004c 	andi	r3,r18,1
 4006dd4:	18013f26 	beq	r3,zero,40072d4 <___svfprintf_internal_r+0xbb0>
 4006dd8:	10803fcc 	andi	r2,r2,255
 4006ddc:	1080201c 	xori	r2,r2,128
 4006de0:	10bfe004 	addi	r2,r2,-128
 4006de4:	00c00c04 	movi	r3,48
 4006de8:	10c13a26 	beq	r2,r3,40072d4 <___svfprintf_internal_r+0xbb0>
 4006dec:	80ffffc5 	stb	r3,-1(r16)
 4006df0:	d8c02817 	ldw	r3,160(sp)
 4006df4:	80bfffc4 	addi	r2,r16,-1
 4006df8:	1021883a 	mov	r16,r2
 4006dfc:	1887c83a 	sub	r3,r3,r2
 4006e00:	d8c02b15 	stw	r3,172(sp)
 4006e04:	d8802b17 	ldw	r2,172(sp)
 4006e08:	d9002a17 	ldw	r4,168(sp)
 4006e0c:	1100010e 	bge	r2,r4,4006e14 <___svfprintf_internal_r+0x6f0>
 4006e10:	2005883a 	mov	r2,r4
 4006e14:	d8802915 	stw	r2,164(sp)
 4006e18:	d8003215 	stw	zero,200(sp)
 4006e1c:	e7003fcc 	andi	fp,fp,255
 4006e20:	e700201c 	xori	fp,fp,128
 4006e24:	e73fe004 	addi	fp,fp,-128
 4006e28:	e0000326 	beq	fp,zero,4006e38 <___svfprintf_internal_r+0x714>
 4006e2c:	d8c02917 	ldw	r3,164(sp)
 4006e30:	18c00044 	addi	r3,r3,1
 4006e34:	d8c02915 	stw	r3,164(sp)
 4006e38:	90c0008c 	andi	r3,r18,2
 4006e3c:	d8c02c15 	stw	r3,176(sp)
 4006e40:	18000326 	beq	r3,zero,4006e50 <___svfprintf_internal_r+0x72c>
 4006e44:	d8c02917 	ldw	r3,164(sp)
 4006e48:	18c00084 	addi	r3,r3,2
 4006e4c:	d8c02915 	stw	r3,164(sp)
 4006e50:	90c0210c 	andi	r3,r18,132
 4006e54:	d8c03015 	stw	r3,192(sp)
 4006e58:	1801c31e 	bne	r3,zero,4007568 <___svfprintf_internal_r+0xe44>
 4006e5c:	d9003117 	ldw	r4,196(sp)
 4006e60:	d8c02917 	ldw	r3,164(sp)
 4006e64:	20e9c83a 	sub	r20,r4,r3
 4006e68:	0501bf0e 	bge	zero,r20,4007568 <___svfprintf_internal_r+0xe44>
 4006e6c:	02400404 	movi	r9,16
 4006e70:	d8c02017 	ldw	r3,128(sp)
 4006e74:	d8801f17 	ldw	r2,124(sp)
 4006e78:	4d053d0e 	bge	r9,r20,4008370 <___svfprintf_internal_r+0x1c4c>
 4006e7c:	01410074 	movhi	r5,1025
 4006e80:	294b8d84 	addi	r5,r5,11830
 4006e84:	dc403c15 	stw	r17,240(sp)
 4006e88:	d9403515 	stw	r5,212(sp)
 4006e8c:	a023883a 	mov	r17,r20
 4006e90:	482d883a 	mov	r22,r9
 4006e94:	9029883a 	mov	r20,r18
 4006e98:	070001c4 	movi	fp,7
 4006e9c:	8025883a 	mov	r18,r16
 4006ea0:	dc002d17 	ldw	r16,180(sp)
 4006ea4:	00000306 	br	4006eb4 <___svfprintf_internal_r+0x790>
 4006ea8:	8c7ffc04 	addi	r17,r17,-16
 4006eac:	42000204 	addi	r8,r8,8
 4006eb0:	b440130e 	bge	r22,r17,4006f00 <___svfprintf_internal_r+0x7dc>
 4006eb4:	01010074 	movhi	r4,1025
 4006eb8:	18c00404 	addi	r3,r3,16
 4006ebc:	10800044 	addi	r2,r2,1
 4006ec0:	210b8d84 	addi	r4,r4,11830
 4006ec4:	41000015 	stw	r4,0(r8)
 4006ec8:	45800115 	stw	r22,4(r8)
 4006ecc:	d8c02015 	stw	r3,128(sp)
 4006ed0:	d8801f15 	stw	r2,124(sp)
 4006ed4:	e0bff40e 	bge	fp,r2,4006ea8 <__alt_data_end+0xfc006ea8>
 4006ed8:	d9801e04 	addi	r6,sp,120
 4006edc:	800b883a 	mov	r5,r16
 4006ee0:	9809883a 	mov	r4,r19
 4006ee4:	400bf500 	call	400bf50 <__ssprint_r>
 4006ee8:	103ef51e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4006eec:	8c7ffc04 	addi	r17,r17,-16
 4006ef0:	d8c02017 	ldw	r3,128(sp)
 4006ef4:	d8801f17 	ldw	r2,124(sp)
 4006ef8:	da000404 	addi	r8,sp,16
 4006efc:	b47fed16 	blt	r22,r17,4006eb4 <__alt_data_end+0xfc006eb4>
 4006f00:	9021883a 	mov	r16,r18
 4006f04:	a025883a 	mov	r18,r20
 4006f08:	8829883a 	mov	r20,r17
 4006f0c:	dc403c17 	ldw	r17,240(sp)
 4006f10:	d9403517 	ldw	r5,212(sp)
 4006f14:	a0c7883a 	add	r3,r20,r3
 4006f18:	10800044 	addi	r2,r2,1
 4006f1c:	41400015 	stw	r5,0(r8)
 4006f20:	45000115 	stw	r20,4(r8)
 4006f24:	d8c02015 	stw	r3,128(sp)
 4006f28:	d8801f15 	stw	r2,124(sp)
 4006f2c:	010001c4 	movi	r4,7
 4006f30:	2082c116 	blt	r4,r2,4007a38 <___svfprintf_internal_r+0x1314>
 4006f34:	df002787 	ldb	fp,158(sp)
 4006f38:	42000204 	addi	r8,r8,8
 4006f3c:	e0000c26 	beq	fp,zero,4006f70 <___svfprintf_internal_r+0x84c>
 4006f40:	d8801f17 	ldw	r2,124(sp)
 4006f44:	d9002784 	addi	r4,sp,158
 4006f48:	18c00044 	addi	r3,r3,1
 4006f4c:	10800044 	addi	r2,r2,1
 4006f50:	41000015 	stw	r4,0(r8)
 4006f54:	01000044 	movi	r4,1
 4006f58:	41000115 	stw	r4,4(r8)
 4006f5c:	d8c02015 	stw	r3,128(sp)
 4006f60:	d8801f15 	stw	r2,124(sp)
 4006f64:	010001c4 	movi	r4,7
 4006f68:	20825a16 	blt	r4,r2,40078d4 <___svfprintf_internal_r+0x11b0>
 4006f6c:	42000204 	addi	r8,r8,8
 4006f70:	d8802c17 	ldw	r2,176(sp)
 4006f74:	10000c26 	beq	r2,zero,4006fa8 <___svfprintf_internal_r+0x884>
 4006f78:	d8801f17 	ldw	r2,124(sp)
 4006f7c:	d9002704 	addi	r4,sp,156
 4006f80:	18c00084 	addi	r3,r3,2
 4006f84:	10800044 	addi	r2,r2,1
 4006f88:	41000015 	stw	r4,0(r8)
 4006f8c:	01000084 	movi	r4,2
 4006f90:	41000115 	stw	r4,4(r8)
 4006f94:	d8c02015 	stw	r3,128(sp)
 4006f98:	d8801f15 	stw	r2,124(sp)
 4006f9c:	010001c4 	movi	r4,7
 4006fa0:	20825416 	blt	r4,r2,40078f4 <___svfprintf_internal_r+0x11d0>
 4006fa4:	42000204 	addi	r8,r8,8
 4006fa8:	d9003017 	ldw	r4,192(sp)
 4006fac:	00802004 	movi	r2,128
 4006fb0:	2081b926 	beq	r4,r2,4007698 <___svfprintf_internal_r+0xf74>
 4006fb4:	d9402a17 	ldw	r5,168(sp)
 4006fb8:	d8802b17 	ldw	r2,172(sp)
 4006fbc:	28adc83a 	sub	r22,r5,r2
 4006fc0:	05802f0e 	bge	zero,r22,4007080 <___svfprintf_internal_r+0x95c>
 4006fc4:	07000404 	movi	fp,16
 4006fc8:	d8801f17 	ldw	r2,124(sp)
 4006fcc:	e583e20e 	bge	fp,r22,4007f58 <___svfprintf_internal_r+0x1834>
 4006fd0:	01410074 	movhi	r5,1025
 4006fd4:	294b8984 	addi	r5,r5,11814
 4006fd8:	dc402a15 	stw	r17,168(sp)
 4006fdc:	d9402c15 	stw	r5,176(sp)
 4006fe0:	b023883a 	mov	r17,r22
 4006fe4:	050001c4 	movi	r20,7
 4006fe8:	902d883a 	mov	r22,r18
 4006fec:	8025883a 	mov	r18,r16
 4006ff0:	dc002d17 	ldw	r16,180(sp)
 4006ff4:	00000306 	br	4007004 <___svfprintf_internal_r+0x8e0>
 4006ff8:	8c7ffc04 	addi	r17,r17,-16
 4006ffc:	42000204 	addi	r8,r8,8
 4007000:	e440110e 	bge	fp,r17,4007048 <___svfprintf_internal_r+0x924>
 4007004:	18c00404 	addi	r3,r3,16
 4007008:	10800044 	addi	r2,r2,1
 400700c:	45400015 	stw	r21,0(r8)
 4007010:	47000115 	stw	fp,4(r8)
 4007014:	d8c02015 	stw	r3,128(sp)
 4007018:	d8801f15 	stw	r2,124(sp)
 400701c:	a0bff60e 	bge	r20,r2,4006ff8 <__alt_data_end+0xfc006ff8>
 4007020:	d9801e04 	addi	r6,sp,120
 4007024:	800b883a 	mov	r5,r16
 4007028:	9809883a 	mov	r4,r19
 400702c:	400bf500 	call	400bf50 <__ssprint_r>
 4007030:	103ea31e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007034:	8c7ffc04 	addi	r17,r17,-16
 4007038:	d8c02017 	ldw	r3,128(sp)
 400703c:	d8801f17 	ldw	r2,124(sp)
 4007040:	da000404 	addi	r8,sp,16
 4007044:	e47fef16 	blt	fp,r17,4007004 <__alt_data_end+0xfc007004>
 4007048:	9021883a 	mov	r16,r18
 400704c:	b025883a 	mov	r18,r22
 4007050:	882d883a 	mov	r22,r17
 4007054:	dc402a17 	ldw	r17,168(sp)
 4007058:	d9002c17 	ldw	r4,176(sp)
 400705c:	1d87883a 	add	r3,r3,r22
 4007060:	10800044 	addi	r2,r2,1
 4007064:	41000015 	stw	r4,0(r8)
 4007068:	45800115 	stw	r22,4(r8)
 400706c:	d8c02015 	stw	r3,128(sp)
 4007070:	d8801f15 	stw	r2,124(sp)
 4007074:	010001c4 	movi	r4,7
 4007078:	20820e16 	blt	r4,r2,40078b4 <___svfprintf_internal_r+0x1190>
 400707c:	42000204 	addi	r8,r8,8
 4007080:	9080400c 	andi	r2,r18,256
 4007084:	10013a1e 	bne	r2,zero,4007570 <___svfprintf_internal_r+0xe4c>
 4007088:	d9402b17 	ldw	r5,172(sp)
 400708c:	d8801f17 	ldw	r2,124(sp)
 4007090:	44000015 	stw	r16,0(r8)
 4007094:	1947883a 	add	r3,r3,r5
 4007098:	10800044 	addi	r2,r2,1
 400709c:	41400115 	stw	r5,4(r8)
 40070a0:	d8c02015 	stw	r3,128(sp)
 40070a4:	d8801f15 	stw	r2,124(sp)
 40070a8:	010001c4 	movi	r4,7
 40070ac:	2081f316 	blt	r4,r2,400787c <___svfprintf_internal_r+0x1158>
 40070b0:	42000204 	addi	r8,r8,8
 40070b4:	9480010c 	andi	r18,r18,4
 40070b8:	90003226 	beq	r18,zero,4007184 <___svfprintf_internal_r+0xa60>
 40070bc:	d9403117 	ldw	r5,196(sp)
 40070c0:	d8802917 	ldw	r2,164(sp)
 40070c4:	28a1c83a 	sub	r16,r5,r2
 40070c8:	04002e0e 	bge	zero,r16,4007184 <___svfprintf_internal_r+0xa60>
 40070cc:	04400404 	movi	r17,16
 40070d0:	d8801f17 	ldw	r2,124(sp)
 40070d4:	8c04db0e 	bge	r17,r16,4008444 <___svfprintf_internal_r+0x1d20>
 40070d8:	01410074 	movhi	r5,1025
 40070dc:	294b8d84 	addi	r5,r5,11830
 40070e0:	d9403515 	stw	r5,212(sp)
 40070e4:	048001c4 	movi	r18,7
 40070e8:	dd002d17 	ldw	r20,180(sp)
 40070ec:	00000306 	br	40070fc <___svfprintf_internal_r+0x9d8>
 40070f0:	843ffc04 	addi	r16,r16,-16
 40070f4:	42000204 	addi	r8,r8,8
 40070f8:	8c00130e 	bge	r17,r16,4007148 <___svfprintf_internal_r+0xa24>
 40070fc:	01010074 	movhi	r4,1025
 4007100:	18c00404 	addi	r3,r3,16
 4007104:	10800044 	addi	r2,r2,1
 4007108:	210b8d84 	addi	r4,r4,11830
 400710c:	41000015 	stw	r4,0(r8)
 4007110:	44400115 	stw	r17,4(r8)
 4007114:	d8c02015 	stw	r3,128(sp)
 4007118:	d8801f15 	stw	r2,124(sp)
 400711c:	90bff40e 	bge	r18,r2,40070f0 <__alt_data_end+0xfc0070f0>
 4007120:	d9801e04 	addi	r6,sp,120
 4007124:	a00b883a 	mov	r5,r20
 4007128:	9809883a 	mov	r4,r19
 400712c:	400bf500 	call	400bf50 <__ssprint_r>
 4007130:	103e631e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007134:	843ffc04 	addi	r16,r16,-16
 4007138:	d8c02017 	ldw	r3,128(sp)
 400713c:	d8801f17 	ldw	r2,124(sp)
 4007140:	da000404 	addi	r8,sp,16
 4007144:	8c3fed16 	blt	r17,r16,40070fc <__alt_data_end+0xfc0070fc>
 4007148:	d9403517 	ldw	r5,212(sp)
 400714c:	1c07883a 	add	r3,r3,r16
 4007150:	10800044 	addi	r2,r2,1
 4007154:	41400015 	stw	r5,0(r8)
 4007158:	44000115 	stw	r16,4(r8)
 400715c:	d8c02015 	stw	r3,128(sp)
 4007160:	d8801f15 	stw	r2,124(sp)
 4007164:	010001c4 	movi	r4,7
 4007168:	2080060e 	bge	r4,r2,4007184 <___svfprintf_internal_r+0xa60>
 400716c:	d9402d17 	ldw	r5,180(sp)
 4007170:	d9801e04 	addi	r6,sp,120
 4007174:	9809883a 	mov	r4,r19
 4007178:	400bf500 	call	400bf50 <__ssprint_r>
 400717c:	103e501e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007180:	d8c02017 	ldw	r3,128(sp)
 4007184:	d8803117 	ldw	r2,196(sp)
 4007188:	d9002917 	ldw	r4,164(sp)
 400718c:	1100010e 	bge	r2,r4,4007194 <___svfprintf_internal_r+0xa70>
 4007190:	2005883a 	mov	r2,r4
 4007194:	d9402f17 	ldw	r5,188(sp)
 4007198:	288b883a 	add	r5,r5,r2
 400719c:	d9402f15 	stw	r5,188(sp)
 40071a0:	1801be1e 	bne	r3,zero,400789c <___svfprintf_internal_r+0x1178>
 40071a4:	b8800007 	ldb	r2,0(r23)
 40071a8:	d8001f15 	stw	zero,124(sp)
 40071ac:	da000404 	addi	r8,sp,16
 40071b0:	103d891e 	bne	r2,zero,40067d8 <__alt_data_end+0xfc0067d8>
 40071b4:	b823883a 	mov	r17,r23
 40071b8:	003d9f06 	br	4006838 <__alt_data_end+0xfc006838>
 40071bc:	8025883a 	mov	r18,r16
 40071c0:	dc002903 	ldbu	r16,164(sp)
 40071c4:	e011883a 	mov	r8,fp
 40071c8:	84003fcc 	andi	r16,r16,255
 40071cc:	8005e61e 	bne	r16,zero,4008968 <___svfprintf_internal_r+0x2244>
 40071d0:	94800414 	ori	r18,r18,16
 40071d4:	9080080c 	andi	r2,r18,32
 40071d8:	10022026 	beq	r2,zero,4007a5c <___svfprintf_internal_r+0x1338>
 40071dc:	d9002e17 	ldw	r4,184(sp)
 40071e0:	d9402a17 	ldw	r5,168(sp)
 40071e4:	d8002785 	stb	zero,158(sp)
 40071e8:	20c00204 	addi	r3,r4,8
 40071ec:	25000017 	ldw	r20,0(r4)
 40071f0:	25800117 	ldw	r22,4(r4)
 40071f4:	2803ad16 	blt	r5,zero,40080ac <___svfprintf_internal_r+0x1988>
 40071f8:	013fdfc4 	movi	r4,-129
 40071fc:	a584b03a 	or	r2,r20,r22
 4007200:	d8c02e15 	stw	r3,184(sp)
 4007204:	9124703a 	and	r18,r18,r4
 4007208:	0039883a 	mov	fp,zero
 400720c:	103eb01e 	bne	r2,zero,4006cd0 <__alt_data_end+0xfc006cd0>
 4007210:	d8802a17 	ldw	r2,168(sp)
 4007214:	1002e71e 	bne	r2,zero,4007db4 <___svfprintf_internal_r+0x1690>
 4007218:	d8002a15 	stw	zero,168(sp)
 400721c:	d8002b15 	stw	zero,172(sp)
 4007220:	dc001e04 	addi	r16,sp,120
 4007224:	003ef706 	br	4006e04 <__alt_data_end+0xfc006e04>
 4007228:	8025883a 	mov	r18,r16
 400722c:	dc002903 	ldbu	r16,164(sp)
 4007230:	e011883a 	mov	r8,fp
 4007234:	84003fcc 	andi	r16,r16,255
 4007238:	8005c81e 	bne	r16,zero,400895c <___svfprintf_internal_r+0x2238>
 400723c:	01010074 	movhi	r4,1025
 4007240:	210b7d04 	addi	r4,r4,11764
 4007244:	d9003a15 	stw	r4,232(sp)
 4007248:	9080080c 	andi	r2,r18,32
 400724c:	10007226 	beq	r2,zero,4007418 <___svfprintf_internal_r+0xcf4>
 4007250:	d9402e17 	ldw	r5,184(sp)
 4007254:	2d000017 	ldw	r20,0(r5)
 4007258:	2d800117 	ldw	r22,4(r5)
 400725c:	29400204 	addi	r5,r5,8
 4007260:	d9402e15 	stw	r5,184(sp)
 4007264:	9080004c 	andi	r2,r18,1
 4007268:	1001aa26 	beq	r2,zero,4007914 <___svfprintf_internal_r+0x11f0>
 400726c:	a584b03a 	or	r2,r20,r22
 4007270:	10032526 	beq	r2,zero,4007f08 <___svfprintf_internal_r+0x17e4>
 4007274:	d8c02a17 	ldw	r3,168(sp)
 4007278:	00800c04 	movi	r2,48
 400727c:	d8802705 	stb	r2,156(sp)
 4007280:	dc402745 	stb	r17,157(sp)
 4007284:	d8002785 	stb	zero,158(sp)
 4007288:	90800094 	ori	r2,r18,2
 400728c:	1804a316 	blt	r3,zero,400851c <___svfprintf_internal_r+0x1df8>
 4007290:	00bfdfc4 	movi	r2,-129
 4007294:	90a4703a 	and	r18,r18,r2
 4007298:	94800094 	ori	r18,r18,2
 400729c:	0039883a 	mov	fp,zero
 40072a0:	d9003a17 	ldw	r4,232(sp)
 40072a4:	dc001e04 	addi	r16,sp,120
 40072a8:	a08003cc 	andi	r2,r20,15
 40072ac:	b006973a 	slli	r3,r22,28
 40072b0:	2085883a 	add	r2,r4,r2
 40072b4:	a028d13a 	srli	r20,r20,4
 40072b8:	10800003 	ldbu	r2,0(r2)
 40072bc:	b02cd13a 	srli	r22,r22,4
 40072c0:	843fffc4 	addi	r16,r16,-1
 40072c4:	1d28b03a 	or	r20,r3,r20
 40072c8:	80800005 	stb	r2,0(r16)
 40072cc:	a584b03a 	or	r2,r20,r22
 40072d0:	103ff51e 	bne	r2,zero,40072a8 <__alt_data_end+0xfc0072a8>
 40072d4:	d8c02817 	ldw	r3,160(sp)
 40072d8:	1c07c83a 	sub	r3,r3,r16
 40072dc:	d8c02b15 	stw	r3,172(sp)
 40072e0:	003ec806 	br	4006e04 <__alt_data_end+0xfc006e04>
 40072e4:	d8c02e17 	ldw	r3,184(sp)
 40072e8:	d9002e17 	ldw	r4,184(sp)
 40072ec:	8025883a 	mov	r18,r16
 40072f0:	18800017 	ldw	r2,0(r3)
 40072f4:	21000104 	addi	r4,r4,4
 40072f8:	00c00044 	movi	r3,1
 40072fc:	e011883a 	mov	r8,fp
 4007300:	d8c02915 	stw	r3,164(sp)
 4007304:	d8002785 	stb	zero,158(sp)
 4007308:	d8801405 	stb	r2,80(sp)
 400730c:	d9002e15 	stw	r4,184(sp)
 4007310:	d8c02b15 	stw	r3,172(sp)
 4007314:	d8002a15 	stw	zero,168(sp)
 4007318:	d8003215 	stw	zero,200(sp)
 400731c:	dc001404 	addi	r16,sp,80
 4007320:	0039883a 	mov	fp,zero
 4007324:	003ec406 	br	4006e38 <__alt_data_end+0xfc006e38>
 4007328:	8025883a 	mov	r18,r16
 400732c:	dc002903 	ldbu	r16,164(sp)
 4007330:	e011883a 	mov	r8,fp
 4007334:	84003fcc 	andi	r16,r16,255
 4007338:	803e8726 	beq	r16,zero,4006d58 <__alt_data_end+0xfc006d58>
 400733c:	d8c02b03 	ldbu	r3,172(sp)
 4007340:	d8c02785 	stb	r3,158(sp)
 4007344:	003e8406 	br	4006d58 <__alt_data_end+0xfc006d58>
 4007348:	00c00044 	movi	r3,1
 400734c:	d8c02905 	stb	r3,164(sp)
 4007350:	00c00ac4 	movi	r3,43
 4007354:	d8c02b05 	stb	r3,172(sp)
 4007358:	bc400007 	ldb	r17,0(r23)
 400735c:	003d4606 	br	4006878 <__alt_data_end+0xfc006878>
 4007360:	84000814 	ori	r16,r16,32
 4007364:	bc400007 	ldb	r17,0(r23)
 4007368:	003d4306 	br	4006878 <__alt_data_end+0xfc006878>
 400736c:	d8802e17 	ldw	r2,184(sp)
 4007370:	8025883a 	mov	r18,r16
 4007374:	d8002785 	stb	zero,158(sp)
 4007378:	14000017 	ldw	r16,0(r2)
 400737c:	e011883a 	mov	r8,fp
 4007380:	15000104 	addi	r20,r2,4
 4007384:	80042126 	beq	r16,zero,400840c <___svfprintf_internal_r+0x1ce8>
 4007388:	d8c02a17 	ldw	r3,168(sp)
 400738c:	1803ee16 	blt	r3,zero,4008348 <___svfprintf_internal_r+0x1c24>
 4007390:	180d883a 	mov	r6,r3
 4007394:	000b883a 	mov	r5,zero
 4007398:	8009883a 	mov	r4,r16
 400739c:	df003e15 	stw	fp,248(sp)
 40073a0:	400ab780 	call	400ab78 <memchr>
 40073a4:	da003e17 	ldw	r8,248(sp)
 40073a8:	10046a26 	beq	r2,zero,4008554 <___svfprintf_internal_r+0x1e30>
 40073ac:	1405c83a 	sub	r2,r2,r16
 40073b0:	d8802b15 	stw	r2,172(sp)
 40073b4:	1003ea16 	blt	r2,zero,4008360 <___svfprintf_internal_r+0x1c3c>
 40073b8:	df002783 	ldbu	fp,158(sp)
 40073bc:	d8802915 	stw	r2,164(sp)
 40073c0:	dd002e15 	stw	r20,184(sp)
 40073c4:	d8002a15 	stw	zero,168(sp)
 40073c8:	d8003215 	stw	zero,200(sp)
 40073cc:	003e9306 	br	4006e1c <__alt_data_end+0xfc006e1c>
 40073d0:	8025883a 	mov	r18,r16
 40073d4:	dc002903 	ldbu	r16,164(sp)
 40073d8:	e011883a 	mov	r8,fp
 40073dc:	84003fcc 	andi	r16,r16,255
 40073e0:	803f7c26 	beq	r16,zero,40071d4 <__alt_data_end+0xfc0071d4>
 40073e4:	d8c02b03 	ldbu	r3,172(sp)
 40073e8:	d8c02785 	stb	r3,158(sp)
 40073ec:	003f7906 	br	40071d4 <__alt_data_end+0xfc0071d4>
 40073f0:	8025883a 	mov	r18,r16
 40073f4:	dc002903 	ldbu	r16,164(sp)
 40073f8:	e011883a 	mov	r8,fp
 40073fc:	84003fcc 	andi	r16,r16,255
 4007400:	8005741e 	bne	r16,zero,40089d4 <___svfprintf_internal_r+0x22b0>
 4007404:	01010074 	movhi	r4,1025
 4007408:	210b8204 	addi	r4,r4,11784
 400740c:	d9003a15 	stw	r4,232(sp)
 4007410:	9080080c 	andi	r2,r18,32
 4007414:	103f8e1e 	bne	r2,zero,4007250 <__alt_data_end+0xfc007250>
 4007418:	9080040c 	andi	r2,r18,16
 400741c:	1002a726 	beq	r2,zero,4007ebc <___svfprintf_internal_r+0x1798>
 4007420:	d8802e17 	ldw	r2,184(sp)
 4007424:	002d883a 	mov	r22,zero
 4007428:	15000017 	ldw	r20,0(r2)
 400742c:	10800104 	addi	r2,r2,4
 4007430:	d8802e15 	stw	r2,184(sp)
 4007434:	003f8b06 	br	4007264 <__alt_data_end+0xfc007264>
 4007438:	84000054 	ori	r16,r16,1
 400743c:	bc400007 	ldb	r17,0(r23)
 4007440:	003d0d06 	br	4006878 <__alt_data_end+0xfc006878>
 4007444:	d8802b07 	ldb	r2,172(sp)
 4007448:	1002a41e 	bne	r2,zero,4007edc <___svfprintf_internal_r+0x17b8>
 400744c:	00c00044 	movi	r3,1
 4007450:	d8c02905 	stb	r3,164(sp)
 4007454:	00c00804 	movi	r3,32
 4007458:	d8c02b05 	stb	r3,172(sp)
 400745c:	bc400007 	ldb	r17,0(r23)
 4007460:	003d0506 	br	4006878 <__alt_data_end+0xfc006878>
 4007464:	8025883a 	mov	r18,r16
 4007468:	dc002903 	ldbu	r16,164(sp)
 400746c:	e011883a 	mov	r8,fp
 4007470:	84003fcc 	andi	r16,r16,255
 4007474:	803e0626 	beq	r16,zero,4006c90 <__alt_data_end+0xfc006c90>
 4007478:	d8c02b03 	ldbu	r3,172(sp)
 400747c:	d8c02785 	stb	r3,158(sp)
 4007480:	003e0306 	br	4006c90 <__alt_data_end+0xfc006c90>
 4007484:	bc400007 	ldb	r17,0(r23)
 4007488:	00801b04 	movi	r2,108
 400748c:	88830a26 	beq	r17,r2,40080b8 <___svfprintf_internal_r+0x1994>
 4007490:	84000414 	ori	r16,r16,16
 4007494:	003cf806 	br	4006878 <__alt_data_end+0xfc006878>
 4007498:	8025883a 	mov	r18,r16
 400749c:	dc002903 	ldbu	r16,164(sp)
 40074a0:	e011883a 	mov	r8,fp
 40074a4:	84003fcc 	andi	r16,r16,255
 40074a8:	8005471e 	bne	r16,zero,40089c8 <___svfprintf_internal_r+0x22a4>
 40074ac:	9080080c 	andi	r2,r18,32
 40074b0:	10028c26 	beq	r2,zero,4007ee4 <___svfprintf_internal_r+0x17c0>
 40074b4:	d9002e17 	ldw	r4,184(sp)
 40074b8:	d9402f17 	ldw	r5,188(sp)
 40074bc:	20800017 	ldw	r2,0(r4)
 40074c0:	2807d7fa 	srai	r3,r5,31
 40074c4:	21000104 	addi	r4,r4,4
 40074c8:	d9002e15 	stw	r4,184(sp)
 40074cc:	11400015 	stw	r5,0(r2)
 40074d0:	10c00115 	stw	r3,4(r2)
 40074d4:	003cbe06 	br	40067d0 <__alt_data_end+0xfc0067d0>
 40074d8:	84001014 	ori	r16,r16,64
 40074dc:	bc400007 	ldb	r17,0(r23)
 40074e0:	003ce506 	br	4006878 <__alt_data_end+0xfc006878>
 40074e4:	01010074 	movhi	r4,1025
 40074e8:	210b8204 	addi	r4,r4,11784
 40074ec:	0039883a 	mov	fp,zero
 40074f0:	d9003a15 	stw	r4,232(sp)
 40074f4:	04401e04 	movi	r17,120
 40074f8:	003f6906 	br	40072a0 <__alt_data_end+0xfc0072a0>
 40074fc:	8025883a 	mov	r18,r16
 4007500:	dc002903 	ldbu	r16,164(sp)
 4007504:	e011883a 	mov	r8,fp
 4007508:	84003fcc 	andi	r16,r16,255
 400750c:	8005261e 	bne	r16,zero,40089a8 <___svfprintf_internal_r+0x2284>
 4007510:	883d6526 	beq	r17,zero,4006aa8 <__alt_data_end+0xfc006aa8>
 4007514:	00c00044 	movi	r3,1
 4007518:	d8c02915 	stw	r3,164(sp)
 400751c:	dc401405 	stb	r17,80(sp)
 4007520:	d8002785 	stb	zero,158(sp)
 4007524:	003f7a06 	br	4007310 <__alt_data_end+0xfc007310>
 4007528:	01010074 	movhi	r4,1025
 400752c:	210b8204 	addi	r4,r4,11784
 4007530:	d9003a15 	stw	r4,232(sp)
 4007534:	d8c02e15 	stw	r3,184(sp)
 4007538:	1025883a 	mov	r18,r2
 400753c:	04401e04 	movi	r17,120
 4007540:	a584b03a 	or	r2,r20,r22
 4007544:	1000fa1e 	bne	r2,zero,4007930 <___svfprintf_internal_r+0x120c>
 4007548:	0039883a 	mov	fp,zero
 400754c:	00800084 	movi	r2,2
 4007550:	10803fcc 	andi	r2,r2,255
 4007554:	00c00044 	movi	r3,1
 4007558:	10c21626 	beq	r2,r3,4007db4 <___svfprintf_internal_r+0x1690>
 400755c:	00c00084 	movi	r3,2
 4007560:	10fe0e1e 	bne	r2,r3,4006d9c <__alt_data_end+0xfc006d9c>
 4007564:	003d4606 	br	4006a80 <__alt_data_end+0xfc006a80>
 4007568:	d8c02017 	ldw	r3,128(sp)
 400756c:	003e7306 	br	4006f3c <__alt_data_end+0xfc006f3c>
 4007570:	00801944 	movi	r2,101
 4007574:	14407c0e 	bge	r2,r17,4007768 <___svfprintf_internal_r+0x1044>
 4007578:	d9003617 	ldw	r4,216(sp)
 400757c:	d9403717 	ldw	r5,220(sp)
 4007580:	000d883a 	mov	r6,zero
 4007584:	000f883a 	mov	r7,zero
 4007588:	d8c03d15 	stw	r3,244(sp)
 400758c:	da003e15 	stw	r8,248(sp)
 4007590:	400ed780 	call	400ed78 <__eqdf2>
 4007594:	d8c03d17 	ldw	r3,244(sp)
 4007598:	da003e17 	ldw	r8,248(sp)
 400759c:	1000f51e 	bne	r2,zero,4007974 <___svfprintf_internal_r+0x1250>
 40075a0:	d8801f17 	ldw	r2,124(sp)
 40075a4:	01010074 	movhi	r4,1025
 40075a8:	210b8904 	addi	r4,r4,11812
 40075ac:	18c00044 	addi	r3,r3,1
 40075b0:	10800044 	addi	r2,r2,1
 40075b4:	41000015 	stw	r4,0(r8)
 40075b8:	01000044 	movi	r4,1
 40075bc:	41000115 	stw	r4,4(r8)
 40075c0:	d8c02015 	stw	r3,128(sp)
 40075c4:	d8801f15 	stw	r2,124(sp)
 40075c8:	010001c4 	movi	r4,7
 40075cc:	20826616 	blt	r4,r2,4007f68 <___svfprintf_internal_r+0x1844>
 40075d0:	42000204 	addi	r8,r8,8
 40075d4:	d8802617 	ldw	r2,152(sp)
 40075d8:	d9403317 	ldw	r5,204(sp)
 40075dc:	11400216 	blt	r2,r5,40075e8 <___svfprintf_internal_r+0xec4>
 40075e0:	9080004c 	andi	r2,r18,1
 40075e4:	103eb326 	beq	r2,zero,40070b4 <__alt_data_end+0xfc0070b4>
 40075e8:	d8803817 	ldw	r2,224(sp)
 40075ec:	d9003417 	ldw	r4,208(sp)
 40075f0:	d9403817 	ldw	r5,224(sp)
 40075f4:	1887883a 	add	r3,r3,r2
 40075f8:	d8801f17 	ldw	r2,124(sp)
 40075fc:	41000015 	stw	r4,0(r8)
 4007600:	41400115 	stw	r5,4(r8)
 4007604:	10800044 	addi	r2,r2,1
 4007608:	d8c02015 	stw	r3,128(sp)
 400760c:	d8801f15 	stw	r2,124(sp)
 4007610:	010001c4 	movi	r4,7
 4007614:	2082af16 	blt	r4,r2,40080d4 <___svfprintf_internal_r+0x19b0>
 4007618:	42000204 	addi	r8,r8,8
 400761c:	d8803317 	ldw	r2,204(sp)
 4007620:	143fffc4 	addi	r16,r2,-1
 4007624:	043ea30e 	bge	zero,r16,40070b4 <__alt_data_end+0xfc0070b4>
 4007628:	04400404 	movi	r17,16
 400762c:	d8801f17 	ldw	r2,124(sp)
 4007630:	8c00860e 	bge	r17,r16,400784c <___svfprintf_internal_r+0x1128>
 4007634:	01410074 	movhi	r5,1025
 4007638:	294b8984 	addi	r5,r5,11814
 400763c:	d9402c15 	stw	r5,176(sp)
 4007640:	058001c4 	movi	r22,7
 4007644:	dd002d17 	ldw	r20,180(sp)
 4007648:	00000306 	br	4007658 <___svfprintf_internal_r+0xf34>
 400764c:	42000204 	addi	r8,r8,8
 4007650:	843ffc04 	addi	r16,r16,-16
 4007654:	8c00800e 	bge	r17,r16,4007858 <___svfprintf_internal_r+0x1134>
 4007658:	18c00404 	addi	r3,r3,16
 400765c:	10800044 	addi	r2,r2,1
 4007660:	45400015 	stw	r21,0(r8)
 4007664:	44400115 	stw	r17,4(r8)
 4007668:	d8c02015 	stw	r3,128(sp)
 400766c:	d8801f15 	stw	r2,124(sp)
 4007670:	b0bff60e 	bge	r22,r2,400764c <__alt_data_end+0xfc00764c>
 4007674:	d9801e04 	addi	r6,sp,120
 4007678:	a00b883a 	mov	r5,r20
 400767c:	9809883a 	mov	r4,r19
 4007680:	400bf500 	call	400bf50 <__ssprint_r>
 4007684:	103d0e1e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007688:	d8c02017 	ldw	r3,128(sp)
 400768c:	d8801f17 	ldw	r2,124(sp)
 4007690:	da000404 	addi	r8,sp,16
 4007694:	003fee06 	br	4007650 <__alt_data_end+0xfc007650>
 4007698:	d9403117 	ldw	r5,196(sp)
 400769c:	d8802917 	ldw	r2,164(sp)
 40076a0:	28adc83a 	sub	r22,r5,r2
 40076a4:	05be430e 	bge	zero,r22,4006fb4 <__alt_data_end+0xfc006fb4>
 40076a8:	07000404 	movi	fp,16
 40076ac:	d8801f17 	ldw	r2,124(sp)
 40076b0:	e583a20e 	bge	fp,r22,400853c <___svfprintf_internal_r+0x1e18>
 40076b4:	01410074 	movhi	r5,1025
 40076b8:	294b8984 	addi	r5,r5,11814
 40076bc:	dc403015 	stw	r17,192(sp)
 40076c0:	d9402c15 	stw	r5,176(sp)
 40076c4:	b023883a 	mov	r17,r22
 40076c8:	050001c4 	movi	r20,7
 40076cc:	902d883a 	mov	r22,r18
 40076d0:	8025883a 	mov	r18,r16
 40076d4:	dc002d17 	ldw	r16,180(sp)
 40076d8:	00000306 	br	40076e8 <___svfprintf_internal_r+0xfc4>
 40076dc:	8c7ffc04 	addi	r17,r17,-16
 40076e0:	42000204 	addi	r8,r8,8
 40076e4:	e440110e 	bge	fp,r17,400772c <___svfprintf_internal_r+0x1008>
 40076e8:	18c00404 	addi	r3,r3,16
 40076ec:	10800044 	addi	r2,r2,1
 40076f0:	45400015 	stw	r21,0(r8)
 40076f4:	47000115 	stw	fp,4(r8)
 40076f8:	d8c02015 	stw	r3,128(sp)
 40076fc:	d8801f15 	stw	r2,124(sp)
 4007700:	a0bff60e 	bge	r20,r2,40076dc <__alt_data_end+0xfc0076dc>
 4007704:	d9801e04 	addi	r6,sp,120
 4007708:	800b883a 	mov	r5,r16
 400770c:	9809883a 	mov	r4,r19
 4007710:	400bf500 	call	400bf50 <__ssprint_r>
 4007714:	103cea1e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007718:	8c7ffc04 	addi	r17,r17,-16
 400771c:	d8c02017 	ldw	r3,128(sp)
 4007720:	d8801f17 	ldw	r2,124(sp)
 4007724:	da000404 	addi	r8,sp,16
 4007728:	e47fef16 	blt	fp,r17,40076e8 <__alt_data_end+0xfc0076e8>
 400772c:	9021883a 	mov	r16,r18
 4007730:	b025883a 	mov	r18,r22
 4007734:	882d883a 	mov	r22,r17
 4007738:	dc403017 	ldw	r17,192(sp)
 400773c:	d9002c17 	ldw	r4,176(sp)
 4007740:	1d87883a 	add	r3,r3,r22
 4007744:	10800044 	addi	r2,r2,1
 4007748:	41000015 	stw	r4,0(r8)
 400774c:	45800115 	stw	r22,4(r8)
 4007750:	d8c02015 	stw	r3,128(sp)
 4007754:	d8801f15 	stw	r2,124(sp)
 4007758:	010001c4 	movi	r4,7
 400775c:	20819a16 	blt	r4,r2,4007dc8 <___svfprintf_internal_r+0x16a4>
 4007760:	42000204 	addi	r8,r8,8
 4007764:	003e1306 	br	4006fb4 <__alt_data_end+0xfc006fb4>
 4007768:	d9403317 	ldw	r5,204(sp)
 400776c:	00800044 	movi	r2,1
 4007770:	18c00044 	addi	r3,r3,1
 4007774:	1141710e 	bge	r2,r5,4007d3c <___svfprintf_internal_r+0x1618>
 4007778:	dc401f17 	ldw	r17,124(sp)
 400777c:	00800044 	movi	r2,1
 4007780:	40800115 	stw	r2,4(r8)
 4007784:	8c400044 	addi	r17,r17,1
 4007788:	44000015 	stw	r16,0(r8)
 400778c:	d8c02015 	stw	r3,128(sp)
 4007790:	dc401f15 	stw	r17,124(sp)
 4007794:	008001c4 	movi	r2,7
 4007798:	14417416 	blt	r2,r17,4007d6c <___svfprintf_internal_r+0x1648>
 400779c:	42000204 	addi	r8,r8,8
 40077a0:	d8803817 	ldw	r2,224(sp)
 40077a4:	d9003417 	ldw	r4,208(sp)
 40077a8:	8c400044 	addi	r17,r17,1
 40077ac:	10c7883a 	add	r3,r2,r3
 40077b0:	40800115 	stw	r2,4(r8)
 40077b4:	41000015 	stw	r4,0(r8)
 40077b8:	d8c02015 	stw	r3,128(sp)
 40077bc:	dc401f15 	stw	r17,124(sp)
 40077c0:	008001c4 	movi	r2,7
 40077c4:	14417216 	blt	r2,r17,4007d90 <___svfprintf_internal_r+0x166c>
 40077c8:	45800204 	addi	r22,r8,8
 40077cc:	d9003617 	ldw	r4,216(sp)
 40077d0:	d9403717 	ldw	r5,220(sp)
 40077d4:	000d883a 	mov	r6,zero
 40077d8:	000f883a 	mov	r7,zero
 40077dc:	d8c03d15 	stw	r3,244(sp)
 40077e0:	400ed780 	call	400ed78 <__eqdf2>
 40077e4:	d8c03d17 	ldw	r3,244(sp)
 40077e8:	1000b326 	beq	r2,zero,4007ab8 <___svfprintf_internal_r+0x1394>
 40077ec:	d9403317 	ldw	r5,204(sp)
 40077f0:	84000044 	addi	r16,r16,1
 40077f4:	8c400044 	addi	r17,r17,1
 40077f8:	28bfffc4 	addi	r2,r5,-1
 40077fc:	1887883a 	add	r3,r3,r2
 4007800:	b0800115 	stw	r2,4(r22)
 4007804:	b4000015 	stw	r16,0(r22)
 4007808:	d8c02015 	stw	r3,128(sp)
 400780c:	dc401f15 	stw	r17,124(sp)
 4007810:	008001c4 	movi	r2,7
 4007814:	1440d216 	blt	r2,r17,4007b60 <___svfprintf_internal_r+0x143c>
 4007818:	b5800204 	addi	r22,r22,8
 400781c:	d9003b17 	ldw	r4,236(sp)
 4007820:	df0022c4 	addi	fp,sp,139
 4007824:	8c400044 	addi	r17,r17,1
 4007828:	20c7883a 	add	r3,r4,r3
 400782c:	b7000015 	stw	fp,0(r22)
 4007830:	b1000115 	stw	r4,4(r22)
 4007834:	d8c02015 	stw	r3,128(sp)
 4007838:	dc401f15 	stw	r17,124(sp)
 400783c:	008001c4 	movi	r2,7
 4007840:	14400e16 	blt	r2,r17,400787c <___svfprintf_internal_r+0x1158>
 4007844:	b2000204 	addi	r8,r22,8
 4007848:	003e1a06 	br	40070b4 <__alt_data_end+0xfc0070b4>
 400784c:	01010074 	movhi	r4,1025
 4007850:	210b8984 	addi	r4,r4,11814
 4007854:	d9002c15 	stw	r4,176(sp)
 4007858:	d9002c17 	ldw	r4,176(sp)
 400785c:	1c07883a 	add	r3,r3,r16
 4007860:	44000115 	stw	r16,4(r8)
 4007864:	41000015 	stw	r4,0(r8)
 4007868:	10800044 	addi	r2,r2,1
 400786c:	d8c02015 	stw	r3,128(sp)
 4007870:	d8801f15 	stw	r2,124(sp)
 4007874:	010001c4 	movi	r4,7
 4007878:	20be0d0e 	bge	r4,r2,40070b0 <__alt_data_end+0xfc0070b0>
 400787c:	d9402d17 	ldw	r5,180(sp)
 4007880:	d9801e04 	addi	r6,sp,120
 4007884:	9809883a 	mov	r4,r19
 4007888:	400bf500 	call	400bf50 <__ssprint_r>
 400788c:	103c8c1e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007890:	d8c02017 	ldw	r3,128(sp)
 4007894:	da000404 	addi	r8,sp,16
 4007898:	003e0606 	br	40070b4 <__alt_data_end+0xfc0070b4>
 400789c:	d9402d17 	ldw	r5,180(sp)
 40078a0:	d9801e04 	addi	r6,sp,120
 40078a4:	9809883a 	mov	r4,r19
 40078a8:	400bf500 	call	400bf50 <__ssprint_r>
 40078ac:	103e3d26 	beq	r2,zero,40071a4 <__alt_data_end+0xfc0071a4>
 40078b0:	003c8306 	br	4006ac0 <__alt_data_end+0xfc006ac0>
 40078b4:	d9402d17 	ldw	r5,180(sp)
 40078b8:	d9801e04 	addi	r6,sp,120
 40078bc:	9809883a 	mov	r4,r19
 40078c0:	400bf500 	call	400bf50 <__ssprint_r>
 40078c4:	103c7e1e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 40078c8:	d8c02017 	ldw	r3,128(sp)
 40078cc:	da000404 	addi	r8,sp,16
 40078d0:	003deb06 	br	4007080 <__alt_data_end+0xfc007080>
 40078d4:	d9402d17 	ldw	r5,180(sp)
 40078d8:	d9801e04 	addi	r6,sp,120
 40078dc:	9809883a 	mov	r4,r19
 40078e0:	400bf500 	call	400bf50 <__ssprint_r>
 40078e4:	103c761e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 40078e8:	d8c02017 	ldw	r3,128(sp)
 40078ec:	da000404 	addi	r8,sp,16
 40078f0:	003d9f06 	br	4006f70 <__alt_data_end+0xfc006f70>
 40078f4:	d9402d17 	ldw	r5,180(sp)
 40078f8:	d9801e04 	addi	r6,sp,120
 40078fc:	9809883a 	mov	r4,r19
 4007900:	400bf500 	call	400bf50 <__ssprint_r>
 4007904:	103c6e1e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007908:	d8c02017 	ldw	r3,128(sp)
 400790c:	da000404 	addi	r8,sp,16
 4007910:	003da506 	br	4006fa8 <__alt_data_end+0xfc006fa8>
 4007914:	d9402a17 	ldw	r5,168(sp)
 4007918:	d8002785 	stb	zero,158(sp)
 400791c:	283f0816 	blt	r5,zero,4007540 <__alt_data_end+0xfc007540>
 4007920:	00ffdfc4 	movi	r3,-129
 4007924:	a584b03a 	or	r2,r20,r22
 4007928:	90e4703a 	and	r18,r18,r3
 400792c:	103c5126 	beq	r2,zero,4006a74 <__alt_data_end+0xfc006a74>
 4007930:	0039883a 	mov	fp,zero
 4007934:	003e5a06 	br	40072a0 <__alt_data_end+0xfc0072a0>
 4007938:	9080040c 	andi	r2,r18,16
 400793c:	10013d26 	beq	r2,zero,4007e34 <___svfprintf_internal_r+0x1710>
 4007940:	d8c02e17 	ldw	r3,184(sp)
 4007944:	d9002a17 	ldw	r4,168(sp)
 4007948:	d8002785 	stb	zero,158(sp)
 400794c:	18800104 	addi	r2,r3,4
 4007950:	1d000017 	ldw	r20,0(r3)
 4007954:	002d883a 	mov	r22,zero
 4007958:	20013f16 	blt	r4,zero,4007e58 <___svfprintf_internal_r+0x1734>
 400795c:	00ffdfc4 	movi	r3,-129
 4007960:	d8802e15 	stw	r2,184(sp)
 4007964:	90e4703a 	and	r18,r18,r3
 4007968:	a03d0926 	beq	r20,zero,4006d90 <__alt_data_end+0xfc006d90>
 400796c:	0039883a 	mov	fp,zero
 4007970:	003d0c06 	br	4006da4 <__alt_data_end+0xfc006da4>
 4007974:	dc402617 	ldw	r17,152(sp)
 4007978:	0441830e 	bge	zero,r17,4007f88 <___svfprintf_internal_r+0x1864>
 400797c:	dc403217 	ldw	r17,200(sp)
 4007980:	d8803317 	ldw	r2,204(sp)
 4007984:	1440010e 	bge	r2,r17,400798c <___svfprintf_internal_r+0x1268>
 4007988:	1023883a 	mov	r17,r2
 400798c:	04400a0e 	bge	zero,r17,40079b8 <___svfprintf_internal_r+0x1294>
 4007990:	d8801f17 	ldw	r2,124(sp)
 4007994:	1c47883a 	add	r3,r3,r17
 4007998:	44000015 	stw	r16,0(r8)
 400799c:	10800044 	addi	r2,r2,1
 40079a0:	44400115 	stw	r17,4(r8)
 40079a4:	d8c02015 	stw	r3,128(sp)
 40079a8:	d8801f15 	stw	r2,124(sp)
 40079ac:	010001c4 	movi	r4,7
 40079b0:	20827516 	blt	r4,r2,4008388 <___svfprintf_internal_r+0x1c64>
 40079b4:	42000204 	addi	r8,r8,8
 40079b8:	88027b16 	blt	r17,zero,40083a8 <___svfprintf_internal_r+0x1c84>
 40079bc:	d9003217 	ldw	r4,200(sp)
 40079c0:	2463c83a 	sub	r17,r4,r17
 40079c4:	0440990e 	bge	zero,r17,4007c2c <___svfprintf_internal_r+0x1508>
 40079c8:	05800404 	movi	r22,16
 40079cc:	d8801f17 	ldw	r2,124(sp)
 40079d0:	b441530e 	bge	r22,r17,4007f20 <___svfprintf_internal_r+0x17fc>
 40079d4:	01010074 	movhi	r4,1025
 40079d8:	210b8984 	addi	r4,r4,11814
 40079dc:	d9002c15 	stw	r4,176(sp)
 40079e0:	070001c4 	movi	fp,7
 40079e4:	dd002d17 	ldw	r20,180(sp)
 40079e8:	00000306 	br	40079f8 <___svfprintf_internal_r+0x12d4>
 40079ec:	42000204 	addi	r8,r8,8
 40079f0:	8c7ffc04 	addi	r17,r17,-16
 40079f4:	b4414d0e 	bge	r22,r17,4007f2c <___svfprintf_internal_r+0x1808>
 40079f8:	18c00404 	addi	r3,r3,16
 40079fc:	10800044 	addi	r2,r2,1
 4007a00:	45400015 	stw	r21,0(r8)
 4007a04:	45800115 	stw	r22,4(r8)
 4007a08:	d8c02015 	stw	r3,128(sp)
 4007a0c:	d8801f15 	stw	r2,124(sp)
 4007a10:	e0bff60e 	bge	fp,r2,40079ec <__alt_data_end+0xfc0079ec>
 4007a14:	d9801e04 	addi	r6,sp,120
 4007a18:	a00b883a 	mov	r5,r20
 4007a1c:	9809883a 	mov	r4,r19
 4007a20:	400bf500 	call	400bf50 <__ssprint_r>
 4007a24:	103c261e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007a28:	d8c02017 	ldw	r3,128(sp)
 4007a2c:	d8801f17 	ldw	r2,124(sp)
 4007a30:	da000404 	addi	r8,sp,16
 4007a34:	003fee06 	br	40079f0 <__alt_data_end+0xfc0079f0>
 4007a38:	d9402d17 	ldw	r5,180(sp)
 4007a3c:	d9801e04 	addi	r6,sp,120
 4007a40:	9809883a 	mov	r4,r19
 4007a44:	400bf500 	call	400bf50 <__ssprint_r>
 4007a48:	103c1d1e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007a4c:	d8c02017 	ldw	r3,128(sp)
 4007a50:	df002787 	ldb	fp,158(sp)
 4007a54:	da000404 	addi	r8,sp,16
 4007a58:	003d3806 	br	4006f3c <__alt_data_end+0xfc006f3c>
 4007a5c:	9080040c 	andi	r2,r18,16
 4007a60:	10005c26 	beq	r2,zero,4007bd4 <___svfprintf_internal_r+0x14b0>
 4007a64:	d8c02e17 	ldw	r3,184(sp)
 4007a68:	d9002a17 	ldw	r4,168(sp)
 4007a6c:	d8002785 	stb	zero,158(sp)
 4007a70:	18800104 	addi	r2,r3,4
 4007a74:	1d000017 	ldw	r20,0(r3)
 4007a78:	002d883a 	mov	r22,zero
 4007a7c:	20005e16 	blt	r4,zero,4007bf8 <___svfprintf_internal_r+0x14d4>
 4007a80:	00ffdfc4 	movi	r3,-129
 4007a84:	d8802e15 	stw	r2,184(sp)
 4007a88:	90e4703a 	and	r18,r18,r3
 4007a8c:	0039883a 	mov	fp,zero
 4007a90:	a03ddf26 	beq	r20,zero,4007210 <__alt_data_end+0xfc007210>
 4007a94:	00800244 	movi	r2,9
 4007a98:	153c8e36 	bltu	r2,r20,4006cd4 <__alt_data_end+0xfc006cd4>
 4007a9c:	a5000c04 	addi	r20,r20,48
 4007aa0:	dc001dc4 	addi	r16,sp,119
 4007aa4:	dd001dc5 	stb	r20,119(sp)
 4007aa8:	d8c02817 	ldw	r3,160(sp)
 4007aac:	1c07c83a 	sub	r3,r3,r16
 4007ab0:	d8c02b15 	stw	r3,172(sp)
 4007ab4:	003cd306 	br	4006e04 <__alt_data_end+0xfc006e04>
 4007ab8:	d8803317 	ldw	r2,204(sp)
 4007abc:	143fffc4 	addi	r16,r2,-1
 4007ac0:	043f560e 	bge	zero,r16,400781c <__alt_data_end+0xfc00781c>
 4007ac4:	07000404 	movi	fp,16
 4007ac8:	e403530e 	bge	fp,r16,4008818 <___svfprintf_internal_r+0x20f4>
 4007acc:	01410074 	movhi	r5,1025
 4007ad0:	294b8984 	addi	r5,r5,11814
 4007ad4:	d9402c15 	stw	r5,176(sp)
 4007ad8:	01c001c4 	movi	r7,7
 4007adc:	dd002d17 	ldw	r20,180(sp)
 4007ae0:	00000306 	br	4007af0 <___svfprintf_internal_r+0x13cc>
 4007ae4:	843ffc04 	addi	r16,r16,-16
 4007ae8:	b5800204 	addi	r22,r22,8
 4007aec:	e400130e 	bge	fp,r16,4007b3c <___svfprintf_internal_r+0x1418>
 4007af0:	18c00404 	addi	r3,r3,16
 4007af4:	8c400044 	addi	r17,r17,1
 4007af8:	b5400015 	stw	r21,0(r22)
 4007afc:	b7000115 	stw	fp,4(r22)
 4007b00:	d8c02015 	stw	r3,128(sp)
 4007b04:	dc401f15 	stw	r17,124(sp)
 4007b08:	3c7ff60e 	bge	r7,r17,4007ae4 <__alt_data_end+0xfc007ae4>
 4007b0c:	d9801e04 	addi	r6,sp,120
 4007b10:	a00b883a 	mov	r5,r20
 4007b14:	9809883a 	mov	r4,r19
 4007b18:	d9c03d15 	stw	r7,244(sp)
 4007b1c:	400bf500 	call	400bf50 <__ssprint_r>
 4007b20:	d9c03d17 	ldw	r7,244(sp)
 4007b24:	103be61e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007b28:	843ffc04 	addi	r16,r16,-16
 4007b2c:	d8c02017 	ldw	r3,128(sp)
 4007b30:	dc401f17 	ldw	r17,124(sp)
 4007b34:	dd800404 	addi	r22,sp,16
 4007b38:	e43fed16 	blt	fp,r16,4007af0 <__alt_data_end+0xfc007af0>
 4007b3c:	d8802c17 	ldw	r2,176(sp)
 4007b40:	1c07883a 	add	r3,r3,r16
 4007b44:	8c400044 	addi	r17,r17,1
 4007b48:	b0800015 	stw	r2,0(r22)
 4007b4c:	b4000115 	stw	r16,4(r22)
 4007b50:	d8c02015 	stw	r3,128(sp)
 4007b54:	dc401f15 	stw	r17,124(sp)
 4007b58:	008001c4 	movi	r2,7
 4007b5c:	147f2e0e 	bge	r2,r17,4007818 <__alt_data_end+0xfc007818>
 4007b60:	d9402d17 	ldw	r5,180(sp)
 4007b64:	d9801e04 	addi	r6,sp,120
 4007b68:	9809883a 	mov	r4,r19
 4007b6c:	400bf500 	call	400bf50 <__ssprint_r>
 4007b70:	103bd31e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007b74:	d8c02017 	ldw	r3,128(sp)
 4007b78:	dc401f17 	ldw	r17,124(sp)
 4007b7c:	dd800404 	addi	r22,sp,16
 4007b80:	003f2606 	br	400781c <__alt_data_end+0xfc00781c>
 4007b84:	9080040c 	andi	r2,r18,16
 4007b88:	1000c326 	beq	r2,zero,4007e98 <___svfprintf_internal_r+0x1774>
 4007b8c:	d9402e17 	ldw	r5,184(sp)
 4007b90:	2d000017 	ldw	r20,0(r5)
 4007b94:	29400104 	addi	r5,r5,4
 4007b98:	d9402e15 	stw	r5,184(sp)
 4007b9c:	a02dd7fa 	srai	r22,r20,31
 4007ba0:	b005883a 	mov	r2,r22
 4007ba4:	103c430e 	bge	r2,zero,4006cb4 <__alt_data_end+0xfc006cb4>
 4007ba8:	d9402a17 	ldw	r5,168(sp)
 4007bac:	0529c83a 	sub	r20,zero,r20
 4007bb0:	07000b44 	movi	fp,45
 4007bb4:	a004c03a 	cmpne	r2,r20,zero
 4007bb8:	05adc83a 	sub	r22,zero,r22
 4007bbc:	df002785 	stb	fp,158(sp)
 4007bc0:	b0adc83a 	sub	r22,r22,r2
 4007bc4:	28022e16 	blt	r5,zero,4008480 <___svfprintf_internal_r+0x1d5c>
 4007bc8:	00bfdfc4 	movi	r2,-129
 4007bcc:	90a4703a 	and	r18,r18,r2
 4007bd0:	003c3f06 	br	4006cd0 <__alt_data_end+0xfc006cd0>
 4007bd4:	9080100c 	andi	r2,r18,64
 4007bd8:	d8002785 	stb	zero,158(sp)
 4007bdc:	10012526 	beq	r2,zero,4008074 <___svfprintf_internal_r+0x1950>
 4007be0:	d9402e17 	ldw	r5,184(sp)
 4007be4:	d8c02a17 	ldw	r3,168(sp)
 4007be8:	002d883a 	mov	r22,zero
 4007bec:	28800104 	addi	r2,r5,4
 4007bf0:	2d00000b 	ldhu	r20,0(r5)
 4007bf4:	183fa20e 	bge	r3,zero,4007a80 <__alt_data_end+0xfc007a80>
 4007bf8:	d8802e15 	stw	r2,184(sp)
 4007bfc:	0039883a 	mov	fp,zero
 4007c00:	a584b03a 	or	r2,r20,r22
 4007c04:	103c321e 	bne	r2,zero,4006cd0 <__alt_data_end+0xfc006cd0>
 4007c08:	00800044 	movi	r2,1
 4007c0c:	003e5006 	br	4007550 <__alt_data_end+0xfc007550>
 4007c10:	d9402d17 	ldw	r5,180(sp)
 4007c14:	d9801e04 	addi	r6,sp,120
 4007c18:	9809883a 	mov	r4,r19
 4007c1c:	400bf500 	call	400bf50 <__ssprint_r>
 4007c20:	103ba71e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007c24:	d8c02017 	ldw	r3,128(sp)
 4007c28:	da000404 	addi	r8,sp,16
 4007c2c:	d9003217 	ldw	r4,200(sp)
 4007c30:	d8802617 	ldw	r2,152(sp)
 4007c34:	d9403317 	ldw	r5,204(sp)
 4007c38:	8123883a 	add	r17,r16,r4
 4007c3c:	11400216 	blt	r2,r5,4007c48 <___svfprintf_internal_r+0x1524>
 4007c40:	9100004c 	andi	r4,r18,1
 4007c44:	20000d26 	beq	r4,zero,4007c7c <___svfprintf_internal_r+0x1558>
 4007c48:	d9003817 	ldw	r4,224(sp)
 4007c4c:	d9403417 	ldw	r5,208(sp)
 4007c50:	1907883a 	add	r3,r3,r4
 4007c54:	d9001f17 	ldw	r4,124(sp)
 4007c58:	41400015 	stw	r5,0(r8)
 4007c5c:	d9403817 	ldw	r5,224(sp)
 4007c60:	21000044 	addi	r4,r4,1
 4007c64:	d8c02015 	stw	r3,128(sp)
 4007c68:	41400115 	stw	r5,4(r8)
 4007c6c:	d9001f15 	stw	r4,124(sp)
 4007c70:	014001c4 	movi	r5,7
 4007c74:	2901dc16 	blt	r5,r4,40083e8 <___svfprintf_internal_r+0x1cc4>
 4007c78:	42000204 	addi	r8,r8,8
 4007c7c:	d9003317 	ldw	r4,204(sp)
 4007c80:	8121883a 	add	r16,r16,r4
 4007c84:	2085c83a 	sub	r2,r4,r2
 4007c88:	8461c83a 	sub	r16,r16,r17
 4007c8c:	1400010e 	bge	r2,r16,4007c94 <___svfprintf_internal_r+0x1570>
 4007c90:	1021883a 	mov	r16,r2
 4007c94:	04000a0e 	bge	zero,r16,4007cc0 <___svfprintf_internal_r+0x159c>
 4007c98:	d9001f17 	ldw	r4,124(sp)
 4007c9c:	1c07883a 	add	r3,r3,r16
 4007ca0:	44400015 	stw	r17,0(r8)
 4007ca4:	21000044 	addi	r4,r4,1
 4007ca8:	44000115 	stw	r16,4(r8)
 4007cac:	d8c02015 	stw	r3,128(sp)
 4007cb0:	d9001f15 	stw	r4,124(sp)
 4007cb4:	014001c4 	movi	r5,7
 4007cb8:	2901e616 	blt	r5,r4,4008454 <___svfprintf_internal_r+0x1d30>
 4007cbc:	42000204 	addi	r8,r8,8
 4007cc0:	8001f616 	blt	r16,zero,400849c <___svfprintf_internal_r+0x1d78>
 4007cc4:	1421c83a 	sub	r16,r2,r16
 4007cc8:	043cfa0e 	bge	zero,r16,40070b4 <__alt_data_end+0xfc0070b4>
 4007ccc:	04400404 	movi	r17,16
 4007cd0:	d8801f17 	ldw	r2,124(sp)
 4007cd4:	8c3edd0e 	bge	r17,r16,400784c <__alt_data_end+0xfc00784c>
 4007cd8:	01410074 	movhi	r5,1025
 4007cdc:	294b8984 	addi	r5,r5,11814
 4007ce0:	d9402c15 	stw	r5,176(sp)
 4007ce4:	058001c4 	movi	r22,7
 4007ce8:	dd002d17 	ldw	r20,180(sp)
 4007cec:	00000306 	br	4007cfc <___svfprintf_internal_r+0x15d8>
 4007cf0:	42000204 	addi	r8,r8,8
 4007cf4:	843ffc04 	addi	r16,r16,-16
 4007cf8:	8c3ed70e 	bge	r17,r16,4007858 <__alt_data_end+0xfc007858>
 4007cfc:	18c00404 	addi	r3,r3,16
 4007d00:	10800044 	addi	r2,r2,1
 4007d04:	45400015 	stw	r21,0(r8)
 4007d08:	44400115 	stw	r17,4(r8)
 4007d0c:	d8c02015 	stw	r3,128(sp)
 4007d10:	d8801f15 	stw	r2,124(sp)
 4007d14:	b0bff60e 	bge	r22,r2,4007cf0 <__alt_data_end+0xfc007cf0>
 4007d18:	d9801e04 	addi	r6,sp,120
 4007d1c:	a00b883a 	mov	r5,r20
 4007d20:	9809883a 	mov	r4,r19
 4007d24:	400bf500 	call	400bf50 <__ssprint_r>
 4007d28:	103b651e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007d2c:	d8c02017 	ldw	r3,128(sp)
 4007d30:	d8801f17 	ldw	r2,124(sp)
 4007d34:	da000404 	addi	r8,sp,16
 4007d38:	003fee06 	br	4007cf4 <__alt_data_end+0xfc007cf4>
 4007d3c:	9088703a 	and	r4,r18,r2
 4007d40:	203e8d1e 	bne	r4,zero,4007778 <__alt_data_end+0xfc007778>
 4007d44:	dc401f17 	ldw	r17,124(sp)
 4007d48:	40800115 	stw	r2,4(r8)
 4007d4c:	44000015 	stw	r16,0(r8)
 4007d50:	8c400044 	addi	r17,r17,1
 4007d54:	d8c02015 	stw	r3,128(sp)
 4007d58:	dc401f15 	stw	r17,124(sp)
 4007d5c:	008001c4 	movi	r2,7
 4007d60:	147f7f16 	blt	r2,r17,4007b60 <__alt_data_end+0xfc007b60>
 4007d64:	45800204 	addi	r22,r8,8
 4007d68:	003eac06 	br	400781c <__alt_data_end+0xfc00781c>
 4007d6c:	d9402d17 	ldw	r5,180(sp)
 4007d70:	d9801e04 	addi	r6,sp,120
 4007d74:	9809883a 	mov	r4,r19
 4007d78:	400bf500 	call	400bf50 <__ssprint_r>
 4007d7c:	103b501e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007d80:	d8c02017 	ldw	r3,128(sp)
 4007d84:	dc401f17 	ldw	r17,124(sp)
 4007d88:	da000404 	addi	r8,sp,16
 4007d8c:	003e8406 	br	40077a0 <__alt_data_end+0xfc0077a0>
 4007d90:	d9402d17 	ldw	r5,180(sp)
 4007d94:	d9801e04 	addi	r6,sp,120
 4007d98:	9809883a 	mov	r4,r19
 4007d9c:	400bf500 	call	400bf50 <__ssprint_r>
 4007da0:	103b471e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007da4:	d8c02017 	ldw	r3,128(sp)
 4007da8:	dc401f17 	ldw	r17,124(sp)
 4007dac:	dd800404 	addi	r22,sp,16
 4007db0:	003e8606 	br	40077cc <__alt_data_end+0xfc0077cc>
 4007db4:	0029883a 	mov	r20,zero
 4007db8:	a5000c04 	addi	r20,r20,48
 4007dbc:	dc001dc4 	addi	r16,sp,119
 4007dc0:	dd001dc5 	stb	r20,119(sp)
 4007dc4:	003f3806 	br	4007aa8 <__alt_data_end+0xfc007aa8>
 4007dc8:	d9402d17 	ldw	r5,180(sp)
 4007dcc:	d9801e04 	addi	r6,sp,120
 4007dd0:	9809883a 	mov	r4,r19
 4007dd4:	400bf500 	call	400bf50 <__ssprint_r>
 4007dd8:	103b391e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007ddc:	d8c02017 	ldw	r3,128(sp)
 4007de0:	da000404 	addi	r8,sp,16
 4007de4:	003c7306 	br	4006fb4 <__alt_data_end+0xfc006fb4>
 4007de8:	d9003617 	ldw	r4,216(sp)
 4007dec:	d9403717 	ldw	r5,220(sp)
 4007df0:	da003e15 	stw	r8,248(sp)
 4007df4:	400bd140 	call	400bd14 <__fpclassifyd>
 4007df8:	da003e17 	ldw	r8,248(sp)
 4007dfc:	1000bd1e 	bne	r2,zero,40080f4 <___svfprintf_internal_r+0x19d0>
 4007e00:	008011c4 	movi	r2,71
 4007e04:	14411e0e 	bge	r2,r17,4008280 <___svfprintf_internal_r+0x1b5c>
 4007e08:	04010074 	movhi	r16,1025
 4007e0c:	840b7c04 	addi	r16,r16,11760
 4007e10:	00c000c4 	movi	r3,3
 4007e14:	00bfdfc4 	movi	r2,-129
 4007e18:	d8c02915 	stw	r3,164(sp)
 4007e1c:	90a4703a 	and	r18,r18,r2
 4007e20:	df002783 	ldbu	fp,158(sp)
 4007e24:	d8c02b15 	stw	r3,172(sp)
 4007e28:	d8002a15 	stw	zero,168(sp)
 4007e2c:	d8003215 	stw	zero,200(sp)
 4007e30:	003bfa06 	br	4006e1c <__alt_data_end+0xfc006e1c>
 4007e34:	9080100c 	andi	r2,r18,64
 4007e38:	d8002785 	stb	zero,158(sp)
 4007e3c:	10009426 	beq	r2,zero,4008090 <___svfprintf_internal_r+0x196c>
 4007e40:	d9402e17 	ldw	r5,184(sp)
 4007e44:	d8c02a17 	ldw	r3,168(sp)
 4007e48:	002d883a 	mov	r22,zero
 4007e4c:	28800104 	addi	r2,r5,4
 4007e50:	2d00000b 	ldhu	r20,0(r5)
 4007e54:	183ec10e 	bge	r3,zero,400795c <__alt_data_end+0xfc00795c>
 4007e58:	a586b03a 	or	r3,r20,r22
 4007e5c:	d8802e15 	stw	r2,184(sp)
 4007e60:	183ec21e 	bne	r3,zero,400796c <__alt_data_end+0xfc00796c>
 4007e64:	0039883a 	mov	fp,zero
 4007e68:	0005883a 	mov	r2,zero
 4007e6c:	003db806 	br	4007550 <__alt_data_end+0xfc007550>
 4007e70:	d8c02e17 	ldw	r3,184(sp)
 4007e74:	d9002e17 	ldw	r4,184(sp)
 4007e78:	d9402e17 	ldw	r5,184(sp)
 4007e7c:	18c00017 	ldw	r3,0(r3)
 4007e80:	21000117 	ldw	r4,4(r4)
 4007e84:	29400204 	addi	r5,r5,8
 4007e88:	d8c03615 	stw	r3,216(sp)
 4007e8c:	d9003715 	stw	r4,220(sp)
 4007e90:	d9402e15 	stw	r5,184(sp)
 4007e94:	003b5a06 	br	4006c00 <__alt_data_end+0xfc006c00>
 4007e98:	9080100c 	andi	r2,r18,64
 4007e9c:	10010726 	beq	r2,zero,40082bc <___svfprintf_internal_r+0x1b98>
 4007ea0:	d8802e17 	ldw	r2,184(sp)
 4007ea4:	1500000f 	ldh	r20,0(r2)
 4007ea8:	10800104 	addi	r2,r2,4
 4007eac:	d8802e15 	stw	r2,184(sp)
 4007eb0:	a02dd7fa 	srai	r22,r20,31
 4007eb4:	b005883a 	mov	r2,r22
 4007eb8:	003b7d06 	br	4006cb0 <__alt_data_end+0xfc006cb0>
 4007ebc:	9080100c 	andi	r2,r18,64
 4007ec0:	10010526 	beq	r2,zero,40082d8 <___svfprintf_internal_r+0x1bb4>
 4007ec4:	d8c02e17 	ldw	r3,184(sp)
 4007ec8:	002d883a 	mov	r22,zero
 4007ecc:	1d00000b 	ldhu	r20,0(r3)
 4007ed0:	18c00104 	addi	r3,r3,4
 4007ed4:	d8c02e15 	stw	r3,184(sp)
 4007ed8:	003ce206 	br	4007264 <__alt_data_end+0xfc007264>
 4007edc:	bc400007 	ldb	r17,0(r23)
 4007ee0:	003a6506 	br	4006878 <__alt_data_end+0xfc006878>
 4007ee4:	9080040c 	andi	r2,r18,16
 4007ee8:	10010126 	beq	r2,zero,40082f0 <___svfprintf_internal_r+0x1bcc>
 4007eec:	d8c02e17 	ldw	r3,184(sp)
 4007ef0:	d9002f17 	ldw	r4,188(sp)
 4007ef4:	18800017 	ldw	r2,0(r3)
 4007ef8:	18c00104 	addi	r3,r3,4
 4007efc:	d8c02e15 	stw	r3,184(sp)
 4007f00:	11000015 	stw	r4,0(r2)
 4007f04:	003a3206 	br	40067d0 <__alt_data_end+0xfc0067d0>
 4007f08:	d9002a17 	ldw	r4,168(sp)
 4007f0c:	d8002785 	stb	zero,158(sp)
 4007f10:	203d8d16 	blt	r4,zero,4007548 <__alt_data_end+0xfc007548>
 4007f14:	00bfdfc4 	movi	r2,-129
 4007f18:	90a4703a 	and	r18,r18,r2
 4007f1c:	003ad506 	br	4006a74 <__alt_data_end+0xfc006a74>
 4007f20:	01410074 	movhi	r5,1025
 4007f24:	294b8984 	addi	r5,r5,11814
 4007f28:	d9402c15 	stw	r5,176(sp)
 4007f2c:	d9402c17 	ldw	r5,176(sp)
 4007f30:	1c47883a 	add	r3,r3,r17
 4007f34:	10800044 	addi	r2,r2,1
 4007f38:	41400015 	stw	r5,0(r8)
 4007f3c:	44400115 	stw	r17,4(r8)
 4007f40:	d8c02015 	stw	r3,128(sp)
 4007f44:	d8801f15 	stw	r2,124(sp)
 4007f48:	010001c4 	movi	r4,7
 4007f4c:	20bf3016 	blt	r4,r2,4007c10 <__alt_data_end+0xfc007c10>
 4007f50:	42000204 	addi	r8,r8,8
 4007f54:	003f3506 	br	4007c2c <__alt_data_end+0xfc007c2c>
 4007f58:	01010074 	movhi	r4,1025
 4007f5c:	210b8984 	addi	r4,r4,11814
 4007f60:	d9002c15 	stw	r4,176(sp)
 4007f64:	003c3c06 	br	4007058 <__alt_data_end+0xfc007058>
 4007f68:	d9402d17 	ldw	r5,180(sp)
 4007f6c:	d9801e04 	addi	r6,sp,120
 4007f70:	9809883a 	mov	r4,r19
 4007f74:	400bf500 	call	400bf50 <__ssprint_r>
 4007f78:	103ad11e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4007f7c:	d8c02017 	ldw	r3,128(sp)
 4007f80:	da000404 	addi	r8,sp,16
 4007f84:	003d9306 	br	40075d4 <__alt_data_end+0xfc0075d4>
 4007f88:	d8801f17 	ldw	r2,124(sp)
 4007f8c:	01410074 	movhi	r5,1025
 4007f90:	01000044 	movi	r4,1
 4007f94:	18c00044 	addi	r3,r3,1
 4007f98:	10800044 	addi	r2,r2,1
 4007f9c:	294b8904 	addi	r5,r5,11812
 4007fa0:	41000115 	stw	r4,4(r8)
 4007fa4:	41400015 	stw	r5,0(r8)
 4007fa8:	d8c02015 	stw	r3,128(sp)
 4007fac:	d8801f15 	stw	r2,124(sp)
 4007fb0:	010001c4 	movi	r4,7
 4007fb4:	2080b516 	blt	r4,r2,400828c <___svfprintf_internal_r+0x1b68>
 4007fb8:	42000204 	addi	r8,r8,8
 4007fbc:	8800041e 	bne	r17,zero,4007fd0 <___svfprintf_internal_r+0x18ac>
 4007fc0:	d8803317 	ldw	r2,204(sp)
 4007fc4:	1000021e 	bne	r2,zero,4007fd0 <___svfprintf_internal_r+0x18ac>
 4007fc8:	9080004c 	andi	r2,r18,1
 4007fcc:	103c3926 	beq	r2,zero,40070b4 <__alt_data_end+0xfc0070b4>
 4007fd0:	d9003817 	ldw	r4,224(sp)
 4007fd4:	d8801f17 	ldw	r2,124(sp)
 4007fd8:	d9403417 	ldw	r5,208(sp)
 4007fdc:	20c7883a 	add	r3,r4,r3
 4007fe0:	10800044 	addi	r2,r2,1
 4007fe4:	41000115 	stw	r4,4(r8)
 4007fe8:	41400015 	stw	r5,0(r8)
 4007fec:	d8c02015 	stw	r3,128(sp)
 4007ff0:	d8801f15 	stw	r2,124(sp)
 4007ff4:	010001c4 	movi	r4,7
 4007ff8:	20818016 	blt	r4,r2,40085fc <___svfprintf_internal_r+0x1ed8>
 4007ffc:	42000204 	addi	r8,r8,8
 4008000:	0463c83a 	sub	r17,zero,r17
 4008004:	0440cb0e 	bge	zero,r17,4008334 <___svfprintf_internal_r+0x1c10>
 4008008:	05800404 	movi	r22,16
 400800c:	b440e80e 	bge	r22,r17,40083b0 <___svfprintf_internal_r+0x1c8c>
 4008010:	01410074 	movhi	r5,1025
 4008014:	294b8984 	addi	r5,r5,11814
 4008018:	d9402c15 	stw	r5,176(sp)
 400801c:	070001c4 	movi	fp,7
 4008020:	dd002d17 	ldw	r20,180(sp)
 4008024:	00000306 	br	4008034 <___svfprintf_internal_r+0x1910>
 4008028:	42000204 	addi	r8,r8,8
 400802c:	8c7ffc04 	addi	r17,r17,-16
 4008030:	b440e20e 	bge	r22,r17,40083bc <___svfprintf_internal_r+0x1c98>
 4008034:	18c00404 	addi	r3,r3,16
 4008038:	10800044 	addi	r2,r2,1
 400803c:	45400015 	stw	r21,0(r8)
 4008040:	45800115 	stw	r22,4(r8)
 4008044:	d8c02015 	stw	r3,128(sp)
 4008048:	d8801f15 	stw	r2,124(sp)
 400804c:	e0bff60e 	bge	fp,r2,4008028 <__alt_data_end+0xfc008028>
 4008050:	d9801e04 	addi	r6,sp,120
 4008054:	a00b883a 	mov	r5,r20
 4008058:	9809883a 	mov	r4,r19
 400805c:	400bf500 	call	400bf50 <__ssprint_r>
 4008060:	103a971e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4008064:	d8c02017 	ldw	r3,128(sp)
 4008068:	d8801f17 	ldw	r2,124(sp)
 400806c:	da000404 	addi	r8,sp,16
 4008070:	003fee06 	br	400802c <__alt_data_end+0xfc00802c>
 4008074:	d9002e17 	ldw	r4,184(sp)
 4008078:	d9402a17 	ldw	r5,168(sp)
 400807c:	002d883a 	mov	r22,zero
 4008080:	20800104 	addi	r2,r4,4
 4008084:	25000017 	ldw	r20,0(r4)
 4008088:	283e7d0e 	bge	r5,zero,4007a80 <__alt_data_end+0xfc007a80>
 400808c:	003eda06 	br	4007bf8 <__alt_data_end+0xfc007bf8>
 4008090:	d9002e17 	ldw	r4,184(sp)
 4008094:	d9402a17 	ldw	r5,168(sp)
 4008098:	002d883a 	mov	r22,zero
 400809c:	20800104 	addi	r2,r4,4
 40080a0:	25000017 	ldw	r20,0(r4)
 40080a4:	283e2d0e 	bge	r5,zero,400795c <__alt_data_end+0xfc00795c>
 40080a8:	003f6b06 	br	4007e58 <__alt_data_end+0xfc007e58>
 40080ac:	d8c02e15 	stw	r3,184(sp)
 40080b0:	0039883a 	mov	fp,zero
 40080b4:	003ed206 	br	4007c00 <__alt_data_end+0xfc007c00>
 40080b8:	bc400043 	ldbu	r17,1(r23)
 40080bc:	84000814 	ori	r16,r16,32
 40080c0:	bdc00044 	addi	r23,r23,1
 40080c4:	8c403fcc 	andi	r17,r17,255
 40080c8:	8c40201c 	xori	r17,r17,128
 40080cc:	8c7fe004 	addi	r17,r17,-128
 40080d0:	0039e906 	br	4006878 <__alt_data_end+0xfc006878>
 40080d4:	d9402d17 	ldw	r5,180(sp)
 40080d8:	d9801e04 	addi	r6,sp,120
 40080dc:	9809883a 	mov	r4,r19
 40080e0:	400bf500 	call	400bf50 <__ssprint_r>
 40080e4:	103a761e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 40080e8:	d8c02017 	ldw	r3,128(sp)
 40080ec:	da000404 	addi	r8,sp,16
 40080f0:	003d4a06 	br	400761c <__alt_data_end+0xfc00761c>
 40080f4:	d9002a17 	ldw	r4,168(sp)
 40080f8:	05bff7c4 	movi	r22,-33
 40080fc:	00bfffc4 	movi	r2,-1
 4008100:	8dac703a 	and	r22,r17,r22
 4008104:	20806a26 	beq	r4,r2,40082b0 <___svfprintf_internal_r+0x1b8c>
 4008108:	008011c4 	movi	r2,71
 400810c:	b0813726 	beq	r22,r2,40085ec <___svfprintf_internal_r+0x1ec8>
 4008110:	d9003717 	ldw	r4,220(sp)
 4008114:	90c04014 	ori	r3,r18,256
 4008118:	d8c02c15 	stw	r3,176(sp)
 400811c:	20015d16 	blt	r4,zero,4008694 <___svfprintf_internal_r+0x1f70>
 4008120:	dd003717 	ldw	r20,220(sp)
 4008124:	d8002905 	stb	zero,164(sp)
 4008128:	00801984 	movi	r2,102
 400812c:	88814026 	beq	r17,r2,4008630 <___svfprintf_internal_r+0x1f0c>
 4008130:	00801184 	movi	r2,70
 4008134:	88817126 	beq	r17,r2,40086fc <___svfprintf_internal_r+0x1fd8>
 4008138:	00801144 	movi	r2,69
 400813c:	b0816226 	beq	r22,r2,40086c8 <___svfprintf_internal_r+0x1fa4>
 4008140:	d8c02a17 	ldw	r3,168(sp)
 4008144:	d8802104 	addi	r2,sp,132
 4008148:	d8800315 	stw	r2,12(sp)
 400814c:	d9403617 	ldw	r5,216(sp)
 4008150:	d8802504 	addi	r2,sp,148
 4008154:	d8800215 	stw	r2,8(sp)
 4008158:	d8802604 	addi	r2,sp,152
 400815c:	d8c00015 	stw	r3,0(sp)
 4008160:	d8800115 	stw	r2,4(sp)
 4008164:	01c00084 	movi	r7,2
 4008168:	a00d883a 	mov	r6,r20
 400816c:	9809883a 	mov	r4,r19
 4008170:	d8c03d15 	stw	r3,244(sp)
 4008174:	da003e15 	stw	r8,248(sp)
 4008178:	4008c080 	call	4008c08 <_dtoa_r>
 400817c:	1021883a 	mov	r16,r2
 4008180:	008019c4 	movi	r2,103
 4008184:	d8c03d17 	ldw	r3,244(sp)
 4008188:	da003e17 	ldw	r8,248(sp)
 400818c:	8880e726 	beq	r17,r2,400852c <___svfprintf_internal_r+0x1e08>
 4008190:	008011c4 	movi	r2,71
 4008194:	8880d426 	beq	r17,r2,40084e8 <___svfprintf_internal_r+0x1dc4>
 4008198:	80f9883a 	add	fp,r16,r3
 400819c:	d9003617 	ldw	r4,216(sp)
 40081a0:	000d883a 	mov	r6,zero
 40081a4:	000f883a 	mov	r7,zero
 40081a8:	a00b883a 	mov	r5,r20
 40081ac:	da003e15 	stw	r8,248(sp)
 40081b0:	400ed780 	call	400ed78 <__eqdf2>
 40081b4:	da003e17 	ldw	r8,248(sp)
 40081b8:	1000e426 	beq	r2,zero,400854c <___svfprintf_internal_r+0x1e28>
 40081bc:	d8802117 	ldw	r2,132(sp)
 40081c0:	1700062e 	bgeu	r2,fp,40081dc <___svfprintf_internal_r+0x1ab8>
 40081c4:	01000c04 	movi	r4,48
 40081c8:	10c00044 	addi	r3,r2,1
 40081cc:	d8c02115 	stw	r3,132(sp)
 40081d0:	11000005 	stb	r4,0(r2)
 40081d4:	d8802117 	ldw	r2,132(sp)
 40081d8:	173ffb36 	bltu	r2,fp,40081c8 <__alt_data_end+0xfc0081c8>
 40081dc:	1405c83a 	sub	r2,r2,r16
 40081e0:	d8803315 	stw	r2,204(sp)
 40081e4:	008011c4 	movi	r2,71
 40081e8:	b080c526 	beq	r22,r2,4008500 <___svfprintf_internal_r+0x1ddc>
 40081ec:	00801944 	movi	r2,101
 40081f0:	1441d80e 	bge	r2,r17,4008954 <___svfprintf_internal_r+0x2230>
 40081f4:	d8c02617 	ldw	r3,152(sp)
 40081f8:	00801984 	movi	r2,102
 40081fc:	d8c03215 	stw	r3,200(sp)
 4008200:	88813426 	beq	r17,r2,40086d4 <___svfprintf_internal_r+0x1fb0>
 4008204:	d8c03217 	ldw	r3,200(sp)
 4008208:	d9003317 	ldw	r4,204(sp)
 400820c:	19012516 	blt	r3,r4,40086a4 <___svfprintf_internal_r+0x1f80>
 4008210:	9480004c 	andi	r18,r18,1
 4008214:	9001841e 	bne	r18,zero,4008828 <___svfprintf_internal_r+0x2104>
 4008218:	1805883a 	mov	r2,r3
 400821c:	1801cb16 	blt	r3,zero,400894c <___svfprintf_internal_r+0x2228>
 4008220:	d8c03217 	ldw	r3,200(sp)
 4008224:	044019c4 	movi	r17,103
 4008228:	d8c02b15 	stw	r3,172(sp)
 400822c:	df002907 	ldb	fp,164(sp)
 4008230:	e000a61e 	bne	fp,zero,40084cc <___svfprintf_internal_r+0x1da8>
 4008234:	df002783 	ldbu	fp,158(sp)
 4008238:	d8802915 	stw	r2,164(sp)
 400823c:	dc802c17 	ldw	r18,176(sp)
 4008240:	d8002a15 	stw	zero,168(sp)
 4008244:	003af506 	br	4006e1c <__alt_data_end+0xfc006e1c>
 4008248:	04010074 	movhi	r16,1025
 400824c:	840b7904 	addi	r16,r16,11748
 4008250:	003a7e06 	br	4006c4c <__alt_data_end+0xfc006c4c>
 4008254:	d9003917 	ldw	r4,228(sp)
 4008258:	04001004 	movi	r16,64
 400825c:	800b883a 	mov	r5,r16
 4008260:	400a36c0 	call	400a36c <_malloc_r>
 4008264:	d9002d17 	ldw	r4,180(sp)
 4008268:	20800015 	stw	r2,0(r4)
 400826c:	20800415 	stw	r2,16(r4)
 4008270:	1001d026 	beq	r2,zero,40089b4 <___svfprintf_internal_r+0x2290>
 4008274:	d8802d17 	ldw	r2,180(sp)
 4008278:	14000515 	stw	r16,20(r2)
 400827c:	00394406 	br	4006790 <__alt_data_end+0xfc006790>
 4008280:	04010074 	movhi	r16,1025
 4008284:	840b7b04 	addi	r16,r16,11756
 4008288:	003ee106 	br	4007e10 <__alt_data_end+0xfc007e10>
 400828c:	d9402d17 	ldw	r5,180(sp)
 4008290:	d9801e04 	addi	r6,sp,120
 4008294:	9809883a 	mov	r4,r19
 4008298:	400bf500 	call	400bf50 <__ssprint_r>
 400829c:	103a081e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 40082a0:	dc402617 	ldw	r17,152(sp)
 40082a4:	d8c02017 	ldw	r3,128(sp)
 40082a8:	da000404 	addi	r8,sp,16
 40082ac:	003f4306 	br	4007fbc <__alt_data_end+0xfc007fbc>
 40082b0:	01400184 	movi	r5,6
 40082b4:	d9402a15 	stw	r5,168(sp)
 40082b8:	003f9506 	br	4008110 <__alt_data_end+0xfc008110>
 40082bc:	d8c02e17 	ldw	r3,184(sp)
 40082c0:	1d000017 	ldw	r20,0(r3)
 40082c4:	18c00104 	addi	r3,r3,4
 40082c8:	d8c02e15 	stw	r3,184(sp)
 40082cc:	a02dd7fa 	srai	r22,r20,31
 40082d0:	b005883a 	mov	r2,r22
 40082d4:	003a7606 	br	4006cb0 <__alt_data_end+0xfc006cb0>
 40082d8:	d9002e17 	ldw	r4,184(sp)
 40082dc:	002d883a 	mov	r22,zero
 40082e0:	25000017 	ldw	r20,0(r4)
 40082e4:	21000104 	addi	r4,r4,4
 40082e8:	d9002e15 	stw	r4,184(sp)
 40082ec:	003bdd06 	br	4007264 <__alt_data_end+0xfc007264>
 40082f0:	9480100c 	andi	r18,r18,64
 40082f4:	90006e26 	beq	r18,zero,40084b0 <___svfprintf_internal_r+0x1d8c>
 40082f8:	d9402e17 	ldw	r5,184(sp)
 40082fc:	d8c02f17 	ldw	r3,188(sp)
 4008300:	28800017 	ldw	r2,0(r5)
 4008304:	29400104 	addi	r5,r5,4
 4008308:	d9402e15 	stw	r5,184(sp)
 400830c:	10c0000d 	sth	r3,0(r2)
 4008310:	00392f06 	br	40067d0 <__alt_data_end+0xfc0067d0>
 4008314:	d9402d17 	ldw	r5,180(sp)
 4008318:	d9801e04 	addi	r6,sp,120
 400831c:	9809883a 	mov	r4,r19
 4008320:	400bf500 	call	400bf50 <__ssprint_r>
 4008324:	1039e61e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4008328:	d8c02017 	ldw	r3,128(sp)
 400832c:	d8801f17 	ldw	r2,124(sp)
 4008330:	da000404 	addi	r8,sp,16
 4008334:	d9403317 	ldw	r5,204(sp)
 4008338:	10800044 	addi	r2,r2,1
 400833c:	44000015 	stw	r16,0(r8)
 4008340:	28c7883a 	add	r3,r5,r3
 4008344:	003b5506 	br	400709c <__alt_data_end+0xfc00709c>
 4008348:	8009883a 	mov	r4,r16
 400834c:	df003e15 	stw	fp,248(sp)
 4008350:	400beb80 	call	400beb8 <strlen>
 4008354:	d8802b15 	stw	r2,172(sp)
 4008358:	da003e17 	ldw	r8,248(sp)
 400835c:	103c160e 	bge	r2,zero,40073b8 <__alt_data_end+0xfc0073b8>
 4008360:	0005883a 	mov	r2,zero
 4008364:	003c1406 	br	40073b8 <__alt_data_end+0xfc0073b8>
 4008368:	00bfffc4 	movi	r2,-1
 400836c:	0039d906 	br	4006ad4 <__alt_data_end+0xfc006ad4>
 4008370:	01010074 	movhi	r4,1025
 4008374:	210b8d84 	addi	r4,r4,11830
 4008378:	d9003515 	stw	r4,212(sp)
 400837c:	003ae406 	br	4006f10 <__alt_data_end+0xfc006f10>
 4008380:	013fffc4 	movi	r4,-1
 4008384:	0039fa06 	br	4006b70 <__alt_data_end+0xfc006b70>
 4008388:	d9402d17 	ldw	r5,180(sp)
 400838c:	d9801e04 	addi	r6,sp,120
 4008390:	9809883a 	mov	r4,r19
 4008394:	400bf500 	call	400bf50 <__ssprint_r>
 4008398:	1039c91e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 400839c:	d8c02017 	ldw	r3,128(sp)
 40083a0:	da000404 	addi	r8,sp,16
 40083a4:	003d8406 	br	40079b8 <__alt_data_end+0xfc0079b8>
 40083a8:	0023883a 	mov	r17,zero
 40083ac:	003d8306 	br	40079bc <__alt_data_end+0xfc0079bc>
 40083b0:	01010074 	movhi	r4,1025
 40083b4:	210b8984 	addi	r4,r4,11814
 40083b8:	d9002c15 	stw	r4,176(sp)
 40083bc:	d9002c17 	ldw	r4,176(sp)
 40083c0:	1c47883a 	add	r3,r3,r17
 40083c4:	10800044 	addi	r2,r2,1
 40083c8:	41000015 	stw	r4,0(r8)
 40083cc:	44400115 	stw	r17,4(r8)
 40083d0:	d8c02015 	stw	r3,128(sp)
 40083d4:	d8801f15 	stw	r2,124(sp)
 40083d8:	010001c4 	movi	r4,7
 40083dc:	20bfcd16 	blt	r4,r2,4008314 <__alt_data_end+0xfc008314>
 40083e0:	42000204 	addi	r8,r8,8
 40083e4:	003fd306 	br	4008334 <__alt_data_end+0xfc008334>
 40083e8:	d9402d17 	ldw	r5,180(sp)
 40083ec:	d9801e04 	addi	r6,sp,120
 40083f0:	9809883a 	mov	r4,r19
 40083f4:	400bf500 	call	400bf50 <__ssprint_r>
 40083f8:	1039b11e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 40083fc:	d8802617 	ldw	r2,152(sp)
 4008400:	d8c02017 	ldw	r3,128(sp)
 4008404:	da000404 	addi	r8,sp,16
 4008408:	003e1c06 	br	4007c7c <__alt_data_end+0xfc007c7c>
 400840c:	d8802a17 	ldw	r2,168(sp)
 4008410:	00c00184 	movi	r3,6
 4008414:	1880012e 	bgeu	r3,r2,400841c <___svfprintf_internal_r+0x1cf8>
 4008418:	1805883a 	mov	r2,r3
 400841c:	d8802b15 	stw	r2,172(sp)
 4008420:	1000f316 	blt	r2,zero,40087f0 <___svfprintf_internal_r+0x20cc>
 4008424:	04010074 	movhi	r16,1025
 4008428:	d8802915 	stw	r2,164(sp)
 400842c:	dd002e15 	stw	r20,184(sp)
 4008430:	d8002a15 	stw	zero,168(sp)
 4008434:	d8003215 	stw	zero,200(sp)
 4008438:	840b8704 	addi	r16,r16,11804
 400843c:	0039883a 	mov	fp,zero
 4008440:	003a7d06 	br	4006e38 <__alt_data_end+0xfc006e38>
 4008444:	01010074 	movhi	r4,1025
 4008448:	210b8d84 	addi	r4,r4,11830
 400844c:	d9003515 	stw	r4,212(sp)
 4008450:	003b3d06 	br	4007148 <__alt_data_end+0xfc007148>
 4008454:	d9402d17 	ldw	r5,180(sp)
 4008458:	d9801e04 	addi	r6,sp,120
 400845c:	9809883a 	mov	r4,r19
 4008460:	400bf500 	call	400bf50 <__ssprint_r>
 4008464:	1039961e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4008468:	d8802617 	ldw	r2,152(sp)
 400846c:	d9403317 	ldw	r5,204(sp)
 4008470:	d8c02017 	ldw	r3,128(sp)
 4008474:	da000404 	addi	r8,sp,16
 4008478:	2885c83a 	sub	r2,r5,r2
 400847c:	003e1006 	br	4007cc0 <__alt_data_end+0xfc007cc0>
 4008480:	00800044 	movi	r2,1
 4008484:	10803fcc 	andi	r2,r2,255
 4008488:	00c00044 	movi	r3,1
 400848c:	10fa1026 	beq	r2,r3,4006cd0 <__alt_data_end+0xfc006cd0>
 4008490:	00c00084 	movi	r3,2
 4008494:	10fb8226 	beq	r2,r3,40072a0 <__alt_data_end+0xfc0072a0>
 4008498:	003a4206 	br	4006da4 <__alt_data_end+0xfc006da4>
 400849c:	0021883a 	mov	r16,zero
 40084a0:	003e0806 	br	4007cc4 <__alt_data_end+0xfc007cc4>
 40084a4:	07000b44 	movi	fp,45
 40084a8:	df002785 	stb	fp,158(sp)
 40084ac:	0039e306 	br	4006c3c <__alt_data_end+0xfc006c3c>
 40084b0:	d9002e17 	ldw	r4,184(sp)
 40084b4:	d9402f17 	ldw	r5,188(sp)
 40084b8:	20800017 	ldw	r2,0(r4)
 40084bc:	21000104 	addi	r4,r4,4
 40084c0:	d9002e15 	stw	r4,184(sp)
 40084c4:	11400015 	stw	r5,0(r2)
 40084c8:	0038c106 	br	40067d0 <__alt_data_end+0xfc0067d0>
 40084cc:	00c00b44 	movi	r3,45
 40084d0:	d8c02785 	stb	r3,158(sp)
 40084d4:	d8802915 	stw	r2,164(sp)
 40084d8:	dc802c17 	ldw	r18,176(sp)
 40084dc:	d8002a15 	stw	zero,168(sp)
 40084e0:	07000b44 	movi	fp,45
 40084e4:	003a5106 	br	4006e2c <__alt_data_end+0xfc006e2c>
 40084e8:	9080004c 	andi	r2,r18,1
 40084ec:	1000941e 	bne	r2,zero,4008740 <___svfprintf_internal_r+0x201c>
 40084f0:	d8802117 	ldw	r2,132(sp)
 40084f4:	1405c83a 	sub	r2,r2,r16
 40084f8:	d8803315 	stw	r2,204(sp)
 40084fc:	b441151e 	bne	r22,r17,4008954 <___svfprintf_internal_r+0x2230>
 4008500:	dd802617 	ldw	r22,152(sp)
 4008504:	00bfff44 	movi	r2,-3
 4008508:	b0801a16 	blt	r22,r2,4008574 <___svfprintf_internal_r+0x1e50>
 400850c:	d9402a17 	ldw	r5,168(sp)
 4008510:	2d801816 	blt	r5,r22,4008574 <___svfprintf_internal_r+0x1e50>
 4008514:	dd803215 	stw	r22,200(sp)
 4008518:	003f3a06 	br	4008204 <__alt_data_end+0xfc008204>
 400851c:	1025883a 	mov	r18,r2
 4008520:	0039883a 	mov	fp,zero
 4008524:	00800084 	movi	r2,2
 4008528:	003fd606 	br	4008484 <__alt_data_end+0xfc008484>
 400852c:	9080004c 	andi	r2,r18,1
 4008530:	103f191e 	bne	r2,zero,4008198 <__alt_data_end+0xfc008198>
 4008534:	d8802117 	ldw	r2,132(sp)
 4008538:	003f2806 	br	40081dc <__alt_data_end+0xfc0081dc>
 400853c:	01010074 	movhi	r4,1025
 4008540:	210b8984 	addi	r4,r4,11814
 4008544:	d9002c15 	stw	r4,176(sp)
 4008548:	003c7c06 	br	400773c <__alt_data_end+0xfc00773c>
 400854c:	e005883a 	mov	r2,fp
 4008550:	003f2206 	br	40081dc <__alt_data_end+0xfc0081dc>
 4008554:	d9002a17 	ldw	r4,168(sp)
 4008558:	df002783 	ldbu	fp,158(sp)
 400855c:	dd002e15 	stw	r20,184(sp)
 4008560:	d9002915 	stw	r4,164(sp)
 4008564:	d9002b15 	stw	r4,172(sp)
 4008568:	d8002a15 	stw	zero,168(sp)
 400856c:	d8003215 	stw	zero,200(sp)
 4008570:	003a2a06 	br	4006e1c <__alt_data_end+0xfc006e1c>
 4008574:	8c7fff84 	addi	r17,r17,-2
 4008578:	b5bfffc4 	addi	r22,r22,-1
 400857c:	dd802615 	stw	r22,152(sp)
 4008580:	dc4022c5 	stb	r17,139(sp)
 4008584:	b000c316 	blt	r22,zero,4008894 <___svfprintf_internal_r+0x2170>
 4008588:	00800ac4 	movi	r2,43
 400858c:	d8802305 	stb	r2,140(sp)
 4008590:	00800244 	movi	r2,9
 4008594:	15806e16 	blt	r2,r22,4008750 <___svfprintf_internal_r+0x202c>
 4008598:	00800c04 	movi	r2,48
 400859c:	b5800c04 	addi	r22,r22,48
 40085a0:	d8802345 	stb	r2,141(sp)
 40085a4:	dd802385 	stb	r22,142(sp)
 40085a8:	d88023c4 	addi	r2,sp,143
 40085ac:	df0022c4 	addi	fp,sp,139
 40085b0:	d8c03317 	ldw	r3,204(sp)
 40085b4:	1739c83a 	sub	fp,r2,fp
 40085b8:	d9003317 	ldw	r4,204(sp)
 40085bc:	e0c7883a 	add	r3,fp,r3
 40085c0:	df003b15 	stw	fp,236(sp)
 40085c4:	d8c02b15 	stw	r3,172(sp)
 40085c8:	00800044 	movi	r2,1
 40085cc:	1100b70e 	bge	r2,r4,40088ac <___svfprintf_internal_r+0x2188>
 40085d0:	d8c02b17 	ldw	r3,172(sp)
 40085d4:	18c00044 	addi	r3,r3,1
 40085d8:	d8c02b15 	stw	r3,172(sp)
 40085dc:	1805883a 	mov	r2,r3
 40085e0:	1800b016 	blt	r3,zero,40088a4 <___svfprintf_internal_r+0x2180>
 40085e4:	d8003215 	stw	zero,200(sp)
 40085e8:	003f1006 	br	400822c <__alt_data_end+0xfc00822c>
 40085ec:	d8802a17 	ldw	r2,168(sp)
 40085f0:	103ec71e 	bne	r2,zero,4008110 <__alt_data_end+0xfc008110>
 40085f4:	dc002a15 	stw	r16,168(sp)
 40085f8:	003ec506 	br	4008110 <__alt_data_end+0xfc008110>
 40085fc:	d9402d17 	ldw	r5,180(sp)
 4008600:	d9801e04 	addi	r6,sp,120
 4008604:	9809883a 	mov	r4,r19
 4008608:	400bf500 	call	400bf50 <__ssprint_r>
 400860c:	10392c1e 	bne	r2,zero,4006ac0 <__alt_data_end+0xfc006ac0>
 4008610:	dc402617 	ldw	r17,152(sp)
 4008614:	d8c02017 	ldw	r3,128(sp)
 4008618:	d8801f17 	ldw	r2,124(sp)
 400861c:	da000404 	addi	r8,sp,16
 4008620:	003e7706 	br	4008000 <__alt_data_end+0xfc008000>
 4008624:	182f883a 	mov	r23,r3
 4008628:	d8002a15 	stw	zero,168(sp)
 400862c:	00389306 	br	400687c <__alt_data_end+0xfc00687c>
 4008630:	d8c02a17 	ldw	r3,168(sp)
 4008634:	d8802104 	addi	r2,sp,132
 4008638:	d8800315 	stw	r2,12(sp)
 400863c:	d9403617 	ldw	r5,216(sp)
 4008640:	d8802504 	addi	r2,sp,148
 4008644:	d8800215 	stw	r2,8(sp)
 4008648:	d8802604 	addi	r2,sp,152
 400864c:	d8c00015 	stw	r3,0(sp)
 4008650:	9809883a 	mov	r4,r19
 4008654:	d8800115 	stw	r2,4(sp)
 4008658:	01c000c4 	movi	r7,3
 400865c:	a00d883a 	mov	r6,r20
 4008660:	da003e15 	stw	r8,248(sp)
 4008664:	4008c080 	call	4008c08 <_dtoa_r>
 4008668:	d9002a17 	ldw	r4,168(sp)
 400866c:	da003e17 	ldw	r8,248(sp)
 4008670:	1021883a 	mov	r16,r2
 4008674:	1139883a 	add	fp,r2,r4
 4008678:	2007883a 	mov	r3,r4
 400867c:	81000007 	ldb	r4,0(r16)
 4008680:	00800c04 	movi	r2,48
 4008684:	20806f26 	beq	r4,r2,4008844 <___svfprintf_internal_r+0x2120>
 4008688:	d8c02617 	ldw	r3,152(sp)
 400868c:	e0f9883a 	add	fp,fp,r3
 4008690:	003ec206 	br	400819c <__alt_data_end+0xfc00819c>
 4008694:	00c00b44 	movi	r3,45
 4008698:	2520003c 	xorhi	r20,r4,32768
 400869c:	d8c02905 	stb	r3,164(sp)
 40086a0:	003ea106 	br	4008128 <__alt_data_end+0xfc008128>
 40086a4:	d8c03217 	ldw	r3,200(sp)
 40086a8:	00c0890e 	bge	zero,r3,40088d0 <___svfprintf_internal_r+0x21ac>
 40086ac:	00800044 	movi	r2,1
 40086b0:	d9003317 	ldw	r4,204(sp)
 40086b4:	1105883a 	add	r2,r2,r4
 40086b8:	d8802b15 	stw	r2,172(sp)
 40086bc:	10005f16 	blt	r2,zero,400883c <___svfprintf_internal_r+0x2118>
 40086c0:	044019c4 	movi	r17,103
 40086c4:	003ed906 	br	400822c <__alt_data_end+0xfc00822c>
 40086c8:	d9002a17 	ldw	r4,168(sp)
 40086cc:	20c00044 	addi	r3,r4,1
 40086d0:	003e9c06 	br	4008144 <__alt_data_end+0xfc008144>
 40086d4:	d9002a17 	ldw	r4,168(sp)
 40086d8:	00c0680e 	bge	zero,r3,400887c <___svfprintf_internal_r+0x2158>
 40086dc:	2000461e 	bne	r4,zero,40087f8 <___svfprintf_internal_r+0x20d4>
 40086e0:	9480004c 	andi	r18,r18,1
 40086e4:	9000441e 	bne	r18,zero,40087f8 <___svfprintf_internal_r+0x20d4>
 40086e8:	1805883a 	mov	r2,r3
 40086ec:	1800a116 	blt	r3,zero,4008974 <___svfprintf_internal_r+0x2250>
 40086f0:	d8c03217 	ldw	r3,200(sp)
 40086f4:	d8c02b15 	stw	r3,172(sp)
 40086f8:	003ecc06 	br	400822c <__alt_data_end+0xfc00822c>
 40086fc:	d9402a17 	ldw	r5,168(sp)
 4008700:	d8802104 	addi	r2,sp,132
 4008704:	d8800315 	stw	r2,12(sp)
 4008708:	d9400015 	stw	r5,0(sp)
 400870c:	d8802504 	addi	r2,sp,148
 4008710:	d9403617 	ldw	r5,216(sp)
 4008714:	d8800215 	stw	r2,8(sp)
 4008718:	d8802604 	addi	r2,sp,152
 400871c:	d8800115 	stw	r2,4(sp)
 4008720:	01c000c4 	movi	r7,3
 4008724:	a00d883a 	mov	r6,r20
 4008728:	9809883a 	mov	r4,r19
 400872c:	da003e15 	stw	r8,248(sp)
 4008730:	4008c080 	call	4008c08 <_dtoa_r>
 4008734:	d8c02a17 	ldw	r3,168(sp)
 4008738:	da003e17 	ldw	r8,248(sp)
 400873c:	1021883a 	mov	r16,r2
 4008740:	00801184 	movi	r2,70
 4008744:	80f9883a 	add	fp,r16,r3
 4008748:	88bfcc26 	beq	r17,r2,400867c <__alt_data_end+0xfc00867c>
 400874c:	003e9306 	br	400819c <__alt_data_end+0xfc00819c>
 4008750:	df0022c4 	addi	fp,sp,139
 4008754:	dc002a15 	stw	r16,168(sp)
 4008758:	9829883a 	mov	r20,r19
 400875c:	e021883a 	mov	r16,fp
 4008760:	4027883a 	mov	r19,r8
 4008764:	b009883a 	mov	r4,r22
 4008768:	01400284 	movi	r5,10
 400876c:	40023300 	call	4002330 <__modsi3>
 4008770:	10800c04 	addi	r2,r2,48
 4008774:	843fffc4 	addi	r16,r16,-1
 4008778:	b009883a 	mov	r4,r22
 400877c:	01400284 	movi	r5,10
 4008780:	80800005 	stb	r2,0(r16)
 4008784:	40022ac0 	call	40022ac <__divsi3>
 4008788:	102d883a 	mov	r22,r2
 400878c:	00800244 	movi	r2,9
 4008790:	15bff416 	blt	r2,r22,4008764 <__alt_data_end+0xfc008764>
 4008794:	9811883a 	mov	r8,r19
 4008798:	b0800c04 	addi	r2,r22,48
 400879c:	a027883a 	mov	r19,r20
 40087a0:	8029883a 	mov	r20,r16
 40087a4:	a17fffc4 	addi	r5,r20,-1
 40087a8:	a0bfffc5 	stb	r2,-1(r20)
 40087ac:	dc002a17 	ldw	r16,168(sp)
 40087b0:	2f00782e 	bgeu	r5,fp,4008994 <___svfprintf_internal_r+0x2270>
 40087b4:	d9c02384 	addi	r7,sp,142
 40087b8:	3d0fc83a 	sub	r7,r7,r20
 40087bc:	d9002344 	addi	r4,sp,141
 40087c0:	e1cf883a 	add	r7,fp,r7
 40087c4:	00000106 	br	40087cc <___svfprintf_internal_r+0x20a8>
 40087c8:	28800003 	ldbu	r2,0(r5)
 40087cc:	20800005 	stb	r2,0(r4)
 40087d0:	21000044 	addi	r4,r4,1
 40087d4:	29400044 	addi	r5,r5,1
 40087d8:	21fffb1e 	bne	r4,r7,40087c8 <__alt_data_end+0xfc0087c8>
 40087dc:	d8802304 	addi	r2,sp,140
 40087e0:	1505c83a 	sub	r2,r2,r20
 40087e4:	d8c02344 	addi	r3,sp,141
 40087e8:	1885883a 	add	r2,r3,r2
 40087ec:	003f7006 	br	40085b0 <__alt_data_end+0xfc0085b0>
 40087f0:	0005883a 	mov	r2,zero
 40087f4:	003f0b06 	br	4008424 <__alt_data_end+0xfc008424>
 40087f8:	d9002a17 	ldw	r4,168(sp)
 40087fc:	d8c03217 	ldw	r3,200(sp)
 4008800:	20800044 	addi	r2,r4,1
 4008804:	1885883a 	add	r2,r3,r2
 4008808:	d8802b15 	stw	r2,172(sp)
 400880c:	103e870e 	bge	r2,zero,400822c <__alt_data_end+0xfc00822c>
 4008810:	0005883a 	mov	r2,zero
 4008814:	003e8506 	br	400822c <__alt_data_end+0xfc00822c>
 4008818:	01010074 	movhi	r4,1025
 400881c:	210b8984 	addi	r4,r4,11814
 4008820:	d9002c15 	stw	r4,176(sp)
 4008824:	003cc506 	br	4007b3c <__alt_data_end+0xfc007b3c>
 4008828:	d8c03217 	ldw	r3,200(sp)
 400882c:	18c00044 	addi	r3,r3,1
 4008830:	d8c02b15 	stw	r3,172(sp)
 4008834:	1805883a 	mov	r2,r3
 4008838:	183fa10e 	bge	r3,zero,40086c0 <__alt_data_end+0xfc0086c0>
 400883c:	0005883a 	mov	r2,zero
 4008840:	003f9f06 	br	40086c0 <__alt_data_end+0xfc0086c0>
 4008844:	d9003617 	ldw	r4,216(sp)
 4008848:	000d883a 	mov	r6,zero
 400884c:	000f883a 	mov	r7,zero
 4008850:	a00b883a 	mov	r5,r20
 4008854:	d8c03d15 	stw	r3,244(sp)
 4008858:	da003e15 	stw	r8,248(sp)
 400885c:	400ed780 	call	400ed78 <__eqdf2>
 4008860:	d8c03d17 	ldw	r3,244(sp)
 4008864:	da003e17 	ldw	r8,248(sp)
 4008868:	103f8726 	beq	r2,zero,4008688 <__alt_data_end+0xfc008688>
 400886c:	00800044 	movi	r2,1
 4008870:	10c7c83a 	sub	r3,r2,r3
 4008874:	d8c02615 	stw	r3,152(sp)
 4008878:	003f8406 	br	400868c <__alt_data_end+0xfc00868c>
 400887c:	20000e1e 	bne	r4,zero,40088b8 <___svfprintf_internal_r+0x2194>
 4008880:	9480004c 	andi	r18,r18,1
 4008884:	90000c1e 	bne	r18,zero,40088b8 <___svfprintf_internal_r+0x2194>
 4008888:	00800044 	movi	r2,1
 400888c:	d8802b15 	stw	r2,172(sp)
 4008890:	003e6606 	br	400822c <__alt_data_end+0xfc00822c>
 4008894:	00800b44 	movi	r2,45
 4008898:	05adc83a 	sub	r22,zero,r22
 400889c:	d8802305 	stb	r2,140(sp)
 40088a0:	003f3b06 	br	4008590 <__alt_data_end+0xfc008590>
 40088a4:	0005883a 	mov	r2,zero
 40088a8:	003f4e06 	br	40085e4 <__alt_data_end+0xfc0085e4>
 40088ac:	90a4703a 	and	r18,r18,r2
 40088b0:	903f4a26 	beq	r18,zero,40085dc <__alt_data_end+0xfc0085dc>
 40088b4:	003f4606 	br	40085d0 <__alt_data_end+0xfc0085d0>
 40088b8:	d8c02a17 	ldw	r3,168(sp)
 40088bc:	18c00084 	addi	r3,r3,2
 40088c0:	d8c02b15 	stw	r3,172(sp)
 40088c4:	1805883a 	mov	r2,r3
 40088c8:	183e580e 	bge	r3,zero,400822c <__alt_data_end+0xfc00822c>
 40088cc:	003fd006 	br	4008810 <__alt_data_end+0xfc008810>
 40088d0:	00800084 	movi	r2,2
 40088d4:	10c5c83a 	sub	r2,r2,r3
 40088d8:	003f7506 	br	40086b0 <__alt_data_end+0xfc0086b0>
 40088dc:	d9402e17 	ldw	r5,184(sp)
 40088e0:	d9002e17 	ldw	r4,184(sp)
 40088e4:	bc400043 	ldbu	r17,1(r23)
 40088e8:	29400017 	ldw	r5,0(r5)
 40088ec:	20800104 	addi	r2,r4,4
 40088f0:	d8802e15 	stw	r2,184(sp)
 40088f4:	d9402a15 	stw	r5,168(sp)
 40088f8:	182f883a 	mov	r23,r3
 40088fc:	283df10e 	bge	r5,zero,40080c4 <__alt_data_end+0xfc0080c4>
 4008900:	8c403fcc 	andi	r17,r17,255
 4008904:	017fffc4 	movi	r5,-1
 4008908:	8c40201c 	xori	r17,r17,128
 400890c:	d9402a15 	stw	r5,168(sp)
 4008910:	8c7fe004 	addi	r17,r17,-128
 4008914:	0037d806 	br	4006878 <__alt_data_end+0xfc006878>
 4008918:	9080004c 	andi	r2,r18,1
 400891c:	0039883a 	mov	fp,zero
 4008920:	10000726 	beq	r2,zero,4008940 <___svfprintf_internal_r+0x221c>
 4008924:	d8c02817 	ldw	r3,160(sp)
 4008928:	dc001dc4 	addi	r16,sp,119
 400892c:	00800c04 	movi	r2,48
 4008930:	1c07c83a 	sub	r3,r3,r16
 4008934:	d8801dc5 	stb	r2,119(sp)
 4008938:	d8c02b15 	stw	r3,172(sp)
 400893c:	00393106 	br	4006e04 <__alt_data_end+0xfc006e04>
 4008940:	d8002b15 	stw	zero,172(sp)
 4008944:	dc001e04 	addi	r16,sp,120
 4008948:	00392e06 	br	4006e04 <__alt_data_end+0xfc006e04>
 400894c:	0005883a 	mov	r2,zero
 4008950:	003e3306 	br	4008220 <__alt_data_end+0xfc008220>
 4008954:	dd802617 	ldw	r22,152(sp)
 4008958:	003f0706 	br	4008578 <__alt_data_end+0xfc008578>
 400895c:	d8c02b03 	ldbu	r3,172(sp)
 4008960:	d8c02785 	stb	r3,158(sp)
 4008964:	003a3506 	br	400723c <__alt_data_end+0xfc00723c>
 4008968:	d8c02b03 	ldbu	r3,172(sp)
 400896c:	d8c02785 	stb	r3,158(sp)
 4008970:	003a1706 	br	40071d0 <__alt_data_end+0xfc0071d0>
 4008974:	0005883a 	mov	r2,zero
 4008978:	003f5d06 	br	40086f0 <__alt_data_end+0xfc0086f0>
 400897c:	d8c02b03 	ldbu	r3,172(sp)
 4008980:	d8c02785 	stb	r3,158(sp)
 4008984:	0038f306 	br	4006d54 <__alt_data_end+0xfc006d54>
 4008988:	d8c02b03 	ldbu	r3,172(sp)
 400898c:	d8c02785 	stb	r3,158(sp)
 4008990:	0038be06 	br	4006c8c <__alt_data_end+0xfc006c8c>
 4008994:	d8802344 	addi	r2,sp,141
 4008998:	003f0506 	br	40085b0 <__alt_data_end+0xfc0085b0>
 400899c:	d8c02b03 	ldbu	r3,172(sp)
 40089a0:	d8c02785 	stb	r3,158(sp)
 40089a4:	00388b06 	br	4006bd4 <__alt_data_end+0xfc006bd4>
 40089a8:	d8c02b03 	ldbu	r3,172(sp)
 40089ac:	d8c02785 	stb	r3,158(sp)
 40089b0:	003ad706 	br	4007510 <__alt_data_end+0xfc007510>
 40089b4:	d9403917 	ldw	r5,228(sp)
 40089b8:	00800304 	movi	r2,12
 40089bc:	28800015 	stw	r2,0(r5)
 40089c0:	00bfffc4 	movi	r2,-1
 40089c4:	00384306 	br	4006ad4 <__alt_data_end+0xfc006ad4>
 40089c8:	d8c02b03 	ldbu	r3,172(sp)
 40089cc:	d8c02785 	stb	r3,158(sp)
 40089d0:	003ab606 	br	40074ac <__alt_data_end+0xfc0074ac>
 40089d4:	d8c02b03 	ldbu	r3,172(sp)
 40089d8:	d8c02785 	stb	r3,158(sp)
 40089dc:	003a8906 	br	4007404 <__alt_data_end+0xfc007404>

040089e0 <quorem>:
 40089e0:	defff204 	addi	sp,sp,-56
 40089e4:	ddc00b15 	stw	r23,44(sp)
 40089e8:	20800417 	ldw	r2,16(r4)
 40089ec:	2dc00417 	ldw	r23,16(r5)
 40089f0:	dfc00d15 	stw	ra,52(sp)
 40089f4:	df000c15 	stw	fp,48(sp)
 40089f8:	dd800a15 	stw	r22,40(sp)
 40089fc:	dd400915 	stw	r21,36(sp)
 4008a00:	dd000815 	stw	r20,32(sp)
 4008a04:	dcc00715 	stw	r19,28(sp)
 4008a08:	dc800615 	stw	r18,24(sp)
 4008a0c:	dc400515 	stw	r17,20(sp)
 4008a10:	dc000415 	stw	r16,16(sp)
 4008a14:	15c07a16 	blt	r2,r23,4008c00 <quorem+0x220>
 4008a18:	bdffffc4 	addi	r23,r23,-1
 4008a1c:	bde9883a 	add	r20,r23,r23
 4008a20:	28c00504 	addi	r3,r5,20
 4008a24:	a529883a 	add	r20,r20,r20
 4008a28:	1d39883a 	add	fp,r3,r20
 4008a2c:	24c00504 	addi	r19,r4,20
 4008a30:	d9400215 	stw	r5,8(sp)
 4008a34:	9d29883a 	add	r20,r19,r20
 4008a38:	e1400017 	ldw	r5,0(fp)
 4008a3c:	d9000015 	stw	r4,0(sp)
 4008a40:	a1000017 	ldw	r4,0(r20)
 4008a44:	29400044 	addi	r5,r5,1
 4008a48:	d8c00115 	stw	r3,4(sp)
 4008a4c:	dd000315 	stw	r20,12(sp)
 4008a50:	40023a40 	call	40023a4 <__udivsi3>
 4008a54:	1025883a 	mov	r18,r2
 4008a58:	10003026 	beq	r2,zero,4008b1c <quorem+0x13c>
 4008a5c:	dc400117 	ldw	r17,4(sp)
 4008a60:	9829883a 	mov	r20,r19
 4008a64:	002d883a 	mov	r22,zero
 4008a68:	0021883a 	mov	r16,zero
 4008a6c:	8d400017 	ldw	r21,0(r17)
 4008a70:	900b883a 	mov	r5,r18
 4008a74:	8c400104 	addi	r17,r17,4
 4008a78:	a93fffcc 	andi	r4,r21,65535
 4008a7c:	40024600 	call	4002460 <__mulsi3>
 4008a80:	a808d43a 	srli	r4,r21,16
 4008a84:	900b883a 	mov	r5,r18
 4008a88:	15ad883a 	add	r22,r2,r22
 4008a8c:	40024600 	call	4002460 <__mulsi3>
 4008a90:	a1000017 	ldw	r4,0(r20)
 4008a94:	b00cd43a 	srli	r6,r22,16
 4008a98:	b0ffffcc 	andi	r3,r22,65535
 4008a9c:	217fffcc 	andi	r5,r4,65535
 4008aa0:	2c21883a 	add	r16,r5,r16
 4008aa4:	80c7c83a 	sub	r3,r16,r3
 4008aa8:	2008d43a 	srli	r4,r4,16
 4008aac:	1185883a 	add	r2,r2,r6
 4008ab0:	1821d43a 	srai	r16,r3,16
 4008ab4:	117fffcc 	andi	r5,r2,65535
 4008ab8:	2149c83a 	sub	r4,r4,r5
 4008abc:	2421883a 	add	r16,r4,r16
 4008ac0:	8008943a 	slli	r4,r16,16
 4008ac4:	18ffffcc 	andi	r3,r3,65535
 4008ac8:	102cd43a 	srli	r22,r2,16
 4008acc:	20c8b03a 	or	r4,r4,r3
 4008ad0:	a1000015 	stw	r4,0(r20)
 4008ad4:	8021d43a 	srai	r16,r16,16
 4008ad8:	a5000104 	addi	r20,r20,4
 4008adc:	e47fe32e 	bgeu	fp,r17,4008a6c <__alt_data_end+0xfc008a6c>
 4008ae0:	d8c00317 	ldw	r3,12(sp)
 4008ae4:	18800017 	ldw	r2,0(r3)
 4008ae8:	10000c1e 	bne	r2,zero,4008b1c <quorem+0x13c>
 4008aec:	18bfff04 	addi	r2,r3,-4
 4008af0:	9880082e 	bgeu	r19,r2,4008b14 <quorem+0x134>
 4008af4:	18ffff17 	ldw	r3,-4(r3)
 4008af8:	18000326 	beq	r3,zero,4008b08 <quorem+0x128>
 4008afc:	00000506 	br	4008b14 <quorem+0x134>
 4008b00:	10c00017 	ldw	r3,0(r2)
 4008b04:	1800031e 	bne	r3,zero,4008b14 <quorem+0x134>
 4008b08:	10bfff04 	addi	r2,r2,-4
 4008b0c:	bdffffc4 	addi	r23,r23,-1
 4008b10:	98bffb36 	bltu	r19,r2,4008b00 <__alt_data_end+0xfc008b00>
 4008b14:	d8c00017 	ldw	r3,0(sp)
 4008b18:	1dc00415 	stw	r23,16(r3)
 4008b1c:	d9400217 	ldw	r5,8(sp)
 4008b20:	d9000017 	ldw	r4,0(sp)
 4008b24:	400b5e00 	call	400b5e0 <__mcmp>
 4008b28:	10002816 	blt	r2,zero,4008bcc <quorem+0x1ec>
 4008b2c:	dc400117 	ldw	r17,4(sp)
 4008b30:	94800044 	addi	r18,r18,1
 4008b34:	980d883a 	mov	r6,r19
 4008b38:	0007883a 	mov	r3,zero
 4008b3c:	31000017 	ldw	r4,0(r6)
 4008b40:	89400017 	ldw	r5,0(r17)
 4008b44:	31800104 	addi	r6,r6,4
 4008b48:	20bfffcc 	andi	r2,r4,65535
 4008b4c:	10c7883a 	add	r3,r2,r3
 4008b50:	28bfffcc 	andi	r2,r5,65535
 4008b54:	1885c83a 	sub	r2,r3,r2
 4008b58:	280ad43a 	srli	r5,r5,16
 4008b5c:	2008d43a 	srli	r4,r4,16
 4008b60:	1007d43a 	srai	r3,r2,16
 4008b64:	10bfffcc 	andi	r2,r2,65535
 4008b68:	2149c83a 	sub	r4,r4,r5
 4008b6c:	20c9883a 	add	r4,r4,r3
 4008b70:	200a943a 	slli	r5,r4,16
 4008b74:	8c400104 	addi	r17,r17,4
 4008b78:	2007d43a 	srai	r3,r4,16
 4008b7c:	2884b03a 	or	r2,r5,r2
 4008b80:	30bfff15 	stw	r2,-4(r6)
 4008b84:	e47fed2e 	bgeu	fp,r17,4008b3c <__alt_data_end+0xfc008b3c>
 4008b88:	bdc5883a 	add	r2,r23,r23
 4008b8c:	1085883a 	add	r2,r2,r2
 4008b90:	9887883a 	add	r3,r19,r2
 4008b94:	18800017 	ldw	r2,0(r3)
 4008b98:	10000c1e 	bne	r2,zero,4008bcc <quorem+0x1ec>
 4008b9c:	18bfff04 	addi	r2,r3,-4
 4008ba0:	9880082e 	bgeu	r19,r2,4008bc4 <quorem+0x1e4>
 4008ba4:	18ffff17 	ldw	r3,-4(r3)
 4008ba8:	18000326 	beq	r3,zero,4008bb8 <quorem+0x1d8>
 4008bac:	00000506 	br	4008bc4 <quorem+0x1e4>
 4008bb0:	10c00017 	ldw	r3,0(r2)
 4008bb4:	1800031e 	bne	r3,zero,4008bc4 <quorem+0x1e4>
 4008bb8:	10bfff04 	addi	r2,r2,-4
 4008bbc:	bdffffc4 	addi	r23,r23,-1
 4008bc0:	98bffb36 	bltu	r19,r2,4008bb0 <__alt_data_end+0xfc008bb0>
 4008bc4:	d8c00017 	ldw	r3,0(sp)
 4008bc8:	1dc00415 	stw	r23,16(r3)
 4008bcc:	9005883a 	mov	r2,r18
 4008bd0:	dfc00d17 	ldw	ra,52(sp)
 4008bd4:	df000c17 	ldw	fp,48(sp)
 4008bd8:	ddc00b17 	ldw	r23,44(sp)
 4008bdc:	dd800a17 	ldw	r22,40(sp)
 4008be0:	dd400917 	ldw	r21,36(sp)
 4008be4:	dd000817 	ldw	r20,32(sp)
 4008be8:	dcc00717 	ldw	r19,28(sp)
 4008bec:	dc800617 	ldw	r18,24(sp)
 4008bf0:	dc400517 	ldw	r17,20(sp)
 4008bf4:	dc000417 	ldw	r16,16(sp)
 4008bf8:	dec00e04 	addi	sp,sp,56
 4008bfc:	f800283a 	ret
 4008c00:	0005883a 	mov	r2,zero
 4008c04:	003ff206 	br	4008bd0 <__alt_data_end+0xfc008bd0>

04008c08 <_dtoa_r>:
 4008c08:	20801017 	ldw	r2,64(r4)
 4008c0c:	deffde04 	addi	sp,sp,-136
 4008c10:	df002015 	stw	fp,128(sp)
 4008c14:	dcc01b15 	stw	r19,108(sp)
 4008c18:	dc801a15 	stw	r18,104(sp)
 4008c1c:	dc401915 	stw	r17,100(sp)
 4008c20:	dc001815 	stw	r16,96(sp)
 4008c24:	dfc02115 	stw	ra,132(sp)
 4008c28:	ddc01f15 	stw	r23,124(sp)
 4008c2c:	dd801e15 	stw	r22,120(sp)
 4008c30:	dd401d15 	stw	r21,116(sp)
 4008c34:	dd001c15 	stw	r20,112(sp)
 4008c38:	d9c00315 	stw	r7,12(sp)
 4008c3c:	2039883a 	mov	fp,r4
 4008c40:	3023883a 	mov	r17,r6
 4008c44:	2825883a 	mov	r18,r5
 4008c48:	dc002417 	ldw	r16,144(sp)
 4008c4c:	3027883a 	mov	r19,r6
 4008c50:	10000826 	beq	r2,zero,4008c74 <_dtoa_r+0x6c>
 4008c54:	21801117 	ldw	r6,68(r4)
 4008c58:	00c00044 	movi	r3,1
 4008c5c:	100b883a 	mov	r5,r2
 4008c60:	1986983a 	sll	r3,r3,r6
 4008c64:	11800115 	stw	r6,4(r2)
 4008c68:	10c00215 	stw	r3,8(r2)
 4008c6c:	400ad040 	call	400ad04 <_Bfree>
 4008c70:	e0001015 	stw	zero,64(fp)
 4008c74:	88002e16 	blt	r17,zero,4008d30 <_dtoa_r+0x128>
 4008c78:	80000015 	stw	zero,0(r16)
 4008c7c:	889ffc2c 	andhi	r2,r17,32752
 4008c80:	00dffc34 	movhi	r3,32752
 4008c84:	10c01c26 	beq	r2,r3,4008cf8 <_dtoa_r+0xf0>
 4008c88:	000d883a 	mov	r6,zero
 4008c8c:	000f883a 	mov	r7,zero
 4008c90:	9009883a 	mov	r4,r18
 4008c94:	980b883a 	mov	r5,r19
 4008c98:	400ed780 	call	400ed78 <__eqdf2>
 4008c9c:	10002b1e 	bne	r2,zero,4008d4c <_dtoa_r+0x144>
 4008ca0:	d9c02317 	ldw	r7,140(sp)
 4008ca4:	00800044 	movi	r2,1
 4008ca8:	38800015 	stw	r2,0(r7)
 4008cac:	d8802517 	ldw	r2,148(sp)
 4008cb0:	10019e26 	beq	r2,zero,400932c <_dtoa_r+0x724>
 4008cb4:	d8c02517 	ldw	r3,148(sp)
 4008cb8:	00810074 	movhi	r2,1025
 4008cbc:	108b8944 	addi	r2,r2,11813
 4008cc0:	18800015 	stw	r2,0(r3)
 4008cc4:	10bfffc4 	addi	r2,r2,-1
 4008cc8:	dfc02117 	ldw	ra,132(sp)
 4008ccc:	df002017 	ldw	fp,128(sp)
 4008cd0:	ddc01f17 	ldw	r23,124(sp)
 4008cd4:	dd801e17 	ldw	r22,120(sp)
 4008cd8:	dd401d17 	ldw	r21,116(sp)
 4008cdc:	dd001c17 	ldw	r20,112(sp)
 4008ce0:	dcc01b17 	ldw	r19,108(sp)
 4008ce4:	dc801a17 	ldw	r18,104(sp)
 4008ce8:	dc401917 	ldw	r17,100(sp)
 4008cec:	dc001817 	ldw	r16,96(sp)
 4008cf0:	dec02204 	addi	sp,sp,136
 4008cf4:	f800283a 	ret
 4008cf8:	d8c02317 	ldw	r3,140(sp)
 4008cfc:	0089c3c4 	movi	r2,9999
 4008d00:	18800015 	stw	r2,0(r3)
 4008d04:	90017726 	beq	r18,zero,40092e4 <_dtoa_r+0x6dc>
 4008d08:	00810074 	movhi	r2,1025
 4008d0c:	108b9504 	addi	r2,r2,11860
 4008d10:	d9002517 	ldw	r4,148(sp)
 4008d14:	203fec26 	beq	r4,zero,4008cc8 <__alt_data_end+0xfc008cc8>
 4008d18:	10c000c7 	ldb	r3,3(r2)
 4008d1c:	1801781e 	bne	r3,zero,4009300 <_dtoa_r+0x6f8>
 4008d20:	10c000c4 	addi	r3,r2,3
 4008d24:	d9802517 	ldw	r6,148(sp)
 4008d28:	30c00015 	stw	r3,0(r6)
 4008d2c:	003fe606 	br	4008cc8 <__alt_data_end+0xfc008cc8>
 4008d30:	04e00034 	movhi	r19,32768
 4008d34:	9cffffc4 	addi	r19,r19,-1
 4008d38:	00800044 	movi	r2,1
 4008d3c:	8ce6703a 	and	r19,r17,r19
 4008d40:	80800015 	stw	r2,0(r16)
 4008d44:	9823883a 	mov	r17,r19
 4008d48:	003fcc06 	br	4008c7c <__alt_data_end+0xfc008c7c>
 4008d4c:	d8800204 	addi	r2,sp,8
 4008d50:	d8800015 	stw	r2,0(sp)
 4008d54:	d9c00104 	addi	r7,sp,4
 4008d58:	900b883a 	mov	r5,r18
 4008d5c:	980d883a 	mov	r6,r19
 4008d60:	e009883a 	mov	r4,fp
 4008d64:	8820d53a 	srli	r16,r17,20
 4008d68:	400b9ac0 	call	400b9ac <__d2b>
 4008d6c:	d8800915 	stw	r2,36(sp)
 4008d70:	8001651e 	bne	r16,zero,4009308 <_dtoa_r+0x700>
 4008d74:	dd800217 	ldw	r22,8(sp)
 4008d78:	dc000117 	ldw	r16,4(sp)
 4008d7c:	00800804 	movi	r2,32
 4008d80:	b421883a 	add	r16,r22,r16
 4008d84:	80c10c84 	addi	r3,r16,1074
 4008d88:	10c2d10e 	bge	r2,r3,40098d0 <_dtoa_r+0xcc8>
 4008d8c:	00801004 	movi	r2,64
 4008d90:	81010484 	addi	r4,r16,1042
 4008d94:	10c7c83a 	sub	r3,r2,r3
 4008d98:	9108d83a 	srl	r4,r18,r4
 4008d9c:	88e2983a 	sll	r17,r17,r3
 4008da0:	2448b03a 	or	r4,r4,r17
 4008da4:	400605c0 	call	400605c <__floatunsidf>
 4008da8:	017f8434 	movhi	r5,65040
 4008dac:	01800044 	movi	r6,1
 4008db0:	1009883a 	mov	r4,r2
 4008db4:	194b883a 	add	r5,r3,r5
 4008db8:	843fffc4 	addi	r16,r16,-1
 4008dbc:	d9801115 	stw	r6,68(sp)
 4008dc0:	000d883a 	mov	r6,zero
 4008dc4:	01cffe34 	movhi	r7,16376
 4008dc8:	40056040 	call	4005604 <__subdf3>
 4008dcc:	0198dbf4 	movhi	r6,25455
 4008dd0:	01cff4f4 	movhi	r7,16339
 4008dd4:	3190d844 	addi	r6,r6,17249
 4008dd8:	39e1e9c4 	addi	r7,r7,-30809
 4008ddc:	1009883a 	mov	r4,r2
 4008de0:	180b883a 	mov	r5,r3
 4008de4:	4004d980 	call	4004d98 <__muldf3>
 4008de8:	01a2d874 	movhi	r6,35681
 4008dec:	01cff1f4 	movhi	r7,16327
 4008df0:	31b22cc4 	addi	r6,r6,-14157
 4008df4:	39e28a04 	addi	r7,r7,-30168
 4008df8:	180b883a 	mov	r5,r3
 4008dfc:	1009883a 	mov	r4,r2
 4008e00:	400394c0 	call	400394c <__adddf3>
 4008e04:	8009883a 	mov	r4,r16
 4008e08:	1029883a 	mov	r20,r2
 4008e0c:	1823883a 	mov	r17,r3
 4008e10:	4005f800 	call	4005f80 <__floatsidf>
 4008e14:	019427f4 	movhi	r6,20639
 4008e18:	01cff4f4 	movhi	r7,16339
 4008e1c:	319e7ec4 	addi	r6,r6,31227
 4008e20:	39d104c4 	addi	r7,r7,17427
 4008e24:	1009883a 	mov	r4,r2
 4008e28:	180b883a 	mov	r5,r3
 4008e2c:	4004d980 	call	4004d98 <__muldf3>
 4008e30:	100d883a 	mov	r6,r2
 4008e34:	180f883a 	mov	r7,r3
 4008e38:	a009883a 	mov	r4,r20
 4008e3c:	880b883a 	mov	r5,r17
 4008e40:	400394c0 	call	400394c <__adddf3>
 4008e44:	1009883a 	mov	r4,r2
 4008e48:	180b883a 	mov	r5,r3
 4008e4c:	1029883a 	mov	r20,r2
 4008e50:	1823883a 	mov	r17,r3
 4008e54:	4005f000 	call	4005f00 <__fixdfsi>
 4008e58:	000d883a 	mov	r6,zero
 4008e5c:	000f883a 	mov	r7,zero
 4008e60:	a009883a 	mov	r4,r20
 4008e64:	880b883a 	mov	r5,r17
 4008e68:	d8800515 	stw	r2,20(sp)
 4008e6c:	4004ca40 	call	4004ca4 <__ledf2>
 4008e70:	10028716 	blt	r2,zero,4009890 <_dtoa_r+0xc88>
 4008e74:	d8c00517 	ldw	r3,20(sp)
 4008e78:	00800584 	movi	r2,22
 4008e7c:	10c27536 	bltu	r2,r3,4009854 <_dtoa_r+0xc4c>
 4008e80:	180490fa 	slli	r2,r3,3
 4008e84:	00c10074 	movhi	r3,1025
 4008e88:	18cbb104 	addi	r3,r3,11972
 4008e8c:	1885883a 	add	r2,r3,r2
 4008e90:	11000017 	ldw	r4,0(r2)
 4008e94:	11400117 	ldw	r5,4(r2)
 4008e98:	900d883a 	mov	r6,r18
 4008e9c:	980f883a 	mov	r7,r19
 4008ea0:	4004bc80 	call	4004bc8 <__gedf2>
 4008ea4:	00828d0e 	bge	zero,r2,40098dc <_dtoa_r+0xcd4>
 4008ea8:	d9000517 	ldw	r4,20(sp)
 4008eac:	d8000e15 	stw	zero,56(sp)
 4008eb0:	213fffc4 	addi	r4,r4,-1
 4008eb4:	d9000515 	stw	r4,20(sp)
 4008eb8:	b42dc83a 	sub	r22,r22,r16
 4008ebc:	b5bfffc4 	addi	r22,r22,-1
 4008ec0:	b0026f16 	blt	r22,zero,4009880 <_dtoa_r+0xc78>
 4008ec4:	d8000815 	stw	zero,32(sp)
 4008ec8:	d9c00517 	ldw	r7,20(sp)
 4008ecc:	38026416 	blt	r7,zero,4009860 <_dtoa_r+0xc58>
 4008ed0:	b1ed883a 	add	r22,r22,r7
 4008ed4:	d9c00d15 	stw	r7,52(sp)
 4008ed8:	d8000a15 	stw	zero,40(sp)
 4008edc:	d9800317 	ldw	r6,12(sp)
 4008ee0:	00800244 	movi	r2,9
 4008ee4:	11811436 	bltu	r2,r6,4009338 <_dtoa_r+0x730>
 4008ee8:	00800144 	movi	r2,5
 4008eec:	1184e10e 	bge	r2,r6,400a274 <_dtoa_r+0x166c>
 4008ef0:	31bfff04 	addi	r6,r6,-4
 4008ef4:	d9800315 	stw	r6,12(sp)
 4008ef8:	0023883a 	mov	r17,zero
 4008efc:	d9800317 	ldw	r6,12(sp)
 4008f00:	008000c4 	movi	r2,3
 4008f04:	30836726 	beq	r6,r2,4009ca4 <_dtoa_r+0x109c>
 4008f08:	1183410e 	bge	r2,r6,4009c10 <_dtoa_r+0x1008>
 4008f0c:	d9c00317 	ldw	r7,12(sp)
 4008f10:	00800104 	movi	r2,4
 4008f14:	38827c26 	beq	r7,r2,4009908 <_dtoa_r+0xd00>
 4008f18:	00800144 	movi	r2,5
 4008f1c:	3884c41e 	bne	r7,r2,400a230 <_dtoa_r+0x1628>
 4008f20:	00800044 	movi	r2,1
 4008f24:	d8800b15 	stw	r2,44(sp)
 4008f28:	d8c00517 	ldw	r3,20(sp)
 4008f2c:	d9002217 	ldw	r4,136(sp)
 4008f30:	1907883a 	add	r3,r3,r4
 4008f34:	19800044 	addi	r6,r3,1
 4008f38:	d8c00c15 	stw	r3,48(sp)
 4008f3c:	d9800615 	stw	r6,24(sp)
 4008f40:	0183a40e 	bge	zero,r6,4009dd4 <_dtoa_r+0x11cc>
 4008f44:	d9800617 	ldw	r6,24(sp)
 4008f48:	3021883a 	mov	r16,r6
 4008f4c:	e0001115 	stw	zero,68(fp)
 4008f50:	008005c4 	movi	r2,23
 4008f54:	1184c92e 	bgeu	r2,r6,400a27c <_dtoa_r+0x1674>
 4008f58:	00c00044 	movi	r3,1
 4008f5c:	00800104 	movi	r2,4
 4008f60:	1085883a 	add	r2,r2,r2
 4008f64:	11000504 	addi	r4,r2,20
 4008f68:	180b883a 	mov	r5,r3
 4008f6c:	18c00044 	addi	r3,r3,1
 4008f70:	313ffb2e 	bgeu	r6,r4,4008f60 <__alt_data_end+0xfc008f60>
 4008f74:	e1401115 	stw	r5,68(fp)
 4008f78:	e009883a 	mov	r4,fp
 4008f7c:	400ac5c0 	call	400ac5c <_Balloc>
 4008f80:	d8800715 	stw	r2,28(sp)
 4008f84:	e0801015 	stw	r2,64(fp)
 4008f88:	00800384 	movi	r2,14
 4008f8c:	1400f736 	bltu	r2,r16,400936c <_dtoa_r+0x764>
 4008f90:	8800f626 	beq	r17,zero,400936c <_dtoa_r+0x764>
 4008f94:	d9c00517 	ldw	r7,20(sp)
 4008f98:	01c39a0e 	bge	zero,r7,4009e04 <_dtoa_r+0x11fc>
 4008f9c:	388003cc 	andi	r2,r7,15
 4008fa0:	100490fa 	slli	r2,r2,3
 4008fa4:	382bd13a 	srai	r21,r7,4
 4008fa8:	00c10074 	movhi	r3,1025
 4008fac:	18cbb104 	addi	r3,r3,11972
 4008fb0:	1885883a 	add	r2,r3,r2
 4008fb4:	a8c0040c 	andi	r3,r21,16
 4008fb8:	12400017 	ldw	r9,0(r2)
 4008fbc:	12000117 	ldw	r8,4(r2)
 4008fc0:	18037926 	beq	r3,zero,4009da8 <_dtoa_r+0x11a0>
 4008fc4:	00810074 	movhi	r2,1025
 4008fc8:	108ba704 	addi	r2,r2,11932
 4008fcc:	11800817 	ldw	r6,32(r2)
 4008fd0:	11c00917 	ldw	r7,36(r2)
 4008fd4:	9009883a 	mov	r4,r18
 4008fd8:	980b883a 	mov	r5,r19
 4008fdc:	da001715 	stw	r8,92(sp)
 4008fe0:	da401615 	stw	r9,88(sp)
 4008fe4:	40041f80 	call	40041f8 <__divdf3>
 4008fe8:	da001717 	ldw	r8,92(sp)
 4008fec:	da401617 	ldw	r9,88(sp)
 4008ff0:	ad4003cc 	andi	r21,r21,15
 4008ff4:	040000c4 	movi	r16,3
 4008ff8:	1023883a 	mov	r17,r2
 4008ffc:	1829883a 	mov	r20,r3
 4009000:	a8001126 	beq	r21,zero,4009048 <_dtoa_r+0x440>
 4009004:	05c10074 	movhi	r23,1025
 4009008:	bdcba704 	addi	r23,r23,11932
 400900c:	4805883a 	mov	r2,r9
 4009010:	4007883a 	mov	r3,r8
 4009014:	a980004c 	andi	r6,r21,1
 4009018:	1009883a 	mov	r4,r2
 400901c:	a82bd07a 	srai	r21,r21,1
 4009020:	180b883a 	mov	r5,r3
 4009024:	30000426 	beq	r6,zero,4009038 <_dtoa_r+0x430>
 4009028:	b9800017 	ldw	r6,0(r23)
 400902c:	b9c00117 	ldw	r7,4(r23)
 4009030:	84000044 	addi	r16,r16,1
 4009034:	4004d980 	call	4004d98 <__muldf3>
 4009038:	bdc00204 	addi	r23,r23,8
 400903c:	a83ff51e 	bne	r21,zero,4009014 <__alt_data_end+0xfc009014>
 4009040:	1013883a 	mov	r9,r2
 4009044:	1811883a 	mov	r8,r3
 4009048:	480d883a 	mov	r6,r9
 400904c:	400f883a 	mov	r7,r8
 4009050:	8809883a 	mov	r4,r17
 4009054:	a00b883a 	mov	r5,r20
 4009058:	40041f80 	call	40041f8 <__divdf3>
 400905c:	d8800f15 	stw	r2,60(sp)
 4009060:	d8c01015 	stw	r3,64(sp)
 4009064:	d8c00e17 	ldw	r3,56(sp)
 4009068:	18000626 	beq	r3,zero,4009084 <_dtoa_r+0x47c>
 400906c:	d9000f17 	ldw	r4,60(sp)
 4009070:	d9401017 	ldw	r5,64(sp)
 4009074:	000d883a 	mov	r6,zero
 4009078:	01cffc34 	movhi	r7,16368
 400907c:	4004ca40 	call	4004ca4 <__ledf2>
 4009080:	10040b16 	blt	r2,zero,400a0b0 <_dtoa_r+0x14a8>
 4009084:	8009883a 	mov	r4,r16
 4009088:	4005f800 	call	4005f80 <__floatsidf>
 400908c:	d9800f17 	ldw	r6,60(sp)
 4009090:	d9c01017 	ldw	r7,64(sp)
 4009094:	1009883a 	mov	r4,r2
 4009098:	180b883a 	mov	r5,r3
 400909c:	4004d980 	call	4004d98 <__muldf3>
 40090a0:	000d883a 	mov	r6,zero
 40090a4:	01d00734 	movhi	r7,16412
 40090a8:	1009883a 	mov	r4,r2
 40090ac:	180b883a 	mov	r5,r3
 40090b0:	400394c0 	call	400394c <__adddf3>
 40090b4:	1021883a 	mov	r16,r2
 40090b8:	d8800617 	ldw	r2,24(sp)
 40090bc:	047f3034 	movhi	r17,64704
 40090c0:	1c63883a 	add	r17,r3,r17
 40090c4:	10031826 	beq	r2,zero,4009d28 <_dtoa_r+0x1120>
 40090c8:	d8c00517 	ldw	r3,20(sp)
 40090cc:	db000617 	ldw	r12,24(sp)
 40090d0:	d8c01315 	stw	r3,76(sp)
 40090d4:	d9000b17 	ldw	r4,44(sp)
 40090d8:	20038f26 	beq	r4,zero,4009f18 <_dtoa_r+0x1310>
 40090dc:	60bfffc4 	addi	r2,r12,-1
 40090e0:	100490fa 	slli	r2,r2,3
 40090e4:	00c10074 	movhi	r3,1025
 40090e8:	18cbb104 	addi	r3,r3,11972
 40090ec:	1885883a 	add	r2,r3,r2
 40090f0:	11800017 	ldw	r6,0(r2)
 40090f4:	11c00117 	ldw	r7,4(r2)
 40090f8:	d8800717 	ldw	r2,28(sp)
 40090fc:	0009883a 	mov	r4,zero
 4009100:	014ff834 	movhi	r5,16352
 4009104:	db001615 	stw	r12,88(sp)
 4009108:	15c00044 	addi	r23,r2,1
 400910c:	40041f80 	call	40041f8 <__divdf3>
 4009110:	800d883a 	mov	r6,r16
 4009114:	880f883a 	mov	r7,r17
 4009118:	1009883a 	mov	r4,r2
 400911c:	180b883a 	mov	r5,r3
 4009120:	40056040 	call	4005604 <__subdf3>
 4009124:	d9401017 	ldw	r5,64(sp)
 4009128:	d9000f17 	ldw	r4,60(sp)
 400912c:	102b883a 	mov	r21,r2
 4009130:	d8c01215 	stw	r3,72(sp)
 4009134:	4005f000 	call	4005f00 <__fixdfsi>
 4009138:	1009883a 	mov	r4,r2
 400913c:	1029883a 	mov	r20,r2
 4009140:	4005f800 	call	4005f80 <__floatsidf>
 4009144:	d9000f17 	ldw	r4,60(sp)
 4009148:	d9401017 	ldw	r5,64(sp)
 400914c:	100d883a 	mov	r6,r2
 4009150:	180f883a 	mov	r7,r3
 4009154:	40056040 	call	4005604 <__subdf3>
 4009158:	1823883a 	mov	r17,r3
 400915c:	d8c00717 	ldw	r3,28(sp)
 4009160:	d9401217 	ldw	r5,72(sp)
 4009164:	a2000c04 	addi	r8,r20,48
 4009168:	1021883a 	mov	r16,r2
 400916c:	1a000005 	stb	r8,0(r3)
 4009170:	800d883a 	mov	r6,r16
 4009174:	880f883a 	mov	r7,r17
 4009178:	a809883a 	mov	r4,r21
 400917c:	4029883a 	mov	r20,r8
 4009180:	4004bc80 	call	4004bc8 <__gedf2>
 4009184:	00841d16 	blt	zero,r2,400a1fc <_dtoa_r+0x15f4>
 4009188:	800d883a 	mov	r6,r16
 400918c:	880f883a 	mov	r7,r17
 4009190:	0009883a 	mov	r4,zero
 4009194:	014ffc34 	movhi	r5,16368
 4009198:	40056040 	call	4005604 <__subdf3>
 400919c:	d9401217 	ldw	r5,72(sp)
 40091a0:	100d883a 	mov	r6,r2
 40091a4:	180f883a 	mov	r7,r3
 40091a8:	a809883a 	mov	r4,r21
 40091ac:	4004bc80 	call	4004bc8 <__gedf2>
 40091b0:	db001617 	ldw	r12,88(sp)
 40091b4:	00840e16 	blt	zero,r2,400a1f0 <_dtoa_r+0x15e8>
 40091b8:	00800044 	movi	r2,1
 40091bc:	13006b0e 	bge	r2,r12,400936c <_dtoa_r+0x764>
 40091c0:	d9000717 	ldw	r4,28(sp)
 40091c4:	dd800f15 	stw	r22,60(sp)
 40091c8:	dcc01015 	stw	r19,64(sp)
 40091cc:	2319883a 	add	r12,r4,r12
 40091d0:	dcc01217 	ldw	r19,72(sp)
 40091d4:	602d883a 	mov	r22,r12
 40091d8:	dc801215 	stw	r18,72(sp)
 40091dc:	b825883a 	mov	r18,r23
 40091e0:	00000906 	br	4009208 <_dtoa_r+0x600>
 40091e4:	40056040 	call	4005604 <__subdf3>
 40091e8:	a80d883a 	mov	r6,r21
 40091ec:	980f883a 	mov	r7,r19
 40091f0:	1009883a 	mov	r4,r2
 40091f4:	180b883a 	mov	r5,r3
 40091f8:	4004ca40 	call	4004ca4 <__ledf2>
 40091fc:	1003e816 	blt	r2,zero,400a1a0 <_dtoa_r+0x1598>
 4009200:	b825883a 	mov	r18,r23
 4009204:	bd83e926 	beq	r23,r22,400a1ac <_dtoa_r+0x15a4>
 4009208:	a809883a 	mov	r4,r21
 400920c:	980b883a 	mov	r5,r19
 4009210:	000d883a 	mov	r6,zero
 4009214:	01d00934 	movhi	r7,16420
 4009218:	4004d980 	call	4004d98 <__muldf3>
 400921c:	000d883a 	mov	r6,zero
 4009220:	01d00934 	movhi	r7,16420
 4009224:	8009883a 	mov	r4,r16
 4009228:	880b883a 	mov	r5,r17
 400922c:	102b883a 	mov	r21,r2
 4009230:	1827883a 	mov	r19,r3
 4009234:	4004d980 	call	4004d98 <__muldf3>
 4009238:	180b883a 	mov	r5,r3
 400923c:	1009883a 	mov	r4,r2
 4009240:	1821883a 	mov	r16,r3
 4009244:	1023883a 	mov	r17,r2
 4009248:	4005f000 	call	4005f00 <__fixdfsi>
 400924c:	1009883a 	mov	r4,r2
 4009250:	1029883a 	mov	r20,r2
 4009254:	4005f800 	call	4005f80 <__floatsidf>
 4009258:	8809883a 	mov	r4,r17
 400925c:	800b883a 	mov	r5,r16
 4009260:	100d883a 	mov	r6,r2
 4009264:	180f883a 	mov	r7,r3
 4009268:	40056040 	call	4005604 <__subdf3>
 400926c:	a5000c04 	addi	r20,r20,48
 4009270:	a80d883a 	mov	r6,r21
 4009274:	980f883a 	mov	r7,r19
 4009278:	1009883a 	mov	r4,r2
 400927c:	180b883a 	mov	r5,r3
 4009280:	95000005 	stb	r20,0(r18)
 4009284:	1021883a 	mov	r16,r2
 4009288:	1823883a 	mov	r17,r3
 400928c:	4004ca40 	call	4004ca4 <__ledf2>
 4009290:	bdc00044 	addi	r23,r23,1
 4009294:	800d883a 	mov	r6,r16
 4009298:	880f883a 	mov	r7,r17
 400929c:	0009883a 	mov	r4,zero
 40092a0:	014ffc34 	movhi	r5,16368
 40092a4:	103fcf0e 	bge	r2,zero,40091e4 <__alt_data_end+0xfc0091e4>
 40092a8:	d8c01317 	ldw	r3,76(sp)
 40092ac:	d8c00515 	stw	r3,20(sp)
 40092b0:	d9400917 	ldw	r5,36(sp)
 40092b4:	e009883a 	mov	r4,fp
 40092b8:	400ad040 	call	400ad04 <_Bfree>
 40092bc:	d9000517 	ldw	r4,20(sp)
 40092c0:	d9802317 	ldw	r6,140(sp)
 40092c4:	d9c02517 	ldw	r7,148(sp)
 40092c8:	b8000005 	stb	zero,0(r23)
 40092cc:	20800044 	addi	r2,r4,1
 40092d0:	30800015 	stw	r2,0(r6)
 40092d4:	3802aa26 	beq	r7,zero,4009d80 <_dtoa_r+0x1178>
 40092d8:	3dc00015 	stw	r23,0(r7)
 40092dc:	d8800717 	ldw	r2,28(sp)
 40092e0:	003e7906 	br	4008cc8 <__alt_data_end+0xfc008cc8>
 40092e4:	00800434 	movhi	r2,16
 40092e8:	10bfffc4 	addi	r2,r2,-1
 40092ec:	88a2703a 	and	r17,r17,r2
 40092f0:	883e851e 	bne	r17,zero,4008d08 <__alt_data_end+0xfc008d08>
 40092f4:	00810074 	movhi	r2,1025
 40092f8:	108b9204 	addi	r2,r2,11848
 40092fc:	003e8406 	br	4008d10 <__alt_data_end+0xfc008d10>
 4009300:	10c00204 	addi	r3,r2,8
 4009304:	003e8706 	br	4008d24 <__alt_data_end+0xfc008d24>
 4009308:	01400434 	movhi	r5,16
 400930c:	297fffc4 	addi	r5,r5,-1
 4009310:	994a703a 	and	r5,r19,r5
 4009314:	9009883a 	mov	r4,r18
 4009318:	843f0044 	addi	r16,r16,-1023
 400931c:	294ffc34 	orhi	r5,r5,16368
 4009320:	dd800217 	ldw	r22,8(sp)
 4009324:	d8001115 	stw	zero,68(sp)
 4009328:	003ea506 	br	4008dc0 <__alt_data_end+0xfc008dc0>
 400932c:	00810074 	movhi	r2,1025
 4009330:	108b8904 	addi	r2,r2,11812
 4009334:	003e6406 	br	4008cc8 <__alt_data_end+0xfc008cc8>
 4009338:	e0001115 	stw	zero,68(fp)
 400933c:	000b883a 	mov	r5,zero
 4009340:	e009883a 	mov	r4,fp
 4009344:	400ac5c0 	call	400ac5c <_Balloc>
 4009348:	01bfffc4 	movi	r6,-1
 400934c:	01c00044 	movi	r7,1
 4009350:	d8800715 	stw	r2,28(sp)
 4009354:	d9800c15 	stw	r6,48(sp)
 4009358:	e0801015 	stw	r2,64(fp)
 400935c:	d8000315 	stw	zero,12(sp)
 4009360:	d9c00b15 	stw	r7,44(sp)
 4009364:	d9800615 	stw	r6,24(sp)
 4009368:	d8002215 	stw	zero,136(sp)
 400936c:	d8800117 	ldw	r2,4(sp)
 4009370:	10008916 	blt	r2,zero,4009598 <_dtoa_r+0x990>
 4009374:	d9000517 	ldw	r4,20(sp)
 4009378:	00c00384 	movi	r3,14
 400937c:	19008616 	blt	r3,r4,4009598 <_dtoa_r+0x990>
 4009380:	200490fa 	slli	r2,r4,3
 4009384:	00c10074 	movhi	r3,1025
 4009388:	d9802217 	ldw	r6,136(sp)
 400938c:	18cbb104 	addi	r3,r3,11972
 4009390:	1885883a 	add	r2,r3,r2
 4009394:	14000017 	ldw	r16,0(r2)
 4009398:	14400117 	ldw	r17,4(r2)
 400939c:	30016316 	blt	r6,zero,400992c <_dtoa_r+0xd24>
 40093a0:	800d883a 	mov	r6,r16
 40093a4:	880f883a 	mov	r7,r17
 40093a8:	9009883a 	mov	r4,r18
 40093ac:	980b883a 	mov	r5,r19
 40093b0:	40041f80 	call	40041f8 <__divdf3>
 40093b4:	180b883a 	mov	r5,r3
 40093b8:	1009883a 	mov	r4,r2
 40093bc:	4005f000 	call	4005f00 <__fixdfsi>
 40093c0:	1009883a 	mov	r4,r2
 40093c4:	102b883a 	mov	r21,r2
 40093c8:	4005f800 	call	4005f80 <__floatsidf>
 40093cc:	800d883a 	mov	r6,r16
 40093d0:	880f883a 	mov	r7,r17
 40093d4:	1009883a 	mov	r4,r2
 40093d8:	180b883a 	mov	r5,r3
 40093dc:	4004d980 	call	4004d98 <__muldf3>
 40093e0:	100d883a 	mov	r6,r2
 40093e4:	180f883a 	mov	r7,r3
 40093e8:	9009883a 	mov	r4,r18
 40093ec:	980b883a 	mov	r5,r19
 40093f0:	40056040 	call	4005604 <__subdf3>
 40093f4:	d9c00717 	ldw	r7,28(sp)
 40093f8:	1009883a 	mov	r4,r2
 40093fc:	a8800c04 	addi	r2,r21,48
 4009400:	38800005 	stb	r2,0(r7)
 4009404:	3dc00044 	addi	r23,r7,1
 4009408:	d9c00617 	ldw	r7,24(sp)
 400940c:	01800044 	movi	r6,1
 4009410:	180b883a 	mov	r5,r3
 4009414:	2005883a 	mov	r2,r4
 4009418:	39803826 	beq	r7,r6,40094fc <_dtoa_r+0x8f4>
 400941c:	000d883a 	mov	r6,zero
 4009420:	01d00934 	movhi	r7,16420
 4009424:	4004d980 	call	4004d98 <__muldf3>
 4009428:	000d883a 	mov	r6,zero
 400942c:	000f883a 	mov	r7,zero
 4009430:	1009883a 	mov	r4,r2
 4009434:	180b883a 	mov	r5,r3
 4009438:	1025883a 	mov	r18,r2
 400943c:	1827883a 	mov	r19,r3
 4009440:	400ed780 	call	400ed78 <__eqdf2>
 4009444:	103f9a26 	beq	r2,zero,40092b0 <__alt_data_end+0xfc0092b0>
 4009448:	d9c00617 	ldw	r7,24(sp)
 400944c:	d8c00717 	ldw	r3,28(sp)
 4009450:	b829883a 	mov	r20,r23
 4009454:	38bfffc4 	addi	r2,r7,-1
 4009458:	18ad883a 	add	r22,r3,r2
 400945c:	00000a06 	br	4009488 <_dtoa_r+0x880>
 4009460:	4004d980 	call	4004d98 <__muldf3>
 4009464:	000d883a 	mov	r6,zero
 4009468:	000f883a 	mov	r7,zero
 400946c:	1009883a 	mov	r4,r2
 4009470:	180b883a 	mov	r5,r3
 4009474:	1025883a 	mov	r18,r2
 4009478:	1827883a 	mov	r19,r3
 400947c:	b829883a 	mov	r20,r23
 4009480:	400ed780 	call	400ed78 <__eqdf2>
 4009484:	103f8a26 	beq	r2,zero,40092b0 <__alt_data_end+0xfc0092b0>
 4009488:	800d883a 	mov	r6,r16
 400948c:	880f883a 	mov	r7,r17
 4009490:	9009883a 	mov	r4,r18
 4009494:	980b883a 	mov	r5,r19
 4009498:	40041f80 	call	40041f8 <__divdf3>
 400949c:	180b883a 	mov	r5,r3
 40094a0:	1009883a 	mov	r4,r2
 40094a4:	4005f000 	call	4005f00 <__fixdfsi>
 40094a8:	1009883a 	mov	r4,r2
 40094ac:	102b883a 	mov	r21,r2
 40094b0:	4005f800 	call	4005f80 <__floatsidf>
 40094b4:	800d883a 	mov	r6,r16
 40094b8:	880f883a 	mov	r7,r17
 40094bc:	1009883a 	mov	r4,r2
 40094c0:	180b883a 	mov	r5,r3
 40094c4:	4004d980 	call	4004d98 <__muldf3>
 40094c8:	100d883a 	mov	r6,r2
 40094cc:	180f883a 	mov	r7,r3
 40094d0:	9009883a 	mov	r4,r18
 40094d4:	980b883a 	mov	r5,r19
 40094d8:	40056040 	call	4005604 <__subdf3>
 40094dc:	aa000c04 	addi	r8,r21,48
 40094e0:	a2000005 	stb	r8,0(r20)
 40094e4:	000d883a 	mov	r6,zero
 40094e8:	01d00934 	movhi	r7,16420
 40094ec:	1009883a 	mov	r4,r2
 40094f0:	180b883a 	mov	r5,r3
 40094f4:	a5c00044 	addi	r23,r20,1
 40094f8:	b53fd91e 	bne	r22,r20,4009460 <__alt_data_end+0xfc009460>
 40094fc:	100d883a 	mov	r6,r2
 4009500:	180f883a 	mov	r7,r3
 4009504:	1009883a 	mov	r4,r2
 4009508:	180b883a 	mov	r5,r3
 400950c:	400394c0 	call	400394c <__adddf3>
 4009510:	100d883a 	mov	r6,r2
 4009514:	180f883a 	mov	r7,r3
 4009518:	8009883a 	mov	r4,r16
 400951c:	880b883a 	mov	r5,r17
 4009520:	1027883a 	mov	r19,r2
 4009524:	1825883a 	mov	r18,r3
 4009528:	4004ca40 	call	4004ca4 <__ledf2>
 400952c:	10000816 	blt	r2,zero,4009550 <_dtoa_r+0x948>
 4009530:	980d883a 	mov	r6,r19
 4009534:	900f883a 	mov	r7,r18
 4009538:	8009883a 	mov	r4,r16
 400953c:	880b883a 	mov	r5,r17
 4009540:	400ed780 	call	400ed78 <__eqdf2>
 4009544:	103f5a1e 	bne	r2,zero,40092b0 <__alt_data_end+0xfc0092b0>
 4009548:	ad40004c 	andi	r21,r21,1
 400954c:	a83f5826 	beq	r21,zero,40092b0 <__alt_data_end+0xfc0092b0>
 4009550:	bd3fffc3 	ldbu	r20,-1(r23)
 4009554:	b8bfffc4 	addi	r2,r23,-1
 4009558:	1007883a 	mov	r3,r2
 400955c:	01400e44 	movi	r5,57
 4009560:	d9800717 	ldw	r6,28(sp)
 4009564:	00000506 	br	400957c <_dtoa_r+0x974>
 4009568:	18ffffc4 	addi	r3,r3,-1
 400956c:	11824726 	beq	r2,r6,4009e8c <_dtoa_r+0x1284>
 4009570:	1d000003 	ldbu	r20,0(r3)
 4009574:	102f883a 	mov	r23,r2
 4009578:	10bfffc4 	addi	r2,r2,-1
 400957c:	a1003fcc 	andi	r4,r20,255
 4009580:	2100201c 	xori	r4,r4,128
 4009584:	213fe004 	addi	r4,r4,-128
 4009588:	217ff726 	beq	r4,r5,4009568 <__alt_data_end+0xfc009568>
 400958c:	a2000044 	addi	r8,r20,1
 4009590:	12000005 	stb	r8,0(r2)
 4009594:	003f4606 	br	40092b0 <__alt_data_end+0xfc0092b0>
 4009598:	d9000b17 	ldw	r4,44(sp)
 400959c:	2000c826 	beq	r4,zero,40098c0 <_dtoa_r+0xcb8>
 40095a0:	d9800317 	ldw	r6,12(sp)
 40095a4:	00c00044 	movi	r3,1
 40095a8:	1980f90e 	bge	r3,r6,4009990 <_dtoa_r+0xd88>
 40095ac:	d8800617 	ldw	r2,24(sp)
 40095b0:	d8c00a17 	ldw	r3,40(sp)
 40095b4:	157fffc4 	addi	r21,r2,-1
 40095b8:	1d41f316 	blt	r3,r21,4009d88 <_dtoa_r+0x1180>
 40095bc:	1d6bc83a 	sub	r21,r3,r21
 40095c0:	d9c00617 	ldw	r7,24(sp)
 40095c4:	3802aa16 	blt	r7,zero,400a070 <_dtoa_r+0x1468>
 40095c8:	dd000817 	ldw	r20,32(sp)
 40095cc:	d8800617 	ldw	r2,24(sp)
 40095d0:	d8c00817 	ldw	r3,32(sp)
 40095d4:	01400044 	movi	r5,1
 40095d8:	e009883a 	mov	r4,fp
 40095dc:	1887883a 	add	r3,r3,r2
 40095e0:	d8c00815 	stw	r3,32(sp)
 40095e4:	b0ad883a 	add	r22,r22,r2
 40095e8:	400b0900 	call	400b090 <__i2b>
 40095ec:	1023883a 	mov	r17,r2
 40095f0:	a0000826 	beq	r20,zero,4009614 <_dtoa_r+0xa0c>
 40095f4:	0580070e 	bge	zero,r22,4009614 <_dtoa_r+0xa0c>
 40095f8:	a005883a 	mov	r2,r20
 40095fc:	b500b916 	blt	r22,r20,40098e4 <_dtoa_r+0xcdc>
 4009600:	d9000817 	ldw	r4,32(sp)
 4009604:	a0a9c83a 	sub	r20,r20,r2
 4009608:	b0adc83a 	sub	r22,r22,r2
 400960c:	2089c83a 	sub	r4,r4,r2
 4009610:	d9000815 	stw	r4,32(sp)
 4009614:	d9800a17 	ldw	r6,40(sp)
 4009618:	0181810e 	bge	zero,r6,4009c20 <_dtoa_r+0x1018>
 400961c:	d9c00b17 	ldw	r7,44(sp)
 4009620:	3800b326 	beq	r7,zero,40098f0 <_dtoa_r+0xce8>
 4009624:	a800b226 	beq	r21,zero,40098f0 <_dtoa_r+0xce8>
 4009628:	880b883a 	mov	r5,r17
 400962c:	a80d883a 	mov	r6,r21
 4009630:	e009883a 	mov	r4,fp
 4009634:	400b3580 	call	400b358 <__pow5mult>
 4009638:	d9800917 	ldw	r6,36(sp)
 400963c:	100b883a 	mov	r5,r2
 4009640:	e009883a 	mov	r4,fp
 4009644:	1023883a 	mov	r17,r2
 4009648:	400b0cc0 	call	400b0cc <__multiply>
 400964c:	1021883a 	mov	r16,r2
 4009650:	d8800a17 	ldw	r2,40(sp)
 4009654:	d9400917 	ldw	r5,36(sp)
 4009658:	e009883a 	mov	r4,fp
 400965c:	1545c83a 	sub	r2,r2,r21
 4009660:	d8800a15 	stw	r2,40(sp)
 4009664:	400ad040 	call	400ad04 <_Bfree>
 4009668:	d8c00a17 	ldw	r3,40(sp)
 400966c:	18009f1e 	bne	r3,zero,40098ec <_dtoa_r+0xce4>
 4009670:	05c00044 	movi	r23,1
 4009674:	e009883a 	mov	r4,fp
 4009678:	b80b883a 	mov	r5,r23
 400967c:	400b0900 	call	400b090 <__i2b>
 4009680:	d9000d17 	ldw	r4,52(sp)
 4009684:	102b883a 	mov	r21,r2
 4009688:	2000ce26 	beq	r4,zero,40099c4 <_dtoa_r+0xdbc>
 400968c:	200d883a 	mov	r6,r4
 4009690:	100b883a 	mov	r5,r2
 4009694:	e009883a 	mov	r4,fp
 4009698:	400b3580 	call	400b358 <__pow5mult>
 400969c:	d9800317 	ldw	r6,12(sp)
 40096a0:	102b883a 	mov	r21,r2
 40096a4:	b981810e 	bge	r23,r6,4009cac <_dtoa_r+0x10a4>
 40096a8:	0027883a 	mov	r19,zero
 40096ac:	a8800417 	ldw	r2,16(r21)
 40096b0:	05c00804 	movi	r23,32
 40096b4:	10800104 	addi	r2,r2,4
 40096b8:	1085883a 	add	r2,r2,r2
 40096bc:	1085883a 	add	r2,r2,r2
 40096c0:	a885883a 	add	r2,r21,r2
 40096c4:	11000017 	ldw	r4,0(r2)
 40096c8:	400af780 	call	400af78 <__hi0bits>
 40096cc:	b885c83a 	sub	r2,r23,r2
 40096d0:	1585883a 	add	r2,r2,r22
 40096d4:	108007cc 	andi	r2,r2,31
 40096d8:	1000b326 	beq	r2,zero,40099a8 <_dtoa_r+0xda0>
 40096dc:	00c00804 	movi	r3,32
 40096e0:	1887c83a 	sub	r3,r3,r2
 40096e4:	01000104 	movi	r4,4
 40096e8:	20c2cd0e 	bge	r4,r3,400a220 <_dtoa_r+0x1618>
 40096ec:	00c00704 	movi	r3,28
 40096f0:	1885c83a 	sub	r2,r3,r2
 40096f4:	d8c00817 	ldw	r3,32(sp)
 40096f8:	a0a9883a 	add	r20,r20,r2
 40096fc:	b0ad883a 	add	r22,r22,r2
 4009700:	1887883a 	add	r3,r3,r2
 4009704:	d8c00815 	stw	r3,32(sp)
 4009708:	d9800817 	ldw	r6,32(sp)
 400970c:	0180040e 	bge	zero,r6,4009720 <_dtoa_r+0xb18>
 4009710:	800b883a 	mov	r5,r16
 4009714:	e009883a 	mov	r4,fp
 4009718:	400b4980 	call	400b498 <__lshift>
 400971c:	1021883a 	mov	r16,r2
 4009720:	0580050e 	bge	zero,r22,4009738 <_dtoa_r+0xb30>
 4009724:	a80b883a 	mov	r5,r21
 4009728:	b00d883a 	mov	r6,r22
 400972c:	e009883a 	mov	r4,fp
 4009730:	400b4980 	call	400b498 <__lshift>
 4009734:	102b883a 	mov	r21,r2
 4009738:	d9c00e17 	ldw	r7,56(sp)
 400973c:	3801211e 	bne	r7,zero,4009bc4 <_dtoa_r+0xfbc>
 4009740:	d9800617 	ldw	r6,24(sp)
 4009744:	0181380e 	bge	zero,r6,4009c28 <_dtoa_r+0x1020>
 4009748:	d8c00b17 	ldw	r3,44(sp)
 400974c:	1800ab1e 	bne	r3,zero,40099fc <_dtoa_r+0xdf4>
 4009750:	dc800717 	ldw	r18,28(sp)
 4009754:	dcc00617 	ldw	r19,24(sp)
 4009758:	9029883a 	mov	r20,r18
 400975c:	00000206 	br	4009768 <_dtoa_r+0xb60>
 4009760:	400ad2c0 	call	400ad2c <__multadd>
 4009764:	1021883a 	mov	r16,r2
 4009768:	a80b883a 	mov	r5,r21
 400976c:	8009883a 	mov	r4,r16
 4009770:	40089e00 	call	40089e0 <quorem>
 4009774:	10800c04 	addi	r2,r2,48
 4009778:	90800005 	stb	r2,0(r18)
 400977c:	94800044 	addi	r18,r18,1
 4009780:	9507c83a 	sub	r3,r18,r20
 4009784:	000f883a 	mov	r7,zero
 4009788:	01800284 	movi	r6,10
 400978c:	800b883a 	mov	r5,r16
 4009790:	e009883a 	mov	r4,fp
 4009794:	1cfff216 	blt	r3,r19,4009760 <__alt_data_end+0xfc009760>
 4009798:	1011883a 	mov	r8,r2
 400979c:	d8800617 	ldw	r2,24(sp)
 40097a0:	0082370e 	bge	zero,r2,400a080 <_dtoa_r+0x1478>
 40097a4:	d9000717 	ldw	r4,28(sp)
 40097a8:	0025883a 	mov	r18,zero
 40097ac:	20af883a 	add	r23,r4,r2
 40097b0:	01800044 	movi	r6,1
 40097b4:	800b883a 	mov	r5,r16
 40097b8:	e009883a 	mov	r4,fp
 40097bc:	da001715 	stw	r8,92(sp)
 40097c0:	400b4980 	call	400b498 <__lshift>
 40097c4:	a80b883a 	mov	r5,r21
 40097c8:	1009883a 	mov	r4,r2
 40097cc:	d8800915 	stw	r2,36(sp)
 40097d0:	400b5e00 	call	400b5e0 <__mcmp>
 40097d4:	da001717 	ldw	r8,92(sp)
 40097d8:	0081800e 	bge	zero,r2,4009ddc <_dtoa_r+0x11d4>
 40097dc:	b93fffc3 	ldbu	r4,-1(r23)
 40097e0:	b8bfffc4 	addi	r2,r23,-1
 40097e4:	1007883a 	mov	r3,r2
 40097e8:	01800e44 	movi	r6,57
 40097ec:	d9c00717 	ldw	r7,28(sp)
 40097f0:	00000506 	br	4009808 <_dtoa_r+0xc00>
 40097f4:	18ffffc4 	addi	r3,r3,-1
 40097f8:	11c12326 	beq	r2,r7,4009c88 <_dtoa_r+0x1080>
 40097fc:	19000003 	ldbu	r4,0(r3)
 4009800:	102f883a 	mov	r23,r2
 4009804:	10bfffc4 	addi	r2,r2,-1
 4009808:	21403fcc 	andi	r5,r4,255
 400980c:	2940201c 	xori	r5,r5,128
 4009810:	297fe004 	addi	r5,r5,-128
 4009814:	29bff726 	beq	r5,r6,40097f4 <__alt_data_end+0xfc0097f4>
 4009818:	21000044 	addi	r4,r4,1
 400981c:	11000005 	stb	r4,0(r2)
 4009820:	a80b883a 	mov	r5,r21
 4009824:	e009883a 	mov	r4,fp
 4009828:	400ad040 	call	400ad04 <_Bfree>
 400982c:	883ea026 	beq	r17,zero,40092b0 <__alt_data_end+0xfc0092b0>
 4009830:	90000426 	beq	r18,zero,4009844 <_dtoa_r+0xc3c>
 4009834:	94400326 	beq	r18,r17,4009844 <_dtoa_r+0xc3c>
 4009838:	900b883a 	mov	r5,r18
 400983c:	e009883a 	mov	r4,fp
 4009840:	400ad040 	call	400ad04 <_Bfree>
 4009844:	880b883a 	mov	r5,r17
 4009848:	e009883a 	mov	r4,fp
 400984c:	400ad040 	call	400ad04 <_Bfree>
 4009850:	003e9706 	br	40092b0 <__alt_data_end+0xfc0092b0>
 4009854:	01800044 	movi	r6,1
 4009858:	d9800e15 	stw	r6,56(sp)
 400985c:	003d9606 	br	4008eb8 <__alt_data_end+0xfc008eb8>
 4009860:	d8800817 	ldw	r2,32(sp)
 4009864:	d8c00517 	ldw	r3,20(sp)
 4009868:	d8000d15 	stw	zero,52(sp)
 400986c:	10c5c83a 	sub	r2,r2,r3
 4009870:	00c9c83a 	sub	r4,zero,r3
 4009874:	d8800815 	stw	r2,32(sp)
 4009878:	d9000a15 	stw	r4,40(sp)
 400987c:	003d9706 	br	4008edc <__alt_data_end+0xfc008edc>
 4009880:	05adc83a 	sub	r22,zero,r22
 4009884:	dd800815 	stw	r22,32(sp)
 4009888:	002d883a 	mov	r22,zero
 400988c:	003d8e06 	br	4008ec8 <__alt_data_end+0xfc008ec8>
 4009890:	d9000517 	ldw	r4,20(sp)
 4009894:	4005f800 	call	4005f80 <__floatsidf>
 4009898:	100d883a 	mov	r6,r2
 400989c:	180f883a 	mov	r7,r3
 40098a0:	a009883a 	mov	r4,r20
 40098a4:	880b883a 	mov	r5,r17
 40098a8:	400ed780 	call	400ed78 <__eqdf2>
 40098ac:	103d7126 	beq	r2,zero,4008e74 <__alt_data_end+0xfc008e74>
 40098b0:	d9c00517 	ldw	r7,20(sp)
 40098b4:	39ffffc4 	addi	r7,r7,-1
 40098b8:	d9c00515 	stw	r7,20(sp)
 40098bc:	003d6d06 	br	4008e74 <__alt_data_end+0xfc008e74>
 40098c0:	dd400a17 	ldw	r21,40(sp)
 40098c4:	dd000817 	ldw	r20,32(sp)
 40098c8:	0023883a 	mov	r17,zero
 40098cc:	003f4806 	br	40095f0 <__alt_data_end+0xfc0095f0>
 40098d0:	10e3c83a 	sub	r17,r2,r3
 40098d4:	9448983a 	sll	r4,r18,r17
 40098d8:	003d3206 	br	4008da4 <__alt_data_end+0xfc008da4>
 40098dc:	d8000e15 	stw	zero,56(sp)
 40098e0:	003d7506 	br	4008eb8 <__alt_data_end+0xfc008eb8>
 40098e4:	b005883a 	mov	r2,r22
 40098e8:	003f4506 	br	4009600 <__alt_data_end+0xfc009600>
 40098ec:	dc000915 	stw	r16,36(sp)
 40098f0:	d9800a17 	ldw	r6,40(sp)
 40098f4:	d9400917 	ldw	r5,36(sp)
 40098f8:	e009883a 	mov	r4,fp
 40098fc:	400b3580 	call	400b358 <__pow5mult>
 4009900:	1021883a 	mov	r16,r2
 4009904:	003f5a06 	br	4009670 <__alt_data_end+0xfc009670>
 4009908:	01c00044 	movi	r7,1
 400990c:	d9c00b15 	stw	r7,44(sp)
 4009910:	d8802217 	ldw	r2,136(sp)
 4009914:	0081280e 	bge	zero,r2,4009db8 <_dtoa_r+0x11b0>
 4009918:	100d883a 	mov	r6,r2
 400991c:	1021883a 	mov	r16,r2
 4009920:	d8800c15 	stw	r2,48(sp)
 4009924:	d8800615 	stw	r2,24(sp)
 4009928:	003d8806 	br	4008f4c <__alt_data_end+0xfc008f4c>
 400992c:	d8800617 	ldw	r2,24(sp)
 4009930:	00be9b16 	blt	zero,r2,40093a0 <__alt_data_end+0xfc0093a0>
 4009934:	10010f1e 	bne	r2,zero,4009d74 <_dtoa_r+0x116c>
 4009938:	880b883a 	mov	r5,r17
 400993c:	000d883a 	mov	r6,zero
 4009940:	01d00534 	movhi	r7,16404
 4009944:	8009883a 	mov	r4,r16
 4009948:	4004d980 	call	4004d98 <__muldf3>
 400994c:	900d883a 	mov	r6,r18
 4009950:	980f883a 	mov	r7,r19
 4009954:	1009883a 	mov	r4,r2
 4009958:	180b883a 	mov	r5,r3
 400995c:	4004bc80 	call	4004bc8 <__gedf2>
 4009960:	002b883a 	mov	r21,zero
 4009964:	0023883a 	mov	r17,zero
 4009968:	1000bf16 	blt	r2,zero,4009c68 <_dtoa_r+0x1060>
 400996c:	d9802217 	ldw	r6,136(sp)
 4009970:	ddc00717 	ldw	r23,28(sp)
 4009974:	018c303a 	nor	r6,zero,r6
 4009978:	d9800515 	stw	r6,20(sp)
 400997c:	a80b883a 	mov	r5,r21
 4009980:	e009883a 	mov	r4,fp
 4009984:	400ad040 	call	400ad04 <_Bfree>
 4009988:	883e4926 	beq	r17,zero,40092b0 <__alt_data_end+0xfc0092b0>
 400998c:	003fad06 	br	4009844 <__alt_data_end+0xfc009844>
 4009990:	d9c01117 	ldw	r7,68(sp)
 4009994:	3801bc26 	beq	r7,zero,400a088 <_dtoa_r+0x1480>
 4009998:	10810cc4 	addi	r2,r2,1075
 400999c:	dd400a17 	ldw	r21,40(sp)
 40099a0:	dd000817 	ldw	r20,32(sp)
 40099a4:	003f0a06 	br	40095d0 <__alt_data_end+0xfc0095d0>
 40099a8:	00800704 	movi	r2,28
 40099ac:	d9000817 	ldw	r4,32(sp)
 40099b0:	a0a9883a 	add	r20,r20,r2
 40099b4:	b0ad883a 	add	r22,r22,r2
 40099b8:	2089883a 	add	r4,r4,r2
 40099bc:	d9000815 	stw	r4,32(sp)
 40099c0:	003f5106 	br	4009708 <__alt_data_end+0xfc009708>
 40099c4:	d8c00317 	ldw	r3,12(sp)
 40099c8:	b8c1fc0e 	bge	r23,r3,400a1bc <_dtoa_r+0x15b4>
 40099cc:	0027883a 	mov	r19,zero
 40099d0:	b805883a 	mov	r2,r23
 40099d4:	003f3e06 	br	40096d0 <__alt_data_end+0xfc0096d0>
 40099d8:	880b883a 	mov	r5,r17
 40099dc:	e009883a 	mov	r4,fp
 40099e0:	000f883a 	mov	r7,zero
 40099e4:	01800284 	movi	r6,10
 40099e8:	400ad2c0 	call	400ad2c <__multadd>
 40099ec:	d9000c17 	ldw	r4,48(sp)
 40099f0:	1023883a 	mov	r17,r2
 40099f4:	0102040e 	bge	zero,r4,400a208 <_dtoa_r+0x1600>
 40099f8:	d9000615 	stw	r4,24(sp)
 40099fc:	0500050e 	bge	zero,r20,4009a14 <_dtoa_r+0xe0c>
 4009a00:	880b883a 	mov	r5,r17
 4009a04:	a00d883a 	mov	r6,r20
 4009a08:	e009883a 	mov	r4,fp
 4009a0c:	400b4980 	call	400b498 <__lshift>
 4009a10:	1023883a 	mov	r17,r2
 4009a14:	9801241e 	bne	r19,zero,4009ea8 <_dtoa_r+0x12a0>
 4009a18:	8829883a 	mov	r20,r17
 4009a1c:	d9000617 	ldw	r4,24(sp)
 4009a20:	dcc00717 	ldw	r19,28(sp)
 4009a24:	9480004c 	andi	r18,r18,1
 4009a28:	20bfffc4 	addi	r2,r4,-1
 4009a2c:	9885883a 	add	r2,r19,r2
 4009a30:	d8800415 	stw	r2,16(sp)
 4009a34:	dc800615 	stw	r18,24(sp)
 4009a38:	a80b883a 	mov	r5,r21
 4009a3c:	8009883a 	mov	r4,r16
 4009a40:	40089e00 	call	40089e0 <quorem>
 4009a44:	880b883a 	mov	r5,r17
 4009a48:	8009883a 	mov	r4,r16
 4009a4c:	102f883a 	mov	r23,r2
 4009a50:	400b5e00 	call	400b5e0 <__mcmp>
 4009a54:	a80b883a 	mov	r5,r21
 4009a58:	a00d883a 	mov	r6,r20
 4009a5c:	e009883a 	mov	r4,fp
 4009a60:	102d883a 	mov	r22,r2
 4009a64:	400b6400 	call	400b640 <__mdiff>
 4009a68:	1007883a 	mov	r3,r2
 4009a6c:	10800317 	ldw	r2,12(r2)
 4009a70:	bc800c04 	addi	r18,r23,48
 4009a74:	180b883a 	mov	r5,r3
 4009a78:	10004e1e 	bne	r2,zero,4009bb4 <_dtoa_r+0xfac>
 4009a7c:	8009883a 	mov	r4,r16
 4009a80:	d8c01615 	stw	r3,88(sp)
 4009a84:	400b5e00 	call	400b5e0 <__mcmp>
 4009a88:	d8c01617 	ldw	r3,88(sp)
 4009a8c:	e009883a 	mov	r4,fp
 4009a90:	d8801615 	stw	r2,88(sp)
 4009a94:	180b883a 	mov	r5,r3
 4009a98:	400ad040 	call	400ad04 <_Bfree>
 4009a9c:	d8801617 	ldw	r2,88(sp)
 4009aa0:	1000041e 	bne	r2,zero,4009ab4 <_dtoa_r+0xeac>
 4009aa4:	d9800317 	ldw	r6,12(sp)
 4009aa8:	3000021e 	bne	r6,zero,4009ab4 <_dtoa_r+0xeac>
 4009aac:	d8c00617 	ldw	r3,24(sp)
 4009ab0:	18003726 	beq	r3,zero,4009b90 <_dtoa_r+0xf88>
 4009ab4:	b0002016 	blt	r22,zero,4009b38 <_dtoa_r+0xf30>
 4009ab8:	b000041e 	bne	r22,zero,4009acc <_dtoa_r+0xec4>
 4009abc:	d9000317 	ldw	r4,12(sp)
 4009ac0:	2000021e 	bne	r4,zero,4009acc <_dtoa_r+0xec4>
 4009ac4:	d8c00617 	ldw	r3,24(sp)
 4009ac8:	18001b26 	beq	r3,zero,4009b38 <_dtoa_r+0xf30>
 4009acc:	00810716 	blt	zero,r2,4009eec <_dtoa_r+0x12e4>
 4009ad0:	d8c00417 	ldw	r3,16(sp)
 4009ad4:	9d800044 	addi	r22,r19,1
 4009ad8:	9c800005 	stb	r18,0(r19)
 4009adc:	b02f883a 	mov	r23,r22
 4009ae0:	98c10626 	beq	r19,r3,4009efc <_dtoa_r+0x12f4>
 4009ae4:	800b883a 	mov	r5,r16
 4009ae8:	000f883a 	mov	r7,zero
 4009aec:	01800284 	movi	r6,10
 4009af0:	e009883a 	mov	r4,fp
 4009af4:	400ad2c0 	call	400ad2c <__multadd>
 4009af8:	1021883a 	mov	r16,r2
 4009afc:	000f883a 	mov	r7,zero
 4009b00:	01800284 	movi	r6,10
 4009b04:	880b883a 	mov	r5,r17
 4009b08:	e009883a 	mov	r4,fp
 4009b0c:	8d002526 	beq	r17,r20,4009ba4 <_dtoa_r+0xf9c>
 4009b10:	400ad2c0 	call	400ad2c <__multadd>
 4009b14:	a00b883a 	mov	r5,r20
 4009b18:	000f883a 	mov	r7,zero
 4009b1c:	01800284 	movi	r6,10
 4009b20:	e009883a 	mov	r4,fp
 4009b24:	1023883a 	mov	r17,r2
 4009b28:	400ad2c0 	call	400ad2c <__multadd>
 4009b2c:	1029883a 	mov	r20,r2
 4009b30:	b027883a 	mov	r19,r22
 4009b34:	003fc006 	br	4009a38 <__alt_data_end+0xfc009a38>
 4009b38:	9011883a 	mov	r8,r18
 4009b3c:	00800e0e 	bge	zero,r2,4009b78 <_dtoa_r+0xf70>
 4009b40:	800b883a 	mov	r5,r16
 4009b44:	01800044 	movi	r6,1
 4009b48:	e009883a 	mov	r4,fp
 4009b4c:	da001715 	stw	r8,92(sp)
 4009b50:	400b4980 	call	400b498 <__lshift>
 4009b54:	a80b883a 	mov	r5,r21
 4009b58:	1009883a 	mov	r4,r2
 4009b5c:	1021883a 	mov	r16,r2
 4009b60:	400b5e00 	call	400b5e0 <__mcmp>
 4009b64:	da001717 	ldw	r8,92(sp)
 4009b68:	0081960e 	bge	zero,r2,400a1c4 <_dtoa_r+0x15bc>
 4009b6c:	00800e44 	movi	r2,57
 4009b70:	40817026 	beq	r8,r2,400a134 <_dtoa_r+0x152c>
 4009b74:	ba000c44 	addi	r8,r23,49
 4009b78:	8825883a 	mov	r18,r17
 4009b7c:	9dc00044 	addi	r23,r19,1
 4009b80:	9a000005 	stb	r8,0(r19)
 4009b84:	a023883a 	mov	r17,r20
 4009b88:	dc000915 	stw	r16,36(sp)
 4009b8c:	003f2406 	br	4009820 <__alt_data_end+0xfc009820>
 4009b90:	00800e44 	movi	r2,57
 4009b94:	9011883a 	mov	r8,r18
 4009b98:	90816626 	beq	r18,r2,400a134 <_dtoa_r+0x152c>
 4009b9c:	05bff516 	blt	zero,r22,4009b74 <__alt_data_end+0xfc009b74>
 4009ba0:	003ff506 	br	4009b78 <__alt_data_end+0xfc009b78>
 4009ba4:	400ad2c0 	call	400ad2c <__multadd>
 4009ba8:	1023883a 	mov	r17,r2
 4009bac:	1029883a 	mov	r20,r2
 4009bb0:	003fdf06 	br	4009b30 <__alt_data_end+0xfc009b30>
 4009bb4:	e009883a 	mov	r4,fp
 4009bb8:	400ad040 	call	400ad04 <_Bfree>
 4009bbc:	00800044 	movi	r2,1
 4009bc0:	003fbc06 	br	4009ab4 <__alt_data_end+0xfc009ab4>
 4009bc4:	a80b883a 	mov	r5,r21
 4009bc8:	8009883a 	mov	r4,r16
 4009bcc:	400b5e00 	call	400b5e0 <__mcmp>
 4009bd0:	103edb0e 	bge	r2,zero,4009740 <__alt_data_end+0xfc009740>
 4009bd4:	800b883a 	mov	r5,r16
 4009bd8:	000f883a 	mov	r7,zero
 4009bdc:	01800284 	movi	r6,10
 4009be0:	e009883a 	mov	r4,fp
 4009be4:	400ad2c0 	call	400ad2c <__multadd>
 4009be8:	1021883a 	mov	r16,r2
 4009bec:	d8800517 	ldw	r2,20(sp)
 4009bf0:	d8c00b17 	ldw	r3,44(sp)
 4009bf4:	10bfffc4 	addi	r2,r2,-1
 4009bf8:	d8800515 	stw	r2,20(sp)
 4009bfc:	183f761e 	bne	r3,zero,40099d8 <__alt_data_end+0xfc0099d8>
 4009c00:	d9000c17 	ldw	r4,48(sp)
 4009c04:	0101730e 	bge	zero,r4,400a1d4 <_dtoa_r+0x15cc>
 4009c08:	d9000615 	stw	r4,24(sp)
 4009c0c:	003ed006 	br	4009750 <__alt_data_end+0xfc009750>
 4009c10:	00800084 	movi	r2,2
 4009c14:	3081861e 	bne	r6,r2,400a230 <_dtoa_r+0x1628>
 4009c18:	d8000b15 	stw	zero,44(sp)
 4009c1c:	003f3c06 	br	4009910 <__alt_data_end+0xfc009910>
 4009c20:	dc000917 	ldw	r16,36(sp)
 4009c24:	003e9206 	br	4009670 <__alt_data_end+0xfc009670>
 4009c28:	d9c00317 	ldw	r7,12(sp)
 4009c2c:	00800084 	movi	r2,2
 4009c30:	11fec50e 	bge	r2,r7,4009748 <__alt_data_end+0xfc009748>
 4009c34:	d9000617 	ldw	r4,24(sp)
 4009c38:	20013c1e 	bne	r4,zero,400a12c <_dtoa_r+0x1524>
 4009c3c:	a80b883a 	mov	r5,r21
 4009c40:	000f883a 	mov	r7,zero
 4009c44:	01800144 	movi	r6,5
 4009c48:	e009883a 	mov	r4,fp
 4009c4c:	400ad2c0 	call	400ad2c <__multadd>
 4009c50:	100b883a 	mov	r5,r2
 4009c54:	8009883a 	mov	r4,r16
 4009c58:	102b883a 	mov	r21,r2
 4009c5c:	400b5e00 	call	400b5e0 <__mcmp>
 4009c60:	dc000915 	stw	r16,36(sp)
 4009c64:	00bf410e 	bge	zero,r2,400996c <__alt_data_end+0xfc00996c>
 4009c68:	d9c00717 	ldw	r7,28(sp)
 4009c6c:	00800c44 	movi	r2,49
 4009c70:	38800005 	stb	r2,0(r7)
 4009c74:	d8800517 	ldw	r2,20(sp)
 4009c78:	3dc00044 	addi	r23,r7,1
 4009c7c:	10800044 	addi	r2,r2,1
 4009c80:	d8800515 	stw	r2,20(sp)
 4009c84:	003f3d06 	br	400997c <__alt_data_end+0xfc00997c>
 4009c88:	d9800517 	ldw	r6,20(sp)
 4009c8c:	d9c00717 	ldw	r7,28(sp)
 4009c90:	00800c44 	movi	r2,49
 4009c94:	31800044 	addi	r6,r6,1
 4009c98:	d9800515 	stw	r6,20(sp)
 4009c9c:	38800005 	stb	r2,0(r7)
 4009ca0:	003edf06 	br	4009820 <__alt_data_end+0xfc009820>
 4009ca4:	d8000b15 	stw	zero,44(sp)
 4009ca8:	003c9f06 	br	4008f28 <__alt_data_end+0xfc008f28>
 4009cac:	903e7e1e 	bne	r18,zero,40096a8 <__alt_data_end+0xfc0096a8>
 4009cb0:	00800434 	movhi	r2,16
 4009cb4:	10bfffc4 	addi	r2,r2,-1
 4009cb8:	9884703a 	and	r2,r19,r2
 4009cbc:	1000ea1e 	bne	r2,zero,400a068 <_dtoa_r+0x1460>
 4009cc0:	9cdffc2c 	andhi	r19,r19,32752
 4009cc4:	9800e826 	beq	r19,zero,400a068 <_dtoa_r+0x1460>
 4009cc8:	d9c00817 	ldw	r7,32(sp)
 4009ccc:	b5800044 	addi	r22,r22,1
 4009cd0:	04c00044 	movi	r19,1
 4009cd4:	39c00044 	addi	r7,r7,1
 4009cd8:	d9c00815 	stw	r7,32(sp)
 4009cdc:	d8800d17 	ldw	r2,52(sp)
 4009ce0:	103e721e 	bne	r2,zero,40096ac <__alt_data_end+0xfc0096ac>
 4009ce4:	00800044 	movi	r2,1
 4009ce8:	003e7906 	br	40096d0 <__alt_data_end+0xfc0096d0>
 4009cec:	8009883a 	mov	r4,r16
 4009cf0:	4005f800 	call	4005f80 <__floatsidf>
 4009cf4:	d9800f17 	ldw	r6,60(sp)
 4009cf8:	d9c01017 	ldw	r7,64(sp)
 4009cfc:	1009883a 	mov	r4,r2
 4009d00:	180b883a 	mov	r5,r3
 4009d04:	4004d980 	call	4004d98 <__muldf3>
 4009d08:	000d883a 	mov	r6,zero
 4009d0c:	01d00734 	movhi	r7,16412
 4009d10:	1009883a 	mov	r4,r2
 4009d14:	180b883a 	mov	r5,r3
 4009d18:	400394c0 	call	400394c <__adddf3>
 4009d1c:	047f3034 	movhi	r17,64704
 4009d20:	1021883a 	mov	r16,r2
 4009d24:	1c63883a 	add	r17,r3,r17
 4009d28:	d9000f17 	ldw	r4,60(sp)
 4009d2c:	d9401017 	ldw	r5,64(sp)
 4009d30:	000d883a 	mov	r6,zero
 4009d34:	01d00534 	movhi	r7,16404
 4009d38:	40056040 	call	4005604 <__subdf3>
 4009d3c:	800d883a 	mov	r6,r16
 4009d40:	880f883a 	mov	r7,r17
 4009d44:	1009883a 	mov	r4,r2
 4009d48:	180b883a 	mov	r5,r3
 4009d4c:	102b883a 	mov	r21,r2
 4009d50:	1829883a 	mov	r20,r3
 4009d54:	4004bc80 	call	4004bc8 <__gedf2>
 4009d58:	00806c16 	blt	zero,r2,4009f0c <_dtoa_r+0x1304>
 4009d5c:	89e0003c 	xorhi	r7,r17,32768
 4009d60:	800d883a 	mov	r6,r16
 4009d64:	a809883a 	mov	r4,r21
 4009d68:	a00b883a 	mov	r5,r20
 4009d6c:	4004ca40 	call	4004ca4 <__ledf2>
 4009d70:	103d7e0e 	bge	r2,zero,400936c <__alt_data_end+0xfc00936c>
 4009d74:	002b883a 	mov	r21,zero
 4009d78:	0023883a 	mov	r17,zero
 4009d7c:	003efb06 	br	400996c <__alt_data_end+0xfc00996c>
 4009d80:	d8800717 	ldw	r2,28(sp)
 4009d84:	003bd006 	br	4008cc8 <__alt_data_end+0xfc008cc8>
 4009d88:	d9000a17 	ldw	r4,40(sp)
 4009d8c:	d9800d17 	ldw	r6,52(sp)
 4009d90:	dd400a15 	stw	r21,40(sp)
 4009d94:	a905c83a 	sub	r2,r21,r4
 4009d98:	308d883a 	add	r6,r6,r2
 4009d9c:	d9800d15 	stw	r6,52(sp)
 4009da0:	002b883a 	mov	r21,zero
 4009da4:	003e0606 	br	40095c0 <__alt_data_end+0xfc0095c0>
 4009da8:	9023883a 	mov	r17,r18
 4009dac:	9829883a 	mov	r20,r19
 4009db0:	04000084 	movi	r16,2
 4009db4:	003c9206 	br	4009000 <__alt_data_end+0xfc009000>
 4009db8:	04000044 	movi	r16,1
 4009dbc:	dc000c15 	stw	r16,48(sp)
 4009dc0:	dc000615 	stw	r16,24(sp)
 4009dc4:	dc002215 	stw	r16,136(sp)
 4009dc8:	e0001115 	stw	zero,68(fp)
 4009dcc:	000b883a 	mov	r5,zero
 4009dd0:	003c6906 	br	4008f78 <__alt_data_end+0xfc008f78>
 4009dd4:	3021883a 	mov	r16,r6
 4009dd8:	003ffb06 	br	4009dc8 <__alt_data_end+0xfc009dc8>
 4009ddc:	1000021e 	bne	r2,zero,4009de8 <_dtoa_r+0x11e0>
 4009de0:	4200004c 	andi	r8,r8,1
 4009de4:	403e7d1e 	bne	r8,zero,40097dc <__alt_data_end+0xfc0097dc>
 4009de8:	01000c04 	movi	r4,48
 4009dec:	00000106 	br	4009df4 <_dtoa_r+0x11ec>
 4009df0:	102f883a 	mov	r23,r2
 4009df4:	b8bfffc4 	addi	r2,r23,-1
 4009df8:	10c00007 	ldb	r3,0(r2)
 4009dfc:	193ffc26 	beq	r3,r4,4009df0 <__alt_data_end+0xfc009df0>
 4009e00:	003e8706 	br	4009820 <__alt_data_end+0xfc009820>
 4009e04:	d8800517 	ldw	r2,20(sp)
 4009e08:	00a3c83a 	sub	r17,zero,r2
 4009e0c:	8800a426 	beq	r17,zero,400a0a0 <_dtoa_r+0x1498>
 4009e10:	888003cc 	andi	r2,r17,15
 4009e14:	100490fa 	slli	r2,r2,3
 4009e18:	00c10074 	movhi	r3,1025
 4009e1c:	18cbb104 	addi	r3,r3,11972
 4009e20:	1885883a 	add	r2,r3,r2
 4009e24:	11800017 	ldw	r6,0(r2)
 4009e28:	11c00117 	ldw	r7,4(r2)
 4009e2c:	9009883a 	mov	r4,r18
 4009e30:	980b883a 	mov	r5,r19
 4009e34:	8823d13a 	srai	r17,r17,4
 4009e38:	4004d980 	call	4004d98 <__muldf3>
 4009e3c:	d8800f15 	stw	r2,60(sp)
 4009e40:	d8c01015 	stw	r3,64(sp)
 4009e44:	8800e826 	beq	r17,zero,400a1e8 <_dtoa_r+0x15e0>
 4009e48:	05010074 	movhi	r20,1025
 4009e4c:	a50ba704 	addi	r20,r20,11932
 4009e50:	04000084 	movi	r16,2
 4009e54:	8980004c 	andi	r6,r17,1
 4009e58:	1009883a 	mov	r4,r2
 4009e5c:	8823d07a 	srai	r17,r17,1
 4009e60:	180b883a 	mov	r5,r3
 4009e64:	30000426 	beq	r6,zero,4009e78 <_dtoa_r+0x1270>
 4009e68:	a1800017 	ldw	r6,0(r20)
 4009e6c:	a1c00117 	ldw	r7,4(r20)
 4009e70:	84000044 	addi	r16,r16,1
 4009e74:	4004d980 	call	4004d98 <__muldf3>
 4009e78:	a5000204 	addi	r20,r20,8
 4009e7c:	883ff51e 	bne	r17,zero,4009e54 <__alt_data_end+0xfc009e54>
 4009e80:	d8800f15 	stw	r2,60(sp)
 4009e84:	d8c01015 	stw	r3,64(sp)
 4009e88:	003c7606 	br	4009064 <__alt_data_end+0xfc009064>
 4009e8c:	00c00c04 	movi	r3,48
 4009e90:	10c00005 	stb	r3,0(r2)
 4009e94:	d8c00517 	ldw	r3,20(sp)
 4009e98:	bd3fffc3 	ldbu	r20,-1(r23)
 4009e9c:	18c00044 	addi	r3,r3,1
 4009ea0:	d8c00515 	stw	r3,20(sp)
 4009ea4:	003db906 	br	400958c <__alt_data_end+0xfc00958c>
 4009ea8:	89400117 	ldw	r5,4(r17)
 4009eac:	e009883a 	mov	r4,fp
 4009eb0:	400ac5c0 	call	400ac5c <_Balloc>
 4009eb4:	89800417 	ldw	r6,16(r17)
 4009eb8:	89400304 	addi	r5,r17,12
 4009ebc:	11000304 	addi	r4,r2,12
 4009ec0:	31800084 	addi	r6,r6,2
 4009ec4:	318d883a 	add	r6,r6,r6
 4009ec8:	318d883a 	add	r6,r6,r6
 4009ecc:	1027883a 	mov	r19,r2
 4009ed0:	40064200 	call	4006420 <memcpy>
 4009ed4:	01800044 	movi	r6,1
 4009ed8:	980b883a 	mov	r5,r19
 4009edc:	e009883a 	mov	r4,fp
 4009ee0:	400b4980 	call	400b498 <__lshift>
 4009ee4:	1029883a 	mov	r20,r2
 4009ee8:	003ecc06 	br	4009a1c <__alt_data_end+0xfc009a1c>
 4009eec:	00800e44 	movi	r2,57
 4009ef0:	90809026 	beq	r18,r2,400a134 <_dtoa_r+0x152c>
 4009ef4:	92000044 	addi	r8,r18,1
 4009ef8:	003f1f06 	br	4009b78 <__alt_data_end+0xfc009b78>
 4009efc:	9011883a 	mov	r8,r18
 4009f00:	8825883a 	mov	r18,r17
 4009f04:	a023883a 	mov	r17,r20
 4009f08:	003e2906 	br	40097b0 <__alt_data_end+0xfc0097b0>
 4009f0c:	002b883a 	mov	r21,zero
 4009f10:	0023883a 	mov	r17,zero
 4009f14:	003f5406 	br	4009c68 <__alt_data_end+0xfc009c68>
 4009f18:	61bfffc4 	addi	r6,r12,-1
 4009f1c:	300490fa 	slli	r2,r6,3
 4009f20:	00c10074 	movhi	r3,1025
 4009f24:	18cbb104 	addi	r3,r3,11972
 4009f28:	1885883a 	add	r2,r3,r2
 4009f2c:	11000017 	ldw	r4,0(r2)
 4009f30:	11400117 	ldw	r5,4(r2)
 4009f34:	d8800717 	ldw	r2,28(sp)
 4009f38:	880f883a 	mov	r7,r17
 4009f3c:	d9801215 	stw	r6,72(sp)
 4009f40:	800d883a 	mov	r6,r16
 4009f44:	db001615 	stw	r12,88(sp)
 4009f48:	15c00044 	addi	r23,r2,1
 4009f4c:	4004d980 	call	4004d98 <__muldf3>
 4009f50:	d9401017 	ldw	r5,64(sp)
 4009f54:	d9000f17 	ldw	r4,60(sp)
 4009f58:	d8c01515 	stw	r3,84(sp)
 4009f5c:	d8801415 	stw	r2,80(sp)
 4009f60:	4005f000 	call	4005f00 <__fixdfsi>
 4009f64:	1009883a 	mov	r4,r2
 4009f68:	1021883a 	mov	r16,r2
 4009f6c:	4005f800 	call	4005f80 <__floatsidf>
 4009f70:	d9000f17 	ldw	r4,60(sp)
 4009f74:	d9401017 	ldw	r5,64(sp)
 4009f78:	100d883a 	mov	r6,r2
 4009f7c:	180f883a 	mov	r7,r3
 4009f80:	40056040 	call	4005604 <__subdf3>
 4009f84:	1829883a 	mov	r20,r3
 4009f88:	d8c00717 	ldw	r3,28(sp)
 4009f8c:	84000c04 	addi	r16,r16,48
 4009f90:	1023883a 	mov	r17,r2
 4009f94:	1c000005 	stb	r16,0(r3)
 4009f98:	db001617 	ldw	r12,88(sp)
 4009f9c:	00800044 	movi	r2,1
 4009fa0:	60802226 	beq	r12,r2,400a02c <_dtoa_r+0x1424>
 4009fa4:	d9c00717 	ldw	r7,28(sp)
 4009fa8:	8805883a 	mov	r2,r17
 4009fac:	b82b883a 	mov	r21,r23
 4009fb0:	3b19883a 	add	r12,r7,r12
 4009fb4:	6023883a 	mov	r17,r12
 4009fb8:	a007883a 	mov	r3,r20
 4009fbc:	dc800f15 	stw	r18,60(sp)
 4009fc0:	000d883a 	mov	r6,zero
 4009fc4:	01d00934 	movhi	r7,16420
 4009fc8:	1009883a 	mov	r4,r2
 4009fcc:	180b883a 	mov	r5,r3
 4009fd0:	4004d980 	call	4004d98 <__muldf3>
 4009fd4:	180b883a 	mov	r5,r3
 4009fd8:	1009883a 	mov	r4,r2
 4009fdc:	1829883a 	mov	r20,r3
 4009fe0:	1025883a 	mov	r18,r2
 4009fe4:	4005f000 	call	4005f00 <__fixdfsi>
 4009fe8:	1009883a 	mov	r4,r2
 4009fec:	1021883a 	mov	r16,r2
 4009ff0:	4005f800 	call	4005f80 <__floatsidf>
 4009ff4:	100d883a 	mov	r6,r2
 4009ff8:	180f883a 	mov	r7,r3
 4009ffc:	9009883a 	mov	r4,r18
 400a000:	a00b883a 	mov	r5,r20
 400a004:	84000c04 	addi	r16,r16,48
 400a008:	40056040 	call	4005604 <__subdf3>
 400a00c:	ad400044 	addi	r21,r21,1
 400a010:	ac3fffc5 	stb	r16,-1(r21)
 400a014:	ac7fea1e 	bne	r21,r17,4009fc0 <__alt_data_end+0xfc009fc0>
 400a018:	1023883a 	mov	r17,r2
 400a01c:	d8801217 	ldw	r2,72(sp)
 400a020:	dc800f17 	ldw	r18,60(sp)
 400a024:	1829883a 	mov	r20,r3
 400a028:	b8af883a 	add	r23,r23,r2
 400a02c:	d9001417 	ldw	r4,80(sp)
 400a030:	d9401517 	ldw	r5,84(sp)
 400a034:	000d883a 	mov	r6,zero
 400a038:	01cff834 	movhi	r7,16352
 400a03c:	400394c0 	call	400394c <__adddf3>
 400a040:	880d883a 	mov	r6,r17
 400a044:	a00f883a 	mov	r7,r20
 400a048:	1009883a 	mov	r4,r2
 400a04c:	180b883a 	mov	r5,r3
 400a050:	4004ca40 	call	4004ca4 <__ledf2>
 400a054:	10003e0e 	bge	r2,zero,400a150 <_dtoa_r+0x1548>
 400a058:	d9001317 	ldw	r4,76(sp)
 400a05c:	bd3fffc3 	ldbu	r20,-1(r23)
 400a060:	d9000515 	stw	r4,20(sp)
 400a064:	003d3b06 	br	4009554 <__alt_data_end+0xfc009554>
 400a068:	0027883a 	mov	r19,zero
 400a06c:	003f1b06 	br	4009cdc <__alt_data_end+0xfc009cdc>
 400a070:	d8800817 	ldw	r2,32(sp)
 400a074:	11e9c83a 	sub	r20,r2,r7
 400a078:	0005883a 	mov	r2,zero
 400a07c:	003d5406 	br	40095d0 <__alt_data_end+0xfc0095d0>
 400a080:	00800044 	movi	r2,1
 400a084:	003dc706 	br	40097a4 <__alt_data_end+0xfc0097a4>
 400a088:	d8c00217 	ldw	r3,8(sp)
 400a08c:	00800d84 	movi	r2,54
 400a090:	dd400a17 	ldw	r21,40(sp)
 400a094:	10c5c83a 	sub	r2,r2,r3
 400a098:	dd000817 	ldw	r20,32(sp)
 400a09c:	003d4c06 	br	40095d0 <__alt_data_end+0xfc0095d0>
 400a0a0:	dc800f15 	stw	r18,60(sp)
 400a0a4:	dcc01015 	stw	r19,64(sp)
 400a0a8:	04000084 	movi	r16,2
 400a0ac:	003bed06 	br	4009064 <__alt_data_end+0xfc009064>
 400a0b0:	d9000617 	ldw	r4,24(sp)
 400a0b4:	203f0d26 	beq	r4,zero,4009cec <__alt_data_end+0xfc009cec>
 400a0b8:	d9800c17 	ldw	r6,48(sp)
 400a0bc:	01bcab0e 	bge	zero,r6,400936c <__alt_data_end+0xfc00936c>
 400a0c0:	d9401017 	ldw	r5,64(sp)
 400a0c4:	d9000f17 	ldw	r4,60(sp)
 400a0c8:	000d883a 	mov	r6,zero
 400a0cc:	01d00934 	movhi	r7,16420
 400a0d0:	4004d980 	call	4004d98 <__muldf3>
 400a0d4:	81000044 	addi	r4,r16,1
 400a0d8:	d8800f15 	stw	r2,60(sp)
 400a0dc:	d8c01015 	stw	r3,64(sp)
 400a0e0:	4005f800 	call	4005f80 <__floatsidf>
 400a0e4:	d9800f17 	ldw	r6,60(sp)
 400a0e8:	d9c01017 	ldw	r7,64(sp)
 400a0ec:	1009883a 	mov	r4,r2
 400a0f0:	180b883a 	mov	r5,r3
 400a0f4:	4004d980 	call	4004d98 <__muldf3>
 400a0f8:	01d00734 	movhi	r7,16412
 400a0fc:	000d883a 	mov	r6,zero
 400a100:	1009883a 	mov	r4,r2
 400a104:	180b883a 	mov	r5,r3
 400a108:	400394c0 	call	400394c <__adddf3>
 400a10c:	d9c00517 	ldw	r7,20(sp)
 400a110:	047f3034 	movhi	r17,64704
 400a114:	1021883a 	mov	r16,r2
 400a118:	39ffffc4 	addi	r7,r7,-1
 400a11c:	d9c01315 	stw	r7,76(sp)
 400a120:	1c63883a 	add	r17,r3,r17
 400a124:	db000c17 	ldw	r12,48(sp)
 400a128:	003bea06 	br	40090d4 <__alt_data_end+0xfc0090d4>
 400a12c:	dc000915 	stw	r16,36(sp)
 400a130:	003e0e06 	br	400996c <__alt_data_end+0xfc00996c>
 400a134:	01000e44 	movi	r4,57
 400a138:	8825883a 	mov	r18,r17
 400a13c:	9dc00044 	addi	r23,r19,1
 400a140:	99000005 	stb	r4,0(r19)
 400a144:	a023883a 	mov	r17,r20
 400a148:	dc000915 	stw	r16,36(sp)
 400a14c:	003da406 	br	40097e0 <__alt_data_end+0xfc0097e0>
 400a150:	d9801417 	ldw	r6,80(sp)
 400a154:	d9c01517 	ldw	r7,84(sp)
 400a158:	0009883a 	mov	r4,zero
 400a15c:	014ff834 	movhi	r5,16352
 400a160:	40056040 	call	4005604 <__subdf3>
 400a164:	880d883a 	mov	r6,r17
 400a168:	a00f883a 	mov	r7,r20
 400a16c:	1009883a 	mov	r4,r2
 400a170:	180b883a 	mov	r5,r3
 400a174:	4004bc80 	call	4004bc8 <__gedf2>
 400a178:	00bc7c0e 	bge	zero,r2,400936c <__alt_data_end+0xfc00936c>
 400a17c:	01000c04 	movi	r4,48
 400a180:	00000106 	br	400a188 <_dtoa_r+0x1580>
 400a184:	102f883a 	mov	r23,r2
 400a188:	b8bfffc4 	addi	r2,r23,-1
 400a18c:	10c00007 	ldb	r3,0(r2)
 400a190:	193ffc26 	beq	r3,r4,400a184 <__alt_data_end+0xfc00a184>
 400a194:	d9801317 	ldw	r6,76(sp)
 400a198:	d9800515 	stw	r6,20(sp)
 400a19c:	003c4406 	br	40092b0 <__alt_data_end+0xfc0092b0>
 400a1a0:	d9801317 	ldw	r6,76(sp)
 400a1a4:	d9800515 	stw	r6,20(sp)
 400a1a8:	003cea06 	br	4009554 <__alt_data_end+0xfc009554>
 400a1ac:	dd800f17 	ldw	r22,60(sp)
 400a1b0:	dcc01017 	ldw	r19,64(sp)
 400a1b4:	dc801217 	ldw	r18,72(sp)
 400a1b8:	003c6c06 	br	400936c <__alt_data_end+0xfc00936c>
 400a1bc:	903e031e 	bne	r18,zero,40099cc <__alt_data_end+0xfc0099cc>
 400a1c0:	003ebb06 	br	4009cb0 <__alt_data_end+0xfc009cb0>
 400a1c4:	103e6c1e 	bne	r2,zero,4009b78 <__alt_data_end+0xfc009b78>
 400a1c8:	4080004c 	andi	r2,r8,1
 400a1cc:	103e6a26 	beq	r2,zero,4009b78 <__alt_data_end+0xfc009b78>
 400a1d0:	003e6606 	br	4009b6c <__alt_data_end+0xfc009b6c>
 400a1d4:	d8c00317 	ldw	r3,12(sp)
 400a1d8:	00800084 	movi	r2,2
 400a1dc:	10c02916 	blt	r2,r3,400a284 <_dtoa_r+0x167c>
 400a1e0:	d9000c17 	ldw	r4,48(sp)
 400a1e4:	003e8806 	br	4009c08 <__alt_data_end+0xfc009c08>
 400a1e8:	04000084 	movi	r16,2
 400a1ec:	003b9d06 	br	4009064 <__alt_data_end+0xfc009064>
 400a1f0:	d9001317 	ldw	r4,76(sp)
 400a1f4:	d9000515 	stw	r4,20(sp)
 400a1f8:	003cd606 	br	4009554 <__alt_data_end+0xfc009554>
 400a1fc:	d8801317 	ldw	r2,76(sp)
 400a200:	d8800515 	stw	r2,20(sp)
 400a204:	003c2a06 	br	40092b0 <__alt_data_end+0xfc0092b0>
 400a208:	d9800317 	ldw	r6,12(sp)
 400a20c:	00800084 	movi	r2,2
 400a210:	11801516 	blt	r2,r6,400a268 <_dtoa_r+0x1660>
 400a214:	d9c00c17 	ldw	r7,48(sp)
 400a218:	d9c00615 	stw	r7,24(sp)
 400a21c:	003df706 	br	40099fc <__alt_data_end+0xfc0099fc>
 400a220:	193d3926 	beq	r3,r4,4009708 <__alt_data_end+0xfc009708>
 400a224:	00c00f04 	movi	r3,60
 400a228:	1885c83a 	sub	r2,r3,r2
 400a22c:	003ddf06 	br	40099ac <__alt_data_end+0xfc0099ac>
 400a230:	e009883a 	mov	r4,fp
 400a234:	e0001115 	stw	zero,68(fp)
 400a238:	000b883a 	mov	r5,zero
 400a23c:	400ac5c0 	call	400ac5c <_Balloc>
 400a240:	d8800715 	stw	r2,28(sp)
 400a244:	d8c00717 	ldw	r3,28(sp)
 400a248:	00bfffc4 	movi	r2,-1
 400a24c:	01000044 	movi	r4,1
 400a250:	d8800c15 	stw	r2,48(sp)
 400a254:	e0c01015 	stw	r3,64(fp)
 400a258:	d9000b15 	stw	r4,44(sp)
 400a25c:	d8800615 	stw	r2,24(sp)
 400a260:	d8002215 	stw	zero,136(sp)
 400a264:	003c4106 	br	400936c <__alt_data_end+0xfc00936c>
 400a268:	d8c00c17 	ldw	r3,48(sp)
 400a26c:	d8c00615 	stw	r3,24(sp)
 400a270:	003e7006 	br	4009c34 <__alt_data_end+0xfc009c34>
 400a274:	04400044 	movi	r17,1
 400a278:	003b2006 	br	4008efc <__alt_data_end+0xfc008efc>
 400a27c:	000b883a 	mov	r5,zero
 400a280:	003b3d06 	br	4008f78 <__alt_data_end+0xfc008f78>
 400a284:	d8800c17 	ldw	r2,48(sp)
 400a288:	d8800615 	stw	r2,24(sp)
 400a28c:	003e6906 	br	4009c34 <__alt_data_end+0xfc009c34>

0400a290 <_setlocale_r>:
 400a290:	30001b26 	beq	r6,zero,400a300 <_setlocale_r+0x70>
 400a294:	01410074 	movhi	r5,1025
 400a298:	defffe04 	addi	sp,sp,-8
 400a29c:	294b9704 	addi	r5,r5,11868
 400a2a0:	3009883a 	mov	r4,r6
 400a2a4:	dc000015 	stw	r16,0(sp)
 400a2a8:	dfc00115 	stw	ra,4(sp)
 400a2ac:	3021883a 	mov	r16,r6
 400a2b0:	400bddc0 	call	400bddc <strcmp>
 400a2b4:	1000061e 	bne	r2,zero,400a2d0 <_setlocale_r+0x40>
 400a2b8:	00810074 	movhi	r2,1025
 400a2bc:	108b9604 	addi	r2,r2,11864
 400a2c0:	dfc00117 	ldw	ra,4(sp)
 400a2c4:	dc000017 	ldw	r16,0(sp)
 400a2c8:	dec00204 	addi	sp,sp,8
 400a2cc:	f800283a 	ret
 400a2d0:	01410074 	movhi	r5,1025
 400a2d4:	294b9604 	addi	r5,r5,11864
 400a2d8:	8009883a 	mov	r4,r16
 400a2dc:	400bddc0 	call	400bddc <strcmp>
 400a2e0:	103ff526 	beq	r2,zero,400a2b8 <__alt_data_end+0xfc00a2b8>
 400a2e4:	01410074 	movhi	r5,1025
 400a2e8:	294b8104 	addi	r5,r5,11780
 400a2ec:	8009883a 	mov	r4,r16
 400a2f0:	400bddc0 	call	400bddc <strcmp>
 400a2f4:	103ff026 	beq	r2,zero,400a2b8 <__alt_data_end+0xfc00a2b8>
 400a2f8:	0005883a 	mov	r2,zero
 400a2fc:	003ff006 	br	400a2c0 <__alt_data_end+0xfc00a2c0>
 400a300:	00810074 	movhi	r2,1025
 400a304:	108b9604 	addi	r2,r2,11864
 400a308:	f800283a 	ret

0400a30c <__locale_charset>:
 400a30c:	00810074 	movhi	r2,1025
 400a310:	108d4904 	addi	r2,r2,13604
 400a314:	f800283a 	ret

0400a318 <__locale_mb_cur_max>:
 400a318:	00810074 	movhi	r2,1025
 400a31c:	1093a804 	addi	r2,r2,20128
 400a320:	10800017 	ldw	r2,0(r2)
 400a324:	f800283a 	ret

0400a328 <__locale_msgcharset>:
 400a328:	00810074 	movhi	r2,1025
 400a32c:	108d4104 	addi	r2,r2,13572
 400a330:	f800283a 	ret

0400a334 <__locale_cjk_lang>:
 400a334:	0005883a 	mov	r2,zero
 400a338:	f800283a 	ret

0400a33c <_localeconv_r>:
 400a33c:	00810074 	movhi	r2,1025
 400a340:	108d5104 	addi	r2,r2,13636
 400a344:	f800283a 	ret

0400a348 <setlocale>:
 400a348:	00810074 	movhi	r2,1025
 400a34c:	1093a704 	addi	r2,r2,20124
 400a350:	280d883a 	mov	r6,r5
 400a354:	200b883a 	mov	r5,r4
 400a358:	11000017 	ldw	r4,0(r2)
 400a35c:	400a2901 	jmpi	400a290 <_setlocale_r>

0400a360 <localeconv>:
 400a360:	00810074 	movhi	r2,1025
 400a364:	108d5104 	addi	r2,r2,13636
 400a368:	f800283a 	ret

0400a36c <_malloc_r>:
 400a36c:	defff504 	addi	sp,sp,-44
 400a370:	dc800315 	stw	r18,12(sp)
 400a374:	dfc00a15 	stw	ra,40(sp)
 400a378:	df000915 	stw	fp,36(sp)
 400a37c:	ddc00815 	stw	r23,32(sp)
 400a380:	dd800715 	stw	r22,28(sp)
 400a384:	dd400615 	stw	r21,24(sp)
 400a388:	dd000515 	stw	r20,20(sp)
 400a38c:	dcc00415 	stw	r19,16(sp)
 400a390:	dc400215 	stw	r17,8(sp)
 400a394:	dc000115 	stw	r16,4(sp)
 400a398:	288002c4 	addi	r2,r5,11
 400a39c:	00c00584 	movi	r3,22
 400a3a0:	2025883a 	mov	r18,r4
 400a3a4:	18807f2e 	bgeu	r3,r2,400a5a4 <_malloc_r+0x238>
 400a3a8:	047ffe04 	movi	r17,-8
 400a3ac:	1462703a 	and	r17,r2,r17
 400a3b0:	8800a316 	blt	r17,zero,400a640 <_malloc_r+0x2d4>
 400a3b4:	8940a236 	bltu	r17,r5,400a640 <_malloc_r+0x2d4>
 400a3b8:	400effc0 	call	400effc <__malloc_lock>
 400a3bc:	00807dc4 	movi	r2,503
 400a3c0:	1441e92e 	bgeu	r2,r17,400ab68 <_malloc_r+0x7fc>
 400a3c4:	8804d27a 	srli	r2,r17,9
 400a3c8:	1000a126 	beq	r2,zero,400a650 <_malloc_r+0x2e4>
 400a3cc:	00c00104 	movi	r3,4
 400a3d0:	18811e36 	bltu	r3,r2,400a84c <_malloc_r+0x4e0>
 400a3d4:	8804d1ba 	srli	r2,r17,6
 400a3d8:	12000e44 	addi	r8,r2,57
 400a3dc:	11c00e04 	addi	r7,r2,56
 400a3e0:	4209883a 	add	r4,r8,r8
 400a3e4:	04c10074 	movhi	r19,1025
 400a3e8:	2109883a 	add	r4,r4,r4
 400a3ec:	9ccd5f04 	addi	r19,r19,13692
 400a3f0:	2109883a 	add	r4,r4,r4
 400a3f4:	9909883a 	add	r4,r19,r4
 400a3f8:	24000117 	ldw	r16,4(r4)
 400a3fc:	213ffe04 	addi	r4,r4,-8
 400a400:	24009726 	beq	r4,r16,400a660 <_malloc_r+0x2f4>
 400a404:	80800117 	ldw	r2,4(r16)
 400a408:	01bfff04 	movi	r6,-4
 400a40c:	014003c4 	movi	r5,15
 400a410:	1184703a 	and	r2,r2,r6
 400a414:	1447c83a 	sub	r3,r2,r17
 400a418:	28c00716 	blt	r5,r3,400a438 <_malloc_r+0xcc>
 400a41c:	1800920e 	bge	r3,zero,400a668 <_malloc_r+0x2fc>
 400a420:	84000317 	ldw	r16,12(r16)
 400a424:	24008e26 	beq	r4,r16,400a660 <_malloc_r+0x2f4>
 400a428:	80800117 	ldw	r2,4(r16)
 400a42c:	1184703a 	and	r2,r2,r6
 400a430:	1447c83a 	sub	r3,r2,r17
 400a434:	28fff90e 	bge	r5,r3,400a41c <__alt_data_end+0xfc00a41c>
 400a438:	3809883a 	mov	r4,r7
 400a43c:	01810074 	movhi	r6,1025
 400a440:	9c000417 	ldw	r16,16(r19)
 400a444:	318d5f04 	addi	r6,r6,13692
 400a448:	32000204 	addi	r8,r6,8
 400a44c:	82013426 	beq	r16,r8,400a920 <_malloc_r+0x5b4>
 400a450:	80c00117 	ldw	r3,4(r16)
 400a454:	00bfff04 	movi	r2,-4
 400a458:	188e703a 	and	r7,r3,r2
 400a45c:	3c45c83a 	sub	r2,r7,r17
 400a460:	00c003c4 	movi	r3,15
 400a464:	18811f16 	blt	r3,r2,400a8e4 <_malloc_r+0x578>
 400a468:	32000515 	stw	r8,20(r6)
 400a46c:	32000415 	stw	r8,16(r6)
 400a470:	10007f0e 	bge	r2,zero,400a670 <_malloc_r+0x304>
 400a474:	00807fc4 	movi	r2,511
 400a478:	11c0fd36 	bltu	r2,r7,400a870 <_malloc_r+0x504>
 400a47c:	3806d0fa 	srli	r3,r7,3
 400a480:	01c00044 	movi	r7,1
 400a484:	30800117 	ldw	r2,4(r6)
 400a488:	19400044 	addi	r5,r3,1
 400a48c:	294b883a 	add	r5,r5,r5
 400a490:	1807d0ba 	srai	r3,r3,2
 400a494:	294b883a 	add	r5,r5,r5
 400a498:	294b883a 	add	r5,r5,r5
 400a49c:	298b883a 	add	r5,r5,r6
 400a4a0:	38c6983a 	sll	r3,r7,r3
 400a4a4:	29c00017 	ldw	r7,0(r5)
 400a4a8:	2a7ffe04 	addi	r9,r5,-8
 400a4ac:	1886b03a 	or	r3,r3,r2
 400a4b0:	82400315 	stw	r9,12(r16)
 400a4b4:	81c00215 	stw	r7,8(r16)
 400a4b8:	30c00115 	stw	r3,4(r6)
 400a4bc:	2c000015 	stw	r16,0(r5)
 400a4c0:	3c000315 	stw	r16,12(r7)
 400a4c4:	2005d0ba 	srai	r2,r4,2
 400a4c8:	01400044 	movi	r5,1
 400a4cc:	288a983a 	sll	r5,r5,r2
 400a4d0:	19406f36 	bltu	r3,r5,400a690 <_malloc_r+0x324>
 400a4d4:	28c4703a 	and	r2,r5,r3
 400a4d8:	10000a1e 	bne	r2,zero,400a504 <_malloc_r+0x198>
 400a4dc:	00bfff04 	movi	r2,-4
 400a4e0:	294b883a 	add	r5,r5,r5
 400a4e4:	2088703a 	and	r4,r4,r2
 400a4e8:	28c4703a 	and	r2,r5,r3
 400a4ec:	21000104 	addi	r4,r4,4
 400a4f0:	1000041e 	bne	r2,zero,400a504 <_malloc_r+0x198>
 400a4f4:	294b883a 	add	r5,r5,r5
 400a4f8:	28c4703a 	and	r2,r5,r3
 400a4fc:	21000104 	addi	r4,r4,4
 400a500:	103ffc26 	beq	r2,zero,400a4f4 <__alt_data_end+0xfc00a4f4>
 400a504:	02bfff04 	movi	r10,-4
 400a508:	024003c4 	movi	r9,15
 400a50c:	21800044 	addi	r6,r4,1
 400a510:	318d883a 	add	r6,r6,r6
 400a514:	318d883a 	add	r6,r6,r6
 400a518:	318d883a 	add	r6,r6,r6
 400a51c:	998d883a 	add	r6,r19,r6
 400a520:	333ffe04 	addi	r12,r6,-8
 400a524:	2017883a 	mov	r11,r4
 400a528:	31800104 	addi	r6,r6,4
 400a52c:	34000017 	ldw	r16,0(r6)
 400a530:	31fffd04 	addi	r7,r6,-12
 400a534:	81c0041e 	bne	r16,r7,400a548 <_malloc_r+0x1dc>
 400a538:	0000fb06 	br	400a928 <_malloc_r+0x5bc>
 400a53c:	1801030e 	bge	r3,zero,400a94c <_malloc_r+0x5e0>
 400a540:	84000317 	ldw	r16,12(r16)
 400a544:	81c0f826 	beq	r16,r7,400a928 <_malloc_r+0x5bc>
 400a548:	80800117 	ldw	r2,4(r16)
 400a54c:	1284703a 	and	r2,r2,r10
 400a550:	1447c83a 	sub	r3,r2,r17
 400a554:	48fff90e 	bge	r9,r3,400a53c <__alt_data_end+0xfc00a53c>
 400a558:	80800317 	ldw	r2,12(r16)
 400a55c:	81000217 	ldw	r4,8(r16)
 400a560:	89400054 	ori	r5,r17,1
 400a564:	81400115 	stw	r5,4(r16)
 400a568:	20800315 	stw	r2,12(r4)
 400a56c:	11000215 	stw	r4,8(r2)
 400a570:	8463883a 	add	r17,r16,r17
 400a574:	9c400515 	stw	r17,20(r19)
 400a578:	9c400415 	stw	r17,16(r19)
 400a57c:	18800054 	ori	r2,r3,1
 400a580:	88800115 	stw	r2,4(r17)
 400a584:	8a000315 	stw	r8,12(r17)
 400a588:	8a000215 	stw	r8,8(r17)
 400a58c:	88e3883a 	add	r17,r17,r3
 400a590:	88c00015 	stw	r3,0(r17)
 400a594:	9009883a 	mov	r4,r18
 400a598:	400f0200 	call	400f020 <__malloc_unlock>
 400a59c:	80800204 	addi	r2,r16,8
 400a5a0:	00001b06 	br	400a610 <_malloc_r+0x2a4>
 400a5a4:	04400404 	movi	r17,16
 400a5a8:	89402536 	bltu	r17,r5,400a640 <_malloc_r+0x2d4>
 400a5ac:	400effc0 	call	400effc <__malloc_lock>
 400a5b0:	00800184 	movi	r2,6
 400a5b4:	01000084 	movi	r4,2
 400a5b8:	04c10074 	movhi	r19,1025
 400a5bc:	1085883a 	add	r2,r2,r2
 400a5c0:	9ccd5f04 	addi	r19,r19,13692
 400a5c4:	1085883a 	add	r2,r2,r2
 400a5c8:	9885883a 	add	r2,r19,r2
 400a5cc:	14000117 	ldw	r16,4(r2)
 400a5d0:	10fffe04 	addi	r3,r2,-8
 400a5d4:	80c0d926 	beq	r16,r3,400a93c <_malloc_r+0x5d0>
 400a5d8:	80c00117 	ldw	r3,4(r16)
 400a5dc:	81000317 	ldw	r4,12(r16)
 400a5e0:	00bfff04 	movi	r2,-4
 400a5e4:	1884703a 	and	r2,r3,r2
 400a5e8:	81400217 	ldw	r5,8(r16)
 400a5ec:	8085883a 	add	r2,r16,r2
 400a5f0:	10c00117 	ldw	r3,4(r2)
 400a5f4:	29000315 	stw	r4,12(r5)
 400a5f8:	21400215 	stw	r5,8(r4)
 400a5fc:	18c00054 	ori	r3,r3,1
 400a600:	10c00115 	stw	r3,4(r2)
 400a604:	9009883a 	mov	r4,r18
 400a608:	400f0200 	call	400f020 <__malloc_unlock>
 400a60c:	80800204 	addi	r2,r16,8
 400a610:	dfc00a17 	ldw	ra,40(sp)
 400a614:	df000917 	ldw	fp,36(sp)
 400a618:	ddc00817 	ldw	r23,32(sp)
 400a61c:	dd800717 	ldw	r22,28(sp)
 400a620:	dd400617 	ldw	r21,24(sp)
 400a624:	dd000517 	ldw	r20,20(sp)
 400a628:	dcc00417 	ldw	r19,16(sp)
 400a62c:	dc800317 	ldw	r18,12(sp)
 400a630:	dc400217 	ldw	r17,8(sp)
 400a634:	dc000117 	ldw	r16,4(sp)
 400a638:	dec00b04 	addi	sp,sp,44
 400a63c:	f800283a 	ret
 400a640:	00800304 	movi	r2,12
 400a644:	90800015 	stw	r2,0(r18)
 400a648:	0005883a 	mov	r2,zero
 400a64c:	003ff006 	br	400a610 <__alt_data_end+0xfc00a610>
 400a650:	01002004 	movi	r4,128
 400a654:	02001004 	movi	r8,64
 400a658:	01c00fc4 	movi	r7,63
 400a65c:	003f6106 	br	400a3e4 <__alt_data_end+0xfc00a3e4>
 400a660:	4009883a 	mov	r4,r8
 400a664:	003f7506 	br	400a43c <__alt_data_end+0xfc00a43c>
 400a668:	81000317 	ldw	r4,12(r16)
 400a66c:	003fde06 	br	400a5e8 <__alt_data_end+0xfc00a5e8>
 400a670:	81c5883a 	add	r2,r16,r7
 400a674:	11400117 	ldw	r5,4(r2)
 400a678:	9009883a 	mov	r4,r18
 400a67c:	29400054 	ori	r5,r5,1
 400a680:	11400115 	stw	r5,4(r2)
 400a684:	400f0200 	call	400f020 <__malloc_unlock>
 400a688:	80800204 	addi	r2,r16,8
 400a68c:	003fe006 	br	400a610 <__alt_data_end+0xfc00a610>
 400a690:	9c000217 	ldw	r16,8(r19)
 400a694:	00bfff04 	movi	r2,-4
 400a698:	85800117 	ldw	r22,4(r16)
 400a69c:	b0ac703a 	and	r22,r22,r2
 400a6a0:	b4400336 	bltu	r22,r17,400a6b0 <_malloc_r+0x344>
 400a6a4:	b445c83a 	sub	r2,r22,r17
 400a6a8:	00c003c4 	movi	r3,15
 400a6ac:	18805d16 	blt	r3,r2,400a824 <_malloc_r+0x4b8>
 400a6b0:	05c10074 	movhi	r23,1025
 400a6b4:	00810074 	movhi	r2,1025
 400a6b8:	1093cb04 	addi	r2,r2,20268
 400a6bc:	bdd3a904 	addi	r23,r23,20132
 400a6c0:	15400017 	ldw	r21,0(r2)
 400a6c4:	b8c00017 	ldw	r3,0(r23)
 400a6c8:	00bfffc4 	movi	r2,-1
 400a6cc:	858d883a 	add	r6,r16,r22
 400a6d0:	8d6b883a 	add	r21,r17,r21
 400a6d4:	1880ea26 	beq	r3,r2,400aa80 <_malloc_r+0x714>
 400a6d8:	ad4403c4 	addi	r21,r21,4111
 400a6dc:	00bc0004 	movi	r2,-4096
 400a6e0:	a8aa703a 	and	r21,r21,r2
 400a6e4:	a80b883a 	mov	r5,r21
 400a6e8:	9009883a 	mov	r4,r18
 400a6ec:	d9800015 	stw	r6,0(sp)
 400a6f0:	400bd880 	call	400bd88 <_sbrk_r>
 400a6f4:	1029883a 	mov	r20,r2
 400a6f8:	00bfffc4 	movi	r2,-1
 400a6fc:	d9800017 	ldw	r6,0(sp)
 400a700:	a080e826 	beq	r20,r2,400aaa4 <_malloc_r+0x738>
 400a704:	a180a636 	bltu	r20,r6,400a9a0 <_malloc_r+0x634>
 400a708:	07010074 	movhi	fp,1025
 400a70c:	e713d904 	addi	fp,fp,20324
 400a710:	e0800017 	ldw	r2,0(fp)
 400a714:	a887883a 	add	r3,r21,r2
 400a718:	e0c00015 	stw	r3,0(fp)
 400a71c:	3500e626 	beq	r6,r20,400aab8 <_malloc_r+0x74c>
 400a720:	b9000017 	ldw	r4,0(r23)
 400a724:	00bfffc4 	movi	r2,-1
 400a728:	2080ee26 	beq	r4,r2,400aae4 <_malloc_r+0x778>
 400a72c:	a185c83a 	sub	r2,r20,r6
 400a730:	10c5883a 	add	r2,r2,r3
 400a734:	e0800015 	stw	r2,0(fp)
 400a738:	a0c001cc 	andi	r3,r20,7
 400a73c:	1800bc26 	beq	r3,zero,400aa30 <_malloc_r+0x6c4>
 400a740:	a0e9c83a 	sub	r20,r20,r3
 400a744:	00840204 	movi	r2,4104
 400a748:	a5000204 	addi	r20,r20,8
 400a74c:	10c7c83a 	sub	r3,r2,r3
 400a750:	a545883a 	add	r2,r20,r21
 400a754:	1083ffcc 	andi	r2,r2,4095
 400a758:	18abc83a 	sub	r21,r3,r2
 400a75c:	a80b883a 	mov	r5,r21
 400a760:	9009883a 	mov	r4,r18
 400a764:	400bd880 	call	400bd88 <_sbrk_r>
 400a768:	00ffffc4 	movi	r3,-1
 400a76c:	10c0e126 	beq	r2,r3,400aaf4 <_malloc_r+0x788>
 400a770:	1505c83a 	sub	r2,r2,r20
 400a774:	1545883a 	add	r2,r2,r21
 400a778:	10800054 	ori	r2,r2,1
 400a77c:	e0c00017 	ldw	r3,0(fp)
 400a780:	9d000215 	stw	r20,8(r19)
 400a784:	a0800115 	stw	r2,4(r20)
 400a788:	a8c7883a 	add	r3,r21,r3
 400a78c:	e0c00015 	stw	r3,0(fp)
 400a790:	84c00e26 	beq	r16,r19,400a7cc <_malloc_r+0x460>
 400a794:	018003c4 	movi	r6,15
 400a798:	3580a72e 	bgeu	r6,r22,400aa38 <_malloc_r+0x6cc>
 400a79c:	81400117 	ldw	r5,4(r16)
 400a7a0:	013ffe04 	movi	r4,-8
 400a7a4:	b0bffd04 	addi	r2,r22,-12
 400a7a8:	1104703a 	and	r2,r2,r4
 400a7ac:	2900004c 	andi	r4,r5,1
 400a7b0:	2088b03a 	or	r4,r4,r2
 400a7b4:	81000115 	stw	r4,4(r16)
 400a7b8:	01400144 	movi	r5,5
 400a7bc:	8089883a 	add	r4,r16,r2
 400a7c0:	21400115 	stw	r5,4(r4)
 400a7c4:	21400215 	stw	r5,8(r4)
 400a7c8:	3080cd36 	bltu	r6,r2,400ab00 <_malloc_r+0x794>
 400a7cc:	00810074 	movhi	r2,1025
 400a7d0:	1093ca04 	addi	r2,r2,20264
 400a7d4:	11000017 	ldw	r4,0(r2)
 400a7d8:	20c0012e 	bgeu	r4,r3,400a7e0 <_malloc_r+0x474>
 400a7dc:	10c00015 	stw	r3,0(r2)
 400a7e0:	00810074 	movhi	r2,1025
 400a7e4:	1093c904 	addi	r2,r2,20260
 400a7e8:	11000017 	ldw	r4,0(r2)
 400a7ec:	9c000217 	ldw	r16,8(r19)
 400a7f0:	20c0012e 	bgeu	r4,r3,400a7f8 <_malloc_r+0x48c>
 400a7f4:	10c00015 	stw	r3,0(r2)
 400a7f8:	80c00117 	ldw	r3,4(r16)
 400a7fc:	00bfff04 	movi	r2,-4
 400a800:	1886703a 	and	r3,r3,r2
 400a804:	1c45c83a 	sub	r2,r3,r17
 400a808:	1c400236 	bltu	r3,r17,400a814 <_malloc_r+0x4a8>
 400a80c:	00c003c4 	movi	r3,15
 400a810:	18800416 	blt	r3,r2,400a824 <_malloc_r+0x4b8>
 400a814:	9009883a 	mov	r4,r18
 400a818:	400f0200 	call	400f020 <__malloc_unlock>
 400a81c:	0005883a 	mov	r2,zero
 400a820:	003f7b06 	br	400a610 <__alt_data_end+0xfc00a610>
 400a824:	88c00054 	ori	r3,r17,1
 400a828:	80c00115 	stw	r3,4(r16)
 400a82c:	8463883a 	add	r17,r16,r17
 400a830:	10800054 	ori	r2,r2,1
 400a834:	9c400215 	stw	r17,8(r19)
 400a838:	88800115 	stw	r2,4(r17)
 400a83c:	9009883a 	mov	r4,r18
 400a840:	400f0200 	call	400f020 <__malloc_unlock>
 400a844:	80800204 	addi	r2,r16,8
 400a848:	003f7106 	br	400a610 <__alt_data_end+0xfc00a610>
 400a84c:	00c00504 	movi	r3,20
 400a850:	18804a2e 	bgeu	r3,r2,400a97c <_malloc_r+0x610>
 400a854:	00c01504 	movi	r3,84
 400a858:	18806e36 	bltu	r3,r2,400aa14 <_malloc_r+0x6a8>
 400a85c:	8804d33a 	srli	r2,r17,12
 400a860:	12001bc4 	addi	r8,r2,111
 400a864:	11c01b84 	addi	r7,r2,110
 400a868:	4209883a 	add	r4,r8,r8
 400a86c:	003edd06 	br	400a3e4 <__alt_data_end+0xfc00a3e4>
 400a870:	3804d27a 	srli	r2,r7,9
 400a874:	00c00104 	movi	r3,4
 400a878:	1880442e 	bgeu	r3,r2,400a98c <_malloc_r+0x620>
 400a87c:	00c00504 	movi	r3,20
 400a880:	18808136 	bltu	r3,r2,400aa88 <_malloc_r+0x71c>
 400a884:	11401704 	addi	r5,r2,92
 400a888:	10c016c4 	addi	r3,r2,91
 400a88c:	294b883a 	add	r5,r5,r5
 400a890:	294b883a 	add	r5,r5,r5
 400a894:	294b883a 	add	r5,r5,r5
 400a898:	994b883a 	add	r5,r19,r5
 400a89c:	28800017 	ldw	r2,0(r5)
 400a8a0:	01810074 	movhi	r6,1025
 400a8a4:	297ffe04 	addi	r5,r5,-8
 400a8a8:	318d5f04 	addi	r6,r6,13692
 400a8ac:	28806526 	beq	r5,r2,400aa44 <_malloc_r+0x6d8>
 400a8b0:	01bfff04 	movi	r6,-4
 400a8b4:	10c00117 	ldw	r3,4(r2)
 400a8b8:	1986703a 	and	r3,r3,r6
 400a8bc:	38c0022e 	bgeu	r7,r3,400a8c8 <_malloc_r+0x55c>
 400a8c0:	10800217 	ldw	r2,8(r2)
 400a8c4:	28bffb1e 	bne	r5,r2,400a8b4 <__alt_data_end+0xfc00a8b4>
 400a8c8:	11400317 	ldw	r5,12(r2)
 400a8cc:	98c00117 	ldw	r3,4(r19)
 400a8d0:	81400315 	stw	r5,12(r16)
 400a8d4:	80800215 	stw	r2,8(r16)
 400a8d8:	2c000215 	stw	r16,8(r5)
 400a8dc:	14000315 	stw	r16,12(r2)
 400a8e0:	003ef806 	br	400a4c4 <__alt_data_end+0xfc00a4c4>
 400a8e4:	88c00054 	ori	r3,r17,1
 400a8e8:	80c00115 	stw	r3,4(r16)
 400a8ec:	8463883a 	add	r17,r16,r17
 400a8f0:	34400515 	stw	r17,20(r6)
 400a8f4:	34400415 	stw	r17,16(r6)
 400a8f8:	10c00054 	ori	r3,r2,1
 400a8fc:	8a000315 	stw	r8,12(r17)
 400a900:	8a000215 	stw	r8,8(r17)
 400a904:	88c00115 	stw	r3,4(r17)
 400a908:	88a3883a 	add	r17,r17,r2
 400a90c:	88800015 	stw	r2,0(r17)
 400a910:	9009883a 	mov	r4,r18
 400a914:	400f0200 	call	400f020 <__malloc_unlock>
 400a918:	80800204 	addi	r2,r16,8
 400a91c:	003f3c06 	br	400a610 <__alt_data_end+0xfc00a610>
 400a920:	30c00117 	ldw	r3,4(r6)
 400a924:	003ee706 	br	400a4c4 <__alt_data_end+0xfc00a4c4>
 400a928:	5ac00044 	addi	r11,r11,1
 400a92c:	588000cc 	andi	r2,r11,3
 400a930:	31800204 	addi	r6,r6,8
 400a934:	103efd1e 	bne	r2,zero,400a52c <__alt_data_end+0xfc00a52c>
 400a938:	00002406 	br	400a9cc <_malloc_r+0x660>
 400a93c:	14000317 	ldw	r16,12(r2)
 400a940:	143f251e 	bne	r2,r16,400a5d8 <__alt_data_end+0xfc00a5d8>
 400a944:	21000084 	addi	r4,r4,2
 400a948:	003ebc06 	br	400a43c <__alt_data_end+0xfc00a43c>
 400a94c:	8085883a 	add	r2,r16,r2
 400a950:	10c00117 	ldw	r3,4(r2)
 400a954:	81000317 	ldw	r4,12(r16)
 400a958:	81400217 	ldw	r5,8(r16)
 400a95c:	18c00054 	ori	r3,r3,1
 400a960:	10c00115 	stw	r3,4(r2)
 400a964:	29000315 	stw	r4,12(r5)
 400a968:	21400215 	stw	r5,8(r4)
 400a96c:	9009883a 	mov	r4,r18
 400a970:	400f0200 	call	400f020 <__malloc_unlock>
 400a974:	80800204 	addi	r2,r16,8
 400a978:	003f2506 	br	400a610 <__alt_data_end+0xfc00a610>
 400a97c:	12001704 	addi	r8,r2,92
 400a980:	11c016c4 	addi	r7,r2,91
 400a984:	4209883a 	add	r4,r8,r8
 400a988:	003e9606 	br	400a3e4 <__alt_data_end+0xfc00a3e4>
 400a98c:	3804d1ba 	srli	r2,r7,6
 400a990:	11400e44 	addi	r5,r2,57
 400a994:	10c00e04 	addi	r3,r2,56
 400a998:	294b883a 	add	r5,r5,r5
 400a99c:	003fbc06 	br	400a890 <__alt_data_end+0xfc00a890>
 400a9a0:	84ff5926 	beq	r16,r19,400a708 <__alt_data_end+0xfc00a708>
 400a9a4:	00810074 	movhi	r2,1025
 400a9a8:	108d5f04 	addi	r2,r2,13692
 400a9ac:	14000217 	ldw	r16,8(r2)
 400a9b0:	00bfff04 	movi	r2,-4
 400a9b4:	80c00117 	ldw	r3,4(r16)
 400a9b8:	1886703a 	and	r3,r3,r2
 400a9bc:	003f9106 	br	400a804 <__alt_data_end+0xfc00a804>
 400a9c0:	60800217 	ldw	r2,8(r12)
 400a9c4:	213fffc4 	addi	r4,r4,-1
 400a9c8:	1300651e 	bne	r2,r12,400ab60 <_malloc_r+0x7f4>
 400a9cc:	208000cc 	andi	r2,r4,3
 400a9d0:	633ffe04 	addi	r12,r12,-8
 400a9d4:	103ffa1e 	bne	r2,zero,400a9c0 <__alt_data_end+0xfc00a9c0>
 400a9d8:	98800117 	ldw	r2,4(r19)
 400a9dc:	0146303a 	nor	r3,zero,r5
 400a9e0:	1884703a 	and	r2,r3,r2
 400a9e4:	98800115 	stw	r2,4(r19)
 400a9e8:	294b883a 	add	r5,r5,r5
 400a9ec:	117f2836 	bltu	r2,r5,400a690 <__alt_data_end+0xfc00a690>
 400a9f0:	283f2726 	beq	r5,zero,400a690 <__alt_data_end+0xfc00a690>
 400a9f4:	2886703a 	and	r3,r5,r2
 400a9f8:	5809883a 	mov	r4,r11
 400a9fc:	183ec31e 	bne	r3,zero,400a50c <__alt_data_end+0xfc00a50c>
 400aa00:	294b883a 	add	r5,r5,r5
 400aa04:	2886703a 	and	r3,r5,r2
 400aa08:	21000104 	addi	r4,r4,4
 400aa0c:	183ffc26 	beq	r3,zero,400aa00 <__alt_data_end+0xfc00aa00>
 400aa10:	003ebe06 	br	400a50c <__alt_data_end+0xfc00a50c>
 400aa14:	00c05504 	movi	r3,340
 400aa18:	18801236 	bltu	r3,r2,400aa64 <_malloc_r+0x6f8>
 400aa1c:	8804d3fa 	srli	r2,r17,15
 400aa20:	12001e04 	addi	r8,r2,120
 400aa24:	11c01dc4 	addi	r7,r2,119
 400aa28:	4209883a 	add	r4,r8,r8
 400aa2c:	003e6d06 	br	400a3e4 <__alt_data_end+0xfc00a3e4>
 400aa30:	00c40004 	movi	r3,4096
 400aa34:	003f4606 	br	400a750 <__alt_data_end+0xfc00a750>
 400aa38:	00800044 	movi	r2,1
 400aa3c:	a0800115 	stw	r2,4(r20)
 400aa40:	003f7406 	br	400a814 <__alt_data_end+0xfc00a814>
 400aa44:	1805d0ba 	srai	r2,r3,2
 400aa48:	01c00044 	movi	r7,1
 400aa4c:	30c00117 	ldw	r3,4(r6)
 400aa50:	388e983a 	sll	r7,r7,r2
 400aa54:	2805883a 	mov	r2,r5
 400aa58:	38c6b03a 	or	r3,r7,r3
 400aa5c:	30c00115 	stw	r3,4(r6)
 400aa60:	003f9b06 	br	400a8d0 <__alt_data_end+0xfc00a8d0>
 400aa64:	00c15504 	movi	r3,1364
 400aa68:	18801a36 	bltu	r3,r2,400aad4 <_malloc_r+0x768>
 400aa6c:	8804d4ba 	srli	r2,r17,18
 400aa70:	12001f44 	addi	r8,r2,125
 400aa74:	11c01f04 	addi	r7,r2,124
 400aa78:	4209883a 	add	r4,r8,r8
 400aa7c:	003e5906 	br	400a3e4 <__alt_data_end+0xfc00a3e4>
 400aa80:	ad400404 	addi	r21,r21,16
 400aa84:	003f1706 	br	400a6e4 <__alt_data_end+0xfc00a6e4>
 400aa88:	00c01504 	movi	r3,84
 400aa8c:	18802336 	bltu	r3,r2,400ab1c <_malloc_r+0x7b0>
 400aa90:	3804d33a 	srli	r2,r7,12
 400aa94:	11401bc4 	addi	r5,r2,111
 400aa98:	10c01b84 	addi	r3,r2,110
 400aa9c:	294b883a 	add	r5,r5,r5
 400aaa0:	003f7b06 	br	400a890 <__alt_data_end+0xfc00a890>
 400aaa4:	9c000217 	ldw	r16,8(r19)
 400aaa8:	00bfff04 	movi	r2,-4
 400aaac:	80c00117 	ldw	r3,4(r16)
 400aab0:	1886703a 	and	r3,r3,r2
 400aab4:	003f5306 	br	400a804 <__alt_data_end+0xfc00a804>
 400aab8:	3083ffcc 	andi	r2,r6,4095
 400aabc:	103f181e 	bne	r2,zero,400a720 <__alt_data_end+0xfc00a720>
 400aac0:	99000217 	ldw	r4,8(r19)
 400aac4:	b545883a 	add	r2,r22,r21
 400aac8:	10800054 	ori	r2,r2,1
 400aacc:	20800115 	stw	r2,4(r4)
 400aad0:	003f3e06 	br	400a7cc <__alt_data_end+0xfc00a7cc>
 400aad4:	01003f84 	movi	r4,254
 400aad8:	02001fc4 	movi	r8,127
 400aadc:	01c01f84 	movi	r7,126
 400aae0:	003e4006 	br	400a3e4 <__alt_data_end+0xfc00a3e4>
 400aae4:	00810074 	movhi	r2,1025
 400aae8:	1093a904 	addi	r2,r2,20132
 400aaec:	15000015 	stw	r20,0(r2)
 400aaf0:	003f1106 	br	400a738 <__alt_data_end+0xfc00a738>
 400aaf4:	00800044 	movi	r2,1
 400aaf8:	002b883a 	mov	r21,zero
 400aafc:	003f1f06 	br	400a77c <__alt_data_end+0xfc00a77c>
 400ab00:	81400204 	addi	r5,r16,8
 400ab04:	9009883a 	mov	r4,r18
 400ab08:	400d6c00 	call	400d6c0 <_free_r>
 400ab0c:	00810074 	movhi	r2,1025
 400ab10:	1093d904 	addi	r2,r2,20324
 400ab14:	10c00017 	ldw	r3,0(r2)
 400ab18:	003f2c06 	br	400a7cc <__alt_data_end+0xfc00a7cc>
 400ab1c:	00c05504 	movi	r3,340
 400ab20:	18800536 	bltu	r3,r2,400ab38 <_malloc_r+0x7cc>
 400ab24:	3804d3fa 	srli	r2,r7,15
 400ab28:	11401e04 	addi	r5,r2,120
 400ab2c:	10c01dc4 	addi	r3,r2,119
 400ab30:	294b883a 	add	r5,r5,r5
 400ab34:	003f5606 	br	400a890 <__alt_data_end+0xfc00a890>
 400ab38:	00c15504 	movi	r3,1364
 400ab3c:	18800536 	bltu	r3,r2,400ab54 <_malloc_r+0x7e8>
 400ab40:	3804d4ba 	srli	r2,r7,18
 400ab44:	11401f44 	addi	r5,r2,125
 400ab48:	10c01f04 	addi	r3,r2,124
 400ab4c:	294b883a 	add	r5,r5,r5
 400ab50:	003f4f06 	br	400a890 <__alt_data_end+0xfc00a890>
 400ab54:	01403f84 	movi	r5,254
 400ab58:	00c01f84 	movi	r3,126
 400ab5c:	003f4c06 	br	400a890 <__alt_data_end+0xfc00a890>
 400ab60:	98800117 	ldw	r2,4(r19)
 400ab64:	003fa006 	br	400a9e8 <__alt_data_end+0xfc00a9e8>
 400ab68:	8808d0fa 	srli	r4,r17,3
 400ab6c:	20800044 	addi	r2,r4,1
 400ab70:	1085883a 	add	r2,r2,r2
 400ab74:	003e9006 	br	400a5b8 <__alt_data_end+0xfc00a5b8>

0400ab78 <memchr>:
 400ab78:	208000cc 	andi	r2,r4,3
 400ab7c:	280f883a 	mov	r7,r5
 400ab80:	10003426 	beq	r2,zero,400ac54 <memchr+0xdc>
 400ab84:	30bfffc4 	addi	r2,r6,-1
 400ab88:	30001a26 	beq	r6,zero,400abf4 <memchr+0x7c>
 400ab8c:	20c00003 	ldbu	r3,0(r4)
 400ab90:	29803fcc 	andi	r6,r5,255
 400ab94:	30c0051e 	bne	r6,r3,400abac <memchr+0x34>
 400ab98:	00001806 	br	400abfc <memchr+0x84>
 400ab9c:	10001526 	beq	r2,zero,400abf4 <memchr+0x7c>
 400aba0:	20c00003 	ldbu	r3,0(r4)
 400aba4:	10bfffc4 	addi	r2,r2,-1
 400aba8:	30c01426 	beq	r6,r3,400abfc <memchr+0x84>
 400abac:	21000044 	addi	r4,r4,1
 400abb0:	20c000cc 	andi	r3,r4,3
 400abb4:	183ff91e 	bne	r3,zero,400ab9c <__alt_data_end+0xfc00ab9c>
 400abb8:	020000c4 	movi	r8,3
 400abbc:	40801136 	bltu	r8,r2,400ac04 <memchr+0x8c>
 400abc0:	10000c26 	beq	r2,zero,400abf4 <memchr+0x7c>
 400abc4:	20c00003 	ldbu	r3,0(r4)
 400abc8:	29403fcc 	andi	r5,r5,255
 400abcc:	28c00b26 	beq	r5,r3,400abfc <memchr+0x84>
 400abd0:	20c00044 	addi	r3,r4,1
 400abd4:	39803fcc 	andi	r6,r7,255
 400abd8:	2089883a 	add	r4,r4,r2
 400abdc:	00000306 	br	400abec <memchr+0x74>
 400abe0:	18c00044 	addi	r3,r3,1
 400abe4:	197fffc3 	ldbu	r5,-1(r3)
 400abe8:	31400526 	beq	r6,r5,400ac00 <memchr+0x88>
 400abec:	1805883a 	mov	r2,r3
 400abf0:	20fffb1e 	bne	r4,r3,400abe0 <__alt_data_end+0xfc00abe0>
 400abf4:	0005883a 	mov	r2,zero
 400abf8:	f800283a 	ret
 400abfc:	2005883a 	mov	r2,r4
 400ac00:	f800283a 	ret
 400ac04:	28c03fcc 	andi	r3,r5,255
 400ac08:	1812923a 	slli	r9,r3,8
 400ac0c:	02ffbff4 	movhi	r11,65279
 400ac10:	02a02074 	movhi	r10,32897
 400ac14:	48d2b03a 	or	r9,r9,r3
 400ac18:	4806943a 	slli	r3,r9,16
 400ac1c:	5affbfc4 	addi	r11,r11,-257
 400ac20:	52a02004 	addi	r10,r10,-32640
 400ac24:	48d2b03a 	or	r9,r9,r3
 400ac28:	20c00017 	ldw	r3,0(r4)
 400ac2c:	48c6f03a 	xor	r3,r9,r3
 400ac30:	1acd883a 	add	r6,r3,r11
 400ac34:	00c6303a 	nor	r3,zero,r3
 400ac38:	30c6703a 	and	r3,r6,r3
 400ac3c:	1a86703a 	and	r3,r3,r10
 400ac40:	183fe01e 	bne	r3,zero,400abc4 <__alt_data_end+0xfc00abc4>
 400ac44:	10bfff04 	addi	r2,r2,-4
 400ac48:	21000104 	addi	r4,r4,4
 400ac4c:	40bff636 	bltu	r8,r2,400ac28 <__alt_data_end+0xfc00ac28>
 400ac50:	003fdb06 	br	400abc0 <__alt_data_end+0xfc00abc0>
 400ac54:	3005883a 	mov	r2,r6
 400ac58:	003fd706 	br	400abb8 <__alt_data_end+0xfc00abb8>

0400ac5c <_Balloc>:
 400ac5c:	20801317 	ldw	r2,76(r4)
 400ac60:	defffc04 	addi	sp,sp,-16
 400ac64:	dc400115 	stw	r17,4(sp)
 400ac68:	dc000015 	stw	r16,0(sp)
 400ac6c:	dfc00315 	stw	ra,12(sp)
 400ac70:	dc800215 	stw	r18,8(sp)
 400ac74:	2023883a 	mov	r17,r4
 400ac78:	2821883a 	mov	r16,r5
 400ac7c:	10000f26 	beq	r2,zero,400acbc <_Balloc+0x60>
 400ac80:	8407883a 	add	r3,r16,r16
 400ac84:	18c7883a 	add	r3,r3,r3
 400ac88:	10c7883a 	add	r3,r2,r3
 400ac8c:	18800017 	ldw	r2,0(r3)
 400ac90:	10001126 	beq	r2,zero,400acd8 <_Balloc+0x7c>
 400ac94:	11000017 	ldw	r4,0(r2)
 400ac98:	19000015 	stw	r4,0(r3)
 400ac9c:	10000415 	stw	zero,16(r2)
 400aca0:	10000315 	stw	zero,12(r2)
 400aca4:	dfc00317 	ldw	ra,12(sp)
 400aca8:	dc800217 	ldw	r18,8(sp)
 400acac:	dc400117 	ldw	r17,4(sp)
 400acb0:	dc000017 	ldw	r16,0(sp)
 400acb4:	dec00404 	addi	sp,sp,16
 400acb8:	f800283a 	ret
 400acbc:	01800844 	movi	r6,33
 400acc0:	01400104 	movi	r5,4
 400acc4:	400d4c00 	call	400d4c0 <_calloc_r>
 400acc8:	88801315 	stw	r2,76(r17)
 400accc:	103fec1e 	bne	r2,zero,400ac80 <__alt_data_end+0xfc00ac80>
 400acd0:	0005883a 	mov	r2,zero
 400acd4:	003ff306 	br	400aca4 <__alt_data_end+0xfc00aca4>
 400acd8:	01400044 	movi	r5,1
 400acdc:	2c24983a 	sll	r18,r5,r16
 400ace0:	8809883a 	mov	r4,r17
 400ace4:	91800144 	addi	r6,r18,5
 400ace8:	318d883a 	add	r6,r6,r6
 400acec:	318d883a 	add	r6,r6,r6
 400acf0:	400d4c00 	call	400d4c0 <_calloc_r>
 400acf4:	103ff626 	beq	r2,zero,400acd0 <__alt_data_end+0xfc00acd0>
 400acf8:	14000115 	stw	r16,4(r2)
 400acfc:	14800215 	stw	r18,8(r2)
 400ad00:	003fe606 	br	400ac9c <__alt_data_end+0xfc00ac9c>

0400ad04 <_Bfree>:
 400ad04:	28000826 	beq	r5,zero,400ad28 <_Bfree+0x24>
 400ad08:	28c00117 	ldw	r3,4(r5)
 400ad0c:	20801317 	ldw	r2,76(r4)
 400ad10:	18c7883a 	add	r3,r3,r3
 400ad14:	18c7883a 	add	r3,r3,r3
 400ad18:	10c5883a 	add	r2,r2,r3
 400ad1c:	10c00017 	ldw	r3,0(r2)
 400ad20:	28c00015 	stw	r3,0(r5)
 400ad24:	11400015 	stw	r5,0(r2)
 400ad28:	f800283a 	ret

0400ad2c <__multadd>:
 400ad2c:	defff704 	addi	sp,sp,-36
 400ad30:	dc800215 	stw	r18,8(sp)
 400ad34:	2c800417 	ldw	r18,16(r5)
 400ad38:	dd800615 	stw	r22,24(sp)
 400ad3c:	dd400515 	stw	r21,20(sp)
 400ad40:	dd000415 	stw	r20,16(sp)
 400ad44:	dcc00315 	stw	r19,12(sp)
 400ad48:	dc400115 	stw	r17,4(sp)
 400ad4c:	dc000015 	stw	r16,0(sp)
 400ad50:	dfc00815 	stw	ra,32(sp)
 400ad54:	ddc00715 	stw	r23,28(sp)
 400ad58:	2827883a 	mov	r19,r5
 400ad5c:	2029883a 	mov	r20,r4
 400ad60:	3023883a 	mov	r17,r6
 400ad64:	3821883a 	mov	r16,r7
 400ad68:	2d400504 	addi	r21,r5,20
 400ad6c:	002d883a 	mov	r22,zero
 400ad70:	adc00017 	ldw	r23,0(r21)
 400ad74:	880b883a 	mov	r5,r17
 400ad78:	ad400104 	addi	r21,r21,4
 400ad7c:	b93fffcc 	andi	r4,r23,65535
 400ad80:	40024600 	call	4002460 <__mulsi3>
 400ad84:	b808d43a 	srli	r4,r23,16
 400ad88:	880b883a 	mov	r5,r17
 400ad8c:	1421883a 	add	r16,r2,r16
 400ad90:	40024600 	call	4002460 <__mulsi3>
 400ad94:	800ed43a 	srli	r7,r16,16
 400ad98:	80ffffcc 	andi	r3,r16,65535
 400ad9c:	b5800044 	addi	r22,r22,1
 400ada0:	11c5883a 	add	r2,r2,r7
 400ada4:	100e943a 	slli	r7,r2,16
 400ada8:	1020d43a 	srli	r16,r2,16
 400adac:	38c7883a 	add	r3,r7,r3
 400adb0:	a8ffff15 	stw	r3,-4(r21)
 400adb4:	b4bfee16 	blt	r22,r18,400ad70 <__alt_data_end+0xfc00ad70>
 400adb8:	80000926 	beq	r16,zero,400ade0 <__multadd+0xb4>
 400adbc:	98800217 	ldw	r2,8(r19)
 400adc0:	9080130e 	bge	r18,r2,400ae10 <__multadd+0xe4>
 400adc4:	90800144 	addi	r2,r18,5
 400adc8:	1085883a 	add	r2,r2,r2
 400adcc:	1085883a 	add	r2,r2,r2
 400add0:	9885883a 	add	r2,r19,r2
 400add4:	14000015 	stw	r16,0(r2)
 400add8:	94800044 	addi	r18,r18,1
 400addc:	9c800415 	stw	r18,16(r19)
 400ade0:	9805883a 	mov	r2,r19
 400ade4:	dfc00817 	ldw	ra,32(sp)
 400ade8:	ddc00717 	ldw	r23,28(sp)
 400adec:	dd800617 	ldw	r22,24(sp)
 400adf0:	dd400517 	ldw	r21,20(sp)
 400adf4:	dd000417 	ldw	r20,16(sp)
 400adf8:	dcc00317 	ldw	r19,12(sp)
 400adfc:	dc800217 	ldw	r18,8(sp)
 400ae00:	dc400117 	ldw	r17,4(sp)
 400ae04:	dc000017 	ldw	r16,0(sp)
 400ae08:	dec00904 	addi	sp,sp,36
 400ae0c:	f800283a 	ret
 400ae10:	99400117 	ldw	r5,4(r19)
 400ae14:	a009883a 	mov	r4,r20
 400ae18:	29400044 	addi	r5,r5,1
 400ae1c:	400ac5c0 	call	400ac5c <_Balloc>
 400ae20:	99800417 	ldw	r6,16(r19)
 400ae24:	99400304 	addi	r5,r19,12
 400ae28:	11000304 	addi	r4,r2,12
 400ae2c:	31800084 	addi	r6,r6,2
 400ae30:	318d883a 	add	r6,r6,r6
 400ae34:	318d883a 	add	r6,r6,r6
 400ae38:	1023883a 	mov	r17,r2
 400ae3c:	40064200 	call	4006420 <memcpy>
 400ae40:	98000a26 	beq	r19,zero,400ae6c <__multadd+0x140>
 400ae44:	98c00117 	ldw	r3,4(r19)
 400ae48:	a0801317 	ldw	r2,76(r20)
 400ae4c:	18c7883a 	add	r3,r3,r3
 400ae50:	18c7883a 	add	r3,r3,r3
 400ae54:	10c5883a 	add	r2,r2,r3
 400ae58:	10c00017 	ldw	r3,0(r2)
 400ae5c:	98c00015 	stw	r3,0(r19)
 400ae60:	14c00015 	stw	r19,0(r2)
 400ae64:	8827883a 	mov	r19,r17
 400ae68:	003fd606 	br	400adc4 <__alt_data_end+0xfc00adc4>
 400ae6c:	8827883a 	mov	r19,r17
 400ae70:	003fd406 	br	400adc4 <__alt_data_end+0xfc00adc4>

0400ae74 <__s2b>:
 400ae74:	defff904 	addi	sp,sp,-28
 400ae78:	dc400115 	stw	r17,4(sp)
 400ae7c:	dc000015 	stw	r16,0(sp)
 400ae80:	2023883a 	mov	r17,r4
 400ae84:	2821883a 	mov	r16,r5
 400ae88:	39000204 	addi	r4,r7,8
 400ae8c:	01400244 	movi	r5,9
 400ae90:	dcc00315 	stw	r19,12(sp)
 400ae94:	dc800215 	stw	r18,8(sp)
 400ae98:	dfc00615 	stw	ra,24(sp)
 400ae9c:	dd400515 	stw	r21,20(sp)
 400aea0:	dd000415 	stw	r20,16(sp)
 400aea4:	3825883a 	mov	r18,r7
 400aea8:	3027883a 	mov	r19,r6
 400aeac:	40022ac0 	call	40022ac <__divsi3>
 400aeb0:	00c00044 	movi	r3,1
 400aeb4:	000b883a 	mov	r5,zero
 400aeb8:	1880030e 	bge	r3,r2,400aec8 <__s2b+0x54>
 400aebc:	18c7883a 	add	r3,r3,r3
 400aec0:	29400044 	addi	r5,r5,1
 400aec4:	18bffd16 	blt	r3,r2,400aebc <__alt_data_end+0xfc00aebc>
 400aec8:	8809883a 	mov	r4,r17
 400aecc:	400ac5c0 	call	400ac5c <_Balloc>
 400aed0:	d8c00717 	ldw	r3,28(sp)
 400aed4:	10c00515 	stw	r3,20(r2)
 400aed8:	00c00044 	movi	r3,1
 400aedc:	10c00415 	stw	r3,16(r2)
 400aee0:	00c00244 	movi	r3,9
 400aee4:	1cc0210e 	bge	r3,r19,400af6c <__s2b+0xf8>
 400aee8:	80eb883a 	add	r21,r16,r3
 400aeec:	a829883a 	mov	r20,r21
 400aef0:	84e1883a 	add	r16,r16,r19
 400aef4:	a1c00007 	ldb	r7,0(r20)
 400aef8:	01800284 	movi	r6,10
 400aefc:	a5000044 	addi	r20,r20,1
 400af00:	100b883a 	mov	r5,r2
 400af04:	39fff404 	addi	r7,r7,-48
 400af08:	8809883a 	mov	r4,r17
 400af0c:	400ad2c0 	call	400ad2c <__multadd>
 400af10:	a43ff81e 	bne	r20,r16,400aef4 <__alt_data_end+0xfc00aef4>
 400af14:	ace1883a 	add	r16,r21,r19
 400af18:	843ffe04 	addi	r16,r16,-8
 400af1c:	9c800a0e 	bge	r19,r18,400af48 <__s2b+0xd4>
 400af20:	94e5c83a 	sub	r18,r18,r19
 400af24:	84a5883a 	add	r18,r16,r18
 400af28:	81c00007 	ldb	r7,0(r16)
 400af2c:	01800284 	movi	r6,10
 400af30:	84000044 	addi	r16,r16,1
 400af34:	100b883a 	mov	r5,r2
 400af38:	39fff404 	addi	r7,r7,-48
 400af3c:	8809883a 	mov	r4,r17
 400af40:	400ad2c0 	call	400ad2c <__multadd>
 400af44:	84bff81e 	bne	r16,r18,400af28 <__alt_data_end+0xfc00af28>
 400af48:	dfc00617 	ldw	ra,24(sp)
 400af4c:	dd400517 	ldw	r21,20(sp)
 400af50:	dd000417 	ldw	r20,16(sp)
 400af54:	dcc00317 	ldw	r19,12(sp)
 400af58:	dc800217 	ldw	r18,8(sp)
 400af5c:	dc400117 	ldw	r17,4(sp)
 400af60:	dc000017 	ldw	r16,0(sp)
 400af64:	dec00704 	addi	sp,sp,28
 400af68:	f800283a 	ret
 400af6c:	84000284 	addi	r16,r16,10
 400af70:	1827883a 	mov	r19,r3
 400af74:	003fe906 	br	400af1c <__alt_data_end+0xfc00af1c>

0400af78 <__hi0bits>:
 400af78:	20bfffec 	andhi	r2,r4,65535
 400af7c:	1000141e 	bne	r2,zero,400afd0 <__hi0bits+0x58>
 400af80:	2008943a 	slli	r4,r4,16
 400af84:	00800404 	movi	r2,16
 400af88:	20ffc02c 	andhi	r3,r4,65280
 400af8c:	1800021e 	bne	r3,zero,400af98 <__hi0bits+0x20>
 400af90:	2008923a 	slli	r4,r4,8
 400af94:	10800204 	addi	r2,r2,8
 400af98:	20fc002c 	andhi	r3,r4,61440
 400af9c:	1800021e 	bne	r3,zero,400afa8 <__hi0bits+0x30>
 400afa0:	2008913a 	slli	r4,r4,4
 400afa4:	10800104 	addi	r2,r2,4
 400afa8:	20f0002c 	andhi	r3,r4,49152
 400afac:	1800031e 	bne	r3,zero,400afbc <__hi0bits+0x44>
 400afb0:	2109883a 	add	r4,r4,r4
 400afb4:	10800084 	addi	r2,r2,2
 400afb8:	2109883a 	add	r4,r4,r4
 400afbc:	20000316 	blt	r4,zero,400afcc <__hi0bits+0x54>
 400afc0:	2110002c 	andhi	r4,r4,16384
 400afc4:	2000041e 	bne	r4,zero,400afd8 <__hi0bits+0x60>
 400afc8:	00800804 	movi	r2,32
 400afcc:	f800283a 	ret
 400afd0:	0005883a 	mov	r2,zero
 400afd4:	003fec06 	br	400af88 <__alt_data_end+0xfc00af88>
 400afd8:	10800044 	addi	r2,r2,1
 400afdc:	f800283a 	ret

0400afe0 <__lo0bits>:
 400afe0:	20c00017 	ldw	r3,0(r4)
 400afe4:	188001cc 	andi	r2,r3,7
 400afe8:	10000826 	beq	r2,zero,400b00c <__lo0bits+0x2c>
 400afec:	1880004c 	andi	r2,r3,1
 400aff0:	1000211e 	bne	r2,zero,400b078 <__lo0bits+0x98>
 400aff4:	1880008c 	andi	r2,r3,2
 400aff8:	1000211e 	bne	r2,zero,400b080 <__lo0bits+0xa0>
 400affc:	1806d0ba 	srli	r3,r3,2
 400b000:	00800084 	movi	r2,2
 400b004:	20c00015 	stw	r3,0(r4)
 400b008:	f800283a 	ret
 400b00c:	18bfffcc 	andi	r2,r3,65535
 400b010:	10001326 	beq	r2,zero,400b060 <__lo0bits+0x80>
 400b014:	0005883a 	mov	r2,zero
 400b018:	19403fcc 	andi	r5,r3,255
 400b01c:	2800021e 	bne	r5,zero,400b028 <__lo0bits+0x48>
 400b020:	1806d23a 	srli	r3,r3,8
 400b024:	10800204 	addi	r2,r2,8
 400b028:	194003cc 	andi	r5,r3,15
 400b02c:	2800021e 	bne	r5,zero,400b038 <__lo0bits+0x58>
 400b030:	1806d13a 	srli	r3,r3,4
 400b034:	10800104 	addi	r2,r2,4
 400b038:	194000cc 	andi	r5,r3,3
 400b03c:	2800021e 	bne	r5,zero,400b048 <__lo0bits+0x68>
 400b040:	1806d0ba 	srli	r3,r3,2
 400b044:	10800084 	addi	r2,r2,2
 400b048:	1940004c 	andi	r5,r3,1
 400b04c:	2800081e 	bne	r5,zero,400b070 <__lo0bits+0x90>
 400b050:	1806d07a 	srli	r3,r3,1
 400b054:	1800051e 	bne	r3,zero,400b06c <__lo0bits+0x8c>
 400b058:	00800804 	movi	r2,32
 400b05c:	f800283a 	ret
 400b060:	1806d43a 	srli	r3,r3,16
 400b064:	00800404 	movi	r2,16
 400b068:	003feb06 	br	400b018 <__alt_data_end+0xfc00b018>
 400b06c:	10800044 	addi	r2,r2,1
 400b070:	20c00015 	stw	r3,0(r4)
 400b074:	f800283a 	ret
 400b078:	0005883a 	mov	r2,zero
 400b07c:	f800283a 	ret
 400b080:	1806d07a 	srli	r3,r3,1
 400b084:	00800044 	movi	r2,1
 400b088:	20c00015 	stw	r3,0(r4)
 400b08c:	f800283a 	ret

0400b090 <__i2b>:
 400b090:	defffd04 	addi	sp,sp,-12
 400b094:	dc000015 	stw	r16,0(sp)
 400b098:	04000044 	movi	r16,1
 400b09c:	dc400115 	stw	r17,4(sp)
 400b0a0:	2823883a 	mov	r17,r5
 400b0a4:	800b883a 	mov	r5,r16
 400b0a8:	dfc00215 	stw	ra,8(sp)
 400b0ac:	400ac5c0 	call	400ac5c <_Balloc>
 400b0b0:	14400515 	stw	r17,20(r2)
 400b0b4:	14000415 	stw	r16,16(r2)
 400b0b8:	dfc00217 	ldw	ra,8(sp)
 400b0bc:	dc400117 	ldw	r17,4(sp)
 400b0c0:	dc000017 	ldw	r16,0(sp)
 400b0c4:	dec00304 	addi	sp,sp,12
 400b0c8:	f800283a 	ret

0400b0cc <__multiply>:
 400b0cc:	deffef04 	addi	sp,sp,-68
 400b0d0:	dc400815 	stw	r17,32(sp)
 400b0d4:	dc000715 	stw	r16,28(sp)
 400b0d8:	34400417 	ldw	r17,16(r6)
 400b0dc:	2c000417 	ldw	r16,16(r5)
 400b0e0:	dd800d15 	stw	r22,52(sp)
 400b0e4:	dc800915 	stw	r18,36(sp)
 400b0e8:	dfc01015 	stw	ra,64(sp)
 400b0ec:	df000f15 	stw	fp,60(sp)
 400b0f0:	ddc00e15 	stw	r23,56(sp)
 400b0f4:	dd400c15 	stw	r21,48(sp)
 400b0f8:	dd000b15 	stw	r20,44(sp)
 400b0fc:	dcc00a15 	stw	r19,40(sp)
 400b100:	2825883a 	mov	r18,r5
 400b104:	302d883a 	mov	r22,r6
 400b108:	8440050e 	bge	r16,r17,400b120 <__multiply+0x54>
 400b10c:	8007883a 	mov	r3,r16
 400b110:	3025883a 	mov	r18,r6
 400b114:	8821883a 	mov	r16,r17
 400b118:	282d883a 	mov	r22,r5
 400b11c:	1823883a 	mov	r17,r3
 400b120:	90800217 	ldw	r2,8(r18)
 400b124:	8447883a 	add	r3,r16,r17
 400b128:	d8c00215 	stw	r3,8(sp)
 400b12c:	91400117 	ldw	r5,4(r18)
 400b130:	10c0010e 	bge	r2,r3,400b138 <__multiply+0x6c>
 400b134:	29400044 	addi	r5,r5,1
 400b138:	400ac5c0 	call	400ac5c <_Balloc>
 400b13c:	d8c00217 	ldw	r3,8(sp)
 400b140:	d8800615 	stw	r2,24(sp)
 400b144:	18eb883a 	add	r21,r3,r3
 400b148:	ad6b883a 	add	r21,r21,r21
 400b14c:	10c00504 	addi	r3,r2,20
 400b150:	1d6b883a 	add	r21,r3,r21
 400b154:	d8c00115 	stw	r3,4(sp)
 400b158:	dd400315 	stw	r21,12(sp)
 400b15c:	1805883a 	mov	r2,r3
 400b160:	1d40042e 	bgeu	r3,r21,400b174 <__multiply+0xa8>
 400b164:	d8c00317 	ldw	r3,12(sp)
 400b168:	10000015 	stw	zero,0(r2)
 400b16c:	10800104 	addi	r2,r2,4
 400b170:	10fffc36 	bltu	r2,r3,400b164 <__alt_data_end+0xfc00b164>
 400b174:	8c63883a 	add	r17,r17,r17
 400b178:	b5800504 	addi	r22,r22,20
 400b17c:	8c63883a 	add	r17,r17,r17
 400b180:	94800504 	addi	r18,r18,20
 400b184:	8421883a 	add	r16,r16,r16
 400b188:	b463883a 	add	r17,r22,r17
 400b18c:	8421883a 	add	r16,r16,r16
 400b190:	dd800015 	stw	r22,0(sp)
 400b194:	dc800415 	stw	r18,16(sp)
 400b198:	dc400515 	stw	r17,20(sp)
 400b19c:	9429883a 	add	r20,r18,r16
 400b1a0:	b4404f2e 	bgeu	r22,r17,400b2e0 <__multiply+0x214>
 400b1a4:	d8c00017 	ldw	r3,0(sp)
 400b1a8:	1c800017 	ldw	r18,0(r3)
 400b1ac:	947fffcc 	andi	r17,r18,65535
 400b1b0:	88001e26 	beq	r17,zero,400b22c <__multiply+0x160>
 400b1b4:	dd800117 	ldw	r22,4(sp)
 400b1b8:	dd400417 	ldw	r21,16(sp)
 400b1bc:	0027883a 	mov	r19,zero
 400b1c0:	ac800017 	ldw	r18,0(r21)
 400b1c4:	b4000017 	ldw	r16,0(r22)
 400b1c8:	880b883a 	mov	r5,r17
 400b1cc:	913fffcc 	andi	r4,r18,65535
 400b1d0:	40024600 	call	4002460 <__mulsi3>
 400b1d4:	9008d43a 	srli	r4,r18,16
 400b1d8:	84bfffcc 	andi	r18,r16,65535
 400b1dc:	1485883a 	add	r2,r2,r18
 400b1e0:	14e5883a 	add	r18,r2,r19
 400b1e4:	8020d43a 	srli	r16,r16,16
 400b1e8:	9026d43a 	srli	r19,r18,16
 400b1ec:	880b883a 	mov	r5,r17
 400b1f0:	40024600 	call	4002460 <__mulsi3>
 400b1f4:	1405883a 	add	r2,r2,r16
 400b1f8:	14e1883a 	add	r16,r2,r19
 400b1fc:	90ffffcc 	andi	r3,r18,65535
 400b200:	8024943a 	slli	r18,r16,16
 400b204:	ad400104 	addi	r21,r21,4
 400b208:	b005883a 	mov	r2,r22
 400b20c:	90c6b03a 	or	r3,r18,r3
 400b210:	b0c00015 	stw	r3,0(r22)
 400b214:	8026d43a 	srli	r19,r16,16
 400b218:	b5800104 	addi	r22,r22,4
 400b21c:	ad3fe836 	bltu	r21,r20,400b1c0 <__alt_data_end+0xfc00b1c0>
 400b220:	d8c00017 	ldw	r3,0(sp)
 400b224:	14c00115 	stw	r19,4(r2)
 400b228:	1c800017 	ldw	r18,0(r3)
 400b22c:	9024d43a 	srli	r18,r18,16
 400b230:	90002226 	beq	r18,zero,400b2bc <__multiply+0x1f0>
 400b234:	d8c00117 	ldw	r3,4(sp)
 400b238:	dd800417 	ldw	r22,16(sp)
 400b23c:	002f883a 	mov	r23,zero
 400b240:	1f000017 	ldw	fp,0(r3)
 400b244:	1823883a 	mov	r17,r3
 400b248:	182b883a 	mov	r21,r3
 400b24c:	e021883a 	mov	r16,fp
 400b250:	00000106 	br	400b258 <__multiply+0x18c>
 400b254:	982b883a 	mov	r21,r19
 400b258:	b100000b 	ldhu	r4,0(r22)
 400b25c:	8020d43a 	srli	r16,r16,16
 400b260:	900b883a 	mov	r5,r18
 400b264:	40024600 	call	4002460 <__mulsi3>
 400b268:	1405883a 	add	r2,r2,r16
 400b26c:	15ef883a 	add	r23,r2,r23
 400b270:	b804943a 	slli	r2,r23,16
 400b274:	e0ffffcc 	andi	r3,fp,65535
 400b278:	8c400104 	addi	r17,r17,4
 400b27c:	10c6b03a 	or	r3,r2,r3
 400b280:	88ffff15 	stw	r3,-4(r17)
 400b284:	b5800104 	addi	r22,r22,4
 400b288:	b13fff17 	ldw	r4,-4(r22)
 400b28c:	acc00104 	addi	r19,r21,4
 400b290:	900b883a 	mov	r5,r18
 400b294:	2008d43a 	srli	r4,r4,16
 400b298:	9c000017 	ldw	r16,0(r19)
 400b29c:	40024600 	call	4002460 <__mulsi3>
 400b2a0:	b806d43a 	srli	r3,r23,16
 400b2a4:	813fffcc 	andi	r4,r16,65535
 400b2a8:	1105883a 	add	r2,r2,r4
 400b2ac:	10f9883a 	add	fp,r2,r3
 400b2b0:	e02ed43a 	srli	r23,fp,16
 400b2b4:	b53fe736 	bltu	r22,r20,400b254 <__alt_data_end+0xfc00b254>
 400b2b8:	af000115 	stw	fp,4(r21)
 400b2bc:	d8c00017 	ldw	r3,0(sp)
 400b2c0:	d9000517 	ldw	r4,20(sp)
 400b2c4:	18c00104 	addi	r3,r3,4
 400b2c8:	d8c00015 	stw	r3,0(sp)
 400b2cc:	d8c00117 	ldw	r3,4(sp)
 400b2d0:	18c00104 	addi	r3,r3,4
 400b2d4:	d8c00115 	stw	r3,4(sp)
 400b2d8:	d8c00017 	ldw	r3,0(sp)
 400b2dc:	193fb136 	bltu	r3,r4,400b1a4 <__alt_data_end+0xfc00b1a4>
 400b2e0:	d8c00217 	ldw	r3,8(sp)
 400b2e4:	00c00c0e 	bge	zero,r3,400b318 <__multiply+0x24c>
 400b2e8:	d8c00317 	ldw	r3,12(sp)
 400b2ec:	18bfff17 	ldw	r2,-4(r3)
 400b2f0:	1d7fff04 	addi	r21,r3,-4
 400b2f4:	10000326 	beq	r2,zero,400b304 <__multiply+0x238>
 400b2f8:	00000706 	br	400b318 <__multiply+0x24c>
 400b2fc:	a8800017 	ldw	r2,0(r21)
 400b300:	1000051e 	bne	r2,zero,400b318 <__multiply+0x24c>
 400b304:	d8c00217 	ldw	r3,8(sp)
 400b308:	ad7fff04 	addi	r21,r21,-4
 400b30c:	18ffffc4 	addi	r3,r3,-1
 400b310:	d8c00215 	stw	r3,8(sp)
 400b314:	183ff91e 	bne	r3,zero,400b2fc <__alt_data_end+0xfc00b2fc>
 400b318:	d8c00617 	ldw	r3,24(sp)
 400b31c:	d9000217 	ldw	r4,8(sp)
 400b320:	1805883a 	mov	r2,r3
 400b324:	19000415 	stw	r4,16(r3)
 400b328:	dfc01017 	ldw	ra,64(sp)
 400b32c:	df000f17 	ldw	fp,60(sp)
 400b330:	ddc00e17 	ldw	r23,56(sp)
 400b334:	dd800d17 	ldw	r22,52(sp)
 400b338:	dd400c17 	ldw	r21,48(sp)
 400b33c:	dd000b17 	ldw	r20,44(sp)
 400b340:	dcc00a17 	ldw	r19,40(sp)
 400b344:	dc800917 	ldw	r18,36(sp)
 400b348:	dc400817 	ldw	r17,32(sp)
 400b34c:	dc000717 	ldw	r16,28(sp)
 400b350:	dec01104 	addi	sp,sp,68
 400b354:	f800283a 	ret

0400b358 <__pow5mult>:
 400b358:	defffa04 	addi	sp,sp,-24
 400b35c:	dcc00315 	stw	r19,12(sp)
 400b360:	dc000015 	stw	r16,0(sp)
 400b364:	dfc00515 	stw	ra,20(sp)
 400b368:	dd000415 	stw	r20,16(sp)
 400b36c:	dc800215 	stw	r18,8(sp)
 400b370:	dc400115 	stw	r17,4(sp)
 400b374:	308000cc 	andi	r2,r6,3
 400b378:	3021883a 	mov	r16,r6
 400b37c:	2027883a 	mov	r19,r4
 400b380:	10002f1e 	bne	r2,zero,400b440 <__pow5mult+0xe8>
 400b384:	2825883a 	mov	r18,r5
 400b388:	8021d0ba 	srai	r16,r16,2
 400b38c:	80001a26 	beq	r16,zero,400b3f8 <__pow5mult+0xa0>
 400b390:	9c401217 	ldw	r17,72(r19)
 400b394:	8800061e 	bne	r17,zero,400b3b0 <__pow5mult+0x58>
 400b398:	00003406 	br	400b46c <__pow5mult+0x114>
 400b39c:	8021d07a 	srai	r16,r16,1
 400b3a0:	80001526 	beq	r16,zero,400b3f8 <__pow5mult+0xa0>
 400b3a4:	88800017 	ldw	r2,0(r17)
 400b3a8:	10001c26 	beq	r2,zero,400b41c <__pow5mult+0xc4>
 400b3ac:	1023883a 	mov	r17,r2
 400b3b0:	8080004c 	andi	r2,r16,1
 400b3b4:	103ff926 	beq	r2,zero,400b39c <__alt_data_end+0xfc00b39c>
 400b3b8:	880d883a 	mov	r6,r17
 400b3bc:	900b883a 	mov	r5,r18
 400b3c0:	9809883a 	mov	r4,r19
 400b3c4:	400b0cc0 	call	400b0cc <__multiply>
 400b3c8:	90001b26 	beq	r18,zero,400b438 <__pow5mult+0xe0>
 400b3cc:	91000117 	ldw	r4,4(r18)
 400b3d0:	98c01317 	ldw	r3,76(r19)
 400b3d4:	8021d07a 	srai	r16,r16,1
 400b3d8:	2109883a 	add	r4,r4,r4
 400b3dc:	2109883a 	add	r4,r4,r4
 400b3e0:	1907883a 	add	r3,r3,r4
 400b3e4:	19000017 	ldw	r4,0(r3)
 400b3e8:	91000015 	stw	r4,0(r18)
 400b3ec:	1c800015 	stw	r18,0(r3)
 400b3f0:	1025883a 	mov	r18,r2
 400b3f4:	803feb1e 	bne	r16,zero,400b3a4 <__alt_data_end+0xfc00b3a4>
 400b3f8:	9005883a 	mov	r2,r18
 400b3fc:	dfc00517 	ldw	ra,20(sp)
 400b400:	dd000417 	ldw	r20,16(sp)
 400b404:	dcc00317 	ldw	r19,12(sp)
 400b408:	dc800217 	ldw	r18,8(sp)
 400b40c:	dc400117 	ldw	r17,4(sp)
 400b410:	dc000017 	ldw	r16,0(sp)
 400b414:	dec00604 	addi	sp,sp,24
 400b418:	f800283a 	ret
 400b41c:	880d883a 	mov	r6,r17
 400b420:	880b883a 	mov	r5,r17
 400b424:	9809883a 	mov	r4,r19
 400b428:	400b0cc0 	call	400b0cc <__multiply>
 400b42c:	88800015 	stw	r2,0(r17)
 400b430:	10000015 	stw	zero,0(r2)
 400b434:	003fdd06 	br	400b3ac <__alt_data_end+0xfc00b3ac>
 400b438:	1025883a 	mov	r18,r2
 400b43c:	003fd706 	br	400b39c <__alt_data_end+0xfc00b39c>
 400b440:	10bfffc4 	addi	r2,r2,-1
 400b444:	1085883a 	add	r2,r2,r2
 400b448:	00c10074 	movhi	r3,1025
 400b44c:	18cb9a04 	addi	r3,r3,11880
 400b450:	1085883a 	add	r2,r2,r2
 400b454:	1885883a 	add	r2,r3,r2
 400b458:	11800017 	ldw	r6,0(r2)
 400b45c:	000f883a 	mov	r7,zero
 400b460:	400ad2c0 	call	400ad2c <__multadd>
 400b464:	1025883a 	mov	r18,r2
 400b468:	003fc706 	br	400b388 <__alt_data_end+0xfc00b388>
 400b46c:	05000044 	movi	r20,1
 400b470:	a00b883a 	mov	r5,r20
 400b474:	9809883a 	mov	r4,r19
 400b478:	400ac5c0 	call	400ac5c <_Balloc>
 400b47c:	1023883a 	mov	r17,r2
 400b480:	00809c44 	movi	r2,625
 400b484:	88800515 	stw	r2,20(r17)
 400b488:	8d000415 	stw	r20,16(r17)
 400b48c:	9c401215 	stw	r17,72(r19)
 400b490:	88000015 	stw	zero,0(r17)
 400b494:	003fc606 	br	400b3b0 <__alt_data_end+0xfc00b3b0>

0400b498 <__lshift>:
 400b498:	defff904 	addi	sp,sp,-28
 400b49c:	dd400515 	stw	r21,20(sp)
 400b4a0:	dcc00315 	stw	r19,12(sp)
 400b4a4:	302bd17a 	srai	r21,r6,5
 400b4a8:	2cc00417 	ldw	r19,16(r5)
 400b4ac:	28800217 	ldw	r2,8(r5)
 400b4b0:	dd000415 	stw	r20,16(sp)
 400b4b4:	ace7883a 	add	r19,r21,r19
 400b4b8:	dc800215 	stw	r18,8(sp)
 400b4bc:	dc400115 	stw	r17,4(sp)
 400b4c0:	dc000015 	stw	r16,0(sp)
 400b4c4:	dfc00615 	stw	ra,24(sp)
 400b4c8:	9c000044 	addi	r16,r19,1
 400b4cc:	2823883a 	mov	r17,r5
 400b4d0:	3029883a 	mov	r20,r6
 400b4d4:	2025883a 	mov	r18,r4
 400b4d8:	29400117 	ldw	r5,4(r5)
 400b4dc:	1400030e 	bge	r2,r16,400b4ec <__lshift+0x54>
 400b4e0:	1085883a 	add	r2,r2,r2
 400b4e4:	29400044 	addi	r5,r5,1
 400b4e8:	143ffd16 	blt	r2,r16,400b4e0 <__alt_data_end+0xfc00b4e0>
 400b4ec:	9009883a 	mov	r4,r18
 400b4f0:	400ac5c0 	call	400ac5c <_Balloc>
 400b4f4:	10c00504 	addi	r3,r2,20
 400b4f8:	0540070e 	bge	zero,r21,400b518 <__lshift+0x80>
 400b4fc:	ad6b883a 	add	r21,r21,r21
 400b500:	ad6b883a 	add	r21,r21,r21
 400b504:	1809883a 	mov	r4,r3
 400b508:	1d47883a 	add	r3,r3,r21
 400b50c:	20000015 	stw	zero,0(r4)
 400b510:	21000104 	addi	r4,r4,4
 400b514:	193ffd1e 	bne	r3,r4,400b50c <__alt_data_end+0xfc00b50c>
 400b518:	8a000417 	ldw	r8,16(r17)
 400b51c:	89000504 	addi	r4,r17,20
 400b520:	a18007cc 	andi	r6,r20,31
 400b524:	4211883a 	add	r8,r8,r8
 400b528:	4211883a 	add	r8,r8,r8
 400b52c:	2211883a 	add	r8,r4,r8
 400b530:	30002326 	beq	r6,zero,400b5c0 <__lshift+0x128>
 400b534:	02400804 	movi	r9,32
 400b538:	4993c83a 	sub	r9,r9,r6
 400b53c:	000b883a 	mov	r5,zero
 400b540:	21c00017 	ldw	r7,0(r4)
 400b544:	1815883a 	mov	r10,r3
 400b548:	18c00104 	addi	r3,r3,4
 400b54c:	398e983a 	sll	r7,r7,r6
 400b550:	21000104 	addi	r4,r4,4
 400b554:	394ab03a 	or	r5,r7,r5
 400b558:	197fff15 	stw	r5,-4(r3)
 400b55c:	217fff17 	ldw	r5,-4(r4)
 400b560:	2a4ad83a 	srl	r5,r5,r9
 400b564:	223ff636 	bltu	r4,r8,400b540 <__alt_data_end+0xfc00b540>
 400b568:	51400115 	stw	r5,4(r10)
 400b56c:	28001a1e 	bne	r5,zero,400b5d8 <__lshift+0x140>
 400b570:	843fffc4 	addi	r16,r16,-1
 400b574:	14000415 	stw	r16,16(r2)
 400b578:	88000826 	beq	r17,zero,400b59c <__lshift+0x104>
 400b57c:	89000117 	ldw	r4,4(r17)
 400b580:	90c01317 	ldw	r3,76(r18)
 400b584:	2109883a 	add	r4,r4,r4
 400b588:	2109883a 	add	r4,r4,r4
 400b58c:	1907883a 	add	r3,r3,r4
 400b590:	19000017 	ldw	r4,0(r3)
 400b594:	89000015 	stw	r4,0(r17)
 400b598:	1c400015 	stw	r17,0(r3)
 400b59c:	dfc00617 	ldw	ra,24(sp)
 400b5a0:	dd400517 	ldw	r21,20(sp)
 400b5a4:	dd000417 	ldw	r20,16(sp)
 400b5a8:	dcc00317 	ldw	r19,12(sp)
 400b5ac:	dc800217 	ldw	r18,8(sp)
 400b5b0:	dc400117 	ldw	r17,4(sp)
 400b5b4:	dc000017 	ldw	r16,0(sp)
 400b5b8:	dec00704 	addi	sp,sp,28
 400b5bc:	f800283a 	ret
 400b5c0:	21400017 	ldw	r5,0(r4)
 400b5c4:	18c00104 	addi	r3,r3,4
 400b5c8:	21000104 	addi	r4,r4,4
 400b5cc:	197fff15 	stw	r5,-4(r3)
 400b5d0:	223ffb36 	bltu	r4,r8,400b5c0 <__alt_data_end+0xfc00b5c0>
 400b5d4:	003fe606 	br	400b570 <__alt_data_end+0xfc00b570>
 400b5d8:	9c000084 	addi	r16,r19,2
 400b5dc:	003fe406 	br	400b570 <__alt_data_end+0xfc00b570>

0400b5e0 <__mcmp>:
 400b5e0:	20800417 	ldw	r2,16(r4)
 400b5e4:	28c00417 	ldw	r3,16(r5)
 400b5e8:	10c5c83a 	sub	r2,r2,r3
 400b5ec:	1000111e 	bne	r2,zero,400b634 <__mcmp+0x54>
 400b5f0:	18c7883a 	add	r3,r3,r3
 400b5f4:	18c7883a 	add	r3,r3,r3
 400b5f8:	21000504 	addi	r4,r4,20
 400b5fc:	29400504 	addi	r5,r5,20
 400b600:	20c5883a 	add	r2,r4,r3
 400b604:	28cb883a 	add	r5,r5,r3
 400b608:	00000106 	br	400b610 <__mcmp+0x30>
 400b60c:	20800a2e 	bgeu	r4,r2,400b638 <__mcmp+0x58>
 400b610:	10bfff04 	addi	r2,r2,-4
 400b614:	297fff04 	addi	r5,r5,-4
 400b618:	11800017 	ldw	r6,0(r2)
 400b61c:	28c00017 	ldw	r3,0(r5)
 400b620:	30fffa26 	beq	r6,r3,400b60c <__alt_data_end+0xfc00b60c>
 400b624:	30c00236 	bltu	r6,r3,400b630 <__mcmp+0x50>
 400b628:	00800044 	movi	r2,1
 400b62c:	f800283a 	ret
 400b630:	00bfffc4 	movi	r2,-1
 400b634:	f800283a 	ret
 400b638:	0005883a 	mov	r2,zero
 400b63c:	f800283a 	ret

0400b640 <__mdiff>:
 400b640:	28c00417 	ldw	r3,16(r5)
 400b644:	30800417 	ldw	r2,16(r6)
 400b648:	defffa04 	addi	sp,sp,-24
 400b64c:	dcc00315 	stw	r19,12(sp)
 400b650:	dc800215 	stw	r18,8(sp)
 400b654:	dfc00515 	stw	ra,20(sp)
 400b658:	dd000415 	stw	r20,16(sp)
 400b65c:	dc400115 	stw	r17,4(sp)
 400b660:	dc000015 	stw	r16,0(sp)
 400b664:	1887c83a 	sub	r3,r3,r2
 400b668:	2825883a 	mov	r18,r5
 400b66c:	3027883a 	mov	r19,r6
 400b670:	1800141e 	bne	r3,zero,400b6c4 <__mdiff+0x84>
 400b674:	1085883a 	add	r2,r2,r2
 400b678:	1085883a 	add	r2,r2,r2
 400b67c:	2a000504 	addi	r8,r5,20
 400b680:	34000504 	addi	r16,r6,20
 400b684:	4087883a 	add	r3,r8,r2
 400b688:	8085883a 	add	r2,r16,r2
 400b68c:	00000106 	br	400b694 <__mdiff+0x54>
 400b690:	40c0592e 	bgeu	r8,r3,400b7f8 <__mdiff+0x1b8>
 400b694:	18ffff04 	addi	r3,r3,-4
 400b698:	10bfff04 	addi	r2,r2,-4
 400b69c:	19c00017 	ldw	r7,0(r3)
 400b6a0:	11400017 	ldw	r5,0(r2)
 400b6a4:	397ffa26 	beq	r7,r5,400b690 <__alt_data_end+0xfc00b690>
 400b6a8:	3940592e 	bgeu	r7,r5,400b810 <__mdiff+0x1d0>
 400b6ac:	9005883a 	mov	r2,r18
 400b6b0:	4023883a 	mov	r17,r8
 400b6b4:	9825883a 	mov	r18,r19
 400b6b8:	05000044 	movi	r20,1
 400b6bc:	1027883a 	mov	r19,r2
 400b6c0:	00000406 	br	400b6d4 <__mdiff+0x94>
 400b6c4:	18005616 	blt	r3,zero,400b820 <__mdiff+0x1e0>
 400b6c8:	34400504 	addi	r17,r6,20
 400b6cc:	2c000504 	addi	r16,r5,20
 400b6d0:	0029883a 	mov	r20,zero
 400b6d4:	91400117 	ldw	r5,4(r18)
 400b6d8:	400ac5c0 	call	400ac5c <_Balloc>
 400b6dc:	92400417 	ldw	r9,16(r18)
 400b6e0:	9b000417 	ldw	r12,16(r19)
 400b6e4:	12c00504 	addi	r11,r2,20
 400b6e8:	4a51883a 	add	r8,r9,r9
 400b6ec:	6319883a 	add	r12,r12,r12
 400b6f0:	4211883a 	add	r8,r8,r8
 400b6f4:	6319883a 	add	r12,r12,r12
 400b6f8:	15000315 	stw	r20,12(r2)
 400b6fc:	8211883a 	add	r8,r16,r8
 400b700:	8b19883a 	add	r12,r17,r12
 400b704:	0007883a 	mov	r3,zero
 400b708:	81400017 	ldw	r5,0(r16)
 400b70c:	89c00017 	ldw	r7,0(r17)
 400b710:	59800104 	addi	r6,r11,4
 400b714:	293fffcc 	andi	r4,r5,65535
 400b718:	20c7883a 	add	r3,r4,r3
 400b71c:	393fffcc 	andi	r4,r7,65535
 400b720:	1909c83a 	sub	r4,r3,r4
 400b724:	280ad43a 	srli	r5,r5,16
 400b728:	380ed43a 	srli	r7,r7,16
 400b72c:	2007d43a 	srai	r3,r4,16
 400b730:	213fffcc 	andi	r4,r4,65535
 400b734:	29cbc83a 	sub	r5,r5,r7
 400b738:	28c7883a 	add	r3,r5,r3
 400b73c:	180a943a 	slli	r5,r3,16
 400b740:	8c400104 	addi	r17,r17,4
 400b744:	84000104 	addi	r16,r16,4
 400b748:	2908b03a 	or	r4,r5,r4
 400b74c:	59000015 	stw	r4,0(r11)
 400b750:	1807d43a 	srai	r3,r3,16
 400b754:	3015883a 	mov	r10,r6
 400b758:	3017883a 	mov	r11,r6
 400b75c:	8b3fea36 	bltu	r17,r12,400b708 <__alt_data_end+0xfc00b708>
 400b760:	8200162e 	bgeu	r16,r8,400b7bc <__mdiff+0x17c>
 400b764:	8017883a 	mov	r11,r16
 400b768:	59400017 	ldw	r5,0(r11)
 400b76c:	31800104 	addi	r6,r6,4
 400b770:	5ac00104 	addi	r11,r11,4
 400b774:	293fffcc 	andi	r4,r5,65535
 400b778:	20c7883a 	add	r3,r4,r3
 400b77c:	280ed43a 	srli	r7,r5,16
 400b780:	180bd43a 	srai	r5,r3,16
 400b784:	193fffcc 	andi	r4,r3,65535
 400b788:	3947883a 	add	r3,r7,r5
 400b78c:	180a943a 	slli	r5,r3,16
 400b790:	1807d43a 	srai	r3,r3,16
 400b794:	2908b03a 	or	r4,r5,r4
 400b798:	313fff15 	stw	r4,-4(r6)
 400b79c:	5a3ff236 	bltu	r11,r8,400b768 <__alt_data_end+0xfc00b768>
 400b7a0:	0406303a 	nor	r3,zero,r16
 400b7a4:	1a07883a 	add	r3,r3,r8
 400b7a8:	1806d0ba 	srli	r3,r3,2
 400b7ac:	18c00044 	addi	r3,r3,1
 400b7b0:	18c7883a 	add	r3,r3,r3
 400b7b4:	18c7883a 	add	r3,r3,r3
 400b7b8:	50d5883a 	add	r10,r10,r3
 400b7bc:	50ffff04 	addi	r3,r10,-4
 400b7c0:	2000041e 	bne	r4,zero,400b7d4 <__mdiff+0x194>
 400b7c4:	18ffff04 	addi	r3,r3,-4
 400b7c8:	19000017 	ldw	r4,0(r3)
 400b7cc:	4a7fffc4 	addi	r9,r9,-1
 400b7d0:	203ffc26 	beq	r4,zero,400b7c4 <__alt_data_end+0xfc00b7c4>
 400b7d4:	12400415 	stw	r9,16(r2)
 400b7d8:	dfc00517 	ldw	ra,20(sp)
 400b7dc:	dd000417 	ldw	r20,16(sp)
 400b7e0:	dcc00317 	ldw	r19,12(sp)
 400b7e4:	dc800217 	ldw	r18,8(sp)
 400b7e8:	dc400117 	ldw	r17,4(sp)
 400b7ec:	dc000017 	ldw	r16,0(sp)
 400b7f0:	dec00604 	addi	sp,sp,24
 400b7f4:	f800283a 	ret
 400b7f8:	000b883a 	mov	r5,zero
 400b7fc:	400ac5c0 	call	400ac5c <_Balloc>
 400b800:	00c00044 	movi	r3,1
 400b804:	10c00415 	stw	r3,16(r2)
 400b808:	10000515 	stw	zero,20(r2)
 400b80c:	003ff206 	br	400b7d8 <__alt_data_end+0xfc00b7d8>
 400b810:	8023883a 	mov	r17,r16
 400b814:	0029883a 	mov	r20,zero
 400b818:	4021883a 	mov	r16,r8
 400b81c:	003fad06 	br	400b6d4 <__alt_data_end+0xfc00b6d4>
 400b820:	9005883a 	mov	r2,r18
 400b824:	94400504 	addi	r17,r18,20
 400b828:	9c000504 	addi	r16,r19,20
 400b82c:	9825883a 	mov	r18,r19
 400b830:	05000044 	movi	r20,1
 400b834:	1027883a 	mov	r19,r2
 400b838:	003fa606 	br	400b6d4 <__alt_data_end+0xfc00b6d4>

0400b83c <__ulp>:
 400b83c:	295ffc2c 	andhi	r5,r5,32752
 400b840:	00bf3034 	movhi	r2,64704
 400b844:	2887883a 	add	r3,r5,r2
 400b848:	00c0020e 	bge	zero,r3,400b854 <__ulp+0x18>
 400b84c:	0005883a 	mov	r2,zero
 400b850:	f800283a 	ret
 400b854:	00c7c83a 	sub	r3,zero,r3
 400b858:	1807d53a 	srai	r3,r3,20
 400b85c:	008004c4 	movi	r2,19
 400b860:	10c00b0e 	bge	r2,r3,400b890 <__ulp+0x54>
 400b864:	18bffb04 	addi	r2,r3,-20
 400b868:	01000784 	movi	r4,30
 400b86c:	0007883a 	mov	r3,zero
 400b870:	20800516 	blt	r4,r2,400b888 <__ulp+0x4c>
 400b874:	010007c4 	movi	r4,31
 400b878:	2089c83a 	sub	r4,r4,r2
 400b87c:	00800044 	movi	r2,1
 400b880:	1104983a 	sll	r2,r2,r4
 400b884:	f800283a 	ret
 400b888:	00800044 	movi	r2,1
 400b88c:	f800283a 	ret
 400b890:	01400234 	movhi	r5,8
 400b894:	28c7d83a 	sra	r3,r5,r3
 400b898:	0005883a 	mov	r2,zero
 400b89c:	f800283a 	ret

0400b8a0 <__b2d>:
 400b8a0:	defffa04 	addi	sp,sp,-24
 400b8a4:	dc000015 	stw	r16,0(sp)
 400b8a8:	24000417 	ldw	r16,16(r4)
 400b8ac:	dc400115 	stw	r17,4(sp)
 400b8b0:	24400504 	addi	r17,r4,20
 400b8b4:	8421883a 	add	r16,r16,r16
 400b8b8:	8421883a 	add	r16,r16,r16
 400b8bc:	8c21883a 	add	r16,r17,r16
 400b8c0:	dc800215 	stw	r18,8(sp)
 400b8c4:	84bfff17 	ldw	r18,-4(r16)
 400b8c8:	dd000415 	stw	r20,16(sp)
 400b8cc:	dcc00315 	stw	r19,12(sp)
 400b8d0:	9009883a 	mov	r4,r18
 400b8d4:	2829883a 	mov	r20,r5
 400b8d8:	dfc00515 	stw	ra,20(sp)
 400b8dc:	400af780 	call	400af78 <__hi0bits>
 400b8e0:	00c00804 	movi	r3,32
 400b8e4:	1889c83a 	sub	r4,r3,r2
 400b8e8:	a1000015 	stw	r4,0(r20)
 400b8ec:	01000284 	movi	r4,10
 400b8f0:	84ffff04 	addi	r19,r16,-4
 400b8f4:	20801216 	blt	r4,r2,400b940 <__b2d+0xa0>
 400b8f8:	018002c4 	movi	r6,11
 400b8fc:	308dc83a 	sub	r6,r6,r2
 400b900:	9186d83a 	srl	r3,r18,r6
 400b904:	18cffc34 	orhi	r3,r3,16368
 400b908:	8cc0212e 	bgeu	r17,r19,400b990 <__b2d+0xf0>
 400b90c:	813ffe17 	ldw	r4,-8(r16)
 400b910:	218cd83a 	srl	r6,r4,r6
 400b914:	10800544 	addi	r2,r2,21
 400b918:	9084983a 	sll	r2,r18,r2
 400b91c:	1184b03a 	or	r2,r2,r6
 400b920:	dfc00517 	ldw	ra,20(sp)
 400b924:	dd000417 	ldw	r20,16(sp)
 400b928:	dcc00317 	ldw	r19,12(sp)
 400b92c:	dc800217 	ldw	r18,8(sp)
 400b930:	dc400117 	ldw	r17,4(sp)
 400b934:	dc000017 	ldw	r16,0(sp)
 400b938:	dec00604 	addi	sp,sp,24
 400b93c:	f800283a 	ret
 400b940:	8cc00f2e 	bgeu	r17,r19,400b980 <__b2d+0xe0>
 400b944:	117ffd44 	addi	r5,r2,-11
 400b948:	80bffe17 	ldw	r2,-8(r16)
 400b94c:	28000e26 	beq	r5,zero,400b988 <__b2d+0xe8>
 400b950:	1949c83a 	sub	r4,r3,r5
 400b954:	9164983a 	sll	r18,r18,r5
 400b958:	1106d83a 	srl	r3,r2,r4
 400b95c:	81bffe04 	addi	r6,r16,-8
 400b960:	948ffc34 	orhi	r18,r18,16368
 400b964:	90c6b03a 	or	r3,r18,r3
 400b968:	89800e2e 	bgeu	r17,r6,400b9a4 <__b2d+0x104>
 400b96c:	81bffd17 	ldw	r6,-12(r16)
 400b970:	1144983a 	sll	r2,r2,r5
 400b974:	310ad83a 	srl	r5,r6,r4
 400b978:	2884b03a 	or	r2,r5,r2
 400b97c:	003fe806 	br	400b920 <__alt_data_end+0xfc00b920>
 400b980:	10bffd44 	addi	r2,r2,-11
 400b984:	1000041e 	bne	r2,zero,400b998 <__b2d+0xf8>
 400b988:	90cffc34 	orhi	r3,r18,16368
 400b98c:	003fe406 	br	400b920 <__alt_data_end+0xfc00b920>
 400b990:	000d883a 	mov	r6,zero
 400b994:	003fdf06 	br	400b914 <__alt_data_end+0xfc00b914>
 400b998:	90a4983a 	sll	r18,r18,r2
 400b99c:	0005883a 	mov	r2,zero
 400b9a0:	003ff906 	br	400b988 <__alt_data_end+0xfc00b988>
 400b9a4:	1144983a 	sll	r2,r2,r5
 400b9a8:	003fdd06 	br	400b920 <__alt_data_end+0xfc00b920>

0400b9ac <__d2b>:
 400b9ac:	defff804 	addi	sp,sp,-32
 400b9b0:	dc000215 	stw	r16,8(sp)
 400b9b4:	3021883a 	mov	r16,r6
 400b9b8:	dc400315 	stw	r17,12(sp)
 400b9bc:	8022907a 	slli	r17,r16,1
 400b9c0:	dd000615 	stw	r20,24(sp)
 400b9c4:	2829883a 	mov	r20,r5
 400b9c8:	01400044 	movi	r5,1
 400b9cc:	dcc00515 	stw	r19,20(sp)
 400b9d0:	dc800415 	stw	r18,16(sp)
 400b9d4:	dfc00715 	stw	ra,28(sp)
 400b9d8:	3825883a 	mov	r18,r7
 400b9dc:	8822d57a 	srli	r17,r17,21
 400b9e0:	400ac5c0 	call	400ac5c <_Balloc>
 400b9e4:	1027883a 	mov	r19,r2
 400b9e8:	00800434 	movhi	r2,16
 400b9ec:	10bfffc4 	addi	r2,r2,-1
 400b9f0:	808c703a 	and	r6,r16,r2
 400b9f4:	88000126 	beq	r17,zero,400b9fc <__d2b+0x50>
 400b9f8:	31800434 	orhi	r6,r6,16
 400b9fc:	d9800015 	stw	r6,0(sp)
 400ba00:	a0002426 	beq	r20,zero,400ba94 <__d2b+0xe8>
 400ba04:	d9000104 	addi	r4,sp,4
 400ba08:	dd000115 	stw	r20,4(sp)
 400ba0c:	400afe00 	call	400afe0 <__lo0bits>
 400ba10:	d8c00017 	ldw	r3,0(sp)
 400ba14:	10002f1e 	bne	r2,zero,400bad4 <__d2b+0x128>
 400ba18:	d9000117 	ldw	r4,4(sp)
 400ba1c:	99000515 	stw	r4,20(r19)
 400ba20:	1821003a 	cmpeq	r16,r3,zero
 400ba24:	01000084 	movi	r4,2
 400ba28:	2421c83a 	sub	r16,r4,r16
 400ba2c:	98c00615 	stw	r3,24(r19)
 400ba30:	9c000415 	stw	r16,16(r19)
 400ba34:	88001f1e 	bne	r17,zero,400bab4 <__d2b+0x108>
 400ba38:	10bef384 	addi	r2,r2,-1074
 400ba3c:	90800015 	stw	r2,0(r18)
 400ba40:	00900034 	movhi	r2,16384
 400ba44:	10bfffc4 	addi	r2,r2,-1
 400ba48:	8085883a 	add	r2,r16,r2
 400ba4c:	1085883a 	add	r2,r2,r2
 400ba50:	1085883a 	add	r2,r2,r2
 400ba54:	9885883a 	add	r2,r19,r2
 400ba58:	11000517 	ldw	r4,20(r2)
 400ba5c:	8020917a 	slli	r16,r16,5
 400ba60:	400af780 	call	400af78 <__hi0bits>
 400ba64:	d8c00817 	ldw	r3,32(sp)
 400ba68:	8085c83a 	sub	r2,r16,r2
 400ba6c:	18800015 	stw	r2,0(r3)
 400ba70:	9805883a 	mov	r2,r19
 400ba74:	dfc00717 	ldw	ra,28(sp)
 400ba78:	dd000617 	ldw	r20,24(sp)
 400ba7c:	dcc00517 	ldw	r19,20(sp)
 400ba80:	dc800417 	ldw	r18,16(sp)
 400ba84:	dc400317 	ldw	r17,12(sp)
 400ba88:	dc000217 	ldw	r16,8(sp)
 400ba8c:	dec00804 	addi	sp,sp,32
 400ba90:	f800283a 	ret
 400ba94:	d809883a 	mov	r4,sp
 400ba98:	400afe00 	call	400afe0 <__lo0bits>
 400ba9c:	d8c00017 	ldw	r3,0(sp)
 400baa0:	04000044 	movi	r16,1
 400baa4:	9c000415 	stw	r16,16(r19)
 400baa8:	98c00515 	stw	r3,20(r19)
 400baac:	10800804 	addi	r2,r2,32
 400bab0:	883fe126 	beq	r17,zero,400ba38 <__alt_data_end+0xfc00ba38>
 400bab4:	00c00d44 	movi	r3,53
 400bab8:	8c7ef344 	addi	r17,r17,-1075
 400babc:	88a3883a 	add	r17,r17,r2
 400bac0:	1885c83a 	sub	r2,r3,r2
 400bac4:	d8c00817 	ldw	r3,32(sp)
 400bac8:	94400015 	stw	r17,0(r18)
 400bacc:	18800015 	stw	r2,0(r3)
 400bad0:	003fe706 	br	400ba70 <__alt_data_end+0xfc00ba70>
 400bad4:	01000804 	movi	r4,32
 400bad8:	2089c83a 	sub	r4,r4,r2
 400badc:	1908983a 	sll	r4,r3,r4
 400bae0:	d9400117 	ldw	r5,4(sp)
 400bae4:	1886d83a 	srl	r3,r3,r2
 400bae8:	2148b03a 	or	r4,r4,r5
 400baec:	99000515 	stw	r4,20(r19)
 400baf0:	d8c00015 	stw	r3,0(sp)
 400baf4:	003fca06 	br	400ba20 <__alt_data_end+0xfc00ba20>

0400baf8 <__ratio>:
 400baf8:	defff904 	addi	sp,sp,-28
 400bafc:	dc400315 	stw	r17,12(sp)
 400bb00:	2823883a 	mov	r17,r5
 400bb04:	d9400104 	addi	r5,sp,4
 400bb08:	dfc00615 	stw	ra,24(sp)
 400bb0c:	dcc00515 	stw	r19,20(sp)
 400bb10:	dc800415 	stw	r18,16(sp)
 400bb14:	2027883a 	mov	r19,r4
 400bb18:	dc000215 	stw	r16,8(sp)
 400bb1c:	400b8a00 	call	400b8a0 <__b2d>
 400bb20:	d80b883a 	mov	r5,sp
 400bb24:	8809883a 	mov	r4,r17
 400bb28:	1025883a 	mov	r18,r2
 400bb2c:	1821883a 	mov	r16,r3
 400bb30:	400b8a00 	call	400b8a0 <__b2d>
 400bb34:	8a000417 	ldw	r8,16(r17)
 400bb38:	99000417 	ldw	r4,16(r19)
 400bb3c:	d9400117 	ldw	r5,4(sp)
 400bb40:	2209c83a 	sub	r4,r4,r8
 400bb44:	2010917a 	slli	r8,r4,5
 400bb48:	d9000017 	ldw	r4,0(sp)
 400bb4c:	2909c83a 	sub	r4,r5,r4
 400bb50:	4109883a 	add	r4,r8,r4
 400bb54:	01000e0e 	bge	zero,r4,400bb90 <__ratio+0x98>
 400bb58:	2008953a 	slli	r4,r4,20
 400bb5c:	2421883a 	add	r16,r4,r16
 400bb60:	100d883a 	mov	r6,r2
 400bb64:	180f883a 	mov	r7,r3
 400bb68:	9009883a 	mov	r4,r18
 400bb6c:	800b883a 	mov	r5,r16
 400bb70:	40041f80 	call	40041f8 <__divdf3>
 400bb74:	dfc00617 	ldw	ra,24(sp)
 400bb78:	dcc00517 	ldw	r19,20(sp)
 400bb7c:	dc800417 	ldw	r18,16(sp)
 400bb80:	dc400317 	ldw	r17,12(sp)
 400bb84:	dc000217 	ldw	r16,8(sp)
 400bb88:	dec00704 	addi	sp,sp,28
 400bb8c:	f800283a 	ret
 400bb90:	2008953a 	slli	r4,r4,20
 400bb94:	1907c83a 	sub	r3,r3,r4
 400bb98:	003ff106 	br	400bb60 <__alt_data_end+0xfc00bb60>

0400bb9c <_mprec_log10>:
 400bb9c:	defffe04 	addi	sp,sp,-8
 400bba0:	dc000015 	stw	r16,0(sp)
 400bba4:	dfc00115 	stw	ra,4(sp)
 400bba8:	008005c4 	movi	r2,23
 400bbac:	2021883a 	mov	r16,r4
 400bbb0:	11000d0e 	bge	r2,r4,400bbe8 <_mprec_log10+0x4c>
 400bbb4:	0005883a 	mov	r2,zero
 400bbb8:	00cffc34 	movhi	r3,16368
 400bbbc:	843fffc4 	addi	r16,r16,-1
 400bbc0:	000d883a 	mov	r6,zero
 400bbc4:	01d00934 	movhi	r7,16420
 400bbc8:	1009883a 	mov	r4,r2
 400bbcc:	180b883a 	mov	r5,r3
 400bbd0:	4004d980 	call	4004d98 <__muldf3>
 400bbd4:	803ff91e 	bne	r16,zero,400bbbc <__alt_data_end+0xfc00bbbc>
 400bbd8:	dfc00117 	ldw	ra,4(sp)
 400bbdc:	dc000017 	ldw	r16,0(sp)
 400bbe0:	dec00204 	addi	sp,sp,8
 400bbe4:	f800283a 	ret
 400bbe8:	202090fa 	slli	r16,r4,3
 400bbec:	00810074 	movhi	r2,1025
 400bbf0:	108bb104 	addi	r2,r2,11972
 400bbf4:	1421883a 	add	r16,r2,r16
 400bbf8:	80800017 	ldw	r2,0(r16)
 400bbfc:	80c00117 	ldw	r3,4(r16)
 400bc00:	dfc00117 	ldw	ra,4(sp)
 400bc04:	dc000017 	ldw	r16,0(sp)
 400bc08:	dec00204 	addi	sp,sp,8
 400bc0c:	f800283a 	ret

0400bc10 <__copybits>:
 400bc10:	297fffc4 	addi	r5,r5,-1
 400bc14:	280fd17a 	srai	r7,r5,5
 400bc18:	30c00417 	ldw	r3,16(r6)
 400bc1c:	30800504 	addi	r2,r6,20
 400bc20:	39c00044 	addi	r7,r7,1
 400bc24:	18c7883a 	add	r3,r3,r3
 400bc28:	39cf883a 	add	r7,r7,r7
 400bc2c:	18c7883a 	add	r3,r3,r3
 400bc30:	39cf883a 	add	r7,r7,r7
 400bc34:	10c7883a 	add	r3,r2,r3
 400bc38:	21cf883a 	add	r7,r4,r7
 400bc3c:	10c00d2e 	bgeu	r2,r3,400bc74 <__copybits+0x64>
 400bc40:	200b883a 	mov	r5,r4
 400bc44:	12000017 	ldw	r8,0(r2)
 400bc48:	29400104 	addi	r5,r5,4
 400bc4c:	10800104 	addi	r2,r2,4
 400bc50:	2a3fff15 	stw	r8,-4(r5)
 400bc54:	10fffb36 	bltu	r2,r3,400bc44 <__alt_data_end+0xfc00bc44>
 400bc58:	1985c83a 	sub	r2,r3,r6
 400bc5c:	10bffac4 	addi	r2,r2,-21
 400bc60:	1004d0ba 	srli	r2,r2,2
 400bc64:	10800044 	addi	r2,r2,1
 400bc68:	1085883a 	add	r2,r2,r2
 400bc6c:	1085883a 	add	r2,r2,r2
 400bc70:	2089883a 	add	r4,r4,r2
 400bc74:	21c0032e 	bgeu	r4,r7,400bc84 <__copybits+0x74>
 400bc78:	20000015 	stw	zero,0(r4)
 400bc7c:	21000104 	addi	r4,r4,4
 400bc80:	21fffd36 	bltu	r4,r7,400bc78 <__alt_data_end+0xfc00bc78>
 400bc84:	f800283a 	ret

0400bc88 <__any_on>:
 400bc88:	20c00417 	ldw	r3,16(r4)
 400bc8c:	2805d17a 	srai	r2,r5,5
 400bc90:	21000504 	addi	r4,r4,20
 400bc94:	18800d0e 	bge	r3,r2,400bccc <__any_on+0x44>
 400bc98:	18c7883a 	add	r3,r3,r3
 400bc9c:	18c7883a 	add	r3,r3,r3
 400bca0:	20c7883a 	add	r3,r4,r3
 400bca4:	20c0192e 	bgeu	r4,r3,400bd0c <__any_on+0x84>
 400bca8:	18bfff17 	ldw	r2,-4(r3)
 400bcac:	18ffff04 	addi	r3,r3,-4
 400bcb0:	1000041e 	bne	r2,zero,400bcc4 <__any_on+0x3c>
 400bcb4:	20c0142e 	bgeu	r4,r3,400bd08 <__any_on+0x80>
 400bcb8:	18ffff04 	addi	r3,r3,-4
 400bcbc:	19400017 	ldw	r5,0(r3)
 400bcc0:	283ffc26 	beq	r5,zero,400bcb4 <__alt_data_end+0xfc00bcb4>
 400bcc4:	00800044 	movi	r2,1
 400bcc8:	f800283a 	ret
 400bccc:	10c00a0e 	bge	r2,r3,400bcf8 <__any_on+0x70>
 400bcd0:	1085883a 	add	r2,r2,r2
 400bcd4:	1085883a 	add	r2,r2,r2
 400bcd8:	294007cc 	andi	r5,r5,31
 400bcdc:	2087883a 	add	r3,r4,r2
 400bce0:	283ff026 	beq	r5,zero,400bca4 <__alt_data_end+0xfc00bca4>
 400bce4:	19800017 	ldw	r6,0(r3)
 400bce8:	3144d83a 	srl	r2,r6,r5
 400bcec:	114a983a 	sll	r5,r2,r5
 400bcf0:	317ff41e 	bne	r6,r5,400bcc4 <__alt_data_end+0xfc00bcc4>
 400bcf4:	003feb06 	br	400bca4 <__alt_data_end+0xfc00bca4>
 400bcf8:	1085883a 	add	r2,r2,r2
 400bcfc:	1085883a 	add	r2,r2,r2
 400bd00:	2087883a 	add	r3,r4,r2
 400bd04:	003fe706 	br	400bca4 <__alt_data_end+0xfc00bca4>
 400bd08:	f800283a 	ret
 400bd0c:	0005883a 	mov	r2,zero
 400bd10:	f800283a 	ret

0400bd14 <__fpclassifyd>:
 400bd14:	00a00034 	movhi	r2,32768
 400bd18:	10bfffc4 	addi	r2,r2,-1
 400bd1c:	2884703a 	and	r2,r5,r2
 400bd20:	10000726 	beq	r2,zero,400bd40 <__fpclassifyd+0x2c>
 400bd24:	00fffc34 	movhi	r3,65520
 400bd28:	019ff834 	movhi	r6,32736
 400bd2c:	28c7883a 	add	r3,r5,r3
 400bd30:	31bfffc4 	addi	r6,r6,-1
 400bd34:	30c00536 	bltu	r6,r3,400bd4c <__fpclassifyd+0x38>
 400bd38:	00800104 	movi	r2,4
 400bd3c:	f800283a 	ret
 400bd40:	2000021e 	bne	r4,zero,400bd4c <__fpclassifyd+0x38>
 400bd44:	00800084 	movi	r2,2
 400bd48:	f800283a 	ret
 400bd4c:	00dffc34 	movhi	r3,32752
 400bd50:	019ff834 	movhi	r6,32736
 400bd54:	28cb883a 	add	r5,r5,r3
 400bd58:	31bfffc4 	addi	r6,r6,-1
 400bd5c:	317ff62e 	bgeu	r6,r5,400bd38 <__alt_data_end+0xfc00bd38>
 400bd60:	01400434 	movhi	r5,16
 400bd64:	297fffc4 	addi	r5,r5,-1
 400bd68:	28800236 	bltu	r5,r2,400bd74 <__fpclassifyd+0x60>
 400bd6c:	008000c4 	movi	r2,3
 400bd70:	f800283a 	ret
 400bd74:	10c00226 	beq	r2,r3,400bd80 <__fpclassifyd+0x6c>
 400bd78:	0005883a 	mov	r2,zero
 400bd7c:	f800283a 	ret
 400bd80:	2005003a 	cmpeq	r2,r4,zero
 400bd84:	f800283a 	ret

0400bd88 <_sbrk_r>:
 400bd88:	defffd04 	addi	sp,sp,-12
 400bd8c:	dc000015 	stw	r16,0(sp)
 400bd90:	04010074 	movhi	r16,1025
 400bd94:	dc400115 	stw	r17,4(sp)
 400bd98:	8413cc04 	addi	r16,r16,20272
 400bd9c:	2023883a 	mov	r17,r4
 400bda0:	2809883a 	mov	r4,r5
 400bda4:	dfc00215 	stw	ra,8(sp)
 400bda8:	80000015 	stw	zero,0(r16)
 400bdac:	400f0440 	call	400f044 <sbrk>
 400bdb0:	00ffffc4 	movi	r3,-1
 400bdb4:	10c00526 	beq	r2,r3,400bdcc <_sbrk_r+0x44>
 400bdb8:	dfc00217 	ldw	ra,8(sp)
 400bdbc:	dc400117 	ldw	r17,4(sp)
 400bdc0:	dc000017 	ldw	r16,0(sp)
 400bdc4:	dec00304 	addi	sp,sp,12
 400bdc8:	f800283a 	ret
 400bdcc:	80c00017 	ldw	r3,0(r16)
 400bdd0:	183ff926 	beq	r3,zero,400bdb8 <__alt_data_end+0xfc00bdb8>
 400bdd4:	88c00015 	stw	r3,0(r17)
 400bdd8:	003ff706 	br	400bdb8 <__alt_data_end+0xfc00bdb8>

0400bddc <strcmp>:
 400bddc:	2144b03a 	or	r2,r4,r5
 400bde0:	108000cc 	andi	r2,r2,3
 400bde4:	1000171e 	bne	r2,zero,400be44 <strcmp+0x68>
 400bde8:	20800017 	ldw	r2,0(r4)
 400bdec:	28c00017 	ldw	r3,0(r5)
 400bdf0:	10c0141e 	bne	r2,r3,400be44 <strcmp+0x68>
 400bdf4:	027fbff4 	movhi	r9,65279
 400bdf8:	4a7fbfc4 	addi	r9,r9,-257
 400bdfc:	0086303a 	nor	r3,zero,r2
 400be00:	02202074 	movhi	r8,32897
 400be04:	1245883a 	add	r2,r2,r9
 400be08:	42202004 	addi	r8,r8,-32640
 400be0c:	10c4703a 	and	r2,r2,r3
 400be10:	1204703a 	and	r2,r2,r8
 400be14:	10000226 	beq	r2,zero,400be20 <strcmp+0x44>
 400be18:	00002306 	br	400bea8 <strcmp+0xcc>
 400be1c:	1000221e 	bne	r2,zero,400bea8 <strcmp+0xcc>
 400be20:	21000104 	addi	r4,r4,4
 400be24:	20c00017 	ldw	r3,0(r4)
 400be28:	29400104 	addi	r5,r5,4
 400be2c:	29800017 	ldw	r6,0(r5)
 400be30:	1a4f883a 	add	r7,r3,r9
 400be34:	00c4303a 	nor	r2,zero,r3
 400be38:	3884703a 	and	r2,r7,r2
 400be3c:	1204703a 	and	r2,r2,r8
 400be40:	19bff626 	beq	r3,r6,400be1c <__alt_data_end+0xfc00be1c>
 400be44:	20800003 	ldbu	r2,0(r4)
 400be48:	10c03fcc 	andi	r3,r2,255
 400be4c:	18c0201c 	xori	r3,r3,128
 400be50:	18ffe004 	addi	r3,r3,-128
 400be54:	18000c26 	beq	r3,zero,400be88 <strcmp+0xac>
 400be58:	29800007 	ldb	r6,0(r5)
 400be5c:	19800326 	beq	r3,r6,400be6c <strcmp+0x90>
 400be60:	00001306 	br	400beb0 <strcmp+0xd4>
 400be64:	29800007 	ldb	r6,0(r5)
 400be68:	11800b1e 	bne	r2,r6,400be98 <strcmp+0xbc>
 400be6c:	21000044 	addi	r4,r4,1
 400be70:	20c00003 	ldbu	r3,0(r4)
 400be74:	29400044 	addi	r5,r5,1
 400be78:	18803fcc 	andi	r2,r3,255
 400be7c:	1080201c 	xori	r2,r2,128
 400be80:	10bfe004 	addi	r2,r2,-128
 400be84:	103ff71e 	bne	r2,zero,400be64 <__alt_data_end+0xfc00be64>
 400be88:	0007883a 	mov	r3,zero
 400be8c:	28800003 	ldbu	r2,0(r5)
 400be90:	1885c83a 	sub	r2,r3,r2
 400be94:	f800283a 	ret
 400be98:	28800003 	ldbu	r2,0(r5)
 400be9c:	18c03fcc 	andi	r3,r3,255
 400bea0:	1885c83a 	sub	r2,r3,r2
 400bea4:	f800283a 	ret
 400bea8:	0005883a 	mov	r2,zero
 400beac:	f800283a 	ret
 400beb0:	10c03fcc 	andi	r3,r2,255
 400beb4:	003ff506 	br	400be8c <__alt_data_end+0xfc00be8c>

0400beb8 <strlen>:
 400beb8:	208000cc 	andi	r2,r4,3
 400bebc:	10002026 	beq	r2,zero,400bf40 <strlen+0x88>
 400bec0:	20800007 	ldb	r2,0(r4)
 400bec4:	10002026 	beq	r2,zero,400bf48 <strlen+0x90>
 400bec8:	2005883a 	mov	r2,r4
 400becc:	00000206 	br	400bed8 <strlen+0x20>
 400bed0:	10c00007 	ldb	r3,0(r2)
 400bed4:	18001826 	beq	r3,zero,400bf38 <strlen+0x80>
 400bed8:	10800044 	addi	r2,r2,1
 400bedc:	10c000cc 	andi	r3,r2,3
 400bee0:	183ffb1e 	bne	r3,zero,400bed0 <__alt_data_end+0xfc00bed0>
 400bee4:	10c00017 	ldw	r3,0(r2)
 400bee8:	01ffbff4 	movhi	r7,65279
 400beec:	39ffbfc4 	addi	r7,r7,-257
 400bef0:	00ca303a 	nor	r5,zero,r3
 400bef4:	01a02074 	movhi	r6,32897
 400bef8:	19c7883a 	add	r3,r3,r7
 400befc:	31a02004 	addi	r6,r6,-32640
 400bf00:	1946703a 	and	r3,r3,r5
 400bf04:	1986703a 	and	r3,r3,r6
 400bf08:	1800091e 	bne	r3,zero,400bf30 <strlen+0x78>
 400bf0c:	10800104 	addi	r2,r2,4
 400bf10:	10c00017 	ldw	r3,0(r2)
 400bf14:	19cb883a 	add	r5,r3,r7
 400bf18:	00c6303a 	nor	r3,zero,r3
 400bf1c:	28c6703a 	and	r3,r5,r3
 400bf20:	1986703a 	and	r3,r3,r6
 400bf24:	183ff926 	beq	r3,zero,400bf0c <__alt_data_end+0xfc00bf0c>
 400bf28:	00000106 	br	400bf30 <strlen+0x78>
 400bf2c:	10800044 	addi	r2,r2,1
 400bf30:	10c00007 	ldb	r3,0(r2)
 400bf34:	183ffd1e 	bne	r3,zero,400bf2c <__alt_data_end+0xfc00bf2c>
 400bf38:	1105c83a 	sub	r2,r2,r4
 400bf3c:	f800283a 	ret
 400bf40:	2005883a 	mov	r2,r4
 400bf44:	003fe706 	br	400bee4 <__alt_data_end+0xfc00bee4>
 400bf48:	0005883a 	mov	r2,zero
 400bf4c:	f800283a 	ret

0400bf50 <__ssprint_r>:
 400bf50:	30800217 	ldw	r2,8(r6)
 400bf54:	defff604 	addi	sp,sp,-40
 400bf58:	dc800215 	stw	r18,8(sp)
 400bf5c:	dfc00915 	stw	ra,36(sp)
 400bf60:	df000815 	stw	fp,32(sp)
 400bf64:	ddc00715 	stw	r23,28(sp)
 400bf68:	dd800615 	stw	r22,24(sp)
 400bf6c:	dd400515 	stw	r21,20(sp)
 400bf70:	dd000415 	stw	r20,16(sp)
 400bf74:	dcc00315 	stw	r19,12(sp)
 400bf78:	dc400115 	stw	r17,4(sp)
 400bf7c:	dc000015 	stw	r16,0(sp)
 400bf80:	3025883a 	mov	r18,r6
 400bf84:	10005826 	beq	r2,zero,400c0e8 <__ssprint_r+0x198>
 400bf88:	2027883a 	mov	r19,r4
 400bf8c:	35c00017 	ldw	r23,0(r6)
 400bf90:	29000017 	ldw	r4,0(r5)
 400bf94:	28800217 	ldw	r2,8(r5)
 400bf98:	2823883a 	mov	r17,r5
 400bf9c:	0039883a 	mov	fp,zero
 400bfa0:	0021883a 	mov	r16,zero
 400bfa4:	80003926 	beq	r16,zero,400c08c <__ssprint_r+0x13c>
 400bfa8:	102b883a 	mov	r21,r2
 400bfac:	102d883a 	mov	r22,r2
 400bfb0:	80803a36 	bltu	r16,r2,400c09c <__ssprint_r+0x14c>
 400bfb4:	88c0030b 	ldhu	r3,12(r17)
 400bfb8:	1881200c 	andi	r2,r3,1152
 400bfbc:	10002626 	beq	r2,zero,400c058 <__ssprint_r+0x108>
 400bfc0:	88800517 	ldw	r2,20(r17)
 400bfc4:	89400417 	ldw	r5,16(r17)
 400bfc8:	81800044 	addi	r6,r16,1
 400bfcc:	108f883a 	add	r7,r2,r2
 400bfd0:	3885883a 	add	r2,r7,r2
 400bfd4:	100ed7fa 	srli	r7,r2,31
 400bfd8:	216dc83a 	sub	r22,r4,r5
 400bfdc:	3589883a 	add	r4,r6,r22
 400bfe0:	3885883a 	add	r2,r7,r2
 400bfe4:	102bd07a 	srai	r21,r2,1
 400bfe8:	a80d883a 	mov	r6,r21
 400bfec:	a900022e 	bgeu	r21,r4,400bff8 <__ssprint_r+0xa8>
 400bff0:	202b883a 	mov	r21,r4
 400bff4:	200d883a 	mov	r6,r4
 400bff8:	18c1000c 	andi	r3,r3,1024
 400bffc:	18002a26 	beq	r3,zero,400c0a8 <__ssprint_r+0x158>
 400c000:	300b883a 	mov	r5,r6
 400c004:	9809883a 	mov	r4,r19
 400c008:	400a36c0 	call	400a36c <_malloc_r>
 400c00c:	1029883a 	mov	r20,r2
 400c010:	10002c26 	beq	r2,zero,400c0c4 <__ssprint_r+0x174>
 400c014:	89400417 	ldw	r5,16(r17)
 400c018:	b00d883a 	mov	r6,r22
 400c01c:	1009883a 	mov	r4,r2
 400c020:	40064200 	call	4006420 <memcpy>
 400c024:	8880030b 	ldhu	r2,12(r17)
 400c028:	00fedfc4 	movi	r3,-1153
 400c02c:	10c4703a 	and	r2,r2,r3
 400c030:	10802014 	ori	r2,r2,128
 400c034:	8880030d 	sth	r2,12(r17)
 400c038:	a589883a 	add	r4,r20,r22
 400c03c:	adadc83a 	sub	r22,r21,r22
 400c040:	8d400515 	stw	r21,20(r17)
 400c044:	8d800215 	stw	r22,8(r17)
 400c048:	8d000415 	stw	r20,16(r17)
 400c04c:	89000015 	stw	r4,0(r17)
 400c050:	802b883a 	mov	r21,r16
 400c054:	802d883a 	mov	r22,r16
 400c058:	b00d883a 	mov	r6,r22
 400c05c:	e00b883a 	mov	r5,fp
 400c060:	400d9d00 	call	400d9d0 <memmove>
 400c064:	88800217 	ldw	r2,8(r17)
 400c068:	89000017 	ldw	r4,0(r17)
 400c06c:	90c00217 	ldw	r3,8(r18)
 400c070:	1545c83a 	sub	r2,r2,r21
 400c074:	2589883a 	add	r4,r4,r22
 400c078:	88800215 	stw	r2,8(r17)
 400c07c:	89000015 	stw	r4,0(r17)
 400c080:	1c21c83a 	sub	r16,r3,r16
 400c084:	94000215 	stw	r16,8(r18)
 400c088:	80001726 	beq	r16,zero,400c0e8 <__ssprint_r+0x198>
 400c08c:	bf000017 	ldw	fp,0(r23)
 400c090:	bc000117 	ldw	r16,4(r23)
 400c094:	bdc00204 	addi	r23,r23,8
 400c098:	003fc206 	br	400bfa4 <__alt_data_end+0xfc00bfa4>
 400c09c:	802b883a 	mov	r21,r16
 400c0a0:	802d883a 	mov	r22,r16
 400c0a4:	003fec06 	br	400c058 <__alt_data_end+0xfc00c058>
 400c0a8:	9809883a 	mov	r4,r19
 400c0ac:	400dc540 	call	400dc54 <_realloc_r>
 400c0b0:	1029883a 	mov	r20,r2
 400c0b4:	103fe01e 	bne	r2,zero,400c038 <__alt_data_end+0xfc00c038>
 400c0b8:	89400417 	ldw	r5,16(r17)
 400c0bc:	9809883a 	mov	r4,r19
 400c0c0:	400d6c00 	call	400d6c0 <_free_r>
 400c0c4:	88c0030b 	ldhu	r3,12(r17)
 400c0c8:	00800304 	movi	r2,12
 400c0cc:	98800015 	stw	r2,0(r19)
 400c0d0:	18c01014 	ori	r3,r3,64
 400c0d4:	88c0030d 	sth	r3,12(r17)
 400c0d8:	00bfffc4 	movi	r2,-1
 400c0dc:	90000215 	stw	zero,8(r18)
 400c0e0:	90000115 	stw	zero,4(r18)
 400c0e4:	00000206 	br	400c0f0 <__ssprint_r+0x1a0>
 400c0e8:	90000115 	stw	zero,4(r18)
 400c0ec:	0005883a 	mov	r2,zero
 400c0f0:	dfc00917 	ldw	ra,36(sp)
 400c0f4:	df000817 	ldw	fp,32(sp)
 400c0f8:	ddc00717 	ldw	r23,28(sp)
 400c0fc:	dd800617 	ldw	r22,24(sp)
 400c100:	dd400517 	ldw	r21,20(sp)
 400c104:	dd000417 	ldw	r20,16(sp)
 400c108:	dcc00317 	ldw	r19,12(sp)
 400c10c:	dc800217 	ldw	r18,8(sp)
 400c110:	dc400117 	ldw	r17,4(sp)
 400c114:	dc000017 	ldw	r16,0(sp)
 400c118:	dec00a04 	addi	sp,sp,40
 400c11c:	f800283a 	ret

0400c120 <___svfiprintf_internal_r>:
 400c120:	2880030b 	ldhu	r2,12(r5)
 400c124:	deffc804 	addi	sp,sp,-224
 400c128:	dcc03115 	stw	r19,196(sp)
 400c12c:	dfc03715 	stw	ra,220(sp)
 400c130:	df003615 	stw	fp,216(sp)
 400c134:	ddc03515 	stw	r23,212(sp)
 400c138:	dd803415 	stw	r22,208(sp)
 400c13c:	dd403315 	stw	r21,204(sp)
 400c140:	dd003215 	stw	r20,200(sp)
 400c144:	dc803015 	stw	r18,192(sp)
 400c148:	dc402f15 	stw	r17,188(sp)
 400c14c:	dc002e15 	stw	r16,184(sp)
 400c150:	d9402315 	stw	r5,140(sp)
 400c154:	d9002715 	stw	r4,156(sp)
 400c158:	1080200c 	andi	r2,r2,128
 400c15c:	d9c02415 	stw	r7,144(sp)
 400c160:	3027883a 	mov	r19,r6
 400c164:	10000226 	beq	r2,zero,400c170 <___svfiprintf_internal_r+0x50>
 400c168:	28800417 	ldw	r2,16(r5)
 400c16c:	10046d26 	beq	r2,zero,400d324 <___svfiprintf_internal_r+0x1204>
 400c170:	d8801a04 	addi	r2,sp,104
 400c174:	d8c019c4 	addi	r3,sp,103
 400c178:	05810074 	movhi	r22,1025
 400c17c:	10c9c83a 	sub	r4,r2,r3
 400c180:	b58be304 	addi	r22,r22,12172
 400c184:	d8801e15 	stw	r2,120(sp)
 400c188:	d8c01f15 	stw	r3,124(sp)
 400c18c:	dec01a15 	stw	sp,104(sp)
 400c190:	d8001c15 	stw	zero,112(sp)
 400c194:	d8001b15 	stw	zero,108(sp)
 400c198:	d811883a 	mov	r8,sp
 400c19c:	d8002915 	stw	zero,164(sp)
 400c1a0:	d8002615 	stw	zero,152(sp)
 400c1a4:	d9002c15 	stw	r4,176(sp)
 400c1a8:	98800007 	ldb	r2,0(r19)
 400c1ac:	10031426 	beq	r2,zero,400ce00 <___svfiprintf_internal_r+0xce0>
 400c1b0:	00c00944 	movi	r3,37
 400c1b4:	9825883a 	mov	r18,r19
 400c1b8:	10c0021e 	bne	r2,r3,400c1c4 <___svfiprintf_internal_r+0xa4>
 400c1bc:	00001406 	br	400c210 <___svfiprintf_internal_r+0xf0>
 400c1c0:	10c00326 	beq	r2,r3,400c1d0 <___svfiprintf_internal_r+0xb0>
 400c1c4:	94800044 	addi	r18,r18,1
 400c1c8:	90800007 	ldb	r2,0(r18)
 400c1cc:	103ffc1e 	bne	r2,zero,400c1c0 <__alt_data_end+0xfc00c1c0>
 400c1d0:	94e1c83a 	sub	r16,r18,r19
 400c1d4:	80000e26 	beq	r16,zero,400c210 <___svfiprintf_internal_r+0xf0>
 400c1d8:	d8c01c17 	ldw	r3,112(sp)
 400c1dc:	d8801b17 	ldw	r2,108(sp)
 400c1e0:	44c00015 	stw	r19,0(r8)
 400c1e4:	1c07883a 	add	r3,r3,r16
 400c1e8:	10800044 	addi	r2,r2,1
 400c1ec:	d8c01c15 	stw	r3,112(sp)
 400c1f0:	44000115 	stw	r16,4(r8)
 400c1f4:	d8801b15 	stw	r2,108(sp)
 400c1f8:	00c001c4 	movi	r3,7
 400c1fc:	18835c16 	blt	r3,r2,400cf70 <___svfiprintf_internal_r+0xe50>
 400c200:	42000204 	addi	r8,r8,8
 400c204:	d9402617 	ldw	r5,152(sp)
 400c208:	2c0b883a 	add	r5,r5,r16
 400c20c:	d9402615 	stw	r5,152(sp)
 400c210:	90800007 	ldb	r2,0(r18)
 400c214:	1002fc26 	beq	r2,zero,400ce08 <___svfiprintf_internal_r+0xce8>
 400c218:	0023883a 	mov	r17,zero
 400c21c:	00bfffc4 	movi	r2,-1
 400c220:	0021883a 	mov	r16,zero
 400c224:	94c00044 	addi	r19,r18,1
 400c228:	90c00047 	ldb	r3,1(r18)
 400c22c:	dc402105 	stb	r17,132(sp)
 400c230:	d8001d85 	stb	zero,118(sp)
 400c234:	002b883a 	mov	r21,zero
 400c238:	d8802015 	stw	r2,128(sp)
 400c23c:	d8002515 	stw	zero,148(sp)
 400c240:	04801604 	movi	r18,88
 400c244:	05000244 	movi	r20,9
 400c248:	402f883a 	mov	r23,r8
 400c24c:	8023883a 	mov	r17,r16
 400c250:	9cc00044 	addi	r19,r19,1
 400c254:	18bff804 	addi	r2,r3,-32
 400c258:	9081fb36 	bltu	r18,r2,400ca48 <___svfiprintf_internal_r+0x928>
 400c25c:	100490ba 	slli	r2,r2,2
 400c260:	01010074 	movhi	r4,1025
 400c264:	21309d04 	addi	r4,r4,-15756
 400c268:	1105883a 	add	r2,r2,r4
 400c26c:	10800017 	ldw	r2,0(r2)
 400c270:	1000683a 	jmp	r2
 400c274:	0400c474 	movhi	r16,785
 400c278:	0400ca48 	cmpgei	r16,zero,809
 400c27c:	0400ca48 	cmpgei	r16,zero,809
 400c280:	0400c468 	cmpgeui	r16,zero,785
 400c284:	0400ca48 	cmpgei	r16,zero,809
 400c288:	0400ca48 	cmpgei	r16,zero,809
 400c28c:	0400ca48 	cmpgei	r16,zero,809
 400c290:	0400ca48 	cmpgei	r16,zero,809
 400c294:	0400ca48 	cmpgei	r16,zero,809
 400c298:	0400ca48 	cmpgei	r16,zero,809
 400c29c:	0400c3d8 	cmpnei	r16,zero,783
 400c2a0:	0400c5d4 	movui	r16,791
 400c2a4:	0400ca48 	cmpgei	r16,zero,809
 400c2a8:	0400c400 	call	400c40 <__alt_mem_onchip_flash_data-0x1bff3c0>
 400c2ac:	0400ca84 	movi	r16,810
 400c2b0:	0400ca48 	cmpgei	r16,zero,809
 400c2b4:	0400ca78 	rdprs	r16,zero,809
 400c2b8:	0400ca0c 	andi	r16,zero,808
 400c2bc:	0400ca0c 	andi	r16,zero,808
 400c2c0:	0400ca0c 	andi	r16,zero,808
 400c2c4:	0400ca0c 	andi	r16,zero,808
 400c2c8:	0400ca0c 	andi	r16,zero,808
 400c2cc:	0400ca0c 	andi	r16,zero,808
 400c2d0:	0400ca0c 	andi	r16,zero,808
 400c2d4:	0400ca0c 	andi	r16,zero,808
 400c2d8:	0400ca0c 	andi	r16,zero,808
 400c2dc:	0400ca48 	cmpgei	r16,zero,809
 400c2e0:	0400ca48 	cmpgei	r16,zero,809
 400c2e4:	0400ca48 	cmpgei	r16,zero,809
 400c2e8:	0400ca48 	cmpgei	r16,zero,809
 400c2ec:	0400ca48 	cmpgei	r16,zero,809
 400c2f0:	0400ca48 	cmpgei	r16,zero,809
 400c2f4:	0400ca48 	cmpgei	r16,zero,809
 400c2f8:	0400ca48 	cmpgei	r16,zero,809
 400c2fc:	0400ca48 	cmpgei	r16,zero,809
 400c300:	0400ca48 	cmpgei	r16,zero,809
 400c304:	0400c990 	cmplti	r16,zero,806
 400c308:	0400ca48 	cmpgei	r16,zero,809
 400c30c:	0400ca48 	cmpgei	r16,zero,809
 400c310:	0400ca48 	cmpgei	r16,zero,809
 400c314:	0400ca48 	cmpgei	r16,zero,809
 400c318:	0400ca48 	cmpgei	r16,zero,809
 400c31c:	0400ca48 	cmpgei	r16,zero,809
 400c320:	0400ca48 	cmpgei	r16,zero,809
 400c324:	0400ca48 	cmpgei	r16,zero,809
 400c328:	0400ca48 	cmpgei	r16,zero,809
 400c32c:	0400ca48 	cmpgei	r16,zero,809
 400c330:	0400cb40 	call	400cb4 <__alt_mem_onchip_flash_data-0x1bff34c>
 400c334:	0400ca48 	cmpgei	r16,zero,809
 400c338:	0400ca48 	cmpgei	r16,zero,809
 400c33c:	0400ca48 	cmpgei	r16,zero,809
 400c340:	0400ca48 	cmpgei	r16,zero,809
 400c344:	0400ca48 	cmpgei	r16,zero,809
 400c348:	0400cacc 	andi	r16,zero,811
 400c34c:	0400ca48 	cmpgei	r16,zero,809
 400c350:	0400ca48 	cmpgei	r16,zero,809
 400c354:	0400c7cc 	andi	r16,zero,799
 400c358:	0400ca48 	cmpgei	r16,zero,809
 400c35c:	0400ca48 	cmpgei	r16,zero,809
 400c360:	0400ca48 	cmpgei	r16,zero,809
 400c364:	0400ca48 	cmpgei	r16,zero,809
 400c368:	0400ca48 	cmpgei	r16,zero,809
 400c36c:	0400ca48 	cmpgei	r16,zero,809
 400c370:	0400ca48 	cmpgei	r16,zero,809
 400c374:	0400ca48 	cmpgei	r16,zero,809
 400c378:	0400ca48 	cmpgei	r16,zero,809
 400c37c:	0400ca48 	cmpgei	r16,zero,809
 400c380:	0400c698 	cmpnei	r16,zero,794
 400c384:	0400c87c 	xorhi	r16,zero,801
 400c388:	0400ca48 	cmpgei	r16,zero,809
 400c38c:	0400ca48 	cmpgei	r16,zero,809
 400c390:	0400ca48 	cmpgei	r16,zero,809
 400c394:	0400c870 	cmpltui	r16,zero,801
 400c398:	0400c87c 	xorhi	r16,zero,801
 400c39c:	0400ca48 	cmpgei	r16,zero,809
 400c3a0:	0400ca48 	cmpgei	r16,zero,809
 400c3a4:	0400c85c 	xori	r16,zero,801
 400c3a8:	0400ca48 	cmpgei	r16,zero,809
 400c3ac:	0400c81c 	xori	r16,zero,800
 400c3b0:	0400c5e8 	cmpgeui	r16,zero,791
 400c3b4:	0400c40c 	andi	r16,zero,784
 400c3b8:	0400c984 	movi	r16,806
 400c3bc:	0400ca48 	cmpgei	r16,zero,809
 400c3c0:	0400c930 	cmpltui	r16,zero,804
 400c3c4:	0400ca48 	cmpgei	r16,zero,809
 400c3c8:	0400c54c 	andi	r16,zero,789
 400c3cc:	0400ca48 	cmpgei	r16,zero,809
 400c3d0:	0400ca48 	cmpgei	r16,zero,809
 400c3d4:	0400c498 	cmpnei	r16,zero,786
 400c3d8:	d9002417 	ldw	r4,144(sp)
 400c3dc:	d9402417 	ldw	r5,144(sp)
 400c3e0:	21000017 	ldw	r4,0(r4)
 400c3e4:	28800104 	addi	r2,r5,4
 400c3e8:	d9002515 	stw	r4,148(sp)
 400c3ec:	20032b0e 	bge	r4,zero,400d09c <___svfiprintf_internal_r+0xf7c>
 400c3f0:	d8c02517 	ldw	r3,148(sp)
 400c3f4:	d8802415 	stw	r2,144(sp)
 400c3f8:	00c7c83a 	sub	r3,zero,r3
 400c3fc:	d8c02515 	stw	r3,148(sp)
 400c400:	8c400114 	ori	r17,r17,4
 400c404:	98c00007 	ldb	r3,0(r19)
 400c408:	003f9106 	br	400c250 <__alt_data_end+0xfc00c250>
 400c40c:	00800c04 	movi	r2,48
 400c410:	d9402417 	ldw	r5,144(sp)
 400c414:	d9002017 	ldw	r4,128(sp)
 400c418:	d8801d05 	stb	r2,116(sp)
 400c41c:	00801e04 	movi	r2,120
 400c420:	d8801d45 	stb	r2,117(sp)
 400c424:	d8001d85 	stb	zero,118(sp)
 400c428:	b811883a 	mov	r8,r23
 400c42c:	28c00104 	addi	r3,r5,4
 400c430:	2c800017 	ldw	r18,0(r5)
 400c434:	0029883a 	mov	r20,zero
 400c438:	88800094 	ori	r2,r17,2
 400c43c:	20036316 	blt	r4,zero,400d1cc <___svfiprintf_internal_r+0x10ac>
 400c440:	00bfdfc4 	movi	r2,-129
 400c444:	88a0703a 	and	r16,r17,r2
 400c448:	d8c02415 	stw	r3,144(sp)
 400c44c:	84000094 	ori	r16,r16,2
 400c450:	90031c26 	beq	r18,zero,400d0c4 <___svfiprintf_internal_r+0xfa4>
 400c454:	01410074 	movhi	r5,1025
 400c458:	294b8204 	addi	r5,r5,11784
 400c45c:	002b883a 	mov	r21,zero
 400c460:	d9402915 	stw	r5,164(sp)
 400c464:	00002906 	br	400c50c <___svfiprintf_internal_r+0x3ec>
 400c468:	8c400054 	ori	r17,r17,1
 400c46c:	98c00007 	ldb	r3,0(r19)
 400c470:	003f7706 	br	400c250 <__alt_data_end+0xfc00c250>
 400c474:	a8803fcc 	andi	r2,r21,255
 400c478:	1080201c 	xori	r2,r2,128
 400c47c:	10bfe004 	addi	r2,r2,-128
 400c480:	10032a1e 	bne	r2,zero,400d12c <___svfiprintf_internal_r+0x100c>
 400c484:	00c00044 	movi	r3,1
 400c488:	d8c02105 	stb	r3,132(sp)
 400c48c:	05400804 	movi	r21,32
 400c490:	98c00007 	ldb	r3,0(r19)
 400c494:	003f6e06 	br	400c250 <__alt_data_end+0xfc00c250>
 400c498:	8821883a 	mov	r16,r17
 400c49c:	dc402103 	ldbu	r17,132(sp)
 400c4a0:	b811883a 	mov	r8,r23
 400c4a4:	8c403fcc 	andi	r17,r17,255
 400c4a8:	8803f01e 	bne	r17,zero,400d46c <___svfiprintf_internal_r+0x134c>
 400c4ac:	00810074 	movhi	r2,1025
 400c4b0:	108b8204 	addi	r2,r2,11784
 400c4b4:	d8802915 	stw	r2,164(sp)
 400c4b8:	8080080c 	andi	r2,r16,32
 400c4bc:	1000cd26 	beq	r2,zero,400c7f4 <___svfiprintf_internal_r+0x6d4>
 400c4c0:	d9002417 	ldw	r4,144(sp)
 400c4c4:	24800017 	ldw	r18,0(r4)
 400c4c8:	25000117 	ldw	r20,4(r4)
 400c4cc:	21000204 	addi	r4,r4,8
 400c4d0:	d9002415 	stw	r4,144(sp)
 400c4d4:	8080004c 	andi	r2,r16,1
 400c4d8:	1002c726 	beq	r2,zero,400cff8 <___svfiprintf_internal_r+0xed8>
 400c4dc:	9504b03a 	or	r2,r18,r20
 400c4e0:	1003061e 	bne	r2,zero,400d0fc <___svfiprintf_internal_r+0xfdc>
 400c4e4:	d9002017 	ldw	r4,128(sp)
 400c4e8:	d8001d85 	stb	zero,118(sp)
 400c4ec:	20033e16 	blt	r4,zero,400d1e8 <___svfiprintf_internal_r+0x10c8>
 400c4f0:	00bfdfc4 	movi	r2,-129
 400c4f4:	80a0703a 	and	r16,r16,r2
 400c4f8:	d9402017 	ldw	r5,128(sp)
 400c4fc:	002b883a 	mov	r21,zero
 400c500:	28002826 	beq	r5,zero,400c5a4 <___svfiprintf_internal_r+0x484>
 400c504:	0025883a 	mov	r18,zero
 400c508:	0029883a 	mov	r20,zero
 400c50c:	d9002917 	ldw	r4,164(sp)
 400c510:	dc401a04 	addi	r17,sp,104
 400c514:	908003cc 	andi	r2,r18,15
 400c518:	a006973a 	slli	r3,r20,28
 400c51c:	2085883a 	add	r2,r4,r2
 400c520:	9024d13a 	srli	r18,r18,4
 400c524:	10800003 	ldbu	r2,0(r2)
 400c528:	a028d13a 	srli	r20,r20,4
 400c52c:	8c7fffc4 	addi	r17,r17,-1
 400c530:	1ca4b03a 	or	r18,r3,r18
 400c534:	88800005 	stb	r2,0(r17)
 400c538:	9504b03a 	or	r2,r18,r20
 400c53c:	103ff51e 	bne	r2,zero,400c514 <__alt_data_end+0xfc00c514>
 400c540:	d8801e17 	ldw	r2,120(sp)
 400c544:	1469c83a 	sub	r20,r2,r17
 400c548:	00001906 	br	400c5b0 <___svfiprintf_internal_r+0x490>
 400c54c:	8821883a 	mov	r16,r17
 400c550:	dc402103 	ldbu	r17,132(sp)
 400c554:	b811883a 	mov	r8,r23
 400c558:	8c403fcc 	andi	r17,r17,255
 400c55c:	8803d01e 	bne	r17,zero,400d4a0 <___svfiprintf_internal_r+0x1380>
 400c560:	8080080c 	andi	r2,r16,32
 400c564:	10016126 	beq	r2,zero,400caec <___svfiprintf_internal_r+0x9cc>
 400c568:	d9002417 	ldw	r4,144(sp)
 400c56c:	d9402017 	ldw	r5,128(sp)
 400c570:	d8001d85 	stb	zero,118(sp)
 400c574:	20c00204 	addi	r3,r4,8
 400c578:	24800017 	ldw	r18,0(r4)
 400c57c:	25000117 	ldw	r20,4(r4)
 400c580:	28030f16 	blt	r5,zero,400d1c0 <___svfiprintf_internal_r+0x10a0>
 400c584:	013fdfc4 	movi	r4,-129
 400c588:	9504b03a 	or	r2,r18,r20
 400c58c:	d8c02415 	stw	r3,144(sp)
 400c590:	8120703a 	and	r16,r16,r4
 400c594:	002b883a 	mov	r21,zero
 400c598:	1000cd1e 	bne	r2,zero,400c8d0 <___svfiprintf_internal_r+0x7b0>
 400c59c:	d8c02017 	ldw	r3,128(sp)
 400c5a0:	1803141e 	bne	r3,zero,400d1f4 <___svfiprintf_internal_r+0x10d4>
 400c5a4:	d8002015 	stw	zero,128(sp)
 400c5a8:	0029883a 	mov	r20,zero
 400c5ac:	dc401a04 	addi	r17,sp,104
 400c5b0:	dc802017 	ldw	r18,128(sp)
 400c5b4:	9500010e 	bge	r18,r20,400c5bc <___svfiprintf_internal_r+0x49c>
 400c5b8:	a025883a 	mov	r18,r20
 400c5bc:	ad403fcc 	andi	r21,r21,255
 400c5c0:	ad40201c 	xori	r21,r21,128
 400c5c4:	ad7fe004 	addi	r21,r21,-128
 400c5c8:	a8003f26 	beq	r21,zero,400c6c8 <___svfiprintf_internal_r+0x5a8>
 400c5cc:	94800044 	addi	r18,r18,1
 400c5d0:	00003d06 	br	400c6c8 <___svfiprintf_internal_r+0x5a8>
 400c5d4:	00c00044 	movi	r3,1
 400c5d8:	d8c02105 	stb	r3,132(sp)
 400c5dc:	05400ac4 	movi	r21,43
 400c5e0:	98c00007 	ldb	r3,0(r19)
 400c5e4:	003f1a06 	br	400c250 <__alt_data_end+0xfc00c250>
 400c5e8:	8821883a 	mov	r16,r17
 400c5ec:	dc402103 	ldbu	r17,132(sp)
 400c5f0:	b811883a 	mov	r8,r23
 400c5f4:	8c403fcc 	andi	r17,r17,255
 400c5f8:	8803a71e 	bne	r17,zero,400d498 <___svfiprintf_internal_r+0x1378>
 400c5fc:	8080080c 	andi	r2,r16,32
 400c600:	10015726 	beq	r2,zero,400cb60 <___svfiprintf_internal_r+0xa40>
 400c604:	d8c02417 	ldw	r3,144(sp)
 400c608:	d9002017 	ldw	r4,128(sp)
 400c60c:	d8001d85 	stb	zero,118(sp)
 400c610:	18800204 	addi	r2,r3,8
 400c614:	1c800017 	ldw	r18,0(r3)
 400c618:	1d000117 	ldw	r20,4(r3)
 400c61c:	2002db16 	blt	r4,zero,400d18c <___svfiprintf_internal_r+0x106c>
 400c620:	013fdfc4 	movi	r4,-129
 400c624:	9506b03a 	or	r3,r18,r20
 400c628:	d8802415 	stw	r2,144(sp)
 400c62c:	8120703a 	and	r16,r16,r4
 400c630:	18015826 	beq	r3,zero,400cb94 <___svfiprintf_internal_r+0xa74>
 400c634:	002b883a 	mov	r21,zero
 400c638:	dc401a04 	addi	r17,sp,104
 400c63c:	9006d0fa 	srli	r3,r18,3
 400c640:	a008977a 	slli	r4,r20,29
 400c644:	a028d0fa 	srli	r20,r20,3
 400c648:	948001cc 	andi	r18,r18,7
 400c64c:	90800c04 	addi	r2,r18,48
 400c650:	8c7fffc4 	addi	r17,r17,-1
 400c654:	20e4b03a 	or	r18,r4,r3
 400c658:	88800005 	stb	r2,0(r17)
 400c65c:	9506b03a 	or	r3,r18,r20
 400c660:	183ff61e 	bne	r3,zero,400c63c <__alt_data_end+0xfc00c63c>
 400c664:	80c0004c 	andi	r3,r16,1
 400c668:	18028926 	beq	r3,zero,400d090 <___svfiprintf_internal_r+0xf70>
 400c66c:	10803fcc 	andi	r2,r2,255
 400c670:	1080201c 	xori	r2,r2,128
 400c674:	10bfe004 	addi	r2,r2,-128
 400c678:	00c00c04 	movi	r3,48
 400c67c:	10ffb026 	beq	r2,r3,400c540 <__alt_data_end+0xfc00c540>
 400c680:	88ffffc5 	stb	r3,-1(r17)
 400c684:	d8c01e17 	ldw	r3,120(sp)
 400c688:	88bfffc4 	addi	r2,r17,-1
 400c68c:	1023883a 	mov	r17,r2
 400c690:	18a9c83a 	sub	r20,r3,r2
 400c694:	003fc606 	br	400c5b0 <__alt_data_end+0xfc00c5b0>
 400c698:	d8c02417 	ldw	r3,144(sp)
 400c69c:	04800044 	movi	r18,1
 400c6a0:	8821883a 	mov	r16,r17
 400c6a4:	18800017 	ldw	r2,0(r3)
 400c6a8:	18c00104 	addi	r3,r3,4
 400c6ac:	b811883a 	mov	r8,r23
 400c6b0:	d8001d85 	stb	zero,118(sp)
 400c6b4:	d8801005 	stb	r2,64(sp)
 400c6b8:	d8c02415 	stw	r3,144(sp)
 400c6bc:	9029883a 	mov	r20,r18
 400c6c0:	dc401004 	addi	r17,sp,64
 400c6c4:	d8002015 	stw	zero,128(sp)
 400c6c8:	80c0008c 	andi	r3,r16,2
 400c6cc:	d8c02115 	stw	r3,132(sp)
 400c6d0:	18000126 	beq	r3,zero,400c6d8 <___svfiprintf_internal_r+0x5b8>
 400c6d4:	94800084 	addi	r18,r18,2
 400c6d8:	80c0210c 	andi	r3,r16,132
 400c6dc:	d8c02215 	stw	r3,136(sp)
 400c6e0:	1801321e 	bne	r3,zero,400cbac <___svfiprintf_internal_r+0xa8c>
 400c6e4:	d9002517 	ldw	r4,148(sp)
 400c6e8:	24b9c83a 	sub	fp,r4,r18
 400c6ec:	07012f0e 	bge	zero,fp,400cbac <___svfiprintf_internal_r+0xa8c>
 400c6f0:	02400404 	movi	r9,16
 400c6f4:	d8c01c17 	ldw	r3,112(sp)
 400c6f8:	d8801b17 	ldw	r2,108(sp)
 400c6fc:	4f03250e 	bge	r9,fp,400d394 <___svfiprintf_internal_r+0x1274>
 400c700:	01010074 	movhi	r4,1025
 400c704:	210be704 	addi	r4,r4,12188
 400c708:	dc002a15 	stw	r16,168(sp)
 400c70c:	dc402b15 	stw	r17,172(sp)
 400c710:	d9002815 	stw	r4,160(sp)
 400c714:	e023883a 	mov	r17,fp
 400c718:	482f883a 	mov	r23,r9
 400c71c:	9839883a 	mov	fp,r19
 400c720:	054001c4 	movi	r21,7
 400c724:	9027883a 	mov	r19,r18
 400c728:	dc002717 	ldw	r16,156(sp)
 400c72c:	dc802317 	ldw	r18,140(sp)
 400c730:	00000306 	br	400c740 <___svfiprintf_internal_r+0x620>
 400c734:	8c7ffc04 	addi	r17,r17,-16
 400c738:	42000204 	addi	r8,r8,8
 400c73c:	bc40130e 	bge	r23,r17,400c78c <___svfiprintf_internal_r+0x66c>
 400c740:	01410074 	movhi	r5,1025
 400c744:	18c00404 	addi	r3,r3,16
 400c748:	10800044 	addi	r2,r2,1
 400c74c:	294be704 	addi	r5,r5,12188
 400c750:	41400015 	stw	r5,0(r8)
 400c754:	45c00115 	stw	r23,4(r8)
 400c758:	d8c01c15 	stw	r3,112(sp)
 400c75c:	d8801b15 	stw	r2,108(sp)
 400c760:	a8bff40e 	bge	r21,r2,400c734 <__alt_data_end+0xfc00c734>
 400c764:	d9801a04 	addi	r6,sp,104
 400c768:	900b883a 	mov	r5,r18
 400c76c:	8009883a 	mov	r4,r16
 400c770:	400bf500 	call	400bf50 <__ssprint_r>
 400c774:	1001aa1e 	bne	r2,zero,400ce20 <___svfiprintf_internal_r+0xd00>
 400c778:	8c7ffc04 	addi	r17,r17,-16
 400c77c:	d8c01c17 	ldw	r3,112(sp)
 400c780:	d8801b17 	ldw	r2,108(sp)
 400c784:	d811883a 	mov	r8,sp
 400c788:	bc7fed16 	blt	r23,r17,400c740 <__alt_data_end+0xfc00c740>
 400c78c:	9825883a 	mov	r18,r19
 400c790:	dc002a17 	ldw	r16,168(sp)
 400c794:	e027883a 	mov	r19,fp
 400c798:	8839883a 	mov	fp,r17
 400c79c:	dc402b17 	ldw	r17,172(sp)
 400c7a0:	d9002817 	ldw	r4,160(sp)
 400c7a4:	e0c7883a 	add	r3,fp,r3
 400c7a8:	10800044 	addi	r2,r2,1
 400c7ac:	41000015 	stw	r4,0(r8)
 400c7b0:	47000115 	stw	fp,4(r8)
 400c7b4:	d8c01c15 	stw	r3,112(sp)
 400c7b8:	d8801b15 	stw	r2,108(sp)
 400c7bc:	010001c4 	movi	r4,7
 400c7c0:	20821616 	blt	r4,r2,400d01c <___svfiprintf_internal_r+0xefc>
 400c7c4:	42000204 	addi	r8,r8,8
 400c7c8:	0000fa06 	br	400cbb4 <___svfiprintf_internal_r+0xa94>
 400c7cc:	8821883a 	mov	r16,r17
 400c7d0:	dc402103 	ldbu	r17,132(sp)
 400c7d4:	b811883a 	mov	r8,r23
 400c7d8:	8c403fcc 	andi	r17,r17,255
 400c7dc:	8803361e 	bne	r17,zero,400d4b8 <___svfiprintf_internal_r+0x1398>
 400c7e0:	01410074 	movhi	r5,1025
 400c7e4:	294b7d04 	addi	r5,r5,11764
 400c7e8:	d9402915 	stw	r5,164(sp)
 400c7ec:	8080080c 	andi	r2,r16,32
 400c7f0:	103f331e 	bne	r2,zero,400c4c0 <__alt_data_end+0xfc00c4c0>
 400c7f4:	8080040c 	andi	r2,r16,16
 400c7f8:	1002551e 	bne	r2,zero,400d150 <___svfiprintf_internal_r+0x1030>
 400c7fc:	8080100c 	andi	r2,r16,64
 400c800:	1002a626 	beq	r2,zero,400d29c <___svfiprintf_internal_r+0x117c>
 400c804:	d8802417 	ldw	r2,144(sp)
 400c808:	0029883a 	mov	r20,zero
 400c80c:	1480000b 	ldhu	r18,0(r2)
 400c810:	10800104 	addi	r2,r2,4
 400c814:	d8802415 	stw	r2,144(sp)
 400c818:	003f2e06 	br	400c4d4 <__alt_data_end+0xfc00c4d4>
 400c81c:	8821883a 	mov	r16,r17
 400c820:	dc402103 	ldbu	r17,132(sp)
 400c824:	b811883a 	mov	r8,r23
 400c828:	8c403fcc 	andi	r17,r17,255
 400c82c:	88030b1e 	bne	r17,zero,400d45c <___svfiprintf_internal_r+0x133c>
 400c830:	8080080c 	andi	r2,r16,32
 400c834:	1002271e 	bne	r2,zero,400d0d4 <___svfiprintf_internal_r+0xfb4>
 400c838:	8080040c 	andi	r2,r16,16
 400c83c:	10028e26 	beq	r2,zero,400d278 <___svfiprintf_internal_r+0x1158>
 400c840:	d8c02417 	ldw	r3,144(sp)
 400c844:	d9002617 	ldw	r4,152(sp)
 400c848:	18800017 	ldw	r2,0(r3)
 400c84c:	18c00104 	addi	r3,r3,4
 400c850:	d8c02415 	stw	r3,144(sp)
 400c854:	11000015 	stw	r4,0(r2)
 400c858:	003e5306 	br	400c1a8 <__alt_data_end+0xfc00c1a8>
 400c85c:	98c00007 	ldb	r3,0(r19)
 400c860:	01401b04 	movi	r5,108
 400c864:	19424f26 	beq	r3,r5,400d1a4 <___svfiprintf_internal_r+0x1084>
 400c868:	8c400414 	ori	r17,r17,16
 400c86c:	003e7806 	br	400c250 <__alt_data_end+0xfc00c250>
 400c870:	8c401014 	ori	r17,r17,64
 400c874:	98c00007 	ldb	r3,0(r19)
 400c878:	003e7506 	br	400c250 <__alt_data_end+0xfc00c250>
 400c87c:	8821883a 	mov	r16,r17
 400c880:	dc402103 	ldbu	r17,132(sp)
 400c884:	b811883a 	mov	r8,r23
 400c888:	8c403fcc 	andi	r17,r17,255
 400c88c:	8802fe1e 	bne	r17,zero,400d488 <___svfiprintf_internal_r+0x1368>
 400c890:	8080080c 	andi	r2,r16,32
 400c894:	10004626 	beq	r2,zero,400c9b0 <___svfiprintf_internal_r+0x890>
 400c898:	d9002417 	ldw	r4,144(sp)
 400c89c:	20800117 	ldw	r2,4(r4)
 400c8a0:	24800017 	ldw	r18,0(r4)
 400c8a4:	21000204 	addi	r4,r4,8
 400c8a8:	d9002415 	stw	r4,144(sp)
 400c8ac:	1029883a 	mov	r20,r2
 400c8b0:	10004a16 	blt	r2,zero,400c9dc <___svfiprintf_internal_r+0x8bc>
 400c8b4:	d9002017 	ldw	r4,128(sp)
 400c8b8:	dd401d83 	ldbu	r21,118(sp)
 400c8bc:	2001eb16 	blt	r4,zero,400d06c <___svfiprintf_internal_r+0xf4c>
 400c8c0:	00ffdfc4 	movi	r3,-129
 400c8c4:	9504b03a 	or	r2,r18,r20
 400c8c8:	80e0703a 	and	r16,r16,r3
 400c8cc:	103f3326 	beq	r2,zero,400c59c <__alt_data_end+0xfc00c59c>
 400c8d0:	a0009426 	beq	r20,zero,400cb24 <___svfiprintf_internal_r+0xa04>
 400c8d4:	dc401a04 	addi	r17,sp,104
 400c8d8:	402f883a 	mov	r23,r8
 400c8dc:	9009883a 	mov	r4,r18
 400c8e0:	a00b883a 	mov	r5,r20
 400c8e4:	01800284 	movi	r6,10
 400c8e8:	000f883a 	mov	r7,zero
 400c8ec:	400e7b40 	call	400e7b4 <__umoddi3>
 400c8f0:	10800c04 	addi	r2,r2,48
 400c8f4:	8c7fffc4 	addi	r17,r17,-1
 400c8f8:	9009883a 	mov	r4,r18
 400c8fc:	a00b883a 	mov	r5,r20
 400c900:	88800005 	stb	r2,0(r17)
 400c904:	01800284 	movi	r6,10
 400c908:	000f883a 	mov	r7,zero
 400c90c:	400e1b80 	call	400e1b8 <__udivdi3>
 400c910:	1025883a 	mov	r18,r2
 400c914:	10c4b03a 	or	r2,r2,r3
 400c918:	1829883a 	mov	r20,r3
 400c91c:	103fef1e 	bne	r2,zero,400c8dc <__alt_data_end+0xfc00c8dc>
 400c920:	d9001e17 	ldw	r4,120(sp)
 400c924:	b811883a 	mov	r8,r23
 400c928:	2469c83a 	sub	r20,r4,r17
 400c92c:	003f2006 	br	400c5b0 <__alt_data_end+0xfc00c5b0>
 400c930:	d8802417 	ldw	r2,144(sp)
 400c934:	8821883a 	mov	r16,r17
 400c938:	d8001d85 	stb	zero,118(sp)
 400c93c:	14400017 	ldw	r17,0(r2)
 400c940:	b811883a 	mov	r8,r23
 400c944:	15c00104 	addi	r23,r2,4
 400c948:	88026c26 	beq	r17,zero,400d2fc <___svfiprintf_internal_r+0x11dc>
 400c94c:	d8c02017 	ldw	r3,128(sp)
 400c950:	18025f16 	blt	r3,zero,400d2d0 <___svfiprintf_internal_r+0x11b0>
 400c954:	180d883a 	mov	r6,r3
 400c958:	000b883a 	mov	r5,zero
 400c95c:	8809883a 	mov	r4,r17
 400c960:	da002d15 	stw	r8,180(sp)
 400c964:	400ab780 	call	400ab78 <memchr>
 400c968:	da002d17 	ldw	r8,180(sp)
 400c96c:	1002a526 	beq	r2,zero,400d404 <___svfiprintf_internal_r+0x12e4>
 400c970:	1469c83a 	sub	r20,r2,r17
 400c974:	dd401d83 	ldbu	r21,118(sp)
 400c978:	ddc02415 	stw	r23,144(sp)
 400c97c:	d8002015 	stw	zero,128(sp)
 400c980:	003f0b06 	br	400c5b0 <__alt_data_end+0xfc00c5b0>
 400c984:	8c400814 	ori	r17,r17,32
 400c988:	98c00007 	ldb	r3,0(r19)
 400c98c:	003e3006 	br	400c250 <__alt_data_end+0xfc00c250>
 400c990:	8821883a 	mov	r16,r17
 400c994:	dc402103 	ldbu	r17,132(sp)
 400c998:	b811883a 	mov	r8,r23
 400c99c:	8c403fcc 	andi	r17,r17,255
 400c9a0:	8802b01e 	bne	r17,zero,400d464 <___svfiprintf_internal_r+0x1344>
 400c9a4:	84000414 	ori	r16,r16,16
 400c9a8:	8080080c 	andi	r2,r16,32
 400c9ac:	103fba1e 	bne	r2,zero,400c898 <__alt_data_end+0xfc00c898>
 400c9b0:	8080040c 	andi	r2,r16,16
 400c9b4:	1001df1e 	bne	r2,zero,400d134 <___svfiprintf_internal_r+0x1014>
 400c9b8:	8080100c 	andi	r2,r16,64
 400c9bc:	10023d26 	beq	r2,zero,400d2b4 <___svfiprintf_internal_r+0x1194>
 400c9c0:	d8802417 	ldw	r2,144(sp)
 400c9c4:	1480000f 	ldh	r18,0(r2)
 400c9c8:	10800104 	addi	r2,r2,4
 400c9cc:	d8802415 	stw	r2,144(sp)
 400c9d0:	9029d7fa 	srai	r20,r18,31
 400c9d4:	a005883a 	mov	r2,r20
 400c9d8:	103fb60e 	bge	r2,zero,400c8b4 <__alt_data_end+0xfc00c8b4>
 400c9dc:	d9402017 	ldw	r5,128(sp)
 400c9e0:	04a5c83a 	sub	r18,zero,r18
 400c9e4:	05400b44 	movi	r21,45
 400c9e8:	9004c03a 	cmpne	r2,r18,zero
 400c9ec:	0529c83a 	sub	r20,zero,r20
 400c9f0:	dd401d85 	stb	r21,118(sp)
 400c9f4:	a0a9c83a 	sub	r20,r20,r2
 400c9f8:	28026c16 	blt	r5,zero,400d3ac <___svfiprintf_internal_r+0x128c>
 400c9fc:	00bfdfc4 	movi	r2,-129
 400ca00:	80a0703a 	and	r16,r16,r2
 400ca04:	a03fb31e 	bne	r20,zero,400c8d4 <__alt_data_end+0xfc00c8d4>
 400ca08:	00004606 	br	400cb24 <___svfiprintf_internal_r+0xa04>
 400ca0c:	9839883a 	mov	fp,r19
 400ca10:	d8002515 	stw	zero,148(sp)
 400ca14:	1c3ff404 	addi	r16,r3,-48
 400ca18:	0009883a 	mov	r4,zero
 400ca1c:	01400284 	movi	r5,10
 400ca20:	40024600 	call	4002460 <__mulsi3>
 400ca24:	e0c00007 	ldb	r3,0(fp)
 400ca28:	8089883a 	add	r4,r16,r2
 400ca2c:	9cc00044 	addi	r19,r19,1
 400ca30:	1c3ff404 	addi	r16,r3,-48
 400ca34:	9839883a 	mov	fp,r19
 400ca38:	a43ff82e 	bgeu	r20,r16,400ca1c <__alt_data_end+0xfc00ca1c>
 400ca3c:	d9002515 	stw	r4,148(sp)
 400ca40:	18bff804 	addi	r2,r3,-32
 400ca44:	90be052e 	bgeu	r18,r2,400c25c <__alt_data_end+0xfc00c25c>
 400ca48:	8821883a 	mov	r16,r17
 400ca4c:	dc402103 	ldbu	r17,132(sp)
 400ca50:	b811883a 	mov	r8,r23
 400ca54:	8c403fcc 	andi	r17,r17,255
 400ca58:	88028d1e 	bne	r17,zero,400d490 <___svfiprintf_internal_r+0x1370>
 400ca5c:	1800ea26 	beq	r3,zero,400ce08 <___svfiprintf_internal_r+0xce8>
 400ca60:	04800044 	movi	r18,1
 400ca64:	d8c01005 	stb	r3,64(sp)
 400ca68:	d8001d85 	stb	zero,118(sp)
 400ca6c:	9029883a 	mov	r20,r18
 400ca70:	dc401004 	addi	r17,sp,64
 400ca74:	003f1306 	br	400c6c4 <__alt_data_end+0xfc00c6c4>
 400ca78:	8c402014 	ori	r17,r17,128
 400ca7c:	98c00007 	ldb	r3,0(r19)
 400ca80:	003df306 	br	400c250 <__alt_data_end+0xfc00c250>
 400ca84:	98c00007 	ldb	r3,0(r19)
 400ca88:	01000a84 	movi	r4,42
 400ca8c:	9f000044 	addi	fp,r19,1
 400ca90:	19026326 	beq	r3,r4,400d420 <___svfiprintf_internal_r+0x1300>
 400ca94:	1c3ff404 	addi	r16,r3,-48
 400ca98:	0009883a 	mov	r4,zero
 400ca9c:	a4025636 	bltu	r20,r16,400d3f8 <___svfiprintf_internal_r+0x12d8>
 400caa0:	01400284 	movi	r5,10
 400caa4:	40024600 	call	4002460 <__mulsi3>
 400caa8:	e0c00007 	ldb	r3,0(fp)
 400caac:	1409883a 	add	r4,r2,r16
 400cab0:	e4c00044 	addi	r19,fp,1
 400cab4:	1c3ff404 	addi	r16,r3,-48
 400cab8:	9839883a 	mov	fp,r19
 400cabc:	a43ff82e 	bgeu	r20,r16,400caa0 <__alt_data_end+0xfc00caa0>
 400cac0:	20020c16 	blt	r4,zero,400d2f4 <___svfiprintf_internal_r+0x11d4>
 400cac4:	d9002015 	stw	r4,128(sp)
 400cac8:	003de206 	br	400c254 <__alt_data_end+0xfc00c254>
 400cacc:	8821883a 	mov	r16,r17
 400cad0:	dc402103 	ldbu	r17,132(sp)
 400cad4:	b811883a 	mov	r8,r23
 400cad8:	8c403fcc 	andi	r17,r17,255
 400cadc:	8802721e 	bne	r17,zero,400d4a8 <___svfiprintf_internal_r+0x1388>
 400cae0:	84000414 	ori	r16,r16,16
 400cae4:	8080080c 	andi	r2,r16,32
 400cae8:	103e9f1e 	bne	r2,zero,400c568 <__alt_data_end+0xfc00c568>
 400caec:	8080040c 	andi	r2,r16,16
 400caf0:	10015326 	beq	r2,zero,400d040 <___svfiprintf_internal_r+0xf20>
 400caf4:	d8c02417 	ldw	r3,144(sp)
 400caf8:	d9002017 	ldw	r4,128(sp)
 400cafc:	d8001d85 	stb	zero,118(sp)
 400cb00:	18800104 	addi	r2,r3,4
 400cb04:	1c800017 	ldw	r18,0(r3)
 400cb08:	0029883a 	mov	r20,zero
 400cb0c:	20015516 	blt	r4,zero,400d064 <___svfiprintf_internal_r+0xf44>
 400cb10:	00ffdfc4 	movi	r3,-129
 400cb14:	d8802415 	stw	r2,144(sp)
 400cb18:	80e0703a 	and	r16,r16,r3
 400cb1c:	002b883a 	mov	r21,zero
 400cb20:	903e9e26 	beq	r18,zero,400c59c <__alt_data_end+0xfc00c59c>
 400cb24:	00800244 	movi	r2,9
 400cb28:	14bf6a36 	bltu	r2,r18,400c8d4 <__alt_data_end+0xfc00c8d4>
 400cb2c:	94800c04 	addi	r18,r18,48
 400cb30:	dc8019c5 	stb	r18,103(sp)
 400cb34:	dd002c17 	ldw	r20,176(sp)
 400cb38:	dc4019c4 	addi	r17,sp,103
 400cb3c:	003e9c06 	br	400c5b0 <__alt_data_end+0xfc00c5b0>
 400cb40:	8821883a 	mov	r16,r17
 400cb44:	dc402103 	ldbu	r17,132(sp)
 400cb48:	b811883a 	mov	r8,r23
 400cb4c:	8c403fcc 	andi	r17,r17,255
 400cb50:	8802571e 	bne	r17,zero,400d4b0 <___svfiprintf_internal_r+0x1390>
 400cb54:	84000414 	ori	r16,r16,16
 400cb58:	8080080c 	andi	r2,r16,32
 400cb5c:	103ea91e 	bne	r2,zero,400c604 <__alt_data_end+0xfc00c604>
 400cb60:	8080040c 	andi	r2,r16,16
 400cb64:	10018026 	beq	r2,zero,400d168 <___svfiprintf_internal_r+0x1048>
 400cb68:	d9402417 	ldw	r5,144(sp)
 400cb6c:	d8c02017 	ldw	r3,128(sp)
 400cb70:	d8001d85 	stb	zero,118(sp)
 400cb74:	28800104 	addi	r2,r5,4
 400cb78:	2c800017 	ldw	r18,0(r5)
 400cb7c:	0029883a 	mov	r20,zero
 400cb80:	18018216 	blt	r3,zero,400d18c <___svfiprintf_internal_r+0x106c>
 400cb84:	00ffdfc4 	movi	r3,-129
 400cb88:	d8802415 	stw	r2,144(sp)
 400cb8c:	80e0703a 	and	r16,r16,r3
 400cb90:	903ea81e 	bne	r18,zero,400c634 <__alt_data_end+0xfc00c634>
 400cb94:	d8802017 	ldw	r2,128(sp)
 400cb98:	002b883a 	mov	r21,zero
 400cb9c:	1001f226 	beq	r2,zero,400d368 <___svfiprintf_internal_r+0x1248>
 400cba0:	0025883a 	mov	r18,zero
 400cba4:	0029883a 	mov	r20,zero
 400cba8:	003ea306 	br	400c638 <__alt_data_end+0xfc00c638>
 400cbac:	d8c01c17 	ldw	r3,112(sp)
 400cbb0:	d8801b17 	ldw	r2,108(sp)
 400cbb4:	d9001d87 	ldb	r4,118(sp)
 400cbb8:	20000b26 	beq	r4,zero,400cbe8 <___svfiprintf_internal_r+0xac8>
 400cbbc:	d9001d84 	addi	r4,sp,118
 400cbc0:	18c00044 	addi	r3,r3,1
 400cbc4:	10800044 	addi	r2,r2,1
 400cbc8:	41000015 	stw	r4,0(r8)
 400cbcc:	01000044 	movi	r4,1
 400cbd0:	41000115 	stw	r4,4(r8)
 400cbd4:	d8c01c15 	stw	r3,112(sp)
 400cbd8:	d8801b15 	stw	r2,108(sp)
 400cbdc:	010001c4 	movi	r4,7
 400cbe0:	2080f316 	blt	r4,r2,400cfb0 <___svfiprintf_internal_r+0xe90>
 400cbe4:	42000204 	addi	r8,r8,8
 400cbe8:	d9402117 	ldw	r5,132(sp)
 400cbec:	28000b26 	beq	r5,zero,400cc1c <___svfiprintf_internal_r+0xafc>
 400cbf0:	d9001d04 	addi	r4,sp,116
 400cbf4:	18c00084 	addi	r3,r3,2
 400cbf8:	10800044 	addi	r2,r2,1
 400cbfc:	41000015 	stw	r4,0(r8)
 400cc00:	01000084 	movi	r4,2
 400cc04:	41000115 	stw	r4,4(r8)
 400cc08:	d8c01c15 	stw	r3,112(sp)
 400cc0c:	d8801b15 	stw	r2,108(sp)
 400cc10:	010001c4 	movi	r4,7
 400cc14:	2080ef16 	blt	r4,r2,400cfd4 <___svfiprintf_internal_r+0xeb4>
 400cc18:	42000204 	addi	r8,r8,8
 400cc1c:	d9402217 	ldw	r5,136(sp)
 400cc20:	01002004 	movi	r4,128
 400cc24:	29008f26 	beq	r5,r4,400ce64 <___svfiprintf_internal_r+0xd44>
 400cc28:	d9002017 	ldw	r4,128(sp)
 400cc2c:	252fc83a 	sub	r23,r4,r20
 400cc30:	05c0310e 	bge	zero,r23,400ccf8 <___svfiprintf_internal_r+0xbd8>
 400cc34:	07000404 	movi	fp,16
 400cc38:	e5c17d0e 	bge	fp,r23,400d230 <___svfiprintf_internal_r+0x1110>
 400cc3c:	01010074 	movhi	r4,1025
 400cc40:	210be304 	addi	r4,r4,12172
 400cc44:	dc002015 	stw	r16,128(sp)
 400cc48:	dc402215 	stw	r17,136(sp)
 400cc4c:	d9002115 	stw	r4,132(sp)
 400cc50:	b823883a 	mov	r17,r23
 400cc54:	054001c4 	movi	r21,7
 400cc58:	982f883a 	mov	r23,r19
 400cc5c:	dc002717 	ldw	r16,156(sp)
 400cc60:	9027883a 	mov	r19,r18
 400cc64:	dc802317 	ldw	r18,140(sp)
 400cc68:	00000306 	br	400cc78 <___svfiprintf_internal_r+0xb58>
 400cc6c:	8c7ffc04 	addi	r17,r17,-16
 400cc70:	42000204 	addi	r8,r8,8
 400cc74:	e440110e 	bge	fp,r17,400ccbc <___svfiprintf_internal_r+0xb9c>
 400cc78:	18c00404 	addi	r3,r3,16
 400cc7c:	10800044 	addi	r2,r2,1
 400cc80:	45800015 	stw	r22,0(r8)
 400cc84:	47000115 	stw	fp,4(r8)
 400cc88:	d8c01c15 	stw	r3,112(sp)
 400cc8c:	d8801b15 	stw	r2,108(sp)
 400cc90:	a8bff60e 	bge	r21,r2,400cc6c <__alt_data_end+0xfc00cc6c>
 400cc94:	d9801a04 	addi	r6,sp,104
 400cc98:	900b883a 	mov	r5,r18
 400cc9c:	8009883a 	mov	r4,r16
 400cca0:	400bf500 	call	400bf50 <__ssprint_r>
 400cca4:	10005e1e 	bne	r2,zero,400ce20 <___svfiprintf_internal_r+0xd00>
 400cca8:	8c7ffc04 	addi	r17,r17,-16
 400ccac:	d8c01c17 	ldw	r3,112(sp)
 400ccb0:	d8801b17 	ldw	r2,108(sp)
 400ccb4:	d811883a 	mov	r8,sp
 400ccb8:	e47fef16 	blt	fp,r17,400cc78 <__alt_data_end+0xfc00cc78>
 400ccbc:	9825883a 	mov	r18,r19
 400ccc0:	dc002017 	ldw	r16,128(sp)
 400ccc4:	b827883a 	mov	r19,r23
 400ccc8:	882f883a 	mov	r23,r17
 400cccc:	dc402217 	ldw	r17,136(sp)
 400ccd0:	d9402117 	ldw	r5,132(sp)
 400ccd4:	1dc7883a 	add	r3,r3,r23
 400ccd8:	10800044 	addi	r2,r2,1
 400ccdc:	41400015 	stw	r5,0(r8)
 400cce0:	45c00115 	stw	r23,4(r8)
 400cce4:	d8c01c15 	stw	r3,112(sp)
 400cce8:	d8801b15 	stw	r2,108(sp)
 400ccec:	010001c4 	movi	r4,7
 400ccf0:	2080a616 	blt	r4,r2,400cf8c <___svfiprintf_internal_r+0xe6c>
 400ccf4:	42000204 	addi	r8,r8,8
 400ccf8:	a0c7883a 	add	r3,r20,r3
 400ccfc:	10800044 	addi	r2,r2,1
 400cd00:	44400015 	stw	r17,0(r8)
 400cd04:	45000115 	stw	r20,4(r8)
 400cd08:	d8c01c15 	stw	r3,112(sp)
 400cd0c:	d8801b15 	stw	r2,108(sp)
 400cd10:	010001c4 	movi	r4,7
 400cd14:	20808816 	blt	r4,r2,400cf38 <___svfiprintf_internal_r+0xe18>
 400cd18:	42000204 	addi	r8,r8,8
 400cd1c:	8400010c 	andi	r16,r16,4
 400cd20:	80002c26 	beq	r16,zero,400cdd4 <___svfiprintf_internal_r+0xcb4>
 400cd24:	d8802517 	ldw	r2,148(sp)
 400cd28:	14a1c83a 	sub	r16,r2,r18
 400cd2c:	0400290e 	bge	zero,r16,400cdd4 <___svfiprintf_internal_r+0xcb4>
 400cd30:	04400404 	movi	r17,16
 400cd34:	d8801b17 	ldw	r2,108(sp)
 400cd38:	8c01a70e 	bge	r17,r16,400d3d8 <___svfiprintf_internal_r+0x12b8>
 400cd3c:	01410074 	movhi	r5,1025
 400cd40:	294be704 	addi	r5,r5,12188
 400cd44:	d9402815 	stw	r5,160(sp)
 400cd48:	050001c4 	movi	r20,7
 400cd4c:	dd402717 	ldw	r21,156(sp)
 400cd50:	ddc02317 	ldw	r23,140(sp)
 400cd54:	00000306 	br	400cd64 <___svfiprintf_internal_r+0xc44>
 400cd58:	843ffc04 	addi	r16,r16,-16
 400cd5c:	42000204 	addi	r8,r8,8
 400cd60:	8c00130e 	bge	r17,r16,400cdb0 <___svfiprintf_internal_r+0xc90>
 400cd64:	01010074 	movhi	r4,1025
 400cd68:	18c00404 	addi	r3,r3,16
 400cd6c:	10800044 	addi	r2,r2,1
 400cd70:	210be704 	addi	r4,r4,12188
 400cd74:	41000015 	stw	r4,0(r8)
 400cd78:	44400115 	stw	r17,4(r8)
 400cd7c:	d8c01c15 	stw	r3,112(sp)
 400cd80:	d8801b15 	stw	r2,108(sp)
 400cd84:	a0bff40e 	bge	r20,r2,400cd58 <__alt_data_end+0xfc00cd58>
 400cd88:	d9801a04 	addi	r6,sp,104
 400cd8c:	b80b883a 	mov	r5,r23
 400cd90:	a809883a 	mov	r4,r21
 400cd94:	400bf500 	call	400bf50 <__ssprint_r>
 400cd98:	1000211e 	bne	r2,zero,400ce20 <___svfiprintf_internal_r+0xd00>
 400cd9c:	843ffc04 	addi	r16,r16,-16
 400cda0:	d8c01c17 	ldw	r3,112(sp)
 400cda4:	d8801b17 	ldw	r2,108(sp)
 400cda8:	d811883a 	mov	r8,sp
 400cdac:	8c3fed16 	blt	r17,r16,400cd64 <__alt_data_end+0xfc00cd64>
 400cdb0:	d9402817 	ldw	r5,160(sp)
 400cdb4:	1c07883a 	add	r3,r3,r16
 400cdb8:	10800044 	addi	r2,r2,1
 400cdbc:	41400015 	stw	r5,0(r8)
 400cdc0:	44000115 	stw	r16,4(r8)
 400cdc4:	d8c01c15 	stw	r3,112(sp)
 400cdc8:	d8801b15 	stw	r2,108(sp)
 400cdcc:	010001c4 	movi	r4,7
 400cdd0:	2080b516 	blt	r4,r2,400d0a8 <___svfiprintf_internal_r+0xf88>
 400cdd4:	d8802517 	ldw	r2,148(sp)
 400cdd8:	1480010e 	bge	r2,r18,400cde0 <___svfiprintf_internal_r+0xcc0>
 400cddc:	9005883a 	mov	r2,r18
 400cde0:	d9002617 	ldw	r4,152(sp)
 400cde4:	2089883a 	add	r4,r4,r2
 400cde8:	d9002615 	stw	r4,152(sp)
 400cdec:	18005a1e 	bne	r3,zero,400cf58 <___svfiprintf_internal_r+0xe38>
 400cdf0:	98800007 	ldb	r2,0(r19)
 400cdf4:	d8001b15 	stw	zero,108(sp)
 400cdf8:	d811883a 	mov	r8,sp
 400cdfc:	103cec1e 	bne	r2,zero,400c1b0 <__alt_data_end+0xfc00c1b0>
 400ce00:	9825883a 	mov	r18,r19
 400ce04:	003d0206 	br	400c210 <__alt_data_end+0xfc00c210>
 400ce08:	d8801c17 	ldw	r2,112(sp)
 400ce0c:	10000426 	beq	r2,zero,400ce20 <___svfiprintf_internal_r+0xd00>
 400ce10:	d9402317 	ldw	r5,140(sp)
 400ce14:	d9002717 	ldw	r4,156(sp)
 400ce18:	d9801a04 	addi	r6,sp,104
 400ce1c:	400bf500 	call	400bf50 <__ssprint_r>
 400ce20:	d9402317 	ldw	r5,140(sp)
 400ce24:	d8802617 	ldw	r2,152(sp)
 400ce28:	28c0030b 	ldhu	r3,12(r5)
 400ce2c:	18c0100c 	andi	r3,r3,64
 400ce30:	18015c1e 	bne	r3,zero,400d3a4 <___svfiprintf_internal_r+0x1284>
 400ce34:	dfc03717 	ldw	ra,220(sp)
 400ce38:	df003617 	ldw	fp,216(sp)
 400ce3c:	ddc03517 	ldw	r23,212(sp)
 400ce40:	dd803417 	ldw	r22,208(sp)
 400ce44:	dd403317 	ldw	r21,204(sp)
 400ce48:	dd003217 	ldw	r20,200(sp)
 400ce4c:	dcc03117 	ldw	r19,196(sp)
 400ce50:	dc803017 	ldw	r18,192(sp)
 400ce54:	dc402f17 	ldw	r17,188(sp)
 400ce58:	dc002e17 	ldw	r16,184(sp)
 400ce5c:	dec03804 	addi	sp,sp,224
 400ce60:	f800283a 	ret
 400ce64:	d9002517 	ldw	r4,148(sp)
 400ce68:	24afc83a 	sub	r23,r4,r18
 400ce6c:	05ff6e0e 	bge	zero,r23,400cc28 <__alt_data_end+0xfc00cc28>
 400ce70:	07000404 	movi	fp,16
 400ce74:	e5c15c0e 	bge	fp,r23,400d3e8 <___svfiprintf_internal_r+0x12c8>
 400ce78:	01010074 	movhi	r4,1025
 400ce7c:	210be304 	addi	r4,r4,12172
 400ce80:	dc002215 	stw	r16,136(sp)
 400ce84:	dc402815 	stw	r17,160(sp)
 400ce88:	d9002115 	stw	r4,132(sp)
 400ce8c:	b823883a 	mov	r17,r23
 400ce90:	054001c4 	movi	r21,7
 400ce94:	982f883a 	mov	r23,r19
 400ce98:	dc002717 	ldw	r16,156(sp)
 400ce9c:	9027883a 	mov	r19,r18
 400cea0:	dc802317 	ldw	r18,140(sp)
 400cea4:	00000306 	br	400ceb4 <___svfiprintf_internal_r+0xd94>
 400cea8:	8c7ffc04 	addi	r17,r17,-16
 400ceac:	42000204 	addi	r8,r8,8
 400ceb0:	e440110e 	bge	fp,r17,400cef8 <___svfiprintf_internal_r+0xdd8>
 400ceb4:	18c00404 	addi	r3,r3,16
 400ceb8:	10800044 	addi	r2,r2,1
 400cebc:	45800015 	stw	r22,0(r8)
 400cec0:	47000115 	stw	fp,4(r8)
 400cec4:	d8c01c15 	stw	r3,112(sp)
 400cec8:	d8801b15 	stw	r2,108(sp)
 400cecc:	a8bff60e 	bge	r21,r2,400cea8 <__alt_data_end+0xfc00cea8>
 400ced0:	d9801a04 	addi	r6,sp,104
 400ced4:	900b883a 	mov	r5,r18
 400ced8:	8009883a 	mov	r4,r16
 400cedc:	400bf500 	call	400bf50 <__ssprint_r>
 400cee0:	103fcf1e 	bne	r2,zero,400ce20 <__alt_data_end+0xfc00ce20>
 400cee4:	8c7ffc04 	addi	r17,r17,-16
 400cee8:	d8c01c17 	ldw	r3,112(sp)
 400ceec:	d8801b17 	ldw	r2,108(sp)
 400cef0:	d811883a 	mov	r8,sp
 400cef4:	e47fef16 	blt	fp,r17,400ceb4 <__alt_data_end+0xfc00ceb4>
 400cef8:	9825883a 	mov	r18,r19
 400cefc:	dc002217 	ldw	r16,136(sp)
 400cf00:	b827883a 	mov	r19,r23
 400cf04:	882f883a 	mov	r23,r17
 400cf08:	dc402817 	ldw	r17,160(sp)
 400cf0c:	d9402117 	ldw	r5,132(sp)
 400cf10:	1dc7883a 	add	r3,r3,r23
 400cf14:	10800044 	addi	r2,r2,1
 400cf18:	41400015 	stw	r5,0(r8)
 400cf1c:	45c00115 	stw	r23,4(r8)
 400cf20:	d8c01c15 	stw	r3,112(sp)
 400cf24:	d8801b15 	stw	r2,108(sp)
 400cf28:	010001c4 	movi	r4,7
 400cf2c:	2080b716 	blt	r4,r2,400d20c <___svfiprintf_internal_r+0x10ec>
 400cf30:	42000204 	addi	r8,r8,8
 400cf34:	003f3c06 	br	400cc28 <__alt_data_end+0xfc00cc28>
 400cf38:	d9402317 	ldw	r5,140(sp)
 400cf3c:	d9002717 	ldw	r4,156(sp)
 400cf40:	d9801a04 	addi	r6,sp,104
 400cf44:	400bf500 	call	400bf50 <__ssprint_r>
 400cf48:	103fb51e 	bne	r2,zero,400ce20 <__alt_data_end+0xfc00ce20>
 400cf4c:	d8c01c17 	ldw	r3,112(sp)
 400cf50:	d811883a 	mov	r8,sp
 400cf54:	003f7106 	br	400cd1c <__alt_data_end+0xfc00cd1c>
 400cf58:	d9402317 	ldw	r5,140(sp)
 400cf5c:	d9002717 	ldw	r4,156(sp)
 400cf60:	d9801a04 	addi	r6,sp,104
 400cf64:	400bf500 	call	400bf50 <__ssprint_r>
 400cf68:	103fa126 	beq	r2,zero,400cdf0 <__alt_data_end+0xfc00cdf0>
 400cf6c:	003fac06 	br	400ce20 <__alt_data_end+0xfc00ce20>
 400cf70:	d9402317 	ldw	r5,140(sp)
 400cf74:	d9002717 	ldw	r4,156(sp)
 400cf78:	d9801a04 	addi	r6,sp,104
 400cf7c:	400bf500 	call	400bf50 <__ssprint_r>
 400cf80:	103fa71e 	bne	r2,zero,400ce20 <__alt_data_end+0xfc00ce20>
 400cf84:	d811883a 	mov	r8,sp
 400cf88:	003c9e06 	br	400c204 <__alt_data_end+0xfc00c204>
 400cf8c:	d9402317 	ldw	r5,140(sp)
 400cf90:	d9002717 	ldw	r4,156(sp)
 400cf94:	d9801a04 	addi	r6,sp,104
 400cf98:	400bf500 	call	400bf50 <__ssprint_r>
 400cf9c:	103fa01e 	bne	r2,zero,400ce20 <__alt_data_end+0xfc00ce20>
 400cfa0:	d8c01c17 	ldw	r3,112(sp)
 400cfa4:	d8801b17 	ldw	r2,108(sp)
 400cfa8:	d811883a 	mov	r8,sp
 400cfac:	003f5206 	br	400ccf8 <__alt_data_end+0xfc00ccf8>
 400cfb0:	d9402317 	ldw	r5,140(sp)
 400cfb4:	d9002717 	ldw	r4,156(sp)
 400cfb8:	d9801a04 	addi	r6,sp,104
 400cfbc:	400bf500 	call	400bf50 <__ssprint_r>
 400cfc0:	103f971e 	bne	r2,zero,400ce20 <__alt_data_end+0xfc00ce20>
 400cfc4:	d8c01c17 	ldw	r3,112(sp)
 400cfc8:	d8801b17 	ldw	r2,108(sp)
 400cfcc:	d811883a 	mov	r8,sp
 400cfd0:	003f0506 	br	400cbe8 <__alt_data_end+0xfc00cbe8>
 400cfd4:	d9402317 	ldw	r5,140(sp)
 400cfd8:	d9002717 	ldw	r4,156(sp)
 400cfdc:	d9801a04 	addi	r6,sp,104
 400cfe0:	400bf500 	call	400bf50 <__ssprint_r>
 400cfe4:	103f8e1e 	bne	r2,zero,400ce20 <__alt_data_end+0xfc00ce20>
 400cfe8:	d8c01c17 	ldw	r3,112(sp)
 400cfec:	d8801b17 	ldw	r2,108(sp)
 400cff0:	d811883a 	mov	r8,sp
 400cff4:	003f0906 	br	400cc1c <__alt_data_end+0xfc00cc1c>
 400cff8:	d9402017 	ldw	r5,128(sp)
 400cffc:	d8001d85 	stb	zero,118(sp)
 400d000:	28007716 	blt	r5,zero,400d1e0 <___svfiprintf_internal_r+0x10c0>
 400d004:	00ffdfc4 	movi	r3,-129
 400d008:	9504b03a 	or	r2,r18,r20
 400d00c:	80e0703a 	and	r16,r16,r3
 400d010:	103d3926 	beq	r2,zero,400c4f8 <__alt_data_end+0xfc00c4f8>
 400d014:	002b883a 	mov	r21,zero
 400d018:	003d3c06 	br	400c50c <__alt_data_end+0xfc00c50c>
 400d01c:	d9402317 	ldw	r5,140(sp)
 400d020:	d9002717 	ldw	r4,156(sp)
 400d024:	d9801a04 	addi	r6,sp,104
 400d028:	400bf500 	call	400bf50 <__ssprint_r>
 400d02c:	103f7c1e 	bne	r2,zero,400ce20 <__alt_data_end+0xfc00ce20>
 400d030:	d8c01c17 	ldw	r3,112(sp)
 400d034:	d8801b17 	ldw	r2,108(sp)
 400d038:	d811883a 	mov	r8,sp
 400d03c:	003edd06 	br	400cbb4 <__alt_data_end+0xfc00cbb4>
 400d040:	8080100c 	andi	r2,r16,64
 400d044:	d8001d85 	stb	zero,118(sp)
 400d048:	10008426 	beq	r2,zero,400d25c <___svfiprintf_internal_r+0x113c>
 400d04c:	d9402417 	ldw	r5,144(sp)
 400d050:	d8c02017 	ldw	r3,128(sp)
 400d054:	0029883a 	mov	r20,zero
 400d058:	28800104 	addi	r2,r5,4
 400d05c:	2c80000b 	ldhu	r18,0(r5)
 400d060:	183eab0e 	bge	r3,zero,400cb10 <__alt_data_end+0xfc00cb10>
 400d064:	d8802415 	stw	r2,144(sp)
 400d068:	002b883a 	mov	r21,zero
 400d06c:	9504b03a 	or	r2,r18,r20
 400d070:	103e171e 	bne	r2,zero,400c8d0 <__alt_data_end+0xfc00c8d0>
 400d074:	00800044 	movi	r2,1
 400d078:	10803fcc 	andi	r2,r2,255
 400d07c:	00c00044 	movi	r3,1
 400d080:	10c05c26 	beq	r2,r3,400d1f4 <___svfiprintf_internal_r+0x10d4>
 400d084:	00c00084 	movi	r3,2
 400d088:	10fd1e26 	beq	r2,r3,400c504 <__alt_data_end+0xfc00c504>
 400d08c:	003ec406 	br	400cba0 <__alt_data_end+0xfc00cba0>
 400d090:	d9401e17 	ldw	r5,120(sp)
 400d094:	2c69c83a 	sub	r20,r5,r17
 400d098:	003d4506 	br	400c5b0 <__alt_data_end+0xfc00c5b0>
 400d09c:	d8802415 	stw	r2,144(sp)
 400d0a0:	98c00007 	ldb	r3,0(r19)
 400d0a4:	003c6a06 	br	400c250 <__alt_data_end+0xfc00c250>
 400d0a8:	d9402317 	ldw	r5,140(sp)
 400d0ac:	d9002717 	ldw	r4,156(sp)
 400d0b0:	d9801a04 	addi	r6,sp,104
 400d0b4:	400bf500 	call	400bf50 <__ssprint_r>
 400d0b8:	103f591e 	bne	r2,zero,400ce20 <__alt_data_end+0xfc00ce20>
 400d0bc:	d8c01c17 	ldw	r3,112(sp)
 400d0c0:	003f4406 	br	400cdd4 <__alt_data_end+0xfc00cdd4>
 400d0c4:	01410074 	movhi	r5,1025
 400d0c8:	294b8204 	addi	r5,r5,11784
 400d0cc:	d9402915 	stw	r5,164(sp)
 400d0d0:	003d0906 	br	400c4f8 <__alt_data_end+0xfc00c4f8>
 400d0d4:	d8c02417 	ldw	r3,144(sp)
 400d0d8:	d9002617 	ldw	r4,152(sp)
 400d0dc:	d9402417 	ldw	r5,144(sp)
 400d0e0:	18800017 	ldw	r2,0(r3)
 400d0e4:	2007d7fa 	srai	r3,r4,31
 400d0e8:	29400104 	addi	r5,r5,4
 400d0ec:	d9402415 	stw	r5,144(sp)
 400d0f0:	11000015 	stw	r4,0(r2)
 400d0f4:	10c00115 	stw	r3,4(r2)
 400d0f8:	003c2b06 	br	400c1a8 <__alt_data_end+0xfc00c1a8>
 400d0fc:	d8c01d45 	stb	r3,117(sp)
 400d100:	d8c02017 	ldw	r3,128(sp)
 400d104:	00800c04 	movi	r2,48
 400d108:	d8801d05 	stb	r2,116(sp)
 400d10c:	d8001d85 	stb	zero,118(sp)
 400d110:	80800094 	ori	r2,r16,2
 400d114:	1800ac16 	blt	r3,zero,400d3c8 <___svfiprintf_internal_r+0x12a8>
 400d118:	00bfdfc4 	movi	r2,-129
 400d11c:	80a0703a 	and	r16,r16,r2
 400d120:	84000094 	ori	r16,r16,2
 400d124:	002b883a 	mov	r21,zero
 400d128:	003cf806 	br	400c50c <__alt_data_end+0xfc00c50c>
 400d12c:	98c00007 	ldb	r3,0(r19)
 400d130:	003c4706 	br	400c250 <__alt_data_end+0xfc00c250>
 400d134:	d9402417 	ldw	r5,144(sp)
 400d138:	2c800017 	ldw	r18,0(r5)
 400d13c:	29400104 	addi	r5,r5,4
 400d140:	d9402415 	stw	r5,144(sp)
 400d144:	9029d7fa 	srai	r20,r18,31
 400d148:	a005883a 	mov	r2,r20
 400d14c:	003dd806 	br	400c8b0 <__alt_data_end+0xfc00c8b0>
 400d150:	d9402417 	ldw	r5,144(sp)
 400d154:	0029883a 	mov	r20,zero
 400d158:	2c800017 	ldw	r18,0(r5)
 400d15c:	29400104 	addi	r5,r5,4
 400d160:	d9402415 	stw	r5,144(sp)
 400d164:	003cdb06 	br	400c4d4 <__alt_data_end+0xfc00c4d4>
 400d168:	8080100c 	andi	r2,r16,64
 400d16c:	d8001d85 	stb	zero,118(sp)
 400d170:	10003326 	beq	r2,zero,400d240 <___svfiprintf_internal_r+0x1120>
 400d174:	d9002417 	ldw	r4,144(sp)
 400d178:	d9402017 	ldw	r5,128(sp)
 400d17c:	0029883a 	mov	r20,zero
 400d180:	20800104 	addi	r2,r4,4
 400d184:	2480000b 	ldhu	r18,0(r4)
 400d188:	283e7e0e 	bge	r5,zero,400cb84 <__alt_data_end+0xfc00cb84>
 400d18c:	9506b03a 	or	r3,r18,r20
 400d190:	d8802415 	stw	r2,144(sp)
 400d194:	183d271e 	bne	r3,zero,400c634 <__alt_data_end+0xfc00c634>
 400d198:	002b883a 	mov	r21,zero
 400d19c:	0005883a 	mov	r2,zero
 400d1a0:	003fb506 	br	400d078 <__alt_data_end+0xfc00d078>
 400d1a4:	98c00043 	ldbu	r3,1(r19)
 400d1a8:	8c400814 	ori	r17,r17,32
 400d1ac:	9cc00044 	addi	r19,r19,1
 400d1b0:	18c03fcc 	andi	r3,r3,255
 400d1b4:	18c0201c 	xori	r3,r3,128
 400d1b8:	18ffe004 	addi	r3,r3,-128
 400d1bc:	003c2406 	br	400c250 <__alt_data_end+0xfc00c250>
 400d1c0:	d8c02415 	stw	r3,144(sp)
 400d1c4:	002b883a 	mov	r21,zero
 400d1c8:	003fa806 	br	400d06c <__alt_data_end+0xfc00d06c>
 400d1cc:	01010074 	movhi	r4,1025
 400d1d0:	210b8204 	addi	r4,r4,11784
 400d1d4:	d9002915 	stw	r4,164(sp)
 400d1d8:	d8c02415 	stw	r3,144(sp)
 400d1dc:	1021883a 	mov	r16,r2
 400d1e0:	9504b03a 	or	r2,r18,r20
 400d1e4:	103f8b1e 	bne	r2,zero,400d014 <__alt_data_end+0xfc00d014>
 400d1e8:	002b883a 	mov	r21,zero
 400d1ec:	00800084 	movi	r2,2
 400d1f0:	003fa106 	br	400d078 <__alt_data_end+0xfc00d078>
 400d1f4:	0025883a 	mov	r18,zero
 400d1f8:	94800c04 	addi	r18,r18,48
 400d1fc:	dc8019c5 	stb	r18,103(sp)
 400d200:	dd002c17 	ldw	r20,176(sp)
 400d204:	dc4019c4 	addi	r17,sp,103
 400d208:	003ce906 	br	400c5b0 <__alt_data_end+0xfc00c5b0>
 400d20c:	d9402317 	ldw	r5,140(sp)
 400d210:	d9002717 	ldw	r4,156(sp)
 400d214:	d9801a04 	addi	r6,sp,104
 400d218:	400bf500 	call	400bf50 <__ssprint_r>
 400d21c:	103f001e 	bne	r2,zero,400ce20 <__alt_data_end+0xfc00ce20>
 400d220:	d8c01c17 	ldw	r3,112(sp)
 400d224:	d8801b17 	ldw	r2,108(sp)
 400d228:	d811883a 	mov	r8,sp
 400d22c:	003e7e06 	br	400cc28 <__alt_data_end+0xfc00cc28>
 400d230:	01410074 	movhi	r5,1025
 400d234:	294be304 	addi	r5,r5,12172
 400d238:	d9402115 	stw	r5,132(sp)
 400d23c:	003ea406 	br	400ccd0 <__alt_data_end+0xfc00ccd0>
 400d240:	d8c02417 	ldw	r3,144(sp)
 400d244:	d9002017 	ldw	r4,128(sp)
 400d248:	0029883a 	mov	r20,zero
 400d24c:	18800104 	addi	r2,r3,4
 400d250:	1c800017 	ldw	r18,0(r3)
 400d254:	203e4b0e 	bge	r4,zero,400cb84 <__alt_data_end+0xfc00cb84>
 400d258:	003fcc06 	br	400d18c <__alt_data_end+0xfc00d18c>
 400d25c:	d9002417 	ldw	r4,144(sp)
 400d260:	d9402017 	ldw	r5,128(sp)
 400d264:	0029883a 	mov	r20,zero
 400d268:	20800104 	addi	r2,r4,4
 400d26c:	24800017 	ldw	r18,0(r4)
 400d270:	283e270e 	bge	r5,zero,400cb10 <__alt_data_end+0xfc00cb10>
 400d274:	003f7b06 	br	400d064 <__alt_data_end+0xfc00d064>
 400d278:	8400100c 	andi	r16,r16,64
 400d27c:	80003326 	beq	r16,zero,400d34c <___svfiprintf_internal_r+0x122c>
 400d280:	d9402417 	ldw	r5,144(sp)
 400d284:	d8c02617 	ldw	r3,152(sp)
 400d288:	28800017 	ldw	r2,0(r5)
 400d28c:	29400104 	addi	r5,r5,4
 400d290:	d9402415 	stw	r5,144(sp)
 400d294:	10c0000d 	sth	r3,0(r2)
 400d298:	003bc306 	br	400c1a8 <__alt_data_end+0xfc00c1a8>
 400d29c:	d9002417 	ldw	r4,144(sp)
 400d2a0:	0029883a 	mov	r20,zero
 400d2a4:	24800017 	ldw	r18,0(r4)
 400d2a8:	21000104 	addi	r4,r4,4
 400d2ac:	d9002415 	stw	r4,144(sp)
 400d2b0:	003c8806 	br	400c4d4 <__alt_data_end+0xfc00c4d4>
 400d2b4:	d8c02417 	ldw	r3,144(sp)
 400d2b8:	1c800017 	ldw	r18,0(r3)
 400d2bc:	18c00104 	addi	r3,r3,4
 400d2c0:	d8c02415 	stw	r3,144(sp)
 400d2c4:	9029d7fa 	srai	r20,r18,31
 400d2c8:	a005883a 	mov	r2,r20
 400d2cc:	003d7806 	br	400c8b0 <__alt_data_end+0xfc00c8b0>
 400d2d0:	8809883a 	mov	r4,r17
 400d2d4:	da002d15 	stw	r8,180(sp)
 400d2d8:	400beb80 	call	400beb8 <strlen>
 400d2dc:	1029883a 	mov	r20,r2
 400d2e0:	dd401d83 	ldbu	r21,118(sp)
 400d2e4:	ddc02415 	stw	r23,144(sp)
 400d2e8:	d8002015 	stw	zero,128(sp)
 400d2ec:	da002d17 	ldw	r8,180(sp)
 400d2f0:	003caf06 	br	400c5b0 <__alt_data_end+0xfc00c5b0>
 400d2f4:	013fffc4 	movi	r4,-1
 400d2f8:	003df206 	br	400cac4 <__alt_data_end+0xfc00cac4>
 400d2fc:	dd002017 	ldw	r20,128(sp)
 400d300:	00800184 	movi	r2,6
 400d304:	1500012e 	bgeu	r2,r20,400d30c <___svfiprintf_internal_r+0x11ec>
 400d308:	1029883a 	mov	r20,r2
 400d30c:	a025883a 	mov	r18,r20
 400d310:	a0004116 	blt	r20,zero,400d418 <___svfiprintf_internal_r+0x12f8>
 400d314:	04410074 	movhi	r17,1025
 400d318:	ddc02415 	stw	r23,144(sp)
 400d31c:	8c4b8704 	addi	r17,r17,11804
 400d320:	003ce806 	br	400c6c4 <__alt_data_end+0xfc00c6c4>
 400d324:	04001004 	movi	r16,64
 400d328:	800b883a 	mov	r5,r16
 400d32c:	400a36c0 	call	400a36c <_malloc_r>
 400d330:	d8c02317 	ldw	r3,140(sp)
 400d334:	18800015 	stw	r2,0(r3)
 400d338:	18800415 	stw	r2,16(r3)
 400d33c:	10004d26 	beq	r2,zero,400d474 <___svfiprintf_internal_r+0x1354>
 400d340:	d9402317 	ldw	r5,140(sp)
 400d344:	2c000515 	stw	r16,20(r5)
 400d348:	003b8906 	br	400c170 <__alt_data_end+0xfc00c170>
 400d34c:	d9002417 	ldw	r4,144(sp)
 400d350:	d9402617 	ldw	r5,152(sp)
 400d354:	20800017 	ldw	r2,0(r4)
 400d358:	21000104 	addi	r4,r4,4
 400d35c:	d9002415 	stw	r4,144(sp)
 400d360:	11400015 	stw	r5,0(r2)
 400d364:	003b9006 	br	400c1a8 <__alt_data_end+0xfc00c1a8>
 400d368:	8080004c 	andi	r2,r16,1
 400d36c:	002b883a 	mov	r21,zero
 400d370:	10000526 	beq	r2,zero,400d388 <___svfiprintf_internal_r+0x1268>
 400d374:	00800c04 	movi	r2,48
 400d378:	d88019c5 	stb	r2,103(sp)
 400d37c:	dd002c17 	ldw	r20,176(sp)
 400d380:	dc4019c4 	addi	r17,sp,103
 400d384:	003c8a06 	br	400c5b0 <__alt_data_end+0xfc00c5b0>
 400d388:	0029883a 	mov	r20,zero
 400d38c:	dc401a04 	addi	r17,sp,104
 400d390:	003c8706 	br	400c5b0 <__alt_data_end+0xfc00c5b0>
 400d394:	01410074 	movhi	r5,1025
 400d398:	294be704 	addi	r5,r5,12188
 400d39c:	d9402815 	stw	r5,160(sp)
 400d3a0:	003cff06 	br	400c7a0 <__alt_data_end+0xfc00c7a0>
 400d3a4:	00bfffc4 	movi	r2,-1
 400d3a8:	003ea206 	br	400ce34 <__alt_data_end+0xfc00ce34>
 400d3ac:	00800044 	movi	r2,1
 400d3b0:	10803fcc 	andi	r2,r2,255
 400d3b4:	00c00044 	movi	r3,1
 400d3b8:	10fd4526 	beq	r2,r3,400c8d0 <__alt_data_end+0xfc00c8d0>
 400d3bc:	00c00084 	movi	r3,2
 400d3c0:	10fc5226 	beq	r2,r3,400c50c <__alt_data_end+0xfc00c50c>
 400d3c4:	003c9c06 	br	400c638 <__alt_data_end+0xfc00c638>
 400d3c8:	1021883a 	mov	r16,r2
 400d3cc:	002b883a 	mov	r21,zero
 400d3d0:	00800084 	movi	r2,2
 400d3d4:	003ff606 	br	400d3b0 <__alt_data_end+0xfc00d3b0>
 400d3d8:	01010074 	movhi	r4,1025
 400d3dc:	210be704 	addi	r4,r4,12188
 400d3e0:	d9002815 	stw	r4,160(sp)
 400d3e4:	003e7206 	br	400cdb0 <__alt_data_end+0xfc00cdb0>
 400d3e8:	01410074 	movhi	r5,1025
 400d3ec:	294be304 	addi	r5,r5,12172
 400d3f0:	d9402115 	stw	r5,132(sp)
 400d3f4:	003ec506 	br	400cf0c <__alt_data_end+0xfc00cf0c>
 400d3f8:	e027883a 	mov	r19,fp
 400d3fc:	d8002015 	stw	zero,128(sp)
 400d400:	003b9406 	br	400c254 <__alt_data_end+0xfc00c254>
 400d404:	dd002017 	ldw	r20,128(sp)
 400d408:	dd401d83 	ldbu	r21,118(sp)
 400d40c:	ddc02415 	stw	r23,144(sp)
 400d410:	d8002015 	stw	zero,128(sp)
 400d414:	003c6606 	br	400c5b0 <__alt_data_end+0xfc00c5b0>
 400d418:	0025883a 	mov	r18,zero
 400d41c:	003fbd06 	br	400d314 <__alt_data_end+0xfc00d314>
 400d420:	d9402417 	ldw	r5,144(sp)
 400d424:	d8c02417 	ldw	r3,144(sp)
 400d428:	29400017 	ldw	r5,0(r5)
 400d42c:	19000104 	addi	r4,r3,4
 400d430:	d9002415 	stw	r4,144(sp)
 400d434:	d9402015 	stw	r5,128(sp)
 400d438:	98c00043 	ldbu	r3,1(r19)
 400d43c:	e027883a 	mov	r19,fp
 400d440:	283f5b0e 	bge	r5,zero,400d1b0 <__alt_data_end+0xfc00d1b0>
 400d444:	18c03fcc 	andi	r3,r3,255
 400d448:	013fffc4 	movi	r4,-1
 400d44c:	18c0201c 	xori	r3,r3,128
 400d450:	d9002015 	stw	r4,128(sp)
 400d454:	18ffe004 	addi	r3,r3,-128
 400d458:	003b7d06 	br	400c250 <__alt_data_end+0xfc00c250>
 400d45c:	dd401d85 	stb	r21,118(sp)
 400d460:	003cf306 	br	400c830 <__alt_data_end+0xfc00c830>
 400d464:	dd401d85 	stb	r21,118(sp)
 400d468:	003d4e06 	br	400c9a4 <__alt_data_end+0xfc00c9a4>
 400d46c:	dd401d85 	stb	r21,118(sp)
 400d470:	003c0e06 	br	400c4ac <__alt_data_end+0xfc00c4ac>
 400d474:	d9002717 	ldw	r4,156(sp)
 400d478:	00800304 	movi	r2,12
 400d47c:	20800015 	stw	r2,0(r4)
 400d480:	00bfffc4 	movi	r2,-1
 400d484:	003e6b06 	br	400ce34 <__alt_data_end+0xfc00ce34>
 400d488:	dd401d85 	stb	r21,118(sp)
 400d48c:	003d0006 	br	400c890 <__alt_data_end+0xfc00c890>
 400d490:	dd401d85 	stb	r21,118(sp)
 400d494:	003d7106 	br	400ca5c <__alt_data_end+0xfc00ca5c>
 400d498:	dd401d85 	stb	r21,118(sp)
 400d49c:	003c5706 	br	400c5fc <__alt_data_end+0xfc00c5fc>
 400d4a0:	dd401d85 	stb	r21,118(sp)
 400d4a4:	003c2e06 	br	400c560 <__alt_data_end+0xfc00c560>
 400d4a8:	dd401d85 	stb	r21,118(sp)
 400d4ac:	003d8c06 	br	400cae0 <__alt_data_end+0xfc00cae0>
 400d4b0:	dd401d85 	stb	r21,118(sp)
 400d4b4:	003da706 	br	400cb54 <__alt_data_end+0xfc00cb54>
 400d4b8:	dd401d85 	stb	r21,118(sp)
 400d4bc:	003cc806 	br	400c7e0 <__alt_data_end+0xfc00c7e0>

0400d4c0 <_calloc_r>:
 400d4c0:	defffe04 	addi	sp,sp,-8
 400d4c4:	2805883a 	mov	r2,r5
 400d4c8:	dc000015 	stw	r16,0(sp)
 400d4cc:	300b883a 	mov	r5,r6
 400d4d0:	2021883a 	mov	r16,r4
 400d4d4:	1009883a 	mov	r4,r2
 400d4d8:	dfc00115 	stw	ra,4(sp)
 400d4dc:	40024600 	call	4002460 <__mulsi3>
 400d4e0:	100b883a 	mov	r5,r2
 400d4e4:	8009883a 	mov	r4,r16
 400d4e8:	400a36c0 	call	400a36c <_malloc_r>
 400d4ec:	10002926 	beq	r2,zero,400d594 <_calloc_r+0xd4>
 400d4f0:	11bfff17 	ldw	r6,-4(r2)
 400d4f4:	1021883a 	mov	r16,r2
 400d4f8:	00bfff04 	movi	r2,-4
 400d4fc:	308c703a 	and	r6,r6,r2
 400d500:	00c00904 	movi	r3,36
 400d504:	308d883a 	add	r6,r6,r2
 400d508:	19801636 	bltu	r3,r6,400d564 <_calloc_r+0xa4>
 400d50c:	008004c4 	movi	r2,19
 400d510:	11800b2e 	bgeu	r2,r6,400d540 <_calloc_r+0x80>
 400d514:	80000015 	stw	zero,0(r16)
 400d518:	80000115 	stw	zero,4(r16)
 400d51c:	008006c4 	movi	r2,27
 400d520:	11801a2e 	bgeu	r2,r6,400d58c <_calloc_r+0xcc>
 400d524:	80000215 	stw	zero,8(r16)
 400d528:	80000315 	stw	zero,12(r16)
 400d52c:	30c0151e 	bne	r6,r3,400d584 <_calloc_r+0xc4>
 400d530:	80000415 	stw	zero,16(r16)
 400d534:	80800604 	addi	r2,r16,24
 400d538:	80000515 	stw	zero,20(r16)
 400d53c:	00000106 	br	400d544 <_calloc_r+0x84>
 400d540:	8005883a 	mov	r2,r16
 400d544:	10000015 	stw	zero,0(r2)
 400d548:	10000115 	stw	zero,4(r2)
 400d54c:	10000215 	stw	zero,8(r2)
 400d550:	8005883a 	mov	r2,r16
 400d554:	dfc00117 	ldw	ra,4(sp)
 400d558:	dc000017 	ldw	r16,0(sp)
 400d55c:	dec00204 	addi	sp,sp,8
 400d560:	f800283a 	ret
 400d564:	000b883a 	mov	r5,zero
 400d568:	8009883a 	mov	r4,r16
 400d56c:	400db2c0 	call	400db2c <memset>
 400d570:	8005883a 	mov	r2,r16
 400d574:	dfc00117 	ldw	ra,4(sp)
 400d578:	dc000017 	ldw	r16,0(sp)
 400d57c:	dec00204 	addi	sp,sp,8
 400d580:	f800283a 	ret
 400d584:	80800404 	addi	r2,r16,16
 400d588:	003fee06 	br	400d544 <__alt_data_end+0xfc00d544>
 400d58c:	80800204 	addi	r2,r16,8
 400d590:	003fec06 	br	400d544 <__alt_data_end+0xfc00d544>
 400d594:	0005883a 	mov	r2,zero
 400d598:	003fee06 	br	400d554 <__alt_data_end+0xfc00d554>

0400d59c <_malloc_trim_r>:
 400d59c:	defffb04 	addi	sp,sp,-20
 400d5a0:	dcc00315 	stw	r19,12(sp)
 400d5a4:	04c10074 	movhi	r19,1025
 400d5a8:	dc800215 	stw	r18,8(sp)
 400d5ac:	dc400115 	stw	r17,4(sp)
 400d5b0:	dc000015 	stw	r16,0(sp)
 400d5b4:	dfc00415 	stw	ra,16(sp)
 400d5b8:	2821883a 	mov	r16,r5
 400d5bc:	9ccd5f04 	addi	r19,r19,13692
 400d5c0:	2025883a 	mov	r18,r4
 400d5c4:	400effc0 	call	400effc <__malloc_lock>
 400d5c8:	98800217 	ldw	r2,8(r19)
 400d5cc:	14400117 	ldw	r17,4(r2)
 400d5d0:	00bfff04 	movi	r2,-4
 400d5d4:	88a2703a 	and	r17,r17,r2
 400d5d8:	8c21c83a 	sub	r16,r17,r16
 400d5dc:	8403fbc4 	addi	r16,r16,4079
 400d5e0:	8020d33a 	srli	r16,r16,12
 400d5e4:	0083ffc4 	movi	r2,4095
 400d5e8:	843fffc4 	addi	r16,r16,-1
 400d5ec:	8020933a 	slli	r16,r16,12
 400d5f0:	1400060e 	bge	r2,r16,400d60c <_malloc_trim_r+0x70>
 400d5f4:	000b883a 	mov	r5,zero
 400d5f8:	9009883a 	mov	r4,r18
 400d5fc:	400bd880 	call	400bd88 <_sbrk_r>
 400d600:	98c00217 	ldw	r3,8(r19)
 400d604:	1c47883a 	add	r3,r3,r17
 400d608:	10c00a26 	beq	r2,r3,400d634 <_malloc_trim_r+0x98>
 400d60c:	9009883a 	mov	r4,r18
 400d610:	400f0200 	call	400f020 <__malloc_unlock>
 400d614:	0005883a 	mov	r2,zero
 400d618:	dfc00417 	ldw	ra,16(sp)
 400d61c:	dcc00317 	ldw	r19,12(sp)
 400d620:	dc800217 	ldw	r18,8(sp)
 400d624:	dc400117 	ldw	r17,4(sp)
 400d628:	dc000017 	ldw	r16,0(sp)
 400d62c:	dec00504 	addi	sp,sp,20
 400d630:	f800283a 	ret
 400d634:	040bc83a 	sub	r5,zero,r16
 400d638:	9009883a 	mov	r4,r18
 400d63c:	400bd880 	call	400bd88 <_sbrk_r>
 400d640:	00ffffc4 	movi	r3,-1
 400d644:	10c00d26 	beq	r2,r3,400d67c <_malloc_trim_r+0xe0>
 400d648:	00c10074 	movhi	r3,1025
 400d64c:	18d3d904 	addi	r3,r3,20324
 400d650:	18800017 	ldw	r2,0(r3)
 400d654:	99000217 	ldw	r4,8(r19)
 400d658:	8c23c83a 	sub	r17,r17,r16
 400d65c:	8c400054 	ori	r17,r17,1
 400d660:	1421c83a 	sub	r16,r2,r16
 400d664:	24400115 	stw	r17,4(r4)
 400d668:	9009883a 	mov	r4,r18
 400d66c:	1c000015 	stw	r16,0(r3)
 400d670:	400f0200 	call	400f020 <__malloc_unlock>
 400d674:	00800044 	movi	r2,1
 400d678:	003fe706 	br	400d618 <__alt_data_end+0xfc00d618>
 400d67c:	000b883a 	mov	r5,zero
 400d680:	9009883a 	mov	r4,r18
 400d684:	400bd880 	call	400bd88 <_sbrk_r>
 400d688:	99000217 	ldw	r4,8(r19)
 400d68c:	014003c4 	movi	r5,15
 400d690:	1107c83a 	sub	r3,r2,r4
 400d694:	28ffdd0e 	bge	r5,r3,400d60c <__alt_data_end+0xfc00d60c>
 400d698:	01410074 	movhi	r5,1025
 400d69c:	2953a904 	addi	r5,r5,20132
 400d6a0:	29400017 	ldw	r5,0(r5)
 400d6a4:	18c00054 	ori	r3,r3,1
 400d6a8:	20c00115 	stw	r3,4(r4)
 400d6ac:	00c10074 	movhi	r3,1025
 400d6b0:	1145c83a 	sub	r2,r2,r5
 400d6b4:	18d3d904 	addi	r3,r3,20324
 400d6b8:	18800015 	stw	r2,0(r3)
 400d6bc:	003fd306 	br	400d60c <__alt_data_end+0xfc00d60c>

0400d6c0 <_free_r>:
 400d6c0:	28004126 	beq	r5,zero,400d7c8 <_free_r+0x108>
 400d6c4:	defffd04 	addi	sp,sp,-12
 400d6c8:	dc400115 	stw	r17,4(sp)
 400d6cc:	dc000015 	stw	r16,0(sp)
 400d6d0:	2023883a 	mov	r17,r4
 400d6d4:	2821883a 	mov	r16,r5
 400d6d8:	dfc00215 	stw	ra,8(sp)
 400d6dc:	400effc0 	call	400effc <__malloc_lock>
 400d6e0:	81ffff17 	ldw	r7,-4(r16)
 400d6e4:	00bfff84 	movi	r2,-2
 400d6e8:	01010074 	movhi	r4,1025
 400d6ec:	81bffe04 	addi	r6,r16,-8
 400d6f0:	3884703a 	and	r2,r7,r2
 400d6f4:	210d5f04 	addi	r4,r4,13692
 400d6f8:	308b883a 	add	r5,r6,r2
 400d6fc:	2a400117 	ldw	r9,4(r5)
 400d700:	22000217 	ldw	r8,8(r4)
 400d704:	00ffff04 	movi	r3,-4
 400d708:	48c6703a 	and	r3,r9,r3
 400d70c:	2a005726 	beq	r5,r8,400d86c <_free_r+0x1ac>
 400d710:	28c00115 	stw	r3,4(r5)
 400d714:	39c0004c 	andi	r7,r7,1
 400d718:	3800091e 	bne	r7,zero,400d740 <_free_r+0x80>
 400d71c:	823ffe17 	ldw	r8,-8(r16)
 400d720:	22400204 	addi	r9,r4,8
 400d724:	320dc83a 	sub	r6,r6,r8
 400d728:	31c00217 	ldw	r7,8(r6)
 400d72c:	1205883a 	add	r2,r2,r8
 400d730:	3a406526 	beq	r7,r9,400d8c8 <_free_r+0x208>
 400d734:	32000317 	ldw	r8,12(r6)
 400d738:	3a000315 	stw	r8,12(r7)
 400d73c:	41c00215 	stw	r7,8(r8)
 400d740:	28cf883a 	add	r7,r5,r3
 400d744:	39c00117 	ldw	r7,4(r7)
 400d748:	39c0004c 	andi	r7,r7,1
 400d74c:	38003a26 	beq	r7,zero,400d838 <_free_r+0x178>
 400d750:	10c00054 	ori	r3,r2,1
 400d754:	30c00115 	stw	r3,4(r6)
 400d758:	3087883a 	add	r3,r6,r2
 400d75c:	18800015 	stw	r2,0(r3)
 400d760:	00c07fc4 	movi	r3,511
 400d764:	18801936 	bltu	r3,r2,400d7cc <_free_r+0x10c>
 400d768:	1004d0fa 	srli	r2,r2,3
 400d76c:	01c00044 	movi	r7,1
 400d770:	21400117 	ldw	r5,4(r4)
 400d774:	10c00044 	addi	r3,r2,1
 400d778:	18c7883a 	add	r3,r3,r3
 400d77c:	1005d0ba 	srai	r2,r2,2
 400d780:	18c7883a 	add	r3,r3,r3
 400d784:	18c7883a 	add	r3,r3,r3
 400d788:	1907883a 	add	r3,r3,r4
 400d78c:	3884983a 	sll	r2,r7,r2
 400d790:	19c00017 	ldw	r7,0(r3)
 400d794:	1a3ffe04 	addi	r8,r3,-8
 400d798:	1144b03a 	or	r2,r2,r5
 400d79c:	32000315 	stw	r8,12(r6)
 400d7a0:	31c00215 	stw	r7,8(r6)
 400d7a4:	20800115 	stw	r2,4(r4)
 400d7a8:	19800015 	stw	r6,0(r3)
 400d7ac:	39800315 	stw	r6,12(r7)
 400d7b0:	8809883a 	mov	r4,r17
 400d7b4:	dfc00217 	ldw	ra,8(sp)
 400d7b8:	dc400117 	ldw	r17,4(sp)
 400d7bc:	dc000017 	ldw	r16,0(sp)
 400d7c0:	dec00304 	addi	sp,sp,12
 400d7c4:	400f0201 	jmpi	400f020 <__malloc_unlock>
 400d7c8:	f800283a 	ret
 400d7cc:	100ad27a 	srli	r5,r2,9
 400d7d0:	00c00104 	movi	r3,4
 400d7d4:	19404a36 	bltu	r3,r5,400d900 <_free_r+0x240>
 400d7d8:	100ad1ba 	srli	r5,r2,6
 400d7dc:	28c00e44 	addi	r3,r5,57
 400d7e0:	18c7883a 	add	r3,r3,r3
 400d7e4:	29400e04 	addi	r5,r5,56
 400d7e8:	18c7883a 	add	r3,r3,r3
 400d7ec:	18c7883a 	add	r3,r3,r3
 400d7f0:	1909883a 	add	r4,r3,r4
 400d7f4:	20c00017 	ldw	r3,0(r4)
 400d7f8:	01c10074 	movhi	r7,1025
 400d7fc:	213ffe04 	addi	r4,r4,-8
 400d800:	39cd5f04 	addi	r7,r7,13692
 400d804:	20c04426 	beq	r4,r3,400d918 <_free_r+0x258>
 400d808:	01ffff04 	movi	r7,-4
 400d80c:	19400117 	ldw	r5,4(r3)
 400d810:	29ca703a 	and	r5,r5,r7
 400d814:	1140022e 	bgeu	r2,r5,400d820 <_free_r+0x160>
 400d818:	18c00217 	ldw	r3,8(r3)
 400d81c:	20fffb1e 	bne	r4,r3,400d80c <__alt_data_end+0xfc00d80c>
 400d820:	19000317 	ldw	r4,12(r3)
 400d824:	31000315 	stw	r4,12(r6)
 400d828:	30c00215 	stw	r3,8(r6)
 400d82c:	21800215 	stw	r6,8(r4)
 400d830:	19800315 	stw	r6,12(r3)
 400d834:	003fde06 	br	400d7b0 <__alt_data_end+0xfc00d7b0>
 400d838:	29c00217 	ldw	r7,8(r5)
 400d83c:	10c5883a 	add	r2,r2,r3
 400d840:	00c10074 	movhi	r3,1025
 400d844:	18cd6104 	addi	r3,r3,13700
 400d848:	38c03b26 	beq	r7,r3,400d938 <_free_r+0x278>
 400d84c:	2a000317 	ldw	r8,12(r5)
 400d850:	11400054 	ori	r5,r2,1
 400d854:	3087883a 	add	r3,r6,r2
 400d858:	3a000315 	stw	r8,12(r7)
 400d85c:	41c00215 	stw	r7,8(r8)
 400d860:	31400115 	stw	r5,4(r6)
 400d864:	18800015 	stw	r2,0(r3)
 400d868:	003fbd06 	br	400d760 <__alt_data_end+0xfc00d760>
 400d86c:	39c0004c 	andi	r7,r7,1
 400d870:	10c5883a 	add	r2,r2,r3
 400d874:	3800071e 	bne	r7,zero,400d894 <_free_r+0x1d4>
 400d878:	81fffe17 	ldw	r7,-8(r16)
 400d87c:	31cdc83a 	sub	r6,r6,r7
 400d880:	30c00317 	ldw	r3,12(r6)
 400d884:	31400217 	ldw	r5,8(r6)
 400d888:	11c5883a 	add	r2,r2,r7
 400d88c:	28c00315 	stw	r3,12(r5)
 400d890:	19400215 	stw	r5,8(r3)
 400d894:	10c00054 	ori	r3,r2,1
 400d898:	30c00115 	stw	r3,4(r6)
 400d89c:	00c10074 	movhi	r3,1025
 400d8a0:	18d3aa04 	addi	r3,r3,20136
 400d8a4:	18c00017 	ldw	r3,0(r3)
 400d8a8:	21800215 	stw	r6,8(r4)
 400d8ac:	10ffc036 	bltu	r2,r3,400d7b0 <__alt_data_end+0xfc00d7b0>
 400d8b0:	00810074 	movhi	r2,1025
 400d8b4:	1093cb04 	addi	r2,r2,20268
 400d8b8:	11400017 	ldw	r5,0(r2)
 400d8bc:	8809883a 	mov	r4,r17
 400d8c0:	400d59c0 	call	400d59c <_malloc_trim_r>
 400d8c4:	003fba06 	br	400d7b0 <__alt_data_end+0xfc00d7b0>
 400d8c8:	28c9883a 	add	r4,r5,r3
 400d8cc:	21000117 	ldw	r4,4(r4)
 400d8d0:	2100004c 	andi	r4,r4,1
 400d8d4:	2000391e 	bne	r4,zero,400d9bc <_free_r+0x2fc>
 400d8d8:	29c00217 	ldw	r7,8(r5)
 400d8dc:	29000317 	ldw	r4,12(r5)
 400d8e0:	1885883a 	add	r2,r3,r2
 400d8e4:	10c00054 	ori	r3,r2,1
 400d8e8:	39000315 	stw	r4,12(r7)
 400d8ec:	21c00215 	stw	r7,8(r4)
 400d8f0:	30c00115 	stw	r3,4(r6)
 400d8f4:	308d883a 	add	r6,r6,r2
 400d8f8:	30800015 	stw	r2,0(r6)
 400d8fc:	003fac06 	br	400d7b0 <__alt_data_end+0xfc00d7b0>
 400d900:	00c00504 	movi	r3,20
 400d904:	19401536 	bltu	r3,r5,400d95c <_free_r+0x29c>
 400d908:	28c01704 	addi	r3,r5,92
 400d90c:	18c7883a 	add	r3,r3,r3
 400d910:	294016c4 	addi	r5,r5,91
 400d914:	003fb406 	br	400d7e8 <__alt_data_end+0xfc00d7e8>
 400d918:	280bd0ba 	srai	r5,r5,2
 400d91c:	00c00044 	movi	r3,1
 400d920:	38800117 	ldw	r2,4(r7)
 400d924:	194a983a 	sll	r5,r3,r5
 400d928:	2007883a 	mov	r3,r4
 400d92c:	2884b03a 	or	r2,r5,r2
 400d930:	38800115 	stw	r2,4(r7)
 400d934:	003fbb06 	br	400d824 <__alt_data_end+0xfc00d824>
 400d938:	21800515 	stw	r6,20(r4)
 400d93c:	21800415 	stw	r6,16(r4)
 400d940:	10c00054 	ori	r3,r2,1
 400d944:	31c00315 	stw	r7,12(r6)
 400d948:	31c00215 	stw	r7,8(r6)
 400d94c:	30c00115 	stw	r3,4(r6)
 400d950:	308d883a 	add	r6,r6,r2
 400d954:	30800015 	stw	r2,0(r6)
 400d958:	003f9506 	br	400d7b0 <__alt_data_end+0xfc00d7b0>
 400d95c:	00c01504 	movi	r3,84
 400d960:	19400536 	bltu	r3,r5,400d978 <_free_r+0x2b8>
 400d964:	100ad33a 	srli	r5,r2,12
 400d968:	28c01bc4 	addi	r3,r5,111
 400d96c:	18c7883a 	add	r3,r3,r3
 400d970:	29401b84 	addi	r5,r5,110
 400d974:	003f9c06 	br	400d7e8 <__alt_data_end+0xfc00d7e8>
 400d978:	00c05504 	movi	r3,340
 400d97c:	19400536 	bltu	r3,r5,400d994 <_free_r+0x2d4>
 400d980:	100ad3fa 	srli	r5,r2,15
 400d984:	28c01e04 	addi	r3,r5,120
 400d988:	18c7883a 	add	r3,r3,r3
 400d98c:	29401dc4 	addi	r5,r5,119
 400d990:	003f9506 	br	400d7e8 <__alt_data_end+0xfc00d7e8>
 400d994:	00c15504 	movi	r3,1364
 400d998:	19400536 	bltu	r3,r5,400d9b0 <_free_r+0x2f0>
 400d99c:	100ad4ba 	srli	r5,r2,18
 400d9a0:	28c01f44 	addi	r3,r5,125
 400d9a4:	18c7883a 	add	r3,r3,r3
 400d9a8:	29401f04 	addi	r5,r5,124
 400d9ac:	003f8e06 	br	400d7e8 <__alt_data_end+0xfc00d7e8>
 400d9b0:	00c03f84 	movi	r3,254
 400d9b4:	01401f84 	movi	r5,126
 400d9b8:	003f8b06 	br	400d7e8 <__alt_data_end+0xfc00d7e8>
 400d9bc:	10c00054 	ori	r3,r2,1
 400d9c0:	30c00115 	stw	r3,4(r6)
 400d9c4:	308d883a 	add	r6,r6,r2
 400d9c8:	30800015 	stw	r2,0(r6)
 400d9cc:	003f7806 	br	400d7b0 <__alt_data_end+0xfc00d7b0>

0400d9d0 <memmove>:
 400d9d0:	2005883a 	mov	r2,r4
 400d9d4:	29000b2e 	bgeu	r5,r4,400da04 <memmove+0x34>
 400d9d8:	298f883a 	add	r7,r5,r6
 400d9dc:	21c0092e 	bgeu	r4,r7,400da04 <memmove+0x34>
 400d9e0:	2187883a 	add	r3,r4,r6
 400d9e4:	198bc83a 	sub	r5,r3,r6
 400d9e8:	30004826 	beq	r6,zero,400db0c <memmove+0x13c>
 400d9ec:	39ffffc4 	addi	r7,r7,-1
 400d9f0:	39000003 	ldbu	r4,0(r7)
 400d9f4:	18ffffc4 	addi	r3,r3,-1
 400d9f8:	19000005 	stb	r4,0(r3)
 400d9fc:	28fffb1e 	bne	r5,r3,400d9ec <__alt_data_end+0xfc00d9ec>
 400da00:	f800283a 	ret
 400da04:	00c003c4 	movi	r3,15
 400da08:	1980412e 	bgeu	r3,r6,400db10 <memmove+0x140>
 400da0c:	2886b03a 	or	r3,r5,r2
 400da10:	18c000cc 	andi	r3,r3,3
 400da14:	1800401e 	bne	r3,zero,400db18 <memmove+0x148>
 400da18:	33fffc04 	addi	r15,r6,-16
 400da1c:	781ed13a 	srli	r15,r15,4
 400da20:	28c00104 	addi	r3,r5,4
 400da24:	13400104 	addi	r13,r2,4
 400da28:	781c913a 	slli	r14,r15,4
 400da2c:	2b000204 	addi	r12,r5,8
 400da30:	12c00204 	addi	r11,r2,8
 400da34:	73800504 	addi	r14,r14,20
 400da38:	2a800304 	addi	r10,r5,12
 400da3c:	12400304 	addi	r9,r2,12
 400da40:	2b9d883a 	add	r14,r5,r14
 400da44:	2811883a 	mov	r8,r5
 400da48:	100f883a 	mov	r7,r2
 400da4c:	41000017 	ldw	r4,0(r8)
 400da50:	39c00404 	addi	r7,r7,16
 400da54:	18c00404 	addi	r3,r3,16
 400da58:	393ffc15 	stw	r4,-16(r7)
 400da5c:	193ffc17 	ldw	r4,-16(r3)
 400da60:	6b400404 	addi	r13,r13,16
 400da64:	5ac00404 	addi	r11,r11,16
 400da68:	693ffc15 	stw	r4,-16(r13)
 400da6c:	61000017 	ldw	r4,0(r12)
 400da70:	4a400404 	addi	r9,r9,16
 400da74:	42000404 	addi	r8,r8,16
 400da78:	593ffc15 	stw	r4,-16(r11)
 400da7c:	51000017 	ldw	r4,0(r10)
 400da80:	63000404 	addi	r12,r12,16
 400da84:	52800404 	addi	r10,r10,16
 400da88:	493ffc15 	stw	r4,-16(r9)
 400da8c:	1bbfef1e 	bne	r3,r14,400da4c <__alt_data_end+0xfc00da4c>
 400da90:	79000044 	addi	r4,r15,1
 400da94:	2008913a 	slli	r4,r4,4
 400da98:	328003cc 	andi	r10,r6,15
 400da9c:	02c000c4 	movi	r11,3
 400daa0:	1107883a 	add	r3,r2,r4
 400daa4:	290b883a 	add	r5,r5,r4
 400daa8:	5a801e2e 	bgeu	r11,r10,400db24 <memmove+0x154>
 400daac:	1813883a 	mov	r9,r3
 400dab0:	2811883a 	mov	r8,r5
 400dab4:	500f883a 	mov	r7,r10
 400dab8:	41000017 	ldw	r4,0(r8)
 400dabc:	4a400104 	addi	r9,r9,4
 400dac0:	39ffff04 	addi	r7,r7,-4
 400dac4:	493fff15 	stw	r4,-4(r9)
 400dac8:	42000104 	addi	r8,r8,4
 400dacc:	59fffa36 	bltu	r11,r7,400dab8 <__alt_data_end+0xfc00dab8>
 400dad0:	513fff04 	addi	r4,r10,-4
 400dad4:	2008d0ba 	srli	r4,r4,2
 400dad8:	318000cc 	andi	r6,r6,3
 400dadc:	21000044 	addi	r4,r4,1
 400dae0:	2109883a 	add	r4,r4,r4
 400dae4:	2109883a 	add	r4,r4,r4
 400dae8:	1907883a 	add	r3,r3,r4
 400daec:	290b883a 	add	r5,r5,r4
 400daf0:	30000b26 	beq	r6,zero,400db20 <memmove+0x150>
 400daf4:	198d883a 	add	r6,r3,r6
 400daf8:	29c00003 	ldbu	r7,0(r5)
 400dafc:	18c00044 	addi	r3,r3,1
 400db00:	29400044 	addi	r5,r5,1
 400db04:	19ffffc5 	stb	r7,-1(r3)
 400db08:	19bffb1e 	bne	r3,r6,400daf8 <__alt_data_end+0xfc00daf8>
 400db0c:	f800283a 	ret
 400db10:	1007883a 	mov	r3,r2
 400db14:	003ff606 	br	400daf0 <__alt_data_end+0xfc00daf0>
 400db18:	1007883a 	mov	r3,r2
 400db1c:	003ff506 	br	400daf4 <__alt_data_end+0xfc00daf4>
 400db20:	f800283a 	ret
 400db24:	500d883a 	mov	r6,r10
 400db28:	003ff106 	br	400daf0 <__alt_data_end+0xfc00daf0>

0400db2c <memset>:
 400db2c:	20c000cc 	andi	r3,r4,3
 400db30:	2005883a 	mov	r2,r4
 400db34:	18004426 	beq	r3,zero,400dc48 <memset+0x11c>
 400db38:	31ffffc4 	addi	r7,r6,-1
 400db3c:	30004026 	beq	r6,zero,400dc40 <memset+0x114>
 400db40:	2813883a 	mov	r9,r5
 400db44:	200d883a 	mov	r6,r4
 400db48:	2007883a 	mov	r3,r4
 400db4c:	00000406 	br	400db60 <memset+0x34>
 400db50:	3a3fffc4 	addi	r8,r7,-1
 400db54:	31800044 	addi	r6,r6,1
 400db58:	38003926 	beq	r7,zero,400dc40 <memset+0x114>
 400db5c:	400f883a 	mov	r7,r8
 400db60:	18c00044 	addi	r3,r3,1
 400db64:	32400005 	stb	r9,0(r6)
 400db68:	1a0000cc 	andi	r8,r3,3
 400db6c:	403ff81e 	bne	r8,zero,400db50 <__alt_data_end+0xfc00db50>
 400db70:	010000c4 	movi	r4,3
 400db74:	21c02d2e 	bgeu	r4,r7,400dc2c <memset+0x100>
 400db78:	29003fcc 	andi	r4,r5,255
 400db7c:	200c923a 	slli	r6,r4,8
 400db80:	3108b03a 	or	r4,r6,r4
 400db84:	200c943a 	slli	r6,r4,16
 400db88:	218cb03a 	or	r6,r4,r6
 400db8c:	010003c4 	movi	r4,15
 400db90:	21c0182e 	bgeu	r4,r7,400dbf4 <memset+0xc8>
 400db94:	3b3ffc04 	addi	r12,r7,-16
 400db98:	6018d13a 	srli	r12,r12,4
 400db9c:	1a000104 	addi	r8,r3,4
 400dba0:	1ac00204 	addi	r11,r3,8
 400dba4:	6008913a 	slli	r4,r12,4
 400dba8:	1a800304 	addi	r10,r3,12
 400dbac:	1813883a 	mov	r9,r3
 400dbb0:	21000504 	addi	r4,r4,20
 400dbb4:	1909883a 	add	r4,r3,r4
 400dbb8:	49800015 	stw	r6,0(r9)
 400dbbc:	41800015 	stw	r6,0(r8)
 400dbc0:	59800015 	stw	r6,0(r11)
 400dbc4:	51800015 	stw	r6,0(r10)
 400dbc8:	42000404 	addi	r8,r8,16
 400dbcc:	4a400404 	addi	r9,r9,16
 400dbd0:	5ac00404 	addi	r11,r11,16
 400dbd4:	52800404 	addi	r10,r10,16
 400dbd8:	413ff71e 	bne	r8,r4,400dbb8 <__alt_data_end+0xfc00dbb8>
 400dbdc:	63000044 	addi	r12,r12,1
 400dbe0:	6018913a 	slli	r12,r12,4
 400dbe4:	39c003cc 	andi	r7,r7,15
 400dbe8:	010000c4 	movi	r4,3
 400dbec:	1b07883a 	add	r3,r3,r12
 400dbf0:	21c00e2e 	bgeu	r4,r7,400dc2c <memset+0x100>
 400dbf4:	1813883a 	mov	r9,r3
 400dbf8:	3811883a 	mov	r8,r7
 400dbfc:	010000c4 	movi	r4,3
 400dc00:	49800015 	stw	r6,0(r9)
 400dc04:	423fff04 	addi	r8,r8,-4
 400dc08:	4a400104 	addi	r9,r9,4
 400dc0c:	223ffc36 	bltu	r4,r8,400dc00 <__alt_data_end+0xfc00dc00>
 400dc10:	393fff04 	addi	r4,r7,-4
 400dc14:	2008d0ba 	srli	r4,r4,2
 400dc18:	39c000cc 	andi	r7,r7,3
 400dc1c:	21000044 	addi	r4,r4,1
 400dc20:	2109883a 	add	r4,r4,r4
 400dc24:	2109883a 	add	r4,r4,r4
 400dc28:	1907883a 	add	r3,r3,r4
 400dc2c:	38000526 	beq	r7,zero,400dc44 <memset+0x118>
 400dc30:	19cf883a 	add	r7,r3,r7
 400dc34:	19400005 	stb	r5,0(r3)
 400dc38:	18c00044 	addi	r3,r3,1
 400dc3c:	38fffd1e 	bne	r7,r3,400dc34 <__alt_data_end+0xfc00dc34>
 400dc40:	f800283a 	ret
 400dc44:	f800283a 	ret
 400dc48:	2007883a 	mov	r3,r4
 400dc4c:	300f883a 	mov	r7,r6
 400dc50:	003fc706 	br	400db70 <__alt_data_end+0xfc00db70>

0400dc54 <_realloc_r>:
 400dc54:	defff604 	addi	sp,sp,-40
 400dc58:	dc800215 	stw	r18,8(sp)
 400dc5c:	dfc00915 	stw	ra,36(sp)
 400dc60:	df000815 	stw	fp,32(sp)
 400dc64:	ddc00715 	stw	r23,28(sp)
 400dc68:	dd800615 	stw	r22,24(sp)
 400dc6c:	dd400515 	stw	r21,20(sp)
 400dc70:	dd000415 	stw	r20,16(sp)
 400dc74:	dcc00315 	stw	r19,12(sp)
 400dc78:	dc400115 	stw	r17,4(sp)
 400dc7c:	dc000015 	stw	r16,0(sp)
 400dc80:	3025883a 	mov	r18,r6
 400dc84:	2800b726 	beq	r5,zero,400df64 <_realloc_r+0x310>
 400dc88:	282b883a 	mov	r21,r5
 400dc8c:	2029883a 	mov	r20,r4
 400dc90:	400effc0 	call	400effc <__malloc_lock>
 400dc94:	a8bfff17 	ldw	r2,-4(r21)
 400dc98:	043fff04 	movi	r16,-4
 400dc9c:	90c002c4 	addi	r3,r18,11
 400dca0:	01000584 	movi	r4,22
 400dca4:	acfffe04 	addi	r19,r21,-8
 400dca8:	1420703a 	and	r16,r2,r16
 400dcac:	20c0332e 	bgeu	r4,r3,400dd7c <_realloc_r+0x128>
 400dcb0:	047ffe04 	movi	r17,-8
 400dcb4:	1c62703a 	and	r17,r3,r17
 400dcb8:	8807883a 	mov	r3,r17
 400dcbc:	88005816 	blt	r17,zero,400de20 <_realloc_r+0x1cc>
 400dcc0:	8c805736 	bltu	r17,r18,400de20 <_realloc_r+0x1cc>
 400dcc4:	80c0300e 	bge	r16,r3,400dd88 <_realloc_r+0x134>
 400dcc8:	07010074 	movhi	fp,1025
 400dccc:	e70d5f04 	addi	fp,fp,13692
 400dcd0:	e1c00217 	ldw	r7,8(fp)
 400dcd4:	9c09883a 	add	r4,r19,r16
 400dcd8:	22000117 	ldw	r8,4(r4)
 400dcdc:	21c06326 	beq	r4,r7,400de6c <_realloc_r+0x218>
 400dce0:	017fff84 	movi	r5,-2
 400dce4:	414a703a 	and	r5,r8,r5
 400dce8:	214b883a 	add	r5,r4,r5
 400dcec:	29800117 	ldw	r6,4(r5)
 400dcf0:	3180004c 	andi	r6,r6,1
 400dcf4:	30003f26 	beq	r6,zero,400ddf4 <_realloc_r+0x1a0>
 400dcf8:	1080004c 	andi	r2,r2,1
 400dcfc:	10008326 	beq	r2,zero,400df0c <_realloc_r+0x2b8>
 400dd00:	900b883a 	mov	r5,r18
 400dd04:	a009883a 	mov	r4,r20
 400dd08:	400a36c0 	call	400a36c <_malloc_r>
 400dd0c:	1025883a 	mov	r18,r2
 400dd10:	10011e26 	beq	r2,zero,400e18c <_realloc_r+0x538>
 400dd14:	a93fff17 	ldw	r4,-4(r21)
 400dd18:	10fffe04 	addi	r3,r2,-8
 400dd1c:	00bfff84 	movi	r2,-2
 400dd20:	2084703a 	and	r2,r4,r2
 400dd24:	9885883a 	add	r2,r19,r2
 400dd28:	1880ee26 	beq	r3,r2,400e0e4 <_realloc_r+0x490>
 400dd2c:	81bfff04 	addi	r6,r16,-4
 400dd30:	00800904 	movi	r2,36
 400dd34:	1180b836 	bltu	r2,r6,400e018 <_realloc_r+0x3c4>
 400dd38:	00c004c4 	movi	r3,19
 400dd3c:	19809636 	bltu	r3,r6,400df98 <_realloc_r+0x344>
 400dd40:	9005883a 	mov	r2,r18
 400dd44:	a807883a 	mov	r3,r21
 400dd48:	19000017 	ldw	r4,0(r3)
 400dd4c:	11000015 	stw	r4,0(r2)
 400dd50:	19000117 	ldw	r4,4(r3)
 400dd54:	11000115 	stw	r4,4(r2)
 400dd58:	18c00217 	ldw	r3,8(r3)
 400dd5c:	10c00215 	stw	r3,8(r2)
 400dd60:	a80b883a 	mov	r5,r21
 400dd64:	a009883a 	mov	r4,r20
 400dd68:	400d6c00 	call	400d6c0 <_free_r>
 400dd6c:	a009883a 	mov	r4,r20
 400dd70:	400f0200 	call	400f020 <__malloc_unlock>
 400dd74:	9005883a 	mov	r2,r18
 400dd78:	00001206 	br	400ddc4 <_realloc_r+0x170>
 400dd7c:	00c00404 	movi	r3,16
 400dd80:	1823883a 	mov	r17,r3
 400dd84:	003fce06 	br	400dcc0 <__alt_data_end+0xfc00dcc0>
 400dd88:	a825883a 	mov	r18,r21
 400dd8c:	8445c83a 	sub	r2,r16,r17
 400dd90:	00c003c4 	movi	r3,15
 400dd94:	18802636 	bltu	r3,r2,400de30 <_realloc_r+0x1dc>
 400dd98:	99800117 	ldw	r6,4(r19)
 400dd9c:	9c07883a 	add	r3,r19,r16
 400dda0:	3180004c 	andi	r6,r6,1
 400dda4:	3420b03a 	or	r16,r6,r16
 400dda8:	9c000115 	stw	r16,4(r19)
 400ddac:	18800117 	ldw	r2,4(r3)
 400ddb0:	10800054 	ori	r2,r2,1
 400ddb4:	18800115 	stw	r2,4(r3)
 400ddb8:	a009883a 	mov	r4,r20
 400ddbc:	400f0200 	call	400f020 <__malloc_unlock>
 400ddc0:	9005883a 	mov	r2,r18
 400ddc4:	dfc00917 	ldw	ra,36(sp)
 400ddc8:	df000817 	ldw	fp,32(sp)
 400ddcc:	ddc00717 	ldw	r23,28(sp)
 400ddd0:	dd800617 	ldw	r22,24(sp)
 400ddd4:	dd400517 	ldw	r21,20(sp)
 400ddd8:	dd000417 	ldw	r20,16(sp)
 400dddc:	dcc00317 	ldw	r19,12(sp)
 400dde0:	dc800217 	ldw	r18,8(sp)
 400dde4:	dc400117 	ldw	r17,4(sp)
 400dde8:	dc000017 	ldw	r16,0(sp)
 400ddec:	dec00a04 	addi	sp,sp,40
 400ddf0:	f800283a 	ret
 400ddf4:	017fff04 	movi	r5,-4
 400ddf8:	414a703a 	and	r5,r8,r5
 400ddfc:	814d883a 	add	r6,r16,r5
 400de00:	30c01f16 	blt	r6,r3,400de80 <_realloc_r+0x22c>
 400de04:	20800317 	ldw	r2,12(r4)
 400de08:	20c00217 	ldw	r3,8(r4)
 400de0c:	a825883a 	mov	r18,r21
 400de10:	3021883a 	mov	r16,r6
 400de14:	18800315 	stw	r2,12(r3)
 400de18:	10c00215 	stw	r3,8(r2)
 400de1c:	003fdb06 	br	400dd8c <__alt_data_end+0xfc00dd8c>
 400de20:	00800304 	movi	r2,12
 400de24:	a0800015 	stw	r2,0(r20)
 400de28:	0005883a 	mov	r2,zero
 400de2c:	003fe506 	br	400ddc4 <__alt_data_end+0xfc00ddc4>
 400de30:	98c00117 	ldw	r3,4(r19)
 400de34:	9c4b883a 	add	r5,r19,r17
 400de38:	11000054 	ori	r4,r2,1
 400de3c:	18c0004c 	andi	r3,r3,1
 400de40:	1c62b03a 	or	r17,r3,r17
 400de44:	9c400115 	stw	r17,4(r19)
 400de48:	29000115 	stw	r4,4(r5)
 400de4c:	2885883a 	add	r2,r5,r2
 400de50:	10c00117 	ldw	r3,4(r2)
 400de54:	29400204 	addi	r5,r5,8
 400de58:	a009883a 	mov	r4,r20
 400de5c:	18c00054 	ori	r3,r3,1
 400de60:	10c00115 	stw	r3,4(r2)
 400de64:	400d6c00 	call	400d6c0 <_free_r>
 400de68:	003fd306 	br	400ddb8 <__alt_data_end+0xfc00ddb8>
 400de6c:	017fff04 	movi	r5,-4
 400de70:	414a703a 	and	r5,r8,r5
 400de74:	89800404 	addi	r6,r17,16
 400de78:	8151883a 	add	r8,r16,r5
 400de7c:	4180590e 	bge	r8,r6,400dfe4 <_realloc_r+0x390>
 400de80:	1080004c 	andi	r2,r2,1
 400de84:	103f9e1e 	bne	r2,zero,400dd00 <__alt_data_end+0xfc00dd00>
 400de88:	adbffe17 	ldw	r22,-8(r21)
 400de8c:	00bfff04 	movi	r2,-4
 400de90:	9dadc83a 	sub	r22,r19,r22
 400de94:	b1800117 	ldw	r6,4(r22)
 400de98:	3084703a 	and	r2,r6,r2
 400de9c:	20002026 	beq	r4,zero,400df20 <_realloc_r+0x2cc>
 400dea0:	80af883a 	add	r23,r16,r2
 400dea4:	b96f883a 	add	r23,r23,r5
 400dea8:	21c05f26 	beq	r4,r7,400e028 <_realloc_r+0x3d4>
 400deac:	b8c01c16 	blt	r23,r3,400df20 <_realloc_r+0x2cc>
 400deb0:	20800317 	ldw	r2,12(r4)
 400deb4:	20c00217 	ldw	r3,8(r4)
 400deb8:	81bfff04 	addi	r6,r16,-4
 400debc:	01000904 	movi	r4,36
 400dec0:	18800315 	stw	r2,12(r3)
 400dec4:	10c00215 	stw	r3,8(r2)
 400dec8:	b0c00217 	ldw	r3,8(r22)
 400decc:	b0800317 	ldw	r2,12(r22)
 400ded0:	b4800204 	addi	r18,r22,8
 400ded4:	18800315 	stw	r2,12(r3)
 400ded8:	10c00215 	stw	r3,8(r2)
 400dedc:	21801b36 	bltu	r4,r6,400df4c <_realloc_r+0x2f8>
 400dee0:	008004c4 	movi	r2,19
 400dee4:	1180352e 	bgeu	r2,r6,400dfbc <_realloc_r+0x368>
 400dee8:	a8800017 	ldw	r2,0(r21)
 400deec:	b0800215 	stw	r2,8(r22)
 400def0:	a8800117 	ldw	r2,4(r21)
 400def4:	b0800315 	stw	r2,12(r22)
 400def8:	008006c4 	movi	r2,27
 400defc:	11807f36 	bltu	r2,r6,400e0fc <_realloc_r+0x4a8>
 400df00:	b0800404 	addi	r2,r22,16
 400df04:	ad400204 	addi	r21,r21,8
 400df08:	00002d06 	br	400dfc0 <_realloc_r+0x36c>
 400df0c:	adbffe17 	ldw	r22,-8(r21)
 400df10:	00bfff04 	movi	r2,-4
 400df14:	9dadc83a 	sub	r22,r19,r22
 400df18:	b1000117 	ldw	r4,4(r22)
 400df1c:	2084703a 	and	r2,r4,r2
 400df20:	b03f7726 	beq	r22,zero,400dd00 <__alt_data_end+0xfc00dd00>
 400df24:	80af883a 	add	r23,r16,r2
 400df28:	b8ff7516 	blt	r23,r3,400dd00 <__alt_data_end+0xfc00dd00>
 400df2c:	b0800317 	ldw	r2,12(r22)
 400df30:	b0c00217 	ldw	r3,8(r22)
 400df34:	81bfff04 	addi	r6,r16,-4
 400df38:	01000904 	movi	r4,36
 400df3c:	18800315 	stw	r2,12(r3)
 400df40:	10c00215 	stw	r3,8(r2)
 400df44:	b4800204 	addi	r18,r22,8
 400df48:	21bfe52e 	bgeu	r4,r6,400dee0 <__alt_data_end+0xfc00dee0>
 400df4c:	a80b883a 	mov	r5,r21
 400df50:	9009883a 	mov	r4,r18
 400df54:	400d9d00 	call	400d9d0 <memmove>
 400df58:	b821883a 	mov	r16,r23
 400df5c:	b027883a 	mov	r19,r22
 400df60:	003f8a06 	br	400dd8c <__alt_data_end+0xfc00dd8c>
 400df64:	300b883a 	mov	r5,r6
 400df68:	dfc00917 	ldw	ra,36(sp)
 400df6c:	df000817 	ldw	fp,32(sp)
 400df70:	ddc00717 	ldw	r23,28(sp)
 400df74:	dd800617 	ldw	r22,24(sp)
 400df78:	dd400517 	ldw	r21,20(sp)
 400df7c:	dd000417 	ldw	r20,16(sp)
 400df80:	dcc00317 	ldw	r19,12(sp)
 400df84:	dc800217 	ldw	r18,8(sp)
 400df88:	dc400117 	ldw	r17,4(sp)
 400df8c:	dc000017 	ldw	r16,0(sp)
 400df90:	dec00a04 	addi	sp,sp,40
 400df94:	400a36c1 	jmpi	400a36c <_malloc_r>
 400df98:	a8c00017 	ldw	r3,0(r21)
 400df9c:	90c00015 	stw	r3,0(r18)
 400dfa0:	a8c00117 	ldw	r3,4(r21)
 400dfa4:	90c00115 	stw	r3,4(r18)
 400dfa8:	00c006c4 	movi	r3,27
 400dfac:	19804536 	bltu	r3,r6,400e0c4 <_realloc_r+0x470>
 400dfb0:	90800204 	addi	r2,r18,8
 400dfb4:	a8c00204 	addi	r3,r21,8
 400dfb8:	003f6306 	br	400dd48 <__alt_data_end+0xfc00dd48>
 400dfbc:	9005883a 	mov	r2,r18
 400dfc0:	a8c00017 	ldw	r3,0(r21)
 400dfc4:	b821883a 	mov	r16,r23
 400dfc8:	b027883a 	mov	r19,r22
 400dfcc:	10c00015 	stw	r3,0(r2)
 400dfd0:	a8c00117 	ldw	r3,4(r21)
 400dfd4:	10c00115 	stw	r3,4(r2)
 400dfd8:	a8c00217 	ldw	r3,8(r21)
 400dfdc:	10c00215 	stw	r3,8(r2)
 400dfe0:	003f6a06 	br	400dd8c <__alt_data_end+0xfc00dd8c>
 400dfe4:	9c67883a 	add	r19,r19,r17
 400dfe8:	4445c83a 	sub	r2,r8,r17
 400dfec:	e4c00215 	stw	r19,8(fp)
 400dff0:	10800054 	ori	r2,r2,1
 400dff4:	98800115 	stw	r2,4(r19)
 400dff8:	a8bfff17 	ldw	r2,-4(r21)
 400dffc:	a009883a 	mov	r4,r20
 400e000:	1080004c 	andi	r2,r2,1
 400e004:	1462b03a 	or	r17,r2,r17
 400e008:	ac7fff15 	stw	r17,-4(r21)
 400e00c:	400f0200 	call	400f020 <__malloc_unlock>
 400e010:	a805883a 	mov	r2,r21
 400e014:	003f6b06 	br	400ddc4 <__alt_data_end+0xfc00ddc4>
 400e018:	a80b883a 	mov	r5,r21
 400e01c:	9009883a 	mov	r4,r18
 400e020:	400d9d00 	call	400d9d0 <memmove>
 400e024:	003f4e06 	br	400dd60 <__alt_data_end+0xfc00dd60>
 400e028:	89000404 	addi	r4,r17,16
 400e02c:	b93fbc16 	blt	r23,r4,400df20 <__alt_data_end+0xfc00df20>
 400e030:	b0800317 	ldw	r2,12(r22)
 400e034:	b0c00217 	ldw	r3,8(r22)
 400e038:	81bfff04 	addi	r6,r16,-4
 400e03c:	01000904 	movi	r4,36
 400e040:	18800315 	stw	r2,12(r3)
 400e044:	10c00215 	stw	r3,8(r2)
 400e048:	b4800204 	addi	r18,r22,8
 400e04c:	21804336 	bltu	r4,r6,400e15c <_realloc_r+0x508>
 400e050:	008004c4 	movi	r2,19
 400e054:	11803f2e 	bgeu	r2,r6,400e154 <_realloc_r+0x500>
 400e058:	a8800017 	ldw	r2,0(r21)
 400e05c:	b0800215 	stw	r2,8(r22)
 400e060:	a8800117 	ldw	r2,4(r21)
 400e064:	b0800315 	stw	r2,12(r22)
 400e068:	008006c4 	movi	r2,27
 400e06c:	11803f36 	bltu	r2,r6,400e16c <_realloc_r+0x518>
 400e070:	b0800404 	addi	r2,r22,16
 400e074:	ad400204 	addi	r21,r21,8
 400e078:	a8c00017 	ldw	r3,0(r21)
 400e07c:	10c00015 	stw	r3,0(r2)
 400e080:	a8c00117 	ldw	r3,4(r21)
 400e084:	10c00115 	stw	r3,4(r2)
 400e088:	a8c00217 	ldw	r3,8(r21)
 400e08c:	10c00215 	stw	r3,8(r2)
 400e090:	b447883a 	add	r3,r22,r17
 400e094:	bc45c83a 	sub	r2,r23,r17
 400e098:	e0c00215 	stw	r3,8(fp)
 400e09c:	10800054 	ori	r2,r2,1
 400e0a0:	18800115 	stw	r2,4(r3)
 400e0a4:	b0800117 	ldw	r2,4(r22)
 400e0a8:	a009883a 	mov	r4,r20
 400e0ac:	1080004c 	andi	r2,r2,1
 400e0b0:	1462b03a 	or	r17,r2,r17
 400e0b4:	b4400115 	stw	r17,4(r22)
 400e0b8:	400f0200 	call	400f020 <__malloc_unlock>
 400e0bc:	9005883a 	mov	r2,r18
 400e0c0:	003f4006 	br	400ddc4 <__alt_data_end+0xfc00ddc4>
 400e0c4:	a8c00217 	ldw	r3,8(r21)
 400e0c8:	90c00215 	stw	r3,8(r18)
 400e0cc:	a8c00317 	ldw	r3,12(r21)
 400e0d0:	90c00315 	stw	r3,12(r18)
 400e0d4:	30801126 	beq	r6,r2,400e11c <_realloc_r+0x4c8>
 400e0d8:	90800404 	addi	r2,r18,16
 400e0dc:	a8c00404 	addi	r3,r21,16
 400e0e0:	003f1906 	br	400dd48 <__alt_data_end+0xfc00dd48>
 400e0e4:	90ffff17 	ldw	r3,-4(r18)
 400e0e8:	00bfff04 	movi	r2,-4
 400e0ec:	a825883a 	mov	r18,r21
 400e0f0:	1884703a 	and	r2,r3,r2
 400e0f4:	80a1883a 	add	r16,r16,r2
 400e0f8:	003f2406 	br	400dd8c <__alt_data_end+0xfc00dd8c>
 400e0fc:	a8800217 	ldw	r2,8(r21)
 400e100:	b0800415 	stw	r2,16(r22)
 400e104:	a8800317 	ldw	r2,12(r21)
 400e108:	b0800515 	stw	r2,20(r22)
 400e10c:	31000a26 	beq	r6,r4,400e138 <_realloc_r+0x4e4>
 400e110:	b0800604 	addi	r2,r22,24
 400e114:	ad400404 	addi	r21,r21,16
 400e118:	003fa906 	br	400dfc0 <__alt_data_end+0xfc00dfc0>
 400e11c:	a9000417 	ldw	r4,16(r21)
 400e120:	90800604 	addi	r2,r18,24
 400e124:	a8c00604 	addi	r3,r21,24
 400e128:	91000415 	stw	r4,16(r18)
 400e12c:	a9000517 	ldw	r4,20(r21)
 400e130:	91000515 	stw	r4,20(r18)
 400e134:	003f0406 	br	400dd48 <__alt_data_end+0xfc00dd48>
 400e138:	a8c00417 	ldw	r3,16(r21)
 400e13c:	ad400604 	addi	r21,r21,24
 400e140:	b0800804 	addi	r2,r22,32
 400e144:	b0c00615 	stw	r3,24(r22)
 400e148:	a8ffff17 	ldw	r3,-4(r21)
 400e14c:	b0c00715 	stw	r3,28(r22)
 400e150:	003f9b06 	br	400dfc0 <__alt_data_end+0xfc00dfc0>
 400e154:	9005883a 	mov	r2,r18
 400e158:	003fc706 	br	400e078 <__alt_data_end+0xfc00e078>
 400e15c:	a80b883a 	mov	r5,r21
 400e160:	9009883a 	mov	r4,r18
 400e164:	400d9d00 	call	400d9d0 <memmove>
 400e168:	003fc906 	br	400e090 <__alt_data_end+0xfc00e090>
 400e16c:	a8800217 	ldw	r2,8(r21)
 400e170:	b0800415 	stw	r2,16(r22)
 400e174:	a8800317 	ldw	r2,12(r21)
 400e178:	b0800515 	stw	r2,20(r22)
 400e17c:	31000726 	beq	r6,r4,400e19c <_realloc_r+0x548>
 400e180:	b0800604 	addi	r2,r22,24
 400e184:	ad400404 	addi	r21,r21,16
 400e188:	003fbb06 	br	400e078 <__alt_data_end+0xfc00e078>
 400e18c:	a009883a 	mov	r4,r20
 400e190:	400f0200 	call	400f020 <__malloc_unlock>
 400e194:	0005883a 	mov	r2,zero
 400e198:	003f0a06 	br	400ddc4 <__alt_data_end+0xfc00ddc4>
 400e19c:	a8c00417 	ldw	r3,16(r21)
 400e1a0:	ad400604 	addi	r21,r21,24
 400e1a4:	b0800804 	addi	r2,r22,32
 400e1a8:	b0c00615 	stw	r3,24(r22)
 400e1ac:	a8ffff17 	ldw	r3,-4(r21)
 400e1b0:	b0c00715 	stw	r3,28(r22)
 400e1b4:	003fb006 	br	400e078 <__alt_data_end+0xfc00e078>

0400e1b8 <__udivdi3>:
 400e1b8:	defff404 	addi	sp,sp,-48
 400e1bc:	dcc00515 	stw	r19,20(sp)
 400e1c0:	dc000215 	stw	r16,8(sp)
 400e1c4:	dfc00b15 	stw	ra,44(sp)
 400e1c8:	df000a15 	stw	fp,40(sp)
 400e1cc:	ddc00915 	stw	r23,36(sp)
 400e1d0:	dd800815 	stw	r22,32(sp)
 400e1d4:	dd400715 	stw	r21,28(sp)
 400e1d8:	dd000615 	stw	r20,24(sp)
 400e1dc:	dc800415 	stw	r18,16(sp)
 400e1e0:	dc400315 	stw	r17,12(sp)
 400e1e4:	2027883a 	mov	r19,r4
 400e1e8:	2821883a 	mov	r16,r5
 400e1ec:	3800461e 	bne	r7,zero,400e308 <__udivdi3+0x150>
 400e1f0:	3023883a 	mov	r17,r6
 400e1f4:	2025883a 	mov	r18,r4
 400e1f8:	2980572e 	bgeu	r5,r6,400e358 <__udivdi3+0x1a0>
 400e1fc:	00bfffd4 	movui	r2,65535
 400e200:	282d883a 	mov	r22,r5
 400e204:	1180b236 	bltu	r2,r6,400e4d0 <__udivdi3+0x318>
 400e208:	00803fc4 	movi	r2,255
 400e20c:	1185803a 	cmpltu	r2,r2,r6
 400e210:	100490fa 	slli	r2,r2,3
 400e214:	3086d83a 	srl	r3,r6,r2
 400e218:	01010074 	movhi	r4,1025
 400e21c:	210b3884 	addi	r4,r4,11490
 400e220:	20c7883a 	add	r3,r4,r3
 400e224:	18c00003 	ldbu	r3,0(r3)
 400e228:	1885883a 	add	r2,r3,r2
 400e22c:	00c00804 	movi	r3,32
 400e230:	1887c83a 	sub	r3,r3,r2
 400e234:	18000526 	beq	r3,zero,400e24c <__udivdi3+0x94>
 400e238:	80e0983a 	sll	r16,r16,r3
 400e23c:	9884d83a 	srl	r2,r19,r2
 400e240:	30e2983a 	sll	r17,r6,r3
 400e244:	98e4983a 	sll	r18,r19,r3
 400e248:	142cb03a 	or	r22,r2,r16
 400e24c:	882ad43a 	srli	r21,r17,16
 400e250:	b009883a 	mov	r4,r22
 400e254:	8d3fffcc 	andi	r20,r17,65535
 400e258:	a80b883a 	mov	r5,r21
 400e25c:	40024080 	call	4002408 <__umodsi3>
 400e260:	b009883a 	mov	r4,r22
 400e264:	a80b883a 	mov	r5,r21
 400e268:	1027883a 	mov	r19,r2
 400e26c:	40023a40 	call	40023a4 <__udivsi3>
 400e270:	100b883a 	mov	r5,r2
 400e274:	a009883a 	mov	r4,r20
 400e278:	102d883a 	mov	r22,r2
 400e27c:	40024600 	call	4002460 <__mulsi3>
 400e280:	9826943a 	slli	r19,r19,16
 400e284:	9006d43a 	srli	r3,r18,16
 400e288:	1cc6b03a 	or	r3,r3,r19
 400e28c:	1880052e 	bgeu	r3,r2,400e2a4 <__udivdi3+0xec>
 400e290:	1c47883a 	add	r3,r3,r17
 400e294:	b13fffc4 	addi	r4,r22,-1
 400e298:	1c400136 	bltu	r3,r17,400e2a0 <__udivdi3+0xe8>
 400e29c:	18814236 	bltu	r3,r2,400e7a8 <__udivdi3+0x5f0>
 400e2a0:	202d883a 	mov	r22,r4
 400e2a4:	18a1c83a 	sub	r16,r3,r2
 400e2a8:	8009883a 	mov	r4,r16
 400e2ac:	a80b883a 	mov	r5,r21
 400e2b0:	40024080 	call	4002408 <__umodsi3>
 400e2b4:	1027883a 	mov	r19,r2
 400e2b8:	8009883a 	mov	r4,r16
 400e2bc:	a80b883a 	mov	r5,r21
 400e2c0:	9826943a 	slli	r19,r19,16
 400e2c4:	40023a40 	call	40023a4 <__udivsi3>
 400e2c8:	100b883a 	mov	r5,r2
 400e2cc:	a009883a 	mov	r4,r20
 400e2d0:	94bfffcc 	andi	r18,r18,65535
 400e2d4:	1021883a 	mov	r16,r2
 400e2d8:	94e4b03a 	or	r18,r18,r19
 400e2dc:	40024600 	call	4002460 <__mulsi3>
 400e2e0:	9080052e 	bgeu	r18,r2,400e2f8 <__udivdi3+0x140>
 400e2e4:	8ca5883a 	add	r18,r17,r18
 400e2e8:	80ffffc4 	addi	r3,r16,-1
 400e2ec:	94410c36 	bltu	r18,r17,400e720 <__udivdi3+0x568>
 400e2f0:	90810b2e 	bgeu	r18,r2,400e720 <__udivdi3+0x568>
 400e2f4:	843fff84 	addi	r16,r16,-2
 400e2f8:	b004943a 	slli	r2,r22,16
 400e2fc:	0007883a 	mov	r3,zero
 400e300:	1404b03a 	or	r2,r2,r16
 400e304:	00005e06 	br	400e480 <__udivdi3+0x2c8>
 400e308:	29c05b36 	bltu	r5,r7,400e478 <__udivdi3+0x2c0>
 400e30c:	00bfffd4 	movui	r2,65535
 400e310:	11c0672e 	bgeu	r2,r7,400e4b0 <__udivdi3+0x2f8>
 400e314:	00804034 	movhi	r2,256
 400e318:	10bfffc4 	addi	r2,r2,-1
 400e31c:	11c10a36 	bltu	r2,r7,400e748 <__udivdi3+0x590>
 400e320:	00800404 	movi	r2,16
 400e324:	3886d83a 	srl	r3,r7,r2
 400e328:	01010074 	movhi	r4,1025
 400e32c:	210b3884 	addi	r4,r4,11490
 400e330:	20c7883a 	add	r3,r4,r3
 400e334:	18c00003 	ldbu	r3,0(r3)
 400e338:	05c00804 	movi	r23,32
 400e33c:	1885883a 	add	r2,r3,r2
 400e340:	b8afc83a 	sub	r23,r23,r2
 400e344:	b800671e 	bne	r23,zero,400e4e4 <__udivdi3+0x32c>
 400e348:	3c010536 	bltu	r7,r16,400e760 <__udivdi3+0x5a8>
 400e34c:	9985403a 	cmpgeu	r2,r19,r6
 400e350:	0007883a 	mov	r3,zero
 400e354:	00004a06 	br	400e480 <__udivdi3+0x2c8>
 400e358:	3000041e 	bne	r6,zero,400e36c <__udivdi3+0x1b4>
 400e35c:	000b883a 	mov	r5,zero
 400e360:	01000044 	movi	r4,1
 400e364:	40023a40 	call	40023a4 <__udivsi3>
 400e368:	1023883a 	mov	r17,r2
 400e36c:	00bfffd4 	movui	r2,65535
 400e370:	1440532e 	bgeu	r2,r17,400e4c0 <__udivdi3+0x308>
 400e374:	00804034 	movhi	r2,256
 400e378:	10bfffc4 	addi	r2,r2,-1
 400e37c:	1440f436 	bltu	r2,r17,400e750 <__udivdi3+0x598>
 400e380:	00800404 	movi	r2,16
 400e384:	8886d83a 	srl	r3,r17,r2
 400e388:	01010074 	movhi	r4,1025
 400e38c:	210b3884 	addi	r4,r4,11490
 400e390:	20c7883a 	add	r3,r4,r3
 400e394:	18c00003 	ldbu	r3,0(r3)
 400e398:	1885883a 	add	r2,r3,r2
 400e39c:	00c00804 	movi	r3,32
 400e3a0:	1887c83a 	sub	r3,r3,r2
 400e3a4:	1800a51e 	bne	r3,zero,400e63c <__udivdi3+0x484>
 400e3a8:	882ad43a 	srli	r21,r17,16
 400e3ac:	8461c83a 	sub	r16,r16,r17
 400e3b0:	8d3fffcc 	andi	r20,r17,65535
 400e3b4:	00c00044 	movi	r3,1
 400e3b8:	a80b883a 	mov	r5,r21
 400e3bc:	8009883a 	mov	r4,r16
 400e3c0:	d8c00115 	stw	r3,4(sp)
 400e3c4:	40024080 	call	4002408 <__umodsi3>
 400e3c8:	a80b883a 	mov	r5,r21
 400e3cc:	8009883a 	mov	r4,r16
 400e3d0:	1027883a 	mov	r19,r2
 400e3d4:	40023a40 	call	40023a4 <__udivsi3>
 400e3d8:	a00b883a 	mov	r5,r20
 400e3dc:	1009883a 	mov	r4,r2
 400e3e0:	102d883a 	mov	r22,r2
 400e3e4:	40024600 	call	4002460 <__mulsi3>
 400e3e8:	9826943a 	slli	r19,r19,16
 400e3ec:	900ed43a 	srli	r7,r18,16
 400e3f0:	d8c00117 	ldw	r3,4(sp)
 400e3f4:	3cceb03a 	or	r7,r7,r19
 400e3f8:	3880052e 	bgeu	r7,r2,400e410 <__udivdi3+0x258>
 400e3fc:	3c4f883a 	add	r7,r7,r17
 400e400:	b13fffc4 	addi	r4,r22,-1
 400e404:	3c400136 	bltu	r7,r17,400e40c <__udivdi3+0x254>
 400e408:	3880e436 	bltu	r7,r2,400e79c <__udivdi3+0x5e4>
 400e40c:	202d883a 	mov	r22,r4
 400e410:	38a1c83a 	sub	r16,r7,r2
 400e414:	8009883a 	mov	r4,r16
 400e418:	a80b883a 	mov	r5,r21
 400e41c:	d8c00115 	stw	r3,4(sp)
 400e420:	40024080 	call	4002408 <__umodsi3>
 400e424:	1027883a 	mov	r19,r2
 400e428:	8009883a 	mov	r4,r16
 400e42c:	a80b883a 	mov	r5,r21
 400e430:	9826943a 	slli	r19,r19,16
 400e434:	40023a40 	call	40023a4 <__udivsi3>
 400e438:	a00b883a 	mov	r5,r20
 400e43c:	1009883a 	mov	r4,r2
 400e440:	94bfffcc 	andi	r18,r18,65535
 400e444:	1021883a 	mov	r16,r2
 400e448:	94e4b03a 	or	r18,r18,r19
 400e44c:	40024600 	call	4002460 <__mulsi3>
 400e450:	d8c00117 	ldw	r3,4(sp)
 400e454:	9080052e 	bgeu	r18,r2,400e46c <__udivdi3+0x2b4>
 400e458:	8ca5883a 	add	r18,r17,r18
 400e45c:	813fffc4 	addi	r4,r16,-1
 400e460:	9440ad36 	bltu	r18,r17,400e718 <__udivdi3+0x560>
 400e464:	9080ac2e 	bgeu	r18,r2,400e718 <__udivdi3+0x560>
 400e468:	843fff84 	addi	r16,r16,-2
 400e46c:	b004943a 	slli	r2,r22,16
 400e470:	1404b03a 	or	r2,r2,r16
 400e474:	00000206 	br	400e480 <__udivdi3+0x2c8>
 400e478:	0007883a 	mov	r3,zero
 400e47c:	0005883a 	mov	r2,zero
 400e480:	dfc00b17 	ldw	ra,44(sp)
 400e484:	df000a17 	ldw	fp,40(sp)
 400e488:	ddc00917 	ldw	r23,36(sp)
 400e48c:	dd800817 	ldw	r22,32(sp)
 400e490:	dd400717 	ldw	r21,28(sp)
 400e494:	dd000617 	ldw	r20,24(sp)
 400e498:	dcc00517 	ldw	r19,20(sp)
 400e49c:	dc800417 	ldw	r18,16(sp)
 400e4a0:	dc400317 	ldw	r17,12(sp)
 400e4a4:	dc000217 	ldw	r16,8(sp)
 400e4a8:	dec00c04 	addi	sp,sp,48
 400e4ac:	f800283a 	ret
 400e4b0:	00803fc4 	movi	r2,255
 400e4b4:	11c5803a 	cmpltu	r2,r2,r7
 400e4b8:	100490fa 	slli	r2,r2,3
 400e4bc:	003f9906 	br	400e324 <__alt_data_end+0xfc00e324>
 400e4c0:	00803fc4 	movi	r2,255
 400e4c4:	1445803a 	cmpltu	r2,r2,r17
 400e4c8:	100490fa 	slli	r2,r2,3
 400e4cc:	003fad06 	br	400e384 <__alt_data_end+0xfc00e384>
 400e4d0:	00804034 	movhi	r2,256
 400e4d4:	10bfffc4 	addi	r2,r2,-1
 400e4d8:	11809f36 	bltu	r2,r6,400e758 <__udivdi3+0x5a0>
 400e4dc:	00800404 	movi	r2,16
 400e4e0:	003f4c06 	br	400e214 <__alt_data_end+0xfc00e214>
 400e4e4:	3dce983a 	sll	r7,r7,r23
 400e4e8:	30b8d83a 	srl	fp,r6,r2
 400e4ec:	80a2d83a 	srl	r17,r16,r2
 400e4f0:	35cc983a 	sll	r6,r6,r23
 400e4f4:	3f38b03a 	or	fp,r7,fp
 400e4f8:	e024d43a 	srli	r18,fp,16
 400e4fc:	9884d83a 	srl	r2,r19,r2
 400e500:	85e0983a 	sll	r16,r16,r23
 400e504:	8809883a 	mov	r4,r17
 400e508:	900b883a 	mov	r5,r18
 400e50c:	d9800015 	stw	r6,0(sp)
 400e510:	1420b03a 	or	r16,r2,r16
 400e514:	40024080 	call	4002408 <__umodsi3>
 400e518:	900b883a 	mov	r5,r18
 400e51c:	8809883a 	mov	r4,r17
 400e520:	1029883a 	mov	r20,r2
 400e524:	e5bfffcc 	andi	r22,fp,65535
 400e528:	40023a40 	call	40023a4 <__udivsi3>
 400e52c:	100b883a 	mov	r5,r2
 400e530:	b009883a 	mov	r4,r22
 400e534:	102b883a 	mov	r21,r2
 400e538:	40024600 	call	4002460 <__mulsi3>
 400e53c:	a028943a 	slli	r20,r20,16
 400e540:	8006d43a 	srli	r3,r16,16
 400e544:	1d06b03a 	or	r3,r3,r20
 400e548:	1880042e 	bgeu	r3,r2,400e55c <__udivdi3+0x3a4>
 400e54c:	1f07883a 	add	r3,r3,fp
 400e550:	a93fffc4 	addi	r4,r21,-1
 400e554:	1f00892e 	bgeu	r3,fp,400e77c <__udivdi3+0x5c4>
 400e558:	202b883a 	mov	r21,r4
 400e55c:	18a3c83a 	sub	r17,r3,r2
 400e560:	8809883a 	mov	r4,r17
 400e564:	900b883a 	mov	r5,r18
 400e568:	40024080 	call	4002408 <__umodsi3>
 400e56c:	1029883a 	mov	r20,r2
 400e570:	8809883a 	mov	r4,r17
 400e574:	900b883a 	mov	r5,r18
 400e578:	a028943a 	slli	r20,r20,16
 400e57c:	40023a40 	call	40023a4 <__udivsi3>
 400e580:	100b883a 	mov	r5,r2
 400e584:	b009883a 	mov	r4,r22
 400e588:	843fffcc 	andi	r16,r16,65535
 400e58c:	1023883a 	mov	r17,r2
 400e590:	8520b03a 	or	r16,r16,r20
 400e594:	40024600 	call	4002460 <__mulsi3>
 400e598:	8080042e 	bgeu	r16,r2,400e5ac <__udivdi3+0x3f4>
 400e59c:	8721883a 	add	r16,r16,fp
 400e5a0:	88ffffc4 	addi	r3,r17,-1
 400e5a4:	8700712e 	bgeu	r16,fp,400e76c <__udivdi3+0x5b4>
 400e5a8:	1823883a 	mov	r17,r3
 400e5ac:	a80e943a 	slli	r7,r21,16
 400e5b0:	d8c00017 	ldw	r3,0(sp)
 400e5b4:	80a1c83a 	sub	r16,r16,r2
 400e5b8:	3c64b03a 	or	r18,r7,r17
 400e5bc:	1d3fffcc 	andi	r20,r3,65535
 400e5c0:	9022d43a 	srli	r17,r18,16
 400e5c4:	95bfffcc 	andi	r22,r18,65535
 400e5c8:	a00b883a 	mov	r5,r20
 400e5cc:	b009883a 	mov	r4,r22
 400e5d0:	182ad43a 	srli	r21,r3,16
 400e5d4:	40024600 	call	4002460 <__mulsi3>
 400e5d8:	a00b883a 	mov	r5,r20
 400e5dc:	8809883a 	mov	r4,r17
 400e5e0:	1039883a 	mov	fp,r2
 400e5e4:	40024600 	call	4002460 <__mulsi3>
 400e5e8:	8809883a 	mov	r4,r17
 400e5ec:	a80b883a 	mov	r5,r21
 400e5f0:	1029883a 	mov	r20,r2
 400e5f4:	40024600 	call	4002460 <__mulsi3>
 400e5f8:	a80b883a 	mov	r5,r21
 400e5fc:	b009883a 	mov	r4,r22
 400e600:	1023883a 	mov	r17,r2
 400e604:	40024600 	call	4002460 <__mulsi3>
 400e608:	e006d43a 	srli	r3,fp,16
 400e60c:	1505883a 	add	r2,r2,r20
 400e610:	1887883a 	add	r3,r3,r2
 400e614:	1d00022e 	bgeu	r3,r20,400e620 <__udivdi3+0x468>
 400e618:	00800074 	movhi	r2,1
 400e61c:	88a3883a 	add	r17,r17,r2
 400e620:	1804d43a 	srli	r2,r3,16
 400e624:	1463883a 	add	r17,r2,r17
 400e628:	84404436 	bltu	r16,r17,400e73c <__udivdi3+0x584>
 400e62c:	84403e26 	beq	r16,r17,400e728 <__udivdi3+0x570>
 400e630:	9005883a 	mov	r2,r18
 400e634:	0007883a 	mov	r3,zero
 400e638:	003f9106 	br	400e480 <__alt_data_end+0xfc00e480>
 400e63c:	88e2983a 	sll	r17,r17,r3
 400e640:	80aed83a 	srl	r23,r16,r2
 400e644:	80e0983a 	sll	r16,r16,r3
 400e648:	882ad43a 	srli	r21,r17,16
 400e64c:	9884d83a 	srl	r2,r19,r2
 400e650:	b809883a 	mov	r4,r23
 400e654:	a80b883a 	mov	r5,r21
 400e658:	98e4983a 	sll	r18,r19,r3
 400e65c:	142cb03a 	or	r22,r2,r16
 400e660:	40024080 	call	4002408 <__umodsi3>
 400e664:	b809883a 	mov	r4,r23
 400e668:	a80b883a 	mov	r5,r21
 400e66c:	1027883a 	mov	r19,r2
 400e670:	8d3fffcc 	andi	r20,r17,65535
 400e674:	40023a40 	call	40023a4 <__udivsi3>
 400e678:	a009883a 	mov	r4,r20
 400e67c:	100b883a 	mov	r5,r2
 400e680:	102f883a 	mov	r23,r2
 400e684:	40024600 	call	4002460 <__mulsi3>
 400e688:	9826943a 	slli	r19,r19,16
 400e68c:	b008d43a 	srli	r4,r22,16
 400e690:	24c8b03a 	or	r4,r4,r19
 400e694:	2080062e 	bgeu	r4,r2,400e6b0 <__udivdi3+0x4f8>
 400e698:	2449883a 	add	r4,r4,r17
 400e69c:	b8ffffc4 	addi	r3,r23,-1
 400e6a0:	24403c36 	bltu	r4,r17,400e794 <__udivdi3+0x5dc>
 400e6a4:	20803b2e 	bgeu	r4,r2,400e794 <__udivdi3+0x5dc>
 400e6a8:	bdffff84 	addi	r23,r23,-2
 400e6ac:	2449883a 	add	r4,r4,r17
 400e6b0:	20a1c83a 	sub	r16,r4,r2
 400e6b4:	a80b883a 	mov	r5,r21
 400e6b8:	8009883a 	mov	r4,r16
 400e6bc:	40024080 	call	4002408 <__umodsi3>
 400e6c0:	a80b883a 	mov	r5,r21
 400e6c4:	8009883a 	mov	r4,r16
 400e6c8:	1027883a 	mov	r19,r2
 400e6cc:	40023a40 	call	40023a4 <__udivsi3>
 400e6d0:	a009883a 	mov	r4,r20
 400e6d4:	100b883a 	mov	r5,r2
 400e6d8:	9826943a 	slli	r19,r19,16
 400e6dc:	1039883a 	mov	fp,r2
 400e6e0:	40024600 	call	4002460 <__mulsi3>
 400e6e4:	b13fffcc 	andi	r4,r22,65535
 400e6e8:	24c8b03a 	or	r4,r4,r19
 400e6ec:	2080062e 	bgeu	r4,r2,400e708 <__udivdi3+0x550>
 400e6f0:	2449883a 	add	r4,r4,r17
 400e6f4:	e0ffffc4 	addi	r3,fp,-1
 400e6f8:	24402436 	bltu	r4,r17,400e78c <__udivdi3+0x5d4>
 400e6fc:	2080232e 	bgeu	r4,r2,400e78c <__udivdi3+0x5d4>
 400e700:	e73fff84 	addi	fp,fp,-2
 400e704:	2449883a 	add	r4,r4,r17
 400e708:	b82e943a 	slli	r23,r23,16
 400e70c:	20a1c83a 	sub	r16,r4,r2
 400e710:	bf06b03a 	or	r3,r23,fp
 400e714:	003f2806 	br	400e3b8 <__alt_data_end+0xfc00e3b8>
 400e718:	2021883a 	mov	r16,r4
 400e71c:	003f5306 	br	400e46c <__alt_data_end+0xfc00e46c>
 400e720:	1821883a 	mov	r16,r3
 400e724:	003ef406 	br	400e2f8 <__alt_data_end+0xfc00e2f8>
 400e728:	1806943a 	slli	r3,r3,16
 400e72c:	9de6983a 	sll	r19,r19,r23
 400e730:	e73fffcc 	andi	fp,fp,65535
 400e734:	1f07883a 	add	r3,r3,fp
 400e738:	98ffbd2e 	bgeu	r19,r3,400e630 <__alt_data_end+0xfc00e630>
 400e73c:	90bfffc4 	addi	r2,r18,-1
 400e740:	0007883a 	mov	r3,zero
 400e744:	003f4e06 	br	400e480 <__alt_data_end+0xfc00e480>
 400e748:	00800604 	movi	r2,24
 400e74c:	003ef506 	br	400e324 <__alt_data_end+0xfc00e324>
 400e750:	00800604 	movi	r2,24
 400e754:	003f0b06 	br	400e384 <__alt_data_end+0xfc00e384>
 400e758:	00800604 	movi	r2,24
 400e75c:	003ead06 	br	400e214 <__alt_data_end+0xfc00e214>
 400e760:	0007883a 	mov	r3,zero
 400e764:	00800044 	movi	r2,1
 400e768:	003f4506 	br	400e480 <__alt_data_end+0xfc00e480>
 400e76c:	80bf8e2e 	bgeu	r16,r2,400e5a8 <__alt_data_end+0xfc00e5a8>
 400e770:	8c7fff84 	addi	r17,r17,-2
 400e774:	8721883a 	add	r16,r16,fp
 400e778:	003f8c06 	br	400e5ac <__alt_data_end+0xfc00e5ac>
 400e77c:	18bf762e 	bgeu	r3,r2,400e558 <__alt_data_end+0xfc00e558>
 400e780:	ad7fff84 	addi	r21,r21,-2
 400e784:	1f07883a 	add	r3,r3,fp
 400e788:	003f7406 	br	400e55c <__alt_data_end+0xfc00e55c>
 400e78c:	1839883a 	mov	fp,r3
 400e790:	003fdd06 	br	400e708 <__alt_data_end+0xfc00e708>
 400e794:	182f883a 	mov	r23,r3
 400e798:	003fc506 	br	400e6b0 <__alt_data_end+0xfc00e6b0>
 400e79c:	b5bfff84 	addi	r22,r22,-2
 400e7a0:	3c4f883a 	add	r7,r7,r17
 400e7a4:	003f1a06 	br	400e410 <__alt_data_end+0xfc00e410>
 400e7a8:	b5bfff84 	addi	r22,r22,-2
 400e7ac:	1c47883a 	add	r3,r3,r17
 400e7b0:	003ebc06 	br	400e2a4 <__alt_data_end+0xfc00e2a4>

0400e7b4 <__umoddi3>:
 400e7b4:	defff304 	addi	sp,sp,-52
 400e7b8:	df000b15 	stw	fp,44(sp)
 400e7bc:	dc400415 	stw	r17,16(sp)
 400e7c0:	dc000315 	stw	r16,12(sp)
 400e7c4:	dfc00c15 	stw	ra,48(sp)
 400e7c8:	ddc00a15 	stw	r23,40(sp)
 400e7cc:	dd800915 	stw	r22,36(sp)
 400e7d0:	dd400815 	stw	r21,32(sp)
 400e7d4:	dd000715 	stw	r20,28(sp)
 400e7d8:	dcc00615 	stw	r19,24(sp)
 400e7dc:	dc800515 	stw	r18,20(sp)
 400e7e0:	2021883a 	mov	r16,r4
 400e7e4:	2823883a 	mov	r17,r5
 400e7e8:	2839883a 	mov	fp,r5
 400e7ec:	3800401e 	bne	r7,zero,400e8f0 <__umoddi3+0x13c>
 400e7f0:	3027883a 	mov	r19,r6
 400e7f4:	2029883a 	mov	r20,r4
 400e7f8:	2980552e 	bgeu	r5,r6,400e950 <__umoddi3+0x19c>
 400e7fc:	00bfffd4 	movui	r2,65535
 400e800:	1180a236 	bltu	r2,r6,400ea8c <__umoddi3+0x2d8>
 400e804:	01003fc4 	movi	r4,255
 400e808:	2189803a 	cmpltu	r4,r4,r6
 400e80c:	200890fa 	slli	r4,r4,3
 400e810:	3104d83a 	srl	r2,r6,r4
 400e814:	00c10074 	movhi	r3,1025
 400e818:	18cb3884 	addi	r3,r3,11490
 400e81c:	1885883a 	add	r2,r3,r2
 400e820:	10c00003 	ldbu	r3,0(r2)
 400e824:	00800804 	movi	r2,32
 400e828:	1909883a 	add	r4,r3,r4
 400e82c:	1125c83a 	sub	r18,r2,r4
 400e830:	90000526 	beq	r18,zero,400e848 <__umoddi3+0x94>
 400e834:	8ca2983a 	sll	r17,r17,r18
 400e838:	8108d83a 	srl	r4,r16,r4
 400e83c:	34a6983a 	sll	r19,r6,r18
 400e840:	84a8983a 	sll	r20,r16,r18
 400e844:	2478b03a 	or	fp,r4,r17
 400e848:	982cd43a 	srli	r22,r19,16
 400e84c:	e009883a 	mov	r4,fp
 400e850:	9dffffcc 	andi	r23,r19,65535
 400e854:	b00b883a 	mov	r5,r22
 400e858:	40024080 	call	4002408 <__umodsi3>
 400e85c:	b00b883a 	mov	r5,r22
 400e860:	e009883a 	mov	r4,fp
 400e864:	102b883a 	mov	r21,r2
 400e868:	40023a40 	call	40023a4 <__udivsi3>
 400e86c:	100b883a 	mov	r5,r2
 400e870:	b809883a 	mov	r4,r23
 400e874:	40024600 	call	4002460 <__mulsi3>
 400e878:	a82a943a 	slli	r21,r21,16
 400e87c:	a006d43a 	srli	r3,r20,16
 400e880:	1d46b03a 	or	r3,r3,r21
 400e884:	1880032e 	bgeu	r3,r2,400e894 <__umoddi3+0xe0>
 400e888:	1cc7883a 	add	r3,r3,r19
 400e88c:	1cc00136 	bltu	r3,r19,400e894 <__umoddi3+0xe0>
 400e890:	18813136 	bltu	r3,r2,400ed58 <__umoddi3+0x5a4>
 400e894:	18a1c83a 	sub	r16,r3,r2
 400e898:	b00b883a 	mov	r5,r22
 400e89c:	8009883a 	mov	r4,r16
 400e8a0:	40024080 	call	4002408 <__umodsi3>
 400e8a4:	b00b883a 	mov	r5,r22
 400e8a8:	8009883a 	mov	r4,r16
 400e8ac:	1023883a 	mov	r17,r2
 400e8b0:	40023a40 	call	40023a4 <__udivsi3>
 400e8b4:	100b883a 	mov	r5,r2
 400e8b8:	b809883a 	mov	r4,r23
 400e8bc:	8822943a 	slli	r17,r17,16
 400e8c0:	40024600 	call	4002460 <__mulsi3>
 400e8c4:	a0ffffcc 	andi	r3,r20,65535
 400e8c8:	1c46b03a 	or	r3,r3,r17
 400e8cc:	1880042e 	bgeu	r3,r2,400e8e0 <__umoddi3+0x12c>
 400e8d0:	1cc7883a 	add	r3,r3,r19
 400e8d4:	1cc00236 	bltu	r3,r19,400e8e0 <__umoddi3+0x12c>
 400e8d8:	1880012e 	bgeu	r3,r2,400e8e0 <__umoddi3+0x12c>
 400e8dc:	1cc7883a 	add	r3,r3,r19
 400e8e0:	1885c83a 	sub	r2,r3,r2
 400e8e4:	1484d83a 	srl	r2,r2,r18
 400e8e8:	0007883a 	mov	r3,zero
 400e8ec:	00005306 	br	400ea3c <__umoddi3+0x288>
 400e8f0:	29c05036 	bltu	r5,r7,400ea34 <__umoddi3+0x280>
 400e8f4:	00bfffd4 	movui	r2,65535
 400e8f8:	11c05c2e 	bgeu	r2,r7,400ea6c <__umoddi3+0x2b8>
 400e8fc:	00804034 	movhi	r2,256
 400e900:	10bfffc4 	addi	r2,r2,-1
 400e904:	11c10636 	bltu	r2,r7,400ed20 <__umoddi3+0x56c>
 400e908:	01000404 	movi	r4,16
 400e90c:	3904d83a 	srl	r2,r7,r4
 400e910:	00c10074 	movhi	r3,1025
 400e914:	18cb3884 	addi	r3,r3,11490
 400e918:	1885883a 	add	r2,r3,r2
 400e91c:	14c00003 	ldbu	r19,0(r2)
 400e920:	00c00804 	movi	r3,32
 400e924:	9927883a 	add	r19,r19,r4
 400e928:	1ce9c83a 	sub	r20,r3,r19
 400e92c:	a0005c1e 	bne	r20,zero,400eaa0 <__umoddi3+0x2ec>
 400e930:	3c400136 	bltu	r7,r17,400e938 <__umoddi3+0x184>
 400e934:	81810a36 	bltu	r16,r6,400ed60 <__umoddi3+0x5ac>
 400e938:	8185c83a 	sub	r2,r16,r6
 400e93c:	89e3c83a 	sub	r17,r17,r7
 400e940:	8089803a 	cmpltu	r4,r16,r2
 400e944:	8939c83a 	sub	fp,r17,r4
 400e948:	e007883a 	mov	r3,fp
 400e94c:	00003b06 	br	400ea3c <__umoddi3+0x288>
 400e950:	3000041e 	bne	r6,zero,400e964 <__umoddi3+0x1b0>
 400e954:	000b883a 	mov	r5,zero
 400e958:	01000044 	movi	r4,1
 400e95c:	40023a40 	call	40023a4 <__udivsi3>
 400e960:	1027883a 	mov	r19,r2
 400e964:	00bfffd4 	movui	r2,65535
 400e968:	14c0442e 	bgeu	r2,r19,400ea7c <__umoddi3+0x2c8>
 400e96c:	00804034 	movhi	r2,256
 400e970:	10bfffc4 	addi	r2,r2,-1
 400e974:	14c0ec36 	bltu	r2,r19,400ed28 <__umoddi3+0x574>
 400e978:	00800404 	movi	r2,16
 400e97c:	9886d83a 	srl	r3,r19,r2
 400e980:	01010074 	movhi	r4,1025
 400e984:	210b3884 	addi	r4,r4,11490
 400e988:	20c7883a 	add	r3,r4,r3
 400e98c:	18c00003 	ldbu	r3,0(r3)
 400e990:	1887883a 	add	r3,r3,r2
 400e994:	00800804 	movi	r2,32
 400e998:	10e5c83a 	sub	r18,r2,r3
 400e99c:	9000ab1e 	bne	r18,zero,400ec4c <__umoddi3+0x498>
 400e9a0:	982cd43a 	srli	r22,r19,16
 400e9a4:	8ce3c83a 	sub	r17,r17,r19
 400e9a8:	9dffffcc 	andi	r23,r19,65535
 400e9ac:	b00b883a 	mov	r5,r22
 400e9b0:	8809883a 	mov	r4,r17
 400e9b4:	40024080 	call	4002408 <__umodsi3>
 400e9b8:	b00b883a 	mov	r5,r22
 400e9bc:	8809883a 	mov	r4,r17
 400e9c0:	102b883a 	mov	r21,r2
 400e9c4:	40023a40 	call	40023a4 <__udivsi3>
 400e9c8:	b80b883a 	mov	r5,r23
 400e9cc:	1009883a 	mov	r4,r2
 400e9d0:	40024600 	call	4002460 <__mulsi3>
 400e9d4:	a82a943a 	slli	r21,r21,16
 400e9d8:	a006d43a 	srli	r3,r20,16
 400e9dc:	1d46b03a 	or	r3,r3,r21
 400e9e0:	1880042e 	bgeu	r3,r2,400e9f4 <__umoddi3+0x240>
 400e9e4:	1cc7883a 	add	r3,r3,r19
 400e9e8:	1cc00236 	bltu	r3,r19,400e9f4 <__umoddi3+0x240>
 400e9ec:	1880012e 	bgeu	r3,r2,400e9f4 <__umoddi3+0x240>
 400e9f0:	1cc7883a 	add	r3,r3,r19
 400e9f4:	18a1c83a 	sub	r16,r3,r2
 400e9f8:	b00b883a 	mov	r5,r22
 400e9fc:	8009883a 	mov	r4,r16
 400ea00:	40024080 	call	4002408 <__umodsi3>
 400ea04:	1023883a 	mov	r17,r2
 400ea08:	b00b883a 	mov	r5,r22
 400ea0c:	8009883a 	mov	r4,r16
 400ea10:	40023a40 	call	40023a4 <__udivsi3>
 400ea14:	8822943a 	slli	r17,r17,16
 400ea18:	b80b883a 	mov	r5,r23
 400ea1c:	1009883a 	mov	r4,r2
 400ea20:	40024600 	call	4002460 <__mulsi3>
 400ea24:	a53fffcc 	andi	r20,r20,65535
 400ea28:	a446b03a 	or	r3,r20,r17
 400ea2c:	18bfac2e 	bgeu	r3,r2,400e8e0 <__alt_data_end+0xfc00e8e0>
 400ea30:	003fa706 	br	400e8d0 <__alt_data_end+0xfc00e8d0>
 400ea34:	2005883a 	mov	r2,r4
 400ea38:	2807883a 	mov	r3,r5
 400ea3c:	dfc00c17 	ldw	ra,48(sp)
 400ea40:	df000b17 	ldw	fp,44(sp)
 400ea44:	ddc00a17 	ldw	r23,40(sp)
 400ea48:	dd800917 	ldw	r22,36(sp)
 400ea4c:	dd400817 	ldw	r21,32(sp)
 400ea50:	dd000717 	ldw	r20,28(sp)
 400ea54:	dcc00617 	ldw	r19,24(sp)
 400ea58:	dc800517 	ldw	r18,20(sp)
 400ea5c:	dc400417 	ldw	r17,16(sp)
 400ea60:	dc000317 	ldw	r16,12(sp)
 400ea64:	dec00d04 	addi	sp,sp,52
 400ea68:	f800283a 	ret
 400ea6c:	04c03fc4 	movi	r19,255
 400ea70:	99c9803a 	cmpltu	r4,r19,r7
 400ea74:	200890fa 	slli	r4,r4,3
 400ea78:	003fa406 	br	400e90c <__alt_data_end+0xfc00e90c>
 400ea7c:	00803fc4 	movi	r2,255
 400ea80:	14c5803a 	cmpltu	r2,r2,r19
 400ea84:	100490fa 	slli	r2,r2,3
 400ea88:	003fbc06 	br	400e97c <__alt_data_end+0xfc00e97c>
 400ea8c:	00804034 	movhi	r2,256
 400ea90:	10bfffc4 	addi	r2,r2,-1
 400ea94:	1180a636 	bltu	r2,r6,400ed30 <__umoddi3+0x57c>
 400ea98:	01000404 	movi	r4,16
 400ea9c:	003f5c06 	br	400e810 <__alt_data_end+0xfc00e810>
 400eaa0:	3d0e983a 	sll	r7,r7,r20
 400eaa4:	34ead83a 	srl	r21,r6,r19
 400eaa8:	8cc6d83a 	srl	r3,r17,r19
 400eaac:	8d10983a 	sll	r8,r17,r20
 400eab0:	3d6ab03a 	or	r21,r7,r21
 400eab4:	a82cd43a 	srli	r22,r21,16
 400eab8:	84e2d83a 	srl	r17,r16,r19
 400eabc:	1809883a 	mov	r4,r3
 400eac0:	b00b883a 	mov	r5,r22
 400eac4:	8a22b03a 	or	r17,r17,r8
 400eac8:	3524983a 	sll	r18,r6,r20
 400eacc:	dc400015 	stw	r17,0(sp)
 400ead0:	d8c00115 	stw	r3,4(sp)
 400ead4:	40024080 	call	4002408 <__umodsi3>
 400ead8:	d8c00117 	ldw	r3,4(sp)
 400eadc:	b00b883a 	mov	r5,r22
 400eae0:	1039883a 	mov	fp,r2
 400eae4:	1809883a 	mov	r4,r3
 400eae8:	40023a40 	call	40023a4 <__udivsi3>
 400eaec:	adffffcc 	andi	r23,r21,65535
 400eaf0:	100b883a 	mov	r5,r2
 400eaf4:	b809883a 	mov	r4,r23
 400eaf8:	1023883a 	mov	r17,r2
 400eafc:	40024600 	call	4002460 <__mulsi3>
 400eb00:	d9400017 	ldw	r5,0(sp)
 400eb04:	e008943a 	slli	r4,fp,16
 400eb08:	8520983a 	sll	r16,r16,r20
 400eb0c:	2806d43a 	srli	r3,r5,16
 400eb10:	1906b03a 	or	r3,r3,r4
 400eb14:	1880042e 	bgeu	r3,r2,400eb28 <__umoddi3+0x374>
 400eb18:	1d47883a 	add	r3,r3,r21
 400eb1c:	893fffc4 	addi	r4,r17,-1
 400eb20:	1d40892e 	bgeu	r3,r21,400ed48 <__umoddi3+0x594>
 400eb24:	2023883a 	mov	r17,r4
 400eb28:	18b9c83a 	sub	fp,r3,r2
 400eb2c:	b00b883a 	mov	r5,r22
 400eb30:	e009883a 	mov	r4,fp
 400eb34:	40024080 	call	4002408 <__umodsi3>
 400eb38:	b00b883a 	mov	r5,r22
 400eb3c:	e009883a 	mov	r4,fp
 400eb40:	d8800215 	stw	r2,8(sp)
 400eb44:	40023a40 	call	40023a4 <__udivsi3>
 400eb48:	100b883a 	mov	r5,r2
 400eb4c:	b809883a 	mov	r4,r23
 400eb50:	102d883a 	mov	r22,r2
 400eb54:	40024600 	call	4002460 <__mulsi3>
 400eb58:	d9800217 	ldw	r6,8(sp)
 400eb5c:	d8c00017 	ldw	r3,0(sp)
 400eb60:	300c943a 	slli	r6,r6,16
 400eb64:	1a3fffcc 	andi	r8,r3,65535
 400eb68:	4190b03a 	or	r8,r8,r6
 400eb6c:	4080042e 	bgeu	r8,r2,400eb80 <__umoddi3+0x3cc>
 400eb70:	4551883a 	add	r8,r8,r21
 400eb74:	b0ffffc4 	addi	r3,r22,-1
 400eb78:	45406f2e 	bgeu	r8,r21,400ed38 <__umoddi3+0x584>
 400eb7c:	182d883a 	mov	r22,r3
 400eb80:	880e943a 	slli	r7,r17,16
 400eb84:	9006d43a 	srli	r3,r18,16
 400eb88:	91bfffcc 	andi	r6,r18,65535
 400eb8c:	3dacb03a 	or	r22,r7,r22
 400eb90:	b02ed43a 	srli	r23,r22,16
 400eb94:	b5bfffcc 	andi	r22,r22,65535
 400eb98:	300b883a 	mov	r5,r6
 400eb9c:	b009883a 	mov	r4,r22
 400eba0:	40a3c83a 	sub	r17,r8,r2
 400eba4:	d8c00115 	stw	r3,4(sp)
 400eba8:	d9800215 	stw	r6,8(sp)
 400ebac:	40024600 	call	4002460 <__mulsi3>
 400ebb0:	d9800217 	ldw	r6,8(sp)
 400ebb4:	b809883a 	mov	r4,r23
 400ebb8:	1039883a 	mov	fp,r2
 400ebbc:	300b883a 	mov	r5,r6
 400ebc0:	40024600 	call	4002460 <__mulsi3>
 400ebc4:	d8c00117 	ldw	r3,4(sp)
 400ebc8:	b809883a 	mov	r4,r23
 400ebcc:	d8800215 	stw	r2,8(sp)
 400ebd0:	180b883a 	mov	r5,r3
 400ebd4:	40024600 	call	4002460 <__mulsi3>
 400ebd8:	d8c00117 	ldw	r3,4(sp)
 400ebdc:	b009883a 	mov	r4,r22
 400ebe0:	102f883a 	mov	r23,r2
 400ebe4:	180b883a 	mov	r5,r3
 400ebe8:	40024600 	call	4002460 <__mulsi3>
 400ebec:	d9800217 	ldw	r6,8(sp)
 400ebf0:	e006d43a 	srli	r3,fp,16
 400ebf4:	1185883a 	add	r2,r2,r6
 400ebf8:	1885883a 	add	r2,r3,r2
 400ebfc:	1180022e 	bgeu	r2,r6,400ec08 <__umoddi3+0x454>
 400ec00:	00c00074 	movhi	r3,1
 400ec04:	b8ef883a 	add	r23,r23,r3
 400ec08:	1006d43a 	srli	r3,r2,16
 400ec0c:	1004943a 	slli	r2,r2,16
 400ec10:	e73fffcc 	andi	fp,fp,65535
 400ec14:	1dc7883a 	add	r3,r3,r23
 400ec18:	1739883a 	add	fp,r2,fp
 400ec1c:	88c03a36 	bltu	r17,r3,400ed08 <__umoddi3+0x554>
 400ec20:	88c05126 	beq	r17,r3,400ed68 <__umoddi3+0x5b4>
 400ec24:	88c9c83a 	sub	r4,r17,r3
 400ec28:	e00f883a 	mov	r7,fp
 400ec2c:	81cfc83a 	sub	r7,r16,r7
 400ec30:	81c7803a 	cmpltu	r3,r16,r7
 400ec34:	20c7c83a 	sub	r3,r4,r3
 400ec38:	1cc4983a 	sll	r2,r3,r19
 400ec3c:	3d0ed83a 	srl	r7,r7,r20
 400ec40:	1d06d83a 	srl	r3,r3,r20
 400ec44:	11c4b03a 	or	r2,r2,r7
 400ec48:	003f7c06 	br	400ea3c <__alt_data_end+0xfc00ea3c>
 400ec4c:	9ca6983a 	sll	r19,r19,r18
 400ec50:	88f8d83a 	srl	fp,r17,r3
 400ec54:	80c4d83a 	srl	r2,r16,r3
 400ec58:	982cd43a 	srli	r22,r19,16
 400ec5c:	8ca2983a 	sll	r17,r17,r18
 400ec60:	e009883a 	mov	r4,fp
 400ec64:	b00b883a 	mov	r5,r22
 400ec68:	146ab03a 	or	r21,r2,r17
 400ec6c:	40024080 	call	4002408 <__umodsi3>
 400ec70:	b00b883a 	mov	r5,r22
 400ec74:	e009883a 	mov	r4,fp
 400ec78:	1029883a 	mov	r20,r2
 400ec7c:	9dffffcc 	andi	r23,r19,65535
 400ec80:	40023a40 	call	40023a4 <__udivsi3>
 400ec84:	b809883a 	mov	r4,r23
 400ec88:	100b883a 	mov	r5,r2
 400ec8c:	40024600 	call	4002460 <__mulsi3>
 400ec90:	a008943a 	slli	r4,r20,16
 400ec94:	a806d43a 	srli	r3,r21,16
 400ec98:	84a8983a 	sll	r20,r16,r18
 400ec9c:	1906b03a 	or	r3,r3,r4
 400eca0:	1880042e 	bgeu	r3,r2,400ecb4 <__umoddi3+0x500>
 400eca4:	1cc7883a 	add	r3,r3,r19
 400eca8:	1cc00236 	bltu	r3,r19,400ecb4 <__umoddi3+0x500>
 400ecac:	1880012e 	bgeu	r3,r2,400ecb4 <__umoddi3+0x500>
 400ecb0:	1cc7883a 	add	r3,r3,r19
 400ecb4:	18a3c83a 	sub	r17,r3,r2
 400ecb8:	b00b883a 	mov	r5,r22
 400ecbc:	8809883a 	mov	r4,r17
 400ecc0:	40024080 	call	4002408 <__umodsi3>
 400ecc4:	b00b883a 	mov	r5,r22
 400ecc8:	8809883a 	mov	r4,r17
 400eccc:	1021883a 	mov	r16,r2
 400ecd0:	40023a40 	call	40023a4 <__udivsi3>
 400ecd4:	100b883a 	mov	r5,r2
 400ecd8:	b809883a 	mov	r4,r23
 400ecdc:	8020943a 	slli	r16,r16,16
 400ece0:	40024600 	call	4002460 <__mulsi3>
 400ece4:	a8ffffcc 	andi	r3,r21,65535
 400ece8:	1c06b03a 	or	r3,r3,r16
 400ecec:	1880042e 	bgeu	r3,r2,400ed00 <__umoddi3+0x54c>
 400ecf0:	1cc7883a 	add	r3,r3,r19
 400ecf4:	1cc00236 	bltu	r3,r19,400ed00 <__umoddi3+0x54c>
 400ecf8:	1880012e 	bgeu	r3,r2,400ed00 <__umoddi3+0x54c>
 400ecfc:	1cc7883a 	add	r3,r3,r19
 400ed00:	18a3c83a 	sub	r17,r3,r2
 400ed04:	003f2906 	br	400e9ac <__alt_data_end+0xfc00e9ac>
 400ed08:	e48fc83a 	sub	r7,fp,r18
 400ed0c:	1d49c83a 	sub	r4,r3,r21
 400ed10:	e1f9803a 	cmpltu	fp,fp,r7
 400ed14:	2739c83a 	sub	fp,r4,fp
 400ed18:	8f09c83a 	sub	r4,r17,fp
 400ed1c:	003fc306 	br	400ec2c <__alt_data_end+0xfc00ec2c>
 400ed20:	01000604 	movi	r4,24
 400ed24:	003ef906 	br	400e90c <__alt_data_end+0xfc00e90c>
 400ed28:	00800604 	movi	r2,24
 400ed2c:	003f1306 	br	400e97c <__alt_data_end+0xfc00e97c>
 400ed30:	01000604 	movi	r4,24
 400ed34:	003eb606 	br	400e810 <__alt_data_end+0xfc00e810>
 400ed38:	40bf902e 	bgeu	r8,r2,400eb7c <__alt_data_end+0xfc00eb7c>
 400ed3c:	b5bfff84 	addi	r22,r22,-2
 400ed40:	4551883a 	add	r8,r8,r21
 400ed44:	003f8e06 	br	400eb80 <__alt_data_end+0xfc00eb80>
 400ed48:	18bf762e 	bgeu	r3,r2,400eb24 <__alt_data_end+0xfc00eb24>
 400ed4c:	8c7fff84 	addi	r17,r17,-2
 400ed50:	1d47883a 	add	r3,r3,r21
 400ed54:	003f7406 	br	400eb28 <__alt_data_end+0xfc00eb28>
 400ed58:	1cc7883a 	add	r3,r3,r19
 400ed5c:	003ecd06 	br	400e894 <__alt_data_end+0xfc00e894>
 400ed60:	8005883a 	mov	r2,r16
 400ed64:	003ef806 	br	400e948 <__alt_data_end+0xfc00e948>
 400ed68:	873fe736 	bltu	r16,fp,400ed08 <__alt_data_end+0xfc00ed08>
 400ed6c:	e00f883a 	mov	r7,fp
 400ed70:	0009883a 	mov	r4,zero
 400ed74:	003fad06 	br	400ec2c <__alt_data_end+0xfc00ec2c>

0400ed78 <__eqdf2>:
 400ed78:	2804d53a 	srli	r2,r5,20
 400ed7c:	3806d53a 	srli	r3,r7,20
 400ed80:	02000434 	movhi	r8,16
 400ed84:	423fffc4 	addi	r8,r8,-1
 400ed88:	1081ffcc 	andi	r2,r2,2047
 400ed8c:	0281ffc4 	movi	r10,2047
 400ed90:	2a12703a 	and	r9,r5,r8
 400ed94:	18c1ffcc 	andi	r3,r3,2047
 400ed98:	3a10703a 	and	r8,r7,r8
 400ed9c:	280ad7fa 	srli	r5,r5,31
 400eda0:	380ed7fa 	srli	r7,r7,31
 400eda4:	12801026 	beq	r2,r10,400ede8 <__eqdf2+0x70>
 400eda8:	0281ffc4 	movi	r10,2047
 400edac:	1a800a26 	beq	r3,r10,400edd8 <__eqdf2+0x60>
 400edb0:	10c00226 	beq	r2,r3,400edbc <__eqdf2+0x44>
 400edb4:	00800044 	movi	r2,1
 400edb8:	f800283a 	ret
 400edbc:	4a3ffd1e 	bne	r9,r8,400edb4 <__alt_data_end+0xfc00edb4>
 400edc0:	21bffc1e 	bne	r4,r6,400edb4 <__alt_data_end+0xfc00edb4>
 400edc4:	29c00c26 	beq	r5,r7,400edf8 <__eqdf2+0x80>
 400edc8:	103ffa1e 	bne	r2,zero,400edb4 <__alt_data_end+0xfc00edb4>
 400edcc:	2244b03a 	or	r2,r4,r9
 400edd0:	1004c03a 	cmpne	r2,r2,zero
 400edd4:	f800283a 	ret
 400edd8:	3214b03a 	or	r10,r6,r8
 400eddc:	503ff426 	beq	r10,zero,400edb0 <__alt_data_end+0xfc00edb0>
 400ede0:	00800044 	movi	r2,1
 400ede4:	f800283a 	ret
 400ede8:	2254b03a 	or	r10,r4,r9
 400edec:	503fee26 	beq	r10,zero,400eda8 <__alt_data_end+0xfc00eda8>
 400edf0:	00800044 	movi	r2,1
 400edf4:	f800283a 	ret
 400edf8:	0005883a 	mov	r2,zero
 400edfc:	f800283a 	ret

0400ee00 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 400ee00:	defff004 	addi	sp,sp,-64
 400ee04:	df000f15 	stw	fp,60(sp)
 400ee08:	df000f04 	addi	fp,sp,60
 400ee0c:	e13ffd15 	stw	r4,-12(fp)
 400ee10:	e17ffe15 	stw	r5,-8(fp)
 400ee14:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 400ee18:	00bffa84 	movi	r2,-22
 400ee1c:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400ee20:	e0bffd17 	ldw	r2,-12(fp)
 400ee24:	10800828 	cmpgeui	r2,r2,32
 400ee28:	1000501e 	bne	r2,zero,400ef6c <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ee2c:	0005303a 	rdctl	r2,status
 400ee30:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ee34:	e0fff617 	ldw	r3,-40(fp)
 400ee38:	00bfff84 	movi	r2,-2
 400ee3c:	1884703a 	and	r2,r3,r2
 400ee40:	1001703a 	wrctl	status,r2
  
  return context;
 400ee44:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 400ee48:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 400ee4c:	00810074 	movhi	r2,1025
 400ee50:	10941804 	addi	r2,r2,20576
 400ee54:	e0fffd17 	ldw	r3,-12(fp)
 400ee58:	180690fa 	slli	r3,r3,3
 400ee5c:	10c5883a 	add	r2,r2,r3
 400ee60:	e0ffff17 	ldw	r3,-4(fp)
 400ee64:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 400ee68:	00810074 	movhi	r2,1025
 400ee6c:	10941804 	addi	r2,r2,20576
 400ee70:	e0fffd17 	ldw	r3,-12(fp)
 400ee74:	180690fa 	slli	r3,r3,3
 400ee78:	10c5883a 	add	r2,r2,r3
 400ee7c:	10800104 	addi	r2,r2,4
 400ee80:	e0fffe17 	ldw	r3,-8(fp)
 400ee84:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 400ee88:	e0bfff17 	ldw	r2,-4(fp)
 400ee8c:	10001926 	beq	r2,zero,400eef4 <alt_irq_register+0xf4>
 400ee90:	e0bffd17 	ldw	r2,-12(fp)
 400ee94:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ee98:	0005303a 	rdctl	r2,status
 400ee9c:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400eea0:	e0fff717 	ldw	r3,-36(fp)
 400eea4:	00bfff84 	movi	r2,-2
 400eea8:	1884703a 	and	r2,r3,r2
 400eeac:	1001703a 	wrctl	status,r2
  
  return context;
 400eeb0:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400eeb4:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 400eeb8:	00c00044 	movi	r3,1
 400eebc:	e0bff217 	ldw	r2,-56(fp)
 400eec0:	1884983a 	sll	r2,r3,r2
 400eec4:	1007883a 	mov	r3,r2
 400eec8:	d0a03117 	ldw	r2,-32572(gp)
 400eecc:	1884b03a 	or	r2,r3,r2
 400eed0:	d0a03115 	stw	r2,-32572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400eed4:	d0a03117 	ldw	r2,-32572(gp)
 400eed8:	100170fa 	wrctl	ienable,r2
 400eedc:	e0bff817 	ldw	r2,-32(fp)
 400eee0:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400eee4:	e0bff917 	ldw	r2,-28(fp)
 400eee8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400eeec:	0005883a 	mov	r2,zero
 400eef0:	00001906 	br	400ef58 <alt_irq_register+0x158>
 400eef4:	e0bffd17 	ldw	r2,-12(fp)
 400eef8:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400eefc:	0005303a 	rdctl	r2,status
 400ef00:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ef04:	e0fffa17 	ldw	r3,-24(fp)
 400ef08:	00bfff84 	movi	r2,-2
 400ef0c:	1884703a 	and	r2,r3,r2
 400ef10:	1001703a 	wrctl	status,r2
  
  return context;
 400ef14:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400ef18:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 400ef1c:	00c00044 	movi	r3,1
 400ef20:	e0bff417 	ldw	r2,-48(fp)
 400ef24:	1884983a 	sll	r2,r3,r2
 400ef28:	0084303a 	nor	r2,zero,r2
 400ef2c:	1007883a 	mov	r3,r2
 400ef30:	d0a03117 	ldw	r2,-32572(gp)
 400ef34:	1884703a 	and	r2,r3,r2
 400ef38:	d0a03115 	stw	r2,-32572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400ef3c:	d0a03117 	ldw	r2,-32572(gp)
 400ef40:	100170fa 	wrctl	ienable,r2
 400ef44:	e0bffb17 	ldw	r2,-20(fp)
 400ef48:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ef4c:	e0bffc17 	ldw	r2,-16(fp)
 400ef50:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400ef54:	0005883a 	mov	r2,zero
 400ef58:	e0bff115 	stw	r2,-60(fp)
 400ef5c:	e0bff317 	ldw	r2,-52(fp)
 400ef60:	e0bff515 	stw	r2,-44(fp)
 400ef64:	e0bff517 	ldw	r2,-44(fp)
 400ef68:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 400ef6c:	e0bff117 	ldw	r2,-60(fp)
}
 400ef70:	e037883a 	mov	sp,fp
 400ef74:	df000017 	ldw	fp,0(sp)
 400ef78:	dec00104 	addi	sp,sp,4
 400ef7c:	f800283a 	ret

0400ef80 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400ef80:	defffd04 	addi	sp,sp,-12
 400ef84:	dfc00215 	stw	ra,8(sp)
 400ef88:	df000115 	stw	fp,4(sp)
 400ef8c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400ef90:	0009883a 	mov	r4,zero
 400ef94:	400f1580 	call	400f158 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400ef98:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400ef9c:	400f1900 	call	400f190 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400efa0:	01810074 	movhi	r6,1025
 400efa4:	318beb04 	addi	r6,r6,12204
 400efa8:	01410074 	movhi	r5,1025
 400efac:	294beb04 	addi	r5,r5,12204
 400efb0:	01010074 	movhi	r4,1025
 400efb4:	210beb04 	addi	r4,r4,12204
 400efb8:	40121000 	call	4012100 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400efbc:	4011c000 	call	4011c00 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400efc0:	01010074 	movhi	r4,1025
 400efc4:	21071804 	addi	r4,r4,7264
 400efc8:	40129440 	call	4012944 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400efcc:	d0a03217 	ldw	r2,-32568(gp)
 400efd0:	d0e03317 	ldw	r3,-32564(gp)
 400efd4:	d1203417 	ldw	r4,-32560(gp)
 400efd8:	200d883a 	mov	r6,r4
 400efdc:	180b883a 	mov	r5,r3
 400efe0:	1009883a 	mov	r4,r2
 400efe4:	4001b480 	call	4001b48 <main>
 400efe8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400efec:	01000044 	movi	r4,1
 400eff0:	40119f40 	call	40119f4 <close>
  exit (result);
 400eff4:	e13fff17 	ldw	r4,-4(fp)
 400eff8:	40129580 	call	4012958 <exit>

0400effc <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400effc:	defffe04 	addi	sp,sp,-8
 400f000:	df000115 	stw	fp,4(sp)
 400f004:	df000104 	addi	fp,sp,4
 400f008:	e13fff15 	stw	r4,-4(fp)
}
 400f00c:	0001883a 	nop
 400f010:	e037883a 	mov	sp,fp
 400f014:	df000017 	ldw	fp,0(sp)
 400f018:	dec00104 	addi	sp,sp,4
 400f01c:	f800283a 	ret

0400f020 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400f020:	defffe04 	addi	sp,sp,-8
 400f024:	df000115 	stw	fp,4(sp)
 400f028:	df000104 	addi	fp,sp,4
 400f02c:	e13fff15 	stw	r4,-4(fp)
}
 400f030:	0001883a 	nop
 400f034:	e037883a 	mov	sp,fp
 400f038:	df000017 	ldw	fp,0(sp)
 400f03c:	dec00104 	addi	sp,sp,4
 400f040:	f800283a 	ret

0400f044 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400f044:	defff904 	addi	sp,sp,-28
 400f048:	df000615 	stw	fp,24(sp)
 400f04c:	df000604 	addi	fp,sp,24
 400f050:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f054:	0005303a 	rdctl	r2,status
 400f058:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f05c:	e0fffe17 	ldw	r3,-8(fp)
 400f060:	00bfff84 	movi	r2,-2
 400f064:	1884703a 	and	r2,r3,r2
 400f068:	1001703a 	wrctl	status,r2
  
  return context;
 400f06c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400f070:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400f074:	d0a01017 	ldw	r2,-32704(gp)
 400f078:	10c000c4 	addi	r3,r2,3
 400f07c:	00bfff04 	movi	r2,-4
 400f080:	1884703a 	and	r2,r3,r2
 400f084:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400f088:	d0e01017 	ldw	r3,-32704(gp)
 400f08c:	e0bfff17 	ldw	r2,-4(fp)
 400f090:	1887883a 	add	r3,r3,r2
 400f094:	00820034 	movhi	r2,2048
 400f098:	10800004 	addi	r2,r2,0
 400f09c:	10c0062e 	bgeu	r2,r3,400f0b8 <sbrk+0x74>
 400f0a0:	e0bffb17 	ldw	r2,-20(fp)
 400f0a4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f0a8:	e0bffa17 	ldw	r2,-24(fp)
 400f0ac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400f0b0:	00bfffc4 	movi	r2,-1
 400f0b4:	00000b06 	br	400f0e4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400f0b8:	d0a01017 	ldw	r2,-32704(gp)
 400f0bc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400f0c0:	d0e01017 	ldw	r3,-32704(gp)
 400f0c4:	e0bfff17 	ldw	r2,-4(fp)
 400f0c8:	1885883a 	add	r2,r3,r2
 400f0cc:	d0a01015 	stw	r2,-32704(gp)
 400f0d0:	e0bffb17 	ldw	r2,-20(fp)
 400f0d4:	e0bffc15 	stw	r2,-16(fp)
 400f0d8:	e0bffc17 	ldw	r2,-16(fp)
 400f0dc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400f0e0:	e0bffd17 	ldw	r2,-12(fp)
} 
 400f0e4:	e037883a 	mov	sp,fp
 400f0e8:	df000017 	ldw	fp,0(sp)
 400f0ec:	dec00104 	addi	sp,sp,4
 400f0f0:	f800283a 	ret

0400f0f4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 400f0f4:	defffd04 	addi	sp,sp,-12
 400f0f8:	dfc00215 	stw	ra,8(sp)
 400f0fc:	df000115 	stw	fp,4(sp)
 400f100:	df000104 	addi	fp,sp,4
 400f104:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 400f108:	e13fff17 	ldw	r4,-4(fp)
 400f10c:	40118600 	call	4011860 <alt_busy_sleep>
}
 400f110:	e037883a 	mov	sp,fp
 400f114:	dfc00117 	ldw	ra,4(sp)
 400f118:	df000017 	ldw	fp,0(sp)
 400f11c:	dec00204 	addi	sp,sp,8
 400f120:	f800283a 	ret

0400f124 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400f124:	defffd04 	addi	sp,sp,-12
 400f128:	dfc00215 	stw	ra,8(sp)
 400f12c:	df000115 	stw	fp,4(sp)
 400f130:	df000104 	addi	fp,sp,4
 400f134:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400f138:	d1601504 	addi	r5,gp,-32684
 400f13c:	e13fff17 	ldw	r4,-4(fp)
 400f140:	4011b5c0 	call	4011b5c <alt_dev_llist_insert>
}
 400f144:	e037883a 	mov	sp,fp
 400f148:	dfc00117 	ldw	ra,4(sp)
 400f14c:	df000017 	ldw	fp,0(sp)
 400f150:	dec00204 	addi	sp,sp,8
 400f154:	f800283a 	ret

0400f158 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400f158:	defffd04 	addi	sp,sp,-12
 400f15c:	dfc00215 	stw	ra,8(sp)
 400f160:	df000115 	stw	fp,4(sp)
 400f164:	df000104 	addi	fp,sp,4
 400f168:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 400f16c:	40126280 	call	4012628 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400f170:	00800044 	movi	r2,1
 400f174:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400f178:	0001883a 	nop
 400f17c:	e037883a 	mov	sp,fp
 400f180:	dfc00117 	ldw	ra,4(sp)
 400f184:	df000017 	ldw	fp,0(sp)
 400f188:	dec00204 	addi	sp,sp,8
 400f18c:	f800283a 	ret

0400f190 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400f190:	defffd04 	addi	sp,sp,-12
 400f194:	dfc00215 	stw	ra,8(sp)
 400f198:	df000115 	stw	fp,4(sp)
 400f19c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 400f1a0:	000d883a 	mov	r6,zero
 400f1a4:	000b883a 	mov	r5,zero
 400f1a8:	01010074 	movhi	r4,1025
 400f1ac:	210e6b04 	addi	r4,r4,14764
 400f1b0:	400f6180 	call	400f618 <altera_avalon_jtag_uart_init>
 400f1b4:	01010074 	movhi	r4,1025
 400f1b8:	210e6104 	addi	r4,r4,14724
 400f1bc:	400f1240 	call	400f124 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( BLE_UART, ble_uart);
 400f1c0:	01800044 	movi	r6,1
 400f1c4:	000b883a 	mov	r5,zero
 400f1c8:	01010074 	movhi	r4,1025
 400f1cc:	21128304 	addi	r4,r4,18956
 400f1d0:	401002c0 	call	401002c <altera_avalon_uart_init>
 400f1d4:	01010074 	movhi	r4,1025
 400f1d8:	21127904 	addi	r4,r4,18916
 400f1dc:	400f1240 	call	400f124 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( LIDAR_UART, lidar_uart);
 400f1e0:	01800084 	movi	r6,2
 400f1e4:	000b883a 	mov	r5,zero
 400f1e8:	01010074 	movhi	r4,1025
 400f1ec:	2112b404 	addi	r4,r4,19152
 400f1f0:	401002c0 	call	401002c <altera_avalon_uart_init>
 400f1f4:	01010074 	movhi	r4,1025
 400f1f8:	2112aa04 	addi	r4,r4,19112
 400f1fc:	400f1240 	call	400f124 <alt_dev_reg>
    ALTERA_ONCHIP_FLASH_INIT ( ONCHIP_FLASH, onchip_flash);
 400f200:	01010074 	movhi	r4,1025
 400f204:	2112db04 	addi	r4,r4,19308
 400f208:	40110a80 	call	40110a8 <altera_onchip_flash_init>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_DMA_CONTROLLER, video_dma_controller);
 400f20c:	00810074 	movhi	r2,1025
 400f210:	10931b04 	addi	r2,r2,19564
 400f214:	10800a17 	ldw	r2,40(r2)
 400f218:	10800017 	ldw	r2,0(r2)
 400f21c:	1007883a 	mov	r3,r2
 400f220:	00810074 	movhi	r2,1025
 400f224:	10931b04 	addi	r2,r2,19564
 400f228:	10c00b15 	stw	r3,44(r2)
 400f22c:	00810074 	movhi	r2,1025
 400f230:	10931b04 	addi	r2,r2,19564
 400f234:	10800a17 	ldw	r2,40(r2)
 400f238:	10800104 	addi	r2,r2,4
 400f23c:	10800017 	ldw	r2,0(r2)
 400f240:	1007883a 	mov	r3,r2
 400f244:	00810074 	movhi	r2,1025
 400f248:	10931b04 	addi	r2,r2,19564
 400f24c:	10c00c15 	stw	r3,48(r2)
 400f250:	00810074 	movhi	r2,1025
 400f254:	10931b04 	addi	r2,r2,19564
 400f258:	10800a17 	ldw	r2,40(r2)
 400f25c:	10800204 	addi	r2,r2,8
 400f260:	10800017 	ldw	r2,0(r2)
 400f264:	10ffffcc 	andi	r3,r2,65535
 400f268:	00810074 	movhi	r2,1025
 400f26c:	10931b04 	addi	r2,r2,19564
 400f270:	10c01115 	stw	r3,68(r2)
 400f274:	00810074 	movhi	r2,1025
 400f278:	10931b04 	addi	r2,r2,19564
 400f27c:	10800a17 	ldw	r2,40(r2)
 400f280:	10800204 	addi	r2,r2,8
 400f284:	10800017 	ldw	r2,0(r2)
 400f288:	1006d43a 	srli	r3,r2,16
 400f28c:	00810074 	movhi	r2,1025
 400f290:	10931b04 	addi	r2,r2,19564
 400f294:	10c01215 	stw	r3,72(r2)
 400f298:	00810074 	movhi	r2,1025
 400f29c:	10931b04 	addi	r2,r2,19564
 400f2a0:	10800a17 	ldw	r2,40(r2)
 400f2a4:	10800304 	addi	r2,r2,12
 400f2a8:	10800017 	ldw	r2,0(r2)
 400f2ac:	1005d07a 	srai	r2,r2,1
 400f2b0:	10c0004c 	andi	r3,r2,1
 400f2b4:	00810074 	movhi	r2,1025
 400f2b8:	10931b04 	addi	r2,r2,19564
 400f2bc:	10c00d15 	stw	r3,52(r2)
 400f2c0:	00810074 	movhi	r2,1025
 400f2c4:	10931b04 	addi	r2,r2,19564
 400f2c8:	10800a17 	ldw	r2,40(r2)
 400f2cc:	10800304 	addi	r2,r2,12
 400f2d0:	10800017 	ldw	r2,0(r2)
 400f2d4:	1005d23a 	srai	r2,r2,8
 400f2d8:	108003cc 	andi	r2,r2,15
 400f2dc:	10800044 	addi	r2,r2,1
 400f2e0:	1007883a 	mov	r3,r2
 400f2e4:	00810074 	movhi	r2,1025
 400f2e8:	10931b04 	addi	r2,r2,19564
 400f2ec:	10c00e15 	stw	r3,56(r2)
 400f2f0:	00810074 	movhi	r2,1025
 400f2f4:	10931b04 	addi	r2,r2,19564
 400f2f8:	10800a17 	ldw	r2,40(r2)
 400f2fc:	10800304 	addi	r2,r2,12
 400f300:	10800017 	ldw	r2,0(r2)
 400f304:	1005d1ba 	srai	r2,r2,6
 400f308:	108000cc 	andi	r2,r2,3
 400f30c:	10800044 	addi	r2,r2,1
 400f310:	1007883a 	mov	r3,r2
 400f314:	00810074 	movhi	r2,1025
 400f318:	10931b04 	addi	r2,r2,19564
 400f31c:	10c00f15 	stw	r3,60(r2)
 400f320:	00810074 	movhi	r2,1025
 400f324:	10931b04 	addi	r2,r2,19564
 400f328:	10800e17 	ldw	r2,56(r2)
 400f32c:	1007883a 	mov	r3,r2
 400f330:	00810074 	movhi	r2,1025
 400f334:	10931b04 	addi	r2,r2,19564
 400f338:	10800f17 	ldw	r2,60(r2)
 400f33c:	100b883a 	mov	r5,r2
 400f340:	1809883a 	mov	r4,r3
 400f344:	40024600 	call	4002460 <__mulsi3>
 400f348:	e0bfff05 	stb	r2,-4(fp)
 400f34c:	e0bfff03 	ldbu	r2,-4(fp)
 400f350:	10800268 	cmpgeui	r2,r2,9
 400f354:	1000051e 	bne	r2,zero,400f36c <alt_sys_init+0x1dc>
 400f358:	00810074 	movhi	r2,1025
 400f35c:	10931b04 	addi	r2,r2,19564
 400f360:	00c00044 	movi	r3,1
 400f364:	10c01015 	stw	r3,64(r2)
 400f368:	00000c06 	br	400f39c <alt_sys_init+0x20c>
 400f36c:	e0bfff03 	ldbu	r2,-4(fp)
 400f370:	10800468 	cmpgeui	r2,r2,17
 400f374:	1000051e 	bne	r2,zero,400f38c <alt_sys_init+0x1fc>
 400f378:	00810074 	movhi	r2,1025
 400f37c:	10931b04 	addi	r2,r2,19564
 400f380:	00c00084 	movi	r3,2
 400f384:	10c01015 	stw	r3,64(r2)
 400f388:	00000406 	br	400f39c <alt_sys_init+0x20c>
 400f38c:	00810074 	movhi	r2,1025
 400f390:	10931b04 	addi	r2,r2,19564
 400f394:	00c00104 	movi	r3,4
 400f398:	10c01015 	stw	r3,64(r2)
 400f39c:	00810074 	movhi	r2,1025
 400f3a0:	10931b04 	addi	r2,r2,19564
 400f3a4:	10800a17 	ldw	r2,40(r2)
 400f3a8:	10800304 	addi	r2,r2,12
 400f3ac:	10800017 	ldw	r2,0(r2)
 400f3b0:	1005d43a 	srai	r2,r2,16
 400f3b4:	e0bfff45 	stb	r2,-3(fp)
 400f3b8:	00810074 	movhi	r2,1025
 400f3bc:	10931b04 	addi	r2,r2,19564
 400f3c0:	10800a17 	ldw	r2,40(r2)
 400f3c4:	10800304 	addi	r2,r2,12
 400f3c8:	10800017 	ldw	r2,0(r2)
 400f3cc:	1004d63a 	srli	r2,r2,24
 400f3d0:	e0bfff85 	stb	r2,-2(fp)
 400f3d4:	00810074 	movhi	r2,1025
 400f3d8:	10931b04 	addi	r2,r2,19564
 400f3dc:	10801017 	ldw	r2,64(r2)
 400f3e0:	10800058 	cmpnei	r2,r2,1
 400f3e4:	1000041e 	bne	r2,zero,400f3f8 <alt_sys_init+0x268>
 400f3e8:	00810074 	movhi	r2,1025
 400f3ec:	10931b04 	addi	r2,r2,19564
 400f3f0:	10001315 	stw	zero,76(r2)
 400f3f4:	00000e06 	br	400f430 <alt_sys_init+0x2a0>
 400f3f8:	00810074 	movhi	r2,1025
 400f3fc:	10931b04 	addi	r2,r2,19564
 400f400:	10801017 	ldw	r2,64(r2)
 400f404:	10800098 	cmpnei	r2,r2,2
 400f408:	1000051e 	bne	r2,zero,400f420 <alt_sys_init+0x290>
 400f40c:	00810074 	movhi	r2,1025
 400f410:	10931b04 	addi	r2,r2,19564
 400f414:	00c00044 	movi	r3,1
 400f418:	10c01315 	stw	r3,76(r2)
 400f41c:	00000406 	br	400f430 <alt_sys_init+0x2a0>
 400f420:	00810074 	movhi	r2,1025
 400f424:	10931b04 	addi	r2,r2,19564
 400f428:	00c00084 	movi	r3,2
 400f42c:	10c01315 	stw	r3,76(r2)
 400f430:	e0bfff43 	ldbu	r2,-3(fp)
 400f434:	00c00804 	movi	r3,32
 400f438:	1885c83a 	sub	r2,r3,r2
 400f43c:	00ffffc4 	movi	r3,-1
 400f440:	1886d83a 	srl	r3,r3,r2
 400f444:	00810074 	movhi	r2,1025
 400f448:	10931b04 	addi	r2,r2,19564
 400f44c:	10c01415 	stw	r3,80(r2)
 400f450:	e0ffff43 	ldbu	r3,-3(fp)
 400f454:	00810074 	movhi	r2,1025
 400f458:	10931b04 	addi	r2,r2,19564
 400f45c:	10801317 	ldw	r2,76(r2)
 400f460:	1887883a 	add	r3,r3,r2
 400f464:	00810074 	movhi	r2,1025
 400f468:	10931b04 	addi	r2,r2,19564
 400f46c:	10c01515 	stw	r3,84(r2)
 400f470:	e0bfff83 	ldbu	r2,-2(fp)
 400f474:	00c00804 	movi	r3,32
 400f478:	1885c83a 	sub	r2,r3,r2
 400f47c:	00ffffc4 	movi	r3,-1
 400f480:	1886d83a 	srl	r3,r3,r2
 400f484:	00810074 	movhi	r2,1025
 400f488:	10931b04 	addi	r2,r2,19564
 400f48c:	10c01615 	stw	r3,88(r2)
 400f490:	01010074 	movhi	r4,1025
 400f494:	21131b04 	addi	r4,r4,19564
 400f498:	400f1240 	call	400f124 <alt_dev_reg>
}
 400f49c:	0001883a 	nop
 400f4a0:	e037883a 	mov	sp,fp
 400f4a4:	dfc00117 	ldw	ra,4(sp)
 400f4a8:	df000017 	ldw	fp,0(sp)
 400f4ac:	dec00204 	addi	sp,sp,8
 400f4b0:	f800283a 	ret

0400f4b4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400f4b4:	defffa04 	addi	sp,sp,-24
 400f4b8:	dfc00515 	stw	ra,20(sp)
 400f4bc:	df000415 	stw	fp,16(sp)
 400f4c0:	df000404 	addi	fp,sp,16
 400f4c4:	e13ffd15 	stw	r4,-12(fp)
 400f4c8:	e17ffe15 	stw	r5,-8(fp)
 400f4cc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400f4d0:	e0bffd17 	ldw	r2,-12(fp)
 400f4d4:	10800017 	ldw	r2,0(r2)
 400f4d8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400f4dc:	e0bffc17 	ldw	r2,-16(fp)
 400f4e0:	10c00a04 	addi	r3,r2,40
 400f4e4:	e0bffd17 	ldw	r2,-12(fp)
 400f4e8:	10800217 	ldw	r2,8(r2)
 400f4ec:	100f883a 	mov	r7,r2
 400f4f0:	e1bfff17 	ldw	r6,-4(fp)
 400f4f4:	e17ffe17 	ldw	r5,-8(fp)
 400f4f8:	1809883a 	mov	r4,r3
 400f4fc:	400fadc0 	call	400fadc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400f500:	e037883a 	mov	sp,fp
 400f504:	dfc00117 	ldw	ra,4(sp)
 400f508:	df000017 	ldw	fp,0(sp)
 400f50c:	dec00204 	addi	sp,sp,8
 400f510:	f800283a 	ret

0400f514 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400f514:	defffa04 	addi	sp,sp,-24
 400f518:	dfc00515 	stw	ra,20(sp)
 400f51c:	df000415 	stw	fp,16(sp)
 400f520:	df000404 	addi	fp,sp,16
 400f524:	e13ffd15 	stw	r4,-12(fp)
 400f528:	e17ffe15 	stw	r5,-8(fp)
 400f52c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400f530:	e0bffd17 	ldw	r2,-12(fp)
 400f534:	10800017 	ldw	r2,0(r2)
 400f538:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400f53c:	e0bffc17 	ldw	r2,-16(fp)
 400f540:	10c00a04 	addi	r3,r2,40
 400f544:	e0bffd17 	ldw	r2,-12(fp)
 400f548:	10800217 	ldw	r2,8(r2)
 400f54c:	100f883a 	mov	r7,r2
 400f550:	e1bfff17 	ldw	r6,-4(fp)
 400f554:	e17ffe17 	ldw	r5,-8(fp)
 400f558:	1809883a 	mov	r4,r3
 400f55c:	400fcf80 	call	400fcf8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400f560:	e037883a 	mov	sp,fp
 400f564:	dfc00117 	ldw	ra,4(sp)
 400f568:	df000017 	ldw	fp,0(sp)
 400f56c:	dec00204 	addi	sp,sp,8
 400f570:	f800283a 	ret

0400f574 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400f574:	defffc04 	addi	sp,sp,-16
 400f578:	dfc00315 	stw	ra,12(sp)
 400f57c:	df000215 	stw	fp,8(sp)
 400f580:	df000204 	addi	fp,sp,8
 400f584:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400f588:	e0bfff17 	ldw	r2,-4(fp)
 400f58c:	10800017 	ldw	r2,0(r2)
 400f590:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400f594:	e0bffe17 	ldw	r2,-8(fp)
 400f598:	10c00a04 	addi	r3,r2,40
 400f59c:	e0bfff17 	ldw	r2,-4(fp)
 400f5a0:	10800217 	ldw	r2,8(r2)
 400f5a4:	100b883a 	mov	r5,r2
 400f5a8:	1809883a 	mov	r4,r3
 400f5ac:	400f9840 	call	400f984 <altera_avalon_jtag_uart_close>
}
 400f5b0:	e037883a 	mov	sp,fp
 400f5b4:	dfc00117 	ldw	ra,4(sp)
 400f5b8:	df000017 	ldw	fp,0(sp)
 400f5bc:	dec00204 	addi	sp,sp,8
 400f5c0:	f800283a 	ret

0400f5c4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400f5c4:	defffa04 	addi	sp,sp,-24
 400f5c8:	dfc00515 	stw	ra,20(sp)
 400f5cc:	df000415 	stw	fp,16(sp)
 400f5d0:	df000404 	addi	fp,sp,16
 400f5d4:	e13ffd15 	stw	r4,-12(fp)
 400f5d8:	e17ffe15 	stw	r5,-8(fp)
 400f5dc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400f5e0:	e0bffd17 	ldw	r2,-12(fp)
 400f5e4:	10800017 	ldw	r2,0(r2)
 400f5e8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400f5ec:	e0bffc17 	ldw	r2,-16(fp)
 400f5f0:	10800a04 	addi	r2,r2,40
 400f5f4:	e1bfff17 	ldw	r6,-4(fp)
 400f5f8:	e17ffe17 	ldw	r5,-8(fp)
 400f5fc:	1009883a 	mov	r4,r2
 400f600:	400f9ec0 	call	400f9ec <altera_avalon_jtag_uart_ioctl>
}
 400f604:	e037883a 	mov	sp,fp
 400f608:	dfc00117 	ldw	ra,4(sp)
 400f60c:	df000017 	ldw	fp,0(sp)
 400f610:	dec00204 	addi	sp,sp,8
 400f614:	f800283a 	ret

0400f618 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400f618:	defffa04 	addi	sp,sp,-24
 400f61c:	dfc00515 	stw	ra,20(sp)
 400f620:	df000415 	stw	fp,16(sp)
 400f624:	df000404 	addi	fp,sp,16
 400f628:	e13ffd15 	stw	r4,-12(fp)
 400f62c:	e17ffe15 	stw	r5,-8(fp)
 400f630:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400f634:	e0bffd17 	ldw	r2,-12(fp)
 400f638:	00c00044 	movi	r3,1
 400f63c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400f640:	e0bffd17 	ldw	r2,-12(fp)
 400f644:	10800017 	ldw	r2,0(r2)
 400f648:	10800104 	addi	r2,r2,4
 400f64c:	1007883a 	mov	r3,r2
 400f650:	e0bffd17 	ldw	r2,-12(fp)
 400f654:	10800817 	ldw	r2,32(r2)
 400f658:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400f65c:	e0bffe17 	ldw	r2,-8(fp)
 400f660:	e0ffff17 	ldw	r3,-4(fp)
 400f664:	d8000015 	stw	zero,0(sp)
 400f668:	e1fffd17 	ldw	r7,-12(fp)
 400f66c:	01810074 	movhi	r6,1025
 400f670:	31bdb604 	addi	r6,r6,-2344
 400f674:	180b883a 	mov	r5,r3
 400f678:	1009883a 	mov	r4,r2
 400f67c:	4011d7c0 	call	4011d7c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400f680:	e0bffd17 	ldw	r2,-12(fp)
 400f684:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400f688:	e0bffd17 	ldw	r2,-12(fp)
 400f68c:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400f690:	d0e03517 	ldw	r3,-32556(gp)
 400f694:	e1fffd17 	ldw	r7,-12(fp)
 400f698:	01810074 	movhi	r6,1025
 400f69c:	31be3904 	addi	r6,r6,-1820
 400f6a0:	180b883a 	mov	r5,r3
 400f6a4:	1009883a 	mov	r4,r2
 400f6a8:	40117340 	call	4011734 <alt_alarm_start>
 400f6ac:	1000040e 	bge	r2,zero,400f6c0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400f6b0:	e0fffd17 	ldw	r3,-12(fp)
 400f6b4:	00a00034 	movhi	r2,32768
 400f6b8:	10bfffc4 	addi	r2,r2,-1
 400f6bc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400f6c0:	0001883a 	nop
 400f6c4:	e037883a 	mov	sp,fp
 400f6c8:	dfc00117 	ldw	ra,4(sp)
 400f6cc:	df000017 	ldw	fp,0(sp)
 400f6d0:	dec00204 	addi	sp,sp,8
 400f6d4:	f800283a 	ret

0400f6d8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400f6d8:	defff804 	addi	sp,sp,-32
 400f6dc:	df000715 	stw	fp,28(sp)
 400f6e0:	df000704 	addi	fp,sp,28
 400f6e4:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400f6e8:	e0bfff17 	ldw	r2,-4(fp)
 400f6ec:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 400f6f0:	e0bffb17 	ldw	r2,-20(fp)
 400f6f4:	10800017 	ldw	r2,0(r2)
 400f6f8:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400f6fc:	e0bffc17 	ldw	r2,-16(fp)
 400f700:	10800104 	addi	r2,r2,4
 400f704:	10800037 	ldwio	r2,0(r2)
 400f708:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400f70c:	e0bffd17 	ldw	r2,-12(fp)
 400f710:	1080c00c 	andi	r2,r2,768
 400f714:	10006d26 	beq	r2,zero,400f8cc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400f718:	e0bffd17 	ldw	r2,-12(fp)
 400f71c:	1080400c 	andi	r2,r2,256
 400f720:	10003526 	beq	r2,zero,400f7f8 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400f724:	00800074 	movhi	r2,1
 400f728:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400f72c:	e0bffb17 	ldw	r2,-20(fp)
 400f730:	10800a17 	ldw	r2,40(r2)
 400f734:	10800044 	addi	r2,r2,1
 400f738:	1081ffcc 	andi	r2,r2,2047
 400f73c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 400f740:	e0bffb17 	ldw	r2,-20(fp)
 400f744:	10c00b17 	ldw	r3,44(r2)
 400f748:	e0bffe17 	ldw	r2,-8(fp)
 400f74c:	18801526 	beq	r3,r2,400f7a4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400f750:	e0bffc17 	ldw	r2,-16(fp)
 400f754:	10800037 	ldwio	r2,0(r2)
 400f758:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400f75c:	e0bff917 	ldw	r2,-28(fp)
 400f760:	10a0000c 	andi	r2,r2,32768
 400f764:	10001126 	beq	r2,zero,400f7ac <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400f768:	e0bffb17 	ldw	r2,-20(fp)
 400f76c:	10800a17 	ldw	r2,40(r2)
 400f770:	e0fff917 	ldw	r3,-28(fp)
 400f774:	1809883a 	mov	r4,r3
 400f778:	e0fffb17 	ldw	r3,-20(fp)
 400f77c:	1885883a 	add	r2,r3,r2
 400f780:	10800e04 	addi	r2,r2,56
 400f784:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400f788:	e0bffb17 	ldw	r2,-20(fp)
 400f78c:	10800a17 	ldw	r2,40(r2)
 400f790:	10800044 	addi	r2,r2,1
 400f794:	10c1ffcc 	andi	r3,r2,2047
 400f798:	e0bffb17 	ldw	r2,-20(fp)
 400f79c:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400f7a0:	003fe206 	br	400f72c <__alt_data_end+0xfc00f72c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 400f7a4:	0001883a 	nop
 400f7a8:	00000106 	br	400f7b0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 400f7ac:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400f7b0:	e0bff917 	ldw	r2,-28(fp)
 400f7b4:	10bfffec 	andhi	r2,r2,65535
 400f7b8:	10000f26 	beq	r2,zero,400f7f8 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400f7bc:	e0bffb17 	ldw	r2,-20(fp)
 400f7c0:	10c00817 	ldw	r3,32(r2)
 400f7c4:	00bfff84 	movi	r2,-2
 400f7c8:	1886703a 	and	r3,r3,r2
 400f7cc:	e0bffb17 	ldw	r2,-20(fp)
 400f7d0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400f7d4:	e0bffc17 	ldw	r2,-16(fp)
 400f7d8:	10800104 	addi	r2,r2,4
 400f7dc:	1007883a 	mov	r3,r2
 400f7e0:	e0bffb17 	ldw	r2,-20(fp)
 400f7e4:	10800817 	ldw	r2,32(r2)
 400f7e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400f7ec:	e0bffc17 	ldw	r2,-16(fp)
 400f7f0:	10800104 	addi	r2,r2,4
 400f7f4:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400f7f8:	e0bffd17 	ldw	r2,-12(fp)
 400f7fc:	1080800c 	andi	r2,r2,512
 400f800:	103fbe26 	beq	r2,zero,400f6fc <__alt_data_end+0xfc00f6fc>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400f804:	e0bffd17 	ldw	r2,-12(fp)
 400f808:	1004d43a 	srli	r2,r2,16
 400f80c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400f810:	00001406 	br	400f864 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400f814:	e0bffc17 	ldw	r2,-16(fp)
 400f818:	e0fffb17 	ldw	r3,-20(fp)
 400f81c:	18c00d17 	ldw	r3,52(r3)
 400f820:	e13ffb17 	ldw	r4,-20(fp)
 400f824:	20c7883a 	add	r3,r4,r3
 400f828:	18c20e04 	addi	r3,r3,2104
 400f82c:	18c00003 	ldbu	r3,0(r3)
 400f830:	18c03fcc 	andi	r3,r3,255
 400f834:	18c0201c 	xori	r3,r3,128
 400f838:	18ffe004 	addi	r3,r3,-128
 400f83c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400f840:	e0bffb17 	ldw	r2,-20(fp)
 400f844:	10800d17 	ldw	r2,52(r2)
 400f848:	10800044 	addi	r2,r2,1
 400f84c:	10c1ffcc 	andi	r3,r2,2047
 400f850:	e0bffb17 	ldw	r2,-20(fp)
 400f854:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400f858:	e0bffa17 	ldw	r2,-24(fp)
 400f85c:	10bfffc4 	addi	r2,r2,-1
 400f860:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400f864:	e0bffa17 	ldw	r2,-24(fp)
 400f868:	10000526 	beq	r2,zero,400f880 <altera_avalon_jtag_uart_irq+0x1a8>
 400f86c:	e0bffb17 	ldw	r2,-20(fp)
 400f870:	10c00d17 	ldw	r3,52(r2)
 400f874:	e0bffb17 	ldw	r2,-20(fp)
 400f878:	10800c17 	ldw	r2,48(r2)
 400f87c:	18bfe51e 	bne	r3,r2,400f814 <__alt_data_end+0xfc00f814>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400f880:	e0bffa17 	ldw	r2,-24(fp)
 400f884:	103f9d26 	beq	r2,zero,400f6fc <__alt_data_end+0xfc00f6fc>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400f888:	e0bffb17 	ldw	r2,-20(fp)
 400f88c:	10c00817 	ldw	r3,32(r2)
 400f890:	00bfff44 	movi	r2,-3
 400f894:	1886703a 	and	r3,r3,r2
 400f898:	e0bffb17 	ldw	r2,-20(fp)
 400f89c:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400f8a0:	e0bffb17 	ldw	r2,-20(fp)
 400f8a4:	10800017 	ldw	r2,0(r2)
 400f8a8:	10800104 	addi	r2,r2,4
 400f8ac:	1007883a 	mov	r3,r2
 400f8b0:	e0bffb17 	ldw	r2,-20(fp)
 400f8b4:	10800817 	ldw	r2,32(r2)
 400f8b8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400f8bc:	e0bffc17 	ldw	r2,-16(fp)
 400f8c0:	10800104 	addi	r2,r2,4
 400f8c4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400f8c8:	003f8c06 	br	400f6fc <__alt_data_end+0xfc00f6fc>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400f8cc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 400f8d0:	0001883a 	nop
 400f8d4:	e037883a 	mov	sp,fp
 400f8d8:	df000017 	ldw	fp,0(sp)
 400f8dc:	dec00104 	addi	sp,sp,4
 400f8e0:	f800283a 	ret

0400f8e4 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400f8e4:	defff804 	addi	sp,sp,-32
 400f8e8:	df000715 	stw	fp,28(sp)
 400f8ec:	df000704 	addi	fp,sp,28
 400f8f0:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400f8f4:	e0bffb17 	ldw	r2,-20(fp)
 400f8f8:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400f8fc:	e0bff917 	ldw	r2,-28(fp)
 400f900:	10800017 	ldw	r2,0(r2)
 400f904:	10800104 	addi	r2,r2,4
 400f908:	10800037 	ldwio	r2,0(r2)
 400f90c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400f910:	e0bffa17 	ldw	r2,-24(fp)
 400f914:	1081000c 	andi	r2,r2,1024
 400f918:	10000b26 	beq	r2,zero,400f948 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400f91c:	e0bff917 	ldw	r2,-28(fp)
 400f920:	10800017 	ldw	r2,0(r2)
 400f924:	10800104 	addi	r2,r2,4
 400f928:	1007883a 	mov	r3,r2
 400f92c:	e0bff917 	ldw	r2,-28(fp)
 400f930:	10800817 	ldw	r2,32(r2)
 400f934:	10810014 	ori	r2,r2,1024
 400f938:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400f93c:	e0bff917 	ldw	r2,-28(fp)
 400f940:	10000915 	stw	zero,36(r2)
 400f944:	00000a06 	br	400f970 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400f948:	e0bff917 	ldw	r2,-28(fp)
 400f94c:	10c00917 	ldw	r3,36(r2)
 400f950:	00a00034 	movhi	r2,32768
 400f954:	10bfff04 	addi	r2,r2,-4
 400f958:	10c00536 	bltu	r2,r3,400f970 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 400f95c:	e0bff917 	ldw	r2,-28(fp)
 400f960:	10800917 	ldw	r2,36(r2)
 400f964:	10c00044 	addi	r3,r2,1
 400f968:	e0bff917 	ldw	r2,-28(fp)
 400f96c:	10c00915 	stw	r3,36(r2)
 400f970:	d0a03517 	ldw	r2,-32556(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400f974:	e037883a 	mov	sp,fp
 400f978:	df000017 	ldw	fp,0(sp)
 400f97c:	dec00104 	addi	sp,sp,4
 400f980:	f800283a 	ret

0400f984 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400f984:	defffd04 	addi	sp,sp,-12
 400f988:	df000215 	stw	fp,8(sp)
 400f98c:	df000204 	addi	fp,sp,8
 400f990:	e13ffe15 	stw	r4,-8(fp)
 400f994:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400f998:	00000506 	br	400f9b0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400f99c:	e0bfff17 	ldw	r2,-4(fp)
 400f9a0:	1090000c 	andi	r2,r2,16384
 400f9a4:	10000226 	beq	r2,zero,400f9b0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400f9a8:	00bffd44 	movi	r2,-11
 400f9ac:	00000b06 	br	400f9dc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400f9b0:	e0bffe17 	ldw	r2,-8(fp)
 400f9b4:	10c00d17 	ldw	r3,52(r2)
 400f9b8:	e0bffe17 	ldw	r2,-8(fp)
 400f9bc:	10800c17 	ldw	r2,48(r2)
 400f9c0:	18800526 	beq	r3,r2,400f9d8 <altera_avalon_jtag_uart_close+0x54>
 400f9c4:	e0bffe17 	ldw	r2,-8(fp)
 400f9c8:	10c00917 	ldw	r3,36(r2)
 400f9cc:	e0bffe17 	ldw	r2,-8(fp)
 400f9d0:	10800117 	ldw	r2,4(r2)
 400f9d4:	18bff136 	bltu	r3,r2,400f99c <__alt_data_end+0xfc00f99c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400f9d8:	0005883a 	mov	r2,zero
}
 400f9dc:	e037883a 	mov	sp,fp
 400f9e0:	df000017 	ldw	fp,0(sp)
 400f9e4:	dec00104 	addi	sp,sp,4
 400f9e8:	f800283a 	ret

0400f9ec <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400f9ec:	defffa04 	addi	sp,sp,-24
 400f9f0:	df000515 	stw	fp,20(sp)
 400f9f4:	df000504 	addi	fp,sp,20
 400f9f8:	e13ffd15 	stw	r4,-12(fp)
 400f9fc:	e17ffe15 	stw	r5,-8(fp)
 400fa00:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 400fa04:	00bff9c4 	movi	r2,-25
 400fa08:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400fa0c:	e0bffe17 	ldw	r2,-8(fp)
 400fa10:	10da8060 	cmpeqi	r3,r2,27137
 400fa14:	1800031e 	bne	r3,zero,400fa24 <altera_avalon_jtag_uart_ioctl+0x38>
 400fa18:	109a80a0 	cmpeqi	r2,r2,27138
 400fa1c:	1000181e 	bne	r2,zero,400fa80 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 400fa20:	00002906 	br	400fac8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400fa24:	e0bffd17 	ldw	r2,-12(fp)
 400fa28:	10c00117 	ldw	r3,4(r2)
 400fa2c:	00a00034 	movhi	r2,32768
 400fa30:	10bfffc4 	addi	r2,r2,-1
 400fa34:	18802126 	beq	r3,r2,400fabc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 400fa38:	e0bfff17 	ldw	r2,-4(fp)
 400fa3c:	10800017 	ldw	r2,0(r2)
 400fa40:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400fa44:	e0bffc17 	ldw	r2,-16(fp)
 400fa48:	10800090 	cmplti	r2,r2,2
 400fa4c:	1000061e 	bne	r2,zero,400fa68 <altera_avalon_jtag_uart_ioctl+0x7c>
 400fa50:	e0fffc17 	ldw	r3,-16(fp)
 400fa54:	00a00034 	movhi	r2,32768
 400fa58:	10bfffc4 	addi	r2,r2,-1
 400fa5c:	18800226 	beq	r3,r2,400fa68 <altera_avalon_jtag_uart_ioctl+0x7c>
 400fa60:	e0bffc17 	ldw	r2,-16(fp)
 400fa64:	00000206 	br	400fa70 <altera_avalon_jtag_uart_ioctl+0x84>
 400fa68:	00a00034 	movhi	r2,32768
 400fa6c:	10bfff84 	addi	r2,r2,-2
 400fa70:	e0fffd17 	ldw	r3,-12(fp)
 400fa74:	18800115 	stw	r2,4(r3)
      rc = 0;
 400fa78:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400fa7c:	00000f06 	br	400fabc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400fa80:	e0bffd17 	ldw	r2,-12(fp)
 400fa84:	10c00117 	ldw	r3,4(r2)
 400fa88:	00a00034 	movhi	r2,32768
 400fa8c:	10bfffc4 	addi	r2,r2,-1
 400fa90:	18800c26 	beq	r3,r2,400fac4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400fa94:	e0bffd17 	ldw	r2,-12(fp)
 400fa98:	10c00917 	ldw	r3,36(r2)
 400fa9c:	e0bffd17 	ldw	r2,-12(fp)
 400faa0:	10800117 	ldw	r2,4(r2)
 400faa4:	1885803a 	cmpltu	r2,r3,r2
 400faa8:	10c03fcc 	andi	r3,r2,255
 400faac:	e0bfff17 	ldw	r2,-4(fp)
 400fab0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400fab4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400fab8:	00000206 	br	400fac4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 400fabc:	0001883a 	nop
 400fac0:	00000106 	br	400fac8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 400fac4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 400fac8:	e0bffb17 	ldw	r2,-20(fp)
}
 400facc:	e037883a 	mov	sp,fp
 400fad0:	df000017 	ldw	fp,0(sp)
 400fad4:	dec00104 	addi	sp,sp,4
 400fad8:	f800283a 	ret

0400fadc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400fadc:	defff304 	addi	sp,sp,-52
 400fae0:	dfc00c15 	stw	ra,48(sp)
 400fae4:	df000b15 	stw	fp,44(sp)
 400fae8:	df000b04 	addi	fp,sp,44
 400faec:	e13ffc15 	stw	r4,-16(fp)
 400faf0:	e17ffd15 	stw	r5,-12(fp)
 400faf4:	e1bffe15 	stw	r6,-8(fp)
 400faf8:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 400fafc:	e0bffd17 	ldw	r2,-12(fp)
 400fb00:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400fb04:	00004706 	br	400fc24 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400fb08:	e0bffc17 	ldw	r2,-16(fp)
 400fb0c:	10800a17 	ldw	r2,40(r2)
 400fb10:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 400fb14:	e0bffc17 	ldw	r2,-16(fp)
 400fb18:	10800b17 	ldw	r2,44(r2)
 400fb1c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 400fb20:	e0fff717 	ldw	r3,-36(fp)
 400fb24:	e0bff817 	ldw	r2,-32(fp)
 400fb28:	18800536 	bltu	r3,r2,400fb40 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400fb2c:	e0fff717 	ldw	r3,-36(fp)
 400fb30:	e0bff817 	ldw	r2,-32(fp)
 400fb34:	1885c83a 	sub	r2,r3,r2
 400fb38:	e0bff615 	stw	r2,-40(fp)
 400fb3c:	00000406 	br	400fb50 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400fb40:	00c20004 	movi	r3,2048
 400fb44:	e0bff817 	ldw	r2,-32(fp)
 400fb48:	1885c83a 	sub	r2,r3,r2
 400fb4c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400fb50:	e0bff617 	ldw	r2,-40(fp)
 400fb54:	10001e26 	beq	r2,zero,400fbd0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 400fb58:	e0fffe17 	ldw	r3,-8(fp)
 400fb5c:	e0bff617 	ldw	r2,-40(fp)
 400fb60:	1880022e 	bgeu	r3,r2,400fb6c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 400fb64:	e0bffe17 	ldw	r2,-8(fp)
 400fb68:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400fb6c:	e0bffc17 	ldw	r2,-16(fp)
 400fb70:	10c00e04 	addi	r3,r2,56
 400fb74:	e0bff817 	ldw	r2,-32(fp)
 400fb78:	1885883a 	add	r2,r3,r2
 400fb7c:	e1bff617 	ldw	r6,-40(fp)
 400fb80:	100b883a 	mov	r5,r2
 400fb84:	e13ff517 	ldw	r4,-44(fp)
 400fb88:	40064200 	call	4006420 <memcpy>
      ptr   += n;
 400fb8c:	e0fff517 	ldw	r3,-44(fp)
 400fb90:	e0bff617 	ldw	r2,-40(fp)
 400fb94:	1885883a 	add	r2,r3,r2
 400fb98:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 400fb9c:	e0fffe17 	ldw	r3,-8(fp)
 400fba0:	e0bff617 	ldw	r2,-40(fp)
 400fba4:	1885c83a 	sub	r2,r3,r2
 400fba8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400fbac:	e0fff817 	ldw	r3,-32(fp)
 400fbb0:	e0bff617 	ldw	r2,-40(fp)
 400fbb4:	1885883a 	add	r2,r3,r2
 400fbb8:	10c1ffcc 	andi	r3,r2,2047
 400fbbc:	e0bffc17 	ldw	r2,-16(fp)
 400fbc0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400fbc4:	e0bffe17 	ldw	r2,-8(fp)
 400fbc8:	00bfcf16 	blt	zero,r2,400fb08 <__alt_data_end+0xfc00fb08>
 400fbcc:	00000106 	br	400fbd4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 400fbd0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400fbd4:	e0fff517 	ldw	r3,-44(fp)
 400fbd8:	e0bffd17 	ldw	r2,-12(fp)
 400fbdc:	1880141e 	bne	r3,r2,400fc30 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400fbe0:	e0bfff17 	ldw	r2,-4(fp)
 400fbe4:	1090000c 	andi	r2,r2,16384
 400fbe8:	1000131e 	bne	r2,zero,400fc38 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400fbec:	0001883a 	nop
 400fbf0:	e0bffc17 	ldw	r2,-16(fp)
 400fbf4:	10c00a17 	ldw	r3,40(r2)
 400fbf8:	e0bff717 	ldw	r2,-36(fp)
 400fbfc:	1880051e 	bne	r3,r2,400fc14 <altera_avalon_jtag_uart_read+0x138>
 400fc00:	e0bffc17 	ldw	r2,-16(fp)
 400fc04:	10c00917 	ldw	r3,36(r2)
 400fc08:	e0bffc17 	ldw	r2,-16(fp)
 400fc0c:	10800117 	ldw	r2,4(r2)
 400fc10:	18bff736 	bltu	r3,r2,400fbf0 <__alt_data_end+0xfc00fbf0>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400fc14:	e0bffc17 	ldw	r2,-16(fp)
 400fc18:	10c00a17 	ldw	r3,40(r2)
 400fc1c:	e0bff717 	ldw	r2,-36(fp)
 400fc20:	18800726 	beq	r3,r2,400fc40 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400fc24:	e0bffe17 	ldw	r2,-8(fp)
 400fc28:	00bfb716 	blt	zero,r2,400fb08 <__alt_data_end+0xfc00fb08>
 400fc2c:	00000506 	br	400fc44 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 400fc30:	0001883a 	nop
 400fc34:	00000306 	br	400fc44 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 400fc38:	0001883a 	nop
 400fc3c:	00000106 	br	400fc44 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 400fc40:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400fc44:	e0fff517 	ldw	r3,-44(fp)
 400fc48:	e0bffd17 	ldw	r2,-12(fp)
 400fc4c:	18801826 	beq	r3,r2,400fcb0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fc50:	0005303a 	rdctl	r2,status
 400fc54:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fc58:	e0fffb17 	ldw	r3,-20(fp)
 400fc5c:	00bfff84 	movi	r2,-2
 400fc60:	1884703a 	and	r2,r3,r2
 400fc64:	1001703a 	wrctl	status,r2
  
  return context;
 400fc68:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400fc6c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400fc70:	e0bffc17 	ldw	r2,-16(fp)
 400fc74:	10800817 	ldw	r2,32(r2)
 400fc78:	10c00054 	ori	r3,r2,1
 400fc7c:	e0bffc17 	ldw	r2,-16(fp)
 400fc80:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400fc84:	e0bffc17 	ldw	r2,-16(fp)
 400fc88:	10800017 	ldw	r2,0(r2)
 400fc8c:	10800104 	addi	r2,r2,4
 400fc90:	1007883a 	mov	r3,r2
 400fc94:	e0bffc17 	ldw	r2,-16(fp)
 400fc98:	10800817 	ldw	r2,32(r2)
 400fc9c:	18800035 	stwio	r2,0(r3)
 400fca0:	e0bffa17 	ldw	r2,-24(fp)
 400fca4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fca8:	e0bff917 	ldw	r2,-28(fp)
 400fcac:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400fcb0:	e0fff517 	ldw	r3,-44(fp)
 400fcb4:	e0bffd17 	ldw	r2,-12(fp)
 400fcb8:	18800426 	beq	r3,r2,400fccc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 400fcbc:	e0fff517 	ldw	r3,-44(fp)
 400fcc0:	e0bffd17 	ldw	r2,-12(fp)
 400fcc4:	1885c83a 	sub	r2,r3,r2
 400fcc8:	00000606 	br	400fce4 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 400fccc:	e0bfff17 	ldw	r2,-4(fp)
 400fcd0:	1090000c 	andi	r2,r2,16384
 400fcd4:	10000226 	beq	r2,zero,400fce0 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 400fcd8:	00bffd44 	movi	r2,-11
 400fcdc:	00000106 	br	400fce4 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 400fce0:	00bffec4 	movi	r2,-5
}
 400fce4:	e037883a 	mov	sp,fp
 400fce8:	dfc00117 	ldw	ra,4(sp)
 400fcec:	df000017 	ldw	fp,0(sp)
 400fcf0:	dec00204 	addi	sp,sp,8
 400fcf4:	f800283a 	ret

0400fcf8 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400fcf8:	defff304 	addi	sp,sp,-52
 400fcfc:	dfc00c15 	stw	ra,48(sp)
 400fd00:	df000b15 	stw	fp,44(sp)
 400fd04:	df000b04 	addi	fp,sp,44
 400fd08:	e13ffc15 	stw	r4,-16(fp)
 400fd0c:	e17ffd15 	stw	r5,-12(fp)
 400fd10:	e1bffe15 	stw	r6,-8(fp)
 400fd14:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400fd18:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400fd1c:	e0bffd17 	ldw	r2,-12(fp)
 400fd20:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400fd24:	00003706 	br	400fe04 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400fd28:	e0bffc17 	ldw	r2,-16(fp)
 400fd2c:	10800c17 	ldw	r2,48(r2)
 400fd30:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 400fd34:	e0bffc17 	ldw	r2,-16(fp)
 400fd38:	10800d17 	ldw	r2,52(r2)
 400fd3c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 400fd40:	e0fff917 	ldw	r3,-28(fp)
 400fd44:	e0bff517 	ldw	r2,-44(fp)
 400fd48:	1880062e 	bgeu	r3,r2,400fd64 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400fd4c:	e0fff517 	ldw	r3,-44(fp)
 400fd50:	e0bff917 	ldw	r2,-28(fp)
 400fd54:	1885c83a 	sub	r2,r3,r2
 400fd58:	10bfffc4 	addi	r2,r2,-1
 400fd5c:	e0bff615 	stw	r2,-40(fp)
 400fd60:	00000b06 	br	400fd90 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 400fd64:	e0bff517 	ldw	r2,-44(fp)
 400fd68:	10000526 	beq	r2,zero,400fd80 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400fd6c:	00c20004 	movi	r3,2048
 400fd70:	e0bff917 	ldw	r2,-28(fp)
 400fd74:	1885c83a 	sub	r2,r3,r2
 400fd78:	e0bff615 	stw	r2,-40(fp)
 400fd7c:	00000406 	br	400fd90 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400fd80:	00c1ffc4 	movi	r3,2047
 400fd84:	e0bff917 	ldw	r2,-28(fp)
 400fd88:	1885c83a 	sub	r2,r3,r2
 400fd8c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400fd90:	e0bff617 	ldw	r2,-40(fp)
 400fd94:	10001e26 	beq	r2,zero,400fe10 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 400fd98:	e0fffe17 	ldw	r3,-8(fp)
 400fd9c:	e0bff617 	ldw	r2,-40(fp)
 400fda0:	1880022e 	bgeu	r3,r2,400fdac <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 400fda4:	e0bffe17 	ldw	r2,-8(fp)
 400fda8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400fdac:	e0bffc17 	ldw	r2,-16(fp)
 400fdb0:	10c20e04 	addi	r3,r2,2104
 400fdb4:	e0bff917 	ldw	r2,-28(fp)
 400fdb8:	1885883a 	add	r2,r3,r2
 400fdbc:	e1bff617 	ldw	r6,-40(fp)
 400fdc0:	e17ffd17 	ldw	r5,-12(fp)
 400fdc4:	1009883a 	mov	r4,r2
 400fdc8:	40064200 	call	4006420 <memcpy>
      ptr   += n;
 400fdcc:	e0fffd17 	ldw	r3,-12(fp)
 400fdd0:	e0bff617 	ldw	r2,-40(fp)
 400fdd4:	1885883a 	add	r2,r3,r2
 400fdd8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 400fddc:	e0fffe17 	ldw	r3,-8(fp)
 400fde0:	e0bff617 	ldw	r2,-40(fp)
 400fde4:	1885c83a 	sub	r2,r3,r2
 400fde8:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400fdec:	e0fff917 	ldw	r3,-28(fp)
 400fdf0:	e0bff617 	ldw	r2,-40(fp)
 400fdf4:	1885883a 	add	r2,r3,r2
 400fdf8:	10c1ffcc 	andi	r3,r2,2047
 400fdfc:	e0bffc17 	ldw	r2,-16(fp)
 400fe00:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400fe04:	e0bffe17 	ldw	r2,-8(fp)
 400fe08:	00bfc716 	blt	zero,r2,400fd28 <__alt_data_end+0xfc00fd28>
 400fe0c:	00000106 	br	400fe14 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 400fe10:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fe14:	0005303a 	rdctl	r2,status
 400fe18:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fe1c:	e0fffb17 	ldw	r3,-20(fp)
 400fe20:	00bfff84 	movi	r2,-2
 400fe24:	1884703a 	and	r2,r3,r2
 400fe28:	1001703a 	wrctl	status,r2
  
  return context;
 400fe2c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400fe30:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400fe34:	e0bffc17 	ldw	r2,-16(fp)
 400fe38:	10800817 	ldw	r2,32(r2)
 400fe3c:	10c00094 	ori	r3,r2,2
 400fe40:	e0bffc17 	ldw	r2,-16(fp)
 400fe44:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400fe48:	e0bffc17 	ldw	r2,-16(fp)
 400fe4c:	10800017 	ldw	r2,0(r2)
 400fe50:	10800104 	addi	r2,r2,4
 400fe54:	1007883a 	mov	r3,r2
 400fe58:	e0bffc17 	ldw	r2,-16(fp)
 400fe5c:	10800817 	ldw	r2,32(r2)
 400fe60:	18800035 	stwio	r2,0(r3)
 400fe64:	e0bffa17 	ldw	r2,-24(fp)
 400fe68:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fe6c:	e0bff817 	ldw	r2,-32(fp)
 400fe70:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400fe74:	e0bffe17 	ldw	r2,-8(fp)
 400fe78:	0080100e 	bge	zero,r2,400febc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 400fe7c:	e0bfff17 	ldw	r2,-4(fp)
 400fe80:	1090000c 	andi	r2,r2,16384
 400fe84:	1000101e 	bne	r2,zero,400fec8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400fe88:	0001883a 	nop
 400fe8c:	e0bffc17 	ldw	r2,-16(fp)
 400fe90:	10c00d17 	ldw	r3,52(r2)
 400fe94:	e0bff517 	ldw	r2,-44(fp)
 400fe98:	1880051e 	bne	r3,r2,400feb0 <altera_avalon_jtag_uart_write+0x1b8>
 400fe9c:	e0bffc17 	ldw	r2,-16(fp)
 400fea0:	10c00917 	ldw	r3,36(r2)
 400fea4:	e0bffc17 	ldw	r2,-16(fp)
 400fea8:	10800117 	ldw	r2,4(r2)
 400feac:	18bff736 	bltu	r3,r2,400fe8c <__alt_data_end+0xfc00fe8c>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 400feb0:	e0bffc17 	ldw	r2,-16(fp)
 400feb4:	10800917 	ldw	r2,36(r2)
 400feb8:	1000051e 	bne	r2,zero,400fed0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 400febc:	e0bffe17 	ldw	r2,-8(fp)
 400fec0:	00bfd016 	blt	zero,r2,400fe04 <__alt_data_end+0xfc00fe04>
 400fec4:	00000306 	br	400fed4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 400fec8:	0001883a 	nop
 400fecc:	00000106 	br	400fed4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 400fed0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400fed4:	e0fffd17 	ldw	r3,-12(fp)
 400fed8:	e0bff717 	ldw	r2,-36(fp)
 400fedc:	18800426 	beq	r3,r2,400fef0 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 400fee0:	e0fffd17 	ldw	r3,-12(fp)
 400fee4:	e0bff717 	ldw	r2,-36(fp)
 400fee8:	1885c83a 	sub	r2,r3,r2
 400feec:	00000606 	br	400ff08 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 400fef0:	e0bfff17 	ldw	r2,-4(fp)
 400fef4:	1090000c 	andi	r2,r2,16384
 400fef8:	10000226 	beq	r2,zero,400ff04 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 400fefc:	00bffd44 	movi	r2,-11
 400ff00:	00000106 	br	400ff08 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400ff04:	00bffec4 	movi	r2,-5
}
 400ff08:	e037883a 	mov	sp,fp
 400ff0c:	dfc00117 	ldw	ra,4(sp)
 400ff10:	df000017 	ldw	fp,0(sp)
 400ff14:	dec00204 	addi	sp,sp,8
 400ff18:	f800283a 	ret

0400ff1c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400ff1c:	defffa04 	addi	sp,sp,-24
 400ff20:	dfc00515 	stw	ra,20(sp)
 400ff24:	df000415 	stw	fp,16(sp)
 400ff28:	df000404 	addi	fp,sp,16
 400ff2c:	e13ffd15 	stw	r4,-12(fp)
 400ff30:	e17ffe15 	stw	r5,-8(fp)
 400ff34:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 400ff38:	e0bffd17 	ldw	r2,-12(fp)
 400ff3c:	10800017 	ldw	r2,0(r2)
 400ff40:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 400ff44:	e0bffc17 	ldw	r2,-16(fp)
 400ff48:	10c00a04 	addi	r3,r2,40
 400ff4c:	e0bffd17 	ldw	r2,-12(fp)
 400ff50:	10800217 	ldw	r2,8(r2)
 400ff54:	100f883a 	mov	r7,r2
 400ff58:	e1bfff17 	ldw	r6,-4(fp)
 400ff5c:	e17ffe17 	ldw	r5,-8(fp)
 400ff60:	1809883a 	mov	r4,r3
 400ff64:	40104300 	call	4010430 <altera_avalon_uart_read>
      fd->fd_flags);
}
 400ff68:	e037883a 	mov	sp,fp
 400ff6c:	dfc00117 	ldw	ra,4(sp)
 400ff70:	df000017 	ldw	fp,0(sp)
 400ff74:	dec00204 	addi	sp,sp,8
 400ff78:	f800283a 	ret

0400ff7c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400ff7c:	defffa04 	addi	sp,sp,-24
 400ff80:	dfc00515 	stw	ra,20(sp)
 400ff84:	df000415 	stw	fp,16(sp)
 400ff88:	df000404 	addi	fp,sp,16
 400ff8c:	e13ffd15 	stw	r4,-12(fp)
 400ff90:	e17ffe15 	stw	r5,-8(fp)
 400ff94:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 400ff98:	e0bffd17 	ldw	r2,-12(fp)
 400ff9c:	10800017 	ldw	r2,0(r2)
 400ffa0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 400ffa4:	e0bffc17 	ldw	r2,-16(fp)
 400ffa8:	10c00a04 	addi	r3,r2,40
 400ffac:	e0bffd17 	ldw	r2,-12(fp)
 400ffb0:	10800217 	ldw	r2,8(r2)
 400ffb4:	100f883a 	mov	r7,r2
 400ffb8:	e1bfff17 	ldw	r6,-4(fp)
 400ffbc:	e17ffe17 	ldw	r5,-8(fp)
 400ffc0:	1809883a 	mov	r4,r3
 400ffc4:	40106480 	call	4010648 <altera_avalon_uart_write>
      fd->fd_flags);
}
 400ffc8:	e037883a 	mov	sp,fp
 400ffcc:	dfc00117 	ldw	ra,4(sp)
 400ffd0:	df000017 	ldw	fp,0(sp)
 400ffd4:	dec00204 	addi	sp,sp,8
 400ffd8:	f800283a 	ret

0400ffdc <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 400ffdc:	defffc04 	addi	sp,sp,-16
 400ffe0:	dfc00315 	stw	ra,12(sp)
 400ffe4:	df000215 	stw	fp,8(sp)
 400ffe8:	df000204 	addi	fp,sp,8
 400ffec:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 400fff0:	e0bfff17 	ldw	r2,-4(fp)
 400fff4:	10800017 	ldw	r2,0(r2)
 400fff8:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 400fffc:	e0bffe17 	ldw	r2,-8(fp)
 4010000:	10c00a04 	addi	r3,r2,40
 4010004:	e0bfff17 	ldw	r2,-4(fp)
 4010008:	10800217 	ldw	r2,8(r2)
 401000c:	100b883a 	mov	r5,r2
 4010010:	1809883a 	mov	r4,r3
 4010014:	40103a00 	call	40103a0 <altera_avalon_uart_close>
}
 4010018:	e037883a 	mov	sp,fp
 401001c:	dfc00117 	ldw	ra,4(sp)
 4010020:	df000017 	ldw	fp,0(sp)
 4010024:	dec00204 	addi	sp,sp,8
 4010028:	f800283a 	ret

0401002c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 401002c:	defff804 	addi	sp,sp,-32
 4010030:	dfc00715 	stw	ra,28(sp)
 4010034:	df000615 	stw	fp,24(sp)
 4010038:	df000604 	addi	fp,sp,24
 401003c:	e13ffd15 	stw	r4,-12(fp)
 4010040:	e17ffe15 	stw	r5,-8(fp)
 4010044:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 4010048:	e0bffd17 	ldw	r2,-12(fp)
 401004c:	10800017 	ldw	r2,0(r2)
 4010050:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 4010054:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 4010058:	1000041e 	bne	r2,zero,401006c <altera_avalon_uart_init+0x40>
 401005c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 4010060:	1000021e 	bne	r2,zero,401006c <altera_avalon_uart_init+0x40>
 4010064:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 4010068:	10000226 	beq	r2,zero,4010074 <altera_avalon_uart_init+0x48>
 401006c:	00800044 	movi	r2,1
 4010070:	00000106 	br	4010078 <altera_avalon_uart_init+0x4c>
 4010074:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 4010078:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 401007c:	e0bffc17 	ldw	r2,-16(fp)
 4010080:	10000f1e 	bne	r2,zero,40100c0 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 4010084:	e0bffd17 	ldw	r2,-12(fp)
 4010088:	00c32004 	movi	r3,3200
 401008c:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 4010090:	e0bffb17 	ldw	r2,-20(fp)
 4010094:	10800304 	addi	r2,r2,12
 4010098:	e0fffd17 	ldw	r3,-12(fp)
 401009c:	18c00117 	ldw	r3,4(r3)
 40100a0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 40100a4:	d8000015 	stw	zero,0(sp)
 40100a8:	e1fffd17 	ldw	r7,-12(fp)
 40100ac:	01810074 	movhi	r6,1025
 40100b0:	31803604 	addi	r6,r6,216
 40100b4:	e17fff17 	ldw	r5,-4(fp)
 40100b8:	e13ffe17 	ldw	r4,-8(fp)
 40100bc:	4011d7c0 	call	4011d7c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 40100c0:	0001883a 	nop
 40100c4:	e037883a 	mov	sp,fp
 40100c8:	dfc00117 	ldw	ra,4(sp)
 40100cc:	df000017 	ldw	fp,0(sp)
 40100d0:	dec00204 	addi	sp,sp,8
 40100d4:	f800283a 	ret

040100d8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 40100d8:	defffa04 	addi	sp,sp,-24
 40100dc:	dfc00515 	stw	ra,20(sp)
 40100e0:	df000415 	stw	fp,16(sp)
 40100e4:	df000404 	addi	fp,sp,16
 40100e8:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 40100ec:	e0bfff17 	ldw	r2,-4(fp)
 40100f0:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 40100f4:	e0bffc17 	ldw	r2,-16(fp)
 40100f8:	10800017 	ldw	r2,0(r2)
 40100fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 4010100:	e0bffd17 	ldw	r2,-12(fp)
 4010104:	10800204 	addi	r2,r2,8
 4010108:	10800037 	ldwio	r2,0(r2)
 401010c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 4010110:	e0bffd17 	ldw	r2,-12(fp)
 4010114:	10800204 	addi	r2,r2,8
 4010118:	0007883a 	mov	r3,zero
 401011c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 4010120:	e0bffd17 	ldw	r2,-12(fp)
 4010124:	10800204 	addi	r2,r2,8
 4010128:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 401012c:	e0bffe17 	ldw	r2,-8(fp)
 4010130:	1080200c 	andi	r2,r2,128
 4010134:	10000326 	beq	r2,zero,4010144 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 4010138:	e17ffe17 	ldw	r5,-8(fp)
 401013c:	e13ffc17 	ldw	r4,-16(fp)
 4010140:	40101740 	call	4010174 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 4010144:	e0bffe17 	ldw	r2,-8(fp)
 4010148:	1081100c 	andi	r2,r2,1088
 401014c:	10000326 	beq	r2,zero,401015c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 4010150:	e17ffe17 	ldw	r5,-8(fp)
 4010154:	e13ffc17 	ldw	r4,-16(fp)
 4010158:	40102580 	call	4010258 <altera_avalon_uart_txirq>
  }
  

}
 401015c:	0001883a 	nop
 4010160:	e037883a 	mov	sp,fp
 4010164:	dfc00117 	ldw	ra,4(sp)
 4010168:	df000017 	ldw	fp,0(sp)
 401016c:	dec00204 	addi	sp,sp,8
 4010170:	f800283a 	ret

04010174 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 4010174:	defffc04 	addi	sp,sp,-16
 4010178:	df000315 	stw	fp,12(sp)
 401017c:	df000304 	addi	fp,sp,12
 4010180:	e13ffe15 	stw	r4,-8(fp)
 4010184:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 4010188:	e0bfff17 	ldw	r2,-4(fp)
 401018c:	108000cc 	andi	r2,r2,3
 4010190:	10002c1e 	bne	r2,zero,4010244 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 4010194:	e0bffe17 	ldw	r2,-8(fp)
 4010198:	10800317 	ldw	r2,12(r2)
 401019c:	e0bffe17 	ldw	r2,-8(fp)
 40101a0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 40101a4:	e0bffe17 	ldw	r2,-8(fp)
 40101a8:	10800317 	ldw	r2,12(r2)
 40101ac:	10800044 	addi	r2,r2,1
 40101b0:	10800fcc 	andi	r2,r2,63
 40101b4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 40101b8:	e0bffe17 	ldw	r2,-8(fp)
 40101bc:	10800317 	ldw	r2,12(r2)
 40101c0:	e0fffe17 	ldw	r3,-8(fp)
 40101c4:	18c00017 	ldw	r3,0(r3)
 40101c8:	18c00037 	ldwio	r3,0(r3)
 40101cc:	1809883a 	mov	r4,r3
 40101d0:	e0fffe17 	ldw	r3,-8(fp)
 40101d4:	1885883a 	add	r2,r3,r2
 40101d8:	10800704 	addi	r2,r2,28
 40101dc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 40101e0:	e0bffe17 	ldw	r2,-8(fp)
 40101e4:	e0fffd17 	ldw	r3,-12(fp)
 40101e8:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 40101ec:	e0bffe17 	ldw	r2,-8(fp)
 40101f0:	10800317 	ldw	r2,12(r2)
 40101f4:	10800044 	addi	r2,r2,1
 40101f8:	10800fcc 	andi	r2,r2,63
 40101fc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 4010200:	e0bffe17 	ldw	r2,-8(fp)
 4010204:	10c00217 	ldw	r3,8(r2)
 4010208:	e0bffd17 	ldw	r2,-12(fp)
 401020c:	18800e1e 	bne	r3,r2,4010248 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4010210:	e0bffe17 	ldw	r2,-8(fp)
 4010214:	10c00117 	ldw	r3,4(r2)
 4010218:	00bfdfc4 	movi	r2,-129
 401021c:	1886703a 	and	r3,r3,r2
 4010220:	e0bffe17 	ldw	r2,-8(fp)
 4010224:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 4010228:	e0bffe17 	ldw	r2,-8(fp)
 401022c:	10800017 	ldw	r2,0(r2)
 4010230:	10800304 	addi	r2,r2,12
 4010234:	e0fffe17 	ldw	r3,-8(fp)
 4010238:	18c00117 	ldw	r3,4(r3)
 401023c:	10c00035 	stwio	r3,0(r2)
 4010240:	00000106 	br	4010248 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 4010244:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 4010248:	e037883a 	mov	sp,fp
 401024c:	df000017 	ldw	fp,0(sp)
 4010250:	dec00104 	addi	sp,sp,4
 4010254:	f800283a 	ret

04010258 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 4010258:	defffb04 	addi	sp,sp,-20
 401025c:	df000415 	stw	fp,16(sp)
 4010260:	df000404 	addi	fp,sp,16
 4010264:	e13ffc15 	stw	r4,-16(fp)
 4010268:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 401026c:	e0bffc17 	ldw	r2,-16(fp)
 4010270:	10c00417 	ldw	r3,16(r2)
 4010274:	e0bffc17 	ldw	r2,-16(fp)
 4010278:	10800517 	ldw	r2,20(r2)
 401027c:	18803226 	beq	r3,r2,4010348 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 4010280:	e0bffc17 	ldw	r2,-16(fp)
 4010284:	10800617 	ldw	r2,24(r2)
 4010288:	1080008c 	andi	r2,r2,2
 401028c:	10000326 	beq	r2,zero,401029c <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 4010290:	e0bffd17 	ldw	r2,-12(fp)
 4010294:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 4010298:	10001d26 	beq	r2,zero,4010310 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 401029c:	e0bffc17 	ldw	r2,-16(fp)
 40102a0:	10800417 	ldw	r2,16(r2)
 40102a4:	e0bffc17 	ldw	r2,-16(fp)
 40102a8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 40102ac:	e0bffc17 	ldw	r2,-16(fp)
 40102b0:	10800017 	ldw	r2,0(r2)
 40102b4:	10800104 	addi	r2,r2,4
 40102b8:	e0fffc17 	ldw	r3,-16(fp)
 40102bc:	18c00417 	ldw	r3,16(r3)
 40102c0:	e13ffc17 	ldw	r4,-16(fp)
 40102c4:	20c7883a 	add	r3,r4,r3
 40102c8:	18c01704 	addi	r3,r3,92
 40102cc:	18c00003 	ldbu	r3,0(r3)
 40102d0:	18c03fcc 	andi	r3,r3,255
 40102d4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 40102d8:	e0bffc17 	ldw	r2,-16(fp)
 40102dc:	10800417 	ldw	r2,16(r2)
 40102e0:	10800044 	addi	r2,r2,1
 40102e4:	e0fffc17 	ldw	r3,-16(fp)
 40102e8:	18800415 	stw	r2,16(r3)
 40102ec:	10c00fcc 	andi	r3,r2,63
 40102f0:	e0bffc17 	ldw	r2,-16(fp)
 40102f4:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 40102f8:	e0bffc17 	ldw	r2,-16(fp)
 40102fc:	10800117 	ldw	r2,4(r2)
 4010300:	10c01014 	ori	r3,r2,64
 4010304:	e0bffc17 	ldw	r2,-16(fp)
 4010308:	10c00115 	stw	r3,4(r2)
 401030c:	00000e06 	br	4010348 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 4010310:	e0bffc17 	ldw	r2,-16(fp)
 4010314:	10800017 	ldw	r2,0(r2)
 4010318:	10800204 	addi	r2,r2,8
 401031c:	10800037 	ldwio	r2,0(r2)
 4010320:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 4010324:	e0bffd17 	ldw	r2,-12(fp)
 4010328:	1082000c 	andi	r2,r2,2048
 401032c:	1000061e 	bne	r2,zero,4010348 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 4010330:	e0bffc17 	ldw	r2,-16(fp)
 4010334:	10c00117 	ldw	r3,4(r2)
 4010338:	00bfefc4 	movi	r2,-65
 401033c:	1886703a 	and	r3,r3,r2
 4010340:	e0bffc17 	ldw	r2,-16(fp)
 4010344:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 4010348:	e0bffc17 	ldw	r2,-16(fp)
 401034c:	10c00417 	ldw	r3,16(r2)
 4010350:	e0bffc17 	ldw	r2,-16(fp)
 4010354:	10800517 	ldw	r2,20(r2)
 4010358:	1880061e 	bne	r3,r2,4010374 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 401035c:	e0bffc17 	ldw	r2,-16(fp)
 4010360:	10c00117 	ldw	r3,4(r2)
 4010364:	00beefc4 	movi	r2,-1089
 4010368:	1886703a 	and	r3,r3,r2
 401036c:	e0bffc17 	ldw	r2,-16(fp)
 4010370:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4010374:	e0bffc17 	ldw	r2,-16(fp)
 4010378:	10800017 	ldw	r2,0(r2)
 401037c:	10800304 	addi	r2,r2,12
 4010380:	e0fffc17 	ldw	r3,-16(fp)
 4010384:	18c00117 	ldw	r3,4(r3)
 4010388:	10c00035 	stwio	r3,0(r2)
}
 401038c:	0001883a 	nop
 4010390:	e037883a 	mov	sp,fp
 4010394:	df000017 	ldw	fp,0(sp)
 4010398:	dec00104 	addi	sp,sp,4
 401039c:	f800283a 	ret

040103a0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 40103a0:	defffd04 	addi	sp,sp,-12
 40103a4:	df000215 	stw	fp,8(sp)
 40103a8:	df000204 	addi	fp,sp,8
 40103ac:	e13ffe15 	stw	r4,-8(fp)
 40103b0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 40103b4:	00000506 	br	40103cc <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40103b8:	e0bfff17 	ldw	r2,-4(fp)
 40103bc:	1090000c 	andi	r2,r2,16384
 40103c0:	10000226 	beq	r2,zero,40103cc <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40103c4:	00bffd44 	movi	r2,-11
 40103c8:	00000606 	br	40103e4 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 40103cc:	e0bffe17 	ldw	r2,-8(fp)
 40103d0:	10c00417 	ldw	r3,16(r2)
 40103d4:	e0bffe17 	ldw	r2,-8(fp)
 40103d8:	10800517 	ldw	r2,20(r2)
 40103dc:	18bff61e 	bne	r3,r2,40103b8 <__alt_data_end+0xfc0103b8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 40103e0:	0005883a 	mov	r2,zero
}
 40103e4:	e037883a 	mov	sp,fp
 40103e8:	df000017 	ldw	fp,0(sp)
 40103ec:	dec00104 	addi	sp,sp,4
 40103f0:	f800283a 	ret

040103f4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40103f4:	defffe04 	addi	sp,sp,-8
 40103f8:	dfc00115 	stw	ra,4(sp)
 40103fc:	df000015 	stw	fp,0(sp)
 4010400:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010404:	d0a01817 	ldw	r2,-32672(gp)
 4010408:	10000326 	beq	r2,zero,4010418 <alt_get_errno+0x24>
 401040c:	d0a01817 	ldw	r2,-32672(gp)
 4010410:	103ee83a 	callr	r2
 4010414:	00000106 	br	401041c <alt_get_errno+0x28>
 4010418:	d0a03004 	addi	r2,gp,-32576
}
 401041c:	e037883a 	mov	sp,fp
 4010420:	dfc00117 	ldw	ra,4(sp)
 4010424:	df000017 	ldw	fp,0(sp)
 4010428:	dec00204 	addi	sp,sp,8
 401042c:	f800283a 	ret

04010430 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 4010430:	defff204 	addi	sp,sp,-56
 4010434:	dfc00d15 	stw	ra,52(sp)
 4010438:	df000c15 	stw	fp,48(sp)
 401043c:	df000c04 	addi	fp,sp,48
 4010440:	e13ffc15 	stw	r4,-16(fp)
 4010444:	e17ffd15 	stw	r5,-12(fp)
 4010448:	e1bffe15 	stw	r6,-8(fp)
 401044c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 4010450:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 4010454:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 4010458:	e0bfff17 	ldw	r2,-4(fp)
 401045c:	1090000c 	andi	r2,r2,16384
 4010460:	1005003a 	cmpeq	r2,r2,zero
 4010464:	10803fcc 	andi	r2,r2,255
 4010468:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 401046c:	00001306 	br	40104bc <altera_avalon_uart_read+0x8c>
    {
      count++;
 4010470:	e0bff517 	ldw	r2,-44(fp)
 4010474:	10800044 	addi	r2,r2,1
 4010478:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 401047c:	e0bffd17 	ldw	r2,-12(fp)
 4010480:	10c00044 	addi	r3,r2,1
 4010484:	e0fffd15 	stw	r3,-12(fp)
 4010488:	e0fffc17 	ldw	r3,-16(fp)
 401048c:	18c00217 	ldw	r3,8(r3)
 4010490:	e13ffc17 	ldw	r4,-16(fp)
 4010494:	20c7883a 	add	r3,r4,r3
 4010498:	18c00704 	addi	r3,r3,28
 401049c:	18c00003 	ldbu	r3,0(r3)
 40104a0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 40104a4:	e0bffc17 	ldw	r2,-16(fp)
 40104a8:	10800217 	ldw	r2,8(r2)
 40104ac:	10800044 	addi	r2,r2,1
 40104b0:	10c00fcc 	andi	r3,r2,63
 40104b4:	e0bffc17 	ldw	r2,-16(fp)
 40104b8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 40104bc:	e0fff517 	ldw	r3,-44(fp)
 40104c0:	e0bffe17 	ldw	r2,-8(fp)
 40104c4:	1880050e 	bge	r3,r2,40104dc <altera_avalon_uart_read+0xac>
 40104c8:	e0bffc17 	ldw	r2,-16(fp)
 40104cc:	10c00217 	ldw	r3,8(r2)
 40104d0:	e0bffc17 	ldw	r2,-16(fp)
 40104d4:	10800317 	ldw	r2,12(r2)
 40104d8:	18bfe51e 	bne	r3,r2,4010470 <__alt_data_end+0xfc010470>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 40104dc:	e0bff517 	ldw	r2,-44(fp)
 40104e0:	1000251e 	bne	r2,zero,4010578 <altera_avalon_uart_read+0x148>
 40104e4:	e0bffc17 	ldw	r2,-16(fp)
 40104e8:	10c00217 	ldw	r3,8(r2)
 40104ec:	e0bffc17 	ldw	r2,-16(fp)
 40104f0:	10800317 	ldw	r2,12(r2)
 40104f4:	1880201e 	bne	r3,r2,4010578 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 40104f8:	e0bff617 	ldw	r2,-40(fp)
 40104fc:	1000071e 	bne	r2,zero,401051c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 4010500:	40103f40 	call	40103f4 <alt_get_errno>
 4010504:	1007883a 	mov	r3,r2
 4010508:	008002c4 	movi	r2,11
 401050c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 4010510:	00800044 	movi	r2,1
 4010514:	e0bff405 	stb	r2,-48(fp)
        break;
 4010518:	00001b06 	br	4010588 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401051c:	0005303a 	rdctl	r2,status
 4010520:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010524:	e0fff917 	ldw	r3,-28(fp)
 4010528:	00bfff84 	movi	r2,-2
 401052c:	1884703a 	and	r2,r3,r2
 4010530:	1001703a 	wrctl	status,r2
  
  return context;
 4010534:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 4010538:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 401053c:	e0bffc17 	ldw	r2,-16(fp)
 4010540:	10800117 	ldw	r2,4(r2)
 4010544:	10c02014 	ori	r3,r2,128
 4010548:	e0bffc17 	ldw	r2,-16(fp)
 401054c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4010550:	e0bffc17 	ldw	r2,-16(fp)
 4010554:	10800017 	ldw	r2,0(r2)
 4010558:	10800304 	addi	r2,r2,12
 401055c:	e0fffc17 	ldw	r3,-16(fp)
 4010560:	18c00117 	ldw	r3,4(r3)
 4010564:	10c00035 	stwio	r3,0(r2)
 4010568:	e0bff817 	ldw	r2,-32(fp)
 401056c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010570:	e0bffa17 	ldw	r2,-24(fp)
 4010574:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 4010578:	e0bff517 	ldw	r2,-44(fp)
 401057c:	1000021e 	bne	r2,zero,4010588 <altera_avalon_uart_read+0x158>
 4010580:	e0bffe17 	ldw	r2,-8(fp)
 4010584:	103fcd1e 	bne	r2,zero,40104bc <__alt_data_end+0xfc0104bc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010588:	0005303a 	rdctl	r2,status
 401058c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010590:	e0fffb17 	ldw	r3,-20(fp)
 4010594:	00bfff84 	movi	r2,-2
 4010598:	1884703a 	and	r2,r3,r2
 401059c:	1001703a 	wrctl	status,r2
  
  return context;
 40105a0:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 40105a4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 40105a8:	e0bffc17 	ldw	r2,-16(fp)
 40105ac:	10800117 	ldw	r2,4(r2)
 40105b0:	10c02014 	ori	r3,r2,128
 40105b4:	e0bffc17 	ldw	r2,-16(fp)
 40105b8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40105bc:	e0bffc17 	ldw	r2,-16(fp)
 40105c0:	10800017 	ldw	r2,0(r2)
 40105c4:	10800304 	addi	r2,r2,12
 40105c8:	e0fffc17 	ldw	r3,-16(fp)
 40105cc:	18c00117 	ldw	r3,4(r3)
 40105d0:	10c00035 	stwio	r3,0(r2)
 40105d4:	e0bff817 	ldw	r2,-32(fp)
 40105d8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40105dc:	e0bff717 	ldw	r2,-36(fp)
 40105e0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 40105e4:	e0bff403 	ldbu	r2,-48(fp)
 40105e8:	10000226 	beq	r2,zero,40105f4 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 40105ec:	00bffd44 	movi	r2,-11
 40105f0:	00000106 	br	40105f8 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 40105f4:	e0bff517 	ldw	r2,-44(fp)
  }
}
 40105f8:	e037883a 	mov	sp,fp
 40105fc:	dfc00117 	ldw	ra,4(sp)
 4010600:	df000017 	ldw	fp,0(sp)
 4010604:	dec00204 	addi	sp,sp,8
 4010608:	f800283a 	ret

0401060c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401060c:	defffe04 	addi	sp,sp,-8
 4010610:	dfc00115 	stw	ra,4(sp)
 4010614:	df000015 	stw	fp,0(sp)
 4010618:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401061c:	d0a01817 	ldw	r2,-32672(gp)
 4010620:	10000326 	beq	r2,zero,4010630 <alt_get_errno+0x24>
 4010624:	d0a01817 	ldw	r2,-32672(gp)
 4010628:	103ee83a 	callr	r2
 401062c:	00000106 	br	4010634 <alt_get_errno+0x28>
 4010630:	d0a03004 	addi	r2,gp,-32576
}
 4010634:	e037883a 	mov	sp,fp
 4010638:	dfc00117 	ldw	ra,4(sp)
 401063c:	df000017 	ldw	fp,0(sp)
 4010640:	dec00204 	addi	sp,sp,8
 4010644:	f800283a 	ret

04010648 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 4010648:	defff204 	addi	sp,sp,-56
 401064c:	dfc00d15 	stw	ra,52(sp)
 4010650:	df000c15 	stw	fp,48(sp)
 4010654:	df000c04 	addi	fp,sp,48
 4010658:	e13ffc15 	stw	r4,-16(fp)
 401065c:	e17ffd15 	stw	r5,-12(fp)
 4010660:	e1bffe15 	stw	r6,-8(fp)
 4010664:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 4010668:	e0bffe17 	ldw	r2,-8(fp)
 401066c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 4010670:	e0bfff17 	ldw	r2,-4(fp)
 4010674:	1090000c 	andi	r2,r2,16384
 4010678:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 401067c:	00003c06 	br	4010770 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 4010680:	e0bffc17 	ldw	r2,-16(fp)
 4010684:	10800517 	ldw	r2,20(r2)
 4010688:	10800044 	addi	r2,r2,1
 401068c:	10800fcc 	andi	r2,r2,63
 4010690:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 4010694:	e0bffc17 	ldw	r2,-16(fp)
 4010698:	10c00417 	ldw	r3,16(r2)
 401069c:	e0bff717 	ldw	r2,-36(fp)
 40106a0:	1880221e 	bne	r3,r2,401072c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 40106a4:	e0bff517 	ldw	r2,-44(fp)
 40106a8:	10000526 	beq	r2,zero,40106c0 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 40106ac:	401060c0 	call	401060c <alt_get_errno>
 40106b0:	1007883a 	mov	r3,r2
 40106b4:	008002c4 	movi	r2,11
 40106b8:	18800015 	stw	r2,0(r3)
        break;
 40106bc:	00002e06 	br	4010778 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40106c0:	0005303a 	rdctl	r2,status
 40106c4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40106c8:	e0fff917 	ldw	r3,-28(fp)
 40106cc:	00bfff84 	movi	r2,-2
 40106d0:	1884703a 	and	r2,r3,r2
 40106d4:	1001703a 	wrctl	status,r2
  
  return context;
 40106d8:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 40106dc:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 40106e0:	e0bffc17 	ldw	r2,-16(fp)
 40106e4:	10800117 	ldw	r2,4(r2)
 40106e8:	10c11014 	ori	r3,r2,1088
 40106ec:	e0bffc17 	ldw	r2,-16(fp)
 40106f0:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40106f4:	e0bffc17 	ldw	r2,-16(fp)
 40106f8:	10800017 	ldw	r2,0(r2)
 40106fc:	10800304 	addi	r2,r2,12
 4010700:	e0fffc17 	ldw	r3,-16(fp)
 4010704:	18c00117 	ldw	r3,4(r3)
 4010708:	10c00035 	stwio	r3,0(r2)
 401070c:	e0bff817 	ldw	r2,-32(fp)
 4010710:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010714:	e0bff617 	ldw	r2,-40(fp)
 4010718:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 401071c:	e0bffc17 	ldw	r2,-16(fp)
 4010720:	10c00417 	ldw	r3,16(r2)
 4010724:	e0bff717 	ldw	r2,-36(fp)
 4010728:	18bffc26 	beq	r3,r2,401071c <__alt_data_end+0xfc01071c>
      }
    }

    count--;
 401072c:	e0bff417 	ldw	r2,-48(fp)
 4010730:	10bfffc4 	addi	r2,r2,-1
 4010734:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 4010738:	e0bffc17 	ldw	r2,-16(fp)
 401073c:	10c00517 	ldw	r3,20(r2)
 4010740:	e0bffd17 	ldw	r2,-12(fp)
 4010744:	11000044 	addi	r4,r2,1
 4010748:	e13ffd15 	stw	r4,-12(fp)
 401074c:	10800003 	ldbu	r2,0(r2)
 4010750:	1009883a 	mov	r4,r2
 4010754:	e0bffc17 	ldw	r2,-16(fp)
 4010758:	10c5883a 	add	r2,r2,r3
 401075c:	10801704 	addi	r2,r2,92
 4010760:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 4010764:	e0bffc17 	ldw	r2,-16(fp)
 4010768:	e0fff717 	ldw	r3,-36(fp)
 401076c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 4010770:	e0bff417 	ldw	r2,-48(fp)
 4010774:	103fc21e 	bne	r2,zero,4010680 <__alt_data_end+0xfc010680>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010778:	0005303a 	rdctl	r2,status
 401077c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010780:	e0fffb17 	ldw	r3,-20(fp)
 4010784:	00bfff84 	movi	r2,-2
 4010788:	1884703a 	and	r2,r3,r2
 401078c:	1001703a 	wrctl	status,r2
  
  return context;
 4010790:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 4010794:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 4010798:	e0bffc17 	ldw	r2,-16(fp)
 401079c:	10800117 	ldw	r2,4(r2)
 40107a0:	10c11014 	ori	r3,r2,1088
 40107a4:	e0bffc17 	ldw	r2,-16(fp)
 40107a8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40107ac:	e0bffc17 	ldw	r2,-16(fp)
 40107b0:	10800017 	ldw	r2,0(r2)
 40107b4:	10800304 	addi	r2,r2,12
 40107b8:	e0fffc17 	ldw	r3,-16(fp)
 40107bc:	18c00117 	ldw	r3,4(r3)
 40107c0:	10c00035 	stwio	r3,0(r2)
 40107c4:	e0bff817 	ldw	r2,-32(fp)
 40107c8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40107cc:	e0bffa17 	ldw	r2,-24(fp)
 40107d0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 40107d4:	e0fffe17 	ldw	r3,-8(fp)
 40107d8:	e0bff417 	ldw	r2,-48(fp)
 40107dc:	1885c83a 	sub	r2,r3,r2
}
 40107e0:	e037883a 	mov	sp,fp
 40107e4:	dfc00117 	ldw	ra,4(sp)
 40107e8:	df000017 	ldw	fp,0(sp)
 40107ec:	dec00204 	addi	sp,sp,8
 40107f0:	f800283a 	ret

040107f4 <alt_flash_device_register>:

typedef struct alt_flash_dev alt_flash_dev; 
typedef alt_flash_dev alt_flash_fd;

static ALT_INLINE int alt_flash_device_register( alt_flash_fd* fd)
{
 40107f4:	defffd04 	addi	sp,sp,-12
 40107f8:	dfc00215 	stw	ra,8(sp)
 40107fc:	df000115 	stw	fp,4(sp)
 4010800:	df000104 	addi	fp,sp,4
 4010804:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_flash_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) fd, &alt_flash_dev_list);
 4010808:	d1601904 	addi	r5,gp,-32668
 401080c:	e13fff17 	ldw	r4,-4(fp)
 4010810:	4011b5c0 	call	4011b5c <alt_dev_llist_insert>
}
 4010814:	e037883a 	mov	sp,fp
 4010818:	dfc00117 	ldw	ra,4(sp)
 401081c:	df000017 	ldw	fp,0(sp)
 4010820:	dec00204 	addi	sp,sp,8
 4010824:	f800283a 	ret

04010828 <alt_onchip_flash_read>:
    alt_flash_dev *flash_info,
    int           offset,
    void          *dest_addr,
    int           length
)
{
 4010828:	defff704 	addi	sp,sp,-36
 401082c:	dfc00815 	stw	ra,32(sp)
 4010830:	df000715 	stw	fp,28(sp)
 4010834:	df000704 	addi	fp,sp,28
 4010838:	e13ffc15 	stw	r4,-16(fp)
 401083c:	e17ffd15 	stw	r5,-12(fp)
 4010840:	e1bffe15 	stw	r6,-8(fp)
 4010844:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
 4010848:	e03ff915 	stw	zero,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
 401084c:	e0bffc17 	ldw	r2,-16(fp)
 4010850:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || ((offset+length) > flash->dev.length)) {
 4010854:	e0bffa17 	ldw	r2,-24(fp)
 4010858:	10800b17 	ldw	r2,44(r2)
 401085c:	e0fffd17 	ldw	r3,-12(fp)
 4010860:	1880060e 	bge	r3,r2,401087c <alt_onchip_flash_read+0x54>
 4010864:	e0fffd17 	ldw	r3,-12(fp)
 4010868:	e0bfff17 	ldw	r2,-4(fp)
 401086c:	1885883a 	add	r2,r3,r2
 4010870:	e0fffa17 	ldw	r3,-24(fp)
 4010874:	18c00b17 	ldw	r3,44(r3)
 4010878:	1880020e 	bge	r3,r2,4010884 <alt_onchip_flash_read+0x5c>
        return -EFAULT;
 401087c:	00bffc84 	movi	r2,-14
 4010880:	00001706 	br	40108e0 <alt_onchip_flash_read+0xb8>
    }
    
    memcpy(dest_addr, (alt_u8*)flash->dev.base_addr+offset, length);
 4010884:	e0bffa17 	ldw	r2,-24(fp)
 4010888:	10c00a17 	ldw	r3,40(r2)
 401088c:	e0bffd17 	ldw	r2,-12(fp)
 4010890:	1885883a 	add	r2,r3,r2
 4010894:	e0ffff17 	ldw	r3,-4(fp)
 4010898:	180d883a 	mov	r6,r3
 401089c:	100b883a 	mov	r5,r2
 40108a0:	e13ffe17 	ldw	r4,-8(fp)
 40108a4:	40064200 	call	4006420 <memcpy>

    if (NULL != flash->csr_base) {
 40108a8:	e0bffa17 	ldw	r2,-24(fp)
 40108ac:	10802f17 	ldw	r2,188(r2)
 40108b0:	10000a26 	beq	r2,zero,40108dc <alt_onchip_flash_read+0xb4>
        int read_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_READ_MSK;
 40108b4:	e0bffa17 	ldw	r2,-24(fp)
 40108b8:	10802f17 	ldw	r2,188(r2)
 40108bc:	10800037 	ldwio	r2,0(r2)
 40108c0:	1080010c 	andi	r2,r2,4
 40108c4:	e0bffb15 	stw	r2,-20(fp)
        if (read_status != ALTERA_ONCHIP_FLASH_STATUS_READ_PASSED) {
 40108c8:	e0bffb17 	ldw	r2,-20(fp)
 40108cc:	10800120 	cmpeqi	r2,r2,4
 40108d0:	1000021e 	bne	r2,zero,40108dc <alt_onchip_flash_read+0xb4>
            /* Read failed.  Return error.*/
            ret_code = -EIO;
 40108d4:	00bffec4 	movi	r2,-5
 40108d8:	e0bff915 	stw	r2,-28(fp)
        }
    }
    return ret_code;
 40108dc:	e0bff917 	ldw	r2,-28(fp)
}
 40108e0:	e037883a 	mov	sp,fp
 40108e4:	dfc00117 	ldw	ra,4(sp)
 40108e8:	df000017 	ldw	fp,0(sp)
 40108ec:	dec00204 	addi	sp,sp,8
 40108f0:	f800283a 	ret

040108f4 <alt_onchip_flash_get_info>:
(
    alt_flash_fd *fd,
    flash_region **info,
    int          *number_of_regions
)
{
 40108f4:	defffa04 	addi	sp,sp,-24
 40108f8:	df000515 	stw	fp,20(sp)
 40108fc:	df000504 	addi	fp,sp,20
 4010900:	e13ffd15 	stw	r4,-12(fp)
 4010904:	e17ffe15 	stw	r5,-8(fp)
 4010908:	e1bfff15 	stw	r6,-4(fp)
    int ret_code = 0;
 401090c:	e03ffb15 	stw	zero,-20(fp)

    alt_flash_dev* flash = (alt_flash_dev*)fd;
 4010910:	e0bffd17 	ldw	r2,-12(fp)
 4010914:	e0bffc15 	stw	r2,-16(fp)

    if (NULL != number_of_regions)
 4010918:	e0bfff17 	ldw	r2,-4(fp)
 401091c:	10000426 	beq	r2,zero,4010930 <alt_onchip_flash_get_info+0x3c>
    {
        /* Pass the number of region to user */
        *number_of_regions = flash->number_of_regions;
 4010920:	e0bffc17 	ldw	r2,-16(fp)
 4010924:	10c00c17 	ldw	r3,48(r2)
 4010928:	e0bfff17 	ldw	r2,-4(fp)
 401092c:	10c00015 	stw	r3,0(r2)
    }

    if (!flash->number_of_regions)
 4010930:	e0bffc17 	ldw	r2,-16(fp)
 4010934:	10800c17 	ldw	r2,48(r2)
 4010938:	1000031e 	bne	r2,zero,4010948 <alt_onchip_flash_get_info+0x54>
    {
        ret_code = -ENOMEM;
 401093c:	00bffd04 	movi	r2,-12
 4010940:	e0bffb15 	stw	r2,-20(fp)
 4010944:	00000d06 	br	401097c <alt_onchip_flash_get_info+0x88>
    }
    else if (flash->number_of_regions > ALT_MAX_NUMBER_OF_FLASH_REGIONS)
 4010948:	e0bffc17 	ldw	r2,-16(fp)
 401094c:	10800c17 	ldw	r2,48(r2)
 4010950:	10800250 	cmplti	r2,r2,9
 4010954:	1000031e 	bne	r2,zero,4010964 <alt_onchip_flash_get_info+0x70>
    {
        ret_code = -EFAULT;
 4010958:	00bffc84 	movi	r2,-14
 401095c:	e0bffb15 	stw	r2,-20(fp)
 4010960:	00000606 	br	401097c <alt_onchip_flash_get_info+0x88>
    }
    else
    {
        if (NULL != info)
 4010964:	e0bffe17 	ldw	r2,-8(fp)
 4010968:	10000426 	beq	r2,zero,401097c <alt_onchip_flash_get_info+0x88>
        {
            /* Pass the table of erase blocks to user */
            *info = &flash->region_info[0];
 401096c:	e0bffc17 	ldw	r2,-16(fp)
 4010970:	10c00d04 	addi	r3,r2,52
 4010974:	e0bffe17 	ldw	r2,-8(fp)
 4010978:	10c00015 	stw	r3,0(r2)
        }
    }

    return ret_code;
 401097c:	e0bffb17 	ldw	r2,-20(fp)
}
 4010980:	e037883a 	mov	sp,fp
 4010984:	df000017 	ldw	fp,0(sp)
 4010988:	dec00104 	addi	sp,sp,4
 401098c:	f800283a 	ret

04010990 <alt_onchip_flash_erase_block>:
int alt_onchip_flash_erase_block
(
    alt_flash_dev *flash_info,
    int           block_offset
)
{
 4010990:	defff904 	addi	sp,sp,-28
 4010994:	dfc00615 	stw	ra,24(sp)
 4010998:	df000515 	stw	fp,20(sp)
 401099c:	df000504 	addi	fp,sp,20
 40109a0:	e13ffe15 	stw	r4,-8(fp)
 40109a4:	e17fff15 	stw	r5,-4(fp)
    int ret_code = 0;
 40109a8:	e03ffb15 	stw	zero,-20(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
 40109ac:	e0bffe17 	ldw	r2,-8(fp)
 40109b0:	e0bffc15 	stw	r2,-16(fp)
    int page_address;

    /* Make sure the input parameters is not outside of this device's range. */
    if (block_offset >= flash->dev.length) {
 40109b4:	e0bffc17 	ldw	r2,-16(fp)
 40109b8:	10800b17 	ldw	r2,44(r2)
 40109bc:	e0ffff17 	ldw	r3,-4(fp)
 40109c0:	18800216 	blt	r3,r2,40109cc <alt_onchip_flash_erase_block+0x3c>
        return -EFAULT;
 40109c4:	00bffc84 	movi	r2,-14
 40109c8:	00004606 	br	4010ae4 <alt_onchip_flash_erase_block+0x154>
    }

    /* Make sure IP support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only)) {
 40109cc:	e0bffc17 	ldw	r2,-16(fp)
 40109d0:	10802f17 	ldw	r2,188(r2)
 40109d4:	10000326 	beq	r2,zero,40109e4 <alt_onchip_flash_erase_block+0x54>
 40109d8:	e0bffc17 	ldw	r2,-16(fp)
 40109dc:	10802e17 	ldw	r2,184(r2)
 40109e0:	10000226 	beq	r2,zero,40109ec <alt_onchip_flash_erase_block+0x5c>
        return -ENODEV;
 40109e4:	00bffb44 	movi	r2,-19
 40109e8:	00003e06 	br	4010ae4 <alt_onchip_flash_erase_block+0x154>
    }

    /* The block_offset must be page size aligned */
    if ((block_offset & (flash->page_size - 1)) != 0)
 40109ec:	e0bffc17 	ldw	r2,-16(fp)
 40109f0:	10803f17 	ldw	r2,252(r2)
 40109f4:	10ffffc4 	addi	r3,r2,-1
 40109f8:	e0bfff17 	ldw	r2,-4(fp)
 40109fc:	1884703a 	and	r2,r3,r2
 4010a00:	10000226 	beq	r2,zero,4010a0c <alt_onchip_flash_erase_block+0x7c>
    {
        /* The address is not aligned */
        return -EINVAL;
 4010a04:	00bffa84 	movi	r2,-22
 4010a08:	00003606 	br	4010ae4 <alt_onchip_flash_erase_block+0x154>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
 4010a0c:	e13ffc17 	ldw	r4,-16(fp)
 4010a10:	40115840 	call	4011584 <alt_onchip_flash_poll_for_status_to_go_idle>
 4010a14:	e0bffb15 	stw	r2,-20(fp)
    if (ret_code != 0)
 4010a18:	e0bffb17 	ldw	r2,-20(fp)
 4010a1c:	10000226 	beq	r2,zero,4010a28 <alt_onchip_flash_erase_block+0x98>
    {
        return ret_code;
 4010a20:	e0bffb17 	ldw	r2,-20(fp)
 4010a24:	00002f06 	br	4010ae4 <alt_onchip_flash_erase_block+0x154>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 4010a28:	e0bffc17 	ldw	r2,-16(fp)
 4010a2c:	10802f17 	ldw	r2,188(r2)
 4010a30:	10c00104 	addi	r3,r2,4
 4010a34:	e0bffc17 	ldw	r2,-16(fp)
 4010a38:	10802f17 	ldw	r2,188(r2)
 4010a3c:	10800104 	addi	r2,r2,4
 4010a40:	10800037 	ldwio	r2,0(r2)
 4010a44:	113c002c 	andhi	r4,r2,61440
 4010a48:	00802034 	movhi	r2,128
 4010a4c:	10bfffc4 	addi	r2,r2,-1
 4010a50:	2084b03a 	or	r2,r4,r2
 4010a54:	18800035 	stwio	r2,0(r3)

    /* Calculate Page erase address, it is 32bit word addressing*/
    page_address = block_offset / 4;
 4010a58:	e0bfff17 	ldw	r2,-4(fp)
 4010a5c:	1000010e 	bge	r2,zero,4010a64 <alt_onchip_flash_erase_block+0xd4>
 4010a60:	108000c4 	addi	r2,r2,3
 4010a64:	1005d0ba 	srai	r2,r2,2
 4010a68:	e0bffd15 	stw	r2,-12(fp)

    /* Perform Page erase operation */
    ALTERA_ONCHIP_FLASH_PAGE_ERASE(flash->csr_base, page_address);
 4010a6c:	e0bffc17 	ldw	r2,-16(fp)
 4010a70:	10802f17 	ldw	r2,188(r2)
 4010a74:	10800104 	addi	r2,r2,4
 4010a78:	e0fffc17 	ldw	r3,-16(fp)
 4010a7c:	18c02f17 	ldw	r3,188(r3)
 4010a80:	18c00104 	addi	r3,r3,4
 4010a84:	18c00037 	ldwio	r3,0(r3)
 4010a88:	193c002c 	andhi	r4,r3,61440
 4010a8c:	e0fffd17 	ldw	r3,-12(fp)
 4010a90:	18c01c34 	orhi	r3,r3,112
 4010a94:	20c6b03a 	or	r3,r4,r3
 4010a98:	10c00035 	stwio	r3,0(r2)

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
 4010a9c:	e13ffc17 	ldw	r4,-16(fp)
 4010aa0:	40115840 	call	4011584 <alt_onchip_flash_poll_for_status_to_go_idle>
 4010aa4:	e0bffb15 	stw	r2,-20(fp)

    /* Wait until flash controller indicate erase passed */
    ret_code = alt_onchip_flash_poll_for_status_erase_passed(flash);
 4010aa8:	e13ffc17 	ldw	r4,-16(fp)
 4010aac:	40116140 	call	4011614 <alt_onchip_flash_poll_for_status_erase_passed>
 4010ab0:	e0bffb15 	stw	r2,-20(fp)

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 4010ab4:	e0bffc17 	ldw	r2,-16(fp)
 4010ab8:	10802f17 	ldw	r2,188(r2)
 4010abc:	10c00104 	addi	r3,r2,4
 4010ac0:	e0bffc17 	ldw	r2,-16(fp)
 4010ac4:	10802f17 	ldw	r2,188(r2)
 4010ac8:	10800104 	addi	r2,r2,4
 4010acc:	11000037 	ldwio	r4,0(r2)
 4010ad0:	00840034 	movhi	r2,4096
 4010ad4:	10bfffc4 	addi	r2,r2,-1
 4010ad8:	2084b03a 	or	r2,r4,r2
 4010adc:	18800035 	stwio	r2,0(r3)

    return ret_code;
 4010ae0:	e0bffb17 	ldw	r2,-20(fp)
}
 4010ae4:	e037883a 	mov	sp,fp
 4010ae8:	dfc00117 	ldw	ra,4(sp)
 4010aec:	df000017 	ldw	fp,0(sp)
 4010af0:	dec00204 	addi	sp,sp,8
 4010af4:	f800283a 	ret

04010af8 <alt_onchip_flash_write_block>:
    int           block_offset,
    int           data_offset,
    const void    *data,
    int           length
)
{
 4010af8:	defff204 	addi	sp,sp,-56
 4010afc:	dfc00d15 	stw	ra,52(sp)
 4010b00:	df000c15 	stw	fp,48(sp)
 4010b04:	df000c04 	addi	fp,sp,48
 4010b08:	e13ffc15 	stw	r4,-16(fp)
 4010b0c:	e17ffd15 	stw	r5,-12(fp)
 4010b10:	e1bffe15 	stw	r6,-8(fp)
 4010b14:	e1ffff15 	stw	r7,-4(fp)
    int ret_code = 0;
 4010b18:	e03ff415 	stw	zero,-48(fp)
    alt_onchip_flash_dev *flash = (alt_onchip_flash_dev*)flash_info;
 4010b1c:	e0bffc17 	ldw	r2,-16(fp)
 4010b20:	e0bff815 	stw	r2,-32(fp)
    int buffer_offset = 0;
 4010b24:	e03ff515 	stw	zero,-44(fp)
    int length_of_current_write;
    int current_data_offset = data_offset;
 4010b28:	e0bffe17 	ldw	r2,-8(fp)
 4010b2c:	e0bff615 	stw	r2,-40(fp)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
 4010b30:	e0bff817 	ldw	r2,-32(fp)
 4010b34:	10800b17 	ldw	r2,44(r2)
    int current_data_offset = data_offset;
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
 4010b38:	e0fffd17 	ldw	r3,-12(fp)
 4010b3c:	18800a0e 	bge	r3,r2,4010b68 <alt_onchip_flash_write_block+0x70>
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
 4010b40:	e0bff817 	ldw	r2,-32(fp)
 4010b44:	10800b17 	ldw	r2,44(r2)
    int next_data_offset;
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
 4010b48:	e0fffe17 	ldw	r3,-8(fp)
 4010b4c:	1880060e 	bge	r3,r2,4010b68 <alt_onchip_flash_write_block+0x70>
        (data_offset >= flash->dev.length) ||
        (length > (flash->dev.length - data_offset))
 4010b50:	e0bff817 	ldw	r2,-32(fp)
 4010b54:	10c00b17 	ldw	r3,44(r2)
 4010b58:	e0bffe17 	ldw	r2,-8(fp)
 4010b5c:	1887c83a 	sub	r3,r3,r2
    alt_u32 chunk_of_data;

    /* Make sure the input parameters is not outside of this device's range. */
    if (
        (block_offset >= flash->dev.length) ||
        (data_offset >= flash->dev.length) ||
 4010b60:	e0800217 	ldw	r2,8(fp)
 4010b64:	1880020e 	bge	r3,r2,4010b70 <alt_onchip_flash_write_block+0x78>
        (length > (flash->dev.length - data_offset))
    ) {
        return -EFAULT;
 4010b68:	00bffc84 	movi	r2,-14
 4010b6c:	00009306 	br	4010dbc <alt_onchip_flash_write_block+0x2c4>
    }

    /* Make sure IP support support write and erase operation */
    if ((flash->csr_base == NULL) || (flash->is_read_only != 0)) {
 4010b70:	e0bff817 	ldw	r2,-32(fp)
 4010b74:	10802f17 	ldw	r2,188(r2)
 4010b78:	10000326 	beq	r2,zero,4010b88 <alt_onchip_flash_write_block+0x90>
 4010b7c:	e0bff817 	ldw	r2,-32(fp)
 4010b80:	10802e17 	ldw	r2,184(r2)
 4010b84:	10000226 	beq	r2,zero,4010b90 <alt_onchip_flash_write_block+0x98>
        return -ENODEV;
 4010b88:	00bffb44 	movi	r2,-19
 4010b8c:	00008b06 	br	4010dbc <alt_onchip_flash_write_block+0x2c4>
    }

    /* Wait until flash controller idle */
    ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
 4010b90:	e13ff817 	ldw	r4,-32(fp)
 4010b94:	40115840 	call	4011584 <alt_onchip_flash_poll_for_status_to_go_idle>
 4010b98:	e0bff415 	stw	r2,-48(fp)
    if (ret_code != 0)
 4010b9c:	e0bff417 	ldw	r2,-48(fp)
 4010ba0:	10000226 	beq	r2,zero,4010bac <alt_onchip_flash_write_block+0xb4>
    {
        return ret_code;
 4010ba4:	e0bff417 	ldw	r2,-48(fp)
 4010ba8:	00008406 	br	4010dbc <alt_onchip_flash_write_block+0x2c4>
    }

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 4010bac:	e0bff817 	ldw	r2,-32(fp)
 4010bb0:	10802f17 	ldw	r2,188(r2)
 4010bb4:	10c00104 	addi	r3,r2,4
 4010bb8:	e0bff817 	ldw	r2,-32(fp)
 4010bbc:	10802f17 	ldw	r2,188(r2)
 4010bc0:	10800104 	addi	r2,r2,4
 4010bc4:	10800037 	ldwio	r2,0(r2)
 4010bc8:	113c002c 	andhi	r4,r2,61440
 4010bcc:	00802034 	movhi	r2,128
 4010bd0:	10bfffc4 	addi	r2,r2,-1
 4010bd4:	2084b03a 	or	r2,r4,r2
 4010bd8:	18800035 	stwio	r2,0(r3)

    /* Check data length */
    while (length)
 4010bdc:	00006506 	br	4010d74 <alt_onchip_flash_write_block+0x27c>
    {
        /* Minimum write size to onchip flash is 32 bits of data */
        chunk_of_data = 0xFFFFFFFF;
 4010be0:	00bfffc4 	movi	r2,-1
 4010be4:	e0bffb15 	stw	r2,-20(fp)

        /* The start of data_offset must be 4 bytes (32 bits) aligned */
        if ((current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1)) == 0)
 4010be8:	e0bff617 	ldw	r2,-40(fp)
 4010bec:	108000cc 	andi	r2,r2,3
 4010bf0:	10001e1e 	bne	r2,zero,4010c6c <alt_onchip_flash_write_block+0x174>
        {
            /* The address is 4-byte aligned here */
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 4010bf4:	e0bff617 	ldw	r2,-40(fp)
 4010bf8:	10c00104 	addi	r3,r2,4
 4010bfc:	00bfff04 	movi	r2,-4
 4010c00:	1884703a 	and	r2,r3,r2
 4010c04:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length, next_data_offset - current_data_offset);
 4010c08:	e0fff717 	ldw	r3,-36(fp)
 4010c0c:	e0bff617 	ldw	r2,-40(fp)
 4010c10:	1885c83a 	sub	r2,r3,r2
 4010c14:	e0c00217 	ldw	r3,8(fp)
 4010c18:	1880010e 	bge	r3,r2,4010c20 <alt_onchip_flash_write_block+0x128>
 4010c1c:	1805883a 	mov	r2,r3
 4010c20:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy(&chunk_of_data, &((alt_u8*)data)[buffer_offset], length_of_current_write);
 4010c24:	e0bff517 	ldw	r2,-44(fp)
 4010c28:	e0ffff17 	ldw	r3,-4(fp)
 4010c2c:	1887883a 	add	r3,r3,r2
 4010c30:	e13ff917 	ldw	r4,-28(fp)
 4010c34:	e0bffb04 	addi	r2,fp,-20
 4010c38:	200d883a 	mov	r6,r4
 4010c3c:	180b883a 	mov	r5,r3
 4010c40:	1009883a 	mov	r4,r2
 4010c44:	40064200 	call	4006420 <memcpy>
            buffer_offset += length_of_current_write;
 4010c48:	e0fff517 	ldw	r3,-44(fp)
 4010c4c:	e0bff917 	ldw	r2,-28(fp)
 4010c50:	1885883a 	add	r2,r3,r2
 4010c54:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write;
 4010c58:	e0c00217 	ldw	r3,8(fp)
 4010c5c:	e0bff917 	ldw	r2,-28(fp)
 4010c60:	1885c83a 	sub	r2,r3,r2
 4010c64:	e0800215 	stw	r2,8(fp)
 4010c68:	00003006 	br	4010d2c <alt_onchip_flash_write_block+0x234>
        } else {
            /* Calculate how many padding bytes need to be added before the start of a data offset */
            int padding = current_data_offset & (ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 4010c6c:	e0bff617 	ldw	r2,-40(fp)
 4010c70:	108000cc 	andi	r2,r2,3
 4010c74:	e0bffa15 	stw	r2,-24(fp)

            /* Calculate new 4-byte aligned data offset */
            current_data_offset = current_data_offset - padding;
 4010c78:	e0fff617 	ldw	r3,-40(fp)
 4010c7c:	e0bffa17 	ldw	r2,-24(fp)
 4010c80:	1885c83a 	sub	r2,r3,r2
 4010c84:	e0bff615 	stw	r2,-40(fp)
            next_data_offset = (current_data_offset + ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE) & ~(ALTERA_ONCHIP_FLASH_DATA_ALIGN_SIZE - 1);
 4010c88:	e0bff617 	ldw	r2,-40(fp)
 4010c8c:	10c00104 	addi	r3,r2,4
 4010c90:	00bfff04 	movi	r2,-4
 4010c94:	1884703a 	and	r2,r3,r2
 4010c98:	e0bff715 	stw	r2,-36(fp)
            length_of_current_write = MIN(length + padding, next_data_offset - current_data_offset);
 4010c9c:	e0fff717 	ldw	r3,-36(fp)
 4010ca0:	e0bff617 	ldw	r2,-40(fp)
 4010ca4:	1889c83a 	sub	r4,r3,r2
 4010ca8:	e0c00217 	ldw	r3,8(fp)
 4010cac:	e0bffa17 	ldw	r2,-24(fp)
 4010cb0:	1887883a 	add	r3,r3,r2
 4010cb4:	2005883a 	mov	r2,r4
 4010cb8:	1880010e 	bge	r3,r2,4010cc0 <alt_onchip_flash_write_block+0x1c8>
 4010cbc:	1805883a 	mov	r2,r3
 4010cc0:	e0bff915 	stw	r2,-28(fp)
            /* Prepare the 4 bytes chunk of data to be written */
            memcpy((void *)(((int)&chunk_of_data) + (int)padding), &((alt_u8*)data)[buffer_offset], length_of_current_write - padding);
 4010cc4:	e0fffb04 	addi	r3,fp,-20
 4010cc8:	e0bffa17 	ldw	r2,-24(fp)
 4010ccc:	1885883a 	add	r2,r3,r2
 4010cd0:	100f883a 	mov	r7,r2
 4010cd4:	e0bff517 	ldw	r2,-44(fp)
 4010cd8:	e0ffff17 	ldw	r3,-4(fp)
 4010cdc:	1889883a 	add	r4,r3,r2
 4010ce0:	e0fff917 	ldw	r3,-28(fp)
 4010ce4:	e0bffa17 	ldw	r2,-24(fp)
 4010ce8:	1885c83a 	sub	r2,r3,r2
 4010cec:	100d883a 	mov	r6,r2
 4010cf0:	200b883a 	mov	r5,r4
 4010cf4:	3809883a 	mov	r4,r7
 4010cf8:	40064200 	call	4006420 <memcpy>
            buffer_offset += length_of_current_write - padding;
 4010cfc:	e0fff917 	ldw	r3,-28(fp)
 4010d00:	e0bffa17 	ldw	r2,-24(fp)
 4010d04:	1885c83a 	sub	r2,r3,r2
 4010d08:	e0fff517 	ldw	r3,-44(fp)
 4010d0c:	1885883a 	add	r2,r3,r2
 4010d10:	e0bff515 	stw	r2,-44(fp)
            length -= length_of_current_write - padding;
 4010d14:	e0fff917 	ldw	r3,-28(fp)
 4010d18:	e0bffa17 	ldw	r2,-24(fp)
 4010d1c:	1885c83a 	sub	r2,r3,r2
 4010d20:	e0c00217 	ldw	r3,8(fp)
 4010d24:	1885c83a 	sub	r2,r3,r2
 4010d28:	e0800215 	stw	r2,8(fp)
        }

        /* Writing to flash via IO 32 bits at a time */
        IOWR_32DIRECT(flash->dev.base_addr, current_data_offset, chunk_of_data);
 4010d2c:	e0bff817 	ldw	r2,-32(fp)
 4010d30:	10c00a17 	ldw	r3,40(r2)
 4010d34:	e0bff617 	ldw	r2,-40(fp)
 4010d38:	1885883a 	add	r2,r3,r2
 4010d3c:	e0fffb17 	ldw	r3,-20(fp)
 4010d40:	10c00035 	stwio	r3,0(r2)

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
 4010d44:	e13ff817 	ldw	r4,-32(fp)
 4010d48:	40115840 	call	4011584 <alt_onchip_flash_poll_for_status_to_go_idle>
 4010d4c:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
 4010d50:	e0bff417 	ldw	r2,-48(fp)
 4010d54:	10000a1e 	bne	r2,zero,4010d80 <alt_onchip_flash_write_block+0x288>
        {
            break;
        }

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
 4010d58:	e13ff817 	ldw	r4,-32(fp)
 4010d5c:	40116a40 	call	40116a4 <alt_onchip_flash_poll_for_status_write_passed>
 4010d60:	e0bff415 	stw	r2,-48(fp)
        if (ret_code != 0)
 4010d64:	e0bff417 	ldw	r2,-48(fp)
 4010d68:	1000071e 	bne	r2,zero,4010d88 <alt_onchip_flash_write_block+0x290>
        {
            break;
        }

        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
 4010d6c:	e0bff717 	ldw	r2,-36(fp)
 4010d70:	e0bff615 	stw	r2,-40(fp)

    /* Enable write and erase operation */
    ALTERA_ONCHIP_FLASH_ENABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);

    /* Check data length */
    while (length)
 4010d74:	e0800217 	ldw	r2,8(fp)
 4010d78:	103f991e 	bne	r2,zero,4010be0 <__alt_data_end+0xfc010be0>
 4010d7c:	00000306 	br	4010d8c <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller idle */
        ret_code = alt_onchip_flash_poll_for_status_to_go_idle(flash);
        if (ret_code != 0)
        {
            break;
 4010d80:	0001883a 	nop
 4010d84:	00000106 	br	4010d8c <alt_onchip_flash_write_block+0x294>

        /* Wait until flash controller indicate write passed */
        ret_code = alt_onchip_flash_poll_for_status_write_passed(flash);
        if (ret_code != 0)
        {
            break;
 4010d88:	0001883a 	nop
        /* Prepare to write next 4 bytes */
        current_data_offset = next_data_offset;
    }

    /* Disable write and erase operation */
    ALTERA_ONCHIP_FLASH_DISABLE_WRITE_AND_ERASE_OPERATION(flash->csr_base);
 4010d8c:	e0bff817 	ldw	r2,-32(fp)
 4010d90:	10802f17 	ldw	r2,188(r2)
 4010d94:	10c00104 	addi	r3,r2,4
 4010d98:	e0bff817 	ldw	r2,-32(fp)
 4010d9c:	10802f17 	ldw	r2,188(r2)
 4010da0:	10800104 	addi	r2,r2,4
 4010da4:	11000037 	ldwio	r4,0(r2)
 4010da8:	00840034 	movhi	r2,4096
 4010dac:	10bfffc4 	addi	r2,r2,-1
 4010db0:	2084b03a 	or	r2,r4,r2
 4010db4:	18800035 	stwio	r2,0(r3)

    return ret_code;
 4010db8:	e0bff417 	ldw	r2,-48(fp)
}
 4010dbc:	e037883a 	mov	sp,fp
 4010dc0:	dfc00117 	ldw	ra,4(sp)
 4010dc4:	df000017 	ldw	fp,0(sp)
 4010dc8:	dec00204 	addi	sp,sp,8
 4010dcc:	f800283a 	ret

04010dd0 <alt_onchip_flash_write>:
    alt_flash_dev *flash_info,
    int           offset,
    const void    *src_addr,
    int           length
)
{
 4010dd0:	defff104 	addi	sp,sp,-60
 4010dd4:	dfc00e15 	stw	ra,56(sp)
 4010dd8:	df000d15 	stw	fp,52(sp)
 4010ddc:	df000d04 	addi	fp,sp,52
 4010de0:	e13ffc15 	stw	r4,-16(fp)
 4010de4:	e17ffd15 	stw	r5,-12(fp)
 4010de8:	e1bffe15 	stw	r6,-8(fp)
 4010dec:	e1ffff15 	stw	r7,-4(fp)
    int         ret_code = 0;
 4010df0:	e03ff415 	stw	zero,-48(fp)
    int         i,j;
    int         data_to_write;
    int         current_offset;
    int         full_length = length;
 4010df4:	e0bfff17 	ldw	r2,-4(fp)
 4010df8:	e0bff815 	stw	r2,-32(fp)
    int         start_offset = offset;
 4010dfc:	e0bffd17 	ldw	r2,-12(fp)
 4010e00:	e0bff915 	stw	r2,-28(fp)
    alt_onchip_flash_dev* flash = (alt_onchip_flash_dev*)flash_info;
 4010e04:	e0bffc17 	ldw	r2,-16(fp)
 4010e08:	e0bffa15 	stw	r2,-24(fp)

    /* Make sure the input parameters is not outside of this device's range. */
    if ((offset >= flash->dev.length) || (length > (flash->dev.length - offset)))
 4010e0c:	e0bffa17 	ldw	r2,-24(fp)
 4010e10:	10800b17 	ldw	r2,44(r2)
 4010e14:	e0fffd17 	ldw	r3,-12(fp)
 4010e18:	1880060e 	bge	r3,r2,4010e34 <alt_onchip_flash_write+0x64>
 4010e1c:	e0bffa17 	ldw	r2,-24(fp)
 4010e20:	10c00b17 	ldw	r3,44(r2)
 4010e24:	e0bffd17 	ldw	r2,-12(fp)
 4010e28:	1887c83a 	sub	r3,r3,r2
 4010e2c:	e0bfff17 	ldw	r2,-4(fp)
 4010e30:	1880020e 	bge	r3,r2,4010e3c <alt_onchip_flash_write+0x6c>
    {
        return -EFAULT;
 4010e34:	00bffc84 	movi	r2,-14
 4010e38:	00009606 	br	4011094 <alt_onchip_flash_write+0x2c4>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
 4010e3c:	e03ff515 	stw	zero,-44(fp)
 4010e40:	00008706 	br	4011060 <alt_onchip_flash_write+0x290>
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
 4010e44:	e0fffa17 	ldw	r3,-24(fp)
 4010e48:	e0bff517 	ldw	r2,-44(fp)
 4010e4c:	1004913a 	slli	r2,r2,4
 4010e50:	1885883a 	add	r2,r3,r2
 4010e54:	10800d04 	addi	r2,r2,52
 4010e58:	10800017 	ldw	r2,0(r2)
 4010e5c:	e0fffd17 	ldw	r3,-12(fp)
 4010e60:	18807c16 	blt	r3,r2,4011054 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
 4010e64:	e0fffa17 	ldw	r3,-24(fp)
 4010e68:	e0bff517 	ldw	r2,-44(fp)
 4010e6c:	1004913a 	slli	r2,r2,4
 4010e70:	1885883a 	add	r2,r3,r2
 4010e74:	10800d04 	addi	r2,r2,52
 4010e78:	10c00017 	ldw	r3,0(r2)
            flash->dev.region_info[i].region_size)))
 4010e7c:	e13ffa17 	ldw	r4,-24(fp)
 4010e80:	e0bff517 	ldw	r2,-44(fp)
 4010e84:	1004913a 	slli	r2,r2,4
 4010e88:	2085883a 	add	r2,r4,r2
 4010e8c:	10800e04 	addi	r2,r2,56
 4010e90:	10800017 	ldw	r2,0(r2)
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
            (offset < (flash->dev.region_info[i].offset +
 4010e94:	1885883a 	add	r2,r3,r2
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
    {
        /* Is it in this erase block region?*/
        if((offset >= flash->dev.region_info[i].offset) &&
 4010e98:	e0fffd17 	ldw	r3,-12(fp)
 4010e9c:	18806d0e 	bge	r3,r2,4011054 <alt_onchip_flash_write+0x284>
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;
 4010ea0:	e0fffa17 	ldw	r3,-24(fp)
 4010ea4:	e0bff517 	ldw	r2,-44(fp)
 4010ea8:	1004913a 	slli	r2,r2,4
 4010eac:	1885883a 	add	r2,r3,r2
 4010eb0:	10800d04 	addi	r2,r2,52
 4010eb4:	10800017 	ldw	r2,0(r2)
 4010eb8:	e0bff715 	stw	r2,-36(fp)

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
 4010ebc:	e03ff615 	stw	zero,-40(fp)
 4010ec0:	00005c06 	br	4011034 <alt_onchip_flash_write+0x264>
            {
                if ((offset >= current_offset ) &&
 4010ec4:	e0fffd17 	ldw	r3,-12(fp)
 4010ec8:	e0bff717 	ldw	r2,-36(fp)
 4010ecc:	18804d16 	blt	r3,r2,4011004 <alt_onchip_flash_write+0x234>
                    (offset < (current_offset +
                    flash->dev.region_info[i].block_size)))
 4010ed0:	e0fffa17 	ldw	r3,-24(fp)
 4010ed4:	e0bff517 	ldw	r2,-44(fp)
 4010ed8:	10800104 	addi	r2,r2,4
 4010edc:	1004913a 	slli	r2,r2,4
 4010ee0:	1885883a 	add	r2,r3,r2
 4010ee4:	10c00017 	ldw	r3,0(r2)
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
                    (offset < (current_offset +
 4010ee8:	e0bff717 	ldw	r2,-36(fp)
 4010eec:	1885883a 	add	r2,r3,r2
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
            {
                if ((offset >= current_offset ) &&
 4010ef0:	e0fffd17 	ldw	r3,-12(fp)
 4010ef4:	1880430e 	bge	r3,r2,4011004 <alt_onchip_flash_write+0x234>
                {
                    /*
                    * Check if the contents of the block are different
                    * from the data we wish to put there
                    */
                    data_to_write = (current_offset + flash->dev.region_info[i].block_size - offset);
 4010ef8:	e0fffa17 	ldw	r3,-24(fp)
 4010efc:	e0bff517 	ldw	r2,-44(fp)
 4010f00:	10800104 	addi	r2,r2,4
 4010f04:	1004913a 	slli	r2,r2,4
 4010f08:	1885883a 	add	r2,r3,r2
 4010f0c:	10c00017 	ldw	r3,0(r2)
 4010f10:	e0bff717 	ldw	r2,-36(fp)
 4010f14:	1887883a 	add	r3,r3,r2
 4010f18:	e0bffd17 	ldw	r2,-12(fp)
 4010f1c:	1885c83a 	sub	r2,r3,r2
 4010f20:	e0bffb15 	stw	r2,-20(fp)
                    data_to_write = MIN(data_to_write, length);
 4010f24:	e0fffb17 	ldw	r3,-20(fp)
 4010f28:	e0bfff17 	ldw	r2,-4(fp)
 4010f2c:	1880010e 	bge	r3,r2,4010f34 <alt_onchip_flash_write+0x164>
 4010f30:	1805883a 	mov	r2,r3
 4010f34:	e0bffb15 	stw	r2,-20(fp)
                    if(memcmp(src_addr, (alt_u8*)flash->dev.base_addr+offset, data_to_write))
 4010f38:	e0bffa17 	ldw	r2,-24(fp)
 4010f3c:	10c00a17 	ldw	r3,40(r2)
 4010f40:	e0bffd17 	ldw	r2,-12(fp)
 4010f44:	1885883a 	add	r2,r3,r2
 4010f48:	e0fffb17 	ldw	r3,-20(fp)
 4010f4c:	180d883a 	mov	r6,r3
 4010f50:	100b883a 	mov	r5,r2
 4010f54:	e13ffe17 	ldw	r4,-8(fp)
 4010f58:	40129900 	call	4012990 <memcmp>
 4010f5c:	10001326 	beq	r2,zero,4010fac <alt_onchip_flash_write+0x1dc>
                    {
                        ret_code = (*flash->dev.erase_block)(&flash->dev, current_offset);
 4010f60:	e0bffa17 	ldw	r2,-24(fp)
 4010f64:	10800817 	ldw	r2,32(r2)
 4010f68:	e0fffa17 	ldw	r3,-24(fp)
 4010f6c:	e17ff717 	ldw	r5,-36(fp)
 4010f70:	1809883a 	mov	r4,r3
 4010f74:	103ee83a 	callr	r2
 4010f78:	e0bff415 	stw	r2,-48(fp)

                        if (!ret_code)
 4010f7c:	e0bff417 	ldw	r2,-48(fp)
 4010f80:	10000a1e 	bne	r2,zero,4010fac <alt_onchip_flash_write+0x1dc>
                        {
                            ret_code = (*flash->dev.write_block)(
 4010f84:	e0bffa17 	ldw	r2,-24(fp)
 4010f88:	10800917 	ldw	r2,36(r2)
 4010f8c:	e13ffa17 	ldw	r4,-24(fp)
 4010f90:	e0fffb17 	ldw	r3,-20(fp)
 4010f94:	d8c00015 	stw	r3,0(sp)
 4010f98:	e1fffe17 	ldw	r7,-8(fp)
 4010f9c:	e1bffd17 	ldw	r6,-12(fp)
 4010fa0:	e17ff717 	ldw	r5,-36(fp)
 4010fa4:	103ee83a 	callr	r2
 4010fa8:	e0bff415 	stw	r2,-48(fp)
                                                                data_to_write);
                        }
                    }

                    /* Was this the last block? */
                    if ((length == data_to_write) || ret_code)
 4010fac:	e0ffff17 	ldw	r3,-4(fp)
 4010fb0:	e0bffb17 	ldw	r2,-20(fp)
 4010fb4:	18802e26 	beq	r3,r2,4011070 <alt_onchip_flash_write+0x2a0>
 4010fb8:	e0bff417 	ldw	r2,-48(fp)
 4010fbc:	10002c1e 	bne	r2,zero,4011070 <alt_onchip_flash_write+0x2a0>
                    {
                        goto finished;
                    }

                    length -= data_to_write;
 4010fc0:	e0ffff17 	ldw	r3,-4(fp)
 4010fc4:	e0bffb17 	ldw	r2,-20(fp)
 4010fc8:	1885c83a 	sub	r2,r3,r2
 4010fcc:	e0bfff15 	stw	r2,-4(fp)
                    offset = current_offset + flash->dev.region_info[i].block_size;
 4010fd0:	e0fffa17 	ldw	r3,-24(fp)
 4010fd4:	e0bff517 	ldw	r2,-44(fp)
 4010fd8:	10800104 	addi	r2,r2,4
 4010fdc:	1004913a 	slli	r2,r2,4
 4010fe0:	1885883a 	add	r2,r3,r2
 4010fe4:	10c00017 	ldw	r3,0(r2)
 4010fe8:	e0bff717 	ldw	r2,-36(fp)
 4010fec:	1885883a 	add	r2,r3,r2
 4010ff0:	e0bffd15 	stw	r2,-12(fp)
                    src_addr = (alt_u8*)src_addr + data_to_write;
 4010ff4:	e0bffb17 	ldw	r2,-20(fp)
 4010ff8:	e0fffe17 	ldw	r3,-8(fp)
 4010ffc:	1885883a 	add	r2,r3,r2
 4011000:	e0bffe15 	stw	r2,-8(fp)
                }
                current_offset += flash->dev.region_info[i].block_size;
 4011004:	e0fffa17 	ldw	r3,-24(fp)
 4011008:	e0bff517 	ldw	r2,-44(fp)
 401100c:	10800104 	addi	r2,r2,4
 4011010:	1004913a 	slli	r2,r2,4
 4011014:	1885883a 	add	r2,r3,r2
 4011018:	10800017 	ldw	r2,0(r2)
 401101c:	e0fff717 	ldw	r3,-36(fp)
 4011020:	1885883a 	add	r2,r3,r2
 4011024:	e0bff715 	stw	r2,-36(fp)
            (offset < (flash->dev.region_info[i].offset +
            flash->dev.region_info[i].region_size)))
        {
            current_offset = flash->dev.region_info[i].offset;

            for(j=0;j<flash->dev.region_info[i].number_of_blocks;j++)
 4011028:	e0bff617 	ldw	r2,-40(fp)
 401102c:	10800044 	addi	r2,r2,1
 4011030:	e0bff615 	stw	r2,-40(fp)
 4011034:	e0fffa17 	ldw	r3,-24(fp)
 4011038:	e0bff517 	ldw	r2,-44(fp)
 401103c:	1004913a 	slli	r2,r2,4
 4011040:	1885883a 	add	r2,r3,r2
 4011044:	10800f04 	addi	r2,r2,60
 4011048:	10800017 	ldw	r2,0(r2)
 401104c:	e0fff617 	ldw	r3,-40(fp)
 4011050:	18bf9c16 	blt	r3,r2,4010ec4 <__alt_data_end+0xfc010ec4>
    }

    /*
    * First and foremost which sectors are affected?
    */
    for(i=0;i<flash->dev.number_of_regions;i++)
 4011054:	e0bff517 	ldw	r2,-44(fp)
 4011058:	10800044 	addi	r2,r2,1
 401105c:	e0bff515 	stw	r2,-44(fp)
 4011060:	e0bffa17 	ldw	r2,-24(fp)
 4011064:	10800c17 	ldw	r2,48(r2)
 4011068:	e0fff517 	ldw	r3,-44(fp)
 401106c:	18bf7516 	blt	r3,r2,4010e44 <__alt_data_end+0xfc010e44>
            }
        }
    }

finished:
    alt_dcache_flush((alt_u8*)flash->dev.base_addr+start_offset, full_length);
 4011070:	e0bffa17 	ldw	r2,-24(fp)
 4011074:	10c00a17 	ldw	r3,40(r2)
 4011078:	e0bff917 	ldw	r2,-28(fp)
 401107c:	1885883a 	add	r2,r3,r2
 4011080:	e0fff817 	ldw	r3,-32(fp)
 4011084:	180b883a 	mov	r5,r3
 4011088:	1009883a 	mov	r4,r2
 401108c:	4011acc0 	call	4011acc <alt_dcache_flush>
    return ret_code;
 4011090:	e0bff417 	ldw	r2,-48(fp)
}
 4011094:	e037883a 	mov	sp,fp
 4011098:	dfc00117 	ldw	ra,4(sp)
 401109c:	df000017 	ldw	fp,0(sp)
 40110a0:	dec00204 	addi	sp,sp,8
 40110a4:	f800283a 	ret

040110a8 <altera_onchip_flash_init>:
**/
void altera_onchip_flash_init
(
    alt_onchip_flash_dev *flash
)
{
 40110a8:	defff504 	addi	sp,sp,-44
 40110ac:	dfc00a15 	stw	ra,40(sp)
 40110b0:	df000915 	stw	fp,36(sp)
 40110b4:	dc000815 	stw	r16,32(sp)
 40110b8:	df000904 	addi	fp,sp,36
 40110bc:	e13ffe15 	stw	r4,-8(fp)
    /* A region is a sector of the onchip flash */
    int number_of_regions;
    flash_region* region_info;
    int sector1_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_AVAILABLE;
 40110c0:	e03ff815 	stw	zero,-32(fp)
    int sector2_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_AVAILABLE;
 40110c4:	e03ff915 	stw	zero,-28(fp)
    int sector3_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_AVAILABLE;
 40110c8:	e03ffa15 	stw	zero,-24(fp)
    int sector4_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_AVAILABLE;
 40110cc:	e03ffb15 	stw	zero,-20(fp)
    int sector5_status = ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_AVAILABLE;
 40110d0:	e03ffc15 	stw	zero,-16(fp)

    /* Set up flash_region data structures. */
    number_of_regions = 0;
 40110d4:	e03ff715 	stw	zero,-36(fp)
    region_info = &flash->dev.region_info[0];
 40110d8:	e0bffe17 	ldw	r2,-8(fp)
 40110dc:	10800d04 	addi	r2,r2,52
 40110e0:	e0bffd15 	stw	r2,-12(fp)

    if (flash->csr_base != NULL) {
 40110e4:	e0bffe17 	ldw	r2,-8(fp)
 40110e8:	10802f17 	ldw	r2,188(r2)
 40110ec:	10001926 	beq	r2,zero,4011154 <altera_onchip_flash_init+0xac>
        sector1_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_MSK;
 40110f0:	e0bffe17 	ldw	r2,-8(fp)
 40110f4:	10802f17 	ldw	r2,188(r2)
 40110f8:	10800037 	ldwio	r2,0(r2)
 40110fc:	1080080c 	andi	r2,r2,32
 4011100:	e0bff815 	stw	r2,-32(fp)
        sector2_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_MSK;
 4011104:	e0bffe17 	ldw	r2,-8(fp)
 4011108:	10802f17 	ldw	r2,188(r2)
 401110c:	10800037 	ldwio	r2,0(r2)
 4011110:	1080100c 	andi	r2,r2,64
 4011114:	e0bff915 	stw	r2,-28(fp)
        sector3_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_MSK;
 4011118:	e0bffe17 	ldw	r2,-8(fp)
 401111c:	10802f17 	ldw	r2,188(r2)
 4011120:	10800037 	ldwio	r2,0(r2)
 4011124:	1080200c 	andi	r2,r2,128
 4011128:	e0bffa15 	stw	r2,-24(fp)
        sector4_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_MSK;
 401112c:	e0bffe17 	ldw	r2,-8(fp)
 4011130:	10802f17 	ldw	r2,188(r2)
 4011134:	10800037 	ldwio	r2,0(r2)
 4011138:	1080400c 	andi	r2,r2,256
 401113c:	e0bffb15 	stw	r2,-20(fp)
        sector5_status = IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) & ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_MSK;
 4011140:	e0bffe17 	ldw	r2,-8(fp)
 4011144:	10802f17 	ldw	r2,188(r2)
 4011148:	10800037 	ldwio	r2,0(r2)
 401114c:	1080800c 	andi	r2,r2,512
 4011150:	e0bffc15 	stw	r2,-16(fp)
    }

    if ((flash->sector1_enabled == 1) && (sector1_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR1_UNAVAILABLE)) {
 4011154:	e0bffe17 	ldw	r2,-8(fp)
 4011158:	10803017 	ldw	r2,192(r2)
 401115c:	10800058 	cmpnei	r2,r2,1
 4011160:	10002f1e 	bne	r2,zero,4011220 <altera_onchip_flash_init+0x178>
 4011164:	e0bff817 	ldw	r2,-32(fp)
 4011168:	10800820 	cmpeqi	r2,r2,32
 401116c:	10002c1e 	bne	r2,zero,4011220 <altera_onchip_flash_init+0x178>

        region_info[number_of_regions].offset = flash->sector1_start_addr;
 4011170:	e0bff717 	ldw	r2,-36(fp)
 4011174:	1004913a 	slli	r2,r2,4
 4011178:	e0fffd17 	ldw	r3,-12(fp)
 401117c:	1885883a 	add	r2,r3,r2
 4011180:	e0fffe17 	ldw	r3,-8(fp)
 4011184:	18c03117 	ldw	r3,196(r3)
 4011188:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector1_end_addr - flash->sector1_start_addr + 1;
 401118c:	e0bff717 	ldw	r2,-36(fp)
 4011190:	1004913a 	slli	r2,r2,4
 4011194:	e0fffd17 	ldw	r3,-12(fp)
 4011198:	1885883a 	add	r2,r3,r2
 401119c:	e0fffe17 	ldw	r3,-8(fp)
 40111a0:	19003217 	ldw	r4,200(r3)
 40111a4:	e0fffe17 	ldw	r3,-8(fp)
 40111a8:	18c03117 	ldw	r3,196(r3)
 40111ac:	20c7c83a 	sub	r3,r4,r3
 40111b0:	18c00044 	addi	r3,r3,1
 40111b4:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 40111b8:	e0bff717 	ldw	r2,-36(fp)
 40111bc:	1004913a 	slli	r2,r2,4
 40111c0:	e0fffd17 	ldw	r3,-12(fp)
 40111c4:	18a1883a 	add	r16,r3,r2
 40111c8:	e0fffe17 	ldw	r3,-8(fp)
 40111cc:	e0bff717 	ldw	r2,-36(fp)
 40111d0:	1004913a 	slli	r2,r2,4
 40111d4:	1885883a 	add	r2,r3,r2
 40111d8:	10800e04 	addi	r2,r2,56
 40111dc:	10c00017 	ldw	r3,0(r2)
 40111e0:	e0bffe17 	ldw	r2,-8(fp)
 40111e4:	10803f17 	ldw	r2,252(r2)
 40111e8:	100b883a 	mov	r5,r2
 40111ec:	1809883a 	mov	r4,r3
 40111f0:	40022ac0 	call	40022ac <__divsi3>
 40111f4:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
 40111f8:	e0bff717 	ldw	r2,-36(fp)
 40111fc:	1004913a 	slli	r2,r2,4
 4011200:	e0fffd17 	ldw	r3,-12(fp)
 4011204:	1885883a 	add	r2,r3,r2
 4011208:	e0fffe17 	ldw	r3,-8(fp)
 401120c:	18c03f17 	ldw	r3,252(r3)
 4011210:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
 4011214:	e0bff717 	ldw	r2,-36(fp)
 4011218:	10800044 	addi	r2,r2,1
 401121c:	e0bff715 	stw	r2,-36(fp)
    }

    if ((flash->sector2_enabled == 1) && (sector2_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR2_UNAVAILABLE)) {
 4011220:	e0bffe17 	ldw	r2,-8(fp)
 4011224:	10803317 	ldw	r2,204(r2)
 4011228:	10800058 	cmpnei	r2,r2,1
 401122c:	10002f1e 	bne	r2,zero,40112ec <altera_onchip_flash_init+0x244>
 4011230:	e0bff917 	ldw	r2,-28(fp)
 4011234:	10801020 	cmpeqi	r2,r2,64
 4011238:	10002c1e 	bne	r2,zero,40112ec <altera_onchip_flash_init+0x244>

        region_info[number_of_regions].offset = flash->sector2_start_addr;
 401123c:	e0bff717 	ldw	r2,-36(fp)
 4011240:	1004913a 	slli	r2,r2,4
 4011244:	e0fffd17 	ldw	r3,-12(fp)
 4011248:	1885883a 	add	r2,r3,r2
 401124c:	e0fffe17 	ldw	r3,-8(fp)
 4011250:	18c03417 	ldw	r3,208(r3)
 4011254:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector2_end_addr - flash->sector2_start_addr + 1;
 4011258:	e0bff717 	ldw	r2,-36(fp)
 401125c:	1004913a 	slli	r2,r2,4
 4011260:	e0fffd17 	ldw	r3,-12(fp)
 4011264:	1885883a 	add	r2,r3,r2
 4011268:	e0fffe17 	ldw	r3,-8(fp)
 401126c:	19003517 	ldw	r4,212(r3)
 4011270:	e0fffe17 	ldw	r3,-8(fp)
 4011274:	18c03417 	ldw	r3,208(r3)
 4011278:	20c7c83a 	sub	r3,r4,r3
 401127c:	18c00044 	addi	r3,r3,1
 4011280:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4011284:	e0bff717 	ldw	r2,-36(fp)
 4011288:	1004913a 	slli	r2,r2,4
 401128c:	e0fffd17 	ldw	r3,-12(fp)
 4011290:	18a1883a 	add	r16,r3,r2
 4011294:	e0fffe17 	ldw	r3,-8(fp)
 4011298:	e0bff717 	ldw	r2,-36(fp)
 401129c:	1004913a 	slli	r2,r2,4
 40112a0:	1885883a 	add	r2,r3,r2
 40112a4:	10800e04 	addi	r2,r2,56
 40112a8:	10c00017 	ldw	r3,0(r2)
 40112ac:	e0bffe17 	ldw	r2,-8(fp)
 40112b0:	10803f17 	ldw	r2,252(r2)
 40112b4:	100b883a 	mov	r5,r2
 40112b8:	1809883a 	mov	r4,r3
 40112bc:	40022ac0 	call	40022ac <__divsi3>
 40112c0:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
 40112c4:	e0bff717 	ldw	r2,-36(fp)
 40112c8:	1004913a 	slli	r2,r2,4
 40112cc:	e0fffd17 	ldw	r3,-12(fp)
 40112d0:	1885883a 	add	r2,r3,r2
 40112d4:	e0fffe17 	ldw	r3,-8(fp)
 40112d8:	18c03f17 	ldw	r3,252(r3)
 40112dc:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
 40112e0:	e0bff717 	ldw	r2,-36(fp)
 40112e4:	10800044 	addi	r2,r2,1
 40112e8:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector3_enabled == 1) && (sector3_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR3_UNAVAILABLE)) {
 40112ec:	e0bffe17 	ldw	r2,-8(fp)
 40112f0:	10803617 	ldw	r2,216(r2)
 40112f4:	10800058 	cmpnei	r2,r2,1
 40112f8:	10002f1e 	bne	r2,zero,40113b8 <altera_onchip_flash_init+0x310>
 40112fc:	e0bffa17 	ldw	r2,-24(fp)
 4011300:	10802020 	cmpeqi	r2,r2,128
 4011304:	10002c1e 	bne	r2,zero,40113b8 <altera_onchip_flash_init+0x310>

        region_info[number_of_regions].offset = flash->sector3_start_addr;
 4011308:	e0bff717 	ldw	r2,-36(fp)
 401130c:	1004913a 	slli	r2,r2,4
 4011310:	e0fffd17 	ldw	r3,-12(fp)
 4011314:	1885883a 	add	r2,r3,r2
 4011318:	e0fffe17 	ldw	r3,-8(fp)
 401131c:	18c03717 	ldw	r3,220(r3)
 4011320:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector3_end_addr - flash->sector3_start_addr + 1;
 4011324:	e0bff717 	ldw	r2,-36(fp)
 4011328:	1004913a 	slli	r2,r2,4
 401132c:	e0fffd17 	ldw	r3,-12(fp)
 4011330:	1885883a 	add	r2,r3,r2
 4011334:	e0fffe17 	ldw	r3,-8(fp)
 4011338:	19003817 	ldw	r4,224(r3)
 401133c:	e0fffe17 	ldw	r3,-8(fp)
 4011340:	18c03717 	ldw	r3,220(r3)
 4011344:	20c7c83a 	sub	r3,r4,r3
 4011348:	18c00044 	addi	r3,r3,1
 401134c:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 4011350:	e0bff717 	ldw	r2,-36(fp)
 4011354:	1004913a 	slli	r2,r2,4
 4011358:	e0fffd17 	ldw	r3,-12(fp)
 401135c:	18a1883a 	add	r16,r3,r2
 4011360:	e0fffe17 	ldw	r3,-8(fp)
 4011364:	e0bff717 	ldw	r2,-36(fp)
 4011368:	1004913a 	slli	r2,r2,4
 401136c:	1885883a 	add	r2,r3,r2
 4011370:	10800e04 	addi	r2,r2,56
 4011374:	10c00017 	ldw	r3,0(r2)
 4011378:	e0bffe17 	ldw	r2,-8(fp)
 401137c:	10803f17 	ldw	r2,252(r2)
 4011380:	100b883a 	mov	r5,r2
 4011384:	1809883a 	mov	r4,r3
 4011388:	40022ac0 	call	40022ac <__divsi3>
 401138c:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
 4011390:	e0bff717 	ldw	r2,-36(fp)
 4011394:	1004913a 	slli	r2,r2,4
 4011398:	e0fffd17 	ldw	r3,-12(fp)
 401139c:	1885883a 	add	r2,r3,r2
 40113a0:	e0fffe17 	ldw	r3,-8(fp)
 40113a4:	18c03f17 	ldw	r3,252(r3)
 40113a8:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
 40113ac:	e0bff717 	ldw	r2,-36(fp)
 40113b0:	10800044 	addi	r2,r2,1
 40113b4:	e0bff715 	stw	r2,-36(fp)
	}

	if ((flash->sector4_enabled == 1) && (sector4_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR4_UNAVAILABLE)) {
 40113b8:	e0bffe17 	ldw	r2,-8(fp)
 40113bc:	10803917 	ldw	r2,228(r2)
 40113c0:	10800058 	cmpnei	r2,r2,1
 40113c4:	10002f1e 	bne	r2,zero,4011484 <altera_onchip_flash_init+0x3dc>
 40113c8:	e0bffb17 	ldw	r2,-20(fp)
 40113cc:	10804020 	cmpeqi	r2,r2,256
 40113d0:	10002c1e 	bne	r2,zero,4011484 <altera_onchip_flash_init+0x3dc>

        region_info[number_of_regions].offset = flash->sector4_start_addr;
 40113d4:	e0bff717 	ldw	r2,-36(fp)
 40113d8:	1004913a 	slli	r2,r2,4
 40113dc:	e0fffd17 	ldw	r3,-12(fp)
 40113e0:	1885883a 	add	r2,r3,r2
 40113e4:	e0fffe17 	ldw	r3,-8(fp)
 40113e8:	18c03a17 	ldw	r3,232(r3)
 40113ec:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector4_end_addr - flash->sector4_start_addr + 1;
 40113f0:	e0bff717 	ldw	r2,-36(fp)
 40113f4:	1004913a 	slli	r2,r2,4
 40113f8:	e0fffd17 	ldw	r3,-12(fp)
 40113fc:	1885883a 	add	r2,r3,r2
 4011400:	e0fffe17 	ldw	r3,-8(fp)
 4011404:	19003b17 	ldw	r4,236(r3)
 4011408:	e0fffe17 	ldw	r3,-8(fp)
 401140c:	18c03a17 	ldw	r3,232(r3)
 4011410:	20c7c83a 	sub	r3,r4,r3
 4011414:	18c00044 	addi	r3,r3,1
 4011418:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 401141c:	e0bff717 	ldw	r2,-36(fp)
 4011420:	1004913a 	slli	r2,r2,4
 4011424:	e0fffd17 	ldw	r3,-12(fp)
 4011428:	18a1883a 	add	r16,r3,r2
 401142c:	e0fffe17 	ldw	r3,-8(fp)
 4011430:	e0bff717 	ldw	r2,-36(fp)
 4011434:	1004913a 	slli	r2,r2,4
 4011438:	1885883a 	add	r2,r3,r2
 401143c:	10800e04 	addi	r2,r2,56
 4011440:	10c00017 	ldw	r3,0(r2)
 4011444:	e0bffe17 	ldw	r2,-8(fp)
 4011448:	10803f17 	ldw	r2,252(r2)
 401144c:	100b883a 	mov	r5,r2
 4011450:	1809883a 	mov	r4,r3
 4011454:	40022ac0 	call	40022ac <__divsi3>
 4011458:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
 401145c:	e0bff717 	ldw	r2,-36(fp)
 4011460:	1004913a 	slli	r2,r2,4
 4011464:	e0fffd17 	ldw	r3,-12(fp)
 4011468:	1885883a 	add	r2,r3,r2
 401146c:	e0fffe17 	ldw	r3,-8(fp)
 4011470:	18c03f17 	ldw	r3,252(r3)
 4011474:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
 4011478:	e0bff717 	ldw	r2,-36(fp)
 401147c:	10800044 	addi	r2,r2,1
 4011480:	e0bff715 	stw	r2,-36(fp)
	}

    if ((flash->sector5_enabled == 1) && (sector5_status != ALTERA_ONCHIP_FLASH_STATUS_SECTOR5_UNAVAILABLE)) {
 4011484:	e0bffe17 	ldw	r2,-8(fp)
 4011488:	10803c17 	ldw	r2,240(r2)
 401148c:	10800058 	cmpnei	r2,r2,1
 4011490:	10002f1e 	bne	r2,zero,4011550 <altera_onchip_flash_init+0x4a8>
 4011494:	e0bffc17 	ldw	r2,-16(fp)
 4011498:	10808020 	cmpeqi	r2,r2,512
 401149c:	10002c1e 	bne	r2,zero,4011550 <altera_onchip_flash_init+0x4a8>

        region_info[number_of_regions].offset = flash->sector5_start_addr;
 40114a0:	e0bff717 	ldw	r2,-36(fp)
 40114a4:	1004913a 	slli	r2,r2,4
 40114a8:	e0fffd17 	ldw	r3,-12(fp)
 40114ac:	1885883a 	add	r2,r3,r2
 40114b0:	e0fffe17 	ldw	r3,-8(fp)
 40114b4:	18c03d17 	ldw	r3,244(r3)
 40114b8:	10c00015 	stw	r3,0(r2)
        region_info[number_of_regions].region_size = flash->sector5_end_addr - flash->sector5_start_addr + 1;
 40114bc:	e0bff717 	ldw	r2,-36(fp)
 40114c0:	1004913a 	slli	r2,r2,4
 40114c4:	e0fffd17 	ldw	r3,-12(fp)
 40114c8:	1885883a 	add	r2,r3,r2
 40114cc:	e0fffe17 	ldw	r3,-8(fp)
 40114d0:	19003e17 	ldw	r4,248(r3)
 40114d4:	e0fffe17 	ldw	r3,-8(fp)
 40114d8:	18c03d17 	ldw	r3,244(r3)
 40114dc:	20c7c83a 	sub	r3,r4,r3
 40114e0:	18c00044 	addi	r3,r3,1
 40114e4:	10c00115 	stw	r3,4(r2)
        region_info[number_of_regions].number_of_blocks = flash->dev.region_info[number_of_regions].region_size / flash->page_size;
 40114e8:	e0bff717 	ldw	r2,-36(fp)
 40114ec:	1004913a 	slli	r2,r2,4
 40114f0:	e0fffd17 	ldw	r3,-12(fp)
 40114f4:	18a1883a 	add	r16,r3,r2
 40114f8:	e0fffe17 	ldw	r3,-8(fp)
 40114fc:	e0bff717 	ldw	r2,-36(fp)
 4011500:	1004913a 	slli	r2,r2,4
 4011504:	1885883a 	add	r2,r3,r2
 4011508:	10800e04 	addi	r2,r2,56
 401150c:	10c00017 	ldw	r3,0(r2)
 4011510:	e0bffe17 	ldw	r2,-8(fp)
 4011514:	10803f17 	ldw	r2,252(r2)
 4011518:	100b883a 	mov	r5,r2
 401151c:	1809883a 	mov	r4,r3
 4011520:	40022ac0 	call	40022ac <__divsi3>
 4011524:	80800215 	stw	r2,8(r16)
        region_info[number_of_regions].block_size = flash->page_size;
 4011528:	e0bff717 	ldw	r2,-36(fp)
 401152c:	1004913a 	slli	r2,r2,4
 4011530:	e0fffd17 	ldw	r3,-12(fp)
 4011534:	1885883a 	add	r2,r3,r2
 4011538:	e0fffe17 	ldw	r3,-8(fp)
 401153c:	18c03f17 	ldw	r3,252(r3)
 4011540:	10c00315 	stw	r3,12(r2)

        number_of_regions++;
 4011544:	e0bff717 	ldw	r2,-36(fp)
 4011548:	10800044 	addi	r2,r2,1
 401154c:	e0bff715 	stw	r2,-36(fp)
    }

    /* Update number of regions. */
    flash->dev.number_of_regions = number_of_regions;
 4011550:	e0bffe17 	ldw	r2,-8(fp)
 4011554:	e0fff717 	ldw	r3,-36(fp)
 4011558:	10c00c15 	stw	r3,48(r2)

    /*
    *  Register this device as a valid flash device type
    */
    alt_flash_device_register(&(flash->dev));
 401155c:	e0bffe17 	ldw	r2,-8(fp)
 4011560:	1009883a 	mov	r4,r2
 4011564:	40107f40 	call	40107f4 <alt_flash_device_register>
}
 4011568:	0001883a 	nop
 401156c:	e6ffff04 	addi	sp,fp,-4
 4011570:	dfc00217 	ldw	ra,8(sp)
 4011574:	df000117 	ldw	fp,4(sp)
 4011578:	dc000017 	ldw	r16,0(sp)
 401157c:	dec00304 	addi	sp,sp,12
 4011580:	f800283a 	ret

04011584 <alt_onchip_flash_poll_for_status_to_go_idle>:
**/
int alt_onchip_flash_poll_for_status_to_go_idle
(
    alt_onchip_flash_dev *flash
)
{
 4011584:	defffa04 	addi	sp,sp,-24
 4011588:	dfc00515 	stw	ra,20(sp)
 401158c:	df000415 	stw	fp,16(sp)
 4011590:	df000404 	addi	fp,sp,16
 4011594:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
 4011598:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
 401159c:	008002f4 	movhi	r2,11
 40115a0:	10ab9804 	addi	r2,r2,-20896
 40115a4:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
 40115a8:	008002f4 	movhi	r2,11
 40115ac:	10ab9804 	addi	r2,r2,-20896
 40115b0:	e0bffd15 	stw	r2,-12(fp)

    while (
 40115b4:	00000c06 	br	40115e8 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_BUSY_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_BUSY_IDLE
    ) {
	 
	alt_busy_sleep(1); /* delay 1us */
 40115b8:	01000044 	movi	r4,1
 40115bc:	40118600 	call	4011860 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
 40115c0:	e0bffe17 	ldw	r2,-8(fp)
 40115c4:	10000826 	beq	r2,zero,40115e8 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
            count_down--;
 40115c8:	e0bffd17 	ldw	r2,-12(fp)
 40115cc:	10bfffc4 	addi	r2,r2,-1
 40115d0:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
 40115d4:	e0bffd17 	ldw	r2,-12(fp)
 40115d8:	1000031e 	bne	r2,zero,40115e8 <alt_onchip_flash_poll_for_status_to_go_idle+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
 40115dc:	00bfe304 	movi	r2,-116
 40115e0:	e0bffc15 	stw	r2,-16(fp)
                break;
 40115e4:	00000506 	br	40115fc <alt_onchip_flash_poll_for_status_to_go_idle+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 40115e8:	e0bfff17 	ldw	r2,-4(fp)
 40115ec:	10802f17 	ldw	r2,188(r2)
 40115f0:	10800037 	ldwio	r2,0(r2)
 40115f4:	108000cc 	andi	r2,r2,3
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 40115f8:	103fef1e 	bne	r2,zero,40115b8 <__alt_data_end+0xfc0115b8>
                break;
            }
        }
    }

    return ret_code;
 40115fc:	e0bffc17 	ldw	r2,-16(fp)
}
 4011600:	e037883a 	mov	sp,fp
 4011604:	dfc00117 	ldw	ra,4(sp)
 4011608:	df000017 	ldw	fp,0(sp)
 401160c:	dec00204 	addi	sp,sp,8
 4011610:	f800283a 	ret

04011614 <alt_onchip_flash_poll_for_status_erase_passed>:
**/
int alt_onchip_flash_poll_for_status_erase_passed
(
    alt_onchip_flash_dev *flash
)
{
 4011614:	defffa04 	addi	sp,sp,-24
 4011618:	dfc00515 	stw	ra,20(sp)
 401161c:	df000415 	stw	fp,16(sp)
 4011620:	df000404 	addi	fp,sp,16
 4011624:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
 4011628:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
 401162c:	008002f4 	movhi	r2,11
 4011630:	10ab9804 	addi	r2,r2,-20896
 4011634:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
 4011638:	008002f4 	movhi	r2,11
 401163c:	10ab9804 	addi	r2,r2,-20896
 4011640:	e0bffd15 	stw	r2,-12(fp)

    while (
 4011644:	00000c06 	br	4011678 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_ERASE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_ERASE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 4011648:	01000044 	movi	r4,1
 401164c:	40118600 	call	4011860 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
 4011650:	e0bffe17 	ldw	r2,-8(fp)
 4011654:	10000826 	beq	r2,zero,4011678 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
            count_down--;
 4011658:	e0bffd17 	ldw	r2,-12(fp)
 401165c:	10bfffc4 	addi	r2,r2,-1
 4011660:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
 4011664:	e0bffd17 	ldw	r2,-12(fp)
 4011668:	1000031e 	bne	r2,zero,4011678 <alt_onchip_flash_poll_for_status_erase_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
 401166c:	00bfe304 	movi	r2,-116
 4011670:	e0bffc15 	stw	r2,-16(fp)
                break;
 4011674:	00000506 	br	401168c <alt_onchip_flash_poll_for_status_erase_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 4011678:	e0bfff17 	ldw	r2,-4(fp)
 401167c:	10802f17 	ldw	r2,188(r2)
 4011680:	10800037 	ldwio	r2,0(r2)
 4011684:	1080040c 	andi	r2,r2,16
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4011688:	103fef26 	beq	r2,zero,4011648 <__alt_data_end+0xfc011648>
                break;
            }
        }
    }

    return ret_code;
 401168c:	e0bffc17 	ldw	r2,-16(fp)
}
 4011690:	e037883a 	mov	sp,fp
 4011694:	dfc00117 	ldw	ra,4(sp)
 4011698:	df000017 	ldw	fp,0(sp)
 401169c:	dec00204 	addi	sp,sp,8
 40116a0:	f800283a 	ret

040116a4 <alt_onchip_flash_poll_for_status_write_passed>:
**/
int alt_onchip_flash_poll_for_status_write_passed
(
    alt_onchip_flash_dev *flash
)
{
 40116a4:	defffa04 	addi	sp,sp,-24
 40116a8:	dfc00515 	stw	ra,20(sp)
 40116ac:	df000415 	stw	fp,16(sp)
 40116b0:	df000404 	addi	fp,sp,16
 40116b4:	e13fff15 	stw	r4,-4(fp)
    int ret_code = 0;
 40116b8:	e03ffc15 	stw	zero,-16(fp)
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
 40116bc:	008002f4 	movhi	r2,11
 40116c0:	10ab9804 	addi	r2,r2,-20896
 40116c4:	e0bffe15 	stw	r2,-8(fp)
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
 40116c8:	008002f4 	movhi	r2,11
 40116cc:	10ab9804 	addi	r2,r2,-20896
 40116d0:	e0bffd15 	stw	r2,-12(fp)

    while (
 40116d4:	00000c06 	br	4011708 <alt_onchip_flash_poll_for_status_write_passed+0x64>
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
              ALTERA_ONCHIP_FLASH_STATUS_WRITE_MSK
        ) !=  ALTERA_ONCHIP_FLASH_STATUS_WRITE_PASSED
    ) {

	alt_busy_sleep(1); /* delay 1us */
 40116d8:	01000044 	movi	r4,1
 40116dc:	40118600 	call	4011860 <alt_busy_sleep>

        /* If timeout value is zero, it will never timeout. */
        if (timeout != 0) {
 40116e0:	e0bffe17 	ldw	r2,-8(fp)
 40116e4:	10000826 	beq	r2,zero,4011708 <alt_onchip_flash_poll_for_status_write_passed+0x64>
            count_down--;
 40116e8:	e0bffd17 	ldw	r2,-12(fp)
 40116ec:	10bfffc4 	addi	r2,r2,-1
 40116f0:	e0bffd15 	stw	r2,-12(fp)
            if (count_down == 0) {
 40116f4:	e0bffd17 	ldw	r2,-12(fp)
 40116f8:	1000031e 	bne	r2,zero,4011708 <alt_onchip_flash_poll_for_status_write_passed+0x64>
                /* Timeout */
                ret_code = -ETIMEDOUT;
 40116fc:	00bfe304 	movi	r2,-116
 4011700:	e0bffc15 	stw	r2,-16(fp)
                break;
 4011704:	00000506 	br	401171c <alt_onchip_flash_poll_for_status_write_passed+0x78>
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
        (IORD_ALTERA_ONCHIP_FLASH_STATUS(flash->csr_base) &
 4011708:	e0bfff17 	ldw	r2,-4(fp)
 401170c:	10802f17 	ldw	r2,188(r2)
 4011710:	10800037 	ldwio	r2,0(r2)
 4011714:	1080020c 	andi	r2,r2,8
{
    int ret_code = 0;
    int timeout = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;
    int count_down = ALTERA_ONCHIP_FLASH_STATUS_BIT_POLLING_TIMEOUT_VALUE;

    while (
 4011718:	103fef26 	beq	r2,zero,40116d8 <__alt_data_end+0xfc0116d8>
                break;
            }
        }
    }

    return ret_code;
 401171c:	e0bffc17 	ldw	r2,-16(fp)
}
 4011720:	e037883a 	mov	sp,fp
 4011724:	dfc00117 	ldw	ra,4(sp)
 4011728:	df000017 	ldw	fp,0(sp)
 401172c:	dec00204 	addi	sp,sp,8
 4011730:	f800283a 	ret

04011734 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4011734:	defff504 	addi	sp,sp,-44
 4011738:	df000a15 	stw	fp,40(sp)
 401173c:	df000a04 	addi	fp,sp,40
 4011740:	e13ffc15 	stw	r4,-16(fp)
 4011744:	e17ffd15 	stw	r5,-12(fp)
 4011748:	e1bffe15 	stw	r6,-8(fp)
 401174c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4011750:	e03ff615 	stw	zero,-40(fp)
 4011754:	d0a03517 	ldw	r2,-32556(gp)
  
  if (alt_ticks_per_second ())
 4011758:	10003c26 	beq	r2,zero,401184c <alt_alarm_start+0x118>
  {
    if (alarm)
 401175c:	e0bffc17 	ldw	r2,-16(fp)
 4011760:	10003826 	beq	r2,zero,4011844 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4011764:	e0bffc17 	ldw	r2,-16(fp)
 4011768:	e0fffe17 	ldw	r3,-8(fp)
 401176c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4011770:	e0bffc17 	ldw	r2,-16(fp)
 4011774:	e0ffff17 	ldw	r3,-4(fp)
 4011778:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401177c:	0005303a 	rdctl	r2,status
 4011780:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011784:	e0fff917 	ldw	r3,-28(fp)
 4011788:	00bfff84 	movi	r2,-2
 401178c:	1884703a 	and	r2,r3,r2
 4011790:	1001703a 	wrctl	status,r2
  
  return context;
 4011794:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4011798:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 401179c:	d0a03617 	ldw	r2,-32552(gp)
      
      current_nticks = alt_nticks();
 40117a0:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 40117a4:	e0fffd17 	ldw	r3,-12(fp)
 40117a8:	e0bff617 	ldw	r2,-40(fp)
 40117ac:	1885883a 	add	r2,r3,r2
 40117b0:	10c00044 	addi	r3,r2,1
 40117b4:	e0bffc17 	ldw	r2,-16(fp)
 40117b8:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 40117bc:	e0bffc17 	ldw	r2,-16(fp)
 40117c0:	10c00217 	ldw	r3,8(r2)
 40117c4:	e0bff617 	ldw	r2,-40(fp)
 40117c8:	1880042e 	bgeu	r3,r2,40117dc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 40117cc:	e0bffc17 	ldw	r2,-16(fp)
 40117d0:	00c00044 	movi	r3,1
 40117d4:	10c00405 	stb	r3,16(r2)
 40117d8:	00000206 	br	40117e4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 40117dc:	e0bffc17 	ldw	r2,-16(fp)
 40117e0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 40117e4:	e0bffc17 	ldw	r2,-16(fp)
 40117e8:	d0e01b04 	addi	r3,gp,-32660
 40117ec:	e0fffa15 	stw	r3,-24(fp)
 40117f0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 40117f4:	e0bffb17 	ldw	r2,-20(fp)
 40117f8:	e0fffa17 	ldw	r3,-24(fp)
 40117fc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4011800:	e0bffa17 	ldw	r2,-24(fp)
 4011804:	10c00017 	ldw	r3,0(r2)
 4011808:	e0bffb17 	ldw	r2,-20(fp)
 401180c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4011810:	e0bffa17 	ldw	r2,-24(fp)
 4011814:	10800017 	ldw	r2,0(r2)
 4011818:	e0fffb17 	ldw	r3,-20(fp)
 401181c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4011820:	e0bffa17 	ldw	r2,-24(fp)
 4011824:	e0fffb17 	ldw	r3,-20(fp)
 4011828:	10c00015 	stw	r3,0(r2)
 401182c:	e0bff817 	ldw	r2,-32(fp)
 4011830:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011834:	e0bff717 	ldw	r2,-36(fp)
 4011838:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 401183c:	0005883a 	mov	r2,zero
 4011840:	00000306 	br	4011850 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4011844:	00bffa84 	movi	r2,-22
 4011848:	00000106 	br	4011850 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 401184c:	00bfde84 	movi	r2,-134
  }
}
 4011850:	e037883a 	mov	sp,fp
 4011854:	df000017 	ldw	fp,0(sp)
 4011858:	dec00104 	addi	sp,sp,4
 401185c:	f800283a 	ret

04011860 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4011860:	defffa04 	addi	sp,sp,-24
 4011864:	dfc00515 	stw	ra,20(sp)
 4011868:	df000415 	stw	fp,16(sp)
 401186c:	df000404 	addi	fp,sp,16
 4011870:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4011874:	00800244 	movi	r2,9
 4011878:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 401187c:	014003f4 	movhi	r5,15
 4011880:	29509004 	addi	r5,r5,16960
 4011884:	e13ffd17 	ldw	r4,-12(fp)
 4011888:	40024600 	call	4002460 <__mulsi3>
 401188c:	100b883a 	mov	r5,r2
 4011890:	01017db4 	movhi	r4,1526
 4011894:	21384004 	addi	r4,r4,-7936
 4011898:	40023a40 	call	40023a4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 401189c:	100b883a 	mov	r5,r2
 40118a0:	01200034 	movhi	r4,32768
 40118a4:	213fffc4 	addi	r4,r4,-1
 40118a8:	40023a40 	call	40023a4 <__udivsi3>
 40118ac:	100b883a 	mov	r5,r2
 40118b0:	e13fff17 	ldw	r4,-4(fp)
 40118b4:	40023a40 	call	40023a4 <__udivsi3>
 40118b8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 40118bc:	e0bffe17 	ldw	r2,-8(fp)
 40118c0:	10002a26 	beq	r2,zero,401196c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 40118c4:	e03ffc15 	stw	zero,-16(fp)
 40118c8:	00001706 	br	4011928 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 40118cc:	00a00034 	movhi	r2,32768
 40118d0:	10bfffc4 	addi	r2,r2,-1
 40118d4:	10bfffc4 	addi	r2,r2,-1
 40118d8:	103ffe1e 	bne	r2,zero,40118d4 <__alt_data_end+0xfc0118d4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 40118dc:	014003f4 	movhi	r5,15
 40118e0:	29509004 	addi	r5,r5,16960
 40118e4:	e13ffd17 	ldw	r4,-12(fp)
 40118e8:	40024600 	call	4002460 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 40118ec:	100b883a 	mov	r5,r2
 40118f0:	01017db4 	movhi	r4,1526
 40118f4:	21384004 	addi	r4,r4,-7936
 40118f8:	40023a40 	call	40023a4 <__udivsi3>
 40118fc:	100b883a 	mov	r5,r2
 4011900:	01200034 	movhi	r4,32768
 4011904:	213fffc4 	addi	r4,r4,-1
 4011908:	40023a40 	call	40023a4 <__udivsi3>
 401190c:	1007883a 	mov	r3,r2
 4011910:	e0bfff17 	ldw	r2,-4(fp)
 4011914:	10c5c83a 	sub	r2,r2,r3
 4011918:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 401191c:	e0bffc17 	ldw	r2,-16(fp)
 4011920:	10800044 	addi	r2,r2,1
 4011924:	e0bffc15 	stw	r2,-16(fp)
 4011928:	e0fffc17 	ldw	r3,-16(fp)
 401192c:	e0bffe17 	ldw	r2,-8(fp)
 4011930:	18bfe616 	blt	r3,r2,40118cc <__alt_data_end+0xfc0118cc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4011934:	014003f4 	movhi	r5,15
 4011938:	29509004 	addi	r5,r5,16960
 401193c:	e13ffd17 	ldw	r4,-12(fp)
 4011940:	40024600 	call	4002460 <__mulsi3>
 4011944:	100b883a 	mov	r5,r2
 4011948:	01017db4 	movhi	r4,1526
 401194c:	21384004 	addi	r4,r4,-7936
 4011950:	40023a40 	call	40023a4 <__udivsi3>
 4011954:	e17fff17 	ldw	r5,-4(fp)
 4011958:	1009883a 	mov	r4,r2
 401195c:	40024600 	call	4002460 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4011960:	10bfffc4 	addi	r2,r2,-1
 4011964:	103ffe1e 	bne	r2,zero,4011960 <__alt_data_end+0xfc011960>
 4011968:	00000d06 	br	40119a0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 401196c:	014003f4 	movhi	r5,15
 4011970:	29509004 	addi	r5,r5,16960
 4011974:	e13ffd17 	ldw	r4,-12(fp)
 4011978:	40024600 	call	4002460 <__mulsi3>
 401197c:	100b883a 	mov	r5,r2
 4011980:	01017db4 	movhi	r4,1526
 4011984:	21384004 	addi	r4,r4,-7936
 4011988:	40023a40 	call	40023a4 <__udivsi3>
 401198c:	e17fff17 	ldw	r5,-4(fp)
 4011990:	1009883a 	mov	r4,r2
 4011994:	40024600 	call	4002460 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4011998:	10bfffc4 	addi	r2,r2,-1
 401199c:	00bffe16 	blt	zero,r2,4011998 <__alt_data_end+0xfc011998>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 40119a0:	0005883a 	mov	r2,zero
}
 40119a4:	e037883a 	mov	sp,fp
 40119a8:	dfc00117 	ldw	ra,4(sp)
 40119ac:	df000017 	ldw	fp,0(sp)
 40119b0:	dec00204 	addi	sp,sp,8
 40119b4:	f800283a 	ret

040119b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40119b8:	defffe04 	addi	sp,sp,-8
 40119bc:	dfc00115 	stw	ra,4(sp)
 40119c0:	df000015 	stw	fp,0(sp)
 40119c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40119c8:	d0a01817 	ldw	r2,-32672(gp)
 40119cc:	10000326 	beq	r2,zero,40119dc <alt_get_errno+0x24>
 40119d0:	d0a01817 	ldw	r2,-32672(gp)
 40119d4:	103ee83a 	callr	r2
 40119d8:	00000106 	br	40119e0 <alt_get_errno+0x28>
 40119dc:	d0a03004 	addi	r2,gp,-32576
}
 40119e0:	e037883a 	mov	sp,fp
 40119e4:	dfc00117 	ldw	ra,4(sp)
 40119e8:	df000017 	ldw	fp,0(sp)
 40119ec:	dec00204 	addi	sp,sp,8
 40119f0:	f800283a 	ret

040119f4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 40119f4:	defffb04 	addi	sp,sp,-20
 40119f8:	dfc00415 	stw	ra,16(sp)
 40119fc:	df000315 	stw	fp,12(sp)
 4011a00:	df000304 	addi	fp,sp,12
 4011a04:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4011a08:	e0bfff17 	ldw	r2,-4(fp)
 4011a0c:	10000816 	blt	r2,zero,4011a30 <close+0x3c>
 4011a10:	01400304 	movi	r5,12
 4011a14:	e13fff17 	ldw	r4,-4(fp)
 4011a18:	40024600 	call	4002460 <__mulsi3>
 4011a1c:	1007883a 	mov	r3,r2
 4011a20:	00810074 	movhi	r2,1025
 4011a24:	10933c04 	addi	r2,r2,19696
 4011a28:	1885883a 	add	r2,r3,r2
 4011a2c:	00000106 	br	4011a34 <close+0x40>
 4011a30:	0005883a 	mov	r2,zero
 4011a34:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4011a38:	e0bffd17 	ldw	r2,-12(fp)
 4011a3c:	10001926 	beq	r2,zero,4011aa4 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4011a40:	e0bffd17 	ldw	r2,-12(fp)
 4011a44:	10800017 	ldw	r2,0(r2)
 4011a48:	10800417 	ldw	r2,16(r2)
 4011a4c:	10000626 	beq	r2,zero,4011a68 <close+0x74>
 4011a50:	e0bffd17 	ldw	r2,-12(fp)
 4011a54:	10800017 	ldw	r2,0(r2)
 4011a58:	10800417 	ldw	r2,16(r2)
 4011a5c:	e13ffd17 	ldw	r4,-12(fp)
 4011a60:	103ee83a 	callr	r2
 4011a64:	00000106 	br	4011a6c <close+0x78>
 4011a68:	0005883a 	mov	r2,zero
 4011a6c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4011a70:	e13fff17 	ldw	r4,-4(fp)
 4011a74:	40124000 	call	4012400 <alt_release_fd>
    if (rval < 0)
 4011a78:	e0bffe17 	ldw	r2,-8(fp)
 4011a7c:	1000070e 	bge	r2,zero,4011a9c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4011a80:	40119b80 	call	40119b8 <alt_get_errno>
 4011a84:	1007883a 	mov	r3,r2
 4011a88:	e0bffe17 	ldw	r2,-8(fp)
 4011a8c:	0085c83a 	sub	r2,zero,r2
 4011a90:	18800015 	stw	r2,0(r3)
      return -1;
 4011a94:	00bfffc4 	movi	r2,-1
 4011a98:	00000706 	br	4011ab8 <close+0xc4>
    }
    return 0;
 4011a9c:	0005883a 	mov	r2,zero
 4011aa0:	00000506 	br	4011ab8 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4011aa4:	40119b80 	call	40119b8 <alt_get_errno>
 4011aa8:	1007883a 	mov	r3,r2
 4011aac:	00801444 	movi	r2,81
 4011ab0:	18800015 	stw	r2,0(r3)
    return -1;
 4011ab4:	00bfffc4 	movi	r2,-1
  }
}
 4011ab8:	e037883a 	mov	sp,fp
 4011abc:	dfc00117 	ldw	ra,4(sp)
 4011ac0:	df000017 	ldw	fp,0(sp)
 4011ac4:	dec00204 	addi	sp,sp,8
 4011ac8:	f800283a 	ret

04011acc <alt_dcache_flush>:
 *
 * Any dirty lines in the data cache are written back to memory.
 */

void alt_dcache_flush (void* start, alt_u32 len)
{
 4011acc:	defffd04 	addi	sp,sp,-12
 4011ad0:	df000215 	stw	fp,8(sp)
 4011ad4:	df000204 	addi	fp,sp,8
 4011ad8:	e13ffe15 	stw	r4,-8(fp)
 4011adc:	e17fff15 	stw	r5,-4(fp)
  {
    ALT_FLUSH_DATA(i);
  }

#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4011ae0:	0001883a 	nop
 4011ae4:	e037883a 	mov	sp,fp
 4011ae8:	df000017 	ldw	fp,0(sp)
 4011aec:	dec00104 	addi	sp,sp,4
 4011af0:	f800283a 	ret

04011af4 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4011af4:	defffc04 	addi	sp,sp,-16
 4011af8:	df000315 	stw	fp,12(sp)
 4011afc:	df000304 	addi	fp,sp,12
 4011b00:	e13ffd15 	stw	r4,-12(fp)
 4011b04:	e17ffe15 	stw	r5,-8(fp)
 4011b08:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4011b0c:	e0bfff17 	ldw	r2,-4(fp)
}
 4011b10:	e037883a 	mov	sp,fp
 4011b14:	df000017 	ldw	fp,0(sp)
 4011b18:	dec00104 	addi	sp,sp,4
 4011b1c:	f800283a 	ret

04011b20 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4011b20:	defffe04 	addi	sp,sp,-8
 4011b24:	dfc00115 	stw	ra,4(sp)
 4011b28:	df000015 	stw	fp,0(sp)
 4011b2c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4011b30:	d0a01817 	ldw	r2,-32672(gp)
 4011b34:	10000326 	beq	r2,zero,4011b44 <alt_get_errno+0x24>
 4011b38:	d0a01817 	ldw	r2,-32672(gp)
 4011b3c:	103ee83a 	callr	r2
 4011b40:	00000106 	br	4011b48 <alt_get_errno+0x28>
 4011b44:	d0a03004 	addi	r2,gp,-32576
}
 4011b48:	e037883a 	mov	sp,fp
 4011b4c:	dfc00117 	ldw	ra,4(sp)
 4011b50:	df000017 	ldw	fp,0(sp)
 4011b54:	dec00204 	addi	sp,sp,8
 4011b58:	f800283a 	ret

04011b5c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4011b5c:	defffa04 	addi	sp,sp,-24
 4011b60:	dfc00515 	stw	ra,20(sp)
 4011b64:	df000415 	stw	fp,16(sp)
 4011b68:	df000404 	addi	fp,sp,16
 4011b6c:	e13ffe15 	stw	r4,-8(fp)
 4011b70:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4011b74:	e0bffe17 	ldw	r2,-8(fp)
 4011b78:	10000326 	beq	r2,zero,4011b88 <alt_dev_llist_insert+0x2c>
 4011b7c:	e0bffe17 	ldw	r2,-8(fp)
 4011b80:	10800217 	ldw	r2,8(r2)
 4011b84:	1000061e 	bne	r2,zero,4011ba0 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4011b88:	4011b200 	call	4011b20 <alt_get_errno>
 4011b8c:	1007883a 	mov	r3,r2
 4011b90:	00800584 	movi	r2,22
 4011b94:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4011b98:	00bffa84 	movi	r2,-22
 4011b9c:	00001306 	br	4011bec <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4011ba0:	e0bffe17 	ldw	r2,-8(fp)
 4011ba4:	e0ffff17 	ldw	r3,-4(fp)
 4011ba8:	e0fffc15 	stw	r3,-16(fp)
 4011bac:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4011bb0:	e0bffd17 	ldw	r2,-12(fp)
 4011bb4:	e0fffc17 	ldw	r3,-16(fp)
 4011bb8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4011bbc:	e0bffc17 	ldw	r2,-16(fp)
 4011bc0:	10c00017 	ldw	r3,0(r2)
 4011bc4:	e0bffd17 	ldw	r2,-12(fp)
 4011bc8:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4011bcc:	e0bffc17 	ldw	r2,-16(fp)
 4011bd0:	10800017 	ldw	r2,0(r2)
 4011bd4:	e0fffd17 	ldw	r3,-12(fp)
 4011bd8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4011bdc:	e0bffc17 	ldw	r2,-16(fp)
 4011be0:	e0fffd17 	ldw	r3,-12(fp)
 4011be4:	10c00015 	stw	r3,0(r2)

  return 0;  
 4011be8:	0005883a 	mov	r2,zero
}
 4011bec:	e037883a 	mov	sp,fp
 4011bf0:	dfc00117 	ldw	ra,4(sp)
 4011bf4:	df000017 	ldw	fp,0(sp)
 4011bf8:	dec00204 	addi	sp,sp,8
 4011bfc:	f800283a 	ret

04011c00 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4011c00:	defffd04 	addi	sp,sp,-12
 4011c04:	dfc00215 	stw	ra,8(sp)
 4011c08:	df000115 	stw	fp,4(sp)
 4011c0c:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4011c10:	00810074 	movhi	r2,1025
 4011c14:	108b3504 	addi	r2,r2,11476
 4011c18:	e0bfff15 	stw	r2,-4(fp)
 4011c1c:	00000606 	br	4011c38 <_do_ctors+0x38>
        (*ctor) (); 
 4011c20:	e0bfff17 	ldw	r2,-4(fp)
 4011c24:	10800017 	ldw	r2,0(r2)
 4011c28:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4011c2c:	e0bfff17 	ldw	r2,-4(fp)
 4011c30:	10bfff04 	addi	r2,r2,-4
 4011c34:	e0bfff15 	stw	r2,-4(fp)
 4011c38:	e0ffff17 	ldw	r3,-4(fp)
 4011c3c:	00810074 	movhi	r2,1025
 4011c40:	108b3604 	addi	r2,r2,11480
 4011c44:	18bff62e 	bgeu	r3,r2,4011c20 <__alt_data_end+0xfc011c20>
        (*ctor) (); 
}
 4011c48:	0001883a 	nop
 4011c4c:	e037883a 	mov	sp,fp
 4011c50:	dfc00117 	ldw	ra,4(sp)
 4011c54:	df000017 	ldw	fp,0(sp)
 4011c58:	dec00204 	addi	sp,sp,8
 4011c5c:	f800283a 	ret

04011c60 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4011c60:	defffd04 	addi	sp,sp,-12
 4011c64:	dfc00215 	stw	ra,8(sp)
 4011c68:	df000115 	stw	fp,4(sp)
 4011c6c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4011c70:	00810074 	movhi	r2,1025
 4011c74:	108b3504 	addi	r2,r2,11476
 4011c78:	e0bfff15 	stw	r2,-4(fp)
 4011c7c:	00000606 	br	4011c98 <_do_dtors+0x38>
        (*dtor) (); 
 4011c80:	e0bfff17 	ldw	r2,-4(fp)
 4011c84:	10800017 	ldw	r2,0(r2)
 4011c88:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4011c8c:	e0bfff17 	ldw	r2,-4(fp)
 4011c90:	10bfff04 	addi	r2,r2,-4
 4011c94:	e0bfff15 	stw	r2,-4(fp)
 4011c98:	e0ffff17 	ldw	r3,-4(fp)
 4011c9c:	00810074 	movhi	r2,1025
 4011ca0:	108b3604 	addi	r2,r2,11480
 4011ca4:	18bff62e 	bgeu	r3,r2,4011c80 <__alt_data_end+0xfc011c80>
        (*dtor) (); 
}
 4011ca8:	0001883a 	nop
 4011cac:	e037883a 	mov	sp,fp
 4011cb0:	dfc00117 	ldw	ra,4(sp)
 4011cb4:	df000017 	ldw	fp,0(sp)
 4011cb8:	dec00204 	addi	sp,sp,8
 4011cbc:	f800283a 	ret

04011cc0 <alt_flash_open_dev>:
#include "priv/alt_file.h"

ALT_LLIST_HEAD(alt_flash_dev_list);

alt_flash_fd* alt_flash_open_dev(const char* name)
{
 4011cc0:	defffc04 	addi	sp,sp,-16
 4011cc4:	dfc00315 	stw	ra,12(sp)
 4011cc8:	df000215 	stw	fp,8(sp)
 4011ccc:	df000204 	addi	fp,sp,8
 4011cd0:	e13fff15 	stw	r4,-4(fp)
  alt_flash_dev* dev = (alt_flash_dev*)alt_find_dev(name, &alt_flash_dev_list);
 4011cd4:	d1601904 	addi	r5,gp,-32668
 4011cd8:	e13fff17 	ldw	r4,-4(fp)
 4011cdc:	401264c0 	call	401264c <alt_find_dev>
 4011ce0:	e0bffe15 	stw	r2,-8(fp)

  if ((dev) && dev->open)
 4011ce4:	e0bffe17 	ldw	r2,-8(fp)
 4011ce8:	10000926 	beq	r2,zero,4011d10 <alt_flash_open_dev+0x50>
 4011cec:	e0bffe17 	ldw	r2,-8(fp)
 4011cf0:	10800317 	ldw	r2,12(r2)
 4011cf4:	10000626 	beq	r2,zero,4011d10 <alt_flash_open_dev+0x50>
  {
    return dev->open(dev, name);
 4011cf8:	e0bffe17 	ldw	r2,-8(fp)
 4011cfc:	10800317 	ldw	r2,12(r2)
 4011d00:	e17fff17 	ldw	r5,-4(fp)
 4011d04:	e13ffe17 	ldw	r4,-8(fp)
 4011d08:	103ee83a 	callr	r2
 4011d0c:	00000106 	br	4011d14 <alt_flash_open_dev+0x54>
  }

  return dev;
 4011d10:	e0bffe17 	ldw	r2,-8(fp)
}
 4011d14:	e037883a 	mov	sp,fp
 4011d18:	dfc00117 	ldw	ra,4(sp)
 4011d1c:	df000017 	ldw	fp,0(sp)
 4011d20:	dec00204 	addi	sp,sp,8
 4011d24:	f800283a 	ret

04011d28 <alt_flash_close_dev>:

void alt_flash_close_dev(alt_flash_fd* fd)
{
 4011d28:	defffd04 	addi	sp,sp,-12
 4011d2c:	dfc00215 	stw	ra,8(sp)
 4011d30:	df000115 	stw	fp,4(sp)
 4011d34:	df000104 	addi	fp,sp,4
 4011d38:	e13fff15 	stw	r4,-4(fp)
  if (fd && fd->close)
 4011d3c:	e0bfff17 	ldw	r2,-4(fp)
 4011d40:	10000826 	beq	r2,zero,4011d64 <alt_flash_close_dev+0x3c>
 4011d44:	e0bfff17 	ldw	r2,-4(fp)
 4011d48:	10800417 	ldw	r2,16(r2)
 4011d4c:	10000526 	beq	r2,zero,4011d64 <alt_flash_close_dev+0x3c>
  {
    fd->close(fd);
 4011d50:	e0bfff17 	ldw	r2,-4(fp)
 4011d54:	10800417 	ldw	r2,16(r2)
 4011d58:	e13fff17 	ldw	r4,-4(fp)
 4011d5c:	103ee83a 	callr	r2
  }
  return;
 4011d60:	0001883a 	nop
 4011d64:	0001883a 	nop
}
 4011d68:	e037883a 	mov	sp,fp
 4011d6c:	dfc00117 	ldw	ra,4(sp)
 4011d70:	df000017 	ldw	fp,0(sp)
 4011d74:	dec00204 	addi	sp,sp,8
 4011d78:	f800283a 	ret

04011d7c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4011d7c:	defff904 	addi	sp,sp,-28
 4011d80:	dfc00615 	stw	ra,24(sp)
 4011d84:	df000515 	stw	fp,20(sp)
 4011d88:	df000504 	addi	fp,sp,20
 4011d8c:	e13ffc15 	stw	r4,-16(fp)
 4011d90:	e17ffd15 	stw	r5,-12(fp)
 4011d94:	e1bffe15 	stw	r6,-8(fp)
 4011d98:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4011d9c:	e0800217 	ldw	r2,8(fp)
 4011da0:	d8800015 	stw	r2,0(sp)
 4011da4:	e1ffff17 	ldw	r7,-4(fp)
 4011da8:	e1bffe17 	ldw	r6,-8(fp)
 4011dac:	e17ffd17 	ldw	r5,-12(fp)
 4011db0:	e13ffc17 	ldw	r4,-16(fp)
 4011db4:	4011f2c0 	call	4011f2c <alt_iic_isr_register>
}  
 4011db8:	e037883a 	mov	sp,fp
 4011dbc:	dfc00117 	ldw	ra,4(sp)
 4011dc0:	df000017 	ldw	fp,0(sp)
 4011dc4:	dec00204 	addi	sp,sp,8
 4011dc8:	f800283a 	ret

04011dcc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4011dcc:	defff904 	addi	sp,sp,-28
 4011dd0:	df000615 	stw	fp,24(sp)
 4011dd4:	df000604 	addi	fp,sp,24
 4011dd8:	e13ffe15 	stw	r4,-8(fp)
 4011ddc:	e17fff15 	stw	r5,-4(fp)
 4011de0:	e0bfff17 	ldw	r2,-4(fp)
 4011de4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011de8:	0005303a 	rdctl	r2,status
 4011dec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011df0:	e0fffb17 	ldw	r3,-20(fp)
 4011df4:	00bfff84 	movi	r2,-2
 4011df8:	1884703a 	and	r2,r3,r2
 4011dfc:	1001703a 	wrctl	status,r2
  
  return context;
 4011e00:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4011e04:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4011e08:	00c00044 	movi	r3,1
 4011e0c:	e0bffa17 	ldw	r2,-24(fp)
 4011e10:	1884983a 	sll	r2,r3,r2
 4011e14:	1007883a 	mov	r3,r2
 4011e18:	d0a03117 	ldw	r2,-32572(gp)
 4011e1c:	1884b03a 	or	r2,r3,r2
 4011e20:	d0a03115 	stw	r2,-32572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011e24:	d0a03117 	ldw	r2,-32572(gp)
 4011e28:	100170fa 	wrctl	ienable,r2
 4011e2c:	e0bffc17 	ldw	r2,-16(fp)
 4011e30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011e34:	e0bffd17 	ldw	r2,-12(fp)
 4011e38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4011e3c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4011e40:	0001883a 	nop
}
 4011e44:	e037883a 	mov	sp,fp
 4011e48:	df000017 	ldw	fp,0(sp)
 4011e4c:	dec00104 	addi	sp,sp,4
 4011e50:	f800283a 	ret

04011e54 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4011e54:	defff904 	addi	sp,sp,-28
 4011e58:	df000615 	stw	fp,24(sp)
 4011e5c:	df000604 	addi	fp,sp,24
 4011e60:	e13ffe15 	stw	r4,-8(fp)
 4011e64:	e17fff15 	stw	r5,-4(fp)
 4011e68:	e0bfff17 	ldw	r2,-4(fp)
 4011e6c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011e70:	0005303a 	rdctl	r2,status
 4011e74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011e78:	e0fffb17 	ldw	r3,-20(fp)
 4011e7c:	00bfff84 	movi	r2,-2
 4011e80:	1884703a 	and	r2,r3,r2
 4011e84:	1001703a 	wrctl	status,r2
  
  return context;
 4011e88:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4011e8c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4011e90:	00c00044 	movi	r3,1
 4011e94:	e0bffa17 	ldw	r2,-24(fp)
 4011e98:	1884983a 	sll	r2,r3,r2
 4011e9c:	0084303a 	nor	r2,zero,r2
 4011ea0:	1007883a 	mov	r3,r2
 4011ea4:	d0a03117 	ldw	r2,-32572(gp)
 4011ea8:	1884703a 	and	r2,r3,r2
 4011eac:	d0a03115 	stw	r2,-32572(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4011eb0:	d0a03117 	ldw	r2,-32572(gp)
 4011eb4:	100170fa 	wrctl	ienable,r2
 4011eb8:	e0bffc17 	ldw	r2,-16(fp)
 4011ebc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011ec0:	e0bffd17 	ldw	r2,-12(fp)
 4011ec4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4011ec8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4011ecc:	0001883a 	nop
}
 4011ed0:	e037883a 	mov	sp,fp
 4011ed4:	df000017 	ldw	fp,0(sp)
 4011ed8:	dec00104 	addi	sp,sp,4
 4011edc:	f800283a 	ret

04011ee0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4011ee0:	defffc04 	addi	sp,sp,-16
 4011ee4:	df000315 	stw	fp,12(sp)
 4011ee8:	df000304 	addi	fp,sp,12
 4011eec:	e13ffe15 	stw	r4,-8(fp)
 4011ef0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4011ef4:	000530fa 	rdctl	r2,ienable
 4011ef8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4011efc:	00c00044 	movi	r3,1
 4011f00:	e0bfff17 	ldw	r2,-4(fp)
 4011f04:	1884983a 	sll	r2,r3,r2
 4011f08:	1007883a 	mov	r3,r2
 4011f0c:	e0bffd17 	ldw	r2,-12(fp)
 4011f10:	1884703a 	and	r2,r3,r2
 4011f14:	1004c03a 	cmpne	r2,r2,zero
 4011f18:	10803fcc 	andi	r2,r2,255
}
 4011f1c:	e037883a 	mov	sp,fp
 4011f20:	df000017 	ldw	fp,0(sp)
 4011f24:	dec00104 	addi	sp,sp,4
 4011f28:	f800283a 	ret

04011f2c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4011f2c:	defff504 	addi	sp,sp,-44
 4011f30:	dfc00a15 	stw	ra,40(sp)
 4011f34:	df000915 	stw	fp,36(sp)
 4011f38:	df000904 	addi	fp,sp,36
 4011f3c:	e13ffc15 	stw	r4,-16(fp)
 4011f40:	e17ffd15 	stw	r5,-12(fp)
 4011f44:	e1bffe15 	stw	r6,-8(fp)
 4011f48:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4011f4c:	00bffa84 	movi	r2,-22
 4011f50:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4011f54:	e0bffd17 	ldw	r2,-12(fp)
 4011f58:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4011f5c:	e0bff817 	ldw	r2,-32(fp)
 4011f60:	10800808 	cmpgei	r2,r2,32
 4011f64:	1000271e 	bne	r2,zero,4012004 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011f68:	0005303a 	rdctl	r2,status
 4011f6c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011f70:	e0fffb17 	ldw	r3,-20(fp)
 4011f74:	00bfff84 	movi	r2,-2
 4011f78:	1884703a 	and	r2,r3,r2
 4011f7c:	1001703a 	wrctl	status,r2
  
  return context;
 4011f80:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4011f84:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4011f88:	00810074 	movhi	r2,1025
 4011f8c:	10941804 	addi	r2,r2,20576
 4011f90:	e0fff817 	ldw	r3,-32(fp)
 4011f94:	180690fa 	slli	r3,r3,3
 4011f98:	10c5883a 	add	r2,r2,r3
 4011f9c:	e0fffe17 	ldw	r3,-8(fp)
 4011fa0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 4011fa4:	00810074 	movhi	r2,1025
 4011fa8:	10941804 	addi	r2,r2,20576
 4011fac:	e0fff817 	ldw	r3,-32(fp)
 4011fb0:	180690fa 	slli	r3,r3,3
 4011fb4:	10c5883a 	add	r2,r2,r3
 4011fb8:	10800104 	addi	r2,r2,4
 4011fbc:	e0ffff17 	ldw	r3,-4(fp)
 4011fc0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4011fc4:	e0bffe17 	ldw	r2,-8(fp)
 4011fc8:	10000526 	beq	r2,zero,4011fe0 <alt_iic_isr_register+0xb4>
 4011fcc:	e0bff817 	ldw	r2,-32(fp)
 4011fd0:	100b883a 	mov	r5,r2
 4011fd4:	e13ffc17 	ldw	r4,-16(fp)
 4011fd8:	4011dcc0 	call	4011dcc <alt_ic_irq_enable>
 4011fdc:	00000406 	br	4011ff0 <alt_iic_isr_register+0xc4>
 4011fe0:	e0bff817 	ldw	r2,-32(fp)
 4011fe4:	100b883a 	mov	r5,r2
 4011fe8:	e13ffc17 	ldw	r4,-16(fp)
 4011fec:	4011e540 	call	4011e54 <alt_ic_irq_disable>
 4011ff0:	e0bff715 	stw	r2,-36(fp)
 4011ff4:	e0bffa17 	ldw	r2,-24(fp)
 4011ff8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011ffc:	e0bff917 	ldw	r2,-28(fp)
 4012000:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4012004:	e0bff717 	ldw	r2,-36(fp)
}
 4012008:	e037883a 	mov	sp,fp
 401200c:	dfc00117 	ldw	ra,4(sp)
 4012010:	df000017 	ldw	fp,0(sp)
 4012014:	dec00204 	addi	sp,sp,8
 4012018:	f800283a 	ret

0401201c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401201c:	defff804 	addi	sp,sp,-32
 4012020:	dfc00715 	stw	ra,28(sp)
 4012024:	df000615 	stw	fp,24(sp)
 4012028:	dc000515 	stw	r16,20(sp)
 401202c:	df000604 	addi	fp,sp,24
 4012030:	e13ffb15 	stw	r4,-20(fp)
 4012034:	e17ffc15 	stw	r5,-16(fp)
 4012038:	e1bffd15 	stw	r6,-12(fp)
 401203c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4012040:	e1bffe17 	ldw	r6,-8(fp)
 4012044:	e17ffd17 	ldw	r5,-12(fp)
 4012048:	e13ffc17 	ldw	r4,-16(fp)
 401204c:	40122a40 	call	40122a4 <open>
 4012050:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4012054:	e0bffa17 	ldw	r2,-24(fp)
 4012058:	10002216 	blt	r2,zero,40120e4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 401205c:	04010074 	movhi	r16,1025
 4012060:	84133c04 	addi	r16,r16,19696
 4012064:	e0bffa17 	ldw	r2,-24(fp)
 4012068:	01400304 	movi	r5,12
 401206c:	1009883a 	mov	r4,r2
 4012070:	40024600 	call	4002460 <__mulsi3>
 4012074:	8085883a 	add	r2,r16,r2
 4012078:	10c00017 	ldw	r3,0(r2)
 401207c:	e0bffb17 	ldw	r2,-20(fp)
 4012080:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4012084:	04010074 	movhi	r16,1025
 4012088:	84133c04 	addi	r16,r16,19696
 401208c:	e0bffa17 	ldw	r2,-24(fp)
 4012090:	01400304 	movi	r5,12
 4012094:	1009883a 	mov	r4,r2
 4012098:	40024600 	call	4002460 <__mulsi3>
 401209c:	8085883a 	add	r2,r16,r2
 40120a0:	10800104 	addi	r2,r2,4
 40120a4:	10c00017 	ldw	r3,0(r2)
 40120a8:	e0bffb17 	ldw	r2,-20(fp)
 40120ac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40120b0:	04010074 	movhi	r16,1025
 40120b4:	84133c04 	addi	r16,r16,19696
 40120b8:	e0bffa17 	ldw	r2,-24(fp)
 40120bc:	01400304 	movi	r5,12
 40120c0:	1009883a 	mov	r4,r2
 40120c4:	40024600 	call	4002460 <__mulsi3>
 40120c8:	8085883a 	add	r2,r16,r2
 40120cc:	10800204 	addi	r2,r2,8
 40120d0:	10c00017 	ldw	r3,0(r2)
 40120d4:	e0bffb17 	ldw	r2,-20(fp)
 40120d8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 40120dc:	e13ffa17 	ldw	r4,-24(fp)
 40120e0:	40124000 	call	4012400 <alt_release_fd>
  }
} 
 40120e4:	0001883a 	nop
 40120e8:	e6ffff04 	addi	sp,fp,-4
 40120ec:	dfc00217 	ldw	ra,8(sp)
 40120f0:	df000117 	ldw	fp,4(sp)
 40120f4:	dc000017 	ldw	r16,0(sp)
 40120f8:	dec00304 	addi	sp,sp,12
 40120fc:	f800283a 	ret

04012100 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4012100:	defffb04 	addi	sp,sp,-20
 4012104:	dfc00415 	stw	ra,16(sp)
 4012108:	df000315 	stw	fp,12(sp)
 401210c:	df000304 	addi	fp,sp,12
 4012110:	e13ffd15 	stw	r4,-12(fp)
 4012114:	e17ffe15 	stw	r5,-8(fp)
 4012118:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401211c:	01c07fc4 	movi	r7,511
 4012120:	01800044 	movi	r6,1
 4012124:	e17ffd17 	ldw	r5,-12(fp)
 4012128:	01010074 	movhi	r4,1025
 401212c:	21133f04 	addi	r4,r4,19708
 4012130:	401201c0 	call	401201c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4012134:	01c07fc4 	movi	r7,511
 4012138:	000d883a 	mov	r6,zero
 401213c:	e17ffe17 	ldw	r5,-8(fp)
 4012140:	01010074 	movhi	r4,1025
 4012144:	21133c04 	addi	r4,r4,19696
 4012148:	401201c0 	call	401201c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401214c:	01c07fc4 	movi	r7,511
 4012150:	01800044 	movi	r6,1
 4012154:	e17fff17 	ldw	r5,-4(fp)
 4012158:	01010074 	movhi	r4,1025
 401215c:	21134204 	addi	r4,r4,19720
 4012160:	401201c0 	call	401201c <alt_open_fd>
}  
 4012164:	0001883a 	nop
 4012168:	e037883a 	mov	sp,fp
 401216c:	dfc00117 	ldw	ra,4(sp)
 4012170:	df000017 	ldw	fp,0(sp)
 4012174:	dec00204 	addi	sp,sp,8
 4012178:	f800283a 	ret

0401217c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401217c:	defffe04 	addi	sp,sp,-8
 4012180:	dfc00115 	stw	ra,4(sp)
 4012184:	df000015 	stw	fp,0(sp)
 4012188:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401218c:	d0a01817 	ldw	r2,-32672(gp)
 4012190:	10000326 	beq	r2,zero,40121a0 <alt_get_errno+0x24>
 4012194:	d0a01817 	ldw	r2,-32672(gp)
 4012198:	103ee83a 	callr	r2
 401219c:	00000106 	br	40121a4 <alt_get_errno+0x28>
 40121a0:	d0a03004 	addi	r2,gp,-32576
}
 40121a4:	e037883a 	mov	sp,fp
 40121a8:	dfc00117 	ldw	ra,4(sp)
 40121ac:	df000017 	ldw	fp,0(sp)
 40121b0:	dec00204 	addi	sp,sp,8
 40121b4:	f800283a 	ret

040121b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40121b8:	defffb04 	addi	sp,sp,-20
 40121bc:	dfc00415 	stw	ra,16(sp)
 40121c0:	df000315 	stw	fp,12(sp)
 40121c4:	dc000215 	stw	r16,8(sp)
 40121c8:	df000304 	addi	fp,sp,12
 40121cc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40121d0:	e0bffe17 	ldw	r2,-8(fp)
 40121d4:	10800217 	ldw	r2,8(r2)
 40121d8:	10d00034 	orhi	r3,r2,16384
 40121dc:	e0bffe17 	ldw	r2,-8(fp)
 40121e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40121e4:	e03ffd15 	stw	zero,-12(fp)
 40121e8:	00002306 	br	4012278 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40121ec:	04010074 	movhi	r16,1025
 40121f0:	84133c04 	addi	r16,r16,19696
 40121f4:	e0bffd17 	ldw	r2,-12(fp)
 40121f8:	01400304 	movi	r5,12
 40121fc:	1009883a 	mov	r4,r2
 4012200:	40024600 	call	4002460 <__mulsi3>
 4012204:	8085883a 	add	r2,r16,r2
 4012208:	10c00017 	ldw	r3,0(r2)
 401220c:	e0bffe17 	ldw	r2,-8(fp)
 4012210:	10800017 	ldw	r2,0(r2)
 4012214:	1880151e 	bne	r3,r2,401226c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4012218:	04010074 	movhi	r16,1025
 401221c:	84133c04 	addi	r16,r16,19696
 4012220:	e0bffd17 	ldw	r2,-12(fp)
 4012224:	01400304 	movi	r5,12
 4012228:	1009883a 	mov	r4,r2
 401222c:	40024600 	call	4002460 <__mulsi3>
 4012230:	8085883a 	add	r2,r16,r2
 4012234:	10800204 	addi	r2,r2,8
 4012238:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401223c:	10000b0e 	bge	r2,zero,401226c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4012240:	01400304 	movi	r5,12
 4012244:	e13ffd17 	ldw	r4,-12(fp)
 4012248:	40024600 	call	4002460 <__mulsi3>
 401224c:	1007883a 	mov	r3,r2
 4012250:	00810074 	movhi	r2,1025
 4012254:	10933c04 	addi	r2,r2,19696
 4012258:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401225c:	e0bffe17 	ldw	r2,-8(fp)
 4012260:	18800226 	beq	r3,r2,401226c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4012264:	00bffcc4 	movi	r2,-13
 4012268:	00000806 	br	401228c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401226c:	e0bffd17 	ldw	r2,-12(fp)
 4012270:	10800044 	addi	r2,r2,1
 4012274:	e0bffd15 	stw	r2,-12(fp)
 4012278:	d0a01717 	ldw	r2,-32676(gp)
 401227c:	1007883a 	mov	r3,r2
 4012280:	e0bffd17 	ldw	r2,-12(fp)
 4012284:	18bfd92e 	bgeu	r3,r2,40121ec <__alt_data_end+0xfc0121ec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4012288:	0005883a 	mov	r2,zero
}
 401228c:	e6ffff04 	addi	sp,fp,-4
 4012290:	dfc00217 	ldw	ra,8(sp)
 4012294:	df000117 	ldw	fp,4(sp)
 4012298:	dc000017 	ldw	r16,0(sp)
 401229c:	dec00304 	addi	sp,sp,12
 40122a0:	f800283a 	ret

040122a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40122a4:	defff604 	addi	sp,sp,-40
 40122a8:	dfc00915 	stw	ra,36(sp)
 40122ac:	df000815 	stw	fp,32(sp)
 40122b0:	df000804 	addi	fp,sp,32
 40122b4:	e13ffd15 	stw	r4,-12(fp)
 40122b8:	e17ffe15 	stw	r5,-8(fp)
 40122bc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40122c0:	00bfffc4 	movi	r2,-1
 40122c4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 40122c8:	00bffb44 	movi	r2,-19
 40122cc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 40122d0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40122d4:	d1601504 	addi	r5,gp,-32684
 40122d8:	e13ffd17 	ldw	r4,-12(fp)
 40122dc:	401264c0 	call	401264c <alt_find_dev>
 40122e0:	e0bff815 	stw	r2,-32(fp)
 40122e4:	e0bff817 	ldw	r2,-32(fp)
 40122e8:	1000051e 	bne	r2,zero,4012300 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40122ec:	e13ffd17 	ldw	r4,-12(fp)
 40122f0:	40126dc0 	call	40126dc <alt_find_file>
 40122f4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 40122f8:	00800044 	movi	r2,1
 40122fc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4012300:	e0bff817 	ldw	r2,-32(fp)
 4012304:	10002b26 	beq	r2,zero,40123b4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4012308:	e13ff817 	ldw	r4,-32(fp)
 401230c:	40127e40 	call	40127e4 <alt_get_fd>
 4012310:	e0bff915 	stw	r2,-28(fp)
 4012314:	e0bff917 	ldw	r2,-28(fp)
 4012318:	1000030e 	bge	r2,zero,4012328 <open+0x84>
    {
      status = index;
 401231c:	e0bff917 	ldw	r2,-28(fp)
 4012320:	e0bffa15 	stw	r2,-24(fp)
 4012324:	00002506 	br	40123bc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4012328:	01400304 	movi	r5,12
 401232c:	e13ff917 	ldw	r4,-28(fp)
 4012330:	40024600 	call	4002460 <__mulsi3>
 4012334:	1007883a 	mov	r3,r2
 4012338:	00810074 	movhi	r2,1025
 401233c:	10933c04 	addi	r2,r2,19696
 4012340:	1885883a 	add	r2,r3,r2
 4012344:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4012348:	e0fffe17 	ldw	r3,-8(fp)
 401234c:	00900034 	movhi	r2,16384
 4012350:	10bfffc4 	addi	r2,r2,-1
 4012354:	1886703a 	and	r3,r3,r2
 4012358:	e0bffc17 	ldw	r2,-16(fp)
 401235c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4012360:	e0bffb17 	ldw	r2,-20(fp)
 4012364:	1000051e 	bne	r2,zero,401237c <open+0xd8>
 4012368:	e13ffc17 	ldw	r4,-16(fp)
 401236c:	40121b80 	call	40121b8 <alt_file_locked>
 4012370:	e0bffa15 	stw	r2,-24(fp)
 4012374:	e0bffa17 	ldw	r2,-24(fp)
 4012378:	10001016 	blt	r2,zero,40123bc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401237c:	e0bff817 	ldw	r2,-32(fp)
 4012380:	10800317 	ldw	r2,12(r2)
 4012384:	10000826 	beq	r2,zero,40123a8 <open+0x104>
 4012388:	e0bff817 	ldw	r2,-32(fp)
 401238c:	10800317 	ldw	r2,12(r2)
 4012390:	e1ffff17 	ldw	r7,-4(fp)
 4012394:	e1bffe17 	ldw	r6,-8(fp)
 4012398:	e17ffd17 	ldw	r5,-12(fp)
 401239c:	e13ffc17 	ldw	r4,-16(fp)
 40123a0:	103ee83a 	callr	r2
 40123a4:	00000106 	br	40123ac <open+0x108>
 40123a8:	0005883a 	mov	r2,zero
 40123ac:	e0bffa15 	stw	r2,-24(fp)
 40123b0:	00000206 	br	40123bc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40123b4:	00bffb44 	movi	r2,-19
 40123b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40123bc:	e0bffa17 	ldw	r2,-24(fp)
 40123c0:	1000090e 	bge	r2,zero,40123e8 <open+0x144>
  {
    alt_release_fd (index);  
 40123c4:	e13ff917 	ldw	r4,-28(fp)
 40123c8:	40124000 	call	4012400 <alt_release_fd>
    ALT_ERRNO = -status;
 40123cc:	401217c0 	call	401217c <alt_get_errno>
 40123d0:	1007883a 	mov	r3,r2
 40123d4:	e0bffa17 	ldw	r2,-24(fp)
 40123d8:	0085c83a 	sub	r2,zero,r2
 40123dc:	18800015 	stw	r2,0(r3)
    return -1;
 40123e0:	00bfffc4 	movi	r2,-1
 40123e4:	00000106 	br	40123ec <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 40123e8:	e0bff917 	ldw	r2,-28(fp)
}
 40123ec:	e037883a 	mov	sp,fp
 40123f0:	dfc00117 	ldw	ra,4(sp)
 40123f4:	df000017 	ldw	fp,0(sp)
 40123f8:	dec00204 	addi	sp,sp,8
 40123fc:	f800283a 	ret

04012400 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4012400:	defffc04 	addi	sp,sp,-16
 4012404:	dfc00315 	stw	ra,12(sp)
 4012408:	df000215 	stw	fp,8(sp)
 401240c:	dc000115 	stw	r16,4(sp)
 4012410:	df000204 	addi	fp,sp,8
 4012414:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4012418:	e0bffe17 	ldw	r2,-8(fp)
 401241c:	108000d0 	cmplti	r2,r2,3
 4012420:	1000111e 	bne	r2,zero,4012468 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4012424:	04010074 	movhi	r16,1025
 4012428:	84133c04 	addi	r16,r16,19696
 401242c:	e0bffe17 	ldw	r2,-8(fp)
 4012430:	01400304 	movi	r5,12
 4012434:	1009883a 	mov	r4,r2
 4012438:	40024600 	call	4002460 <__mulsi3>
 401243c:	8085883a 	add	r2,r16,r2
 4012440:	10800204 	addi	r2,r2,8
 4012444:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4012448:	04010074 	movhi	r16,1025
 401244c:	84133c04 	addi	r16,r16,19696
 4012450:	e0bffe17 	ldw	r2,-8(fp)
 4012454:	01400304 	movi	r5,12
 4012458:	1009883a 	mov	r4,r2
 401245c:	40024600 	call	4002460 <__mulsi3>
 4012460:	8085883a 	add	r2,r16,r2
 4012464:	10000015 	stw	zero,0(r2)
  }
}
 4012468:	0001883a 	nop
 401246c:	e6ffff04 	addi	sp,fp,-4
 4012470:	dfc00217 	ldw	ra,8(sp)
 4012474:	df000117 	ldw	fp,4(sp)
 4012478:	dc000017 	ldw	r16,0(sp)
 401247c:	dec00304 	addi	sp,sp,12
 4012480:	f800283a 	ret

04012484 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4012484:	defffa04 	addi	sp,sp,-24
 4012488:	df000515 	stw	fp,20(sp)
 401248c:	df000504 	addi	fp,sp,20
 4012490:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4012494:	0005303a 	rdctl	r2,status
 4012498:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401249c:	e0fffc17 	ldw	r3,-16(fp)
 40124a0:	00bfff84 	movi	r2,-2
 40124a4:	1884703a 	and	r2,r3,r2
 40124a8:	1001703a 	wrctl	status,r2
  
  return context;
 40124ac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 40124b0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 40124b4:	e0bfff17 	ldw	r2,-4(fp)
 40124b8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 40124bc:	e0bffd17 	ldw	r2,-12(fp)
 40124c0:	10800017 	ldw	r2,0(r2)
 40124c4:	e0fffd17 	ldw	r3,-12(fp)
 40124c8:	18c00117 	ldw	r3,4(r3)
 40124cc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 40124d0:	e0bffd17 	ldw	r2,-12(fp)
 40124d4:	10800117 	ldw	r2,4(r2)
 40124d8:	e0fffd17 	ldw	r3,-12(fp)
 40124dc:	18c00017 	ldw	r3,0(r3)
 40124e0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 40124e4:	e0bffd17 	ldw	r2,-12(fp)
 40124e8:	e0fffd17 	ldw	r3,-12(fp)
 40124ec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 40124f0:	e0bffd17 	ldw	r2,-12(fp)
 40124f4:	e0fffd17 	ldw	r3,-12(fp)
 40124f8:	10c00015 	stw	r3,0(r2)
 40124fc:	e0bffb17 	ldw	r2,-20(fp)
 4012500:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4012504:	e0bffe17 	ldw	r2,-8(fp)
 4012508:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 401250c:	0001883a 	nop
 4012510:	e037883a 	mov	sp,fp
 4012514:	df000017 	ldw	fp,0(sp)
 4012518:	dec00104 	addi	sp,sp,4
 401251c:	f800283a 	ret

04012520 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4012520:	defffb04 	addi	sp,sp,-20
 4012524:	dfc00415 	stw	ra,16(sp)
 4012528:	df000315 	stw	fp,12(sp)
 401252c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4012530:	d0a01b17 	ldw	r2,-32660(gp)
 4012534:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4012538:	d0a03617 	ldw	r2,-32552(gp)
 401253c:	10800044 	addi	r2,r2,1
 4012540:	d0a03615 	stw	r2,-32552(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4012544:	00002e06 	br	4012600 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4012548:	e0bffd17 	ldw	r2,-12(fp)
 401254c:	10800017 	ldw	r2,0(r2)
 4012550:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4012554:	e0bffd17 	ldw	r2,-12(fp)
 4012558:	10800403 	ldbu	r2,16(r2)
 401255c:	10803fcc 	andi	r2,r2,255
 4012560:	10000426 	beq	r2,zero,4012574 <alt_tick+0x54>
 4012564:	d0a03617 	ldw	r2,-32552(gp)
 4012568:	1000021e 	bne	r2,zero,4012574 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 401256c:	e0bffd17 	ldw	r2,-12(fp)
 4012570:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4012574:	e0bffd17 	ldw	r2,-12(fp)
 4012578:	10800217 	ldw	r2,8(r2)
 401257c:	d0e03617 	ldw	r3,-32552(gp)
 4012580:	18801d36 	bltu	r3,r2,40125f8 <alt_tick+0xd8>
 4012584:	e0bffd17 	ldw	r2,-12(fp)
 4012588:	10800403 	ldbu	r2,16(r2)
 401258c:	10803fcc 	andi	r2,r2,255
 4012590:	1000191e 	bne	r2,zero,40125f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4012594:	e0bffd17 	ldw	r2,-12(fp)
 4012598:	10800317 	ldw	r2,12(r2)
 401259c:	e0fffd17 	ldw	r3,-12(fp)
 40125a0:	18c00517 	ldw	r3,20(r3)
 40125a4:	1809883a 	mov	r4,r3
 40125a8:	103ee83a 	callr	r2
 40125ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 40125b0:	e0bfff17 	ldw	r2,-4(fp)
 40125b4:	1000031e 	bne	r2,zero,40125c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 40125b8:	e13ffd17 	ldw	r4,-12(fp)
 40125bc:	40124840 	call	4012484 <alt_alarm_stop>
 40125c0:	00000d06 	br	40125f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 40125c4:	e0bffd17 	ldw	r2,-12(fp)
 40125c8:	10c00217 	ldw	r3,8(r2)
 40125cc:	e0bfff17 	ldw	r2,-4(fp)
 40125d0:	1887883a 	add	r3,r3,r2
 40125d4:	e0bffd17 	ldw	r2,-12(fp)
 40125d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 40125dc:	e0bffd17 	ldw	r2,-12(fp)
 40125e0:	10c00217 	ldw	r3,8(r2)
 40125e4:	d0a03617 	ldw	r2,-32552(gp)
 40125e8:	1880032e 	bgeu	r3,r2,40125f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 40125ec:	e0bffd17 	ldw	r2,-12(fp)
 40125f0:	00c00044 	movi	r3,1
 40125f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40125f8:	e0bffe17 	ldw	r2,-8(fp)
 40125fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4012600:	e0fffd17 	ldw	r3,-12(fp)
 4012604:	d0a01b04 	addi	r2,gp,-32660
 4012608:	18bfcf1e 	bne	r3,r2,4012548 <__alt_data_end+0xfc012548>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 401260c:	0001883a 	nop
}
 4012610:	0001883a 	nop
 4012614:	e037883a 	mov	sp,fp
 4012618:	dfc00117 	ldw	ra,4(sp)
 401261c:	df000017 	ldw	fp,0(sp)
 4012620:	dec00204 	addi	sp,sp,8
 4012624:	f800283a 	ret

04012628 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4012628:	deffff04 	addi	sp,sp,-4
 401262c:	df000015 	stw	fp,0(sp)
 4012630:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4012634:	000170fa 	wrctl	ienable,zero
}
 4012638:	0001883a 	nop
 401263c:	e037883a 	mov	sp,fp
 4012640:	df000017 	ldw	fp,0(sp)
 4012644:	dec00104 	addi	sp,sp,4
 4012648:	f800283a 	ret

0401264c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401264c:	defffa04 	addi	sp,sp,-24
 4012650:	dfc00515 	stw	ra,20(sp)
 4012654:	df000415 	stw	fp,16(sp)
 4012658:	df000404 	addi	fp,sp,16
 401265c:	e13ffe15 	stw	r4,-8(fp)
 4012660:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4012664:	e0bfff17 	ldw	r2,-4(fp)
 4012668:	10800017 	ldw	r2,0(r2)
 401266c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4012670:	e13ffe17 	ldw	r4,-8(fp)
 4012674:	400beb80 	call	400beb8 <strlen>
 4012678:	10800044 	addi	r2,r2,1
 401267c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4012680:	00000d06 	br	40126b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4012684:	e0bffc17 	ldw	r2,-16(fp)
 4012688:	10800217 	ldw	r2,8(r2)
 401268c:	e0fffd17 	ldw	r3,-12(fp)
 4012690:	180d883a 	mov	r6,r3
 4012694:	e17ffe17 	ldw	r5,-8(fp)
 4012698:	1009883a 	mov	r4,r2
 401269c:	40129900 	call	4012990 <memcmp>
 40126a0:	1000021e 	bne	r2,zero,40126ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40126a4:	e0bffc17 	ldw	r2,-16(fp)
 40126a8:	00000706 	br	40126c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40126ac:	e0bffc17 	ldw	r2,-16(fp)
 40126b0:	10800017 	ldw	r2,0(r2)
 40126b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40126b8:	e0fffc17 	ldw	r3,-16(fp)
 40126bc:	e0bfff17 	ldw	r2,-4(fp)
 40126c0:	18bff01e 	bne	r3,r2,4012684 <__alt_data_end+0xfc012684>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40126c4:	0005883a 	mov	r2,zero
}
 40126c8:	e037883a 	mov	sp,fp
 40126cc:	dfc00117 	ldw	ra,4(sp)
 40126d0:	df000017 	ldw	fp,0(sp)
 40126d4:	dec00204 	addi	sp,sp,8
 40126d8:	f800283a 	ret

040126dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40126dc:	defffb04 	addi	sp,sp,-20
 40126e0:	dfc00415 	stw	ra,16(sp)
 40126e4:	df000315 	stw	fp,12(sp)
 40126e8:	df000304 	addi	fp,sp,12
 40126ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40126f0:	d0a01317 	ldw	r2,-32692(gp)
 40126f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40126f8:	00003106 	br	40127c0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 40126fc:	e0bffd17 	ldw	r2,-12(fp)
 4012700:	10800217 	ldw	r2,8(r2)
 4012704:	1009883a 	mov	r4,r2
 4012708:	400beb80 	call	400beb8 <strlen>
 401270c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4012710:	e0bffd17 	ldw	r2,-12(fp)
 4012714:	10c00217 	ldw	r3,8(r2)
 4012718:	e0bffe17 	ldw	r2,-8(fp)
 401271c:	10bfffc4 	addi	r2,r2,-1
 4012720:	1885883a 	add	r2,r3,r2
 4012724:	10800003 	ldbu	r2,0(r2)
 4012728:	10803fcc 	andi	r2,r2,255
 401272c:	1080201c 	xori	r2,r2,128
 4012730:	10bfe004 	addi	r2,r2,-128
 4012734:	10800bd8 	cmpnei	r2,r2,47
 4012738:	1000031e 	bne	r2,zero,4012748 <alt_find_file+0x6c>
    {
      len -= 1;
 401273c:	e0bffe17 	ldw	r2,-8(fp)
 4012740:	10bfffc4 	addi	r2,r2,-1
 4012744:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4012748:	e0bffe17 	ldw	r2,-8(fp)
 401274c:	e0ffff17 	ldw	r3,-4(fp)
 4012750:	1885883a 	add	r2,r3,r2
 4012754:	10800003 	ldbu	r2,0(r2)
 4012758:	10803fcc 	andi	r2,r2,255
 401275c:	1080201c 	xori	r2,r2,128
 4012760:	10bfe004 	addi	r2,r2,-128
 4012764:	10800be0 	cmpeqi	r2,r2,47
 4012768:	1000081e 	bne	r2,zero,401278c <alt_find_file+0xb0>
 401276c:	e0bffe17 	ldw	r2,-8(fp)
 4012770:	e0ffff17 	ldw	r3,-4(fp)
 4012774:	1885883a 	add	r2,r3,r2
 4012778:	10800003 	ldbu	r2,0(r2)
 401277c:	10803fcc 	andi	r2,r2,255
 4012780:	1080201c 	xori	r2,r2,128
 4012784:	10bfe004 	addi	r2,r2,-128
 4012788:	10000a1e 	bne	r2,zero,40127b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401278c:	e0bffd17 	ldw	r2,-12(fp)
 4012790:	10800217 	ldw	r2,8(r2)
 4012794:	e0fffe17 	ldw	r3,-8(fp)
 4012798:	180d883a 	mov	r6,r3
 401279c:	e17fff17 	ldw	r5,-4(fp)
 40127a0:	1009883a 	mov	r4,r2
 40127a4:	40129900 	call	4012990 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40127a8:	1000021e 	bne	r2,zero,40127b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40127ac:	e0bffd17 	ldw	r2,-12(fp)
 40127b0:	00000706 	br	40127d0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 40127b4:	e0bffd17 	ldw	r2,-12(fp)
 40127b8:	10800017 	ldw	r2,0(r2)
 40127bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40127c0:	e0fffd17 	ldw	r3,-12(fp)
 40127c4:	d0a01304 	addi	r2,gp,-32692
 40127c8:	18bfcc1e 	bne	r3,r2,40126fc <__alt_data_end+0xfc0126fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40127cc:	0005883a 	mov	r2,zero
}
 40127d0:	e037883a 	mov	sp,fp
 40127d4:	dfc00117 	ldw	ra,4(sp)
 40127d8:	df000017 	ldw	fp,0(sp)
 40127dc:	dec00204 	addi	sp,sp,8
 40127e0:	f800283a 	ret

040127e4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40127e4:	defffa04 	addi	sp,sp,-24
 40127e8:	dfc00515 	stw	ra,20(sp)
 40127ec:	df000415 	stw	fp,16(sp)
 40127f0:	dc000315 	stw	r16,12(sp)
 40127f4:	df000404 	addi	fp,sp,16
 40127f8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 40127fc:	00bffa04 	movi	r2,-24
 4012800:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4012804:	e03ffc15 	stw	zero,-16(fp)
 4012808:	00001d06 	br	4012880 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 401280c:	04010074 	movhi	r16,1025
 4012810:	84133c04 	addi	r16,r16,19696
 4012814:	e0bffc17 	ldw	r2,-16(fp)
 4012818:	01400304 	movi	r5,12
 401281c:	1009883a 	mov	r4,r2
 4012820:	40024600 	call	4002460 <__mulsi3>
 4012824:	8085883a 	add	r2,r16,r2
 4012828:	10800017 	ldw	r2,0(r2)
 401282c:	1000111e 	bne	r2,zero,4012874 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4012830:	04010074 	movhi	r16,1025
 4012834:	84133c04 	addi	r16,r16,19696
 4012838:	e0bffc17 	ldw	r2,-16(fp)
 401283c:	01400304 	movi	r5,12
 4012840:	1009883a 	mov	r4,r2
 4012844:	40024600 	call	4002460 <__mulsi3>
 4012848:	8085883a 	add	r2,r16,r2
 401284c:	e0fffe17 	ldw	r3,-8(fp)
 4012850:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4012854:	d0e01717 	ldw	r3,-32676(gp)
 4012858:	e0bffc17 	ldw	r2,-16(fp)
 401285c:	1880020e 	bge	r3,r2,4012868 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4012860:	e0bffc17 	ldw	r2,-16(fp)
 4012864:	d0a01715 	stw	r2,-32676(gp)
      }
      rc = i;
 4012868:	e0bffc17 	ldw	r2,-16(fp)
 401286c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4012870:	00000606 	br	401288c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4012874:	e0bffc17 	ldw	r2,-16(fp)
 4012878:	10800044 	addi	r2,r2,1
 401287c:	e0bffc15 	stw	r2,-16(fp)
 4012880:	e0bffc17 	ldw	r2,-16(fp)
 4012884:	10800810 	cmplti	r2,r2,32
 4012888:	103fe01e 	bne	r2,zero,401280c <__alt_data_end+0xfc01280c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 401288c:	e0bffd17 	ldw	r2,-12(fp)
}
 4012890:	e6ffff04 	addi	sp,fp,-4
 4012894:	dfc00217 	ldw	ra,8(sp)
 4012898:	df000117 	ldw	fp,4(sp)
 401289c:	dc000017 	ldw	r16,0(sp)
 40128a0:	dec00304 	addi	sp,sp,12
 40128a4:	f800283a 	ret

040128a8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 40128a8:	defffe04 	addi	sp,sp,-8
 40128ac:	df000115 	stw	fp,4(sp)
 40128b0:	df000104 	addi	fp,sp,4
 40128b4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 40128b8:	e0bfff17 	ldw	r2,-4(fp)
 40128bc:	10bffe84 	addi	r2,r2,-6
 40128c0:	10c00428 	cmpgeui	r3,r2,16
 40128c4:	18001a1e 	bne	r3,zero,4012930 <alt_exception_cause_generated_bad_addr+0x88>
 40128c8:	100690ba 	slli	r3,r2,2
 40128cc:	00810074 	movhi	r2,1025
 40128d0:	108a3804 	addi	r2,r2,10464
 40128d4:	1885883a 	add	r2,r3,r2
 40128d8:	10800017 	ldw	r2,0(r2)
 40128dc:	1000683a 	jmp	r2
 40128e0:	04012920 	cmpeqi	r16,zero,1188
 40128e4:	04012920 	cmpeqi	r16,zero,1188
 40128e8:	04012930 	cmpltui	r16,zero,1188
 40128ec:	04012930 	cmpltui	r16,zero,1188
 40128f0:	04012930 	cmpltui	r16,zero,1188
 40128f4:	04012920 	cmpeqi	r16,zero,1188
 40128f8:	04012928 	cmpgeui	r16,zero,1188
 40128fc:	04012930 	cmpltui	r16,zero,1188
 4012900:	04012920 	cmpeqi	r16,zero,1188
 4012904:	04012920 	cmpeqi	r16,zero,1188
 4012908:	04012930 	cmpltui	r16,zero,1188
 401290c:	04012920 	cmpeqi	r16,zero,1188
 4012910:	04012928 	cmpgeui	r16,zero,1188
 4012914:	04012930 	cmpltui	r16,zero,1188
 4012918:	04012930 	cmpltui	r16,zero,1188
 401291c:	04012920 	cmpeqi	r16,zero,1188
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4012920:	00800044 	movi	r2,1
 4012924:	00000306 	br	4012934 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4012928:	0005883a 	mov	r2,zero
 401292c:	00000106 	br	4012934 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4012930:	0005883a 	mov	r2,zero
  }
}
 4012934:	e037883a 	mov	sp,fp
 4012938:	df000017 	ldw	fp,0(sp)
 401293c:	dec00104 	addi	sp,sp,4
 4012940:	f800283a 	ret

04012944 <atexit>:
 4012944:	200b883a 	mov	r5,r4
 4012948:	000f883a 	mov	r7,zero
 401294c:	000d883a 	mov	r6,zero
 4012950:	0009883a 	mov	r4,zero
 4012954:	4012a0c1 	jmpi	4012a0c <__register_exitproc>

04012958 <exit>:
 4012958:	defffe04 	addi	sp,sp,-8
 401295c:	000b883a 	mov	r5,zero
 4012960:	dc000015 	stw	r16,0(sp)
 4012964:	dfc00115 	stw	ra,4(sp)
 4012968:	2021883a 	mov	r16,r4
 401296c:	4012b240 	call	4012b24 <__call_exitprocs>
 4012970:	00810074 	movhi	r2,1025
 4012974:	1093a604 	addi	r2,r2,20120
 4012978:	11000017 	ldw	r4,0(r2)
 401297c:	20800f17 	ldw	r2,60(r4)
 4012980:	10000126 	beq	r2,zero,4012988 <exit+0x30>
 4012984:	103ee83a 	callr	r2
 4012988:	8009883a 	mov	r4,r16
 401298c:	4012ca40 	call	4012ca4 <_exit>

04012990 <memcmp>:
 4012990:	01c000c4 	movi	r7,3
 4012994:	3980192e 	bgeu	r7,r6,40129fc <memcmp+0x6c>
 4012998:	2144b03a 	or	r2,r4,r5
 401299c:	11c4703a 	and	r2,r2,r7
 40129a0:	10000f26 	beq	r2,zero,40129e0 <memcmp+0x50>
 40129a4:	20800003 	ldbu	r2,0(r4)
 40129a8:	28c00003 	ldbu	r3,0(r5)
 40129ac:	10c0151e 	bne	r2,r3,4012a04 <memcmp+0x74>
 40129b0:	31bfff84 	addi	r6,r6,-2
 40129b4:	01ffffc4 	movi	r7,-1
 40129b8:	00000406 	br	40129cc <memcmp+0x3c>
 40129bc:	20800003 	ldbu	r2,0(r4)
 40129c0:	28c00003 	ldbu	r3,0(r5)
 40129c4:	31bfffc4 	addi	r6,r6,-1
 40129c8:	10c00e1e 	bne	r2,r3,4012a04 <memcmp+0x74>
 40129cc:	21000044 	addi	r4,r4,1
 40129d0:	29400044 	addi	r5,r5,1
 40129d4:	31fff91e 	bne	r6,r7,40129bc <__alt_data_end+0xfc0129bc>
 40129d8:	0005883a 	mov	r2,zero
 40129dc:	f800283a 	ret
 40129e0:	20c00017 	ldw	r3,0(r4)
 40129e4:	28800017 	ldw	r2,0(r5)
 40129e8:	18bfee1e 	bne	r3,r2,40129a4 <__alt_data_end+0xfc0129a4>
 40129ec:	31bfff04 	addi	r6,r6,-4
 40129f0:	21000104 	addi	r4,r4,4
 40129f4:	29400104 	addi	r5,r5,4
 40129f8:	39bff936 	bltu	r7,r6,40129e0 <__alt_data_end+0xfc0129e0>
 40129fc:	303fe91e 	bne	r6,zero,40129a4 <__alt_data_end+0xfc0129a4>
 4012a00:	003ff506 	br	40129d8 <__alt_data_end+0xfc0129d8>
 4012a04:	10c5c83a 	sub	r2,r2,r3
 4012a08:	f800283a 	ret

04012a0c <__register_exitproc>:
 4012a0c:	defffa04 	addi	sp,sp,-24
 4012a10:	dc000315 	stw	r16,12(sp)
 4012a14:	04010074 	movhi	r16,1025
 4012a18:	8413a604 	addi	r16,r16,20120
 4012a1c:	80c00017 	ldw	r3,0(r16)
 4012a20:	dc400415 	stw	r17,16(sp)
 4012a24:	dfc00515 	stw	ra,20(sp)
 4012a28:	18805217 	ldw	r2,328(r3)
 4012a2c:	2023883a 	mov	r17,r4
 4012a30:	10003726 	beq	r2,zero,4012b10 <__register_exitproc+0x104>
 4012a34:	10c00117 	ldw	r3,4(r2)
 4012a38:	010007c4 	movi	r4,31
 4012a3c:	20c00e16 	blt	r4,r3,4012a78 <__register_exitproc+0x6c>
 4012a40:	1a000044 	addi	r8,r3,1
 4012a44:	8800221e 	bne	r17,zero,4012ad0 <__register_exitproc+0xc4>
 4012a48:	18c00084 	addi	r3,r3,2
 4012a4c:	18c7883a 	add	r3,r3,r3
 4012a50:	18c7883a 	add	r3,r3,r3
 4012a54:	12000115 	stw	r8,4(r2)
 4012a58:	10c7883a 	add	r3,r2,r3
 4012a5c:	19400015 	stw	r5,0(r3)
 4012a60:	0005883a 	mov	r2,zero
 4012a64:	dfc00517 	ldw	ra,20(sp)
 4012a68:	dc400417 	ldw	r17,16(sp)
 4012a6c:	dc000317 	ldw	r16,12(sp)
 4012a70:	dec00604 	addi	sp,sp,24
 4012a74:	f800283a 	ret
 4012a78:	00800034 	movhi	r2,0
 4012a7c:	10800004 	addi	r2,r2,0
 4012a80:	10002626 	beq	r2,zero,4012b1c <__register_exitproc+0x110>
 4012a84:	01006404 	movi	r4,400
 4012a88:	d9400015 	stw	r5,0(sp)
 4012a8c:	d9800115 	stw	r6,4(sp)
 4012a90:	d9c00215 	stw	r7,8(sp)
 4012a94:	00000000 	call	0 <__alt_mem_onchip_flash_data-0x2000000>
 4012a98:	d9400017 	ldw	r5,0(sp)
 4012a9c:	d9800117 	ldw	r6,4(sp)
 4012aa0:	d9c00217 	ldw	r7,8(sp)
 4012aa4:	10001d26 	beq	r2,zero,4012b1c <__register_exitproc+0x110>
 4012aa8:	81000017 	ldw	r4,0(r16)
 4012aac:	10000115 	stw	zero,4(r2)
 4012ab0:	02000044 	movi	r8,1
 4012ab4:	22405217 	ldw	r9,328(r4)
 4012ab8:	0007883a 	mov	r3,zero
 4012abc:	12400015 	stw	r9,0(r2)
 4012ac0:	20805215 	stw	r2,328(r4)
 4012ac4:	10006215 	stw	zero,392(r2)
 4012ac8:	10006315 	stw	zero,396(r2)
 4012acc:	883fde26 	beq	r17,zero,4012a48 <__alt_data_end+0xfc012a48>
 4012ad0:	18c9883a 	add	r4,r3,r3
 4012ad4:	2109883a 	add	r4,r4,r4
 4012ad8:	1109883a 	add	r4,r2,r4
 4012adc:	21802215 	stw	r6,136(r4)
 4012ae0:	01800044 	movi	r6,1
 4012ae4:	12406217 	ldw	r9,392(r2)
 4012ae8:	30cc983a 	sll	r6,r6,r3
 4012aec:	4992b03a 	or	r9,r9,r6
 4012af0:	12406215 	stw	r9,392(r2)
 4012af4:	21c04215 	stw	r7,264(r4)
 4012af8:	01000084 	movi	r4,2
 4012afc:	893fd21e 	bne	r17,r4,4012a48 <__alt_data_end+0xfc012a48>
 4012b00:	11006317 	ldw	r4,396(r2)
 4012b04:	218cb03a 	or	r6,r4,r6
 4012b08:	11806315 	stw	r6,396(r2)
 4012b0c:	003fce06 	br	4012a48 <__alt_data_end+0xfc012a48>
 4012b10:	18805304 	addi	r2,r3,332
 4012b14:	18805215 	stw	r2,328(r3)
 4012b18:	003fc606 	br	4012a34 <__alt_data_end+0xfc012a34>
 4012b1c:	00bfffc4 	movi	r2,-1
 4012b20:	003fd006 	br	4012a64 <__alt_data_end+0xfc012a64>

04012b24 <__call_exitprocs>:
 4012b24:	defff504 	addi	sp,sp,-44
 4012b28:	df000915 	stw	fp,36(sp)
 4012b2c:	dd400615 	stw	r21,24(sp)
 4012b30:	dc800315 	stw	r18,12(sp)
 4012b34:	dfc00a15 	stw	ra,40(sp)
 4012b38:	ddc00815 	stw	r23,32(sp)
 4012b3c:	dd800715 	stw	r22,28(sp)
 4012b40:	dd000515 	stw	r20,20(sp)
 4012b44:	dcc00415 	stw	r19,16(sp)
 4012b48:	dc400215 	stw	r17,8(sp)
 4012b4c:	dc000115 	stw	r16,4(sp)
 4012b50:	d9000015 	stw	r4,0(sp)
 4012b54:	2839883a 	mov	fp,r5
 4012b58:	04800044 	movi	r18,1
 4012b5c:	057fffc4 	movi	r21,-1
 4012b60:	00810074 	movhi	r2,1025
 4012b64:	1093a604 	addi	r2,r2,20120
 4012b68:	12000017 	ldw	r8,0(r2)
 4012b6c:	45005217 	ldw	r20,328(r8)
 4012b70:	44c05204 	addi	r19,r8,328
 4012b74:	a0001c26 	beq	r20,zero,4012be8 <__call_exitprocs+0xc4>
 4012b78:	a0800117 	ldw	r2,4(r20)
 4012b7c:	15ffffc4 	addi	r23,r2,-1
 4012b80:	b8000d16 	blt	r23,zero,4012bb8 <__call_exitprocs+0x94>
 4012b84:	14000044 	addi	r16,r2,1
 4012b88:	8421883a 	add	r16,r16,r16
 4012b8c:	8421883a 	add	r16,r16,r16
 4012b90:	84402004 	addi	r17,r16,128
 4012b94:	a463883a 	add	r17,r20,r17
 4012b98:	a421883a 	add	r16,r20,r16
 4012b9c:	e0001e26 	beq	fp,zero,4012c18 <__call_exitprocs+0xf4>
 4012ba0:	80804017 	ldw	r2,256(r16)
 4012ba4:	e0801c26 	beq	fp,r2,4012c18 <__call_exitprocs+0xf4>
 4012ba8:	bdffffc4 	addi	r23,r23,-1
 4012bac:	843fff04 	addi	r16,r16,-4
 4012bb0:	8c7fff04 	addi	r17,r17,-4
 4012bb4:	bd7ff91e 	bne	r23,r21,4012b9c <__alt_data_end+0xfc012b9c>
 4012bb8:	00800034 	movhi	r2,0
 4012bbc:	10800004 	addi	r2,r2,0
 4012bc0:	10000926 	beq	r2,zero,4012be8 <__call_exitprocs+0xc4>
 4012bc4:	a0800117 	ldw	r2,4(r20)
 4012bc8:	1000301e 	bne	r2,zero,4012c8c <__call_exitprocs+0x168>
 4012bcc:	a0800017 	ldw	r2,0(r20)
 4012bd0:	10003226 	beq	r2,zero,4012c9c <__call_exitprocs+0x178>
 4012bd4:	a009883a 	mov	r4,r20
 4012bd8:	98800015 	stw	r2,0(r19)
 4012bdc:	00000000 	call	0 <__alt_mem_onchip_flash_data-0x2000000>
 4012be0:	9d000017 	ldw	r20,0(r19)
 4012be4:	a03fe41e 	bne	r20,zero,4012b78 <__alt_data_end+0xfc012b78>
 4012be8:	dfc00a17 	ldw	ra,40(sp)
 4012bec:	df000917 	ldw	fp,36(sp)
 4012bf0:	ddc00817 	ldw	r23,32(sp)
 4012bf4:	dd800717 	ldw	r22,28(sp)
 4012bf8:	dd400617 	ldw	r21,24(sp)
 4012bfc:	dd000517 	ldw	r20,20(sp)
 4012c00:	dcc00417 	ldw	r19,16(sp)
 4012c04:	dc800317 	ldw	r18,12(sp)
 4012c08:	dc400217 	ldw	r17,8(sp)
 4012c0c:	dc000117 	ldw	r16,4(sp)
 4012c10:	dec00b04 	addi	sp,sp,44
 4012c14:	f800283a 	ret
 4012c18:	a0800117 	ldw	r2,4(r20)
 4012c1c:	80c00017 	ldw	r3,0(r16)
 4012c20:	10bfffc4 	addi	r2,r2,-1
 4012c24:	15c01426 	beq	r2,r23,4012c78 <__call_exitprocs+0x154>
 4012c28:	80000015 	stw	zero,0(r16)
 4012c2c:	183fde26 	beq	r3,zero,4012ba8 <__alt_data_end+0xfc012ba8>
 4012c30:	95c8983a 	sll	r4,r18,r23
 4012c34:	a0806217 	ldw	r2,392(r20)
 4012c38:	a5800117 	ldw	r22,4(r20)
 4012c3c:	2084703a 	and	r2,r4,r2
 4012c40:	10000b26 	beq	r2,zero,4012c70 <__call_exitprocs+0x14c>
 4012c44:	a0806317 	ldw	r2,396(r20)
 4012c48:	2088703a 	and	r4,r4,r2
 4012c4c:	20000c1e 	bne	r4,zero,4012c80 <__call_exitprocs+0x15c>
 4012c50:	89400017 	ldw	r5,0(r17)
 4012c54:	d9000017 	ldw	r4,0(sp)
 4012c58:	183ee83a 	callr	r3
 4012c5c:	a0800117 	ldw	r2,4(r20)
 4012c60:	15bfbf1e 	bne	r2,r22,4012b60 <__alt_data_end+0xfc012b60>
 4012c64:	98800017 	ldw	r2,0(r19)
 4012c68:	153fcf26 	beq	r2,r20,4012ba8 <__alt_data_end+0xfc012ba8>
 4012c6c:	003fbc06 	br	4012b60 <__alt_data_end+0xfc012b60>
 4012c70:	183ee83a 	callr	r3
 4012c74:	003ff906 	br	4012c5c <__alt_data_end+0xfc012c5c>
 4012c78:	a5c00115 	stw	r23,4(r20)
 4012c7c:	003feb06 	br	4012c2c <__alt_data_end+0xfc012c2c>
 4012c80:	89000017 	ldw	r4,0(r17)
 4012c84:	183ee83a 	callr	r3
 4012c88:	003ff406 	br	4012c5c <__alt_data_end+0xfc012c5c>
 4012c8c:	a0800017 	ldw	r2,0(r20)
 4012c90:	a027883a 	mov	r19,r20
 4012c94:	1029883a 	mov	r20,r2
 4012c98:	003fb606 	br	4012b74 <__alt_data_end+0xfc012b74>
 4012c9c:	0005883a 	mov	r2,zero
 4012ca0:	003ffb06 	br	4012c90 <__alt_data_end+0xfc012c90>

04012ca4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4012ca4:	defffd04 	addi	sp,sp,-12
 4012ca8:	df000215 	stw	fp,8(sp)
 4012cac:	df000204 	addi	fp,sp,8
 4012cb0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4012cb4:	0001883a 	nop
 4012cb8:	e0bfff17 	ldw	r2,-4(fp)
 4012cbc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4012cc0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4012cc4:	10000226 	beq	r2,zero,4012cd0 <_exit+0x2c>
    ALT_SIM_FAIL();
 4012cc8:	002af070 	cmpltui	zero,zero,43969
 4012ccc:	00000106 	br	4012cd4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4012cd0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4012cd4:	003fff06 	br	4012cd4 <__alt_data_end+0xfc012cd4>
