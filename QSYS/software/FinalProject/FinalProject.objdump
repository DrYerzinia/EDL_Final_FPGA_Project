
FinalProject.elf:     file format elf32-littlenios2
FinalProject.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000120f4 memsz 0x000120f4 flags r-x
    LOAD off    0x00013114 vaddr 0x04012114 paddr 0x04013ebc align 2**12
         filesz 0x00001da8 memsz 0x00001da8 flags rw-
    LOAD off    0x00015c64 vaddr 0x04015c64 paddr 0x04015c64 align 2**12
         filesz 0x00000000 memsz 0x0000027c flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00011ba8  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000033c  04011dd8  04011dd8  00012dd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001da8  04012114  04013ebc  00013114  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0000027c  04015c64  04015c64  00015c64  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  04015ee0  04015ee0  00014ebc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00014ebc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000cf8  00000000  00000000  00014ee0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000190a5  00000000  00000000  00015bd8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000739e  00000000  00000000  0002ec7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000992e  00000000  00000000  0003601b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  0000201c  00000000  00000000  0003f94c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000041c1  00000000  00000000  00041968  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00018088  00000000  00000000  00045b29  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  0005dbb4  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001960  00000000  00000000  0005dbf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00062c3d  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  00062c40  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00062c43  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00062c44  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  00062c45  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  00062c4e  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  00062c57  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  00062c60  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  00062c69  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00093228  00000000  00000000  00062ca2  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
04011dd8 l    d  .rodata	00000000 .rodata
04012114 l    d  .rwdata	00000000 .rwdata
04015c64 l    d  .bss	00000000 .bss
04015ee0 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FinalProject_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 hello_world.c
0400026c l     F .text	00000050 jtag_kiss_send
040002bc l     F .text	0000006c camera_dma_enable
04000328 l     F .text	000000a4 swap_buffer
040003cc l     F .text	00000114 take_raw_picture_and_send_to_jtag
040004e0 l     F .text	0000004c jpeg_jtag_send
0400052c l     F .text	00000028 read_uptime
04000554 l     F .text	00000028 read_line_detect
0400057c l     F .text	00000028 read_encoder_left
040005a4 l     F .text	00000028 read_encoder_right
040005cc l     F .text	000000dc set_motors
04000958 l     F .text	000000e8 motor_init
04000a40 l     F .text	00000048 wait_button_press
04000a88 l     F .text	0000056c motor_control_loop
04000ff4 l     F .text	000000c0 encoder_test
040010b4 l     F .text	000000e4 follow_line
04001198 l     F .text	000000ac motor_ramp_test
04001244 l     F .text	00000038 image_download_test
04013e7f l     O .rwdata	00000001 jpeg_transfer.3476
00000000 l    df *ABS*	00000000 kiss.c
00000000 l    df *ABS*	00000000 pid.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 snprintf.c
00000000 l    df *ABS*	00000000 vfprintf.c
04011f26 l     O .rodata	00000010 zeroes.4389
04011f36 l     O .rodata	00000010 blanks.4388
00000000 l    df *ABS*	00000000 dtoa.c
040089e4 l     F .text	00000228 quorem
00000000 l    df *ABS*	00000000 impure.c
040121c8 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 locale.c
0401260c l     O .rwdata	00000020 lc_ctype_charset
040125ec l     O .rwdata	00000020 lc_message_charset
0401262c l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 mprec.c
04011f68 l     O .rodata	0000000c p05.2768
00000000 l    df *ABS*	00000000 s_fpclassify.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
0401208c l     O .rodata	00000010 zeroes.4333
0401209c l     O .rodata	00000010 blanks.4332
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 eqdf2.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
0400ef84 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
04013e98 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400f214 l     F .text	00000034 alt_dev_reg
04012a6c l     O .rwdata	00001060 jtag_uart
04013acc l     O .rwdata	000000c4 ble_uart
04013b90 l     O .rwdata	000000c4 lidar_uart
04013c54 l     O .rwdata	0000005c video_dma_controller
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400f7bc l     F .text	0000020c altera_avalon_jtag_uart_irq
0400f9c8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
040101bc l     F .text	0000009c altera_avalon_uart_irq
04010258 l     F .text	000000e4 altera_avalon_uart_rxirq
0401033c l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
040104d8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
040106f0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
04010b5c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04010c90 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04010cbc l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0401111c l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
0401127c l     F .text	0000003c alt_get_errno
040112b8 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
04015ccc g     O .bss	00000004 alt_instruction_exception_handler
0400bba0 g     F .text	00000074 _mprec_log10
04001a08 g     F .text	00000064 arm_peak_detector
0400bc8c g     F .text	0000008c __any_on
04011f74 g     O .rodata	00000028 __mprec_tinytens
0400f070 g     F .text	0000007c alt_main
04015de0 g     O .bss	00000100 alt_irq
04015c82 g     O .bss	00000002 smallest_distance_angle
04013ebc g       *ABS*	00000000 __flash_rwdata_start
0400ed7c g     F .text	00000088 .hidden __eqdf2
04015ee0 g       *ABS*	00000000 __alt_heap_start
04015cd0 g     O .bss	00000014 ble_buffer
0400a294 g     F .text	0000007c _setlocale_r
0400f110 g     F .text	00000024 __malloc_unlock
04002954 g     F .text	00000440 .hidden __divsf3
04012180 g     O .rwdata	0000000c spin_5_times_ctrl
0400d9d4 g     F .text	0000015c memmove
04006644 g     F .text	000000e4 snprintf
0400ac60 g     F .text	000000a8 _Balloc
04004bcc g     F .text	000000dc .hidden __gtdf2
04011728 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
04015c90 g     O .bss	00000002 packet_length
04000020 g       *ABS*	00000000 __flash_exceptions_start
04015cb0 g     O .bss	00000004 errno
0400c124 g     F .text	000013a0 ___svfiprintf_internal_r
04015cbc g     O .bss	00000004 alt_argv
04013e7e g     O .rwdata	00000001 running
0401be58 g       *ABS*	00000000 _gp
04001474 g     F .text	00000298 ble_uart_handler
0400f1e4 g     F .text	00000030 usleep
04013e74 g     O .rwdata	00000004 left_yaw_changes
04003348 g     F .text	000004e4 .hidden __subsf3
04013cd8 g     O .rwdata	00000180 alt_fd_list
040019b4 g     F .text	00000054 peak_detect_handler
04012198 g     O .rwdata	0000000c forward_ctrl
0401174c g     F .text	00000090 alt_find_dev
04006424 g     F .text	00000148 memcpy
04005f84 g     F .text	000000dc .hidden __floatsidf
04011200 g     F .text	0000007c alt_io_redirect
04004ca8 g     F .text	000000f4 .hidden __ltdf2
04013e6c g     O .rwdata	00000004 forward_drive_changes
04011dd8 g       *ABS*	00000000 __DTOR_END__
04001a6c g     F .text	000000e0 peak_detect
04013e60 g     O .rwdata	00000001 maxPWM
040119a8 g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400bd18 g     F .text	00000074 __fpclassifyd
0400bafc g     F .text	000000a4 __ratio
0400fbc0 g     F .text	0000021c altera_avalon_jtag_uart_read
0400170c g     F .text	00000210 lidar_uart_handler
040023a8 g     F .text	00000064 .hidden __udivsi3
04015c7c g     O .bss	00000004 lidar_state
04011fc4 g     O .rodata	000000c8 __mprec_tens
0400a310 g     F .text	0000000c __locale_charset
04002e50 g     F .text	000000c8 .hidden __lesf2
04015cac g     O .bss	00000004 __malloc_top_pad
04015c8d g     O .bss	00000001 follow_event
04015d0c g     O .bss	00000014 jtag_kiss
04013e88 g     O .rwdata	00000004 __mb_cur_max
0400a340 g     F .text	0000000c _localeconv_r
0400b094 g     F .text	0000003c __i2b
0400bd8c g     F .text	00000054 _sbrk_r
04013eac g     O .rwdata	00000004 alt_max_fd
04015c86 g     O .bss	00000002 nearest_distance
04013e5c g     O .rwdata	00000004 image_buffer_b
04015ca8 g     O .bss	00000004 __malloc_max_sbrked_mem
0400ee04 g     F .text	00000180 alt_irq_register
04015d20 g     O .bss	00000064 jtag_kiss_rx_buffer
04006108 g     F .text	00000110 .hidden __extendsfdf2
04003950 g     F .text	000008ac .hidden __adddf3
0400b8a4 g     F .text	0000010c __b2d
0400e7b8 g     F .text	000005c4 .hidden __umoddi3
04013e80 g     O .rwdata	00000004 _global_impure_ptr
04015c70 g     O .bss	00000004 backward_yaw_changes
0400dc58 g     F .text	00000564 _realloc_r
04015ee0 g       *ABS*	00000000 __bss_end
0401102c g     F .text	000000f0 alt_iic_isr_register
04011620 g     F .text	00000108 alt_tick
0400e1bc g     F .text	000005fc .hidden __udivdi3
04011f9c g     O .rodata	00000028 __mprec_bigtens
0400ae78 g     F .text	00000104 __s2b
040121bc g     O .rwdata	0000000c right_ctrl
04006060 g     F .text	000000a8 .hidden __floatunsidf
0400b5e4 g     F .text	00000060 __mcmp
04010110 g     F .text	000000ac altera_avalon_uart_init
04010fe0 g     F .text	0000004c alt_ic_irq_enabled
04011584 g     F .text	0000009c alt_alarm_stop
04015cb4 g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d4 alt_irq_handler
04013cb0 g     O .rwdata	00000028 alt_dev_null
04013e70 g     O .rwdata	00000004 backward_drive_changes
04010c70 g     F .text	00000020 alt_dcache_flush_all
0400af7c g     F .text	00000068 __hi0bits
04005f04 g     F .text	00000080 .hidden __fixdfsi
04015c8b g     O .bss	00000001 stop_event
04015c8e g     O .bss	00000001 tdoa_event
04013e78 g     O .rwdata	00000004 right_yaw_changes
04013ebc g       *ABS*	00000000 __ram_rwdata_end
04013ea4 g     O .rwdata	00000008 alt_dev_list
04002d94 g     F .text	000000bc .hidden __gtsf2
04012114 g       *ABS*	00000000 __ram_rodata_end
04004ca8 g     F .text	000000f4 .hidden __ledf2
04000748 g     F .text	00000210 normalize_output
040006a8 g     F .text	000000a0 scale_output
0400b35c g     F .text	00000140 __pow5mult
04015ca0 g     O .bss	00000004 __nlocale_changed
0400240c g     F .text	00000058 .hidden __umodsi3
04015ee0 g       *ABS*	00000000 end
0401072c g     F .text	000001ac altera_avalon_uart_write
0400f6fc g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
04011dd8 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04010060 g     F .text	00000060 altera_avalon_uart_write_fd
040063c0 g     F .text	00000064 .hidden __clzsi2
0400656c g     F .text	000000d8 _snprintf_r
040100c0 g     F .text	00000050 altera_avalon_uart_close_fd
0400fddc g     F .text	00000224 altera_avalon_jtag_uart_write
04013e62 g     O .rwdata	00000001 minimum_stable_pwm
0400ab7c g     F .text	000000e4 memchr
0400d6c4 g     F .text	00000310 _free_r
0400a31c g     F .text	00000010 __locale_mb_cur_max
04011c24 g     F .text	00000180 __call_exitprocs
04015c9c g     O .bss	00000004 __mlocale_changed
04013e8c g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
04015cc4 g     O .bss	00000004 _alt_tick_rate
0400b49c g     F .text	00000148 __lshift
04015cc8 g     O .bss	00000004 _alt_nticks
0400f280 g     F .text	00000318 alt_sys_init
0400382c g     F .text	00000124 .hidden __floatsisf
0400bf54 g     F .text	000001d0 __ssprint_r
04011b0c g     F .text	00000118 __register_exitproc
0400b0d0 g     F .text	0000028c __multiply
0400fa68 g     F .text	00000068 altera_avalon_jtag_uart_close
04002464 g     F .text	00000028 .hidden __mulsi3
04012114 g       *ABS*	00000000 __ram_rwdata_start
04011dd8 g       *ABS*	00000000 __ram_rodata_start
04015ce4 g     O .bss	00000028 __malloc_current_mallinfo
0400b9b0 g     F .text	0000014c __d2b
040121b0 g     O .rwdata	0000000c left_ctrl
04013e68 g     O .rwdata	00000004 spin_1_yaw_changes
0400f598 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
040118e4 g     F .text	000000c4 alt_get_fd
04010a04 g     F .text	00000158 alt_busy_sleep
04015c92 g     O .bss	00000001 peak_detected
04011a90 g     F .text	0000007c memcmp
0400f658 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
04015ee0 g       *ABS*	00000000 __alt_stack_base
0400f6a8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04015d84 g     O .bss	00000028 yaw_pid
040041fc g     F .text	000009d0 .hidden __divdf3
0400bc14 g     F .text	00000078 __copybits
04012664 g     O .rwdata	00000408 __malloc_av_
04015dac g     O .bss	0000000c peak
04004d9c g     F .text	0000086c .hidden __muldf3
040117dc g     F .text	00000108 alt_find_file
04015c74 g     O .bss	00000004 left_drive_changes
04010cf8 g     F .text	000000a4 alt_dev_llist_insert
0400f0ec g     F .text	00000024 __malloc_lock
0400f134 g     F .text	000000b0 sbrk
04006728 g     F .text	000022bc ___svfprintf_internal_r
04015c8a g     O .bss	00000001 ble_buffer_position
0400d4c4 g     F .text	000000dc _calloc_r
04015c64 g       *ABS*	00000000 __bss_start
04015c84 g     O .bss	00000001 new_nearest
0400db30 g     F .text	00000128 memset
04001b4c g     F .text	000001d4 main
04015c78 g     O .bss	00000004 right_drive_changes
04015cc0 g     O .bss	00000004 alt_envp
04015ca4 g     O .bss	00000004 __malloc_max_total_mem
0400f5f8 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04002e50 g     F .text	000000c8 .hidden __ltsf2
08000000 g       *ABS*	00000000 __alt_heap_limit
04006218 g     F .text	000001a8 .hidden __truncdfsf2
04001d74 g     F .text	00000044 kiss_start
040121a4 g     O .rwdata	0000000c backward_ctrl
04008c0c g     F .text	00001688 _dtoa_r
0400a370 g     F .text	0000080c _malloc_r
04013eb0 g     O .rwdata	00000004 alt_errno
040022b0 g     F .text	00000084 .hidden __divsi3
0400d5a0 g     F .text	00000124 _malloc_trim_r
04011dd8 g       *ABS*	00000000 __CTOR_END__
04002f18 g     F .text	00000430 .hidden __mulsf3
04013e64 g     O .rwdata	00000004 spin_5_yaw_changes
0400bde0 g     F .text	000000dc strcmp
04015c80 g     O .bss	00000001 lidar_error
04011dd8 g       *ABS*	00000000 __flash_rodata_start
04011dd8 g       *ABS*	00000000 __DTOR_LIST__
04015c88 g     O .bss	00000002 nearest_direction
0400127c g     F .text	000001f8 lidar_test
0400ed7c g     F .text	00000088 .hidden __nedf2
0400f248 g     F .text	00000038 alt_irq_init
04011500 g     F .text	00000084 alt_release_fd
04011de2 g     O .rodata	00000100 .hidden __clz_tab
04015c98 g     O .bss	00000004 _PathLocale
04011a44 g     F .text	00000014 atexit
04002d94 g     F .text	000000bc .hidden __gesf2
0401218c g     O .rwdata	0000000c spin_1_time_ctrl
0400a34c g     F .text	00000018 setlocale
04015c8c g     O .bss	00000001 line_event
04013e84 g     O .rwdata	00000004 _impure_ptr
04015cb8 g     O .bss	00000004 alt_argc
04012114 g     O .rwdata	00000030 figure_8_drive_changes
04001f28 g     F .text	00000160 kiss_rx_byte
04010dfc g     F .text	00000060 _do_dtors
0400a338 g     F .text	00000008 __locale_cjk_lang
04015c68 g     O .bss	00000004 spin_1_drive_changes
04000020 g       .exceptions	00000000 alt_irq_entry
0400b840 g     F .text	00000064 __ulp
04001ee4 g     F .text	00000044 kiss_end
04013e9c g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
0400a364 g     F .text	0000000c localeconv
04013e7c g     O .rwdata	00000002 smallest_distance
04010e7c g     F .text	00000050 alt_ic_isr_register
04012144 g     O .rwdata	00000030 figure_8_yaw_changes
04013ebc g       *ABS*	00000000 _edata
04010000 g     F .text	00000060 altera_avalon_uart_read_fd
04015ee0 g       *ABS*	00000000 _end
04000230 g       *ABS*	00000000 __ram_exceptions_end
0400fad0 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04002088 g     F .text	00000228 pid_compute
04010f54 g     F .text	0000008c alt_ic_irq_disable
04013e90 g     O .rwdata	00000004 __malloc_trim_threshold
0400a32c g     F .text	0000000c __locale_msgcharset
04011a58 g     F .text	00000038 exit
0400b644 g     F .text	000001fc __mdiff
04002334 g     F .text	00000074 .hidden __modsi3
04015c8f g     O .bss	00000001 packet_ready
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
0400191c g     F .text	00000098 jtag_uart_handler
04015c6c g     O .bss	00000004 forward_yaw_changes
04010484 g     F .text	00000054 altera_avalon_uart_close
04015c93 g     O .bss	00000005 lidar_data_point
04011da4 g     F .text	00000034 _exit
040108d8 g     F .text	0000012c alt_alarm_start
04012174 g     O .rwdata	0000000c figure_8_ctrl
0400bebc g     F .text	00000098 strlen
040113a4 g     F .text	0000015c open
04004bcc g     F .text	000000dc .hidden __gedf2
04015c64 g     O .bss	00000004 spin_5_drive_changes
04013e58 g     O .rwdata	00000004 image_buffer_a
04010e5c g     F .text	00000020 alt_icache_flush_all
04013e61 g     O .rwdata	00000001 minimum_zero
04013e94 g     O .rwdata	00000004 alt_priority_mask
04010ecc g     F .text	00000088 alt_ic_irq_enable
04010514 g     F .text	000001dc altera_avalon_uart_read
04005608 g     F .text	000008fc .hidden __subdf3
0400afe4 g     F .text	000000b0 __lo0bits
04013eb4 g     O .rwdata	00000008 alt_alarm_list
04010d9c g     F .text	00000060 _do_ctors
04010b98 g     F .text	000000d8 close
0400248c g     F .text	000004c8 .hidden __addsf3
04001d20 g     F .text	00000054 kiss_send_packet
04001db8 g     F .text	0000012c kiss_send_data
0400efec g     F .text	00000084 alt_load
04015db8 g     O .bss	00000028 drive_pid
0400ad30 g     F .text	00000148 __multadd
0400ad08 g     F .text	00000028 _Bfree



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810074 	movhi	r2,1025
 4000140:	10977804 	addi	r2,r2,24032
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810074 	movhi	r2,1025
 4000158:	10977804 	addi	r2,r2,24032
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a79d17 	ldw	r2,-24972(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a79d17 	ldw	r2,-24972(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 400023c:	d6af9614 	ori	gp,gp,48728
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000244:	10971914 	ori	r2,r2,23652

    movhi r3, %hi(__bss_end)
 4000248:	00c10074 	movhi	r3,1025
    ori r3, r3, %lo(__bss_end)
 400024c:	18d7b814 	ori	r3,r3,24288

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	400efec0 	call	400efec <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	400f0700 	call	400f070 <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_data_end+0xfc000268>

0400026c <jtag_kiss_send>:
#define JTAG_UART__MASK__RVALID		0x00008000

#define max( a, b ) ( ( a > b) ? a : b )
#define min( a, b ) ( ( a < b) ? a : b )

static void jtag_kiss_send(uint8_t byte){
 400026c:	defffe04 	addi	sp,sp,-8
 4000270:	df000115 	stw	fp,4(sp)
 4000274:	df000104 	addi	fp,sp,4
 4000278:	2005883a 	mov	r2,r4
 400027c:	e0bfff05 	stb	r2,-4(fp)

         // Wait for room in buffer
         while( ! ( (*JTAG_UART_CONTROL) & 0xffff0000 ) );
 4000280:	0001883a 	nop
 4000284:	00820034 	movhi	r2,2048
 4000288:	10842504 	addi	r2,r2,4244
 400028c:	10800017 	ldw	r2,0(r2)
 4000290:	10bfffec 	andhi	r2,r2,65535
 4000294:	103ffb26 	beq	r2,zero,4000284 <__alt_data_end+0xfc000284>

         // Send byte
         *JTAG_UART_DATA = byte;
 4000298:	00820034 	movhi	r2,2048
 400029c:	10842404 	addi	r2,r2,4240
 40002a0:	e0ffff03 	ldbu	r3,-4(fp)
 40002a4:	10c00015 	stw	r3,0(r2)

}
 40002a8:	0001883a 	nop
 40002ac:	e037883a 	mov	sp,fp
 40002b0:	df000017 	ldw	fp,0(sp)
 40002b4:	dec00104 	addi	sp,sp,4
 40002b8:	f800283a 	ret

040002bc <camera_dma_enable>:

static void camera_dma_enable(bool enable){
 40002bc:	defffd04 	addi	sp,sp,-12
 40002c0:	df000215 	stw	fp,8(sp)
 40002c4:	df000204 	addi	fp,sp,8
 40002c8:	2005883a 	mov	r2,r4
 40002cc:	e0bfff05 	stb	r2,-4(fp)

	volatile uint32_t * control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
 40002d0:	00820034 	movhi	r2,2048
 40002d4:	10842304 	addi	r2,r2,4236
 40002d8:	e0bffe15 	stw	r2,-8(fp)
	if(enable){
 40002dc:	e0bfff03 	ldbu	r2,-4(fp)
 40002e0:	10000626 	beq	r2,zero,40002fc <camera_dma_enable+0x40>
		*control |= ~VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
 40002e4:	e0bffe17 	ldw	r2,-8(fp)
 40002e8:	10800017 	ldw	r2,0(r2)
 40002ec:	10c00114 	ori	r3,r2,4
 40002f0:	e0bffe17 	ldw	r2,-8(fp)
 40002f4:	10c00015 	stw	r3,0(r2)
	} else {
		*control &= VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
	}

}
 40002f8:	00000606 	br	4000314 <camera_dma_enable+0x58>

	volatile uint32_t * control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
	if(enable){
		*control |= ~VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
	} else {
		*control &= VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
 40002fc:	e0bffe17 	ldw	r2,-8(fp)
 4000300:	10c00017 	ldw	r3,0(r2)
 4000304:	00bffec4 	movi	r2,-5
 4000308:	1886703a 	and	r3,r3,r2
 400030c:	e0bffe17 	ldw	r2,-8(fp)
 4000310:	10c00015 	stw	r3,0(r2)
	}

}
 4000314:	0001883a 	nop
 4000318:	e037883a 	mov	sp,fp
 400031c:	df000017 	ldw	fp,0(sp)
 4000320:	dec00104 	addi	sp,sp,4
 4000324:	f800283a 	ret

04000328 <swap_buffer>:

static volatile uint32_t * swap_buffer(){
 4000328:	defffb04 	addi	sp,sp,-20
 400032c:	df000415 	stw	fp,16(sp)
 4000330:	df000404 	addi	fp,sp,16

	volatile uint32_t * buffer_address = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + 	VIDEO_DMA_CONTROLLER__BUFFER_OFFSET);
 4000334:	00820034 	movhi	r2,2048
 4000338:	10842004 	addi	r2,r2,4224
 400033c:	e0bffd15 	stw	r2,-12(fp)
	volatile uint32_t * back_buffer_address = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + 	VIDEO_DMA_CONTROLLER__BACK_BUFFER_OFFSET);
 4000340:	00820034 	movhi	r2,2048
 4000344:	10842104 	addi	r2,r2,4228
 4000348:	e0bffe15 	stw	r2,-8(fp)

	volatile uint32_t * status_control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
 400034c:	00820034 	movhi	r2,2048
 4000350:	10842304 	addi	r2,r2,4236
 4000354:	e0bfff15 	stw	r2,-4(fp)

	// instead of disabling DMA trigger buffer swap
	{

		// Setup back buffer register for swap
		if(*buffer_address == (uint32_t) image_buffer_a){
 4000358:	e0bffd17 	ldw	r2,-12(fp)
 400035c:	10800017 	ldw	r2,0(r2)
 4000360:	00c18034 	movhi	r3,1536
 4000364:	10c0071e 	bne	r2,r3,4000384 <swap_buffer+0x5c>
			current_image_buffer = image_buffer_a;
 4000368:	00818034 	movhi	r2,1536
 400036c:	e0bffc15 	stw	r2,-16(fp)
			*back_buffer_address = (uint32_t) image_buffer_b;
 4000370:	0081c034 	movhi	r2,1792
 4000374:	1007883a 	mov	r3,r2
 4000378:	e0bffe17 	ldw	r2,-8(fp)
 400037c:	10c00015 	stw	r3,0(r2)
 4000380:	00000606 	br	400039c <swap_buffer+0x74>
		} else {
			current_image_buffer = image_buffer_b;
 4000384:	0081c034 	movhi	r2,1792
 4000388:	e0bffc15 	stw	r2,-16(fp)
			*back_buffer_address = (uint32_t) image_buffer_a;
 400038c:	00818034 	movhi	r2,1536
 4000390:	1007883a 	mov	r3,r2
 4000394:	e0bffe17 	ldw	r2,-8(fp)
 4000398:	10c00015 	stw	r3,0(r2)
		}

		// Trigger buffer swap
		*buffer_address = 0;
 400039c:	e0bffd17 	ldw	r2,-12(fp)
 40003a0:	10000015 	stw	zero,0(r2)

		// Wait for buffer swap
		while(*status_control & VIDEO_DMA_CONTROLLER__STATUS_CONTROL__MASK__SWAP);
 40003a4:	0001883a 	nop
 40003a8:	e0bfff17 	ldw	r2,-4(fp)
 40003ac:	10800017 	ldw	r2,0(r2)
 40003b0:	1080004c 	andi	r2,r2,1
 40003b4:	103ffc1e 	bne	r2,zero,40003a8 <__alt_data_end+0xfc0003a8>

	}

	return current_image_buffer;
 40003b8:	e0bffc17 	ldw	r2,-16(fp)

}
 40003bc:	e037883a 	mov	sp,fp
 40003c0:	df000017 	ldw	fp,0(sp)
 40003c4:	dec00104 	addi	sp,sp,4
 40003c8:	f800283a 	ret

040003cc <take_raw_picture_and_send_to_jtag>:


static void  take_raw_picture_and_send_to_jtag(void){
 40003cc:	defffb04 	addi	sp,sp,-20
 40003d0:	dfc00415 	stw	ra,16(sp)
 40003d4:	df000315 	stw	fp,12(sp)
 40003d8:	df000304 	addi	fp,sp,12

	volatile uint32_t * current_image_buffer = swap_buffer();
 40003dc:	40003280 	call	4000328 <swap_buffer>
 40003e0:	e0bffe15 	stw	r2,-8(fp)

	kiss_start(&jtag_kiss);
 40003e4:	01010074 	movhi	r4,1025
 40003e8:	21174304 	addi	r4,r4,23820
 40003ec:	4001d740 	call	4001d74 <kiss_start>

	// Inject packet type
	uint8_t packet_type = KISS_PACKET_OPCODES__RAW_IMAGE;
 40003f0:	00bfe0c4 	movi	r2,-125
 40003f4:	e0bfff05 	stb	r2,-4(fp)
	kiss_send_data(&jtag_kiss, &packet_type, 1);
 40003f8:	e0bfff04 	addi	r2,fp,-4
 40003fc:	01800044 	movi	r6,1
 4000400:	100b883a 	mov	r5,r2
 4000404:	01010074 	movhi	r4,1025
 4000408:	21174304 	addi	r4,r4,23820
 400040c:	4001db80 	call	4001db8 <kiss_send_data>


	uint32_t i;
	for (i = 0; i < IMAGE_SIZE; i++) {
 4000410:	e03ffd15 	stw	zero,-12(fp)
 4000414:	00002506 	br	40004ac <take_raw_picture_and_send_to_jtag+0xe0>

		uint8_t pixel_data[3];

		pixel_data[0] = (current_image_buffer[i] & 0x00FF0000) >> 16;
 4000418:	e0bffd17 	ldw	r2,-12(fp)
 400041c:	1085883a 	add	r2,r2,r2
 4000420:	1085883a 	add	r2,r2,r2
 4000424:	1007883a 	mov	r3,r2
 4000428:	e0bffe17 	ldw	r2,-8(fp)
 400042c:	10c5883a 	add	r2,r2,r3
 4000430:	10800017 	ldw	r2,0(r2)
 4000434:	10803fec 	andhi	r2,r2,255
 4000438:	1004d43a 	srli	r2,r2,16
 400043c:	e0bfff45 	stb	r2,-3(fp)
		pixel_data[1] = (current_image_buffer[i] & 0x0000FF00) >> 8;
 4000440:	e0bffd17 	ldw	r2,-12(fp)
 4000444:	1085883a 	add	r2,r2,r2
 4000448:	1085883a 	add	r2,r2,r2
 400044c:	1007883a 	mov	r3,r2
 4000450:	e0bffe17 	ldw	r2,-8(fp)
 4000454:	10c5883a 	add	r2,r2,r3
 4000458:	10800017 	ldw	r2,0(r2)
 400045c:	10bfc00c 	andi	r2,r2,65280
 4000460:	1004d23a 	srli	r2,r2,8
 4000464:	e0bfff85 	stb	r2,-2(fp)
		pixel_data[2] = (current_image_buffer[i] & 0x000000FF) >> 0;
 4000468:	e0bffd17 	ldw	r2,-12(fp)
 400046c:	1085883a 	add	r2,r2,r2
 4000470:	1085883a 	add	r2,r2,r2
 4000474:	1007883a 	mov	r3,r2
 4000478:	e0bffe17 	ldw	r2,-8(fp)
 400047c:	10c5883a 	add	r2,r2,r3
 4000480:	10800017 	ldw	r2,0(r2)
 4000484:	e0bfffc5 	stb	r2,-1(fp)

		kiss_send_data(&jtag_kiss, pixel_data, 3);
 4000488:	e0bfff44 	addi	r2,fp,-3
 400048c:	018000c4 	movi	r6,3
 4000490:	100b883a 	mov	r5,r2
 4000494:	01010074 	movhi	r4,1025
 4000498:	21174304 	addi	r4,r4,23820
 400049c:	4001db80 	call	4001db8 <kiss_send_data>
	uint8_t packet_type = KISS_PACKET_OPCODES__RAW_IMAGE;
	kiss_send_data(&jtag_kiss, &packet_type, 1);


	uint32_t i;
	for (i = 0; i < IMAGE_SIZE; i++) {
 40004a0:	e0bffd17 	ldw	r2,-12(fp)
 40004a4:	10800044 	addi	r2,r2,1
 40004a8:	e0bffd15 	stw	r2,-12(fp)
 40004ac:	e0fffd17 	ldw	r3,-12(fp)
 40004b0:	00800174 	movhi	r2,5
 40004b4:	10abffc4 	addi	r2,r2,-20481
 40004b8:	10ffd72e 	bgeu	r2,r3,4000418 <__alt_data_end+0xfc000418>

		kiss_send_data(&jtag_kiss, pixel_data, 3);

	}

	kiss_end(&jtag_kiss);
 40004bc:	01010074 	movhi	r4,1025
 40004c0:	21174304 	addi	r4,r4,23820
 40004c4:	4001ee40 	call	4001ee4 <kiss_end>
}
 40004c8:	0001883a 	nop
 40004cc:	e037883a 	mov	sp,fp
 40004d0:	dfc00117 	ldw	ra,4(sp)
 40004d4:	df000017 	ldw	fp,0(sp)
 40004d8:	dec00204 	addi	sp,sp,8
 40004dc:	f800283a 	ret

040004e0 <jpeg_jtag_send>:

static void jpeg_jtag_send(void* context, void* data, int size) {
 40004e0:	defffb04 	addi	sp,sp,-20
 40004e4:	dfc00415 	stw	ra,16(sp)
 40004e8:	df000315 	stw	fp,12(sp)
 40004ec:	df000304 	addi	fp,sp,12
 40004f0:	e13ffd15 	stw	r4,-12(fp)
 40004f4:	e17ffe15 	stw	r5,-8(fp)
 40004f8:	e1bfff15 	stw	r6,-4(fp)

	kiss_send_data(&jtag_kiss, data, size);
 40004fc:	e0bfff17 	ldw	r2,-4(fp)
 4000500:	100d883a 	mov	r6,r2
 4000504:	e17ffe17 	ldw	r5,-8(fp)
 4000508:	01010074 	movhi	r4,1025
 400050c:	21174304 	addi	r4,r4,23820
 4000510:	4001db80 	call	4001db8 <kiss_send_data>

};
 4000514:	0001883a 	nop
 4000518:	e037883a 	mov	sp,fp
 400051c:	dfc00117 	ldw	ra,4(sp)
 4000520:	df000017 	ldw	fp,0(sp)
 4000524:	dec00204 	addi	sp,sp,8
 4000528:	f800283a 	ret

0400052c <read_uptime>:
/**
 * Gets system uptime in ms
 *
 * @return uptime in ms
 */
static uint32_t read_uptime(void){
 400052c:	deffff04 	addi	sp,sp,-4
 4000530:	df000015 	stw	fp,0(sp)
 4000534:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(UPTIME_BASE);
 4000538:	00820034 	movhi	r2,2048
 400053c:	10840004 	addi	r2,r2,4096
 4000540:	10800037 	ldwio	r2,0(r2)

}
 4000544:	e037883a 	mov	sp,fp
 4000548:	df000017 	ldw	fp,0(sp)
 400054c:	dec00104 	addi	sp,sp,4
 4000550:	f800283a 	ret

04000554 <read_line_detect>:
 *************************************************/

PID_t drive_pid;
PID_t yaw_pid;

static uint32_t read_line_detect(void){
 4000554:	deffff04 	addi	sp,sp,-4
 4000558:	df000015 	stw	fp,0(sp)
 400055c:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(LINE_DETECT_BASE);
 4000560:	00820034 	movhi	r2,2048
 4000564:	10842804 	addi	r2,r2,4256
 4000568:	10800037 	ldwio	r2,0(r2)

}
 400056c:	e037883a 	mov	sp,fp
 4000570:	df000017 	ldw	fp,0(sp)
 4000574:	dec00104 	addi	sp,sp,4
 4000578:	f800283a 	ret

0400057c <read_encoder_left>:
/**
 * Reads the left encoder ticks
 *
 * @return left encoder ticks
 */
static int32_t read_encoder_left(void){
 400057c:	deffff04 	addi	sp,sp,-4
 4000580:	df000015 	stw	fp,0(sp)
 4000584:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(ENCODER_LEFT_BASE);
 4000588:	00820034 	movhi	r2,2048
 400058c:	10840c04 	addi	r2,r2,4144
 4000590:	10800037 	ldwio	r2,0(r2)

}
 4000594:	e037883a 	mov	sp,fp
 4000598:	df000017 	ldw	fp,0(sp)
 400059c:	dec00104 	addi	sp,sp,4
 40005a0:	f800283a 	ret

040005a4 <read_encoder_right>:
/**
 * Reads the right encoder ticks
 *
 * @return right encoder ticks
 */
static int32_t read_encoder_right(void){
 40005a4:	deffff04 	addi	sp,sp,-4
 40005a8:	df000015 	stw	fp,0(sp)
 40005ac:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(ENCODER_RIGHT_BASE);
 40005b0:	00820034 	movhi	r2,2048
 40005b4:	10841004 	addi	r2,r2,4160
 40005b8:	10800037 	ldwio	r2,0(r2)

}
 40005bc:	e037883a 	mov	sp,fp
 40005c0:	df000017 	ldw	fp,0(sp)
 40005c4:	dec00104 	addi	sp,sp,4
 40005c8:	f800283a 	ret

040005cc <set_motors>:
 * Sets the motors forward/reverse and speed reference using a -255 to 255 pwm output for each motor
 *
 * @param speed_left The desired PWM control signal for the left motor
 * @param speed_left The desired PWM control signal for the right motor
 */
static void set_motors(int16_t speed_left, int16_t speed_right){
 40005cc:	defffb04 	addi	sp,sp,-20
 40005d0:	df000415 	stw	fp,16(sp)
 40005d4:	df000404 	addi	fp,sp,16
 40005d8:	2007883a 	mov	r3,r4
 40005dc:	2805883a 	mov	r2,r5
 40005e0:	e0fffe0d 	sth	r3,-8(fp)
 40005e4:	e0bfff0d 	sth	r2,-4(fp)

	uint32_t motor_direction = 0;
 40005e8:	e03ffc15 	stw	zero,-16(fp)

	if(speed_left == 0){               // Stop left motor if input 0
 40005ec:	e0bffe0f 	ldh	r2,-8(fp)
 40005f0:	10000c26 	beq	r2,zero,4000624 <set_motors+0x58>
		motor_direction |= 0b00;
	} else if(speed_left < 0){
 40005f4:	e0bffe0f 	ldh	r2,-8(fp)
 40005f8:	1000070e 	bge	r2,zero,4000618 <set_motors+0x4c>
		motor_direction |= 0b01;
 40005fc:	e0bffc17 	ldw	r2,-16(fp)
 4000600:	10800054 	ori	r2,r2,1
 4000604:	e0bffc15 	stw	r2,-16(fp)
		speed_left *= -1;
 4000608:	e0bffe0b 	ldhu	r2,-8(fp)
 400060c:	0085c83a 	sub	r2,zero,r2
 4000610:	e0bffe0d 	sth	r2,-8(fp)
 4000614:	00000306 	br	4000624 <set_motors+0x58>
	} else {
		motor_direction |= 0b10;
 4000618:	e0bffc17 	ldw	r2,-16(fp)
 400061c:	10800094 	ori	r2,r2,2
 4000620:	e0bffc15 	stw	r2,-16(fp)
	}

	if(speed_right == 0){              // Stop right motor if input 0
 4000624:	e0bfff0f 	ldh	r2,-4(fp)
 4000628:	10000c26 	beq	r2,zero,400065c <set_motors+0x90>
		motor_direction |= 0b0000;
	} else if(speed_right < 0){
 400062c:	e0bfff0f 	ldh	r2,-4(fp)
 4000630:	1000070e 	bge	r2,zero,4000650 <set_motors+0x84>
		motor_direction |= 0b1000;
 4000634:	e0bffc17 	ldw	r2,-16(fp)
 4000638:	10800214 	ori	r2,r2,8
 400063c:	e0bffc15 	stw	r2,-16(fp)
		speed_right *= -1;
 4000640:	e0bfff0b 	ldhu	r2,-4(fp)
 4000644:	0085c83a 	sub	r2,zero,r2
 4000648:	e0bfff0d 	sth	r2,-4(fp)
 400064c:	00000306 	br	400065c <set_motors+0x90>
	} else {
		motor_direction |= 0b0100;
 4000650:	e0bffc17 	ldw	r2,-16(fp)
 4000654:	10800114 	ori	r2,r2,4
 4000658:	e0bffc15 	stw	r2,-16(fp)
	}

	// Set motor directions
	IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_DIRECTION_BASE, motor_direction);
 400065c:	e0fffc17 	ldw	r3,-16(fp)
 4000660:	00820034 	movhi	r2,2048
 4000664:	10840804 	addi	r2,r2,4128
 4000668:	10c00035 	stwio	r3,0(r2)

	// Set the PWM values
	volatile uint32_t pwm_command = ( ((uint32_t)speed_right) << 8) | ((uint32_t)speed_left);
 400066c:	e0bfff0f 	ldh	r2,-4(fp)
 4000670:	1006923a 	slli	r3,r2,8
 4000674:	e0bffe0f 	ldh	r2,-8(fp)
 4000678:	1884b03a 	or	r2,r3,r2
 400067c:	e0bffd15 	stw	r2,-12(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM_BASE, pwm_command);
 4000680:	e0bffd17 	ldw	r2,-12(fp)
 4000684:	1007883a 	mov	r3,r2
 4000688:	00820034 	movhi	r2,2048
 400068c:	10841404 	addi	r2,r2,4176
 4000690:	10c00035 	stwio	r3,0(r2)

}
 4000694:	0001883a 	nop
 4000698:	e037883a 	mov	sp,fp
 400069c:	df000017 	ldw	fp,0(sp)
 40006a0:	dec00104 	addi	sp,sp,4
 40006a4:	f800283a 	ret

040006a8 <scale_output>:
/**
 * Scales the PWM value from max scale ot match the maximum possible motor speed
 *
 * @param output The desired PWM control signal for the motor before scaling
 */
double scale_output(double output){
 40006a8:	defffc04 	addi	sp,sp,-16
 40006ac:	dfc00315 	stw	ra,12(sp)
 40006b0:	df000215 	stw	fp,8(sp)
 40006b4:	df000204 	addi	fp,sp,8
 40006b8:	e13ffe15 	stw	r4,-8(fp)
 40006bc:	e17fff15 	stw	r5,-4(fp)

  return output * (maxPWM / 255.0);
 40006c0:	00bff704 	movi	r2,-36
 40006c4:	10803fcc 	andi	r2,r2,255
 40006c8:	1009883a 	mov	r4,r2
 40006cc:	4005f840 	call	4005f84 <__floatsidf>
 40006d0:	1011883a 	mov	r8,r2
 40006d4:	1813883a 	mov	r9,r3
 40006d8:	000d883a 	mov	r6,zero
 40006dc:	01d01c34 	movhi	r7,16496
 40006e0:	39f80004 	addi	r7,r7,-8192
 40006e4:	4009883a 	mov	r4,r8
 40006e8:	480b883a 	mov	r5,r9
 40006ec:	40041fc0 	call	40041fc <__divdf3>
 40006f0:	1009883a 	mov	r4,r2
 40006f4:	180b883a 	mov	r5,r3
 40006f8:	2005883a 	mov	r2,r4
 40006fc:	2807883a 	mov	r3,r5
 4000700:	e1bffe17 	ldw	r6,-8(fp)
 4000704:	e1ffff17 	ldw	r7,-4(fp)
 4000708:	1009883a 	mov	r4,r2
 400070c:	180b883a 	mov	r5,r3
 4000710:	4004d9c0 	call	4004d9c <__muldf3>
 4000714:	100f883a 	mov	r7,r2
 4000718:	1811883a 	mov	r8,r3
 400071c:	380b883a 	mov	r5,r7
 4000720:	400d883a 	mov	r6,r8
 4000724:	2807883a 	mov	r3,r5
 4000728:	3009883a 	mov	r4,r6

}
 400072c:	1805883a 	mov	r2,r3
 4000730:	2007883a 	mov	r3,r4
 4000734:	e037883a 	mov	sp,fp
 4000738:	dfc00117 	ldw	ra,4(sp)
 400073c:	df000017 	ldw	fp,0(sp)
 4000740:	dec00204 	addi	sp,sp,8
 4000744:	f800283a 	ret

04000748 <normalize_output>:
 * the zone where the motor jumps, opting for a higher minimum speed before
 * cutoff
 *
 * @param output The desired PWM control signal for the motor before correction
 */
int normalize_output(double output){
 4000748:	defffb04 	addi	sp,sp,-20
 400074c:	dfc00415 	stw	ra,16(sp)
 4000750:	df000315 	stw	fp,12(sp)
 4000754:	dc000215 	stw	r16,8(sp)
 4000758:	df000304 	addi	fp,sp,12
 400075c:	e13ffd15 	stw	r4,-12(fp)
 4000760:	e17ffe15 	stw	r5,-8(fp)

  output = max(min(output, 255.0), -255.0);
 4000764:	000d883a 	mov	r6,zero
 4000768:	01d01c34 	movhi	r7,16496
 400076c:	39f80004 	addi	r7,r7,-8192
 4000770:	e13ffd17 	ldw	r4,-12(fp)
 4000774:	e17ffe17 	ldw	r5,-8(fp)
 4000778:	4004ca80 	call	4004ca8 <__ledf2>
 400077c:	10000a0e 	bge	r2,zero,40007a8 <normalize_output+0x60>
 4000780:	04000044 	movi	r16,1
 4000784:	000d883a 	mov	r6,zero
 4000788:	01f01c34 	movhi	r7,49264
 400078c:	39f80004 	addi	r7,r7,-8192
 4000790:	e13ffd17 	ldw	r4,-12(fp)
 4000794:	e17ffe17 	ldw	r5,-8(fp)
 4000798:	4004bcc0 	call	4004bcc <__gedf2>
 400079c:	00800316 	blt	zero,r2,40007ac <normalize_output+0x64>
 40007a0:	0021883a 	mov	r16,zero
 40007a4:	00000106 	br	40007ac <normalize_output+0x64>
 40007a8:	04000044 	movi	r16,1
 40007ac:	80803fcc 	andi	r2,r16,255
 40007b0:	10000e26 	beq	r2,zero,40007ec <normalize_output+0xa4>
 40007b4:	000d883a 	mov	r6,zero
 40007b8:	01d01c34 	movhi	r7,16496
 40007bc:	39f80004 	addi	r7,r7,-8192
 40007c0:	e13ffd17 	ldw	r4,-12(fp)
 40007c4:	e17ffe17 	ldw	r5,-8(fp)
 40007c8:	4004ca80 	call	4004ca8 <__ledf2>
 40007cc:	1000030e 	bge	r2,zero,40007dc <normalize_output+0x94>
 40007d0:	e0bffd17 	ldw	r2,-12(fp)
 40007d4:	e0fffe17 	ldw	r3,-8(fp)
 40007d8:	00000706 	br	40007f8 <normalize_output+0xb0>
 40007dc:	0005883a 	mov	r2,zero
 40007e0:	00d01c34 	movhi	r3,16496
 40007e4:	18f80004 	addi	r3,r3,-8192
 40007e8:	00000306 	br	40007f8 <normalize_output+0xb0>
 40007ec:	0005883a 	mov	r2,zero
 40007f0:	00f01c34 	movhi	r3,49264
 40007f4:	18f80004 	addi	r3,r3,-8192
 40007f8:	e0bffd15 	stw	r2,-12(fp)
 40007fc:	e0fffe15 	stw	r3,-8(fp)

  if( output < minimum_zero && output > -1 * minimum_zero){
 4000800:	00800044 	movi	r2,1
 4000804:	10803fcc 	andi	r2,r2,255
 4000808:	1009883a 	mov	r4,r2
 400080c:	4005f840 	call	4005f84 <__floatsidf>
 4000810:	1011883a 	mov	r8,r2
 4000814:	1813883a 	mov	r9,r3
 4000818:	e1bffd17 	ldw	r6,-12(fp)
 400081c:	e1fffe17 	ldw	r7,-8(fp)
 4000820:	4009883a 	mov	r4,r8
 4000824:	480b883a 	mov	r5,r9
 4000828:	4004bcc0 	call	4004bcc <__gedf2>
 400082c:	0080100e 	bge	zero,r2,4000870 <normalize_output+0x128>
 4000830:	00800044 	movi	r2,1
 4000834:	10803fcc 	andi	r2,r2,255
 4000838:	0085c83a 	sub	r2,zero,r2
 400083c:	1009883a 	mov	r4,r2
 4000840:	4005f840 	call	4005f84 <__floatsidf>
 4000844:	1011883a 	mov	r8,r2
 4000848:	1813883a 	mov	r9,r3
 400084c:	e1bffd17 	ldw	r6,-12(fp)
 4000850:	e1fffe17 	ldw	r7,-8(fp)
 4000854:	4009883a 	mov	r4,r8
 4000858:	480b883a 	mov	r5,r9
 400085c:	4004ca80 	call	4004ca8 <__ledf2>
 4000860:	1000030e 	bge	r2,zero,4000870 <normalize_output+0x128>

    output = 0;
 4000864:	e03ffd15 	stw	zero,-12(fp)
 4000868:	e03ffe15 	stw	zero,-8(fp)
 400086c:	00003106 	br	4000934 <normalize_output+0x1ec>

  } else if( output < minimum_stable_pwm && output > -1 * minimum_stable_pwm ){
 4000870:	00800f04 	movi	r2,60
 4000874:	10803fcc 	andi	r2,r2,255
 4000878:	1009883a 	mov	r4,r2
 400087c:	4005f840 	call	4005f84 <__floatsidf>
 4000880:	1011883a 	mov	r8,r2
 4000884:	1813883a 	mov	r9,r3
 4000888:	e1bffd17 	ldw	r6,-12(fp)
 400088c:	e1fffe17 	ldw	r7,-8(fp)
 4000890:	4009883a 	mov	r4,r8
 4000894:	480b883a 	mov	r5,r9
 4000898:	4004bcc0 	call	4004bcc <__gedf2>
 400089c:	0080250e 	bge	zero,r2,4000934 <normalize_output+0x1ec>
 40008a0:	00800f04 	movi	r2,60
 40008a4:	10803fcc 	andi	r2,r2,255
 40008a8:	0085c83a 	sub	r2,zero,r2
 40008ac:	1009883a 	mov	r4,r2
 40008b0:	4005f840 	call	4005f84 <__floatsidf>
 40008b4:	1011883a 	mov	r8,r2
 40008b8:	1813883a 	mov	r9,r3
 40008bc:	e1bffd17 	ldw	r6,-12(fp)
 40008c0:	e1fffe17 	ldw	r7,-8(fp)
 40008c4:	4009883a 	mov	r4,r8
 40008c8:	480b883a 	mov	r5,r9
 40008cc:	4004ca80 	call	4004ca8 <__ledf2>
 40008d0:	1000180e 	bge	r2,zero,4000934 <normalize_output+0x1ec>

    if(output > 0){
 40008d4:	000d883a 	mov	r6,zero
 40008d8:	000f883a 	mov	r7,zero
 40008dc:	e13ffd17 	ldw	r4,-12(fp)
 40008e0:	e17ffe17 	ldw	r5,-8(fp)
 40008e4:	4004bcc0 	call	4004bcc <__gedf2>
 40008e8:	0080090e 	bge	zero,r2,4000910 <normalize_output+0x1c8>
      output = minimum_stable_pwm;
 40008ec:	00800f04 	movi	r2,60
 40008f0:	10803fcc 	andi	r2,r2,255
 40008f4:	1009883a 	mov	r4,r2
 40008f8:	40060600 	call	4006060 <__floatunsidf>
 40008fc:	1009883a 	mov	r4,r2
 4000900:	180b883a 	mov	r5,r3
 4000904:	e13ffd15 	stw	r4,-12(fp)
 4000908:	e17ffe15 	stw	r5,-8(fp)
 400090c:	00000906 	br	4000934 <normalize_output+0x1ec>
    } else {
      output = -1 * minimum_stable_pwm;
 4000910:	00800f04 	movi	r2,60
 4000914:	10803fcc 	andi	r2,r2,255
 4000918:	0085c83a 	sub	r2,zero,r2
 400091c:	1009883a 	mov	r4,r2
 4000920:	4005f840 	call	4005f84 <__floatsidf>
 4000924:	1009883a 	mov	r4,r2
 4000928:	180b883a 	mov	r5,r3
 400092c:	e13ffd15 	stw	r4,-12(fp)
 4000930:	e17ffe15 	stw	r5,-8(fp)
    }

  }

  return output;
 4000934:	e13ffd17 	ldw	r4,-12(fp)
 4000938:	e17ffe17 	ldw	r5,-8(fp)
 400093c:	4005f040 	call	4005f04 <__fixdfsi>

}
 4000940:	e6ffff04 	addi	sp,fp,-4
 4000944:	dfc00217 	ldw	ra,8(sp)
 4000948:	df000117 	ldw	fp,4(sp)
 400094c:	dc000017 	ldw	r16,0(sp)
 4000950:	dec00304 	addi	sp,sp,12
 4000954:	f800283a 	ret

04000958 <motor_init>:

// Init motor pin states
static void motor_init(void){
 4000958:	defffe04 	addi	sp,sp,-8
 400095c:	dfc00115 	stw	ra,4(sp)
 4000960:	df000015 	stw	fp,0(sp)
 4000964:	d839883a 	mov	fp,sp
	// Default state to motors not enabled
	//digitalWrite(pinCW_Left, LOW);   // stop clockwise
	//digitalWrite(pinCC_Left, LOW);   // stop counter-clockwise

	// Stop motors
	set_motors(0, 0);
 4000968:	000b883a 	mov	r5,zero
 400096c:	0009883a 	mov	r4,zero
 4000970:	40005cc0 	call	40005cc <set_motors>
	* when the drive PID is at full output.
	*/

	// Setup the Drive PID

	drive_pid.kp   = 15;
 4000974:	00810074 	movhi	r2,1025
 4000978:	10976e04 	addi	r2,r2,23992
 400097c:	00d05c34 	movhi	r3,16752
 4000980:	10c00315 	stw	r3,12(r2)
	drive_pid.ki   = 0;
 4000984:	00810074 	movhi	r2,1025
 4000988:	10976e04 	addi	r2,r2,23992
 400098c:	10000415 	stw	zero,16(r2)
	drive_pid.kd   = 2;
 4000990:	00810074 	movhi	r2,1025
 4000994:	10976e04 	addi	r2,r2,23992
 4000998:	00d00034 	movhi	r3,16384
 400099c:	10c00515 	stw	r3,20(r2)
	drive_pid.max  =  120;					// Limit range to -128 to 128
 40009a0:	00810074 	movhi	r2,1025
 40009a4:	10976e04 	addi	r2,r2,23992
 40009a8:	00d0bc34 	movhi	r3,17136
 40009ac:	10c00715 	stw	r3,28(r2)
	drive_pid.min  = -120;
 40009b0:	00810074 	movhi	r2,1025
 40009b4:	10976e04 	addi	r2,r2,23992
 40009b8:	00f0bc34 	movhi	r3,49904
 40009bc:	10c00815 	stw	r3,32(r2)
	drive_pid.mode = FORWARD;
 40009c0:	00810074 	movhi	r2,1025
 40009c4:	10976e04 	addi	r2,r2,23992
 40009c8:	10000915 	stw	zero,36(r2)
	//drive_pid.SetSampleTime(20);          // 50 Hz update rate

	// Setup the Yaw PID
	yaw_pid.kp   = 20;
 40009cc:	00810074 	movhi	r2,1025
 40009d0:	10976104 	addi	r2,r2,23940
 40009d4:	00d06834 	movhi	r3,16800
 40009d8:	10c00315 	stw	r3,12(r2)
	yaw_pid.ki   = 0;
 40009dc:	00810074 	movhi	r2,1025
 40009e0:	10976104 	addi	r2,r2,23940
 40009e4:	10000415 	stw	zero,16(r2)
	yaw_pid.kd   = 2;
 40009e8:	00810074 	movhi	r2,1025
 40009ec:	10976104 	addi	r2,r2,23940
 40009f0:	00d00034 	movhi	r3,16384
 40009f4:	10c00515 	stw	r3,20(r2)
	yaw_pid.max  =  140;
 40009f8:	00810074 	movhi	r2,1025
 40009fc:	10976104 	addi	r2,r2,23940
 4000a00:	00d0c334 	movhi	r3,17164
 4000a04:	10c00715 	stw	r3,28(r2)
	yaw_pid.min  = -140;
 4000a08:	00810074 	movhi	r2,1025
 4000a0c:	10976104 	addi	r2,r2,23940
 4000a10:	00f0c334 	movhi	r3,49932
 4000a14:	10c00815 	stw	r3,32(r2)
	yaw_pid.mode = REVERSE;
 4000a18:	00810074 	movhi	r2,1025
 4000a1c:	10976104 	addi	r2,r2,23940
 4000a20:	00c00044 	movi	r3,1
 4000a24:	10c00915 	stw	r3,36(r2)

}
 4000a28:	0001883a 	nop
 4000a2c:	e037883a 	mov	sp,fp
 4000a30:	dfc00117 	ldw	ra,4(sp)
 4000a34:	df000017 	ldw	fp,0(sp)
 4000a38:	dec00204 	addi	sp,sp,8
 4000a3c:	f800283a 	ret

04000a40 <wait_button_press>:
	.num_states = 1,
	.drive_changes = right_drive_changes,
	.yaw_changes = right_yaw_changes
};

static void wait_button_press(void){
 4000a40:	defffe04 	addi	sp,sp,-8
 4000a44:	dfc00115 	stw	ra,4(sp)
 4000a48:	df000015 	stw	fp,0(sp)
 4000a4c:	d839883a 	mov	fp,sp

	// wait for ON switch
	while ( ( IORD_ALTERA_AVALON_PIO_DATA(ON_BUTTON_BASE) & 1 )  == 1){
 4000a50:	00000206 	br	4000a5c <wait_button_press+0x1c>
		usleep(1000);
 4000a54:	0100fa04 	movi	r4,1000
 4000a58:	400f1e40 	call	400f1e4 <usleep>
};

static void wait_button_press(void){

	// wait for ON switch
	while ( ( IORD_ALTERA_AVALON_PIO_DATA(ON_BUTTON_BASE) & 1 )  == 1){
 4000a5c:	00820034 	movhi	r2,2048
 4000a60:	10840404 	addi	r2,r2,4112
 4000a64:	10800037 	ldwio	r2,0(r2)
 4000a68:	1080004c 	andi	r2,r2,1
 4000a6c:	103ff91e 	bne	r2,zero,4000a54 <__alt_data_end+0xfc000a54>
		usleep(1000);
	}

}
 4000a70:	0001883a 	nop
 4000a74:	e037883a 	mov	sp,fp
 4000a78:	dfc00117 	ldw	ra,4(sp)
 4000a7c:	df000017 	ldw	fp,0(sp)
 4000a80:	dec00204 	addi	sp,sp,8
 4000a84:	f800283a 	ret

04000a88 <motor_control_loop>:
static void motor_control_loop(control_t * instructions, bool wait){
 4000a88:	deffec04 	addi	sp,sp,-80
 4000a8c:	dfc01315 	stw	ra,76(sp)
 4000a90:	df001215 	stw	fp,72(sp)
 4000a94:	dc401115 	stw	r17,68(sp)
 4000a98:	dc001015 	stw	r16,64(sp)
 4000a9c:	df001204 	addi	fp,sp,72
 4000aa0:	e13ffc15 	stw	r4,-16(fp)
 4000aa4:	2805883a 	mov	r2,r5
 4000aa8:	e0bffd05 	stb	r2,-12(fp)

	motor_init();
 4000aac:	40009580 	call	4000958 <motor_init>

	//  Initialize drive and yaw setpoints to 0
	drive_pid.setpoint = 0.0f;
 4000ab0:	00810074 	movhi	r2,1025
 4000ab4:	10976e04 	addi	r2,r2,23992
 4000ab8:	10000015 	stw	zero,0(r2)
	yaw_pid.setpoint = 0.0f;
 4000abc:	00810074 	movhi	r2,1025
 4000ac0:	10976104 	addi	r2,r2,23940
 4000ac4:	10000015 	stw	zero,0(r2)

	// State machine variables to allow transition between pre-programmed motions
	int state = 0;
 4000ac8:	e03fee15 	stw	zero,-72(fp)
	bool state_change = false;
 4000acc:	e03fef05 	stb	zero,-68(fp)

	// State machine finished, allows exiting of task loop to wait for another switch press to run again
	bool done = false;
 4000ad0:	e03fef45 	stb	zero,-67(fp)

	if(wait){
 4000ad4:	e0bffd03 	ldbu	r2,-12(fp)
 4000ad8:	10000126 	beq	r2,zero,4000ae0 <motor_control_loop+0x58>
		wait_button_press();
 4000adc:	4000a400 	call	4000a40 <wait_button_press>
	}

	usleep(100000);    // Allow user to step away before robot moves
 4000ae0:	010000b4 	movhi	r4,2
 4000ae4:	2121a804 	addi	r4,r4,-31072
 4000ae8:	400f1e40 	call	400f1e4 <usleep>

	// Reset state variables
	done = false;
 4000aec:	e03fef45 	stb	zero,-67(fp)
	state = 0;
 4000af0:	e03fee15 	stw	zero,-72(fp)

	// setup encoder offsets
	float left_offset = read_encoder_left() / 1000.0f;
 4000af4:	400057c0 	call	400057c <read_encoder_left>
 4000af8:	1009883a 	mov	r4,r2
 4000afc:	400382c0 	call	400382c <__floatsisf>
 4000b00:	1007883a 	mov	r3,r2
 4000b04:	01511eb4 	movhi	r5,17530
 4000b08:	1809883a 	mov	r4,r3
 4000b0c:	40029540 	call	4002954 <__divsf3>
 4000b10:	1007883a 	mov	r3,r2
 4000b14:	e0fff115 	stw	r3,-60(fp)
	float right_offset = read_encoder_right() / 1000.0f;
 4000b18:	40005a40 	call	40005a4 <read_encoder_right>
 4000b1c:	1009883a 	mov	r4,r2
 4000b20:	400382c0 	call	400382c <__floatsisf>
 4000b24:	1007883a 	mov	r3,r2
 4000b28:	01511eb4 	movhi	r5,17530
 4000b2c:	1809883a 	mov	r4,r3
 4000b30:	40029540 	call	4002954 <__divsf3>
 4000b34:	1007883a 	mov	r3,r2
 4000b38:	e0fff215 	stw	r3,-56(fp)

	// reset state
	drive_pid.setpoint = 0.0f;
 4000b3c:	00810074 	movhi	r2,1025
 4000b40:	10976e04 	addi	r2,r2,23992
 4000b44:	10000015 	stw	zero,0(r2)
	yaw_pid.setpoint = 0.0f;
 4000b48:	00810074 	movhi	r2,1025
 4000b4c:	10976104 	addi	r2,r2,23940
 4000b50:	10000015 	stw	zero,0(r2)

	float last_time = read_uptime() / 1000.0;
 4000b54:	400052c0 	call	400052c <read_uptime>
 4000b58:	1009883a 	mov	r4,r2
 4000b5c:	40060600 	call	4006060 <__floatunsidf>
 4000b60:	1011883a 	mov	r8,r2
 4000b64:	1813883a 	mov	r9,r3
 4000b68:	000d883a 	mov	r6,zero
 4000b6c:	01d023f4 	movhi	r7,16527
 4000b70:	39d00004 	addi	r7,r7,16384
 4000b74:	4009883a 	mov	r4,r8
 4000b78:	480b883a 	mov	r5,r9
 4000b7c:	40041fc0 	call	40041fc <__divdf3>
 4000b80:	1009883a 	mov	r4,r2
 4000b84:	180b883a 	mov	r5,r3
 4000b88:	2005883a 	mov	r2,r4
 4000b8c:	2807883a 	mov	r3,r5
 4000b90:	1009883a 	mov	r4,r2
 4000b94:	180b883a 	mov	r5,r3
 4000b98:	40062180 	call	4006218 <__truncdfsf2>
 4000b9c:	1007883a 	mov	r3,r2
 4000ba0:	e0fff015 	stw	r3,-64(fp)

	// Run control loops while robot is operating
	while(!done){
 4000ba4:	00010706 	br	4000fc4 <motor_control_loop+0x53c>

		float uptime = read_uptime() / 1000.0;
 4000ba8:	400052c0 	call	400052c <read_uptime>
 4000bac:	1009883a 	mov	r4,r2
 4000bb0:	40060600 	call	4006060 <__floatunsidf>
 4000bb4:	1011883a 	mov	r8,r2
 4000bb8:	1813883a 	mov	r9,r3
 4000bbc:	000d883a 	mov	r6,zero
 4000bc0:	01d023f4 	movhi	r7,16527
 4000bc4:	39d00004 	addi	r7,r7,16384
 4000bc8:	4009883a 	mov	r4,r8
 4000bcc:	480b883a 	mov	r5,r9
 4000bd0:	40041fc0 	call	40041fc <__divdf3>
 4000bd4:	1009883a 	mov	r4,r2
 4000bd8:	180b883a 	mov	r5,r3
 4000bdc:	2005883a 	mov	r2,r4
 4000be0:	2807883a 	mov	r3,r5
 4000be4:	1009883a 	mov	r4,r2
 4000be8:	180b883a 	mov	r5,r3
 4000bec:	40062180 	call	4006218 <__truncdfsf2>
 4000bf0:	1007883a 	mov	r3,r2
 4000bf4:	e0fff315 	stw	r3,-52(fp)

		float dt = uptime - last_time;
 4000bf8:	e17ff017 	ldw	r5,-64(fp)
 4000bfc:	e13ff317 	ldw	r4,-52(fp)
 4000c00:	40033480 	call	4003348 <__subsf3>
 4000c04:	1007883a 	mov	r3,r2
 4000c08:	e0fff415 	stw	r3,-48(fp)

		// scale encoder outputs to be more consistent with PID gains
		float left_value = ( read_encoder_left() / 1000.0f ) - left_offset;
 4000c0c:	400057c0 	call	400057c <read_encoder_left>
 4000c10:	1009883a 	mov	r4,r2
 4000c14:	400382c0 	call	400382c <__floatsisf>
 4000c18:	1007883a 	mov	r3,r2
 4000c1c:	01511eb4 	movhi	r5,17530
 4000c20:	1809883a 	mov	r4,r3
 4000c24:	40029540 	call	4002954 <__divsf3>
 4000c28:	1007883a 	mov	r3,r2
 4000c2c:	1805883a 	mov	r2,r3
 4000c30:	e17ff117 	ldw	r5,-60(fp)
 4000c34:	1009883a 	mov	r4,r2
 4000c38:	40033480 	call	4003348 <__subsf3>
 4000c3c:	1007883a 	mov	r3,r2
 4000c40:	e0fff515 	stw	r3,-44(fp)
		float right_value = ( read_encoder_right() / 1000.0f ) - right_offset;
 4000c44:	40005a40 	call	40005a4 <read_encoder_right>
 4000c48:	1009883a 	mov	r4,r2
 4000c4c:	400382c0 	call	400382c <__floatsisf>
 4000c50:	1007883a 	mov	r3,r2
 4000c54:	01511eb4 	movhi	r5,17530
 4000c58:	1809883a 	mov	r4,r3
 4000c5c:	40029540 	call	4002954 <__divsf3>
 4000c60:	1007883a 	mov	r3,r2
 4000c64:	1805883a 	mov	r2,r3
 4000c68:	e17ff217 	ldw	r5,-56(fp)
 4000c6c:	1009883a 	mov	r4,r2
 4000c70:	40033480 	call	4003348 <__subsf3>
 4000c74:	1007883a 	mov	r3,r2
 4000c78:	e0fff615 	stw	r3,-40(fp)

		// Convert encoder values to Drive and Yaw state values for control
		float drive_value = ( left_value + right_value ) / 2.0f;
 4000c7c:	e17ff617 	ldw	r5,-40(fp)
 4000c80:	e13ff517 	ldw	r4,-44(fp)
 4000c84:	400248c0 	call	400248c <__addsf3>
 4000c88:	1007883a 	mov	r3,r2
 4000c8c:	1805883a 	mov	r2,r3
 4000c90:	01500034 	movhi	r5,16384
 4000c94:	1009883a 	mov	r4,r2
 4000c98:	40029540 	call	4002954 <__divsf3>
 4000c9c:	1007883a 	mov	r3,r2
 4000ca0:	e0fff715 	stw	r3,-36(fp)
		float yaw_value = left_value - right_value;
 4000ca4:	e17ff617 	ldw	r5,-40(fp)
 4000ca8:	e13ff517 	ldw	r4,-44(fp)
 4000cac:	40033480 	call	4003348 <__subsf3>
 4000cb0:	1007883a 	mov	r3,r2
 4000cb4:	e0fff815 	stw	r3,-32(fp)

			kiss_send_packet(&jtag_kiss, (const uint8_t *) states_msg, 9);
		}*/

		// Compute the control efforts from the PID loops
		fp_t drive_output = pid_compute(&drive_pid, drive_value, dt);
 4000cb8:	e1bff417 	ldw	r6,-48(fp)
 4000cbc:	e17ff717 	ldw	r5,-36(fp)
 4000cc0:	01010074 	movhi	r4,1025
 4000cc4:	21176e04 	addi	r4,r4,23992
 4000cc8:	40020880 	call	4002088 <pid_compute>
 4000ccc:	e0bff915 	stw	r2,-28(fp)
		fp_t yaw_output   = pid_compute(&yaw_pid, yaw_value, dt);
 4000cd0:	e1bff417 	ldw	r6,-48(fp)
 4000cd4:	e17ff817 	ldw	r5,-32(fp)
 4000cd8:	01010074 	movhi	r4,1025
 4000cdc:	21176104 	addi	r4,r4,23940
 4000ce0:	40020880 	call	4002088 <pid_compute>
 4000ce4:	e0bffa15 	stw	r2,-24(fp)

		// Mix the control efforts into the motors
		int16_t left_output = normalize_output(scale_output(drive_output) + scale_output(yaw_output));
 4000ce8:	e13ff917 	ldw	r4,-28(fp)
 4000cec:	40061080 	call	4006108 <__extendsfdf2>
 4000cf0:	100b883a 	mov	r5,r2
 4000cf4:	180d883a 	mov	r6,r3
 4000cf8:	2809883a 	mov	r4,r5
 4000cfc:	300b883a 	mov	r5,r6
 4000d00:	40006a80 	call	40006a8 <scale_output>
 4000d04:	1021883a 	mov	r16,r2
 4000d08:	1823883a 	mov	r17,r3
 4000d0c:	e13ffa17 	ldw	r4,-24(fp)
 4000d10:	40061080 	call	4006108 <__extendsfdf2>
 4000d14:	100b883a 	mov	r5,r2
 4000d18:	180d883a 	mov	r6,r3
 4000d1c:	2809883a 	mov	r4,r5
 4000d20:	300b883a 	mov	r5,r6
 4000d24:	40006a80 	call	40006a8 <scale_output>
 4000d28:	1009883a 	mov	r4,r2
 4000d2c:	180b883a 	mov	r5,r3
 4000d30:	200d883a 	mov	r6,r4
 4000d34:	280f883a 	mov	r7,r5
 4000d38:	8009883a 	mov	r4,r16
 4000d3c:	880b883a 	mov	r5,r17
 4000d40:	40039500 	call	4003950 <__adddf3>
 4000d44:	1009883a 	mov	r4,r2
 4000d48:	180b883a 	mov	r5,r3
 4000d4c:	2005883a 	mov	r2,r4
 4000d50:	2807883a 	mov	r3,r5
 4000d54:	1009883a 	mov	r4,r2
 4000d58:	180b883a 	mov	r5,r3
 4000d5c:	40007480 	call	4000748 <normalize_output>
 4000d60:	e0bffb0d 	sth	r2,-20(fp)
		int16_t right_output = normalize_output(scale_output(drive_output) - scale_output(yaw_output));
 4000d64:	e13ff917 	ldw	r4,-28(fp)
 4000d68:	40061080 	call	4006108 <__extendsfdf2>
 4000d6c:	100b883a 	mov	r5,r2
 4000d70:	180d883a 	mov	r6,r3
 4000d74:	2809883a 	mov	r4,r5
 4000d78:	300b883a 	mov	r5,r6
 4000d7c:	40006a80 	call	40006a8 <scale_output>
 4000d80:	1021883a 	mov	r16,r2
 4000d84:	1823883a 	mov	r17,r3
 4000d88:	e13ffa17 	ldw	r4,-24(fp)
 4000d8c:	40061080 	call	4006108 <__extendsfdf2>
 4000d90:	100b883a 	mov	r5,r2
 4000d94:	180d883a 	mov	r6,r3
 4000d98:	2809883a 	mov	r4,r5
 4000d9c:	300b883a 	mov	r5,r6
 4000da0:	40006a80 	call	40006a8 <scale_output>
 4000da4:	1009883a 	mov	r4,r2
 4000da8:	180b883a 	mov	r5,r3
 4000dac:	200d883a 	mov	r6,r4
 4000db0:	280f883a 	mov	r7,r5
 4000db4:	8009883a 	mov	r4,r16
 4000db8:	880b883a 	mov	r5,r17
 4000dbc:	40056080 	call	4005608 <__subdf3>
 4000dc0:	1009883a 	mov	r4,r2
 4000dc4:	180b883a 	mov	r5,r3
 4000dc8:	2005883a 	mov	r2,r4
 4000dcc:	2807883a 	mov	r3,r5
 4000dd0:	1009883a 	mov	r4,r2
 4000dd4:	180b883a 	mov	r5,r3
 4000dd8:	40007480 	call	4000748 <normalize_output>
 4000ddc:	e0bffb8d 	sth	r2,-18(fp)

		// send the control efforts to the motors
		set_motors(left_output, right_output);
 4000de0:	e0bffb0f 	ldh	r2,-20(fp)
 4000de4:	e0fffb8f 	ldh	r3,-18(fp)
 4000de8:	180b883a 	mov	r5,r3
 4000dec:	1009883a 	mov	r4,r2
 4000df0:	40005cc0 	call	40005cc <set_motors>

		// Wait for drive and yaw goals to be met, then start a state transition
		if(drive_value < drive_pid.setpoint + TOLERANCE && drive_value > drive_pid.setpoint - TOLERANCE
 4000df4:	00810074 	movhi	r2,1025
 4000df8:	10976e04 	addi	r2,r2,23992
 4000dfc:	10c00017 	ldw	r3,0(r2)
 4000e00:	014f7374 	movhi	r5,15821
 4000e04:	29733344 	addi	r5,r5,-13107
 4000e08:	1809883a 	mov	r4,r3
 4000e0c:	400248c0 	call	400248c <__addsf3>
 4000e10:	1007883a 	mov	r3,r2
 4000e14:	1805883a 	mov	r2,r3
 4000e18:	e17ff717 	ldw	r5,-36(fp)
 4000e1c:	1009883a 	mov	r4,r2
 4000e20:	4002d940 	call	4002d94 <__gesf2>
 4000e24:	00802c0e 	bge	zero,r2,4000ed8 <motor_control_loop+0x450>
 4000e28:	00810074 	movhi	r2,1025
 4000e2c:	10976e04 	addi	r2,r2,23992
 4000e30:	10c00017 	ldw	r3,0(r2)
 4000e34:	014f7374 	movhi	r5,15821
 4000e38:	29733344 	addi	r5,r5,-13107
 4000e3c:	1809883a 	mov	r4,r3
 4000e40:	40033480 	call	4003348 <__subsf3>
 4000e44:	1007883a 	mov	r3,r2
 4000e48:	1805883a 	mov	r2,r3
 4000e4c:	e17ff717 	ldw	r5,-36(fp)
 4000e50:	1009883a 	mov	r4,r2
 4000e54:	4002e500 	call	4002e50 <__lesf2>
 4000e58:	10001f0e 	bge	r2,zero,4000ed8 <motor_control_loop+0x450>
		   && yaw_value < yaw_pid.setpoint + TOLERANCE && yaw_value > yaw_pid.setpoint - TOLERANCE){
 4000e5c:	00810074 	movhi	r2,1025
 4000e60:	10976104 	addi	r2,r2,23940
 4000e64:	10c00017 	ldw	r3,0(r2)
 4000e68:	014f7374 	movhi	r5,15821
 4000e6c:	29733344 	addi	r5,r5,-13107
 4000e70:	1809883a 	mov	r4,r3
 4000e74:	400248c0 	call	400248c <__addsf3>
 4000e78:	1007883a 	mov	r3,r2
 4000e7c:	1805883a 	mov	r2,r3
 4000e80:	e17ff817 	ldw	r5,-32(fp)
 4000e84:	1009883a 	mov	r4,r2
 4000e88:	4002d940 	call	4002d94 <__gesf2>
 4000e8c:	0080120e 	bge	zero,r2,4000ed8 <motor_control_loop+0x450>
 4000e90:	00810074 	movhi	r2,1025
 4000e94:	10976104 	addi	r2,r2,23940
 4000e98:	10c00017 	ldw	r3,0(r2)
 4000e9c:	014f7374 	movhi	r5,15821
 4000ea0:	29733344 	addi	r5,r5,-13107
 4000ea4:	1809883a 	mov	r4,r3
 4000ea8:	40033480 	call	4003348 <__subsf3>
 4000eac:	1007883a 	mov	r3,r2
 4000eb0:	1805883a 	mov	r2,r3
 4000eb4:	e17ff817 	ldw	r5,-32(fp)
 4000eb8:	1009883a 	mov	r4,r2
 4000ebc:	4002e500 	call	4002e50 <__lesf2>
 4000ec0:	1000050e 	bge	r2,zero,4000ed8 <motor_control_loop+0x450>
			state++;
 4000ec4:	e0bfee17 	ldw	r2,-72(fp)
 4000ec8:	10800044 	addi	r2,r2,1
 4000ecc:	e0bfee15 	stw	r2,-72(fp)
			state_change = true;
 4000ed0:	00800044 	movi	r2,1
 4000ed4:	e0bfef05 	stb	r2,-68(fp)
		}

		// Switch states to perform a figure 8 motion
		if(state_change){
 4000ed8:	e0bfef03 	ldbu	r2,-68(fp)
 4000edc:	10003726 	beq	r2,zero,4000fbc <motor_control_loop+0x534>

			if(state == ( instructions->num_states + 1) ){
 4000ee0:	e0bffc17 	ldw	r2,-16(fp)
 4000ee4:	1080000b 	ldhu	r2,0(r2)
 4000ee8:	10bfffcc 	andi	r2,r2,65535
 4000eec:	10c00044 	addi	r3,r2,1
 4000ef0:	e0bfee17 	ldw	r2,-72(fp)
 4000ef4:	1880061e 	bne	r3,r2,4000f10 <motor_control_loop+0x488>
				set_motors(0, 0);
 4000ef8:	000b883a 	mov	r5,zero
 4000efc:	0009883a 	mov	r4,zero
 4000f00:	40005cc0 	call	40005cc <set_motors>
				done = true;
 4000f04:	00800044 	movi	r2,1
 4000f08:	e0bfef45 	stb	r2,-67(fp)
 4000f0c:	00002a06 	br	4000fb8 <motor_control_loop+0x530>
			} else {
				drive_pid.setpoint += instructions->drive_changes[state - 1];
 4000f10:	00810074 	movhi	r2,1025
 4000f14:	10976e04 	addi	r2,r2,23992
 4000f18:	11800017 	ldw	r6,0(r2)
 4000f1c:	e0bffc17 	ldw	r2,-16(fp)
 4000f20:	10c00117 	ldw	r3,4(r2)
 4000f24:	e13fee17 	ldw	r4,-72(fp)
 4000f28:	00900034 	movhi	r2,16384
 4000f2c:	10bfffc4 	addi	r2,r2,-1
 4000f30:	2085883a 	add	r2,r4,r2
 4000f34:	1085883a 	add	r2,r2,r2
 4000f38:	1085883a 	add	r2,r2,r2
 4000f3c:	1885883a 	add	r2,r3,r2
 4000f40:	10c00017 	ldw	r3,0(r2)
 4000f44:	180b883a 	mov	r5,r3
 4000f48:	3009883a 	mov	r4,r6
 4000f4c:	400248c0 	call	400248c <__addsf3>
 4000f50:	1009883a 	mov	r4,r2
 4000f54:	2007883a 	mov	r3,r4
 4000f58:	00810074 	movhi	r2,1025
 4000f5c:	10976e04 	addi	r2,r2,23992
 4000f60:	10c00015 	stw	r3,0(r2)
				yaw_pid.setpoint += instructions->yaw_changes[state - 1];
 4000f64:	00810074 	movhi	r2,1025
 4000f68:	10976104 	addi	r2,r2,23940
 4000f6c:	11800017 	ldw	r6,0(r2)
 4000f70:	e0bffc17 	ldw	r2,-16(fp)
 4000f74:	10c00217 	ldw	r3,8(r2)
 4000f78:	e13fee17 	ldw	r4,-72(fp)
 4000f7c:	00900034 	movhi	r2,16384
 4000f80:	10bfffc4 	addi	r2,r2,-1
 4000f84:	2085883a 	add	r2,r4,r2
 4000f88:	1085883a 	add	r2,r2,r2
 4000f8c:	1085883a 	add	r2,r2,r2
 4000f90:	1885883a 	add	r2,r3,r2
 4000f94:	10c00017 	ldw	r3,0(r2)
 4000f98:	180b883a 	mov	r5,r3
 4000f9c:	3009883a 	mov	r4,r6
 4000fa0:	400248c0 	call	400248c <__addsf3>
 4000fa4:	1009883a 	mov	r4,r2
 4000fa8:	2007883a 	mov	r3,r4
 4000fac:	00810074 	movhi	r2,1025
 4000fb0:	10976104 	addi	r2,r2,23940
 4000fb4:	10c00015 	stw	r3,0(r2)
			}

			state_change = false;
 4000fb8:	e03fef05 	stb	zero,-68(fp)

		}

		last_time = uptime;
 4000fbc:	e0bff317 	ldw	r2,-52(fp)
 4000fc0:	e0bff015 	stw	r2,-64(fp)
	yaw_pid.setpoint = 0.0f;

	float last_time = read_uptime() / 1000.0;

	// Run control loops while robot is operating
	while(!done){
 4000fc4:	e0bfef43 	ldbu	r2,-67(fp)
 4000fc8:	1080005c 	xori	r2,r2,1
 4000fcc:	10803fcc 	andi	r2,r2,255
 4000fd0:	103ef51e 	bne	r2,zero,4000ba8 <__alt_data_end+0xfc000ba8>

		last_time = uptime;

	}

}
 4000fd4:	0001883a 	nop
 4000fd8:	e6fffe04 	addi	sp,fp,-8
 4000fdc:	dfc00317 	ldw	ra,12(sp)
 4000fe0:	df000217 	ldw	fp,8(sp)
 4000fe4:	dc400117 	ldw	r17,4(sp)
 4000fe8:	dc000017 	ldw	r16,0(sp)
 4000fec:	dec00404 	addi	sp,sp,16
 4000ff0:	f800283a 	ret

04000ff4 <encoder_test>:

// Tests //////////////////////////////////////////////////////////////////////

static void encoder_test(){
 4000ff4:	defff904 	addi	sp,sp,-28
 4000ff8:	dfc00615 	stw	ra,24(sp)
 4000ffc:	df000515 	stw	fp,20(sp)
 4001000:	df000504 	addi	fp,sp,20

	while(1){

		float left_value = read_encoder_left() / 1000.0f;
 4001004:	400057c0 	call	400057c <read_encoder_left>
 4001008:	1009883a 	mov	r4,r2
 400100c:	400382c0 	call	400382c <__floatsisf>
 4001010:	1007883a 	mov	r3,r2
 4001014:	01511eb4 	movhi	r5,17530
 4001018:	1809883a 	mov	r4,r3
 400101c:	40029540 	call	4002954 <__divsf3>
 4001020:	1007883a 	mov	r3,r2
 4001024:	1805883a 	mov	r2,r3
 4001028:	e0bffb15 	stw	r2,-20(fp)
		float right_value = read_encoder_right() / 1000.0f;
 400102c:	40005a40 	call	40005a4 <read_encoder_right>
 4001030:	1009883a 	mov	r4,r2
 4001034:	400382c0 	call	400382c <__floatsisf>
 4001038:	1007883a 	mov	r3,r2
 400103c:	01511eb4 	movhi	r5,17530
 4001040:	1809883a 	mov	r4,r3
 4001044:	40029540 	call	4002954 <__divsf3>
 4001048:	1007883a 	mov	r3,r2
 400104c:	1805883a 	mov	r2,r3
 4001050:	e0bffc15 	stw	r2,-16(fp)

		uint8_t states_msg[9];

		states_msg[0] = KISS_PACKET_OPCODES__STATES;
 4001054:	00bfe404 	movi	r2,-112
 4001058:	e0bffd05 	stb	r2,-12(fp)
		memcpy(states_msg + 1, &left_value, sizeof(left_value));
 400105c:	e0bffd04 	addi	r2,fp,-12
 4001060:	10800044 	addi	r2,r2,1
 4001064:	01800104 	movi	r6,4
 4001068:	e17ffb04 	addi	r5,fp,-20
 400106c:	1009883a 	mov	r4,r2
 4001070:	40064240 	call	4006424 <memcpy>
		memcpy(states_msg + 5, &right_value, sizeof(right_value));
 4001074:	e0bffd04 	addi	r2,fp,-12
 4001078:	10800144 	addi	r2,r2,5
 400107c:	e0fffc04 	addi	r3,fp,-16
 4001080:	01800104 	movi	r6,4
 4001084:	180b883a 	mov	r5,r3
 4001088:	1009883a 	mov	r4,r2
 400108c:	40064240 	call	4006424 <memcpy>

		kiss_send_packet(&jtag_kiss, (const uint8_t *) states_msg, 9);
 4001090:	e0bffd04 	addi	r2,fp,-12
 4001094:	01800244 	movi	r6,9
 4001098:	100b883a 	mov	r5,r2
 400109c:	01010074 	movhi	r4,1025
 40010a0:	21174304 	addi	r4,r4,23820
 40010a4:	4001d200 	call	4001d20 <kiss_send_packet>

		usleep(10000);
 40010a8:	0109c404 	movi	r4,10000
 40010ac:	400f1e40 	call	400f1e4 <usleep>
	}
 40010b0:	003fd406 	br	4001004 <__alt_data_end+0xfc001004>

040010b4 <follow_line>:

}

static void follow_line(){
 40010b4:	defffc04 	addi	sp,sp,-16
 40010b8:	dfc00315 	stw	ra,12(sp)
 40010bc:	df000215 	stw	fp,8(sp)
 40010c0:	df000204 	addi	fp,sp,8

	uint32_t i;
	for(i = 0; i < 100000; i++){
 40010c4:	e03ffe15 	stw	zero,-8(fp)
 40010c8:	00002606 	br	4001164 <follow_line+0xb0>

		// line position -8 to 8
		int8_t line = read_line_detect() - 8;
 40010cc:	40005540 	call	4000554 <read_line_detect>
 40010d0:	10bffe04 	addi	r2,r2,-8
 40010d4:	e0bfff45 	stb	r2,-3(fp)

		int8_t yaw_bias = 0;
 40010d8:	e03fff05 	stb	zero,-4(fp)

		if(line < 0){
 40010dc:	e0bfff47 	ldb	r2,-3(fp)
 40010e0:	1000060e 	bge	r2,zero,40010fc <follow_line+0x48>
			yaw_bias = line * -10;
 40010e4:	e0bfff43 	ldbu	r2,-3(fp)
 40010e8:	017ffd84 	movi	r5,-10
 40010ec:	1009883a 	mov	r4,r2
 40010f0:	40024640 	call	4002464 <__mulsi3>
 40010f4:	e0bfff05 	stb	r2,-4(fp)
 40010f8:	00000706 	br	4001118 <follow_line+0x64>
			//set_motors(-1 * 15, 15);
		} else if(line > 0){
 40010fc:	e0bfff47 	ldb	r2,-3(fp)
 4001100:	0080050e 	bge	zero,r2,4001118 <follow_line+0x64>
			yaw_bias = line * -10;
 4001104:	e0bfff43 	ldbu	r2,-3(fp)
 4001108:	017ffd84 	movi	r5,-10
 400110c:	1009883a 	mov	r4,r2
 4001110:	40024640 	call	4002464 <__mulsi3>
 4001114:	e0bfff05 	stb	r2,-4(fp)
		} else {
			//set_motors(0, 0);
			//break;
		}

		set_motors(35 - yaw_bias, 35 + yaw_bias);
 4001118:	e0bfff07 	ldb	r2,-4(fp)
 400111c:	00c008c4 	movi	r3,35
 4001120:	1885c83a 	sub	r2,r3,r2
 4001124:	10ffffcc 	andi	r3,r2,65535
 4001128:	18e0001c 	xori	r3,r3,32768
 400112c:	18e00004 	addi	r3,r3,-32768
 4001130:	e0bfff07 	ldb	r2,-4(fp)
 4001134:	108008c4 	addi	r2,r2,35
 4001138:	10bfffcc 	andi	r2,r2,65535
 400113c:	10a0001c 	xori	r2,r2,32768
 4001140:	10a00004 	addi	r2,r2,-32768
 4001144:	100b883a 	mov	r5,r2
 4001148:	1809883a 	mov	r4,r3
 400114c:	40005cc0 	call	40005cc <set_motors>

		usleep(100);
 4001150:	01001904 	movi	r4,100
 4001154:	400f1e40 	call	400f1e4 <usleep>
}

static void follow_line(){

	uint32_t i;
	for(i = 0; i < 100000; i++){
 4001158:	e0bffe17 	ldw	r2,-8(fp)
 400115c:	10800044 	addi	r2,r2,1
 4001160:	e0bffe15 	stw	r2,-8(fp)
 4001164:	e0fffe17 	ldw	r3,-8(fp)
 4001168:	008000b4 	movhi	r2,2
 400116c:	10a1a7c4 	addi	r2,r2,-31073
 4001170:	10ffd62e 	bgeu	r2,r3,40010cc <__alt_data_end+0xfc0010cc>

		usleep(100);

	}

	set_motors(0, 0);
 4001174:	000b883a 	mov	r5,zero
 4001178:	0009883a 	mov	r4,zero
 400117c:	40005cc0 	call	40005cc <set_motors>

}
 4001180:	0001883a 	nop
 4001184:	e037883a 	mov	sp,fp
 4001188:	dfc00117 	ldw	ra,4(sp)
 400118c:	df000017 	ldw	fp,0(sp)
 4001190:	dec00204 	addi	sp,sp,8
 4001194:	f800283a 	ret

04001198 <motor_ramp_test>:

static void motor_ramp_test(){
 4001198:	defffd04 	addi	sp,sp,-12
 400119c:	dfc00215 	stw	ra,8(sp)
 40011a0:	df000115 	stw	fp,4(sp)
 40011a4:	df000104 	addi	fp,sp,4
	while(1){

		int16_t i;

		// Ramp up
		for(i = -255; i < 255; i++){
 40011a8:	00bfc044 	movi	r2,-255
 40011ac:	e0bfff0d 	sth	r2,-4(fp)
 40011b0:	00000a06 	br	40011dc <motor_ramp_test+0x44>
			set_motors(i, i);
 40011b4:	e0bfff0f 	ldh	r2,-4(fp)
 40011b8:	e0ffff0f 	ldh	r3,-4(fp)
 40011bc:	180b883a 	mov	r5,r3
 40011c0:	1009883a 	mov	r4,r2
 40011c4:	40005cc0 	call	40005cc <set_motors>
			usleep(2000);
 40011c8:	0101f404 	movi	r4,2000
 40011cc:	400f1e40 	call	400f1e4 <usleep>
	while(1){

		int16_t i;

		// Ramp up
		for(i = -255; i < 255; i++){
 40011d0:	e0bfff0b 	ldhu	r2,-4(fp)
 40011d4:	10800044 	addi	r2,r2,1
 40011d8:	e0bfff0d 	sth	r2,-4(fp)
 40011dc:	e0bfff0f 	ldh	r2,-4(fp)
 40011e0:	10803fd0 	cmplti	r2,r2,255
 40011e4:	103ff31e 	bne	r2,zero,40011b4 <__alt_data_end+0xfc0011b4>
			set_motors(i, i);
			usleep(2000);
		}

		// Ramp down
		for(i = 255; i > -255; i--){
 40011e8:	00803fc4 	movi	r2,255
 40011ec:	e0bfff0d 	sth	r2,-4(fp)
 40011f0:	00000a06 	br	400121c <motor_ramp_test+0x84>
			set_motors(i, i);
 40011f4:	e0bfff0f 	ldh	r2,-4(fp)
 40011f8:	e0ffff0f 	ldh	r3,-4(fp)
 40011fc:	180b883a 	mov	r5,r3
 4001200:	1009883a 	mov	r4,r2
 4001204:	40005cc0 	call	40005cc <set_motors>
			usleep(2000);
 4001208:	0101f404 	movi	r4,2000
 400120c:	400f1e40 	call	400f1e4 <usleep>
			set_motors(i, i);
			usleep(2000);
		}

		// Ramp down
		for(i = 255; i > -255; i--){
 4001210:	e0bfff0b 	ldhu	r2,-4(fp)
 4001214:	10bfffc4 	addi	r2,r2,-1
 4001218:	e0bfff0d 	sth	r2,-4(fp)
 400121c:	e0bfff0f 	ldh	r2,-4(fp)
 4001220:	10bfc088 	cmpgei	r2,r2,-254
 4001224:	103ff31e 	bne	r2,zero,40011f4 <__alt_data_end+0xfc0011f4>
			set_motors(i, i);
			usleep(2000);
		}

		set_motors(0, 0);
 4001228:	000b883a 	mov	r5,zero
 400122c:	0009883a 	mov	r4,zero
 4001230:	40005cc0 	call	40005cc <set_motors>
		usleep(1000000);
 4001234:	010003f4 	movhi	r4,15
 4001238:	21109004 	addi	r4,r4,16960
 400123c:	400f1e40 	call	400f1e4 <usleep>

	}
 4001240:	003fd906 	br	40011a8 <__alt_data_end+0xfc0011a8>

04001244 <image_download_test>:

}

static void image_download_test(){
 4001244:	defffe04 	addi	sp,sp,-8
 4001248:	dfc00115 	stw	ra,4(sp)
 400124c:	df000015 	stw	fp,0(sp)
 4001250:	d839883a 	mov	fp,sp

	// Send image
	const static bool jpeg_transfer = false;
	if(jpeg_transfer){
 4001254:	d0a009c3 	ldbu	r2,-32729(gp)
 4001258:	10803fcc 	andi	r2,r2,255
 400125c:	1000011e 	bne	r2,zero,4001264 <image_download_test+0x20>
		//take_jpeg_picture_and_send_to_jtag();
	} else {
		// Naive Slow Transfer
		take_raw_picture_and_send_to_jtag();
 4001260:	40003cc0 	call	40003cc <take_raw_picture_and_send_to_jtag>
	}

}
 4001264:	0001883a 	nop
 4001268:	e037883a 	mov	sp,fp
 400126c:	dfc00117 	ldw	ra,4(sp)
 4001270:	df000017 	ldw	fp,0(sp)
 4001274:	dec00204 	addi	sp,sp,8
 4001278:	f800283a 	ret

0400127c <lidar_test>:
uint16_t nearest_distance = 0;
uint16_t nearest_direction = 0;

bool running = true;

void lidar_test(){
 400127c:	defffc04 	addi	sp,sp,-16
 4001280:	dfc00315 	stw	ra,12(sp)
 4001284:	df000215 	stw	fp,8(sp)
 4001288:	df000204 	addi	fp,sp,8

	lidar_error = false;
 400128c:	d0278a05 	stb	zero,-25048(gp)

	IOWR_ALTERA_AVALON_PIO_DATA(LIDAR_MOTOR_EN_BASE, 1);
 4001290:	00c00044 	movi	r3,1
 4001294:	00820034 	movhi	r2,2048
 4001298:	10881004 	addi	r2,r2,8256
 400129c:	10c00035 	stwio	r3,0(r2)

	usleep(1000000);
 40012a0:	010003f4 	movhi	r4,15
 40012a4:	21109004 	addi	r4,r4,16960
 40012a8:	400f1e40 	call	400f1e4 <usleep>

	lidar_state = LIDAR_STATE_WAIT_SYNC;
 40012ac:	d0278915 	stw	zero,-25052(gp)

	// Start LIDAR scan
	{
		*LIDAR_UART_TX_DATA = 0xA5;
 40012b0:	00820034 	movhi	r2,2048
 40012b4:	10843904 	addi	r2,r2,4324
 40012b8:	00c02944 	movi	r3,165
 40012bc:	10c00015 	stw	r3,0(r2)
		*LIDAR_UART_TX_DATA = 0x20;
 40012c0:	00820034 	movhi	r2,2048
 40012c4:	10843904 	addi	r2,r2,4324
 40012c8:	00c00804 	movi	r3,32
 40012cc:	10c00015 	stw	r3,0(r2)
	}

	uint32_t i;
	for(i = 0; i < 210;){
 40012d0:	e03ffe15 	stw	zero,-8(fp)
 40012d4:	00004d06 	br	400140c <lidar_test+0x190>

		if(!running | lidar_error){
 40012d8:	d0a00983 	ldbu	r2,-32730(gp)
 40012dc:	1080005c 	xori	r2,r2,1
 40012e0:	1007883a 	mov	r3,r2
 40012e4:	d0a78a03 	ldbu	r2,-25048(gp)
 40012e8:	1884b03a 	or	r2,r3,r2
 40012ec:	10803fcc 	andi	r2,r2,255
 40012f0:	10004a1e 	bne	r2,zero,400141c <lidar_test+0x1a0>
			break;
		}

		if(new_nearest){
 40012f4:	d0a78b03 	ldbu	r2,-25044(gp)
 40012f8:	10803fcc 	andi	r2,r2,255
 40012fc:	10004326 	beq	r2,zero,400140c <lidar_test+0x190>

			new_nearest = false;
 4001300:	d0278b05 	stb	zero,-25044(gp)
			char buffer[32];
			int len = snprintf(buffer, 32, "\x81%0d %d", nearest_direction, nearest_distance);
			kiss_send_packet(&jtag_kiss, (const uint8_t *) buffer, len);
			*/

			int16_t drive = 0;
 4001304:	e03fff0d 	sth	zero,-4(fp)
			int16_t yaw = 0;
 4001308:	e03fff8d 	sth	zero,-2(fp)

			// LIDAR driving
			drive = ( nearest_distance - 2000 ) / 10; // stay 0.25meters away from nearest object
 400130c:	d0a78b8b 	ldhu	r2,-25042(gp)
 4001310:	10bfffcc 	andi	r2,r2,65535
 4001314:	10be0c04 	addi	r2,r2,-2000
 4001318:	01400284 	movi	r5,10
 400131c:	1009883a 	mov	r4,r2
 4001320:	40022b00 	call	40022b0 <__divsi3>
 4001324:	e0bfff0d 	sth	r2,-4(fp)

			if(drive > 128){
 4001328:	e0bfff0f 	ldh	r2,-4(fp)
 400132c:	10802050 	cmplti	r2,r2,129
 4001330:	1000031e 	bne	r2,zero,4001340 <lidar_test+0xc4>
				drive = 128;
 4001334:	00802004 	movi	r2,128
 4001338:	e0bfff0d 	sth	r2,-4(fp)
 400133c:	00000506 	br	4001354 <lidar_test+0xd8>
			} else if(drive < -128){
 4001340:	e0bfff0f 	ldh	r2,-4(fp)
 4001344:	10bfe008 	cmpgei	r2,r2,-128
 4001348:	1000021e 	bne	r2,zero,4001354 <lidar_test+0xd8>
				drive = -128;
 400134c:	00bfe004 	movi	r2,-128
 4001350:	e0bfff0d 	sth	r2,-4(fp)
			}

			// LIDAR steering
			if(nearest_direction > 11520){	// LEFT
 4001354:	d0a78c0b 	ldhu	r2,-25040(gp)
 4001358:	10bfffcc 	andi	r2,r2,65535
 400135c:	108b4070 	cmpltui	r2,r2,11521
 4001360:	10000a1e 	bne	r2,zero,400138c <lidar_test+0x110>

				yaw = ( 23040 - nearest_direction )  / -32;
 4001364:	d0a78c0b 	ldhu	r2,-25040(gp)
 4001368:	10bfffcc 	andi	r2,r2,65535
 400136c:	00d68004 	movi	r3,23040
 4001370:	1885c83a 	sub	r2,r3,r2
 4001374:	1000010e 	bge	r2,zero,400137c <lidar_test+0x100>
 4001378:	108007c4 	addi	r2,r2,31
 400137c:	1005d17a 	srai	r2,r2,5
 4001380:	0085c83a 	sub	r2,zero,r2
 4001384:	e0bfff8d 	sth	r2,-2(fp)
 4001388:	00000406 	br	400139c <lidar_test+0x120>

			} else {						// RIGHT

				yaw = ( nearest_direction )  / 32;
 400138c:	d0a78c0b 	ldhu	r2,-25040(gp)
 4001390:	10bfffcc 	andi	r2,r2,65535
 4001394:	1004d17a 	srli	r2,r2,5
 4001398:	e0bfff8d 	sth	r2,-2(fp)

			}

			if(yaw > 128){
 400139c:	e0bfff8f 	ldh	r2,-2(fp)
 40013a0:	10802050 	cmplti	r2,r2,129
 40013a4:	1000031e 	bne	r2,zero,40013b4 <lidar_test+0x138>
				yaw = 128;
 40013a8:	00802004 	movi	r2,128
 40013ac:	e0bfff8d 	sth	r2,-2(fp)
 40013b0:	00000506 	br	40013c8 <lidar_test+0x14c>
			} else if(yaw < -128){
 40013b4:	e0bfff8f 	ldh	r2,-2(fp)
 40013b8:	10bfe008 	cmpgei	r2,r2,-128
 40013bc:	1000021e 	bne	r2,zero,40013c8 <lidar_test+0x14c>
				yaw = -128;
 40013c0:	00bfe004 	movi	r2,-128
 40013c4:	e0bfff8d 	sth	r2,-2(fp)
			}

			set_motors(drive + yaw, drive - yaw);
 40013c8:	e0ffff0b 	ldhu	r3,-4(fp)
 40013cc:	e0bfff8b 	ldhu	r2,-2(fp)
 40013d0:	1885883a 	add	r2,r3,r2
 40013d4:	113fffcc 	andi	r4,r2,65535
 40013d8:	2120001c 	xori	r4,r4,32768
 40013dc:	21200004 	addi	r4,r4,-32768
 40013e0:	e0ffff0b 	ldhu	r3,-4(fp)
 40013e4:	e0bfff8b 	ldhu	r2,-2(fp)
 40013e8:	1885c83a 	sub	r2,r3,r2
 40013ec:	10bfffcc 	andi	r2,r2,65535
 40013f0:	10a0001c 	xori	r2,r2,32768
 40013f4:	10a00004 	addi	r2,r2,-32768
 40013f8:	100b883a 	mov	r5,r2
 40013fc:	40005cc0 	call	40005cc <set_motors>

			i++;
 4001400:	e0bffe17 	ldw	r2,-8(fp)
 4001404:	10800044 	addi	r2,r2,1
 4001408:	e0bffe15 	stw	r2,-8(fp)
		*LIDAR_UART_TX_DATA = 0xA5;
		*LIDAR_UART_TX_DATA = 0x20;
	}

	uint32_t i;
	for(i = 0; i < 210;){
 400140c:	e0bffe17 	ldw	r2,-8(fp)
 4001410:	108034b0 	cmpltui	r2,r2,210
 4001414:	103fb01e 	bne	r2,zero,40012d8 <__alt_data_end+0xfc0012d8>
 4001418:	00000106 	br	4001420 <lidar_test+0x1a4>

		if(!running | lidar_error){
			break;
 400141c:	0001883a 	nop

		}

	}

	set_motors(0, 0);
 4001420:	000b883a 	mov	r5,zero
 4001424:	0009883a 	mov	r4,zero
 4001428:	40005cc0 	call	40005cc <set_motors>

	// Stop LIDAR scan
	{
		*LIDAR_UART_TX_DATA = 0xA5;
 400142c:	00820034 	movhi	r2,2048
 4001430:	10843904 	addi	r2,r2,4324
 4001434:	00c02944 	movi	r3,165
 4001438:	10c00015 	stw	r3,0(r2)
		*LIDAR_UART_TX_DATA = 0x25;
 400143c:	00820034 	movhi	r2,2048
 4001440:	10843904 	addi	r2,r2,4324
 4001444:	00c00944 	movi	r3,37
 4001448:	10c00015 	stw	r3,0(r2)
	}

	IOWR_ALTERA_AVALON_PIO_DATA(LIDAR_MOTOR_EN_BASE, 0);
 400144c:	0007883a 	mov	r3,zero
 4001450:	00820034 	movhi	r2,2048
 4001454:	10881004 	addi	r2,r2,8256
 4001458:	10c00035 	stwio	r3,0(r2)

}
 400145c:	0001883a 	nop
 4001460:	e037883a 	mov	sp,fp
 4001464:	dfc00117 	ldw	ra,4(sp)
 4001468:	df000017 	ldw	fp,0(sp)
 400146c:	dec00204 	addi	sp,sp,8
 4001470:	f800283a 	ret

04001474 <ble_uart_handler>:
bool stop_event = false;
bool line_event = false;
bool follow_event = false;
bool tdoa_event = false;

void ble_uart_handler(void * context){
 4001474:	defffa04 	addi	sp,sp,-24
 4001478:	dfc00515 	stw	ra,20(sp)
 400147c:	df000415 	stw	fp,16(sp)
 4001480:	dc000315 	stw	r16,12(sp)
 4001484:	df000404 	addi	fp,sp,16
 4001488:	e13ffe15 	stw	r4,-8(fp)

	if( (*BLE_UART_STATUS & 0x0080 ) != 0){
 400148c:	00820034 	movhi	r2,2048
 4001490:	10803204 	addi	r2,r2,200
 4001494:	10800017 	ldw	r2,0(r2)
 4001498:	1080200c 	andi	r2,r2,128
 400149c:	10009426 	beq	r2,zero,40016f0 <ble_uart_handler+0x27c>

		uint8_t byte = *BLE_UART_RX_DATA;
 40014a0:	00820034 	movhi	r2,2048
 40014a4:	10803004 	addi	r2,r2,192
 40014a8:	10800017 	ldw	r2,0(r2)
 40014ac:	e0bffd05 	stb	r2,-12(fp)

		ble_buffer[ble_buffer_position++] = byte;
 40014b0:	d0a78c83 	ldbu	r2,-25038(gp)
 40014b4:	10c00044 	addi	r3,r2,1
 40014b8:	d0e78c85 	stb	r3,-25038(gp)
 40014bc:	10c03fcc 	andi	r3,r2,255
 40014c0:	00810074 	movhi	r2,1025
 40014c4:	10973404 	addi	r2,r2,23760
 40014c8:	10c5883a 	add	r2,r2,r3
 40014cc:	e0fffd03 	ldbu	r3,-12(fp)
 40014d0:	10c00005 	stb	r3,0(r2)

		if((byte & 0xFF) == '\n'){
 40014d4:	e0bffd03 	ldbu	r2,-12(fp)
 40014d8:	10800298 	cmpnei	r2,r2,10
 40014dc:	1000841e 	bne	r2,zero,40016f0 <ble_uart_handler+0x27c>
			 * M+000,+000 for stop
			 * M+255,+255 forward
			 * M-255,-255 reverse
			 * M-255,+255 right
			 */
			if( ble_buffer[0] == 'M' && ble_buffer_position == 11 ){
 40014e0:	00810074 	movhi	r2,1025
 40014e4:	10973404 	addi	r2,r2,23760
 40014e8:	10800003 	ldbu	r2,0(r2)
 40014ec:	10803fcc 	andi	r2,r2,255
 40014f0:	10801358 	cmpnei	r2,r2,77
 40014f4:	10005a1e 	bne	r2,zero,4001660 <ble_uart_handler+0x1ec>
 40014f8:	d0a78c83 	ldbu	r2,-25038(gp)
 40014fc:	10803fcc 	andi	r2,r2,255
 4001500:	108002d8 	cmpnei	r2,r2,11
 4001504:	1000561e 	bne	r2,zero,4001660 <ble_uart_handler+0x1ec>

				int16_t left = 1;
 4001508:	00800044 	movi	r2,1
 400150c:	e0bffc0d 	sth	r2,-16(fp)
				int16_t right = 1;
 4001510:	00800044 	movi	r2,1
 4001514:	e0bffc8d 	sth	r2,-14(fp)

				// Deal with negatives
				if(ble_buffer[1] == '-'){
 4001518:	00810074 	movhi	r2,1025
 400151c:	10973404 	addi	r2,r2,23760
 4001520:	10800043 	ldbu	r2,1(r2)
 4001524:	10803fcc 	andi	r2,r2,255
 4001528:	10800b58 	cmpnei	r2,r2,45
 400152c:	1000021e 	bne	r2,zero,4001538 <ble_uart_handler+0xc4>
					left = -1;
 4001530:	00bfffc4 	movi	r2,-1
 4001534:	e0bffc0d 	sth	r2,-16(fp)
				}
				if(ble_buffer[6] == '-'){
 4001538:	00810074 	movhi	r2,1025
 400153c:	10973404 	addi	r2,r2,23760
 4001540:	10800183 	ldbu	r2,6(r2)
 4001544:	10803fcc 	andi	r2,r2,255
 4001548:	10800b58 	cmpnei	r2,r2,45
 400154c:	1000021e 	bne	r2,zero,4001558 <ble_uart_handler+0xe4>
					right = -1;
 4001550:	00bfffc4 	movi	r2,-1
 4001554:	e0bffc8d 	sth	r2,-14(fp)
				}

				// Convert text to magnitude
				left *=   ( ( ble_buffer[2] - '0' ) * 100 )
 4001558:	00810074 	movhi	r2,1025
 400155c:	10973404 	addi	r2,r2,23760
 4001560:	10800083 	ldbu	r2,2(r2)
 4001564:	10803fcc 	andi	r2,r2,255
 4001568:	10bff404 	addi	r2,r2,-48
 400156c:	01401904 	movi	r5,100
 4001570:	1009883a 	mov	r4,r2
 4001574:	40024640 	call	4002464 <__mulsi3>
 4001578:	1021883a 	mov	r16,r2
						+ ( ( ble_buffer[3] - '0' ) *  10 )
 400157c:	00810074 	movhi	r2,1025
 4001580:	10973404 	addi	r2,r2,23760
 4001584:	108000c3 	ldbu	r2,3(r2)
 4001588:	10803fcc 	andi	r2,r2,255
 400158c:	10bff404 	addi	r2,r2,-48
 4001590:	01400284 	movi	r5,10
 4001594:	1009883a 	mov	r4,r2
 4001598:	40024640 	call	4002464 <__mulsi3>
 400159c:	8087883a 	add	r3,r16,r2
						+ ( ( ble_buffer[4] - '0' )       );
 40015a0:	00810074 	movhi	r2,1025
 40015a4:	10973404 	addi	r2,r2,23760
 40015a8:	10800103 	ldbu	r2,4(r2)
 40015ac:	10803fcc 	andi	r2,r2,255
 40015b0:	10bff404 	addi	r2,r2,-48
 40015b4:	1885883a 	add	r2,r3,r2
				if(ble_buffer[6] == '-'){
					right = -1;
				}

				// Convert text to magnitude
				left *=   ( ( ble_buffer[2] - '0' ) * 100 )
 40015b8:	1007883a 	mov	r3,r2
 40015bc:	e0bffc0b 	ldhu	r2,-16(fp)
 40015c0:	100b883a 	mov	r5,r2
 40015c4:	1809883a 	mov	r4,r3
 40015c8:	40024640 	call	4002464 <__mulsi3>
 40015cc:	e0bffc0d 	sth	r2,-16(fp)
						+ ( ( ble_buffer[3] - '0' ) *  10 )
						+ ( ( ble_buffer[4] - '0' )       );

				right *=   ( ( ble_buffer[7] - '0' ) * 100 )
 40015d0:	00810074 	movhi	r2,1025
 40015d4:	10973404 	addi	r2,r2,23760
 40015d8:	108001c3 	ldbu	r2,7(r2)
 40015dc:	10803fcc 	andi	r2,r2,255
 40015e0:	10bff404 	addi	r2,r2,-48
 40015e4:	01401904 	movi	r5,100
 40015e8:	1009883a 	mov	r4,r2
 40015ec:	40024640 	call	4002464 <__mulsi3>
 40015f0:	1021883a 	mov	r16,r2
						 + ( ( ble_buffer[8] - '0' ) *  10 )
 40015f4:	00810074 	movhi	r2,1025
 40015f8:	10973404 	addi	r2,r2,23760
 40015fc:	10800203 	ldbu	r2,8(r2)
 4001600:	10803fcc 	andi	r2,r2,255
 4001604:	10bff404 	addi	r2,r2,-48
 4001608:	01400284 	movi	r5,10
 400160c:	1009883a 	mov	r4,r2
 4001610:	40024640 	call	4002464 <__mulsi3>
 4001614:	8087883a 	add	r3,r16,r2
						 + ( ( ble_buffer[9] - '0' )       );
 4001618:	00810074 	movhi	r2,1025
 400161c:	10973404 	addi	r2,r2,23760
 4001620:	10800243 	ldbu	r2,9(r2)
 4001624:	10803fcc 	andi	r2,r2,255
 4001628:	10bff404 	addi	r2,r2,-48
 400162c:	1885883a 	add	r2,r3,r2
				// Convert text to magnitude
				left *=   ( ( ble_buffer[2] - '0' ) * 100 )
						+ ( ( ble_buffer[3] - '0' ) *  10 )
						+ ( ( ble_buffer[4] - '0' )       );

				right *=   ( ( ble_buffer[7] - '0' ) * 100 )
 4001630:	1007883a 	mov	r3,r2
 4001634:	e0bffc8b 	ldhu	r2,-14(fp)
 4001638:	100b883a 	mov	r5,r2
 400163c:	1809883a 	mov	r4,r3
 4001640:	40024640 	call	4002464 <__mulsi3>
 4001644:	e0bffc8d 	sth	r2,-14(fp)
						 + ( ( ble_buffer[8] - '0' ) *  10 )
						 + ( ( ble_buffer[9] - '0' )       );

				set_motors(left, right);
 4001648:	e0bffc0f 	ldh	r2,-16(fp)
 400164c:	e0fffc8f 	ldh	r3,-14(fp)
 4001650:	180b883a 	mov	r5,r3
 4001654:	1009883a 	mov	r4,r2
 4001658:	40005cc0 	call	40005cc <set_motors>
			 * M+000,+000 for stop
			 * M+255,+255 forward
			 * M-255,-255 reverse
			 * M-255,+255 right
			 */
			if( ble_buffer[0] == 'M' && ble_buffer_position == 11 ){
 400165c:	00002306 	br	40016ec <ble_uart_handler+0x278>
						 + ( ( ble_buffer[8] - '0' ) *  10 )
						 + ( ( ble_buffer[9] - '0' )       );

				set_motors(left, right);

			} else if(ble_buffer[0] == 'S') {
 4001660:	00810074 	movhi	r2,1025
 4001664:	10973404 	addi	r2,r2,23760
 4001668:	10800003 	ldbu	r2,0(r2)
 400166c:	10803fcc 	andi	r2,r2,255
 4001670:	108014d8 	cmpnei	r2,r2,83
 4001674:	1000031e 	bne	r2,zero,4001684 <ble_uart_handler+0x210>
				stop_event = true;
 4001678:	00800044 	movi	r2,1
 400167c:	d0a78cc5 	stb	r2,-25037(gp)
 4001680:	00001a06 	br	40016ec <ble_uart_handler+0x278>
			} else if(ble_buffer[0] == 'F'){
 4001684:	00810074 	movhi	r2,1025
 4001688:	10973404 	addi	r2,r2,23760
 400168c:	10800003 	ldbu	r2,0(r2)
 4001690:	10803fcc 	andi	r2,r2,255
 4001694:	10801198 	cmpnei	r2,r2,70
 4001698:	1000031e 	bne	r2,zero,40016a8 <ble_uart_handler+0x234>
				follow_event = true;
 400169c:	00800044 	movi	r2,1
 40016a0:	d0a78d45 	stb	r2,-25035(gp)
 40016a4:	00001106 	br	40016ec <ble_uart_handler+0x278>
			} else if(ble_buffer[0] == 'L'){
 40016a8:	00810074 	movhi	r2,1025
 40016ac:	10973404 	addi	r2,r2,23760
 40016b0:	10800003 	ldbu	r2,0(r2)
 40016b4:	10803fcc 	andi	r2,r2,255
 40016b8:	10801318 	cmpnei	r2,r2,76
 40016bc:	1000031e 	bne	r2,zero,40016cc <ble_uart_handler+0x258>
				line_event = true;
 40016c0:	00800044 	movi	r2,1
 40016c4:	d0a78d05 	stb	r2,-25036(gp)
 40016c8:	00000806 	br	40016ec <ble_uart_handler+0x278>
			} else if(ble_buffer[0] == 'T'){
 40016cc:	00810074 	movhi	r2,1025
 40016d0:	10973404 	addi	r2,r2,23760
 40016d4:	10800003 	ldbu	r2,0(r2)
 40016d8:	10803fcc 	andi	r2,r2,255
 40016dc:	10801518 	cmpnei	r2,r2,84
 40016e0:	1000021e 	bne	r2,zero,40016ec <ble_uart_handler+0x278>
				tdoa_event = true;
 40016e4:	00800044 	movi	r2,1
 40016e8:	d0a78d85 	stb	r2,-25034(gp)
				while( ! ( (*BLE_UART_STATUS) & 0x0040 ) );
				*BLE_UART_TX_DATA = ble_buffer[i];
			}
			 */

			ble_buffer_position = 0;
 40016ec:	d0278c85 	stb	zero,-25038(gp)

		}

	}

}
 40016f0:	0001883a 	nop
 40016f4:	e6ffff04 	addi	sp,fp,-4
 40016f8:	dfc00217 	ldw	ra,8(sp)
 40016fc:	df000117 	ldw	fp,4(sp)
 4001700:	dc000017 	ldw	r16,0(sp)
 4001704:	dec00304 	addi	sp,sp,12
 4001708:	f800283a 	ret

0400170c <lidar_uart_handler>:

// Lidar code simply gets direction of nearest obstacle

void lidar_uart_handler(void * context){
 400170c:	defffb04 	addi	sp,sp,-20
 4001710:	df000415 	stw	fp,16(sp)
 4001714:	df000404 	addi	fp,sp,16
 4001718:	e13fff15 	stw	r4,-4(fp)

	uint16_t status = *LIDAR_UART_STATUS;
 400171c:	00820034 	movhi	r2,2048
 4001720:	10843a04 	addi	r2,r2,4328
 4001724:	10800017 	ldw	r2,0(r2)
 4001728:	e0bffc0d 	sth	r2,-16(fp)

	if( (status & 0x0008) != 0){
 400172c:	e0bffc0b 	ldhu	r2,-16(fp)
 4001730:	1080020c 	andi	r2,r2,8
 4001734:	10000726 	beq	r2,zero,4001754 <lidar_uart_handler+0x48>
		volatile uint8_t dummy = *LIDAR_UART_RX_DATA;
 4001738:	00820034 	movhi	r2,2048
 400173c:	10843804 	addi	r2,r2,4320
 4001740:	10800017 	ldw	r2,0(r2)
 4001744:	e0bffe05 	stb	r2,-8(fp)
		lidar_error = true;
 4001748:	00800044 	movi	r2,1
 400174c:	d0a78a05 	stb	r2,-25048(gp)
		return;
 4001750:	00006e06 	br	400190c <lidar_uart_handler+0x200>
	}

	if( (status & 0x0080 ) != 0){
 4001754:	e0bffc0b 	ldhu	r2,-16(fp)
 4001758:	1080200c 	andi	r2,r2,128
 400175c:	10006b26 	beq	r2,zero,400190c <lidar_uart_handler+0x200>

		uint8_t byte = *LIDAR_UART_RX_DATA;
 4001760:	00820034 	movhi	r2,2048
 4001764:	10843804 	addi	r2,r2,4320
 4001768:	10800017 	ldw	r2,0(r2)
 400176c:	e0bffc85 	stb	r2,-14(fp)

		if(lidar_state == LIDAR_STATE_WAIT_SYNC){
 4001770:	d0a78917 	ldw	r2,-25052(gp)
 4001774:	1000061e 	bne	r2,zero,4001790 <lidar_uart_handler+0x84>

			if(byte == LIDAR_SYNC_1){
 4001778:	e0bffc83 	ldbu	r2,-14(fp)
 400177c:	10802958 	cmpnei	r2,r2,165
 4001780:	1000621e 	bne	r2,zero,400190c <lidar_uart_handler+0x200>

				lidar_state = LIDAR_STATE_SYNC_1;
 4001784:	00800044 	movi	r2,1
 4001788:	d0a78915 	stw	r2,-25052(gp)
 400178c:	00005f06 	br	400190c <lidar_uart_handler+0x200>

			}

		}

		else if(lidar_state == LIDAR_STATE_SYNC_1){
 4001790:	d0a78917 	ldw	r2,-25052(gp)
 4001794:	10800058 	cmpnei	r2,r2,1
 4001798:	1000081e 	bne	r2,zero,40017bc <lidar_uart_handler+0xb0>

			if(byte == LIDAR_SYNC_2){
 400179c:	e0bffc83 	ldbu	r2,-14(fp)
 40017a0:	10801698 	cmpnei	r2,r2,90
 40017a4:	1000031e 	bne	r2,zero,40017b4 <lidar_uart_handler+0xa8>
				lidar_state = LIDAR_STATE_SYNC_2;
 40017a8:	00800084 	movi	r2,2
 40017ac:	d0a78915 	stw	r2,-25052(gp)
 40017b0:	00005606 	br	400190c <lidar_uart_handler+0x200>
			} else {
				lidar_state = LIDAR_STATE_WAIT_SYNC;
 40017b4:	d0278915 	stw	zero,-25052(gp)
 40017b8:	00005406 	br	400190c <lidar_uart_handler+0x200>
			}

		}

		else if(lidar_state >= LIDAR_STATE_SYNC_2 && lidar_state <= LIDAR_STATE_SYNC_6){
 40017bc:	d0a78917 	ldw	r2,-25052(gp)
 40017c0:	108000b0 	cmpltui	r2,r2,2
 40017c4:	1000071e 	bne	r2,zero,40017e4 <lidar_uart_handler+0xd8>
 40017c8:	d0a78917 	ldw	r2,-25052(gp)
 40017cc:	108001e8 	cmpgeui	r2,r2,7
 40017d0:	1000041e 	bne	r2,zero,40017e4 <lidar_uart_handler+0xd8>

			lidar_state++;
 40017d4:	d0a78917 	ldw	r2,-25052(gp)
 40017d8:	10800044 	addi	r2,r2,1
 40017dc:	d0a78915 	stw	r2,-25052(gp)
 40017e0:	00004a06 	br	400190c <lidar_uart_handler+0x200>

		}

		else if(lidar_state >= LIDAR_STATE_DATA_0 && lidar_state <= LIDAR_STATE_DATA_3){
 40017e4:	d0a78917 	ldw	r2,-25052(gp)
 40017e8:	108001f0 	cmpltui	r2,r2,7
 40017ec:	10000d1e 	bne	r2,zero,4001824 <lidar_uart_handler+0x118>
 40017f0:	d0a78917 	ldw	r2,-25052(gp)
 40017f4:	108002e8 	cmpgeui	r2,r2,11
 40017f8:	10000a1e 	bne	r2,zero,4001824 <lidar_uart_handler+0x118>

			lidar_data_point[lidar_state - LIDAR_STATE_DATA_0] = byte;
 40017fc:	d0a78917 	ldw	r2,-25052(gp)
 4001800:	10fffe44 	addi	r3,r2,-7
 4001804:	d0a78ec4 	addi	r2,gp,-25029
 4001808:	1885883a 	add	r2,r3,r2
 400180c:	e0fffc83 	ldbu	r3,-14(fp)
 4001810:	10c00005 	stb	r3,0(r2)

			lidar_state++;
 4001814:	d0a78917 	ldw	r2,-25052(gp)
 4001818:	10800044 	addi	r2,r2,1
 400181c:	d0a78915 	stw	r2,-25052(gp)
 4001820:	00003a06 	br	400190c <lidar_uart_handler+0x200>

		}

		else if(lidar_state == LIDAR_STATE_DATA_4){
 4001824:	d0a78917 	ldw	r2,-25052(gp)
 4001828:	108002d8 	cmpnei	r2,r2,11
 400182c:	1000371e 	bne	r2,zero,400190c <lidar_uart_handler+0x200>

			lidar_data_point[4] = byte;
 4001830:	e0bffc83 	ldbu	r2,-14(fp)
 4001834:	d0a78fc5 	stb	r2,-25025(gp)
			char buffer[20];
			int len = snprintf(buffer, 20, "\x81%02X%02X%02X%02X%02X", lidar_data_point[0], lidar_data_point[1], lidar_data_point[2], lidar_data_point[3], lidar_data_point[4]);
			kiss_send_packet(&jtag_kiss, (const uint8_t *) buffer, len);
			*/

			uint8_t start = lidar_data_point[0] & 0x3;
 4001838:	d0a78ec3 	ldbu	r2,-25029(gp)
 400183c:	108000cc 	andi	r2,r2,3
 4001840:	e0bffcc5 	stb	r2,-13(fp)

			if(start == 0x01){
 4001844:	e0bffcc3 	ldbu	r2,-13(fp)
 4001848:	10800058 	cmpnei	r2,r2,1
 400184c:	10000d1e 	bne	r2,zero,4001884 <lidar_uart_handler+0x178>

				// beginning of scan, report nearest and restart

				if(smallest_distance != 10000){
 4001850:	d0a0090b 	ldhu	r2,-32732(gp)
 4001854:	10bfffcc 	andi	r2,r2,65535
 4001858:	1089c420 	cmpeqi	r2,r2,10000
 400185c:	1000061e 	bne	r2,zero,4001878 <lidar_uart_handler+0x16c>

					nearest_distance = smallest_distance;
 4001860:	d0a0090b 	ldhu	r2,-32732(gp)
 4001864:	d0a78b8d 	sth	r2,-25042(gp)
					nearest_direction = smallest_distance_angle;
 4001868:	d0a78a8b 	ldhu	r2,-25046(gp)
 400186c:	d0a78c0d 	sth	r2,-25040(gp)

					new_nearest = true;
 4001870:	00800044 	movi	r2,1
 4001874:	d0a78b05 	stb	r2,-25044(gp)

				}

				smallest_distance = 10000;
 4001878:	0089c404 	movi	r2,10000
 400187c:	d0a0090d 	sth	r2,-32732(gp)
				smallest_distance_angle = 0;
 4001880:	d0278a8d 	sth	zero,-25046(gp)

			}

			uint8_t quality = lidar_data_point[0] >> 2;
 4001884:	d0a78ec3 	ldbu	r2,-25029(gp)
 4001888:	10803fcc 	andi	r2,r2,255
 400188c:	1004d0ba 	srli	r2,r2,2
 4001890:	e0bffd05 	stb	r2,-12(fp)

			// Ignore data with quality below 3
			if(quality > 3){
 4001894:	e0bffd03 	ldbu	r2,-12(fp)
 4001898:	10800130 	cmpltui	r2,r2,4
 400189c:	1000191e 	bne	r2,zero,4001904 <lidar_uart_handler+0x1f8>

				uint16_t distance = ( lidar_data_point[3] + ( lidar_data_point[4] << 8 ) );
 40018a0:	d0a78f83 	ldbu	r2,-25026(gp)
 40018a4:	10803fcc 	andi	r2,r2,255
 40018a8:	d0e78fc3 	ldbu	r3,-25025(gp)
 40018ac:	18c03fcc 	andi	r3,r3,255
 40018b0:	1806923a 	slli	r3,r3,8
 40018b4:	10c5883a 	add	r2,r2,r3
 40018b8:	e0bffd8d 	sth	r2,-10(fp)

				// Ignore invalid distances
				if (distance > 4){
 40018bc:	e0bffd8b 	ldhu	r2,-10(fp)
 40018c0:	10800170 	cmpltui	r2,r2,5
 40018c4:	10000f1e 	bne	r2,zero,4001904 <lidar_uart_handler+0x1f8>

					if (distance < smallest_distance){
 40018c8:	d0a0090b 	ldhu	r2,-32732(gp)
 40018cc:	e0fffd8b 	ldhu	r3,-10(fp)
 40018d0:	10bfffcc 	andi	r2,r2,65535
 40018d4:	18800b2e 	bgeu	r3,r2,4001904 <lidar_uart_handler+0x1f8>

						smallest_distance = distance;
 40018d8:	e0bffd8b 	ldhu	r2,-10(fp)
 40018dc:	d0a0090d 	sth	r2,-32732(gp)
						smallest_distance_angle = ( ( lidar_data_point[1] >> 1 ) + ( lidar_data_point[2] << 7 ) );
 40018e0:	d0a78f03 	ldbu	r2,-25028(gp)
 40018e4:	10803fcc 	andi	r2,r2,255
 40018e8:	1004d07a 	srli	r2,r2,1
 40018ec:	10803fcc 	andi	r2,r2,255
 40018f0:	d0e78f43 	ldbu	r3,-25027(gp)
 40018f4:	18c03fcc 	andi	r3,r3,255
 40018f8:	180691fa 	slli	r3,r3,7
 40018fc:	10c5883a 	add	r2,r2,r3
 4001900:	d0a78a8d 	sth	r2,-25046(gp)

				}

			}

			lidar_state = LIDAR_STATE_DATA_0;
 4001904:	008001c4 	movi	r2,7
 4001908:	d0a78915 	stw	r2,-25052(gp)

		}

	}

}
 400190c:	e037883a 	mov	sp,fp
 4001910:	df000017 	ldw	fp,0(sp)
 4001914:	dec00104 	addi	sp,sp,4
 4001918:	f800283a 	ret

0400191c <jtag_uart_handler>:

bool packet_ready = false;
uint16_t packet_length = 0;

void jtag_uart_handler(void * context){
 400191c:	defffa04 	addi	sp,sp,-24
 4001920:	dfc00515 	stw	ra,20(sp)
 4001924:	df000415 	stw	fp,16(sp)
 4001928:	df000404 	addi	fp,sp,16
 400192c:	e13fff15 	stw	r4,-4(fp)

	bool has_data = true;
 4001930:	00800044 	movi	r2,1
 4001934:	e0bffc05 	stb	r2,-16(fp)

	while(has_data){
 4001938:	00001606 	br	4001994 <jtag_uart_handler+0x78>

		// Read UART and see if there is data
		uint32_t data = *JTAG_UART_DATA;
 400193c:	00820034 	movhi	r2,2048
 4001940:	10842404 	addi	r2,r2,4240
 4001944:	10800017 	ldw	r2,0(r2)
 4001948:	e0bffd15 	stw	r2,-12(fp)
		if( (data & JTAG_UART__MASK__RVALID ) != 0){
 400194c:	e0bffd17 	ldw	r2,-12(fp)
 4001950:	10a0000c 	andi	r2,r2,32768
 4001954:	10000e26 	beq	r2,zero,4001990 <jtag_uart_handler+0x74>

			uint16_t len = kiss_rx_byte(&jtag_kiss, (uint8_t)( data & 0xFF ) );
 4001958:	e0bffd17 	ldw	r2,-12(fp)
 400195c:	10803fcc 	andi	r2,r2,255
 4001960:	100b883a 	mov	r5,r2
 4001964:	01010074 	movhi	r4,1025
 4001968:	21174304 	addi	r4,r4,23820
 400196c:	4001f280 	call	4001f28 <kiss_rx_byte>
 4001970:	e0bffe0d 	sth	r2,-8(fp)

			if(len > 0){
 4001974:	e0bffe0b 	ldhu	r2,-8(fp)
 4001978:	10000626 	beq	r2,zero,4001994 <jtag_uart_handler+0x78>

				packet_ready = true;
 400197c:	00800044 	movi	r2,1
 4001980:	d0a78dc5 	stb	r2,-25033(gp)
				packet_length = len;
 4001984:	e0bffe0b 	ldhu	r2,-8(fp)
 4001988:	d0a78e0d 	sth	r2,-25032(gp)
 400198c:	00000106 	br	4001994 <jtag_uart_handler+0x78>

			}

		} else {

			has_data = false;
 4001990:	e03ffc05 	stb	zero,-16(fp)

void jtag_uart_handler(void * context){

	bool has_data = true;

	while(has_data){
 4001994:	e0bffc03 	ldbu	r2,-16(fp)
 4001998:	103fe81e 	bne	r2,zero,400193c <__alt_data_end+0xfc00193c>

		}

	}

}
 400199c:	0001883a 	nop
 40019a0:	e037883a 	mov	sp,fp
 40019a4:	dfc00117 	ldw	ra,4(sp)
 40019a8:	df000017 	ldw	fp,0(sp)
 40019ac:	dec00204 	addi	sp,sp,8
 40019b0:	f800283a 	ret

040019b4 <peak_detect_handler>:

bool peak_detected = false;

uint32_t peak[3];

void peak_detect_handler(void * context){
 40019b4:	defffe04 	addi	sp,sp,-8
 40019b8:	df000115 	stw	fp,4(sp)
 40019bc:	df000104 	addi	fp,sp,4
 40019c0:	e13fff15 	stw	r4,-4(fp)

	peak_detected = true;
 40019c4:	00800044 	movi	r2,1
 40019c8:	d0a78e85 	stb	r2,-25030(gp)

	peak[0] = IORD_ALTERA_AVALON_PIO_DATA(PEAK_1_BASE);
 40019cc:	00820034 	movhi	r2,2048
 40019d0:	10880004 	addi	r2,r2,8192
 40019d4:	10800037 	ldwio	r2,0(r2)
 40019d8:	1007883a 	mov	r3,r2
 40019dc:	00810074 	movhi	r2,1025
 40019e0:	10976b04 	addi	r2,r2,23980
 40019e4:	10c00015 	stw	r3,0(r2)
	//peak[1] = IORD_ALTERA_AVALON_PIO_DATA(PEAK_2_BASE);
	//peak[2] = IORD_ALTERA_AVALON_PIO_DATA(PEAK_3_BASE);

	// Disable interrupts
	*PEAK_1_INTERRUPT = 0;
 40019e8:	00820034 	movhi	r2,2048
 40019ec:	10880204 	addi	r2,r2,8200
 40019f0:	10000015 	stw	zero,0(r2)

}
 40019f4:	0001883a 	nop
 40019f8:	e037883a 	mov	sp,fp
 40019fc:	df000017 	ldw	fp,0(sp)
 4001a00:	dec00104 	addi	sp,sp,4
 4001a04:	f800283a 	ret

04001a08 <arm_peak_detector>:

void arm_peak_detector(){
 4001a08:	defffe04 	addi	sp,sp,-8
 4001a0c:	dfc00115 	stw	ra,4(sp)
 4001a10:	df000015 	stw	fp,0(sp)
 4001a14:	d839883a 	mov	fp,sp

	peak_detected = false;
 4001a18:	d0278e85 	stb	zero,-25030(gp)

	// Arm peak detector
	IOWR_ALTERA_AVALON_PIO_DATA(PEAK_RESET_BASE, 1);
 4001a1c:	00c00044 	movi	r3,1
 4001a20:	00820034 	movhi	r2,2048
 4001a24:	10880c04 	addi	r2,r2,8240
 4001a28:	10c00035 	stwio	r3,0(r2)
	usleep(1);
 4001a2c:	01000044 	movi	r4,1
 4001a30:	400f1e40 	call	400f1e4 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(PEAK_RESET_BASE, 0);
 4001a34:	0007883a 	mov	r3,zero
 4001a38:	00820034 	movhi	r2,2048
 4001a3c:	10880c04 	addi	r2,r2,8240
 4001a40:	10c00035 	stwio	r3,0(r2)

	*PEAK_1_INTERRUPT = 0xFFFFFFFF; // Interrupt on any signal high
 4001a44:	00820034 	movhi	r2,2048
 4001a48:	10880204 	addi	r2,r2,8200
 4001a4c:	00ffffc4 	movi	r3,-1
 4001a50:	10c00015 	stw	r3,0(r2)

}
 4001a54:	0001883a 	nop
 4001a58:	e037883a 	mov	sp,fp
 4001a5c:	dfc00117 	ldw	ra,4(sp)
 4001a60:	df000017 	ldw	fp,0(sp)
 4001a64:	dec00204 	addi	sp,sp,8
 4001a68:	f800283a 	ret

04001a6c <peak_detect>:

#define MAX_DEVIATION 30

void peak_detect(){
 4001a6c:	defff304 	addi	sp,sp,-52
 4001a70:	dfc00c15 	stw	ra,48(sp)
 4001a74:	df000b15 	stw	fp,44(sp)
 4001a78:	df000b04 	addi	fp,sp,44

	running = true;
 4001a7c:	00800044 	movi	r2,1
 4001a80:	d0a00985 	stb	r2,-32730(gp)

	arm_peak_detector();
 4001a84:	4001a080 	call	4001a08 <arm_peak_detector>

	while(1){

		if(peak_detected){
 4001a88:	d0a78e83 	ldbu	r2,-25030(gp)
 4001a8c:	10803fcc 	andi	r2,r2,255
 4001a90:	103ffd26 	beq	r2,zero,4001a88 <__alt_data_end+0xfc001a88>

			int16_t offset_1 = (peak[0] & 0xFF) - MAX_DEVIATION;
 4001a94:	00810074 	movhi	r2,1025
 4001a98:	10976b04 	addi	r2,r2,23980
 4001a9c:	10800017 	ldw	r2,0(r2)
 4001aa0:	10803fcc 	andi	r2,r2,255
 4001aa4:	10bff884 	addi	r2,r2,-30
 4001aa8:	e0bff60d 	sth	r2,-40(fp)
			int16_t offset_2 = ((peak[0] >> 8) & 0xFF) - MAX_DEVIATION;
 4001aac:	00810074 	movhi	r2,1025
 4001ab0:	10976b04 	addi	r2,r2,23980
 4001ab4:	10800017 	ldw	r2,0(r2)
 4001ab8:	1004d23a 	srli	r2,r2,8
 4001abc:	10803fcc 	andi	r2,r2,255
 4001ac0:	10bff884 	addi	r2,r2,-30
 4001ac4:	e0bff68d 	sth	r2,-38(fp)

			char buffer[32];
			int len = snprintf(buffer, 32, "\x81 0 %d %d", offset_1, offset_2);
 4001ac8:	e13ff60f 	ldh	r4,-40(fp)
 4001acc:	e0bff68f 	ldh	r2,-38(fp)
 4001ad0:	e0fff804 	addi	r3,fp,-32
 4001ad4:	d8800015 	stw	r2,0(sp)
 4001ad8:	200f883a 	mov	r7,r4
 4001adc:	01810074 	movhi	r6,1025
 4001ae0:	31877604 	addi	r6,r6,7640
 4001ae4:	01400804 	movi	r5,32
 4001ae8:	1809883a 	mov	r4,r3
 4001aec:	40066440 	call	4006644 <snprintf>
 4001af0:	e0bff715 	stw	r2,-36(fp)
			kiss_send_packet(&jtag_kiss, (const uint8_t *) buffer, len);
 4001af4:	e0fff717 	ldw	r3,-36(fp)
 4001af8:	e0bff804 	addi	r2,fp,-32
 4001afc:	180d883a 	mov	r6,r3
 4001b00:	100b883a 	mov	r5,r2
 4001b04:	01010074 	movhi	r4,1025
 4001b08:	21174304 	addi	r4,r4,23820
 4001b0c:	4001d200 	call	4001d20 <kiss_send_packet>

			usleep(100000);
 4001b10:	010000b4 	movhi	r4,2
 4001b14:	2121a804 	addi	r4,r4,-31072
 4001b18:	400f1e40 	call	400f1e4 <usleep>

			if(!running){
 4001b1c:	d0a00983 	ldbu	r2,-32730(gp)
 4001b20:	1080005c 	xori	r2,r2,1
 4001b24:	10803fcc 	andi	r2,r2,255
 4001b28:	1000021e 	bne	r2,zero,4001b34 <peak_detect+0xc8>
				break;
			}

			arm_peak_detector();
 4001b2c:	4001a080 	call	4001a08 <arm_peak_detector>

		}

	}
 4001b30:	003fd506 	br	4001a88 <__alt_data_end+0xfc001a88>
}
 4001b34:	0001883a 	nop
 4001b38:	e037883a 	mov	sp,fp
 4001b3c:	dfc00117 	ldw	ra,4(sp)
 4001b40:	df000017 	ldw	fp,0(sp)
 4001b44:	dec00204 	addi	sp,sp,8
 4001b48:	f800283a 	ret

04001b4c <main>:

int main()
{
 4001b4c:	defff804 	addi	sp,sp,-32
 4001b50:	dfc00715 	stw	ra,28(sp)
 4001b54:	df000615 	stw	fp,24(sp)
 4001b58:	df000604 	addi	fp,sp,24

	set_motors(0, 0);
 4001b5c:	000b883a 	mov	r5,zero
 4001b60:	0009883a 	mov	r4,zero
 4001b64:	40005cc0 	call	40005cc <set_motors>

	// Setup JTAG kiss interface
	jtag_kiss.send 				 = jtag_kiss_send;
 4001b68:	00810074 	movhi	r2,1025
 4001b6c:	10974304 	addi	r2,r2,23820
 4001b70:	00c10034 	movhi	r3,1024
 4001b74:	18c09b04 	addi	r3,r3,620
 4001b78:	10c00115 	stw	r3,4(r2)
	jtag_kiss.rx_state 			 = KISS_STATE__NORMAL;
 4001b7c:	00810074 	movhi	r2,1025
 4001b80:	10974304 	addi	r2,r2,23820
 4001b84:	10000215 	stw	zero,8(r2)
	jtag_kiss.rx_buffer 		 = jtag_kiss_rx_buffer;
 4001b88:	00810074 	movhi	r2,1025
 4001b8c:	10974304 	addi	r2,r2,23820
 4001b90:	00c10074 	movhi	r3,1025
 4001b94:	18d74804 	addi	r3,r3,23840
 4001b98:	10c00315 	stw	r3,12(r2)
	jtag_kiss.rx_buffer_position = 0;
 4001b9c:	00810074 	movhi	r2,1025
 4001ba0:	10974304 	addi	r2,r2,23820
 4001ba4:	1000040d 	sth	zero,16(r2)

	//alt_ic_isr_register(JTAG_UART_IRQ, JTAG_UART_IRQ_INTERRUPT_CONTROLLER_ID, jtag_uart_handler, NULL, NULL);

	*JTAG_UART_CONTROL = 0; // Disable interrupts
 4001ba8:	00820034 	movhi	r2,2048
 4001bac:	10842504 	addi	r2,r2,4244
 4001bb0:	10000015 	stw	zero,0(r2)
	alt_irq_register(JTAG_UART_IRQ, NULL,  jtag_uart_handler);
 4001bb4:	01810034 	movhi	r6,1024
 4001bb8:	31864704 	addi	r6,r6,6428
 4001bbc:	000b883a 	mov	r5,zero
 4001bc0:	0009883a 	mov	r4,zero
 4001bc4:	400ee040 	call	400ee04 <alt_irq_register>
	*JTAG_UART_CONTROL = 0x00000001; // Read interrupt
 4001bc8:	00820034 	movhi	r2,2048
 4001bcc:	10842504 	addi	r2,r2,4244
 4001bd0:	00c00044 	movi	r3,1
 4001bd4:	10c00015 	stw	r3,0(r2)

	*BLE_UART_CONTROL = 0; // Disable interrupts
 4001bd8:	00820034 	movhi	r2,2048
 4001bdc:	10803304 	addi	r2,r2,204
 4001be0:	10000015 	stw	zero,0(r2)
	alt_irq_register(BLE_UART_IRQ, NULL,  ble_uart_handler);
 4001be4:	01810034 	movhi	r6,1024
 4001be8:	31851d04 	addi	r6,r6,5236
 4001bec:	000b883a 	mov	r5,zero
 4001bf0:	01000044 	movi	r4,1
 4001bf4:	400ee040 	call	400ee04 <alt_irq_register>
	*BLE_UART_CONTROL = 0x0000080; // Read interrupt
 4001bf8:	00820034 	movhi	r2,2048
 4001bfc:	10803304 	addi	r2,r2,204
 4001c00:	00c02004 	movi	r3,128
 4001c04:	10c00015 	stw	r3,0(r2)

	// Stop LIDAR scan
	{
		*LIDAR_UART_TX_DATA = 0xA5;
 4001c08:	00820034 	movhi	r2,2048
 4001c0c:	10843904 	addi	r2,r2,4324
 4001c10:	00c02944 	movi	r3,165
 4001c14:	10c00015 	stw	r3,0(r2)
		*LIDAR_UART_TX_DATA = 0x25;
 4001c18:	00820034 	movhi	r2,2048
 4001c1c:	10843904 	addi	r2,r2,4324
 4001c20:	00c00944 	movi	r3,37
 4001c24:	10c00015 	stw	r3,0(r2)
	}

	// Disable lidar motor
	IOWR_ALTERA_AVALON_PIO_DATA(LIDAR_MOTOR_EN_BASE, 0);
 4001c28:	0007883a 	mov	r3,zero
 4001c2c:	00820034 	movhi	r2,2048
 4001c30:	10881004 	addi	r2,r2,8256
 4001c34:	10c00035 	stwio	r3,0(r2)

	*LIDAR_UART_CONTROL = 0; // Disable interrupts
 4001c38:	00820034 	movhi	r2,2048
 4001c3c:	10843b04 	addi	r2,r2,4332
 4001c40:	10000015 	stw	zero,0(r2)
	alt_irq_register(LIDAR_UART_IRQ, NULL,  lidar_uart_handler);
 4001c44:	01810034 	movhi	r6,1024
 4001c48:	3185c304 	addi	r6,r6,5900
 4001c4c:	000b883a 	mov	r5,zero
 4001c50:	01000084 	movi	r4,2
 4001c54:	400ee040 	call	400ee04 <alt_irq_register>
	*LIDAR_UART_CONTROL = 0x0000080; // Read interrupt
 4001c58:	00820034 	movhi	r2,2048
 4001c5c:	10843b04 	addi	r2,r2,4332
 4001c60:	00c02004 	movi	r3,128
 4001c64:	10c00015 	stw	r3,0(r2)

	// Reset peak detectors
	IOWR_ALTERA_AVALON_PIO_DATA(PEAK_RESET_BASE, 1);
 4001c68:	00c00044 	movi	r3,1
 4001c6c:	00820034 	movhi	r2,2048
 4001c70:	10880c04 	addi	r2,r2,8240
 4001c74:	10c00035 	stwio	r3,0(r2)
	usleep(1);
 4001c78:	01000044 	movi	r4,1
 4001c7c:	400f1e40 	call	400f1e4 <usleep>
	IOWR_ALTERA_AVALON_PIO_DATA(PEAK_RESET_BASE, 0);
 4001c80:	0007883a 	mov	r3,zero
 4001c84:	00820034 	movhi	r2,2048
 4001c88:	10880c04 	addi	r2,r2,8240
 4001c8c:	10c00035 	stwio	r3,0(r2)

	*PEAK_1_INTERRUPT = 0;
 4001c90:	00820034 	movhi	r2,2048
 4001c94:	10880204 	addi	r2,r2,8200
 4001c98:	10000015 	stw	zero,0(r2)
	alt_irq_register(PEAK_1_IRQ, NULL, peak_detect_handler);
 4001c9c:	01810034 	movhi	r6,1024
 4001ca0:	31866d04 	addi	r6,r6,6580
 4001ca4:	000b883a 	mov	r5,zero
 4001ca8:	010000c4 	movi	r4,3
 4001cac:	400ee040 	call	400ee04 <alt_irq_register>

	// Send startup message
	const char hello_world[] = "\x81Hello from Nios II!";
 4001cb0:	009b1974 	movhi	r2,27749
 4001cb4:	10922044 	addi	r2,r2,18561
 4001cb8:	e0bffa15 	stw	r2,-24(fp)
 4001cbc:	00998834 	movhi	r2,26144
 4001cc0:	109bdb04 	addi	r2,r2,28524
 4001cc4:	e0bffb15 	stw	r2,-20(fp)
 4001cc8:	00881b74 	movhi	r2,8301
 4001ccc:	109bdc84 	addi	r2,r2,28530
 4001cd0:	e0bffc15 	stw	r2,-16(fp)
 4001cd4:	009cdbf4 	movhi	r2,29551
 4001cd8:	109a5384 	addi	r2,r2,26958
 4001cdc:	e0bffd15 	stw	r2,-12(fp)
 4001ce0:	00885274 	movhi	r2,8521
 4001ce4:	10924804 	addi	r2,r2,18720
 4001ce8:	e0bffe15 	stw	r2,-8(fp)
 4001cec:	e03fff05 	stb	zero,-4(fp)
	kiss_send_packet(&jtag_kiss, (const uint8_t *) hello_world, sizeof(hello_world) - 1);
 4001cf0:	01800504 	movi	r6,20
 4001cf4:	e17ffa04 	addi	r5,fp,-24
 4001cf8:	01010074 	movhi	r4,1025
 4001cfc:	21174304 	addi	r4,r4,23820
 4001d00:	4001d200 	call	4001d20 <kiss_send_packet>

	usleep(1000000);
 4001d04:	010003f4 	movhi	r4,15
 4001d08:	21109004 	addi	r4,r4,16960
 4001d0c:	400f1e40 	call	400f1e4 <usleep>

	peak_detect();
 4001d10:	4001a6c0 	call	4001a6c <peak_detect>

	while(1){
		wait_button_press();
 4001d14:	4000a400 	call	4000a40 <wait_button_press>
		lidar_test();
 4001d18:	400127c0 	call	400127c <lidar_test>
	}
 4001d1c:	003ffd06 	br	4001d14 <__alt_data_end+0xfc001d14>

04001d20 <kiss_send_packet>:
 *      Author: DrYerzinia
 */

#include "kiss.h"

void kiss_send_packet(kiss_t * kiss, const uint8_t * data, size_t len){
 4001d20:	defffb04 	addi	sp,sp,-20
 4001d24:	dfc00415 	stw	ra,16(sp)
 4001d28:	df000315 	stw	fp,12(sp)
 4001d2c:	df000304 	addi	fp,sp,12
 4001d30:	e13ffd15 	stw	r4,-12(fp)
 4001d34:	e17ffe15 	stw	r5,-8(fp)
 4001d38:	e1bfff15 	stw	r6,-4(fp)

	kiss_start(kiss);
 4001d3c:	e13ffd17 	ldw	r4,-12(fp)
 4001d40:	4001d740 	call	4001d74 <kiss_start>
	kiss_send_data(kiss, data, len);
 4001d44:	e1bfff17 	ldw	r6,-4(fp)
 4001d48:	e17ffe17 	ldw	r5,-8(fp)
 4001d4c:	e13ffd17 	ldw	r4,-12(fp)
 4001d50:	4001db80 	call	4001db8 <kiss_send_data>
	kiss_end(kiss);
 4001d54:	e13ffd17 	ldw	r4,-12(fp)
 4001d58:	4001ee40 	call	4001ee4 <kiss_end>

}
 4001d5c:	0001883a 	nop
 4001d60:	e037883a 	mov	sp,fp
 4001d64:	dfc00117 	ldw	ra,4(sp)
 4001d68:	df000017 	ldw	fp,0(sp)
 4001d6c:	dec00204 	addi	sp,sp,8
 4001d70:	f800283a 	ret

04001d74 <kiss_start>:

void kiss_start(kiss_t * kiss){
 4001d74:	defffd04 	addi	sp,sp,-12
 4001d78:	dfc00215 	stw	ra,8(sp)
 4001d7c:	df000115 	stw	fp,4(sp)
 4001d80:	df000104 	addi	fp,sp,4
 4001d84:	e13fff15 	stw	r4,-4(fp)

	kiss->state = KISS_STATE__NORMAL;
 4001d88:	e0bfff17 	ldw	r2,-4(fp)
 4001d8c:	10000015 	stw	zero,0(r2)
	kiss->send(KISS_SYMBOLS__FEND);
 4001d90:	e0bfff17 	ldw	r2,-4(fp)
 4001d94:	10800117 	ldw	r2,4(r2)
 4001d98:	01003004 	movi	r4,192
 4001d9c:	103ee83a 	callr	r2

}
 4001da0:	0001883a 	nop
 4001da4:	e037883a 	mov	sp,fp
 4001da8:	dfc00117 	ldw	ra,4(sp)
 4001dac:	df000017 	ldw	fp,0(sp)
 4001db0:	dec00204 	addi	sp,sp,8
 4001db4:	f800283a 	ret

04001db8 <kiss_send_data>:

void kiss_send_data(kiss_t * kiss, const uint8_t * data, size_t len){
 4001db8:	defffa04 	addi	sp,sp,-24
 4001dbc:	dfc00515 	stw	ra,20(sp)
 4001dc0:	df000415 	stw	fp,16(sp)
 4001dc4:	df000404 	addi	fp,sp,16
 4001dc8:	e13ffd15 	stw	r4,-12(fp)
 4001dcc:	e17ffe15 	stw	r5,-8(fp)
 4001dd0:	e1bfff15 	stw	r6,-4(fp)

	while(len > 0){
 4001dd4:	00003b06 	br	4001ec4 <kiss_send_data+0x10c>

		switch( kiss->state ){
 4001dd8:	e0bffd17 	ldw	r2,-12(fp)
 4001ddc:	10800017 	ldw	r2,0(r2)
 4001de0:	10c00060 	cmpeqi	r3,r2,1
 4001de4:	1800291e 	bne	r3,zero,4001e8c <kiss_send_data+0xd4>
 4001de8:	0080032e 	bgeu	zero,r2,4001df8 <kiss_send_data+0x40>
 4001dec:	108000a0 	cmpeqi	r2,r2,2
 4001df0:	10002d1e 	bne	r2,zero,4001ea8 <kiss_send_data+0xf0>
 4001df4:	00003306 	br	4001ec4 <kiss_send_data+0x10c>

			case KISS_STATE__NORMAL:
				{

					len--;
 4001df8:	e0bfff17 	ldw	r2,-4(fp)
 4001dfc:	10bfffc4 	addi	r2,r2,-1
 4001e00:	e0bfff15 	stw	r2,-4(fp)

					uint8_t next_symbol = (*data++);
 4001e04:	e0bffe17 	ldw	r2,-8(fp)
 4001e08:	10c00044 	addi	r3,r2,1
 4001e0c:	e0fffe15 	stw	r3,-8(fp)
 4001e10:	10800003 	ldbu	r2,0(r2)
 4001e14:	e0bffc05 	stb	r2,-16(fp)
					switch( next_symbol ){
 4001e18:	e0bffc03 	ldbu	r2,-16(fp)
 4001e1c:	10c03020 	cmpeqi	r3,r2,192
 4001e20:	1800031e 	bne	r3,zero,4001e30 <kiss_send_data+0x78>
 4001e24:	108036e0 	cmpeqi	r2,r2,219
 4001e28:	1000091e 	bne	r2,zero,4001e50 <kiss_send_data+0x98>
 4001e2c:	00001006 	br	4001e70 <kiss_send_data+0xb8>
						case KISS_SYMBOLS__FEND:
							kiss->state = KISS_STATE__END;
 4001e30:	e0bffd17 	ldw	r2,-12(fp)
 4001e34:	00c00084 	movi	r3,2
 4001e38:	10c00015 	stw	r3,0(r2)
							kiss->send(KISS_SYMBOLS__FESC);
 4001e3c:	e0bffd17 	ldw	r2,-12(fp)
 4001e40:	10800117 	ldw	r2,4(r2)
 4001e44:	010036c4 	movi	r4,219
 4001e48:	103ee83a 	callr	r2
							break;
 4001e4c:	00000e06 	br	4001e88 <kiss_send_data+0xd0>
						case KISS_SYMBOLS__FESC:
							kiss->state = KISS_STATE__ESC;
 4001e50:	e0bffd17 	ldw	r2,-12(fp)
 4001e54:	00c00044 	movi	r3,1
 4001e58:	10c00015 	stw	r3,0(r2)
							kiss->send(KISS_SYMBOLS__FESC);
 4001e5c:	e0bffd17 	ldw	r2,-12(fp)
 4001e60:	10800117 	ldw	r2,4(r2)
 4001e64:	010036c4 	movi	r4,219
 4001e68:	103ee83a 	callr	r2
							break;
 4001e6c:	00000606 	br	4001e88 <kiss_send_data+0xd0>
						default:
							kiss->send(next_symbol);
 4001e70:	e0bffd17 	ldw	r2,-12(fp)
 4001e74:	10800117 	ldw	r2,4(r2)
 4001e78:	e0fffc03 	ldbu	r3,-16(fp)
 4001e7c:	1809883a 	mov	r4,r3
 4001e80:	103ee83a 	callr	r2
							break;
 4001e84:	0001883a 	nop
					}
				}
				break;
 4001e88:	00000e06 	br	4001ec4 <kiss_send_data+0x10c>

			case KISS_STATE__ESC:
				kiss->state = KISS_STATE__NORMAL;
 4001e8c:	e0bffd17 	ldw	r2,-12(fp)
 4001e90:	10000015 	stw	zero,0(r2)
				kiss->send(KISS_SYMBOLS__TFESC);
 4001e94:	e0bffd17 	ldw	r2,-12(fp)
 4001e98:	10800117 	ldw	r2,4(r2)
 4001e9c:	01003744 	movi	r4,221
 4001ea0:	103ee83a 	callr	r2
				break;
 4001ea4:	00000706 	br	4001ec4 <kiss_send_data+0x10c>

			case KISS_STATE__END:
				kiss->state = KISS_STATE__NORMAL;
 4001ea8:	e0bffd17 	ldw	r2,-12(fp)
 4001eac:	10000015 	stw	zero,0(r2)
				kiss->send(KISS_SYMBOLS__TFEND);
 4001eb0:	e0bffd17 	ldw	r2,-12(fp)
 4001eb4:	10800117 	ldw	r2,4(r2)
 4001eb8:	01003704 	movi	r4,220
 4001ebc:	103ee83a 	callr	r2
				break;
 4001ec0:	0001883a 	nop

}

void kiss_send_data(kiss_t * kiss, const uint8_t * data, size_t len){

	while(len > 0){
 4001ec4:	e0bfff17 	ldw	r2,-4(fp)
 4001ec8:	103fc31e 	bne	r2,zero,4001dd8 <__alt_data_end+0xfc001dd8>

		}

	}

}
 4001ecc:	0001883a 	nop
 4001ed0:	e037883a 	mov	sp,fp
 4001ed4:	dfc00117 	ldw	ra,4(sp)
 4001ed8:	df000017 	ldw	fp,0(sp)
 4001edc:	dec00204 	addi	sp,sp,8
 4001ee0:	f800283a 	ret

04001ee4 <kiss_end>:

void kiss_end(kiss_t * kiss){
 4001ee4:	defffd04 	addi	sp,sp,-12
 4001ee8:	dfc00215 	stw	ra,8(sp)
 4001eec:	df000115 	stw	fp,4(sp)
 4001ef0:	df000104 	addi	fp,sp,4
 4001ef4:	e13fff15 	stw	r4,-4(fp)

	kiss->state = KISS_STATE__NORMAL;
 4001ef8:	e0bfff17 	ldw	r2,-4(fp)
 4001efc:	10000015 	stw	zero,0(r2)
	kiss->send(KISS_SYMBOLS__FEND);
 4001f00:	e0bfff17 	ldw	r2,-4(fp)
 4001f04:	10800117 	ldw	r2,4(r2)
 4001f08:	01003004 	movi	r4,192
 4001f0c:	103ee83a 	callr	r2

}
 4001f10:	0001883a 	nop
 4001f14:	e037883a 	mov	sp,fp
 4001f18:	dfc00117 	ldw	ra,4(sp)
 4001f1c:	df000017 	ldw	fp,0(sp)
 4001f20:	dec00204 	addi	sp,sp,8
 4001f24:	f800283a 	ret

04001f28 <kiss_rx_byte>:

uint16_t kiss_rx_byte(kiss_t * kiss, uint8_t next_symbol){
 4001f28:	defffc04 	addi	sp,sp,-16
 4001f2c:	df000315 	stw	fp,12(sp)
 4001f30:	df000304 	addi	fp,sp,12
 4001f34:	e13ffe15 	stw	r4,-8(fp)
 4001f38:	2805883a 	mov	r2,r5
 4001f3c:	e0bfff05 	stb	r2,-4(fp)

	switch( kiss->rx_state ){
 4001f40:	e0bffe17 	ldw	r2,-8(fp)
 4001f44:	10800217 	ldw	r2,8(r2)
 4001f48:	10000326 	beq	r2,zero,4001f58 <kiss_rx_byte+0x30>
 4001f4c:	10800060 	cmpeqi	r2,r2,1
 4001f50:	1000251e 	bne	r2,zero,4001fe8 <kiss_rx_byte+0xc0>
 4001f54:	00004706 	br	4002074 <kiss_rx_byte+0x14c>

		case KISS_STATE__NORMAL:
			{

				switch( next_symbol ){
 4001f58:	e0bfff03 	ldbu	r2,-4(fp)
 4001f5c:	10c03020 	cmpeqi	r3,r2,192
 4001f60:	1800031e 	bne	r3,zero,4001f70 <kiss_rx_byte+0x48>
 4001f64:	108036e0 	cmpeqi	r2,r2,219
 4001f68:	10000c1e 	bne	r2,zero,4001f9c <kiss_rx_byte+0x74>
 4001f6c:	00000f06 	br	4001fac <kiss_rx_byte+0x84>

					case KISS_SYMBOLS__FEND:
						{

							uint16_t len = kiss->rx_buffer_position;
 4001f70:	e0bffe17 	ldw	r2,-8(fp)
 4001f74:	1080040b 	ldhu	r2,16(r2)
 4001f78:	e0bffd0d 	sth	r2,-12(fp)

							kiss->rx_state = KISS_STATE__NORMAL;
 4001f7c:	e0bffe17 	ldw	r2,-8(fp)
 4001f80:	10000215 	stw	zero,8(r2)
							kiss->rx_buffer_position = 0;
 4001f84:	e0bffe17 	ldw	r2,-8(fp)
 4001f88:	1000040d 	sth	zero,16(r2)

							if(len > 0){
 4001f8c:	e0bffd0b 	ldhu	r2,-12(fp)
 4001f90:	10001326 	beq	r2,zero,4001fe0 <kiss_rx_byte+0xb8>
								return len;
 4001f94:	e0bffd0b 	ldhu	r2,-12(fp)
 4001f98:	00003706 	br	4002078 <kiss_rx_byte+0x150>
						}

						break;

					case KISS_SYMBOLS__FESC:
						kiss->rx_state = KISS_STATE__ESC;
 4001f9c:	e0bffe17 	ldw	r2,-8(fp)
 4001fa0:	00c00044 	movi	r3,1
 4001fa4:	10c00215 	stw	r3,8(r2)
						break;
 4001fa8:	00000e06 	br	4001fe4 <kiss_rx_byte+0xbc>

					default:
						kiss->rx_buffer[kiss->rx_buffer_position++] = next_symbol;
 4001fac:	e0bffe17 	ldw	r2,-8(fp)
 4001fb0:	10c00317 	ldw	r3,12(r2)
 4001fb4:	e0bffe17 	ldw	r2,-8(fp)
 4001fb8:	1080040b 	ldhu	r2,16(r2)
 4001fbc:	11000044 	addi	r4,r2,1
 4001fc0:	200b883a 	mov	r5,r4
 4001fc4:	e13ffe17 	ldw	r4,-8(fp)
 4001fc8:	2140040d 	sth	r5,16(r4)
 4001fcc:	10bfffcc 	andi	r2,r2,65535
 4001fd0:	1885883a 	add	r2,r3,r2
 4001fd4:	e0ffff03 	ldbu	r3,-4(fp)
 4001fd8:	10c00005 	stb	r3,0(r2)
						break;
 4001fdc:	00000106 	br	4001fe4 <kiss_rx_byte+0xbc>
								return len;
							}

						}

						break;
 4001fe0:	0001883a 	nop
						kiss->rx_buffer[kiss->rx_buffer_position++] = next_symbol;
						break;

				}
			}
			break;
 4001fe4:	00002306 	br	4002074 <kiss_rx_byte+0x14c>

		case KISS_STATE__ESC:
			switch( next_symbol ){
 4001fe8:	e0bfff03 	ldbu	r2,-4(fp)
 4001fec:	10c03720 	cmpeqi	r3,r2,220
 4001ff0:	1800031e 	bne	r3,zero,4002000 <kiss_rx_byte+0xd8>
 4001ff4:	10803760 	cmpeqi	r2,r2,221
 4001ff8:	10000e1e 	bne	r2,zero,4002034 <kiss_rx_byte+0x10c>
					kiss->rx_buffer[kiss->rx_buffer_position++] = KISS_SYMBOLS__FEND;
					break;

				default:
					// State machine hurt itself in confusion
					break;
 4001ffc:	00001a06 	br	4002068 <kiss_rx_byte+0x140>
			break;

		case KISS_STATE__ESC:
			switch( next_symbol ){
				case KISS_SYMBOLS__TFEND:
					kiss->rx_buffer[kiss->rx_buffer_position++] = KISS_SYMBOLS__FEND;
 4002000:	e0bffe17 	ldw	r2,-8(fp)
 4002004:	10c00317 	ldw	r3,12(r2)
 4002008:	e0bffe17 	ldw	r2,-8(fp)
 400200c:	1080040b 	ldhu	r2,16(r2)
 4002010:	11000044 	addi	r4,r2,1
 4002014:	200b883a 	mov	r5,r4
 4002018:	e13ffe17 	ldw	r4,-8(fp)
 400201c:	2140040d 	sth	r5,16(r4)
 4002020:	10bfffcc 	andi	r2,r2,65535
 4002024:	1885883a 	add	r2,r3,r2
 4002028:	00fff004 	movi	r3,-64
 400202c:	10c00005 	stb	r3,0(r2)
					break;
 4002030:	00000d06 	br	4002068 <kiss_rx_byte+0x140>

				case KISS_SYMBOLS__TFESC:
					kiss->rx_buffer[kiss->rx_buffer_position++] = KISS_SYMBOLS__FEND;
 4002034:	e0bffe17 	ldw	r2,-8(fp)
 4002038:	10c00317 	ldw	r3,12(r2)
 400203c:	e0bffe17 	ldw	r2,-8(fp)
 4002040:	1080040b 	ldhu	r2,16(r2)
 4002044:	11000044 	addi	r4,r2,1
 4002048:	200b883a 	mov	r5,r4
 400204c:	e13ffe17 	ldw	r4,-8(fp)
 4002050:	2140040d 	sth	r5,16(r4)
 4002054:	10bfffcc 	andi	r2,r2,65535
 4002058:	1885883a 	add	r2,r3,r2
 400205c:	00fff004 	movi	r3,-64
 4002060:	10c00005 	stb	r3,0(r2)
					break;
 4002064:	0001883a 	nop

				default:
					// State machine hurt itself in confusion
					break;
			}
			kiss->rx_state = KISS_STATE__NORMAL;
 4002068:	e0bffe17 	ldw	r2,-8(fp)
 400206c:	10000215 	stw	zero,8(r2)
			break;
 4002070:	0001883a 	nop

	}

	return 0;
 4002074:	0005883a 	mov	r2,zero

}
 4002078:	e037883a 	mov	sp,fp
 400207c:	df000017 	ldw	fp,0(sp)
 4002080:	dec00104 	addi	sp,sp,4
 4002084:	f800283a 	ret

04002088 <pid_compute>:
 * @param pid PID controller object
 * @param input Current state
 *
 * @return Control effort
 */
fp_t pid_compute(PID_t * pid, fp_t input, fp_t dt){
 4002088:	defff704 	addi	sp,sp,-36
 400208c:	dfc00815 	stw	ra,32(sp)
 4002090:	df000715 	stw	fp,28(sp)
 4002094:	dc000615 	stw	r16,24(sp)
 4002098:	df000704 	addi	fp,sp,28
 400209c:	e13ffc15 	stw	r4,-16(fp)
 40020a0:	e17ffd15 	stw	r5,-12(fp)
 40020a4:	e1bffe15 	stw	r6,-8(fp)

	fp_t err = pid->setpoint - input;
 40020a8:	e0bffc17 	ldw	r2,-16(fp)
 40020ac:	10c00017 	ldw	r3,0(r2)
 40020b0:	e17ffd17 	ldw	r5,-12(fp)
 40020b4:	1809883a 	mov	r4,r3
 40020b8:	40033480 	call	4003348 <__subsf3>
 40020bc:	1007883a 	mov	r3,r2
 40020c0:	e0fffa15 	stw	r3,-24(fp)

	// Integrate error
	pid->i += err;
 40020c4:	e0bffc17 	ldw	r2,-16(fp)
 40020c8:	10c00117 	ldw	r3,4(r2)
 40020cc:	e17ffa17 	ldw	r5,-24(fp)
 40020d0:	1809883a 	mov	r4,r3
 40020d4:	400248c0 	call	400248c <__addsf3>
 40020d8:	1009883a 	mov	r4,r2
 40020dc:	2007883a 	mov	r3,r4
 40020e0:	e0bffc17 	ldw	r2,-16(fp)
 40020e4:	10c00115 	stw	r3,4(r2)

	// Check wind-up limit
	if(pid->i > pid->windup_limit){
 40020e8:	e0bffc17 	ldw	r2,-16(fp)
 40020ec:	10c00117 	ldw	r3,4(r2)
 40020f0:	e0bffc17 	ldw	r2,-16(fp)
 40020f4:	11000617 	ldw	r4,24(r2)
 40020f8:	200b883a 	mov	r5,r4
 40020fc:	1809883a 	mov	r4,r3
 4002100:	4002d940 	call	4002d94 <__gesf2>
 4002104:	0080050e 	bge	zero,r2,400211c <pid_compute+0x94>
		pid->i = pid->windup_limit;
 4002108:	e0bffc17 	ldw	r2,-16(fp)
 400210c:	10c00617 	ldw	r3,24(r2)
 4002110:	e0bffc17 	ldw	r2,-16(fp)
 4002114:	10c00115 	stw	r3,4(r2)
 4002118:	00000d06 	br	4002150 <pid_compute+0xc8>
	} else if(pid->i < -1.0f * pid->windup_limit){
 400211c:	e0bffc17 	ldw	r2,-16(fp)
 4002120:	11000117 	ldw	r4,4(r2)
 4002124:	e0fffc17 	ldw	r3,-16(fp)
 4002128:	18800617 	ldw	r2,24(r3)
 400212c:	10a0003c 	xorhi	r2,r2,32768
 4002130:	100b883a 	mov	r5,r2
 4002134:	4002e500 	call	4002e50 <__lesf2>
 4002138:	1000050e 	bge	r2,zero,4002150 <pid_compute+0xc8>
		pid->i = -1.0f * pid->windup_limit;
 400213c:	e0fffc17 	ldw	r3,-16(fp)
 4002140:	18800617 	ldw	r2,24(r3)
 4002144:	10e0003c 	xorhi	r3,r2,32768
 4002148:	e0bffc17 	ldw	r2,-16(fp)
 400214c:	10c00115 	stw	r3,4(r2)
	}

	fp_t der = err - pid->prev_err;
 4002150:	e0bffc17 	ldw	r2,-16(fp)
 4002154:	10c00217 	ldw	r3,8(r2)
 4002158:	180b883a 	mov	r5,r3
 400215c:	e13ffa17 	ldw	r4,-24(fp)
 4002160:	40033480 	call	4003348 <__subsf3>
 4002164:	1007883a 	mov	r3,r2
 4002168:	e0fffb15 	stw	r3,-20(fp)

	pid->prev_err = err;
 400216c:	e0bffc17 	ldw	r2,-16(fp)
 4002170:	e0fffa17 	ldw	r3,-24(fp)
 4002174:	10c00215 	stw	r3,8(r2)

	fp_t output = ( pid->kp * err ) + ( pid->ki * pid->i * dt ) + ( pid->kd * der / dt );
 4002178:	e0bffc17 	ldw	r2,-16(fp)
 400217c:	10c00317 	ldw	r3,12(r2)
 4002180:	e17ffa17 	ldw	r5,-24(fp)
 4002184:	1809883a 	mov	r4,r3
 4002188:	4002f180 	call	4002f18 <__mulsf3>
 400218c:	1007883a 	mov	r3,r2
 4002190:	1821883a 	mov	r16,r3
 4002194:	e0bffc17 	ldw	r2,-16(fp)
 4002198:	10c00417 	ldw	r3,16(r2)
 400219c:	e0bffc17 	ldw	r2,-16(fp)
 40021a0:	11000117 	ldw	r4,4(r2)
 40021a4:	200b883a 	mov	r5,r4
 40021a8:	1809883a 	mov	r4,r3
 40021ac:	4002f180 	call	4002f18 <__mulsf3>
 40021b0:	1007883a 	mov	r3,r2
 40021b4:	1805883a 	mov	r2,r3
 40021b8:	e17ffe17 	ldw	r5,-8(fp)
 40021bc:	1009883a 	mov	r4,r2
 40021c0:	4002f180 	call	4002f18 <__mulsf3>
 40021c4:	1007883a 	mov	r3,r2
 40021c8:	1805883a 	mov	r2,r3
 40021cc:	100b883a 	mov	r5,r2
 40021d0:	8009883a 	mov	r4,r16
 40021d4:	400248c0 	call	400248c <__addsf3>
 40021d8:	1007883a 	mov	r3,r2
 40021dc:	1821883a 	mov	r16,r3
 40021e0:	e0bffc17 	ldw	r2,-16(fp)
 40021e4:	10c00517 	ldw	r3,20(r2)
 40021e8:	e17ffb17 	ldw	r5,-20(fp)
 40021ec:	1809883a 	mov	r4,r3
 40021f0:	4002f180 	call	4002f18 <__mulsf3>
 40021f4:	1007883a 	mov	r3,r2
 40021f8:	1805883a 	mov	r2,r3
 40021fc:	e17ffe17 	ldw	r5,-8(fp)
 4002200:	1009883a 	mov	r4,r2
 4002204:	40029540 	call	4002954 <__divsf3>
 4002208:	1007883a 	mov	r3,r2
 400220c:	1805883a 	mov	r2,r3
 4002210:	100b883a 	mov	r5,r2
 4002214:	8009883a 	mov	r4,r16
 4002218:	400248c0 	call	400248c <__addsf3>
 400221c:	1007883a 	mov	r3,r2
 4002220:	e0fff915 	stw	r3,-28(fp)

	// Don't command more than maximum value
	if( output > pid->max){
 4002224:	e0bffc17 	ldw	r2,-16(fp)
 4002228:	10c00717 	ldw	r3,28(r2)
 400222c:	e17ff917 	ldw	r5,-28(fp)
 4002230:	1809883a 	mov	r4,r3
 4002234:	4002e500 	call	4002e50 <__lesf2>
 4002238:	1000040e 	bge	r2,zero,400224c <pid_compute+0x1c4>
		output = pid->max;
 400223c:	e0bffc17 	ldw	r2,-16(fp)
 4002240:	10800717 	ldw	r2,28(r2)
 4002244:	e0bff915 	stw	r2,-28(fp)
 4002248:	00000906 	br	4002270 <pid_compute+0x1e8>
	} else if( output < pid->min){
 400224c:	e0bffc17 	ldw	r2,-16(fp)
 4002250:	10c00817 	ldw	r3,32(r2)
 4002254:	e17ff917 	ldw	r5,-28(fp)
 4002258:	1809883a 	mov	r4,r3
 400225c:	4002d940 	call	4002d94 <__gesf2>
 4002260:	0080030e 	bge	zero,r2,4002270 <pid_compute+0x1e8>
		output = pid->min;
 4002264:	e0bffc17 	ldw	r2,-16(fp)
 4002268:	10800817 	ldw	r2,32(r2)
 400226c:	e0bff915 	stw	r2,-28(fp)
	}

	if( pid->mode == REVERSE){
 4002270:	e0bffc17 	ldw	r2,-16(fp)
 4002274:	10800917 	ldw	r2,36(r2)
 4002278:	10800058 	cmpnei	r2,r2,1
 400227c:	1000031e 	bne	r2,zero,400228c <pid_compute+0x204>
		output *= -1.0f;
 4002280:	e0bff917 	ldw	r2,-28(fp)
 4002284:	10a0003c 	xorhi	r2,r2,32768
 4002288:	e0bff915 	stw	r2,-28(fp)
	}

	return output;
 400228c:	e0bff917 	ldw	r2,-28(fp)
 4002290:	1007883a 	mov	r3,r2

}
 4002294:	1805883a 	mov	r2,r3
 4002298:	e6ffff04 	addi	sp,fp,-4
 400229c:	dfc00217 	ldw	ra,8(sp)
 40022a0:	df000117 	ldw	fp,4(sp)
 40022a4:	dc000017 	ldw	r16,0(sp)
 40022a8:	dec00304 	addi	sp,sp,12
 40022ac:	f800283a 	ret

040022b0 <__divsi3>:
 40022b0:	20001b16 	blt	r4,zero,4002320 <__divsi3+0x70>
 40022b4:	000f883a 	mov	r7,zero
 40022b8:	28001616 	blt	r5,zero,4002314 <__divsi3+0x64>
 40022bc:	200d883a 	mov	r6,r4
 40022c0:	29001a2e 	bgeu	r5,r4,400232c <__divsi3+0x7c>
 40022c4:	00800804 	movi	r2,32
 40022c8:	00c00044 	movi	r3,1
 40022cc:	00000106 	br	40022d4 <__divsi3+0x24>
 40022d0:	10000d26 	beq	r2,zero,4002308 <__divsi3+0x58>
 40022d4:	294b883a 	add	r5,r5,r5
 40022d8:	10bfffc4 	addi	r2,r2,-1
 40022dc:	18c7883a 	add	r3,r3,r3
 40022e0:	293ffb36 	bltu	r5,r4,40022d0 <__alt_data_end+0xfc0022d0>
 40022e4:	0005883a 	mov	r2,zero
 40022e8:	18000726 	beq	r3,zero,4002308 <__divsi3+0x58>
 40022ec:	0005883a 	mov	r2,zero
 40022f0:	31400236 	bltu	r6,r5,40022fc <__divsi3+0x4c>
 40022f4:	314dc83a 	sub	r6,r6,r5
 40022f8:	10c4b03a 	or	r2,r2,r3
 40022fc:	1806d07a 	srli	r3,r3,1
 4002300:	280ad07a 	srli	r5,r5,1
 4002304:	183ffa1e 	bne	r3,zero,40022f0 <__alt_data_end+0xfc0022f0>
 4002308:	38000126 	beq	r7,zero,4002310 <__divsi3+0x60>
 400230c:	0085c83a 	sub	r2,zero,r2
 4002310:	f800283a 	ret
 4002314:	014bc83a 	sub	r5,zero,r5
 4002318:	39c0005c 	xori	r7,r7,1
 400231c:	003fe706 	br	40022bc <__alt_data_end+0xfc0022bc>
 4002320:	0109c83a 	sub	r4,zero,r4
 4002324:	01c00044 	movi	r7,1
 4002328:	003fe306 	br	40022b8 <__alt_data_end+0xfc0022b8>
 400232c:	00c00044 	movi	r3,1
 4002330:	003fee06 	br	40022ec <__alt_data_end+0xfc0022ec>

04002334 <__modsi3>:
 4002334:	20001716 	blt	r4,zero,4002394 <__modsi3+0x60>
 4002338:	000f883a 	mov	r7,zero
 400233c:	2005883a 	mov	r2,r4
 4002340:	28001216 	blt	r5,zero,400238c <__modsi3+0x58>
 4002344:	2900162e 	bgeu	r5,r4,40023a0 <__modsi3+0x6c>
 4002348:	01800804 	movi	r6,32
 400234c:	00c00044 	movi	r3,1
 4002350:	00000106 	br	4002358 <__modsi3+0x24>
 4002354:	30000a26 	beq	r6,zero,4002380 <__modsi3+0x4c>
 4002358:	294b883a 	add	r5,r5,r5
 400235c:	31bfffc4 	addi	r6,r6,-1
 4002360:	18c7883a 	add	r3,r3,r3
 4002364:	293ffb36 	bltu	r5,r4,4002354 <__alt_data_end+0xfc002354>
 4002368:	18000526 	beq	r3,zero,4002380 <__modsi3+0x4c>
 400236c:	1806d07a 	srli	r3,r3,1
 4002370:	11400136 	bltu	r2,r5,4002378 <__modsi3+0x44>
 4002374:	1145c83a 	sub	r2,r2,r5
 4002378:	280ad07a 	srli	r5,r5,1
 400237c:	183ffb1e 	bne	r3,zero,400236c <__alt_data_end+0xfc00236c>
 4002380:	38000126 	beq	r7,zero,4002388 <__modsi3+0x54>
 4002384:	0085c83a 	sub	r2,zero,r2
 4002388:	f800283a 	ret
 400238c:	014bc83a 	sub	r5,zero,r5
 4002390:	003fec06 	br	4002344 <__alt_data_end+0xfc002344>
 4002394:	0109c83a 	sub	r4,zero,r4
 4002398:	01c00044 	movi	r7,1
 400239c:	003fe706 	br	400233c <__alt_data_end+0xfc00233c>
 40023a0:	00c00044 	movi	r3,1
 40023a4:	003ff106 	br	400236c <__alt_data_end+0xfc00236c>

040023a8 <__udivsi3>:
 40023a8:	200d883a 	mov	r6,r4
 40023ac:	2900152e 	bgeu	r5,r4,4002404 <__udivsi3+0x5c>
 40023b0:	28001416 	blt	r5,zero,4002404 <__udivsi3+0x5c>
 40023b4:	00800804 	movi	r2,32
 40023b8:	00c00044 	movi	r3,1
 40023bc:	00000206 	br	40023c8 <__udivsi3+0x20>
 40023c0:	10000e26 	beq	r2,zero,40023fc <__udivsi3+0x54>
 40023c4:	28000516 	blt	r5,zero,40023dc <__udivsi3+0x34>
 40023c8:	294b883a 	add	r5,r5,r5
 40023cc:	10bfffc4 	addi	r2,r2,-1
 40023d0:	18c7883a 	add	r3,r3,r3
 40023d4:	293ffa36 	bltu	r5,r4,40023c0 <__alt_data_end+0xfc0023c0>
 40023d8:	18000826 	beq	r3,zero,40023fc <__udivsi3+0x54>
 40023dc:	0005883a 	mov	r2,zero
 40023e0:	31400236 	bltu	r6,r5,40023ec <__udivsi3+0x44>
 40023e4:	314dc83a 	sub	r6,r6,r5
 40023e8:	10c4b03a 	or	r2,r2,r3
 40023ec:	1806d07a 	srli	r3,r3,1
 40023f0:	280ad07a 	srli	r5,r5,1
 40023f4:	183ffa1e 	bne	r3,zero,40023e0 <__alt_data_end+0xfc0023e0>
 40023f8:	f800283a 	ret
 40023fc:	0005883a 	mov	r2,zero
 4002400:	f800283a 	ret
 4002404:	00c00044 	movi	r3,1
 4002408:	003ff406 	br	40023dc <__alt_data_end+0xfc0023dc>

0400240c <__umodsi3>:
 400240c:	2005883a 	mov	r2,r4
 4002410:	2900122e 	bgeu	r5,r4,400245c <__umodsi3+0x50>
 4002414:	28001116 	blt	r5,zero,400245c <__umodsi3+0x50>
 4002418:	01800804 	movi	r6,32
 400241c:	00c00044 	movi	r3,1
 4002420:	00000206 	br	400242c <__umodsi3+0x20>
 4002424:	30000c26 	beq	r6,zero,4002458 <__umodsi3+0x4c>
 4002428:	28000516 	blt	r5,zero,4002440 <__umodsi3+0x34>
 400242c:	294b883a 	add	r5,r5,r5
 4002430:	31bfffc4 	addi	r6,r6,-1
 4002434:	18c7883a 	add	r3,r3,r3
 4002438:	293ffa36 	bltu	r5,r4,4002424 <__alt_data_end+0xfc002424>
 400243c:	18000626 	beq	r3,zero,4002458 <__umodsi3+0x4c>
 4002440:	1806d07a 	srli	r3,r3,1
 4002444:	11400136 	bltu	r2,r5,400244c <__umodsi3+0x40>
 4002448:	1145c83a 	sub	r2,r2,r5
 400244c:	280ad07a 	srli	r5,r5,1
 4002450:	183ffb1e 	bne	r3,zero,4002440 <__alt_data_end+0xfc002440>
 4002454:	f800283a 	ret
 4002458:	f800283a 	ret
 400245c:	00c00044 	movi	r3,1
 4002460:	003ff706 	br	4002440 <__alt_data_end+0xfc002440>

04002464 <__mulsi3>:
 4002464:	0005883a 	mov	r2,zero
 4002468:	20000726 	beq	r4,zero,4002488 <__mulsi3+0x24>
 400246c:	20c0004c 	andi	r3,r4,1
 4002470:	2008d07a 	srli	r4,r4,1
 4002474:	18000126 	beq	r3,zero,400247c <__mulsi3+0x18>
 4002478:	1145883a 	add	r2,r2,r5
 400247c:	294b883a 	add	r5,r5,r5
 4002480:	203ffa1e 	bne	r4,zero,400246c <__alt_data_end+0xfc00246c>
 4002484:	f800283a 	ret
 4002488:	f800283a 	ret

0400248c <__addsf3>:
 400248c:	defffc04 	addi	sp,sp,-16
 4002490:	2004d7fa 	srli	r2,r4,31
 4002494:	280cd5fa 	srli	r6,r5,23
 4002498:	dc000015 	stw	r16,0(sp)
 400249c:	00c02034 	movhi	r3,128
 40024a0:	2020d5fa 	srli	r16,r4,23
 40024a4:	280ed7fa 	srli	r7,r5,31
 40024a8:	18ffffc4 	addi	r3,r3,-1
 40024ac:	dc400115 	stw	r17,4(sp)
 40024b0:	1908703a 	and	r4,r3,r4
 40024b4:	194a703a 	and	r5,r3,r5
 40024b8:	dfc00315 	stw	ra,12(sp)
 40024bc:	dc800215 	stw	r18,8(sp)
 40024c0:	14403fcc 	andi	r17,r2,255
 40024c4:	84003fcc 	andi	r16,r16,255
 40024c8:	200890fa 	slli	r4,r4,3
 40024cc:	31803fcc 	andi	r6,r6,255
 40024d0:	280a90fa 	slli	r5,r5,3
 40024d4:	89c05026 	beq	r17,r7,4002618 <__addsf3+0x18c>
 40024d8:	8185c83a 	sub	r2,r16,r6
 40024dc:	00807a0e 	bge	zero,r2,40026c8 <__addsf3+0x23c>
 40024e0:	30001e1e 	bne	r6,zero,400255c <__addsf3+0xd0>
 40024e4:	28006d1e 	bne	r5,zero,400269c <__addsf3+0x210>
 40024e8:	208001cc 	andi	r2,r4,7
 40024ec:	10000426 	beq	r2,zero,4002500 <__addsf3+0x74>
 40024f0:	208003cc 	andi	r2,r4,15
 40024f4:	00c00104 	movi	r3,4
 40024f8:	10c00126 	beq	r2,r3,4002500 <__addsf3+0x74>
 40024fc:	20c9883a 	add	r4,r4,r3
 4002500:	2081002c 	andhi	r2,r4,1024
 4002504:	10003926 	beq	r2,zero,40025ec <__addsf3+0x160>
 4002508:	84000044 	addi	r16,r16,1
 400250c:	00803fc4 	movi	r2,255
 4002510:	80807826 	beq	r16,r2,40026f4 <__addsf3+0x268>
 4002514:	200891ba 	slli	r4,r4,6
 4002518:	8805883a 	mov	r2,r17
 400251c:	2008d27a 	srli	r4,r4,9
 4002520:	84003fcc 	andi	r16,r16,255
 4002524:	800695fa 	slli	r3,r16,23
 4002528:	10803fcc 	andi	r2,r2,255
 400252c:	04002034 	movhi	r16,128
 4002530:	843fffc4 	addi	r16,r16,-1
 4002534:	100497fa 	slli	r2,r2,31
 4002538:	2408703a 	and	r4,r4,r16
 400253c:	20e0b03a 	or	r16,r4,r3
 4002540:	8084b03a 	or	r2,r16,r2
 4002544:	dfc00317 	ldw	ra,12(sp)
 4002548:	dc800217 	ldw	r18,8(sp)
 400254c:	dc400117 	ldw	r17,4(sp)
 4002550:	dc000017 	ldw	r16,0(sp)
 4002554:	dec00404 	addi	sp,sp,16
 4002558:	f800283a 	ret
 400255c:	00c03fc4 	movi	r3,255
 4002560:	80ffe126 	beq	r16,r3,40024e8 <__alt_data_end+0xfc0024e8>
 4002564:	29410034 	orhi	r5,r5,1024
 4002568:	00c006c4 	movi	r3,27
 400256c:	18807516 	blt	r3,r2,4002744 <__addsf3+0x2b8>
 4002570:	00c00804 	movi	r3,32
 4002574:	1887c83a 	sub	r3,r3,r2
 4002578:	28c6983a 	sll	r3,r5,r3
 400257c:	288ad83a 	srl	r5,r5,r2
 4002580:	1804c03a 	cmpne	r2,r3,zero
 4002584:	288ab03a 	or	r5,r5,r2
 4002588:	2149c83a 	sub	r4,r4,r5
 400258c:	2081002c 	andhi	r2,r4,1024
 4002590:	10001426 	beq	r2,zero,40025e4 <__addsf3+0x158>
 4002594:	04810034 	movhi	r18,1024
 4002598:	94bfffc4 	addi	r18,r18,-1
 400259c:	24a4703a 	and	r18,r4,r18
 40025a0:	9009883a 	mov	r4,r18
 40025a4:	40063c00 	call	40063c0 <__clzsi2>
 40025a8:	10bffec4 	addi	r2,r2,-5
 40025ac:	90a4983a 	sll	r18,r18,r2
 40025b0:	14005416 	blt	r2,r16,4002704 <__addsf3+0x278>
 40025b4:	1405c83a 	sub	r2,r2,r16
 40025b8:	11000044 	addi	r4,r2,1
 40025bc:	00800804 	movi	r2,32
 40025c0:	1105c83a 	sub	r2,r2,r4
 40025c4:	9084983a 	sll	r2,r18,r2
 40025c8:	9124d83a 	srl	r18,r18,r4
 40025cc:	0021883a 	mov	r16,zero
 40025d0:	1008c03a 	cmpne	r4,r2,zero
 40025d4:	9108b03a 	or	r4,r18,r4
 40025d8:	003fc306 	br	40024e8 <__alt_data_end+0xfc0024e8>
 40025dc:	1000db26 	beq	r2,zero,400294c <__addsf3+0x4c0>
 40025e0:	1009883a 	mov	r4,r2
 40025e4:	208001cc 	andi	r2,r4,7
 40025e8:	103fc11e 	bne	r2,zero,40024f0 <__alt_data_end+0xfc0024f0>
 40025ec:	2006d0fa 	srli	r3,r4,3
 40025f0:	01003fc4 	movi	r4,255
 40025f4:	8805883a 	mov	r2,r17
 40025f8:	8100241e 	bne	r16,r4,400268c <__addsf3+0x200>
 40025fc:	18006e26 	beq	r3,zero,40027b8 <__addsf3+0x32c>
 4002600:	19001034 	orhi	r4,r3,64
 4002604:	00c02034 	movhi	r3,128
 4002608:	18ffffc4 	addi	r3,r3,-1
 400260c:	043fffc4 	movi	r16,-1
 4002610:	20c8703a 	and	r4,r4,r3
 4002614:	003fc206 	br	4002520 <__alt_data_end+0xfc002520>
 4002618:	8187c83a 	sub	r3,r16,r6
 400261c:	00c03e0e 	bge	zero,r3,4002718 <__addsf3+0x28c>
 4002620:	30002326 	beq	r6,zero,40026b0 <__addsf3+0x224>
 4002624:	01803fc4 	movi	r6,255
 4002628:	81bfaf26 	beq	r16,r6,40024e8 <__alt_data_end+0xfc0024e8>
 400262c:	29410034 	orhi	r5,r5,1024
 4002630:	018006c4 	movi	r6,27
 4002634:	30c07416 	blt	r6,r3,4002808 <__addsf3+0x37c>
 4002638:	01800804 	movi	r6,32
 400263c:	30cdc83a 	sub	r6,r6,r3
 4002640:	298c983a 	sll	r6,r5,r6
 4002644:	28cad83a 	srl	r5,r5,r3
 4002648:	3006c03a 	cmpne	r3,r6,zero
 400264c:	28cab03a 	or	r5,r5,r3
 4002650:	2149883a 	add	r4,r4,r5
 4002654:	20c1002c 	andhi	r3,r4,1024
 4002658:	183fe226 	beq	r3,zero,40025e4 <__alt_data_end+0xfc0025e4>
 400265c:	84000044 	addi	r16,r16,1
 4002660:	00c03fc4 	movi	r3,255
 4002664:	80c05426 	beq	r16,r3,40027b8 <__addsf3+0x32c>
 4002668:	00bf0034 	movhi	r2,64512
 400266c:	10bfffc4 	addi	r2,r2,-1
 4002670:	20c0004c 	andi	r3,r4,1
 4002674:	2088703a 	and	r4,r4,r2
 4002678:	2008d07a 	srli	r4,r4,1
 400267c:	20c8b03a 	or	r4,r4,r3
 4002680:	003f9906 	br	40024e8 <__alt_data_end+0xfc0024e8>
 4002684:	0007883a 	mov	r3,zero
 4002688:	0005883a 	mov	r2,zero
 400268c:	01002034 	movhi	r4,128
 4002690:	213fffc4 	addi	r4,r4,-1
 4002694:	1908703a 	and	r4,r3,r4
 4002698:	003fa106 	br	4002520 <__alt_data_end+0xfc002520>
 400269c:	10bfffc4 	addi	r2,r2,-1
 40026a0:	103fb926 	beq	r2,zero,4002588 <__alt_data_end+0xfc002588>
 40026a4:	00c03fc4 	movi	r3,255
 40026a8:	80ffaf1e 	bne	r16,r3,4002568 <__alt_data_end+0xfc002568>
 40026ac:	003f8e06 	br	40024e8 <__alt_data_end+0xfc0024e8>
 40026b0:	283f8d26 	beq	r5,zero,40024e8 <__alt_data_end+0xfc0024e8>
 40026b4:	18ffffc4 	addi	r3,r3,-1
 40026b8:	183fe526 	beq	r3,zero,4002650 <__alt_data_end+0xfc002650>
 40026bc:	01803fc4 	movi	r6,255
 40026c0:	81bfdb1e 	bne	r16,r6,4002630 <__alt_data_end+0xfc002630>
 40026c4:	003f8806 	br	40024e8 <__alt_data_end+0xfc0024e8>
 40026c8:	1000201e 	bne	r2,zero,400274c <__addsf3+0x2c0>
 40026cc:	80800044 	addi	r2,r16,1
 40026d0:	10803fcc 	andi	r2,r2,255
 40026d4:	01800044 	movi	r6,1
 40026d8:	3080450e 	bge	r6,r2,40027f0 <__addsf3+0x364>
 40026dc:	2165c83a 	sub	r18,r4,r5
 40026e0:	90c1002c 	andhi	r3,r18,1024
 40026e4:	18002b26 	beq	r3,zero,4002794 <__addsf3+0x308>
 40026e8:	2925c83a 	sub	r18,r5,r4
 40026ec:	3823883a 	mov	r17,r7
 40026f0:	003fab06 	br	40025a0 <__alt_data_end+0xfc0025a0>
 40026f4:	8805883a 	mov	r2,r17
 40026f8:	043fffc4 	movi	r16,-1
 40026fc:	0009883a 	mov	r4,zero
 4002700:	003f8706 	br	4002520 <__alt_data_end+0xfc002520>
 4002704:	013f0034 	movhi	r4,64512
 4002708:	213fffc4 	addi	r4,r4,-1
 400270c:	80a1c83a 	sub	r16,r16,r2
 4002710:	9108703a 	and	r4,r18,r4
 4002714:	003f7406 	br	40024e8 <__alt_data_end+0xfc0024e8>
 4002718:	1800411e 	bne	r3,zero,4002820 <__addsf3+0x394>
 400271c:	80c00044 	addi	r3,r16,1
 4002720:	19c03fcc 	andi	r7,r3,255
 4002724:	01800044 	movi	r6,1
 4002728:	31c0260e 	bge	r6,r7,40027c4 <__addsf3+0x338>
 400272c:	01803fc4 	movi	r6,255
 4002730:	19802126 	beq	r3,r6,40027b8 <__addsf3+0x32c>
 4002734:	2149883a 	add	r4,r4,r5
 4002738:	2008d07a 	srli	r4,r4,1
 400273c:	1821883a 	mov	r16,r3
 4002740:	003f6906 	br	40024e8 <__alt_data_end+0xfc0024e8>
 4002744:	01400044 	movi	r5,1
 4002748:	003f8f06 	br	4002588 <__alt_data_end+0xfc002588>
 400274c:	8000151e 	bne	r16,zero,40027a4 <__addsf3+0x318>
 4002750:	20002f26 	beq	r4,zero,4002810 <__addsf3+0x384>
 4002754:	0084303a 	nor	r2,zero,r2
 4002758:	10000a26 	beq	r2,zero,4002784 <__addsf3+0x2f8>
 400275c:	00c03fc4 	movi	r3,255
 4002760:	30c02b26 	beq	r6,r3,4002810 <__addsf3+0x384>
 4002764:	00c006c4 	movi	r3,27
 4002768:	18806d16 	blt	r3,r2,4002920 <__addsf3+0x494>
 400276c:	00c00804 	movi	r3,32
 4002770:	1887c83a 	sub	r3,r3,r2
 4002774:	20c6983a 	sll	r3,r4,r3
 4002778:	2084d83a 	srl	r2,r4,r2
 400277c:	1808c03a 	cmpne	r4,r3,zero
 4002780:	1108b03a 	or	r4,r2,r4
 4002784:	2909c83a 	sub	r4,r5,r4
 4002788:	3021883a 	mov	r16,r6
 400278c:	3823883a 	mov	r17,r7
 4002790:	003f7e06 	br	400258c <__alt_data_end+0xfc00258c>
 4002794:	903f821e 	bne	r18,zero,40025a0 <__alt_data_end+0xfc0025a0>
 4002798:	0005883a 	mov	r2,zero
 400279c:	0021883a 	mov	r16,zero
 40027a0:	003fba06 	br	400268c <__alt_data_end+0xfc00268c>
 40027a4:	00c03fc4 	movi	r3,255
 40027a8:	30c01926 	beq	r6,r3,4002810 <__addsf3+0x384>
 40027ac:	0085c83a 	sub	r2,zero,r2
 40027b0:	21010034 	orhi	r4,r4,1024
 40027b4:	003feb06 	br	4002764 <__alt_data_end+0xfc002764>
 40027b8:	043fffc4 	movi	r16,-1
 40027bc:	0009883a 	mov	r4,zero
 40027c0:	003f5706 	br	4002520 <__alt_data_end+0xfc002520>
 40027c4:	80004a1e 	bne	r16,zero,40028f0 <__addsf3+0x464>
 40027c8:	20005926 	beq	r4,zero,4002930 <__addsf3+0x4a4>
 40027cc:	283f4626 	beq	r5,zero,40024e8 <__alt_data_end+0xfc0024e8>
 40027d0:	2149883a 	add	r4,r4,r5
 40027d4:	2081002c 	andhi	r2,r4,1024
 40027d8:	103f8226 	beq	r2,zero,40025e4 <__alt_data_end+0xfc0025e4>
 40027dc:	00bf0034 	movhi	r2,64512
 40027e0:	10bfffc4 	addi	r2,r2,-1
 40027e4:	3021883a 	mov	r16,r6
 40027e8:	2088703a 	and	r4,r4,r2
 40027ec:	003f3e06 	br	40024e8 <__alt_data_end+0xfc0024e8>
 40027f0:	8000121e 	bne	r16,zero,400283c <__addsf3+0x3b0>
 40027f4:	2000261e 	bne	r4,zero,4002890 <__addsf3+0x404>
 40027f8:	283fa226 	beq	r5,zero,4002684 <__alt_data_end+0xfc002684>
 40027fc:	2809883a 	mov	r4,r5
 4002800:	3823883a 	mov	r17,r7
 4002804:	003f3806 	br	40024e8 <__alt_data_end+0xfc0024e8>
 4002808:	01400044 	movi	r5,1
 400280c:	003f9006 	br	4002650 <__alt_data_end+0xfc002650>
 4002810:	2809883a 	mov	r4,r5
 4002814:	3021883a 	mov	r16,r6
 4002818:	3823883a 	mov	r17,r7
 400281c:	003f3206 	br	40024e8 <__alt_data_end+0xfc0024e8>
 4002820:	80000c1e 	bne	r16,zero,4002854 <__addsf3+0x3c8>
 4002824:	20002f26 	beq	r4,zero,40028e4 <__addsf3+0x458>
 4002828:	00c6303a 	nor	r3,zero,r3
 400282c:	18002b1e 	bne	r3,zero,40028dc <__addsf3+0x450>
 4002830:	2149883a 	add	r4,r4,r5
 4002834:	3021883a 	mov	r16,r6
 4002838:	003f8606 	br	4002654 <__alt_data_end+0xfc002654>
 400283c:	20001b1e 	bne	r4,zero,40028ac <__addsf3+0x420>
 4002840:	28003926 	beq	r5,zero,4002928 <__addsf3+0x49c>
 4002844:	2809883a 	mov	r4,r5
 4002848:	3823883a 	mov	r17,r7
 400284c:	04003fc4 	movi	r16,255
 4002850:	003f2506 	br	40024e8 <__alt_data_end+0xfc0024e8>
 4002854:	01c03fc4 	movi	r7,255
 4002858:	31c02226 	beq	r6,r7,40028e4 <__addsf3+0x458>
 400285c:	00c7c83a 	sub	r3,zero,r3
 4002860:	21010034 	orhi	r4,r4,1024
 4002864:	01c006c4 	movi	r7,27
 4002868:	38c03616 	blt	r7,r3,4002944 <__addsf3+0x4b8>
 400286c:	01c00804 	movi	r7,32
 4002870:	38cfc83a 	sub	r7,r7,r3
 4002874:	21ce983a 	sll	r7,r4,r7
 4002878:	20c6d83a 	srl	r3,r4,r3
 400287c:	3808c03a 	cmpne	r4,r7,zero
 4002880:	1906b03a 	or	r3,r3,r4
 4002884:	1949883a 	add	r4,r3,r5
 4002888:	3021883a 	mov	r16,r6
 400288c:	003f7106 	br	4002654 <__alt_data_end+0xfc002654>
 4002890:	283f1526 	beq	r5,zero,40024e8 <__alt_data_end+0xfc0024e8>
 4002894:	2145c83a 	sub	r2,r4,r5
 4002898:	10c1002c 	andhi	r3,r2,1024
 400289c:	183f4f26 	beq	r3,zero,40025dc <__alt_data_end+0xfc0025dc>
 40028a0:	2909c83a 	sub	r4,r5,r4
 40028a4:	3823883a 	mov	r17,r7
 40028a8:	003f0f06 	br	40024e8 <__alt_data_end+0xfc0024e8>
 40028ac:	28001a26 	beq	r5,zero,4002918 <__addsf3+0x48c>
 40028b0:	2008d0fa 	srli	r4,r4,3
 40028b4:	2080102c 	andhi	r2,r4,64
 40028b8:	10000526 	beq	r2,zero,40028d0 <__addsf3+0x444>
 40028bc:	280ad0fa 	srli	r5,r5,3
 40028c0:	2880102c 	andhi	r2,r5,64
 40028c4:	1000021e 	bne	r2,zero,40028d0 <__addsf3+0x444>
 40028c8:	2809883a 	mov	r4,r5
 40028cc:	3823883a 	mov	r17,r7
 40028d0:	200890fa 	slli	r4,r4,3
 40028d4:	04003fc4 	movi	r16,255
 40028d8:	003f0306 	br	40024e8 <__alt_data_end+0xfc0024e8>
 40028dc:	01c03fc4 	movi	r7,255
 40028e0:	31ffe01e 	bne	r6,r7,4002864 <__alt_data_end+0xfc002864>
 40028e4:	2809883a 	mov	r4,r5
 40028e8:	3021883a 	mov	r16,r6
 40028ec:	003efe06 	br	40024e8 <__alt_data_end+0xfc0024e8>
 40028f0:	20001126 	beq	r4,zero,4002938 <__addsf3+0x4ac>
 40028f4:	28000826 	beq	r5,zero,4002918 <__addsf3+0x48c>
 40028f8:	2008d0fa 	srli	r4,r4,3
 40028fc:	2080102c 	andhi	r2,r4,64
 4002900:	103ff326 	beq	r2,zero,40028d0 <__alt_data_end+0xfc0028d0>
 4002904:	280ad0fa 	srli	r5,r5,3
 4002908:	2880102c 	andhi	r2,r5,64
 400290c:	103ff01e 	bne	r2,zero,40028d0 <__alt_data_end+0xfc0028d0>
 4002910:	2809883a 	mov	r4,r5
 4002914:	003fee06 	br	40028d0 <__alt_data_end+0xfc0028d0>
 4002918:	04003fc4 	movi	r16,255
 400291c:	003ef206 	br	40024e8 <__alt_data_end+0xfc0024e8>
 4002920:	01000044 	movi	r4,1
 4002924:	003f9706 	br	4002784 <__alt_data_end+0xfc002784>
 4002928:	0005883a 	mov	r2,zero
 400292c:	003f3406 	br	4002600 <__alt_data_end+0xfc002600>
 4002930:	2809883a 	mov	r4,r5
 4002934:	003eec06 	br	40024e8 <__alt_data_end+0xfc0024e8>
 4002938:	2809883a 	mov	r4,r5
 400293c:	04003fc4 	movi	r16,255
 4002940:	003ee906 	br	40024e8 <__alt_data_end+0xfc0024e8>
 4002944:	00c00044 	movi	r3,1
 4002948:	003fce06 	br	4002884 <__alt_data_end+0xfc002884>
 400294c:	0005883a 	mov	r2,zero
 4002950:	003f4e06 	br	400268c <__alt_data_end+0xfc00268c>

04002954 <__divsf3>:
 4002954:	defff504 	addi	sp,sp,-44
 4002958:	200cd5fa 	srli	r6,r4,23
 400295c:	dcc00415 	stw	r19,16(sp)
 4002960:	2026d7fa 	srli	r19,r4,31
 4002964:	00c02034 	movhi	r3,128
 4002968:	dd800715 	stw	r22,28(sp)
 400296c:	dd000515 	stw	r20,20(sp)
 4002970:	dc800315 	stw	r18,12(sp)
 4002974:	18ffffc4 	addi	r3,r3,-1
 4002978:	dfc00a15 	stw	ra,40(sp)
 400297c:	df000915 	stw	fp,36(sp)
 4002980:	ddc00815 	stw	r23,32(sp)
 4002984:	dd400615 	stw	r21,24(sp)
 4002988:	dc400215 	stw	r17,8(sp)
 400298c:	dc000115 	stw	r16,4(sp)
 4002990:	35003fcc 	andi	r20,r6,255
 4002994:	1924703a 	and	r18,r3,r4
 4002998:	9d803fcc 	andi	r22,r19,255
 400299c:	a0005226 	beq	r20,zero,4002ae8 <__divsf3+0x194>
 40029a0:	00803fc4 	movi	r2,255
 40029a4:	a0802e26 	beq	r20,r2,4002a60 <__divsf3+0x10c>
 40029a8:	91002034 	orhi	r4,r18,128
 40029ac:	202490fa 	slli	r18,r4,3
 40029b0:	a53fe044 	addi	r20,r20,-127
 40029b4:	0021883a 	mov	r16,zero
 40029b8:	002f883a 	mov	r23,zero
 40029bc:	280cd5fa 	srli	r6,r5,23
 40029c0:	282ad7fa 	srli	r21,r5,31
 40029c4:	00c02034 	movhi	r3,128
 40029c8:	18ffffc4 	addi	r3,r3,-1
 40029cc:	31803fcc 	andi	r6,r6,255
 40029d0:	1962703a 	and	r17,r3,r5
 40029d4:	af003fcc 	andi	fp,r21,255
 40029d8:	30004a26 	beq	r6,zero,4002b04 <__divsf3+0x1b0>
 40029dc:	00803fc4 	movi	r2,255
 40029e0:	30804526 	beq	r6,r2,4002af8 <__divsf3+0x1a4>
 40029e4:	89402034 	orhi	r5,r17,128
 40029e8:	282290fa 	slli	r17,r5,3
 40029ec:	31bfe044 	addi	r6,r6,-127
 40029f0:	000b883a 	mov	r5,zero
 40029f4:	2c20b03a 	or	r16,r5,r16
 40029f8:	802090ba 	slli	r16,r16,2
 40029fc:	00810034 	movhi	r2,1024
 4002a00:	108a8804 	addi	r2,r2,10784
 4002a04:	80a1883a 	add	r16,r16,r2
 4002a08:	81000017 	ldw	r4,0(r16)
 4002a0c:	9d46f03a 	xor	r3,r19,r21
 4002a10:	180f883a 	mov	r7,r3
 4002a14:	18803fcc 	andi	r2,r3,255
 4002a18:	a18dc83a 	sub	r6,r20,r6
 4002a1c:	2000683a 	jmp	r4
 4002a20:	04002c04 	movi	r16,176
 4002a24:	04002a88 	cmpgei	r16,zero,170
 4002a28:	04002bf8 	rdprs	r16,zero,175
 4002a2c:	04002a74 	movhi	r16,169
 4002a30:	04002bf8 	rdprs	r16,zero,175
 4002a34:	04002bd0 	cmplti	r16,zero,175
 4002a38:	04002bf8 	rdprs	r16,zero,175
 4002a3c:	04002a74 	movhi	r16,169
 4002a40:	04002a88 	cmpgei	r16,zero,170
 4002a44:	04002a88 	cmpgei	r16,zero,170
 4002a48:	04002bd0 	cmplti	r16,zero,175
 4002a4c:	04002a74 	movhi	r16,169
 4002a50:	04002ce4 	muli	r16,zero,179
 4002a54:	04002ce4 	muli	r16,zero,179
 4002a58:	04002ce4 	muli	r16,zero,179
 4002a5c:	04002c98 	cmpnei	r16,zero,178
 4002a60:	9000581e 	bne	r18,zero,4002bc4 <__divsf3+0x270>
 4002a64:	04000204 	movi	r16,8
 4002a68:	05c00084 	movi	r23,2
 4002a6c:	003fd306 	br	40029bc <__alt_data_end+0xfc0029bc>
 4002a70:	0023883a 	mov	r17,zero
 4002a74:	e02d883a 	mov	r22,fp
 4002a78:	282f883a 	mov	r23,r5
 4002a7c:	00800084 	movi	r2,2
 4002a80:	b8808f1e 	bne	r23,r2,4002cc0 <__divsf3+0x36c>
 4002a84:	b005883a 	mov	r2,r22
 4002a88:	11c0004c 	andi	r7,r2,1
 4002a8c:	013fffc4 	movi	r4,-1
 4002a90:	000d883a 	mov	r6,zero
 4002a94:	21003fcc 	andi	r4,r4,255
 4002a98:	200895fa 	slli	r4,r4,23
 4002a9c:	38803fcc 	andi	r2,r7,255
 4002aa0:	00c02034 	movhi	r3,128
 4002aa4:	100497fa 	slli	r2,r2,31
 4002aa8:	18ffffc4 	addi	r3,r3,-1
 4002aac:	30c6703a 	and	r3,r6,r3
 4002ab0:	1906b03a 	or	r3,r3,r4
 4002ab4:	1884b03a 	or	r2,r3,r2
 4002ab8:	dfc00a17 	ldw	ra,40(sp)
 4002abc:	df000917 	ldw	fp,36(sp)
 4002ac0:	ddc00817 	ldw	r23,32(sp)
 4002ac4:	dd800717 	ldw	r22,28(sp)
 4002ac8:	dd400617 	ldw	r21,24(sp)
 4002acc:	dd000517 	ldw	r20,20(sp)
 4002ad0:	dcc00417 	ldw	r19,16(sp)
 4002ad4:	dc800317 	ldw	r18,12(sp)
 4002ad8:	dc400217 	ldw	r17,8(sp)
 4002adc:	dc000117 	ldw	r16,4(sp)
 4002ae0:	dec00b04 	addi	sp,sp,44
 4002ae4:	f800283a 	ret
 4002ae8:	90002b1e 	bne	r18,zero,4002b98 <__divsf3+0x244>
 4002aec:	04000104 	movi	r16,4
 4002af0:	05c00044 	movi	r23,1
 4002af4:	003fb106 	br	40029bc <__alt_data_end+0xfc0029bc>
 4002af8:	8800251e 	bne	r17,zero,4002b90 <__divsf3+0x23c>
 4002afc:	01400084 	movi	r5,2
 4002b00:	00000206 	br	4002b0c <__divsf3+0x1b8>
 4002b04:	88001a1e 	bne	r17,zero,4002b70 <__divsf3+0x21c>
 4002b08:	01400044 	movi	r5,1
 4002b0c:	8160b03a 	or	r16,r16,r5
 4002b10:	802090ba 	slli	r16,r16,2
 4002b14:	00c10034 	movhi	r3,1024
 4002b18:	18cacc04 	addi	r3,r3,11056
 4002b1c:	80e1883a 	add	r16,r16,r3
 4002b20:	80c00017 	ldw	r3,0(r16)
 4002b24:	9d44f03a 	xor	r2,r19,r21
 4002b28:	a18dc83a 	sub	r6,r20,r6
 4002b2c:	1800683a 	jmp	r3
 4002b30:	04002a88 	cmpgei	r16,zero,170
 4002b34:	04002a88 	cmpgei	r16,zero,170
 4002b38:	04002cd4 	movui	r16,179
 4002b3c:	04002a70 	cmpltui	r16,zero,169
 4002b40:	04002cd4 	movui	r16,179
 4002b44:	04002bd0 	cmplti	r16,zero,175
 4002b48:	04002cd4 	movui	r16,179
 4002b4c:	04002a70 	cmpltui	r16,zero,169
 4002b50:	04002a88 	cmpgei	r16,zero,170
 4002b54:	04002a88 	cmpgei	r16,zero,170
 4002b58:	04002bd0 	cmplti	r16,zero,175
 4002b5c:	04002a70 	cmpltui	r16,zero,169
 4002b60:	04002ce4 	muli	r16,zero,179
 4002b64:	04002ce4 	muli	r16,zero,179
 4002b68:	04002ce4 	muli	r16,zero,179
 4002b6c:	04002cfc 	xorhi	r16,zero,179
 4002b70:	8809883a 	mov	r4,r17
 4002b74:	40063c00 	call	40063c0 <__clzsi2>
 4002b78:	10fffec4 	addi	r3,r2,-5
 4002b7c:	10801d84 	addi	r2,r2,118
 4002b80:	88e2983a 	sll	r17,r17,r3
 4002b84:	008dc83a 	sub	r6,zero,r2
 4002b88:	000b883a 	mov	r5,zero
 4002b8c:	003f9906 	br	40029f4 <__alt_data_end+0xfc0029f4>
 4002b90:	014000c4 	movi	r5,3
 4002b94:	003f9706 	br	40029f4 <__alt_data_end+0xfc0029f4>
 4002b98:	9009883a 	mov	r4,r18
 4002b9c:	d9400015 	stw	r5,0(sp)
 4002ba0:	40063c00 	call	40063c0 <__clzsi2>
 4002ba4:	10fffec4 	addi	r3,r2,-5
 4002ba8:	11801d84 	addi	r6,r2,118
 4002bac:	90e4983a 	sll	r18,r18,r3
 4002bb0:	01a9c83a 	sub	r20,zero,r6
 4002bb4:	0021883a 	mov	r16,zero
 4002bb8:	002f883a 	mov	r23,zero
 4002bbc:	d9400017 	ldw	r5,0(sp)
 4002bc0:	003f7e06 	br	40029bc <__alt_data_end+0xfc0029bc>
 4002bc4:	04000304 	movi	r16,12
 4002bc8:	05c000c4 	movi	r23,3
 4002bcc:	003f7b06 	br	40029bc <__alt_data_end+0xfc0029bc>
 4002bd0:	01802034 	movhi	r6,128
 4002bd4:	000f883a 	mov	r7,zero
 4002bd8:	31bfffc4 	addi	r6,r6,-1
 4002bdc:	013fffc4 	movi	r4,-1
 4002be0:	003fac06 	br	4002a94 <__alt_data_end+0xfc002a94>
 4002be4:	01400044 	movi	r5,1
 4002be8:	2909c83a 	sub	r4,r5,r4
 4002bec:	00c006c4 	movi	r3,27
 4002bf0:	19004b0e 	bge	r3,r4,4002d20 <__divsf3+0x3cc>
 4002bf4:	114e703a 	and	r7,r2,r5
 4002bf8:	0009883a 	mov	r4,zero
 4002bfc:	000d883a 	mov	r6,zero
 4002c00:	003fa406 	br	4002a94 <__alt_data_end+0xfc002a94>
 4002c04:	9006917a 	slli	r3,r18,5
 4002c08:	8822917a 	slli	r17,r17,5
 4002c0c:	1c40372e 	bgeu	r3,r17,4002cec <__divsf3+0x398>
 4002c10:	31bfffc4 	addi	r6,r6,-1
 4002c14:	010006c4 	movi	r4,27
 4002c18:	000b883a 	mov	r5,zero
 4002c1c:	180f883a 	mov	r7,r3
 4002c20:	294b883a 	add	r5,r5,r5
 4002c24:	18c7883a 	add	r3,r3,r3
 4002c28:	38000116 	blt	r7,zero,4002c30 <__divsf3+0x2dc>
 4002c2c:	1c400236 	bltu	r3,r17,4002c38 <__divsf3+0x2e4>
 4002c30:	1c47c83a 	sub	r3,r3,r17
 4002c34:	29400054 	ori	r5,r5,1
 4002c38:	213fffc4 	addi	r4,r4,-1
 4002c3c:	203ff71e 	bne	r4,zero,4002c1c <__alt_data_end+0xfc002c1c>
 4002c40:	1806c03a 	cmpne	r3,r3,zero
 4002c44:	1962b03a 	or	r17,r3,r5
 4002c48:	31001fc4 	addi	r4,r6,127
 4002c4c:	013fe50e 	bge	zero,r4,4002be4 <__alt_data_end+0xfc002be4>
 4002c50:	88c001cc 	andi	r3,r17,7
 4002c54:	18000426 	beq	r3,zero,4002c68 <__divsf3+0x314>
 4002c58:	88c003cc 	andi	r3,r17,15
 4002c5c:	01400104 	movi	r5,4
 4002c60:	19400126 	beq	r3,r5,4002c68 <__divsf3+0x314>
 4002c64:	8963883a 	add	r17,r17,r5
 4002c68:	88c2002c 	andhi	r3,r17,2048
 4002c6c:	18000426 	beq	r3,zero,4002c80 <__divsf3+0x32c>
 4002c70:	00fe0034 	movhi	r3,63488
 4002c74:	18ffffc4 	addi	r3,r3,-1
 4002c78:	31002004 	addi	r4,r6,128
 4002c7c:	88e2703a 	and	r17,r17,r3
 4002c80:	00c03f84 	movi	r3,254
 4002c84:	193f8016 	blt	r3,r4,4002a88 <__alt_data_end+0xfc002a88>
 4002c88:	880c91ba 	slli	r6,r17,6
 4002c8c:	11c0004c 	andi	r7,r2,1
 4002c90:	300cd27a 	srli	r6,r6,9
 4002c94:	003f7f06 	br	4002a94 <__alt_data_end+0xfc002a94>
 4002c98:	9080102c 	andhi	r2,r18,64
 4002c9c:	10000226 	beq	r2,zero,4002ca8 <__divsf3+0x354>
 4002ca0:	8880102c 	andhi	r2,r17,64
 4002ca4:	10001826 	beq	r2,zero,4002d08 <__divsf3+0x3b4>
 4002ca8:	00802034 	movhi	r2,128
 4002cac:	91801034 	orhi	r6,r18,64
 4002cb0:	10bfffc4 	addi	r2,r2,-1
 4002cb4:	980f883a 	mov	r7,r19
 4002cb8:	308c703a 	and	r6,r6,r2
 4002cbc:	003fc706 	br	4002bdc <__alt_data_end+0xfc002bdc>
 4002cc0:	008000c4 	movi	r2,3
 4002cc4:	b8802d26 	beq	r23,r2,4002d7c <__divsf3+0x428>
 4002cc8:	00c00044 	movi	r3,1
 4002ccc:	b005883a 	mov	r2,r22
 4002cd0:	b8ffdd1e 	bne	r23,r3,4002c48 <__alt_data_end+0xfc002c48>
 4002cd4:	11c0004c 	andi	r7,r2,1
 4002cd8:	0009883a 	mov	r4,zero
 4002cdc:	000d883a 	mov	r6,zero
 4002ce0:	003f6c06 	br	4002a94 <__alt_data_end+0xfc002a94>
 4002ce4:	9023883a 	mov	r17,r18
 4002ce8:	003f6406 	br	4002a7c <__alt_data_end+0xfc002a7c>
 4002cec:	1c47c83a 	sub	r3,r3,r17
 4002cf0:	01000684 	movi	r4,26
 4002cf4:	01400044 	movi	r5,1
 4002cf8:	003fc806 	br	4002c1c <__alt_data_end+0xfc002c1c>
 4002cfc:	9080102c 	andhi	r2,r18,64
 4002d00:	103fe926 	beq	r2,zero,4002ca8 <__alt_data_end+0xfc002ca8>
 4002d04:	0023883a 	mov	r17,zero
 4002d08:	00802034 	movhi	r2,128
 4002d0c:	89801034 	orhi	r6,r17,64
 4002d10:	10bfffc4 	addi	r2,r2,-1
 4002d14:	a80f883a 	mov	r7,r21
 4002d18:	308c703a 	and	r6,r6,r2
 4002d1c:	003faf06 	br	4002bdc <__alt_data_end+0xfc002bdc>
 4002d20:	01c00804 	movi	r7,32
 4002d24:	390fc83a 	sub	r7,r7,r4
 4002d28:	89ce983a 	sll	r7,r17,r7
 4002d2c:	890ad83a 	srl	r5,r17,r4
 4002d30:	380ec03a 	cmpne	r7,r7,zero
 4002d34:	29cab03a 	or	r5,r5,r7
 4002d38:	28c001cc 	andi	r3,r5,7
 4002d3c:	18000426 	beq	r3,zero,4002d50 <__divsf3+0x3fc>
 4002d40:	28c003cc 	andi	r3,r5,15
 4002d44:	01000104 	movi	r4,4
 4002d48:	19000126 	beq	r3,r4,4002d50 <__divsf3+0x3fc>
 4002d4c:	290b883a 	add	r5,r5,r4
 4002d50:	28c1002c 	andhi	r3,r5,1024
 4002d54:	18000426 	beq	r3,zero,4002d68 <__divsf3+0x414>
 4002d58:	11c0004c 	andi	r7,r2,1
 4002d5c:	01000044 	movi	r4,1
 4002d60:	000d883a 	mov	r6,zero
 4002d64:	003f4b06 	br	4002a94 <__alt_data_end+0xfc002a94>
 4002d68:	280a91ba 	slli	r5,r5,6
 4002d6c:	11c0004c 	andi	r7,r2,1
 4002d70:	0009883a 	mov	r4,zero
 4002d74:	280cd27a 	srli	r6,r5,9
 4002d78:	003f4606 	br	4002a94 <__alt_data_end+0xfc002a94>
 4002d7c:	00802034 	movhi	r2,128
 4002d80:	89801034 	orhi	r6,r17,64
 4002d84:	10bfffc4 	addi	r2,r2,-1
 4002d88:	b00f883a 	mov	r7,r22
 4002d8c:	308c703a 	and	r6,r6,r2
 4002d90:	003f9206 	br	4002bdc <__alt_data_end+0xfc002bdc>

04002d94 <__gesf2>:
 4002d94:	2004d5fa 	srli	r2,r4,23
 4002d98:	2806d5fa 	srli	r3,r5,23
 4002d9c:	01802034 	movhi	r6,128
 4002da0:	31bfffc4 	addi	r6,r6,-1
 4002da4:	10803fcc 	andi	r2,r2,255
 4002da8:	01c03fc4 	movi	r7,255
 4002dac:	3110703a 	and	r8,r6,r4
 4002db0:	18c03fcc 	andi	r3,r3,255
 4002db4:	314c703a 	and	r6,r6,r5
 4002db8:	2008d7fa 	srli	r4,r4,31
 4002dbc:	280ad7fa 	srli	r5,r5,31
 4002dc0:	11c01926 	beq	r2,r7,4002e28 <__gesf2+0x94>
 4002dc4:	01c03fc4 	movi	r7,255
 4002dc8:	19c00f26 	beq	r3,r7,4002e08 <__gesf2+0x74>
 4002dcc:	1000061e 	bne	r2,zero,4002de8 <__gesf2+0x54>
 4002dd0:	400f003a 	cmpeq	r7,r8,zero
 4002dd4:	1800071e 	bne	r3,zero,4002df4 <__gesf2+0x60>
 4002dd8:	3000061e 	bne	r6,zero,4002df4 <__gesf2+0x60>
 4002ddc:	0005883a 	mov	r2,zero
 4002de0:	40000e1e 	bne	r8,zero,4002e1c <__gesf2+0x88>
 4002de4:	f800283a 	ret
 4002de8:	18000a1e 	bne	r3,zero,4002e14 <__gesf2+0x80>
 4002dec:	30000b26 	beq	r6,zero,4002e1c <__gesf2+0x88>
 4002df0:	000f883a 	mov	r7,zero
 4002df4:	29403fcc 	andi	r5,r5,255
 4002df8:	38000726 	beq	r7,zero,4002e18 <__gesf2+0x84>
 4002dfc:	28000826 	beq	r5,zero,4002e20 <__gesf2+0x8c>
 4002e00:	00800044 	movi	r2,1
 4002e04:	f800283a 	ret
 4002e08:	303ff026 	beq	r6,zero,4002dcc <__alt_data_end+0xfc002dcc>
 4002e0c:	00bfff84 	movi	r2,-2
 4002e10:	f800283a 	ret
 4002e14:	29403fcc 	andi	r5,r5,255
 4002e18:	21400526 	beq	r4,r5,4002e30 <__gesf2+0x9c>
 4002e1c:	203ff826 	beq	r4,zero,4002e00 <__alt_data_end+0xfc002e00>
 4002e20:	00bfffc4 	movi	r2,-1
 4002e24:	f800283a 	ret
 4002e28:	403fe626 	beq	r8,zero,4002dc4 <__alt_data_end+0xfc002dc4>
 4002e2c:	003ff706 	br	4002e0c <__alt_data_end+0xfc002e0c>
 4002e30:	18bffa16 	blt	r3,r2,4002e1c <__alt_data_end+0xfc002e1c>
 4002e34:	10c00216 	blt	r2,r3,4002e40 <__gesf2+0xac>
 4002e38:	323ff836 	bltu	r6,r8,4002e1c <__alt_data_end+0xfc002e1c>
 4002e3c:	4180022e 	bgeu	r8,r6,4002e48 <__gesf2+0xb4>
 4002e40:	203fef1e 	bne	r4,zero,4002e00 <__alt_data_end+0xfc002e00>
 4002e44:	003ff606 	br	4002e20 <__alt_data_end+0xfc002e20>
 4002e48:	0005883a 	mov	r2,zero
 4002e4c:	f800283a 	ret

04002e50 <__lesf2>:
 4002e50:	2004d5fa 	srli	r2,r4,23
 4002e54:	280cd5fa 	srli	r6,r5,23
 4002e58:	00c02034 	movhi	r3,128
 4002e5c:	18ffffc4 	addi	r3,r3,-1
 4002e60:	10803fcc 	andi	r2,r2,255
 4002e64:	01c03fc4 	movi	r7,255
 4002e68:	1910703a 	and	r8,r3,r4
 4002e6c:	31803fcc 	andi	r6,r6,255
 4002e70:	1946703a 	and	r3,r3,r5
 4002e74:	2008d7fa 	srli	r4,r4,31
 4002e78:	280ad7fa 	srli	r5,r5,31
 4002e7c:	11c01b26 	beq	r2,r7,4002eec <__lesf2+0x9c>
 4002e80:	01c03fc4 	movi	r7,255
 4002e84:	31c01126 	beq	r6,r7,4002ecc <__lesf2+0x7c>
 4002e88:	1000071e 	bne	r2,zero,4002ea8 <__lesf2+0x58>
 4002e8c:	400f003a 	cmpeq	r7,r8,zero
 4002e90:	21003fcc 	andi	r4,r4,255
 4002e94:	3000081e 	bne	r6,zero,4002eb8 <__lesf2+0x68>
 4002e98:	1800071e 	bne	r3,zero,4002eb8 <__lesf2+0x68>
 4002e9c:	0005883a 	mov	r2,zero
 4002ea0:	40000f1e 	bne	r8,zero,4002ee0 <__lesf2+0x90>
 4002ea4:	f800283a 	ret
 4002ea8:	21003fcc 	andi	r4,r4,255
 4002eac:	30000a1e 	bne	r6,zero,4002ed8 <__lesf2+0x88>
 4002eb0:	18000b26 	beq	r3,zero,4002ee0 <__lesf2+0x90>
 4002eb4:	000f883a 	mov	r7,zero
 4002eb8:	29403fcc 	andi	r5,r5,255
 4002ebc:	38000726 	beq	r7,zero,4002edc <__lesf2+0x8c>
 4002ec0:	28000826 	beq	r5,zero,4002ee4 <__lesf2+0x94>
 4002ec4:	00800044 	movi	r2,1
 4002ec8:	f800283a 	ret
 4002ecc:	183fee26 	beq	r3,zero,4002e88 <__alt_data_end+0xfc002e88>
 4002ed0:	00800084 	movi	r2,2
 4002ed4:	f800283a 	ret
 4002ed8:	29403fcc 	andi	r5,r5,255
 4002edc:	21400626 	beq	r4,r5,4002ef8 <__lesf2+0xa8>
 4002ee0:	203ff826 	beq	r4,zero,4002ec4 <__alt_data_end+0xfc002ec4>
 4002ee4:	00bfffc4 	movi	r2,-1
 4002ee8:	f800283a 	ret
 4002eec:	403fe426 	beq	r8,zero,4002e80 <__alt_data_end+0xfc002e80>
 4002ef0:	00800084 	movi	r2,2
 4002ef4:	f800283a 	ret
 4002ef8:	30bff916 	blt	r6,r2,4002ee0 <__alt_data_end+0xfc002ee0>
 4002efc:	11800216 	blt	r2,r6,4002f08 <__lesf2+0xb8>
 4002f00:	1a3ff736 	bltu	r3,r8,4002ee0 <__alt_data_end+0xfc002ee0>
 4002f04:	40c0022e 	bgeu	r8,r3,4002f10 <__lesf2+0xc0>
 4002f08:	203fee1e 	bne	r4,zero,4002ec4 <__alt_data_end+0xfc002ec4>
 4002f0c:	003ff506 	br	4002ee4 <__alt_data_end+0xfc002ee4>
 4002f10:	0005883a 	mov	r2,zero
 4002f14:	f800283a 	ret

04002f18 <__mulsf3>:
 4002f18:	defff504 	addi	sp,sp,-44
 4002f1c:	dc000115 	stw	r16,4(sp)
 4002f20:	2020d5fa 	srli	r16,r4,23
 4002f24:	dd400615 	stw	r21,24(sp)
 4002f28:	202ad7fa 	srli	r21,r4,31
 4002f2c:	dc800315 	stw	r18,12(sp)
 4002f30:	04802034 	movhi	r18,128
 4002f34:	df000915 	stw	fp,36(sp)
 4002f38:	dd000515 	stw	r20,20(sp)
 4002f3c:	94bfffc4 	addi	r18,r18,-1
 4002f40:	dfc00a15 	stw	ra,40(sp)
 4002f44:	ddc00815 	stw	r23,32(sp)
 4002f48:	dd800715 	stw	r22,28(sp)
 4002f4c:	dcc00415 	stw	r19,16(sp)
 4002f50:	dc400215 	stw	r17,8(sp)
 4002f54:	84003fcc 	andi	r16,r16,255
 4002f58:	9124703a 	and	r18,r18,r4
 4002f5c:	a829883a 	mov	r20,r21
 4002f60:	af003fcc 	andi	fp,r21,255
 4002f64:	80005426 	beq	r16,zero,40030b8 <__mulsf3+0x1a0>
 4002f68:	00803fc4 	movi	r2,255
 4002f6c:	80802f26 	beq	r16,r2,400302c <__mulsf3+0x114>
 4002f70:	91002034 	orhi	r4,r18,128
 4002f74:	202490fa 	slli	r18,r4,3
 4002f78:	843fe044 	addi	r16,r16,-127
 4002f7c:	0023883a 	mov	r17,zero
 4002f80:	002f883a 	mov	r23,zero
 4002f84:	2804d5fa 	srli	r2,r5,23
 4002f88:	282cd7fa 	srli	r22,r5,31
 4002f8c:	01002034 	movhi	r4,128
 4002f90:	213fffc4 	addi	r4,r4,-1
 4002f94:	10803fcc 	andi	r2,r2,255
 4002f98:	2166703a 	and	r19,r4,r5
 4002f9c:	b1803fcc 	andi	r6,r22,255
 4002fa0:	10004c26 	beq	r2,zero,40030d4 <__mulsf3+0x1bc>
 4002fa4:	00c03fc4 	movi	r3,255
 4002fa8:	10c04726 	beq	r2,r3,40030c8 <__mulsf3+0x1b0>
 4002fac:	99002034 	orhi	r4,r19,128
 4002fb0:	202690fa 	slli	r19,r4,3
 4002fb4:	10bfe044 	addi	r2,r2,-127
 4002fb8:	0007883a 	mov	r3,zero
 4002fbc:	80a1883a 	add	r16,r16,r2
 4002fc0:	010003c4 	movi	r4,15
 4002fc4:	1c44b03a 	or	r2,r3,r17
 4002fc8:	b56af03a 	xor	r21,r22,r21
 4002fcc:	81c00044 	addi	r7,r16,1
 4002fd0:	20806b36 	bltu	r4,r2,4003180 <__mulsf3+0x268>
 4002fd4:	100490ba 	slli	r2,r2,2
 4002fd8:	01010034 	movhi	r4,1024
 4002fdc:	210bfb04 	addi	r4,r4,12268
 4002fe0:	1105883a 	add	r2,r2,r4
 4002fe4:	10800017 	ldw	r2,0(r2)
 4002fe8:	1000683a 	jmp	r2
 4002fec:	04003180 	call	400318 <__alt_mem_sdram-0x3bffce8>
 4002ff0:	04003040 	call	400304 <__alt_mem_sdram-0x3bffcfc>
 4002ff4:	04003040 	call	400304 <__alt_mem_sdram-0x3bffcfc>
 4002ff8:	0400303c 	xorhi	r16,zero,192
 4002ffc:	04003164 	muli	r16,zero,197
 4003000:	04003164 	muli	r16,zero,197
 4003004:	04003150 	cmplti	r16,zero,197
 4003008:	0400303c 	xorhi	r16,zero,192
 400300c:	04003164 	muli	r16,zero,197
 4003010:	04003150 	cmplti	r16,zero,197
 4003014:	04003164 	muli	r16,zero,197
 4003018:	0400303c 	xorhi	r16,zero,192
 400301c:	04003170 	cmpltui	r16,zero,197
 4003020:	04003170 	cmpltui	r16,zero,197
 4003024:	04003170 	cmpltui	r16,zero,197
 4003028:	04003280 	call	400328 <__alt_mem_sdram-0x3bffcd8>
 400302c:	90003b1e 	bne	r18,zero,400311c <__mulsf3+0x204>
 4003030:	04400204 	movi	r17,8
 4003034:	05c00084 	movi	r23,2
 4003038:	003fd206 	br	4002f84 <__alt_data_end+0xfc002f84>
 400303c:	302b883a 	mov	r21,r6
 4003040:	00800084 	movi	r2,2
 4003044:	18802626 	beq	r3,r2,40030e0 <__mulsf3+0x1c8>
 4003048:	008000c4 	movi	r2,3
 400304c:	1880b826 	beq	r3,r2,4003330 <__mulsf3+0x418>
 4003050:	00800044 	movi	r2,1
 4003054:	1880af1e 	bne	r3,r2,4003314 <__mulsf3+0x3fc>
 4003058:	a829883a 	mov	r20,r21
 400305c:	0007883a 	mov	r3,zero
 4003060:	0009883a 	mov	r4,zero
 4003064:	18803fcc 	andi	r2,r3,255
 4003068:	100695fa 	slli	r3,r2,23
 400306c:	a0803fcc 	andi	r2,r20,255
 4003070:	100a97fa 	slli	r5,r2,31
 4003074:	00802034 	movhi	r2,128
 4003078:	10bfffc4 	addi	r2,r2,-1
 400307c:	2084703a 	and	r2,r4,r2
 4003080:	10c4b03a 	or	r2,r2,r3
 4003084:	1144b03a 	or	r2,r2,r5
 4003088:	dfc00a17 	ldw	ra,40(sp)
 400308c:	df000917 	ldw	fp,36(sp)
 4003090:	ddc00817 	ldw	r23,32(sp)
 4003094:	dd800717 	ldw	r22,28(sp)
 4003098:	dd400617 	ldw	r21,24(sp)
 400309c:	dd000517 	ldw	r20,20(sp)
 40030a0:	dcc00417 	ldw	r19,16(sp)
 40030a4:	dc800317 	ldw	r18,12(sp)
 40030a8:	dc400217 	ldw	r17,8(sp)
 40030ac:	dc000117 	ldw	r16,4(sp)
 40030b0:	dec00b04 	addi	sp,sp,44
 40030b4:	f800283a 	ret
 40030b8:	90000d1e 	bne	r18,zero,40030f0 <__mulsf3+0x1d8>
 40030bc:	04400104 	movi	r17,4
 40030c0:	05c00044 	movi	r23,1
 40030c4:	003faf06 	br	4002f84 <__alt_data_end+0xfc002f84>
 40030c8:	9806c03a 	cmpne	r3,r19,zero
 40030cc:	18c00084 	addi	r3,r3,2
 40030d0:	003fba06 	br	4002fbc <__alt_data_end+0xfc002fbc>
 40030d4:	9800141e 	bne	r19,zero,4003128 <__mulsf3+0x210>
 40030d8:	00c00044 	movi	r3,1
 40030dc:	003fb706 	br	4002fbc <__alt_data_end+0xfc002fbc>
 40030e0:	a829883a 	mov	r20,r21
 40030e4:	00ffffc4 	movi	r3,-1
 40030e8:	0009883a 	mov	r4,zero
 40030ec:	003fdd06 	br	4003064 <__alt_data_end+0xfc003064>
 40030f0:	9009883a 	mov	r4,r18
 40030f4:	d9400015 	stw	r5,0(sp)
 40030f8:	40063c00 	call	40063c0 <__clzsi2>
 40030fc:	10fffec4 	addi	r3,r2,-5
 4003100:	10801d84 	addi	r2,r2,118
 4003104:	90e4983a 	sll	r18,r18,r3
 4003108:	00a1c83a 	sub	r16,zero,r2
 400310c:	0023883a 	mov	r17,zero
 4003110:	002f883a 	mov	r23,zero
 4003114:	d9400017 	ldw	r5,0(sp)
 4003118:	003f9a06 	br	4002f84 <__alt_data_end+0xfc002f84>
 400311c:	04400304 	movi	r17,12
 4003120:	05c000c4 	movi	r23,3
 4003124:	003f9706 	br	4002f84 <__alt_data_end+0xfc002f84>
 4003128:	9809883a 	mov	r4,r19
 400312c:	d9800015 	stw	r6,0(sp)
 4003130:	40063c00 	call	40063c0 <__clzsi2>
 4003134:	10fffec4 	addi	r3,r2,-5
 4003138:	10801d84 	addi	r2,r2,118
 400313c:	98e6983a 	sll	r19,r19,r3
 4003140:	0085c83a 	sub	r2,zero,r2
 4003144:	0007883a 	mov	r3,zero
 4003148:	d9800017 	ldw	r6,0(sp)
 400314c:	003f9b06 	br	4002fbc <__alt_data_end+0xfc002fbc>
 4003150:	01002034 	movhi	r4,128
 4003154:	0029883a 	mov	r20,zero
 4003158:	213fffc4 	addi	r4,r4,-1
 400315c:	00ffffc4 	movi	r3,-1
 4003160:	003fc006 	br	4003064 <__alt_data_end+0xfc003064>
 4003164:	9027883a 	mov	r19,r18
 4003168:	b807883a 	mov	r3,r23
 400316c:	003fb406 	br	4003040 <__alt_data_end+0xfc003040>
 4003170:	9027883a 	mov	r19,r18
 4003174:	e02b883a 	mov	r21,fp
 4003178:	b807883a 	mov	r3,r23
 400317c:	003fb006 	br	4003040 <__alt_data_end+0xfc003040>
 4003180:	9028d43a 	srli	r20,r18,16
 4003184:	982cd43a 	srli	r22,r19,16
 4003188:	94bfffcc 	andi	r18,r18,65535
 400318c:	9cffffcc 	andi	r19,r19,65535
 4003190:	980b883a 	mov	r5,r19
 4003194:	9009883a 	mov	r4,r18
 4003198:	d9c00015 	stw	r7,0(sp)
 400319c:	40024640 	call	4002464 <__mulsi3>
 40031a0:	a00b883a 	mov	r5,r20
 40031a4:	9809883a 	mov	r4,r19
 40031a8:	1023883a 	mov	r17,r2
 40031ac:	40024640 	call	4002464 <__mulsi3>
 40031b0:	a009883a 	mov	r4,r20
 40031b4:	b00b883a 	mov	r5,r22
 40031b8:	1027883a 	mov	r19,r2
 40031bc:	40024640 	call	4002464 <__mulsi3>
 40031c0:	b00b883a 	mov	r5,r22
 40031c4:	9009883a 	mov	r4,r18
 40031c8:	1029883a 	mov	r20,r2
 40031cc:	40024640 	call	4002464 <__mulsi3>
 40031d0:	8806d43a 	srli	r3,r17,16
 40031d4:	14c5883a 	add	r2,r2,r19
 40031d8:	d9c00017 	ldw	r7,0(sp)
 40031dc:	1885883a 	add	r2,r3,r2
 40031e0:	14c0022e 	bgeu	r2,r19,40031ec <__mulsf3+0x2d4>
 40031e4:	00c00074 	movhi	r3,1
 40031e8:	a0e9883a 	add	r20,r20,r3
 40031ec:	1026943a 	slli	r19,r2,16
 40031f0:	8c7fffcc 	andi	r17,r17,65535
 40031f4:	1004d43a 	srli	r2,r2,16
 40031f8:	9c63883a 	add	r17,r19,r17
 40031fc:	882691ba 	slli	r19,r17,6
 4003200:	1505883a 	add	r2,r2,r20
 4003204:	8822d6ba 	srli	r17,r17,26
 4003208:	100891ba 	slli	r4,r2,6
 400320c:	9826c03a 	cmpne	r19,r19,zero
 4003210:	9c62b03a 	or	r17,r19,r17
 4003214:	8926b03a 	or	r19,r17,r4
 4003218:	9882002c 	andhi	r2,r19,2048
 400321c:	10000426 	beq	r2,zero,4003230 <__mulsf3+0x318>
 4003220:	9804d07a 	srli	r2,r19,1
 4003224:	9900004c 	andi	r4,r19,1
 4003228:	3821883a 	mov	r16,r7
 400322c:	1126b03a 	or	r19,r2,r4
 4003230:	80c01fc4 	addi	r3,r16,127
 4003234:	00c0210e 	bge	zero,r3,40032bc <__mulsf3+0x3a4>
 4003238:	988001cc 	andi	r2,r19,7
 400323c:	10000426 	beq	r2,zero,4003250 <__mulsf3+0x338>
 4003240:	988003cc 	andi	r2,r19,15
 4003244:	01000104 	movi	r4,4
 4003248:	11000126 	beq	r2,r4,4003250 <__mulsf3+0x338>
 400324c:	9927883a 	add	r19,r19,r4
 4003250:	9882002c 	andhi	r2,r19,2048
 4003254:	10000426 	beq	r2,zero,4003268 <__mulsf3+0x350>
 4003258:	00be0034 	movhi	r2,63488
 400325c:	10bfffc4 	addi	r2,r2,-1
 4003260:	80c02004 	addi	r3,r16,128
 4003264:	98a6703a 	and	r19,r19,r2
 4003268:	00803f84 	movi	r2,254
 400326c:	10ff9c16 	blt	r2,r3,40030e0 <__alt_data_end+0xfc0030e0>
 4003270:	980891ba 	slli	r4,r19,6
 4003274:	a829883a 	mov	r20,r21
 4003278:	2008d27a 	srli	r4,r4,9
 400327c:	003f7906 	br	4003064 <__alt_data_end+0xfc003064>
 4003280:	9080102c 	andhi	r2,r18,64
 4003284:	10000826 	beq	r2,zero,40032a8 <__mulsf3+0x390>
 4003288:	9880102c 	andhi	r2,r19,64
 400328c:	1000061e 	bne	r2,zero,40032a8 <__mulsf3+0x390>
 4003290:	00802034 	movhi	r2,128
 4003294:	99001034 	orhi	r4,r19,64
 4003298:	10bfffc4 	addi	r2,r2,-1
 400329c:	b029883a 	mov	r20,r22
 40032a0:	2088703a 	and	r4,r4,r2
 40032a4:	003fad06 	br	400315c <__alt_data_end+0xfc00315c>
 40032a8:	00802034 	movhi	r2,128
 40032ac:	91001034 	orhi	r4,r18,64
 40032b0:	10bfffc4 	addi	r2,r2,-1
 40032b4:	2088703a 	and	r4,r4,r2
 40032b8:	003fa806 	br	400315c <__alt_data_end+0xfc00315c>
 40032bc:	00800044 	movi	r2,1
 40032c0:	10c7c83a 	sub	r3,r2,r3
 40032c4:	008006c4 	movi	r2,27
 40032c8:	10ff6316 	blt	r2,r3,4003058 <__alt_data_end+0xfc003058>
 40032cc:	00800804 	movi	r2,32
 40032d0:	10c5c83a 	sub	r2,r2,r3
 40032d4:	9884983a 	sll	r2,r19,r2
 40032d8:	98c6d83a 	srl	r3,r19,r3
 40032dc:	1004c03a 	cmpne	r2,r2,zero
 40032e0:	1884b03a 	or	r2,r3,r2
 40032e4:	10c001cc 	andi	r3,r2,7
 40032e8:	18000426 	beq	r3,zero,40032fc <__mulsf3+0x3e4>
 40032ec:	10c003cc 	andi	r3,r2,15
 40032f0:	01000104 	movi	r4,4
 40032f4:	19000126 	beq	r3,r4,40032fc <__mulsf3+0x3e4>
 40032f8:	1105883a 	add	r2,r2,r4
 40032fc:	10c1002c 	andhi	r3,r2,1024
 4003300:	18000626 	beq	r3,zero,400331c <__mulsf3+0x404>
 4003304:	a829883a 	mov	r20,r21
 4003308:	00c00044 	movi	r3,1
 400330c:	0009883a 	mov	r4,zero
 4003310:	003f5406 	br	4003064 <__alt_data_end+0xfc003064>
 4003314:	3821883a 	mov	r16,r7
 4003318:	003fc506 	br	4003230 <__alt_data_end+0xfc003230>
 400331c:	100491ba 	slli	r2,r2,6
 4003320:	a829883a 	mov	r20,r21
 4003324:	0007883a 	mov	r3,zero
 4003328:	1008d27a 	srli	r4,r2,9
 400332c:	003f4d06 	br	4003064 <__alt_data_end+0xfc003064>
 4003330:	00802034 	movhi	r2,128
 4003334:	99001034 	orhi	r4,r19,64
 4003338:	10bfffc4 	addi	r2,r2,-1
 400333c:	a829883a 	mov	r20,r21
 4003340:	2088703a 	and	r4,r4,r2
 4003344:	003f8506 	br	400315c <__alt_data_end+0xfc00315c>

04003348 <__subsf3>:
 4003348:	defffc04 	addi	sp,sp,-16
 400334c:	280cd5fa 	srli	r6,r5,23
 4003350:	dc000015 	stw	r16,0(sp)
 4003354:	01c02034 	movhi	r7,128
 4003358:	2020d5fa 	srli	r16,r4,23
 400335c:	39ffffc4 	addi	r7,r7,-1
 4003360:	3906703a 	and	r3,r7,r4
 4003364:	dc400115 	stw	r17,4(sp)
 4003368:	394e703a 	and	r7,r7,r5
 400336c:	2022d7fa 	srli	r17,r4,31
 4003370:	dfc00315 	stw	ra,12(sp)
 4003374:	dc800215 	stw	r18,8(sp)
 4003378:	31803fcc 	andi	r6,r6,255
 400337c:	01003fc4 	movi	r4,255
 4003380:	84003fcc 	andi	r16,r16,255
 4003384:	180690fa 	slli	r3,r3,3
 4003388:	2804d7fa 	srli	r2,r5,31
 400338c:	380e90fa 	slli	r7,r7,3
 4003390:	31006d26 	beq	r6,r4,4003548 <__subsf3+0x200>
 4003394:	1080005c 	xori	r2,r2,1
 4003398:	8189c83a 	sub	r4,r16,r6
 400339c:	14404f26 	beq	r2,r17,40034dc <__subsf3+0x194>
 40033a0:	0100770e 	bge	zero,r4,4003580 <__subsf3+0x238>
 40033a4:	30001e1e 	bne	r6,zero,4003420 <__subsf3+0xd8>
 40033a8:	38006a1e 	bne	r7,zero,4003554 <__subsf3+0x20c>
 40033ac:	188001cc 	andi	r2,r3,7
 40033b0:	10000426 	beq	r2,zero,40033c4 <__subsf3+0x7c>
 40033b4:	188003cc 	andi	r2,r3,15
 40033b8:	01000104 	movi	r4,4
 40033bc:	11000126 	beq	r2,r4,40033c4 <__subsf3+0x7c>
 40033c0:	1907883a 	add	r3,r3,r4
 40033c4:	1881002c 	andhi	r2,r3,1024
 40033c8:	10003926 	beq	r2,zero,40034b0 <__subsf3+0x168>
 40033cc:	84000044 	addi	r16,r16,1
 40033d0:	00803fc4 	movi	r2,255
 40033d4:	80807526 	beq	r16,r2,40035ac <__subsf3+0x264>
 40033d8:	180691ba 	slli	r3,r3,6
 40033dc:	8880004c 	andi	r2,r17,1
 40033e0:	180ad27a 	srli	r5,r3,9
 40033e4:	84003fcc 	andi	r16,r16,255
 40033e8:	800695fa 	slli	r3,r16,23
 40033ec:	10803fcc 	andi	r2,r2,255
 40033f0:	01002034 	movhi	r4,128
 40033f4:	213fffc4 	addi	r4,r4,-1
 40033f8:	100497fa 	slli	r2,r2,31
 40033fc:	2920703a 	and	r16,r5,r4
 4003400:	80e0b03a 	or	r16,r16,r3
 4003404:	8084b03a 	or	r2,r16,r2
 4003408:	dfc00317 	ldw	ra,12(sp)
 400340c:	dc800217 	ldw	r18,8(sp)
 4003410:	dc400117 	ldw	r17,4(sp)
 4003414:	dc000017 	ldw	r16,0(sp)
 4003418:	dec00404 	addi	sp,sp,16
 400341c:	f800283a 	ret
 4003420:	00803fc4 	movi	r2,255
 4003424:	80bfe126 	beq	r16,r2,40033ac <__alt_data_end+0xfc0033ac>
 4003428:	39c10034 	orhi	r7,r7,1024
 400342c:	008006c4 	movi	r2,27
 4003430:	11007416 	blt	r2,r4,4003604 <__subsf3+0x2bc>
 4003434:	00800804 	movi	r2,32
 4003438:	1105c83a 	sub	r2,r2,r4
 400343c:	3884983a 	sll	r2,r7,r2
 4003440:	390ed83a 	srl	r7,r7,r4
 4003444:	1008c03a 	cmpne	r4,r2,zero
 4003448:	390eb03a 	or	r7,r7,r4
 400344c:	19c7c83a 	sub	r3,r3,r7
 4003450:	1881002c 	andhi	r2,r3,1024
 4003454:	10001426 	beq	r2,zero,40034a8 <__subsf3+0x160>
 4003458:	04810034 	movhi	r18,1024
 400345c:	94bfffc4 	addi	r18,r18,-1
 4003460:	1ca4703a 	and	r18,r3,r18
 4003464:	9009883a 	mov	r4,r18
 4003468:	40063c00 	call	40063c0 <__clzsi2>
 400346c:	10bffec4 	addi	r2,r2,-5
 4003470:	90a4983a 	sll	r18,r18,r2
 4003474:	14005116 	blt	r2,r16,40035bc <__subsf3+0x274>
 4003478:	1405c83a 	sub	r2,r2,r16
 400347c:	10c00044 	addi	r3,r2,1
 4003480:	00800804 	movi	r2,32
 4003484:	10c5c83a 	sub	r2,r2,r3
 4003488:	9084983a 	sll	r2,r18,r2
 400348c:	90e4d83a 	srl	r18,r18,r3
 4003490:	0021883a 	mov	r16,zero
 4003494:	1006c03a 	cmpne	r3,r2,zero
 4003498:	90c6b03a 	or	r3,r18,r3
 400349c:	003fc306 	br	40033ac <__alt_data_end+0xfc0033ac>
 40034a0:	2000e026 	beq	r4,zero,4003824 <__subsf3+0x4dc>
 40034a4:	2007883a 	mov	r3,r4
 40034a8:	188001cc 	andi	r2,r3,7
 40034ac:	103fc11e 	bne	r2,zero,40033b4 <__alt_data_end+0xfc0033b4>
 40034b0:	180ad0fa 	srli	r5,r3,3
 40034b4:	00c03fc4 	movi	r3,255
 40034b8:	8880004c 	andi	r2,r17,1
 40034bc:	80c0031e 	bne	r16,r3,40034cc <__subsf3+0x184>
 40034c0:	28006d26 	beq	r5,zero,4003678 <__subsf3+0x330>
 40034c4:	29401034 	orhi	r5,r5,64
 40034c8:	043fffc4 	movi	r16,-1
 40034cc:	00c02034 	movhi	r3,128
 40034d0:	18ffffc4 	addi	r3,r3,-1
 40034d4:	28ca703a 	and	r5,r5,r3
 40034d8:	003fc206 	br	40033e4 <__alt_data_end+0xfc0033e4>
 40034dc:	01003c0e 	bge	zero,r4,40035d0 <__subsf3+0x288>
 40034e0:	30002126 	beq	r6,zero,4003568 <__subsf3+0x220>
 40034e4:	01403fc4 	movi	r5,255
 40034e8:	817fb026 	beq	r16,r5,40033ac <__alt_data_end+0xfc0033ac>
 40034ec:	39c10034 	orhi	r7,r7,1024
 40034f0:	014006c4 	movi	r5,27
 40034f4:	29007416 	blt	r5,r4,40036c8 <__subsf3+0x380>
 40034f8:	01400804 	movi	r5,32
 40034fc:	290bc83a 	sub	r5,r5,r4
 4003500:	394a983a 	sll	r5,r7,r5
 4003504:	390ed83a 	srl	r7,r7,r4
 4003508:	2808c03a 	cmpne	r4,r5,zero
 400350c:	390eb03a 	or	r7,r7,r4
 4003510:	19c7883a 	add	r3,r3,r7
 4003514:	1901002c 	andhi	r4,r3,1024
 4003518:	20003826 	beq	r4,zero,40035fc <__subsf3+0x2b4>
 400351c:	84000044 	addi	r16,r16,1
 4003520:	01003fc4 	movi	r4,255
 4003524:	81005426 	beq	r16,r4,4003678 <__subsf3+0x330>
 4003528:	1023883a 	mov	r17,r2
 400352c:	00bf0034 	movhi	r2,64512
 4003530:	10bfffc4 	addi	r2,r2,-1
 4003534:	1900004c 	andi	r4,r3,1
 4003538:	1886703a 	and	r3,r3,r2
 400353c:	1806d07a 	srli	r3,r3,1
 4003540:	1906b03a 	or	r3,r3,r4
 4003544:	003f9906 	br	40033ac <__alt_data_end+0xfc0033ac>
 4003548:	383f9226 	beq	r7,zero,4003394 <__alt_data_end+0xfc003394>
 400354c:	10803fcc 	andi	r2,r2,255
 4003550:	003f9106 	br	4003398 <__alt_data_end+0xfc003398>
 4003554:	213fffc4 	addi	r4,r4,-1
 4003558:	203fbc26 	beq	r4,zero,400344c <__alt_data_end+0xfc00344c>
 400355c:	00803fc4 	movi	r2,255
 4003560:	80bfb21e 	bne	r16,r2,400342c <__alt_data_end+0xfc00342c>
 4003564:	003f9106 	br	40033ac <__alt_data_end+0xfc0033ac>
 4003568:	383f9026 	beq	r7,zero,40033ac <__alt_data_end+0xfc0033ac>
 400356c:	213fffc4 	addi	r4,r4,-1
 4003570:	203fe726 	beq	r4,zero,4003510 <__alt_data_end+0xfc003510>
 4003574:	01403fc4 	movi	r5,255
 4003578:	817fdd1e 	bne	r16,r5,40034f0 <__alt_data_end+0xfc0034f0>
 400357c:	003f8b06 	br	40033ac <__alt_data_end+0xfc0033ac>
 4003580:	2000221e 	bne	r4,zero,400360c <__subsf3+0x2c4>
 4003584:	81000044 	addi	r4,r16,1
 4003588:	21003fcc 	andi	r4,r4,255
 400358c:	01400044 	movi	r5,1
 4003590:	2900470e 	bge	r5,r4,40036b0 <__subsf3+0x368>
 4003594:	19e5c83a 	sub	r18,r3,r7
 4003598:	9141002c 	andhi	r5,r18,1024
 400359c:	28002d26 	beq	r5,zero,4003654 <__subsf3+0x30c>
 40035a0:	38e5c83a 	sub	r18,r7,r3
 40035a4:	1023883a 	mov	r17,r2
 40035a8:	003fae06 	br	4003464 <__alt_data_end+0xfc003464>
 40035ac:	8880004c 	andi	r2,r17,1
 40035b0:	043fffc4 	movi	r16,-1
 40035b4:	000b883a 	mov	r5,zero
 40035b8:	003f8a06 	br	40033e4 <__alt_data_end+0xfc0033e4>
 40035bc:	00ff0034 	movhi	r3,64512
 40035c0:	18ffffc4 	addi	r3,r3,-1
 40035c4:	80a1c83a 	sub	r16,r16,r2
 40035c8:	90c6703a 	and	r3,r18,r3
 40035cc:	003f7706 	br	40033ac <__alt_data_end+0xfc0033ac>
 40035d0:	2000431e 	bne	r4,zero,40036e0 <__subsf3+0x398>
 40035d4:	81000044 	addi	r4,r16,1
 40035d8:	21803fcc 	andi	r6,r4,255
 40035dc:	01400044 	movi	r5,1
 40035e0:	2980280e 	bge	r5,r6,4003684 <__subsf3+0x33c>
 40035e4:	01403fc4 	movi	r5,255
 40035e8:	21402326 	beq	r4,r5,4003678 <__subsf3+0x330>
 40035ec:	19c7883a 	add	r3,r3,r7
 40035f0:	1806d07a 	srli	r3,r3,1
 40035f4:	2021883a 	mov	r16,r4
 40035f8:	003f6c06 	br	40033ac <__alt_data_end+0xfc0033ac>
 40035fc:	1023883a 	mov	r17,r2
 4003600:	003fa906 	br	40034a8 <__alt_data_end+0xfc0034a8>
 4003604:	01c00044 	movi	r7,1
 4003608:	003f9006 	br	400344c <__alt_data_end+0xfc00344c>
 400360c:	8000151e 	bne	r16,zero,4003664 <__subsf3+0x31c>
 4003610:	18002f26 	beq	r3,zero,40036d0 <__subsf3+0x388>
 4003614:	0108303a 	nor	r4,zero,r4
 4003618:	20000a26 	beq	r4,zero,4003644 <__subsf3+0x2fc>
 400361c:	01403fc4 	movi	r5,255
 4003620:	31402b26 	beq	r6,r5,40036d0 <__subsf3+0x388>
 4003624:	014006c4 	movi	r5,27
 4003628:	29006e16 	blt	r5,r4,40037e4 <__subsf3+0x49c>
 400362c:	01400804 	movi	r5,32
 4003630:	290bc83a 	sub	r5,r5,r4
 4003634:	194a983a 	sll	r5,r3,r5
 4003638:	1908d83a 	srl	r4,r3,r4
 400363c:	2806c03a 	cmpne	r3,r5,zero
 4003640:	20c6b03a 	or	r3,r4,r3
 4003644:	38c7c83a 	sub	r3,r7,r3
 4003648:	3021883a 	mov	r16,r6
 400364c:	1023883a 	mov	r17,r2
 4003650:	003f7f06 	br	4003450 <__alt_data_end+0xfc003450>
 4003654:	903f831e 	bne	r18,zero,4003464 <__alt_data_end+0xfc003464>
 4003658:	0005883a 	mov	r2,zero
 400365c:	0021883a 	mov	r16,zero
 4003660:	003f9a06 	br	40034cc <__alt_data_end+0xfc0034cc>
 4003664:	01403fc4 	movi	r5,255
 4003668:	31401926 	beq	r6,r5,40036d0 <__subsf3+0x388>
 400366c:	0109c83a 	sub	r4,zero,r4
 4003670:	18c10034 	orhi	r3,r3,1024
 4003674:	003feb06 	br	4003624 <__alt_data_end+0xfc003624>
 4003678:	043fffc4 	movi	r16,-1
 400367c:	000b883a 	mov	r5,zero
 4003680:	003f5806 	br	40033e4 <__alt_data_end+0xfc0033e4>
 4003684:	8000481e 	bne	r16,zero,40037a8 <__subsf3+0x460>
 4003688:	18006226 	beq	r3,zero,4003814 <__subsf3+0x4cc>
 400368c:	383f4726 	beq	r7,zero,40033ac <__alt_data_end+0xfc0033ac>
 4003690:	19c7883a 	add	r3,r3,r7
 4003694:	1881002c 	andhi	r2,r3,1024
 4003698:	103f8326 	beq	r2,zero,40034a8 <__alt_data_end+0xfc0034a8>
 400369c:	00bf0034 	movhi	r2,64512
 40036a0:	10bfffc4 	addi	r2,r2,-1
 40036a4:	2821883a 	mov	r16,r5
 40036a8:	1886703a 	and	r3,r3,r2
 40036ac:	003f3f06 	br	40033ac <__alt_data_end+0xfc0033ac>
 40036b0:	80001c1e 	bne	r16,zero,4003724 <__subsf3+0x3dc>
 40036b4:	1800261e 	bne	r3,zero,4003750 <__subsf3+0x408>
 40036b8:	38004c26 	beq	r7,zero,40037ec <__subsf3+0x4a4>
 40036bc:	3807883a 	mov	r3,r7
 40036c0:	1023883a 	mov	r17,r2
 40036c4:	003f3906 	br	40033ac <__alt_data_end+0xfc0033ac>
 40036c8:	01c00044 	movi	r7,1
 40036cc:	003f9006 	br	4003510 <__alt_data_end+0xfc003510>
 40036d0:	3807883a 	mov	r3,r7
 40036d4:	3021883a 	mov	r16,r6
 40036d8:	1023883a 	mov	r17,r2
 40036dc:	003f3306 	br	40033ac <__alt_data_end+0xfc0033ac>
 40036e0:	8000161e 	bne	r16,zero,400373c <__subsf3+0x3f4>
 40036e4:	18002d26 	beq	r3,zero,400379c <__subsf3+0x454>
 40036e8:	0108303a 	nor	r4,zero,r4
 40036ec:	20000a26 	beq	r4,zero,4003718 <__subsf3+0x3d0>
 40036f0:	01403fc4 	movi	r5,255
 40036f4:	31402926 	beq	r6,r5,400379c <__subsf3+0x454>
 40036f8:	014006c4 	movi	r5,27
 40036fc:	29004716 	blt	r5,r4,400381c <__subsf3+0x4d4>
 4003700:	01400804 	movi	r5,32
 4003704:	290bc83a 	sub	r5,r5,r4
 4003708:	194a983a 	sll	r5,r3,r5
 400370c:	1908d83a 	srl	r4,r3,r4
 4003710:	2806c03a 	cmpne	r3,r5,zero
 4003714:	20c6b03a 	or	r3,r4,r3
 4003718:	19c7883a 	add	r3,r3,r7
 400371c:	3021883a 	mov	r16,r6
 4003720:	003f7c06 	br	4003514 <__alt_data_end+0xfc003514>
 4003724:	1800111e 	bne	r3,zero,400376c <__subsf3+0x424>
 4003728:	38003326 	beq	r7,zero,40037f8 <__subsf3+0x4b0>
 400372c:	3807883a 	mov	r3,r7
 4003730:	1023883a 	mov	r17,r2
 4003734:	04003fc4 	movi	r16,255
 4003738:	003f1c06 	br	40033ac <__alt_data_end+0xfc0033ac>
 400373c:	01403fc4 	movi	r5,255
 4003740:	31401626 	beq	r6,r5,400379c <__subsf3+0x454>
 4003744:	0109c83a 	sub	r4,zero,r4
 4003748:	18c10034 	orhi	r3,r3,1024
 400374c:	003fea06 	br	40036f8 <__alt_data_end+0xfc0036f8>
 4003750:	383f1626 	beq	r7,zero,40033ac <__alt_data_end+0xfc0033ac>
 4003754:	19c9c83a 	sub	r4,r3,r7
 4003758:	2141002c 	andhi	r5,r4,1024
 400375c:	283f5026 	beq	r5,zero,40034a0 <__alt_data_end+0xfc0034a0>
 4003760:	38c7c83a 	sub	r3,r7,r3
 4003764:	1023883a 	mov	r17,r2
 4003768:	003f1006 	br	40033ac <__alt_data_end+0xfc0033ac>
 400376c:	38001b26 	beq	r7,zero,40037dc <__subsf3+0x494>
 4003770:	1806d0fa 	srli	r3,r3,3
 4003774:	1900102c 	andhi	r4,r3,64
 4003778:	20000526 	beq	r4,zero,4003790 <__subsf3+0x448>
 400377c:	380ed0fa 	srli	r7,r7,3
 4003780:	3900102c 	andhi	r4,r7,64
 4003784:	2000021e 	bne	r4,zero,4003790 <__subsf3+0x448>
 4003788:	3807883a 	mov	r3,r7
 400378c:	1023883a 	mov	r17,r2
 4003790:	180690fa 	slli	r3,r3,3
 4003794:	04003fc4 	movi	r16,255
 4003798:	003f0406 	br	40033ac <__alt_data_end+0xfc0033ac>
 400379c:	3807883a 	mov	r3,r7
 40037a0:	3021883a 	mov	r16,r6
 40037a4:	003f0106 	br	40033ac <__alt_data_end+0xfc0033ac>
 40037a8:	18001726 	beq	r3,zero,4003808 <__subsf3+0x4c0>
 40037ac:	38000b26 	beq	r7,zero,40037dc <__subsf3+0x494>
 40037b0:	1806d0fa 	srli	r3,r3,3
 40037b4:	1900102c 	andhi	r4,r3,64
 40037b8:	20000426 	beq	r4,zero,40037cc <__subsf3+0x484>
 40037bc:	380ed0fa 	srli	r7,r7,3
 40037c0:	3900102c 	andhi	r4,r7,64
 40037c4:	2000011e 	bne	r4,zero,40037cc <__subsf3+0x484>
 40037c8:	3807883a 	mov	r3,r7
 40037cc:	180690fa 	slli	r3,r3,3
 40037d0:	1023883a 	mov	r17,r2
 40037d4:	04003fc4 	movi	r16,255
 40037d8:	003ef406 	br	40033ac <__alt_data_end+0xfc0033ac>
 40037dc:	04003fc4 	movi	r16,255
 40037e0:	003ef206 	br	40033ac <__alt_data_end+0xfc0033ac>
 40037e4:	00c00044 	movi	r3,1
 40037e8:	003f9606 	br	4003644 <__alt_data_end+0xfc003644>
 40037ec:	000b883a 	mov	r5,zero
 40037f0:	0005883a 	mov	r2,zero
 40037f4:	003f3506 	br	40034cc <__alt_data_end+0xfc0034cc>
 40037f8:	01402034 	movhi	r5,128
 40037fc:	297fffc4 	addi	r5,r5,-1
 4003800:	0005883a 	mov	r2,zero
 4003804:	003f2f06 	br	40034c4 <__alt_data_end+0xfc0034c4>
 4003808:	3807883a 	mov	r3,r7
 400380c:	04003fc4 	movi	r16,255
 4003810:	003ee606 	br	40033ac <__alt_data_end+0xfc0033ac>
 4003814:	3807883a 	mov	r3,r7
 4003818:	003ee406 	br	40033ac <__alt_data_end+0xfc0033ac>
 400381c:	00c00044 	movi	r3,1
 4003820:	003fbd06 	br	4003718 <__alt_data_end+0xfc003718>
 4003824:	0005883a 	mov	r2,zero
 4003828:	003f2806 	br	40034cc <__alt_data_end+0xfc0034cc>

0400382c <__floatsisf>:
 400382c:	defffd04 	addi	sp,sp,-12
 4003830:	dfc00215 	stw	ra,8(sp)
 4003834:	dc400115 	stw	r17,4(sp)
 4003838:	dc000015 	stw	r16,0(sp)
 400383c:	20003526 	beq	r4,zero,4003914 <__floatsisf+0xe8>
 4003840:	2021883a 	mov	r16,r4
 4003844:	2022d7fa 	srli	r17,r4,31
 4003848:	20003616 	blt	r4,zero,4003924 <__floatsisf+0xf8>
 400384c:	8009883a 	mov	r4,r16
 4003850:	40063c00 	call	40063c0 <__clzsi2>
 4003854:	00c02784 	movi	r3,158
 4003858:	1887c83a 	sub	r3,r3,r2
 400385c:	01002584 	movi	r4,150
 4003860:	20c01416 	blt	r4,r3,40038b4 <__floatsisf+0x88>
 4003864:	20c9c83a 	sub	r4,r4,r3
 4003868:	8120983a 	sll	r16,r16,r4
 400386c:	00802034 	movhi	r2,128
 4003870:	10bfffc4 	addi	r2,r2,-1
 4003874:	8809883a 	mov	r4,r17
 4003878:	80a0703a 	and	r16,r16,r2
 400387c:	18803fcc 	andi	r2,r3,255
 4003880:	100695fa 	slli	r3,r2,23
 4003884:	20803fcc 	andi	r2,r4,255
 4003888:	100897fa 	slli	r4,r2,31
 400388c:	00802034 	movhi	r2,128
 4003890:	10bfffc4 	addi	r2,r2,-1
 4003894:	8084703a 	and	r2,r16,r2
 4003898:	10c4b03a 	or	r2,r2,r3
 400389c:	1104b03a 	or	r2,r2,r4
 40038a0:	dfc00217 	ldw	ra,8(sp)
 40038a4:	dc400117 	ldw	r17,4(sp)
 40038a8:	dc000017 	ldw	r16,0(sp)
 40038ac:	dec00304 	addi	sp,sp,12
 40038b0:	f800283a 	ret
 40038b4:	01002644 	movi	r4,153
 40038b8:	20c01c16 	blt	r4,r3,400392c <__floatsisf+0x100>
 40038bc:	20c9c83a 	sub	r4,r4,r3
 40038c0:	8120983a 	sll	r16,r16,r4
 40038c4:	013f0034 	movhi	r4,64512
 40038c8:	213fffc4 	addi	r4,r4,-1
 40038cc:	814001cc 	andi	r5,r16,7
 40038d0:	8108703a 	and	r4,r16,r4
 40038d4:	28000426 	beq	r5,zero,40038e8 <__floatsisf+0xbc>
 40038d8:	840003cc 	andi	r16,r16,15
 40038dc:	01400104 	movi	r5,4
 40038e0:	81400126 	beq	r16,r5,40038e8 <__floatsisf+0xbc>
 40038e4:	2149883a 	add	r4,r4,r5
 40038e8:	2141002c 	andhi	r5,r4,1024
 40038ec:	28000526 	beq	r5,zero,4003904 <__floatsisf+0xd8>
 40038f0:	00c027c4 	movi	r3,159
 40038f4:	1887c83a 	sub	r3,r3,r2
 40038f8:	00bf0034 	movhi	r2,64512
 40038fc:	10bfffc4 	addi	r2,r2,-1
 4003900:	2088703a 	and	r4,r4,r2
 4003904:	202091ba 	slli	r16,r4,6
 4003908:	8809883a 	mov	r4,r17
 400390c:	8020d27a 	srli	r16,r16,9
 4003910:	003fda06 	br	400387c <__alt_data_end+0xfc00387c>
 4003914:	0009883a 	mov	r4,zero
 4003918:	0007883a 	mov	r3,zero
 400391c:	0021883a 	mov	r16,zero
 4003920:	003fd606 	br	400387c <__alt_data_end+0xfc00387c>
 4003924:	0121c83a 	sub	r16,zero,r4
 4003928:	003fc806 	br	400384c <__alt_data_end+0xfc00384c>
 400392c:	01002e44 	movi	r4,185
 4003930:	20c9c83a 	sub	r4,r4,r3
 4003934:	01400144 	movi	r5,5
 4003938:	8108983a 	sll	r4,r16,r4
 400393c:	288bc83a 	sub	r5,r5,r2
 4003940:	8160d83a 	srl	r16,r16,r5
 4003944:	2008c03a 	cmpne	r4,r4,zero
 4003948:	8120b03a 	or	r16,r16,r4
 400394c:	003fdd06 	br	40038c4 <__alt_data_end+0xfc0038c4>

04003950 <__adddf3>:
 4003950:	02c00434 	movhi	r11,16
 4003954:	5affffc4 	addi	r11,r11,-1
 4003958:	2806d7fa 	srli	r3,r5,31
 400395c:	2ad4703a 	and	r10,r5,r11
 4003960:	3ad2703a 	and	r9,r7,r11
 4003964:	3804d53a 	srli	r2,r7,20
 4003968:	3018d77a 	srli	r12,r6,29
 400396c:	280ad53a 	srli	r5,r5,20
 4003970:	501490fa 	slli	r10,r10,3
 4003974:	2010d77a 	srli	r8,r4,29
 4003978:	481290fa 	slli	r9,r9,3
 400397c:	380ed7fa 	srli	r7,r7,31
 4003980:	defffb04 	addi	sp,sp,-20
 4003984:	dc800215 	stw	r18,8(sp)
 4003988:	dc400115 	stw	r17,4(sp)
 400398c:	dc000015 	stw	r16,0(sp)
 4003990:	dfc00415 	stw	ra,16(sp)
 4003994:	dcc00315 	stw	r19,12(sp)
 4003998:	1c803fcc 	andi	r18,r3,255
 400399c:	2c01ffcc 	andi	r16,r5,2047
 40039a0:	5210b03a 	or	r8,r10,r8
 40039a4:	202290fa 	slli	r17,r4,3
 40039a8:	1081ffcc 	andi	r2,r2,2047
 40039ac:	4b12b03a 	or	r9,r9,r12
 40039b0:	300c90fa 	slli	r6,r6,3
 40039b4:	91c07526 	beq	r18,r7,4003b8c <__adddf3+0x23c>
 40039b8:	8087c83a 	sub	r3,r16,r2
 40039bc:	00c0ab0e 	bge	zero,r3,4003c6c <__adddf3+0x31c>
 40039c0:	10002a1e 	bne	r2,zero,4003a6c <__adddf3+0x11c>
 40039c4:	4984b03a 	or	r2,r9,r6
 40039c8:	1000961e 	bne	r2,zero,4003c24 <__adddf3+0x2d4>
 40039cc:	888001cc 	andi	r2,r17,7
 40039d0:	10000726 	beq	r2,zero,40039f0 <__adddf3+0xa0>
 40039d4:	888003cc 	andi	r2,r17,15
 40039d8:	00c00104 	movi	r3,4
 40039dc:	10c00426 	beq	r2,r3,40039f0 <__adddf3+0xa0>
 40039e0:	88c7883a 	add	r3,r17,r3
 40039e4:	1c63803a 	cmpltu	r17,r3,r17
 40039e8:	4451883a 	add	r8,r8,r17
 40039ec:	1823883a 	mov	r17,r3
 40039f0:	4080202c 	andhi	r2,r8,128
 40039f4:	10005926 	beq	r2,zero,4003b5c <__adddf3+0x20c>
 40039f8:	84000044 	addi	r16,r16,1
 40039fc:	0081ffc4 	movi	r2,2047
 4003a00:	8080ba26 	beq	r16,r2,4003cec <__adddf3+0x39c>
 4003a04:	00bfe034 	movhi	r2,65408
 4003a08:	10bfffc4 	addi	r2,r2,-1
 4003a0c:	4090703a 	and	r8,r8,r2
 4003a10:	4004977a 	slli	r2,r8,29
 4003a14:	4010927a 	slli	r8,r8,9
 4003a18:	8822d0fa 	srli	r17,r17,3
 4003a1c:	8401ffcc 	andi	r16,r16,2047
 4003a20:	4010d33a 	srli	r8,r8,12
 4003a24:	9007883a 	mov	r3,r18
 4003a28:	1444b03a 	or	r2,r2,r17
 4003a2c:	8401ffcc 	andi	r16,r16,2047
 4003a30:	8020953a 	slli	r16,r16,20
 4003a34:	18c03fcc 	andi	r3,r3,255
 4003a38:	01000434 	movhi	r4,16
 4003a3c:	213fffc4 	addi	r4,r4,-1
 4003a40:	180697fa 	slli	r3,r3,31
 4003a44:	4110703a 	and	r8,r8,r4
 4003a48:	4410b03a 	or	r8,r8,r16
 4003a4c:	40c6b03a 	or	r3,r8,r3
 4003a50:	dfc00417 	ldw	ra,16(sp)
 4003a54:	dcc00317 	ldw	r19,12(sp)
 4003a58:	dc800217 	ldw	r18,8(sp)
 4003a5c:	dc400117 	ldw	r17,4(sp)
 4003a60:	dc000017 	ldw	r16,0(sp)
 4003a64:	dec00504 	addi	sp,sp,20
 4003a68:	f800283a 	ret
 4003a6c:	0081ffc4 	movi	r2,2047
 4003a70:	80bfd626 	beq	r16,r2,40039cc <__alt_data_end+0xfc0039cc>
 4003a74:	4a402034 	orhi	r9,r9,128
 4003a78:	00800e04 	movi	r2,56
 4003a7c:	10c09f16 	blt	r2,r3,4003cfc <__adddf3+0x3ac>
 4003a80:	008007c4 	movi	r2,31
 4003a84:	10c0c216 	blt	r2,r3,4003d90 <__adddf3+0x440>
 4003a88:	00800804 	movi	r2,32
 4003a8c:	10c5c83a 	sub	r2,r2,r3
 4003a90:	488a983a 	sll	r5,r9,r2
 4003a94:	30c8d83a 	srl	r4,r6,r3
 4003a98:	3084983a 	sll	r2,r6,r2
 4003a9c:	48c6d83a 	srl	r3,r9,r3
 4003aa0:	290cb03a 	or	r6,r5,r4
 4003aa4:	1004c03a 	cmpne	r2,r2,zero
 4003aa8:	308cb03a 	or	r6,r6,r2
 4003aac:	898dc83a 	sub	r6,r17,r6
 4003ab0:	89a3803a 	cmpltu	r17,r17,r6
 4003ab4:	40d1c83a 	sub	r8,r8,r3
 4003ab8:	4451c83a 	sub	r8,r8,r17
 4003abc:	3023883a 	mov	r17,r6
 4003ac0:	4080202c 	andhi	r2,r8,128
 4003ac4:	10002326 	beq	r2,zero,4003b54 <__adddf3+0x204>
 4003ac8:	04c02034 	movhi	r19,128
 4003acc:	9cffffc4 	addi	r19,r19,-1
 4003ad0:	44e6703a 	and	r19,r8,r19
 4003ad4:	98007626 	beq	r19,zero,4003cb0 <__adddf3+0x360>
 4003ad8:	9809883a 	mov	r4,r19
 4003adc:	40063c00 	call	40063c0 <__clzsi2>
 4003ae0:	10fffe04 	addi	r3,r2,-8
 4003ae4:	010007c4 	movi	r4,31
 4003ae8:	20c07716 	blt	r4,r3,4003cc8 <__adddf3+0x378>
 4003aec:	00800804 	movi	r2,32
 4003af0:	10c5c83a 	sub	r2,r2,r3
 4003af4:	8884d83a 	srl	r2,r17,r2
 4003af8:	98d0983a 	sll	r8,r19,r3
 4003afc:	88e2983a 	sll	r17,r17,r3
 4003b00:	1204b03a 	or	r2,r2,r8
 4003b04:	1c007416 	blt	r3,r16,4003cd8 <__adddf3+0x388>
 4003b08:	1c21c83a 	sub	r16,r3,r16
 4003b0c:	82000044 	addi	r8,r16,1
 4003b10:	00c007c4 	movi	r3,31
 4003b14:	1a009116 	blt	r3,r8,4003d5c <__adddf3+0x40c>
 4003b18:	00c00804 	movi	r3,32
 4003b1c:	1a07c83a 	sub	r3,r3,r8
 4003b20:	8a08d83a 	srl	r4,r17,r8
 4003b24:	88e2983a 	sll	r17,r17,r3
 4003b28:	10c6983a 	sll	r3,r2,r3
 4003b2c:	1210d83a 	srl	r8,r2,r8
 4003b30:	8804c03a 	cmpne	r2,r17,zero
 4003b34:	1906b03a 	or	r3,r3,r4
 4003b38:	18a2b03a 	or	r17,r3,r2
 4003b3c:	0021883a 	mov	r16,zero
 4003b40:	003fa206 	br	40039cc <__alt_data_end+0xfc0039cc>
 4003b44:	1890b03a 	or	r8,r3,r2
 4003b48:	40017d26 	beq	r8,zero,4004140 <__adddf3+0x7f0>
 4003b4c:	1011883a 	mov	r8,r2
 4003b50:	1823883a 	mov	r17,r3
 4003b54:	888001cc 	andi	r2,r17,7
 4003b58:	103f9e1e 	bne	r2,zero,40039d4 <__alt_data_end+0xfc0039d4>
 4003b5c:	4004977a 	slli	r2,r8,29
 4003b60:	8822d0fa 	srli	r17,r17,3
 4003b64:	4010d0fa 	srli	r8,r8,3
 4003b68:	9007883a 	mov	r3,r18
 4003b6c:	1444b03a 	or	r2,r2,r17
 4003b70:	0101ffc4 	movi	r4,2047
 4003b74:	81002426 	beq	r16,r4,4003c08 <__adddf3+0x2b8>
 4003b78:	8120703a 	and	r16,r16,r4
 4003b7c:	01000434 	movhi	r4,16
 4003b80:	213fffc4 	addi	r4,r4,-1
 4003b84:	4110703a 	and	r8,r8,r4
 4003b88:	003fa806 	br	4003a2c <__alt_data_end+0xfc003a2c>
 4003b8c:	8089c83a 	sub	r4,r16,r2
 4003b90:	01005e0e 	bge	zero,r4,4003d0c <__adddf3+0x3bc>
 4003b94:	10002b26 	beq	r2,zero,4003c44 <__adddf3+0x2f4>
 4003b98:	0081ffc4 	movi	r2,2047
 4003b9c:	80bf8b26 	beq	r16,r2,40039cc <__alt_data_end+0xfc0039cc>
 4003ba0:	4a402034 	orhi	r9,r9,128
 4003ba4:	00800e04 	movi	r2,56
 4003ba8:	1100a40e 	bge	r2,r4,4003e3c <__adddf3+0x4ec>
 4003bac:	498cb03a 	or	r6,r9,r6
 4003bb0:	300ac03a 	cmpne	r5,r6,zero
 4003bb4:	0013883a 	mov	r9,zero
 4003bb8:	2c4b883a 	add	r5,r5,r17
 4003bbc:	2c63803a 	cmpltu	r17,r5,r17
 4003bc0:	4a11883a 	add	r8,r9,r8
 4003bc4:	8a11883a 	add	r8,r17,r8
 4003bc8:	2823883a 	mov	r17,r5
 4003bcc:	4080202c 	andhi	r2,r8,128
 4003bd0:	103fe026 	beq	r2,zero,4003b54 <__alt_data_end+0xfc003b54>
 4003bd4:	84000044 	addi	r16,r16,1
 4003bd8:	0081ffc4 	movi	r2,2047
 4003bdc:	8080d226 	beq	r16,r2,4003f28 <__adddf3+0x5d8>
 4003be0:	00bfe034 	movhi	r2,65408
 4003be4:	10bfffc4 	addi	r2,r2,-1
 4003be8:	4090703a 	and	r8,r8,r2
 4003bec:	880ad07a 	srli	r5,r17,1
 4003bf0:	400897fa 	slli	r4,r8,31
 4003bf4:	88c0004c 	andi	r3,r17,1
 4003bf8:	28e2b03a 	or	r17,r5,r3
 4003bfc:	4010d07a 	srli	r8,r8,1
 4003c00:	2462b03a 	or	r17,r4,r17
 4003c04:	003f7106 	br	40039cc <__alt_data_end+0xfc0039cc>
 4003c08:	4088b03a 	or	r4,r8,r2
 4003c0c:	20014526 	beq	r4,zero,4004124 <__adddf3+0x7d4>
 4003c10:	01000434 	movhi	r4,16
 4003c14:	42000234 	orhi	r8,r8,8
 4003c18:	213fffc4 	addi	r4,r4,-1
 4003c1c:	4110703a 	and	r8,r8,r4
 4003c20:	003f8206 	br	4003a2c <__alt_data_end+0xfc003a2c>
 4003c24:	18ffffc4 	addi	r3,r3,-1
 4003c28:	1800491e 	bne	r3,zero,4003d50 <__adddf3+0x400>
 4003c2c:	898bc83a 	sub	r5,r17,r6
 4003c30:	8963803a 	cmpltu	r17,r17,r5
 4003c34:	4251c83a 	sub	r8,r8,r9
 4003c38:	4451c83a 	sub	r8,r8,r17
 4003c3c:	2823883a 	mov	r17,r5
 4003c40:	003f9f06 	br	4003ac0 <__alt_data_end+0xfc003ac0>
 4003c44:	4984b03a 	or	r2,r9,r6
 4003c48:	103f6026 	beq	r2,zero,40039cc <__alt_data_end+0xfc0039cc>
 4003c4c:	213fffc4 	addi	r4,r4,-1
 4003c50:	2000931e 	bne	r4,zero,4003ea0 <__adddf3+0x550>
 4003c54:	898d883a 	add	r6,r17,r6
 4003c58:	3463803a 	cmpltu	r17,r6,r17
 4003c5c:	4251883a 	add	r8,r8,r9
 4003c60:	8a11883a 	add	r8,r17,r8
 4003c64:	3023883a 	mov	r17,r6
 4003c68:	003fd806 	br	4003bcc <__alt_data_end+0xfc003bcc>
 4003c6c:	1800541e 	bne	r3,zero,4003dc0 <__adddf3+0x470>
 4003c70:	80800044 	addi	r2,r16,1
 4003c74:	1081ffcc 	andi	r2,r2,2047
 4003c78:	00c00044 	movi	r3,1
 4003c7c:	1880a00e 	bge	r3,r2,4003f00 <__adddf3+0x5b0>
 4003c80:	8989c83a 	sub	r4,r17,r6
 4003c84:	8905803a 	cmpltu	r2,r17,r4
 4003c88:	4267c83a 	sub	r19,r8,r9
 4003c8c:	98a7c83a 	sub	r19,r19,r2
 4003c90:	9880202c 	andhi	r2,r19,128
 4003c94:	10006326 	beq	r2,zero,4003e24 <__adddf3+0x4d4>
 4003c98:	3463c83a 	sub	r17,r6,r17
 4003c9c:	4a07c83a 	sub	r3,r9,r8
 4003ca0:	344d803a 	cmpltu	r6,r6,r17
 4003ca4:	19a7c83a 	sub	r19,r3,r6
 4003ca8:	3825883a 	mov	r18,r7
 4003cac:	983f8a1e 	bne	r19,zero,4003ad8 <__alt_data_end+0xfc003ad8>
 4003cb0:	8809883a 	mov	r4,r17
 4003cb4:	40063c00 	call	40063c0 <__clzsi2>
 4003cb8:	10800804 	addi	r2,r2,32
 4003cbc:	10fffe04 	addi	r3,r2,-8
 4003cc0:	010007c4 	movi	r4,31
 4003cc4:	20ff890e 	bge	r4,r3,4003aec <__alt_data_end+0xfc003aec>
 4003cc8:	10bff604 	addi	r2,r2,-40
 4003ccc:	8884983a 	sll	r2,r17,r2
 4003cd0:	0023883a 	mov	r17,zero
 4003cd4:	1c3f8c0e 	bge	r3,r16,4003b08 <__alt_data_end+0xfc003b08>
 4003cd8:	023fe034 	movhi	r8,65408
 4003cdc:	423fffc4 	addi	r8,r8,-1
 4003ce0:	80e1c83a 	sub	r16,r16,r3
 4003ce4:	1210703a 	and	r8,r2,r8
 4003ce8:	003f3806 	br	40039cc <__alt_data_end+0xfc0039cc>
 4003cec:	9007883a 	mov	r3,r18
 4003cf0:	0011883a 	mov	r8,zero
 4003cf4:	0005883a 	mov	r2,zero
 4003cf8:	003f4c06 	br	4003a2c <__alt_data_end+0xfc003a2c>
 4003cfc:	498cb03a 	or	r6,r9,r6
 4003d00:	300cc03a 	cmpne	r6,r6,zero
 4003d04:	0007883a 	mov	r3,zero
 4003d08:	003f6806 	br	4003aac <__alt_data_end+0xfc003aac>
 4003d0c:	20009c1e 	bne	r4,zero,4003f80 <__adddf3+0x630>
 4003d10:	80800044 	addi	r2,r16,1
 4003d14:	1141ffcc 	andi	r5,r2,2047
 4003d18:	01000044 	movi	r4,1
 4003d1c:	2140670e 	bge	r4,r5,4003ebc <__adddf3+0x56c>
 4003d20:	0101ffc4 	movi	r4,2047
 4003d24:	11007f26 	beq	r2,r4,4003f24 <__adddf3+0x5d4>
 4003d28:	898d883a 	add	r6,r17,r6
 4003d2c:	4247883a 	add	r3,r8,r9
 4003d30:	3451803a 	cmpltu	r8,r6,r17
 4003d34:	40d1883a 	add	r8,r8,r3
 4003d38:	402297fa 	slli	r17,r8,31
 4003d3c:	300cd07a 	srli	r6,r6,1
 4003d40:	4010d07a 	srli	r8,r8,1
 4003d44:	1021883a 	mov	r16,r2
 4003d48:	89a2b03a 	or	r17,r17,r6
 4003d4c:	003f1f06 	br	40039cc <__alt_data_end+0xfc0039cc>
 4003d50:	0081ffc4 	movi	r2,2047
 4003d54:	80bf481e 	bne	r16,r2,4003a78 <__alt_data_end+0xfc003a78>
 4003d58:	003f1c06 	br	40039cc <__alt_data_end+0xfc0039cc>
 4003d5c:	843ff844 	addi	r16,r16,-31
 4003d60:	01000804 	movi	r4,32
 4003d64:	1406d83a 	srl	r3,r2,r16
 4003d68:	41005026 	beq	r8,r4,4003eac <__adddf3+0x55c>
 4003d6c:	01001004 	movi	r4,64
 4003d70:	2211c83a 	sub	r8,r4,r8
 4003d74:	1204983a 	sll	r2,r2,r8
 4003d78:	88a2b03a 	or	r17,r17,r2
 4003d7c:	8822c03a 	cmpne	r17,r17,zero
 4003d80:	1c62b03a 	or	r17,r3,r17
 4003d84:	0011883a 	mov	r8,zero
 4003d88:	0021883a 	mov	r16,zero
 4003d8c:	003f7106 	br	4003b54 <__alt_data_end+0xfc003b54>
 4003d90:	193ff804 	addi	r4,r3,-32
 4003d94:	00800804 	movi	r2,32
 4003d98:	4908d83a 	srl	r4,r9,r4
 4003d9c:	18804526 	beq	r3,r2,4003eb4 <__adddf3+0x564>
 4003da0:	00801004 	movi	r2,64
 4003da4:	10c5c83a 	sub	r2,r2,r3
 4003da8:	4886983a 	sll	r3,r9,r2
 4003dac:	198cb03a 	or	r6,r3,r6
 4003db0:	300cc03a 	cmpne	r6,r6,zero
 4003db4:	218cb03a 	or	r6,r4,r6
 4003db8:	0007883a 	mov	r3,zero
 4003dbc:	003f3b06 	br	4003aac <__alt_data_end+0xfc003aac>
 4003dc0:	80002a26 	beq	r16,zero,4003e6c <__adddf3+0x51c>
 4003dc4:	0101ffc4 	movi	r4,2047
 4003dc8:	11006826 	beq	r2,r4,4003f6c <__adddf3+0x61c>
 4003dcc:	00c7c83a 	sub	r3,zero,r3
 4003dd0:	42002034 	orhi	r8,r8,128
 4003dd4:	01000e04 	movi	r4,56
 4003dd8:	20c07c16 	blt	r4,r3,4003fcc <__adddf3+0x67c>
 4003ddc:	010007c4 	movi	r4,31
 4003de0:	20c0da16 	blt	r4,r3,400414c <__adddf3+0x7fc>
 4003de4:	01000804 	movi	r4,32
 4003de8:	20c9c83a 	sub	r4,r4,r3
 4003dec:	4114983a 	sll	r10,r8,r4
 4003df0:	88cad83a 	srl	r5,r17,r3
 4003df4:	8908983a 	sll	r4,r17,r4
 4003df8:	40c6d83a 	srl	r3,r8,r3
 4003dfc:	5162b03a 	or	r17,r10,r5
 4003e00:	2008c03a 	cmpne	r4,r4,zero
 4003e04:	8922b03a 	or	r17,r17,r4
 4003e08:	3463c83a 	sub	r17,r6,r17
 4003e0c:	48c7c83a 	sub	r3,r9,r3
 4003e10:	344d803a 	cmpltu	r6,r6,r17
 4003e14:	1991c83a 	sub	r8,r3,r6
 4003e18:	1021883a 	mov	r16,r2
 4003e1c:	3825883a 	mov	r18,r7
 4003e20:	003f2706 	br	4003ac0 <__alt_data_end+0xfc003ac0>
 4003e24:	24d0b03a 	or	r8,r4,r19
 4003e28:	40001b1e 	bne	r8,zero,4003e98 <__adddf3+0x548>
 4003e2c:	0005883a 	mov	r2,zero
 4003e30:	0007883a 	mov	r3,zero
 4003e34:	0021883a 	mov	r16,zero
 4003e38:	003f4d06 	br	4003b70 <__alt_data_end+0xfc003b70>
 4003e3c:	008007c4 	movi	r2,31
 4003e40:	11003c16 	blt	r2,r4,4003f34 <__adddf3+0x5e4>
 4003e44:	00800804 	movi	r2,32
 4003e48:	1105c83a 	sub	r2,r2,r4
 4003e4c:	488e983a 	sll	r7,r9,r2
 4003e50:	310ad83a 	srl	r5,r6,r4
 4003e54:	3084983a 	sll	r2,r6,r2
 4003e58:	4912d83a 	srl	r9,r9,r4
 4003e5c:	394ab03a 	or	r5,r7,r5
 4003e60:	1004c03a 	cmpne	r2,r2,zero
 4003e64:	288ab03a 	or	r5,r5,r2
 4003e68:	003f5306 	br	4003bb8 <__alt_data_end+0xfc003bb8>
 4003e6c:	4448b03a 	or	r4,r8,r17
 4003e70:	20003e26 	beq	r4,zero,4003f6c <__adddf3+0x61c>
 4003e74:	00c6303a 	nor	r3,zero,r3
 4003e78:	18003a1e 	bne	r3,zero,4003f64 <__adddf3+0x614>
 4003e7c:	3463c83a 	sub	r17,r6,r17
 4003e80:	4a07c83a 	sub	r3,r9,r8
 4003e84:	344d803a 	cmpltu	r6,r6,r17
 4003e88:	1991c83a 	sub	r8,r3,r6
 4003e8c:	1021883a 	mov	r16,r2
 4003e90:	3825883a 	mov	r18,r7
 4003e94:	003f0a06 	br	4003ac0 <__alt_data_end+0xfc003ac0>
 4003e98:	2023883a 	mov	r17,r4
 4003e9c:	003f0d06 	br	4003ad4 <__alt_data_end+0xfc003ad4>
 4003ea0:	0081ffc4 	movi	r2,2047
 4003ea4:	80bf3f1e 	bne	r16,r2,4003ba4 <__alt_data_end+0xfc003ba4>
 4003ea8:	003ec806 	br	40039cc <__alt_data_end+0xfc0039cc>
 4003eac:	0005883a 	mov	r2,zero
 4003eb0:	003fb106 	br	4003d78 <__alt_data_end+0xfc003d78>
 4003eb4:	0007883a 	mov	r3,zero
 4003eb8:	003fbc06 	br	4003dac <__alt_data_end+0xfc003dac>
 4003ebc:	4444b03a 	or	r2,r8,r17
 4003ec0:	8000871e 	bne	r16,zero,40040e0 <__adddf3+0x790>
 4003ec4:	1000ba26 	beq	r2,zero,40041b0 <__adddf3+0x860>
 4003ec8:	4984b03a 	or	r2,r9,r6
 4003ecc:	103ebf26 	beq	r2,zero,40039cc <__alt_data_end+0xfc0039cc>
 4003ed0:	8985883a 	add	r2,r17,r6
 4003ed4:	4247883a 	add	r3,r8,r9
 4003ed8:	1451803a 	cmpltu	r8,r2,r17
 4003edc:	40d1883a 	add	r8,r8,r3
 4003ee0:	40c0202c 	andhi	r3,r8,128
 4003ee4:	1023883a 	mov	r17,r2
 4003ee8:	183f1a26 	beq	r3,zero,4003b54 <__alt_data_end+0xfc003b54>
 4003eec:	00bfe034 	movhi	r2,65408
 4003ef0:	10bfffc4 	addi	r2,r2,-1
 4003ef4:	2021883a 	mov	r16,r4
 4003ef8:	4090703a 	and	r8,r8,r2
 4003efc:	003eb306 	br	40039cc <__alt_data_end+0xfc0039cc>
 4003f00:	4444b03a 	or	r2,r8,r17
 4003f04:	8000291e 	bne	r16,zero,4003fac <__adddf3+0x65c>
 4003f08:	10004b1e 	bne	r2,zero,4004038 <__adddf3+0x6e8>
 4003f0c:	4990b03a 	or	r8,r9,r6
 4003f10:	40008b26 	beq	r8,zero,4004140 <__adddf3+0x7f0>
 4003f14:	4811883a 	mov	r8,r9
 4003f18:	3023883a 	mov	r17,r6
 4003f1c:	3825883a 	mov	r18,r7
 4003f20:	003eaa06 	br	40039cc <__alt_data_end+0xfc0039cc>
 4003f24:	1021883a 	mov	r16,r2
 4003f28:	0011883a 	mov	r8,zero
 4003f2c:	0005883a 	mov	r2,zero
 4003f30:	003f0f06 	br	4003b70 <__alt_data_end+0xfc003b70>
 4003f34:	217ff804 	addi	r5,r4,-32
 4003f38:	00800804 	movi	r2,32
 4003f3c:	494ad83a 	srl	r5,r9,r5
 4003f40:	20807d26 	beq	r4,r2,4004138 <__adddf3+0x7e8>
 4003f44:	00801004 	movi	r2,64
 4003f48:	1109c83a 	sub	r4,r2,r4
 4003f4c:	4912983a 	sll	r9,r9,r4
 4003f50:	498cb03a 	or	r6,r9,r6
 4003f54:	300cc03a 	cmpne	r6,r6,zero
 4003f58:	298ab03a 	or	r5,r5,r6
 4003f5c:	0013883a 	mov	r9,zero
 4003f60:	003f1506 	br	4003bb8 <__alt_data_end+0xfc003bb8>
 4003f64:	0101ffc4 	movi	r4,2047
 4003f68:	113f9a1e 	bne	r2,r4,4003dd4 <__alt_data_end+0xfc003dd4>
 4003f6c:	4811883a 	mov	r8,r9
 4003f70:	3023883a 	mov	r17,r6
 4003f74:	1021883a 	mov	r16,r2
 4003f78:	3825883a 	mov	r18,r7
 4003f7c:	003e9306 	br	40039cc <__alt_data_end+0xfc0039cc>
 4003f80:	8000161e 	bne	r16,zero,4003fdc <__adddf3+0x68c>
 4003f84:	444ab03a 	or	r5,r8,r17
 4003f88:	28005126 	beq	r5,zero,40040d0 <__adddf3+0x780>
 4003f8c:	0108303a 	nor	r4,zero,r4
 4003f90:	20004d1e 	bne	r4,zero,40040c8 <__adddf3+0x778>
 4003f94:	89a3883a 	add	r17,r17,r6
 4003f98:	4253883a 	add	r9,r8,r9
 4003f9c:	898d803a 	cmpltu	r6,r17,r6
 4003fa0:	3251883a 	add	r8,r6,r9
 4003fa4:	1021883a 	mov	r16,r2
 4003fa8:	003f0806 	br	4003bcc <__alt_data_end+0xfc003bcc>
 4003fac:	1000301e 	bne	r2,zero,4004070 <__adddf3+0x720>
 4003fb0:	4984b03a 	or	r2,r9,r6
 4003fb4:	10007126 	beq	r2,zero,400417c <__adddf3+0x82c>
 4003fb8:	4811883a 	mov	r8,r9
 4003fbc:	3023883a 	mov	r17,r6
 4003fc0:	3825883a 	mov	r18,r7
 4003fc4:	0401ffc4 	movi	r16,2047
 4003fc8:	003e8006 	br	40039cc <__alt_data_end+0xfc0039cc>
 4003fcc:	4462b03a 	or	r17,r8,r17
 4003fd0:	8822c03a 	cmpne	r17,r17,zero
 4003fd4:	0007883a 	mov	r3,zero
 4003fd8:	003f8b06 	br	4003e08 <__alt_data_end+0xfc003e08>
 4003fdc:	0141ffc4 	movi	r5,2047
 4003fe0:	11403b26 	beq	r2,r5,40040d0 <__adddf3+0x780>
 4003fe4:	0109c83a 	sub	r4,zero,r4
 4003fe8:	42002034 	orhi	r8,r8,128
 4003fec:	01400e04 	movi	r5,56
 4003ff0:	29006716 	blt	r5,r4,4004190 <__adddf3+0x840>
 4003ff4:	014007c4 	movi	r5,31
 4003ff8:	29007016 	blt	r5,r4,40041bc <__adddf3+0x86c>
 4003ffc:	01400804 	movi	r5,32
 4004000:	290bc83a 	sub	r5,r5,r4
 4004004:	4154983a 	sll	r10,r8,r5
 4004008:	890ed83a 	srl	r7,r17,r4
 400400c:	894a983a 	sll	r5,r17,r5
 4004010:	4108d83a 	srl	r4,r8,r4
 4004014:	51e2b03a 	or	r17,r10,r7
 4004018:	280ac03a 	cmpne	r5,r5,zero
 400401c:	8962b03a 	or	r17,r17,r5
 4004020:	89a3883a 	add	r17,r17,r6
 4004024:	2253883a 	add	r9,r4,r9
 4004028:	898d803a 	cmpltu	r6,r17,r6
 400402c:	3251883a 	add	r8,r6,r9
 4004030:	1021883a 	mov	r16,r2
 4004034:	003ee506 	br	4003bcc <__alt_data_end+0xfc003bcc>
 4004038:	4984b03a 	or	r2,r9,r6
 400403c:	103e6326 	beq	r2,zero,40039cc <__alt_data_end+0xfc0039cc>
 4004040:	8987c83a 	sub	r3,r17,r6
 4004044:	88c9803a 	cmpltu	r4,r17,r3
 4004048:	4245c83a 	sub	r2,r8,r9
 400404c:	1105c83a 	sub	r2,r2,r4
 4004050:	1100202c 	andhi	r4,r2,128
 4004054:	203ebb26 	beq	r4,zero,4003b44 <__alt_data_end+0xfc003b44>
 4004058:	3463c83a 	sub	r17,r6,r17
 400405c:	4a07c83a 	sub	r3,r9,r8
 4004060:	344d803a 	cmpltu	r6,r6,r17
 4004064:	1991c83a 	sub	r8,r3,r6
 4004068:	3825883a 	mov	r18,r7
 400406c:	003e5706 	br	40039cc <__alt_data_end+0xfc0039cc>
 4004070:	4984b03a 	or	r2,r9,r6
 4004074:	10002e26 	beq	r2,zero,4004130 <__adddf3+0x7e0>
 4004078:	4004d0fa 	srli	r2,r8,3
 400407c:	8822d0fa 	srli	r17,r17,3
 4004080:	4010977a 	slli	r8,r8,29
 4004084:	10c0022c 	andhi	r3,r2,8
 4004088:	4462b03a 	or	r17,r8,r17
 400408c:	18000826 	beq	r3,zero,40040b0 <__adddf3+0x760>
 4004090:	4808d0fa 	srli	r4,r9,3
 4004094:	20c0022c 	andhi	r3,r4,8
 4004098:	1800051e 	bne	r3,zero,40040b0 <__adddf3+0x760>
 400409c:	300cd0fa 	srli	r6,r6,3
 40040a0:	4806977a 	slli	r3,r9,29
 40040a4:	2005883a 	mov	r2,r4
 40040a8:	3825883a 	mov	r18,r7
 40040ac:	19a2b03a 	or	r17,r3,r6
 40040b0:	8810d77a 	srli	r8,r17,29
 40040b4:	100490fa 	slli	r2,r2,3
 40040b8:	882290fa 	slli	r17,r17,3
 40040bc:	0401ffc4 	movi	r16,2047
 40040c0:	4090b03a 	or	r8,r8,r2
 40040c4:	003e4106 	br	40039cc <__alt_data_end+0xfc0039cc>
 40040c8:	0141ffc4 	movi	r5,2047
 40040cc:	117fc71e 	bne	r2,r5,4003fec <__alt_data_end+0xfc003fec>
 40040d0:	4811883a 	mov	r8,r9
 40040d4:	3023883a 	mov	r17,r6
 40040d8:	1021883a 	mov	r16,r2
 40040dc:	003e3b06 	br	40039cc <__alt_data_end+0xfc0039cc>
 40040e0:	10002f26 	beq	r2,zero,40041a0 <__adddf3+0x850>
 40040e4:	4984b03a 	or	r2,r9,r6
 40040e8:	10001126 	beq	r2,zero,4004130 <__adddf3+0x7e0>
 40040ec:	4004d0fa 	srli	r2,r8,3
 40040f0:	8822d0fa 	srli	r17,r17,3
 40040f4:	4010977a 	slli	r8,r8,29
 40040f8:	10c0022c 	andhi	r3,r2,8
 40040fc:	4462b03a 	or	r17,r8,r17
 4004100:	183feb26 	beq	r3,zero,40040b0 <__alt_data_end+0xfc0040b0>
 4004104:	4808d0fa 	srli	r4,r9,3
 4004108:	20c0022c 	andhi	r3,r4,8
 400410c:	183fe81e 	bne	r3,zero,40040b0 <__alt_data_end+0xfc0040b0>
 4004110:	300cd0fa 	srli	r6,r6,3
 4004114:	4806977a 	slli	r3,r9,29
 4004118:	2005883a 	mov	r2,r4
 400411c:	19a2b03a 	or	r17,r3,r6
 4004120:	003fe306 	br	40040b0 <__alt_data_end+0xfc0040b0>
 4004124:	0011883a 	mov	r8,zero
 4004128:	0005883a 	mov	r2,zero
 400412c:	003e3f06 	br	4003a2c <__alt_data_end+0xfc003a2c>
 4004130:	0401ffc4 	movi	r16,2047
 4004134:	003e2506 	br	40039cc <__alt_data_end+0xfc0039cc>
 4004138:	0013883a 	mov	r9,zero
 400413c:	003f8406 	br	4003f50 <__alt_data_end+0xfc003f50>
 4004140:	0005883a 	mov	r2,zero
 4004144:	0007883a 	mov	r3,zero
 4004148:	003e8906 	br	4003b70 <__alt_data_end+0xfc003b70>
 400414c:	197ff804 	addi	r5,r3,-32
 4004150:	01000804 	movi	r4,32
 4004154:	414ad83a 	srl	r5,r8,r5
 4004158:	19002426 	beq	r3,r4,40041ec <__adddf3+0x89c>
 400415c:	01001004 	movi	r4,64
 4004160:	20c7c83a 	sub	r3,r4,r3
 4004164:	40c6983a 	sll	r3,r8,r3
 4004168:	1c46b03a 	or	r3,r3,r17
 400416c:	1806c03a 	cmpne	r3,r3,zero
 4004170:	28e2b03a 	or	r17,r5,r3
 4004174:	0007883a 	mov	r3,zero
 4004178:	003f2306 	br	4003e08 <__alt_data_end+0xfc003e08>
 400417c:	0007883a 	mov	r3,zero
 4004180:	5811883a 	mov	r8,r11
 4004184:	00bfffc4 	movi	r2,-1
 4004188:	0401ffc4 	movi	r16,2047
 400418c:	003e7806 	br	4003b70 <__alt_data_end+0xfc003b70>
 4004190:	4462b03a 	or	r17,r8,r17
 4004194:	8822c03a 	cmpne	r17,r17,zero
 4004198:	0009883a 	mov	r4,zero
 400419c:	003fa006 	br	4004020 <__alt_data_end+0xfc004020>
 40041a0:	4811883a 	mov	r8,r9
 40041a4:	3023883a 	mov	r17,r6
 40041a8:	0401ffc4 	movi	r16,2047
 40041ac:	003e0706 	br	40039cc <__alt_data_end+0xfc0039cc>
 40041b0:	4811883a 	mov	r8,r9
 40041b4:	3023883a 	mov	r17,r6
 40041b8:	003e0406 	br	40039cc <__alt_data_end+0xfc0039cc>
 40041bc:	21fff804 	addi	r7,r4,-32
 40041c0:	01400804 	movi	r5,32
 40041c4:	41ced83a 	srl	r7,r8,r7
 40041c8:	21400a26 	beq	r4,r5,40041f4 <__adddf3+0x8a4>
 40041cc:	01401004 	movi	r5,64
 40041d0:	2909c83a 	sub	r4,r5,r4
 40041d4:	4108983a 	sll	r4,r8,r4
 40041d8:	2448b03a 	or	r4,r4,r17
 40041dc:	2008c03a 	cmpne	r4,r4,zero
 40041e0:	3922b03a 	or	r17,r7,r4
 40041e4:	0009883a 	mov	r4,zero
 40041e8:	003f8d06 	br	4004020 <__alt_data_end+0xfc004020>
 40041ec:	0007883a 	mov	r3,zero
 40041f0:	003fdd06 	br	4004168 <__alt_data_end+0xfc004168>
 40041f4:	0009883a 	mov	r4,zero
 40041f8:	003ff706 	br	40041d8 <__alt_data_end+0xfc0041d8>

040041fc <__divdf3>:
 40041fc:	defff004 	addi	sp,sp,-64
 4004200:	dc800815 	stw	r18,32(sp)
 4004204:	2824d53a 	srli	r18,r5,20
 4004208:	dd800c15 	stw	r22,48(sp)
 400420c:	282cd7fa 	srli	r22,r5,31
 4004210:	dc000615 	stw	r16,24(sp)
 4004214:	04000434 	movhi	r16,16
 4004218:	843fffc4 	addi	r16,r16,-1
 400421c:	dfc00f15 	stw	ra,60(sp)
 4004220:	df000e15 	stw	fp,56(sp)
 4004224:	ddc00d15 	stw	r23,52(sp)
 4004228:	dd400b15 	stw	r21,44(sp)
 400422c:	dd000a15 	stw	r20,40(sp)
 4004230:	dcc00915 	stw	r19,36(sp)
 4004234:	dc400715 	stw	r17,28(sp)
 4004238:	9481ffcc 	andi	r18,r18,2047
 400423c:	2c20703a 	and	r16,r5,r16
 4004240:	b2003fcc 	andi	r8,r22,255
 4004244:	90006126 	beq	r18,zero,40043cc <__divdf3+0x1d0>
 4004248:	0081ffc4 	movi	r2,2047
 400424c:	202b883a 	mov	r21,r4
 4004250:	90803726 	beq	r18,r2,4004330 <__divdf3+0x134>
 4004254:	80800434 	orhi	r2,r16,16
 4004258:	100490fa 	slli	r2,r2,3
 400425c:	2020d77a 	srli	r16,r4,29
 4004260:	202a90fa 	slli	r21,r4,3
 4004264:	94bf0044 	addi	r18,r18,-1023
 4004268:	80a0b03a 	or	r16,r16,r2
 400426c:	0013883a 	mov	r9,zero
 4004270:	000b883a 	mov	r5,zero
 4004274:	3806d53a 	srli	r3,r7,20
 4004278:	382ed7fa 	srli	r23,r7,31
 400427c:	04400434 	movhi	r17,16
 4004280:	8c7fffc4 	addi	r17,r17,-1
 4004284:	18c1ffcc 	andi	r3,r3,2047
 4004288:	3029883a 	mov	r20,r6
 400428c:	3c62703a 	and	r17,r7,r17
 4004290:	bf003fcc 	andi	fp,r23,255
 4004294:	18006e26 	beq	r3,zero,4004450 <__divdf3+0x254>
 4004298:	0081ffc4 	movi	r2,2047
 400429c:	18806626 	beq	r3,r2,4004438 <__divdf3+0x23c>
 40042a0:	88800434 	orhi	r2,r17,16
 40042a4:	100490fa 	slli	r2,r2,3
 40042a8:	3022d77a 	srli	r17,r6,29
 40042ac:	302890fa 	slli	r20,r6,3
 40042b0:	18ff0044 	addi	r3,r3,-1023
 40042b4:	88a2b03a 	or	r17,r17,r2
 40042b8:	000f883a 	mov	r7,zero
 40042bc:	b5e6f03a 	xor	r19,r22,r23
 40042c0:	3a4cb03a 	or	r6,r7,r9
 40042c4:	008003c4 	movi	r2,15
 40042c8:	9809883a 	mov	r4,r19
 40042cc:	90c7c83a 	sub	r3,r18,r3
 40042d0:	9cc03fcc 	andi	r19,r19,255
 40042d4:	11809636 	bltu	r2,r6,4004530 <__divdf3+0x334>
 40042d8:	300c90ba 	slli	r6,r6,2
 40042dc:	00810034 	movhi	r2,1024
 40042e0:	1090bc04 	addi	r2,r2,17136
 40042e4:	308d883a 	add	r6,r6,r2
 40042e8:	30800017 	ldw	r2,0(r6)
 40042ec:	1000683a 	jmp	r2
 40042f0:	04004530 	cmpltui	r16,zero,276
 40042f4:	04004368 	cmpgeui	r16,zero,269
 40042f8:	04004520 	cmpeqi	r16,zero,276
 40042fc:	0400435c 	xori	r16,zero,269
 4004300:	04004520 	cmpeqi	r16,zero,276
 4004304:	040044f4 	movhi	r16,275
 4004308:	04004520 	cmpeqi	r16,zero,276
 400430c:	0400435c 	xori	r16,zero,269
 4004310:	04004368 	cmpgeui	r16,zero,269
 4004314:	04004368 	cmpgeui	r16,zero,269
 4004318:	040044f4 	movhi	r16,275
 400431c:	0400435c 	xori	r16,zero,269
 4004320:	0400434c 	andi	r16,zero,269
 4004324:	0400434c 	andi	r16,zero,269
 4004328:	0400434c 	andi	r16,zero,269
 400432c:	040048b8 	rdprs	r16,zero,290
 4004330:	2404b03a 	or	r2,r4,r16
 4004334:	10006c1e 	bne	r2,zero,40044e8 <__divdf3+0x2ec>
 4004338:	02400204 	movi	r9,8
 400433c:	0021883a 	mov	r16,zero
 4004340:	002b883a 	mov	r21,zero
 4004344:	01400084 	movi	r5,2
 4004348:	003fca06 	br	4004274 <__alt_data_end+0xfc004274>
 400434c:	8023883a 	mov	r17,r16
 4004350:	a829883a 	mov	r20,r21
 4004354:	4039883a 	mov	fp,r8
 4004358:	280f883a 	mov	r7,r5
 400435c:	00800084 	movi	r2,2
 4004360:	3881601e 	bne	r7,r2,40048e4 <__divdf3+0x6e8>
 4004364:	e027883a 	mov	r19,fp
 4004368:	9900004c 	andi	r4,r19,1
 400436c:	0081ffc4 	movi	r2,2047
 4004370:	0021883a 	mov	r16,zero
 4004374:	002b883a 	mov	r21,zero
 4004378:	1004953a 	slli	r2,r2,20
 400437c:	20c03fcc 	andi	r3,r4,255
 4004380:	01400434 	movhi	r5,16
 4004384:	297fffc4 	addi	r5,r5,-1
 4004388:	180697fa 	slli	r3,r3,31
 400438c:	8160703a 	and	r16,r16,r5
 4004390:	80a0b03a 	or	r16,r16,r2
 4004394:	80c6b03a 	or	r3,r16,r3
 4004398:	a805883a 	mov	r2,r21
 400439c:	dfc00f17 	ldw	ra,60(sp)
 40043a0:	df000e17 	ldw	fp,56(sp)
 40043a4:	ddc00d17 	ldw	r23,52(sp)
 40043a8:	dd800c17 	ldw	r22,48(sp)
 40043ac:	dd400b17 	ldw	r21,44(sp)
 40043b0:	dd000a17 	ldw	r20,40(sp)
 40043b4:	dcc00917 	ldw	r19,36(sp)
 40043b8:	dc800817 	ldw	r18,32(sp)
 40043bc:	dc400717 	ldw	r17,28(sp)
 40043c0:	dc000617 	ldw	r16,24(sp)
 40043c4:	dec01004 	addi	sp,sp,64
 40043c8:	f800283a 	ret
 40043cc:	2404b03a 	or	r2,r4,r16
 40043d0:	2023883a 	mov	r17,r4
 40043d4:	10003f26 	beq	r2,zero,40044d4 <__divdf3+0x2d8>
 40043d8:	80015e26 	beq	r16,zero,4004954 <__divdf3+0x758>
 40043dc:	8009883a 	mov	r4,r16
 40043e0:	d9800215 	stw	r6,8(sp)
 40043e4:	d9c00515 	stw	r7,20(sp)
 40043e8:	da000415 	stw	r8,16(sp)
 40043ec:	40063c00 	call	40063c0 <__clzsi2>
 40043f0:	d9800217 	ldw	r6,8(sp)
 40043f4:	d9c00517 	ldw	r7,20(sp)
 40043f8:	da000417 	ldw	r8,16(sp)
 40043fc:	113ffd44 	addi	r4,r2,-11
 4004400:	00c00704 	movi	r3,28
 4004404:	19014f16 	blt	r3,r4,4004944 <__divdf3+0x748>
 4004408:	00c00744 	movi	r3,29
 400440c:	157ffe04 	addi	r21,r2,-8
 4004410:	1907c83a 	sub	r3,r3,r4
 4004414:	8560983a 	sll	r16,r16,r21
 4004418:	88c6d83a 	srl	r3,r17,r3
 400441c:	8d6a983a 	sll	r21,r17,r21
 4004420:	1c20b03a 	or	r16,r3,r16
 4004424:	1080fcc4 	addi	r2,r2,1011
 4004428:	00a5c83a 	sub	r18,zero,r2
 400442c:	0013883a 	mov	r9,zero
 4004430:	000b883a 	mov	r5,zero
 4004434:	003f8f06 	br	4004274 <__alt_data_end+0xfc004274>
 4004438:	3444b03a 	or	r2,r6,r17
 400443c:	1000231e 	bne	r2,zero,40044cc <__divdf3+0x2d0>
 4004440:	0023883a 	mov	r17,zero
 4004444:	0029883a 	mov	r20,zero
 4004448:	01c00084 	movi	r7,2
 400444c:	003f9b06 	br	40042bc <__alt_data_end+0xfc0042bc>
 4004450:	3444b03a 	or	r2,r6,r17
 4004454:	10001926 	beq	r2,zero,40044bc <__divdf3+0x2c0>
 4004458:	88014b26 	beq	r17,zero,4004988 <__divdf3+0x78c>
 400445c:	8809883a 	mov	r4,r17
 4004460:	d9400115 	stw	r5,4(sp)
 4004464:	d9800215 	stw	r6,8(sp)
 4004468:	da000415 	stw	r8,16(sp)
 400446c:	da400315 	stw	r9,12(sp)
 4004470:	40063c00 	call	40063c0 <__clzsi2>
 4004474:	d9400117 	ldw	r5,4(sp)
 4004478:	d9800217 	ldw	r6,8(sp)
 400447c:	da000417 	ldw	r8,16(sp)
 4004480:	da400317 	ldw	r9,12(sp)
 4004484:	113ffd44 	addi	r4,r2,-11
 4004488:	00c00704 	movi	r3,28
 400448c:	19013a16 	blt	r3,r4,4004978 <__divdf3+0x77c>
 4004490:	00c00744 	movi	r3,29
 4004494:	153ffe04 	addi	r20,r2,-8
 4004498:	1907c83a 	sub	r3,r3,r4
 400449c:	8d22983a 	sll	r17,r17,r20
 40044a0:	30c6d83a 	srl	r3,r6,r3
 40044a4:	3528983a 	sll	r20,r6,r20
 40044a8:	1c62b03a 	or	r17,r3,r17
 40044ac:	1080fcc4 	addi	r2,r2,1011
 40044b0:	0087c83a 	sub	r3,zero,r2
 40044b4:	000f883a 	mov	r7,zero
 40044b8:	003f8006 	br	40042bc <__alt_data_end+0xfc0042bc>
 40044bc:	0023883a 	mov	r17,zero
 40044c0:	0029883a 	mov	r20,zero
 40044c4:	01c00044 	movi	r7,1
 40044c8:	003f7c06 	br	40042bc <__alt_data_end+0xfc0042bc>
 40044cc:	01c000c4 	movi	r7,3
 40044d0:	003f7a06 	br	40042bc <__alt_data_end+0xfc0042bc>
 40044d4:	02400104 	movi	r9,4
 40044d8:	0021883a 	mov	r16,zero
 40044dc:	002b883a 	mov	r21,zero
 40044e0:	01400044 	movi	r5,1
 40044e4:	003f6306 	br	4004274 <__alt_data_end+0xfc004274>
 40044e8:	02400304 	movi	r9,12
 40044ec:	014000c4 	movi	r5,3
 40044f0:	003f6006 	br	4004274 <__alt_data_end+0xfc004274>
 40044f4:	04000434 	movhi	r16,16
 40044f8:	0009883a 	mov	r4,zero
 40044fc:	843fffc4 	addi	r16,r16,-1
 4004500:	057fffc4 	movi	r21,-1
 4004504:	0081ffc4 	movi	r2,2047
 4004508:	003f9b06 	br	4004378 <__alt_data_end+0xfc004378>
 400450c:	00c00044 	movi	r3,1
 4004510:	1887c83a 	sub	r3,r3,r2
 4004514:	01000e04 	movi	r4,56
 4004518:	20c1530e 	bge	r4,r3,4004a68 <__divdf3+0x86c>
 400451c:	9900004c 	andi	r4,r19,1
 4004520:	0005883a 	mov	r2,zero
 4004524:	0021883a 	mov	r16,zero
 4004528:	002b883a 	mov	r21,zero
 400452c:	003f9206 	br	4004378 <__alt_data_end+0xfc004378>
 4004530:	8c012e36 	bltu	r17,r16,40049ec <__divdf3+0x7f0>
 4004534:	84412c26 	beq	r16,r17,40049e8 <__divdf3+0x7ec>
 4004538:	a82f883a 	mov	r23,r21
 400453c:	18ffffc4 	addi	r3,r3,-1
 4004540:	002b883a 	mov	r21,zero
 4004544:	a004d63a 	srli	r2,r20,24
 4004548:	8822923a 	slli	r17,r17,8
 400454c:	a028923a 	slli	r20,r20,8
 4004550:	8009883a 	mov	r4,r16
 4004554:	88acb03a 	or	r22,r17,r2
 4004558:	dd000015 	stw	r20,0(sp)
 400455c:	b028d43a 	srli	r20,r22,16
 4004560:	d8c00215 	stw	r3,8(sp)
 4004564:	b4bfffcc 	andi	r18,r22,65535
 4004568:	a00b883a 	mov	r5,r20
 400456c:	40023a80 	call	40023a8 <__udivsi3>
 4004570:	100b883a 	mov	r5,r2
 4004574:	9009883a 	mov	r4,r18
 4004578:	1023883a 	mov	r17,r2
 400457c:	40024640 	call	4002464 <__mulsi3>
 4004580:	8009883a 	mov	r4,r16
 4004584:	a00b883a 	mov	r5,r20
 4004588:	1039883a 	mov	fp,r2
 400458c:	400240c0 	call	400240c <__umodsi3>
 4004590:	1004943a 	slli	r2,r2,16
 4004594:	b808d43a 	srli	r4,r23,16
 4004598:	d8c00217 	ldw	r3,8(sp)
 400459c:	2084b03a 	or	r2,r4,r2
 40045a0:	1700062e 	bgeu	r2,fp,40045bc <__divdf3+0x3c0>
 40045a4:	1585883a 	add	r2,r2,r22
 40045a8:	893fffc4 	addi	r4,r17,-1
 40045ac:	15811d36 	bltu	r2,r22,4004a24 <__divdf3+0x828>
 40045b0:	17011c2e 	bgeu	r2,fp,4004a24 <__divdf3+0x828>
 40045b4:	8c7fff84 	addi	r17,r17,-2
 40045b8:	1585883a 	add	r2,r2,r22
 40045bc:	1739c83a 	sub	fp,r2,fp
 40045c0:	a00b883a 	mov	r5,r20
 40045c4:	e009883a 	mov	r4,fp
 40045c8:	d8c00215 	stw	r3,8(sp)
 40045cc:	40023a80 	call	40023a8 <__udivsi3>
 40045d0:	100b883a 	mov	r5,r2
 40045d4:	9009883a 	mov	r4,r18
 40045d8:	1021883a 	mov	r16,r2
 40045dc:	40024640 	call	4002464 <__mulsi3>
 40045e0:	a00b883a 	mov	r5,r20
 40045e4:	e009883a 	mov	r4,fp
 40045e8:	d8800415 	stw	r2,16(sp)
 40045ec:	400240c0 	call	400240c <__umodsi3>
 40045f0:	1004943a 	slli	r2,r2,16
 40045f4:	da000417 	ldw	r8,16(sp)
 40045f8:	bdffffcc 	andi	r23,r23,65535
 40045fc:	b884b03a 	or	r2,r23,r2
 4004600:	d8c00217 	ldw	r3,8(sp)
 4004604:	1200062e 	bgeu	r2,r8,4004620 <__divdf3+0x424>
 4004608:	1585883a 	add	r2,r2,r22
 400460c:	813fffc4 	addi	r4,r16,-1
 4004610:	15810236 	bltu	r2,r22,4004a1c <__divdf3+0x820>
 4004614:	1201012e 	bgeu	r2,r8,4004a1c <__divdf3+0x820>
 4004618:	843fff84 	addi	r16,r16,-2
 400461c:	1585883a 	add	r2,r2,r22
 4004620:	8822943a 	slli	r17,r17,16
 4004624:	d9800017 	ldw	r6,0(sp)
 4004628:	1211c83a 	sub	r8,r2,r8
 400462c:	8c22b03a 	or	r17,r17,r16
 4004630:	373fffcc 	andi	fp,r6,65535
 4004634:	8abfffcc 	andi	r10,r17,65535
 4004638:	8820d43a 	srli	r16,r17,16
 400463c:	5009883a 	mov	r4,r10
 4004640:	e00b883a 	mov	r5,fp
 4004644:	302ed43a 	srli	r23,r6,16
 4004648:	d8c00215 	stw	r3,8(sp)
 400464c:	da000415 	stw	r8,16(sp)
 4004650:	da800115 	stw	r10,4(sp)
 4004654:	40024640 	call	4002464 <__mulsi3>
 4004658:	800b883a 	mov	r5,r16
 400465c:	e009883a 	mov	r4,fp
 4004660:	d8800515 	stw	r2,20(sp)
 4004664:	40024640 	call	4002464 <__mulsi3>
 4004668:	8009883a 	mov	r4,r16
 400466c:	b80b883a 	mov	r5,r23
 4004670:	d8800315 	stw	r2,12(sp)
 4004674:	40024640 	call	4002464 <__mulsi3>
 4004678:	da800117 	ldw	r10,4(sp)
 400467c:	b80b883a 	mov	r5,r23
 4004680:	1021883a 	mov	r16,r2
 4004684:	5009883a 	mov	r4,r10
 4004688:	40024640 	call	4002464 <__mulsi3>
 400468c:	d9c00517 	ldw	r7,20(sp)
 4004690:	da400317 	ldw	r9,12(sp)
 4004694:	d8c00217 	ldw	r3,8(sp)
 4004698:	3808d43a 	srli	r4,r7,16
 400469c:	1245883a 	add	r2,r2,r9
 40046a0:	da000417 	ldw	r8,16(sp)
 40046a4:	2085883a 	add	r2,r4,r2
 40046a8:	1240022e 	bgeu	r2,r9,40046b4 <__divdf3+0x4b8>
 40046ac:	01000074 	movhi	r4,1
 40046b0:	8121883a 	add	r16,r16,r4
 40046b4:	1008d43a 	srli	r4,r2,16
 40046b8:	1004943a 	slli	r2,r2,16
 40046bc:	39ffffcc 	andi	r7,r7,65535
 40046c0:	2409883a 	add	r4,r4,r16
 40046c4:	11c5883a 	add	r2,r2,r7
 40046c8:	4100bb36 	bltu	r8,r4,40049b8 <__divdf3+0x7bc>
 40046cc:	4100d726 	beq	r8,r4,4004a2c <__divdf3+0x830>
 40046d0:	4109c83a 	sub	r4,r8,r4
 40046d4:	a8a1c83a 	sub	r16,r21,r2
 40046d8:	ac2b803a 	cmpltu	r21,r21,r16
 40046dc:	256bc83a 	sub	r21,r4,r21
 40046e0:	b540d926 	beq	r22,r21,4004a48 <__divdf3+0x84c>
 40046e4:	a00b883a 	mov	r5,r20
 40046e8:	a809883a 	mov	r4,r21
 40046ec:	d8c00215 	stw	r3,8(sp)
 40046f0:	40023a80 	call	40023a8 <__udivsi3>
 40046f4:	100b883a 	mov	r5,r2
 40046f8:	9009883a 	mov	r4,r18
 40046fc:	d8800515 	stw	r2,20(sp)
 4004700:	40024640 	call	4002464 <__mulsi3>
 4004704:	a809883a 	mov	r4,r21
 4004708:	a00b883a 	mov	r5,r20
 400470c:	d8800415 	stw	r2,16(sp)
 4004710:	400240c0 	call	400240c <__umodsi3>
 4004714:	1004943a 	slli	r2,r2,16
 4004718:	8008d43a 	srli	r4,r16,16
 400471c:	da000417 	ldw	r8,16(sp)
 4004720:	d8c00217 	ldw	r3,8(sp)
 4004724:	2084b03a 	or	r2,r4,r2
 4004728:	d9c00517 	ldw	r7,20(sp)
 400472c:	1200062e 	bgeu	r2,r8,4004748 <__divdf3+0x54c>
 4004730:	1585883a 	add	r2,r2,r22
 4004734:	393fffc4 	addi	r4,r7,-1
 4004738:	1580c536 	bltu	r2,r22,4004a50 <__divdf3+0x854>
 400473c:	1200c42e 	bgeu	r2,r8,4004a50 <__divdf3+0x854>
 4004740:	39ffff84 	addi	r7,r7,-2
 4004744:	1585883a 	add	r2,r2,r22
 4004748:	122bc83a 	sub	r21,r2,r8
 400474c:	a00b883a 	mov	r5,r20
 4004750:	a809883a 	mov	r4,r21
 4004754:	d8c00215 	stw	r3,8(sp)
 4004758:	d9c00515 	stw	r7,20(sp)
 400475c:	40023a80 	call	40023a8 <__udivsi3>
 4004760:	9009883a 	mov	r4,r18
 4004764:	100b883a 	mov	r5,r2
 4004768:	d8800415 	stw	r2,16(sp)
 400476c:	40024640 	call	4002464 <__mulsi3>
 4004770:	a809883a 	mov	r4,r21
 4004774:	a00b883a 	mov	r5,r20
 4004778:	1025883a 	mov	r18,r2
 400477c:	400240c0 	call	400240c <__umodsi3>
 4004780:	1004943a 	slli	r2,r2,16
 4004784:	813fffcc 	andi	r4,r16,65535
 4004788:	d8c00217 	ldw	r3,8(sp)
 400478c:	20a0b03a 	or	r16,r4,r2
 4004790:	d9c00517 	ldw	r7,20(sp)
 4004794:	da000417 	ldw	r8,16(sp)
 4004798:	8480062e 	bgeu	r16,r18,40047b4 <__divdf3+0x5b8>
 400479c:	85a1883a 	add	r16,r16,r22
 40047a0:	40bfffc4 	addi	r2,r8,-1
 40047a4:	8580ac36 	bltu	r16,r22,4004a58 <__divdf3+0x85c>
 40047a8:	8480ab2e 	bgeu	r16,r18,4004a58 <__divdf3+0x85c>
 40047ac:	423fff84 	addi	r8,r8,-2
 40047b0:	85a1883a 	add	r16,r16,r22
 40047b4:	3804943a 	slli	r2,r7,16
 40047b8:	84a1c83a 	sub	r16,r16,r18
 40047bc:	e009883a 	mov	r4,fp
 40047c0:	1228b03a 	or	r20,r2,r8
 40047c4:	a1ffffcc 	andi	r7,r20,65535
 40047c8:	a024d43a 	srli	r18,r20,16
 40047cc:	380b883a 	mov	r5,r7
 40047d0:	d8c00215 	stw	r3,8(sp)
 40047d4:	d9c00515 	stw	r7,20(sp)
 40047d8:	40024640 	call	4002464 <__mulsi3>
 40047dc:	900b883a 	mov	r5,r18
 40047e0:	e009883a 	mov	r4,fp
 40047e4:	102b883a 	mov	r21,r2
 40047e8:	40024640 	call	4002464 <__mulsi3>
 40047ec:	900b883a 	mov	r5,r18
 40047f0:	b809883a 	mov	r4,r23
 40047f4:	1039883a 	mov	fp,r2
 40047f8:	40024640 	call	4002464 <__mulsi3>
 40047fc:	d9c00517 	ldw	r7,20(sp)
 4004800:	b80b883a 	mov	r5,r23
 4004804:	1025883a 	mov	r18,r2
 4004808:	3809883a 	mov	r4,r7
 400480c:	40024640 	call	4002464 <__mulsi3>
 4004810:	a808d43a 	srli	r4,r21,16
 4004814:	1705883a 	add	r2,r2,fp
 4004818:	d8c00217 	ldw	r3,8(sp)
 400481c:	2085883a 	add	r2,r4,r2
 4004820:	1700022e 	bgeu	r2,fp,400482c <__divdf3+0x630>
 4004824:	01000074 	movhi	r4,1
 4004828:	9125883a 	add	r18,r18,r4
 400482c:	1008d43a 	srli	r4,r2,16
 4004830:	1004943a 	slli	r2,r2,16
 4004834:	ad7fffcc 	andi	r21,r21,65535
 4004838:	2489883a 	add	r4,r4,r18
 400483c:	1545883a 	add	r2,r2,r21
 4004840:	81003836 	bltu	r16,r4,4004924 <__divdf3+0x728>
 4004844:	81003626 	beq	r16,r4,4004920 <__divdf3+0x724>
 4004848:	a5000054 	ori	r20,r20,1
 400484c:	1880ffc4 	addi	r2,r3,1023
 4004850:	00bf2e0e 	bge	zero,r2,400450c <__alt_data_end+0xfc00450c>
 4004854:	a10001cc 	andi	r4,r20,7
 4004858:	20000726 	beq	r4,zero,4004878 <__divdf3+0x67c>
 400485c:	a10003cc 	andi	r4,r20,15
 4004860:	01400104 	movi	r5,4
 4004864:	21400426 	beq	r4,r5,4004878 <__divdf3+0x67c>
 4004868:	a149883a 	add	r4,r20,r5
 400486c:	2529803a 	cmpltu	r20,r4,r20
 4004870:	8d23883a 	add	r17,r17,r20
 4004874:	2029883a 	mov	r20,r4
 4004878:	8900402c 	andhi	r4,r17,256
 400487c:	20000426 	beq	r4,zero,4004890 <__divdf3+0x694>
 4004880:	18810004 	addi	r2,r3,1024
 4004884:	00ffc034 	movhi	r3,65280
 4004888:	18ffffc4 	addi	r3,r3,-1
 400488c:	88e2703a 	and	r17,r17,r3
 4004890:	00c1ff84 	movi	r3,2046
 4004894:	18beb416 	blt	r3,r2,4004368 <__alt_data_end+0xfc004368>
 4004898:	a028d0fa 	srli	r20,r20,3
 400489c:	882a977a 	slli	r21,r17,29
 40048a0:	8820927a 	slli	r16,r17,9
 40048a4:	1081ffcc 	andi	r2,r2,2047
 40048a8:	ad2ab03a 	or	r21,r21,r20
 40048ac:	8020d33a 	srli	r16,r16,12
 40048b0:	9900004c 	andi	r4,r19,1
 40048b4:	003eb006 	br	4004378 <__alt_data_end+0xfc004378>
 40048b8:	8080022c 	andhi	r2,r16,8
 40048bc:	10001226 	beq	r2,zero,4004908 <__divdf3+0x70c>
 40048c0:	8880022c 	andhi	r2,r17,8
 40048c4:	1000101e 	bne	r2,zero,4004908 <__divdf3+0x70c>
 40048c8:	00800434 	movhi	r2,16
 40048cc:	8c000234 	orhi	r16,r17,8
 40048d0:	10bfffc4 	addi	r2,r2,-1
 40048d4:	b809883a 	mov	r4,r23
 40048d8:	80a0703a 	and	r16,r16,r2
 40048dc:	a02b883a 	mov	r21,r20
 40048e0:	003f0806 	br	4004504 <__alt_data_end+0xfc004504>
 40048e4:	008000c4 	movi	r2,3
 40048e8:	3880b126 	beq	r7,r2,4004bb0 <__divdf3+0x9b4>
 40048ec:	00800044 	movi	r2,1
 40048f0:	38805b1e 	bne	r7,r2,4004a60 <__divdf3+0x864>
 40048f4:	e009883a 	mov	r4,fp
 40048f8:	0005883a 	mov	r2,zero
 40048fc:	0021883a 	mov	r16,zero
 4004900:	002b883a 	mov	r21,zero
 4004904:	003e9c06 	br	4004378 <__alt_data_end+0xfc004378>
 4004908:	00800434 	movhi	r2,16
 400490c:	84000234 	orhi	r16,r16,8
 4004910:	10bfffc4 	addi	r2,r2,-1
 4004914:	b009883a 	mov	r4,r22
 4004918:	80a0703a 	and	r16,r16,r2
 400491c:	003ef906 	br	4004504 <__alt_data_end+0xfc004504>
 4004920:	103fca26 	beq	r2,zero,400484c <__alt_data_end+0xfc00484c>
 4004924:	b421883a 	add	r16,r22,r16
 4004928:	a17fffc4 	addi	r5,r20,-1
 400492c:	8580422e 	bgeu	r16,r22,4004a38 <__divdf3+0x83c>
 4004930:	2829883a 	mov	r20,r5
 4004934:	813fc41e 	bne	r16,r4,4004848 <__alt_data_end+0xfc004848>
 4004938:	d9800017 	ldw	r6,0(sp)
 400493c:	30bfc21e 	bne	r6,r2,4004848 <__alt_data_end+0xfc004848>
 4004940:	003fc206 	br	400484c <__alt_data_end+0xfc00484c>
 4004944:	143ff604 	addi	r16,r2,-40
 4004948:	8c20983a 	sll	r16,r17,r16
 400494c:	002b883a 	mov	r21,zero
 4004950:	003eb406 	br	4004424 <__alt_data_end+0xfc004424>
 4004954:	d9800215 	stw	r6,8(sp)
 4004958:	d9c00515 	stw	r7,20(sp)
 400495c:	da000415 	stw	r8,16(sp)
 4004960:	40063c00 	call	40063c0 <__clzsi2>
 4004964:	10800804 	addi	r2,r2,32
 4004968:	da000417 	ldw	r8,16(sp)
 400496c:	d9c00517 	ldw	r7,20(sp)
 4004970:	d9800217 	ldw	r6,8(sp)
 4004974:	003ea106 	br	40043fc <__alt_data_end+0xfc0043fc>
 4004978:	147ff604 	addi	r17,r2,-40
 400497c:	3462983a 	sll	r17,r6,r17
 4004980:	0029883a 	mov	r20,zero
 4004984:	003ec906 	br	40044ac <__alt_data_end+0xfc0044ac>
 4004988:	3009883a 	mov	r4,r6
 400498c:	d9400115 	stw	r5,4(sp)
 4004990:	d9800215 	stw	r6,8(sp)
 4004994:	da000415 	stw	r8,16(sp)
 4004998:	da400315 	stw	r9,12(sp)
 400499c:	40063c00 	call	40063c0 <__clzsi2>
 40049a0:	10800804 	addi	r2,r2,32
 40049a4:	da400317 	ldw	r9,12(sp)
 40049a8:	da000417 	ldw	r8,16(sp)
 40049ac:	d9800217 	ldw	r6,8(sp)
 40049b0:	d9400117 	ldw	r5,4(sp)
 40049b4:	003eb306 	br	4004484 <__alt_data_end+0xfc004484>
 40049b8:	d9800017 	ldw	r6,0(sp)
 40049bc:	a9ab883a 	add	r21,r21,r6
 40049c0:	a98b803a 	cmpltu	r5,r21,r6
 40049c4:	2d8b883a 	add	r5,r5,r22
 40049c8:	2a11883a 	add	r8,r5,r8
 40049cc:	897fffc4 	addi	r5,r17,-1
 40049d0:	b2000c2e 	bgeu	r22,r8,4004a04 <__divdf3+0x808>
 40049d4:	41003f36 	bltu	r8,r4,4004ad4 <__divdf3+0x8d8>
 40049d8:	22006c26 	beq	r4,r8,4004b8c <__divdf3+0x990>
 40049dc:	4109c83a 	sub	r4,r8,r4
 40049e0:	2823883a 	mov	r17,r5
 40049e4:	003f3b06 	br	40046d4 <__alt_data_end+0xfc0046d4>
 40049e8:	ad3ed336 	bltu	r21,r20,4004538 <__alt_data_end+0xfc004538>
 40049ec:	a804d07a 	srli	r2,r21,1
 40049f0:	802e97fa 	slli	r23,r16,31
 40049f4:	a82a97fa 	slli	r21,r21,31
 40049f8:	8020d07a 	srli	r16,r16,1
 40049fc:	b8aeb03a 	or	r23,r23,r2
 4004a00:	003ed006 	br	4004544 <__alt_data_end+0xfc004544>
 4004a04:	b23ff51e 	bne	r22,r8,40049dc <__alt_data_end+0xfc0049dc>
 4004a08:	d9800017 	ldw	r6,0(sp)
 4004a0c:	a9bff12e 	bgeu	r21,r6,40049d4 <__alt_data_end+0xfc0049d4>
 4004a10:	b109c83a 	sub	r4,r22,r4
 4004a14:	2823883a 	mov	r17,r5
 4004a18:	003f2e06 	br	40046d4 <__alt_data_end+0xfc0046d4>
 4004a1c:	2021883a 	mov	r16,r4
 4004a20:	003eff06 	br	4004620 <__alt_data_end+0xfc004620>
 4004a24:	2023883a 	mov	r17,r4
 4004a28:	003ee406 	br	40045bc <__alt_data_end+0xfc0045bc>
 4004a2c:	a8bfe236 	bltu	r21,r2,40049b8 <__alt_data_end+0xfc0049b8>
 4004a30:	0009883a 	mov	r4,zero
 4004a34:	003f2706 	br	40046d4 <__alt_data_end+0xfc0046d4>
 4004a38:	81002d36 	bltu	r16,r4,4004af0 <__divdf3+0x8f4>
 4004a3c:	24005626 	beq	r4,r16,4004b98 <__divdf3+0x99c>
 4004a40:	2829883a 	mov	r20,r5
 4004a44:	003f8006 	br	4004848 <__alt_data_end+0xfc004848>
 4004a48:	053fffc4 	movi	r20,-1
 4004a4c:	003f7f06 	br	400484c <__alt_data_end+0xfc00484c>
 4004a50:	200f883a 	mov	r7,r4
 4004a54:	003f3c06 	br	4004748 <__alt_data_end+0xfc004748>
 4004a58:	1011883a 	mov	r8,r2
 4004a5c:	003f5506 	br	40047b4 <__alt_data_end+0xfc0047b4>
 4004a60:	e027883a 	mov	r19,fp
 4004a64:	003f7906 	br	400484c <__alt_data_end+0xfc00484c>
 4004a68:	010007c4 	movi	r4,31
 4004a6c:	20c02816 	blt	r4,r3,4004b10 <__divdf3+0x914>
 4004a70:	00800804 	movi	r2,32
 4004a74:	10c5c83a 	sub	r2,r2,r3
 4004a78:	888a983a 	sll	r5,r17,r2
 4004a7c:	a0c8d83a 	srl	r4,r20,r3
 4004a80:	a084983a 	sll	r2,r20,r2
 4004a84:	88e2d83a 	srl	r17,r17,r3
 4004a88:	2906b03a 	or	r3,r5,r4
 4004a8c:	1004c03a 	cmpne	r2,r2,zero
 4004a90:	1886b03a 	or	r3,r3,r2
 4004a94:	188001cc 	andi	r2,r3,7
 4004a98:	10000726 	beq	r2,zero,4004ab8 <__divdf3+0x8bc>
 4004a9c:	188003cc 	andi	r2,r3,15
 4004aa0:	01000104 	movi	r4,4
 4004aa4:	11000426 	beq	r2,r4,4004ab8 <__divdf3+0x8bc>
 4004aa8:	1805883a 	mov	r2,r3
 4004aac:	10c00104 	addi	r3,r2,4
 4004ab0:	1885803a 	cmpltu	r2,r3,r2
 4004ab4:	88a3883a 	add	r17,r17,r2
 4004ab8:	8880202c 	andhi	r2,r17,128
 4004abc:	10002926 	beq	r2,zero,4004b64 <__divdf3+0x968>
 4004ac0:	9900004c 	andi	r4,r19,1
 4004ac4:	00800044 	movi	r2,1
 4004ac8:	0021883a 	mov	r16,zero
 4004acc:	002b883a 	mov	r21,zero
 4004ad0:	003e2906 	br	4004378 <__alt_data_end+0xfc004378>
 4004ad4:	d9800017 	ldw	r6,0(sp)
 4004ad8:	8c7fff84 	addi	r17,r17,-2
 4004adc:	a9ab883a 	add	r21,r21,r6
 4004ae0:	a98b803a 	cmpltu	r5,r21,r6
 4004ae4:	2d8b883a 	add	r5,r5,r22
 4004ae8:	2a11883a 	add	r8,r5,r8
 4004aec:	003ef806 	br	40046d0 <__alt_data_end+0xfc0046d0>
 4004af0:	d9800017 	ldw	r6,0(sp)
 4004af4:	318f883a 	add	r7,r6,r6
 4004af8:	398b803a 	cmpltu	r5,r7,r6
 4004afc:	2d8d883a 	add	r6,r5,r22
 4004b00:	81a1883a 	add	r16,r16,r6
 4004b04:	a17fff84 	addi	r5,r20,-2
 4004b08:	d9c00015 	stw	r7,0(sp)
 4004b0c:	003f8806 	br	4004930 <__alt_data_end+0xfc004930>
 4004b10:	013ff844 	movi	r4,-31
 4004b14:	2085c83a 	sub	r2,r4,r2
 4004b18:	8888d83a 	srl	r4,r17,r2
 4004b1c:	00800804 	movi	r2,32
 4004b20:	18802126 	beq	r3,r2,4004ba8 <__divdf3+0x9ac>
 4004b24:	04001004 	movi	r16,64
 4004b28:	80c7c83a 	sub	r3,r16,r3
 4004b2c:	88e0983a 	sll	r16,r17,r3
 4004b30:	8504b03a 	or	r2,r16,r20
 4004b34:	1004c03a 	cmpne	r2,r2,zero
 4004b38:	2084b03a 	or	r2,r4,r2
 4004b3c:	144001cc 	andi	r17,r2,7
 4004b40:	88000d1e 	bne	r17,zero,4004b78 <__divdf3+0x97c>
 4004b44:	0021883a 	mov	r16,zero
 4004b48:	102ad0fa 	srli	r21,r2,3
 4004b4c:	9900004c 	andi	r4,r19,1
 4004b50:	0005883a 	mov	r2,zero
 4004b54:	ac6ab03a 	or	r21,r21,r17
 4004b58:	003e0706 	br	4004378 <__alt_data_end+0xfc004378>
 4004b5c:	1007883a 	mov	r3,r2
 4004b60:	0023883a 	mov	r17,zero
 4004b64:	8820927a 	slli	r16,r17,9
 4004b68:	1805883a 	mov	r2,r3
 4004b6c:	8822977a 	slli	r17,r17,29
 4004b70:	8020d33a 	srli	r16,r16,12
 4004b74:	003ff406 	br	4004b48 <__alt_data_end+0xfc004b48>
 4004b78:	10c003cc 	andi	r3,r2,15
 4004b7c:	01000104 	movi	r4,4
 4004b80:	193ff626 	beq	r3,r4,4004b5c <__alt_data_end+0xfc004b5c>
 4004b84:	0023883a 	mov	r17,zero
 4004b88:	003fc806 	br	4004aac <__alt_data_end+0xfc004aac>
 4004b8c:	a8bfd136 	bltu	r21,r2,4004ad4 <__alt_data_end+0xfc004ad4>
 4004b90:	2823883a 	mov	r17,r5
 4004b94:	003fa606 	br	4004a30 <__alt_data_end+0xfc004a30>
 4004b98:	d9800017 	ldw	r6,0(sp)
 4004b9c:	30bfd436 	bltu	r6,r2,4004af0 <__alt_data_end+0xfc004af0>
 4004ba0:	2829883a 	mov	r20,r5
 4004ba4:	003f6406 	br	4004938 <__alt_data_end+0xfc004938>
 4004ba8:	0021883a 	mov	r16,zero
 4004bac:	003fe006 	br	4004b30 <__alt_data_end+0xfc004b30>
 4004bb0:	00800434 	movhi	r2,16
 4004bb4:	8c000234 	orhi	r16,r17,8
 4004bb8:	10bfffc4 	addi	r2,r2,-1
 4004bbc:	e009883a 	mov	r4,fp
 4004bc0:	80a0703a 	and	r16,r16,r2
 4004bc4:	a02b883a 	mov	r21,r20
 4004bc8:	003e4e06 	br	4004504 <__alt_data_end+0xfc004504>

04004bcc <__gedf2>:
 4004bcc:	2804d53a 	srli	r2,r5,20
 4004bd0:	3806d53a 	srli	r3,r7,20
 4004bd4:	02000434 	movhi	r8,16
 4004bd8:	423fffc4 	addi	r8,r8,-1
 4004bdc:	1081ffcc 	andi	r2,r2,2047
 4004be0:	0241ffc4 	movi	r9,2047
 4004be4:	2a14703a 	and	r10,r5,r8
 4004be8:	18c1ffcc 	andi	r3,r3,2047
 4004bec:	3a10703a 	and	r8,r7,r8
 4004bf0:	280ad7fa 	srli	r5,r5,31
 4004bf4:	380ed7fa 	srli	r7,r7,31
 4004bf8:	12401d26 	beq	r2,r9,4004c70 <__gedf2+0xa4>
 4004bfc:	0241ffc4 	movi	r9,2047
 4004c00:	1a401226 	beq	r3,r9,4004c4c <__gedf2+0x80>
 4004c04:	1000081e 	bne	r2,zero,4004c28 <__gedf2+0x5c>
 4004c08:	2296b03a 	or	r11,r4,r10
 4004c0c:	5813003a 	cmpeq	r9,r11,zero
 4004c10:	1800091e 	bne	r3,zero,4004c38 <__gedf2+0x6c>
 4004c14:	3218b03a 	or	r12,r6,r8
 4004c18:	6000071e 	bne	r12,zero,4004c38 <__gedf2+0x6c>
 4004c1c:	0005883a 	mov	r2,zero
 4004c20:	5800101e 	bne	r11,zero,4004c64 <__gedf2+0x98>
 4004c24:	f800283a 	ret
 4004c28:	18000c1e 	bne	r3,zero,4004c5c <__gedf2+0x90>
 4004c2c:	3212b03a 	or	r9,r6,r8
 4004c30:	48000c26 	beq	r9,zero,4004c64 <__gedf2+0x98>
 4004c34:	0013883a 	mov	r9,zero
 4004c38:	39c03fcc 	andi	r7,r7,255
 4004c3c:	48000826 	beq	r9,zero,4004c60 <__gedf2+0x94>
 4004c40:	38000926 	beq	r7,zero,4004c68 <__gedf2+0x9c>
 4004c44:	00800044 	movi	r2,1
 4004c48:	f800283a 	ret
 4004c4c:	3212b03a 	or	r9,r6,r8
 4004c50:	483fec26 	beq	r9,zero,4004c04 <__alt_data_end+0xfc004c04>
 4004c54:	00bfff84 	movi	r2,-2
 4004c58:	f800283a 	ret
 4004c5c:	39c03fcc 	andi	r7,r7,255
 4004c60:	29c00626 	beq	r5,r7,4004c7c <__gedf2+0xb0>
 4004c64:	283ff726 	beq	r5,zero,4004c44 <__alt_data_end+0xfc004c44>
 4004c68:	00bfffc4 	movi	r2,-1
 4004c6c:	f800283a 	ret
 4004c70:	2292b03a 	or	r9,r4,r10
 4004c74:	483fe126 	beq	r9,zero,4004bfc <__alt_data_end+0xfc004bfc>
 4004c78:	003ff606 	br	4004c54 <__alt_data_end+0xfc004c54>
 4004c7c:	18bff916 	blt	r3,r2,4004c64 <__alt_data_end+0xfc004c64>
 4004c80:	10c00316 	blt	r2,r3,4004c90 <__gedf2+0xc4>
 4004c84:	42bff736 	bltu	r8,r10,4004c64 <__alt_data_end+0xfc004c64>
 4004c88:	52000326 	beq	r10,r8,4004c98 <__gedf2+0xcc>
 4004c8c:	5200042e 	bgeu	r10,r8,4004ca0 <__gedf2+0xd4>
 4004c90:	283fec1e 	bne	r5,zero,4004c44 <__alt_data_end+0xfc004c44>
 4004c94:	003ff406 	br	4004c68 <__alt_data_end+0xfc004c68>
 4004c98:	313ff236 	bltu	r6,r4,4004c64 <__alt_data_end+0xfc004c64>
 4004c9c:	21bffc36 	bltu	r4,r6,4004c90 <__alt_data_end+0xfc004c90>
 4004ca0:	0005883a 	mov	r2,zero
 4004ca4:	f800283a 	ret

04004ca8 <__ledf2>:
 4004ca8:	2804d53a 	srli	r2,r5,20
 4004cac:	3810d53a 	srli	r8,r7,20
 4004cb0:	00c00434 	movhi	r3,16
 4004cb4:	18ffffc4 	addi	r3,r3,-1
 4004cb8:	1081ffcc 	andi	r2,r2,2047
 4004cbc:	0241ffc4 	movi	r9,2047
 4004cc0:	28d4703a 	and	r10,r5,r3
 4004cc4:	4201ffcc 	andi	r8,r8,2047
 4004cc8:	38c6703a 	and	r3,r7,r3
 4004ccc:	280ad7fa 	srli	r5,r5,31
 4004cd0:	380ed7fa 	srli	r7,r7,31
 4004cd4:	12401f26 	beq	r2,r9,4004d54 <__ledf2+0xac>
 4004cd8:	0241ffc4 	movi	r9,2047
 4004cdc:	42401426 	beq	r8,r9,4004d30 <__ledf2+0x88>
 4004ce0:	1000091e 	bne	r2,zero,4004d08 <__ledf2+0x60>
 4004ce4:	2296b03a 	or	r11,r4,r10
 4004ce8:	5813003a 	cmpeq	r9,r11,zero
 4004cec:	29403fcc 	andi	r5,r5,255
 4004cf0:	40000a1e 	bne	r8,zero,4004d1c <__ledf2+0x74>
 4004cf4:	30d8b03a 	or	r12,r6,r3
 4004cf8:	6000081e 	bne	r12,zero,4004d1c <__ledf2+0x74>
 4004cfc:	0005883a 	mov	r2,zero
 4004d00:	5800111e 	bne	r11,zero,4004d48 <__ledf2+0xa0>
 4004d04:	f800283a 	ret
 4004d08:	29403fcc 	andi	r5,r5,255
 4004d0c:	40000c1e 	bne	r8,zero,4004d40 <__ledf2+0x98>
 4004d10:	30d2b03a 	or	r9,r6,r3
 4004d14:	48000c26 	beq	r9,zero,4004d48 <__ledf2+0xa0>
 4004d18:	0013883a 	mov	r9,zero
 4004d1c:	39c03fcc 	andi	r7,r7,255
 4004d20:	48000826 	beq	r9,zero,4004d44 <__ledf2+0x9c>
 4004d24:	38001126 	beq	r7,zero,4004d6c <__ledf2+0xc4>
 4004d28:	00800044 	movi	r2,1
 4004d2c:	f800283a 	ret
 4004d30:	30d2b03a 	or	r9,r6,r3
 4004d34:	483fea26 	beq	r9,zero,4004ce0 <__alt_data_end+0xfc004ce0>
 4004d38:	00800084 	movi	r2,2
 4004d3c:	f800283a 	ret
 4004d40:	39c03fcc 	andi	r7,r7,255
 4004d44:	39400726 	beq	r7,r5,4004d64 <__ledf2+0xbc>
 4004d48:	2800081e 	bne	r5,zero,4004d6c <__ledf2+0xc4>
 4004d4c:	00800044 	movi	r2,1
 4004d50:	f800283a 	ret
 4004d54:	2292b03a 	or	r9,r4,r10
 4004d58:	483fdf26 	beq	r9,zero,4004cd8 <__alt_data_end+0xfc004cd8>
 4004d5c:	00800084 	movi	r2,2
 4004d60:	f800283a 	ret
 4004d64:	4080030e 	bge	r8,r2,4004d74 <__ledf2+0xcc>
 4004d68:	383fef26 	beq	r7,zero,4004d28 <__alt_data_end+0xfc004d28>
 4004d6c:	00bfffc4 	movi	r2,-1
 4004d70:	f800283a 	ret
 4004d74:	123feb16 	blt	r2,r8,4004d24 <__alt_data_end+0xfc004d24>
 4004d78:	1abff336 	bltu	r3,r10,4004d48 <__alt_data_end+0xfc004d48>
 4004d7c:	50c00326 	beq	r10,r3,4004d8c <__ledf2+0xe4>
 4004d80:	50c0042e 	bgeu	r10,r3,4004d94 <__ledf2+0xec>
 4004d84:	283fe81e 	bne	r5,zero,4004d28 <__alt_data_end+0xfc004d28>
 4004d88:	003ff806 	br	4004d6c <__alt_data_end+0xfc004d6c>
 4004d8c:	313fee36 	bltu	r6,r4,4004d48 <__alt_data_end+0xfc004d48>
 4004d90:	21bffc36 	bltu	r4,r6,4004d84 <__alt_data_end+0xfc004d84>
 4004d94:	0005883a 	mov	r2,zero
 4004d98:	f800283a 	ret

04004d9c <__muldf3>:
 4004d9c:	deffee04 	addi	sp,sp,-72
 4004da0:	dd000c15 	stw	r20,48(sp)
 4004da4:	2828d53a 	srli	r20,r5,20
 4004da8:	ddc00f15 	stw	r23,60(sp)
 4004dac:	282ed7fa 	srli	r23,r5,31
 4004db0:	dc000815 	stw	r16,32(sp)
 4004db4:	04000434 	movhi	r16,16
 4004db8:	dcc00b15 	stw	r19,44(sp)
 4004dbc:	843fffc4 	addi	r16,r16,-1
 4004dc0:	dfc01115 	stw	ra,68(sp)
 4004dc4:	df001015 	stw	fp,64(sp)
 4004dc8:	dd800e15 	stw	r22,56(sp)
 4004dcc:	dd400d15 	stw	r21,52(sp)
 4004dd0:	dc800a15 	stw	r18,40(sp)
 4004dd4:	dc400915 	stw	r17,36(sp)
 4004dd8:	a501ffcc 	andi	r20,r20,2047
 4004ddc:	2c20703a 	and	r16,r5,r16
 4004de0:	b827883a 	mov	r19,r23
 4004de4:	ba403fcc 	andi	r9,r23,255
 4004de8:	a0006026 	beq	r20,zero,4004f6c <__muldf3+0x1d0>
 4004dec:	0081ffc4 	movi	r2,2047
 4004df0:	202d883a 	mov	r22,r4
 4004df4:	a0803626 	beq	r20,r2,4004ed0 <__muldf3+0x134>
 4004df8:	84000434 	orhi	r16,r16,16
 4004dfc:	200ad77a 	srli	r5,r4,29
 4004e00:	800490fa 	slli	r2,r16,3
 4004e04:	202c90fa 	slli	r22,r4,3
 4004e08:	a53f0044 	addi	r20,r20,-1023
 4004e0c:	28a0b03a 	or	r16,r5,r2
 4004e10:	002b883a 	mov	r21,zero
 4004e14:	000b883a 	mov	r5,zero
 4004e18:	3804d53a 	srli	r2,r7,20
 4004e1c:	3838d7fa 	srli	fp,r7,31
 4004e20:	04400434 	movhi	r17,16
 4004e24:	8c7fffc4 	addi	r17,r17,-1
 4004e28:	1081ffcc 	andi	r2,r2,2047
 4004e2c:	3025883a 	mov	r18,r6
 4004e30:	3c62703a 	and	r17,r7,r17
 4004e34:	e2803fcc 	andi	r10,fp,255
 4004e38:	10006d26 	beq	r2,zero,4004ff0 <__muldf3+0x254>
 4004e3c:	00c1ffc4 	movi	r3,2047
 4004e40:	10c06526 	beq	r2,r3,4004fd8 <__muldf3+0x23c>
 4004e44:	8c400434 	orhi	r17,r17,16
 4004e48:	300ed77a 	srli	r7,r6,29
 4004e4c:	880690fa 	slli	r3,r17,3
 4004e50:	302490fa 	slli	r18,r6,3
 4004e54:	10bf0044 	addi	r2,r2,-1023
 4004e58:	38e2b03a 	or	r17,r7,r3
 4004e5c:	000f883a 	mov	r7,zero
 4004e60:	a087883a 	add	r3,r20,r2
 4004e64:	010003c4 	movi	r4,15
 4004e68:	3d44b03a 	or	r2,r7,r21
 4004e6c:	e5ccf03a 	xor	r6,fp,r23
 4004e70:	1a000044 	addi	r8,r3,1
 4004e74:	20809b36 	bltu	r4,r2,40050e4 <__muldf3+0x348>
 4004e78:	100490ba 	slli	r2,r2,2
 4004e7c:	01010034 	movhi	r4,1024
 4004e80:	2113a404 	addi	r4,r4,20112
 4004e84:	1105883a 	add	r2,r2,r4
 4004e88:	10800017 	ldw	r2,0(r2)
 4004e8c:	1000683a 	jmp	r2
 4004e90:	040050e4 	muli	r16,zero,323
 4004e94:	04004ef0 	cmpltui	r16,zero,315
 4004e98:	04004ef0 	cmpltui	r16,zero,315
 4004e9c:	04004eec 	andhi	r16,zero,315
 4004ea0:	040050c0 	call	40050c <__alt_mem_sdram-0x3bffaf4>
 4004ea4:	040050c0 	call	40050c <__alt_mem_sdram-0x3bffaf4>
 4004ea8:	040050a8 	cmpgeui	r16,zero,322
 4004eac:	04004eec 	andhi	r16,zero,315
 4004eb0:	040050c0 	call	40050c <__alt_mem_sdram-0x3bffaf4>
 4004eb4:	040050a8 	cmpgeui	r16,zero,322
 4004eb8:	040050c0 	call	40050c <__alt_mem_sdram-0x3bffaf4>
 4004ebc:	04004eec 	andhi	r16,zero,315
 4004ec0:	040050d0 	cmplti	r16,zero,323
 4004ec4:	040050d0 	cmplti	r16,zero,323
 4004ec8:	040050d0 	cmplti	r16,zero,323
 4004ecc:	04005430 	cmpltui	r16,zero,336
 4004ed0:	2404b03a 	or	r2,r4,r16
 4004ed4:	1000711e 	bne	r2,zero,400509c <__muldf3+0x300>
 4004ed8:	05400204 	movi	r21,8
 4004edc:	0021883a 	mov	r16,zero
 4004ee0:	002d883a 	mov	r22,zero
 4004ee4:	01400084 	movi	r5,2
 4004ee8:	003fcb06 	br	4004e18 <__alt_data_end+0xfc004e18>
 4004eec:	500d883a 	mov	r6,r10
 4004ef0:	00800084 	movi	r2,2
 4004ef4:	38805926 	beq	r7,r2,400505c <__muldf3+0x2c0>
 4004ef8:	008000c4 	movi	r2,3
 4004efc:	3881bb26 	beq	r7,r2,40055ec <__muldf3+0x850>
 4004f00:	00800044 	movi	r2,1
 4004f04:	3881961e 	bne	r7,r2,4005560 <__muldf3+0x7c4>
 4004f08:	3027883a 	mov	r19,r6
 4004f0c:	0005883a 	mov	r2,zero
 4004f10:	0021883a 	mov	r16,zero
 4004f14:	002d883a 	mov	r22,zero
 4004f18:	1004953a 	slli	r2,r2,20
 4004f1c:	98c03fcc 	andi	r3,r19,255
 4004f20:	04400434 	movhi	r17,16
 4004f24:	8c7fffc4 	addi	r17,r17,-1
 4004f28:	180697fa 	slli	r3,r3,31
 4004f2c:	8460703a 	and	r16,r16,r17
 4004f30:	80a0b03a 	or	r16,r16,r2
 4004f34:	80c6b03a 	or	r3,r16,r3
 4004f38:	b005883a 	mov	r2,r22
 4004f3c:	dfc01117 	ldw	ra,68(sp)
 4004f40:	df001017 	ldw	fp,64(sp)
 4004f44:	ddc00f17 	ldw	r23,60(sp)
 4004f48:	dd800e17 	ldw	r22,56(sp)
 4004f4c:	dd400d17 	ldw	r21,52(sp)
 4004f50:	dd000c17 	ldw	r20,48(sp)
 4004f54:	dcc00b17 	ldw	r19,44(sp)
 4004f58:	dc800a17 	ldw	r18,40(sp)
 4004f5c:	dc400917 	ldw	r17,36(sp)
 4004f60:	dc000817 	ldw	r16,32(sp)
 4004f64:	dec01204 	addi	sp,sp,72
 4004f68:	f800283a 	ret
 4004f6c:	2404b03a 	or	r2,r4,r16
 4004f70:	202b883a 	mov	r21,r4
 4004f74:	10004426 	beq	r2,zero,4005088 <__muldf3+0x2ec>
 4004f78:	80015126 	beq	r16,zero,40054c0 <__muldf3+0x724>
 4004f7c:	8009883a 	mov	r4,r16
 4004f80:	d9800715 	stw	r6,28(sp)
 4004f84:	d9c00215 	stw	r7,8(sp)
 4004f88:	da400415 	stw	r9,16(sp)
 4004f8c:	40063c00 	call	40063c0 <__clzsi2>
 4004f90:	d9800717 	ldw	r6,28(sp)
 4004f94:	d9c00217 	ldw	r7,8(sp)
 4004f98:	da400417 	ldw	r9,16(sp)
 4004f9c:	113ffd44 	addi	r4,r2,-11
 4004fa0:	00c00704 	movi	r3,28
 4004fa4:	19014216 	blt	r3,r4,40054b0 <__muldf3+0x714>
 4004fa8:	00c00744 	movi	r3,29
 4004fac:	15bffe04 	addi	r22,r2,-8
 4004fb0:	1907c83a 	sub	r3,r3,r4
 4004fb4:	85a0983a 	sll	r16,r16,r22
 4004fb8:	a8c6d83a 	srl	r3,r21,r3
 4004fbc:	adac983a 	sll	r22,r21,r22
 4004fc0:	1c20b03a 	or	r16,r3,r16
 4004fc4:	1080fcc4 	addi	r2,r2,1011
 4004fc8:	00a9c83a 	sub	r20,zero,r2
 4004fcc:	002b883a 	mov	r21,zero
 4004fd0:	000b883a 	mov	r5,zero
 4004fd4:	003f9006 	br	4004e18 <__alt_data_end+0xfc004e18>
 4004fd8:	3446b03a 	or	r3,r6,r17
 4004fdc:	1800281e 	bne	r3,zero,4005080 <__muldf3+0x2e4>
 4004fe0:	0023883a 	mov	r17,zero
 4004fe4:	0025883a 	mov	r18,zero
 4004fe8:	01c00084 	movi	r7,2
 4004fec:	003f9c06 	br	4004e60 <__alt_data_end+0xfc004e60>
 4004ff0:	3446b03a 	or	r3,r6,r17
 4004ff4:	18001e26 	beq	r3,zero,4005070 <__muldf3+0x2d4>
 4004ff8:	88012126 	beq	r17,zero,4005480 <__muldf3+0x6e4>
 4004ffc:	8809883a 	mov	r4,r17
 4005000:	d9400215 	stw	r5,8(sp)
 4005004:	d9800715 	stw	r6,28(sp)
 4005008:	da400415 	stw	r9,16(sp)
 400500c:	da800315 	stw	r10,12(sp)
 4005010:	40063c00 	call	40063c0 <__clzsi2>
 4005014:	d9400217 	ldw	r5,8(sp)
 4005018:	d9800717 	ldw	r6,28(sp)
 400501c:	da400417 	ldw	r9,16(sp)
 4005020:	da800317 	ldw	r10,12(sp)
 4005024:	113ffd44 	addi	r4,r2,-11
 4005028:	00c00704 	movi	r3,28
 400502c:	19011016 	blt	r3,r4,4005470 <__muldf3+0x6d4>
 4005030:	00c00744 	movi	r3,29
 4005034:	14bffe04 	addi	r18,r2,-8
 4005038:	1907c83a 	sub	r3,r3,r4
 400503c:	8ca2983a 	sll	r17,r17,r18
 4005040:	30c6d83a 	srl	r3,r6,r3
 4005044:	34a4983a 	sll	r18,r6,r18
 4005048:	1c62b03a 	or	r17,r3,r17
 400504c:	1080fcc4 	addi	r2,r2,1011
 4005050:	0085c83a 	sub	r2,zero,r2
 4005054:	000f883a 	mov	r7,zero
 4005058:	003f8106 	br	4004e60 <__alt_data_end+0xfc004e60>
 400505c:	3027883a 	mov	r19,r6
 4005060:	0081ffc4 	movi	r2,2047
 4005064:	0021883a 	mov	r16,zero
 4005068:	002d883a 	mov	r22,zero
 400506c:	003faa06 	br	4004f18 <__alt_data_end+0xfc004f18>
 4005070:	0023883a 	mov	r17,zero
 4005074:	0025883a 	mov	r18,zero
 4005078:	01c00044 	movi	r7,1
 400507c:	003f7806 	br	4004e60 <__alt_data_end+0xfc004e60>
 4005080:	01c000c4 	movi	r7,3
 4005084:	003f7606 	br	4004e60 <__alt_data_end+0xfc004e60>
 4005088:	05400104 	movi	r21,4
 400508c:	0021883a 	mov	r16,zero
 4005090:	002d883a 	mov	r22,zero
 4005094:	01400044 	movi	r5,1
 4005098:	003f5f06 	br	4004e18 <__alt_data_end+0xfc004e18>
 400509c:	05400304 	movi	r21,12
 40050a0:	014000c4 	movi	r5,3
 40050a4:	003f5c06 	br	4004e18 <__alt_data_end+0xfc004e18>
 40050a8:	04000434 	movhi	r16,16
 40050ac:	0027883a 	mov	r19,zero
 40050b0:	843fffc4 	addi	r16,r16,-1
 40050b4:	05bfffc4 	movi	r22,-1
 40050b8:	0081ffc4 	movi	r2,2047
 40050bc:	003f9606 	br	4004f18 <__alt_data_end+0xfc004f18>
 40050c0:	8023883a 	mov	r17,r16
 40050c4:	b025883a 	mov	r18,r22
 40050c8:	280f883a 	mov	r7,r5
 40050cc:	003f8806 	br	4004ef0 <__alt_data_end+0xfc004ef0>
 40050d0:	8023883a 	mov	r17,r16
 40050d4:	b025883a 	mov	r18,r22
 40050d8:	480d883a 	mov	r6,r9
 40050dc:	280f883a 	mov	r7,r5
 40050e0:	003f8306 	br	4004ef0 <__alt_data_end+0xfc004ef0>
 40050e4:	b026d43a 	srli	r19,r22,16
 40050e8:	902ed43a 	srli	r23,r18,16
 40050ec:	b5bfffcc 	andi	r22,r22,65535
 40050f0:	94bfffcc 	andi	r18,r18,65535
 40050f4:	b00b883a 	mov	r5,r22
 40050f8:	9009883a 	mov	r4,r18
 40050fc:	d8c00515 	stw	r3,20(sp)
 4005100:	d9800715 	stw	r6,28(sp)
 4005104:	da000615 	stw	r8,24(sp)
 4005108:	40024640 	call	4002464 <__mulsi3>
 400510c:	980b883a 	mov	r5,r19
 4005110:	9009883a 	mov	r4,r18
 4005114:	1029883a 	mov	r20,r2
 4005118:	40024640 	call	4002464 <__mulsi3>
 400511c:	b80b883a 	mov	r5,r23
 4005120:	9809883a 	mov	r4,r19
 4005124:	102b883a 	mov	r21,r2
 4005128:	40024640 	call	4002464 <__mulsi3>
 400512c:	b809883a 	mov	r4,r23
 4005130:	b00b883a 	mov	r5,r22
 4005134:	1039883a 	mov	fp,r2
 4005138:	40024640 	call	4002464 <__mulsi3>
 400513c:	a008d43a 	srli	r4,r20,16
 4005140:	1545883a 	add	r2,r2,r21
 4005144:	d8c00517 	ldw	r3,20(sp)
 4005148:	2085883a 	add	r2,r4,r2
 400514c:	d9800717 	ldw	r6,28(sp)
 4005150:	da000617 	ldw	r8,24(sp)
 4005154:	1540022e 	bgeu	r2,r21,4005160 <__muldf3+0x3c4>
 4005158:	01000074 	movhi	r4,1
 400515c:	e139883a 	add	fp,fp,r4
 4005160:	100e943a 	slli	r7,r2,16
 4005164:	1004d43a 	srli	r2,r2,16
 4005168:	882ad43a 	srli	r21,r17,16
 400516c:	a53fffcc 	andi	r20,r20,65535
 4005170:	8c7fffcc 	andi	r17,r17,65535
 4005174:	3d29883a 	add	r20,r7,r20
 4005178:	b00b883a 	mov	r5,r22
 400517c:	8809883a 	mov	r4,r17
 4005180:	d8c00515 	stw	r3,20(sp)
 4005184:	d9800715 	stw	r6,28(sp)
 4005188:	da000615 	stw	r8,24(sp)
 400518c:	dd000115 	stw	r20,4(sp)
 4005190:	d8800015 	stw	r2,0(sp)
 4005194:	40024640 	call	4002464 <__mulsi3>
 4005198:	980b883a 	mov	r5,r19
 400519c:	8809883a 	mov	r4,r17
 40051a0:	d8800215 	stw	r2,8(sp)
 40051a4:	40024640 	call	4002464 <__mulsi3>
 40051a8:	9809883a 	mov	r4,r19
 40051ac:	a80b883a 	mov	r5,r21
 40051b0:	1029883a 	mov	r20,r2
 40051b4:	40024640 	call	4002464 <__mulsi3>
 40051b8:	b00b883a 	mov	r5,r22
 40051bc:	a809883a 	mov	r4,r21
 40051c0:	d8800415 	stw	r2,16(sp)
 40051c4:	40024640 	call	4002464 <__mulsi3>
 40051c8:	d9c00217 	ldw	r7,8(sp)
 40051cc:	1505883a 	add	r2,r2,r20
 40051d0:	d8c00517 	ldw	r3,20(sp)
 40051d4:	3826d43a 	srli	r19,r7,16
 40051d8:	d9800717 	ldw	r6,28(sp)
 40051dc:	da000617 	ldw	r8,24(sp)
 40051e0:	9885883a 	add	r2,r19,r2
 40051e4:	da400417 	ldw	r9,16(sp)
 40051e8:	1500022e 	bgeu	r2,r20,40051f4 <__muldf3+0x458>
 40051ec:	01000074 	movhi	r4,1
 40051f0:	4913883a 	add	r9,r9,r4
 40051f4:	1028d43a 	srli	r20,r2,16
 40051f8:	1004943a 	slli	r2,r2,16
 40051fc:	802cd43a 	srli	r22,r16,16
 4005200:	843fffcc 	andi	r16,r16,65535
 4005204:	3cffffcc 	andi	r19,r7,65535
 4005208:	9009883a 	mov	r4,r18
 400520c:	800b883a 	mov	r5,r16
 4005210:	a269883a 	add	r20,r20,r9
 4005214:	d8c00515 	stw	r3,20(sp)
 4005218:	d9800715 	stw	r6,28(sp)
 400521c:	da000615 	stw	r8,24(sp)
 4005220:	14e7883a 	add	r19,r2,r19
 4005224:	40024640 	call	4002464 <__mulsi3>
 4005228:	9009883a 	mov	r4,r18
 400522c:	b00b883a 	mov	r5,r22
 4005230:	d8800315 	stw	r2,12(sp)
 4005234:	40024640 	call	4002464 <__mulsi3>
 4005238:	b809883a 	mov	r4,r23
 400523c:	b00b883a 	mov	r5,r22
 4005240:	d8800215 	stw	r2,8(sp)
 4005244:	40024640 	call	4002464 <__mulsi3>
 4005248:	b80b883a 	mov	r5,r23
 400524c:	8009883a 	mov	r4,r16
 4005250:	d8800415 	stw	r2,16(sp)
 4005254:	40024640 	call	4002464 <__mulsi3>
 4005258:	da800317 	ldw	r10,12(sp)
 400525c:	d9c00217 	ldw	r7,8(sp)
 4005260:	d9000017 	ldw	r4,0(sp)
 4005264:	502ed43a 	srli	r23,r10,16
 4005268:	11c5883a 	add	r2,r2,r7
 400526c:	24e5883a 	add	r18,r4,r19
 4005270:	b885883a 	add	r2,r23,r2
 4005274:	d8c00517 	ldw	r3,20(sp)
 4005278:	d9800717 	ldw	r6,28(sp)
 400527c:	da000617 	ldw	r8,24(sp)
 4005280:	da400417 	ldw	r9,16(sp)
 4005284:	11c0022e 	bgeu	r2,r7,4005290 <__muldf3+0x4f4>
 4005288:	01000074 	movhi	r4,1
 400528c:	4913883a 	add	r9,r9,r4
 4005290:	100ed43a 	srli	r7,r2,16
 4005294:	1004943a 	slli	r2,r2,16
 4005298:	55ffffcc 	andi	r23,r10,65535
 400529c:	3a53883a 	add	r9,r7,r9
 40052a0:	8809883a 	mov	r4,r17
 40052a4:	800b883a 	mov	r5,r16
 40052a8:	d8c00515 	stw	r3,20(sp)
 40052ac:	d9800715 	stw	r6,28(sp)
 40052b0:	da000615 	stw	r8,24(sp)
 40052b4:	da400415 	stw	r9,16(sp)
 40052b8:	15ef883a 	add	r23,r2,r23
 40052bc:	40024640 	call	4002464 <__mulsi3>
 40052c0:	8809883a 	mov	r4,r17
 40052c4:	b00b883a 	mov	r5,r22
 40052c8:	d8800215 	stw	r2,8(sp)
 40052cc:	40024640 	call	4002464 <__mulsi3>
 40052d0:	b00b883a 	mov	r5,r22
 40052d4:	a809883a 	mov	r4,r21
 40052d8:	d8800315 	stw	r2,12(sp)
 40052dc:	40024640 	call	4002464 <__mulsi3>
 40052e0:	8009883a 	mov	r4,r16
 40052e4:	a80b883a 	mov	r5,r21
 40052e8:	1023883a 	mov	r17,r2
 40052ec:	40024640 	call	4002464 <__mulsi3>
 40052f0:	d9c00217 	ldw	r7,8(sp)
 40052f4:	da800317 	ldw	r10,12(sp)
 40052f8:	d8c00517 	ldw	r3,20(sp)
 40052fc:	3808d43a 	srli	r4,r7,16
 4005300:	1285883a 	add	r2,r2,r10
 4005304:	d9800717 	ldw	r6,28(sp)
 4005308:	2085883a 	add	r2,r4,r2
 400530c:	da000617 	ldw	r8,24(sp)
 4005310:	da400417 	ldw	r9,16(sp)
 4005314:	1280022e 	bgeu	r2,r10,4005320 <__muldf3+0x584>
 4005318:	01000074 	movhi	r4,1
 400531c:	8923883a 	add	r17,r17,r4
 4005320:	1008943a 	slli	r4,r2,16
 4005324:	39ffffcc 	andi	r7,r7,65535
 4005328:	e4b9883a 	add	fp,fp,r18
 400532c:	21cf883a 	add	r7,r4,r7
 4005330:	e4e7803a 	cmpltu	r19,fp,r19
 4005334:	3d0f883a 	add	r7,r7,r20
 4005338:	bf39883a 	add	fp,r23,fp
 400533c:	99c9883a 	add	r4,r19,r7
 4005340:	e5ef803a 	cmpltu	r23,fp,r23
 4005344:	490b883a 	add	r5,r9,r4
 4005348:	1004d43a 	srli	r2,r2,16
 400534c:	b965883a 	add	r18,r23,r5
 4005350:	24c9803a 	cmpltu	r4,r4,r19
 4005354:	3d29803a 	cmpltu	r20,r7,r20
 4005358:	a128b03a 	or	r20,r20,r4
 400535c:	95ef803a 	cmpltu	r23,r18,r23
 4005360:	2a53803a 	cmpltu	r9,r5,r9
 4005364:	a0a9883a 	add	r20,r20,r2
 4005368:	4deeb03a 	or	r23,r9,r23
 400536c:	a5ef883a 	add	r23,r20,r23
 4005370:	bc63883a 	add	r17,r23,r17
 4005374:	e004927a 	slli	r2,fp,9
 4005378:	d9000117 	ldw	r4,4(sp)
 400537c:	882e927a 	slli	r23,r17,9
 4005380:	9022d5fa 	srli	r17,r18,23
 4005384:	e038d5fa 	srli	fp,fp,23
 4005388:	1104b03a 	or	r2,r2,r4
 400538c:	9024927a 	slli	r18,r18,9
 4005390:	1004c03a 	cmpne	r2,r2,zero
 4005394:	bc62b03a 	or	r17,r23,r17
 4005398:	1738b03a 	or	fp,r2,fp
 400539c:	8880402c 	andhi	r2,r17,256
 40053a0:	e4a4b03a 	or	r18,fp,r18
 40053a4:	10000726 	beq	r2,zero,40053c4 <__muldf3+0x628>
 40053a8:	9006d07a 	srli	r3,r18,1
 40053ac:	880497fa 	slli	r2,r17,31
 40053b0:	9480004c 	andi	r18,r18,1
 40053b4:	8822d07a 	srli	r17,r17,1
 40053b8:	1ca4b03a 	or	r18,r3,r18
 40053bc:	14a4b03a 	or	r18,r2,r18
 40053c0:	4007883a 	mov	r3,r8
 40053c4:	1880ffc4 	addi	r2,r3,1023
 40053c8:	0080460e 	bge	zero,r2,40054e4 <__muldf3+0x748>
 40053cc:	910001cc 	andi	r4,r18,7
 40053d0:	20000726 	beq	r4,zero,40053f0 <__muldf3+0x654>
 40053d4:	910003cc 	andi	r4,r18,15
 40053d8:	01400104 	movi	r5,4
 40053dc:	21400426 	beq	r4,r5,40053f0 <__muldf3+0x654>
 40053e0:	9149883a 	add	r4,r18,r5
 40053e4:	24a5803a 	cmpltu	r18,r4,r18
 40053e8:	8ca3883a 	add	r17,r17,r18
 40053ec:	2025883a 	mov	r18,r4
 40053f0:	8900402c 	andhi	r4,r17,256
 40053f4:	20000426 	beq	r4,zero,4005408 <__muldf3+0x66c>
 40053f8:	18810004 	addi	r2,r3,1024
 40053fc:	00ffc034 	movhi	r3,65280
 4005400:	18ffffc4 	addi	r3,r3,-1
 4005404:	88e2703a 	and	r17,r17,r3
 4005408:	00c1ff84 	movi	r3,2046
 400540c:	18bf1316 	blt	r3,r2,400505c <__alt_data_end+0xfc00505c>
 4005410:	882c977a 	slli	r22,r17,29
 4005414:	9024d0fa 	srli	r18,r18,3
 4005418:	8822927a 	slli	r17,r17,9
 400541c:	1081ffcc 	andi	r2,r2,2047
 4005420:	b4acb03a 	or	r22,r22,r18
 4005424:	8820d33a 	srli	r16,r17,12
 4005428:	3027883a 	mov	r19,r6
 400542c:	003eba06 	br	4004f18 <__alt_data_end+0xfc004f18>
 4005430:	8080022c 	andhi	r2,r16,8
 4005434:	10000926 	beq	r2,zero,400545c <__muldf3+0x6c0>
 4005438:	8880022c 	andhi	r2,r17,8
 400543c:	1000071e 	bne	r2,zero,400545c <__muldf3+0x6c0>
 4005440:	00800434 	movhi	r2,16
 4005444:	8c000234 	orhi	r16,r17,8
 4005448:	10bfffc4 	addi	r2,r2,-1
 400544c:	e027883a 	mov	r19,fp
 4005450:	80a0703a 	and	r16,r16,r2
 4005454:	902d883a 	mov	r22,r18
 4005458:	003f1706 	br	40050b8 <__alt_data_end+0xfc0050b8>
 400545c:	00800434 	movhi	r2,16
 4005460:	84000234 	orhi	r16,r16,8
 4005464:	10bfffc4 	addi	r2,r2,-1
 4005468:	80a0703a 	and	r16,r16,r2
 400546c:	003f1206 	br	40050b8 <__alt_data_end+0xfc0050b8>
 4005470:	147ff604 	addi	r17,r2,-40
 4005474:	3462983a 	sll	r17,r6,r17
 4005478:	0025883a 	mov	r18,zero
 400547c:	003ef306 	br	400504c <__alt_data_end+0xfc00504c>
 4005480:	3009883a 	mov	r4,r6
 4005484:	d9400215 	stw	r5,8(sp)
 4005488:	d9800715 	stw	r6,28(sp)
 400548c:	da400415 	stw	r9,16(sp)
 4005490:	da800315 	stw	r10,12(sp)
 4005494:	40063c00 	call	40063c0 <__clzsi2>
 4005498:	10800804 	addi	r2,r2,32
 400549c:	da800317 	ldw	r10,12(sp)
 40054a0:	da400417 	ldw	r9,16(sp)
 40054a4:	d9800717 	ldw	r6,28(sp)
 40054a8:	d9400217 	ldw	r5,8(sp)
 40054ac:	003edd06 	br	4005024 <__alt_data_end+0xfc005024>
 40054b0:	143ff604 	addi	r16,r2,-40
 40054b4:	ac20983a 	sll	r16,r21,r16
 40054b8:	002d883a 	mov	r22,zero
 40054bc:	003ec106 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 40054c0:	d9800715 	stw	r6,28(sp)
 40054c4:	d9c00215 	stw	r7,8(sp)
 40054c8:	da400415 	stw	r9,16(sp)
 40054cc:	40063c00 	call	40063c0 <__clzsi2>
 40054d0:	10800804 	addi	r2,r2,32
 40054d4:	da400417 	ldw	r9,16(sp)
 40054d8:	d9c00217 	ldw	r7,8(sp)
 40054dc:	d9800717 	ldw	r6,28(sp)
 40054e0:	003eae06 	br	4004f9c <__alt_data_end+0xfc004f9c>
 40054e4:	00c00044 	movi	r3,1
 40054e8:	1887c83a 	sub	r3,r3,r2
 40054ec:	01000e04 	movi	r4,56
 40054f0:	20fe8516 	blt	r4,r3,4004f08 <__alt_data_end+0xfc004f08>
 40054f4:	010007c4 	movi	r4,31
 40054f8:	20c01b16 	blt	r4,r3,4005568 <__muldf3+0x7cc>
 40054fc:	00800804 	movi	r2,32
 4005500:	10c5c83a 	sub	r2,r2,r3
 4005504:	888a983a 	sll	r5,r17,r2
 4005508:	90c8d83a 	srl	r4,r18,r3
 400550c:	9084983a 	sll	r2,r18,r2
 4005510:	88e2d83a 	srl	r17,r17,r3
 4005514:	2906b03a 	or	r3,r5,r4
 4005518:	1004c03a 	cmpne	r2,r2,zero
 400551c:	1886b03a 	or	r3,r3,r2
 4005520:	188001cc 	andi	r2,r3,7
 4005524:	10000726 	beq	r2,zero,4005544 <__muldf3+0x7a8>
 4005528:	188003cc 	andi	r2,r3,15
 400552c:	01000104 	movi	r4,4
 4005530:	11000426 	beq	r2,r4,4005544 <__muldf3+0x7a8>
 4005534:	1805883a 	mov	r2,r3
 4005538:	10c00104 	addi	r3,r2,4
 400553c:	1885803a 	cmpltu	r2,r3,r2
 4005540:	88a3883a 	add	r17,r17,r2
 4005544:	8880202c 	andhi	r2,r17,128
 4005548:	10001c26 	beq	r2,zero,40055bc <__muldf3+0x820>
 400554c:	3027883a 	mov	r19,r6
 4005550:	00800044 	movi	r2,1
 4005554:	0021883a 	mov	r16,zero
 4005558:	002d883a 	mov	r22,zero
 400555c:	003e6e06 	br	4004f18 <__alt_data_end+0xfc004f18>
 4005560:	4007883a 	mov	r3,r8
 4005564:	003f9706 	br	40053c4 <__alt_data_end+0xfc0053c4>
 4005568:	017ff844 	movi	r5,-31
 400556c:	2885c83a 	sub	r2,r5,r2
 4005570:	888ad83a 	srl	r5,r17,r2
 4005574:	00800804 	movi	r2,32
 4005578:	18801a26 	beq	r3,r2,40055e4 <__muldf3+0x848>
 400557c:	01001004 	movi	r4,64
 4005580:	20c7c83a 	sub	r3,r4,r3
 4005584:	88e2983a 	sll	r17,r17,r3
 4005588:	8ca4b03a 	or	r18,r17,r18
 400558c:	9004c03a 	cmpne	r2,r18,zero
 4005590:	2884b03a 	or	r2,r5,r2
 4005594:	144001cc 	andi	r17,r2,7
 4005598:	88000d1e 	bne	r17,zero,40055d0 <__muldf3+0x834>
 400559c:	0021883a 	mov	r16,zero
 40055a0:	102cd0fa 	srli	r22,r2,3
 40055a4:	3027883a 	mov	r19,r6
 40055a8:	0005883a 	mov	r2,zero
 40055ac:	b46cb03a 	or	r22,r22,r17
 40055b0:	003e5906 	br	4004f18 <__alt_data_end+0xfc004f18>
 40055b4:	1007883a 	mov	r3,r2
 40055b8:	0023883a 	mov	r17,zero
 40055bc:	8820927a 	slli	r16,r17,9
 40055c0:	1805883a 	mov	r2,r3
 40055c4:	8822977a 	slli	r17,r17,29
 40055c8:	8020d33a 	srli	r16,r16,12
 40055cc:	003ff406 	br	40055a0 <__alt_data_end+0xfc0055a0>
 40055d0:	10c003cc 	andi	r3,r2,15
 40055d4:	01000104 	movi	r4,4
 40055d8:	193ff626 	beq	r3,r4,40055b4 <__alt_data_end+0xfc0055b4>
 40055dc:	0023883a 	mov	r17,zero
 40055e0:	003fd506 	br	4005538 <__alt_data_end+0xfc005538>
 40055e4:	0023883a 	mov	r17,zero
 40055e8:	003fe706 	br	4005588 <__alt_data_end+0xfc005588>
 40055ec:	00800434 	movhi	r2,16
 40055f0:	8c000234 	orhi	r16,r17,8
 40055f4:	10bfffc4 	addi	r2,r2,-1
 40055f8:	3027883a 	mov	r19,r6
 40055fc:	80a0703a 	and	r16,r16,r2
 4005600:	902d883a 	mov	r22,r18
 4005604:	003eac06 	br	40050b8 <__alt_data_end+0xfc0050b8>

04005608 <__subdf3>:
 4005608:	02000434 	movhi	r8,16
 400560c:	423fffc4 	addi	r8,r8,-1
 4005610:	defffb04 	addi	sp,sp,-20
 4005614:	2a14703a 	and	r10,r5,r8
 4005618:	3812d53a 	srli	r9,r7,20
 400561c:	3a10703a 	and	r8,r7,r8
 4005620:	2006d77a 	srli	r3,r4,29
 4005624:	3004d77a 	srli	r2,r6,29
 4005628:	dc000015 	stw	r16,0(sp)
 400562c:	501490fa 	slli	r10,r10,3
 4005630:	2820d53a 	srli	r16,r5,20
 4005634:	401090fa 	slli	r8,r8,3
 4005638:	dc800215 	stw	r18,8(sp)
 400563c:	dc400115 	stw	r17,4(sp)
 4005640:	dfc00415 	stw	ra,16(sp)
 4005644:	202290fa 	slli	r17,r4,3
 4005648:	dcc00315 	stw	r19,12(sp)
 400564c:	4a41ffcc 	andi	r9,r9,2047
 4005650:	0101ffc4 	movi	r4,2047
 4005654:	2824d7fa 	srli	r18,r5,31
 4005658:	8401ffcc 	andi	r16,r16,2047
 400565c:	50c6b03a 	or	r3,r10,r3
 4005660:	380ed7fa 	srli	r7,r7,31
 4005664:	408ab03a 	or	r5,r8,r2
 4005668:	300c90fa 	slli	r6,r6,3
 400566c:	49009626 	beq	r9,r4,40058c8 <__subdf3+0x2c0>
 4005670:	39c0005c 	xori	r7,r7,1
 4005674:	8245c83a 	sub	r2,r16,r9
 4005678:	3c807426 	beq	r7,r18,400584c <__subdf3+0x244>
 400567c:	0080af0e 	bge	zero,r2,400593c <__subdf3+0x334>
 4005680:	48002a1e 	bne	r9,zero,400572c <__subdf3+0x124>
 4005684:	2988b03a 	or	r4,r5,r6
 4005688:	20009a1e 	bne	r4,zero,40058f4 <__subdf3+0x2ec>
 400568c:	888001cc 	andi	r2,r17,7
 4005690:	10000726 	beq	r2,zero,40056b0 <__subdf3+0xa8>
 4005694:	888003cc 	andi	r2,r17,15
 4005698:	01000104 	movi	r4,4
 400569c:	11000426 	beq	r2,r4,40056b0 <__subdf3+0xa8>
 40056a0:	890b883a 	add	r5,r17,r4
 40056a4:	2c63803a 	cmpltu	r17,r5,r17
 40056a8:	1c47883a 	add	r3,r3,r17
 40056ac:	2823883a 	mov	r17,r5
 40056b0:	1880202c 	andhi	r2,r3,128
 40056b4:	10005926 	beq	r2,zero,400581c <__subdf3+0x214>
 40056b8:	84000044 	addi	r16,r16,1
 40056bc:	0081ffc4 	movi	r2,2047
 40056c0:	8080be26 	beq	r16,r2,40059bc <__subdf3+0x3b4>
 40056c4:	017fe034 	movhi	r5,65408
 40056c8:	297fffc4 	addi	r5,r5,-1
 40056cc:	1946703a 	and	r3,r3,r5
 40056d0:	1804977a 	slli	r2,r3,29
 40056d4:	1806927a 	slli	r3,r3,9
 40056d8:	8822d0fa 	srli	r17,r17,3
 40056dc:	8401ffcc 	andi	r16,r16,2047
 40056e0:	180ad33a 	srli	r5,r3,12
 40056e4:	9100004c 	andi	r4,r18,1
 40056e8:	1444b03a 	or	r2,r2,r17
 40056ec:	80c1ffcc 	andi	r3,r16,2047
 40056f0:	1820953a 	slli	r16,r3,20
 40056f4:	20c03fcc 	andi	r3,r4,255
 40056f8:	180897fa 	slli	r4,r3,31
 40056fc:	00c00434 	movhi	r3,16
 4005700:	18ffffc4 	addi	r3,r3,-1
 4005704:	28c6703a 	and	r3,r5,r3
 4005708:	1c06b03a 	or	r3,r3,r16
 400570c:	1906b03a 	or	r3,r3,r4
 4005710:	dfc00417 	ldw	ra,16(sp)
 4005714:	dcc00317 	ldw	r19,12(sp)
 4005718:	dc800217 	ldw	r18,8(sp)
 400571c:	dc400117 	ldw	r17,4(sp)
 4005720:	dc000017 	ldw	r16,0(sp)
 4005724:	dec00504 	addi	sp,sp,20
 4005728:	f800283a 	ret
 400572c:	0101ffc4 	movi	r4,2047
 4005730:	813fd626 	beq	r16,r4,400568c <__alt_data_end+0xfc00568c>
 4005734:	29402034 	orhi	r5,r5,128
 4005738:	01000e04 	movi	r4,56
 400573c:	2080a316 	blt	r4,r2,40059cc <__subdf3+0x3c4>
 4005740:	010007c4 	movi	r4,31
 4005744:	2080c616 	blt	r4,r2,4005a60 <__subdf3+0x458>
 4005748:	01000804 	movi	r4,32
 400574c:	2089c83a 	sub	r4,r4,r2
 4005750:	2910983a 	sll	r8,r5,r4
 4005754:	308ed83a 	srl	r7,r6,r2
 4005758:	3108983a 	sll	r4,r6,r4
 400575c:	2884d83a 	srl	r2,r5,r2
 4005760:	41ccb03a 	or	r6,r8,r7
 4005764:	2008c03a 	cmpne	r4,r4,zero
 4005768:	310cb03a 	or	r6,r6,r4
 400576c:	898dc83a 	sub	r6,r17,r6
 4005770:	89a3803a 	cmpltu	r17,r17,r6
 4005774:	1887c83a 	sub	r3,r3,r2
 4005778:	1c47c83a 	sub	r3,r3,r17
 400577c:	3023883a 	mov	r17,r6
 4005780:	1880202c 	andhi	r2,r3,128
 4005784:	10002326 	beq	r2,zero,4005814 <__subdf3+0x20c>
 4005788:	04c02034 	movhi	r19,128
 400578c:	9cffffc4 	addi	r19,r19,-1
 4005790:	1ce6703a 	and	r19,r3,r19
 4005794:	98007a26 	beq	r19,zero,4005980 <__subdf3+0x378>
 4005798:	9809883a 	mov	r4,r19
 400579c:	40063c00 	call	40063c0 <__clzsi2>
 40057a0:	113ffe04 	addi	r4,r2,-8
 40057a4:	00c007c4 	movi	r3,31
 40057a8:	19007b16 	blt	r3,r4,4005998 <__subdf3+0x390>
 40057ac:	00800804 	movi	r2,32
 40057b0:	1105c83a 	sub	r2,r2,r4
 40057b4:	8884d83a 	srl	r2,r17,r2
 40057b8:	9906983a 	sll	r3,r19,r4
 40057bc:	8922983a 	sll	r17,r17,r4
 40057c0:	10c4b03a 	or	r2,r2,r3
 40057c4:	24007816 	blt	r4,r16,40059a8 <__subdf3+0x3a0>
 40057c8:	2421c83a 	sub	r16,r4,r16
 40057cc:	80c00044 	addi	r3,r16,1
 40057d0:	010007c4 	movi	r4,31
 40057d4:	20c09516 	blt	r4,r3,4005a2c <__subdf3+0x424>
 40057d8:	01400804 	movi	r5,32
 40057dc:	28cbc83a 	sub	r5,r5,r3
 40057e0:	88c8d83a 	srl	r4,r17,r3
 40057e4:	8962983a 	sll	r17,r17,r5
 40057e8:	114a983a 	sll	r5,r2,r5
 40057ec:	10c6d83a 	srl	r3,r2,r3
 40057f0:	8804c03a 	cmpne	r2,r17,zero
 40057f4:	290ab03a 	or	r5,r5,r4
 40057f8:	28a2b03a 	or	r17,r5,r2
 40057fc:	0021883a 	mov	r16,zero
 4005800:	003fa206 	br	400568c <__alt_data_end+0xfc00568c>
 4005804:	2090b03a 	or	r8,r4,r2
 4005808:	40018e26 	beq	r8,zero,4005e44 <__subdf3+0x83c>
 400580c:	1007883a 	mov	r3,r2
 4005810:	2023883a 	mov	r17,r4
 4005814:	888001cc 	andi	r2,r17,7
 4005818:	103f9e1e 	bne	r2,zero,4005694 <__alt_data_end+0xfc005694>
 400581c:	1804977a 	slli	r2,r3,29
 4005820:	8822d0fa 	srli	r17,r17,3
 4005824:	1810d0fa 	srli	r8,r3,3
 4005828:	9100004c 	andi	r4,r18,1
 400582c:	1444b03a 	or	r2,r2,r17
 4005830:	00c1ffc4 	movi	r3,2047
 4005834:	80c02826 	beq	r16,r3,40058d8 <__subdf3+0x2d0>
 4005838:	01400434 	movhi	r5,16
 400583c:	297fffc4 	addi	r5,r5,-1
 4005840:	80e0703a 	and	r16,r16,r3
 4005844:	414a703a 	and	r5,r8,r5
 4005848:	003fa806 	br	40056ec <__alt_data_end+0xfc0056ec>
 400584c:	0080630e 	bge	zero,r2,40059dc <__subdf3+0x3d4>
 4005850:	48003026 	beq	r9,zero,4005914 <__subdf3+0x30c>
 4005854:	0101ffc4 	movi	r4,2047
 4005858:	813f8c26 	beq	r16,r4,400568c <__alt_data_end+0xfc00568c>
 400585c:	29402034 	orhi	r5,r5,128
 4005860:	01000e04 	movi	r4,56
 4005864:	2080a90e 	bge	r4,r2,4005b0c <__subdf3+0x504>
 4005868:	298cb03a 	or	r6,r5,r6
 400586c:	3012c03a 	cmpne	r9,r6,zero
 4005870:	0005883a 	mov	r2,zero
 4005874:	4c53883a 	add	r9,r9,r17
 4005878:	4c63803a 	cmpltu	r17,r9,r17
 400587c:	10c7883a 	add	r3,r2,r3
 4005880:	88c7883a 	add	r3,r17,r3
 4005884:	4823883a 	mov	r17,r9
 4005888:	1880202c 	andhi	r2,r3,128
 400588c:	1000d026 	beq	r2,zero,4005bd0 <__subdf3+0x5c8>
 4005890:	84000044 	addi	r16,r16,1
 4005894:	0081ffc4 	movi	r2,2047
 4005898:	8080fe26 	beq	r16,r2,4005c94 <__subdf3+0x68c>
 400589c:	00bfe034 	movhi	r2,65408
 40058a0:	10bfffc4 	addi	r2,r2,-1
 40058a4:	1886703a 	and	r3,r3,r2
 40058a8:	880ad07a 	srli	r5,r17,1
 40058ac:	180497fa 	slli	r2,r3,31
 40058b0:	8900004c 	andi	r4,r17,1
 40058b4:	2922b03a 	or	r17,r5,r4
 40058b8:	1806d07a 	srli	r3,r3,1
 40058bc:	1462b03a 	or	r17,r2,r17
 40058c0:	3825883a 	mov	r18,r7
 40058c4:	003f7106 	br	400568c <__alt_data_end+0xfc00568c>
 40058c8:	2984b03a 	or	r2,r5,r6
 40058cc:	103f6826 	beq	r2,zero,4005670 <__alt_data_end+0xfc005670>
 40058d0:	39c03fcc 	andi	r7,r7,255
 40058d4:	003f6706 	br	4005674 <__alt_data_end+0xfc005674>
 40058d8:	4086b03a 	or	r3,r8,r2
 40058dc:	18015226 	beq	r3,zero,4005e28 <__subdf3+0x820>
 40058e0:	00c00434 	movhi	r3,16
 40058e4:	41400234 	orhi	r5,r8,8
 40058e8:	18ffffc4 	addi	r3,r3,-1
 40058ec:	28ca703a 	and	r5,r5,r3
 40058f0:	003f7e06 	br	40056ec <__alt_data_end+0xfc0056ec>
 40058f4:	10bfffc4 	addi	r2,r2,-1
 40058f8:	1000491e 	bne	r2,zero,4005a20 <__subdf3+0x418>
 40058fc:	898fc83a 	sub	r7,r17,r6
 4005900:	89e3803a 	cmpltu	r17,r17,r7
 4005904:	1947c83a 	sub	r3,r3,r5
 4005908:	1c47c83a 	sub	r3,r3,r17
 400590c:	3823883a 	mov	r17,r7
 4005910:	003f9b06 	br	4005780 <__alt_data_end+0xfc005780>
 4005914:	2988b03a 	or	r4,r5,r6
 4005918:	203f5c26 	beq	r4,zero,400568c <__alt_data_end+0xfc00568c>
 400591c:	10bfffc4 	addi	r2,r2,-1
 4005920:	1000931e 	bne	r2,zero,4005b70 <__subdf3+0x568>
 4005924:	898d883a 	add	r6,r17,r6
 4005928:	3463803a 	cmpltu	r17,r6,r17
 400592c:	1947883a 	add	r3,r3,r5
 4005930:	88c7883a 	add	r3,r17,r3
 4005934:	3023883a 	mov	r17,r6
 4005938:	003fd306 	br	4005888 <__alt_data_end+0xfc005888>
 400593c:	1000541e 	bne	r2,zero,4005a90 <__subdf3+0x488>
 4005940:	80800044 	addi	r2,r16,1
 4005944:	1081ffcc 	andi	r2,r2,2047
 4005948:	01000044 	movi	r4,1
 400594c:	2080a20e 	bge	r4,r2,4005bd8 <__subdf3+0x5d0>
 4005950:	8989c83a 	sub	r4,r17,r6
 4005954:	8905803a 	cmpltu	r2,r17,r4
 4005958:	1967c83a 	sub	r19,r3,r5
 400595c:	98a7c83a 	sub	r19,r19,r2
 4005960:	9880202c 	andhi	r2,r19,128
 4005964:	10006326 	beq	r2,zero,4005af4 <__subdf3+0x4ec>
 4005968:	3463c83a 	sub	r17,r6,r17
 400596c:	28c7c83a 	sub	r3,r5,r3
 4005970:	344d803a 	cmpltu	r6,r6,r17
 4005974:	19a7c83a 	sub	r19,r3,r6
 4005978:	3825883a 	mov	r18,r7
 400597c:	983f861e 	bne	r19,zero,4005798 <__alt_data_end+0xfc005798>
 4005980:	8809883a 	mov	r4,r17
 4005984:	40063c00 	call	40063c0 <__clzsi2>
 4005988:	10800804 	addi	r2,r2,32
 400598c:	113ffe04 	addi	r4,r2,-8
 4005990:	00c007c4 	movi	r3,31
 4005994:	193f850e 	bge	r3,r4,40057ac <__alt_data_end+0xfc0057ac>
 4005998:	10bff604 	addi	r2,r2,-40
 400599c:	8884983a 	sll	r2,r17,r2
 40059a0:	0023883a 	mov	r17,zero
 40059a4:	243f880e 	bge	r4,r16,40057c8 <__alt_data_end+0xfc0057c8>
 40059a8:	00ffe034 	movhi	r3,65408
 40059ac:	18ffffc4 	addi	r3,r3,-1
 40059b0:	8121c83a 	sub	r16,r16,r4
 40059b4:	10c6703a 	and	r3,r2,r3
 40059b8:	003f3406 	br	400568c <__alt_data_end+0xfc00568c>
 40059bc:	9100004c 	andi	r4,r18,1
 40059c0:	000b883a 	mov	r5,zero
 40059c4:	0005883a 	mov	r2,zero
 40059c8:	003f4806 	br	40056ec <__alt_data_end+0xfc0056ec>
 40059cc:	298cb03a 	or	r6,r5,r6
 40059d0:	300cc03a 	cmpne	r6,r6,zero
 40059d4:	0005883a 	mov	r2,zero
 40059d8:	003f6406 	br	400576c <__alt_data_end+0xfc00576c>
 40059dc:	10009a1e 	bne	r2,zero,4005c48 <__subdf3+0x640>
 40059e0:	82400044 	addi	r9,r16,1
 40059e4:	4881ffcc 	andi	r2,r9,2047
 40059e8:	02800044 	movi	r10,1
 40059ec:	5080670e 	bge	r10,r2,4005b8c <__subdf3+0x584>
 40059f0:	0081ffc4 	movi	r2,2047
 40059f4:	4880af26 	beq	r9,r2,4005cb4 <__subdf3+0x6ac>
 40059f8:	898d883a 	add	r6,r17,r6
 40059fc:	1945883a 	add	r2,r3,r5
 4005a00:	3447803a 	cmpltu	r3,r6,r17
 4005a04:	1887883a 	add	r3,r3,r2
 4005a08:	182297fa 	slli	r17,r3,31
 4005a0c:	300cd07a 	srli	r6,r6,1
 4005a10:	1806d07a 	srli	r3,r3,1
 4005a14:	4821883a 	mov	r16,r9
 4005a18:	89a2b03a 	or	r17,r17,r6
 4005a1c:	003f1b06 	br	400568c <__alt_data_end+0xfc00568c>
 4005a20:	0101ffc4 	movi	r4,2047
 4005a24:	813f441e 	bne	r16,r4,4005738 <__alt_data_end+0xfc005738>
 4005a28:	003f1806 	br	400568c <__alt_data_end+0xfc00568c>
 4005a2c:	843ff844 	addi	r16,r16,-31
 4005a30:	01400804 	movi	r5,32
 4005a34:	1408d83a 	srl	r4,r2,r16
 4005a38:	19405026 	beq	r3,r5,4005b7c <__subdf3+0x574>
 4005a3c:	01401004 	movi	r5,64
 4005a40:	28c7c83a 	sub	r3,r5,r3
 4005a44:	10c4983a 	sll	r2,r2,r3
 4005a48:	88a2b03a 	or	r17,r17,r2
 4005a4c:	8822c03a 	cmpne	r17,r17,zero
 4005a50:	2462b03a 	or	r17,r4,r17
 4005a54:	0007883a 	mov	r3,zero
 4005a58:	0021883a 	mov	r16,zero
 4005a5c:	003f6d06 	br	4005814 <__alt_data_end+0xfc005814>
 4005a60:	11fff804 	addi	r7,r2,-32
 4005a64:	01000804 	movi	r4,32
 4005a68:	29ced83a 	srl	r7,r5,r7
 4005a6c:	11004526 	beq	r2,r4,4005b84 <__subdf3+0x57c>
 4005a70:	01001004 	movi	r4,64
 4005a74:	2089c83a 	sub	r4,r4,r2
 4005a78:	2904983a 	sll	r2,r5,r4
 4005a7c:	118cb03a 	or	r6,r2,r6
 4005a80:	300cc03a 	cmpne	r6,r6,zero
 4005a84:	398cb03a 	or	r6,r7,r6
 4005a88:	0005883a 	mov	r2,zero
 4005a8c:	003f3706 	br	400576c <__alt_data_end+0xfc00576c>
 4005a90:	80002a26 	beq	r16,zero,4005b3c <__subdf3+0x534>
 4005a94:	0101ffc4 	movi	r4,2047
 4005a98:	49006626 	beq	r9,r4,4005c34 <__subdf3+0x62c>
 4005a9c:	0085c83a 	sub	r2,zero,r2
 4005aa0:	18c02034 	orhi	r3,r3,128
 4005aa4:	01000e04 	movi	r4,56
 4005aa8:	20807e16 	blt	r4,r2,4005ca4 <__subdf3+0x69c>
 4005aac:	010007c4 	movi	r4,31
 4005ab0:	2080e716 	blt	r4,r2,4005e50 <__subdf3+0x848>
 4005ab4:	01000804 	movi	r4,32
 4005ab8:	2089c83a 	sub	r4,r4,r2
 4005abc:	1914983a 	sll	r10,r3,r4
 4005ac0:	8890d83a 	srl	r8,r17,r2
 4005ac4:	8908983a 	sll	r4,r17,r4
 4005ac8:	1884d83a 	srl	r2,r3,r2
 4005acc:	5222b03a 	or	r17,r10,r8
 4005ad0:	2006c03a 	cmpne	r3,r4,zero
 4005ad4:	88e2b03a 	or	r17,r17,r3
 4005ad8:	3463c83a 	sub	r17,r6,r17
 4005adc:	2885c83a 	sub	r2,r5,r2
 4005ae0:	344d803a 	cmpltu	r6,r6,r17
 4005ae4:	1187c83a 	sub	r3,r2,r6
 4005ae8:	4821883a 	mov	r16,r9
 4005aec:	3825883a 	mov	r18,r7
 4005af0:	003f2306 	br	4005780 <__alt_data_end+0xfc005780>
 4005af4:	24d0b03a 	or	r8,r4,r19
 4005af8:	40001b1e 	bne	r8,zero,4005b68 <__subdf3+0x560>
 4005afc:	0005883a 	mov	r2,zero
 4005b00:	0009883a 	mov	r4,zero
 4005b04:	0021883a 	mov	r16,zero
 4005b08:	003f4906 	br	4005830 <__alt_data_end+0xfc005830>
 4005b0c:	010007c4 	movi	r4,31
 4005b10:	20803a16 	blt	r4,r2,4005bfc <__subdf3+0x5f4>
 4005b14:	01000804 	movi	r4,32
 4005b18:	2089c83a 	sub	r4,r4,r2
 4005b1c:	2912983a 	sll	r9,r5,r4
 4005b20:	3090d83a 	srl	r8,r6,r2
 4005b24:	3108983a 	sll	r4,r6,r4
 4005b28:	2884d83a 	srl	r2,r5,r2
 4005b2c:	4a12b03a 	or	r9,r9,r8
 4005b30:	2008c03a 	cmpne	r4,r4,zero
 4005b34:	4912b03a 	or	r9,r9,r4
 4005b38:	003f4e06 	br	4005874 <__alt_data_end+0xfc005874>
 4005b3c:	1c48b03a 	or	r4,r3,r17
 4005b40:	20003c26 	beq	r4,zero,4005c34 <__subdf3+0x62c>
 4005b44:	0084303a 	nor	r2,zero,r2
 4005b48:	1000381e 	bne	r2,zero,4005c2c <__subdf3+0x624>
 4005b4c:	3463c83a 	sub	r17,r6,r17
 4005b50:	28c5c83a 	sub	r2,r5,r3
 4005b54:	344d803a 	cmpltu	r6,r6,r17
 4005b58:	1187c83a 	sub	r3,r2,r6
 4005b5c:	4821883a 	mov	r16,r9
 4005b60:	3825883a 	mov	r18,r7
 4005b64:	003f0606 	br	4005780 <__alt_data_end+0xfc005780>
 4005b68:	2023883a 	mov	r17,r4
 4005b6c:	003f0906 	br	4005794 <__alt_data_end+0xfc005794>
 4005b70:	0101ffc4 	movi	r4,2047
 4005b74:	813f3a1e 	bne	r16,r4,4005860 <__alt_data_end+0xfc005860>
 4005b78:	003ec406 	br	400568c <__alt_data_end+0xfc00568c>
 4005b7c:	0005883a 	mov	r2,zero
 4005b80:	003fb106 	br	4005a48 <__alt_data_end+0xfc005a48>
 4005b84:	0005883a 	mov	r2,zero
 4005b88:	003fbc06 	br	4005a7c <__alt_data_end+0xfc005a7c>
 4005b8c:	1c44b03a 	or	r2,r3,r17
 4005b90:	80008e1e 	bne	r16,zero,4005dcc <__subdf3+0x7c4>
 4005b94:	1000c826 	beq	r2,zero,4005eb8 <__subdf3+0x8b0>
 4005b98:	2984b03a 	or	r2,r5,r6
 4005b9c:	103ebb26 	beq	r2,zero,400568c <__alt_data_end+0xfc00568c>
 4005ba0:	8989883a 	add	r4,r17,r6
 4005ba4:	1945883a 	add	r2,r3,r5
 4005ba8:	2447803a 	cmpltu	r3,r4,r17
 4005bac:	1887883a 	add	r3,r3,r2
 4005bb0:	1880202c 	andhi	r2,r3,128
 4005bb4:	2023883a 	mov	r17,r4
 4005bb8:	103f1626 	beq	r2,zero,4005814 <__alt_data_end+0xfc005814>
 4005bbc:	00bfe034 	movhi	r2,65408
 4005bc0:	10bfffc4 	addi	r2,r2,-1
 4005bc4:	5021883a 	mov	r16,r10
 4005bc8:	1886703a 	and	r3,r3,r2
 4005bcc:	003eaf06 	br	400568c <__alt_data_end+0xfc00568c>
 4005bd0:	3825883a 	mov	r18,r7
 4005bd4:	003f0f06 	br	4005814 <__alt_data_end+0xfc005814>
 4005bd8:	1c44b03a 	or	r2,r3,r17
 4005bdc:	8000251e 	bne	r16,zero,4005c74 <__subdf3+0x66c>
 4005be0:	1000661e 	bne	r2,zero,4005d7c <__subdf3+0x774>
 4005be4:	2990b03a 	or	r8,r5,r6
 4005be8:	40009626 	beq	r8,zero,4005e44 <__subdf3+0x83c>
 4005bec:	2807883a 	mov	r3,r5
 4005bf0:	3023883a 	mov	r17,r6
 4005bf4:	3825883a 	mov	r18,r7
 4005bf8:	003ea406 	br	400568c <__alt_data_end+0xfc00568c>
 4005bfc:	127ff804 	addi	r9,r2,-32
 4005c00:	01000804 	movi	r4,32
 4005c04:	2a52d83a 	srl	r9,r5,r9
 4005c08:	11008c26 	beq	r2,r4,4005e3c <__subdf3+0x834>
 4005c0c:	01001004 	movi	r4,64
 4005c10:	2085c83a 	sub	r2,r4,r2
 4005c14:	2884983a 	sll	r2,r5,r2
 4005c18:	118cb03a 	or	r6,r2,r6
 4005c1c:	300cc03a 	cmpne	r6,r6,zero
 4005c20:	4992b03a 	or	r9,r9,r6
 4005c24:	0005883a 	mov	r2,zero
 4005c28:	003f1206 	br	4005874 <__alt_data_end+0xfc005874>
 4005c2c:	0101ffc4 	movi	r4,2047
 4005c30:	493f9c1e 	bne	r9,r4,4005aa4 <__alt_data_end+0xfc005aa4>
 4005c34:	2807883a 	mov	r3,r5
 4005c38:	3023883a 	mov	r17,r6
 4005c3c:	4821883a 	mov	r16,r9
 4005c40:	3825883a 	mov	r18,r7
 4005c44:	003e9106 	br	400568c <__alt_data_end+0xfc00568c>
 4005c48:	80001f1e 	bne	r16,zero,4005cc8 <__subdf3+0x6c0>
 4005c4c:	1c48b03a 	or	r4,r3,r17
 4005c50:	20005a26 	beq	r4,zero,4005dbc <__subdf3+0x7b4>
 4005c54:	0084303a 	nor	r2,zero,r2
 4005c58:	1000561e 	bne	r2,zero,4005db4 <__subdf3+0x7ac>
 4005c5c:	89a3883a 	add	r17,r17,r6
 4005c60:	1945883a 	add	r2,r3,r5
 4005c64:	898d803a 	cmpltu	r6,r17,r6
 4005c68:	3087883a 	add	r3,r6,r2
 4005c6c:	4821883a 	mov	r16,r9
 4005c70:	003f0506 	br	4005888 <__alt_data_end+0xfc005888>
 4005c74:	10002b1e 	bne	r2,zero,4005d24 <__subdf3+0x71c>
 4005c78:	2984b03a 	or	r2,r5,r6
 4005c7c:	10008026 	beq	r2,zero,4005e80 <__subdf3+0x878>
 4005c80:	2807883a 	mov	r3,r5
 4005c84:	3023883a 	mov	r17,r6
 4005c88:	3825883a 	mov	r18,r7
 4005c8c:	0401ffc4 	movi	r16,2047
 4005c90:	003e7e06 	br	400568c <__alt_data_end+0xfc00568c>
 4005c94:	3809883a 	mov	r4,r7
 4005c98:	0011883a 	mov	r8,zero
 4005c9c:	0005883a 	mov	r2,zero
 4005ca0:	003ee306 	br	4005830 <__alt_data_end+0xfc005830>
 4005ca4:	1c62b03a 	or	r17,r3,r17
 4005ca8:	8822c03a 	cmpne	r17,r17,zero
 4005cac:	0005883a 	mov	r2,zero
 4005cb0:	003f8906 	br	4005ad8 <__alt_data_end+0xfc005ad8>
 4005cb4:	3809883a 	mov	r4,r7
 4005cb8:	4821883a 	mov	r16,r9
 4005cbc:	0011883a 	mov	r8,zero
 4005cc0:	0005883a 	mov	r2,zero
 4005cc4:	003eda06 	br	4005830 <__alt_data_end+0xfc005830>
 4005cc8:	0101ffc4 	movi	r4,2047
 4005ccc:	49003b26 	beq	r9,r4,4005dbc <__subdf3+0x7b4>
 4005cd0:	0085c83a 	sub	r2,zero,r2
 4005cd4:	18c02034 	orhi	r3,r3,128
 4005cd8:	01000e04 	movi	r4,56
 4005cdc:	20806e16 	blt	r4,r2,4005e98 <__subdf3+0x890>
 4005ce0:	010007c4 	movi	r4,31
 4005ce4:	20807716 	blt	r4,r2,4005ec4 <__subdf3+0x8bc>
 4005ce8:	01000804 	movi	r4,32
 4005cec:	2089c83a 	sub	r4,r4,r2
 4005cf0:	1914983a 	sll	r10,r3,r4
 4005cf4:	8890d83a 	srl	r8,r17,r2
 4005cf8:	8908983a 	sll	r4,r17,r4
 4005cfc:	1884d83a 	srl	r2,r3,r2
 4005d00:	5222b03a 	or	r17,r10,r8
 4005d04:	2006c03a 	cmpne	r3,r4,zero
 4005d08:	88e2b03a 	or	r17,r17,r3
 4005d0c:	89a3883a 	add	r17,r17,r6
 4005d10:	1145883a 	add	r2,r2,r5
 4005d14:	898d803a 	cmpltu	r6,r17,r6
 4005d18:	3087883a 	add	r3,r6,r2
 4005d1c:	4821883a 	mov	r16,r9
 4005d20:	003ed906 	br	4005888 <__alt_data_end+0xfc005888>
 4005d24:	2984b03a 	or	r2,r5,r6
 4005d28:	10004226 	beq	r2,zero,4005e34 <__subdf3+0x82c>
 4005d2c:	1808d0fa 	srli	r4,r3,3
 4005d30:	8822d0fa 	srli	r17,r17,3
 4005d34:	1806977a 	slli	r3,r3,29
 4005d38:	2080022c 	andhi	r2,r4,8
 4005d3c:	1c62b03a 	or	r17,r3,r17
 4005d40:	10000826 	beq	r2,zero,4005d64 <__subdf3+0x75c>
 4005d44:	2812d0fa 	srli	r9,r5,3
 4005d48:	4880022c 	andhi	r2,r9,8
 4005d4c:	1000051e 	bne	r2,zero,4005d64 <__subdf3+0x75c>
 4005d50:	300cd0fa 	srli	r6,r6,3
 4005d54:	2804977a 	slli	r2,r5,29
 4005d58:	4809883a 	mov	r4,r9
 4005d5c:	3825883a 	mov	r18,r7
 4005d60:	11a2b03a 	or	r17,r2,r6
 4005d64:	8806d77a 	srli	r3,r17,29
 4005d68:	200890fa 	slli	r4,r4,3
 4005d6c:	882290fa 	slli	r17,r17,3
 4005d70:	0401ffc4 	movi	r16,2047
 4005d74:	1906b03a 	or	r3,r3,r4
 4005d78:	003e4406 	br	400568c <__alt_data_end+0xfc00568c>
 4005d7c:	2984b03a 	or	r2,r5,r6
 4005d80:	103e4226 	beq	r2,zero,400568c <__alt_data_end+0xfc00568c>
 4005d84:	8989c83a 	sub	r4,r17,r6
 4005d88:	8911803a 	cmpltu	r8,r17,r4
 4005d8c:	1945c83a 	sub	r2,r3,r5
 4005d90:	1205c83a 	sub	r2,r2,r8
 4005d94:	1200202c 	andhi	r8,r2,128
 4005d98:	403e9a26 	beq	r8,zero,4005804 <__alt_data_end+0xfc005804>
 4005d9c:	3463c83a 	sub	r17,r6,r17
 4005da0:	28c5c83a 	sub	r2,r5,r3
 4005da4:	344d803a 	cmpltu	r6,r6,r17
 4005da8:	1187c83a 	sub	r3,r2,r6
 4005dac:	3825883a 	mov	r18,r7
 4005db0:	003e3606 	br	400568c <__alt_data_end+0xfc00568c>
 4005db4:	0101ffc4 	movi	r4,2047
 4005db8:	493fc71e 	bne	r9,r4,4005cd8 <__alt_data_end+0xfc005cd8>
 4005dbc:	2807883a 	mov	r3,r5
 4005dc0:	3023883a 	mov	r17,r6
 4005dc4:	4821883a 	mov	r16,r9
 4005dc8:	003e3006 	br	400568c <__alt_data_end+0xfc00568c>
 4005dcc:	10003626 	beq	r2,zero,4005ea8 <__subdf3+0x8a0>
 4005dd0:	2984b03a 	or	r2,r5,r6
 4005dd4:	10001726 	beq	r2,zero,4005e34 <__subdf3+0x82c>
 4005dd8:	1808d0fa 	srli	r4,r3,3
 4005ddc:	8822d0fa 	srli	r17,r17,3
 4005de0:	1806977a 	slli	r3,r3,29
 4005de4:	2080022c 	andhi	r2,r4,8
 4005de8:	1c62b03a 	or	r17,r3,r17
 4005dec:	10000726 	beq	r2,zero,4005e0c <__subdf3+0x804>
 4005df0:	2812d0fa 	srli	r9,r5,3
 4005df4:	4880022c 	andhi	r2,r9,8
 4005df8:	1000041e 	bne	r2,zero,4005e0c <__subdf3+0x804>
 4005dfc:	300cd0fa 	srli	r6,r6,3
 4005e00:	2804977a 	slli	r2,r5,29
 4005e04:	4809883a 	mov	r4,r9
 4005e08:	11a2b03a 	or	r17,r2,r6
 4005e0c:	8806d77a 	srli	r3,r17,29
 4005e10:	200890fa 	slli	r4,r4,3
 4005e14:	882290fa 	slli	r17,r17,3
 4005e18:	3825883a 	mov	r18,r7
 4005e1c:	1906b03a 	or	r3,r3,r4
 4005e20:	0401ffc4 	movi	r16,2047
 4005e24:	003e1906 	br	400568c <__alt_data_end+0xfc00568c>
 4005e28:	000b883a 	mov	r5,zero
 4005e2c:	0005883a 	mov	r2,zero
 4005e30:	003e2e06 	br	40056ec <__alt_data_end+0xfc0056ec>
 4005e34:	0401ffc4 	movi	r16,2047
 4005e38:	003e1406 	br	400568c <__alt_data_end+0xfc00568c>
 4005e3c:	0005883a 	mov	r2,zero
 4005e40:	003f7506 	br	4005c18 <__alt_data_end+0xfc005c18>
 4005e44:	0005883a 	mov	r2,zero
 4005e48:	0009883a 	mov	r4,zero
 4005e4c:	003e7806 	br	4005830 <__alt_data_end+0xfc005830>
 4005e50:	123ff804 	addi	r8,r2,-32
 4005e54:	01000804 	movi	r4,32
 4005e58:	1a10d83a 	srl	r8,r3,r8
 4005e5c:	11002526 	beq	r2,r4,4005ef4 <__subdf3+0x8ec>
 4005e60:	01001004 	movi	r4,64
 4005e64:	2085c83a 	sub	r2,r4,r2
 4005e68:	1884983a 	sll	r2,r3,r2
 4005e6c:	1444b03a 	or	r2,r2,r17
 4005e70:	1004c03a 	cmpne	r2,r2,zero
 4005e74:	40a2b03a 	or	r17,r8,r2
 4005e78:	0005883a 	mov	r2,zero
 4005e7c:	003f1606 	br	4005ad8 <__alt_data_end+0xfc005ad8>
 4005e80:	02000434 	movhi	r8,16
 4005e84:	0009883a 	mov	r4,zero
 4005e88:	423fffc4 	addi	r8,r8,-1
 4005e8c:	00bfffc4 	movi	r2,-1
 4005e90:	0401ffc4 	movi	r16,2047
 4005e94:	003e6606 	br	4005830 <__alt_data_end+0xfc005830>
 4005e98:	1c62b03a 	or	r17,r3,r17
 4005e9c:	8822c03a 	cmpne	r17,r17,zero
 4005ea0:	0005883a 	mov	r2,zero
 4005ea4:	003f9906 	br	4005d0c <__alt_data_end+0xfc005d0c>
 4005ea8:	2807883a 	mov	r3,r5
 4005eac:	3023883a 	mov	r17,r6
 4005eb0:	0401ffc4 	movi	r16,2047
 4005eb4:	003df506 	br	400568c <__alt_data_end+0xfc00568c>
 4005eb8:	2807883a 	mov	r3,r5
 4005ebc:	3023883a 	mov	r17,r6
 4005ec0:	003df206 	br	400568c <__alt_data_end+0xfc00568c>
 4005ec4:	123ff804 	addi	r8,r2,-32
 4005ec8:	01000804 	movi	r4,32
 4005ecc:	1a10d83a 	srl	r8,r3,r8
 4005ed0:	11000a26 	beq	r2,r4,4005efc <__subdf3+0x8f4>
 4005ed4:	01001004 	movi	r4,64
 4005ed8:	2085c83a 	sub	r2,r4,r2
 4005edc:	1884983a 	sll	r2,r3,r2
 4005ee0:	1444b03a 	or	r2,r2,r17
 4005ee4:	1004c03a 	cmpne	r2,r2,zero
 4005ee8:	40a2b03a 	or	r17,r8,r2
 4005eec:	0005883a 	mov	r2,zero
 4005ef0:	003f8606 	br	4005d0c <__alt_data_end+0xfc005d0c>
 4005ef4:	0005883a 	mov	r2,zero
 4005ef8:	003fdc06 	br	4005e6c <__alt_data_end+0xfc005e6c>
 4005efc:	0005883a 	mov	r2,zero
 4005f00:	003ff706 	br	4005ee0 <__alt_data_end+0xfc005ee0>

04005f04 <__fixdfsi>:
 4005f04:	280cd53a 	srli	r6,r5,20
 4005f08:	00c00434 	movhi	r3,16
 4005f0c:	18ffffc4 	addi	r3,r3,-1
 4005f10:	3181ffcc 	andi	r6,r6,2047
 4005f14:	01c0ff84 	movi	r7,1022
 4005f18:	28c6703a 	and	r3,r5,r3
 4005f1c:	280ad7fa 	srli	r5,r5,31
 4005f20:	3980120e 	bge	r7,r6,4005f6c <__fixdfsi+0x68>
 4005f24:	00810744 	movi	r2,1053
 4005f28:	11800c16 	blt	r2,r6,4005f5c <__fixdfsi+0x58>
 4005f2c:	00810cc4 	movi	r2,1075
 4005f30:	1185c83a 	sub	r2,r2,r6
 4005f34:	01c007c4 	movi	r7,31
 4005f38:	18c00434 	orhi	r3,r3,16
 4005f3c:	38800d16 	blt	r7,r2,4005f74 <__fixdfsi+0x70>
 4005f40:	31befb44 	addi	r6,r6,-1043
 4005f44:	2084d83a 	srl	r2,r4,r2
 4005f48:	1986983a 	sll	r3,r3,r6
 4005f4c:	1884b03a 	or	r2,r3,r2
 4005f50:	28000726 	beq	r5,zero,4005f70 <__fixdfsi+0x6c>
 4005f54:	0085c83a 	sub	r2,zero,r2
 4005f58:	f800283a 	ret
 4005f5c:	00a00034 	movhi	r2,32768
 4005f60:	10bfffc4 	addi	r2,r2,-1
 4005f64:	2885883a 	add	r2,r5,r2
 4005f68:	f800283a 	ret
 4005f6c:	0005883a 	mov	r2,zero
 4005f70:	f800283a 	ret
 4005f74:	008104c4 	movi	r2,1043
 4005f78:	1185c83a 	sub	r2,r2,r6
 4005f7c:	1884d83a 	srl	r2,r3,r2
 4005f80:	003ff306 	br	4005f50 <__alt_data_end+0xfc005f50>

04005f84 <__floatsidf>:
 4005f84:	defffd04 	addi	sp,sp,-12
 4005f88:	dfc00215 	stw	ra,8(sp)
 4005f8c:	dc400115 	stw	r17,4(sp)
 4005f90:	dc000015 	stw	r16,0(sp)
 4005f94:	20002b26 	beq	r4,zero,4006044 <__floatsidf+0xc0>
 4005f98:	2023883a 	mov	r17,r4
 4005f9c:	2020d7fa 	srli	r16,r4,31
 4005fa0:	20002d16 	blt	r4,zero,4006058 <__floatsidf+0xd4>
 4005fa4:	8809883a 	mov	r4,r17
 4005fa8:	40063c00 	call	40063c0 <__clzsi2>
 4005fac:	01410784 	movi	r5,1054
 4005fb0:	288bc83a 	sub	r5,r5,r2
 4005fb4:	01010cc4 	movi	r4,1075
 4005fb8:	2149c83a 	sub	r4,r4,r5
 4005fbc:	00c007c4 	movi	r3,31
 4005fc0:	1900160e 	bge	r3,r4,400601c <__floatsidf+0x98>
 4005fc4:	00c104c4 	movi	r3,1043
 4005fc8:	1947c83a 	sub	r3,r3,r5
 4005fcc:	88c6983a 	sll	r3,r17,r3
 4005fd0:	00800434 	movhi	r2,16
 4005fd4:	10bfffc4 	addi	r2,r2,-1
 4005fd8:	1886703a 	and	r3,r3,r2
 4005fdc:	2941ffcc 	andi	r5,r5,2047
 4005fe0:	800d883a 	mov	r6,r16
 4005fe4:	0005883a 	mov	r2,zero
 4005fe8:	280a953a 	slli	r5,r5,20
 4005fec:	31803fcc 	andi	r6,r6,255
 4005ff0:	01000434 	movhi	r4,16
 4005ff4:	300c97fa 	slli	r6,r6,31
 4005ff8:	213fffc4 	addi	r4,r4,-1
 4005ffc:	1906703a 	and	r3,r3,r4
 4006000:	1946b03a 	or	r3,r3,r5
 4006004:	1986b03a 	or	r3,r3,r6
 4006008:	dfc00217 	ldw	ra,8(sp)
 400600c:	dc400117 	ldw	r17,4(sp)
 4006010:	dc000017 	ldw	r16,0(sp)
 4006014:	dec00304 	addi	sp,sp,12
 4006018:	f800283a 	ret
 400601c:	00c002c4 	movi	r3,11
 4006020:	1887c83a 	sub	r3,r3,r2
 4006024:	88c6d83a 	srl	r3,r17,r3
 4006028:	8904983a 	sll	r2,r17,r4
 400602c:	01000434 	movhi	r4,16
 4006030:	213fffc4 	addi	r4,r4,-1
 4006034:	2941ffcc 	andi	r5,r5,2047
 4006038:	1906703a 	and	r3,r3,r4
 400603c:	800d883a 	mov	r6,r16
 4006040:	003fe906 	br	4005fe8 <__alt_data_end+0xfc005fe8>
 4006044:	000d883a 	mov	r6,zero
 4006048:	000b883a 	mov	r5,zero
 400604c:	0007883a 	mov	r3,zero
 4006050:	0005883a 	mov	r2,zero
 4006054:	003fe406 	br	4005fe8 <__alt_data_end+0xfc005fe8>
 4006058:	0123c83a 	sub	r17,zero,r4
 400605c:	003fd106 	br	4005fa4 <__alt_data_end+0xfc005fa4>

04006060 <__floatunsidf>:
 4006060:	defffe04 	addi	sp,sp,-8
 4006064:	dc000015 	stw	r16,0(sp)
 4006068:	dfc00115 	stw	ra,4(sp)
 400606c:	2021883a 	mov	r16,r4
 4006070:	20002226 	beq	r4,zero,40060fc <__floatunsidf+0x9c>
 4006074:	40063c00 	call	40063c0 <__clzsi2>
 4006078:	01010784 	movi	r4,1054
 400607c:	2089c83a 	sub	r4,r4,r2
 4006080:	01810cc4 	movi	r6,1075
 4006084:	310dc83a 	sub	r6,r6,r4
 4006088:	00c007c4 	movi	r3,31
 400608c:	1980120e 	bge	r3,r6,40060d8 <__floatunsidf+0x78>
 4006090:	00c104c4 	movi	r3,1043
 4006094:	1907c83a 	sub	r3,r3,r4
 4006098:	80ca983a 	sll	r5,r16,r3
 400609c:	00800434 	movhi	r2,16
 40060a0:	10bfffc4 	addi	r2,r2,-1
 40060a4:	2101ffcc 	andi	r4,r4,2047
 40060a8:	0021883a 	mov	r16,zero
 40060ac:	288a703a 	and	r5,r5,r2
 40060b0:	2008953a 	slli	r4,r4,20
 40060b4:	00c00434 	movhi	r3,16
 40060b8:	18ffffc4 	addi	r3,r3,-1
 40060bc:	28c6703a 	and	r3,r5,r3
 40060c0:	8005883a 	mov	r2,r16
 40060c4:	1906b03a 	or	r3,r3,r4
 40060c8:	dfc00117 	ldw	ra,4(sp)
 40060cc:	dc000017 	ldw	r16,0(sp)
 40060d0:	dec00204 	addi	sp,sp,8
 40060d4:	f800283a 	ret
 40060d8:	00c002c4 	movi	r3,11
 40060dc:	188bc83a 	sub	r5,r3,r2
 40060e0:	814ad83a 	srl	r5,r16,r5
 40060e4:	00c00434 	movhi	r3,16
 40060e8:	18ffffc4 	addi	r3,r3,-1
 40060ec:	81a0983a 	sll	r16,r16,r6
 40060f0:	2101ffcc 	andi	r4,r4,2047
 40060f4:	28ca703a 	and	r5,r5,r3
 40060f8:	003fed06 	br	40060b0 <__alt_data_end+0xfc0060b0>
 40060fc:	0009883a 	mov	r4,zero
 4006100:	000b883a 	mov	r5,zero
 4006104:	003fea06 	br	40060b0 <__alt_data_end+0xfc0060b0>

04006108 <__extendsfdf2>:
 4006108:	200ad5fa 	srli	r5,r4,23
 400610c:	defffd04 	addi	sp,sp,-12
 4006110:	dc400115 	stw	r17,4(sp)
 4006114:	29403fcc 	andi	r5,r5,255
 4006118:	29800044 	addi	r6,r5,1
 400611c:	04402034 	movhi	r17,128
 4006120:	dc000015 	stw	r16,0(sp)
 4006124:	8c7fffc4 	addi	r17,r17,-1
 4006128:	dfc00215 	stw	ra,8(sp)
 400612c:	31803fcc 	andi	r6,r6,255
 4006130:	00800044 	movi	r2,1
 4006134:	8922703a 	and	r17,r17,r4
 4006138:	2020d7fa 	srli	r16,r4,31
 400613c:	1180110e 	bge	r2,r6,4006184 <__extendsfdf2+0x7c>
 4006140:	880cd0fa 	srli	r6,r17,3
 4006144:	8822977a 	slli	r17,r17,29
 4006148:	2940e004 	addi	r5,r5,896
 400614c:	2941ffcc 	andi	r5,r5,2047
 4006150:	2804953a 	slli	r2,r5,20
 4006154:	01400434 	movhi	r5,16
 4006158:	800697fa 	slli	r3,r16,31
 400615c:	297fffc4 	addi	r5,r5,-1
 4006160:	314a703a 	and	r5,r6,r5
 4006164:	288ab03a 	or	r5,r5,r2
 4006168:	28c6b03a 	or	r3,r5,r3
 400616c:	8805883a 	mov	r2,r17
 4006170:	dfc00217 	ldw	ra,8(sp)
 4006174:	dc400117 	ldw	r17,4(sp)
 4006178:	dc000017 	ldw	r16,0(sp)
 400617c:	dec00304 	addi	sp,sp,12
 4006180:	f800283a 	ret
 4006184:	2800111e 	bne	r5,zero,40061cc <__extendsfdf2+0xc4>
 4006188:	88001c26 	beq	r17,zero,40061fc <__extendsfdf2+0xf4>
 400618c:	8809883a 	mov	r4,r17
 4006190:	40063c00 	call	40063c0 <__clzsi2>
 4006194:	00c00284 	movi	r3,10
 4006198:	18801b16 	blt	r3,r2,4006208 <__extendsfdf2+0x100>
 400619c:	018002c4 	movi	r6,11
 40061a0:	308dc83a 	sub	r6,r6,r2
 40061a4:	11000544 	addi	r4,r2,21
 40061a8:	8986d83a 	srl	r3,r17,r6
 40061ac:	8922983a 	sll	r17,r17,r4
 40061b0:	0180e244 	movi	r6,905
 40061b4:	01400434 	movhi	r5,16
 40061b8:	3085c83a 	sub	r2,r6,r2
 40061bc:	297fffc4 	addi	r5,r5,-1
 40061c0:	194c703a 	and	r6,r3,r5
 40061c4:	1141ffcc 	andi	r5,r2,2047
 40061c8:	003fe006 	br	400614c <__alt_data_end+0xfc00614c>
 40061cc:	88000826 	beq	r17,zero,40061f0 <__extendsfdf2+0xe8>
 40061d0:	880cd0fa 	srli	r6,r17,3
 40061d4:	00800434 	movhi	r2,16
 40061d8:	10bfffc4 	addi	r2,r2,-1
 40061dc:	31800234 	orhi	r6,r6,8
 40061e0:	8822977a 	slli	r17,r17,29
 40061e4:	308c703a 	and	r6,r6,r2
 40061e8:	0141ffc4 	movi	r5,2047
 40061ec:	003fd706 	br	400614c <__alt_data_end+0xfc00614c>
 40061f0:	0141ffc4 	movi	r5,2047
 40061f4:	000d883a 	mov	r6,zero
 40061f8:	003fd406 	br	400614c <__alt_data_end+0xfc00614c>
 40061fc:	000b883a 	mov	r5,zero
 4006200:	000d883a 	mov	r6,zero
 4006204:	003fd106 	br	400614c <__alt_data_end+0xfc00614c>
 4006208:	11bffd44 	addi	r6,r2,-11
 400620c:	8986983a 	sll	r3,r17,r6
 4006210:	0023883a 	mov	r17,zero
 4006214:	003fe606 	br	40061b0 <__alt_data_end+0xfc0061b0>

04006218 <__truncdfsf2>:
 4006218:	2810d53a 	srli	r8,r5,20
 400621c:	01c00434 	movhi	r7,16
 4006220:	39ffffc4 	addi	r7,r7,-1
 4006224:	29ce703a 	and	r7,r5,r7
 4006228:	4201ffcc 	andi	r8,r8,2047
 400622c:	380e90fa 	slli	r7,r7,3
 4006230:	200cd77a 	srli	r6,r4,29
 4006234:	42400044 	addi	r9,r8,1
 4006238:	4a41ffcc 	andi	r9,r9,2047
 400623c:	00c00044 	movi	r3,1
 4006240:	280ad7fa 	srli	r5,r5,31
 4006244:	31ceb03a 	or	r7,r6,r7
 4006248:	200490fa 	slli	r2,r4,3
 400624c:	1a40230e 	bge	r3,r9,40062dc <__truncdfsf2+0xc4>
 4006250:	40ff2004 	addi	r3,r8,-896
 4006254:	01803f84 	movi	r6,254
 4006258:	30c01516 	blt	r6,r3,40062b0 <__truncdfsf2+0x98>
 400625c:	00c0380e 	bge	zero,r3,4006340 <__truncdfsf2+0x128>
 4006260:	200c91ba 	slli	r6,r4,6
 4006264:	380e90fa 	slli	r7,r7,3
 4006268:	1004d77a 	srli	r2,r2,29
 400626c:	300cc03a 	cmpne	r6,r6,zero
 4006270:	31ccb03a 	or	r6,r6,r7
 4006274:	308cb03a 	or	r6,r6,r2
 4006278:	308001cc 	andi	r2,r6,7
 400627c:	10000426 	beq	r2,zero,4006290 <__truncdfsf2+0x78>
 4006280:	308003cc 	andi	r2,r6,15
 4006284:	01000104 	movi	r4,4
 4006288:	11000126 	beq	r2,r4,4006290 <__truncdfsf2+0x78>
 400628c:	31800104 	addi	r6,r6,4
 4006290:	3081002c 	andhi	r2,r6,1024
 4006294:	10001626 	beq	r2,zero,40062f0 <__truncdfsf2+0xd8>
 4006298:	18c00044 	addi	r3,r3,1
 400629c:	00803fc4 	movi	r2,255
 40062a0:	18800326 	beq	r3,r2,40062b0 <__truncdfsf2+0x98>
 40062a4:	300c91ba 	slli	r6,r6,6
 40062a8:	300cd27a 	srli	r6,r6,9
 40062ac:	00000206 	br	40062b8 <__truncdfsf2+0xa0>
 40062b0:	00ffffc4 	movi	r3,-1
 40062b4:	000d883a 	mov	r6,zero
 40062b8:	18c03fcc 	andi	r3,r3,255
 40062bc:	180895fa 	slli	r4,r3,23
 40062c0:	00c02034 	movhi	r3,128
 40062c4:	280a97fa 	slli	r5,r5,31
 40062c8:	18ffffc4 	addi	r3,r3,-1
 40062cc:	30c6703a 	and	r3,r6,r3
 40062d0:	1906b03a 	or	r3,r3,r4
 40062d4:	1944b03a 	or	r2,r3,r5
 40062d8:	f800283a 	ret
 40062dc:	40000b1e 	bne	r8,zero,400630c <__truncdfsf2+0xf4>
 40062e0:	388cb03a 	or	r6,r7,r2
 40062e4:	0007883a 	mov	r3,zero
 40062e8:	30000426 	beq	r6,zero,40062fc <__truncdfsf2+0xe4>
 40062ec:	01800144 	movi	r6,5
 40062f0:	00803fc4 	movi	r2,255
 40062f4:	300cd0fa 	srli	r6,r6,3
 40062f8:	18800a26 	beq	r3,r2,4006324 <__truncdfsf2+0x10c>
 40062fc:	00802034 	movhi	r2,128
 4006300:	10bfffc4 	addi	r2,r2,-1
 4006304:	308c703a 	and	r6,r6,r2
 4006308:	003feb06 	br	40062b8 <__alt_data_end+0xfc0062b8>
 400630c:	3888b03a 	or	r4,r7,r2
 4006310:	203fe726 	beq	r4,zero,40062b0 <__alt_data_end+0xfc0062b0>
 4006314:	380c90fa 	slli	r6,r7,3
 4006318:	00c03fc4 	movi	r3,255
 400631c:	31808034 	orhi	r6,r6,512
 4006320:	003fd506 	br	4006278 <__alt_data_end+0xfc006278>
 4006324:	303fe226 	beq	r6,zero,40062b0 <__alt_data_end+0xfc0062b0>
 4006328:	00802034 	movhi	r2,128
 400632c:	31801034 	orhi	r6,r6,64
 4006330:	10bfffc4 	addi	r2,r2,-1
 4006334:	00ffffc4 	movi	r3,-1
 4006338:	308c703a 	and	r6,r6,r2
 400633c:	003fde06 	br	40062b8 <__alt_data_end+0xfc0062b8>
 4006340:	013ffa44 	movi	r4,-23
 4006344:	19000e16 	blt	r3,r4,4006380 <__truncdfsf2+0x168>
 4006348:	01000784 	movi	r4,30
 400634c:	20c9c83a 	sub	r4,r4,r3
 4006350:	018007c4 	movi	r6,31
 4006354:	39c02034 	orhi	r7,r7,128
 4006358:	31000b16 	blt	r6,r4,4006388 <__truncdfsf2+0x170>
 400635c:	423f2084 	addi	r8,r8,-894
 4006360:	120c983a 	sll	r6,r2,r8
 4006364:	3a0e983a 	sll	r7,r7,r8
 4006368:	1104d83a 	srl	r2,r2,r4
 400636c:	300cc03a 	cmpne	r6,r6,zero
 4006370:	31ceb03a 	or	r7,r6,r7
 4006374:	388cb03a 	or	r6,r7,r2
 4006378:	0007883a 	mov	r3,zero
 400637c:	003fbe06 	br	4006278 <__alt_data_end+0xfc006278>
 4006380:	0007883a 	mov	r3,zero
 4006384:	003fd906 	br	40062ec <__alt_data_end+0xfc0062ec>
 4006388:	01bfff84 	movi	r6,-2
 400638c:	30cdc83a 	sub	r6,r6,r3
 4006390:	00c00804 	movi	r3,32
 4006394:	398cd83a 	srl	r6,r7,r6
 4006398:	20c00726 	beq	r4,r3,40063b8 <__truncdfsf2+0x1a0>
 400639c:	423f2884 	addi	r8,r8,-862
 40063a0:	3a0e983a 	sll	r7,r7,r8
 40063a4:	3884b03a 	or	r2,r7,r2
 40063a8:	1004c03a 	cmpne	r2,r2,zero
 40063ac:	118cb03a 	or	r6,r2,r6
 40063b0:	0007883a 	mov	r3,zero
 40063b4:	003fb006 	br	4006278 <__alt_data_end+0xfc006278>
 40063b8:	000f883a 	mov	r7,zero
 40063bc:	003ff906 	br	40063a4 <__alt_data_end+0xfc0063a4>

040063c0 <__clzsi2>:
 40063c0:	00bfffd4 	movui	r2,65535
 40063c4:	11000536 	bltu	r2,r4,40063dc <__clzsi2+0x1c>
 40063c8:	00803fc4 	movi	r2,255
 40063cc:	11000f36 	bltu	r2,r4,400640c <__clzsi2+0x4c>
 40063d0:	00800804 	movi	r2,32
 40063d4:	0007883a 	mov	r3,zero
 40063d8:	00000506 	br	40063f0 <__clzsi2+0x30>
 40063dc:	00804034 	movhi	r2,256
 40063e0:	10bfffc4 	addi	r2,r2,-1
 40063e4:	11000c2e 	bgeu	r2,r4,4006418 <__clzsi2+0x58>
 40063e8:	00800204 	movi	r2,8
 40063ec:	00c00604 	movi	r3,24
 40063f0:	20c8d83a 	srl	r4,r4,r3
 40063f4:	00c10074 	movhi	r3,1025
 40063f8:	18c77884 	addi	r3,r3,7650
 40063fc:	1909883a 	add	r4,r3,r4
 4006400:	20c00003 	ldbu	r3,0(r4)
 4006404:	10c5c83a 	sub	r2,r2,r3
 4006408:	f800283a 	ret
 400640c:	00800604 	movi	r2,24
 4006410:	00c00204 	movi	r3,8
 4006414:	003ff606 	br	40063f0 <__alt_data_end+0xfc0063f0>
 4006418:	00800404 	movi	r2,16
 400641c:	1007883a 	mov	r3,r2
 4006420:	003ff306 	br	40063f0 <__alt_data_end+0xfc0063f0>

04006424 <memcpy>:
 4006424:	defffd04 	addi	sp,sp,-12
 4006428:	dfc00215 	stw	ra,8(sp)
 400642c:	dc400115 	stw	r17,4(sp)
 4006430:	dc000015 	stw	r16,0(sp)
 4006434:	00c003c4 	movi	r3,15
 4006438:	2005883a 	mov	r2,r4
 400643c:	1980452e 	bgeu	r3,r6,4006554 <memcpy+0x130>
 4006440:	2906b03a 	or	r3,r5,r4
 4006444:	18c000cc 	andi	r3,r3,3
 4006448:	1800441e 	bne	r3,zero,400655c <memcpy+0x138>
 400644c:	347ffc04 	addi	r17,r6,-16
 4006450:	8822d13a 	srli	r17,r17,4
 4006454:	28c00104 	addi	r3,r5,4
 4006458:	23400104 	addi	r13,r4,4
 400645c:	8820913a 	slli	r16,r17,4
 4006460:	2b000204 	addi	r12,r5,8
 4006464:	22c00204 	addi	r11,r4,8
 4006468:	84000504 	addi	r16,r16,20
 400646c:	2a800304 	addi	r10,r5,12
 4006470:	22400304 	addi	r9,r4,12
 4006474:	2c21883a 	add	r16,r5,r16
 4006478:	2811883a 	mov	r8,r5
 400647c:	200f883a 	mov	r7,r4
 4006480:	41000017 	ldw	r4,0(r8)
 4006484:	1fc00017 	ldw	ra,0(r3)
 4006488:	63c00017 	ldw	r15,0(r12)
 400648c:	39000015 	stw	r4,0(r7)
 4006490:	53800017 	ldw	r14,0(r10)
 4006494:	6fc00015 	stw	ra,0(r13)
 4006498:	5bc00015 	stw	r15,0(r11)
 400649c:	4b800015 	stw	r14,0(r9)
 40064a0:	18c00404 	addi	r3,r3,16
 40064a4:	39c00404 	addi	r7,r7,16
 40064a8:	42000404 	addi	r8,r8,16
 40064ac:	6b400404 	addi	r13,r13,16
 40064b0:	63000404 	addi	r12,r12,16
 40064b4:	5ac00404 	addi	r11,r11,16
 40064b8:	52800404 	addi	r10,r10,16
 40064bc:	4a400404 	addi	r9,r9,16
 40064c0:	1c3fef1e 	bne	r3,r16,4006480 <__alt_data_end+0xfc006480>
 40064c4:	89c00044 	addi	r7,r17,1
 40064c8:	380e913a 	slli	r7,r7,4
 40064cc:	310003cc 	andi	r4,r6,15
 40064d0:	02c000c4 	movi	r11,3
 40064d4:	11c7883a 	add	r3,r2,r7
 40064d8:	29cb883a 	add	r5,r5,r7
 40064dc:	5900212e 	bgeu	r11,r4,4006564 <memcpy+0x140>
 40064e0:	1813883a 	mov	r9,r3
 40064e4:	2811883a 	mov	r8,r5
 40064e8:	200f883a 	mov	r7,r4
 40064ec:	42800017 	ldw	r10,0(r8)
 40064f0:	4a400104 	addi	r9,r9,4
 40064f4:	39ffff04 	addi	r7,r7,-4
 40064f8:	4abfff15 	stw	r10,-4(r9)
 40064fc:	42000104 	addi	r8,r8,4
 4006500:	59fffa36 	bltu	r11,r7,40064ec <__alt_data_end+0xfc0064ec>
 4006504:	213fff04 	addi	r4,r4,-4
 4006508:	2008d0ba 	srli	r4,r4,2
 400650c:	318000cc 	andi	r6,r6,3
 4006510:	21000044 	addi	r4,r4,1
 4006514:	2109883a 	add	r4,r4,r4
 4006518:	2109883a 	add	r4,r4,r4
 400651c:	1907883a 	add	r3,r3,r4
 4006520:	290b883a 	add	r5,r5,r4
 4006524:	30000626 	beq	r6,zero,4006540 <memcpy+0x11c>
 4006528:	198d883a 	add	r6,r3,r6
 400652c:	29c00003 	ldbu	r7,0(r5)
 4006530:	18c00044 	addi	r3,r3,1
 4006534:	29400044 	addi	r5,r5,1
 4006538:	19ffffc5 	stb	r7,-1(r3)
 400653c:	19bffb1e 	bne	r3,r6,400652c <__alt_data_end+0xfc00652c>
 4006540:	dfc00217 	ldw	ra,8(sp)
 4006544:	dc400117 	ldw	r17,4(sp)
 4006548:	dc000017 	ldw	r16,0(sp)
 400654c:	dec00304 	addi	sp,sp,12
 4006550:	f800283a 	ret
 4006554:	2007883a 	mov	r3,r4
 4006558:	003ff206 	br	4006524 <__alt_data_end+0xfc006524>
 400655c:	2007883a 	mov	r3,r4
 4006560:	003ff106 	br	4006528 <__alt_data_end+0xfc006528>
 4006564:	200d883a 	mov	r6,r4
 4006568:	003fee06 	br	4006524 <__alt_data_end+0xfc006524>

0400656c <_snprintf_r>:
 400656c:	30003116 	blt	r6,zero,4006634 <_snprintf_r+0xc8>
 4006570:	deffe404 	addi	sp,sp,-112
 4006574:	00c08204 	movi	r3,520
 4006578:	dc001a15 	stw	r16,104(sp)
 400657c:	3005883a 	mov	r2,r6
 4006580:	dfc01b15 	stw	ra,108(sp)
 4006584:	d8c0030d 	sth	r3,12(sp)
 4006588:	d9400015 	stw	r5,0(sp)
 400658c:	d9400415 	stw	r5,16(sp)
 4006590:	380d883a 	mov	r6,r7
 4006594:	2021883a 	mov	r16,r4
 4006598:	10001026 	beq	r2,zero,40065dc <_snprintf_r+0x70>
 400659c:	10bfffc4 	addi	r2,r2,-1
 40065a0:	d8800215 	stw	r2,8(sp)
 40065a4:	d8800515 	stw	r2,20(sp)
 40065a8:	d9c01c04 	addi	r7,sp,112
 40065ac:	00bfffc4 	movi	r2,-1
 40065b0:	d80b883a 	mov	r5,sp
 40065b4:	d880038d 	sth	r2,14(sp)
 40065b8:	40067280 	call	4006728 <___svfprintf_internal_r>
 40065bc:	00ffffc4 	movi	r3,-1
 40065c0:	10c01316 	blt	r2,r3,4006610 <_snprintf_r+0xa4>
 40065c4:	d8c00017 	ldw	r3,0(sp)
 40065c8:	18000005 	stb	zero,0(r3)
 40065cc:	dfc01b17 	ldw	ra,108(sp)
 40065d0:	dc001a17 	ldw	r16,104(sp)
 40065d4:	dec01c04 	addi	sp,sp,112
 40065d8:	f800283a 	ret
 40065dc:	00bfffc4 	movi	r2,-1
 40065e0:	d9c01c04 	addi	r7,sp,112
 40065e4:	d80b883a 	mov	r5,sp
 40065e8:	d8000215 	stw	zero,8(sp)
 40065ec:	d8000515 	stw	zero,20(sp)
 40065f0:	d880038d 	sth	r2,14(sp)
 40065f4:	40067280 	call	4006728 <___svfprintf_internal_r>
 40065f8:	00ffffc4 	movi	r3,-1
 40065fc:	10c00716 	blt	r2,r3,400661c <_snprintf_r+0xb0>
 4006600:	dfc01b17 	ldw	ra,108(sp)
 4006604:	dc001a17 	ldw	r16,104(sp)
 4006608:	dec01c04 	addi	sp,sp,112
 400660c:	f800283a 	ret
 4006610:	00c022c4 	movi	r3,139
 4006614:	80c00015 	stw	r3,0(r16)
 4006618:	003fea06 	br	40065c4 <__alt_data_end+0xfc0065c4>
 400661c:	00c022c4 	movi	r3,139
 4006620:	80c00015 	stw	r3,0(r16)
 4006624:	dfc01b17 	ldw	ra,108(sp)
 4006628:	dc001a17 	ldw	r16,104(sp)
 400662c:	dec01c04 	addi	sp,sp,112
 4006630:	f800283a 	ret
 4006634:	008022c4 	movi	r2,139
 4006638:	20800015 	stw	r2,0(r4)
 400663c:	00bfffc4 	movi	r2,-1
 4006640:	f800283a 	ret

04006644 <snprintf>:
 4006644:	deffe304 	addi	sp,sp,-116
 4006648:	dfc01b15 	stw	ra,108(sp)
 400664c:	dc001a15 	stw	r16,104(sp)
 4006650:	d9c01c15 	stw	r7,112(sp)
 4006654:	00810074 	movhi	r2,1025
 4006658:	108fa104 	addi	r2,r2,16004
 400665c:	14000017 	ldw	r16,0(r2)
 4006660:	28002d16 	blt	r5,zero,4006718 <snprintf+0xd4>
 4006664:	00808204 	movi	r2,520
 4006668:	d880030d 	sth	r2,12(sp)
 400666c:	d9000015 	stw	r4,0(sp)
 4006670:	d9000415 	stw	r4,16(sp)
 4006674:	28001126 	beq	r5,zero,40066bc <snprintf+0x78>
 4006678:	28bfffc4 	addi	r2,r5,-1
 400667c:	d8800215 	stw	r2,8(sp)
 4006680:	d8800515 	stw	r2,20(sp)
 4006684:	d9c01c04 	addi	r7,sp,112
 4006688:	00bfffc4 	movi	r2,-1
 400668c:	d80b883a 	mov	r5,sp
 4006690:	8009883a 	mov	r4,r16
 4006694:	d880038d 	sth	r2,14(sp)
 4006698:	40067280 	call	4006728 <___svfprintf_internal_r>
 400669c:	00ffffc4 	movi	r3,-1
 40066a0:	10c01416 	blt	r2,r3,40066f4 <snprintf+0xb0>
 40066a4:	d8c00017 	ldw	r3,0(sp)
 40066a8:	18000005 	stb	zero,0(r3)
 40066ac:	dfc01b17 	ldw	ra,108(sp)
 40066b0:	dc001a17 	ldw	r16,104(sp)
 40066b4:	dec01d04 	addi	sp,sp,116
 40066b8:	f800283a 	ret
 40066bc:	00bfffc4 	movi	r2,-1
 40066c0:	d9c01c04 	addi	r7,sp,112
 40066c4:	d80b883a 	mov	r5,sp
 40066c8:	8009883a 	mov	r4,r16
 40066cc:	d8000215 	stw	zero,8(sp)
 40066d0:	d8000515 	stw	zero,20(sp)
 40066d4:	d880038d 	sth	r2,14(sp)
 40066d8:	40067280 	call	4006728 <___svfprintf_internal_r>
 40066dc:	00ffffc4 	movi	r3,-1
 40066e0:	10c00716 	blt	r2,r3,4006700 <snprintf+0xbc>
 40066e4:	dfc01b17 	ldw	ra,108(sp)
 40066e8:	dc001a17 	ldw	r16,104(sp)
 40066ec:	dec01d04 	addi	sp,sp,116
 40066f0:	f800283a 	ret
 40066f4:	00c022c4 	movi	r3,139
 40066f8:	80c00015 	stw	r3,0(r16)
 40066fc:	003fe906 	br	40066a4 <__alt_data_end+0xfc0066a4>
 4006700:	00c022c4 	movi	r3,139
 4006704:	80c00015 	stw	r3,0(r16)
 4006708:	dfc01b17 	ldw	ra,108(sp)
 400670c:	dc001a17 	ldw	r16,104(sp)
 4006710:	dec01d04 	addi	sp,sp,116
 4006714:	f800283a 	ret
 4006718:	008022c4 	movi	r2,139
 400671c:	80800015 	stw	r2,0(r16)
 4006720:	00bfffc4 	movi	r2,-1
 4006724:	003fef06 	br	40066e4 <__alt_data_end+0xfc0066e4>

04006728 <___svfprintf_internal_r>:
 4006728:	deffb704 	addi	sp,sp,-292
 400672c:	dfc04815 	stw	ra,288(sp)
 4006730:	ddc04615 	stw	r23,280(sp)
 4006734:	d9402d15 	stw	r5,180(sp)
 4006738:	d9003915 	stw	r4,228(sp)
 400673c:	302f883a 	mov	r23,r6
 4006740:	d9c02e15 	stw	r7,184(sp)
 4006744:	df004715 	stw	fp,284(sp)
 4006748:	dd804515 	stw	r22,276(sp)
 400674c:	dd404415 	stw	r21,272(sp)
 4006750:	dd004315 	stw	r20,268(sp)
 4006754:	dcc04215 	stw	r19,264(sp)
 4006758:	dc804115 	stw	r18,260(sp)
 400675c:	dc404015 	stw	r17,256(sp)
 4006760:	dc003f15 	stw	r16,252(sp)
 4006764:	400a3400 	call	400a340 <_localeconv_r>
 4006768:	10800017 	ldw	r2,0(r2)
 400676c:	1009883a 	mov	r4,r2
 4006770:	d8803415 	stw	r2,208(sp)
 4006774:	400bebc0 	call	400bebc <strlen>
 4006778:	d8c02d17 	ldw	r3,180(sp)
 400677c:	d8803815 	stw	r2,224(sp)
 4006780:	1880030b 	ldhu	r2,12(r3)
 4006784:	1080200c 	andi	r2,r2,128
 4006788:	10000226 	beq	r2,zero,4006794 <___svfprintf_internal_r+0x6c>
 400678c:	18800417 	ldw	r2,16(r3)
 4006790:	1006b126 	beq	r2,zero,4008258 <___svfprintf_internal_r+0x1b30>
 4006794:	dcc03917 	ldw	r19,228(sp)
 4006798:	d8c00404 	addi	r3,sp,16
 400679c:	05410074 	movhi	r21,1025
 40067a0:	d9001e04 	addi	r4,sp,120
 40067a4:	ad47c984 	addi	r21,r21,7974
 40067a8:	d8c01e15 	stw	r3,120(sp)
 40067ac:	d8002015 	stw	zero,128(sp)
 40067b0:	d8001f15 	stw	zero,124(sp)
 40067b4:	d8003315 	stw	zero,204(sp)
 40067b8:	d8003615 	stw	zero,216(sp)
 40067bc:	d8003715 	stw	zero,220(sp)
 40067c0:	1811883a 	mov	r8,r3
 40067c4:	d8003a15 	stw	zero,232(sp)
 40067c8:	d8003b15 	stw	zero,236(sp)
 40067cc:	d8002f15 	stw	zero,188(sp)
 40067d0:	d9002815 	stw	r4,160(sp)
 40067d4:	b8800007 	ldb	r2,0(r23)
 40067d8:	10027726 	beq	r2,zero,40071b8 <___svfprintf_internal_r+0xa90>
 40067dc:	00c00944 	movi	r3,37
 40067e0:	b823883a 	mov	r17,r23
 40067e4:	10c0021e 	bne	r2,r3,40067f0 <___svfprintf_internal_r+0xc8>
 40067e8:	00001406 	br	400683c <___svfprintf_internal_r+0x114>
 40067ec:	10c00326 	beq	r2,r3,40067fc <___svfprintf_internal_r+0xd4>
 40067f0:	8c400044 	addi	r17,r17,1
 40067f4:	88800007 	ldb	r2,0(r17)
 40067f8:	103ffc1e 	bne	r2,zero,40067ec <__alt_data_end+0xfc0067ec>
 40067fc:	8de1c83a 	sub	r16,r17,r23
 4006800:	80000e26 	beq	r16,zero,400683c <___svfprintf_internal_r+0x114>
 4006804:	d8c02017 	ldw	r3,128(sp)
 4006808:	d8801f17 	ldw	r2,124(sp)
 400680c:	45c00015 	stw	r23,0(r8)
 4006810:	1c07883a 	add	r3,r3,r16
 4006814:	10800044 	addi	r2,r2,1
 4006818:	d8c02015 	stw	r3,128(sp)
 400681c:	44000115 	stw	r16,4(r8)
 4006820:	d8801f15 	stw	r2,124(sp)
 4006824:	00c001c4 	movi	r3,7
 4006828:	18809916 	blt	r3,r2,4006a90 <___svfprintf_internal_r+0x368>
 400682c:	42000204 	addi	r8,r8,8
 4006830:	d9402f17 	ldw	r5,188(sp)
 4006834:	2c0b883a 	add	r5,r5,r16
 4006838:	d9402f15 	stw	r5,188(sp)
 400683c:	88800007 	ldb	r2,0(r17)
 4006840:	10009a26 	beq	r2,zero,4006aac <___svfprintf_internal_r+0x384>
 4006844:	8dc00044 	addi	r23,r17,1
 4006848:	8c400047 	ldb	r17,1(r17)
 400684c:	0021883a 	mov	r16,zero
 4006850:	00bfffc4 	movi	r2,-1
 4006854:	0025883a 	mov	r18,zero
 4006858:	dc002905 	stb	r16,164(sp)
 400685c:	d8002785 	stb	zero,158(sp)
 4006860:	d8002b05 	stb	zero,172(sp)
 4006864:	d8802a15 	stw	r2,168(sp)
 4006868:	d8003115 	stw	zero,196(sp)
 400686c:	05001604 	movi	r20,88
 4006870:	05800244 	movi	r22,9
 4006874:	4039883a 	mov	fp,r8
 4006878:	9021883a 	mov	r16,r18
 400687c:	bdc00044 	addi	r23,r23,1
 4006880:	88bff804 	addi	r2,r17,-32
 4006884:	a0831e36 	bltu	r20,r2,4007500 <___svfprintf_internal_r+0xdd8>
 4006888:	100490ba 	slli	r2,r2,2
 400688c:	00c10034 	movhi	r3,1024
 4006890:	18da2804 	addi	r3,r3,26784
 4006894:	10c5883a 	add	r2,r2,r3
 4006898:	10800017 	ldw	r2,0(r2)
 400689c:	1000683a 	jmp	r2
 40068a0:	04007448 	cmpgei	r16,zero,465
 40068a4:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40068a8:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40068ac:	0400743c 	xorhi	r16,zero,464
 40068b0:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40068b4:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40068b8:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40068bc:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40068c0:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40068c4:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40068c8:	04006b08 	cmpgei	r16,zero,428
 40068cc:	0400734c 	andi	r16,zero,461
 40068d0:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40068d4:	04006a14 	movui	r16,424
 40068d8:	04006b2c 	andhi	r16,zero,428
 40068dc:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40068e0:	04006bb8 	rdprs	r16,zero,430
 40068e4:	04006b7c 	xorhi	r16,zero,429
 40068e8:	04006b7c 	xorhi	r16,zero,429
 40068ec:	04006b7c 	xorhi	r16,zero,429
 40068f0:	04006b7c 	xorhi	r16,zero,429
 40068f4:	04006b7c 	xorhi	r16,zero,429
 40068f8:	04006b7c 	xorhi	r16,zero,429
 40068fc:	04006b7c 	xorhi	r16,zero,429
 4006900:	04006b7c 	xorhi	r16,zero,429
 4006904:	04006b7c 	xorhi	r16,zero,429
 4006908:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 400690c:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006910:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006914:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006918:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 400691c:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006920:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006924:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006928:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 400692c:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006930:	04006c7c 	xorhi	r16,zero,433
 4006934:	04006bc4 	movi	r16,431
 4006938:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 400693c:	04006bc4 	movi	r16,431
 4006940:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006944:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006948:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 400694c:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006950:	04006c70 	cmpltui	r16,zero,433
 4006954:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006958:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 400695c:	04006d44 	movi	r16,437
 4006960:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006964:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006968:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 400696c:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006970:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006974:	040071c0 	call	40071c <__alt_mem_sdram-0x3bff8e4>
 4006978:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 400697c:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006980:	0400722c 	andhi	r16,zero,456
 4006984:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006988:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 400698c:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006990:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006994:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006998:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 400699c:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40069a0:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40069a4:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40069a8:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40069ac:	040072e8 	cmpgeui	r16,zero,459
 40069b0:	04007468 	cmpgeui	r16,zero,465
 40069b4:	04006bc4 	movi	r16,431
 40069b8:	04006bc4 	movi	r16,431
 40069bc:	04006bc4 	movi	r16,431
 40069c0:	040074dc 	xori	r16,zero,467
 40069c4:	04007468 	cmpgeui	r16,zero,465
 40069c8:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40069cc:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40069d0:	04007488 	cmpgei	r16,zero,466
 40069d4:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40069d8:	0400749c 	xori	r16,zero,466
 40069dc:	0400732c 	andhi	r16,zero,460
 40069e0:	04006a20 	cmpeqi	r16,zero,424
 40069e4:	04007364 	muli	r16,zero,461
 40069e8:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40069ec:	04007370 	cmpltui	r16,zero,461
 40069f0:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40069f4:	040073d4 	movui	r16,463
 40069f8:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 40069fc:	04007500 	call	400750 <__alt_mem_sdram-0x3bff8b0>
 4006a00:	040073f4 	movhi	r16,463
 4006a04:	d8c03117 	ldw	r3,196(sp)
 4006a08:	d8802e15 	stw	r2,184(sp)
 4006a0c:	00c7c83a 	sub	r3,zero,r3
 4006a10:	d8c03115 	stw	r3,196(sp)
 4006a14:	84000114 	ori	r16,r16,4
 4006a18:	bc400007 	ldb	r17,0(r23)
 4006a1c:	003f9706 	br	400687c <__alt_data_end+0xfc00687c>
 4006a20:	00800c04 	movi	r2,48
 4006a24:	d8802705 	stb	r2,156(sp)
 4006a28:	00801e04 	movi	r2,120
 4006a2c:	d8802745 	stb	r2,157(sp)
 4006a30:	d9002a17 	ldw	r4,168(sp)
 4006a34:	d8802e17 	ldw	r2,184(sp)
 4006a38:	d8002785 	stb	zero,158(sp)
 4006a3c:	e011883a 	mov	r8,fp
 4006a40:	10c00104 	addi	r3,r2,4
 4006a44:	15000017 	ldw	r20,0(r2)
 4006a48:	002d883a 	mov	r22,zero
 4006a4c:	80800094 	ori	r2,r16,2
 4006a50:	2002b616 	blt	r4,zero,400752c <___svfprintf_internal_r+0xe04>
 4006a54:	00bfdfc4 	movi	r2,-129
 4006a58:	80a4703a 	and	r18,r16,r2
 4006a5c:	d8c02e15 	stw	r3,184(sp)
 4006a60:	94800094 	ori	r18,r18,2
 4006a64:	a002a01e 	bne	r20,zero,40074e8 <___svfprintf_internal_r+0xdc0>
 4006a68:	01410074 	movhi	r5,1025
 4006a6c:	2947c204 	addi	r5,r5,7944
 4006a70:	d9403a15 	stw	r5,232(sp)
 4006a74:	04401e04 	movi	r17,120
 4006a78:	d8c02a17 	ldw	r3,168(sp)
 4006a7c:	0039883a 	mov	fp,zero
 4006a80:	1801e626 	beq	r3,zero,400721c <___svfprintf_internal_r+0xaf4>
 4006a84:	0029883a 	mov	r20,zero
 4006a88:	002d883a 	mov	r22,zero
 4006a8c:	00020506 	br	40072a4 <___svfprintf_internal_r+0xb7c>
 4006a90:	d9402d17 	ldw	r5,180(sp)
 4006a94:	d9801e04 	addi	r6,sp,120
 4006a98:	9809883a 	mov	r4,r19
 4006a9c:	400bf540 	call	400bf54 <__ssprint_r>
 4006aa0:	1000081e 	bne	r2,zero,4006ac4 <___svfprintf_internal_r+0x39c>
 4006aa4:	da000404 	addi	r8,sp,16
 4006aa8:	003f6106 	br	4006830 <__alt_data_end+0xfc006830>
 4006aac:	d8802017 	ldw	r2,128(sp)
 4006ab0:	10000426 	beq	r2,zero,4006ac4 <___svfprintf_internal_r+0x39c>
 4006ab4:	d9402d17 	ldw	r5,180(sp)
 4006ab8:	d9003917 	ldw	r4,228(sp)
 4006abc:	d9801e04 	addi	r6,sp,120
 4006ac0:	400bf540 	call	400bf54 <__ssprint_r>
 4006ac4:	d8802d17 	ldw	r2,180(sp)
 4006ac8:	10c0030b 	ldhu	r3,12(r2)
 4006acc:	d8802f17 	ldw	r2,188(sp)
 4006ad0:	18c0100c 	andi	r3,r3,64
 4006ad4:	1806251e 	bne	r3,zero,400836c <___svfprintf_internal_r+0x1c44>
 4006ad8:	dfc04817 	ldw	ra,288(sp)
 4006adc:	df004717 	ldw	fp,284(sp)
 4006ae0:	ddc04617 	ldw	r23,280(sp)
 4006ae4:	dd804517 	ldw	r22,276(sp)
 4006ae8:	dd404417 	ldw	r21,272(sp)
 4006aec:	dd004317 	ldw	r20,268(sp)
 4006af0:	dcc04217 	ldw	r19,264(sp)
 4006af4:	dc804117 	ldw	r18,260(sp)
 4006af8:	dc404017 	ldw	r17,256(sp)
 4006afc:	dc003f17 	ldw	r16,252(sp)
 4006b00:	dec04904 	addi	sp,sp,292
 4006b04:	f800283a 	ret
 4006b08:	d9002e17 	ldw	r4,184(sp)
 4006b0c:	d9402e17 	ldw	r5,184(sp)
 4006b10:	21000017 	ldw	r4,0(r4)
 4006b14:	28800104 	addi	r2,r5,4
 4006b18:	d9003115 	stw	r4,196(sp)
 4006b1c:	203fb916 	blt	r4,zero,4006a04 <__alt_data_end+0xfc006a04>
 4006b20:	d8802e15 	stw	r2,184(sp)
 4006b24:	bc400007 	ldb	r17,0(r23)
 4006b28:	003f5406 	br	400687c <__alt_data_end+0xfc00687c>
 4006b2c:	bc400007 	ldb	r17,0(r23)
 4006b30:	01000a84 	movi	r4,42
 4006b34:	b8c00044 	addi	r3,r23,1
 4006b38:	89076926 	beq	r17,r4,40088e0 <___svfprintf_internal_r+0x21b8>
 4006b3c:	8cbff404 	addi	r18,r17,-48
 4006b40:	b486b936 	bltu	r22,r18,4008628 <___svfprintf_internal_r+0x1f00>
 4006b44:	0009883a 	mov	r4,zero
 4006b48:	1823883a 	mov	r17,r3
 4006b4c:	01400284 	movi	r5,10
 4006b50:	40024640 	call	4002464 <__mulsi3>
 4006b54:	88c00007 	ldb	r3,0(r17)
 4006b58:	1489883a 	add	r4,r2,r18
 4006b5c:	8dc00044 	addi	r23,r17,1
 4006b60:	1cbff404 	addi	r18,r3,-48
 4006b64:	b823883a 	mov	r17,r23
 4006b68:	b4bff82e 	bgeu	r22,r18,4006b4c <__alt_data_end+0xfc006b4c>
 4006b6c:	1823883a 	mov	r17,r3
 4006b70:	20060416 	blt	r4,zero,4008384 <___svfprintf_internal_r+0x1c5c>
 4006b74:	d9002a15 	stw	r4,168(sp)
 4006b78:	003f4106 	br	4006880 <__alt_data_end+0xfc006880>
 4006b7c:	8cbff404 	addi	r18,r17,-48
 4006b80:	d8003115 	stw	zero,196(sp)
 4006b84:	0009883a 	mov	r4,zero
 4006b88:	b823883a 	mov	r17,r23
 4006b8c:	01400284 	movi	r5,10
 4006b90:	40024640 	call	4002464 <__mulsi3>
 4006b94:	88c00007 	ldb	r3,0(r17)
 4006b98:	9089883a 	add	r4,r18,r2
 4006b9c:	bdc00044 	addi	r23,r23,1
 4006ba0:	1cbff404 	addi	r18,r3,-48
 4006ba4:	b823883a 	mov	r17,r23
 4006ba8:	b4bff82e 	bgeu	r22,r18,4006b8c <__alt_data_end+0xfc006b8c>
 4006bac:	1823883a 	mov	r17,r3
 4006bb0:	d9003115 	stw	r4,196(sp)
 4006bb4:	003f3206 	br	4006880 <__alt_data_end+0xfc006880>
 4006bb8:	84002014 	ori	r16,r16,128
 4006bbc:	bc400007 	ldb	r17,0(r23)
 4006bc0:	003f2e06 	br	400687c <__alt_data_end+0xfc00687c>
 4006bc4:	8025883a 	mov	r18,r16
 4006bc8:	dc002903 	ldbu	r16,164(sp)
 4006bcc:	e011883a 	mov	r8,fp
 4006bd0:	84003fcc 	andi	r16,r16,255
 4006bd4:	8007721e 	bne	r16,zero,40089a0 <___svfprintf_internal_r+0x2278>
 4006bd8:	9080020c 	andi	r2,r18,8
 4006bdc:	1004a526 	beq	r2,zero,4007e74 <___svfprintf_internal_r+0x174c>
 4006be0:	d9002e17 	ldw	r4,184(sp)
 4006be4:	d9402e17 	ldw	r5,184(sp)
 4006be8:	d8802e17 	ldw	r2,184(sp)
 4006bec:	21000017 	ldw	r4,0(r4)
 4006bf0:	29400117 	ldw	r5,4(r5)
 4006bf4:	10800204 	addi	r2,r2,8
 4006bf8:	d9003615 	stw	r4,216(sp)
 4006bfc:	d9403715 	stw	r5,220(sp)
 4006c00:	d8802e15 	stw	r2,184(sp)
 4006c04:	d9003617 	ldw	r4,216(sp)
 4006c08:	d9403717 	ldw	r5,220(sp)
 4006c0c:	da003e15 	stw	r8,248(sp)
 4006c10:	04000044 	movi	r16,1
 4006c14:	400bd180 	call	400bd18 <__fpclassifyd>
 4006c18:	da003e17 	ldw	r8,248(sp)
 4006c1c:	1404731e 	bne	r2,r16,4007dec <___svfprintf_internal_r+0x16c4>
 4006c20:	d9003617 	ldw	r4,216(sp)
 4006c24:	d9403717 	ldw	r5,220(sp)
 4006c28:	000d883a 	mov	r6,zero
 4006c2c:	000f883a 	mov	r7,zero
 4006c30:	4004ca80 	call	4004ca8 <__ledf2>
 4006c34:	da003e17 	ldw	r8,248(sp)
 4006c38:	10061b16 	blt	r2,zero,40084a8 <___svfprintf_internal_r+0x1d80>
 4006c3c:	df002783 	ldbu	fp,158(sp)
 4006c40:	008011c4 	movi	r2,71
 4006c44:	1445810e 	bge	r2,r17,400824c <___svfprintf_internal_r+0x1b24>
 4006c48:	04010074 	movhi	r16,1025
 4006c4c:	8407ba04 	addi	r16,r16,7912
 4006c50:	00c000c4 	movi	r3,3
 4006c54:	00bfdfc4 	movi	r2,-129
 4006c58:	d8c02915 	stw	r3,164(sp)
 4006c5c:	90a4703a 	and	r18,r18,r2
 4006c60:	d8c02b15 	stw	r3,172(sp)
 4006c64:	d8002a15 	stw	zero,168(sp)
 4006c68:	d8003215 	stw	zero,200(sp)
 4006c6c:	00006c06 	br	4006e20 <___svfprintf_internal_r+0x6f8>
 4006c70:	84000214 	ori	r16,r16,8
 4006c74:	bc400007 	ldb	r17,0(r23)
 4006c78:	003f0006 	br	400687c <__alt_data_end+0xfc00687c>
 4006c7c:	8025883a 	mov	r18,r16
 4006c80:	dc002903 	ldbu	r16,164(sp)
 4006c84:	e011883a 	mov	r8,fp
 4006c88:	84003fcc 	andi	r16,r16,255
 4006c8c:	80073f1e 	bne	r16,zero,400898c <___svfprintf_internal_r+0x2264>
 4006c90:	94800414 	ori	r18,r18,16
 4006c94:	9080080c 	andi	r2,r18,32
 4006c98:	1003bb26 	beq	r2,zero,4007b88 <___svfprintf_internal_r+0x1460>
 4006c9c:	d9002e17 	ldw	r4,184(sp)
 4006ca0:	20800117 	ldw	r2,4(r4)
 4006ca4:	25000017 	ldw	r20,0(r4)
 4006ca8:	21000204 	addi	r4,r4,8
 4006cac:	d9002e15 	stw	r4,184(sp)
 4006cb0:	102d883a 	mov	r22,r2
 4006cb4:	1003bd16 	blt	r2,zero,4007bac <___svfprintf_internal_r+0x1484>
 4006cb8:	d9002a17 	ldw	r4,168(sp)
 4006cbc:	df002783 	ldbu	fp,158(sp)
 4006cc0:	2003d016 	blt	r4,zero,4007c04 <___svfprintf_internal_r+0x14dc>
 4006cc4:	00ffdfc4 	movi	r3,-129
 4006cc8:	a584b03a 	or	r2,r20,r22
 4006ccc:	90e4703a 	and	r18,r18,r3
 4006cd0:	10015026 	beq	r2,zero,4007214 <___svfprintf_internal_r+0xaec>
 4006cd4:	b0037026 	beq	r22,zero,4007a98 <___svfprintf_internal_r+0x1370>
 4006cd8:	dc402915 	stw	r17,164(sp)
 4006cdc:	dc001e04 	addi	r16,sp,120
 4006ce0:	b023883a 	mov	r17,r22
 4006ce4:	402d883a 	mov	r22,r8
 4006ce8:	a009883a 	mov	r4,r20
 4006cec:	880b883a 	mov	r5,r17
 4006cf0:	01800284 	movi	r6,10
 4006cf4:	000f883a 	mov	r7,zero
 4006cf8:	400e7b80 	call	400e7b8 <__umoddi3>
 4006cfc:	10800c04 	addi	r2,r2,48
 4006d00:	843fffc4 	addi	r16,r16,-1
 4006d04:	a009883a 	mov	r4,r20
 4006d08:	880b883a 	mov	r5,r17
 4006d0c:	80800005 	stb	r2,0(r16)
 4006d10:	01800284 	movi	r6,10
 4006d14:	000f883a 	mov	r7,zero
 4006d18:	400e1bc0 	call	400e1bc <__udivdi3>
 4006d1c:	1029883a 	mov	r20,r2
 4006d20:	10c4b03a 	or	r2,r2,r3
 4006d24:	1823883a 	mov	r17,r3
 4006d28:	103fef1e 	bne	r2,zero,4006ce8 <__alt_data_end+0xfc006ce8>
 4006d2c:	d8c02817 	ldw	r3,160(sp)
 4006d30:	dc402917 	ldw	r17,164(sp)
 4006d34:	b011883a 	mov	r8,r22
 4006d38:	1c07c83a 	sub	r3,r3,r16
 4006d3c:	d8c02b15 	stw	r3,172(sp)
 4006d40:	00003106 	br	4006e08 <___svfprintf_internal_r+0x6e0>
 4006d44:	8025883a 	mov	r18,r16
 4006d48:	dc002903 	ldbu	r16,164(sp)
 4006d4c:	e011883a 	mov	r8,fp
 4006d50:	84003fcc 	andi	r16,r16,255
 4006d54:	80070a1e 	bne	r16,zero,4008980 <___svfprintf_internal_r+0x2258>
 4006d58:	94800414 	ori	r18,r18,16
 4006d5c:	9080080c 	andi	r2,r18,32
 4006d60:	1002f626 	beq	r2,zero,400793c <___svfprintf_internal_r+0x1214>
 4006d64:	d9002e17 	ldw	r4,184(sp)
 4006d68:	d9402a17 	ldw	r5,168(sp)
 4006d6c:	d8002785 	stb	zero,158(sp)
 4006d70:	20800204 	addi	r2,r4,8
 4006d74:	25000017 	ldw	r20,0(r4)
 4006d78:	25800117 	ldw	r22,4(r4)
 4006d7c:	28043716 	blt	r5,zero,4007e5c <___svfprintf_internal_r+0x1734>
 4006d80:	013fdfc4 	movi	r4,-129
 4006d84:	a586b03a 	or	r3,r20,r22
 4006d88:	d8802e15 	stw	r2,184(sp)
 4006d8c:	9124703a 	and	r18,r18,r4
 4006d90:	1802f71e 	bne	r3,zero,4007970 <___svfprintf_internal_r+0x1248>
 4006d94:	d9402a17 	ldw	r5,168(sp)
 4006d98:	0039883a 	mov	fp,zero
 4006d9c:	2806df26 	beq	r5,zero,400891c <___svfprintf_internal_r+0x21f4>
 4006da0:	0029883a 	mov	r20,zero
 4006da4:	002d883a 	mov	r22,zero
 4006da8:	dc001e04 	addi	r16,sp,120
 4006dac:	a006d0fa 	srli	r3,r20,3
 4006db0:	b008977a 	slli	r4,r22,29
 4006db4:	b02cd0fa 	srli	r22,r22,3
 4006db8:	a50001cc 	andi	r20,r20,7
 4006dbc:	a0800c04 	addi	r2,r20,48
 4006dc0:	843fffc4 	addi	r16,r16,-1
 4006dc4:	20e8b03a 	or	r20,r4,r3
 4006dc8:	80800005 	stb	r2,0(r16)
 4006dcc:	a586b03a 	or	r3,r20,r22
 4006dd0:	183ff61e 	bne	r3,zero,4006dac <__alt_data_end+0xfc006dac>
 4006dd4:	90c0004c 	andi	r3,r18,1
 4006dd8:	18013f26 	beq	r3,zero,40072d8 <___svfprintf_internal_r+0xbb0>
 4006ddc:	10803fcc 	andi	r2,r2,255
 4006de0:	1080201c 	xori	r2,r2,128
 4006de4:	10bfe004 	addi	r2,r2,-128
 4006de8:	00c00c04 	movi	r3,48
 4006dec:	10c13a26 	beq	r2,r3,40072d8 <___svfprintf_internal_r+0xbb0>
 4006df0:	80ffffc5 	stb	r3,-1(r16)
 4006df4:	d8c02817 	ldw	r3,160(sp)
 4006df8:	80bfffc4 	addi	r2,r16,-1
 4006dfc:	1021883a 	mov	r16,r2
 4006e00:	1887c83a 	sub	r3,r3,r2
 4006e04:	d8c02b15 	stw	r3,172(sp)
 4006e08:	d8802b17 	ldw	r2,172(sp)
 4006e0c:	d9002a17 	ldw	r4,168(sp)
 4006e10:	1100010e 	bge	r2,r4,4006e18 <___svfprintf_internal_r+0x6f0>
 4006e14:	2005883a 	mov	r2,r4
 4006e18:	d8802915 	stw	r2,164(sp)
 4006e1c:	d8003215 	stw	zero,200(sp)
 4006e20:	e7003fcc 	andi	fp,fp,255
 4006e24:	e700201c 	xori	fp,fp,128
 4006e28:	e73fe004 	addi	fp,fp,-128
 4006e2c:	e0000326 	beq	fp,zero,4006e3c <___svfprintf_internal_r+0x714>
 4006e30:	d8c02917 	ldw	r3,164(sp)
 4006e34:	18c00044 	addi	r3,r3,1
 4006e38:	d8c02915 	stw	r3,164(sp)
 4006e3c:	90c0008c 	andi	r3,r18,2
 4006e40:	d8c02c15 	stw	r3,176(sp)
 4006e44:	18000326 	beq	r3,zero,4006e54 <___svfprintf_internal_r+0x72c>
 4006e48:	d8c02917 	ldw	r3,164(sp)
 4006e4c:	18c00084 	addi	r3,r3,2
 4006e50:	d8c02915 	stw	r3,164(sp)
 4006e54:	90c0210c 	andi	r3,r18,132
 4006e58:	d8c03015 	stw	r3,192(sp)
 4006e5c:	1801c31e 	bne	r3,zero,400756c <___svfprintf_internal_r+0xe44>
 4006e60:	d9003117 	ldw	r4,196(sp)
 4006e64:	d8c02917 	ldw	r3,164(sp)
 4006e68:	20e9c83a 	sub	r20,r4,r3
 4006e6c:	0501bf0e 	bge	zero,r20,400756c <___svfprintf_internal_r+0xe44>
 4006e70:	02400404 	movi	r9,16
 4006e74:	d8c02017 	ldw	r3,128(sp)
 4006e78:	d8801f17 	ldw	r2,124(sp)
 4006e7c:	4d053d0e 	bge	r9,r20,4008374 <___svfprintf_internal_r+0x1c4c>
 4006e80:	01410074 	movhi	r5,1025
 4006e84:	2947cd84 	addi	r5,r5,7990
 4006e88:	dc403c15 	stw	r17,240(sp)
 4006e8c:	d9403515 	stw	r5,212(sp)
 4006e90:	a023883a 	mov	r17,r20
 4006e94:	482d883a 	mov	r22,r9
 4006e98:	9029883a 	mov	r20,r18
 4006e9c:	070001c4 	movi	fp,7
 4006ea0:	8025883a 	mov	r18,r16
 4006ea4:	dc002d17 	ldw	r16,180(sp)
 4006ea8:	00000306 	br	4006eb8 <___svfprintf_internal_r+0x790>
 4006eac:	8c7ffc04 	addi	r17,r17,-16
 4006eb0:	42000204 	addi	r8,r8,8
 4006eb4:	b440130e 	bge	r22,r17,4006f04 <___svfprintf_internal_r+0x7dc>
 4006eb8:	01010074 	movhi	r4,1025
 4006ebc:	18c00404 	addi	r3,r3,16
 4006ec0:	10800044 	addi	r2,r2,1
 4006ec4:	2107cd84 	addi	r4,r4,7990
 4006ec8:	41000015 	stw	r4,0(r8)
 4006ecc:	45800115 	stw	r22,4(r8)
 4006ed0:	d8c02015 	stw	r3,128(sp)
 4006ed4:	d8801f15 	stw	r2,124(sp)
 4006ed8:	e0bff40e 	bge	fp,r2,4006eac <__alt_data_end+0xfc006eac>
 4006edc:	d9801e04 	addi	r6,sp,120
 4006ee0:	800b883a 	mov	r5,r16
 4006ee4:	9809883a 	mov	r4,r19
 4006ee8:	400bf540 	call	400bf54 <__ssprint_r>
 4006eec:	103ef51e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4006ef0:	8c7ffc04 	addi	r17,r17,-16
 4006ef4:	d8c02017 	ldw	r3,128(sp)
 4006ef8:	d8801f17 	ldw	r2,124(sp)
 4006efc:	da000404 	addi	r8,sp,16
 4006f00:	b47fed16 	blt	r22,r17,4006eb8 <__alt_data_end+0xfc006eb8>
 4006f04:	9021883a 	mov	r16,r18
 4006f08:	a025883a 	mov	r18,r20
 4006f0c:	8829883a 	mov	r20,r17
 4006f10:	dc403c17 	ldw	r17,240(sp)
 4006f14:	d9403517 	ldw	r5,212(sp)
 4006f18:	a0c7883a 	add	r3,r20,r3
 4006f1c:	10800044 	addi	r2,r2,1
 4006f20:	41400015 	stw	r5,0(r8)
 4006f24:	45000115 	stw	r20,4(r8)
 4006f28:	d8c02015 	stw	r3,128(sp)
 4006f2c:	d8801f15 	stw	r2,124(sp)
 4006f30:	010001c4 	movi	r4,7
 4006f34:	2082c116 	blt	r4,r2,4007a3c <___svfprintf_internal_r+0x1314>
 4006f38:	df002787 	ldb	fp,158(sp)
 4006f3c:	42000204 	addi	r8,r8,8
 4006f40:	e0000c26 	beq	fp,zero,4006f74 <___svfprintf_internal_r+0x84c>
 4006f44:	d8801f17 	ldw	r2,124(sp)
 4006f48:	d9002784 	addi	r4,sp,158
 4006f4c:	18c00044 	addi	r3,r3,1
 4006f50:	10800044 	addi	r2,r2,1
 4006f54:	41000015 	stw	r4,0(r8)
 4006f58:	01000044 	movi	r4,1
 4006f5c:	41000115 	stw	r4,4(r8)
 4006f60:	d8c02015 	stw	r3,128(sp)
 4006f64:	d8801f15 	stw	r2,124(sp)
 4006f68:	010001c4 	movi	r4,7
 4006f6c:	20825a16 	blt	r4,r2,40078d8 <___svfprintf_internal_r+0x11b0>
 4006f70:	42000204 	addi	r8,r8,8
 4006f74:	d8802c17 	ldw	r2,176(sp)
 4006f78:	10000c26 	beq	r2,zero,4006fac <___svfprintf_internal_r+0x884>
 4006f7c:	d8801f17 	ldw	r2,124(sp)
 4006f80:	d9002704 	addi	r4,sp,156
 4006f84:	18c00084 	addi	r3,r3,2
 4006f88:	10800044 	addi	r2,r2,1
 4006f8c:	41000015 	stw	r4,0(r8)
 4006f90:	01000084 	movi	r4,2
 4006f94:	41000115 	stw	r4,4(r8)
 4006f98:	d8c02015 	stw	r3,128(sp)
 4006f9c:	d8801f15 	stw	r2,124(sp)
 4006fa0:	010001c4 	movi	r4,7
 4006fa4:	20825416 	blt	r4,r2,40078f8 <___svfprintf_internal_r+0x11d0>
 4006fa8:	42000204 	addi	r8,r8,8
 4006fac:	d9003017 	ldw	r4,192(sp)
 4006fb0:	00802004 	movi	r2,128
 4006fb4:	2081b926 	beq	r4,r2,400769c <___svfprintf_internal_r+0xf74>
 4006fb8:	d9402a17 	ldw	r5,168(sp)
 4006fbc:	d8802b17 	ldw	r2,172(sp)
 4006fc0:	28adc83a 	sub	r22,r5,r2
 4006fc4:	05802f0e 	bge	zero,r22,4007084 <___svfprintf_internal_r+0x95c>
 4006fc8:	07000404 	movi	fp,16
 4006fcc:	d8801f17 	ldw	r2,124(sp)
 4006fd0:	e583e20e 	bge	fp,r22,4007f5c <___svfprintf_internal_r+0x1834>
 4006fd4:	01410074 	movhi	r5,1025
 4006fd8:	2947c984 	addi	r5,r5,7974
 4006fdc:	dc402a15 	stw	r17,168(sp)
 4006fe0:	d9402c15 	stw	r5,176(sp)
 4006fe4:	b023883a 	mov	r17,r22
 4006fe8:	050001c4 	movi	r20,7
 4006fec:	902d883a 	mov	r22,r18
 4006ff0:	8025883a 	mov	r18,r16
 4006ff4:	dc002d17 	ldw	r16,180(sp)
 4006ff8:	00000306 	br	4007008 <___svfprintf_internal_r+0x8e0>
 4006ffc:	8c7ffc04 	addi	r17,r17,-16
 4007000:	42000204 	addi	r8,r8,8
 4007004:	e440110e 	bge	fp,r17,400704c <___svfprintf_internal_r+0x924>
 4007008:	18c00404 	addi	r3,r3,16
 400700c:	10800044 	addi	r2,r2,1
 4007010:	45400015 	stw	r21,0(r8)
 4007014:	47000115 	stw	fp,4(r8)
 4007018:	d8c02015 	stw	r3,128(sp)
 400701c:	d8801f15 	stw	r2,124(sp)
 4007020:	a0bff60e 	bge	r20,r2,4006ffc <__alt_data_end+0xfc006ffc>
 4007024:	d9801e04 	addi	r6,sp,120
 4007028:	800b883a 	mov	r5,r16
 400702c:	9809883a 	mov	r4,r19
 4007030:	400bf540 	call	400bf54 <__ssprint_r>
 4007034:	103ea31e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4007038:	8c7ffc04 	addi	r17,r17,-16
 400703c:	d8c02017 	ldw	r3,128(sp)
 4007040:	d8801f17 	ldw	r2,124(sp)
 4007044:	da000404 	addi	r8,sp,16
 4007048:	e47fef16 	blt	fp,r17,4007008 <__alt_data_end+0xfc007008>
 400704c:	9021883a 	mov	r16,r18
 4007050:	b025883a 	mov	r18,r22
 4007054:	882d883a 	mov	r22,r17
 4007058:	dc402a17 	ldw	r17,168(sp)
 400705c:	d9002c17 	ldw	r4,176(sp)
 4007060:	1d87883a 	add	r3,r3,r22
 4007064:	10800044 	addi	r2,r2,1
 4007068:	41000015 	stw	r4,0(r8)
 400706c:	45800115 	stw	r22,4(r8)
 4007070:	d8c02015 	stw	r3,128(sp)
 4007074:	d8801f15 	stw	r2,124(sp)
 4007078:	010001c4 	movi	r4,7
 400707c:	20820e16 	blt	r4,r2,40078b8 <___svfprintf_internal_r+0x1190>
 4007080:	42000204 	addi	r8,r8,8
 4007084:	9080400c 	andi	r2,r18,256
 4007088:	10013a1e 	bne	r2,zero,4007574 <___svfprintf_internal_r+0xe4c>
 400708c:	d9402b17 	ldw	r5,172(sp)
 4007090:	d8801f17 	ldw	r2,124(sp)
 4007094:	44000015 	stw	r16,0(r8)
 4007098:	1947883a 	add	r3,r3,r5
 400709c:	10800044 	addi	r2,r2,1
 40070a0:	41400115 	stw	r5,4(r8)
 40070a4:	d8c02015 	stw	r3,128(sp)
 40070a8:	d8801f15 	stw	r2,124(sp)
 40070ac:	010001c4 	movi	r4,7
 40070b0:	2081f316 	blt	r4,r2,4007880 <___svfprintf_internal_r+0x1158>
 40070b4:	42000204 	addi	r8,r8,8
 40070b8:	9480010c 	andi	r18,r18,4
 40070bc:	90003226 	beq	r18,zero,4007188 <___svfprintf_internal_r+0xa60>
 40070c0:	d9403117 	ldw	r5,196(sp)
 40070c4:	d8802917 	ldw	r2,164(sp)
 40070c8:	28a1c83a 	sub	r16,r5,r2
 40070cc:	04002e0e 	bge	zero,r16,4007188 <___svfprintf_internal_r+0xa60>
 40070d0:	04400404 	movi	r17,16
 40070d4:	d8801f17 	ldw	r2,124(sp)
 40070d8:	8c04db0e 	bge	r17,r16,4008448 <___svfprintf_internal_r+0x1d20>
 40070dc:	01410074 	movhi	r5,1025
 40070e0:	2947cd84 	addi	r5,r5,7990
 40070e4:	d9403515 	stw	r5,212(sp)
 40070e8:	048001c4 	movi	r18,7
 40070ec:	dd002d17 	ldw	r20,180(sp)
 40070f0:	00000306 	br	4007100 <___svfprintf_internal_r+0x9d8>
 40070f4:	843ffc04 	addi	r16,r16,-16
 40070f8:	42000204 	addi	r8,r8,8
 40070fc:	8c00130e 	bge	r17,r16,400714c <___svfprintf_internal_r+0xa24>
 4007100:	01010074 	movhi	r4,1025
 4007104:	18c00404 	addi	r3,r3,16
 4007108:	10800044 	addi	r2,r2,1
 400710c:	2107cd84 	addi	r4,r4,7990
 4007110:	41000015 	stw	r4,0(r8)
 4007114:	44400115 	stw	r17,4(r8)
 4007118:	d8c02015 	stw	r3,128(sp)
 400711c:	d8801f15 	stw	r2,124(sp)
 4007120:	90bff40e 	bge	r18,r2,40070f4 <__alt_data_end+0xfc0070f4>
 4007124:	d9801e04 	addi	r6,sp,120
 4007128:	a00b883a 	mov	r5,r20
 400712c:	9809883a 	mov	r4,r19
 4007130:	400bf540 	call	400bf54 <__ssprint_r>
 4007134:	103e631e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4007138:	843ffc04 	addi	r16,r16,-16
 400713c:	d8c02017 	ldw	r3,128(sp)
 4007140:	d8801f17 	ldw	r2,124(sp)
 4007144:	da000404 	addi	r8,sp,16
 4007148:	8c3fed16 	blt	r17,r16,4007100 <__alt_data_end+0xfc007100>
 400714c:	d9403517 	ldw	r5,212(sp)
 4007150:	1c07883a 	add	r3,r3,r16
 4007154:	10800044 	addi	r2,r2,1
 4007158:	41400015 	stw	r5,0(r8)
 400715c:	44000115 	stw	r16,4(r8)
 4007160:	d8c02015 	stw	r3,128(sp)
 4007164:	d8801f15 	stw	r2,124(sp)
 4007168:	010001c4 	movi	r4,7
 400716c:	2080060e 	bge	r4,r2,4007188 <___svfprintf_internal_r+0xa60>
 4007170:	d9402d17 	ldw	r5,180(sp)
 4007174:	d9801e04 	addi	r6,sp,120
 4007178:	9809883a 	mov	r4,r19
 400717c:	400bf540 	call	400bf54 <__ssprint_r>
 4007180:	103e501e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4007184:	d8c02017 	ldw	r3,128(sp)
 4007188:	d8803117 	ldw	r2,196(sp)
 400718c:	d9002917 	ldw	r4,164(sp)
 4007190:	1100010e 	bge	r2,r4,4007198 <___svfprintf_internal_r+0xa70>
 4007194:	2005883a 	mov	r2,r4
 4007198:	d9402f17 	ldw	r5,188(sp)
 400719c:	288b883a 	add	r5,r5,r2
 40071a0:	d9402f15 	stw	r5,188(sp)
 40071a4:	1801be1e 	bne	r3,zero,40078a0 <___svfprintf_internal_r+0x1178>
 40071a8:	b8800007 	ldb	r2,0(r23)
 40071ac:	d8001f15 	stw	zero,124(sp)
 40071b0:	da000404 	addi	r8,sp,16
 40071b4:	103d891e 	bne	r2,zero,40067dc <__alt_data_end+0xfc0067dc>
 40071b8:	b823883a 	mov	r17,r23
 40071bc:	003d9f06 	br	400683c <__alt_data_end+0xfc00683c>
 40071c0:	8025883a 	mov	r18,r16
 40071c4:	dc002903 	ldbu	r16,164(sp)
 40071c8:	e011883a 	mov	r8,fp
 40071cc:	84003fcc 	andi	r16,r16,255
 40071d0:	8005e61e 	bne	r16,zero,400896c <___svfprintf_internal_r+0x2244>
 40071d4:	94800414 	ori	r18,r18,16
 40071d8:	9080080c 	andi	r2,r18,32
 40071dc:	10022026 	beq	r2,zero,4007a60 <___svfprintf_internal_r+0x1338>
 40071e0:	d9002e17 	ldw	r4,184(sp)
 40071e4:	d9402a17 	ldw	r5,168(sp)
 40071e8:	d8002785 	stb	zero,158(sp)
 40071ec:	20c00204 	addi	r3,r4,8
 40071f0:	25000017 	ldw	r20,0(r4)
 40071f4:	25800117 	ldw	r22,4(r4)
 40071f8:	2803ad16 	blt	r5,zero,40080b0 <___svfprintf_internal_r+0x1988>
 40071fc:	013fdfc4 	movi	r4,-129
 4007200:	a584b03a 	or	r2,r20,r22
 4007204:	d8c02e15 	stw	r3,184(sp)
 4007208:	9124703a 	and	r18,r18,r4
 400720c:	0039883a 	mov	fp,zero
 4007210:	103eb01e 	bne	r2,zero,4006cd4 <__alt_data_end+0xfc006cd4>
 4007214:	d8802a17 	ldw	r2,168(sp)
 4007218:	1002e71e 	bne	r2,zero,4007db8 <___svfprintf_internal_r+0x1690>
 400721c:	d8002a15 	stw	zero,168(sp)
 4007220:	d8002b15 	stw	zero,172(sp)
 4007224:	dc001e04 	addi	r16,sp,120
 4007228:	003ef706 	br	4006e08 <__alt_data_end+0xfc006e08>
 400722c:	8025883a 	mov	r18,r16
 4007230:	dc002903 	ldbu	r16,164(sp)
 4007234:	e011883a 	mov	r8,fp
 4007238:	84003fcc 	andi	r16,r16,255
 400723c:	8005c81e 	bne	r16,zero,4008960 <___svfprintf_internal_r+0x2238>
 4007240:	01010074 	movhi	r4,1025
 4007244:	2107bd04 	addi	r4,r4,7924
 4007248:	d9003a15 	stw	r4,232(sp)
 400724c:	9080080c 	andi	r2,r18,32
 4007250:	10007226 	beq	r2,zero,400741c <___svfprintf_internal_r+0xcf4>
 4007254:	d9402e17 	ldw	r5,184(sp)
 4007258:	2d000017 	ldw	r20,0(r5)
 400725c:	2d800117 	ldw	r22,4(r5)
 4007260:	29400204 	addi	r5,r5,8
 4007264:	d9402e15 	stw	r5,184(sp)
 4007268:	9080004c 	andi	r2,r18,1
 400726c:	1001aa26 	beq	r2,zero,4007918 <___svfprintf_internal_r+0x11f0>
 4007270:	a584b03a 	or	r2,r20,r22
 4007274:	10032526 	beq	r2,zero,4007f0c <___svfprintf_internal_r+0x17e4>
 4007278:	d8c02a17 	ldw	r3,168(sp)
 400727c:	00800c04 	movi	r2,48
 4007280:	d8802705 	stb	r2,156(sp)
 4007284:	dc402745 	stb	r17,157(sp)
 4007288:	d8002785 	stb	zero,158(sp)
 400728c:	90800094 	ori	r2,r18,2
 4007290:	1804a316 	blt	r3,zero,4008520 <___svfprintf_internal_r+0x1df8>
 4007294:	00bfdfc4 	movi	r2,-129
 4007298:	90a4703a 	and	r18,r18,r2
 400729c:	94800094 	ori	r18,r18,2
 40072a0:	0039883a 	mov	fp,zero
 40072a4:	d9003a17 	ldw	r4,232(sp)
 40072a8:	dc001e04 	addi	r16,sp,120
 40072ac:	a08003cc 	andi	r2,r20,15
 40072b0:	b006973a 	slli	r3,r22,28
 40072b4:	2085883a 	add	r2,r4,r2
 40072b8:	a028d13a 	srli	r20,r20,4
 40072bc:	10800003 	ldbu	r2,0(r2)
 40072c0:	b02cd13a 	srli	r22,r22,4
 40072c4:	843fffc4 	addi	r16,r16,-1
 40072c8:	1d28b03a 	or	r20,r3,r20
 40072cc:	80800005 	stb	r2,0(r16)
 40072d0:	a584b03a 	or	r2,r20,r22
 40072d4:	103ff51e 	bne	r2,zero,40072ac <__alt_data_end+0xfc0072ac>
 40072d8:	d8c02817 	ldw	r3,160(sp)
 40072dc:	1c07c83a 	sub	r3,r3,r16
 40072e0:	d8c02b15 	stw	r3,172(sp)
 40072e4:	003ec806 	br	4006e08 <__alt_data_end+0xfc006e08>
 40072e8:	d8c02e17 	ldw	r3,184(sp)
 40072ec:	d9002e17 	ldw	r4,184(sp)
 40072f0:	8025883a 	mov	r18,r16
 40072f4:	18800017 	ldw	r2,0(r3)
 40072f8:	21000104 	addi	r4,r4,4
 40072fc:	00c00044 	movi	r3,1
 4007300:	e011883a 	mov	r8,fp
 4007304:	d8c02915 	stw	r3,164(sp)
 4007308:	d8002785 	stb	zero,158(sp)
 400730c:	d8801405 	stb	r2,80(sp)
 4007310:	d9002e15 	stw	r4,184(sp)
 4007314:	d8c02b15 	stw	r3,172(sp)
 4007318:	d8002a15 	stw	zero,168(sp)
 400731c:	d8003215 	stw	zero,200(sp)
 4007320:	dc001404 	addi	r16,sp,80
 4007324:	0039883a 	mov	fp,zero
 4007328:	003ec406 	br	4006e3c <__alt_data_end+0xfc006e3c>
 400732c:	8025883a 	mov	r18,r16
 4007330:	dc002903 	ldbu	r16,164(sp)
 4007334:	e011883a 	mov	r8,fp
 4007338:	84003fcc 	andi	r16,r16,255
 400733c:	803e8726 	beq	r16,zero,4006d5c <__alt_data_end+0xfc006d5c>
 4007340:	d8c02b03 	ldbu	r3,172(sp)
 4007344:	d8c02785 	stb	r3,158(sp)
 4007348:	003e8406 	br	4006d5c <__alt_data_end+0xfc006d5c>
 400734c:	00c00044 	movi	r3,1
 4007350:	d8c02905 	stb	r3,164(sp)
 4007354:	00c00ac4 	movi	r3,43
 4007358:	d8c02b05 	stb	r3,172(sp)
 400735c:	bc400007 	ldb	r17,0(r23)
 4007360:	003d4606 	br	400687c <__alt_data_end+0xfc00687c>
 4007364:	84000814 	ori	r16,r16,32
 4007368:	bc400007 	ldb	r17,0(r23)
 400736c:	003d4306 	br	400687c <__alt_data_end+0xfc00687c>
 4007370:	d8802e17 	ldw	r2,184(sp)
 4007374:	8025883a 	mov	r18,r16
 4007378:	d8002785 	stb	zero,158(sp)
 400737c:	14000017 	ldw	r16,0(r2)
 4007380:	e011883a 	mov	r8,fp
 4007384:	15000104 	addi	r20,r2,4
 4007388:	80042126 	beq	r16,zero,4008410 <___svfprintf_internal_r+0x1ce8>
 400738c:	d8c02a17 	ldw	r3,168(sp)
 4007390:	1803ee16 	blt	r3,zero,400834c <___svfprintf_internal_r+0x1c24>
 4007394:	180d883a 	mov	r6,r3
 4007398:	000b883a 	mov	r5,zero
 400739c:	8009883a 	mov	r4,r16
 40073a0:	df003e15 	stw	fp,248(sp)
 40073a4:	400ab7c0 	call	400ab7c <memchr>
 40073a8:	da003e17 	ldw	r8,248(sp)
 40073ac:	10046a26 	beq	r2,zero,4008558 <___svfprintf_internal_r+0x1e30>
 40073b0:	1405c83a 	sub	r2,r2,r16
 40073b4:	d8802b15 	stw	r2,172(sp)
 40073b8:	1003ea16 	blt	r2,zero,4008364 <___svfprintf_internal_r+0x1c3c>
 40073bc:	df002783 	ldbu	fp,158(sp)
 40073c0:	d8802915 	stw	r2,164(sp)
 40073c4:	dd002e15 	stw	r20,184(sp)
 40073c8:	d8002a15 	stw	zero,168(sp)
 40073cc:	d8003215 	stw	zero,200(sp)
 40073d0:	003e9306 	br	4006e20 <__alt_data_end+0xfc006e20>
 40073d4:	8025883a 	mov	r18,r16
 40073d8:	dc002903 	ldbu	r16,164(sp)
 40073dc:	e011883a 	mov	r8,fp
 40073e0:	84003fcc 	andi	r16,r16,255
 40073e4:	803f7c26 	beq	r16,zero,40071d8 <__alt_data_end+0xfc0071d8>
 40073e8:	d8c02b03 	ldbu	r3,172(sp)
 40073ec:	d8c02785 	stb	r3,158(sp)
 40073f0:	003f7906 	br	40071d8 <__alt_data_end+0xfc0071d8>
 40073f4:	8025883a 	mov	r18,r16
 40073f8:	dc002903 	ldbu	r16,164(sp)
 40073fc:	e011883a 	mov	r8,fp
 4007400:	84003fcc 	andi	r16,r16,255
 4007404:	8005741e 	bne	r16,zero,40089d8 <___svfprintf_internal_r+0x22b0>
 4007408:	01010074 	movhi	r4,1025
 400740c:	2107c204 	addi	r4,r4,7944
 4007410:	d9003a15 	stw	r4,232(sp)
 4007414:	9080080c 	andi	r2,r18,32
 4007418:	103f8e1e 	bne	r2,zero,4007254 <__alt_data_end+0xfc007254>
 400741c:	9080040c 	andi	r2,r18,16
 4007420:	1002a726 	beq	r2,zero,4007ec0 <___svfprintf_internal_r+0x1798>
 4007424:	d8802e17 	ldw	r2,184(sp)
 4007428:	002d883a 	mov	r22,zero
 400742c:	15000017 	ldw	r20,0(r2)
 4007430:	10800104 	addi	r2,r2,4
 4007434:	d8802e15 	stw	r2,184(sp)
 4007438:	003f8b06 	br	4007268 <__alt_data_end+0xfc007268>
 400743c:	84000054 	ori	r16,r16,1
 4007440:	bc400007 	ldb	r17,0(r23)
 4007444:	003d0d06 	br	400687c <__alt_data_end+0xfc00687c>
 4007448:	d8802b07 	ldb	r2,172(sp)
 400744c:	1002a41e 	bne	r2,zero,4007ee0 <___svfprintf_internal_r+0x17b8>
 4007450:	00c00044 	movi	r3,1
 4007454:	d8c02905 	stb	r3,164(sp)
 4007458:	00c00804 	movi	r3,32
 400745c:	d8c02b05 	stb	r3,172(sp)
 4007460:	bc400007 	ldb	r17,0(r23)
 4007464:	003d0506 	br	400687c <__alt_data_end+0xfc00687c>
 4007468:	8025883a 	mov	r18,r16
 400746c:	dc002903 	ldbu	r16,164(sp)
 4007470:	e011883a 	mov	r8,fp
 4007474:	84003fcc 	andi	r16,r16,255
 4007478:	803e0626 	beq	r16,zero,4006c94 <__alt_data_end+0xfc006c94>
 400747c:	d8c02b03 	ldbu	r3,172(sp)
 4007480:	d8c02785 	stb	r3,158(sp)
 4007484:	003e0306 	br	4006c94 <__alt_data_end+0xfc006c94>
 4007488:	bc400007 	ldb	r17,0(r23)
 400748c:	00801b04 	movi	r2,108
 4007490:	88830a26 	beq	r17,r2,40080bc <___svfprintf_internal_r+0x1994>
 4007494:	84000414 	ori	r16,r16,16
 4007498:	003cf806 	br	400687c <__alt_data_end+0xfc00687c>
 400749c:	8025883a 	mov	r18,r16
 40074a0:	dc002903 	ldbu	r16,164(sp)
 40074a4:	e011883a 	mov	r8,fp
 40074a8:	84003fcc 	andi	r16,r16,255
 40074ac:	8005471e 	bne	r16,zero,40089cc <___svfprintf_internal_r+0x22a4>
 40074b0:	9080080c 	andi	r2,r18,32
 40074b4:	10028c26 	beq	r2,zero,4007ee8 <___svfprintf_internal_r+0x17c0>
 40074b8:	d9002e17 	ldw	r4,184(sp)
 40074bc:	d9402f17 	ldw	r5,188(sp)
 40074c0:	20800017 	ldw	r2,0(r4)
 40074c4:	2807d7fa 	srai	r3,r5,31
 40074c8:	21000104 	addi	r4,r4,4
 40074cc:	d9002e15 	stw	r4,184(sp)
 40074d0:	11400015 	stw	r5,0(r2)
 40074d4:	10c00115 	stw	r3,4(r2)
 40074d8:	003cbe06 	br	40067d4 <__alt_data_end+0xfc0067d4>
 40074dc:	84001014 	ori	r16,r16,64
 40074e0:	bc400007 	ldb	r17,0(r23)
 40074e4:	003ce506 	br	400687c <__alt_data_end+0xfc00687c>
 40074e8:	01010074 	movhi	r4,1025
 40074ec:	2107c204 	addi	r4,r4,7944
 40074f0:	0039883a 	mov	fp,zero
 40074f4:	d9003a15 	stw	r4,232(sp)
 40074f8:	04401e04 	movi	r17,120
 40074fc:	003f6906 	br	40072a4 <__alt_data_end+0xfc0072a4>
 4007500:	8025883a 	mov	r18,r16
 4007504:	dc002903 	ldbu	r16,164(sp)
 4007508:	e011883a 	mov	r8,fp
 400750c:	84003fcc 	andi	r16,r16,255
 4007510:	8005261e 	bne	r16,zero,40089ac <___svfprintf_internal_r+0x2284>
 4007514:	883d6526 	beq	r17,zero,4006aac <__alt_data_end+0xfc006aac>
 4007518:	00c00044 	movi	r3,1
 400751c:	d8c02915 	stw	r3,164(sp)
 4007520:	dc401405 	stb	r17,80(sp)
 4007524:	d8002785 	stb	zero,158(sp)
 4007528:	003f7a06 	br	4007314 <__alt_data_end+0xfc007314>
 400752c:	01010074 	movhi	r4,1025
 4007530:	2107c204 	addi	r4,r4,7944
 4007534:	d9003a15 	stw	r4,232(sp)
 4007538:	d8c02e15 	stw	r3,184(sp)
 400753c:	1025883a 	mov	r18,r2
 4007540:	04401e04 	movi	r17,120
 4007544:	a584b03a 	or	r2,r20,r22
 4007548:	1000fa1e 	bne	r2,zero,4007934 <___svfprintf_internal_r+0x120c>
 400754c:	0039883a 	mov	fp,zero
 4007550:	00800084 	movi	r2,2
 4007554:	10803fcc 	andi	r2,r2,255
 4007558:	00c00044 	movi	r3,1
 400755c:	10c21626 	beq	r2,r3,4007db8 <___svfprintf_internal_r+0x1690>
 4007560:	00c00084 	movi	r3,2
 4007564:	10fe0e1e 	bne	r2,r3,4006da0 <__alt_data_end+0xfc006da0>
 4007568:	003d4606 	br	4006a84 <__alt_data_end+0xfc006a84>
 400756c:	d8c02017 	ldw	r3,128(sp)
 4007570:	003e7306 	br	4006f40 <__alt_data_end+0xfc006f40>
 4007574:	00801944 	movi	r2,101
 4007578:	14407c0e 	bge	r2,r17,400776c <___svfprintf_internal_r+0x1044>
 400757c:	d9003617 	ldw	r4,216(sp)
 4007580:	d9403717 	ldw	r5,220(sp)
 4007584:	000d883a 	mov	r6,zero
 4007588:	000f883a 	mov	r7,zero
 400758c:	d8c03d15 	stw	r3,244(sp)
 4007590:	da003e15 	stw	r8,248(sp)
 4007594:	400ed7c0 	call	400ed7c <__eqdf2>
 4007598:	d8c03d17 	ldw	r3,244(sp)
 400759c:	da003e17 	ldw	r8,248(sp)
 40075a0:	1000f51e 	bne	r2,zero,4007978 <___svfprintf_internal_r+0x1250>
 40075a4:	d8801f17 	ldw	r2,124(sp)
 40075a8:	01010074 	movhi	r4,1025
 40075ac:	2107c904 	addi	r4,r4,7972
 40075b0:	18c00044 	addi	r3,r3,1
 40075b4:	10800044 	addi	r2,r2,1
 40075b8:	41000015 	stw	r4,0(r8)
 40075bc:	01000044 	movi	r4,1
 40075c0:	41000115 	stw	r4,4(r8)
 40075c4:	d8c02015 	stw	r3,128(sp)
 40075c8:	d8801f15 	stw	r2,124(sp)
 40075cc:	010001c4 	movi	r4,7
 40075d0:	20826616 	blt	r4,r2,4007f6c <___svfprintf_internal_r+0x1844>
 40075d4:	42000204 	addi	r8,r8,8
 40075d8:	d8802617 	ldw	r2,152(sp)
 40075dc:	d9403317 	ldw	r5,204(sp)
 40075e0:	11400216 	blt	r2,r5,40075ec <___svfprintf_internal_r+0xec4>
 40075e4:	9080004c 	andi	r2,r18,1
 40075e8:	103eb326 	beq	r2,zero,40070b8 <__alt_data_end+0xfc0070b8>
 40075ec:	d8803817 	ldw	r2,224(sp)
 40075f0:	d9003417 	ldw	r4,208(sp)
 40075f4:	d9403817 	ldw	r5,224(sp)
 40075f8:	1887883a 	add	r3,r3,r2
 40075fc:	d8801f17 	ldw	r2,124(sp)
 4007600:	41000015 	stw	r4,0(r8)
 4007604:	41400115 	stw	r5,4(r8)
 4007608:	10800044 	addi	r2,r2,1
 400760c:	d8c02015 	stw	r3,128(sp)
 4007610:	d8801f15 	stw	r2,124(sp)
 4007614:	010001c4 	movi	r4,7
 4007618:	2082af16 	blt	r4,r2,40080d8 <___svfprintf_internal_r+0x19b0>
 400761c:	42000204 	addi	r8,r8,8
 4007620:	d8803317 	ldw	r2,204(sp)
 4007624:	143fffc4 	addi	r16,r2,-1
 4007628:	043ea30e 	bge	zero,r16,40070b8 <__alt_data_end+0xfc0070b8>
 400762c:	04400404 	movi	r17,16
 4007630:	d8801f17 	ldw	r2,124(sp)
 4007634:	8c00860e 	bge	r17,r16,4007850 <___svfprintf_internal_r+0x1128>
 4007638:	01410074 	movhi	r5,1025
 400763c:	2947c984 	addi	r5,r5,7974
 4007640:	d9402c15 	stw	r5,176(sp)
 4007644:	058001c4 	movi	r22,7
 4007648:	dd002d17 	ldw	r20,180(sp)
 400764c:	00000306 	br	400765c <___svfprintf_internal_r+0xf34>
 4007650:	42000204 	addi	r8,r8,8
 4007654:	843ffc04 	addi	r16,r16,-16
 4007658:	8c00800e 	bge	r17,r16,400785c <___svfprintf_internal_r+0x1134>
 400765c:	18c00404 	addi	r3,r3,16
 4007660:	10800044 	addi	r2,r2,1
 4007664:	45400015 	stw	r21,0(r8)
 4007668:	44400115 	stw	r17,4(r8)
 400766c:	d8c02015 	stw	r3,128(sp)
 4007670:	d8801f15 	stw	r2,124(sp)
 4007674:	b0bff60e 	bge	r22,r2,4007650 <__alt_data_end+0xfc007650>
 4007678:	d9801e04 	addi	r6,sp,120
 400767c:	a00b883a 	mov	r5,r20
 4007680:	9809883a 	mov	r4,r19
 4007684:	400bf540 	call	400bf54 <__ssprint_r>
 4007688:	103d0e1e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 400768c:	d8c02017 	ldw	r3,128(sp)
 4007690:	d8801f17 	ldw	r2,124(sp)
 4007694:	da000404 	addi	r8,sp,16
 4007698:	003fee06 	br	4007654 <__alt_data_end+0xfc007654>
 400769c:	d9403117 	ldw	r5,196(sp)
 40076a0:	d8802917 	ldw	r2,164(sp)
 40076a4:	28adc83a 	sub	r22,r5,r2
 40076a8:	05be430e 	bge	zero,r22,4006fb8 <__alt_data_end+0xfc006fb8>
 40076ac:	07000404 	movi	fp,16
 40076b0:	d8801f17 	ldw	r2,124(sp)
 40076b4:	e583a20e 	bge	fp,r22,4008540 <___svfprintf_internal_r+0x1e18>
 40076b8:	01410074 	movhi	r5,1025
 40076bc:	2947c984 	addi	r5,r5,7974
 40076c0:	dc403015 	stw	r17,192(sp)
 40076c4:	d9402c15 	stw	r5,176(sp)
 40076c8:	b023883a 	mov	r17,r22
 40076cc:	050001c4 	movi	r20,7
 40076d0:	902d883a 	mov	r22,r18
 40076d4:	8025883a 	mov	r18,r16
 40076d8:	dc002d17 	ldw	r16,180(sp)
 40076dc:	00000306 	br	40076ec <___svfprintf_internal_r+0xfc4>
 40076e0:	8c7ffc04 	addi	r17,r17,-16
 40076e4:	42000204 	addi	r8,r8,8
 40076e8:	e440110e 	bge	fp,r17,4007730 <___svfprintf_internal_r+0x1008>
 40076ec:	18c00404 	addi	r3,r3,16
 40076f0:	10800044 	addi	r2,r2,1
 40076f4:	45400015 	stw	r21,0(r8)
 40076f8:	47000115 	stw	fp,4(r8)
 40076fc:	d8c02015 	stw	r3,128(sp)
 4007700:	d8801f15 	stw	r2,124(sp)
 4007704:	a0bff60e 	bge	r20,r2,40076e0 <__alt_data_end+0xfc0076e0>
 4007708:	d9801e04 	addi	r6,sp,120
 400770c:	800b883a 	mov	r5,r16
 4007710:	9809883a 	mov	r4,r19
 4007714:	400bf540 	call	400bf54 <__ssprint_r>
 4007718:	103cea1e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 400771c:	8c7ffc04 	addi	r17,r17,-16
 4007720:	d8c02017 	ldw	r3,128(sp)
 4007724:	d8801f17 	ldw	r2,124(sp)
 4007728:	da000404 	addi	r8,sp,16
 400772c:	e47fef16 	blt	fp,r17,40076ec <__alt_data_end+0xfc0076ec>
 4007730:	9021883a 	mov	r16,r18
 4007734:	b025883a 	mov	r18,r22
 4007738:	882d883a 	mov	r22,r17
 400773c:	dc403017 	ldw	r17,192(sp)
 4007740:	d9002c17 	ldw	r4,176(sp)
 4007744:	1d87883a 	add	r3,r3,r22
 4007748:	10800044 	addi	r2,r2,1
 400774c:	41000015 	stw	r4,0(r8)
 4007750:	45800115 	stw	r22,4(r8)
 4007754:	d8c02015 	stw	r3,128(sp)
 4007758:	d8801f15 	stw	r2,124(sp)
 400775c:	010001c4 	movi	r4,7
 4007760:	20819a16 	blt	r4,r2,4007dcc <___svfprintf_internal_r+0x16a4>
 4007764:	42000204 	addi	r8,r8,8
 4007768:	003e1306 	br	4006fb8 <__alt_data_end+0xfc006fb8>
 400776c:	d9403317 	ldw	r5,204(sp)
 4007770:	00800044 	movi	r2,1
 4007774:	18c00044 	addi	r3,r3,1
 4007778:	1141710e 	bge	r2,r5,4007d40 <___svfprintf_internal_r+0x1618>
 400777c:	dc401f17 	ldw	r17,124(sp)
 4007780:	00800044 	movi	r2,1
 4007784:	40800115 	stw	r2,4(r8)
 4007788:	8c400044 	addi	r17,r17,1
 400778c:	44000015 	stw	r16,0(r8)
 4007790:	d8c02015 	stw	r3,128(sp)
 4007794:	dc401f15 	stw	r17,124(sp)
 4007798:	008001c4 	movi	r2,7
 400779c:	14417416 	blt	r2,r17,4007d70 <___svfprintf_internal_r+0x1648>
 40077a0:	42000204 	addi	r8,r8,8
 40077a4:	d8803817 	ldw	r2,224(sp)
 40077a8:	d9003417 	ldw	r4,208(sp)
 40077ac:	8c400044 	addi	r17,r17,1
 40077b0:	10c7883a 	add	r3,r2,r3
 40077b4:	40800115 	stw	r2,4(r8)
 40077b8:	41000015 	stw	r4,0(r8)
 40077bc:	d8c02015 	stw	r3,128(sp)
 40077c0:	dc401f15 	stw	r17,124(sp)
 40077c4:	008001c4 	movi	r2,7
 40077c8:	14417216 	blt	r2,r17,4007d94 <___svfprintf_internal_r+0x166c>
 40077cc:	45800204 	addi	r22,r8,8
 40077d0:	d9003617 	ldw	r4,216(sp)
 40077d4:	d9403717 	ldw	r5,220(sp)
 40077d8:	000d883a 	mov	r6,zero
 40077dc:	000f883a 	mov	r7,zero
 40077e0:	d8c03d15 	stw	r3,244(sp)
 40077e4:	400ed7c0 	call	400ed7c <__eqdf2>
 40077e8:	d8c03d17 	ldw	r3,244(sp)
 40077ec:	1000b326 	beq	r2,zero,4007abc <___svfprintf_internal_r+0x1394>
 40077f0:	d9403317 	ldw	r5,204(sp)
 40077f4:	84000044 	addi	r16,r16,1
 40077f8:	8c400044 	addi	r17,r17,1
 40077fc:	28bfffc4 	addi	r2,r5,-1
 4007800:	1887883a 	add	r3,r3,r2
 4007804:	b0800115 	stw	r2,4(r22)
 4007808:	b4000015 	stw	r16,0(r22)
 400780c:	d8c02015 	stw	r3,128(sp)
 4007810:	dc401f15 	stw	r17,124(sp)
 4007814:	008001c4 	movi	r2,7
 4007818:	1440d216 	blt	r2,r17,4007b64 <___svfprintf_internal_r+0x143c>
 400781c:	b5800204 	addi	r22,r22,8
 4007820:	d9003b17 	ldw	r4,236(sp)
 4007824:	df0022c4 	addi	fp,sp,139
 4007828:	8c400044 	addi	r17,r17,1
 400782c:	20c7883a 	add	r3,r4,r3
 4007830:	b7000015 	stw	fp,0(r22)
 4007834:	b1000115 	stw	r4,4(r22)
 4007838:	d8c02015 	stw	r3,128(sp)
 400783c:	dc401f15 	stw	r17,124(sp)
 4007840:	008001c4 	movi	r2,7
 4007844:	14400e16 	blt	r2,r17,4007880 <___svfprintf_internal_r+0x1158>
 4007848:	b2000204 	addi	r8,r22,8
 400784c:	003e1a06 	br	40070b8 <__alt_data_end+0xfc0070b8>
 4007850:	01010074 	movhi	r4,1025
 4007854:	2107c984 	addi	r4,r4,7974
 4007858:	d9002c15 	stw	r4,176(sp)
 400785c:	d9002c17 	ldw	r4,176(sp)
 4007860:	1c07883a 	add	r3,r3,r16
 4007864:	44000115 	stw	r16,4(r8)
 4007868:	41000015 	stw	r4,0(r8)
 400786c:	10800044 	addi	r2,r2,1
 4007870:	d8c02015 	stw	r3,128(sp)
 4007874:	d8801f15 	stw	r2,124(sp)
 4007878:	010001c4 	movi	r4,7
 400787c:	20be0d0e 	bge	r4,r2,40070b4 <__alt_data_end+0xfc0070b4>
 4007880:	d9402d17 	ldw	r5,180(sp)
 4007884:	d9801e04 	addi	r6,sp,120
 4007888:	9809883a 	mov	r4,r19
 400788c:	400bf540 	call	400bf54 <__ssprint_r>
 4007890:	103c8c1e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4007894:	d8c02017 	ldw	r3,128(sp)
 4007898:	da000404 	addi	r8,sp,16
 400789c:	003e0606 	br	40070b8 <__alt_data_end+0xfc0070b8>
 40078a0:	d9402d17 	ldw	r5,180(sp)
 40078a4:	d9801e04 	addi	r6,sp,120
 40078a8:	9809883a 	mov	r4,r19
 40078ac:	400bf540 	call	400bf54 <__ssprint_r>
 40078b0:	103e3d26 	beq	r2,zero,40071a8 <__alt_data_end+0xfc0071a8>
 40078b4:	003c8306 	br	4006ac4 <__alt_data_end+0xfc006ac4>
 40078b8:	d9402d17 	ldw	r5,180(sp)
 40078bc:	d9801e04 	addi	r6,sp,120
 40078c0:	9809883a 	mov	r4,r19
 40078c4:	400bf540 	call	400bf54 <__ssprint_r>
 40078c8:	103c7e1e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 40078cc:	d8c02017 	ldw	r3,128(sp)
 40078d0:	da000404 	addi	r8,sp,16
 40078d4:	003deb06 	br	4007084 <__alt_data_end+0xfc007084>
 40078d8:	d9402d17 	ldw	r5,180(sp)
 40078dc:	d9801e04 	addi	r6,sp,120
 40078e0:	9809883a 	mov	r4,r19
 40078e4:	400bf540 	call	400bf54 <__ssprint_r>
 40078e8:	103c761e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 40078ec:	d8c02017 	ldw	r3,128(sp)
 40078f0:	da000404 	addi	r8,sp,16
 40078f4:	003d9f06 	br	4006f74 <__alt_data_end+0xfc006f74>
 40078f8:	d9402d17 	ldw	r5,180(sp)
 40078fc:	d9801e04 	addi	r6,sp,120
 4007900:	9809883a 	mov	r4,r19
 4007904:	400bf540 	call	400bf54 <__ssprint_r>
 4007908:	103c6e1e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 400790c:	d8c02017 	ldw	r3,128(sp)
 4007910:	da000404 	addi	r8,sp,16
 4007914:	003da506 	br	4006fac <__alt_data_end+0xfc006fac>
 4007918:	d9402a17 	ldw	r5,168(sp)
 400791c:	d8002785 	stb	zero,158(sp)
 4007920:	283f0816 	blt	r5,zero,4007544 <__alt_data_end+0xfc007544>
 4007924:	00ffdfc4 	movi	r3,-129
 4007928:	a584b03a 	or	r2,r20,r22
 400792c:	90e4703a 	and	r18,r18,r3
 4007930:	103c5126 	beq	r2,zero,4006a78 <__alt_data_end+0xfc006a78>
 4007934:	0039883a 	mov	fp,zero
 4007938:	003e5a06 	br	40072a4 <__alt_data_end+0xfc0072a4>
 400793c:	9080040c 	andi	r2,r18,16
 4007940:	10013d26 	beq	r2,zero,4007e38 <___svfprintf_internal_r+0x1710>
 4007944:	d8c02e17 	ldw	r3,184(sp)
 4007948:	d9002a17 	ldw	r4,168(sp)
 400794c:	d8002785 	stb	zero,158(sp)
 4007950:	18800104 	addi	r2,r3,4
 4007954:	1d000017 	ldw	r20,0(r3)
 4007958:	002d883a 	mov	r22,zero
 400795c:	20013f16 	blt	r4,zero,4007e5c <___svfprintf_internal_r+0x1734>
 4007960:	00ffdfc4 	movi	r3,-129
 4007964:	d8802e15 	stw	r2,184(sp)
 4007968:	90e4703a 	and	r18,r18,r3
 400796c:	a03d0926 	beq	r20,zero,4006d94 <__alt_data_end+0xfc006d94>
 4007970:	0039883a 	mov	fp,zero
 4007974:	003d0c06 	br	4006da8 <__alt_data_end+0xfc006da8>
 4007978:	dc402617 	ldw	r17,152(sp)
 400797c:	0441830e 	bge	zero,r17,4007f8c <___svfprintf_internal_r+0x1864>
 4007980:	dc403217 	ldw	r17,200(sp)
 4007984:	d8803317 	ldw	r2,204(sp)
 4007988:	1440010e 	bge	r2,r17,4007990 <___svfprintf_internal_r+0x1268>
 400798c:	1023883a 	mov	r17,r2
 4007990:	04400a0e 	bge	zero,r17,40079bc <___svfprintf_internal_r+0x1294>
 4007994:	d8801f17 	ldw	r2,124(sp)
 4007998:	1c47883a 	add	r3,r3,r17
 400799c:	44000015 	stw	r16,0(r8)
 40079a0:	10800044 	addi	r2,r2,1
 40079a4:	44400115 	stw	r17,4(r8)
 40079a8:	d8c02015 	stw	r3,128(sp)
 40079ac:	d8801f15 	stw	r2,124(sp)
 40079b0:	010001c4 	movi	r4,7
 40079b4:	20827516 	blt	r4,r2,400838c <___svfprintf_internal_r+0x1c64>
 40079b8:	42000204 	addi	r8,r8,8
 40079bc:	88027b16 	blt	r17,zero,40083ac <___svfprintf_internal_r+0x1c84>
 40079c0:	d9003217 	ldw	r4,200(sp)
 40079c4:	2463c83a 	sub	r17,r4,r17
 40079c8:	0440990e 	bge	zero,r17,4007c30 <___svfprintf_internal_r+0x1508>
 40079cc:	05800404 	movi	r22,16
 40079d0:	d8801f17 	ldw	r2,124(sp)
 40079d4:	b441530e 	bge	r22,r17,4007f24 <___svfprintf_internal_r+0x17fc>
 40079d8:	01010074 	movhi	r4,1025
 40079dc:	2107c984 	addi	r4,r4,7974
 40079e0:	d9002c15 	stw	r4,176(sp)
 40079e4:	070001c4 	movi	fp,7
 40079e8:	dd002d17 	ldw	r20,180(sp)
 40079ec:	00000306 	br	40079fc <___svfprintf_internal_r+0x12d4>
 40079f0:	42000204 	addi	r8,r8,8
 40079f4:	8c7ffc04 	addi	r17,r17,-16
 40079f8:	b4414d0e 	bge	r22,r17,4007f30 <___svfprintf_internal_r+0x1808>
 40079fc:	18c00404 	addi	r3,r3,16
 4007a00:	10800044 	addi	r2,r2,1
 4007a04:	45400015 	stw	r21,0(r8)
 4007a08:	45800115 	stw	r22,4(r8)
 4007a0c:	d8c02015 	stw	r3,128(sp)
 4007a10:	d8801f15 	stw	r2,124(sp)
 4007a14:	e0bff60e 	bge	fp,r2,40079f0 <__alt_data_end+0xfc0079f0>
 4007a18:	d9801e04 	addi	r6,sp,120
 4007a1c:	a00b883a 	mov	r5,r20
 4007a20:	9809883a 	mov	r4,r19
 4007a24:	400bf540 	call	400bf54 <__ssprint_r>
 4007a28:	103c261e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4007a2c:	d8c02017 	ldw	r3,128(sp)
 4007a30:	d8801f17 	ldw	r2,124(sp)
 4007a34:	da000404 	addi	r8,sp,16
 4007a38:	003fee06 	br	40079f4 <__alt_data_end+0xfc0079f4>
 4007a3c:	d9402d17 	ldw	r5,180(sp)
 4007a40:	d9801e04 	addi	r6,sp,120
 4007a44:	9809883a 	mov	r4,r19
 4007a48:	400bf540 	call	400bf54 <__ssprint_r>
 4007a4c:	103c1d1e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4007a50:	d8c02017 	ldw	r3,128(sp)
 4007a54:	df002787 	ldb	fp,158(sp)
 4007a58:	da000404 	addi	r8,sp,16
 4007a5c:	003d3806 	br	4006f40 <__alt_data_end+0xfc006f40>
 4007a60:	9080040c 	andi	r2,r18,16
 4007a64:	10005c26 	beq	r2,zero,4007bd8 <___svfprintf_internal_r+0x14b0>
 4007a68:	d8c02e17 	ldw	r3,184(sp)
 4007a6c:	d9002a17 	ldw	r4,168(sp)
 4007a70:	d8002785 	stb	zero,158(sp)
 4007a74:	18800104 	addi	r2,r3,4
 4007a78:	1d000017 	ldw	r20,0(r3)
 4007a7c:	002d883a 	mov	r22,zero
 4007a80:	20005e16 	blt	r4,zero,4007bfc <___svfprintf_internal_r+0x14d4>
 4007a84:	00ffdfc4 	movi	r3,-129
 4007a88:	d8802e15 	stw	r2,184(sp)
 4007a8c:	90e4703a 	and	r18,r18,r3
 4007a90:	0039883a 	mov	fp,zero
 4007a94:	a03ddf26 	beq	r20,zero,4007214 <__alt_data_end+0xfc007214>
 4007a98:	00800244 	movi	r2,9
 4007a9c:	153c8e36 	bltu	r2,r20,4006cd8 <__alt_data_end+0xfc006cd8>
 4007aa0:	a5000c04 	addi	r20,r20,48
 4007aa4:	dc001dc4 	addi	r16,sp,119
 4007aa8:	dd001dc5 	stb	r20,119(sp)
 4007aac:	d8c02817 	ldw	r3,160(sp)
 4007ab0:	1c07c83a 	sub	r3,r3,r16
 4007ab4:	d8c02b15 	stw	r3,172(sp)
 4007ab8:	003cd306 	br	4006e08 <__alt_data_end+0xfc006e08>
 4007abc:	d8803317 	ldw	r2,204(sp)
 4007ac0:	143fffc4 	addi	r16,r2,-1
 4007ac4:	043f560e 	bge	zero,r16,4007820 <__alt_data_end+0xfc007820>
 4007ac8:	07000404 	movi	fp,16
 4007acc:	e403530e 	bge	fp,r16,400881c <___svfprintf_internal_r+0x20f4>
 4007ad0:	01410074 	movhi	r5,1025
 4007ad4:	2947c984 	addi	r5,r5,7974
 4007ad8:	d9402c15 	stw	r5,176(sp)
 4007adc:	01c001c4 	movi	r7,7
 4007ae0:	dd002d17 	ldw	r20,180(sp)
 4007ae4:	00000306 	br	4007af4 <___svfprintf_internal_r+0x13cc>
 4007ae8:	843ffc04 	addi	r16,r16,-16
 4007aec:	b5800204 	addi	r22,r22,8
 4007af0:	e400130e 	bge	fp,r16,4007b40 <___svfprintf_internal_r+0x1418>
 4007af4:	18c00404 	addi	r3,r3,16
 4007af8:	8c400044 	addi	r17,r17,1
 4007afc:	b5400015 	stw	r21,0(r22)
 4007b00:	b7000115 	stw	fp,4(r22)
 4007b04:	d8c02015 	stw	r3,128(sp)
 4007b08:	dc401f15 	stw	r17,124(sp)
 4007b0c:	3c7ff60e 	bge	r7,r17,4007ae8 <__alt_data_end+0xfc007ae8>
 4007b10:	d9801e04 	addi	r6,sp,120
 4007b14:	a00b883a 	mov	r5,r20
 4007b18:	9809883a 	mov	r4,r19
 4007b1c:	d9c03d15 	stw	r7,244(sp)
 4007b20:	400bf540 	call	400bf54 <__ssprint_r>
 4007b24:	d9c03d17 	ldw	r7,244(sp)
 4007b28:	103be61e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4007b2c:	843ffc04 	addi	r16,r16,-16
 4007b30:	d8c02017 	ldw	r3,128(sp)
 4007b34:	dc401f17 	ldw	r17,124(sp)
 4007b38:	dd800404 	addi	r22,sp,16
 4007b3c:	e43fed16 	blt	fp,r16,4007af4 <__alt_data_end+0xfc007af4>
 4007b40:	d8802c17 	ldw	r2,176(sp)
 4007b44:	1c07883a 	add	r3,r3,r16
 4007b48:	8c400044 	addi	r17,r17,1
 4007b4c:	b0800015 	stw	r2,0(r22)
 4007b50:	b4000115 	stw	r16,4(r22)
 4007b54:	d8c02015 	stw	r3,128(sp)
 4007b58:	dc401f15 	stw	r17,124(sp)
 4007b5c:	008001c4 	movi	r2,7
 4007b60:	147f2e0e 	bge	r2,r17,400781c <__alt_data_end+0xfc00781c>
 4007b64:	d9402d17 	ldw	r5,180(sp)
 4007b68:	d9801e04 	addi	r6,sp,120
 4007b6c:	9809883a 	mov	r4,r19
 4007b70:	400bf540 	call	400bf54 <__ssprint_r>
 4007b74:	103bd31e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4007b78:	d8c02017 	ldw	r3,128(sp)
 4007b7c:	dc401f17 	ldw	r17,124(sp)
 4007b80:	dd800404 	addi	r22,sp,16
 4007b84:	003f2606 	br	4007820 <__alt_data_end+0xfc007820>
 4007b88:	9080040c 	andi	r2,r18,16
 4007b8c:	1000c326 	beq	r2,zero,4007e9c <___svfprintf_internal_r+0x1774>
 4007b90:	d9402e17 	ldw	r5,184(sp)
 4007b94:	2d000017 	ldw	r20,0(r5)
 4007b98:	29400104 	addi	r5,r5,4
 4007b9c:	d9402e15 	stw	r5,184(sp)
 4007ba0:	a02dd7fa 	srai	r22,r20,31
 4007ba4:	b005883a 	mov	r2,r22
 4007ba8:	103c430e 	bge	r2,zero,4006cb8 <__alt_data_end+0xfc006cb8>
 4007bac:	d9402a17 	ldw	r5,168(sp)
 4007bb0:	0529c83a 	sub	r20,zero,r20
 4007bb4:	07000b44 	movi	fp,45
 4007bb8:	a004c03a 	cmpne	r2,r20,zero
 4007bbc:	05adc83a 	sub	r22,zero,r22
 4007bc0:	df002785 	stb	fp,158(sp)
 4007bc4:	b0adc83a 	sub	r22,r22,r2
 4007bc8:	28022e16 	blt	r5,zero,4008484 <___svfprintf_internal_r+0x1d5c>
 4007bcc:	00bfdfc4 	movi	r2,-129
 4007bd0:	90a4703a 	and	r18,r18,r2
 4007bd4:	003c3f06 	br	4006cd4 <__alt_data_end+0xfc006cd4>
 4007bd8:	9080100c 	andi	r2,r18,64
 4007bdc:	d8002785 	stb	zero,158(sp)
 4007be0:	10012526 	beq	r2,zero,4008078 <___svfprintf_internal_r+0x1950>
 4007be4:	d9402e17 	ldw	r5,184(sp)
 4007be8:	d8c02a17 	ldw	r3,168(sp)
 4007bec:	002d883a 	mov	r22,zero
 4007bf0:	28800104 	addi	r2,r5,4
 4007bf4:	2d00000b 	ldhu	r20,0(r5)
 4007bf8:	183fa20e 	bge	r3,zero,4007a84 <__alt_data_end+0xfc007a84>
 4007bfc:	d8802e15 	stw	r2,184(sp)
 4007c00:	0039883a 	mov	fp,zero
 4007c04:	a584b03a 	or	r2,r20,r22
 4007c08:	103c321e 	bne	r2,zero,4006cd4 <__alt_data_end+0xfc006cd4>
 4007c0c:	00800044 	movi	r2,1
 4007c10:	003e5006 	br	4007554 <__alt_data_end+0xfc007554>
 4007c14:	d9402d17 	ldw	r5,180(sp)
 4007c18:	d9801e04 	addi	r6,sp,120
 4007c1c:	9809883a 	mov	r4,r19
 4007c20:	400bf540 	call	400bf54 <__ssprint_r>
 4007c24:	103ba71e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4007c28:	d8c02017 	ldw	r3,128(sp)
 4007c2c:	da000404 	addi	r8,sp,16
 4007c30:	d9003217 	ldw	r4,200(sp)
 4007c34:	d8802617 	ldw	r2,152(sp)
 4007c38:	d9403317 	ldw	r5,204(sp)
 4007c3c:	8123883a 	add	r17,r16,r4
 4007c40:	11400216 	blt	r2,r5,4007c4c <___svfprintf_internal_r+0x1524>
 4007c44:	9100004c 	andi	r4,r18,1
 4007c48:	20000d26 	beq	r4,zero,4007c80 <___svfprintf_internal_r+0x1558>
 4007c4c:	d9003817 	ldw	r4,224(sp)
 4007c50:	d9403417 	ldw	r5,208(sp)
 4007c54:	1907883a 	add	r3,r3,r4
 4007c58:	d9001f17 	ldw	r4,124(sp)
 4007c5c:	41400015 	stw	r5,0(r8)
 4007c60:	d9403817 	ldw	r5,224(sp)
 4007c64:	21000044 	addi	r4,r4,1
 4007c68:	d8c02015 	stw	r3,128(sp)
 4007c6c:	41400115 	stw	r5,4(r8)
 4007c70:	d9001f15 	stw	r4,124(sp)
 4007c74:	014001c4 	movi	r5,7
 4007c78:	2901dc16 	blt	r5,r4,40083ec <___svfprintf_internal_r+0x1cc4>
 4007c7c:	42000204 	addi	r8,r8,8
 4007c80:	d9003317 	ldw	r4,204(sp)
 4007c84:	8121883a 	add	r16,r16,r4
 4007c88:	2085c83a 	sub	r2,r4,r2
 4007c8c:	8461c83a 	sub	r16,r16,r17
 4007c90:	1400010e 	bge	r2,r16,4007c98 <___svfprintf_internal_r+0x1570>
 4007c94:	1021883a 	mov	r16,r2
 4007c98:	04000a0e 	bge	zero,r16,4007cc4 <___svfprintf_internal_r+0x159c>
 4007c9c:	d9001f17 	ldw	r4,124(sp)
 4007ca0:	1c07883a 	add	r3,r3,r16
 4007ca4:	44400015 	stw	r17,0(r8)
 4007ca8:	21000044 	addi	r4,r4,1
 4007cac:	44000115 	stw	r16,4(r8)
 4007cb0:	d8c02015 	stw	r3,128(sp)
 4007cb4:	d9001f15 	stw	r4,124(sp)
 4007cb8:	014001c4 	movi	r5,7
 4007cbc:	2901e616 	blt	r5,r4,4008458 <___svfprintf_internal_r+0x1d30>
 4007cc0:	42000204 	addi	r8,r8,8
 4007cc4:	8001f616 	blt	r16,zero,40084a0 <___svfprintf_internal_r+0x1d78>
 4007cc8:	1421c83a 	sub	r16,r2,r16
 4007ccc:	043cfa0e 	bge	zero,r16,40070b8 <__alt_data_end+0xfc0070b8>
 4007cd0:	04400404 	movi	r17,16
 4007cd4:	d8801f17 	ldw	r2,124(sp)
 4007cd8:	8c3edd0e 	bge	r17,r16,4007850 <__alt_data_end+0xfc007850>
 4007cdc:	01410074 	movhi	r5,1025
 4007ce0:	2947c984 	addi	r5,r5,7974
 4007ce4:	d9402c15 	stw	r5,176(sp)
 4007ce8:	058001c4 	movi	r22,7
 4007cec:	dd002d17 	ldw	r20,180(sp)
 4007cf0:	00000306 	br	4007d00 <___svfprintf_internal_r+0x15d8>
 4007cf4:	42000204 	addi	r8,r8,8
 4007cf8:	843ffc04 	addi	r16,r16,-16
 4007cfc:	8c3ed70e 	bge	r17,r16,400785c <__alt_data_end+0xfc00785c>
 4007d00:	18c00404 	addi	r3,r3,16
 4007d04:	10800044 	addi	r2,r2,1
 4007d08:	45400015 	stw	r21,0(r8)
 4007d0c:	44400115 	stw	r17,4(r8)
 4007d10:	d8c02015 	stw	r3,128(sp)
 4007d14:	d8801f15 	stw	r2,124(sp)
 4007d18:	b0bff60e 	bge	r22,r2,4007cf4 <__alt_data_end+0xfc007cf4>
 4007d1c:	d9801e04 	addi	r6,sp,120
 4007d20:	a00b883a 	mov	r5,r20
 4007d24:	9809883a 	mov	r4,r19
 4007d28:	400bf540 	call	400bf54 <__ssprint_r>
 4007d2c:	103b651e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4007d30:	d8c02017 	ldw	r3,128(sp)
 4007d34:	d8801f17 	ldw	r2,124(sp)
 4007d38:	da000404 	addi	r8,sp,16
 4007d3c:	003fee06 	br	4007cf8 <__alt_data_end+0xfc007cf8>
 4007d40:	9088703a 	and	r4,r18,r2
 4007d44:	203e8d1e 	bne	r4,zero,400777c <__alt_data_end+0xfc00777c>
 4007d48:	dc401f17 	ldw	r17,124(sp)
 4007d4c:	40800115 	stw	r2,4(r8)
 4007d50:	44000015 	stw	r16,0(r8)
 4007d54:	8c400044 	addi	r17,r17,1
 4007d58:	d8c02015 	stw	r3,128(sp)
 4007d5c:	dc401f15 	stw	r17,124(sp)
 4007d60:	008001c4 	movi	r2,7
 4007d64:	147f7f16 	blt	r2,r17,4007b64 <__alt_data_end+0xfc007b64>
 4007d68:	45800204 	addi	r22,r8,8
 4007d6c:	003eac06 	br	4007820 <__alt_data_end+0xfc007820>
 4007d70:	d9402d17 	ldw	r5,180(sp)
 4007d74:	d9801e04 	addi	r6,sp,120
 4007d78:	9809883a 	mov	r4,r19
 4007d7c:	400bf540 	call	400bf54 <__ssprint_r>
 4007d80:	103b501e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4007d84:	d8c02017 	ldw	r3,128(sp)
 4007d88:	dc401f17 	ldw	r17,124(sp)
 4007d8c:	da000404 	addi	r8,sp,16
 4007d90:	003e8406 	br	40077a4 <__alt_data_end+0xfc0077a4>
 4007d94:	d9402d17 	ldw	r5,180(sp)
 4007d98:	d9801e04 	addi	r6,sp,120
 4007d9c:	9809883a 	mov	r4,r19
 4007da0:	400bf540 	call	400bf54 <__ssprint_r>
 4007da4:	103b471e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4007da8:	d8c02017 	ldw	r3,128(sp)
 4007dac:	dc401f17 	ldw	r17,124(sp)
 4007db0:	dd800404 	addi	r22,sp,16
 4007db4:	003e8606 	br	40077d0 <__alt_data_end+0xfc0077d0>
 4007db8:	0029883a 	mov	r20,zero
 4007dbc:	a5000c04 	addi	r20,r20,48
 4007dc0:	dc001dc4 	addi	r16,sp,119
 4007dc4:	dd001dc5 	stb	r20,119(sp)
 4007dc8:	003f3806 	br	4007aac <__alt_data_end+0xfc007aac>
 4007dcc:	d9402d17 	ldw	r5,180(sp)
 4007dd0:	d9801e04 	addi	r6,sp,120
 4007dd4:	9809883a 	mov	r4,r19
 4007dd8:	400bf540 	call	400bf54 <__ssprint_r>
 4007ddc:	103b391e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4007de0:	d8c02017 	ldw	r3,128(sp)
 4007de4:	da000404 	addi	r8,sp,16
 4007de8:	003c7306 	br	4006fb8 <__alt_data_end+0xfc006fb8>
 4007dec:	d9003617 	ldw	r4,216(sp)
 4007df0:	d9403717 	ldw	r5,220(sp)
 4007df4:	da003e15 	stw	r8,248(sp)
 4007df8:	400bd180 	call	400bd18 <__fpclassifyd>
 4007dfc:	da003e17 	ldw	r8,248(sp)
 4007e00:	1000bd1e 	bne	r2,zero,40080f8 <___svfprintf_internal_r+0x19d0>
 4007e04:	008011c4 	movi	r2,71
 4007e08:	14411e0e 	bge	r2,r17,4008284 <___svfprintf_internal_r+0x1b5c>
 4007e0c:	04010074 	movhi	r16,1025
 4007e10:	8407bc04 	addi	r16,r16,7920
 4007e14:	00c000c4 	movi	r3,3
 4007e18:	00bfdfc4 	movi	r2,-129
 4007e1c:	d8c02915 	stw	r3,164(sp)
 4007e20:	90a4703a 	and	r18,r18,r2
 4007e24:	df002783 	ldbu	fp,158(sp)
 4007e28:	d8c02b15 	stw	r3,172(sp)
 4007e2c:	d8002a15 	stw	zero,168(sp)
 4007e30:	d8003215 	stw	zero,200(sp)
 4007e34:	003bfa06 	br	4006e20 <__alt_data_end+0xfc006e20>
 4007e38:	9080100c 	andi	r2,r18,64
 4007e3c:	d8002785 	stb	zero,158(sp)
 4007e40:	10009426 	beq	r2,zero,4008094 <___svfprintf_internal_r+0x196c>
 4007e44:	d9402e17 	ldw	r5,184(sp)
 4007e48:	d8c02a17 	ldw	r3,168(sp)
 4007e4c:	002d883a 	mov	r22,zero
 4007e50:	28800104 	addi	r2,r5,4
 4007e54:	2d00000b 	ldhu	r20,0(r5)
 4007e58:	183ec10e 	bge	r3,zero,4007960 <__alt_data_end+0xfc007960>
 4007e5c:	a586b03a 	or	r3,r20,r22
 4007e60:	d8802e15 	stw	r2,184(sp)
 4007e64:	183ec21e 	bne	r3,zero,4007970 <__alt_data_end+0xfc007970>
 4007e68:	0039883a 	mov	fp,zero
 4007e6c:	0005883a 	mov	r2,zero
 4007e70:	003db806 	br	4007554 <__alt_data_end+0xfc007554>
 4007e74:	d8c02e17 	ldw	r3,184(sp)
 4007e78:	d9002e17 	ldw	r4,184(sp)
 4007e7c:	d9402e17 	ldw	r5,184(sp)
 4007e80:	18c00017 	ldw	r3,0(r3)
 4007e84:	21000117 	ldw	r4,4(r4)
 4007e88:	29400204 	addi	r5,r5,8
 4007e8c:	d8c03615 	stw	r3,216(sp)
 4007e90:	d9003715 	stw	r4,220(sp)
 4007e94:	d9402e15 	stw	r5,184(sp)
 4007e98:	003b5a06 	br	4006c04 <__alt_data_end+0xfc006c04>
 4007e9c:	9080100c 	andi	r2,r18,64
 4007ea0:	10010726 	beq	r2,zero,40082c0 <___svfprintf_internal_r+0x1b98>
 4007ea4:	d8802e17 	ldw	r2,184(sp)
 4007ea8:	1500000f 	ldh	r20,0(r2)
 4007eac:	10800104 	addi	r2,r2,4
 4007eb0:	d8802e15 	stw	r2,184(sp)
 4007eb4:	a02dd7fa 	srai	r22,r20,31
 4007eb8:	b005883a 	mov	r2,r22
 4007ebc:	003b7d06 	br	4006cb4 <__alt_data_end+0xfc006cb4>
 4007ec0:	9080100c 	andi	r2,r18,64
 4007ec4:	10010526 	beq	r2,zero,40082dc <___svfprintf_internal_r+0x1bb4>
 4007ec8:	d8c02e17 	ldw	r3,184(sp)
 4007ecc:	002d883a 	mov	r22,zero
 4007ed0:	1d00000b 	ldhu	r20,0(r3)
 4007ed4:	18c00104 	addi	r3,r3,4
 4007ed8:	d8c02e15 	stw	r3,184(sp)
 4007edc:	003ce206 	br	4007268 <__alt_data_end+0xfc007268>
 4007ee0:	bc400007 	ldb	r17,0(r23)
 4007ee4:	003a6506 	br	400687c <__alt_data_end+0xfc00687c>
 4007ee8:	9080040c 	andi	r2,r18,16
 4007eec:	10010126 	beq	r2,zero,40082f4 <___svfprintf_internal_r+0x1bcc>
 4007ef0:	d8c02e17 	ldw	r3,184(sp)
 4007ef4:	d9002f17 	ldw	r4,188(sp)
 4007ef8:	18800017 	ldw	r2,0(r3)
 4007efc:	18c00104 	addi	r3,r3,4
 4007f00:	d8c02e15 	stw	r3,184(sp)
 4007f04:	11000015 	stw	r4,0(r2)
 4007f08:	003a3206 	br	40067d4 <__alt_data_end+0xfc0067d4>
 4007f0c:	d9002a17 	ldw	r4,168(sp)
 4007f10:	d8002785 	stb	zero,158(sp)
 4007f14:	203d8d16 	blt	r4,zero,400754c <__alt_data_end+0xfc00754c>
 4007f18:	00bfdfc4 	movi	r2,-129
 4007f1c:	90a4703a 	and	r18,r18,r2
 4007f20:	003ad506 	br	4006a78 <__alt_data_end+0xfc006a78>
 4007f24:	01410074 	movhi	r5,1025
 4007f28:	2947c984 	addi	r5,r5,7974
 4007f2c:	d9402c15 	stw	r5,176(sp)
 4007f30:	d9402c17 	ldw	r5,176(sp)
 4007f34:	1c47883a 	add	r3,r3,r17
 4007f38:	10800044 	addi	r2,r2,1
 4007f3c:	41400015 	stw	r5,0(r8)
 4007f40:	44400115 	stw	r17,4(r8)
 4007f44:	d8c02015 	stw	r3,128(sp)
 4007f48:	d8801f15 	stw	r2,124(sp)
 4007f4c:	010001c4 	movi	r4,7
 4007f50:	20bf3016 	blt	r4,r2,4007c14 <__alt_data_end+0xfc007c14>
 4007f54:	42000204 	addi	r8,r8,8
 4007f58:	003f3506 	br	4007c30 <__alt_data_end+0xfc007c30>
 4007f5c:	01010074 	movhi	r4,1025
 4007f60:	2107c984 	addi	r4,r4,7974
 4007f64:	d9002c15 	stw	r4,176(sp)
 4007f68:	003c3c06 	br	400705c <__alt_data_end+0xfc00705c>
 4007f6c:	d9402d17 	ldw	r5,180(sp)
 4007f70:	d9801e04 	addi	r6,sp,120
 4007f74:	9809883a 	mov	r4,r19
 4007f78:	400bf540 	call	400bf54 <__ssprint_r>
 4007f7c:	103ad11e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4007f80:	d8c02017 	ldw	r3,128(sp)
 4007f84:	da000404 	addi	r8,sp,16
 4007f88:	003d9306 	br	40075d8 <__alt_data_end+0xfc0075d8>
 4007f8c:	d8801f17 	ldw	r2,124(sp)
 4007f90:	01410074 	movhi	r5,1025
 4007f94:	01000044 	movi	r4,1
 4007f98:	18c00044 	addi	r3,r3,1
 4007f9c:	10800044 	addi	r2,r2,1
 4007fa0:	2947c904 	addi	r5,r5,7972
 4007fa4:	41000115 	stw	r4,4(r8)
 4007fa8:	41400015 	stw	r5,0(r8)
 4007fac:	d8c02015 	stw	r3,128(sp)
 4007fb0:	d8801f15 	stw	r2,124(sp)
 4007fb4:	010001c4 	movi	r4,7
 4007fb8:	2080b516 	blt	r4,r2,4008290 <___svfprintf_internal_r+0x1b68>
 4007fbc:	42000204 	addi	r8,r8,8
 4007fc0:	8800041e 	bne	r17,zero,4007fd4 <___svfprintf_internal_r+0x18ac>
 4007fc4:	d8803317 	ldw	r2,204(sp)
 4007fc8:	1000021e 	bne	r2,zero,4007fd4 <___svfprintf_internal_r+0x18ac>
 4007fcc:	9080004c 	andi	r2,r18,1
 4007fd0:	103c3926 	beq	r2,zero,40070b8 <__alt_data_end+0xfc0070b8>
 4007fd4:	d9003817 	ldw	r4,224(sp)
 4007fd8:	d8801f17 	ldw	r2,124(sp)
 4007fdc:	d9403417 	ldw	r5,208(sp)
 4007fe0:	20c7883a 	add	r3,r4,r3
 4007fe4:	10800044 	addi	r2,r2,1
 4007fe8:	41000115 	stw	r4,4(r8)
 4007fec:	41400015 	stw	r5,0(r8)
 4007ff0:	d8c02015 	stw	r3,128(sp)
 4007ff4:	d8801f15 	stw	r2,124(sp)
 4007ff8:	010001c4 	movi	r4,7
 4007ffc:	20818016 	blt	r4,r2,4008600 <___svfprintf_internal_r+0x1ed8>
 4008000:	42000204 	addi	r8,r8,8
 4008004:	0463c83a 	sub	r17,zero,r17
 4008008:	0440cb0e 	bge	zero,r17,4008338 <___svfprintf_internal_r+0x1c10>
 400800c:	05800404 	movi	r22,16
 4008010:	b440e80e 	bge	r22,r17,40083b4 <___svfprintf_internal_r+0x1c8c>
 4008014:	01410074 	movhi	r5,1025
 4008018:	2947c984 	addi	r5,r5,7974
 400801c:	d9402c15 	stw	r5,176(sp)
 4008020:	070001c4 	movi	fp,7
 4008024:	dd002d17 	ldw	r20,180(sp)
 4008028:	00000306 	br	4008038 <___svfprintf_internal_r+0x1910>
 400802c:	42000204 	addi	r8,r8,8
 4008030:	8c7ffc04 	addi	r17,r17,-16
 4008034:	b440e20e 	bge	r22,r17,40083c0 <___svfprintf_internal_r+0x1c98>
 4008038:	18c00404 	addi	r3,r3,16
 400803c:	10800044 	addi	r2,r2,1
 4008040:	45400015 	stw	r21,0(r8)
 4008044:	45800115 	stw	r22,4(r8)
 4008048:	d8c02015 	stw	r3,128(sp)
 400804c:	d8801f15 	stw	r2,124(sp)
 4008050:	e0bff60e 	bge	fp,r2,400802c <__alt_data_end+0xfc00802c>
 4008054:	d9801e04 	addi	r6,sp,120
 4008058:	a00b883a 	mov	r5,r20
 400805c:	9809883a 	mov	r4,r19
 4008060:	400bf540 	call	400bf54 <__ssprint_r>
 4008064:	103a971e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4008068:	d8c02017 	ldw	r3,128(sp)
 400806c:	d8801f17 	ldw	r2,124(sp)
 4008070:	da000404 	addi	r8,sp,16
 4008074:	003fee06 	br	4008030 <__alt_data_end+0xfc008030>
 4008078:	d9002e17 	ldw	r4,184(sp)
 400807c:	d9402a17 	ldw	r5,168(sp)
 4008080:	002d883a 	mov	r22,zero
 4008084:	20800104 	addi	r2,r4,4
 4008088:	25000017 	ldw	r20,0(r4)
 400808c:	283e7d0e 	bge	r5,zero,4007a84 <__alt_data_end+0xfc007a84>
 4008090:	003eda06 	br	4007bfc <__alt_data_end+0xfc007bfc>
 4008094:	d9002e17 	ldw	r4,184(sp)
 4008098:	d9402a17 	ldw	r5,168(sp)
 400809c:	002d883a 	mov	r22,zero
 40080a0:	20800104 	addi	r2,r4,4
 40080a4:	25000017 	ldw	r20,0(r4)
 40080a8:	283e2d0e 	bge	r5,zero,4007960 <__alt_data_end+0xfc007960>
 40080ac:	003f6b06 	br	4007e5c <__alt_data_end+0xfc007e5c>
 40080b0:	d8c02e15 	stw	r3,184(sp)
 40080b4:	0039883a 	mov	fp,zero
 40080b8:	003ed206 	br	4007c04 <__alt_data_end+0xfc007c04>
 40080bc:	bc400043 	ldbu	r17,1(r23)
 40080c0:	84000814 	ori	r16,r16,32
 40080c4:	bdc00044 	addi	r23,r23,1
 40080c8:	8c403fcc 	andi	r17,r17,255
 40080cc:	8c40201c 	xori	r17,r17,128
 40080d0:	8c7fe004 	addi	r17,r17,-128
 40080d4:	0039e906 	br	400687c <__alt_data_end+0xfc00687c>
 40080d8:	d9402d17 	ldw	r5,180(sp)
 40080dc:	d9801e04 	addi	r6,sp,120
 40080e0:	9809883a 	mov	r4,r19
 40080e4:	400bf540 	call	400bf54 <__ssprint_r>
 40080e8:	103a761e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 40080ec:	d8c02017 	ldw	r3,128(sp)
 40080f0:	da000404 	addi	r8,sp,16
 40080f4:	003d4a06 	br	4007620 <__alt_data_end+0xfc007620>
 40080f8:	d9002a17 	ldw	r4,168(sp)
 40080fc:	05bff7c4 	movi	r22,-33
 4008100:	00bfffc4 	movi	r2,-1
 4008104:	8dac703a 	and	r22,r17,r22
 4008108:	20806a26 	beq	r4,r2,40082b4 <___svfprintf_internal_r+0x1b8c>
 400810c:	008011c4 	movi	r2,71
 4008110:	b0813726 	beq	r22,r2,40085f0 <___svfprintf_internal_r+0x1ec8>
 4008114:	d9003717 	ldw	r4,220(sp)
 4008118:	90c04014 	ori	r3,r18,256
 400811c:	d8c02c15 	stw	r3,176(sp)
 4008120:	20015d16 	blt	r4,zero,4008698 <___svfprintf_internal_r+0x1f70>
 4008124:	dd003717 	ldw	r20,220(sp)
 4008128:	d8002905 	stb	zero,164(sp)
 400812c:	00801984 	movi	r2,102
 4008130:	88814026 	beq	r17,r2,4008634 <___svfprintf_internal_r+0x1f0c>
 4008134:	00801184 	movi	r2,70
 4008138:	88817126 	beq	r17,r2,4008700 <___svfprintf_internal_r+0x1fd8>
 400813c:	00801144 	movi	r2,69
 4008140:	b0816226 	beq	r22,r2,40086cc <___svfprintf_internal_r+0x1fa4>
 4008144:	d8c02a17 	ldw	r3,168(sp)
 4008148:	d8802104 	addi	r2,sp,132
 400814c:	d8800315 	stw	r2,12(sp)
 4008150:	d9403617 	ldw	r5,216(sp)
 4008154:	d8802504 	addi	r2,sp,148
 4008158:	d8800215 	stw	r2,8(sp)
 400815c:	d8802604 	addi	r2,sp,152
 4008160:	d8c00015 	stw	r3,0(sp)
 4008164:	d8800115 	stw	r2,4(sp)
 4008168:	01c00084 	movi	r7,2
 400816c:	a00d883a 	mov	r6,r20
 4008170:	9809883a 	mov	r4,r19
 4008174:	d8c03d15 	stw	r3,244(sp)
 4008178:	da003e15 	stw	r8,248(sp)
 400817c:	4008c0c0 	call	4008c0c <_dtoa_r>
 4008180:	1021883a 	mov	r16,r2
 4008184:	008019c4 	movi	r2,103
 4008188:	d8c03d17 	ldw	r3,244(sp)
 400818c:	da003e17 	ldw	r8,248(sp)
 4008190:	8880e726 	beq	r17,r2,4008530 <___svfprintf_internal_r+0x1e08>
 4008194:	008011c4 	movi	r2,71
 4008198:	8880d426 	beq	r17,r2,40084ec <___svfprintf_internal_r+0x1dc4>
 400819c:	80f9883a 	add	fp,r16,r3
 40081a0:	d9003617 	ldw	r4,216(sp)
 40081a4:	000d883a 	mov	r6,zero
 40081a8:	000f883a 	mov	r7,zero
 40081ac:	a00b883a 	mov	r5,r20
 40081b0:	da003e15 	stw	r8,248(sp)
 40081b4:	400ed7c0 	call	400ed7c <__eqdf2>
 40081b8:	da003e17 	ldw	r8,248(sp)
 40081bc:	1000e426 	beq	r2,zero,4008550 <___svfprintf_internal_r+0x1e28>
 40081c0:	d8802117 	ldw	r2,132(sp)
 40081c4:	1700062e 	bgeu	r2,fp,40081e0 <___svfprintf_internal_r+0x1ab8>
 40081c8:	01000c04 	movi	r4,48
 40081cc:	10c00044 	addi	r3,r2,1
 40081d0:	d8c02115 	stw	r3,132(sp)
 40081d4:	11000005 	stb	r4,0(r2)
 40081d8:	d8802117 	ldw	r2,132(sp)
 40081dc:	173ffb36 	bltu	r2,fp,40081cc <__alt_data_end+0xfc0081cc>
 40081e0:	1405c83a 	sub	r2,r2,r16
 40081e4:	d8803315 	stw	r2,204(sp)
 40081e8:	008011c4 	movi	r2,71
 40081ec:	b080c526 	beq	r22,r2,4008504 <___svfprintf_internal_r+0x1ddc>
 40081f0:	00801944 	movi	r2,101
 40081f4:	1441d80e 	bge	r2,r17,4008958 <___svfprintf_internal_r+0x2230>
 40081f8:	d8c02617 	ldw	r3,152(sp)
 40081fc:	00801984 	movi	r2,102
 4008200:	d8c03215 	stw	r3,200(sp)
 4008204:	88813426 	beq	r17,r2,40086d8 <___svfprintf_internal_r+0x1fb0>
 4008208:	d8c03217 	ldw	r3,200(sp)
 400820c:	d9003317 	ldw	r4,204(sp)
 4008210:	19012516 	blt	r3,r4,40086a8 <___svfprintf_internal_r+0x1f80>
 4008214:	9480004c 	andi	r18,r18,1
 4008218:	9001841e 	bne	r18,zero,400882c <___svfprintf_internal_r+0x2104>
 400821c:	1805883a 	mov	r2,r3
 4008220:	1801cb16 	blt	r3,zero,4008950 <___svfprintf_internal_r+0x2228>
 4008224:	d8c03217 	ldw	r3,200(sp)
 4008228:	044019c4 	movi	r17,103
 400822c:	d8c02b15 	stw	r3,172(sp)
 4008230:	df002907 	ldb	fp,164(sp)
 4008234:	e000a61e 	bne	fp,zero,40084d0 <___svfprintf_internal_r+0x1da8>
 4008238:	df002783 	ldbu	fp,158(sp)
 400823c:	d8802915 	stw	r2,164(sp)
 4008240:	dc802c17 	ldw	r18,176(sp)
 4008244:	d8002a15 	stw	zero,168(sp)
 4008248:	003af506 	br	4006e20 <__alt_data_end+0xfc006e20>
 400824c:	04010074 	movhi	r16,1025
 4008250:	8407b904 	addi	r16,r16,7908
 4008254:	003a7e06 	br	4006c50 <__alt_data_end+0xfc006c50>
 4008258:	d9003917 	ldw	r4,228(sp)
 400825c:	04001004 	movi	r16,64
 4008260:	800b883a 	mov	r5,r16
 4008264:	400a3700 	call	400a370 <_malloc_r>
 4008268:	d9002d17 	ldw	r4,180(sp)
 400826c:	20800015 	stw	r2,0(r4)
 4008270:	20800415 	stw	r2,16(r4)
 4008274:	1001d026 	beq	r2,zero,40089b8 <___svfprintf_internal_r+0x2290>
 4008278:	d8802d17 	ldw	r2,180(sp)
 400827c:	14000515 	stw	r16,20(r2)
 4008280:	00394406 	br	4006794 <__alt_data_end+0xfc006794>
 4008284:	04010074 	movhi	r16,1025
 4008288:	8407bb04 	addi	r16,r16,7916
 400828c:	003ee106 	br	4007e14 <__alt_data_end+0xfc007e14>
 4008290:	d9402d17 	ldw	r5,180(sp)
 4008294:	d9801e04 	addi	r6,sp,120
 4008298:	9809883a 	mov	r4,r19
 400829c:	400bf540 	call	400bf54 <__ssprint_r>
 40082a0:	103a081e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 40082a4:	dc402617 	ldw	r17,152(sp)
 40082a8:	d8c02017 	ldw	r3,128(sp)
 40082ac:	da000404 	addi	r8,sp,16
 40082b0:	003f4306 	br	4007fc0 <__alt_data_end+0xfc007fc0>
 40082b4:	01400184 	movi	r5,6
 40082b8:	d9402a15 	stw	r5,168(sp)
 40082bc:	003f9506 	br	4008114 <__alt_data_end+0xfc008114>
 40082c0:	d8c02e17 	ldw	r3,184(sp)
 40082c4:	1d000017 	ldw	r20,0(r3)
 40082c8:	18c00104 	addi	r3,r3,4
 40082cc:	d8c02e15 	stw	r3,184(sp)
 40082d0:	a02dd7fa 	srai	r22,r20,31
 40082d4:	b005883a 	mov	r2,r22
 40082d8:	003a7606 	br	4006cb4 <__alt_data_end+0xfc006cb4>
 40082dc:	d9002e17 	ldw	r4,184(sp)
 40082e0:	002d883a 	mov	r22,zero
 40082e4:	25000017 	ldw	r20,0(r4)
 40082e8:	21000104 	addi	r4,r4,4
 40082ec:	d9002e15 	stw	r4,184(sp)
 40082f0:	003bdd06 	br	4007268 <__alt_data_end+0xfc007268>
 40082f4:	9480100c 	andi	r18,r18,64
 40082f8:	90006e26 	beq	r18,zero,40084b4 <___svfprintf_internal_r+0x1d8c>
 40082fc:	d9402e17 	ldw	r5,184(sp)
 4008300:	d8c02f17 	ldw	r3,188(sp)
 4008304:	28800017 	ldw	r2,0(r5)
 4008308:	29400104 	addi	r5,r5,4
 400830c:	d9402e15 	stw	r5,184(sp)
 4008310:	10c0000d 	sth	r3,0(r2)
 4008314:	00392f06 	br	40067d4 <__alt_data_end+0xfc0067d4>
 4008318:	d9402d17 	ldw	r5,180(sp)
 400831c:	d9801e04 	addi	r6,sp,120
 4008320:	9809883a 	mov	r4,r19
 4008324:	400bf540 	call	400bf54 <__ssprint_r>
 4008328:	1039e61e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 400832c:	d8c02017 	ldw	r3,128(sp)
 4008330:	d8801f17 	ldw	r2,124(sp)
 4008334:	da000404 	addi	r8,sp,16
 4008338:	d9403317 	ldw	r5,204(sp)
 400833c:	10800044 	addi	r2,r2,1
 4008340:	44000015 	stw	r16,0(r8)
 4008344:	28c7883a 	add	r3,r5,r3
 4008348:	003b5506 	br	40070a0 <__alt_data_end+0xfc0070a0>
 400834c:	8009883a 	mov	r4,r16
 4008350:	df003e15 	stw	fp,248(sp)
 4008354:	400bebc0 	call	400bebc <strlen>
 4008358:	d8802b15 	stw	r2,172(sp)
 400835c:	da003e17 	ldw	r8,248(sp)
 4008360:	103c160e 	bge	r2,zero,40073bc <__alt_data_end+0xfc0073bc>
 4008364:	0005883a 	mov	r2,zero
 4008368:	003c1406 	br	40073bc <__alt_data_end+0xfc0073bc>
 400836c:	00bfffc4 	movi	r2,-1
 4008370:	0039d906 	br	4006ad8 <__alt_data_end+0xfc006ad8>
 4008374:	01010074 	movhi	r4,1025
 4008378:	2107cd84 	addi	r4,r4,7990
 400837c:	d9003515 	stw	r4,212(sp)
 4008380:	003ae406 	br	4006f14 <__alt_data_end+0xfc006f14>
 4008384:	013fffc4 	movi	r4,-1
 4008388:	0039fa06 	br	4006b74 <__alt_data_end+0xfc006b74>
 400838c:	d9402d17 	ldw	r5,180(sp)
 4008390:	d9801e04 	addi	r6,sp,120
 4008394:	9809883a 	mov	r4,r19
 4008398:	400bf540 	call	400bf54 <__ssprint_r>
 400839c:	1039c91e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 40083a0:	d8c02017 	ldw	r3,128(sp)
 40083a4:	da000404 	addi	r8,sp,16
 40083a8:	003d8406 	br	40079bc <__alt_data_end+0xfc0079bc>
 40083ac:	0023883a 	mov	r17,zero
 40083b0:	003d8306 	br	40079c0 <__alt_data_end+0xfc0079c0>
 40083b4:	01010074 	movhi	r4,1025
 40083b8:	2107c984 	addi	r4,r4,7974
 40083bc:	d9002c15 	stw	r4,176(sp)
 40083c0:	d9002c17 	ldw	r4,176(sp)
 40083c4:	1c47883a 	add	r3,r3,r17
 40083c8:	10800044 	addi	r2,r2,1
 40083cc:	41000015 	stw	r4,0(r8)
 40083d0:	44400115 	stw	r17,4(r8)
 40083d4:	d8c02015 	stw	r3,128(sp)
 40083d8:	d8801f15 	stw	r2,124(sp)
 40083dc:	010001c4 	movi	r4,7
 40083e0:	20bfcd16 	blt	r4,r2,4008318 <__alt_data_end+0xfc008318>
 40083e4:	42000204 	addi	r8,r8,8
 40083e8:	003fd306 	br	4008338 <__alt_data_end+0xfc008338>
 40083ec:	d9402d17 	ldw	r5,180(sp)
 40083f0:	d9801e04 	addi	r6,sp,120
 40083f4:	9809883a 	mov	r4,r19
 40083f8:	400bf540 	call	400bf54 <__ssprint_r>
 40083fc:	1039b11e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4008400:	d8802617 	ldw	r2,152(sp)
 4008404:	d8c02017 	ldw	r3,128(sp)
 4008408:	da000404 	addi	r8,sp,16
 400840c:	003e1c06 	br	4007c80 <__alt_data_end+0xfc007c80>
 4008410:	d8802a17 	ldw	r2,168(sp)
 4008414:	00c00184 	movi	r3,6
 4008418:	1880012e 	bgeu	r3,r2,4008420 <___svfprintf_internal_r+0x1cf8>
 400841c:	1805883a 	mov	r2,r3
 4008420:	d8802b15 	stw	r2,172(sp)
 4008424:	1000f316 	blt	r2,zero,40087f4 <___svfprintf_internal_r+0x20cc>
 4008428:	04010074 	movhi	r16,1025
 400842c:	d8802915 	stw	r2,164(sp)
 4008430:	dd002e15 	stw	r20,184(sp)
 4008434:	d8002a15 	stw	zero,168(sp)
 4008438:	d8003215 	stw	zero,200(sp)
 400843c:	8407c704 	addi	r16,r16,7964
 4008440:	0039883a 	mov	fp,zero
 4008444:	003a7d06 	br	4006e3c <__alt_data_end+0xfc006e3c>
 4008448:	01010074 	movhi	r4,1025
 400844c:	2107cd84 	addi	r4,r4,7990
 4008450:	d9003515 	stw	r4,212(sp)
 4008454:	003b3d06 	br	400714c <__alt_data_end+0xfc00714c>
 4008458:	d9402d17 	ldw	r5,180(sp)
 400845c:	d9801e04 	addi	r6,sp,120
 4008460:	9809883a 	mov	r4,r19
 4008464:	400bf540 	call	400bf54 <__ssprint_r>
 4008468:	1039961e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 400846c:	d8802617 	ldw	r2,152(sp)
 4008470:	d9403317 	ldw	r5,204(sp)
 4008474:	d8c02017 	ldw	r3,128(sp)
 4008478:	da000404 	addi	r8,sp,16
 400847c:	2885c83a 	sub	r2,r5,r2
 4008480:	003e1006 	br	4007cc4 <__alt_data_end+0xfc007cc4>
 4008484:	00800044 	movi	r2,1
 4008488:	10803fcc 	andi	r2,r2,255
 400848c:	00c00044 	movi	r3,1
 4008490:	10fa1026 	beq	r2,r3,4006cd4 <__alt_data_end+0xfc006cd4>
 4008494:	00c00084 	movi	r3,2
 4008498:	10fb8226 	beq	r2,r3,40072a4 <__alt_data_end+0xfc0072a4>
 400849c:	003a4206 	br	4006da8 <__alt_data_end+0xfc006da8>
 40084a0:	0021883a 	mov	r16,zero
 40084a4:	003e0806 	br	4007cc8 <__alt_data_end+0xfc007cc8>
 40084a8:	07000b44 	movi	fp,45
 40084ac:	df002785 	stb	fp,158(sp)
 40084b0:	0039e306 	br	4006c40 <__alt_data_end+0xfc006c40>
 40084b4:	d9002e17 	ldw	r4,184(sp)
 40084b8:	d9402f17 	ldw	r5,188(sp)
 40084bc:	20800017 	ldw	r2,0(r4)
 40084c0:	21000104 	addi	r4,r4,4
 40084c4:	d9002e15 	stw	r4,184(sp)
 40084c8:	11400015 	stw	r5,0(r2)
 40084cc:	0038c106 	br	40067d4 <__alt_data_end+0xfc0067d4>
 40084d0:	00c00b44 	movi	r3,45
 40084d4:	d8c02785 	stb	r3,158(sp)
 40084d8:	d8802915 	stw	r2,164(sp)
 40084dc:	dc802c17 	ldw	r18,176(sp)
 40084e0:	d8002a15 	stw	zero,168(sp)
 40084e4:	07000b44 	movi	fp,45
 40084e8:	003a5106 	br	4006e30 <__alt_data_end+0xfc006e30>
 40084ec:	9080004c 	andi	r2,r18,1
 40084f0:	1000941e 	bne	r2,zero,4008744 <___svfprintf_internal_r+0x201c>
 40084f4:	d8802117 	ldw	r2,132(sp)
 40084f8:	1405c83a 	sub	r2,r2,r16
 40084fc:	d8803315 	stw	r2,204(sp)
 4008500:	b441151e 	bne	r22,r17,4008958 <___svfprintf_internal_r+0x2230>
 4008504:	dd802617 	ldw	r22,152(sp)
 4008508:	00bfff44 	movi	r2,-3
 400850c:	b0801a16 	blt	r22,r2,4008578 <___svfprintf_internal_r+0x1e50>
 4008510:	d9402a17 	ldw	r5,168(sp)
 4008514:	2d801816 	blt	r5,r22,4008578 <___svfprintf_internal_r+0x1e50>
 4008518:	dd803215 	stw	r22,200(sp)
 400851c:	003f3a06 	br	4008208 <__alt_data_end+0xfc008208>
 4008520:	1025883a 	mov	r18,r2
 4008524:	0039883a 	mov	fp,zero
 4008528:	00800084 	movi	r2,2
 400852c:	003fd606 	br	4008488 <__alt_data_end+0xfc008488>
 4008530:	9080004c 	andi	r2,r18,1
 4008534:	103f191e 	bne	r2,zero,400819c <__alt_data_end+0xfc00819c>
 4008538:	d8802117 	ldw	r2,132(sp)
 400853c:	003f2806 	br	40081e0 <__alt_data_end+0xfc0081e0>
 4008540:	01010074 	movhi	r4,1025
 4008544:	2107c984 	addi	r4,r4,7974
 4008548:	d9002c15 	stw	r4,176(sp)
 400854c:	003c7c06 	br	4007740 <__alt_data_end+0xfc007740>
 4008550:	e005883a 	mov	r2,fp
 4008554:	003f2206 	br	40081e0 <__alt_data_end+0xfc0081e0>
 4008558:	d9002a17 	ldw	r4,168(sp)
 400855c:	df002783 	ldbu	fp,158(sp)
 4008560:	dd002e15 	stw	r20,184(sp)
 4008564:	d9002915 	stw	r4,164(sp)
 4008568:	d9002b15 	stw	r4,172(sp)
 400856c:	d8002a15 	stw	zero,168(sp)
 4008570:	d8003215 	stw	zero,200(sp)
 4008574:	003a2a06 	br	4006e20 <__alt_data_end+0xfc006e20>
 4008578:	8c7fff84 	addi	r17,r17,-2
 400857c:	b5bfffc4 	addi	r22,r22,-1
 4008580:	dd802615 	stw	r22,152(sp)
 4008584:	dc4022c5 	stb	r17,139(sp)
 4008588:	b000c316 	blt	r22,zero,4008898 <___svfprintf_internal_r+0x2170>
 400858c:	00800ac4 	movi	r2,43
 4008590:	d8802305 	stb	r2,140(sp)
 4008594:	00800244 	movi	r2,9
 4008598:	15806e16 	blt	r2,r22,4008754 <___svfprintf_internal_r+0x202c>
 400859c:	00800c04 	movi	r2,48
 40085a0:	b5800c04 	addi	r22,r22,48
 40085a4:	d8802345 	stb	r2,141(sp)
 40085a8:	dd802385 	stb	r22,142(sp)
 40085ac:	d88023c4 	addi	r2,sp,143
 40085b0:	df0022c4 	addi	fp,sp,139
 40085b4:	d8c03317 	ldw	r3,204(sp)
 40085b8:	1739c83a 	sub	fp,r2,fp
 40085bc:	d9003317 	ldw	r4,204(sp)
 40085c0:	e0c7883a 	add	r3,fp,r3
 40085c4:	df003b15 	stw	fp,236(sp)
 40085c8:	d8c02b15 	stw	r3,172(sp)
 40085cc:	00800044 	movi	r2,1
 40085d0:	1100b70e 	bge	r2,r4,40088b0 <___svfprintf_internal_r+0x2188>
 40085d4:	d8c02b17 	ldw	r3,172(sp)
 40085d8:	18c00044 	addi	r3,r3,1
 40085dc:	d8c02b15 	stw	r3,172(sp)
 40085e0:	1805883a 	mov	r2,r3
 40085e4:	1800b016 	blt	r3,zero,40088a8 <___svfprintf_internal_r+0x2180>
 40085e8:	d8003215 	stw	zero,200(sp)
 40085ec:	003f1006 	br	4008230 <__alt_data_end+0xfc008230>
 40085f0:	d8802a17 	ldw	r2,168(sp)
 40085f4:	103ec71e 	bne	r2,zero,4008114 <__alt_data_end+0xfc008114>
 40085f8:	dc002a15 	stw	r16,168(sp)
 40085fc:	003ec506 	br	4008114 <__alt_data_end+0xfc008114>
 4008600:	d9402d17 	ldw	r5,180(sp)
 4008604:	d9801e04 	addi	r6,sp,120
 4008608:	9809883a 	mov	r4,r19
 400860c:	400bf540 	call	400bf54 <__ssprint_r>
 4008610:	10392c1e 	bne	r2,zero,4006ac4 <__alt_data_end+0xfc006ac4>
 4008614:	dc402617 	ldw	r17,152(sp)
 4008618:	d8c02017 	ldw	r3,128(sp)
 400861c:	d8801f17 	ldw	r2,124(sp)
 4008620:	da000404 	addi	r8,sp,16
 4008624:	003e7706 	br	4008004 <__alt_data_end+0xfc008004>
 4008628:	182f883a 	mov	r23,r3
 400862c:	d8002a15 	stw	zero,168(sp)
 4008630:	00389306 	br	4006880 <__alt_data_end+0xfc006880>
 4008634:	d8c02a17 	ldw	r3,168(sp)
 4008638:	d8802104 	addi	r2,sp,132
 400863c:	d8800315 	stw	r2,12(sp)
 4008640:	d9403617 	ldw	r5,216(sp)
 4008644:	d8802504 	addi	r2,sp,148
 4008648:	d8800215 	stw	r2,8(sp)
 400864c:	d8802604 	addi	r2,sp,152
 4008650:	d8c00015 	stw	r3,0(sp)
 4008654:	9809883a 	mov	r4,r19
 4008658:	d8800115 	stw	r2,4(sp)
 400865c:	01c000c4 	movi	r7,3
 4008660:	a00d883a 	mov	r6,r20
 4008664:	da003e15 	stw	r8,248(sp)
 4008668:	4008c0c0 	call	4008c0c <_dtoa_r>
 400866c:	d9002a17 	ldw	r4,168(sp)
 4008670:	da003e17 	ldw	r8,248(sp)
 4008674:	1021883a 	mov	r16,r2
 4008678:	1139883a 	add	fp,r2,r4
 400867c:	2007883a 	mov	r3,r4
 4008680:	81000007 	ldb	r4,0(r16)
 4008684:	00800c04 	movi	r2,48
 4008688:	20806f26 	beq	r4,r2,4008848 <___svfprintf_internal_r+0x2120>
 400868c:	d8c02617 	ldw	r3,152(sp)
 4008690:	e0f9883a 	add	fp,fp,r3
 4008694:	003ec206 	br	40081a0 <__alt_data_end+0xfc0081a0>
 4008698:	00c00b44 	movi	r3,45
 400869c:	2520003c 	xorhi	r20,r4,32768
 40086a0:	d8c02905 	stb	r3,164(sp)
 40086a4:	003ea106 	br	400812c <__alt_data_end+0xfc00812c>
 40086a8:	d8c03217 	ldw	r3,200(sp)
 40086ac:	00c0890e 	bge	zero,r3,40088d4 <___svfprintf_internal_r+0x21ac>
 40086b0:	00800044 	movi	r2,1
 40086b4:	d9003317 	ldw	r4,204(sp)
 40086b8:	1105883a 	add	r2,r2,r4
 40086bc:	d8802b15 	stw	r2,172(sp)
 40086c0:	10005f16 	blt	r2,zero,4008840 <___svfprintf_internal_r+0x2118>
 40086c4:	044019c4 	movi	r17,103
 40086c8:	003ed906 	br	4008230 <__alt_data_end+0xfc008230>
 40086cc:	d9002a17 	ldw	r4,168(sp)
 40086d0:	20c00044 	addi	r3,r4,1
 40086d4:	003e9c06 	br	4008148 <__alt_data_end+0xfc008148>
 40086d8:	d9002a17 	ldw	r4,168(sp)
 40086dc:	00c0680e 	bge	zero,r3,4008880 <___svfprintf_internal_r+0x2158>
 40086e0:	2000461e 	bne	r4,zero,40087fc <___svfprintf_internal_r+0x20d4>
 40086e4:	9480004c 	andi	r18,r18,1
 40086e8:	9000441e 	bne	r18,zero,40087fc <___svfprintf_internal_r+0x20d4>
 40086ec:	1805883a 	mov	r2,r3
 40086f0:	1800a116 	blt	r3,zero,4008978 <___svfprintf_internal_r+0x2250>
 40086f4:	d8c03217 	ldw	r3,200(sp)
 40086f8:	d8c02b15 	stw	r3,172(sp)
 40086fc:	003ecc06 	br	4008230 <__alt_data_end+0xfc008230>
 4008700:	d9402a17 	ldw	r5,168(sp)
 4008704:	d8802104 	addi	r2,sp,132
 4008708:	d8800315 	stw	r2,12(sp)
 400870c:	d9400015 	stw	r5,0(sp)
 4008710:	d8802504 	addi	r2,sp,148
 4008714:	d9403617 	ldw	r5,216(sp)
 4008718:	d8800215 	stw	r2,8(sp)
 400871c:	d8802604 	addi	r2,sp,152
 4008720:	d8800115 	stw	r2,4(sp)
 4008724:	01c000c4 	movi	r7,3
 4008728:	a00d883a 	mov	r6,r20
 400872c:	9809883a 	mov	r4,r19
 4008730:	da003e15 	stw	r8,248(sp)
 4008734:	4008c0c0 	call	4008c0c <_dtoa_r>
 4008738:	d8c02a17 	ldw	r3,168(sp)
 400873c:	da003e17 	ldw	r8,248(sp)
 4008740:	1021883a 	mov	r16,r2
 4008744:	00801184 	movi	r2,70
 4008748:	80f9883a 	add	fp,r16,r3
 400874c:	88bfcc26 	beq	r17,r2,4008680 <__alt_data_end+0xfc008680>
 4008750:	003e9306 	br	40081a0 <__alt_data_end+0xfc0081a0>
 4008754:	df0022c4 	addi	fp,sp,139
 4008758:	dc002a15 	stw	r16,168(sp)
 400875c:	9829883a 	mov	r20,r19
 4008760:	e021883a 	mov	r16,fp
 4008764:	4027883a 	mov	r19,r8
 4008768:	b009883a 	mov	r4,r22
 400876c:	01400284 	movi	r5,10
 4008770:	40023340 	call	4002334 <__modsi3>
 4008774:	10800c04 	addi	r2,r2,48
 4008778:	843fffc4 	addi	r16,r16,-1
 400877c:	b009883a 	mov	r4,r22
 4008780:	01400284 	movi	r5,10
 4008784:	80800005 	stb	r2,0(r16)
 4008788:	40022b00 	call	40022b0 <__divsi3>
 400878c:	102d883a 	mov	r22,r2
 4008790:	00800244 	movi	r2,9
 4008794:	15bff416 	blt	r2,r22,4008768 <__alt_data_end+0xfc008768>
 4008798:	9811883a 	mov	r8,r19
 400879c:	b0800c04 	addi	r2,r22,48
 40087a0:	a027883a 	mov	r19,r20
 40087a4:	8029883a 	mov	r20,r16
 40087a8:	a17fffc4 	addi	r5,r20,-1
 40087ac:	a0bfffc5 	stb	r2,-1(r20)
 40087b0:	dc002a17 	ldw	r16,168(sp)
 40087b4:	2f00782e 	bgeu	r5,fp,4008998 <___svfprintf_internal_r+0x2270>
 40087b8:	d9c02384 	addi	r7,sp,142
 40087bc:	3d0fc83a 	sub	r7,r7,r20
 40087c0:	d9002344 	addi	r4,sp,141
 40087c4:	e1cf883a 	add	r7,fp,r7
 40087c8:	00000106 	br	40087d0 <___svfprintf_internal_r+0x20a8>
 40087cc:	28800003 	ldbu	r2,0(r5)
 40087d0:	20800005 	stb	r2,0(r4)
 40087d4:	21000044 	addi	r4,r4,1
 40087d8:	29400044 	addi	r5,r5,1
 40087dc:	21fffb1e 	bne	r4,r7,40087cc <__alt_data_end+0xfc0087cc>
 40087e0:	d8802304 	addi	r2,sp,140
 40087e4:	1505c83a 	sub	r2,r2,r20
 40087e8:	d8c02344 	addi	r3,sp,141
 40087ec:	1885883a 	add	r2,r3,r2
 40087f0:	003f7006 	br	40085b4 <__alt_data_end+0xfc0085b4>
 40087f4:	0005883a 	mov	r2,zero
 40087f8:	003f0b06 	br	4008428 <__alt_data_end+0xfc008428>
 40087fc:	d9002a17 	ldw	r4,168(sp)
 4008800:	d8c03217 	ldw	r3,200(sp)
 4008804:	20800044 	addi	r2,r4,1
 4008808:	1885883a 	add	r2,r3,r2
 400880c:	d8802b15 	stw	r2,172(sp)
 4008810:	103e870e 	bge	r2,zero,4008230 <__alt_data_end+0xfc008230>
 4008814:	0005883a 	mov	r2,zero
 4008818:	003e8506 	br	4008230 <__alt_data_end+0xfc008230>
 400881c:	01010074 	movhi	r4,1025
 4008820:	2107c984 	addi	r4,r4,7974
 4008824:	d9002c15 	stw	r4,176(sp)
 4008828:	003cc506 	br	4007b40 <__alt_data_end+0xfc007b40>
 400882c:	d8c03217 	ldw	r3,200(sp)
 4008830:	18c00044 	addi	r3,r3,1
 4008834:	d8c02b15 	stw	r3,172(sp)
 4008838:	1805883a 	mov	r2,r3
 400883c:	183fa10e 	bge	r3,zero,40086c4 <__alt_data_end+0xfc0086c4>
 4008840:	0005883a 	mov	r2,zero
 4008844:	003f9f06 	br	40086c4 <__alt_data_end+0xfc0086c4>
 4008848:	d9003617 	ldw	r4,216(sp)
 400884c:	000d883a 	mov	r6,zero
 4008850:	000f883a 	mov	r7,zero
 4008854:	a00b883a 	mov	r5,r20
 4008858:	d8c03d15 	stw	r3,244(sp)
 400885c:	da003e15 	stw	r8,248(sp)
 4008860:	400ed7c0 	call	400ed7c <__eqdf2>
 4008864:	d8c03d17 	ldw	r3,244(sp)
 4008868:	da003e17 	ldw	r8,248(sp)
 400886c:	103f8726 	beq	r2,zero,400868c <__alt_data_end+0xfc00868c>
 4008870:	00800044 	movi	r2,1
 4008874:	10c7c83a 	sub	r3,r2,r3
 4008878:	d8c02615 	stw	r3,152(sp)
 400887c:	003f8406 	br	4008690 <__alt_data_end+0xfc008690>
 4008880:	20000e1e 	bne	r4,zero,40088bc <___svfprintf_internal_r+0x2194>
 4008884:	9480004c 	andi	r18,r18,1
 4008888:	90000c1e 	bne	r18,zero,40088bc <___svfprintf_internal_r+0x2194>
 400888c:	00800044 	movi	r2,1
 4008890:	d8802b15 	stw	r2,172(sp)
 4008894:	003e6606 	br	4008230 <__alt_data_end+0xfc008230>
 4008898:	00800b44 	movi	r2,45
 400889c:	05adc83a 	sub	r22,zero,r22
 40088a0:	d8802305 	stb	r2,140(sp)
 40088a4:	003f3b06 	br	4008594 <__alt_data_end+0xfc008594>
 40088a8:	0005883a 	mov	r2,zero
 40088ac:	003f4e06 	br	40085e8 <__alt_data_end+0xfc0085e8>
 40088b0:	90a4703a 	and	r18,r18,r2
 40088b4:	903f4a26 	beq	r18,zero,40085e0 <__alt_data_end+0xfc0085e0>
 40088b8:	003f4606 	br	40085d4 <__alt_data_end+0xfc0085d4>
 40088bc:	d8c02a17 	ldw	r3,168(sp)
 40088c0:	18c00084 	addi	r3,r3,2
 40088c4:	d8c02b15 	stw	r3,172(sp)
 40088c8:	1805883a 	mov	r2,r3
 40088cc:	183e580e 	bge	r3,zero,4008230 <__alt_data_end+0xfc008230>
 40088d0:	003fd006 	br	4008814 <__alt_data_end+0xfc008814>
 40088d4:	00800084 	movi	r2,2
 40088d8:	10c5c83a 	sub	r2,r2,r3
 40088dc:	003f7506 	br	40086b4 <__alt_data_end+0xfc0086b4>
 40088e0:	d9402e17 	ldw	r5,184(sp)
 40088e4:	d9002e17 	ldw	r4,184(sp)
 40088e8:	bc400043 	ldbu	r17,1(r23)
 40088ec:	29400017 	ldw	r5,0(r5)
 40088f0:	20800104 	addi	r2,r4,4
 40088f4:	d8802e15 	stw	r2,184(sp)
 40088f8:	d9402a15 	stw	r5,168(sp)
 40088fc:	182f883a 	mov	r23,r3
 4008900:	283df10e 	bge	r5,zero,40080c8 <__alt_data_end+0xfc0080c8>
 4008904:	8c403fcc 	andi	r17,r17,255
 4008908:	017fffc4 	movi	r5,-1
 400890c:	8c40201c 	xori	r17,r17,128
 4008910:	d9402a15 	stw	r5,168(sp)
 4008914:	8c7fe004 	addi	r17,r17,-128
 4008918:	0037d806 	br	400687c <__alt_data_end+0xfc00687c>
 400891c:	9080004c 	andi	r2,r18,1
 4008920:	0039883a 	mov	fp,zero
 4008924:	10000726 	beq	r2,zero,4008944 <___svfprintf_internal_r+0x221c>
 4008928:	d8c02817 	ldw	r3,160(sp)
 400892c:	dc001dc4 	addi	r16,sp,119
 4008930:	00800c04 	movi	r2,48
 4008934:	1c07c83a 	sub	r3,r3,r16
 4008938:	d8801dc5 	stb	r2,119(sp)
 400893c:	d8c02b15 	stw	r3,172(sp)
 4008940:	00393106 	br	4006e08 <__alt_data_end+0xfc006e08>
 4008944:	d8002b15 	stw	zero,172(sp)
 4008948:	dc001e04 	addi	r16,sp,120
 400894c:	00392e06 	br	4006e08 <__alt_data_end+0xfc006e08>
 4008950:	0005883a 	mov	r2,zero
 4008954:	003e3306 	br	4008224 <__alt_data_end+0xfc008224>
 4008958:	dd802617 	ldw	r22,152(sp)
 400895c:	003f0706 	br	400857c <__alt_data_end+0xfc00857c>
 4008960:	d8c02b03 	ldbu	r3,172(sp)
 4008964:	d8c02785 	stb	r3,158(sp)
 4008968:	003a3506 	br	4007240 <__alt_data_end+0xfc007240>
 400896c:	d8c02b03 	ldbu	r3,172(sp)
 4008970:	d8c02785 	stb	r3,158(sp)
 4008974:	003a1706 	br	40071d4 <__alt_data_end+0xfc0071d4>
 4008978:	0005883a 	mov	r2,zero
 400897c:	003f5d06 	br	40086f4 <__alt_data_end+0xfc0086f4>
 4008980:	d8c02b03 	ldbu	r3,172(sp)
 4008984:	d8c02785 	stb	r3,158(sp)
 4008988:	0038f306 	br	4006d58 <__alt_data_end+0xfc006d58>
 400898c:	d8c02b03 	ldbu	r3,172(sp)
 4008990:	d8c02785 	stb	r3,158(sp)
 4008994:	0038be06 	br	4006c90 <__alt_data_end+0xfc006c90>
 4008998:	d8802344 	addi	r2,sp,141
 400899c:	003f0506 	br	40085b4 <__alt_data_end+0xfc0085b4>
 40089a0:	d8c02b03 	ldbu	r3,172(sp)
 40089a4:	d8c02785 	stb	r3,158(sp)
 40089a8:	00388b06 	br	4006bd8 <__alt_data_end+0xfc006bd8>
 40089ac:	d8c02b03 	ldbu	r3,172(sp)
 40089b0:	d8c02785 	stb	r3,158(sp)
 40089b4:	003ad706 	br	4007514 <__alt_data_end+0xfc007514>
 40089b8:	d9403917 	ldw	r5,228(sp)
 40089bc:	00800304 	movi	r2,12
 40089c0:	28800015 	stw	r2,0(r5)
 40089c4:	00bfffc4 	movi	r2,-1
 40089c8:	00384306 	br	4006ad8 <__alt_data_end+0xfc006ad8>
 40089cc:	d8c02b03 	ldbu	r3,172(sp)
 40089d0:	d8c02785 	stb	r3,158(sp)
 40089d4:	003ab606 	br	40074b0 <__alt_data_end+0xfc0074b0>
 40089d8:	d8c02b03 	ldbu	r3,172(sp)
 40089dc:	d8c02785 	stb	r3,158(sp)
 40089e0:	003a8906 	br	4007408 <__alt_data_end+0xfc007408>

040089e4 <quorem>:
 40089e4:	defff204 	addi	sp,sp,-56
 40089e8:	ddc00b15 	stw	r23,44(sp)
 40089ec:	20800417 	ldw	r2,16(r4)
 40089f0:	2dc00417 	ldw	r23,16(r5)
 40089f4:	dfc00d15 	stw	ra,52(sp)
 40089f8:	df000c15 	stw	fp,48(sp)
 40089fc:	dd800a15 	stw	r22,40(sp)
 4008a00:	dd400915 	stw	r21,36(sp)
 4008a04:	dd000815 	stw	r20,32(sp)
 4008a08:	dcc00715 	stw	r19,28(sp)
 4008a0c:	dc800615 	stw	r18,24(sp)
 4008a10:	dc400515 	stw	r17,20(sp)
 4008a14:	dc000415 	stw	r16,16(sp)
 4008a18:	15c07a16 	blt	r2,r23,4008c04 <quorem+0x220>
 4008a1c:	bdffffc4 	addi	r23,r23,-1
 4008a20:	bde9883a 	add	r20,r23,r23
 4008a24:	28c00504 	addi	r3,r5,20
 4008a28:	a529883a 	add	r20,r20,r20
 4008a2c:	1d39883a 	add	fp,r3,r20
 4008a30:	24c00504 	addi	r19,r4,20
 4008a34:	d9400215 	stw	r5,8(sp)
 4008a38:	9d29883a 	add	r20,r19,r20
 4008a3c:	e1400017 	ldw	r5,0(fp)
 4008a40:	d9000015 	stw	r4,0(sp)
 4008a44:	a1000017 	ldw	r4,0(r20)
 4008a48:	29400044 	addi	r5,r5,1
 4008a4c:	d8c00115 	stw	r3,4(sp)
 4008a50:	dd000315 	stw	r20,12(sp)
 4008a54:	40023a80 	call	40023a8 <__udivsi3>
 4008a58:	1025883a 	mov	r18,r2
 4008a5c:	10003026 	beq	r2,zero,4008b20 <quorem+0x13c>
 4008a60:	dc400117 	ldw	r17,4(sp)
 4008a64:	9829883a 	mov	r20,r19
 4008a68:	002d883a 	mov	r22,zero
 4008a6c:	0021883a 	mov	r16,zero
 4008a70:	8d400017 	ldw	r21,0(r17)
 4008a74:	900b883a 	mov	r5,r18
 4008a78:	8c400104 	addi	r17,r17,4
 4008a7c:	a93fffcc 	andi	r4,r21,65535
 4008a80:	40024640 	call	4002464 <__mulsi3>
 4008a84:	a808d43a 	srli	r4,r21,16
 4008a88:	900b883a 	mov	r5,r18
 4008a8c:	15ad883a 	add	r22,r2,r22
 4008a90:	40024640 	call	4002464 <__mulsi3>
 4008a94:	a1000017 	ldw	r4,0(r20)
 4008a98:	b00cd43a 	srli	r6,r22,16
 4008a9c:	b0ffffcc 	andi	r3,r22,65535
 4008aa0:	217fffcc 	andi	r5,r4,65535
 4008aa4:	2c21883a 	add	r16,r5,r16
 4008aa8:	80c7c83a 	sub	r3,r16,r3
 4008aac:	2008d43a 	srli	r4,r4,16
 4008ab0:	1185883a 	add	r2,r2,r6
 4008ab4:	1821d43a 	srai	r16,r3,16
 4008ab8:	117fffcc 	andi	r5,r2,65535
 4008abc:	2149c83a 	sub	r4,r4,r5
 4008ac0:	2421883a 	add	r16,r4,r16
 4008ac4:	8008943a 	slli	r4,r16,16
 4008ac8:	18ffffcc 	andi	r3,r3,65535
 4008acc:	102cd43a 	srli	r22,r2,16
 4008ad0:	20c8b03a 	or	r4,r4,r3
 4008ad4:	a1000015 	stw	r4,0(r20)
 4008ad8:	8021d43a 	srai	r16,r16,16
 4008adc:	a5000104 	addi	r20,r20,4
 4008ae0:	e47fe32e 	bgeu	fp,r17,4008a70 <__alt_data_end+0xfc008a70>
 4008ae4:	d8c00317 	ldw	r3,12(sp)
 4008ae8:	18800017 	ldw	r2,0(r3)
 4008aec:	10000c1e 	bne	r2,zero,4008b20 <quorem+0x13c>
 4008af0:	18bfff04 	addi	r2,r3,-4
 4008af4:	9880082e 	bgeu	r19,r2,4008b18 <quorem+0x134>
 4008af8:	18ffff17 	ldw	r3,-4(r3)
 4008afc:	18000326 	beq	r3,zero,4008b0c <quorem+0x128>
 4008b00:	00000506 	br	4008b18 <quorem+0x134>
 4008b04:	10c00017 	ldw	r3,0(r2)
 4008b08:	1800031e 	bne	r3,zero,4008b18 <quorem+0x134>
 4008b0c:	10bfff04 	addi	r2,r2,-4
 4008b10:	bdffffc4 	addi	r23,r23,-1
 4008b14:	98bffb36 	bltu	r19,r2,4008b04 <__alt_data_end+0xfc008b04>
 4008b18:	d8c00017 	ldw	r3,0(sp)
 4008b1c:	1dc00415 	stw	r23,16(r3)
 4008b20:	d9400217 	ldw	r5,8(sp)
 4008b24:	d9000017 	ldw	r4,0(sp)
 4008b28:	400b5e40 	call	400b5e4 <__mcmp>
 4008b2c:	10002816 	blt	r2,zero,4008bd0 <quorem+0x1ec>
 4008b30:	dc400117 	ldw	r17,4(sp)
 4008b34:	94800044 	addi	r18,r18,1
 4008b38:	980d883a 	mov	r6,r19
 4008b3c:	0007883a 	mov	r3,zero
 4008b40:	31000017 	ldw	r4,0(r6)
 4008b44:	89400017 	ldw	r5,0(r17)
 4008b48:	31800104 	addi	r6,r6,4
 4008b4c:	20bfffcc 	andi	r2,r4,65535
 4008b50:	10c7883a 	add	r3,r2,r3
 4008b54:	28bfffcc 	andi	r2,r5,65535
 4008b58:	1885c83a 	sub	r2,r3,r2
 4008b5c:	280ad43a 	srli	r5,r5,16
 4008b60:	2008d43a 	srli	r4,r4,16
 4008b64:	1007d43a 	srai	r3,r2,16
 4008b68:	10bfffcc 	andi	r2,r2,65535
 4008b6c:	2149c83a 	sub	r4,r4,r5
 4008b70:	20c9883a 	add	r4,r4,r3
 4008b74:	200a943a 	slli	r5,r4,16
 4008b78:	8c400104 	addi	r17,r17,4
 4008b7c:	2007d43a 	srai	r3,r4,16
 4008b80:	2884b03a 	or	r2,r5,r2
 4008b84:	30bfff15 	stw	r2,-4(r6)
 4008b88:	e47fed2e 	bgeu	fp,r17,4008b40 <__alt_data_end+0xfc008b40>
 4008b8c:	bdc5883a 	add	r2,r23,r23
 4008b90:	1085883a 	add	r2,r2,r2
 4008b94:	9887883a 	add	r3,r19,r2
 4008b98:	18800017 	ldw	r2,0(r3)
 4008b9c:	10000c1e 	bne	r2,zero,4008bd0 <quorem+0x1ec>
 4008ba0:	18bfff04 	addi	r2,r3,-4
 4008ba4:	9880082e 	bgeu	r19,r2,4008bc8 <quorem+0x1e4>
 4008ba8:	18ffff17 	ldw	r3,-4(r3)
 4008bac:	18000326 	beq	r3,zero,4008bbc <quorem+0x1d8>
 4008bb0:	00000506 	br	4008bc8 <quorem+0x1e4>
 4008bb4:	10c00017 	ldw	r3,0(r2)
 4008bb8:	1800031e 	bne	r3,zero,4008bc8 <quorem+0x1e4>
 4008bbc:	10bfff04 	addi	r2,r2,-4
 4008bc0:	bdffffc4 	addi	r23,r23,-1
 4008bc4:	98bffb36 	bltu	r19,r2,4008bb4 <__alt_data_end+0xfc008bb4>
 4008bc8:	d8c00017 	ldw	r3,0(sp)
 4008bcc:	1dc00415 	stw	r23,16(r3)
 4008bd0:	9005883a 	mov	r2,r18
 4008bd4:	dfc00d17 	ldw	ra,52(sp)
 4008bd8:	df000c17 	ldw	fp,48(sp)
 4008bdc:	ddc00b17 	ldw	r23,44(sp)
 4008be0:	dd800a17 	ldw	r22,40(sp)
 4008be4:	dd400917 	ldw	r21,36(sp)
 4008be8:	dd000817 	ldw	r20,32(sp)
 4008bec:	dcc00717 	ldw	r19,28(sp)
 4008bf0:	dc800617 	ldw	r18,24(sp)
 4008bf4:	dc400517 	ldw	r17,20(sp)
 4008bf8:	dc000417 	ldw	r16,16(sp)
 4008bfc:	dec00e04 	addi	sp,sp,56
 4008c00:	f800283a 	ret
 4008c04:	0005883a 	mov	r2,zero
 4008c08:	003ff206 	br	4008bd4 <__alt_data_end+0xfc008bd4>

04008c0c <_dtoa_r>:
 4008c0c:	20801017 	ldw	r2,64(r4)
 4008c10:	deffde04 	addi	sp,sp,-136
 4008c14:	df002015 	stw	fp,128(sp)
 4008c18:	dcc01b15 	stw	r19,108(sp)
 4008c1c:	dc801a15 	stw	r18,104(sp)
 4008c20:	dc401915 	stw	r17,100(sp)
 4008c24:	dc001815 	stw	r16,96(sp)
 4008c28:	dfc02115 	stw	ra,132(sp)
 4008c2c:	ddc01f15 	stw	r23,124(sp)
 4008c30:	dd801e15 	stw	r22,120(sp)
 4008c34:	dd401d15 	stw	r21,116(sp)
 4008c38:	dd001c15 	stw	r20,112(sp)
 4008c3c:	d9c00315 	stw	r7,12(sp)
 4008c40:	2039883a 	mov	fp,r4
 4008c44:	3023883a 	mov	r17,r6
 4008c48:	2825883a 	mov	r18,r5
 4008c4c:	dc002417 	ldw	r16,144(sp)
 4008c50:	3027883a 	mov	r19,r6
 4008c54:	10000826 	beq	r2,zero,4008c78 <_dtoa_r+0x6c>
 4008c58:	21801117 	ldw	r6,68(r4)
 4008c5c:	00c00044 	movi	r3,1
 4008c60:	100b883a 	mov	r5,r2
 4008c64:	1986983a 	sll	r3,r3,r6
 4008c68:	11800115 	stw	r6,4(r2)
 4008c6c:	10c00215 	stw	r3,8(r2)
 4008c70:	400ad080 	call	400ad08 <_Bfree>
 4008c74:	e0001015 	stw	zero,64(fp)
 4008c78:	88002e16 	blt	r17,zero,4008d34 <_dtoa_r+0x128>
 4008c7c:	80000015 	stw	zero,0(r16)
 4008c80:	889ffc2c 	andhi	r2,r17,32752
 4008c84:	00dffc34 	movhi	r3,32752
 4008c88:	10c01c26 	beq	r2,r3,4008cfc <_dtoa_r+0xf0>
 4008c8c:	000d883a 	mov	r6,zero
 4008c90:	000f883a 	mov	r7,zero
 4008c94:	9009883a 	mov	r4,r18
 4008c98:	980b883a 	mov	r5,r19
 4008c9c:	400ed7c0 	call	400ed7c <__eqdf2>
 4008ca0:	10002b1e 	bne	r2,zero,4008d50 <_dtoa_r+0x144>
 4008ca4:	d9c02317 	ldw	r7,140(sp)
 4008ca8:	00800044 	movi	r2,1
 4008cac:	38800015 	stw	r2,0(r7)
 4008cb0:	d8802517 	ldw	r2,148(sp)
 4008cb4:	10019e26 	beq	r2,zero,4009330 <_dtoa_r+0x724>
 4008cb8:	d8c02517 	ldw	r3,148(sp)
 4008cbc:	00810074 	movhi	r2,1025
 4008cc0:	1087c944 	addi	r2,r2,7973
 4008cc4:	18800015 	stw	r2,0(r3)
 4008cc8:	10bfffc4 	addi	r2,r2,-1
 4008ccc:	dfc02117 	ldw	ra,132(sp)
 4008cd0:	df002017 	ldw	fp,128(sp)
 4008cd4:	ddc01f17 	ldw	r23,124(sp)
 4008cd8:	dd801e17 	ldw	r22,120(sp)
 4008cdc:	dd401d17 	ldw	r21,116(sp)
 4008ce0:	dd001c17 	ldw	r20,112(sp)
 4008ce4:	dcc01b17 	ldw	r19,108(sp)
 4008ce8:	dc801a17 	ldw	r18,104(sp)
 4008cec:	dc401917 	ldw	r17,100(sp)
 4008cf0:	dc001817 	ldw	r16,96(sp)
 4008cf4:	dec02204 	addi	sp,sp,136
 4008cf8:	f800283a 	ret
 4008cfc:	d8c02317 	ldw	r3,140(sp)
 4008d00:	0089c3c4 	movi	r2,9999
 4008d04:	18800015 	stw	r2,0(r3)
 4008d08:	90017726 	beq	r18,zero,40092e8 <_dtoa_r+0x6dc>
 4008d0c:	00810074 	movhi	r2,1025
 4008d10:	1087d504 	addi	r2,r2,8020
 4008d14:	d9002517 	ldw	r4,148(sp)
 4008d18:	203fec26 	beq	r4,zero,4008ccc <__alt_data_end+0xfc008ccc>
 4008d1c:	10c000c7 	ldb	r3,3(r2)
 4008d20:	1801781e 	bne	r3,zero,4009304 <_dtoa_r+0x6f8>
 4008d24:	10c000c4 	addi	r3,r2,3
 4008d28:	d9802517 	ldw	r6,148(sp)
 4008d2c:	30c00015 	stw	r3,0(r6)
 4008d30:	003fe606 	br	4008ccc <__alt_data_end+0xfc008ccc>
 4008d34:	04e00034 	movhi	r19,32768
 4008d38:	9cffffc4 	addi	r19,r19,-1
 4008d3c:	00800044 	movi	r2,1
 4008d40:	8ce6703a 	and	r19,r17,r19
 4008d44:	80800015 	stw	r2,0(r16)
 4008d48:	9823883a 	mov	r17,r19
 4008d4c:	003fcc06 	br	4008c80 <__alt_data_end+0xfc008c80>
 4008d50:	d8800204 	addi	r2,sp,8
 4008d54:	d8800015 	stw	r2,0(sp)
 4008d58:	d9c00104 	addi	r7,sp,4
 4008d5c:	900b883a 	mov	r5,r18
 4008d60:	980d883a 	mov	r6,r19
 4008d64:	e009883a 	mov	r4,fp
 4008d68:	8820d53a 	srli	r16,r17,20
 4008d6c:	400b9b00 	call	400b9b0 <__d2b>
 4008d70:	d8800915 	stw	r2,36(sp)
 4008d74:	8001651e 	bne	r16,zero,400930c <_dtoa_r+0x700>
 4008d78:	dd800217 	ldw	r22,8(sp)
 4008d7c:	dc000117 	ldw	r16,4(sp)
 4008d80:	00800804 	movi	r2,32
 4008d84:	b421883a 	add	r16,r22,r16
 4008d88:	80c10c84 	addi	r3,r16,1074
 4008d8c:	10c2d10e 	bge	r2,r3,40098d4 <_dtoa_r+0xcc8>
 4008d90:	00801004 	movi	r2,64
 4008d94:	81010484 	addi	r4,r16,1042
 4008d98:	10c7c83a 	sub	r3,r2,r3
 4008d9c:	9108d83a 	srl	r4,r18,r4
 4008da0:	88e2983a 	sll	r17,r17,r3
 4008da4:	2448b03a 	or	r4,r4,r17
 4008da8:	40060600 	call	4006060 <__floatunsidf>
 4008dac:	017f8434 	movhi	r5,65040
 4008db0:	01800044 	movi	r6,1
 4008db4:	1009883a 	mov	r4,r2
 4008db8:	194b883a 	add	r5,r3,r5
 4008dbc:	843fffc4 	addi	r16,r16,-1
 4008dc0:	d9801115 	stw	r6,68(sp)
 4008dc4:	000d883a 	mov	r6,zero
 4008dc8:	01cffe34 	movhi	r7,16376
 4008dcc:	40056080 	call	4005608 <__subdf3>
 4008dd0:	0198dbf4 	movhi	r6,25455
 4008dd4:	01cff4f4 	movhi	r7,16339
 4008dd8:	3190d844 	addi	r6,r6,17249
 4008ddc:	39e1e9c4 	addi	r7,r7,-30809
 4008de0:	1009883a 	mov	r4,r2
 4008de4:	180b883a 	mov	r5,r3
 4008de8:	4004d9c0 	call	4004d9c <__muldf3>
 4008dec:	01a2d874 	movhi	r6,35681
 4008df0:	01cff1f4 	movhi	r7,16327
 4008df4:	31b22cc4 	addi	r6,r6,-14157
 4008df8:	39e28a04 	addi	r7,r7,-30168
 4008dfc:	180b883a 	mov	r5,r3
 4008e00:	1009883a 	mov	r4,r2
 4008e04:	40039500 	call	4003950 <__adddf3>
 4008e08:	8009883a 	mov	r4,r16
 4008e0c:	1029883a 	mov	r20,r2
 4008e10:	1823883a 	mov	r17,r3
 4008e14:	4005f840 	call	4005f84 <__floatsidf>
 4008e18:	019427f4 	movhi	r6,20639
 4008e1c:	01cff4f4 	movhi	r7,16339
 4008e20:	319e7ec4 	addi	r6,r6,31227
 4008e24:	39d104c4 	addi	r7,r7,17427
 4008e28:	1009883a 	mov	r4,r2
 4008e2c:	180b883a 	mov	r5,r3
 4008e30:	4004d9c0 	call	4004d9c <__muldf3>
 4008e34:	100d883a 	mov	r6,r2
 4008e38:	180f883a 	mov	r7,r3
 4008e3c:	a009883a 	mov	r4,r20
 4008e40:	880b883a 	mov	r5,r17
 4008e44:	40039500 	call	4003950 <__adddf3>
 4008e48:	1009883a 	mov	r4,r2
 4008e4c:	180b883a 	mov	r5,r3
 4008e50:	1029883a 	mov	r20,r2
 4008e54:	1823883a 	mov	r17,r3
 4008e58:	4005f040 	call	4005f04 <__fixdfsi>
 4008e5c:	000d883a 	mov	r6,zero
 4008e60:	000f883a 	mov	r7,zero
 4008e64:	a009883a 	mov	r4,r20
 4008e68:	880b883a 	mov	r5,r17
 4008e6c:	d8800515 	stw	r2,20(sp)
 4008e70:	4004ca80 	call	4004ca8 <__ledf2>
 4008e74:	10028716 	blt	r2,zero,4009894 <_dtoa_r+0xc88>
 4008e78:	d8c00517 	ldw	r3,20(sp)
 4008e7c:	00800584 	movi	r2,22
 4008e80:	10c27536 	bltu	r2,r3,4009858 <_dtoa_r+0xc4c>
 4008e84:	180490fa 	slli	r2,r3,3
 4008e88:	00c10074 	movhi	r3,1025
 4008e8c:	18c7f104 	addi	r3,r3,8132
 4008e90:	1885883a 	add	r2,r3,r2
 4008e94:	11000017 	ldw	r4,0(r2)
 4008e98:	11400117 	ldw	r5,4(r2)
 4008e9c:	900d883a 	mov	r6,r18
 4008ea0:	980f883a 	mov	r7,r19
 4008ea4:	4004bcc0 	call	4004bcc <__gedf2>
 4008ea8:	00828d0e 	bge	zero,r2,40098e0 <_dtoa_r+0xcd4>
 4008eac:	d9000517 	ldw	r4,20(sp)
 4008eb0:	d8000e15 	stw	zero,56(sp)
 4008eb4:	213fffc4 	addi	r4,r4,-1
 4008eb8:	d9000515 	stw	r4,20(sp)
 4008ebc:	b42dc83a 	sub	r22,r22,r16
 4008ec0:	b5bfffc4 	addi	r22,r22,-1
 4008ec4:	b0026f16 	blt	r22,zero,4009884 <_dtoa_r+0xc78>
 4008ec8:	d8000815 	stw	zero,32(sp)
 4008ecc:	d9c00517 	ldw	r7,20(sp)
 4008ed0:	38026416 	blt	r7,zero,4009864 <_dtoa_r+0xc58>
 4008ed4:	b1ed883a 	add	r22,r22,r7
 4008ed8:	d9c00d15 	stw	r7,52(sp)
 4008edc:	d8000a15 	stw	zero,40(sp)
 4008ee0:	d9800317 	ldw	r6,12(sp)
 4008ee4:	00800244 	movi	r2,9
 4008ee8:	11811436 	bltu	r2,r6,400933c <_dtoa_r+0x730>
 4008eec:	00800144 	movi	r2,5
 4008ef0:	1184e10e 	bge	r2,r6,400a278 <_dtoa_r+0x166c>
 4008ef4:	31bfff04 	addi	r6,r6,-4
 4008ef8:	d9800315 	stw	r6,12(sp)
 4008efc:	0023883a 	mov	r17,zero
 4008f00:	d9800317 	ldw	r6,12(sp)
 4008f04:	008000c4 	movi	r2,3
 4008f08:	30836726 	beq	r6,r2,4009ca8 <_dtoa_r+0x109c>
 4008f0c:	1183410e 	bge	r2,r6,4009c14 <_dtoa_r+0x1008>
 4008f10:	d9c00317 	ldw	r7,12(sp)
 4008f14:	00800104 	movi	r2,4
 4008f18:	38827c26 	beq	r7,r2,400990c <_dtoa_r+0xd00>
 4008f1c:	00800144 	movi	r2,5
 4008f20:	3884c41e 	bne	r7,r2,400a234 <_dtoa_r+0x1628>
 4008f24:	00800044 	movi	r2,1
 4008f28:	d8800b15 	stw	r2,44(sp)
 4008f2c:	d8c00517 	ldw	r3,20(sp)
 4008f30:	d9002217 	ldw	r4,136(sp)
 4008f34:	1907883a 	add	r3,r3,r4
 4008f38:	19800044 	addi	r6,r3,1
 4008f3c:	d8c00c15 	stw	r3,48(sp)
 4008f40:	d9800615 	stw	r6,24(sp)
 4008f44:	0183a40e 	bge	zero,r6,4009dd8 <_dtoa_r+0x11cc>
 4008f48:	d9800617 	ldw	r6,24(sp)
 4008f4c:	3021883a 	mov	r16,r6
 4008f50:	e0001115 	stw	zero,68(fp)
 4008f54:	008005c4 	movi	r2,23
 4008f58:	1184c92e 	bgeu	r2,r6,400a280 <_dtoa_r+0x1674>
 4008f5c:	00c00044 	movi	r3,1
 4008f60:	00800104 	movi	r2,4
 4008f64:	1085883a 	add	r2,r2,r2
 4008f68:	11000504 	addi	r4,r2,20
 4008f6c:	180b883a 	mov	r5,r3
 4008f70:	18c00044 	addi	r3,r3,1
 4008f74:	313ffb2e 	bgeu	r6,r4,4008f64 <__alt_data_end+0xfc008f64>
 4008f78:	e1401115 	stw	r5,68(fp)
 4008f7c:	e009883a 	mov	r4,fp
 4008f80:	400ac600 	call	400ac60 <_Balloc>
 4008f84:	d8800715 	stw	r2,28(sp)
 4008f88:	e0801015 	stw	r2,64(fp)
 4008f8c:	00800384 	movi	r2,14
 4008f90:	1400f736 	bltu	r2,r16,4009370 <_dtoa_r+0x764>
 4008f94:	8800f626 	beq	r17,zero,4009370 <_dtoa_r+0x764>
 4008f98:	d9c00517 	ldw	r7,20(sp)
 4008f9c:	01c39a0e 	bge	zero,r7,4009e08 <_dtoa_r+0x11fc>
 4008fa0:	388003cc 	andi	r2,r7,15
 4008fa4:	100490fa 	slli	r2,r2,3
 4008fa8:	382bd13a 	srai	r21,r7,4
 4008fac:	00c10074 	movhi	r3,1025
 4008fb0:	18c7f104 	addi	r3,r3,8132
 4008fb4:	1885883a 	add	r2,r3,r2
 4008fb8:	a8c0040c 	andi	r3,r21,16
 4008fbc:	12400017 	ldw	r9,0(r2)
 4008fc0:	12000117 	ldw	r8,4(r2)
 4008fc4:	18037926 	beq	r3,zero,4009dac <_dtoa_r+0x11a0>
 4008fc8:	00810074 	movhi	r2,1025
 4008fcc:	1087e704 	addi	r2,r2,8092
 4008fd0:	11800817 	ldw	r6,32(r2)
 4008fd4:	11c00917 	ldw	r7,36(r2)
 4008fd8:	9009883a 	mov	r4,r18
 4008fdc:	980b883a 	mov	r5,r19
 4008fe0:	da001715 	stw	r8,92(sp)
 4008fe4:	da401615 	stw	r9,88(sp)
 4008fe8:	40041fc0 	call	40041fc <__divdf3>
 4008fec:	da001717 	ldw	r8,92(sp)
 4008ff0:	da401617 	ldw	r9,88(sp)
 4008ff4:	ad4003cc 	andi	r21,r21,15
 4008ff8:	040000c4 	movi	r16,3
 4008ffc:	1023883a 	mov	r17,r2
 4009000:	1829883a 	mov	r20,r3
 4009004:	a8001126 	beq	r21,zero,400904c <_dtoa_r+0x440>
 4009008:	05c10074 	movhi	r23,1025
 400900c:	bdc7e704 	addi	r23,r23,8092
 4009010:	4805883a 	mov	r2,r9
 4009014:	4007883a 	mov	r3,r8
 4009018:	a980004c 	andi	r6,r21,1
 400901c:	1009883a 	mov	r4,r2
 4009020:	a82bd07a 	srai	r21,r21,1
 4009024:	180b883a 	mov	r5,r3
 4009028:	30000426 	beq	r6,zero,400903c <_dtoa_r+0x430>
 400902c:	b9800017 	ldw	r6,0(r23)
 4009030:	b9c00117 	ldw	r7,4(r23)
 4009034:	84000044 	addi	r16,r16,1
 4009038:	4004d9c0 	call	4004d9c <__muldf3>
 400903c:	bdc00204 	addi	r23,r23,8
 4009040:	a83ff51e 	bne	r21,zero,4009018 <__alt_data_end+0xfc009018>
 4009044:	1013883a 	mov	r9,r2
 4009048:	1811883a 	mov	r8,r3
 400904c:	480d883a 	mov	r6,r9
 4009050:	400f883a 	mov	r7,r8
 4009054:	8809883a 	mov	r4,r17
 4009058:	a00b883a 	mov	r5,r20
 400905c:	40041fc0 	call	40041fc <__divdf3>
 4009060:	d8800f15 	stw	r2,60(sp)
 4009064:	d8c01015 	stw	r3,64(sp)
 4009068:	d8c00e17 	ldw	r3,56(sp)
 400906c:	18000626 	beq	r3,zero,4009088 <_dtoa_r+0x47c>
 4009070:	d9000f17 	ldw	r4,60(sp)
 4009074:	d9401017 	ldw	r5,64(sp)
 4009078:	000d883a 	mov	r6,zero
 400907c:	01cffc34 	movhi	r7,16368
 4009080:	4004ca80 	call	4004ca8 <__ledf2>
 4009084:	10040b16 	blt	r2,zero,400a0b4 <_dtoa_r+0x14a8>
 4009088:	8009883a 	mov	r4,r16
 400908c:	4005f840 	call	4005f84 <__floatsidf>
 4009090:	d9800f17 	ldw	r6,60(sp)
 4009094:	d9c01017 	ldw	r7,64(sp)
 4009098:	1009883a 	mov	r4,r2
 400909c:	180b883a 	mov	r5,r3
 40090a0:	4004d9c0 	call	4004d9c <__muldf3>
 40090a4:	000d883a 	mov	r6,zero
 40090a8:	01d00734 	movhi	r7,16412
 40090ac:	1009883a 	mov	r4,r2
 40090b0:	180b883a 	mov	r5,r3
 40090b4:	40039500 	call	4003950 <__adddf3>
 40090b8:	1021883a 	mov	r16,r2
 40090bc:	d8800617 	ldw	r2,24(sp)
 40090c0:	047f3034 	movhi	r17,64704
 40090c4:	1c63883a 	add	r17,r3,r17
 40090c8:	10031826 	beq	r2,zero,4009d2c <_dtoa_r+0x1120>
 40090cc:	d8c00517 	ldw	r3,20(sp)
 40090d0:	db000617 	ldw	r12,24(sp)
 40090d4:	d8c01315 	stw	r3,76(sp)
 40090d8:	d9000b17 	ldw	r4,44(sp)
 40090dc:	20038f26 	beq	r4,zero,4009f1c <_dtoa_r+0x1310>
 40090e0:	60bfffc4 	addi	r2,r12,-1
 40090e4:	100490fa 	slli	r2,r2,3
 40090e8:	00c10074 	movhi	r3,1025
 40090ec:	18c7f104 	addi	r3,r3,8132
 40090f0:	1885883a 	add	r2,r3,r2
 40090f4:	11800017 	ldw	r6,0(r2)
 40090f8:	11c00117 	ldw	r7,4(r2)
 40090fc:	d8800717 	ldw	r2,28(sp)
 4009100:	0009883a 	mov	r4,zero
 4009104:	014ff834 	movhi	r5,16352
 4009108:	db001615 	stw	r12,88(sp)
 400910c:	15c00044 	addi	r23,r2,1
 4009110:	40041fc0 	call	40041fc <__divdf3>
 4009114:	800d883a 	mov	r6,r16
 4009118:	880f883a 	mov	r7,r17
 400911c:	1009883a 	mov	r4,r2
 4009120:	180b883a 	mov	r5,r3
 4009124:	40056080 	call	4005608 <__subdf3>
 4009128:	d9401017 	ldw	r5,64(sp)
 400912c:	d9000f17 	ldw	r4,60(sp)
 4009130:	102b883a 	mov	r21,r2
 4009134:	d8c01215 	stw	r3,72(sp)
 4009138:	4005f040 	call	4005f04 <__fixdfsi>
 400913c:	1009883a 	mov	r4,r2
 4009140:	1029883a 	mov	r20,r2
 4009144:	4005f840 	call	4005f84 <__floatsidf>
 4009148:	d9000f17 	ldw	r4,60(sp)
 400914c:	d9401017 	ldw	r5,64(sp)
 4009150:	100d883a 	mov	r6,r2
 4009154:	180f883a 	mov	r7,r3
 4009158:	40056080 	call	4005608 <__subdf3>
 400915c:	1823883a 	mov	r17,r3
 4009160:	d8c00717 	ldw	r3,28(sp)
 4009164:	d9401217 	ldw	r5,72(sp)
 4009168:	a2000c04 	addi	r8,r20,48
 400916c:	1021883a 	mov	r16,r2
 4009170:	1a000005 	stb	r8,0(r3)
 4009174:	800d883a 	mov	r6,r16
 4009178:	880f883a 	mov	r7,r17
 400917c:	a809883a 	mov	r4,r21
 4009180:	4029883a 	mov	r20,r8
 4009184:	4004bcc0 	call	4004bcc <__gedf2>
 4009188:	00841d16 	blt	zero,r2,400a200 <_dtoa_r+0x15f4>
 400918c:	800d883a 	mov	r6,r16
 4009190:	880f883a 	mov	r7,r17
 4009194:	0009883a 	mov	r4,zero
 4009198:	014ffc34 	movhi	r5,16368
 400919c:	40056080 	call	4005608 <__subdf3>
 40091a0:	d9401217 	ldw	r5,72(sp)
 40091a4:	100d883a 	mov	r6,r2
 40091a8:	180f883a 	mov	r7,r3
 40091ac:	a809883a 	mov	r4,r21
 40091b0:	4004bcc0 	call	4004bcc <__gedf2>
 40091b4:	db001617 	ldw	r12,88(sp)
 40091b8:	00840e16 	blt	zero,r2,400a1f4 <_dtoa_r+0x15e8>
 40091bc:	00800044 	movi	r2,1
 40091c0:	13006b0e 	bge	r2,r12,4009370 <_dtoa_r+0x764>
 40091c4:	d9000717 	ldw	r4,28(sp)
 40091c8:	dd800f15 	stw	r22,60(sp)
 40091cc:	dcc01015 	stw	r19,64(sp)
 40091d0:	2319883a 	add	r12,r4,r12
 40091d4:	dcc01217 	ldw	r19,72(sp)
 40091d8:	602d883a 	mov	r22,r12
 40091dc:	dc801215 	stw	r18,72(sp)
 40091e0:	b825883a 	mov	r18,r23
 40091e4:	00000906 	br	400920c <_dtoa_r+0x600>
 40091e8:	40056080 	call	4005608 <__subdf3>
 40091ec:	a80d883a 	mov	r6,r21
 40091f0:	980f883a 	mov	r7,r19
 40091f4:	1009883a 	mov	r4,r2
 40091f8:	180b883a 	mov	r5,r3
 40091fc:	4004ca80 	call	4004ca8 <__ledf2>
 4009200:	1003e816 	blt	r2,zero,400a1a4 <_dtoa_r+0x1598>
 4009204:	b825883a 	mov	r18,r23
 4009208:	bd83e926 	beq	r23,r22,400a1b0 <_dtoa_r+0x15a4>
 400920c:	a809883a 	mov	r4,r21
 4009210:	980b883a 	mov	r5,r19
 4009214:	000d883a 	mov	r6,zero
 4009218:	01d00934 	movhi	r7,16420
 400921c:	4004d9c0 	call	4004d9c <__muldf3>
 4009220:	000d883a 	mov	r6,zero
 4009224:	01d00934 	movhi	r7,16420
 4009228:	8009883a 	mov	r4,r16
 400922c:	880b883a 	mov	r5,r17
 4009230:	102b883a 	mov	r21,r2
 4009234:	1827883a 	mov	r19,r3
 4009238:	4004d9c0 	call	4004d9c <__muldf3>
 400923c:	180b883a 	mov	r5,r3
 4009240:	1009883a 	mov	r4,r2
 4009244:	1821883a 	mov	r16,r3
 4009248:	1023883a 	mov	r17,r2
 400924c:	4005f040 	call	4005f04 <__fixdfsi>
 4009250:	1009883a 	mov	r4,r2
 4009254:	1029883a 	mov	r20,r2
 4009258:	4005f840 	call	4005f84 <__floatsidf>
 400925c:	8809883a 	mov	r4,r17
 4009260:	800b883a 	mov	r5,r16
 4009264:	100d883a 	mov	r6,r2
 4009268:	180f883a 	mov	r7,r3
 400926c:	40056080 	call	4005608 <__subdf3>
 4009270:	a5000c04 	addi	r20,r20,48
 4009274:	a80d883a 	mov	r6,r21
 4009278:	980f883a 	mov	r7,r19
 400927c:	1009883a 	mov	r4,r2
 4009280:	180b883a 	mov	r5,r3
 4009284:	95000005 	stb	r20,0(r18)
 4009288:	1021883a 	mov	r16,r2
 400928c:	1823883a 	mov	r17,r3
 4009290:	4004ca80 	call	4004ca8 <__ledf2>
 4009294:	bdc00044 	addi	r23,r23,1
 4009298:	800d883a 	mov	r6,r16
 400929c:	880f883a 	mov	r7,r17
 40092a0:	0009883a 	mov	r4,zero
 40092a4:	014ffc34 	movhi	r5,16368
 40092a8:	103fcf0e 	bge	r2,zero,40091e8 <__alt_data_end+0xfc0091e8>
 40092ac:	d8c01317 	ldw	r3,76(sp)
 40092b0:	d8c00515 	stw	r3,20(sp)
 40092b4:	d9400917 	ldw	r5,36(sp)
 40092b8:	e009883a 	mov	r4,fp
 40092bc:	400ad080 	call	400ad08 <_Bfree>
 40092c0:	d9000517 	ldw	r4,20(sp)
 40092c4:	d9802317 	ldw	r6,140(sp)
 40092c8:	d9c02517 	ldw	r7,148(sp)
 40092cc:	b8000005 	stb	zero,0(r23)
 40092d0:	20800044 	addi	r2,r4,1
 40092d4:	30800015 	stw	r2,0(r6)
 40092d8:	3802aa26 	beq	r7,zero,4009d84 <_dtoa_r+0x1178>
 40092dc:	3dc00015 	stw	r23,0(r7)
 40092e0:	d8800717 	ldw	r2,28(sp)
 40092e4:	003e7906 	br	4008ccc <__alt_data_end+0xfc008ccc>
 40092e8:	00800434 	movhi	r2,16
 40092ec:	10bfffc4 	addi	r2,r2,-1
 40092f0:	88a2703a 	and	r17,r17,r2
 40092f4:	883e851e 	bne	r17,zero,4008d0c <__alt_data_end+0xfc008d0c>
 40092f8:	00810074 	movhi	r2,1025
 40092fc:	1087d204 	addi	r2,r2,8008
 4009300:	003e8406 	br	4008d14 <__alt_data_end+0xfc008d14>
 4009304:	10c00204 	addi	r3,r2,8
 4009308:	003e8706 	br	4008d28 <__alt_data_end+0xfc008d28>
 400930c:	01400434 	movhi	r5,16
 4009310:	297fffc4 	addi	r5,r5,-1
 4009314:	994a703a 	and	r5,r19,r5
 4009318:	9009883a 	mov	r4,r18
 400931c:	843f0044 	addi	r16,r16,-1023
 4009320:	294ffc34 	orhi	r5,r5,16368
 4009324:	dd800217 	ldw	r22,8(sp)
 4009328:	d8001115 	stw	zero,68(sp)
 400932c:	003ea506 	br	4008dc4 <__alt_data_end+0xfc008dc4>
 4009330:	00810074 	movhi	r2,1025
 4009334:	1087c904 	addi	r2,r2,7972
 4009338:	003e6406 	br	4008ccc <__alt_data_end+0xfc008ccc>
 400933c:	e0001115 	stw	zero,68(fp)
 4009340:	000b883a 	mov	r5,zero
 4009344:	e009883a 	mov	r4,fp
 4009348:	400ac600 	call	400ac60 <_Balloc>
 400934c:	01bfffc4 	movi	r6,-1
 4009350:	01c00044 	movi	r7,1
 4009354:	d8800715 	stw	r2,28(sp)
 4009358:	d9800c15 	stw	r6,48(sp)
 400935c:	e0801015 	stw	r2,64(fp)
 4009360:	d8000315 	stw	zero,12(sp)
 4009364:	d9c00b15 	stw	r7,44(sp)
 4009368:	d9800615 	stw	r6,24(sp)
 400936c:	d8002215 	stw	zero,136(sp)
 4009370:	d8800117 	ldw	r2,4(sp)
 4009374:	10008916 	blt	r2,zero,400959c <_dtoa_r+0x990>
 4009378:	d9000517 	ldw	r4,20(sp)
 400937c:	00c00384 	movi	r3,14
 4009380:	19008616 	blt	r3,r4,400959c <_dtoa_r+0x990>
 4009384:	200490fa 	slli	r2,r4,3
 4009388:	00c10074 	movhi	r3,1025
 400938c:	d9802217 	ldw	r6,136(sp)
 4009390:	18c7f104 	addi	r3,r3,8132
 4009394:	1885883a 	add	r2,r3,r2
 4009398:	14000017 	ldw	r16,0(r2)
 400939c:	14400117 	ldw	r17,4(r2)
 40093a0:	30016316 	blt	r6,zero,4009930 <_dtoa_r+0xd24>
 40093a4:	800d883a 	mov	r6,r16
 40093a8:	880f883a 	mov	r7,r17
 40093ac:	9009883a 	mov	r4,r18
 40093b0:	980b883a 	mov	r5,r19
 40093b4:	40041fc0 	call	40041fc <__divdf3>
 40093b8:	180b883a 	mov	r5,r3
 40093bc:	1009883a 	mov	r4,r2
 40093c0:	4005f040 	call	4005f04 <__fixdfsi>
 40093c4:	1009883a 	mov	r4,r2
 40093c8:	102b883a 	mov	r21,r2
 40093cc:	4005f840 	call	4005f84 <__floatsidf>
 40093d0:	800d883a 	mov	r6,r16
 40093d4:	880f883a 	mov	r7,r17
 40093d8:	1009883a 	mov	r4,r2
 40093dc:	180b883a 	mov	r5,r3
 40093e0:	4004d9c0 	call	4004d9c <__muldf3>
 40093e4:	100d883a 	mov	r6,r2
 40093e8:	180f883a 	mov	r7,r3
 40093ec:	9009883a 	mov	r4,r18
 40093f0:	980b883a 	mov	r5,r19
 40093f4:	40056080 	call	4005608 <__subdf3>
 40093f8:	d9c00717 	ldw	r7,28(sp)
 40093fc:	1009883a 	mov	r4,r2
 4009400:	a8800c04 	addi	r2,r21,48
 4009404:	38800005 	stb	r2,0(r7)
 4009408:	3dc00044 	addi	r23,r7,1
 400940c:	d9c00617 	ldw	r7,24(sp)
 4009410:	01800044 	movi	r6,1
 4009414:	180b883a 	mov	r5,r3
 4009418:	2005883a 	mov	r2,r4
 400941c:	39803826 	beq	r7,r6,4009500 <_dtoa_r+0x8f4>
 4009420:	000d883a 	mov	r6,zero
 4009424:	01d00934 	movhi	r7,16420
 4009428:	4004d9c0 	call	4004d9c <__muldf3>
 400942c:	000d883a 	mov	r6,zero
 4009430:	000f883a 	mov	r7,zero
 4009434:	1009883a 	mov	r4,r2
 4009438:	180b883a 	mov	r5,r3
 400943c:	1025883a 	mov	r18,r2
 4009440:	1827883a 	mov	r19,r3
 4009444:	400ed7c0 	call	400ed7c <__eqdf2>
 4009448:	103f9a26 	beq	r2,zero,40092b4 <__alt_data_end+0xfc0092b4>
 400944c:	d9c00617 	ldw	r7,24(sp)
 4009450:	d8c00717 	ldw	r3,28(sp)
 4009454:	b829883a 	mov	r20,r23
 4009458:	38bfffc4 	addi	r2,r7,-1
 400945c:	18ad883a 	add	r22,r3,r2
 4009460:	00000a06 	br	400948c <_dtoa_r+0x880>
 4009464:	4004d9c0 	call	4004d9c <__muldf3>
 4009468:	000d883a 	mov	r6,zero
 400946c:	000f883a 	mov	r7,zero
 4009470:	1009883a 	mov	r4,r2
 4009474:	180b883a 	mov	r5,r3
 4009478:	1025883a 	mov	r18,r2
 400947c:	1827883a 	mov	r19,r3
 4009480:	b829883a 	mov	r20,r23
 4009484:	400ed7c0 	call	400ed7c <__eqdf2>
 4009488:	103f8a26 	beq	r2,zero,40092b4 <__alt_data_end+0xfc0092b4>
 400948c:	800d883a 	mov	r6,r16
 4009490:	880f883a 	mov	r7,r17
 4009494:	9009883a 	mov	r4,r18
 4009498:	980b883a 	mov	r5,r19
 400949c:	40041fc0 	call	40041fc <__divdf3>
 40094a0:	180b883a 	mov	r5,r3
 40094a4:	1009883a 	mov	r4,r2
 40094a8:	4005f040 	call	4005f04 <__fixdfsi>
 40094ac:	1009883a 	mov	r4,r2
 40094b0:	102b883a 	mov	r21,r2
 40094b4:	4005f840 	call	4005f84 <__floatsidf>
 40094b8:	800d883a 	mov	r6,r16
 40094bc:	880f883a 	mov	r7,r17
 40094c0:	1009883a 	mov	r4,r2
 40094c4:	180b883a 	mov	r5,r3
 40094c8:	4004d9c0 	call	4004d9c <__muldf3>
 40094cc:	100d883a 	mov	r6,r2
 40094d0:	180f883a 	mov	r7,r3
 40094d4:	9009883a 	mov	r4,r18
 40094d8:	980b883a 	mov	r5,r19
 40094dc:	40056080 	call	4005608 <__subdf3>
 40094e0:	aa000c04 	addi	r8,r21,48
 40094e4:	a2000005 	stb	r8,0(r20)
 40094e8:	000d883a 	mov	r6,zero
 40094ec:	01d00934 	movhi	r7,16420
 40094f0:	1009883a 	mov	r4,r2
 40094f4:	180b883a 	mov	r5,r3
 40094f8:	a5c00044 	addi	r23,r20,1
 40094fc:	b53fd91e 	bne	r22,r20,4009464 <__alt_data_end+0xfc009464>
 4009500:	100d883a 	mov	r6,r2
 4009504:	180f883a 	mov	r7,r3
 4009508:	1009883a 	mov	r4,r2
 400950c:	180b883a 	mov	r5,r3
 4009510:	40039500 	call	4003950 <__adddf3>
 4009514:	100d883a 	mov	r6,r2
 4009518:	180f883a 	mov	r7,r3
 400951c:	8009883a 	mov	r4,r16
 4009520:	880b883a 	mov	r5,r17
 4009524:	1027883a 	mov	r19,r2
 4009528:	1825883a 	mov	r18,r3
 400952c:	4004ca80 	call	4004ca8 <__ledf2>
 4009530:	10000816 	blt	r2,zero,4009554 <_dtoa_r+0x948>
 4009534:	980d883a 	mov	r6,r19
 4009538:	900f883a 	mov	r7,r18
 400953c:	8009883a 	mov	r4,r16
 4009540:	880b883a 	mov	r5,r17
 4009544:	400ed7c0 	call	400ed7c <__eqdf2>
 4009548:	103f5a1e 	bne	r2,zero,40092b4 <__alt_data_end+0xfc0092b4>
 400954c:	ad40004c 	andi	r21,r21,1
 4009550:	a83f5826 	beq	r21,zero,40092b4 <__alt_data_end+0xfc0092b4>
 4009554:	bd3fffc3 	ldbu	r20,-1(r23)
 4009558:	b8bfffc4 	addi	r2,r23,-1
 400955c:	1007883a 	mov	r3,r2
 4009560:	01400e44 	movi	r5,57
 4009564:	d9800717 	ldw	r6,28(sp)
 4009568:	00000506 	br	4009580 <_dtoa_r+0x974>
 400956c:	18ffffc4 	addi	r3,r3,-1
 4009570:	11824726 	beq	r2,r6,4009e90 <_dtoa_r+0x1284>
 4009574:	1d000003 	ldbu	r20,0(r3)
 4009578:	102f883a 	mov	r23,r2
 400957c:	10bfffc4 	addi	r2,r2,-1
 4009580:	a1003fcc 	andi	r4,r20,255
 4009584:	2100201c 	xori	r4,r4,128
 4009588:	213fe004 	addi	r4,r4,-128
 400958c:	217ff726 	beq	r4,r5,400956c <__alt_data_end+0xfc00956c>
 4009590:	a2000044 	addi	r8,r20,1
 4009594:	12000005 	stb	r8,0(r2)
 4009598:	003f4606 	br	40092b4 <__alt_data_end+0xfc0092b4>
 400959c:	d9000b17 	ldw	r4,44(sp)
 40095a0:	2000c826 	beq	r4,zero,40098c4 <_dtoa_r+0xcb8>
 40095a4:	d9800317 	ldw	r6,12(sp)
 40095a8:	00c00044 	movi	r3,1
 40095ac:	1980f90e 	bge	r3,r6,4009994 <_dtoa_r+0xd88>
 40095b0:	d8800617 	ldw	r2,24(sp)
 40095b4:	d8c00a17 	ldw	r3,40(sp)
 40095b8:	157fffc4 	addi	r21,r2,-1
 40095bc:	1d41f316 	blt	r3,r21,4009d8c <_dtoa_r+0x1180>
 40095c0:	1d6bc83a 	sub	r21,r3,r21
 40095c4:	d9c00617 	ldw	r7,24(sp)
 40095c8:	3802aa16 	blt	r7,zero,400a074 <_dtoa_r+0x1468>
 40095cc:	dd000817 	ldw	r20,32(sp)
 40095d0:	d8800617 	ldw	r2,24(sp)
 40095d4:	d8c00817 	ldw	r3,32(sp)
 40095d8:	01400044 	movi	r5,1
 40095dc:	e009883a 	mov	r4,fp
 40095e0:	1887883a 	add	r3,r3,r2
 40095e4:	d8c00815 	stw	r3,32(sp)
 40095e8:	b0ad883a 	add	r22,r22,r2
 40095ec:	400b0940 	call	400b094 <__i2b>
 40095f0:	1023883a 	mov	r17,r2
 40095f4:	a0000826 	beq	r20,zero,4009618 <_dtoa_r+0xa0c>
 40095f8:	0580070e 	bge	zero,r22,4009618 <_dtoa_r+0xa0c>
 40095fc:	a005883a 	mov	r2,r20
 4009600:	b500b916 	blt	r22,r20,40098e8 <_dtoa_r+0xcdc>
 4009604:	d9000817 	ldw	r4,32(sp)
 4009608:	a0a9c83a 	sub	r20,r20,r2
 400960c:	b0adc83a 	sub	r22,r22,r2
 4009610:	2089c83a 	sub	r4,r4,r2
 4009614:	d9000815 	stw	r4,32(sp)
 4009618:	d9800a17 	ldw	r6,40(sp)
 400961c:	0181810e 	bge	zero,r6,4009c24 <_dtoa_r+0x1018>
 4009620:	d9c00b17 	ldw	r7,44(sp)
 4009624:	3800b326 	beq	r7,zero,40098f4 <_dtoa_r+0xce8>
 4009628:	a800b226 	beq	r21,zero,40098f4 <_dtoa_r+0xce8>
 400962c:	880b883a 	mov	r5,r17
 4009630:	a80d883a 	mov	r6,r21
 4009634:	e009883a 	mov	r4,fp
 4009638:	400b35c0 	call	400b35c <__pow5mult>
 400963c:	d9800917 	ldw	r6,36(sp)
 4009640:	100b883a 	mov	r5,r2
 4009644:	e009883a 	mov	r4,fp
 4009648:	1023883a 	mov	r17,r2
 400964c:	400b0d00 	call	400b0d0 <__multiply>
 4009650:	1021883a 	mov	r16,r2
 4009654:	d8800a17 	ldw	r2,40(sp)
 4009658:	d9400917 	ldw	r5,36(sp)
 400965c:	e009883a 	mov	r4,fp
 4009660:	1545c83a 	sub	r2,r2,r21
 4009664:	d8800a15 	stw	r2,40(sp)
 4009668:	400ad080 	call	400ad08 <_Bfree>
 400966c:	d8c00a17 	ldw	r3,40(sp)
 4009670:	18009f1e 	bne	r3,zero,40098f0 <_dtoa_r+0xce4>
 4009674:	05c00044 	movi	r23,1
 4009678:	e009883a 	mov	r4,fp
 400967c:	b80b883a 	mov	r5,r23
 4009680:	400b0940 	call	400b094 <__i2b>
 4009684:	d9000d17 	ldw	r4,52(sp)
 4009688:	102b883a 	mov	r21,r2
 400968c:	2000ce26 	beq	r4,zero,40099c8 <_dtoa_r+0xdbc>
 4009690:	200d883a 	mov	r6,r4
 4009694:	100b883a 	mov	r5,r2
 4009698:	e009883a 	mov	r4,fp
 400969c:	400b35c0 	call	400b35c <__pow5mult>
 40096a0:	d9800317 	ldw	r6,12(sp)
 40096a4:	102b883a 	mov	r21,r2
 40096a8:	b981810e 	bge	r23,r6,4009cb0 <_dtoa_r+0x10a4>
 40096ac:	0027883a 	mov	r19,zero
 40096b0:	a8800417 	ldw	r2,16(r21)
 40096b4:	05c00804 	movi	r23,32
 40096b8:	10800104 	addi	r2,r2,4
 40096bc:	1085883a 	add	r2,r2,r2
 40096c0:	1085883a 	add	r2,r2,r2
 40096c4:	a885883a 	add	r2,r21,r2
 40096c8:	11000017 	ldw	r4,0(r2)
 40096cc:	400af7c0 	call	400af7c <__hi0bits>
 40096d0:	b885c83a 	sub	r2,r23,r2
 40096d4:	1585883a 	add	r2,r2,r22
 40096d8:	108007cc 	andi	r2,r2,31
 40096dc:	1000b326 	beq	r2,zero,40099ac <_dtoa_r+0xda0>
 40096e0:	00c00804 	movi	r3,32
 40096e4:	1887c83a 	sub	r3,r3,r2
 40096e8:	01000104 	movi	r4,4
 40096ec:	20c2cd0e 	bge	r4,r3,400a224 <_dtoa_r+0x1618>
 40096f0:	00c00704 	movi	r3,28
 40096f4:	1885c83a 	sub	r2,r3,r2
 40096f8:	d8c00817 	ldw	r3,32(sp)
 40096fc:	a0a9883a 	add	r20,r20,r2
 4009700:	b0ad883a 	add	r22,r22,r2
 4009704:	1887883a 	add	r3,r3,r2
 4009708:	d8c00815 	stw	r3,32(sp)
 400970c:	d9800817 	ldw	r6,32(sp)
 4009710:	0180040e 	bge	zero,r6,4009724 <_dtoa_r+0xb18>
 4009714:	800b883a 	mov	r5,r16
 4009718:	e009883a 	mov	r4,fp
 400971c:	400b49c0 	call	400b49c <__lshift>
 4009720:	1021883a 	mov	r16,r2
 4009724:	0580050e 	bge	zero,r22,400973c <_dtoa_r+0xb30>
 4009728:	a80b883a 	mov	r5,r21
 400972c:	b00d883a 	mov	r6,r22
 4009730:	e009883a 	mov	r4,fp
 4009734:	400b49c0 	call	400b49c <__lshift>
 4009738:	102b883a 	mov	r21,r2
 400973c:	d9c00e17 	ldw	r7,56(sp)
 4009740:	3801211e 	bne	r7,zero,4009bc8 <_dtoa_r+0xfbc>
 4009744:	d9800617 	ldw	r6,24(sp)
 4009748:	0181380e 	bge	zero,r6,4009c2c <_dtoa_r+0x1020>
 400974c:	d8c00b17 	ldw	r3,44(sp)
 4009750:	1800ab1e 	bne	r3,zero,4009a00 <_dtoa_r+0xdf4>
 4009754:	dc800717 	ldw	r18,28(sp)
 4009758:	dcc00617 	ldw	r19,24(sp)
 400975c:	9029883a 	mov	r20,r18
 4009760:	00000206 	br	400976c <_dtoa_r+0xb60>
 4009764:	400ad300 	call	400ad30 <__multadd>
 4009768:	1021883a 	mov	r16,r2
 400976c:	a80b883a 	mov	r5,r21
 4009770:	8009883a 	mov	r4,r16
 4009774:	40089e40 	call	40089e4 <quorem>
 4009778:	10800c04 	addi	r2,r2,48
 400977c:	90800005 	stb	r2,0(r18)
 4009780:	94800044 	addi	r18,r18,1
 4009784:	9507c83a 	sub	r3,r18,r20
 4009788:	000f883a 	mov	r7,zero
 400978c:	01800284 	movi	r6,10
 4009790:	800b883a 	mov	r5,r16
 4009794:	e009883a 	mov	r4,fp
 4009798:	1cfff216 	blt	r3,r19,4009764 <__alt_data_end+0xfc009764>
 400979c:	1011883a 	mov	r8,r2
 40097a0:	d8800617 	ldw	r2,24(sp)
 40097a4:	0082370e 	bge	zero,r2,400a084 <_dtoa_r+0x1478>
 40097a8:	d9000717 	ldw	r4,28(sp)
 40097ac:	0025883a 	mov	r18,zero
 40097b0:	20af883a 	add	r23,r4,r2
 40097b4:	01800044 	movi	r6,1
 40097b8:	800b883a 	mov	r5,r16
 40097bc:	e009883a 	mov	r4,fp
 40097c0:	da001715 	stw	r8,92(sp)
 40097c4:	400b49c0 	call	400b49c <__lshift>
 40097c8:	a80b883a 	mov	r5,r21
 40097cc:	1009883a 	mov	r4,r2
 40097d0:	d8800915 	stw	r2,36(sp)
 40097d4:	400b5e40 	call	400b5e4 <__mcmp>
 40097d8:	da001717 	ldw	r8,92(sp)
 40097dc:	0081800e 	bge	zero,r2,4009de0 <_dtoa_r+0x11d4>
 40097e0:	b93fffc3 	ldbu	r4,-1(r23)
 40097e4:	b8bfffc4 	addi	r2,r23,-1
 40097e8:	1007883a 	mov	r3,r2
 40097ec:	01800e44 	movi	r6,57
 40097f0:	d9c00717 	ldw	r7,28(sp)
 40097f4:	00000506 	br	400980c <_dtoa_r+0xc00>
 40097f8:	18ffffc4 	addi	r3,r3,-1
 40097fc:	11c12326 	beq	r2,r7,4009c8c <_dtoa_r+0x1080>
 4009800:	19000003 	ldbu	r4,0(r3)
 4009804:	102f883a 	mov	r23,r2
 4009808:	10bfffc4 	addi	r2,r2,-1
 400980c:	21403fcc 	andi	r5,r4,255
 4009810:	2940201c 	xori	r5,r5,128
 4009814:	297fe004 	addi	r5,r5,-128
 4009818:	29bff726 	beq	r5,r6,40097f8 <__alt_data_end+0xfc0097f8>
 400981c:	21000044 	addi	r4,r4,1
 4009820:	11000005 	stb	r4,0(r2)
 4009824:	a80b883a 	mov	r5,r21
 4009828:	e009883a 	mov	r4,fp
 400982c:	400ad080 	call	400ad08 <_Bfree>
 4009830:	883ea026 	beq	r17,zero,40092b4 <__alt_data_end+0xfc0092b4>
 4009834:	90000426 	beq	r18,zero,4009848 <_dtoa_r+0xc3c>
 4009838:	94400326 	beq	r18,r17,4009848 <_dtoa_r+0xc3c>
 400983c:	900b883a 	mov	r5,r18
 4009840:	e009883a 	mov	r4,fp
 4009844:	400ad080 	call	400ad08 <_Bfree>
 4009848:	880b883a 	mov	r5,r17
 400984c:	e009883a 	mov	r4,fp
 4009850:	400ad080 	call	400ad08 <_Bfree>
 4009854:	003e9706 	br	40092b4 <__alt_data_end+0xfc0092b4>
 4009858:	01800044 	movi	r6,1
 400985c:	d9800e15 	stw	r6,56(sp)
 4009860:	003d9606 	br	4008ebc <__alt_data_end+0xfc008ebc>
 4009864:	d8800817 	ldw	r2,32(sp)
 4009868:	d8c00517 	ldw	r3,20(sp)
 400986c:	d8000d15 	stw	zero,52(sp)
 4009870:	10c5c83a 	sub	r2,r2,r3
 4009874:	00c9c83a 	sub	r4,zero,r3
 4009878:	d8800815 	stw	r2,32(sp)
 400987c:	d9000a15 	stw	r4,40(sp)
 4009880:	003d9706 	br	4008ee0 <__alt_data_end+0xfc008ee0>
 4009884:	05adc83a 	sub	r22,zero,r22
 4009888:	dd800815 	stw	r22,32(sp)
 400988c:	002d883a 	mov	r22,zero
 4009890:	003d8e06 	br	4008ecc <__alt_data_end+0xfc008ecc>
 4009894:	d9000517 	ldw	r4,20(sp)
 4009898:	4005f840 	call	4005f84 <__floatsidf>
 400989c:	100d883a 	mov	r6,r2
 40098a0:	180f883a 	mov	r7,r3
 40098a4:	a009883a 	mov	r4,r20
 40098a8:	880b883a 	mov	r5,r17
 40098ac:	400ed7c0 	call	400ed7c <__eqdf2>
 40098b0:	103d7126 	beq	r2,zero,4008e78 <__alt_data_end+0xfc008e78>
 40098b4:	d9c00517 	ldw	r7,20(sp)
 40098b8:	39ffffc4 	addi	r7,r7,-1
 40098bc:	d9c00515 	stw	r7,20(sp)
 40098c0:	003d6d06 	br	4008e78 <__alt_data_end+0xfc008e78>
 40098c4:	dd400a17 	ldw	r21,40(sp)
 40098c8:	dd000817 	ldw	r20,32(sp)
 40098cc:	0023883a 	mov	r17,zero
 40098d0:	003f4806 	br	40095f4 <__alt_data_end+0xfc0095f4>
 40098d4:	10e3c83a 	sub	r17,r2,r3
 40098d8:	9448983a 	sll	r4,r18,r17
 40098dc:	003d3206 	br	4008da8 <__alt_data_end+0xfc008da8>
 40098e0:	d8000e15 	stw	zero,56(sp)
 40098e4:	003d7506 	br	4008ebc <__alt_data_end+0xfc008ebc>
 40098e8:	b005883a 	mov	r2,r22
 40098ec:	003f4506 	br	4009604 <__alt_data_end+0xfc009604>
 40098f0:	dc000915 	stw	r16,36(sp)
 40098f4:	d9800a17 	ldw	r6,40(sp)
 40098f8:	d9400917 	ldw	r5,36(sp)
 40098fc:	e009883a 	mov	r4,fp
 4009900:	400b35c0 	call	400b35c <__pow5mult>
 4009904:	1021883a 	mov	r16,r2
 4009908:	003f5a06 	br	4009674 <__alt_data_end+0xfc009674>
 400990c:	01c00044 	movi	r7,1
 4009910:	d9c00b15 	stw	r7,44(sp)
 4009914:	d8802217 	ldw	r2,136(sp)
 4009918:	0081280e 	bge	zero,r2,4009dbc <_dtoa_r+0x11b0>
 400991c:	100d883a 	mov	r6,r2
 4009920:	1021883a 	mov	r16,r2
 4009924:	d8800c15 	stw	r2,48(sp)
 4009928:	d8800615 	stw	r2,24(sp)
 400992c:	003d8806 	br	4008f50 <__alt_data_end+0xfc008f50>
 4009930:	d8800617 	ldw	r2,24(sp)
 4009934:	00be9b16 	blt	zero,r2,40093a4 <__alt_data_end+0xfc0093a4>
 4009938:	10010f1e 	bne	r2,zero,4009d78 <_dtoa_r+0x116c>
 400993c:	880b883a 	mov	r5,r17
 4009940:	000d883a 	mov	r6,zero
 4009944:	01d00534 	movhi	r7,16404
 4009948:	8009883a 	mov	r4,r16
 400994c:	4004d9c0 	call	4004d9c <__muldf3>
 4009950:	900d883a 	mov	r6,r18
 4009954:	980f883a 	mov	r7,r19
 4009958:	1009883a 	mov	r4,r2
 400995c:	180b883a 	mov	r5,r3
 4009960:	4004bcc0 	call	4004bcc <__gedf2>
 4009964:	002b883a 	mov	r21,zero
 4009968:	0023883a 	mov	r17,zero
 400996c:	1000bf16 	blt	r2,zero,4009c6c <_dtoa_r+0x1060>
 4009970:	d9802217 	ldw	r6,136(sp)
 4009974:	ddc00717 	ldw	r23,28(sp)
 4009978:	018c303a 	nor	r6,zero,r6
 400997c:	d9800515 	stw	r6,20(sp)
 4009980:	a80b883a 	mov	r5,r21
 4009984:	e009883a 	mov	r4,fp
 4009988:	400ad080 	call	400ad08 <_Bfree>
 400998c:	883e4926 	beq	r17,zero,40092b4 <__alt_data_end+0xfc0092b4>
 4009990:	003fad06 	br	4009848 <__alt_data_end+0xfc009848>
 4009994:	d9c01117 	ldw	r7,68(sp)
 4009998:	3801bc26 	beq	r7,zero,400a08c <_dtoa_r+0x1480>
 400999c:	10810cc4 	addi	r2,r2,1075
 40099a0:	dd400a17 	ldw	r21,40(sp)
 40099a4:	dd000817 	ldw	r20,32(sp)
 40099a8:	003f0a06 	br	40095d4 <__alt_data_end+0xfc0095d4>
 40099ac:	00800704 	movi	r2,28
 40099b0:	d9000817 	ldw	r4,32(sp)
 40099b4:	a0a9883a 	add	r20,r20,r2
 40099b8:	b0ad883a 	add	r22,r22,r2
 40099bc:	2089883a 	add	r4,r4,r2
 40099c0:	d9000815 	stw	r4,32(sp)
 40099c4:	003f5106 	br	400970c <__alt_data_end+0xfc00970c>
 40099c8:	d8c00317 	ldw	r3,12(sp)
 40099cc:	b8c1fc0e 	bge	r23,r3,400a1c0 <_dtoa_r+0x15b4>
 40099d0:	0027883a 	mov	r19,zero
 40099d4:	b805883a 	mov	r2,r23
 40099d8:	003f3e06 	br	40096d4 <__alt_data_end+0xfc0096d4>
 40099dc:	880b883a 	mov	r5,r17
 40099e0:	e009883a 	mov	r4,fp
 40099e4:	000f883a 	mov	r7,zero
 40099e8:	01800284 	movi	r6,10
 40099ec:	400ad300 	call	400ad30 <__multadd>
 40099f0:	d9000c17 	ldw	r4,48(sp)
 40099f4:	1023883a 	mov	r17,r2
 40099f8:	0102040e 	bge	zero,r4,400a20c <_dtoa_r+0x1600>
 40099fc:	d9000615 	stw	r4,24(sp)
 4009a00:	0500050e 	bge	zero,r20,4009a18 <_dtoa_r+0xe0c>
 4009a04:	880b883a 	mov	r5,r17
 4009a08:	a00d883a 	mov	r6,r20
 4009a0c:	e009883a 	mov	r4,fp
 4009a10:	400b49c0 	call	400b49c <__lshift>
 4009a14:	1023883a 	mov	r17,r2
 4009a18:	9801241e 	bne	r19,zero,4009eac <_dtoa_r+0x12a0>
 4009a1c:	8829883a 	mov	r20,r17
 4009a20:	d9000617 	ldw	r4,24(sp)
 4009a24:	dcc00717 	ldw	r19,28(sp)
 4009a28:	9480004c 	andi	r18,r18,1
 4009a2c:	20bfffc4 	addi	r2,r4,-1
 4009a30:	9885883a 	add	r2,r19,r2
 4009a34:	d8800415 	stw	r2,16(sp)
 4009a38:	dc800615 	stw	r18,24(sp)
 4009a3c:	a80b883a 	mov	r5,r21
 4009a40:	8009883a 	mov	r4,r16
 4009a44:	40089e40 	call	40089e4 <quorem>
 4009a48:	880b883a 	mov	r5,r17
 4009a4c:	8009883a 	mov	r4,r16
 4009a50:	102f883a 	mov	r23,r2
 4009a54:	400b5e40 	call	400b5e4 <__mcmp>
 4009a58:	a80b883a 	mov	r5,r21
 4009a5c:	a00d883a 	mov	r6,r20
 4009a60:	e009883a 	mov	r4,fp
 4009a64:	102d883a 	mov	r22,r2
 4009a68:	400b6440 	call	400b644 <__mdiff>
 4009a6c:	1007883a 	mov	r3,r2
 4009a70:	10800317 	ldw	r2,12(r2)
 4009a74:	bc800c04 	addi	r18,r23,48
 4009a78:	180b883a 	mov	r5,r3
 4009a7c:	10004e1e 	bne	r2,zero,4009bb8 <_dtoa_r+0xfac>
 4009a80:	8009883a 	mov	r4,r16
 4009a84:	d8c01615 	stw	r3,88(sp)
 4009a88:	400b5e40 	call	400b5e4 <__mcmp>
 4009a8c:	d8c01617 	ldw	r3,88(sp)
 4009a90:	e009883a 	mov	r4,fp
 4009a94:	d8801615 	stw	r2,88(sp)
 4009a98:	180b883a 	mov	r5,r3
 4009a9c:	400ad080 	call	400ad08 <_Bfree>
 4009aa0:	d8801617 	ldw	r2,88(sp)
 4009aa4:	1000041e 	bne	r2,zero,4009ab8 <_dtoa_r+0xeac>
 4009aa8:	d9800317 	ldw	r6,12(sp)
 4009aac:	3000021e 	bne	r6,zero,4009ab8 <_dtoa_r+0xeac>
 4009ab0:	d8c00617 	ldw	r3,24(sp)
 4009ab4:	18003726 	beq	r3,zero,4009b94 <_dtoa_r+0xf88>
 4009ab8:	b0002016 	blt	r22,zero,4009b3c <_dtoa_r+0xf30>
 4009abc:	b000041e 	bne	r22,zero,4009ad0 <_dtoa_r+0xec4>
 4009ac0:	d9000317 	ldw	r4,12(sp)
 4009ac4:	2000021e 	bne	r4,zero,4009ad0 <_dtoa_r+0xec4>
 4009ac8:	d8c00617 	ldw	r3,24(sp)
 4009acc:	18001b26 	beq	r3,zero,4009b3c <_dtoa_r+0xf30>
 4009ad0:	00810716 	blt	zero,r2,4009ef0 <_dtoa_r+0x12e4>
 4009ad4:	d8c00417 	ldw	r3,16(sp)
 4009ad8:	9d800044 	addi	r22,r19,1
 4009adc:	9c800005 	stb	r18,0(r19)
 4009ae0:	b02f883a 	mov	r23,r22
 4009ae4:	98c10626 	beq	r19,r3,4009f00 <_dtoa_r+0x12f4>
 4009ae8:	800b883a 	mov	r5,r16
 4009aec:	000f883a 	mov	r7,zero
 4009af0:	01800284 	movi	r6,10
 4009af4:	e009883a 	mov	r4,fp
 4009af8:	400ad300 	call	400ad30 <__multadd>
 4009afc:	1021883a 	mov	r16,r2
 4009b00:	000f883a 	mov	r7,zero
 4009b04:	01800284 	movi	r6,10
 4009b08:	880b883a 	mov	r5,r17
 4009b0c:	e009883a 	mov	r4,fp
 4009b10:	8d002526 	beq	r17,r20,4009ba8 <_dtoa_r+0xf9c>
 4009b14:	400ad300 	call	400ad30 <__multadd>
 4009b18:	a00b883a 	mov	r5,r20
 4009b1c:	000f883a 	mov	r7,zero
 4009b20:	01800284 	movi	r6,10
 4009b24:	e009883a 	mov	r4,fp
 4009b28:	1023883a 	mov	r17,r2
 4009b2c:	400ad300 	call	400ad30 <__multadd>
 4009b30:	1029883a 	mov	r20,r2
 4009b34:	b027883a 	mov	r19,r22
 4009b38:	003fc006 	br	4009a3c <__alt_data_end+0xfc009a3c>
 4009b3c:	9011883a 	mov	r8,r18
 4009b40:	00800e0e 	bge	zero,r2,4009b7c <_dtoa_r+0xf70>
 4009b44:	800b883a 	mov	r5,r16
 4009b48:	01800044 	movi	r6,1
 4009b4c:	e009883a 	mov	r4,fp
 4009b50:	da001715 	stw	r8,92(sp)
 4009b54:	400b49c0 	call	400b49c <__lshift>
 4009b58:	a80b883a 	mov	r5,r21
 4009b5c:	1009883a 	mov	r4,r2
 4009b60:	1021883a 	mov	r16,r2
 4009b64:	400b5e40 	call	400b5e4 <__mcmp>
 4009b68:	da001717 	ldw	r8,92(sp)
 4009b6c:	0081960e 	bge	zero,r2,400a1c8 <_dtoa_r+0x15bc>
 4009b70:	00800e44 	movi	r2,57
 4009b74:	40817026 	beq	r8,r2,400a138 <_dtoa_r+0x152c>
 4009b78:	ba000c44 	addi	r8,r23,49
 4009b7c:	8825883a 	mov	r18,r17
 4009b80:	9dc00044 	addi	r23,r19,1
 4009b84:	9a000005 	stb	r8,0(r19)
 4009b88:	a023883a 	mov	r17,r20
 4009b8c:	dc000915 	stw	r16,36(sp)
 4009b90:	003f2406 	br	4009824 <__alt_data_end+0xfc009824>
 4009b94:	00800e44 	movi	r2,57
 4009b98:	9011883a 	mov	r8,r18
 4009b9c:	90816626 	beq	r18,r2,400a138 <_dtoa_r+0x152c>
 4009ba0:	05bff516 	blt	zero,r22,4009b78 <__alt_data_end+0xfc009b78>
 4009ba4:	003ff506 	br	4009b7c <__alt_data_end+0xfc009b7c>
 4009ba8:	400ad300 	call	400ad30 <__multadd>
 4009bac:	1023883a 	mov	r17,r2
 4009bb0:	1029883a 	mov	r20,r2
 4009bb4:	003fdf06 	br	4009b34 <__alt_data_end+0xfc009b34>
 4009bb8:	e009883a 	mov	r4,fp
 4009bbc:	400ad080 	call	400ad08 <_Bfree>
 4009bc0:	00800044 	movi	r2,1
 4009bc4:	003fbc06 	br	4009ab8 <__alt_data_end+0xfc009ab8>
 4009bc8:	a80b883a 	mov	r5,r21
 4009bcc:	8009883a 	mov	r4,r16
 4009bd0:	400b5e40 	call	400b5e4 <__mcmp>
 4009bd4:	103edb0e 	bge	r2,zero,4009744 <__alt_data_end+0xfc009744>
 4009bd8:	800b883a 	mov	r5,r16
 4009bdc:	000f883a 	mov	r7,zero
 4009be0:	01800284 	movi	r6,10
 4009be4:	e009883a 	mov	r4,fp
 4009be8:	400ad300 	call	400ad30 <__multadd>
 4009bec:	1021883a 	mov	r16,r2
 4009bf0:	d8800517 	ldw	r2,20(sp)
 4009bf4:	d8c00b17 	ldw	r3,44(sp)
 4009bf8:	10bfffc4 	addi	r2,r2,-1
 4009bfc:	d8800515 	stw	r2,20(sp)
 4009c00:	183f761e 	bne	r3,zero,40099dc <__alt_data_end+0xfc0099dc>
 4009c04:	d9000c17 	ldw	r4,48(sp)
 4009c08:	0101730e 	bge	zero,r4,400a1d8 <_dtoa_r+0x15cc>
 4009c0c:	d9000615 	stw	r4,24(sp)
 4009c10:	003ed006 	br	4009754 <__alt_data_end+0xfc009754>
 4009c14:	00800084 	movi	r2,2
 4009c18:	3081861e 	bne	r6,r2,400a234 <_dtoa_r+0x1628>
 4009c1c:	d8000b15 	stw	zero,44(sp)
 4009c20:	003f3c06 	br	4009914 <__alt_data_end+0xfc009914>
 4009c24:	dc000917 	ldw	r16,36(sp)
 4009c28:	003e9206 	br	4009674 <__alt_data_end+0xfc009674>
 4009c2c:	d9c00317 	ldw	r7,12(sp)
 4009c30:	00800084 	movi	r2,2
 4009c34:	11fec50e 	bge	r2,r7,400974c <__alt_data_end+0xfc00974c>
 4009c38:	d9000617 	ldw	r4,24(sp)
 4009c3c:	20013c1e 	bne	r4,zero,400a130 <_dtoa_r+0x1524>
 4009c40:	a80b883a 	mov	r5,r21
 4009c44:	000f883a 	mov	r7,zero
 4009c48:	01800144 	movi	r6,5
 4009c4c:	e009883a 	mov	r4,fp
 4009c50:	400ad300 	call	400ad30 <__multadd>
 4009c54:	100b883a 	mov	r5,r2
 4009c58:	8009883a 	mov	r4,r16
 4009c5c:	102b883a 	mov	r21,r2
 4009c60:	400b5e40 	call	400b5e4 <__mcmp>
 4009c64:	dc000915 	stw	r16,36(sp)
 4009c68:	00bf410e 	bge	zero,r2,4009970 <__alt_data_end+0xfc009970>
 4009c6c:	d9c00717 	ldw	r7,28(sp)
 4009c70:	00800c44 	movi	r2,49
 4009c74:	38800005 	stb	r2,0(r7)
 4009c78:	d8800517 	ldw	r2,20(sp)
 4009c7c:	3dc00044 	addi	r23,r7,1
 4009c80:	10800044 	addi	r2,r2,1
 4009c84:	d8800515 	stw	r2,20(sp)
 4009c88:	003f3d06 	br	4009980 <__alt_data_end+0xfc009980>
 4009c8c:	d9800517 	ldw	r6,20(sp)
 4009c90:	d9c00717 	ldw	r7,28(sp)
 4009c94:	00800c44 	movi	r2,49
 4009c98:	31800044 	addi	r6,r6,1
 4009c9c:	d9800515 	stw	r6,20(sp)
 4009ca0:	38800005 	stb	r2,0(r7)
 4009ca4:	003edf06 	br	4009824 <__alt_data_end+0xfc009824>
 4009ca8:	d8000b15 	stw	zero,44(sp)
 4009cac:	003c9f06 	br	4008f2c <__alt_data_end+0xfc008f2c>
 4009cb0:	903e7e1e 	bne	r18,zero,40096ac <__alt_data_end+0xfc0096ac>
 4009cb4:	00800434 	movhi	r2,16
 4009cb8:	10bfffc4 	addi	r2,r2,-1
 4009cbc:	9884703a 	and	r2,r19,r2
 4009cc0:	1000ea1e 	bne	r2,zero,400a06c <_dtoa_r+0x1460>
 4009cc4:	9cdffc2c 	andhi	r19,r19,32752
 4009cc8:	9800e826 	beq	r19,zero,400a06c <_dtoa_r+0x1460>
 4009ccc:	d9c00817 	ldw	r7,32(sp)
 4009cd0:	b5800044 	addi	r22,r22,1
 4009cd4:	04c00044 	movi	r19,1
 4009cd8:	39c00044 	addi	r7,r7,1
 4009cdc:	d9c00815 	stw	r7,32(sp)
 4009ce0:	d8800d17 	ldw	r2,52(sp)
 4009ce4:	103e721e 	bne	r2,zero,40096b0 <__alt_data_end+0xfc0096b0>
 4009ce8:	00800044 	movi	r2,1
 4009cec:	003e7906 	br	40096d4 <__alt_data_end+0xfc0096d4>
 4009cf0:	8009883a 	mov	r4,r16
 4009cf4:	4005f840 	call	4005f84 <__floatsidf>
 4009cf8:	d9800f17 	ldw	r6,60(sp)
 4009cfc:	d9c01017 	ldw	r7,64(sp)
 4009d00:	1009883a 	mov	r4,r2
 4009d04:	180b883a 	mov	r5,r3
 4009d08:	4004d9c0 	call	4004d9c <__muldf3>
 4009d0c:	000d883a 	mov	r6,zero
 4009d10:	01d00734 	movhi	r7,16412
 4009d14:	1009883a 	mov	r4,r2
 4009d18:	180b883a 	mov	r5,r3
 4009d1c:	40039500 	call	4003950 <__adddf3>
 4009d20:	047f3034 	movhi	r17,64704
 4009d24:	1021883a 	mov	r16,r2
 4009d28:	1c63883a 	add	r17,r3,r17
 4009d2c:	d9000f17 	ldw	r4,60(sp)
 4009d30:	d9401017 	ldw	r5,64(sp)
 4009d34:	000d883a 	mov	r6,zero
 4009d38:	01d00534 	movhi	r7,16404
 4009d3c:	40056080 	call	4005608 <__subdf3>
 4009d40:	800d883a 	mov	r6,r16
 4009d44:	880f883a 	mov	r7,r17
 4009d48:	1009883a 	mov	r4,r2
 4009d4c:	180b883a 	mov	r5,r3
 4009d50:	102b883a 	mov	r21,r2
 4009d54:	1829883a 	mov	r20,r3
 4009d58:	4004bcc0 	call	4004bcc <__gedf2>
 4009d5c:	00806c16 	blt	zero,r2,4009f10 <_dtoa_r+0x1304>
 4009d60:	89e0003c 	xorhi	r7,r17,32768
 4009d64:	800d883a 	mov	r6,r16
 4009d68:	a809883a 	mov	r4,r21
 4009d6c:	a00b883a 	mov	r5,r20
 4009d70:	4004ca80 	call	4004ca8 <__ledf2>
 4009d74:	103d7e0e 	bge	r2,zero,4009370 <__alt_data_end+0xfc009370>
 4009d78:	002b883a 	mov	r21,zero
 4009d7c:	0023883a 	mov	r17,zero
 4009d80:	003efb06 	br	4009970 <__alt_data_end+0xfc009970>
 4009d84:	d8800717 	ldw	r2,28(sp)
 4009d88:	003bd006 	br	4008ccc <__alt_data_end+0xfc008ccc>
 4009d8c:	d9000a17 	ldw	r4,40(sp)
 4009d90:	d9800d17 	ldw	r6,52(sp)
 4009d94:	dd400a15 	stw	r21,40(sp)
 4009d98:	a905c83a 	sub	r2,r21,r4
 4009d9c:	308d883a 	add	r6,r6,r2
 4009da0:	d9800d15 	stw	r6,52(sp)
 4009da4:	002b883a 	mov	r21,zero
 4009da8:	003e0606 	br	40095c4 <__alt_data_end+0xfc0095c4>
 4009dac:	9023883a 	mov	r17,r18
 4009db0:	9829883a 	mov	r20,r19
 4009db4:	04000084 	movi	r16,2
 4009db8:	003c9206 	br	4009004 <__alt_data_end+0xfc009004>
 4009dbc:	04000044 	movi	r16,1
 4009dc0:	dc000c15 	stw	r16,48(sp)
 4009dc4:	dc000615 	stw	r16,24(sp)
 4009dc8:	dc002215 	stw	r16,136(sp)
 4009dcc:	e0001115 	stw	zero,68(fp)
 4009dd0:	000b883a 	mov	r5,zero
 4009dd4:	003c6906 	br	4008f7c <__alt_data_end+0xfc008f7c>
 4009dd8:	3021883a 	mov	r16,r6
 4009ddc:	003ffb06 	br	4009dcc <__alt_data_end+0xfc009dcc>
 4009de0:	1000021e 	bne	r2,zero,4009dec <_dtoa_r+0x11e0>
 4009de4:	4200004c 	andi	r8,r8,1
 4009de8:	403e7d1e 	bne	r8,zero,40097e0 <__alt_data_end+0xfc0097e0>
 4009dec:	01000c04 	movi	r4,48
 4009df0:	00000106 	br	4009df8 <_dtoa_r+0x11ec>
 4009df4:	102f883a 	mov	r23,r2
 4009df8:	b8bfffc4 	addi	r2,r23,-1
 4009dfc:	10c00007 	ldb	r3,0(r2)
 4009e00:	193ffc26 	beq	r3,r4,4009df4 <__alt_data_end+0xfc009df4>
 4009e04:	003e8706 	br	4009824 <__alt_data_end+0xfc009824>
 4009e08:	d8800517 	ldw	r2,20(sp)
 4009e0c:	00a3c83a 	sub	r17,zero,r2
 4009e10:	8800a426 	beq	r17,zero,400a0a4 <_dtoa_r+0x1498>
 4009e14:	888003cc 	andi	r2,r17,15
 4009e18:	100490fa 	slli	r2,r2,3
 4009e1c:	00c10074 	movhi	r3,1025
 4009e20:	18c7f104 	addi	r3,r3,8132
 4009e24:	1885883a 	add	r2,r3,r2
 4009e28:	11800017 	ldw	r6,0(r2)
 4009e2c:	11c00117 	ldw	r7,4(r2)
 4009e30:	9009883a 	mov	r4,r18
 4009e34:	980b883a 	mov	r5,r19
 4009e38:	8823d13a 	srai	r17,r17,4
 4009e3c:	4004d9c0 	call	4004d9c <__muldf3>
 4009e40:	d8800f15 	stw	r2,60(sp)
 4009e44:	d8c01015 	stw	r3,64(sp)
 4009e48:	8800e826 	beq	r17,zero,400a1ec <_dtoa_r+0x15e0>
 4009e4c:	05010074 	movhi	r20,1025
 4009e50:	a507e704 	addi	r20,r20,8092
 4009e54:	04000084 	movi	r16,2
 4009e58:	8980004c 	andi	r6,r17,1
 4009e5c:	1009883a 	mov	r4,r2
 4009e60:	8823d07a 	srai	r17,r17,1
 4009e64:	180b883a 	mov	r5,r3
 4009e68:	30000426 	beq	r6,zero,4009e7c <_dtoa_r+0x1270>
 4009e6c:	a1800017 	ldw	r6,0(r20)
 4009e70:	a1c00117 	ldw	r7,4(r20)
 4009e74:	84000044 	addi	r16,r16,1
 4009e78:	4004d9c0 	call	4004d9c <__muldf3>
 4009e7c:	a5000204 	addi	r20,r20,8
 4009e80:	883ff51e 	bne	r17,zero,4009e58 <__alt_data_end+0xfc009e58>
 4009e84:	d8800f15 	stw	r2,60(sp)
 4009e88:	d8c01015 	stw	r3,64(sp)
 4009e8c:	003c7606 	br	4009068 <__alt_data_end+0xfc009068>
 4009e90:	00c00c04 	movi	r3,48
 4009e94:	10c00005 	stb	r3,0(r2)
 4009e98:	d8c00517 	ldw	r3,20(sp)
 4009e9c:	bd3fffc3 	ldbu	r20,-1(r23)
 4009ea0:	18c00044 	addi	r3,r3,1
 4009ea4:	d8c00515 	stw	r3,20(sp)
 4009ea8:	003db906 	br	4009590 <__alt_data_end+0xfc009590>
 4009eac:	89400117 	ldw	r5,4(r17)
 4009eb0:	e009883a 	mov	r4,fp
 4009eb4:	400ac600 	call	400ac60 <_Balloc>
 4009eb8:	89800417 	ldw	r6,16(r17)
 4009ebc:	89400304 	addi	r5,r17,12
 4009ec0:	11000304 	addi	r4,r2,12
 4009ec4:	31800084 	addi	r6,r6,2
 4009ec8:	318d883a 	add	r6,r6,r6
 4009ecc:	318d883a 	add	r6,r6,r6
 4009ed0:	1027883a 	mov	r19,r2
 4009ed4:	40064240 	call	4006424 <memcpy>
 4009ed8:	01800044 	movi	r6,1
 4009edc:	980b883a 	mov	r5,r19
 4009ee0:	e009883a 	mov	r4,fp
 4009ee4:	400b49c0 	call	400b49c <__lshift>
 4009ee8:	1029883a 	mov	r20,r2
 4009eec:	003ecc06 	br	4009a20 <__alt_data_end+0xfc009a20>
 4009ef0:	00800e44 	movi	r2,57
 4009ef4:	90809026 	beq	r18,r2,400a138 <_dtoa_r+0x152c>
 4009ef8:	92000044 	addi	r8,r18,1
 4009efc:	003f1f06 	br	4009b7c <__alt_data_end+0xfc009b7c>
 4009f00:	9011883a 	mov	r8,r18
 4009f04:	8825883a 	mov	r18,r17
 4009f08:	a023883a 	mov	r17,r20
 4009f0c:	003e2906 	br	40097b4 <__alt_data_end+0xfc0097b4>
 4009f10:	002b883a 	mov	r21,zero
 4009f14:	0023883a 	mov	r17,zero
 4009f18:	003f5406 	br	4009c6c <__alt_data_end+0xfc009c6c>
 4009f1c:	61bfffc4 	addi	r6,r12,-1
 4009f20:	300490fa 	slli	r2,r6,3
 4009f24:	00c10074 	movhi	r3,1025
 4009f28:	18c7f104 	addi	r3,r3,8132
 4009f2c:	1885883a 	add	r2,r3,r2
 4009f30:	11000017 	ldw	r4,0(r2)
 4009f34:	11400117 	ldw	r5,4(r2)
 4009f38:	d8800717 	ldw	r2,28(sp)
 4009f3c:	880f883a 	mov	r7,r17
 4009f40:	d9801215 	stw	r6,72(sp)
 4009f44:	800d883a 	mov	r6,r16
 4009f48:	db001615 	stw	r12,88(sp)
 4009f4c:	15c00044 	addi	r23,r2,1
 4009f50:	4004d9c0 	call	4004d9c <__muldf3>
 4009f54:	d9401017 	ldw	r5,64(sp)
 4009f58:	d9000f17 	ldw	r4,60(sp)
 4009f5c:	d8c01515 	stw	r3,84(sp)
 4009f60:	d8801415 	stw	r2,80(sp)
 4009f64:	4005f040 	call	4005f04 <__fixdfsi>
 4009f68:	1009883a 	mov	r4,r2
 4009f6c:	1021883a 	mov	r16,r2
 4009f70:	4005f840 	call	4005f84 <__floatsidf>
 4009f74:	d9000f17 	ldw	r4,60(sp)
 4009f78:	d9401017 	ldw	r5,64(sp)
 4009f7c:	100d883a 	mov	r6,r2
 4009f80:	180f883a 	mov	r7,r3
 4009f84:	40056080 	call	4005608 <__subdf3>
 4009f88:	1829883a 	mov	r20,r3
 4009f8c:	d8c00717 	ldw	r3,28(sp)
 4009f90:	84000c04 	addi	r16,r16,48
 4009f94:	1023883a 	mov	r17,r2
 4009f98:	1c000005 	stb	r16,0(r3)
 4009f9c:	db001617 	ldw	r12,88(sp)
 4009fa0:	00800044 	movi	r2,1
 4009fa4:	60802226 	beq	r12,r2,400a030 <_dtoa_r+0x1424>
 4009fa8:	d9c00717 	ldw	r7,28(sp)
 4009fac:	8805883a 	mov	r2,r17
 4009fb0:	b82b883a 	mov	r21,r23
 4009fb4:	3b19883a 	add	r12,r7,r12
 4009fb8:	6023883a 	mov	r17,r12
 4009fbc:	a007883a 	mov	r3,r20
 4009fc0:	dc800f15 	stw	r18,60(sp)
 4009fc4:	000d883a 	mov	r6,zero
 4009fc8:	01d00934 	movhi	r7,16420
 4009fcc:	1009883a 	mov	r4,r2
 4009fd0:	180b883a 	mov	r5,r3
 4009fd4:	4004d9c0 	call	4004d9c <__muldf3>
 4009fd8:	180b883a 	mov	r5,r3
 4009fdc:	1009883a 	mov	r4,r2
 4009fe0:	1829883a 	mov	r20,r3
 4009fe4:	1025883a 	mov	r18,r2
 4009fe8:	4005f040 	call	4005f04 <__fixdfsi>
 4009fec:	1009883a 	mov	r4,r2
 4009ff0:	1021883a 	mov	r16,r2
 4009ff4:	4005f840 	call	4005f84 <__floatsidf>
 4009ff8:	100d883a 	mov	r6,r2
 4009ffc:	180f883a 	mov	r7,r3
 400a000:	9009883a 	mov	r4,r18
 400a004:	a00b883a 	mov	r5,r20
 400a008:	84000c04 	addi	r16,r16,48
 400a00c:	40056080 	call	4005608 <__subdf3>
 400a010:	ad400044 	addi	r21,r21,1
 400a014:	ac3fffc5 	stb	r16,-1(r21)
 400a018:	ac7fea1e 	bne	r21,r17,4009fc4 <__alt_data_end+0xfc009fc4>
 400a01c:	1023883a 	mov	r17,r2
 400a020:	d8801217 	ldw	r2,72(sp)
 400a024:	dc800f17 	ldw	r18,60(sp)
 400a028:	1829883a 	mov	r20,r3
 400a02c:	b8af883a 	add	r23,r23,r2
 400a030:	d9001417 	ldw	r4,80(sp)
 400a034:	d9401517 	ldw	r5,84(sp)
 400a038:	000d883a 	mov	r6,zero
 400a03c:	01cff834 	movhi	r7,16352
 400a040:	40039500 	call	4003950 <__adddf3>
 400a044:	880d883a 	mov	r6,r17
 400a048:	a00f883a 	mov	r7,r20
 400a04c:	1009883a 	mov	r4,r2
 400a050:	180b883a 	mov	r5,r3
 400a054:	4004ca80 	call	4004ca8 <__ledf2>
 400a058:	10003e0e 	bge	r2,zero,400a154 <_dtoa_r+0x1548>
 400a05c:	d9001317 	ldw	r4,76(sp)
 400a060:	bd3fffc3 	ldbu	r20,-1(r23)
 400a064:	d9000515 	stw	r4,20(sp)
 400a068:	003d3b06 	br	4009558 <__alt_data_end+0xfc009558>
 400a06c:	0027883a 	mov	r19,zero
 400a070:	003f1b06 	br	4009ce0 <__alt_data_end+0xfc009ce0>
 400a074:	d8800817 	ldw	r2,32(sp)
 400a078:	11e9c83a 	sub	r20,r2,r7
 400a07c:	0005883a 	mov	r2,zero
 400a080:	003d5406 	br	40095d4 <__alt_data_end+0xfc0095d4>
 400a084:	00800044 	movi	r2,1
 400a088:	003dc706 	br	40097a8 <__alt_data_end+0xfc0097a8>
 400a08c:	d8c00217 	ldw	r3,8(sp)
 400a090:	00800d84 	movi	r2,54
 400a094:	dd400a17 	ldw	r21,40(sp)
 400a098:	10c5c83a 	sub	r2,r2,r3
 400a09c:	dd000817 	ldw	r20,32(sp)
 400a0a0:	003d4c06 	br	40095d4 <__alt_data_end+0xfc0095d4>
 400a0a4:	dc800f15 	stw	r18,60(sp)
 400a0a8:	dcc01015 	stw	r19,64(sp)
 400a0ac:	04000084 	movi	r16,2
 400a0b0:	003bed06 	br	4009068 <__alt_data_end+0xfc009068>
 400a0b4:	d9000617 	ldw	r4,24(sp)
 400a0b8:	203f0d26 	beq	r4,zero,4009cf0 <__alt_data_end+0xfc009cf0>
 400a0bc:	d9800c17 	ldw	r6,48(sp)
 400a0c0:	01bcab0e 	bge	zero,r6,4009370 <__alt_data_end+0xfc009370>
 400a0c4:	d9401017 	ldw	r5,64(sp)
 400a0c8:	d9000f17 	ldw	r4,60(sp)
 400a0cc:	000d883a 	mov	r6,zero
 400a0d0:	01d00934 	movhi	r7,16420
 400a0d4:	4004d9c0 	call	4004d9c <__muldf3>
 400a0d8:	81000044 	addi	r4,r16,1
 400a0dc:	d8800f15 	stw	r2,60(sp)
 400a0e0:	d8c01015 	stw	r3,64(sp)
 400a0e4:	4005f840 	call	4005f84 <__floatsidf>
 400a0e8:	d9800f17 	ldw	r6,60(sp)
 400a0ec:	d9c01017 	ldw	r7,64(sp)
 400a0f0:	1009883a 	mov	r4,r2
 400a0f4:	180b883a 	mov	r5,r3
 400a0f8:	4004d9c0 	call	4004d9c <__muldf3>
 400a0fc:	01d00734 	movhi	r7,16412
 400a100:	000d883a 	mov	r6,zero
 400a104:	1009883a 	mov	r4,r2
 400a108:	180b883a 	mov	r5,r3
 400a10c:	40039500 	call	4003950 <__adddf3>
 400a110:	d9c00517 	ldw	r7,20(sp)
 400a114:	047f3034 	movhi	r17,64704
 400a118:	1021883a 	mov	r16,r2
 400a11c:	39ffffc4 	addi	r7,r7,-1
 400a120:	d9c01315 	stw	r7,76(sp)
 400a124:	1c63883a 	add	r17,r3,r17
 400a128:	db000c17 	ldw	r12,48(sp)
 400a12c:	003bea06 	br	40090d8 <__alt_data_end+0xfc0090d8>
 400a130:	dc000915 	stw	r16,36(sp)
 400a134:	003e0e06 	br	4009970 <__alt_data_end+0xfc009970>
 400a138:	01000e44 	movi	r4,57
 400a13c:	8825883a 	mov	r18,r17
 400a140:	9dc00044 	addi	r23,r19,1
 400a144:	99000005 	stb	r4,0(r19)
 400a148:	a023883a 	mov	r17,r20
 400a14c:	dc000915 	stw	r16,36(sp)
 400a150:	003da406 	br	40097e4 <__alt_data_end+0xfc0097e4>
 400a154:	d9801417 	ldw	r6,80(sp)
 400a158:	d9c01517 	ldw	r7,84(sp)
 400a15c:	0009883a 	mov	r4,zero
 400a160:	014ff834 	movhi	r5,16352
 400a164:	40056080 	call	4005608 <__subdf3>
 400a168:	880d883a 	mov	r6,r17
 400a16c:	a00f883a 	mov	r7,r20
 400a170:	1009883a 	mov	r4,r2
 400a174:	180b883a 	mov	r5,r3
 400a178:	4004bcc0 	call	4004bcc <__gedf2>
 400a17c:	00bc7c0e 	bge	zero,r2,4009370 <__alt_data_end+0xfc009370>
 400a180:	01000c04 	movi	r4,48
 400a184:	00000106 	br	400a18c <_dtoa_r+0x1580>
 400a188:	102f883a 	mov	r23,r2
 400a18c:	b8bfffc4 	addi	r2,r23,-1
 400a190:	10c00007 	ldb	r3,0(r2)
 400a194:	193ffc26 	beq	r3,r4,400a188 <__alt_data_end+0xfc00a188>
 400a198:	d9801317 	ldw	r6,76(sp)
 400a19c:	d9800515 	stw	r6,20(sp)
 400a1a0:	003c4406 	br	40092b4 <__alt_data_end+0xfc0092b4>
 400a1a4:	d9801317 	ldw	r6,76(sp)
 400a1a8:	d9800515 	stw	r6,20(sp)
 400a1ac:	003cea06 	br	4009558 <__alt_data_end+0xfc009558>
 400a1b0:	dd800f17 	ldw	r22,60(sp)
 400a1b4:	dcc01017 	ldw	r19,64(sp)
 400a1b8:	dc801217 	ldw	r18,72(sp)
 400a1bc:	003c6c06 	br	4009370 <__alt_data_end+0xfc009370>
 400a1c0:	903e031e 	bne	r18,zero,40099d0 <__alt_data_end+0xfc0099d0>
 400a1c4:	003ebb06 	br	4009cb4 <__alt_data_end+0xfc009cb4>
 400a1c8:	103e6c1e 	bne	r2,zero,4009b7c <__alt_data_end+0xfc009b7c>
 400a1cc:	4080004c 	andi	r2,r8,1
 400a1d0:	103e6a26 	beq	r2,zero,4009b7c <__alt_data_end+0xfc009b7c>
 400a1d4:	003e6606 	br	4009b70 <__alt_data_end+0xfc009b70>
 400a1d8:	d8c00317 	ldw	r3,12(sp)
 400a1dc:	00800084 	movi	r2,2
 400a1e0:	10c02916 	blt	r2,r3,400a288 <_dtoa_r+0x167c>
 400a1e4:	d9000c17 	ldw	r4,48(sp)
 400a1e8:	003e8806 	br	4009c0c <__alt_data_end+0xfc009c0c>
 400a1ec:	04000084 	movi	r16,2
 400a1f0:	003b9d06 	br	4009068 <__alt_data_end+0xfc009068>
 400a1f4:	d9001317 	ldw	r4,76(sp)
 400a1f8:	d9000515 	stw	r4,20(sp)
 400a1fc:	003cd606 	br	4009558 <__alt_data_end+0xfc009558>
 400a200:	d8801317 	ldw	r2,76(sp)
 400a204:	d8800515 	stw	r2,20(sp)
 400a208:	003c2a06 	br	40092b4 <__alt_data_end+0xfc0092b4>
 400a20c:	d9800317 	ldw	r6,12(sp)
 400a210:	00800084 	movi	r2,2
 400a214:	11801516 	blt	r2,r6,400a26c <_dtoa_r+0x1660>
 400a218:	d9c00c17 	ldw	r7,48(sp)
 400a21c:	d9c00615 	stw	r7,24(sp)
 400a220:	003df706 	br	4009a00 <__alt_data_end+0xfc009a00>
 400a224:	193d3926 	beq	r3,r4,400970c <__alt_data_end+0xfc00970c>
 400a228:	00c00f04 	movi	r3,60
 400a22c:	1885c83a 	sub	r2,r3,r2
 400a230:	003ddf06 	br	40099b0 <__alt_data_end+0xfc0099b0>
 400a234:	e009883a 	mov	r4,fp
 400a238:	e0001115 	stw	zero,68(fp)
 400a23c:	000b883a 	mov	r5,zero
 400a240:	400ac600 	call	400ac60 <_Balloc>
 400a244:	d8800715 	stw	r2,28(sp)
 400a248:	d8c00717 	ldw	r3,28(sp)
 400a24c:	00bfffc4 	movi	r2,-1
 400a250:	01000044 	movi	r4,1
 400a254:	d8800c15 	stw	r2,48(sp)
 400a258:	e0c01015 	stw	r3,64(fp)
 400a25c:	d9000b15 	stw	r4,44(sp)
 400a260:	d8800615 	stw	r2,24(sp)
 400a264:	d8002215 	stw	zero,136(sp)
 400a268:	003c4106 	br	4009370 <__alt_data_end+0xfc009370>
 400a26c:	d8c00c17 	ldw	r3,48(sp)
 400a270:	d8c00615 	stw	r3,24(sp)
 400a274:	003e7006 	br	4009c38 <__alt_data_end+0xfc009c38>
 400a278:	04400044 	movi	r17,1
 400a27c:	003b2006 	br	4008f00 <__alt_data_end+0xfc008f00>
 400a280:	000b883a 	mov	r5,zero
 400a284:	003b3d06 	br	4008f7c <__alt_data_end+0xfc008f7c>
 400a288:	d8800c17 	ldw	r2,48(sp)
 400a28c:	d8800615 	stw	r2,24(sp)
 400a290:	003e6906 	br	4009c38 <__alt_data_end+0xfc009c38>

0400a294 <_setlocale_r>:
 400a294:	30001b26 	beq	r6,zero,400a304 <_setlocale_r+0x70>
 400a298:	01410074 	movhi	r5,1025
 400a29c:	defffe04 	addi	sp,sp,-8
 400a2a0:	2947d704 	addi	r5,r5,8028
 400a2a4:	3009883a 	mov	r4,r6
 400a2a8:	dc000015 	stw	r16,0(sp)
 400a2ac:	dfc00115 	stw	ra,4(sp)
 400a2b0:	3021883a 	mov	r16,r6
 400a2b4:	400bde00 	call	400bde0 <strcmp>
 400a2b8:	1000061e 	bne	r2,zero,400a2d4 <_setlocale_r+0x40>
 400a2bc:	00810074 	movhi	r2,1025
 400a2c0:	1087d604 	addi	r2,r2,8024
 400a2c4:	dfc00117 	ldw	ra,4(sp)
 400a2c8:	dc000017 	ldw	r16,0(sp)
 400a2cc:	dec00204 	addi	sp,sp,8
 400a2d0:	f800283a 	ret
 400a2d4:	01410074 	movhi	r5,1025
 400a2d8:	2947d604 	addi	r5,r5,8024
 400a2dc:	8009883a 	mov	r4,r16
 400a2e0:	400bde00 	call	400bde0 <strcmp>
 400a2e4:	103ff526 	beq	r2,zero,400a2bc <__alt_data_end+0xfc00a2bc>
 400a2e8:	01410074 	movhi	r5,1025
 400a2ec:	2947c104 	addi	r5,r5,7940
 400a2f0:	8009883a 	mov	r4,r16
 400a2f4:	400bde00 	call	400bde0 <strcmp>
 400a2f8:	103ff026 	beq	r2,zero,400a2bc <__alt_data_end+0xfc00a2bc>
 400a2fc:	0005883a 	mov	r2,zero
 400a300:	003ff006 	br	400a2c4 <__alt_data_end+0xfc00a2c4>
 400a304:	00810074 	movhi	r2,1025
 400a308:	1087d604 	addi	r2,r2,8024
 400a30c:	f800283a 	ret

0400a310 <__locale_charset>:
 400a310:	00810074 	movhi	r2,1025
 400a314:	10898304 	addi	r2,r2,9740
 400a318:	f800283a 	ret

0400a31c <__locale_mb_cur_max>:
 400a31c:	00810074 	movhi	r2,1025
 400a320:	108fa204 	addi	r2,r2,16008
 400a324:	10800017 	ldw	r2,0(r2)
 400a328:	f800283a 	ret

0400a32c <__locale_msgcharset>:
 400a32c:	00810074 	movhi	r2,1025
 400a330:	10897b04 	addi	r2,r2,9708
 400a334:	f800283a 	ret

0400a338 <__locale_cjk_lang>:
 400a338:	0005883a 	mov	r2,zero
 400a33c:	f800283a 	ret

0400a340 <_localeconv_r>:
 400a340:	00810074 	movhi	r2,1025
 400a344:	10898b04 	addi	r2,r2,9772
 400a348:	f800283a 	ret

0400a34c <setlocale>:
 400a34c:	00810074 	movhi	r2,1025
 400a350:	108fa104 	addi	r2,r2,16004
 400a354:	280d883a 	mov	r6,r5
 400a358:	200b883a 	mov	r5,r4
 400a35c:	11000017 	ldw	r4,0(r2)
 400a360:	400a2941 	jmpi	400a294 <_setlocale_r>

0400a364 <localeconv>:
 400a364:	00810074 	movhi	r2,1025
 400a368:	10898b04 	addi	r2,r2,9772
 400a36c:	f800283a 	ret

0400a370 <_malloc_r>:
 400a370:	defff504 	addi	sp,sp,-44
 400a374:	dc800315 	stw	r18,12(sp)
 400a378:	dfc00a15 	stw	ra,40(sp)
 400a37c:	df000915 	stw	fp,36(sp)
 400a380:	ddc00815 	stw	r23,32(sp)
 400a384:	dd800715 	stw	r22,28(sp)
 400a388:	dd400615 	stw	r21,24(sp)
 400a38c:	dd000515 	stw	r20,20(sp)
 400a390:	dcc00415 	stw	r19,16(sp)
 400a394:	dc400215 	stw	r17,8(sp)
 400a398:	dc000115 	stw	r16,4(sp)
 400a39c:	288002c4 	addi	r2,r5,11
 400a3a0:	00c00584 	movi	r3,22
 400a3a4:	2025883a 	mov	r18,r4
 400a3a8:	18807f2e 	bgeu	r3,r2,400a5a8 <_malloc_r+0x238>
 400a3ac:	047ffe04 	movi	r17,-8
 400a3b0:	1462703a 	and	r17,r2,r17
 400a3b4:	8800a316 	blt	r17,zero,400a644 <_malloc_r+0x2d4>
 400a3b8:	8940a236 	bltu	r17,r5,400a644 <_malloc_r+0x2d4>
 400a3bc:	400f0ec0 	call	400f0ec <__malloc_lock>
 400a3c0:	00807dc4 	movi	r2,503
 400a3c4:	1441e92e 	bgeu	r2,r17,400ab6c <_malloc_r+0x7fc>
 400a3c8:	8804d27a 	srli	r2,r17,9
 400a3cc:	1000a126 	beq	r2,zero,400a654 <_malloc_r+0x2e4>
 400a3d0:	00c00104 	movi	r3,4
 400a3d4:	18811e36 	bltu	r3,r2,400a850 <_malloc_r+0x4e0>
 400a3d8:	8804d1ba 	srli	r2,r17,6
 400a3dc:	12000e44 	addi	r8,r2,57
 400a3e0:	11c00e04 	addi	r7,r2,56
 400a3e4:	4209883a 	add	r4,r8,r8
 400a3e8:	04c10074 	movhi	r19,1025
 400a3ec:	2109883a 	add	r4,r4,r4
 400a3f0:	9cc99904 	addi	r19,r19,9828
 400a3f4:	2109883a 	add	r4,r4,r4
 400a3f8:	9909883a 	add	r4,r19,r4
 400a3fc:	24000117 	ldw	r16,4(r4)
 400a400:	213ffe04 	addi	r4,r4,-8
 400a404:	24009726 	beq	r4,r16,400a664 <_malloc_r+0x2f4>
 400a408:	80800117 	ldw	r2,4(r16)
 400a40c:	01bfff04 	movi	r6,-4
 400a410:	014003c4 	movi	r5,15
 400a414:	1184703a 	and	r2,r2,r6
 400a418:	1447c83a 	sub	r3,r2,r17
 400a41c:	28c00716 	blt	r5,r3,400a43c <_malloc_r+0xcc>
 400a420:	1800920e 	bge	r3,zero,400a66c <_malloc_r+0x2fc>
 400a424:	84000317 	ldw	r16,12(r16)
 400a428:	24008e26 	beq	r4,r16,400a664 <_malloc_r+0x2f4>
 400a42c:	80800117 	ldw	r2,4(r16)
 400a430:	1184703a 	and	r2,r2,r6
 400a434:	1447c83a 	sub	r3,r2,r17
 400a438:	28fff90e 	bge	r5,r3,400a420 <__alt_data_end+0xfc00a420>
 400a43c:	3809883a 	mov	r4,r7
 400a440:	01810074 	movhi	r6,1025
 400a444:	9c000417 	ldw	r16,16(r19)
 400a448:	31899904 	addi	r6,r6,9828
 400a44c:	32000204 	addi	r8,r6,8
 400a450:	82013426 	beq	r16,r8,400a924 <_malloc_r+0x5b4>
 400a454:	80c00117 	ldw	r3,4(r16)
 400a458:	00bfff04 	movi	r2,-4
 400a45c:	188e703a 	and	r7,r3,r2
 400a460:	3c45c83a 	sub	r2,r7,r17
 400a464:	00c003c4 	movi	r3,15
 400a468:	18811f16 	blt	r3,r2,400a8e8 <_malloc_r+0x578>
 400a46c:	32000515 	stw	r8,20(r6)
 400a470:	32000415 	stw	r8,16(r6)
 400a474:	10007f0e 	bge	r2,zero,400a674 <_malloc_r+0x304>
 400a478:	00807fc4 	movi	r2,511
 400a47c:	11c0fd36 	bltu	r2,r7,400a874 <_malloc_r+0x504>
 400a480:	3806d0fa 	srli	r3,r7,3
 400a484:	01c00044 	movi	r7,1
 400a488:	30800117 	ldw	r2,4(r6)
 400a48c:	19400044 	addi	r5,r3,1
 400a490:	294b883a 	add	r5,r5,r5
 400a494:	1807d0ba 	srai	r3,r3,2
 400a498:	294b883a 	add	r5,r5,r5
 400a49c:	294b883a 	add	r5,r5,r5
 400a4a0:	298b883a 	add	r5,r5,r6
 400a4a4:	38c6983a 	sll	r3,r7,r3
 400a4a8:	29c00017 	ldw	r7,0(r5)
 400a4ac:	2a7ffe04 	addi	r9,r5,-8
 400a4b0:	1886b03a 	or	r3,r3,r2
 400a4b4:	82400315 	stw	r9,12(r16)
 400a4b8:	81c00215 	stw	r7,8(r16)
 400a4bc:	30c00115 	stw	r3,4(r6)
 400a4c0:	2c000015 	stw	r16,0(r5)
 400a4c4:	3c000315 	stw	r16,12(r7)
 400a4c8:	2005d0ba 	srai	r2,r4,2
 400a4cc:	01400044 	movi	r5,1
 400a4d0:	288a983a 	sll	r5,r5,r2
 400a4d4:	19406f36 	bltu	r3,r5,400a694 <_malloc_r+0x324>
 400a4d8:	28c4703a 	and	r2,r5,r3
 400a4dc:	10000a1e 	bne	r2,zero,400a508 <_malloc_r+0x198>
 400a4e0:	00bfff04 	movi	r2,-4
 400a4e4:	294b883a 	add	r5,r5,r5
 400a4e8:	2088703a 	and	r4,r4,r2
 400a4ec:	28c4703a 	and	r2,r5,r3
 400a4f0:	21000104 	addi	r4,r4,4
 400a4f4:	1000041e 	bne	r2,zero,400a508 <_malloc_r+0x198>
 400a4f8:	294b883a 	add	r5,r5,r5
 400a4fc:	28c4703a 	and	r2,r5,r3
 400a500:	21000104 	addi	r4,r4,4
 400a504:	103ffc26 	beq	r2,zero,400a4f8 <__alt_data_end+0xfc00a4f8>
 400a508:	02bfff04 	movi	r10,-4
 400a50c:	024003c4 	movi	r9,15
 400a510:	21800044 	addi	r6,r4,1
 400a514:	318d883a 	add	r6,r6,r6
 400a518:	318d883a 	add	r6,r6,r6
 400a51c:	318d883a 	add	r6,r6,r6
 400a520:	998d883a 	add	r6,r19,r6
 400a524:	333ffe04 	addi	r12,r6,-8
 400a528:	2017883a 	mov	r11,r4
 400a52c:	31800104 	addi	r6,r6,4
 400a530:	34000017 	ldw	r16,0(r6)
 400a534:	31fffd04 	addi	r7,r6,-12
 400a538:	81c0041e 	bne	r16,r7,400a54c <_malloc_r+0x1dc>
 400a53c:	0000fb06 	br	400a92c <_malloc_r+0x5bc>
 400a540:	1801030e 	bge	r3,zero,400a950 <_malloc_r+0x5e0>
 400a544:	84000317 	ldw	r16,12(r16)
 400a548:	81c0f826 	beq	r16,r7,400a92c <_malloc_r+0x5bc>
 400a54c:	80800117 	ldw	r2,4(r16)
 400a550:	1284703a 	and	r2,r2,r10
 400a554:	1447c83a 	sub	r3,r2,r17
 400a558:	48fff90e 	bge	r9,r3,400a540 <__alt_data_end+0xfc00a540>
 400a55c:	80800317 	ldw	r2,12(r16)
 400a560:	81000217 	ldw	r4,8(r16)
 400a564:	89400054 	ori	r5,r17,1
 400a568:	81400115 	stw	r5,4(r16)
 400a56c:	20800315 	stw	r2,12(r4)
 400a570:	11000215 	stw	r4,8(r2)
 400a574:	8463883a 	add	r17,r16,r17
 400a578:	9c400515 	stw	r17,20(r19)
 400a57c:	9c400415 	stw	r17,16(r19)
 400a580:	18800054 	ori	r2,r3,1
 400a584:	88800115 	stw	r2,4(r17)
 400a588:	8a000315 	stw	r8,12(r17)
 400a58c:	8a000215 	stw	r8,8(r17)
 400a590:	88e3883a 	add	r17,r17,r3
 400a594:	88c00015 	stw	r3,0(r17)
 400a598:	9009883a 	mov	r4,r18
 400a59c:	400f1100 	call	400f110 <__malloc_unlock>
 400a5a0:	80800204 	addi	r2,r16,8
 400a5a4:	00001b06 	br	400a614 <_malloc_r+0x2a4>
 400a5a8:	04400404 	movi	r17,16
 400a5ac:	89402536 	bltu	r17,r5,400a644 <_malloc_r+0x2d4>
 400a5b0:	400f0ec0 	call	400f0ec <__malloc_lock>
 400a5b4:	00800184 	movi	r2,6
 400a5b8:	01000084 	movi	r4,2
 400a5bc:	04c10074 	movhi	r19,1025
 400a5c0:	1085883a 	add	r2,r2,r2
 400a5c4:	9cc99904 	addi	r19,r19,9828
 400a5c8:	1085883a 	add	r2,r2,r2
 400a5cc:	9885883a 	add	r2,r19,r2
 400a5d0:	14000117 	ldw	r16,4(r2)
 400a5d4:	10fffe04 	addi	r3,r2,-8
 400a5d8:	80c0d926 	beq	r16,r3,400a940 <_malloc_r+0x5d0>
 400a5dc:	80c00117 	ldw	r3,4(r16)
 400a5e0:	81000317 	ldw	r4,12(r16)
 400a5e4:	00bfff04 	movi	r2,-4
 400a5e8:	1884703a 	and	r2,r3,r2
 400a5ec:	81400217 	ldw	r5,8(r16)
 400a5f0:	8085883a 	add	r2,r16,r2
 400a5f4:	10c00117 	ldw	r3,4(r2)
 400a5f8:	29000315 	stw	r4,12(r5)
 400a5fc:	21400215 	stw	r5,8(r4)
 400a600:	18c00054 	ori	r3,r3,1
 400a604:	10c00115 	stw	r3,4(r2)
 400a608:	9009883a 	mov	r4,r18
 400a60c:	400f1100 	call	400f110 <__malloc_unlock>
 400a610:	80800204 	addi	r2,r16,8
 400a614:	dfc00a17 	ldw	ra,40(sp)
 400a618:	df000917 	ldw	fp,36(sp)
 400a61c:	ddc00817 	ldw	r23,32(sp)
 400a620:	dd800717 	ldw	r22,28(sp)
 400a624:	dd400617 	ldw	r21,24(sp)
 400a628:	dd000517 	ldw	r20,20(sp)
 400a62c:	dcc00417 	ldw	r19,16(sp)
 400a630:	dc800317 	ldw	r18,12(sp)
 400a634:	dc400217 	ldw	r17,8(sp)
 400a638:	dc000117 	ldw	r16,4(sp)
 400a63c:	dec00b04 	addi	sp,sp,44
 400a640:	f800283a 	ret
 400a644:	00800304 	movi	r2,12
 400a648:	90800015 	stw	r2,0(r18)
 400a64c:	0005883a 	mov	r2,zero
 400a650:	003ff006 	br	400a614 <__alt_data_end+0xfc00a614>
 400a654:	01002004 	movi	r4,128
 400a658:	02001004 	movi	r8,64
 400a65c:	01c00fc4 	movi	r7,63
 400a660:	003f6106 	br	400a3e8 <__alt_data_end+0xfc00a3e8>
 400a664:	4009883a 	mov	r4,r8
 400a668:	003f7506 	br	400a440 <__alt_data_end+0xfc00a440>
 400a66c:	81000317 	ldw	r4,12(r16)
 400a670:	003fde06 	br	400a5ec <__alt_data_end+0xfc00a5ec>
 400a674:	81c5883a 	add	r2,r16,r7
 400a678:	11400117 	ldw	r5,4(r2)
 400a67c:	9009883a 	mov	r4,r18
 400a680:	29400054 	ori	r5,r5,1
 400a684:	11400115 	stw	r5,4(r2)
 400a688:	400f1100 	call	400f110 <__malloc_unlock>
 400a68c:	80800204 	addi	r2,r16,8
 400a690:	003fe006 	br	400a614 <__alt_data_end+0xfc00a614>
 400a694:	9c000217 	ldw	r16,8(r19)
 400a698:	00bfff04 	movi	r2,-4
 400a69c:	85800117 	ldw	r22,4(r16)
 400a6a0:	b0ac703a 	and	r22,r22,r2
 400a6a4:	b4400336 	bltu	r22,r17,400a6b4 <_malloc_r+0x344>
 400a6a8:	b445c83a 	sub	r2,r22,r17
 400a6ac:	00c003c4 	movi	r3,15
 400a6b0:	18805d16 	blt	r3,r2,400a828 <_malloc_r+0x4b8>
 400a6b4:	05c10074 	movhi	r23,1025
 400a6b8:	00810074 	movhi	r2,1025
 400a6bc:	10972b04 	addi	r2,r2,23724
 400a6c0:	bdcfa304 	addi	r23,r23,16012
 400a6c4:	15400017 	ldw	r21,0(r2)
 400a6c8:	b8c00017 	ldw	r3,0(r23)
 400a6cc:	00bfffc4 	movi	r2,-1
 400a6d0:	858d883a 	add	r6,r16,r22
 400a6d4:	8d6b883a 	add	r21,r17,r21
 400a6d8:	1880ea26 	beq	r3,r2,400aa84 <_malloc_r+0x714>
 400a6dc:	ad4403c4 	addi	r21,r21,4111
 400a6e0:	00bc0004 	movi	r2,-4096
 400a6e4:	a8aa703a 	and	r21,r21,r2
 400a6e8:	a80b883a 	mov	r5,r21
 400a6ec:	9009883a 	mov	r4,r18
 400a6f0:	d9800015 	stw	r6,0(sp)
 400a6f4:	400bd8c0 	call	400bd8c <_sbrk_r>
 400a6f8:	1029883a 	mov	r20,r2
 400a6fc:	00bfffc4 	movi	r2,-1
 400a700:	d9800017 	ldw	r6,0(sp)
 400a704:	a080e826 	beq	r20,r2,400aaa8 <_malloc_r+0x738>
 400a708:	a180a636 	bltu	r20,r6,400a9a4 <_malloc_r+0x634>
 400a70c:	07010074 	movhi	fp,1025
 400a710:	e7173904 	addi	fp,fp,23780
 400a714:	e0800017 	ldw	r2,0(fp)
 400a718:	a887883a 	add	r3,r21,r2
 400a71c:	e0c00015 	stw	r3,0(fp)
 400a720:	3500e626 	beq	r6,r20,400aabc <_malloc_r+0x74c>
 400a724:	b9000017 	ldw	r4,0(r23)
 400a728:	00bfffc4 	movi	r2,-1
 400a72c:	2080ee26 	beq	r4,r2,400aae8 <_malloc_r+0x778>
 400a730:	a185c83a 	sub	r2,r20,r6
 400a734:	10c5883a 	add	r2,r2,r3
 400a738:	e0800015 	stw	r2,0(fp)
 400a73c:	a0c001cc 	andi	r3,r20,7
 400a740:	1800bc26 	beq	r3,zero,400aa34 <_malloc_r+0x6c4>
 400a744:	a0e9c83a 	sub	r20,r20,r3
 400a748:	00840204 	movi	r2,4104
 400a74c:	a5000204 	addi	r20,r20,8
 400a750:	10c7c83a 	sub	r3,r2,r3
 400a754:	a545883a 	add	r2,r20,r21
 400a758:	1083ffcc 	andi	r2,r2,4095
 400a75c:	18abc83a 	sub	r21,r3,r2
 400a760:	a80b883a 	mov	r5,r21
 400a764:	9009883a 	mov	r4,r18
 400a768:	400bd8c0 	call	400bd8c <_sbrk_r>
 400a76c:	00ffffc4 	movi	r3,-1
 400a770:	10c0e126 	beq	r2,r3,400aaf8 <_malloc_r+0x788>
 400a774:	1505c83a 	sub	r2,r2,r20
 400a778:	1545883a 	add	r2,r2,r21
 400a77c:	10800054 	ori	r2,r2,1
 400a780:	e0c00017 	ldw	r3,0(fp)
 400a784:	9d000215 	stw	r20,8(r19)
 400a788:	a0800115 	stw	r2,4(r20)
 400a78c:	a8c7883a 	add	r3,r21,r3
 400a790:	e0c00015 	stw	r3,0(fp)
 400a794:	84c00e26 	beq	r16,r19,400a7d0 <_malloc_r+0x460>
 400a798:	018003c4 	movi	r6,15
 400a79c:	3580a72e 	bgeu	r6,r22,400aa3c <_malloc_r+0x6cc>
 400a7a0:	81400117 	ldw	r5,4(r16)
 400a7a4:	013ffe04 	movi	r4,-8
 400a7a8:	b0bffd04 	addi	r2,r22,-12
 400a7ac:	1104703a 	and	r2,r2,r4
 400a7b0:	2900004c 	andi	r4,r5,1
 400a7b4:	2088b03a 	or	r4,r4,r2
 400a7b8:	81000115 	stw	r4,4(r16)
 400a7bc:	01400144 	movi	r5,5
 400a7c0:	8089883a 	add	r4,r16,r2
 400a7c4:	21400115 	stw	r5,4(r4)
 400a7c8:	21400215 	stw	r5,8(r4)
 400a7cc:	3080cd36 	bltu	r6,r2,400ab04 <_malloc_r+0x794>
 400a7d0:	00810074 	movhi	r2,1025
 400a7d4:	10972a04 	addi	r2,r2,23720
 400a7d8:	11000017 	ldw	r4,0(r2)
 400a7dc:	20c0012e 	bgeu	r4,r3,400a7e4 <_malloc_r+0x474>
 400a7e0:	10c00015 	stw	r3,0(r2)
 400a7e4:	00810074 	movhi	r2,1025
 400a7e8:	10972904 	addi	r2,r2,23716
 400a7ec:	11000017 	ldw	r4,0(r2)
 400a7f0:	9c000217 	ldw	r16,8(r19)
 400a7f4:	20c0012e 	bgeu	r4,r3,400a7fc <_malloc_r+0x48c>
 400a7f8:	10c00015 	stw	r3,0(r2)
 400a7fc:	80c00117 	ldw	r3,4(r16)
 400a800:	00bfff04 	movi	r2,-4
 400a804:	1886703a 	and	r3,r3,r2
 400a808:	1c45c83a 	sub	r2,r3,r17
 400a80c:	1c400236 	bltu	r3,r17,400a818 <_malloc_r+0x4a8>
 400a810:	00c003c4 	movi	r3,15
 400a814:	18800416 	blt	r3,r2,400a828 <_malloc_r+0x4b8>
 400a818:	9009883a 	mov	r4,r18
 400a81c:	400f1100 	call	400f110 <__malloc_unlock>
 400a820:	0005883a 	mov	r2,zero
 400a824:	003f7b06 	br	400a614 <__alt_data_end+0xfc00a614>
 400a828:	88c00054 	ori	r3,r17,1
 400a82c:	80c00115 	stw	r3,4(r16)
 400a830:	8463883a 	add	r17,r16,r17
 400a834:	10800054 	ori	r2,r2,1
 400a838:	9c400215 	stw	r17,8(r19)
 400a83c:	88800115 	stw	r2,4(r17)
 400a840:	9009883a 	mov	r4,r18
 400a844:	400f1100 	call	400f110 <__malloc_unlock>
 400a848:	80800204 	addi	r2,r16,8
 400a84c:	003f7106 	br	400a614 <__alt_data_end+0xfc00a614>
 400a850:	00c00504 	movi	r3,20
 400a854:	18804a2e 	bgeu	r3,r2,400a980 <_malloc_r+0x610>
 400a858:	00c01504 	movi	r3,84
 400a85c:	18806e36 	bltu	r3,r2,400aa18 <_malloc_r+0x6a8>
 400a860:	8804d33a 	srli	r2,r17,12
 400a864:	12001bc4 	addi	r8,r2,111
 400a868:	11c01b84 	addi	r7,r2,110
 400a86c:	4209883a 	add	r4,r8,r8
 400a870:	003edd06 	br	400a3e8 <__alt_data_end+0xfc00a3e8>
 400a874:	3804d27a 	srli	r2,r7,9
 400a878:	00c00104 	movi	r3,4
 400a87c:	1880442e 	bgeu	r3,r2,400a990 <_malloc_r+0x620>
 400a880:	00c00504 	movi	r3,20
 400a884:	18808136 	bltu	r3,r2,400aa8c <_malloc_r+0x71c>
 400a888:	11401704 	addi	r5,r2,92
 400a88c:	10c016c4 	addi	r3,r2,91
 400a890:	294b883a 	add	r5,r5,r5
 400a894:	294b883a 	add	r5,r5,r5
 400a898:	294b883a 	add	r5,r5,r5
 400a89c:	994b883a 	add	r5,r19,r5
 400a8a0:	28800017 	ldw	r2,0(r5)
 400a8a4:	01810074 	movhi	r6,1025
 400a8a8:	297ffe04 	addi	r5,r5,-8
 400a8ac:	31899904 	addi	r6,r6,9828
 400a8b0:	28806526 	beq	r5,r2,400aa48 <_malloc_r+0x6d8>
 400a8b4:	01bfff04 	movi	r6,-4
 400a8b8:	10c00117 	ldw	r3,4(r2)
 400a8bc:	1986703a 	and	r3,r3,r6
 400a8c0:	38c0022e 	bgeu	r7,r3,400a8cc <_malloc_r+0x55c>
 400a8c4:	10800217 	ldw	r2,8(r2)
 400a8c8:	28bffb1e 	bne	r5,r2,400a8b8 <__alt_data_end+0xfc00a8b8>
 400a8cc:	11400317 	ldw	r5,12(r2)
 400a8d0:	98c00117 	ldw	r3,4(r19)
 400a8d4:	81400315 	stw	r5,12(r16)
 400a8d8:	80800215 	stw	r2,8(r16)
 400a8dc:	2c000215 	stw	r16,8(r5)
 400a8e0:	14000315 	stw	r16,12(r2)
 400a8e4:	003ef806 	br	400a4c8 <__alt_data_end+0xfc00a4c8>
 400a8e8:	88c00054 	ori	r3,r17,1
 400a8ec:	80c00115 	stw	r3,4(r16)
 400a8f0:	8463883a 	add	r17,r16,r17
 400a8f4:	34400515 	stw	r17,20(r6)
 400a8f8:	34400415 	stw	r17,16(r6)
 400a8fc:	10c00054 	ori	r3,r2,1
 400a900:	8a000315 	stw	r8,12(r17)
 400a904:	8a000215 	stw	r8,8(r17)
 400a908:	88c00115 	stw	r3,4(r17)
 400a90c:	88a3883a 	add	r17,r17,r2
 400a910:	88800015 	stw	r2,0(r17)
 400a914:	9009883a 	mov	r4,r18
 400a918:	400f1100 	call	400f110 <__malloc_unlock>
 400a91c:	80800204 	addi	r2,r16,8
 400a920:	003f3c06 	br	400a614 <__alt_data_end+0xfc00a614>
 400a924:	30c00117 	ldw	r3,4(r6)
 400a928:	003ee706 	br	400a4c8 <__alt_data_end+0xfc00a4c8>
 400a92c:	5ac00044 	addi	r11,r11,1
 400a930:	588000cc 	andi	r2,r11,3
 400a934:	31800204 	addi	r6,r6,8
 400a938:	103efd1e 	bne	r2,zero,400a530 <__alt_data_end+0xfc00a530>
 400a93c:	00002406 	br	400a9d0 <_malloc_r+0x660>
 400a940:	14000317 	ldw	r16,12(r2)
 400a944:	143f251e 	bne	r2,r16,400a5dc <__alt_data_end+0xfc00a5dc>
 400a948:	21000084 	addi	r4,r4,2
 400a94c:	003ebc06 	br	400a440 <__alt_data_end+0xfc00a440>
 400a950:	8085883a 	add	r2,r16,r2
 400a954:	10c00117 	ldw	r3,4(r2)
 400a958:	81000317 	ldw	r4,12(r16)
 400a95c:	81400217 	ldw	r5,8(r16)
 400a960:	18c00054 	ori	r3,r3,1
 400a964:	10c00115 	stw	r3,4(r2)
 400a968:	29000315 	stw	r4,12(r5)
 400a96c:	21400215 	stw	r5,8(r4)
 400a970:	9009883a 	mov	r4,r18
 400a974:	400f1100 	call	400f110 <__malloc_unlock>
 400a978:	80800204 	addi	r2,r16,8
 400a97c:	003f2506 	br	400a614 <__alt_data_end+0xfc00a614>
 400a980:	12001704 	addi	r8,r2,92
 400a984:	11c016c4 	addi	r7,r2,91
 400a988:	4209883a 	add	r4,r8,r8
 400a98c:	003e9606 	br	400a3e8 <__alt_data_end+0xfc00a3e8>
 400a990:	3804d1ba 	srli	r2,r7,6
 400a994:	11400e44 	addi	r5,r2,57
 400a998:	10c00e04 	addi	r3,r2,56
 400a99c:	294b883a 	add	r5,r5,r5
 400a9a0:	003fbc06 	br	400a894 <__alt_data_end+0xfc00a894>
 400a9a4:	84ff5926 	beq	r16,r19,400a70c <__alt_data_end+0xfc00a70c>
 400a9a8:	00810074 	movhi	r2,1025
 400a9ac:	10899904 	addi	r2,r2,9828
 400a9b0:	14000217 	ldw	r16,8(r2)
 400a9b4:	00bfff04 	movi	r2,-4
 400a9b8:	80c00117 	ldw	r3,4(r16)
 400a9bc:	1886703a 	and	r3,r3,r2
 400a9c0:	003f9106 	br	400a808 <__alt_data_end+0xfc00a808>
 400a9c4:	60800217 	ldw	r2,8(r12)
 400a9c8:	213fffc4 	addi	r4,r4,-1
 400a9cc:	1300651e 	bne	r2,r12,400ab64 <_malloc_r+0x7f4>
 400a9d0:	208000cc 	andi	r2,r4,3
 400a9d4:	633ffe04 	addi	r12,r12,-8
 400a9d8:	103ffa1e 	bne	r2,zero,400a9c4 <__alt_data_end+0xfc00a9c4>
 400a9dc:	98800117 	ldw	r2,4(r19)
 400a9e0:	0146303a 	nor	r3,zero,r5
 400a9e4:	1884703a 	and	r2,r3,r2
 400a9e8:	98800115 	stw	r2,4(r19)
 400a9ec:	294b883a 	add	r5,r5,r5
 400a9f0:	117f2836 	bltu	r2,r5,400a694 <__alt_data_end+0xfc00a694>
 400a9f4:	283f2726 	beq	r5,zero,400a694 <__alt_data_end+0xfc00a694>
 400a9f8:	2886703a 	and	r3,r5,r2
 400a9fc:	5809883a 	mov	r4,r11
 400aa00:	183ec31e 	bne	r3,zero,400a510 <__alt_data_end+0xfc00a510>
 400aa04:	294b883a 	add	r5,r5,r5
 400aa08:	2886703a 	and	r3,r5,r2
 400aa0c:	21000104 	addi	r4,r4,4
 400aa10:	183ffc26 	beq	r3,zero,400aa04 <__alt_data_end+0xfc00aa04>
 400aa14:	003ebe06 	br	400a510 <__alt_data_end+0xfc00a510>
 400aa18:	00c05504 	movi	r3,340
 400aa1c:	18801236 	bltu	r3,r2,400aa68 <_malloc_r+0x6f8>
 400aa20:	8804d3fa 	srli	r2,r17,15
 400aa24:	12001e04 	addi	r8,r2,120
 400aa28:	11c01dc4 	addi	r7,r2,119
 400aa2c:	4209883a 	add	r4,r8,r8
 400aa30:	003e6d06 	br	400a3e8 <__alt_data_end+0xfc00a3e8>
 400aa34:	00c40004 	movi	r3,4096
 400aa38:	003f4606 	br	400a754 <__alt_data_end+0xfc00a754>
 400aa3c:	00800044 	movi	r2,1
 400aa40:	a0800115 	stw	r2,4(r20)
 400aa44:	003f7406 	br	400a818 <__alt_data_end+0xfc00a818>
 400aa48:	1805d0ba 	srai	r2,r3,2
 400aa4c:	01c00044 	movi	r7,1
 400aa50:	30c00117 	ldw	r3,4(r6)
 400aa54:	388e983a 	sll	r7,r7,r2
 400aa58:	2805883a 	mov	r2,r5
 400aa5c:	38c6b03a 	or	r3,r7,r3
 400aa60:	30c00115 	stw	r3,4(r6)
 400aa64:	003f9b06 	br	400a8d4 <__alt_data_end+0xfc00a8d4>
 400aa68:	00c15504 	movi	r3,1364
 400aa6c:	18801a36 	bltu	r3,r2,400aad8 <_malloc_r+0x768>
 400aa70:	8804d4ba 	srli	r2,r17,18
 400aa74:	12001f44 	addi	r8,r2,125
 400aa78:	11c01f04 	addi	r7,r2,124
 400aa7c:	4209883a 	add	r4,r8,r8
 400aa80:	003e5906 	br	400a3e8 <__alt_data_end+0xfc00a3e8>
 400aa84:	ad400404 	addi	r21,r21,16
 400aa88:	003f1706 	br	400a6e8 <__alt_data_end+0xfc00a6e8>
 400aa8c:	00c01504 	movi	r3,84
 400aa90:	18802336 	bltu	r3,r2,400ab20 <_malloc_r+0x7b0>
 400aa94:	3804d33a 	srli	r2,r7,12
 400aa98:	11401bc4 	addi	r5,r2,111
 400aa9c:	10c01b84 	addi	r3,r2,110
 400aaa0:	294b883a 	add	r5,r5,r5
 400aaa4:	003f7b06 	br	400a894 <__alt_data_end+0xfc00a894>
 400aaa8:	9c000217 	ldw	r16,8(r19)
 400aaac:	00bfff04 	movi	r2,-4
 400aab0:	80c00117 	ldw	r3,4(r16)
 400aab4:	1886703a 	and	r3,r3,r2
 400aab8:	003f5306 	br	400a808 <__alt_data_end+0xfc00a808>
 400aabc:	3083ffcc 	andi	r2,r6,4095
 400aac0:	103f181e 	bne	r2,zero,400a724 <__alt_data_end+0xfc00a724>
 400aac4:	99000217 	ldw	r4,8(r19)
 400aac8:	b545883a 	add	r2,r22,r21
 400aacc:	10800054 	ori	r2,r2,1
 400aad0:	20800115 	stw	r2,4(r4)
 400aad4:	003f3e06 	br	400a7d0 <__alt_data_end+0xfc00a7d0>
 400aad8:	01003f84 	movi	r4,254
 400aadc:	02001fc4 	movi	r8,127
 400aae0:	01c01f84 	movi	r7,126
 400aae4:	003e4006 	br	400a3e8 <__alt_data_end+0xfc00a3e8>
 400aae8:	00810074 	movhi	r2,1025
 400aaec:	108fa304 	addi	r2,r2,16012
 400aaf0:	15000015 	stw	r20,0(r2)
 400aaf4:	003f1106 	br	400a73c <__alt_data_end+0xfc00a73c>
 400aaf8:	00800044 	movi	r2,1
 400aafc:	002b883a 	mov	r21,zero
 400ab00:	003f1f06 	br	400a780 <__alt_data_end+0xfc00a780>
 400ab04:	81400204 	addi	r5,r16,8
 400ab08:	9009883a 	mov	r4,r18
 400ab0c:	400d6c40 	call	400d6c4 <_free_r>
 400ab10:	00810074 	movhi	r2,1025
 400ab14:	10973904 	addi	r2,r2,23780
 400ab18:	10c00017 	ldw	r3,0(r2)
 400ab1c:	003f2c06 	br	400a7d0 <__alt_data_end+0xfc00a7d0>
 400ab20:	00c05504 	movi	r3,340
 400ab24:	18800536 	bltu	r3,r2,400ab3c <_malloc_r+0x7cc>
 400ab28:	3804d3fa 	srli	r2,r7,15
 400ab2c:	11401e04 	addi	r5,r2,120
 400ab30:	10c01dc4 	addi	r3,r2,119
 400ab34:	294b883a 	add	r5,r5,r5
 400ab38:	003f5606 	br	400a894 <__alt_data_end+0xfc00a894>
 400ab3c:	00c15504 	movi	r3,1364
 400ab40:	18800536 	bltu	r3,r2,400ab58 <_malloc_r+0x7e8>
 400ab44:	3804d4ba 	srli	r2,r7,18
 400ab48:	11401f44 	addi	r5,r2,125
 400ab4c:	10c01f04 	addi	r3,r2,124
 400ab50:	294b883a 	add	r5,r5,r5
 400ab54:	003f4f06 	br	400a894 <__alt_data_end+0xfc00a894>
 400ab58:	01403f84 	movi	r5,254
 400ab5c:	00c01f84 	movi	r3,126
 400ab60:	003f4c06 	br	400a894 <__alt_data_end+0xfc00a894>
 400ab64:	98800117 	ldw	r2,4(r19)
 400ab68:	003fa006 	br	400a9ec <__alt_data_end+0xfc00a9ec>
 400ab6c:	8808d0fa 	srli	r4,r17,3
 400ab70:	20800044 	addi	r2,r4,1
 400ab74:	1085883a 	add	r2,r2,r2
 400ab78:	003e9006 	br	400a5bc <__alt_data_end+0xfc00a5bc>

0400ab7c <memchr>:
 400ab7c:	208000cc 	andi	r2,r4,3
 400ab80:	280f883a 	mov	r7,r5
 400ab84:	10003426 	beq	r2,zero,400ac58 <memchr+0xdc>
 400ab88:	30bfffc4 	addi	r2,r6,-1
 400ab8c:	30001a26 	beq	r6,zero,400abf8 <memchr+0x7c>
 400ab90:	20c00003 	ldbu	r3,0(r4)
 400ab94:	29803fcc 	andi	r6,r5,255
 400ab98:	30c0051e 	bne	r6,r3,400abb0 <memchr+0x34>
 400ab9c:	00001806 	br	400ac00 <memchr+0x84>
 400aba0:	10001526 	beq	r2,zero,400abf8 <memchr+0x7c>
 400aba4:	20c00003 	ldbu	r3,0(r4)
 400aba8:	10bfffc4 	addi	r2,r2,-1
 400abac:	30c01426 	beq	r6,r3,400ac00 <memchr+0x84>
 400abb0:	21000044 	addi	r4,r4,1
 400abb4:	20c000cc 	andi	r3,r4,3
 400abb8:	183ff91e 	bne	r3,zero,400aba0 <__alt_data_end+0xfc00aba0>
 400abbc:	020000c4 	movi	r8,3
 400abc0:	40801136 	bltu	r8,r2,400ac08 <memchr+0x8c>
 400abc4:	10000c26 	beq	r2,zero,400abf8 <memchr+0x7c>
 400abc8:	20c00003 	ldbu	r3,0(r4)
 400abcc:	29403fcc 	andi	r5,r5,255
 400abd0:	28c00b26 	beq	r5,r3,400ac00 <memchr+0x84>
 400abd4:	20c00044 	addi	r3,r4,1
 400abd8:	39803fcc 	andi	r6,r7,255
 400abdc:	2089883a 	add	r4,r4,r2
 400abe0:	00000306 	br	400abf0 <memchr+0x74>
 400abe4:	18c00044 	addi	r3,r3,1
 400abe8:	197fffc3 	ldbu	r5,-1(r3)
 400abec:	31400526 	beq	r6,r5,400ac04 <memchr+0x88>
 400abf0:	1805883a 	mov	r2,r3
 400abf4:	20fffb1e 	bne	r4,r3,400abe4 <__alt_data_end+0xfc00abe4>
 400abf8:	0005883a 	mov	r2,zero
 400abfc:	f800283a 	ret
 400ac00:	2005883a 	mov	r2,r4
 400ac04:	f800283a 	ret
 400ac08:	28c03fcc 	andi	r3,r5,255
 400ac0c:	1812923a 	slli	r9,r3,8
 400ac10:	02ffbff4 	movhi	r11,65279
 400ac14:	02a02074 	movhi	r10,32897
 400ac18:	48d2b03a 	or	r9,r9,r3
 400ac1c:	4806943a 	slli	r3,r9,16
 400ac20:	5affbfc4 	addi	r11,r11,-257
 400ac24:	52a02004 	addi	r10,r10,-32640
 400ac28:	48d2b03a 	or	r9,r9,r3
 400ac2c:	20c00017 	ldw	r3,0(r4)
 400ac30:	48c6f03a 	xor	r3,r9,r3
 400ac34:	1acd883a 	add	r6,r3,r11
 400ac38:	00c6303a 	nor	r3,zero,r3
 400ac3c:	30c6703a 	and	r3,r6,r3
 400ac40:	1a86703a 	and	r3,r3,r10
 400ac44:	183fe01e 	bne	r3,zero,400abc8 <__alt_data_end+0xfc00abc8>
 400ac48:	10bfff04 	addi	r2,r2,-4
 400ac4c:	21000104 	addi	r4,r4,4
 400ac50:	40bff636 	bltu	r8,r2,400ac2c <__alt_data_end+0xfc00ac2c>
 400ac54:	003fdb06 	br	400abc4 <__alt_data_end+0xfc00abc4>
 400ac58:	3005883a 	mov	r2,r6
 400ac5c:	003fd706 	br	400abbc <__alt_data_end+0xfc00abbc>

0400ac60 <_Balloc>:
 400ac60:	20801317 	ldw	r2,76(r4)
 400ac64:	defffc04 	addi	sp,sp,-16
 400ac68:	dc400115 	stw	r17,4(sp)
 400ac6c:	dc000015 	stw	r16,0(sp)
 400ac70:	dfc00315 	stw	ra,12(sp)
 400ac74:	dc800215 	stw	r18,8(sp)
 400ac78:	2023883a 	mov	r17,r4
 400ac7c:	2821883a 	mov	r16,r5
 400ac80:	10000f26 	beq	r2,zero,400acc0 <_Balloc+0x60>
 400ac84:	8407883a 	add	r3,r16,r16
 400ac88:	18c7883a 	add	r3,r3,r3
 400ac8c:	10c7883a 	add	r3,r2,r3
 400ac90:	18800017 	ldw	r2,0(r3)
 400ac94:	10001126 	beq	r2,zero,400acdc <_Balloc+0x7c>
 400ac98:	11000017 	ldw	r4,0(r2)
 400ac9c:	19000015 	stw	r4,0(r3)
 400aca0:	10000415 	stw	zero,16(r2)
 400aca4:	10000315 	stw	zero,12(r2)
 400aca8:	dfc00317 	ldw	ra,12(sp)
 400acac:	dc800217 	ldw	r18,8(sp)
 400acb0:	dc400117 	ldw	r17,4(sp)
 400acb4:	dc000017 	ldw	r16,0(sp)
 400acb8:	dec00404 	addi	sp,sp,16
 400acbc:	f800283a 	ret
 400acc0:	01800844 	movi	r6,33
 400acc4:	01400104 	movi	r5,4
 400acc8:	400d4c40 	call	400d4c4 <_calloc_r>
 400accc:	88801315 	stw	r2,76(r17)
 400acd0:	103fec1e 	bne	r2,zero,400ac84 <__alt_data_end+0xfc00ac84>
 400acd4:	0005883a 	mov	r2,zero
 400acd8:	003ff306 	br	400aca8 <__alt_data_end+0xfc00aca8>
 400acdc:	01400044 	movi	r5,1
 400ace0:	2c24983a 	sll	r18,r5,r16
 400ace4:	8809883a 	mov	r4,r17
 400ace8:	91800144 	addi	r6,r18,5
 400acec:	318d883a 	add	r6,r6,r6
 400acf0:	318d883a 	add	r6,r6,r6
 400acf4:	400d4c40 	call	400d4c4 <_calloc_r>
 400acf8:	103ff626 	beq	r2,zero,400acd4 <__alt_data_end+0xfc00acd4>
 400acfc:	14000115 	stw	r16,4(r2)
 400ad00:	14800215 	stw	r18,8(r2)
 400ad04:	003fe606 	br	400aca0 <__alt_data_end+0xfc00aca0>

0400ad08 <_Bfree>:
 400ad08:	28000826 	beq	r5,zero,400ad2c <_Bfree+0x24>
 400ad0c:	28c00117 	ldw	r3,4(r5)
 400ad10:	20801317 	ldw	r2,76(r4)
 400ad14:	18c7883a 	add	r3,r3,r3
 400ad18:	18c7883a 	add	r3,r3,r3
 400ad1c:	10c5883a 	add	r2,r2,r3
 400ad20:	10c00017 	ldw	r3,0(r2)
 400ad24:	28c00015 	stw	r3,0(r5)
 400ad28:	11400015 	stw	r5,0(r2)
 400ad2c:	f800283a 	ret

0400ad30 <__multadd>:
 400ad30:	defff704 	addi	sp,sp,-36
 400ad34:	dc800215 	stw	r18,8(sp)
 400ad38:	2c800417 	ldw	r18,16(r5)
 400ad3c:	dd800615 	stw	r22,24(sp)
 400ad40:	dd400515 	stw	r21,20(sp)
 400ad44:	dd000415 	stw	r20,16(sp)
 400ad48:	dcc00315 	stw	r19,12(sp)
 400ad4c:	dc400115 	stw	r17,4(sp)
 400ad50:	dc000015 	stw	r16,0(sp)
 400ad54:	dfc00815 	stw	ra,32(sp)
 400ad58:	ddc00715 	stw	r23,28(sp)
 400ad5c:	2827883a 	mov	r19,r5
 400ad60:	2029883a 	mov	r20,r4
 400ad64:	3023883a 	mov	r17,r6
 400ad68:	3821883a 	mov	r16,r7
 400ad6c:	2d400504 	addi	r21,r5,20
 400ad70:	002d883a 	mov	r22,zero
 400ad74:	adc00017 	ldw	r23,0(r21)
 400ad78:	880b883a 	mov	r5,r17
 400ad7c:	ad400104 	addi	r21,r21,4
 400ad80:	b93fffcc 	andi	r4,r23,65535
 400ad84:	40024640 	call	4002464 <__mulsi3>
 400ad88:	b808d43a 	srli	r4,r23,16
 400ad8c:	880b883a 	mov	r5,r17
 400ad90:	1421883a 	add	r16,r2,r16
 400ad94:	40024640 	call	4002464 <__mulsi3>
 400ad98:	800ed43a 	srli	r7,r16,16
 400ad9c:	80ffffcc 	andi	r3,r16,65535
 400ada0:	b5800044 	addi	r22,r22,1
 400ada4:	11c5883a 	add	r2,r2,r7
 400ada8:	100e943a 	slli	r7,r2,16
 400adac:	1020d43a 	srli	r16,r2,16
 400adb0:	38c7883a 	add	r3,r7,r3
 400adb4:	a8ffff15 	stw	r3,-4(r21)
 400adb8:	b4bfee16 	blt	r22,r18,400ad74 <__alt_data_end+0xfc00ad74>
 400adbc:	80000926 	beq	r16,zero,400ade4 <__multadd+0xb4>
 400adc0:	98800217 	ldw	r2,8(r19)
 400adc4:	9080130e 	bge	r18,r2,400ae14 <__multadd+0xe4>
 400adc8:	90800144 	addi	r2,r18,5
 400adcc:	1085883a 	add	r2,r2,r2
 400add0:	1085883a 	add	r2,r2,r2
 400add4:	9885883a 	add	r2,r19,r2
 400add8:	14000015 	stw	r16,0(r2)
 400addc:	94800044 	addi	r18,r18,1
 400ade0:	9c800415 	stw	r18,16(r19)
 400ade4:	9805883a 	mov	r2,r19
 400ade8:	dfc00817 	ldw	ra,32(sp)
 400adec:	ddc00717 	ldw	r23,28(sp)
 400adf0:	dd800617 	ldw	r22,24(sp)
 400adf4:	dd400517 	ldw	r21,20(sp)
 400adf8:	dd000417 	ldw	r20,16(sp)
 400adfc:	dcc00317 	ldw	r19,12(sp)
 400ae00:	dc800217 	ldw	r18,8(sp)
 400ae04:	dc400117 	ldw	r17,4(sp)
 400ae08:	dc000017 	ldw	r16,0(sp)
 400ae0c:	dec00904 	addi	sp,sp,36
 400ae10:	f800283a 	ret
 400ae14:	99400117 	ldw	r5,4(r19)
 400ae18:	a009883a 	mov	r4,r20
 400ae1c:	29400044 	addi	r5,r5,1
 400ae20:	400ac600 	call	400ac60 <_Balloc>
 400ae24:	99800417 	ldw	r6,16(r19)
 400ae28:	99400304 	addi	r5,r19,12
 400ae2c:	11000304 	addi	r4,r2,12
 400ae30:	31800084 	addi	r6,r6,2
 400ae34:	318d883a 	add	r6,r6,r6
 400ae38:	318d883a 	add	r6,r6,r6
 400ae3c:	1023883a 	mov	r17,r2
 400ae40:	40064240 	call	4006424 <memcpy>
 400ae44:	98000a26 	beq	r19,zero,400ae70 <__multadd+0x140>
 400ae48:	98c00117 	ldw	r3,4(r19)
 400ae4c:	a0801317 	ldw	r2,76(r20)
 400ae50:	18c7883a 	add	r3,r3,r3
 400ae54:	18c7883a 	add	r3,r3,r3
 400ae58:	10c5883a 	add	r2,r2,r3
 400ae5c:	10c00017 	ldw	r3,0(r2)
 400ae60:	98c00015 	stw	r3,0(r19)
 400ae64:	14c00015 	stw	r19,0(r2)
 400ae68:	8827883a 	mov	r19,r17
 400ae6c:	003fd606 	br	400adc8 <__alt_data_end+0xfc00adc8>
 400ae70:	8827883a 	mov	r19,r17
 400ae74:	003fd406 	br	400adc8 <__alt_data_end+0xfc00adc8>

0400ae78 <__s2b>:
 400ae78:	defff904 	addi	sp,sp,-28
 400ae7c:	dc400115 	stw	r17,4(sp)
 400ae80:	dc000015 	stw	r16,0(sp)
 400ae84:	2023883a 	mov	r17,r4
 400ae88:	2821883a 	mov	r16,r5
 400ae8c:	39000204 	addi	r4,r7,8
 400ae90:	01400244 	movi	r5,9
 400ae94:	dcc00315 	stw	r19,12(sp)
 400ae98:	dc800215 	stw	r18,8(sp)
 400ae9c:	dfc00615 	stw	ra,24(sp)
 400aea0:	dd400515 	stw	r21,20(sp)
 400aea4:	dd000415 	stw	r20,16(sp)
 400aea8:	3825883a 	mov	r18,r7
 400aeac:	3027883a 	mov	r19,r6
 400aeb0:	40022b00 	call	40022b0 <__divsi3>
 400aeb4:	00c00044 	movi	r3,1
 400aeb8:	000b883a 	mov	r5,zero
 400aebc:	1880030e 	bge	r3,r2,400aecc <__s2b+0x54>
 400aec0:	18c7883a 	add	r3,r3,r3
 400aec4:	29400044 	addi	r5,r5,1
 400aec8:	18bffd16 	blt	r3,r2,400aec0 <__alt_data_end+0xfc00aec0>
 400aecc:	8809883a 	mov	r4,r17
 400aed0:	400ac600 	call	400ac60 <_Balloc>
 400aed4:	d8c00717 	ldw	r3,28(sp)
 400aed8:	10c00515 	stw	r3,20(r2)
 400aedc:	00c00044 	movi	r3,1
 400aee0:	10c00415 	stw	r3,16(r2)
 400aee4:	00c00244 	movi	r3,9
 400aee8:	1cc0210e 	bge	r3,r19,400af70 <__s2b+0xf8>
 400aeec:	80eb883a 	add	r21,r16,r3
 400aef0:	a829883a 	mov	r20,r21
 400aef4:	84e1883a 	add	r16,r16,r19
 400aef8:	a1c00007 	ldb	r7,0(r20)
 400aefc:	01800284 	movi	r6,10
 400af00:	a5000044 	addi	r20,r20,1
 400af04:	100b883a 	mov	r5,r2
 400af08:	39fff404 	addi	r7,r7,-48
 400af0c:	8809883a 	mov	r4,r17
 400af10:	400ad300 	call	400ad30 <__multadd>
 400af14:	a43ff81e 	bne	r20,r16,400aef8 <__alt_data_end+0xfc00aef8>
 400af18:	ace1883a 	add	r16,r21,r19
 400af1c:	843ffe04 	addi	r16,r16,-8
 400af20:	9c800a0e 	bge	r19,r18,400af4c <__s2b+0xd4>
 400af24:	94e5c83a 	sub	r18,r18,r19
 400af28:	84a5883a 	add	r18,r16,r18
 400af2c:	81c00007 	ldb	r7,0(r16)
 400af30:	01800284 	movi	r6,10
 400af34:	84000044 	addi	r16,r16,1
 400af38:	100b883a 	mov	r5,r2
 400af3c:	39fff404 	addi	r7,r7,-48
 400af40:	8809883a 	mov	r4,r17
 400af44:	400ad300 	call	400ad30 <__multadd>
 400af48:	84bff81e 	bne	r16,r18,400af2c <__alt_data_end+0xfc00af2c>
 400af4c:	dfc00617 	ldw	ra,24(sp)
 400af50:	dd400517 	ldw	r21,20(sp)
 400af54:	dd000417 	ldw	r20,16(sp)
 400af58:	dcc00317 	ldw	r19,12(sp)
 400af5c:	dc800217 	ldw	r18,8(sp)
 400af60:	dc400117 	ldw	r17,4(sp)
 400af64:	dc000017 	ldw	r16,0(sp)
 400af68:	dec00704 	addi	sp,sp,28
 400af6c:	f800283a 	ret
 400af70:	84000284 	addi	r16,r16,10
 400af74:	1827883a 	mov	r19,r3
 400af78:	003fe906 	br	400af20 <__alt_data_end+0xfc00af20>

0400af7c <__hi0bits>:
 400af7c:	20bfffec 	andhi	r2,r4,65535
 400af80:	1000141e 	bne	r2,zero,400afd4 <__hi0bits+0x58>
 400af84:	2008943a 	slli	r4,r4,16
 400af88:	00800404 	movi	r2,16
 400af8c:	20ffc02c 	andhi	r3,r4,65280
 400af90:	1800021e 	bne	r3,zero,400af9c <__hi0bits+0x20>
 400af94:	2008923a 	slli	r4,r4,8
 400af98:	10800204 	addi	r2,r2,8
 400af9c:	20fc002c 	andhi	r3,r4,61440
 400afa0:	1800021e 	bne	r3,zero,400afac <__hi0bits+0x30>
 400afa4:	2008913a 	slli	r4,r4,4
 400afa8:	10800104 	addi	r2,r2,4
 400afac:	20f0002c 	andhi	r3,r4,49152
 400afb0:	1800031e 	bne	r3,zero,400afc0 <__hi0bits+0x44>
 400afb4:	2109883a 	add	r4,r4,r4
 400afb8:	10800084 	addi	r2,r2,2
 400afbc:	2109883a 	add	r4,r4,r4
 400afc0:	20000316 	blt	r4,zero,400afd0 <__hi0bits+0x54>
 400afc4:	2110002c 	andhi	r4,r4,16384
 400afc8:	2000041e 	bne	r4,zero,400afdc <__hi0bits+0x60>
 400afcc:	00800804 	movi	r2,32
 400afd0:	f800283a 	ret
 400afd4:	0005883a 	mov	r2,zero
 400afd8:	003fec06 	br	400af8c <__alt_data_end+0xfc00af8c>
 400afdc:	10800044 	addi	r2,r2,1
 400afe0:	f800283a 	ret

0400afe4 <__lo0bits>:
 400afe4:	20c00017 	ldw	r3,0(r4)
 400afe8:	188001cc 	andi	r2,r3,7
 400afec:	10000826 	beq	r2,zero,400b010 <__lo0bits+0x2c>
 400aff0:	1880004c 	andi	r2,r3,1
 400aff4:	1000211e 	bne	r2,zero,400b07c <__lo0bits+0x98>
 400aff8:	1880008c 	andi	r2,r3,2
 400affc:	1000211e 	bne	r2,zero,400b084 <__lo0bits+0xa0>
 400b000:	1806d0ba 	srli	r3,r3,2
 400b004:	00800084 	movi	r2,2
 400b008:	20c00015 	stw	r3,0(r4)
 400b00c:	f800283a 	ret
 400b010:	18bfffcc 	andi	r2,r3,65535
 400b014:	10001326 	beq	r2,zero,400b064 <__lo0bits+0x80>
 400b018:	0005883a 	mov	r2,zero
 400b01c:	19403fcc 	andi	r5,r3,255
 400b020:	2800021e 	bne	r5,zero,400b02c <__lo0bits+0x48>
 400b024:	1806d23a 	srli	r3,r3,8
 400b028:	10800204 	addi	r2,r2,8
 400b02c:	194003cc 	andi	r5,r3,15
 400b030:	2800021e 	bne	r5,zero,400b03c <__lo0bits+0x58>
 400b034:	1806d13a 	srli	r3,r3,4
 400b038:	10800104 	addi	r2,r2,4
 400b03c:	194000cc 	andi	r5,r3,3
 400b040:	2800021e 	bne	r5,zero,400b04c <__lo0bits+0x68>
 400b044:	1806d0ba 	srli	r3,r3,2
 400b048:	10800084 	addi	r2,r2,2
 400b04c:	1940004c 	andi	r5,r3,1
 400b050:	2800081e 	bne	r5,zero,400b074 <__lo0bits+0x90>
 400b054:	1806d07a 	srli	r3,r3,1
 400b058:	1800051e 	bne	r3,zero,400b070 <__lo0bits+0x8c>
 400b05c:	00800804 	movi	r2,32
 400b060:	f800283a 	ret
 400b064:	1806d43a 	srli	r3,r3,16
 400b068:	00800404 	movi	r2,16
 400b06c:	003feb06 	br	400b01c <__alt_data_end+0xfc00b01c>
 400b070:	10800044 	addi	r2,r2,1
 400b074:	20c00015 	stw	r3,0(r4)
 400b078:	f800283a 	ret
 400b07c:	0005883a 	mov	r2,zero
 400b080:	f800283a 	ret
 400b084:	1806d07a 	srli	r3,r3,1
 400b088:	00800044 	movi	r2,1
 400b08c:	20c00015 	stw	r3,0(r4)
 400b090:	f800283a 	ret

0400b094 <__i2b>:
 400b094:	defffd04 	addi	sp,sp,-12
 400b098:	dc000015 	stw	r16,0(sp)
 400b09c:	04000044 	movi	r16,1
 400b0a0:	dc400115 	stw	r17,4(sp)
 400b0a4:	2823883a 	mov	r17,r5
 400b0a8:	800b883a 	mov	r5,r16
 400b0ac:	dfc00215 	stw	ra,8(sp)
 400b0b0:	400ac600 	call	400ac60 <_Balloc>
 400b0b4:	14400515 	stw	r17,20(r2)
 400b0b8:	14000415 	stw	r16,16(r2)
 400b0bc:	dfc00217 	ldw	ra,8(sp)
 400b0c0:	dc400117 	ldw	r17,4(sp)
 400b0c4:	dc000017 	ldw	r16,0(sp)
 400b0c8:	dec00304 	addi	sp,sp,12
 400b0cc:	f800283a 	ret

0400b0d0 <__multiply>:
 400b0d0:	deffef04 	addi	sp,sp,-68
 400b0d4:	dc400815 	stw	r17,32(sp)
 400b0d8:	dc000715 	stw	r16,28(sp)
 400b0dc:	34400417 	ldw	r17,16(r6)
 400b0e0:	2c000417 	ldw	r16,16(r5)
 400b0e4:	dd800d15 	stw	r22,52(sp)
 400b0e8:	dc800915 	stw	r18,36(sp)
 400b0ec:	dfc01015 	stw	ra,64(sp)
 400b0f0:	df000f15 	stw	fp,60(sp)
 400b0f4:	ddc00e15 	stw	r23,56(sp)
 400b0f8:	dd400c15 	stw	r21,48(sp)
 400b0fc:	dd000b15 	stw	r20,44(sp)
 400b100:	dcc00a15 	stw	r19,40(sp)
 400b104:	2825883a 	mov	r18,r5
 400b108:	302d883a 	mov	r22,r6
 400b10c:	8440050e 	bge	r16,r17,400b124 <__multiply+0x54>
 400b110:	8007883a 	mov	r3,r16
 400b114:	3025883a 	mov	r18,r6
 400b118:	8821883a 	mov	r16,r17
 400b11c:	282d883a 	mov	r22,r5
 400b120:	1823883a 	mov	r17,r3
 400b124:	90800217 	ldw	r2,8(r18)
 400b128:	8447883a 	add	r3,r16,r17
 400b12c:	d8c00215 	stw	r3,8(sp)
 400b130:	91400117 	ldw	r5,4(r18)
 400b134:	10c0010e 	bge	r2,r3,400b13c <__multiply+0x6c>
 400b138:	29400044 	addi	r5,r5,1
 400b13c:	400ac600 	call	400ac60 <_Balloc>
 400b140:	d8c00217 	ldw	r3,8(sp)
 400b144:	d8800615 	stw	r2,24(sp)
 400b148:	18eb883a 	add	r21,r3,r3
 400b14c:	ad6b883a 	add	r21,r21,r21
 400b150:	10c00504 	addi	r3,r2,20
 400b154:	1d6b883a 	add	r21,r3,r21
 400b158:	d8c00115 	stw	r3,4(sp)
 400b15c:	dd400315 	stw	r21,12(sp)
 400b160:	1805883a 	mov	r2,r3
 400b164:	1d40042e 	bgeu	r3,r21,400b178 <__multiply+0xa8>
 400b168:	d8c00317 	ldw	r3,12(sp)
 400b16c:	10000015 	stw	zero,0(r2)
 400b170:	10800104 	addi	r2,r2,4
 400b174:	10fffc36 	bltu	r2,r3,400b168 <__alt_data_end+0xfc00b168>
 400b178:	8c63883a 	add	r17,r17,r17
 400b17c:	b5800504 	addi	r22,r22,20
 400b180:	8c63883a 	add	r17,r17,r17
 400b184:	94800504 	addi	r18,r18,20
 400b188:	8421883a 	add	r16,r16,r16
 400b18c:	b463883a 	add	r17,r22,r17
 400b190:	8421883a 	add	r16,r16,r16
 400b194:	dd800015 	stw	r22,0(sp)
 400b198:	dc800415 	stw	r18,16(sp)
 400b19c:	dc400515 	stw	r17,20(sp)
 400b1a0:	9429883a 	add	r20,r18,r16
 400b1a4:	b4404f2e 	bgeu	r22,r17,400b2e4 <__multiply+0x214>
 400b1a8:	d8c00017 	ldw	r3,0(sp)
 400b1ac:	1c800017 	ldw	r18,0(r3)
 400b1b0:	947fffcc 	andi	r17,r18,65535
 400b1b4:	88001e26 	beq	r17,zero,400b230 <__multiply+0x160>
 400b1b8:	dd800117 	ldw	r22,4(sp)
 400b1bc:	dd400417 	ldw	r21,16(sp)
 400b1c0:	0027883a 	mov	r19,zero
 400b1c4:	ac800017 	ldw	r18,0(r21)
 400b1c8:	b4000017 	ldw	r16,0(r22)
 400b1cc:	880b883a 	mov	r5,r17
 400b1d0:	913fffcc 	andi	r4,r18,65535
 400b1d4:	40024640 	call	4002464 <__mulsi3>
 400b1d8:	9008d43a 	srli	r4,r18,16
 400b1dc:	84bfffcc 	andi	r18,r16,65535
 400b1e0:	1485883a 	add	r2,r2,r18
 400b1e4:	14e5883a 	add	r18,r2,r19
 400b1e8:	8020d43a 	srli	r16,r16,16
 400b1ec:	9026d43a 	srli	r19,r18,16
 400b1f0:	880b883a 	mov	r5,r17
 400b1f4:	40024640 	call	4002464 <__mulsi3>
 400b1f8:	1405883a 	add	r2,r2,r16
 400b1fc:	14e1883a 	add	r16,r2,r19
 400b200:	90ffffcc 	andi	r3,r18,65535
 400b204:	8024943a 	slli	r18,r16,16
 400b208:	ad400104 	addi	r21,r21,4
 400b20c:	b005883a 	mov	r2,r22
 400b210:	90c6b03a 	or	r3,r18,r3
 400b214:	b0c00015 	stw	r3,0(r22)
 400b218:	8026d43a 	srli	r19,r16,16
 400b21c:	b5800104 	addi	r22,r22,4
 400b220:	ad3fe836 	bltu	r21,r20,400b1c4 <__alt_data_end+0xfc00b1c4>
 400b224:	d8c00017 	ldw	r3,0(sp)
 400b228:	14c00115 	stw	r19,4(r2)
 400b22c:	1c800017 	ldw	r18,0(r3)
 400b230:	9024d43a 	srli	r18,r18,16
 400b234:	90002226 	beq	r18,zero,400b2c0 <__multiply+0x1f0>
 400b238:	d8c00117 	ldw	r3,4(sp)
 400b23c:	dd800417 	ldw	r22,16(sp)
 400b240:	002f883a 	mov	r23,zero
 400b244:	1f000017 	ldw	fp,0(r3)
 400b248:	1823883a 	mov	r17,r3
 400b24c:	182b883a 	mov	r21,r3
 400b250:	e021883a 	mov	r16,fp
 400b254:	00000106 	br	400b25c <__multiply+0x18c>
 400b258:	982b883a 	mov	r21,r19
 400b25c:	b100000b 	ldhu	r4,0(r22)
 400b260:	8020d43a 	srli	r16,r16,16
 400b264:	900b883a 	mov	r5,r18
 400b268:	40024640 	call	4002464 <__mulsi3>
 400b26c:	1405883a 	add	r2,r2,r16
 400b270:	15ef883a 	add	r23,r2,r23
 400b274:	b804943a 	slli	r2,r23,16
 400b278:	e0ffffcc 	andi	r3,fp,65535
 400b27c:	8c400104 	addi	r17,r17,4
 400b280:	10c6b03a 	or	r3,r2,r3
 400b284:	88ffff15 	stw	r3,-4(r17)
 400b288:	b5800104 	addi	r22,r22,4
 400b28c:	b13fff17 	ldw	r4,-4(r22)
 400b290:	acc00104 	addi	r19,r21,4
 400b294:	900b883a 	mov	r5,r18
 400b298:	2008d43a 	srli	r4,r4,16
 400b29c:	9c000017 	ldw	r16,0(r19)
 400b2a0:	40024640 	call	4002464 <__mulsi3>
 400b2a4:	b806d43a 	srli	r3,r23,16
 400b2a8:	813fffcc 	andi	r4,r16,65535
 400b2ac:	1105883a 	add	r2,r2,r4
 400b2b0:	10f9883a 	add	fp,r2,r3
 400b2b4:	e02ed43a 	srli	r23,fp,16
 400b2b8:	b53fe736 	bltu	r22,r20,400b258 <__alt_data_end+0xfc00b258>
 400b2bc:	af000115 	stw	fp,4(r21)
 400b2c0:	d8c00017 	ldw	r3,0(sp)
 400b2c4:	d9000517 	ldw	r4,20(sp)
 400b2c8:	18c00104 	addi	r3,r3,4
 400b2cc:	d8c00015 	stw	r3,0(sp)
 400b2d0:	d8c00117 	ldw	r3,4(sp)
 400b2d4:	18c00104 	addi	r3,r3,4
 400b2d8:	d8c00115 	stw	r3,4(sp)
 400b2dc:	d8c00017 	ldw	r3,0(sp)
 400b2e0:	193fb136 	bltu	r3,r4,400b1a8 <__alt_data_end+0xfc00b1a8>
 400b2e4:	d8c00217 	ldw	r3,8(sp)
 400b2e8:	00c00c0e 	bge	zero,r3,400b31c <__multiply+0x24c>
 400b2ec:	d8c00317 	ldw	r3,12(sp)
 400b2f0:	18bfff17 	ldw	r2,-4(r3)
 400b2f4:	1d7fff04 	addi	r21,r3,-4
 400b2f8:	10000326 	beq	r2,zero,400b308 <__multiply+0x238>
 400b2fc:	00000706 	br	400b31c <__multiply+0x24c>
 400b300:	a8800017 	ldw	r2,0(r21)
 400b304:	1000051e 	bne	r2,zero,400b31c <__multiply+0x24c>
 400b308:	d8c00217 	ldw	r3,8(sp)
 400b30c:	ad7fff04 	addi	r21,r21,-4
 400b310:	18ffffc4 	addi	r3,r3,-1
 400b314:	d8c00215 	stw	r3,8(sp)
 400b318:	183ff91e 	bne	r3,zero,400b300 <__alt_data_end+0xfc00b300>
 400b31c:	d8c00617 	ldw	r3,24(sp)
 400b320:	d9000217 	ldw	r4,8(sp)
 400b324:	1805883a 	mov	r2,r3
 400b328:	19000415 	stw	r4,16(r3)
 400b32c:	dfc01017 	ldw	ra,64(sp)
 400b330:	df000f17 	ldw	fp,60(sp)
 400b334:	ddc00e17 	ldw	r23,56(sp)
 400b338:	dd800d17 	ldw	r22,52(sp)
 400b33c:	dd400c17 	ldw	r21,48(sp)
 400b340:	dd000b17 	ldw	r20,44(sp)
 400b344:	dcc00a17 	ldw	r19,40(sp)
 400b348:	dc800917 	ldw	r18,36(sp)
 400b34c:	dc400817 	ldw	r17,32(sp)
 400b350:	dc000717 	ldw	r16,28(sp)
 400b354:	dec01104 	addi	sp,sp,68
 400b358:	f800283a 	ret

0400b35c <__pow5mult>:
 400b35c:	defffa04 	addi	sp,sp,-24
 400b360:	dcc00315 	stw	r19,12(sp)
 400b364:	dc000015 	stw	r16,0(sp)
 400b368:	dfc00515 	stw	ra,20(sp)
 400b36c:	dd000415 	stw	r20,16(sp)
 400b370:	dc800215 	stw	r18,8(sp)
 400b374:	dc400115 	stw	r17,4(sp)
 400b378:	308000cc 	andi	r2,r6,3
 400b37c:	3021883a 	mov	r16,r6
 400b380:	2027883a 	mov	r19,r4
 400b384:	10002f1e 	bne	r2,zero,400b444 <__pow5mult+0xe8>
 400b388:	2825883a 	mov	r18,r5
 400b38c:	8021d0ba 	srai	r16,r16,2
 400b390:	80001a26 	beq	r16,zero,400b3fc <__pow5mult+0xa0>
 400b394:	9c401217 	ldw	r17,72(r19)
 400b398:	8800061e 	bne	r17,zero,400b3b4 <__pow5mult+0x58>
 400b39c:	00003406 	br	400b470 <__pow5mult+0x114>
 400b3a0:	8021d07a 	srai	r16,r16,1
 400b3a4:	80001526 	beq	r16,zero,400b3fc <__pow5mult+0xa0>
 400b3a8:	88800017 	ldw	r2,0(r17)
 400b3ac:	10001c26 	beq	r2,zero,400b420 <__pow5mult+0xc4>
 400b3b0:	1023883a 	mov	r17,r2
 400b3b4:	8080004c 	andi	r2,r16,1
 400b3b8:	103ff926 	beq	r2,zero,400b3a0 <__alt_data_end+0xfc00b3a0>
 400b3bc:	880d883a 	mov	r6,r17
 400b3c0:	900b883a 	mov	r5,r18
 400b3c4:	9809883a 	mov	r4,r19
 400b3c8:	400b0d00 	call	400b0d0 <__multiply>
 400b3cc:	90001b26 	beq	r18,zero,400b43c <__pow5mult+0xe0>
 400b3d0:	91000117 	ldw	r4,4(r18)
 400b3d4:	98c01317 	ldw	r3,76(r19)
 400b3d8:	8021d07a 	srai	r16,r16,1
 400b3dc:	2109883a 	add	r4,r4,r4
 400b3e0:	2109883a 	add	r4,r4,r4
 400b3e4:	1907883a 	add	r3,r3,r4
 400b3e8:	19000017 	ldw	r4,0(r3)
 400b3ec:	91000015 	stw	r4,0(r18)
 400b3f0:	1c800015 	stw	r18,0(r3)
 400b3f4:	1025883a 	mov	r18,r2
 400b3f8:	803feb1e 	bne	r16,zero,400b3a8 <__alt_data_end+0xfc00b3a8>
 400b3fc:	9005883a 	mov	r2,r18
 400b400:	dfc00517 	ldw	ra,20(sp)
 400b404:	dd000417 	ldw	r20,16(sp)
 400b408:	dcc00317 	ldw	r19,12(sp)
 400b40c:	dc800217 	ldw	r18,8(sp)
 400b410:	dc400117 	ldw	r17,4(sp)
 400b414:	dc000017 	ldw	r16,0(sp)
 400b418:	dec00604 	addi	sp,sp,24
 400b41c:	f800283a 	ret
 400b420:	880d883a 	mov	r6,r17
 400b424:	880b883a 	mov	r5,r17
 400b428:	9809883a 	mov	r4,r19
 400b42c:	400b0d00 	call	400b0d0 <__multiply>
 400b430:	88800015 	stw	r2,0(r17)
 400b434:	10000015 	stw	zero,0(r2)
 400b438:	003fdd06 	br	400b3b0 <__alt_data_end+0xfc00b3b0>
 400b43c:	1025883a 	mov	r18,r2
 400b440:	003fd706 	br	400b3a0 <__alt_data_end+0xfc00b3a0>
 400b444:	10bfffc4 	addi	r2,r2,-1
 400b448:	1085883a 	add	r2,r2,r2
 400b44c:	00c10074 	movhi	r3,1025
 400b450:	18c7da04 	addi	r3,r3,8040
 400b454:	1085883a 	add	r2,r2,r2
 400b458:	1885883a 	add	r2,r3,r2
 400b45c:	11800017 	ldw	r6,0(r2)
 400b460:	000f883a 	mov	r7,zero
 400b464:	400ad300 	call	400ad30 <__multadd>
 400b468:	1025883a 	mov	r18,r2
 400b46c:	003fc706 	br	400b38c <__alt_data_end+0xfc00b38c>
 400b470:	05000044 	movi	r20,1
 400b474:	a00b883a 	mov	r5,r20
 400b478:	9809883a 	mov	r4,r19
 400b47c:	400ac600 	call	400ac60 <_Balloc>
 400b480:	1023883a 	mov	r17,r2
 400b484:	00809c44 	movi	r2,625
 400b488:	88800515 	stw	r2,20(r17)
 400b48c:	8d000415 	stw	r20,16(r17)
 400b490:	9c401215 	stw	r17,72(r19)
 400b494:	88000015 	stw	zero,0(r17)
 400b498:	003fc606 	br	400b3b4 <__alt_data_end+0xfc00b3b4>

0400b49c <__lshift>:
 400b49c:	defff904 	addi	sp,sp,-28
 400b4a0:	dd400515 	stw	r21,20(sp)
 400b4a4:	dcc00315 	stw	r19,12(sp)
 400b4a8:	302bd17a 	srai	r21,r6,5
 400b4ac:	2cc00417 	ldw	r19,16(r5)
 400b4b0:	28800217 	ldw	r2,8(r5)
 400b4b4:	dd000415 	stw	r20,16(sp)
 400b4b8:	ace7883a 	add	r19,r21,r19
 400b4bc:	dc800215 	stw	r18,8(sp)
 400b4c0:	dc400115 	stw	r17,4(sp)
 400b4c4:	dc000015 	stw	r16,0(sp)
 400b4c8:	dfc00615 	stw	ra,24(sp)
 400b4cc:	9c000044 	addi	r16,r19,1
 400b4d0:	2823883a 	mov	r17,r5
 400b4d4:	3029883a 	mov	r20,r6
 400b4d8:	2025883a 	mov	r18,r4
 400b4dc:	29400117 	ldw	r5,4(r5)
 400b4e0:	1400030e 	bge	r2,r16,400b4f0 <__lshift+0x54>
 400b4e4:	1085883a 	add	r2,r2,r2
 400b4e8:	29400044 	addi	r5,r5,1
 400b4ec:	143ffd16 	blt	r2,r16,400b4e4 <__alt_data_end+0xfc00b4e4>
 400b4f0:	9009883a 	mov	r4,r18
 400b4f4:	400ac600 	call	400ac60 <_Balloc>
 400b4f8:	10c00504 	addi	r3,r2,20
 400b4fc:	0540070e 	bge	zero,r21,400b51c <__lshift+0x80>
 400b500:	ad6b883a 	add	r21,r21,r21
 400b504:	ad6b883a 	add	r21,r21,r21
 400b508:	1809883a 	mov	r4,r3
 400b50c:	1d47883a 	add	r3,r3,r21
 400b510:	20000015 	stw	zero,0(r4)
 400b514:	21000104 	addi	r4,r4,4
 400b518:	193ffd1e 	bne	r3,r4,400b510 <__alt_data_end+0xfc00b510>
 400b51c:	8a000417 	ldw	r8,16(r17)
 400b520:	89000504 	addi	r4,r17,20
 400b524:	a18007cc 	andi	r6,r20,31
 400b528:	4211883a 	add	r8,r8,r8
 400b52c:	4211883a 	add	r8,r8,r8
 400b530:	2211883a 	add	r8,r4,r8
 400b534:	30002326 	beq	r6,zero,400b5c4 <__lshift+0x128>
 400b538:	02400804 	movi	r9,32
 400b53c:	4993c83a 	sub	r9,r9,r6
 400b540:	000b883a 	mov	r5,zero
 400b544:	21c00017 	ldw	r7,0(r4)
 400b548:	1815883a 	mov	r10,r3
 400b54c:	18c00104 	addi	r3,r3,4
 400b550:	398e983a 	sll	r7,r7,r6
 400b554:	21000104 	addi	r4,r4,4
 400b558:	394ab03a 	or	r5,r7,r5
 400b55c:	197fff15 	stw	r5,-4(r3)
 400b560:	217fff17 	ldw	r5,-4(r4)
 400b564:	2a4ad83a 	srl	r5,r5,r9
 400b568:	223ff636 	bltu	r4,r8,400b544 <__alt_data_end+0xfc00b544>
 400b56c:	51400115 	stw	r5,4(r10)
 400b570:	28001a1e 	bne	r5,zero,400b5dc <__lshift+0x140>
 400b574:	843fffc4 	addi	r16,r16,-1
 400b578:	14000415 	stw	r16,16(r2)
 400b57c:	88000826 	beq	r17,zero,400b5a0 <__lshift+0x104>
 400b580:	89000117 	ldw	r4,4(r17)
 400b584:	90c01317 	ldw	r3,76(r18)
 400b588:	2109883a 	add	r4,r4,r4
 400b58c:	2109883a 	add	r4,r4,r4
 400b590:	1907883a 	add	r3,r3,r4
 400b594:	19000017 	ldw	r4,0(r3)
 400b598:	89000015 	stw	r4,0(r17)
 400b59c:	1c400015 	stw	r17,0(r3)
 400b5a0:	dfc00617 	ldw	ra,24(sp)
 400b5a4:	dd400517 	ldw	r21,20(sp)
 400b5a8:	dd000417 	ldw	r20,16(sp)
 400b5ac:	dcc00317 	ldw	r19,12(sp)
 400b5b0:	dc800217 	ldw	r18,8(sp)
 400b5b4:	dc400117 	ldw	r17,4(sp)
 400b5b8:	dc000017 	ldw	r16,0(sp)
 400b5bc:	dec00704 	addi	sp,sp,28
 400b5c0:	f800283a 	ret
 400b5c4:	21400017 	ldw	r5,0(r4)
 400b5c8:	18c00104 	addi	r3,r3,4
 400b5cc:	21000104 	addi	r4,r4,4
 400b5d0:	197fff15 	stw	r5,-4(r3)
 400b5d4:	223ffb36 	bltu	r4,r8,400b5c4 <__alt_data_end+0xfc00b5c4>
 400b5d8:	003fe606 	br	400b574 <__alt_data_end+0xfc00b574>
 400b5dc:	9c000084 	addi	r16,r19,2
 400b5e0:	003fe406 	br	400b574 <__alt_data_end+0xfc00b574>

0400b5e4 <__mcmp>:
 400b5e4:	20800417 	ldw	r2,16(r4)
 400b5e8:	28c00417 	ldw	r3,16(r5)
 400b5ec:	10c5c83a 	sub	r2,r2,r3
 400b5f0:	1000111e 	bne	r2,zero,400b638 <__mcmp+0x54>
 400b5f4:	18c7883a 	add	r3,r3,r3
 400b5f8:	18c7883a 	add	r3,r3,r3
 400b5fc:	21000504 	addi	r4,r4,20
 400b600:	29400504 	addi	r5,r5,20
 400b604:	20c5883a 	add	r2,r4,r3
 400b608:	28cb883a 	add	r5,r5,r3
 400b60c:	00000106 	br	400b614 <__mcmp+0x30>
 400b610:	20800a2e 	bgeu	r4,r2,400b63c <__mcmp+0x58>
 400b614:	10bfff04 	addi	r2,r2,-4
 400b618:	297fff04 	addi	r5,r5,-4
 400b61c:	11800017 	ldw	r6,0(r2)
 400b620:	28c00017 	ldw	r3,0(r5)
 400b624:	30fffa26 	beq	r6,r3,400b610 <__alt_data_end+0xfc00b610>
 400b628:	30c00236 	bltu	r6,r3,400b634 <__mcmp+0x50>
 400b62c:	00800044 	movi	r2,1
 400b630:	f800283a 	ret
 400b634:	00bfffc4 	movi	r2,-1
 400b638:	f800283a 	ret
 400b63c:	0005883a 	mov	r2,zero
 400b640:	f800283a 	ret

0400b644 <__mdiff>:
 400b644:	28c00417 	ldw	r3,16(r5)
 400b648:	30800417 	ldw	r2,16(r6)
 400b64c:	defffa04 	addi	sp,sp,-24
 400b650:	dcc00315 	stw	r19,12(sp)
 400b654:	dc800215 	stw	r18,8(sp)
 400b658:	dfc00515 	stw	ra,20(sp)
 400b65c:	dd000415 	stw	r20,16(sp)
 400b660:	dc400115 	stw	r17,4(sp)
 400b664:	dc000015 	stw	r16,0(sp)
 400b668:	1887c83a 	sub	r3,r3,r2
 400b66c:	2825883a 	mov	r18,r5
 400b670:	3027883a 	mov	r19,r6
 400b674:	1800141e 	bne	r3,zero,400b6c8 <__mdiff+0x84>
 400b678:	1085883a 	add	r2,r2,r2
 400b67c:	1085883a 	add	r2,r2,r2
 400b680:	2a000504 	addi	r8,r5,20
 400b684:	34000504 	addi	r16,r6,20
 400b688:	4087883a 	add	r3,r8,r2
 400b68c:	8085883a 	add	r2,r16,r2
 400b690:	00000106 	br	400b698 <__mdiff+0x54>
 400b694:	40c0592e 	bgeu	r8,r3,400b7fc <__mdiff+0x1b8>
 400b698:	18ffff04 	addi	r3,r3,-4
 400b69c:	10bfff04 	addi	r2,r2,-4
 400b6a0:	19c00017 	ldw	r7,0(r3)
 400b6a4:	11400017 	ldw	r5,0(r2)
 400b6a8:	397ffa26 	beq	r7,r5,400b694 <__alt_data_end+0xfc00b694>
 400b6ac:	3940592e 	bgeu	r7,r5,400b814 <__mdiff+0x1d0>
 400b6b0:	9005883a 	mov	r2,r18
 400b6b4:	4023883a 	mov	r17,r8
 400b6b8:	9825883a 	mov	r18,r19
 400b6bc:	05000044 	movi	r20,1
 400b6c0:	1027883a 	mov	r19,r2
 400b6c4:	00000406 	br	400b6d8 <__mdiff+0x94>
 400b6c8:	18005616 	blt	r3,zero,400b824 <__mdiff+0x1e0>
 400b6cc:	34400504 	addi	r17,r6,20
 400b6d0:	2c000504 	addi	r16,r5,20
 400b6d4:	0029883a 	mov	r20,zero
 400b6d8:	91400117 	ldw	r5,4(r18)
 400b6dc:	400ac600 	call	400ac60 <_Balloc>
 400b6e0:	92400417 	ldw	r9,16(r18)
 400b6e4:	9b000417 	ldw	r12,16(r19)
 400b6e8:	12c00504 	addi	r11,r2,20
 400b6ec:	4a51883a 	add	r8,r9,r9
 400b6f0:	6319883a 	add	r12,r12,r12
 400b6f4:	4211883a 	add	r8,r8,r8
 400b6f8:	6319883a 	add	r12,r12,r12
 400b6fc:	15000315 	stw	r20,12(r2)
 400b700:	8211883a 	add	r8,r16,r8
 400b704:	8b19883a 	add	r12,r17,r12
 400b708:	0007883a 	mov	r3,zero
 400b70c:	81400017 	ldw	r5,0(r16)
 400b710:	89c00017 	ldw	r7,0(r17)
 400b714:	59800104 	addi	r6,r11,4
 400b718:	293fffcc 	andi	r4,r5,65535
 400b71c:	20c7883a 	add	r3,r4,r3
 400b720:	393fffcc 	andi	r4,r7,65535
 400b724:	1909c83a 	sub	r4,r3,r4
 400b728:	280ad43a 	srli	r5,r5,16
 400b72c:	380ed43a 	srli	r7,r7,16
 400b730:	2007d43a 	srai	r3,r4,16
 400b734:	213fffcc 	andi	r4,r4,65535
 400b738:	29cbc83a 	sub	r5,r5,r7
 400b73c:	28c7883a 	add	r3,r5,r3
 400b740:	180a943a 	slli	r5,r3,16
 400b744:	8c400104 	addi	r17,r17,4
 400b748:	84000104 	addi	r16,r16,4
 400b74c:	2908b03a 	or	r4,r5,r4
 400b750:	59000015 	stw	r4,0(r11)
 400b754:	1807d43a 	srai	r3,r3,16
 400b758:	3015883a 	mov	r10,r6
 400b75c:	3017883a 	mov	r11,r6
 400b760:	8b3fea36 	bltu	r17,r12,400b70c <__alt_data_end+0xfc00b70c>
 400b764:	8200162e 	bgeu	r16,r8,400b7c0 <__mdiff+0x17c>
 400b768:	8017883a 	mov	r11,r16
 400b76c:	59400017 	ldw	r5,0(r11)
 400b770:	31800104 	addi	r6,r6,4
 400b774:	5ac00104 	addi	r11,r11,4
 400b778:	293fffcc 	andi	r4,r5,65535
 400b77c:	20c7883a 	add	r3,r4,r3
 400b780:	280ed43a 	srli	r7,r5,16
 400b784:	180bd43a 	srai	r5,r3,16
 400b788:	193fffcc 	andi	r4,r3,65535
 400b78c:	3947883a 	add	r3,r7,r5
 400b790:	180a943a 	slli	r5,r3,16
 400b794:	1807d43a 	srai	r3,r3,16
 400b798:	2908b03a 	or	r4,r5,r4
 400b79c:	313fff15 	stw	r4,-4(r6)
 400b7a0:	5a3ff236 	bltu	r11,r8,400b76c <__alt_data_end+0xfc00b76c>
 400b7a4:	0406303a 	nor	r3,zero,r16
 400b7a8:	1a07883a 	add	r3,r3,r8
 400b7ac:	1806d0ba 	srli	r3,r3,2
 400b7b0:	18c00044 	addi	r3,r3,1
 400b7b4:	18c7883a 	add	r3,r3,r3
 400b7b8:	18c7883a 	add	r3,r3,r3
 400b7bc:	50d5883a 	add	r10,r10,r3
 400b7c0:	50ffff04 	addi	r3,r10,-4
 400b7c4:	2000041e 	bne	r4,zero,400b7d8 <__mdiff+0x194>
 400b7c8:	18ffff04 	addi	r3,r3,-4
 400b7cc:	19000017 	ldw	r4,0(r3)
 400b7d0:	4a7fffc4 	addi	r9,r9,-1
 400b7d4:	203ffc26 	beq	r4,zero,400b7c8 <__alt_data_end+0xfc00b7c8>
 400b7d8:	12400415 	stw	r9,16(r2)
 400b7dc:	dfc00517 	ldw	ra,20(sp)
 400b7e0:	dd000417 	ldw	r20,16(sp)
 400b7e4:	dcc00317 	ldw	r19,12(sp)
 400b7e8:	dc800217 	ldw	r18,8(sp)
 400b7ec:	dc400117 	ldw	r17,4(sp)
 400b7f0:	dc000017 	ldw	r16,0(sp)
 400b7f4:	dec00604 	addi	sp,sp,24
 400b7f8:	f800283a 	ret
 400b7fc:	000b883a 	mov	r5,zero
 400b800:	400ac600 	call	400ac60 <_Balloc>
 400b804:	00c00044 	movi	r3,1
 400b808:	10c00415 	stw	r3,16(r2)
 400b80c:	10000515 	stw	zero,20(r2)
 400b810:	003ff206 	br	400b7dc <__alt_data_end+0xfc00b7dc>
 400b814:	8023883a 	mov	r17,r16
 400b818:	0029883a 	mov	r20,zero
 400b81c:	4021883a 	mov	r16,r8
 400b820:	003fad06 	br	400b6d8 <__alt_data_end+0xfc00b6d8>
 400b824:	9005883a 	mov	r2,r18
 400b828:	94400504 	addi	r17,r18,20
 400b82c:	9c000504 	addi	r16,r19,20
 400b830:	9825883a 	mov	r18,r19
 400b834:	05000044 	movi	r20,1
 400b838:	1027883a 	mov	r19,r2
 400b83c:	003fa606 	br	400b6d8 <__alt_data_end+0xfc00b6d8>

0400b840 <__ulp>:
 400b840:	295ffc2c 	andhi	r5,r5,32752
 400b844:	00bf3034 	movhi	r2,64704
 400b848:	2887883a 	add	r3,r5,r2
 400b84c:	00c0020e 	bge	zero,r3,400b858 <__ulp+0x18>
 400b850:	0005883a 	mov	r2,zero
 400b854:	f800283a 	ret
 400b858:	00c7c83a 	sub	r3,zero,r3
 400b85c:	1807d53a 	srai	r3,r3,20
 400b860:	008004c4 	movi	r2,19
 400b864:	10c00b0e 	bge	r2,r3,400b894 <__ulp+0x54>
 400b868:	18bffb04 	addi	r2,r3,-20
 400b86c:	01000784 	movi	r4,30
 400b870:	0007883a 	mov	r3,zero
 400b874:	20800516 	blt	r4,r2,400b88c <__ulp+0x4c>
 400b878:	010007c4 	movi	r4,31
 400b87c:	2089c83a 	sub	r4,r4,r2
 400b880:	00800044 	movi	r2,1
 400b884:	1104983a 	sll	r2,r2,r4
 400b888:	f800283a 	ret
 400b88c:	00800044 	movi	r2,1
 400b890:	f800283a 	ret
 400b894:	01400234 	movhi	r5,8
 400b898:	28c7d83a 	sra	r3,r5,r3
 400b89c:	0005883a 	mov	r2,zero
 400b8a0:	f800283a 	ret

0400b8a4 <__b2d>:
 400b8a4:	defffa04 	addi	sp,sp,-24
 400b8a8:	dc000015 	stw	r16,0(sp)
 400b8ac:	24000417 	ldw	r16,16(r4)
 400b8b0:	dc400115 	stw	r17,4(sp)
 400b8b4:	24400504 	addi	r17,r4,20
 400b8b8:	8421883a 	add	r16,r16,r16
 400b8bc:	8421883a 	add	r16,r16,r16
 400b8c0:	8c21883a 	add	r16,r17,r16
 400b8c4:	dc800215 	stw	r18,8(sp)
 400b8c8:	84bfff17 	ldw	r18,-4(r16)
 400b8cc:	dd000415 	stw	r20,16(sp)
 400b8d0:	dcc00315 	stw	r19,12(sp)
 400b8d4:	9009883a 	mov	r4,r18
 400b8d8:	2829883a 	mov	r20,r5
 400b8dc:	dfc00515 	stw	ra,20(sp)
 400b8e0:	400af7c0 	call	400af7c <__hi0bits>
 400b8e4:	00c00804 	movi	r3,32
 400b8e8:	1889c83a 	sub	r4,r3,r2
 400b8ec:	a1000015 	stw	r4,0(r20)
 400b8f0:	01000284 	movi	r4,10
 400b8f4:	84ffff04 	addi	r19,r16,-4
 400b8f8:	20801216 	blt	r4,r2,400b944 <__b2d+0xa0>
 400b8fc:	018002c4 	movi	r6,11
 400b900:	308dc83a 	sub	r6,r6,r2
 400b904:	9186d83a 	srl	r3,r18,r6
 400b908:	18cffc34 	orhi	r3,r3,16368
 400b90c:	8cc0212e 	bgeu	r17,r19,400b994 <__b2d+0xf0>
 400b910:	813ffe17 	ldw	r4,-8(r16)
 400b914:	218cd83a 	srl	r6,r4,r6
 400b918:	10800544 	addi	r2,r2,21
 400b91c:	9084983a 	sll	r2,r18,r2
 400b920:	1184b03a 	or	r2,r2,r6
 400b924:	dfc00517 	ldw	ra,20(sp)
 400b928:	dd000417 	ldw	r20,16(sp)
 400b92c:	dcc00317 	ldw	r19,12(sp)
 400b930:	dc800217 	ldw	r18,8(sp)
 400b934:	dc400117 	ldw	r17,4(sp)
 400b938:	dc000017 	ldw	r16,0(sp)
 400b93c:	dec00604 	addi	sp,sp,24
 400b940:	f800283a 	ret
 400b944:	8cc00f2e 	bgeu	r17,r19,400b984 <__b2d+0xe0>
 400b948:	117ffd44 	addi	r5,r2,-11
 400b94c:	80bffe17 	ldw	r2,-8(r16)
 400b950:	28000e26 	beq	r5,zero,400b98c <__b2d+0xe8>
 400b954:	1949c83a 	sub	r4,r3,r5
 400b958:	9164983a 	sll	r18,r18,r5
 400b95c:	1106d83a 	srl	r3,r2,r4
 400b960:	81bffe04 	addi	r6,r16,-8
 400b964:	948ffc34 	orhi	r18,r18,16368
 400b968:	90c6b03a 	or	r3,r18,r3
 400b96c:	89800e2e 	bgeu	r17,r6,400b9a8 <__b2d+0x104>
 400b970:	81bffd17 	ldw	r6,-12(r16)
 400b974:	1144983a 	sll	r2,r2,r5
 400b978:	310ad83a 	srl	r5,r6,r4
 400b97c:	2884b03a 	or	r2,r5,r2
 400b980:	003fe806 	br	400b924 <__alt_data_end+0xfc00b924>
 400b984:	10bffd44 	addi	r2,r2,-11
 400b988:	1000041e 	bne	r2,zero,400b99c <__b2d+0xf8>
 400b98c:	90cffc34 	orhi	r3,r18,16368
 400b990:	003fe406 	br	400b924 <__alt_data_end+0xfc00b924>
 400b994:	000d883a 	mov	r6,zero
 400b998:	003fdf06 	br	400b918 <__alt_data_end+0xfc00b918>
 400b99c:	90a4983a 	sll	r18,r18,r2
 400b9a0:	0005883a 	mov	r2,zero
 400b9a4:	003ff906 	br	400b98c <__alt_data_end+0xfc00b98c>
 400b9a8:	1144983a 	sll	r2,r2,r5
 400b9ac:	003fdd06 	br	400b924 <__alt_data_end+0xfc00b924>

0400b9b0 <__d2b>:
 400b9b0:	defff804 	addi	sp,sp,-32
 400b9b4:	dc000215 	stw	r16,8(sp)
 400b9b8:	3021883a 	mov	r16,r6
 400b9bc:	dc400315 	stw	r17,12(sp)
 400b9c0:	8022907a 	slli	r17,r16,1
 400b9c4:	dd000615 	stw	r20,24(sp)
 400b9c8:	2829883a 	mov	r20,r5
 400b9cc:	01400044 	movi	r5,1
 400b9d0:	dcc00515 	stw	r19,20(sp)
 400b9d4:	dc800415 	stw	r18,16(sp)
 400b9d8:	dfc00715 	stw	ra,28(sp)
 400b9dc:	3825883a 	mov	r18,r7
 400b9e0:	8822d57a 	srli	r17,r17,21
 400b9e4:	400ac600 	call	400ac60 <_Balloc>
 400b9e8:	1027883a 	mov	r19,r2
 400b9ec:	00800434 	movhi	r2,16
 400b9f0:	10bfffc4 	addi	r2,r2,-1
 400b9f4:	808c703a 	and	r6,r16,r2
 400b9f8:	88000126 	beq	r17,zero,400ba00 <__d2b+0x50>
 400b9fc:	31800434 	orhi	r6,r6,16
 400ba00:	d9800015 	stw	r6,0(sp)
 400ba04:	a0002426 	beq	r20,zero,400ba98 <__d2b+0xe8>
 400ba08:	d9000104 	addi	r4,sp,4
 400ba0c:	dd000115 	stw	r20,4(sp)
 400ba10:	400afe40 	call	400afe4 <__lo0bits>
 400ba14:	d8c00017 	ldw	r3,0(sp)
 400ba18:	10002f1e 	bne	r2,zero,400bad8 <__d2b+0x128>
 400ba1c:	d9000117 	ldw	r4,4(sp)
 400ba20:	99000515 	stw	r4,20(r19)
 400ba24:	1821003a 	cmpeq	r16,r3,zero
 400ba28:	01000084 	movi	r4,2
 400ba2c:	2421c83a 	sub	r16,r4,r16
 400ba30:	98c00615 	stw	r3,24(r19)
 400ba34:	9c000415 	stw	r16,16(r19)
 400ba38:	88001f1e 	bne	r17,zero,400bab8 <__d2b+0x108>
 400ba3c:	10bef384 	addi	r2,r2,-1074
 400ba40:	90800015 	stw	r2,0(r18)
 400ba44:	00900034 	movhi	r2,16384
 400ba48:	10bfffc4 	addi	r2,r2,-1
 400ba4c:	8085883a 	add	r2,r16,r2
 400ba50:	1085883a 	add	r2,r2,r2
 400ba54:	1085883a 	add	r2,r2,r2
 400ba58:	9885883a 	add	r2,r19,r2
 400ba5c:	11000517 	ldw	r4,20(r2)
 400ba60:	8020917a 	slli	r16,r16,5
 400ba64:	400af7c0 	call	400af7c <__hi0bits>
 400ba68:	d8c00817 	ldw	r3,32(sp)
 400ba6c:	8085c83a 	sub	r2,r16,r2
 400ba70:	18800015 	stw	r2,0(r3)
 400ba74:	9805883a 	mov	r2,r19
 400ba78:	dfc00717 	ldw	ra,28(sp)
 400ba7c:	dd000617 	ldw	r20,24(sp)
 400ba80:	dcc00517 	ldw	r19,20(sp)
 400ba84:	dc800417 	ldw	r18,16(sp)
 400ba88:	dc400317 	ldw	r17,12(sp)
 400ba8c:	dc000217 	ldw	r16,8(sp)
 400ba90:	dec00804 	addi	sp,sp,32
 400ba94:	f800283a 	ret
 400ba98:	d809883a 	mov	r4,sp
 400ba9c:	400afe40 	call	400afe4 <__lo0bits>
 400baa0:	d8c00017 	ldw	r3,0(sp)
 400baa4:	04000044 	movi	r16,1
 400baa8:	9c000415 	stw	r16,16(r19)
 400baac:	98c00515 	stw	r3,20(r19)
 400bab0:	10800804 	addi	r2,r2,32
 400bab4:	883fe126 	beq	r17,zero,400ba3c <__alt_data_end+0xfc00ba3c>
 400bab8:	00c00d44 	movi	r3,53
 400babc:	8c7ef344 	addi	r17,r17,-1075
 400bac0:	88a3883a 	add	r17,r17,r2
 400bac4:	1885c83a 	sub	r2,r3,r2
 400bac8:	d8c00817 	ldw	r3,32(sp)
 400bacc:	94400015 	stw	r17,0(r18)
 400bad0:	18800015 	stw	r2,0(r3)
 400bad4:	003fe706 	br	400ba74 <__alt_data_end+0xfc00ba74>
 400bad8:	01000804 	movi	r4,32
 400badc:	2089c83a 	sub	r4,r4,r2
 400bae0:	1908983a 	sll	r4,r3,r4
 400bae4:	d9400117 	ldw	r5,4(sp)
 400bae8:	1886d83a 	srl	r3,r3,r2
 400baec:	2148b03a 	or	r4,r4,r5
 400baf0:	99000515 	stw	r4,20(r19)
 400baf4:	d8c00015 	stw	r3,0(sp)
 400baf8:	003fca06 	br	400ba24 <__alt_data_end+0xfc00ba24>

0400bafc <__ratio>:
 400bafc:	defff904 	addi	sp,sp,-28
 400bb00:	dc400315 	stw	r17,12(sp)
 400bb04:	2823883a 	mov	r17,r5
 400bb08:	d9400104 	addi	r5,sp,4
 400bb0c:	dfc00615 	stw	ra,24(sp)
 400bb10:	dcc00515 	stw	r19,20(sp)
 400bb14:	dc800415 	stw	r18,16(sp)
 400bb18:	2027883a 	mov	r19,r4
 400bb1c:	dc000215 	stw	r16,8(sp)
 400bb20:	400b8a40 	call	400b8a4 <__b2d>
 400bb24:	d80b883a 	mov	r5,sp
 400bb28:	8809883a 	mov	r4,r17
 400bb2c:	1025883a 	mov	r18,r2
 400bb30:	1821883a 	mov	r16,r3
 400bb34:	400b8a40 	call	400b8a4 <__b2d>
 400bb38:	8a000417 	ldw	r8,16(r17)
 400bb3c:	99000417 	ldw	r4,16(r19)
 400bb40:	d9400117 	ldw	r5,4(sp)
 400bb44:	2209c83a 	sub	r4,r4,r8
 400bb48:	2010917a 	slli	r8,r4,5
 400bb4c:	d9000017 	ldw	r4,0(sp)
 400bb50:	2909c83a 	sub	r4,r5,r4
 400bb54:	4109883a 	add	r4,r8,r4
 400bb58:	01000e0e 	bge	zero,r4,400bb94 <__ratio+0x98>
 400bb5c:	2008953a 	slli	r4,r4,20
 400bb60:	2421883a 	add	r16,r4,r16
 400bb64:	100d883a 	mov	r6,r2
 400bb68:	180f883a 	mov	r7,r3
 400bb6c:	9009883a 	mov	r4,r18
 400bb70:	800b883a 	mov	r5,r16
 400bb74:	40041fc0 	call	40041fc <__divdf3>
 400bb78:	dfc00617 	ldw	ra,24(sp)
 400bb7c:	dcc00517 	ldw	r19,20(sp)
 400bb80:	dc800417 	ldw	r18,16(sp)
 400bb84:	dc400317 	ldw	r17,12(sp)
 400bb88:	dc000217 	ldw	r16,8(sp)
 400bb8c:	dec00704 	addi	sp,sp,28
 400bb90:	f800283a 	ret
 400bb94:	2008953a 	slli	r4,r4,20
 400bb98:	1907c83a 	sub	r3,r3,r4
 400bb9c:	003ff106 	br	400bb64 <__alt_data_end+0xfc00bb64>

0400bba0 <_mprec_log10>:
 400bba0:	defffe04 	addi	sp,sp,-8
 400bba4:	dc000015 	stw	r16,0(sp)
 400bba8:	dfc00115 	stw	ra,4(sp)
 400bbac:	008005c4 	movi	r2,23
 400bbb0:	2021883a 	mov	r16,r4
 400bbb4:	11000d0e 	bge	r2,r4,400bbec <_mprec_log10+0x4c>
 400bbb8:	0005883a 	mov	r2,zero
 400bbbc:	00cffc34 	movhi	r3,16368
 400bbc0:	843fffc4 	addi	r16,r16,-1
 400bbc4:	000d883a 	mov	r6,zero
 400bbc8:	01d00934 	movhi	r7,16420
 400bbcc:	1009883a 	mov	r4,r2
 400bbd0:	180b883a 	mov	r5,r3
 400bbd4:	4004d9c0 	call	4004d9c <__muldf3>
 400bbd8:	803ff91e 	bne	r16,zero,400bbc0 <__alt_data_end+0xfc00bbc0>
 400bbdc:	dfc00117 	ldw	ra,4(sp)
 400bbe0:	dc000017 	ldw	r16,0(sp)
 400bbe4:	dec00204 	addi	sp,sp,8
 400bbe8:	f800283a 	ret
 400bbec:	202090fa 	slli	r16,r4,3
 400bbf0:	00810074 	movhi	r2,1025
 400bbf4:	1087f104 	addi	r2,r2,8132
 400bbf8:	1421883a 	add	r16,r2,r16
 400bbfc:	80800017 	ldw	r2,0(r16)
 400bc00:	80c00117 	ldw	r3,4(r16)
 400bc04:	dfc00117 	ldw	ra,4(sp)
 400bc08:	dc000017 	ldw	r16,0(sp)
 400bc0c:	dec00204 	addi	sp,sp,8
 400bc10:	f800283a 	ret

0400bc14 <__copybits>:
 400bc14:	297fffc4 	addi	r5,r5,-1
 400bc18:	280fd17a 	srai	r7,r5,5
 400bc1c:	30c00417 	ldw	r3,16(r6)
 400bc20:	30800504 	addi	r2,r6,20
 400bc24:	39c00044 	addi	r7,r7,1
 400bc28:	18c7883a 	add	r3,r3,r3
 400bc2c:	39cf883a 	add	r7,r7,r7
 400bc30:	18c7883a 	add	r3,r3,r3
 400bc34:	39cf883a 	add	r7,r7,r7
 400bc38:	10c7883a 	add	r3,r2,r3
 400bc3c:	21cf883a 	add	r7,r4,r7
 400bc40:	10c00d2e 	bgeu	r2,r3,400bc78 <__copybits+0x64>
 400bc44:	200b883a 	mov	r5,r4
 400bc48:	12000017 	ldw	r8,0(r2)
 400bc4c:	29400104 	addi	r5,r5,4
 400bc50:	10800104 	addi	r2,r2,4
 400bc54:	2a3fff15 	stw	r8,-4(r5)
 400bc58:	10fffb36 	bltu	r2,r3,400bc48 <__alt_data_end+0xfc00bc48>
 400bc5c:	1985c83a 	sub	r2,r3,r6
 400bc60:	10bffac4 	addi	r2,r2,-21
 400bc64:	1004d0ba 	srli	r2,r2,2
 400bc68:	10800044 	addi	r2,r2,1
 400bc6c:	1085883a 	add	r2,r2,r2
 400bc70:	1085883a 	add	r2,r2,r2
 400bc74:	2089883a 	add	r4,r4,r2
 400bc78:	21c0032e 	bgeu	r4,r7,400bc88 <__copybits+0x74>
 400bc7c:	20000015 	stw	zero,0(r4)
 400bc80:	21000104 	addi	r4,r4,4
 400bc84:	21fffd36 	bltu	r4,r7,400bc7c <__alt_data_end+0xfc00bc7c>
 400bc88:	f800283a 	ret

0400bc8c <__any_on>:
 400bc8c:	20c00417 	ldw	r3,16(r4)
 400bc90:	2805d17a 	srai	r2,r5,5
 400bc94:	21000504 	addi	r4,r4,20
 400bc98:	18800d0e 	bge	r3,r2,400bcd0 <__any_on+0x44>
 400bc9c:	18c7883a 	add	r3,r3,r3
 400bca0:	18c7883a 	add	r3,r3,r3
 400bca4:	20c7883a 	add	r3,r4,r3
 400bca8:	20c0192e 	bgeu	r4,r3,400bd10 <__any_on+0x84>
 400bcac:	18bfff17 	ldw	r2,-4(r3)
 400bcb0:	18ffff04 	addi	r3,r3,-4
 400bcb4:	1000041e 	bne	r2,zero,400bcc8 <__any_on+0x3c>
 400bcb8:	20c0142e 	bgeu	r4,r3,400bd0c <__any_on+0x80>
 400bcbc:	18ffff04 	addi	r3,r3,-4
 400bcc0:	19400017 	ldw	r5,0(r3)
 400bcc4:	283ffc26 	beq	r5,zero,400bcb8 <__alt_data_end+0xfc00bcb8>
 400bcc8:	00800044 	movi	r2,1
 400bccc:	f800283a 	ret
 400bcd0:	10c00a0e 	bge	r2,r3,400bcfc <__any_on+0x70>
 400bcd4:	1085883a 	add	r2,r2,r2
 400bcd8:	1085883a 	add	r2,r2,r2
 400bcdc:	294007cc 	andi	r5,r5,31
 400bce0:	2087883a 	add	r3,r4,r2
 400bce4:	283ff026 	beq	r5,zero,400bca8 <__alt_data_end+0xfc00bca8>
 400bce8:	19800017 	ldw	r6,0(r3)
 400bcec:	3144d83a 	srl	r2,r6,r5
 400bcf0:	114a983a 	sll	r5,r2,r5
 400bcf4:	317ff41e 	bne	r6,r5,400bcc8 <__alt_data_end+0xfc00bcc8>
 400bcf8:	003feb06 	br	400bca8 <__alt_data_end+0xfc00bca8>
 400bcfc:	1085883a 	add	r2,r2,r2
 400bd00:	1085883a 	add	r2,r2,r2
 400bd04:	2087883a 	add	r3,r4,r2
 400bd08:	003fe706 	br	400bca8 <__alt_data_end+0xfc00bca8>
 400bd0c:	f800283a 	ret
 400bd10:	0005883a 	mov	r2,zero
 400bd14:	f800283a 	ret

0400bd18 <__fpclassifyd>:
 400bd18:	00a00034 	movhi	r2,32768
 400bd1c:	10bfffc4 	addi	r2,r2,-1
 400bd20:	2884703a 	and	r2,r5,r2
 400bd24:	10000726 	beq	r2,zero,400bd44 <__fpclassifyd+0x2c>
 400bd28:	00fffc34 	movhi	r3,65520
 400bd2c:	019ff834 	movhi	r6,32736
 400bd30:	28c7883a 	add	r3,r5,r3
 400bd34:	31bfffc4 	addi	r6,r6,-1
 400bd38:	30c00536 	bltu	r6,r3,400bd50 <__fpclassifyd+0x38>
 400bd3c:	00800104 	movi	r2,4
 400bd40:	f800283a 	ret
 400bd44:	2000021e 	bne	r4,zero,400bd50 <__fpclassifyd+0x38>
 400bd48:	00800084 	movi	r2,2
 400bd4c:	f800283a 	ret
 400bd50:	00dffc34 	movhi	r3,32752
 400bd54:	019ff834 	movhi	r6,32736
 400bd58:	28cb883a 	add	r5,r5,r3
 400bd5c:	31bfffc4 	addi	r6,r6,-1
 400bd60:	317ff62e 	bgeu	r6,r5,400bd3c <__alt_data_end+0xfc00bd3c>
 400bd64:	01400434 	movhi	r5,16
 400bd68:	297fffc4 	addi	r5,r5,-1
 400bd6c:	28800236 	bltu	r5,r2,400bd78 <__fpclassifyd+0x60>
 400bd70:	008000c4 	movi	r2,3
 400bd74:	f800283a 	ret
 400bd78:	10c00226 	beq	r2,r3,400bd84 <__fpclassifyd+0x6c>
 400bd7c:	0005883a 	mov	r2,zero
 400bd80:	f800283a 	ret
 400bd84:	2005003a 	cmpeq	r2,r4,zero
 400bd88:	f800283a 	ret

0400bd8c <_sbrk_r>:
 400bd8c:	defffd04 	addi	sp,sp,-12
 400bd90:	dc000015 	stw	r16,0(sp)
 400bd94:	04010074 	movhi	r16,1025
 400bd98:	dc400115 	stw	r17,4(sp)
 400bd9c:	84172c04 	addi	r16,r16,23728
 400bda0:	2023883a 	mov	r17,r4
 400bda4:	2809883a 	mov	r4,r5
 400bda8:	dfc00215 	stw	ra,8(sp)
 400bdac:	80000015 	stw	zero,0(r16)
 400bdb0:	400f1340 	call	400f134 <sbrk>
 400bdb4:	00ffffc4 	movi	r3,-1
 400bdb8:	10c00526 	beq	r2,r3,400bdd0 <_sbrk_r+0x44>
 400bdbc:	dfc00217 	ldw	ra,8(sp)
 400bdc0:	dc400117 	ldw	r17,4(sp)
 400bdc4:	dc000017 	ldw	r16,0(sp)
 400bdc8:	dec00304 	addi	sp,sp,12
 400bdcc:	f800283a 	ret
 400bdd0:	80c00017 	ldw	r3,0(r16)
 400bdd4:	183ff926 	beq	r3,zero,400bdbc <__alt_data_end+0xfc00bdbc>
 400bdd8:	88c00015 	stw	r3,0(r17)
 400bddc:	003ff706 	br	400bdbc <__alt_data_end+0xfc00bdbc>

0400bde0 <strcmp>:
 400bde0:	2144b03a 	or	r2,r4,r5
 400bde4:	108000cc 	andi	r2,r2,3
 400bde8:	1000171e 	bne	r2,zero,400be48 <strcmp+0x68>
 400bdec:	20800017 	ldw	r2,0(r4)
 400bdf0:	28c00017 	ldw	r3,0(r5)
 400bdf4:	10c0141e 	bne	r2,r3,400be48 <strcmp+0x68>
 400bdf8:	027fbff4 	movhi	r9,65279
 400bdfc:	4a7fbfc4 	addi	r9,r9,-257
 400be00:	0086303a 	nor	r3,zero,r2
 400be04:	02202074 	movhi	r8,32897
 400be08:	1245883a 	add	r2,r2,r9
 400be0c:	42202004 	addi	r8,r8,-32640
 400be10:	10c4703a 	and	r2,r2,r3
 400be14:	1204703a 	and	r2,r2,r8
 400be18:	10000226 	beq	r2,zero,400be24 <strcmp+0x44>
 400be1c:	00002306 	br	400beac <strcmp+0xcc>
 400be20:	1000221e 	bne	r2,zero,400beac <strcmp+0xcc>
 400be24:	21000104 	addi	r4,r4,4
 400be28:	20c00017 	ldw	r3,0(r4)
 400be2c:	29400104 	addi	r5,r5,4
 400be30:	29800017 	ldw	r6,0(r5)
 400be34:	1a4f883a 	add	r7,r3,r9
 400be38:	00c4303a 	nor	r2,zero,r3
 400be3c:	3884703a 	and	r2,r7,r2
 400be40:	1204703a 	and	r2,r2,r8
 400be44:	19bff626 	beq	r3,r6,400be20 <__alt_data_end+0xfc00be20>
 400be48:	20800003 	ldbu	r2,0(r4)
 400be4c:	10c03fcc 	andi	r3,r2,255
 400be50:	18c0201c 	xori	r3,r3,128
 400be54:	18ffe004 	addi	r3,r3,-128
 400be58:	18000c26 	beq	r3,zero,400be8c <strcmp+0xac>
 400be5c:	29800007 	ldb	r6,0(r5)
 400be60:	19800326 	beq	r3,r6,400be70 <strcmp+0x90>
 400be64:	00001306 	br	400beb4 <strcmp+0xd4>
 400be68:	29800007 	ldb	r6,0(r5)
 400be6c:	11800b1e 	bne	r2,r6,400be9c <strcmp+0xbc>
 400be70:	21000044 	addi	r4,r4,1
 400be74:	20c00003 	ldbu	r3,0(r4)
 400be78:	29400044 	addi	r5,r5,1
 400be7c:	18803fcc 	andi	r2,r3,255
 400be80:	1080201c 	xori	r2,r2,128
 400be84:	10bfe004 	addi	r2,r2,-128
 400be88:	103ff71e 	bne	r2,zero,400be68 <__alt_data_end+0xfc00be68>
 400be8c:	0007883a 	mov	r3,zero
 400be90:	28800003 	ldbu	r2,0(r5)
 400be94:	1885c83a 	sub	r2,r3,r2
 400be98:	f800283a 	ret
 400be9c:	28800003 	ldbu	r2,0(r5)
 400bea0:	18c03fcc 	andi	r3,r3,255
 400bea4:	1885c83a 	sub	r2,r3,r2
 400bea8:	f800283a 	ret
 400beac:	0005883a 	mov	r2,zero
 400beb0:	f800283a 	ret
 400beb4:	10c03fcc 	andi	r3,r2,255
 400beb8:	003ff506 	br	400be90 <__alt_data_end+0xfc00be90>

0400bebc <strlen>:
 400bebc:	208000cc 	andi	r2,r4,3
 400bec0:	10002026 	beq	r2,zero,400bf44 <strlen+0x88>
 400bec4:	20800007 	ldb	r2,0(r4)
 400bec8:	10002026 	beq	r2,zero,400bf4c <strlen+0x90>
 400becc:	2005883a 	mov	r2,r4
 400bed0:	00000206 	br	400bedc <strlen+0x20>
 400bed4:	10c00007 	ldb	r3,0(r2)
 400bed8:	18001826 	beq	r3,zero,400bf3c <strlen+0x80>
 400bedc:	10800044 	addi	r2,r2,1
 400bee0:	10c000cc 	andi	r3,r2,3
 400bee4:	183ffb1e 	bne	r3,zero,400bed4 <__alt_data_end+0xfc00bed4>
 400bee8:	10c00017 	ldw	r3,0(r2)
 400beec:	01ffbff4 	movhi	r7,65279
 400bef0:	39ffbfc4 	addi	r7,r7,-257
 400bef4:	00ca303a 	nor	r5,zero,r3
 400bef8:	01a02074 	movhi	r6,32897
 400befc:	19c7883a 	add	r3,r3,r7
 400bf00:	31a02004 	addi	r6,r6,-32640
 400bf04:	1946703a 	and	r3,r3,r5
 400bf08:	1986703a 	and	r3,r3,r6
 400bf0c:	1800091e 	bne	r3,zero,400bf34 <strlen+0x78>
 400bf10:	10800104 	addi	r2,r2,4
 400bf14:	10c00017 	ldw	r3,0(r2)
 400bf18:	19cb883a 	add	r5,r3,r7
 400bf1c:	00c6303a 	nor	r3,zero,r3
 400bf20:	28c6703a 	and	r3,r5,r3
 400bf24:	1986703a 	and	r3,r3,r6
 400bf28:	183ff926 	beq	r3,zero,400bf10 <__alt_data_end+0xfc00bf10>
 400bf2c:	00000106 	br	400bf34 <strlen+0x78>
 400bf30:	10800044 	addi	r2,r2,1
 400bf34:	10c00007 	ldb	r3,0(r2)
 400bf38:	183ffd1e 	bne	r3,zero,400bf30 <__alt_data_end+0xfc00bf30>
 400bf3c:	1105c83a 	sub	r2,r2,r4
 400bf40:	f800283a 	ret
 400bf44:	2005883a 	mov	r2,r4
 400bf48:	003fe706 	br	400bee8 <__alt_data_end+0xfc00bee8>
 400bf4c:	0005883a 	mov	r2,zero
 400bf50:	f800283a 	ret

0400bf54 <__ssprint_r>:
 400bf54:	30800217 	ldw	r2,8(r6)
 400bf58:	defff604 	addi	sp,sp,-40
 400bf5c:	dc800215 	stw	r18,8(sp)
 400bf60:	dfc00915 	stw	ra,36(sp)
 400bf64:	df000815 	stw	fp,32(sp)
 400bf68:	ddc00715 	stw	r23,28(sp)
 400bf6c:	dd800615 	stw	r22,24(sp)
 400bf70:	dd400515 	stw	r21,20(sp)
 400bf74:	dd000415 	stw	r20,16(sp)
 400bf78:	dcc00315 	stw	r19,12(sp)
 400bf7c:	dc400115 	stw	r17,4(sp)
 400bf80:	dc000015 	stw	r16,0(sp)
 400bf84:	3025883a 	mov	r18,r6
 400bf88:	10005826 	beq	r2,zero,400c0ec <__ssprint_r+0x198>
 400bf8c:	2027883a 	mov	r19,r4
 400bf90:	35c00017 	ldw	r23,0(r6)
 400bf94:	29000017 	ldw	r4,0(r5)
 400bf98:	28800217 	ldw	r2,8(r5)
 400bf9c:	2823883a 	mov	r17,r5
 400bfa0:	0039883a 	mov	fp,zero
 400bfa4:	0021883a 	mov	r16,zero
 400bfa8:	80003926 	beq	r16,zero,400c090 <__ssprint_r+0x13c>
 400bfac:	102b883a 	mov	r21,r2
 400bfb0:	102d883a 	mov	r22,r2
 400bfb4:	80803a36 	bltu	r16,r2,400c0a0 <__ssprint_r+0x14c>
 400bfb8:	88c0030b 	ldhu	r3,12(r17)
 400bfbc:	1881200c 	andi	r2,r3,1152
 400bfc0:	10002626 	beq	r2,zero,400c05c <__ssprint_r+0x108>
 400bfc4:	88800517 	ldw	r2,20(r17)
 400bfc8:	89400417 	ldw	r5,16(r17)
 400bfcc:	81800044 	addi	r6,r16,1
 400bfd0:	108f883a 	add	r7,r2,r2
 400bfd4:	3885883a 	add	r2,r7,r2
 400bfd8:	100ed7fa 	srli	r7,r2,31
 400bfdc:	216dc83a 	sub	r22,r4,r5
 400bfe0:	3589883a 	add	r4,r6,r22
 400bfe4:	3885883a 	add	r2,r7,r2
 400bfe8:	102bd07a 	srai	r21,r2,1
 400bfec:	a80d883a 	mov	r6,r21
 400bff0:	a900022e 	bgeu	r21,r4,400bffc <__ssprint_r+0xa8>
 400bff4:	202b883a 	mov	r21,r4
 400bff8:	200d883a 	mov	r6,r4
 400bffc:	18c1000c 	andi	r3,r3,1024
 400c000:	18002a26 	beq	r3,zero,400c0ac <__ssprint_r+0x158>
 400c004:	300b883a 	mov	r5,r6
 400c008:	9809883a 	mov	r4,r19
 400c00c:	400a3700 	call	400a370 <_malloc_r>
 400c010:	1029883a 	mov	r20,r2
 400c014:	10002c26 	beq	r2,zero,400c0c8 <__ssprint_r+0x174>
 400c018:	89400417 	ldw	r5,16(r17)
 400c01c:	b00d883a 	mov	r6,r22
 400c020:	1009883a 	mov	r4,r2
 400c024:	40064240 	call	4006424 <memcpy>
 400c028:	8880030b 	ldhu	r2,12(r17)
 400c02c:	00fedfc4 	movi	r3,-1153
 400c030:	10c4703a 	and	r2,r2,r3
 400c034:	10802014 	ori	r2,r2,128
 400c038:	8880030d 	sth	r2,12(r17)
 400c03c:	a589883a 	add	r4,r20,r22
 400c040:	adadc83a 	sub	r22,r21,r22
 400c044:	8d400515 	stw	r21,20(r17)
 400c048:	8d800215 	stw	r22,8(r17)
 400c04c:	8d000415 	stw	r20,16(r17)
 400c050:	89000015 	stw	r4,0(r17)
 400c054:	802b883a 	mov	r21,r16
 400c058:	802d883a 	mov	r22,r16
 400c05c:	b00d883a 	mov	r6,r22
 400c060:	e00b883a 	mov	r5,fp
 400c064:	400d9d40 	call	400d9d4 <memmove>
 400c068:	88800217 	ldw	r2,8(r17)
 400c06c:	89000017 	ldw	r4,0(r17)
 400c070:	90c00217 	ldw	r3,8(r18)
 400c074:	1545c83a 	sub	r2,r2,r21
 400c078:	2589883a 	add	r4,r4,r22
 400c07c:	88800215 	stw	r2,8(r17)
 400c080:	89000015 	stw	r4,0(r17)
 400c084:	1c21c83a 	sub	r16,r3,r16
 400c088:	94000215 	stw	r16,8(r18)
 400c08c:	80001726 	beq	r16,zero,400c0ec <__ssprint_r+0x198>
 400c090:	bf000017 	ldw	fp,0(r23)
 400c094:	bc000117 	ldw	r16,4(r23)
 400c098:	bdc00204 	addi	r23,r23,8
 400c09c:	003fc206 	br	400bfa8 <__alt_data_end+0xfc00bfa8>
 400c0a0:	802b883a 	mov	r21,r16
 400c0a4:	802d883a 	mov	r22,r16
 400c0a8:	003fec06 	br	400c05c <__alt_data_end+0xfc00c05c>
 400c0ac:	9809883a 	mov	r4,r19
 400c0b0:	400dc580 	call	400dc58 <_realloc_r>
 400c0b4:	1029883a 	mov	r20,r2
 400c0b8:	103fe01e 	bne	r2,zero,400c03c <__alt_data_end+0xfc00c03c>
 400c0bc:	89400417 	ldw	r5,16(r17)
 400c0c0:	9809883a 	mov	r4,r19
 400c0c4:	400d6c40 	call	400d6c4 <_free_r>
 400c0c8:	88c0030b 	ldhu	r3,12(r17)
 400c0cc:	00800304 	movi	r2,12
 400c0d0:	98800015 	stw	r2,0(r19)
 400c0d4:	18c01014 	ori	r3,r3,64
 400c0d8:	88c0030d 	sth	r3,12(r17)
 400c0dc:	00bfffc4 	movi	r2,-1
 400c0e0:	90000215 	stw	zero,8(r18)
 400c0e4:	90000115 	stw	zero,4(r18)
 400c0e8:	00000206 	br	400c0f4 <__ssprint_r+0x1a0>
 400c0ec:	90000115 	stw	zero,4(r18)
 400c0f0:	0005883a 	mov	r2,zero
 400c0f4:	dfc00917 	ldw	ra,36(sp)
 400c0f8:	df000817 	ldw	fp,32(sp)
 400c0fc:	ddc00717 	ldw	r23,28(sp)
 400c100:	dd800617 	ldw	r22,24(sp)
 400c104:	dd400517 	ldw	r21,20(sp)
 400c108:	dd000417 	ldw	r20,16(sp)
 400c10c:	dcc00317 	ldw	r19,12(sp)
 400c110:	dc800217 	ldw	r18,8(sp)
 400c114:	dc400117 	ldw	r17,4(sp)
 400c118:	dc000017 	ldw	r16,0(sp)
 400c11c:	dec00a04 	addi	sp,sp,40
 400c120:	f800283a 	ret

0400c124 <___svfiprintf_internal_r>:
 400c124:	2880030b 	ldhu	r2,12(r5)
 400c128:	deffc804 	addi	sp,sp,-224
 400c12c:	dcc03115 	stw	r19,196(sp)
 400c130:	dfc03715 	stw	ra,220(sp)
 400c134:	df003615 	stw	fp,216(sp)
 400c138:	ddc03515 	stw	r23,212(sp)
 400c13c:	dd803415 	stw	r22,208(sp)
 400c140:	dd403315 	stw	r21,204(sp)
 400c144:	dd003215 	stw	r20,200(sp)
 400c148:	dc803015 	stw	r18,192(sp)
 400c14c:	dc402f15 	stw	r17,188(sp)
 400c150:	dc002e15 	stw	r16,184(sp)
 400c154:	d9402315 	stw	r5,140(sp)
 400c158:	d9002715 	stw	r4,156(sp)
 400c15c:	1080200c 	andi	r2,r2,128
 400c160:	d9c02415 	stw	r7,144(sp)
 400c164:	3027883a 	mov	r19,r6
 400c168:	10000226 	beq	r2,zero,400c174 <___svfiprintf_internal_r+0x50>
 400c16c:	28800417 	ldw	r2,16(r5)
 400c170:	10046d26 	beq	r2,zero,400d328 <___svfiprintf_internal_r+0x1204>
 400c174:	d8801a04 	addi	r2,sp,104
 400c178:	d8c019c4 	addi	r3,sp,103
 400c17c:	05810074 	movhi	r22,1025
 400c180:	10c9c83a 	sub	r4,r2,r3
 400c184:	b5882304 	addi	r22,r22,8332
 400c188:	d8801e15 	stw	r2,120(sp)
 400c18c:	d8c01f15 	stw	r3,124(sp)
 400c190:	dec01a15 	stw	sp,104(sp)
 400c194:	d8001c15 	stw	zero,112(sp)
 400c198:	d8001b15 	stw	zero,108(sp)
 400c19c:	d811883a 	mov	r8,sp
 400c1a0:	d8002915 	stw	zero,164(sp)
 400c1a4:	d8002615 	stw	zero,152(sp)
 400c1a8:	d9002c15 	stw	r4,176(sp)
 400c1ac:	98800007 	ldb	r2,0(r19)
 400c1b0:	10031426 	beq	r2,zero,400ce04 <___svfiprintf_internal_r+0xce0>
 400c1b4:	00c00944 	movi	r3,37
 400c1b8:	9825883a 	mov	r18,r19
 400c1bc:	10c0021e 	bne	r2,r3,400c1c8 <___svfiprintf_internal_r+0xa4>
 400c1c0:	00001406 	br	400c214 <___svfiprintf_internal_r+0xf0>
 400c1c4:	10c00326 	beq	r2,r3,400c1d4 <___svfiprintf_internal_r+0xb0>
 400c1c8:	94800044 	addi	r18,r18,1
 400c1cc:	90800007 	ldb	r2,0(r18)
 400c1d0:	103ffc1e 	bne	r2,zero,400c1c4 <__alt_data_end+0xfc00c1c4>
 400c1d4:	94e1c83a 	sub	r16,r18,r19
 400c1d8:	80000e26 	beq	r16,zero,400c214 <___svfiprintf_internal_r+0xf0>
 400c1dc:	d8c01c17 	ldw	r3,112(sp)
 400c1e0:	d8801b17 	ldw	r2,108(sp)
 400c1e4:	44c00015 	stw	r19,0(r8)
 400c1e8:	1c07883a 	add	r3,r3,r16
 400c1ec:	10800044 	addi	r2,r2,1
 400c1f0:	d8c01c15 	stw	r3,112(sp)
 400c1f4:	44000115 	stw	r16,4(r8)
 400c1f8:	d8801b15 	stw	r2,108(sp)
 400c1fc:	00c001c4 	movi	r3,7
 400c200:	18835c16 	blt	r3,r2,400cf74 <___svfiprintf_internal_r+0xe50>
 400c204:	42000204 	addi	r8,r8,8
 400c208:	d9402617 	ldw	r5,152(sp)
 400c20c:	2c0b883a 	add	r5,r5,r16
 400c210:	d9402615 	stw	r5,152(sp)
 400c214:	90800007 	ldb	r2,0(r18)
 400c218:	1002fc26 	beq	r2,zero,400ce0c <___svfiprintf_internal_r+0xce8>
 400c21c:	0023883a 	mov	r17,zero
 400c220:	00bfffc4 	movi	r2,-1
 400c224:	0021883a 	mov	r16,zero
 400c228:	94c00044 	addi	r19,r18,1
 400c22c:	90c00047 	ldb	r3,1(r18)
 400c230:	dc402105 	stb	r17,132(sp)
 400c234:	d8001d85 	stb	zero,118(sp)
 400c238:	002b883a 	mov	r21,zero
 400c23c:	d8802015 	stw	r2,128(sp)
 400c240:	d8002515 	stw	zero,148(sp)
 400c244:	04801604 	movi	r18,88
 400c248:	05000244 	movi	r20,9
 400c24c:	402f883a 	mov	r23,r8
 400c250:	8023883a 	mov	r17,r16
 400c254:	9cc00044 	addi	r19,r19,1
 400c258:	18bff804 	addi	r2,r3,-32
 400c25c:	9081fb36 	bltu	r18,r2,400ca4c <___svfiprintf_internal_r+0x928>
 400c260:	100490ba 	slli	r2,r2,2
 400c264:	01010074 	movhi	r4,1025
 400c268:	21309e04 	addi	r4,r4,-15752
 400c26c:	1105883a 	add	r2,r2,r4
 400c270:	10800017 	ldw	r2,0(r2)
 400c274:	1000683a 	jmp	r2
 400c278:	0400c478 	rdprs	r16,zero,785
 400c27c:	0400ca4c 	andi	r16,zero,809
 400c280:	0400ca4c 	andi	r16,zero,809
 400c284:	0400c46c 	andhi	r16,zero,785
 400c288:	0400ca4c 	andi	r16,zero,809
 400c28c:	0400ca4c 	andi	r16,zero,809
 400c290:	0400ca4c 	andi	r16,zero,809
 400c294:	0400ca4c 	andi	r16,zero,809
 400c298:	0400ca4c 	andi	r16,zero,809
 400c29c:	0400ca4c 	andi	r16,zero,809
 400c2a0:	0400c3dc 	xori	r16,zero,783
 400c2a4:	0400c5d8 	cmpnei	r16,zero,791
 400c2a8:	0400ca4c 	andi	r16,zero,809
 400c2ac:	0400c404 	movi	r16,784
 400c2b0:	0400ca88 	cmpgei	r16,zero,810
 400c2b4:	0400ca4c 	andi	r16,zero,809
 400c2b8:	0400ca7c 	xorhi	r16,zero,809
 400c2bc:	0400ca10 	cmplti	r16,zero,808
 400c2c0:	0400ca10 	cmplti	r16,zero,808
 400c2c4:	0400ca10 	cmplti	r16,zero,808
 400c2c8:	0400ca10 	cmplti	r16,zero,808
 400c2cc:	0400ca10 	cmplti	r16,zero,808
 400c2d0:	0400ca10 	cmplti	r16,zero,808
 400c2d4:	0400ca10 	cmplti	r16,zero,808
 400c2d8:	0400ca10 	cmplti	r16,zero,808
 400c2dc:	0400ca10 	cmplti	r16,zero,808
 400c2e0:	0400ca4c 	andi	r16,zero,809
 400c2e4:	0400ca4c 	andi	r16,zero,809
 400c2e8:	0400ca4c 	andi	r16,zero,809
 400c2ec:	0400ca4c 	andi	r16,zero,809
 400c2f0:	0400ca4c 	andi	r16,zero,809
 400c2f4:	0400ca4c 	andi	r16,zero,809
 400c2f8:	0400ca4c 	andi	r16,zero,809
 400c2fc:	0400ca4c 	andi	r16,zero,809
 400c300:	0400ca4c 	andi	r16,zero,809
 400c304:	0400ca4c 	andi	r16,zero,809
 400c308:	0400c994 	movui	r16,806
 400c30c:	0400ca4c 	andi	r16,zero,809
 400c310:	0400ca4c 	andi	r16,zero,809
 400c314:	0400ca4c 	andi	r16,zero,809
 400c318:	0400ca4c 	andi	r16,zero,809
 400c31c:	0400ca4c 	andi	r16,zero,809
 400c320:	0400ca4c 	andi	r16,zero,809
 400c324:	0400ca4c 	andi	r16,zero,809
 400c328:	0400ca4c 	andi	r16,zero,809
 400c32c:	0400ca4c 	andi	r16,zero,809
 400c330:	0400ca4c 	andi	r16,zero,809
 400c334:	0400cb44 	movi	r16,813
 400c338:	0400ca4c 	andi	r16,zero,809
 400c33c:	0400ca4c 	andi	r16,zero,809
 400c340:	0400ca4c 	andi	r16,zero,809
 400c344:	0400ca4c 	andi	r16,zero,809
 400c348:	0400ca4c 	andi	r16,zero,809
 400c34c:	0400cad0 	cmplti	r16,zero,811
 400c350:	0400ca4c 	andi	r16,zero,809
 400c354:	0400ca4c 	andi	r16,zero,809
 400c358:	0400c7d0 	cmplti	r16,zero,799
 400c35c:	0400ca4c 	andi	r16,zero,809
 400c360:	0400ca4c 	andi	r16,zero,809
 400c364:	0400ca4c 	andi	r16,zero,809
 400c368:	0400ca4c 	andi	r16,zero,809
 400c36c:	0400ca4c 	andi	r16,zero,809
 400c370:	0400ca4c 	andi	r16,zero,809
 400c374:	0400ca4c 	andi	r16,zero,809
 400c378:	0400ca4c 	andi	r16,zero,809
 400c37c:	0400ca4c 	andi	r16,zero,809
 400c380:	0400ca4c 	andi	r16,zero,809
 400c384:	0400c69c 	xori	r16,zero,794
 400c388:	0400c880 	call	400c88 <__alt_mem_sdram-0x3bff378>
 400c38c:	0400ca4c 	andi	r16,zero,809
 400c390:	0400ca4c 	andi	r16,zero,809
 400c394:	0400ca4c 	andi	r16,zero,809
 400c398:	0400c874 	movhi	r16,801
 400c39c:	0400c880 	call	400c88 <__alt_mem_sdram-0x3bff378>
 400c3a0:	0400ca4c 	andi	r16,zero,809
 400c3a4:	0400ca4c 	andi	r16,zero,809
 400c3a8:	0400c860 	cmpeqi	r16,zero,801
 400c3ac:	0400ca4c 	andi	r16,zero,809
 400c3b0:	0400c820 	cmpeqi	r16,zero,800
 400c3b4:	0400c5ec 	andhi	r16,zero,791
 400c3b8:	0400c410 	cmplti	r16,zero,784
 400c3bc:	0400c988 	cmpgei	r16,zero,806
 400c3c0:	0400ca4c 	andi	r16,zero,809
 400c3c4:	0400c934 	movhi	r16,804
 400c3c8:	0400ca4c 	andi	r16,zero,809
 400c3cc:	0400c550 	cmplti	r16,zero,789
 400c3d0:	0400ca4c 	andi	r16,zero,809
 400c3d4:	0400ca4c 	andi	r16,zero,809
 400c3d8:	0400c49c 	xori	r16,zero,786
 400c3dc:	d9002417 	ldw	r4,144(sp)
 400c3e0:	d9402417 	ldw	r5,144(sp)
 400c3e4:	21000017 	ldw	r4,0(r4)
 400c3e8:	28800104 	addi	r2,r5,4
 400c3ec:	d9002515 	stw	r4,148(sp)
 400c3f0:	20032b0e 	bge	r4,zero,400d0a0 <___svfiprintf_internal_r+0xf7c>
 400c3f4:	d8c02517 	ldw	r3,148(sp)
 400c3f8:	d8802415 	stw	r2,144(sp)
 400c3fc:	00c7c83a 	sub	r3,zero,r3
 400c400:	d8c02515 	stw	r3,148(sp)
 400c404:	8c400114 	ori	r17,r17,4
 400c408:	98c00007 	ldb	r3,0(r19)
 400c40c:	003f9106 	br	400c254 <__alt_data_end+0xfc00c254>
 400c410:	00800c04 	movi	r2,48
 400c414:	d9402417 	ldw	r5,144(sp)
 400c418:	d9002017 	ldw	r4,128(sp)
 400c41c:	d8801d05 	stb	r2,116(sp)
 400c420:	00801e04 	movi	r2,120
 400c424:	d8801d45 	stb	r2,117(sp)
 400c428:	d8001d85 	stb	zero,118(sp)
 400c42c:	b811883a 	mov	r8,r23
 400c430:	28c00104 	addi	r3,r5,4
 400c434:	2c800017 	ldw	r18,0(r5)
 400c438:	0029883a 	mov	r20,zero
 400c43c:	88800094 	ori	r2,r17,2
 400c440:	20036316 	blt	r4,zero,400d1d0 <___svfiprintf_internal_r+0x10ac>
 400c444:	00bfdfc4 	movi	r2,-129
 400c448:	88a0703a 	and	r16,r17,r2
 400c44c:	d8c02415 	stw	r3,144(sp)
 400c450:	84000094 	ori	r16,r16,2
 400c454:	90031c26 	beq	r18,zero,400d0c8 <___svfiprintf_internal_r+0xfa4>
 400c458:	01410074 	movhi	r5,1025
 400c45c:	2947c204 	addi	r5,r5,7944
 400c460:	002b883a 	mov	r21,zero
 400c464:	d9402915 	stw	r5,164(sp)
 400c468:	00002906 	br	400c510 <___svfiprintf_internal_r+0x3ec>
 400c46c:	8c400054 	ori	r17,r17,1
 400c470:	98c00007 	ldb	r3,0(r19)
 400c474:	003f7706 	br	400c254 <__alt_data_end+0xfc00c254>
 400c478:	a8803fcc 	andi	r2,r21,255
 400c47c:	1080201c 	xori	r2,r2,128
 400c480:	10bfe004 	addi	r2,r2,-128
 400c484:	10032a1e 	bne	r2,zero,400d130 <___svfiprintf_internal_r+0x100c>
 400c488:	00c00044 	movi	r3,1
 400c48c:	d8c02105 	stb	r3,132(sp)
 400c490:	05400804 	movi	r21,32
 400c494:	98c00007 	ldb	r3,0(r19)
 400c498:	003f6e06 	br	400c254 <__alt_data_end+0xfc00c254>
 400c49c:	8821883a 	mov	r16,r17
 400c4a0:	dc402103 	ldbu	r17,132(sp)
 400c4a4:	b811883a 	mov	r8,r23
 400c4a8:	8c403fcc 	andi	r17,r17,255
 400c4ac:	8803f01e 	bne	r17,zero,400d470 <___svfiprintf_internal_r+0x134c>
 400c4b0:	00810074 	movhi	r2,1025
 400c4b4:	1087c204 	addi	r2,r2,7944
 400c4b8:	d8802915 	stw	r2,164(sp)
 400c4bc:	8080080c 	andi	r2,r16,32
 400c4c0:	1000cd26 	beq	r2,zero,400c7f8 <___svfiprintf_internal_r+0x6d4>
 400c4c4:	d9002417 	ldw	r4,144(sp)
 400c4c8:	24800017 	ldw	r18,0(r4)
 400c4cc:	25000117 	ldw	r20,4(r4)
 400c4d0:	21000204 	addi	r4,r4,8
 400c4d4:	d9002415 	stw	r4,144(sp)
 400c4d8:	8080004c 	andi	r2,r16,1
 400c4dc:	1002c726 	beq	r2,zero,400cffc <___svfiprintf_internal_r+0xed8>
 400c4e0:	9504b03a 	or	r2,r18,r20
 400c4e4:	1003061e 	bne	r2,zero,400d100 <___svfiprintf_internal_r+0xfdc>
 400c4e8:	d9002017 	ldw	r4,128(sp)
 400c4ec:	d8001d85 	stb	zero,118(sp)
 400c4f0:	20033e16 	blt	r4,zero,400d1ec <___svfiprintf_internal_r+0x10c8>
 400c4f4:	00bfdfc4 	movi	r2,-129
 400c4f8:	80a0703a 	and	r16,r16,r2
 400c4fc:	d9402017 	ldw	r5,128(sp)
 400c500:	002b883a 	mov	r21,zero
 400c504:	28002826 	beq	r5,zero,400c5a8 <___svfiprintf_internal_r+0x484>
 400c508:	0025883a 	mov	r18,zero
 400c50c:	0029883a 	mov	r20,zero
 400c510:	d9002917 	ldw	r4,164(sp)
 400c514:	dc401a04 	addi	r17,sp,104
 400c518:	908003cc 	andi	r2,r18,15
 400c51c:	a006973a 	slli	r3,r20,28
 400c520:	2085883a 	add	r2,r4,r2
 400c524:	9024d13a 	srli	r18,r18,4
 400c528:	10800003 	ldbu	r2,0(r2)
 400c52c:	a028d13a 	srli	r20,r20,4
 400c530:	8c7fffc4 	addi	r17,r17,-1
 400c534:	1ca4b03a 	or	r18,r3,r18
 400c538:	88800005 	stb	r2,0(r17)
 400c53c:	9504b03a 	or	r2,r18,r20
 400c540:	103ff51e 	bne	r2,zero,400c518 <__alt_data_end+0xfc00c518>
 400c544:	d8801e17 	ldw	r2,120(sp)
 400c548:	1469c83a 	sub	r20,r2,r17
 400c54c:	00001906 	br	400c5b4 <___svfiprintf_internal_r+0x490>
 400c550:	8821883a 	mov	r16,r17
 400c554:	dc402103 	ldbu	r17,132(sp)
 400c558:	b811883a 	mov	r8,r23
 400c55c:	8c403fcc 	andi	r17,r17,255
 400c560:	8803d01e 	bne	r17,zero,400d4a4 <___svfiprintf_internal_r+0x1380>
 400c564:	8080080c 	andi	r2,r16,32
 400c568:	10016126 	beq	r2,zero,400caf0 <___svfiprintf_internal_r+0x9cc>
 400c56c:	d9002417 	ldw	r4,144(sp)
 400c570:	d9402017 	ldw	r5,128(sp)
 400c574:	d8001d85 	stb	zero,118(sp)
 400c578:	20c00204 	addi	r3,r4,8
 400c57c:	24800017 	ldw	r18,0(r4)
 400c580:	25000117 	ldw	r20,4(r4)
 400c584:	28030f16 	blt	r5,zero,400d1c4 <___svfiprintf_internal_r+0x10a0>
 400c588:	013fdfc4 	movi	r4,-129
 400c58c:	9504b03a 	or	r2,r18,r20
 400c590:	d8c02415 	stw	r3,144(sp)
 400c594:	8120703a 	and	r16,r16,r4
 400c598:	002b883a 	mov	r21,zero
 400c59c:	1000cd1e 	bne	r2,zero,400c8d4 <___svfiprintf_internal_r+0x7b0>
 400c5a0:	d8c02017 	ldw	r3,128(sp)
 400c5a4:	1803141e 	bne	r3,zero,400d1f8 <___svfiprintf_internal_r+0x10d4>
 400c5a8:	d8002015 	stw	zero,128(sp)
 400c5ac:	0029883a 	mov	r20,zero
 400c5b0:	dc401a04 	addi	r17,sp,104
 400c5b4:	dc802017 	ldw	r18,128(sp)
 400c5b8:	9500010e 	bge	r18,r20,400c5c0 <___svfiprintf_internal_r+0x49c>
 400c5bc:	a025883a 	mov	r18,r20
 400c5c0:	ad403fcc 	andi	r21,r21,255
 400c5c4:	ad40201c 	xori	r21,r21,128
 400c5c8:	ad7fe004 	addi	r21,r21,-128
 400c5cc:	a8003f26 	beq	r21,zero,400c6cc <___svfiprintf_internal_r+0x5a8>
 400c5d0:	94800044 	addi	r18,r18,1
 400c5d4:	00003d06 	br	400c6cc <___svfiprintf_internal_r+0x5a8>
 400c5d8:	00c00044 	movi	r3,1
 400c5dc:	d8c02105 	stb	r3,132(sp)
 400c5e0:	05400ac4 	movi	r21,43
 400c5e4:	98c00007 	ldb	r3,0(r19)
 400c5e8:	003f1a06 	br	400c254 <__alt_data_end+0xfc00c254>
 400c5ec:	8821883a 	mov	r16,r17
 400c5f0:	dc402103 	ldbu	r17,132(sp)
 400c5f4:	b811883a 	mov	r8,r23
 400c5f8:	8c403fcc 	andi	r17,r17,255
 400c5fc:	8803a71e 	bne	r17,zero,400d49c <___svfiprintf_internal_r+0x1378>
 400c600:	8080080c 	andi	r2,r16,32
 400c604:	10015726 	beq	r2,zero,400cb64 <___svfiprintf_internal_r+0xa40>
 400c608:	d8c02417 	ldw	r3,144(sp)
 400c60c:	d9002017 	ldw	r4,128(sp)
 400c610:	d8001d85 	stb	zero,118(sp)
 400c614:	18800204 	addi	r2,r3,8
 400c618:	1c800017 	ldw	r18,0(r3)
 400c61c:	1d000117 	ldw	r20,4(r3)
 400c620:	2002db16 	blt	r4,zero,400d190 <___svfiprintf_internal_r+0x106c>
 400c624:	013fdfc4 	movi	r4,-129
 400c628:	9506b03a 	or	r3,r18,r20
 400c62c:	d8802415 	stw	r2,144(sp)
 400c630:	8120703a 	and	r16,r16,r4
 400c634:	18015826 	beq	r3,zero,400cb98 <___svfiprintf_internal_r+0xa74>
 400c638:	002b883a 	mov	r21,zero
 400c63c:	dc401a04 	addi	r17,sp,104
 400c640:	9006d0fa 	srli	r3,r18,3
 400c644:	a008977a 	slli	r4,r20,29
 400c648:	a028d0fa 	srli	r20,r20,3
 400c64c:	948001cc 	andi	r18,r18,7
 400c650:	90800c04 	addi	r2,r18,48
 400c654:	8c7fffc4 	addi	r17,r17,-1
 400c658:	20e4b03a 	or	r18,r4,r3
 400c65c:	88800005 	stb	r2,0(r17)
 400c660:	9506b03a 	or	r3,r18,r20
 400c664:	183ff61e 	bne	r3,zero,400c640 <__alt_data_end+0xfc00c640>
 400c668:	80c0004c 	andi	r3,r16,1
 400c66c:	18028926 	beq	r3,zero,400d094 <___svfiprintf_internal_r+0xf70>
 400c670:	10803fcc 	andi	r2,r2,255
 400c674:	1080201c 	xori	r2,r2,128
 400c678:	10bfe004 	addi	r2,r2,-128
 400c67c:	00c00c04 	movi	r3,48
 400c680:	10ffb026 	beq	r2,r3,400c544 <__alt_data_end+0xfc00c544>
 400c684:	88ffffc5 	stb	r3,-1(r17)
 400c688:	d8c01e17 	ldw	r3,120(sp)
 400c68c:	88bfffc4 	addi	r2,r17,-1
 400c690:	1023883a 	mov	r17,r2
 400c694:	18a9c83a 	sub	r20,r3,r2
 400c698:	003fc606 	br	400c5b4 <__alt_data_end+0xfc00c5b4>
 400c69c:	d8c02417 	ldw	r3,144(sp)
 400c6a0:	04800044 	movi	r18,1
 400c6a4:	8821883a 	mov	r16,r17
 400c6a8:	18800017 	ldw	r2,0(r3)
 400c6ac:	18c00104 	addi	r3,r3,4
 400c6b0:	b811883a 	mov	r8,r23
 400c6b4:	d8001d85 	stb	zero,118(sp)
 400c6b8:	d8801005 	stb	r2,64(sp)
 400c6bc:	d8c02415 	stw	r3,144(sp)
 400c6c0:	9029883a 	mov	r20,r18
 400c6c4:	dc401004 	addi	r17,sp,64
 400c6c8:	d8002015 	stw	zero,128(sp)
 400c6cc:	80c0008c 	andi	r3,r16,2
 400c6d0:	d8c02115 	stw	r3,132(sp)
 400c6d4:	18000126 	beq	r3,zero,400c6dc <___svfiprintf_internal_r+0x5b8>
 400c6d8:	94800084 	addi	r18,r18,2
 400c6dc:	80c0210c 	andi	r3,r16,132
 400c6e0:	d8c02215 	stw	r3,136(sp)
 400c6e4:	1801321e 	bne	r3,zero,400cbb0 <___svfiprintf_internal_r+0xa8c>
 400c6e8:	d9002517 	ldw	r4,148(sp)
 400c6ec:	24b9c83a 	sub	fp,r4,r18
 400c6f0:	07012f0e 	bge	zero,fp,400cbb0 <___svfiprintf_internal_r+0xa8c>
 400c6f4:	02400404 	movi	r9,16
 400c6f8:	d8c01c17 	ldw	r3,112(sp)
 400c6fc:	d8801b17 	ldw	r2,108(sp)
 400c700:	4f03250e 	bge	r9,fp,400d398 <___svfiprintf_internal_r+0x1274>
 400c704:	01010074 	movhi	r4,1025
 400c708:	21082704 	addi	r4,r4,8348
 400c70c:	dc002a15 	stw	r16,168(sp)
 400c710:	dc402b15 	stw	r17,172(sp)
 400c714:	d9002815 	stw	r4,160(sp)
 400c718:	e023883a 	mov	r17,fp
 400c71c:	482f883a 	mov	r23,r9
 400c720:	9839883a 	mov	fp,r19
 400c724:	054001c4 	movi	r21,7
 400c728:	9027883a 	mov	r19,r18
 400c72c:	dc002717 	ldw	r16,156(sp)
 400c730:	dc802317 	ldw	r18,140(sp)
 400c734:	00000306 	br	400c744 <___svfiprintf_internal_r+0x620>
 400c738:	8c7ffc04 	addi	r17,r17,-16
 400c73c:	42000204 	addi	r8,r8,8
 400c740:	bc40130e 	bge	r23,r17,400c790 <___svfiprintf_internal_r+0x66c>
 400c744:	01410074 	movhi	r5,1025
 400c748:	18c00404 	addi	r3,r3,16
 400c74c:	10800044 	addi	r2,r2,1
 400c750:	29482704 	addi	r5,r5,8348
 400c754:	41400015 	stw	r5,0(r8)
 400c758:	45c00115 	stw	r23,4(r8)
 400c75c:	d8c01c15 	stw	r3,112(sp)
 400c760:	d8801b15 	stw	r2,108(sp)
 400c764:	a8bff40e 	bge	r21,r2,400c738 <__alt_data_end+0xfc00c738>
 400c768:	d9801a04 	addi	r6,sp,104
 400c76c:	900b883a 	mov	r5,r18
 400c770:	8009883a 	mov	r4,r16
 400c774:	400bf540 	call	400bf54 <__ssprint_r>
 400c778:	1001aa1e 	bne	r2,zero,400ce24 <___svfiprintf_internal_r+0xd00>
 400c77c:	8c7ffc04 	addi	r17,r17,-16
 400c780:	d8c01c17 	ldw	r3,112(sp)
 400c784:	d8801b17 	ldw	r2,108(sp)
 400c788:	d811883a 	mov	r8,sp
 400c78c:	bc7fed16 	blt	r23,r17,400c744 <__alt_data_end+0xfc00c744>
 400c790:	9825883a 	mov	r18,r19
 400c794:	dc002a17 	ldw	r16,168(sp)
 400c798:	e027883a 	mov	r19,fp
 400c79c:	8839883a 	mov	fp,r17
 400c7a0:	dc402b17 	ldw	r17,172(sp)
 400c7a4:	d9002817 	ldw	r4,160(sp)
 400c7a8:	e0c7883a 	add	r3,fp,r3
 400c7ac:	10800044 	addi	r2,r2,1
 400c7b0:	41000015 	stw	r4,0(r8)
 400c7b4:	47000115 	stw	fp,4(r8)
 400c7b8:	d8c01c15 	stw	r3,112(sp)
 400c7bc:	d8801b15 	stw	r2,108(sp)
 400c7c0:	010001c4 	movi	r4,7
 400c7c4:	20821616 	blt	r4,r2,400d020 <___svfiprintf_internal_r+0xefc>
 400c7c8:	42000204 	addi	r8,r8,8
 400c7cc:	0000fa06 	br	400cbb8 <___svfiprintf_internal_r+0xa94>
 400c7d0:	8821883a 	mov	r16,r17
 400c7d4:	dc402103 	ldbu	r17,132(sp)
 400c7d8:	b811883a 	mov	r8,r23
 400c7dc:	8c403fcc 	andi	r17,r17,255
 400c7e0:	8803361e 	bne	r17,zero,400d4bc <___svfiprintf_internal_r+0x1398>
 400c7e4:	01410074 	movhi	r5,1025
 400c7e8:	2947bd04 	addi	r5,r5,7924
 400c7ec:	d9402915 	stw	r5,164(sp)
 400c7f0:	8080080c 	andi	r2,r16,32
 400c7f4:	103f331e 	bne	r2,zero,400c4c4 <__alt_data_end+0xfc00c4c4>
 400c7f8:	8080040c 	andi	r2,r16,16
 400c7fc:	1002551e 	bne	r2,zero,400d154 <___svfiprintf_internal_r+0x1030>
 400c800:	8080100c 	andi	r2,r16,64
 400c804:	1002a626 	beq	r2,zero,400d2a0 <___svfiprintf_internal_r+0x117c>
 400c808:	d8802417 	ldw	r2,144(sp)
 400c80c:	0029883a 	mov	r20,zero
 400c810:	1480000b 	ldhu	r18,0(r2)
 400c814:	10800104 	addi	r2,r2,4
 400c818:	d8802415 	stw	r2,144(sp)
 400c81c:	003f2e06 	br	400c4d8 <__alt_data_end+0xfc00c4d8>
 400c820:	8821883a 	mov	r16,r17
 400c824:	dc402103 	ldbu	r17,132(sp)
 400c828:	b811883a 	mov	r8,r23
 400c82c:	8c403fcc 	andi	r17,r17,255
 400c830:	88030b1e 	bne	r17,zero,400d460 <___svfiprintf_internal_r+0x133c>
 400c834:	8080080c 	andi	r2,r16,32
 400c838:	1002271e 	bne	r2,zero,400d0d8 <___svfiprintf_internal_r+0xfb4>
 400c83c:	8080040c 	andi	r2,r16,16
 400c840:	10028e26 	beq	r2,zero,400d27c <___svfiprintf_internal_r+0x1158>
 400c844:	d8c02417 	ldw	r3,144(sp)
 400c848:	d9002617 	ldw	r4,152(sp)
 400c84c:	18800017 	ldw	r2,0(r3)
 400c850:	18c00104 	addi	r3,r3,4
 400c854:	d8c02415 	stw	r3,144(sp)
 400c858:	11000015 	stw	r4,0(r2)
 400c85c:	003e5306 	br	400c1ac <__alt_data_end+0xfc00c1ac>
 400c860:	98c00007 	ldb	r3,0(r19)
 400c864:	01401b04 	movi	r5,108
 400c868:	19424f26 	beq	r3,r5,400d1a8 <___svfiprintf_internal_r+0x1084>
 400c86c:	8c400414 	ori	r17,r17,16
 400c870:	003e7806 	br	400c254 <__alt_data_end+0xfc00c254>
 400c874:	8c401014 	ori	r17,r17,64
 400c878:	98c00007 	ldb	r3,0(r19)
 400c87c:	003e7506 	br	400c254 <__alt_data_end+0xfc00c254>
 400c880:	8821883a 	mov	r16,r17
 400c884:	dc402103 	ldbu	r17,132(sp)
 400c888:	b811883a 	mov	r8,r23
 400c88c:	8c403fcc 	andi	r17,r17,255
 400c890:	8802fe1e 	bne	r17,zero,400d48c <___svfiprintf_internal_r+0x1368>
 400c894:	8080080c 	andi	r2,r16,32
 400c898:	10004626 	beq	r2,zero,400c9b4 <___svfiprintf_internal_r+0x890>
 400c89c:	d9002417 	ldw	r4,144(sp)
 400c8a0:	20800117 	ldw	r2,4(r4)
 400c8a4:	24800017 	ldw	r18,0(r4)
 400c8a8:	21000204 	addi	r4,r4,8
 400c8ac:	d9002415 	stw	r4,144(sp)
 400c8b0:	1029883a 	mov	r20,r2
 400c8b4:	10004a16 	blt	r2,zero,400c9e0 <___svfiprintf_internal_r+0x8bc>
 400c8b8:	d9002017 	ldw	r4,128(sp)
 400c8bc:	dd401d83 	ldbu	r21,118(sp)
 400c8c0:	2001eb16 	blt	r4,zero,400d070 <___svfiprintf_internal_r+0xf4c>
 400c8c4:	00ffdfc4 	movi	r3,-129
 400c8c8:	9504b03a 	or	r2,r18,r20
 400c8cc:	80e0703a 	and	r16,r16,r3
 400c8d0:	103f3326 	beq	r2,zero,400c5a0 <__alt_data_end+0xfc00c5a0>
 400c8d4:	a0009426 	beq	r20,zero,400cb28 <___svfiprintf_internal_r+0xa04>
 400c8d8:	dc401a04 	addi	r17,sp,104
 400c8dc:	402f883a 	mov	r23,r8
 400c8e0:	9009883a 	mov	r4,r18
 400c8e4:	a00b883a 	mov	r5,r20
 400c8e8:	01800284 	movi	r6,10
 400c8ec:	000f883a 	mov	r7,zero
 400c8f0:	400e7b80 	call	400e7b8 <__umoddi3>
 400c8f4:	10800c04 	addi	r2,r2,48
 400c8f8:	8c7fffc4 	addi	r17,r17,-1
 400c8fc:	9009883a 	mov	r4,r18
 400c900:	a00b883a 	mov	r5,r20
 400c904:	88800005 	stb	r2,0(r17)
 400c908:	01800284 	movi	r6,10
 400c90c:	000f883a 	mov	r7,zero
 400c910:	400e1bc0 	call	400e1bc <__udivdi3>
 400c914:	1025883a 	mov	r18,r2
 400c918:	10c4b03a 	or	r2,r2,r3
 400c91c:	1829883a 	mov	r20,r3
 400c920:	103fef1e 	bne	r2,zero,400c8e0 <__alt_data_end+0xfc00c8e0>
 400c924:	d9001e17 	ldw	r4,120(sp)
 400c928:	b811883a 	mov	r8,r23
 400c92c:	2469c83a 	sub	r20,r4,r17
 400c930:	003f2006 	br	400c5b4 <__alt_data_end+0xfc00c5b4>
 400c934:	d8802417 	ldw	r2,144(sp)
 400c938:	8821883a 	mov	r16,r17
 400c93c:	d8001d85 	stb	zero,118(sp)
 400c940:	14400017 	ldw	r17,0(r2)
 400c944:	b811883a 	mov	r8,r23
 400c948:	15c00104 	addi	r23,r2,4
 400c94c:	88026c26 	beq	r17,zero,400d300 <___svfiprintf_internal_r+0x11dc>
 400c950:	d8c02017 	ldw	r3,128(sp)
 400c954:	18025f16 	blt	r3,zero,400d2d4 <___svfiprintf_internal_r+0x11b0>
 400c958:	180d883a 	mov	r6,r3
 400c95c:	000b883a 	mov	r5,zero
 400c960:	8809883a 	mov	r4,r17
 400c964:	da002d15 	stw	r8,180(sp)
 400c968:	400ab7c0 	call	400ab7c <memchr>
 400c96c:	da002d17 	ldw	r8,180(sp)
 400c970:	1002a526 	beq	r2,zero,400d408 <___svfiprintf_internal_r+0x12e4>
 400c974:	1469c83a 	sub	r20,r2,r17
 400c978:	dd401d83 	ldbu	r21,118(sp)
 400c97c:	ddc02415 	stw	r23,144(sp)
 400c980:	d8002015 	stw	zero,128(sp)
 400c984:	003f0b06 	br	400c5b4 <__alt_data_end+0xfc00c5b4>
 400c988:	8c400814 	ori	r17,r17,32
 400c98c:	98c00007 	ldb	r3,0(r19)
 400c990:	003e3006 	br	400c254 <__alt_data_end+0xfc00c254>
 400c994:	8821883a 	mov	r16,r17
 400c998:	dc402103 	ldbu	r17,132(sp)
 400c99c:	b811883a 	mov	r8,r23
 400c9a0:	8c403fcc 	andi	r17,r17,255
 400c9a4:	8802b01e 	bne	r17,zero,400d468 <___svfiprintf_internal_r+0x1344>
 400c9a8:	84000414 	ori	r16,r16,16
 400c9ac:	8080080c 	andi	r2,r16,32
 400c9b0:	103fba1e 	bne	r2,zero,400c89c <__alt_data_end+0xfc00c89c>
 400c9b4:	8080040c 	andi	r2,r16,16
 400c9b8:	1001df1e 	bne	r2,zero,400d138 <___svfiprintf_internal_r+0x1014>
 400c9bc:	8080100c 	andi	r2,r16,64
 400c9c0:	10023d26 	beq	r2,zero,400d2b8 <___svfiprintf_internal_r+0x1194>
 400c9c4:	d8802417 	ldw	r2,144(sp)
 400c9c8:	1480000f 	ldh	r18,0(r2)
 400c9cc:	10800104 	addi	r2,r2,4
 400c9d0:	d8802415 	stw	r2,144(sp)
 400c9d4:	9029d7fa 	srai	r20,r18,31
 400c9d8:	a005883a 	mov	r2,r20
 400c9dc:	103fb60e 	bge	r2,zero,400c8b8 <__alt_data_end+0xfc00c8b8>
 400c9e0:	d9402017 	ldw	r5,128(sp)
 400c9e4:	04a5c83a 	sub	r18,zero,r18
 400c9e8:	05400b44 	movi	r21,45
 400c9ec:	9004c03a 	cmpne	r2,r18,zero
 400c9f0:	0529c83a 	sub	r20,zero,r20
 400c9f4:	dd401d85 	stb	r21,118(sp)
 400c9f8:	a0a9c83a 	sub	r20,r20,r2
 400c9fc:	28026c16 	blt	r5,zero,400d3b0 <___svfiprintf_internal_r+0x128c>
 400ca00:	00bfdfc4 	movi	r2,-129
 400ca04:	80a0703a 	and	r16,r16,r2
 400ca08:	a03fb31e 	bne	r20,zero,400c8d8 <__alt_data_end+0xfc00c8d8>
 400ca0c:	00004606 	br	400cb28 <___svfiprintf_internal_r+0xa04>
 400ca10:	9839883a 	mov	fp,r19
 400ca14:	d8002515 	stw	zero,148(sp)
 400ca18:	1c3ff404 	addi	r16,r3,-48
 400ca1c:	0009883a 	mov	r4,zero
 400ca20:	01400284 	movi	r5,10
 400ca24:	40024640 	call	4002464 <__mulsi3>
 400ca28:	e0c00007 	ldb	r3,0(fp)
 400ca2c:	8089883a 	add	r4,r16,r2
 400ca30:	9cc00044 	addi	r19,r19,1
 400ca34:	1c3ff404 	addi	r16,r3,-48
 400ca38:	9839883a 	mov	fp,r19
 400ca3c:	a43ff82e 	bgeu	r20,r16,400ca20 <__alt_data_end+0xfc00ca20>
 400ca40:	d9002515 	stw	r4,148(sp)
 400ca44:	18bff804 	addi	r2,r3,-32
 400ca48:	90be052e 	bgeu	r18,r2,400c260 <__alt_data_end+0xfc00c260>
 400ca4c:	8821883a 	mov	r16,r17
 400ca50:	dc402103 	ldbu	r17,132(sp)
 400ca54:	b811883a 	mov	r8,r23
 400ca58:	8c403fcc 	andi	r17,r17,255
 400ca5c:	88028d1e 	bne	r17,zero,400d494 <___svfiprintf_internal_r+0x1370>
 400ca60:	1800ea26 	beq	r3,zero,400ce0c <___svfiprintf_internal_r+0xce8>
 400ca64:	04800044 	movi	r18,1
 400ca68:	d8c01005 	stb	r3,64(sp)
 400ca6c:	d8001d85 	stb	zero,118(sp)
 400ca70:	9029883a 	mov	r20,r18
 400ca74:	dc401004 	addi	r17,sp,64
 400ca78:	003f1306 	br	400c6c8 <__alt_data_end+0xfc00c6c8>
 400ca7c:	8c402014 	ori	r17,r17,128
 400ca80:	98c00007 	ldb	r3,0(r19)
 400ca84:	003df306 	br	400c254 <__alt_data_end+0xfc00c254>
 400ca88:	98c00007 	ldb	r3,0(r19)
 400ca8c:	01000a84 	movi	r4,42
 400ca90:	9f000044 	addi	fp,r19,1
 400ca94:	19026326 	beq	r3,r4,400d424 <___svfiprintf_internal_r+0x1300>
 400ca98:	1c3ff404 	addi	r16,r3,-48
 400ca9c:	0009883a 	mov	r4,zero
 400caa0:	a4025636 	bltu	r20,r16,400d3fc <___svfiprintf_internal_r+0x12d8>
 400caa4:	01400284 	movi	r5,10
 400caa8:	40024640 	call	4002464 <__mulsi3>
 400caac:	e0c00007 	ldb	r3,0(fp)
 400cab0:	1409883a 	add	r4,r2,r16
 400cab4:	e4c00044 	addi	r19,fp,1
 400cab8:	1c3ff404 	addi	r16,r3,-48
 400cabc:	9839883a 	mov	fp,r19
 400cac0:	a43ff82e 	bgeu	r20,r16,400caa4 <__alt_data_end+0xfc00caa4>
 400cac4:	20020c16 	blt	r4,zero,400d2f8 <___svfiprintf_internal_r+0x11d4>
 400cac8:	d9002015 	stw	r4,128(sp)
 400cacc:	003de206 	br	400c258 <__alt_data_end+0xfc00c258>
 400cad0:	8821883a 	mov	r16,r17
 400cad4:	dc402103 	ldbu	r17,132(sp)
 400cad8:	b811883a 	mov	r8,r23
 400cadc:	8c403fcc 	andi	r17,r17,255
 400cae0:	8802721e 	bne	r17,zero,400d4ac <___svfiprintf_internal_r+0x1388>
 400cae4:	84000414 	ori	r16,r16,16
 400cae8:	8080080c 	andi	r2,r16,32
 400caec:	103e9f1e 	bne	r2,zero,400c56c <__alt_data_end+0xfc00c56c>
 400caf0:	8080040c 	andi	r2,r16,16
 400caf4:	10015326 	beq	r2,zero,400d044 <___svfiprintf_internal_r+0xf20>
 400caf8:	d8c02417 	ldw	r3,144(sp)
 400cafc:	d9002017 	ldw	r4,128(sp)
 400cb00:	d8001d85 	stb	zero,118(sp)
 400cb04:	18800104 	addi	r2,r3,4
 400cb08:	1c800017 	ldw	r18,0(r3)
 400cb0c:	0029883a 	mov	r20,zero
 400cb10:	20015516 	blt	r4,zero,400d068 <___svfiprintf_internal_r+0xf44>
 400cb14:	00ffdfc4 	movi	r3,-129
 400cb18:	d8802415 	stw	r2,144(sp)
 400cb1c:	80e0703a 	and	r16,r16,r3
 400cb20:	002b883a 	mov	r21,zero
 400cb24:	903e9e26 	beq	r18,zero,400c5a0 <__alt_data_end+0xfc00c5a0>
 400cb28:	00800244 	movi	r2,9
 400cb2c:	14bf6a36 	bltu	r2,r18,400c8d8 <__alt_data_end+0xfc00c8d8>
 400cb30:	94800c04 	addi	r18,r18,48
 400cb34:	dc8019c5 	stb	r18,103(sp)
 400cb38:	dd002c17 	ldw	r20,176(sp)
 400cb3c:	dc4019c4 	addi	r17,sp,103
 400cb40:	003e9c06 	br	400c5b4 <__alt_data_end+0xfc00c5b4>
 400cb44:	8821883a 	mov	r16,r17
 400cb48:	dc402103 	ldbu	r17,132(sp)
 400cb4c:	b811883a 	mov	r8,r23
 400cb50:	8c403fcc 	andi	r17,r17,255
 400cb54:	8802571e 	bne	r17,zero,400d4b4 <___svfiprintf_internal_r+0x1390>
 400cb58:	84000414 	ori	r16,r16,16
 400cb5c:	8080080c 	andi	r2,r16,32
 400cb60:	103ea91e 	bne	r2,zero,400c608 <__alt_data_end+0xfc00c608>
 400cb64:	8080040c 	andi	r2,r16,16
 400cb68:	10018026 	beq	r2,zero,400d16c <___svfiprintf_internal_r+0x1048>
 400cb6c:	d9402417 	ldw	r5,144(sp)
 400cb70:	d8c02017 	ldw	r3,128(sp)
 400cb74:	d8001d85 	stb	zero,118(sp)
 400cb78:	28800104 	addi	r2,r5,4
 400cb7c:	2c800017 	ldw	r18,0(r5)
 400cb80:	0029883a 	mov	r20,zero
 400cb84:	18018216 	blt	r3,zero,400d190 <___svfiprintf_internal_r+0x106c>
 400cb88:	00ffdfc4 	movi	r3,-129
 400cb8c:	d8802415 	stw	r2,144(sp)
 400cb90:	80e0703a 	and	r16,r16,r3
 400cb94:	903ea81e 	bne	r18,zero,400c638 <__alt_data_end+0xfc00c638>
 400cb98:	d8802017 	ldw	r2,128(sp)
 400cb9c:	002b883a 	mov	r21,zero
 400cba0:	1001f226 	beq	r2,zero,400d36c <___svfiprintf_internal_r+0x1248>
 400cba4:	0025883a 	mov	r18,zero
 400cba8:	0029883a 	mov	r20,zero
 400cbac:	003ea306 	br	400c63c <__alt_data_end+0xfc00c63c>
 400cbb0:	d8c01c17 	ldw	r3,112(sp)
 400cbb4:	d8801b17 	ldw	r2,108(sp)
 400cbb8:	d9001d87 	ldb	r4,118(sp)
 400cbbc:	20000b26 	beq	r4,zero,400cbec <___svfiprintf_internal_r+0xac8>
 400cbc0:	d9001d84 	addi	r4,sp,118
 400cbc4:	18c00044 	addi	r3,r3,1
 400cbc8:	10800044 	addi	r2,r2,1
 400cbcc:	41000015 	stw	r4,0(r8)
 400cbd0:	01000044 	movi	r4,1
 400cbd4:	41000115 	stw	r4,4(r8)
 400cbd8:	d8c01c15 	stw	r3,112(sp)
 400cbdc:	d8801b15 	stw	r2,108(sp)
 400cbe0:	010001c4 	movi	r4,7
 400cbe4:	2080f316 	blt	r4,r2,400cfb4 <___svfiprintf_internal_r+0xe90>
 400cbe8:	42000204 	addi	r8,r8,8
 400cbec:	d9402117 	ldw	r5,132(sp)
 400cbf0:	28000b26 	beq	r5,zero,400cc20 <___svfiprintf_internal_r+0xafc>
 400cbf4:	d9001d04 	addi	r4,sp,116
 400cbf8:	18c00084 	addi	r3,r3,2
 400cbfc:	10800044 	addi	r2,r2,1
 400cc00:	41000015 	stw	r4,0(r8)
 400cc04:	01000084 	movi	r4,2
 400cc08:	41000115 	stw	r4,4(r8)
 400cc0c:	d8c01c15 	stw	r3,112(sp)
 400cc10:	d8801b15 	stw	r2,108(sp)
 400cc14:	010001c4 	movi	r4,7
 400cc18:	2080ef16 	blt	r4,r2,400cfd8 <___svfiprintf_internal_r+0xeb4>
 400cc1c:	42000204 	addi	r8,r8,8
 400cc20:	d9402217 	ldw	r5,136(sp)
 400cc24:	01002004 	movi	r4,128
 400cc28:	29008f26 	beq	r5,r4,400ce68 <___svfiprintf_internal_r+0xd44>
 400cc2c:	d9002017 	ldw	r4,128(sp)
 400cc30:	252fc83a 	sub	r23,r4,r20
 400cc34:	05c0310e 	bge	zero,r23,400ccfc <___svfiprintf_internal_r+0xbd8>
 400cc38:	07000404 	movi	fp,16
 400cc3c:	e5c17d0e 	bge	fp,r23,400d234 <___svfiprintf_internal_r+0x1110>
 400cc40:	01010074 	movhi	r4,1025
 400cc44:	21082304 	addi	r4,r4,8332
 400cc48:	dc002015 	stw	r16,128(sp)
 400cc4c:	dc402215 	stw	r17,136(sp)
 400cc50:	d9002115 	stw	r4,132(sp)
 400cc54:	b823883a 	mov	r17,r23
 400cc58:	054001c4 	movi	r21,7
 400cc5c:	982f883a 	mov	r23,r19
 400cc60:	dc002717 	ldw	r16,156(sp)
 400cc64:	9027883a 	mov	r19,r18
 400cc68:	dc802317 	ldw	r18,140(sp)
 400cc6c:	00000306 	br	400cc7c <___svfiprintf_internal_r+0xb58>
 400cc70:	8c7ffc04 	addi	r17,r17,-16
 400cc74:	42000204 	addi	r8,r8,8
 400cc78:	e440110e 	bge	fp,r17,400ccc0 <___svfiprintf_internal_r+0xb9c>
 400cc7c:	18c00404 	addi	r3,r3,16
 400cc80:	10800044 	addi	r2,r2,1
 400cc84:	45800015 	stw	r22,0(r8)
 400cc88:	47000115 	stw	fp,4(r8)
 400cc8c:	d8c01c15 	stw	r3,112(sp)
 400cc90:	d8801b15 	stw	r2,108(sp)
 400cc94:	a8bff60e 	bge	r21,r2,400cc70 <__alt_data_end+0xfc00cc70>
 400cc98:	d9801a04 	addi	r6,sp,104
 400cc9c:	900b883a 	mov	r5,r18
 400cca0:	8009883a 	mov	r4,r16
 400cca4:	400bf540 	call	400bf54 <__ssprint_r>
 400cca8:	10005e1e 	bne	r2,zero,400ce24 <___svfiprintf_internal_r+0xd00>
 400ccac:	8c7ffc04 	addi	r17,r17,-16
 400ccb0:	d8c01c17 	ldw	r3,112(sp)
 400ccb4:	d8801b17 	ldw	r2,108(sp)
 400ccb8:	d811883a 	mov	r8,sp
 400ccbc:	e47fef16 	blt	fp,r17,400cc7c <__alt_data_end+0xfc00cc7c>
 400ccc0:	9825883a 	mov	r18,r19
 400ccc4:	dc002017 	ldw	r16,128(sp)
 400ccc8:	b827883a 	mov	r19,r23
 400cccc:	882f883a 	mov	r23,r17
 400ccd0:	dc402217 	ldw	r17,136(sp)
 400ccd4:	d9402117 	ldw	r5,132(sp)
 400ccd8:	1dc7883a 	add	r3,r3,r23
 400ccdc:	10800044 	addi	r2,r2,1
 400cce0:	41400015 	stw	r5,0(r8)
 400cce4:	45c00115 	stw	r23,4(r8)
 400cce8:	d8c01c15 	stw	r3,112(sp)
 400ccec:	d8801b15 	stw	r2,108(sp)
 400ccf0:	010001c4 	movi	r4,7
 400ccf4:	2080a616 	blt	r4,r2,400cf90 <___svfiprintf_internal_r+0xe6c>
 400ccf8:	42000204 	addi	r8,r8,8
 400ccfc:	a0c7883a 	add	r3,r20,r3
 400cd00:	10800044 	addi	r2,r2,1
 400cd04:	44400015 	stw	r17,0(r8)
 400cd08:	45000115 	stw	r20,4(r8)
 400cd0c:	d8c01c15 	stw	r3,112(sp)
 400cd10:	d8801b15 	stw	r2,108(sp)
 400cd14:	010001c4 	movi	r4,7
 400cd18:	20808816 	blt	r4,r2,400cf3c <___svfiprintf_internal_r+0xe18>
 400cd1c:	42000204 	addi	r8,r8,8
 400cd20:	8400010c 	andi	r16,r16,4
 400cd24:	80002c26 	beq	r16,zero,400cdd8 <___svfiprintf_internal_r+0xcb4>
 400cd28:	d8802517 	ldw	r2,148(sp)
 400cd2c:	14a1c83a 	sub	r16,r2,r18
 400cd30:	0400290e 	bge	zero,r16,400cdd8 <___svfiprintf_internal_r+0xcb4>
 400cd34:	04400404 	movi	r17,16
 400cd38:	d8801b17 	ldw	r2,108(sp)
 400cd3c:	8c01a70e 	bge	r17,r16,400d3dc <___svfiprintf_internal_r+0x12b8>
 400cd40:	01410074 	movhi	r5,1025
 400cd44:	29482704 	addi	r5,r5,8348
 400cd48:	d9402815 	stw	r5,160(sp)
 400cd4c:	050001c4 	movi	r20,7
 400cd50:	dd402717 	ldw	r21,156(sp)
 400cd54:	ddc02317 	ldw	r23,140(sp)
 400cd58:	00000306 	br	400cd68 <___svfiprintf_internal_r+0xc44>
 400cd5c:	843ffc04 	addi	r16,r16,-16
 400cd60:	42000204 	addi	r8,r8,8
 400cd64:	8c00130e 	bge	r17,r16,400cdb4 <___svfiprintf_internal_r+0xc90>
 400cd68:	01010074 	movhi	r4,1025
 400cd6c:	18c00404 	addi	r3,r3,16
 400cd70:	10800044 	addi	r2,r2,1
 400cd74:	21082704 	addi	r4,r4,8348
 400cd78:	41000015 	stw	r4,0(r8)
 400cd7c:	44400115 	stw	r17,4(r8)
 400cd80:	d8c01c15 	stw	r3,112(sp)
 400cd84:	d8801b15 	stw	r2,108(sp)
 400cd88:	a0bff40e 	bge	r20,r2,400cd5c <__alt_data_end+0xfc00cd5c>
 400cd8c:	d9801a04 	addi	r6,sp,104
 400cd90:	b80b883a 	mov	r5,r23
 400cd94:	a809883a 	mov	r4,r21
 400cd98:	400bf540 	call	400bf54 <__ssprint_r>
 400cd9c:	1000211e 	bne	r2,zero,400ce24 <___svfiprintf_internal_r+0xd00>
 400cda0:	843ffc04 	addi	r16,r16,-16
 400cda4:	d8c01c17 	ldw	r3,112(sp)
 400cda8:	d8801b17 	ldw	r2,108(sp)
 400cdac:	d811883a 	mov	r8,sp
 400cdb0:	8c3fed16 	blt	r17,r16,400cd68 <__alt_data_end+0xfc00cd68>
 400cdb4:	d9402817 	ldw	r5,160(sp)
 400cdb8:	1c07883a 	add	r3,r3,r16
 400cdbc:	10800044 	addi	r2,r2,1
 400cdc0:	41400015 	stw	r5,0(r8)
 400cdc4:	44000115 	stw	r16,4(r8)
 400cdc8:	d8c01c15 	stw	r3,112(sp)
 400cdcc:	d8801b15 	stw	r2,108(sp)
 400cdd0:	010001c4 	movi	r4,7
 400cdd4:	2080b516 	blt	r4,r2,400d0ac <___svfiprintf_internal_r+0xf88>
 400cdd8:	d8802517 	ldw	r2,148(sp)
 400cddc:	1480010e 	bge	r2,r18,400cde4 <___svfiprintf_internal_r+0xcc0>
 400cde0:	9005883a 	mov	r2,r18
 400cde4:	d9002617 	ldw	r4,152(sp)
 400cde8:	2089883a 	add	r4,r4,r2
 400cdec:	d9002615 	stw	r4,152(sp)
 400cdf0:	18005a1e 	bne	r3,zero,400cf5c <___svfiprintf_internal_r+0xe38>
 400cdf4:	98800007 	ldb	r2,0(r19)
 400cdf8:	d8001b15 	stw	zero,108(sp)
 400cdfc:	d811883a 	mov	r8,sp
 400ce00:	103cec1e 	bne	r2,zero,400c1b4 <__alt_data_end+0xfc00c1b4>
 400ce04:	9825883a 	mov	r18,r19
 400ce08:	003d0206 	br	400c214 <__alt_data_end+0xfc00c214>
 400ce0c:	d8801c17 	ldw	r2,112(sp)
 400ce10:	10000426 	beq	r2,zero,400ce24 <___svfiprintf_internal_r+0xd00>
 400ce14:	d9402317 	ldw	r5,140(sp)
 400ce18:	d9002717 	ldw	r4,156(sp)
 400ce1c:	d9801a04 	addi	r6,sp,104
 400ce20:	400bf540 	call	400bf54 <__ssprint_r>
 400ce24:	d9402317 	ldw	r5,140(sp)
 400ce28:	d8802617 	ldw	r2,152(sp)
 400ce2c:	28c0030b 	ldhu	r3,12(r5)
 400ce30:	18c0100c 	andi	r3,r3,64
 400ce34:	18015c1e 	bne	r3,zero,400d3a8 <___svfiprintf_internal_r+0x1284>
 400ce38:	dfc03717 	ldw	ra,220(sp)
 400ce3c:	df003617 	ldw	fp,216(sp)
 400ce40:	ddc03517 	ldw	r23,212(sp)
 400ce44:	dd803417 	ldw	r22,208(sp)
 400ce48:	dd403317 	ldw	r21,204(sp)
 400ce4c:	dd003217 	ldw	r20,200(sp)
 400ce50:	dcc03117 	ldw	r19,196(sp)
 400ce54:	dc803017 	ldw	r18,192(sp)
 400ce58:	dc402f17 	ldw	r17,188(sp)
 400ce5c:	dc002e17 	ldw	r16,184(sp)
 400ce60:	dec03804 	addi	sp,sp,224
 400ce64:	f800283a 	ret
 400ce68:	d9002517 	ldw	r4,148(sp)
 400ce6c:	24afc83a 	sub	r23,r4,r18
 400ce70:	05ff6e0e 	bge	zero,r23,400cc2c <__alt_data_end+0xfc00cc2c>
 400ce74:	07000404 	movi	fp,16
 400ce78:	e5c15c0e 	bge	fp,r23,400d3ec <___svfiprintf_internal_r+0x12c8>
 400ce7c:	01010074 	movhi	r4,1025
 400ce80:	21082304 	addi	r4,r4,8332
 400ce84:	dc002215 	stw	r16,136(sp)
 400ce88:	dc402815 	stw	r17,160(sp)
 400ce8c:	d9002115 	stw	r4,132(sp)
 400ce90:	b823883a 	mov	r17,r23
 400ce94:	054001c4 	movi	r21,7
 400ce98:	982f883a 	mov	r23,r19
 400ce9c:	dc002717 	ldw	r16,156(sp)
 400cea0:	9027883a 	mov	r19,r18
 400cea4:	dc802317 	ldw	r18,140(sp)
 400cea8:	00000306 	br	400ceb8 <___svfiprintf_internal_r+0xd94>
 400ceac:	8c7ffc04 	addi	r17,r17,-16
 400ceb0:	42000204 	addi	r8,r8,8
 400ceb4:	e440110e 	bge	fp,r17,400cefc <___svfiprintf_internal_r+0xdd8>
 400ceb8:	18c00404 	addi	r3,r3,16
 400cebc:	10800044 	addi	r2,r2,1
 400cec0:	45800015 	stw	r22,0(r8)
 400cec4:	47000115 	stw	fp,4(r8)
 400cec8:	d8c01c15 	stw	r3,112(sp)
 400cecc:	d8801b15 	stw	r2,108(sp)
 400ced0:	a8bff60e 	bge	r21,r2,400ceac <__alt_data_end+0xfc00ceac>
 400ced4:	d9801a04 	addi	r6,sp,104
 400ced8:	900b883a 	mov	r5,r18
 400cedc:	8009883a 	mov	r4,r16
 400cee0:	400bf540 	call	400bf54 <__ssprint_r>
 400cee4:	103fcf1e 	bne	r2,zero,400ce24 <__alt_data_end+0xfc00ce24>
 400cee8:	8c7ffc04 	addi	r17,r17,-16
 400ceec:	d8c01c17 	ldw	r3,112(sp)
 400cef0:	d8801b17 	ldw	r2,108(sp)
 400cef4:	d811883a 	mov	r8,sp
 400cef8:	e47fef16 	blt	fp,r17,400ceb8 <__alt_data_end+0xfc00ceb8>
 400cefc:	9825883a 	mov	r18,r19
 400cf00:	dc002217 	ldw	r16,136(sp)
 400cf04:	b827883a 	mov	r19,r23
 400cf08:	882f883a 	mov	r23,r17
 400cf0c:	dc402817 	ldw	r17,160(sp)
 400cf10:	d9402117 	ldw	r5,132(sp)
 400cf14:	1dc7883a 	add	r3,r3,r23
 400cf18:	10800044 	addi	r2,r2,1
 400cf1c:	41400015 	stw	r5,0(r8)
 400cf20:	45c00115 	stw	r23,4(r8)
 400cf24:	d8c01c15 	stw	r3,112(sp)
 400cf28:	d8801b15 	stw	r2,108(sp)
 400cf2c:	010001c4 	movi	r4,7
 400cf30:	2080b716 	blt	r4,r2,400d210 <___svfiprintf_internal_r+0x10ec>
 400cf34:	42000204 	addi	r8,r8,8
 400cf38:	003f3c06 	br	400cc2c <__alt_data_end+0xfc00cc2c>
 400cf3c:	d9402317 	ldw	r5,140(sp)
 400cf40:	d9002717 	ldw	r4,156(sp)
 400cf44:	d9801a04 	addi	r6,sp,104
 400cf48:	400bf540 	call	400bf54 <__ssprint_r>
 400cf4c:	103fb51e 	bne	r2,zero,400ce24 <__alt_data_end+0xfc00ce24>
 400cf50:	d8c01c17 	ldw	r3,112(sp)
 400cf54:	d811883a 	mov	r8,sp
 400cf58:	003f7106 	br	400cd20 <__alt_data_end+0xfc00cd20>
 400cf5c:	d9402317 	ldw	r5,140(sp)
 400cf60:	d9002717 	ldw	r4,156(sp)
 400cf64:	d9801a04 	addi	r6,sp,104
 400cf68:	400bf540 	call	400bf54 <__ssprint_r>
 400cf6c:	103fa126 	beq	r2,zero,400cdf4 <__alt_data_end+0xfc00cdf4>
 400cf70:	003fac06 	br	400ce24 <__alt_data_end+0xfc00ce24>
 400cf74:	d9402317 	ldw	r5,140(sp)
 400cf78:	d9002717 	ldw	r4,156(sp)
 400cf7c:	d9801a04 	addi	r6,sp,104
 400cf80:	400bf540 	call	400bf54 <__ssprint_r>
 400cf84:	103fa71e 	bne	r2,zero,400ce24 <__alt_data_end+0xfc00ce24>
 400cf88:	d811883a 	mov	r8,sp
 400cf8c:	003c9e06 	br	400c208 <__alt_data_end+0xfc00c208>
 400cf90:	d9402317 	ldw	r5,140(sp)
 400cf94:	d9002717 	ldw	r4,156(sp)
 400cf98:	d9801a04 	addi	r6,sp,104
 400cf9c:	400bf540 	call	400bf54 <__ssprint_r>
 400cfa0:	103fa01e 	bne	r2,zero,400ce24 <__alt_data_end+0xfc00ce24>
 400cfa4:	d8c01c17 	ldw	r3,112(sp)
 400cfa8:	d8801b17 	ldw	r2,108(sp)
 400cfac:	d811883a 	mov	r8,sp
 400cfb0:	003f5206 	br	400ccfc <__alt_data_end+0xfc00ccfc>
 400cfb4:	d9402317 	ldw	r5,140(sp)
 400cfb8:	d9002717 	ldw	r4,156(sp)
 400cfbc:	d9801a04 	addi	r6,sp,104
 400cfc0:	400bf540 	call	400bf54 <__ssprint_r>
 400cfc4:	103f971e 	bne	r2,zero,400ce24 <__alt_data_end+0xfc00ce24>
 400cfc8:	d8c01c17 	ldw	r3,112(sp)
 400cfcc:	d8801b17 	ldw	r2,108(sp)
 400cfd0:	d811883a 	mov	r8,sp
 400cfd4:	003f0506 	br	400cbec <__alt_data_end+0xfc00cbec>
 400cfd8:	d9402317 	ldw	r5,140(sp)
 400cfdc:	d9002717 	ldw	r4,156(sp)
 400cfe0:	d9801a04 	addi	r6,sp,104
 400cfe4:	400bf540 	call	400bf54 <__ssprint_r>
 400cfe8:	103f8e1e 	bne	r2,zero,400ce24 <__alt_data_end+0xfc00ce24>
 400cfec:	d8c01c17 	ldw	r3,112(sp)
 400cff0:	d8801b17 	ldw	r2,108(sp)
 400cff4:	d811883a 	mov	r8,sp
 400cff8:	003f0906 	br	400cc20 <__alt_data_end+0xfc00cc20>
 400cffc:	d9402017 	ldw	r5,128(sp)
 400d000:	d8001d85 	stb	zero,118(sp)
 400d004:	28007716 	blt	r5,zero,400d1e4 <___svfiprintf_internal_r+0x10c0>
 400d008:	00ffdfc4 	movi	r3,-129
 400d00c:	9504b03a 	or	r2,r18,r20
 400d010:	80e0703a 	and	r16,r16,r3
 400d014:	103d3926 	beq	r2,zero,400c4fc <__alt_data_end+0xfc00c4fc>
 400d018:	002b883a 	mov	r21,zero
 400d01c:	003d3c06 	br	400c510 <__alt_data_end+0xfc00c510>
 400d020:	d9402317 	ldw	r5,140(sp)
 400d024:	d9002717 	ldw	r4,156(sp)
 400d028:	d9801a04 	addi	r6,sp,104
 400d02c:	400bf540 	call	400bf54 <__ssprint_r>
 400d030:	103f7c1e 	bne	r2,zero,400ce24 <__alt_data_end+0xfc00ce24>
 400d034:	d8c01c17 	ldw	r3,112(sp)
 400d038:	d8801b17 	ldw	r2,108(sp)
 400d03c:	d811883a 	mov	r8,sp
 400d040:	003edd06 	br	400cbb8 <__alt_data_end+0xfc00cbb8>
 400d044:	8080100c 	andi	r2,r16,64
 400d048:	d8001d85 	stb	zero,118(sp)
 400d04c:	10008426 	beq	r2,zero,400d260 <___svfiprintf_internal_r+0x113c>
 400d050:	d9402417 	ldw	r5,144(sp)
 400d054:	d8c02017 	ldw	r3,128(sp)
 400d058:	0029883a 	mov	r20,zero
 400d05c:	28800104 	addi	r2,r5,4
 400d060:	2c80000b 	ldhu	r18,0(r5)
 400d064:	183eab0e 	bge	r3,zero,400cb14 <__alt_data_end+0xfc00cb14>
 400d068:	d8802415 	stw	r2,144(sp)
 400d06c:	002b883a 	mov	r21,zero
 400d070:	9504b03a 	or	r2,r18,r20
 400d074:	103e171e 	bne	r2,zero,400c8d4 <__alt_data_end+0xfc00c8d4>
 400d078:	00800044 	movi	r2,1
 400d07c:	10803fcc 	andi	r2,r2,255
 400d080:	00c00044 	movi	r3,1
 400d084:	10c05c26 	beq	r2,r3,400d1f8 <___svfiprintf_internal_r+0x10d4>
 400d088:	00c00084 	movi	r3,2
 400d08c:	10fd1e26 	beq	r2,r3,400c508 <__alt_data_end+0xfc00c508>
 400d090:	003ec406 	br	400cba4 <__alt_data_end+0xfc00cba4>
 400d094:	d9401e17 	ldw	r5,120(sp)
 400d098:	2c69c83a 	sub	r20,r5,r17
 400d09c:	003d4506 	br	400c5b4 <__alt_data_end+0xfc00c5b4>
 400d0a0:	d8802415 	stw	r2,144(sp)
 400d0a4:	98c00007 	ldb	r3,0(r19)
 400d0a8:	003c6a06 	br	400c254 <__alt_data_end+0xfc00c254>
 400d0ac:	d9402317 	ldw	r5,140(sp)
 400d0b0:	d9002717 	ldw	r4,156(sp)
 400d0b4:	d9801a04 	addi	r6,sp,104
 400d0b8:	400bf540 	call	400bf54 <__ssprint_r>
 400d0bc:	103f591e 	bne	r2,zero,400ce24 <__alt_data_end+0xfc00ce24>
 400d0c0:	d8c01c17 	ldw	r3,112(sp)
 400d0c4:	003f4406 	br	400cdd8 <__alt_data_end+0xfc00cdd8>
 400d0c8:	01410074 	movhi	r5,1025
 400d0cc:	2947c204 	addi	r5,r5,7944
 400d0d0:	d9402915 	stw	r5,164(sp)
 400d0d4:	003d0906 	br	400c4fc <__alt_data_end+0xfc00c4fc>
 400d0d8:	d8c02417 	ldw	r3,144(sp)
 400d0dc:	d9002617 	ldw	r4,152(sp)
 400d0e0:	d9402417 	ldw	r5,144(sp)
 400d0e4:	18800017 	ldw	r2,0(r3)
 400d0e8:	2007d7fa 	srai	r3,r4,31
 400d0ec:	29400104 	addi	r5,r5,4
 400d0f0:	d9402415 	stw	r5,144(sp)
 400d0f4:	11000015 	stw	r4,0(r2)
 400d0f8:	10c00115 	stw	r3,4(r2)
 400d0fc:	003c2b06 	br	400c1ac <__alt_data_end+0xfc00c1ac>
 400d100:	d8c01d45 	stb	r3,117(sp)
 400d104:	d8c02017 	ldw	r3,128(sp)
 400d108:	00800c04 	movi	r2,48
 400d10c:	d8801d05 	stb	r2,116(sp)
 400d110:	d8001d85 	stb	zero,118(sp)
 400d114:	80800094 	ori	r2,r16,2
 400d118:	1800ac16 	blt	r3,zero,400d3cc <___svfiprintf_internal_r+0x12a8>
 400d11c:	00bfdfc4 	movi	r2,-129
 400d120:	80a0703a 	and	r16,r16,r2
 400d124:	84000094 	ori	r16,r16,2
 400d128:	002b883a 	mov	r21,zero
 400d12c:	003cf806 	br	400c510 <__alt_data_end+0xfc00c510>
 400d130:	98c00007 	ldb	r3,0(r19)
 400d134:	003c4706 	br	400c254 <__alt_data_end+0xfc00c254>
 400d138:	d9402417 	ldw	r5,144(sp)
 400d13c:	2c800017 	ldw	r18,0(r5)
 400d140:	29400104 	addi	r5,r5,4
 400d144:	d9402415 	stw	r5,144(sp)
 400d148:	9029d7fa 	srai	r20,r18,31
 400d14c:	a005883a 	mov	r2,r20
 400d150:	003dd806 	br	400c8b4 <__alt_data_end+0xfc00c8b4>
 400d154:	d9402417 	ldw	r5,144(sp)
 400d158:	0029883a 	mov	r20,zero
 400d15c:	2c800017 	ldw	r18,0(r5)
 400d160:	29400104 	addi	r5,r5,4
 400d164:	d9402415 	stw	r5,144(sp)
 400d168:	003cdb06 	br	400c4d8 <__alt_data_end+0xfc00c4d8>
 400d16c:	8080100c 	andi	r2,r16,64
 400d170:	d8001d85 	stb	zero,118(sp)
 400d174:	10003326 	beq	r2,zero,400d244 <___svfiprintf_internal_r+0x1120>
 400d178:	d9002417 	ldw	r4,144(sp)
 400d17c:	d9402017 	ldw	r5,128(sp)
 400d180:	0029883a 	mov	r20,zero
 400d184:	20800104 	addi	r2,r4,4
 400d188:	2480000b 	ldhu	r18,0(r4)
 400d18c:	283e7e0e 	bge	r5,zero,400cb88 <__alt_data_end+0xfc00cb88>
 400d190:	9506b03a 	or	r3,r18,r20
 400d194:	d8802415 	stw	r2,144(sp)
 400d198:	183d271e 	bne	r3,zero,400c638 <__alt_data_end+0xfc00c638>
 400d19c:	002b883a 	mov	r21,zero
 400d1a0:	0005883a 	mov	r2,zero
 400d1a4:	003fb506 	br	400d07c <__alt_data_end+0xfc00d07c>
 400d1a8:	98c00043 	ldbu	r3,1(r19)
 400d1ac:	8c400814 	ori	r17,r17,32
 400d1b0:	9cc00044 	addi	r19,r19,1
 400d1b4:	18c03fcc 	andi	r3,r3,255
 400d1b8:	18c0201c 	xori	r3,r3,128
 400d1bc:	18ffe004 	addi	r3,r3,-128
 400d1c0:	003c2406 	br	400c254 <__alt_data_end+0xfc00c254>
 400d1c4:	d8c02415 	stw	r3,144(sp)
 400d1c8:	002b883a 	mov	r21,zero
 400d1cc:	003fa806 	br	400d070 <__alt_data_end+0xfc00d070>
 400d1d0:	01010074 	movhi	r4,1025
 400d1d4:	2107c204 	addi	r4,r4,7944
 400d1d8:	d9002915 	stw	r4,164(sp)
 400d1dc:	d8c02415 	stw	r3,144(sp)
 400d1e0:	1021883a 	mov	r16,r2
 400d1e4:	9504b03a 	or	r2,r18,r20
 400d1e8:	103f8b1e 	bne	r2,zero,400d018 <__alt_data_end+0xfc00d018>
 400d1ec:	002b883a 	mov	r21,zero
 400d1f0:	00800084 	movi	r2,2
 400d1f4:	003fa106 	br	400d07c <__alt_data_end+0xfc00d07c>
 400d1f8:	0025883a 	mov	r18,zero
 400d1fc:	94800c04 	addi	r18,r18,48
 400d200:	dc8019c5 	stb	r18,103(sp)
 400d204:	dd002c17 	ldw	r20,176(sp)
 400d208:	dc4019c4 	addi	r17,sp,103
 400d20c:	003ce906 	br	400c5b4 <__alt_data_end+0xfc00c5b4>
 400d210:	d9402317 	ldw	r5,140(sp)
 400d214:	d9002717 	ldw	r4,156(sp)
 400d218:	d9801a04 	addi	r6,sp,104
 400d21c:	400bf540 	call	400bf54 <__ssprint_r>
 400d220:	103f001e 	bne	r2,zero,400ce24 <__alt_data_end+0xfc00ce24>
 400d224:	d8c01c17 	ldw	r3,112(sp)
 400d228:	d8801b17 	ldw	r2,108(sp)
 400d22c:	d811883a 	mov	r8,sp
 400d230:	003e7e06 	br	400cc2c <__alt_data_end+0xfc00cc2c>
 400d234:	01410074 	movhi	r5,1025
 400d238:	29482304 	addi	r5,r5,8332
 400d23c:	d9402115 	stw	r5,132(sp)
 400d240:	003ea406 	br	400ccd4 <__alt_data_end+0xfc00ccd4>
 400d244:	d8c02417 	ldw	r3,144(sp)
 400d248:	d9002017 	ldw	r4,128(sp)
 400d24c:	0029883a 	mov	r20,zero
 400d250:	18800104 	addi	r2,r3,4
 400d254:	1c800017 	ldw	r18,0(r3)
 400d258:	203e4b0e 	bge	r4,zero,400cb88 <__alt_data_end+0xfc00cb88>
 400d25c:	003fcc06 	br	400d190 <__alt_data_end+0xfc00d190>
 400d260:	d9002417 	ldw	r4,144(sp)
 400d264:	d9402017 	ldw	r5,128(sp)
 400d268:	0029883a 	mov	r20,zero
 400d26c:	20800104 	addi	r2,r4,4
 400d270:	24800017 	ldw	r18,0(r4)
 400d274:	283e270e 	bge	r5,zero,400cb14 <__alt_data_end+0xfc00cb14>
 400d278:	003f7b06 	br	400d068 <__alt_data_end+0xfc00d068>
 400d27c:	8400100c 	andi	r16,r16,64
 400d280:	80003326 	beq	r16,zero,400d350 <___svfiprintf_internal_r+0x122c>
 400d284:	d9402417 	ldw	r5,144(sp)
 400d288:	d8c02617 	ldw	r3,152(sp)
 400d28c:	28800017 	ldw	r2,0(r5)
 400d290:	29400104 	addi	r5,r5,4
 400d294:	d9402415 	stw	r5,144(sp)
 400d298:	10c0000d 	sth	r3,0(r2)
 400d29c:	003bc306 	br	400c1ac <__alt_data_end+0xfc00c1ac>
 400d2a0:	d9002417 	ldw	r4,144(sp)
 400d2a4:	0029883a 	mov	r20,zero
 400d2a8:	24800017 	ldw	r18,0(r4)
 400d2ac:	21000104 	addi	r4,r4,4
 400d2b0:	d9002415 	stw	r4,144(sp)
 400d2b4:	003c8806 	br	400c4d8 <__alt_data_end+0xfc00c4d8>
 400d2b8:	d8c02417 	ldw	r3,144(sp)
 400d2bc:	1c800017 	ldw	r18,0(r3)
 400d2c0:	18c00104 	addi	r3,r3,4
 400d2c4:	d8c02415 	stw	r3,144(sp)
 400d2c8:	9029d7fa 	srai	r20,r18,31
 400d2cc:	a005883a 	mov	r2,r20
 400d2d0:	003d7806 	br	400c8b4 <__alt_data_end+0xfc00c8b4>
 400d2d4:	8809883a 	mov	r4,r17
 400d2d8:	da002d15 	stw	r8,180(sp)
 400d2dc:	400bebc0 	call	400bebc <strlen>
 400d2e0:	1029883a 	mov	r20,r2
 400d2e4:	dd401d83 	ldbu	r21,118(sp)
 400d2e8:	ddc02415 	stw	r23,144(sp)
 400d2ec:	d8002015 	stw	zero,128(sp)
 400d2f0:	da002d17 	ldw	r8,180(sp)
 400d2f4:	003caf06 	br	400c5b4 <__alt_data_end+0xfc00c5b4>
 400d2f8:	013fffc4 	movi	r4,-1
 400d2fc:	003df206 	br	400cac8 <__alt_data_end+0xfc00cac8>
 400d300:	dd002017 	ldw	r20,128(sp)
 400d304:	00800184 	movi	r2,6
 400d308:	1500012e 	bgeu	r2,r20,400d310 <___svfiprintf_internal_r+0x11ec>
 400d30c:	1029883a 	mov	r20,r2
 400d310:	a025883a 	mov	r18,r20
 400d314:	a0004116 	blt	r20,zero,400d41c <___svfiprintf_internal_r+0x12f8>
 400d318:	04410074 	movhi	r17,1025
 400d31c:	ddc02415 	stw	r23,144(sp)
 400d320:	8c47c704 	addi	r17,r17,7964
 400d324:	003ce806 	br	400c6c8 <__alt_data_end+0xfc00c6c8>
 400d328:	04001004 	movi	r16,64
 400d32c:	800b883a 	mov	r5,r16
 400d330:	400a3700 	call	400a370 <_malloc_r>
 400d334:	d8c02317 	ldw	r3,140(sp)
 400d338:	18800015 	stw	r2,0(r3)
 400d33c:	18800415 	stw	r2,16(r3)
 400d340:	10004d26 	beq	r2,zero,400d478 <___svfiprintf_internal_r+0x1354>
 400d344:	d9402317 	ldw	r5,140(sp)
 400d348:	2c000515 	stw	r16,20(r5)
 400d34c:	003b8906 	br	400c174 <__alt_data_end+0xfc00c174>
 400d350:	d9002417 	ldw	r4,144(sp)
 400d354:	d9402617 	ldw	r5,152(sp)
 400d358:	20800017 	ldw	r2,0(r4)
 400d35c:	21000104 	addi	r4,r4,4
 400d360:	d9002415 	stw	r4,144(sp)
 400d364:	11400015 	stw	r5,0(r2)
 400d368:	003b9006 	br	400c1ac <__alt_data_end+0xfc00c1ac>
 400d36c:	8080004c 	andi	r2,r16,1
 400d370:	002b883a 	mov	r21,zero
 400d374:	10000526 	beq	r2,zero,400d38c <___svfiprintf_internal_r+0x1268>
 400d378:	00800c04 	movi	r2,48
 400d37c:	d88019c5 	stb	r2,103(sp)
 400d380:	dd002c17 	ldw	r20,176(sp)
 400d384:	dc4019c4 	addi	r17,sp,103
 400d388:	003c8a06 	br	400c5b4 <__alt_data_end+0xfc00c5b4>
 400d38c:	0029883a 	mov	r20,zero
 400d390:	dc401a04 	addi	r17,sp,104
 400d394:	003c8706 	br	400c5b4 <__alt_data_end+0xfc00c5b4>
 400d398:	01410074 	movhi	r5,1025
 400d39c:	29482704 	addi	r5,r5,8348
 400d3a0:	d9402815 	stw	r5,160(sp)
 400d3a4:	003cff06 	br	400c7a4 <__alt_data_end+0xfc00c7a4>
 400d3a8:	00bfffc4 	movi	r2,-1
 400d3ac:	003ea206 	br	400ce38 <__alt_data_end+0xfc00ce38>
 400d3b0:	00800044 	movi	r2,1
 400d3b4:	10803fcc 	andi	r2,r2,255
 400d3b8:	00c00044 	movi	r3,1
 400d3bc:	10fd4526 	beq	r2,r3,400c8d4 <__alt_data_end+0xfc00c8d4>
 400d3c0:	00c00084 	movi	r3,2
 400d3c4:	10fc5226 	beq	r2,r3,400c510 <__alt_data_end+0xfc00c510>
 400d3c8:	003c9c06 	br	400c63c <__alt_data_end+0xfc00c63c>
 400d3cc:	1021883a 	mov	r16,r2
 400d3d0:	002b883a 	mov	r21,zero
 400d3d4:	00800084 	movi	r2,2
 400d3d8:	003ff606 	br	400d3b4 <__alt_data_end+0xfc00d3b4>
 400d3dc:	01010074 	movhi	r4,1025
 400d3e0:	21082704 	addi	r4,r4,8348
 400d3e4:	d9002815 	stw	r4,160(sp)
 400d3e8:	003e7206 	br	400cdb4 <__alt_data_end+0xfc00cdb4>
 400d3ec:	01410074 	movhi	r5,1025
 400d3f0:	29482304 	addi	r5,r5,8332
 400d3f4:	d9402115 	stw	r5,132(sp)
 400d3f8:	003ec506 	br	400cf10 <__alt_data_end+0xfc00cf10>
 400d3fc:	e027883a 	mov	r19,fp
 400d400:	d8002015 	stw	zero,128(sp)
 400d404:	003b9406 	br	400c258 <__alt_data_end+0xfc00c258>
 400d408:	dd002017 	ldw	r20,128(sp)
 400d40c:	dd401d83 	ldbu	r21,118(sp)
 400d410:	ddc02415 	stw	r23,144(sp)
 400d414:	d8002015 	stw	zero,128(sp)
 400d418:	003c6606 	br	400c5b4 <__alt_data_end+0xfc00c5b4>
 400d41c:	0025883a 	mov	r18,zero
 400d420:	003fbd06 	br	400d318 <__alt_data_end+0xfc00d318>
 400d424:	d9402417 	ldw	r5,144(sp)
 400d428:	d8c02417 	ldw	r3,144(sp)
 400d42c:	29400017 	ldw	r5,0(r5)
 400d430:	19000104 	addi	r4,r3,4
 400d434:	d9002415 	stw	r4,144(sp)
 400d438:	d9402015 	stw	r5,128(sp)
 400d43c:	98c00043 	ldbu	r3,1(r19)
 400d440:	e027883a 	mov	r19,fp
 400d444:	283f5b0e 	bge	r5,zero,400d1b4 <__alt_data_end+0xfc00d1b4>
 400d448:	18c03fcc 	andi	r3,r3,255
 400d44c:	013fffc4 	movi	r4,-1
 400d450:	18c0201c 	xori	r3,r3,128
 400d454:	d9002015 	stw	r4,128(sp)
 400d458:	18ffe004 	addi	r3,r3,-128
 400d45c:	003b7d06 	br	400c254 <__alt_data_end+0xfc00c254>
 400d460:	dd401d85 	stb	r21,118(sp)
 400d464:	003cf306 	br	400c834 <__alt_data_end+0xfc00c834>
 400d468:	dd401d85 	stb	r21,118(sp)
 400d46c:	003d4e06 	br	400c9a8 <__alt_data_end+0xfc00c9a8>
 400d470:	dd401d85 	stb	r21,118(sp)
 400d474:	003c0e06 	br	400c4b0 <__alt_data_end+0xfc00c4b0>
 400d478:	d9002717 	ldw	r4,156(sp)
 400d47c:	00800304 	movi	r2,12
 400d480:	20800015 	stw	r2,0(r4)
 400d484:	00bfffc4 	movi	r2,-1
 400d488:	003e6b06 	br	400ce38 <__alt_data_end+0xfc00ce38>
 400d48c:	dd401d85 	stb	r21,118(sp)
 400d490:	003d0006 	br	400c894 <__alt_data_end+0xfc00c894>
 400d494:	dd401d85 	stb	r21,118(sp)
 400d498:	003d7106 	br	400ca60 <__alt_data_end+0xfc00ca60>
 400d49c:	dd401d85 	stb	r21,118(sp)
 400d4a0:	003c5706 	br	400c600 <__alt_data_end+0xfc00c600>
 400d4a4:	dd401d85 	stb	r21,118(sp)
 400d4a8:	003c2e06 	br	400c564 <__alt_data_end+0xfc00c564>
 400d4ac:	dd401d85 	stb	r21,118(sp)
 400d4b0:	003d8c06 	br	400cae4 <__alt_data_end+0xfc00cae4>
 400d4b4:	dd401d85 	stb	r21,118(sp)
 400d4b8:	003da706 	br	400cb58 <__alt_data_end+0xfc00cb58>
 400d4bc:	dd401d85 	stb	r21,118(sp)
 400d4c0:	003cc806 	br	400c7e4 <__alt_data_end+0xfc00c7e4>

0400d4c4 <_calloc_r>:
 400d4c4:	defffe04 	addi	sp,sp,-8
 400d4c8:	2805883a 	mov	r2,r5
 400d4cc:	dc000015 	stw	r16,0(sp)
 400d4d0:	300b883a 	mov	r5,r6
 400d4d4:	2021883a 	mov	r16,r4
 400d4d8:	1009883a 	mov	r4,r2
 400d4dc:	dfc00115 	stw	ra,4(sp)
 400d4e0:	40024640 	call	4002464 <__mulsi3>
 400d4e4:	100b883a 	mov	r5,r2
 400d4e8:	8009883a 	mov	r4,r16
 400d4ec:	400a3700 	call	400a370 <_malloc_r>
 400d4f0:	10002926 	beq	r2,zero,400d598 <_calloc_r+0xd4>
 400d4f4:	11bfff17 	ldw	r6,-4(r2)
 400d4f8:	1021883a 	mov	r16,r2
 400d4fc:	00bfff04 	movi	r2,-4
 400d500:	308c703a 	and	r6,r6,r2
 400d504:	00c00904 	movi	r3,36
 400d508:	308d883a 	add	r6,r6,r2
 400d50c:	19801636 	bltu	r3,r6,400d568 <_calloc_r+0xa4>
 400d510:	008004c4 	movi	r2,19
 400d514:	11800b2e 	bgeu	r2,r6,400d544 <_calloc_r+0x80>
 400d518:	80000015 	stw	zero,0(r16)
 400d51c:	80000115 	stw	zero,4(r16)
 400d520:	008006c4 	movi	r2,27
 400d524:	11801a2e 	bgeu	r2,r6,400d590 <_calloc_r+0xcc>
 400d528:	80000215 	stw	zero,8(r16)
 400d52c:	80000315 	stw	zero,12(r16)
 400d530:	30c0151e 	bne	r6,r3,400d588 <_calloc_r+0xc4>
 400d534:	80000415 	stw	zero,16(r16)
 400d538:	80800604 	addi	r2,r16,24
 400d53c:	80000515 	stw	zero,20(r16)
 400d540:	00000106 	br	400d548 <_calloc_r+0x84>
 400d544:	8005883a 	mov	r2,r16
 400d548:	10000015 	stw	zero,0(r2)
 400d54c:	10000115 	stw	zero,4(r2)
 400d550:	10000215 	stw	zero,8(r2)
 400d554:	8005883a 	mov	r2,r16
 400d558:	dfc00117 	ldw	ra,4(sp)
 400d55c:	dc000017 	ldw	r16,0(sp)
 400d560:	dec00204 	addi	sp,sp,8
 400d564:	f800283a 	ret
 400d568:	000b883a 	mov	r5,zero
 400d56c:	8009883a 	mov	r4,r16
 400d570:	400db300 	call	400db30 <memset>
 400d574:	8005883a 	mov	r2,r16
 400d578:	dfc00117 	ldw	ra,4(sp)
 400d57c:	dc000017 	ldw	r16,0(sp)
 400d580:	dec00204 	addi	sp,sp,8
 400d584:	f800283a 	ret
 400d588:	80800404 	addi	r2,r16,16
 400d58c:	003fee06 	br	400d548 <__alt_data_end+0xfc00d548>
 400d590:	80800204 	addi	r2,r16,8
 400d594:	003fec06 	br	400d548 <__alt_data_end+0xfc00d548>
 400d598:	0005883a 	mov	r2,zero
 400d59c:	003fee06 	br	400d558 <__alt_data_end+0xfc00d558>

0400d5a0 <_malloc_trim_r>:
 400d5a0:	defffb04 	addi	sp,sp,-20
 400d5a4:	dcc00315 	stw	r19,12(sp)
 400d5a8:	04c10074 	movhi	r19,1025
 400d5ac:	dc800215 	stw	r18,8(sp)
 400d5b0:	dc400115 	stw	r17,4(sp)
 400d5b4:	dc000015 	stw	r16,0(sp)
 400d5b8:	dfc00415 	stw	ra,16(sp)
 400d5bc:	2821883a 	mov	r16,r5
 400d5c0:	9cc99904 	addi	r19,r19,9828
 400d5c4:	2025883a 	mov	r18,r4
 400d5c8:	400f0ec0 	call	400f0ec <__malloc_lock>
 400d5cc:	98800217 	ldw	r2,8(r19)
 400d5d0:	14400117 	ldw	r17,4(r2)
 400d5d4:	00bfff04 	movi	r2,-4
 400d5d8:	88a2703a 	and	r17,r17,r2
 400d5dc:	8c21c83a 	sub	r16,r17,r16
 400d5e0:	8403fbc4 	addi	r16,r16,4079
 400d5e4:	8020d33a 	srli	r16,r16,12
 400d5e8:	0083ffc4 	movi	r2,4095
 400d5ec:	843fffc4 	addi	r16,r16,-1
 400d5f0:	8020933a 	slli	r16,r16,12
 400d5f4:	1400060e 	bge	r2,r16,400d610 <_malloc_trim_r+0x70>
 400d5f8:	000b883a 	mov	r5,zero
 400d5fc:	9009883a 	mov	r4,r18
 400d600:	400bd8c0 	call	400bd8c <_sbrk_r>
 400d604:	98c00217 	ldw	r3,8(r19)
 400d608:	1c47883a 	add	r3,r3,r17
 400d60c:	10c00a26 	beq	r2,r3,400d638 <_malloc_trim_r+0x98>
 400d610:	9009883a 	mov	r4,r18
 400d614:	400f1100 	call	400f110 <__malloc_unlock>
 400d618:	0005883a 	mov	r2,zero
 400d61c:	dfc00417 	ldw	ra,16(sp)
 400d620:	dcc00317 	ldw	r19,12(sp)
 400d624:	dc800217 	ldw	r18,8(sp)
 400d628:	dc400117 	ldw	r17,4(sp)
 400d62c:	dc000017 	ldw	r16,0(sp)
 400d630:	dec00504 	addi	sp,sp,20
 400d634:	f800283a 	ret
 400d638:	040bc83a 	sub	r5,zero,r16
 400d63c:	9009883a 	mov	r4,r18
 400d640:	400bd8c0 	call	400bd8c <_sbrk_r>
 400d644:	00ffffc4 	movi	r3,-1
 400d648:	10c00d26 	beq	r2,r3,400d680 <_malloc_trim_r+0xe0>
 400d64c:	00c10074 	movhi	r3,1025
 400d650:	18d73904 	addi	r3,r3,23780
 400d654:	18800017 	ldw	r2,0(r3)
 400d658:	99000217 	ldw	r4,8(r19)
 400d65c:	8c23c83a 	sub	r17,r17,r16
 400d660:	8c400054 	ori	r17,r17,1
 400d664:	1421c83a 	sub	r16,r2,r16
 400d668:	24400115 	stw	r17,4(r4)
 400d66c:	9009883a 	mov	r4,r18
 400d670:	1c000015 	stw	r16,0(r3)
 400d674:	400f1100 	call	400f110 <__malloc_unlock>
 400d678:	00800044 	movi	r2,1
 400d67c:	003fe706 	br	400d61c <__alt_data_end+0xfc00d61c>
 400d680:	000b883a 	mov	r5,zero
 400d684:	9009883a 	mov	r4,r18
 400d688:	400bd8c0 	call	400bd8c <_sbrk_r>
 400d68c:	99000217 	ldw	r4,8(r19)
 400d690:	014003c4 	movi	r5,15
 400d694:	1107c83a 	sub	r3,r2,r4
 400d698:	28ffdd0e 	bge	r5,r3,400d610 <__alt_data_end+0xfc00d610>
 400d69c:	01410074 	movhi	r5,1025
 400d6a0:	294fa304 	addi	r5,r5,16012
 400d6a4:	29400017 	ldw	r5,0(r5)
 400d6a8:	18c00054 	ori	r3,r3,1
 400d6ac:	20c00115 	stw	r3,4(r4)
 400d6b0:	00c10074 	movhi	r3,1025
 400d6b4:	1145c83a 	sub	r2,r2,r5
 400d6b8:	18d73904 	addi	r3,r3,23780
 400d6bc:	18800015 	stw	r2,0(r3)
 400d6c0:	003fd306 	br	400d610 <__alt_data_end+0xfc00d610>

0400d6c4 <_free_r>:
 400d6c4:	28004126 	beq	r5,zero,400d7cc <_free_r+0x108>
 400d6c8:	defffd04 	addi	sp,sp,-12
 400d6cc:	dc400115 	stw	r17,4(sp)
 400d6d0:	dc000015 	stw	r16,0(sp)
 400d6d4:	2023883a 	mov	r17,r4
 400d6d8:	2821883a 	mov	r16,r5
 400d6dc:	dfc00215 	stw	ra,8(sp)
 400d6e0:	400f0ec0 	call	400f0ec <__malloc_lock>
 400d6e4:	81ffff17 	ldw	r7,-4(r16)
 400d6e8:	00bfff84 	movi	r2,-2
 400d6ec:	01010074 	movhi	r4,1025
 400d6f0:	81bffe04 	addi	r6,r16,-8
 400d6f4:	3884703a 	and	r2,r7,r2
 400d6f8:	21099904 	addi	r4,r4,9828
 400d6fc:	308b883a 	add	r5,r6,r2
 400d700:	2a400117 	ldw	r9,4(r5)
 400d704:	22000217 	ldw	r8,8(r4)
 400d708:	00ffff04 	movi	r3,-4
 400d70c:	48c6703a 	and	r3,r9,r3
 400d710:	2a005726 	beq	r5,r8,400d870 <_free_r+0x1ac>
 400d714:	28c00115 	stw	r3,4(r5)
 400d718:	39c0004c 	andi	r7,r7,1
 400d71c:	3800091e 	bne	r7,zero,400d744 <_free_r+0x80>
 400d720:	823ffe17 	ldw	r8,-8(r16)
 400d724:	22400204 	addi	r9,r4,8
 400d728:	320dc83a 	sub	r6,r6,r8
 400d72c:	31c00217 	ldw	r7,8(r6)
 400d730:	1205883a 	add	r2,r2,r8
 400d734:	3a406526 	beq	r7,r9,400d8cc <_free_r+0x208>
 400d738:	32000317 	ldw	r8,12(r6)
 400d73c:	3a000315 	stw	r8,12(r7)
 400d740:	41c00215 	stw	r7,8(r8)
 400d744:	28cf883a 	add	r7,r5,r3
 400d748:	39c00117 	ldw	r7,4(r7)
 400d74c:	39c0004c 	andi	r7,r7,1
 400d750:	38003a26 	beq	r7,zero,400d83c <_free_r+0x178>
 400d754:	10c00054 	ori	r3,r2,1
 400d758:	30c00115 	stw	r3,4(r6)
 400d75c:	3087883a 	add	r3,r6,r2
 400d760:	18800015 	stw	r2,0(r3)
 400d764:	00c07fc4 	movi	r3,511
 400d768:	18801936 	bltu	r3,r2,400d7d0 <_free_r+0x10c>
 400d76c:	1004d0fa 	srli	r2,r2,3
 400d770:	01c00044 	movi	r7,1
 400d774:	21400117 	ldw	r5,4(r4)
 400d778:	10c00044 	addi	r3,r2,1
 400d77c:	18c7883a 	add	r3,r3,r3
 400d780:	1005d0ba 	srai	r2,r2,2
 400d784:	18c7883a 	add	r3,r3,r3
 400d788:	18c7883a 	add	r3,r3,r3
 400d78c:	1907883a 	add	r3,r3,r4
 400d790:	3884983a 	sll	r2,r7,r2
 400d794:	19c00017 	ldw	r7,0(r3)
 400d798:	1a3ffe04 	addi	r8,r3,-8
 400d79c:	1144b03a 	or	r2,r2,r5
 400d7a0:	32000315 	stw	r8,12(r6)
 400d7a4:	31c00215 	stw	r7,8(r6)
 400d7a8:	20800115 	stw	r2,4(r4)
 400d7ac:	19800015 	stw	r6,0(r3)
 400d7b0:	39800315 	stw	r6,12(r7)
 400d7b4:	8809883a 	mov	r4,r17
 400d7b8:	dfc00217 	ldw	ra,8(sp)
 400d7bc:	dc400117 	ldw	r17,4(sp)
 400d7c0:	dc000017 	ldw	r16,0(sp)
 400d7c4:	dec00304 	addi	sp,sp,12
 400d7c8:	400f1101 	jmpi	400f110 <__malloc_unlock>
 400d7cc:	f800283a 	ret
 400d7d0:	100ad27a 	srli	r5,r2,9
 400d7d4:	00c00104 	movi	r3,4
 400d7d8:	19404a36 	bltu	r3,r5,400d904 <_free_r+0x240>
 400d7dc:	100ad1ba 	srli	r5,r2,6
 400d7e0:	28c00e44 	addi	r3,r5,57
 400d7e4:	18c7883a 	add	r3,r3,r3
 400d7e8:	29400e04 	addi	r5,r5,56
 400d7ec:	18c7883a 	add	r3,r3,r3
 400d7f0:	18c7883a 	add	r3,r3,r3
 400d7f4:	1909883a 	add	r4,r3,r4
 400d7f8:	20c00017 	ldw	r3,0(r4)
 400d7fc:	01c10074 	movhi	r7,1025
 400d800:	213ffe04 	addi	r4,r4,-8
 400d804:	39c99904 	addi	r7,r7,9828
 400d808:	20c04426 	beq	r4,r3,400d91c <_free_r+0x258>
 400d80c:	01ffff04 	movi	r7,-4
 400d810:	19400117 	ldw	r5,4(r3)
 400d814:	29ca703a 	and	r5,r5,r7
 400d818:	1140022e 	bgeu	r2,r5,400d824 <_free_r+0x160>
 400d81c:	18c00217 	ldw	r3,8(r3)
 400d820:	20fffb1e 	bne	r4,r3,400d810 <__alt_data_end+0xfc00d810>
 400d824:	19000317 	ldw	r4,12(r3)
 400d828:	31000315 	stw	r4,12(r6)
 400d82c:	30c00215 	stw	r3,8(r6)
 400d830:	21800215 	stw	r6,8(r4)
 400d834:	19800315 	stw	r6,12(r3)
 400d838:	003fde06 	br	400d7b4 <__alt_data_end+0xfc00d7b4>
 400d83c:	29c00217 	ldw	r7,8(r5)
 400d840:	10c5883a 	add	r2,r2,r3
 400d844:	00c10074 	movhi	r3,1025
 400d848:	18c99b04 	addi	r3,r3,9836
 400d84c:	38c03b26 	beq	r7,r3,400d93c <_free_r+0x278>
 400d850:	2a000317 	ldw	r8,12(r5)
 400d854:	11400054 	ori	r5,r2,1
 400d858:	3087883a 	add	r3,r6,r2
 400d85c:	3a000315 	stw	r8,12(r7)
 400d860:	41c00215 	stw	r7,8(r8)
 400d864:	31400115 	stw	r5,4(r6)
 400d868:	18800015 	stw	r2,0(r3)
 400d86c:	003fbd06 	br	400d764 <__alt_data_end+0xfc00d764>
 400d870:	39c0004c 	andi	r7,r7,1
 400d874:	10c5883a 	add	r2,r2,r3
 400d878:	3800071e 	bne	r7,zero,400d898 <_free_r+0x1d4>
 400d87c:	81fffe17 	ldw	r7,-8(r16)
 400d880:	31cdc83a 	sub	r6,r6,r7
 400d884:	30c00317 	ldw	r3,12(r6)
 400d888:	31400217 	ldw	r5,8(r6)
 400d88c:	11c5883a 	add	r2,r2,r7
 400d890:	28c00315 	stw	r3,12(r5)
 400d894:	19400215 	stw	r5,8(r3)
 400d898:	10c00054 	ori	r3,r2,1
 400d89c:	30c00115 	stw	r3,4(r6)
 400d8a0:	00c10074 	movhi	r3,1025
 400d8a4:	18cfa404 	addi	r3,r3,16016
 400d8a8:	18c00017 	ldw	r3,0(r3)
 400d8ac:	21800215 	stw	r6,8(r4)
 400d8b0:	10ffc036 	bltu	r2,r3,400d7b4 <__alt_data_end+0xfc00d7b4>
 400d8b4:	00810074 	movhi	r2,1025
 400d8b8:	10972b04 	addi	r2,r2,23724
 400d8bc:	11400017 	ldw	r5,0(r2)
 400d8c0:	8809883a 	mov	r4,r17
 400d8c4:	400d5a00 	call	400d5a0 <_malloc_trim_r>
 400d8c8:	003fba06 	br	400d7b4 <__alt_data_end+0xfc00d7b4>
 400d8cc:	28c9883a 	add	r4,r5,r3
 400d8d0:	21000117 	ldw	r4,4(r4)
 400d8d4:	2100004c 	andi	r4,r4,1
 400d8d8:	2000391e 	bne	r4,zero,400d9c0 <_free_r+0x2fc>
 400d8dc:	29c00217 	ldw	r7,8(r5)
 400d8e0:	29000317 	ldw	r4,12(r5)
 400d8e4:	1885883a 	add	r2,r3,r2
 400d8e8:	10c00054 	ori	r3,r2,1
 400d8ec:	39000315 	stw	r4,12(r7)
 400d8f0:	21c00215 	stw	r7,8(r4)
 400d8f4:	30c00115 	stw	r3,4(r6)
 400d8f8:	308d883a 	add	r6,r6,r2
 400d8fc:	30800015 	stw	r2,0(r6)
 400d900:	003fac06 	br	400d7b4 <__alt_data_end+0xfc00d7b4>
 400d904:	00c00504 	movi	r3,20
 400d908:	19401536 	bltu	r3,r5,400d960 <_free_r+0x29c>
 400d90c:	28c01704 	addi	r3,r5,92
 400d910:	18c7883a 	add	r3,r3,r3
 400d914:	294016c4 	addi	r5,r5,91
 400d918:	003fb406 	br	400d7ec <__alt_data_end+0xfc00d7ec>
 400d91c:	280bd0ba 	srai	r5,r5,2
 400d920:	00c00044 	movi	r3,1
 400d924:	38800117 	ldw	r2,4(r7)
 400d928:	194a983a 	sll	r5,r3,r5
 400d92c:	2007883a 	mov	r3,r4
 400d930:	2884b03a 	or	r2,r5,r2
 400d934:	38800115 	stw	r2,4(r7)
 400d938:	003fbb06 	br	400d828 <__alt_data_end+0xfc00d828>
 400d93c:	21800515 	stw	r6,20(r4)
 400d940:	21800415 	stw	r6,16(r4)
 400d944:	10c00054 	ori	r3,r2,1
 400d948:	31c00315 	stw	r7,12(r6)
 400d94c:	31c00215 	stw	r7,8(r6)
 400d950:	30c00115 	stw	r3,4(r6)
 400d954:	308d883a 	add	r6,r6,r2
 400d958:	30800015 	stw	r2,0(r6)
 400d95c:	003f9506 	br	400d7b4 <__alt_data_end+0xfc00d7b4>
 400d960:	00c01504 	movi	r3,84
 400d964:	19400536 	bltu	r3,r5,400d97c <_free_r+0x2b8>
 400d968:	100ad33a 	srli	r5,r2,12
 400d96c:	28c01bc4 	addi	r3,r5,111
 400d970:	18c7883a 	add	r3,r3,r3
 400d974:	29401b84 	addi	r5,r5,110
 400d978:	003f9c06 	br	400d7ec <__alt_data_end+0xfc00d7ec>
 400d97c:	00c05504 	movi	r3,340
 400d980:	19400536 	bltu	r3,r5,400d998 <_free_r+0x2d4>
 400d984:	100ad3fa 	srli	r5,r2,15
 400d988:	28c01e04 	addi	r3,r5,120
 400d98c:	18c7883a 	add	r3,r3,r3
 400d990:	29401dc4 	addi	r5,r5,119
 400d994:	003f9506 	br	400d7ec <__alt_data_end+0xfc00d7ec>
 400d998:	00c15504 	movi	r3,1364
 400d99c:	19400536 	bltu	r3,r5,400d9b4 <_free_r+0x2f0>
 400d9a0:	100ad4ba 	srli	r5,r2,18
 400d9a4:	28c01f44 	addi	r3,r5,125
 400d9a8:	18c7883a 	add	r3,r3,r3
 400d9ac:	29401f04 	addi	r5,r5,124
 400d9b0:	003f8e06 	br	400d7ec <__alt_data_end+0xfc00d7ec>
 400d9b4:	00c03f84 	movi	r3,254
 400d9b8:	01401f84 	movi	r5,126
 400d9bc:	003f8b06 	br	400d7ec <__alt_data_end+0xfc00d7ec>
 400d9c0:	10c00054 	ori	r3,r2,1
 400d9c4:	30c00115 	stw	r3,4(r6)
 400d9c8:	308d883a 	add	r6,r6,r2
 400d9cc:	30800015 	stw	r2,0(r6)
 400d9d0:	003f7806 	br	400d7b4 <__alt_data_end+0xfc00d7b4>

0400d9d4 <memmove>:
 400d9d4:	2005883a 	mov	r2,r4
 400d9d8:	29000b2e 	bgeu	r5,r4,400da08 <memmove+0x34>
 400d9dc:	298f883a 	add	r7,r5,r6
 400d9e0:	21c0092e 	bgeu	r4,r7,400da08 <memmove+0x34>
 400d9e4:	2187883a 	add	r3,r4,r6
 400d9e8:	198bc83a 	sub	r5,r3,r6
 400d9ec:	30004826 	beq	r6,zero,400db10 <memmove+0x13c>
 400d9f0:	39ffffc4 	addi	r7,r7,-1
 400d9f4:	39000003 	ldbu	r4,0(r7)
 400d9f8:	18ffffc4 	addi	r3,r3,-1
 400d9fc:	19000005 	stb	r4,0(r3)
 400da00:	28fffb1e 	bne	r5,r3,400d9f0 <__alt_data_end+0xfc00d9f0>
 400da04:	f800283a 	ret
 400da08:	00c003c4 	movi	r3,15
 400da0c:	1980412e 	bgeu	r3,r6,400db14 <memmove+0x140>
 400da10:	2886b03a 	or	r3,r5,r2
 400da14:	18c000cc 	andi	r3,r3,3
 400da18:	1800401e 	bne	r3,zero,400db1c <memmove+0x148>
 400da1c:	33fffc04 	addi	r15,r6,-16
 400da20:	781ed13a 	srli	r15,r15,4
 400da24:	28c00104 	addi	r3,r5,4
 400da28:	13400104 	addi	r13,r2,4
 400da2c:	781c913a 	slli	r14,r15,4
 400da30:	2b000204 	addi	r12,r5,8
 400da34:	12c00204 	addi	r11,r2,8
 400da38:	73800504 	addi	r14,r14,20
 400da3c:	2a800304 	addi	r10,r5,12
 400da40:	12400304 	addi	r9,r2,12
 400da44:	2b9d883a 	add	r14,r5,r14
 400da48:	2811883a 	mov	r8,r5
 400da4c:	100f883a 	mov	r7,r2
 400da50:	41000017 	ldw	r4,0(r8)
 400da54:	39c00404 	addi	r7,r7,16
 400da58:	18c00404 	addi	r3,r3,16
 400da5c:	393ffc15 	stw	r4,-16(r7)
 400da60:	193ffc17 	ldw	r4,-16(r3)
 400da64:	6b400404 	addi	r13,r13,16
 400da68:	5ac00404 	addi	r11,r11,16
 400da6c:	693ffc15 	stw	r4,-16(r13)
 400da70:	61000017 	ldw	r4,0(r12)
 400da74:	4a400404 	addi	r9,r9,16
 400da78:	42000404 	addi	r8,r8,16
 400da7c:	593ffc15 	stw	r4,-16(r11)
 400da80:	51000017 	ldw	r4,0(r10)
 400da84:	63000404 	addi	r12,r12,16
 400da88:	52800404 	addi	r10,r10,16
 400da8c:	493ffc15 	stw	r4,-16(r9)
 400da90:	1bbfef1e 	bne	r3,r14,400da50 <__alt_data_end+0xfc00da50>
 400da94:	79000044 	addi	r4,r15,1
 400da98:	2008913a 	slli	r4,r4,4
 400da9c:	328003cc 	andi	r10,r6,15
 400daa0:	02c000c4 	movi	r11,3
 400daa4:	1107883a 	add	r3,r2,r4
 400daa8:	290b883a 	add	r5,r5,r4
 400daac:	5a801e2e 	bgeu	r11,r10,400db28 <memmove+0x154>
 400dab0:	1813883a 	mov	r9,r3
 400dab4:	2811883a 	mov	r8,r5
 400dab8:	500f883a 	mov	r7,r10
 400dabc:	41000017 	ldw	r4,0(r8)
 400dac0:	4a400104 	addi	r9,r9,4
 400dac4:	39ffff04 	addi	r7,r7,-4
 400dac8:	493fff15 	stw	r4,-4(r9)
 400dacc:	42000104 	addi	r8,r8,4
 400dad0:	59fffa36 	bltu	r11,r7,400dabc <__alt_data_end+0xfc00dabc>
 400dad4:	513fff04 	addi	r4,r10,-4
 400dad8:	2008d0ba 	srli	r4,r4,2
 400dadc:	318000cc 	andi	r6,r6,3
 400dae0:	21000044 	addi	r4,r4,1
 400dae4:	2109883a 	add	r4,r4,r4
 400dae8:	2109883a 	add	r4,r4,r4
 400daec:	1907883a 	add	r3,r3,r4
 400daf0:	290b883a 	add	r5,r5,r4
 400daf4:	30000b26 	beq	r6,zero,400db24 <memmove+0x150>
 400daf8:	198d883a 	add	r6,r3,r6
 400dafc:	29c00003 	ldbu	r7,0(r5)
 400db00:	18c00044 	addi	r3,r3,1
 400db04:	29400044 	addi	r5,r5,1
 400db08:	19ffffc5 	stb	r7,-1(r3)
 400db0c:	19bffb1e 	bne	r3,r6,400dafc <__alt_data_end+0xfc00dafc>
 400db10:	f800283a 	ret
 400db14:	1007883a 	mov	r3,r2
 400db18:	003ff606 	br	400daf4 <__alt_data_end+0xfc00daf4>
 400db1c:	1007883a 	mov	r3,r2
 400db20:	003ff506 	br	400daf8 <__alt_data_end+0xfc00daf8>
 400db24:	f800283a 	ret
 400db28:	500d883a 	mov	r6,r10
 400db2c:	003ff106 	br	400daf4 <__alt_data_end+0xfc00daf4>

0400db30 <memset>:
 400db30:	20c000cc 	andi	r3,r4,3
 400db34:	2005883a 	mov	r2,r4
 400db38:	18004426 	beq	r3,zero,400dc4c <memset+0x11c>
 400db3c:	31ffffc4 	addi	r7,r6,-1
 400db40:	30004026 	beq	r6,zero,400dc44 <memset+0x114>
 400db44:	2813883a 	mov	r9,r5
 400db48:	200d883a 	mov	r6,r4
 400db4c:	2007883a 	mov	r3,r4
 400db50:	00000406 	br	400db64 <memset+0x34>
 400db54:	3a3fffc4 	addi	r8,r7,-1
 400db58:	31800044 	addi	r6,r6,1
 400db5c:	38003926 	beq	r7,zero,400dc44 <memset+0x114>
 400db60:	400f883a 	mov	r7,r8
 400db64:	18c00044 	addi	r3,r3,1
 400db68:	32400005 	stb	r9,0(r6)
 400db6c:	1a0000cc 	andi	r8,r3,3
 400db70:	403ff81e 	bne	r8,zero,400db54 <__alt_data_end+0xfc00db54>
 400db74:	010000c4 	movi	r4,3
 400db78:	21c02d2e 	bgeu	r4,r7,400dc30 <memset+0x100>
 400db7c:	29003fcc 	andi	r4,r5,255
 400db80:	200c923a 	slli	r6,r4,8
 400db84:	3108b03a 	or	r4,r6,r4
 400db88:	200c943a 	slli	r6,r4,16
 400db8c:	218cb03a 	or	r6,r4,r6
 400db90:	010003c4 	movi	r4,15
 400db94:	21c0182e 	bgeu	r4,r7,400dbf8 <memset+0xc8>
 400db98:	3b3ffc04 	addi	r12,r7,-16
 400db9c:	6018d13a 	srli	r12,r12,4
 400dba0:	1a000104 	addi	r8,r3,4
 400dba4:	1ac00204 	addi	r11,r3,8
 400dba8:	6008913a 	slli	r4,r12,4
 400dbac:	1a800304 	addi	r10,r3,12
 400dbb0:	1813883a 	mov	r9,r3
 400dbb4:	21000504 	addi	r4,r4,20
 400dbb8:	1909883a 	add	r4,r3,r4
 400dbbc:	49800015 	stw	r6,0(r9)
 400dbc0:	41800015 	stw	r6,0(r8)
 400dbc4:	59800015 	stw	r6,0(r11)
 400dbc8:	51800015 	stw	r6,0(r10)
 400dbcc:	42000404 	addi	r8,r8,16
 400dbd0:	4a400404 	addi	r9,r9,16
 400dbd4:	5ac00404 	addi	r11,r11,16
 400dbd8:	52800404 	addi	r10,r10,16
 400dbdc:	413ff71e 	bne	r8,r4,400dbbc <__alt_data_end+0xfc00dbbc>
 400dbe0:	63000044 	addi	r12,r12,1
 400dbe4:	6018913a 	slli	r12,r12,4
 400dbe8:	39c003cc 	andi	r7,r7,15
 400dbec:	010000c4 	movi	r4,3
 400dbf0:	1b07883a 	add	r3,r3,r12
 400dbf4:	21c00e2e 	bgeu	r4,r7,400dc30 <memset+0x100>
 400dbf8:	1813883a 	mov	r9,r3
 400dbfc:	3811883a 	mov	r8,r7
 400dc00:	010000c4 	movi	r4,3
 400dc04:	49800015 	stw	r6,0(r9)
 400dc08:	423fff04 	addi	r8,r8,-4
 400dc0c:	4a400104 	addi	r9,r9,4
 400dc10:	223ffc36 	bltu	r4,r8,400dc04 <__alt_data_end+0xfc00dc04>
 400dc14:	393fff04 	addi	r4,r7,-4
 400dc18:	2008d0ba 	srli	r4,r4,2
 400dc1c:	39c000cc 	andi	r7,r7,3
 400dc20:	21000044 	addi	r4,r4,1
 400dc24:	2109883a 	add	r4,r4,r4
 400dc28:	2109883a 	add	r4,r4,r4
 400dc2c:	1907883a 	add	r3,r3,r4
 400dc30:	38000526 	beq	r7,zero,400dc48 <memset+0x118>
 400dc34:	19cf883a 	add	r7,r3,r7
 400dc38:	19400005 	stb	r5,0(r3)
 400dc3c:	18c00044 	addi	r3,r3,1
 400dc40:	38fffd1e 	bne	r7,r3,400dc38 <__alt_data_end+0xfc00dc38>
 400dc44:	f800283a 	ret
 400dc48:	f800283a 	ret
 400dc4c:	2007883a 	mov	r3,r4
 400dc50:	300f883a 	mov	r7,r6
 400dc54:	003fc706 	br	400db74 <__alt_data_end+0xfc00db74>

0400dc58 <_realloc_r>:
 400dc58:	defff604 	addi	sp,sp,-40
 400dc5c:	dc800215 	stw	r18,8(sp)
 400dc60:	dfc00915 	stw	ra,36(sp)
 400dc64:	df000815 	stw	fp,32(sp)
 400dc68:	ddc00715 	stw	r23,28(sp)
 400dc6c:	dd800615 	stw	r22,24(sp)
 400dc70:	dd400515 	stw	r21,20(sp)
 400dc74:	dd000415 	stw	r20,16(sp)
 400dc78:	dcc00315 	stw	r19,12(sp)
 400dc7c:	dc400115 	stw	r17,4(sp)
 400dc80:	dc000015 	stw	r16,0(sp)
 400dc84:	3025883a 	mov	r18,r6
 400dc88:	2800b726 	beq	r5,zero,400df68 <_realloc_r+0x310>
 400dc8c:	282b883a 	mov	r21,r5
 400dc90:	2029883a 	mov	r20,r4
 400dc94:	400f0ec0 	call	400f0ec <__malloc_lock>
 400dc98:	a8bfff17 	ldw	r2,-4(r21)
 400dc9c:	043fff04 	movi	r16,-4
 400dca0:	90c002c4 	addi	r3,r18,11
 400dca4:	01000584 	movi	r4,22
 400dca8:	acfffe04 	addi	r19,r21,-8
 400dcac:	1420703a 	and	r16,r2,r16
 400dcb0:	20c0332e 	bgeu	r4,r3,400dd80 <_realloc_r+0x128>
 400dcb4:	047ffe04 	movi	r17,-8
 400dcb8:	1c62703a 	and	r17,r3,r17
 400dcbc:	8807883a 	mov	r3,r17
 400dcc0:	88005816 	blt	r17,zero,400de24 <_realloc_r+0x1cc>
 400dcc4:	8c805736 	bltu	r17,r18,400de24 <_realloc_r+0x1cc>
 400dcc8:	80c0300e 	bge	r16,r3,400dd8c <_realloc_r+0x134>
 400dccc:	07010074 	movhi	fp,1025
 400dcd0:	e7099904 	addi	fp,fp,9828
 400dcd4:	e1c00217 	ldw	r7,8(fp)
 400dcd8:	9c09883a 	add	r4,r19,r16
 400dcdc:	22000117 	ldw	r8,4(r4)
 400dce0:	21c06326 	beq	r4,r7,400de70 <_realloc_r+0x218>
 400dce4:	017fff84 	movi	r5,-2
 400dce8:	414a703a 	and	r5,r8,r5
 400dcec:	214b883a 	add	r5,r4,r5
 400dcf0:	29800117 	ldw	r6,4(r5)
 400dcf4:	3180004c 	andi	r6,r6,1
 400dcf8:	30003f26 	beq	r6,zero,400ddf8 <_realloc_r+0x1a0>
 400dcfc:	1080004c 	andi	r2,r2,1
 400dd00:	10008326 	beq	r2,zero,400df10 <_realloc_r+0x2b8>
 400dd04:	900b883a 	mov	r5,r18
 400dd08:	a009883a 	mov	r4,r20
 400dd0c:	400a3700 	call	400a370 <_malloc_r>
 400dd10:	1025883a 	mov	r18,r2
 400dd14:	10011e26 	beq	r2,zero,400e190 <_realloc_r+0x538>
 400dd18:	a93fff17 	ldw	r4,-4(r21)
 400dd1c:	10fffe04 	addi	r3,r2,-8
 400dd20:	00bfff84 	movi	r2,-2
 400dd24:	2084703a 	and	r2,r4,r2
 400dd28:	9885883a 	add	r2,r19,r2
 400dd2c:	1880ee26 	beq	r3,r2,400e0e8 <_realloc_r+0x490>
 400dd30:	81bfff04 	addi	r6,r16,-4
 400dd34:	00800904 	movi	r2,36
 400dd38:	1180b836 	bltu	r2,r6,400e01c <_realloc_r+0x3c4>
 400dd3c:	00c004c4 	movi	r3,19
 400dd40:	19809636 	bltu	r3,r6,400df9c <_realloc_r+0x344>
 400dd44:	9005883a 	mov	r2,r18
 400dd48:	a807883a 	mov	r3,r21
 400dd4c:	19000017 	ldw	r4,0(r3)
 400dd50:	11000015 	stw	r4,0(r2)
 400dd54:	19000117 	ldw	r4,4(r3)
 400dd58:	11000115 	stw	r4,4(r2)
 400dd5c:	18c00217 	ldw	r3,8(r3)
 400dd60:	10c00215 	stw	r3,8(r2)
 400dd64:	a80b883a 	mov	r5,r21
 400dd68:	a009883a 	mov	r4,r20
 400dd6c:	400d6c40 	call	400d6c4 <_free_r>
 400dd70:	a009883a 	mov	r4,r20
 400dd74:	400f1100 	call	400f110 <__malloc_unlock>
 400dd78:	9005883a 	mov	r2,r18
 400dd7c:	00001206 	br	400ddc8 <_realloc_r+0x170>
 400dd80:	00c00404 	movi	r3,16
 400dd84:	1823883a 	mov	r17,r3
 400dd88:	003fce06 	br	400dcc4 <__alt_data_end+0xfc00dcc4>
 400dd8c:	a825883a 	mov	r18,r21
 400dd90:	8445c83a 	sub	r2,r16,r17
 400dd94:	00c003c4 	movi	r3,15
 400dd98:	18802636 	bltu	r3,r2,400de34 <_realloc_r+0x1dc>
 400dd9c:	99800117 	ldw	r6,4(r19)
 400dda0:	9c07883a 	add	r3,r19,r16
 400dda4:	3180004c 	andi	r6,r6,1
 400dda8:	3420b03a 	or	r16,r6,r16
 400ddac:	9c000115 	stw	r16,4(r19)
 400ddb0:	18800117 	ldw	r2,4(r3)
 400ddb4:	10800054 	ori	r2,r2,1
 400ddb8:	18800115 	stw	r2,4(r3)
 400ddbc:	a009883a 	mov	r4,r20
 400ddc0:	400f1100 	call	400f110 <__malloc_unlock>
 400ddc4:	9005883a 	mov	r2,r18
 400ddc8:	dfc00917 	ldw	ra,36(sp)
 400ddcc:	df000817 	ldw	fp,32(sp)
 400ddd0:	ddc00717 	ldw	r23,28(sp)
 400ddd4:	dd800617 	ldw	r22,24(sp)
 400ddd8:	dd400517 	ldw	r21,20(sp)
 400dddc:	dd000417 	ldw	r20,16(sp)
 400dde0:	dcc00317 	ldw	r19,12(sp)
 400dde4:	dc800217 	ldw	r18,8(sp)
 400dde8:	dc400117 	ldw	r17,4(sp)
 400ddec:	dc000017 	ldw	r16,0(sp)
 400ddf0:	dec00a04 	addi	sp,sp,40
 400ddf4:	f800283a 	ret
 400ddf8:	017fff04 	movi	r5,-4
 400ddfc:	414a703a 	and	r5,r8,r5
 400de00:	814d883a 	add	r6,r16,r5
 400de04:	30c01f16 	blt	r6,r3,400de84 <_realloc_r+0x22c>
 400de08:	20800317 	ldw	r2,12(r4)
 400de0c:	20c00217 	ldw	r3,8(r4)
 400de10:	a825883a 	mov	r18,r21
 400de14:	3021883a 	mov	r16,r6
 400de18:	18800315 	stw	r2,12(r3)
 400de1c:	10c00215 	stw	r3,8(r2)
 400de20:	003fdb06 	br	400dd90 <__alt_data_end+0xfc00dd90>
 400de24:	00800304 	movi	r2,12
 400de28:	a0800015 	stw	r2,0(r20)
 400de2c:	0005883a 	mov	r2,zero
 400de30:	003fe506 	br	400ddc8 <__alt_data_end+0xfc00ddc8>
 400de34:	98c00117 	ldw	r3,4(r19)
 400de38:	9c4b883a 	add	r5,r19,r17
 400de3c:	11000054 	ori	r4,r2,1
 400de40:	18c0004c 	andi	r3,r3,1
 400de44:	1c62b03a 	or	r17,r3,r17
 400de48:	9c400115 	stw	r17,4(r19)
 400de4c:	29000115 	stw	r4,4(r5)
 400de50:	2885883a 	add	r2,r5,r2
 400de54:	10c00117 	ldw	r3,4(r2)
 400de58:	29400204 	addi	r5,r5,8
 400de5c:	a009883a 	mov	r4,r20
 400de60:	18c00054 	ori	r3,r3,1
 400de64:	10c00115 	stw	r3,4(r2)
 400de68:	400d6c40 	call	400d6c4 <_free_r>
 400de6c:	003fd306 	br	400ddbc <__alt_data_end+0xfc00ddbc>
 400de70:	017fff04 	movi	r5,-4
 400de74:	414a703a 	and	r5,r8,r5
 400de78:	89800404 	addi	r6,r17,16
 400de7c:	8151883a 	add	r8,r16,r5
 400de80:	4180590e 	bge	r8,r6,400dfe8 <_realloc_r+0x390>
 400de84:	1080004c 	andi	r2,r2,1
 400de88:	103f9e1e 	bne	r2,zero,400dd04 <__alt_data_end+0xfc00dd04>
 400de8c:	adbffe17 	ldw	r22,-8(r21)
 400de90:	00bfff04 	movi	r2,-4
 400de94:	9dadc83a 	sub	r22,r19,r22
 400de98:	b1800117 	ldw	r6,4(r22)
 400de9c:	3084703a 	and	r2,r6,r2
 400dea0:	20002026 	beq	r4,zero,400df24 <_realloc_r+0x2cc>
 400dea4:	80af883a 	add	r23,r16,r2
 400dea8:	b96f883a 	add	r23,r23,r5
 400deac:	21c05f26 	beq	r4,r7,400e02c <_realloc_r+0x3d4>
 400deb0:	b8c01c16 	blt	r23,r3,400df24 <_realloc_r+0x2cc>
 400deb4:	20800317 	ldw	r2,12(r4)
 400deb8:	20c00217 	ldw	r3,8(r4)
 400debc:	81bfff04 	addi	r6,r16,-4
 400dec0:	01000904 	movi	r4,36
 400dec4:	18800315 	stw	r2,12(r3)
 400dec8:	10c00215 	stw	r3,8(r2)
 400decc:	b0c00217 	ldw	r3,8(r22)
 400ded0:	b0800317 	ldw	r2,12(r22)
 400ded4:	b4800204 	addi	r18,r22,8
 400ded8:	18800315 	stw	r2,12(r3)
 400dedc:	10c00215 	stw	r3,8(r2)
 400dee0:	21801b36 	bltu	r4,r6,400df50 <_realloc_r+0x2f8>
 400dee4:	008004c4 	movi	r2,19
 400dee8:	1180352e 	bgeu	r2,r6,400dfc0 <_realloc_r+0x368>
 400deec:	a8800017 	ldw	r2,0(r21)
 400def0:	b0800215 	stw	r2,8(r22)
 400def4:	a8800117 	ldw	r2,4(r21)
 400def8:	b0800315 	stw	r2,12(r22)
 400defc:	008006c4 	movi	r2,27
 400df00:	11807f36 	bltu	r2,r6,400e100 <_realloc_r+0x4a8>
 400df04:	b0800404 	addi	r2,r22,16
 400df08:	ad400204 	addi	r21,r21,8
 400df0c:	00002d06 	br	400dfc4 <_realloc_r+0x36c>
 400df10:	adbffe17 	ldw	r22,-8(r21)
 400df14:	00bfff04 	movi	r2,-4
 400df18:	9dadc83a 	sub	r22,r19,r22
 400df1c:	b1000117 	ldw	r4,4(r22)
 400df20:	2084703a 	and	r2,r4,r2
 400df24:	b03f7726 	beq	r22,zero,400dd04 <__alt_data_end+0xfc00dd04>
 400df28:	80af883a 	add	r23,r16,r2
 400df2c:	b8ff7516 	blt	r23,r3,400dd04 <__alt_data_end+0xfc00dd04>
 400df30:	b0800317 	ldw	r2,12(r22)
 400df34:	b0c00217 	ldw	r3,8(r22)
 400df38:	81bfff04 	addi	r6,r16,-4
 400df3c:	01000904 	movi	r4,36
 400df40:	18800315 	stw	r2,12(r3)
 400df44:	10c00215 	stw	r3,8(r2)
 400df48:	b4800204 	addi	r18,r22,8
 400df4c:	21bfe52e 	bgeu	r4,r6,400dee4 <__alt_data_end+0xfc00dee4>
 400df50:	a80b883a 	mov	r5,r21
 400df54:	9009883a 	mov	r4,r18
 400df58:	400d9d40 	call	400d9d4 <memmove>
 400df5c:	b821883a 	mov	r16,r23
 400df60:	b027883a 	mov	r19,r22
 400df64:	003f8a06 	br	400dd90 <__alt_data_end+0xfc00dd90>
 400df68:	300b883a 	mov	r5,r6
 400df6c:	dfc00917 	ldw	ra,36(sp)
 400df70:	df000817 	ldw	fp,32(sp)
 400df74:	ddc00717 	ldw	r23,28(sp)
 400df78:	dd800617 	ldw	r22,24(sp)
 400df7c:	dd400517 	ldw	r21,20(sp)
 400df80:	dd000417 	ldw	r20,16(sp)
 400df84:	dcc00317 	ldw	r19,12(sp)
 400df88:	dc800217 	ldw	r18,8(sp)
 400df8c:	dc400117 	ldw	r17,4(sp)
 400df90:	dc000017 	ldw	r16,0(sp)
 400df94:	dec00a04 	addi	sp,sp,40
 400df98:	400a3701 	jmpi	400a370 <_malloc_r>
 400df9c:	a8c00017 	ldw	r3,0(r21)
 400dfa0:	90c00015 	stw	r3,0(r18)
 400dfa4:	a8c00117 	ldw	r3,4(r21)
 400dfa8:	90c00115 	stw	r3,4(r18)
 400dfac:	00c006c4 	movi	r3,27
 400dfb0:	19804536 	bltu	r3,r6,400e0c8 <_realloc_r+0x470>
 400dfb4:	90800204 	addi	r2,r18,8
 400dfb8:	a8c00204 	addi	r3,r21,8
 400dfbc:	003f6306 	br	400dd4c <__alt_data_end+0xfc00dd4c>
 400dfc0:	9005883a 	mov	r2,r18
 400dfc4:	a8c00017 	ldw	r3,0(r21)
 400dfc8:	b821883a 	mov	r16,r23
 400dfcc:	b027883a 	mov	r19,r22
 400dfd0:	10c00015 	stw	r3,0(r2)
 400dfd4:	a8c00117 	ldw	r3,4(r21)
 400dfd8:	10c00115 	stw	r3,4(r2)
 400dfdc:	a8c00217 	ldw	r3,8(r21)
 400dfe0:	10c00215 	stw	r3,8(r2)
 400dfe4:	003f6a06 	br	400dd90 <__alt_data_end+0xfc00dd90>
 400dfe8:	9c67883a 	add	r19,r19,r17
 400dfec:	4445c83a 	sub	r2,r8,r17
 400dff0:	e4c00215 	stw	r19,8(fp)
 400dff4:	10800054 	ori	r2,r2,1
 400dff8:	98800115 	stw	r2,4(r19)
 400dffc:	a8bfff17 	ldw	r2,-4(r21)
 400e000:	a009883a 	mov	r4,r20
 400e004:	1080004c 	andi	r2,r2,1
 400e008:	1462b03a 	or	r17,r2,r17
 400e00c:	ac7fff15 	stw	r17,-4(r21)
 400e010:	400f1100 	call	400f110 <__malloc_unlock>
 400e014:	a805883a 	mov	r2,r21
 400e018:	003f6b06 	br	400ddc8 <__alt_data_end+0xfc00ddc8>
 400e01c:	a80b883a 	mov	r5,r21
 400e020:	9009883a 	mov	r4,r18
 400e024:	400d9d40 	call	400d9d4 <memmove>
 400e028:	003f4e06 	br	400dd64 <__alt_data_end+0xfc00dd64>
 400e02c:	89000404 	addi	r4,r17,16
 400e030:	b93fbc16 	blt	r23,r4,400df24 <__alt_data_end+0xfc00df24>
 400e034:	b0800317 	ldw	r2,12(r22)
 400e038:	b0c00217 	ldw	r3,8(r22)
 400e03c:	81bfff04 	addi	r6,r16,-4
 400e040:	01000904 	movi	r4,36
 400e044:	18800315 	stw	r2,12(r3)
 400e048:	10c00215 	stw	r3,8(r2)
 400e04c:	b4800204 	addi	r18,r22,8
 400e050:	21804336 	bltu	r4,r6,400e160 <_realloc_r+0x508>
 400e054:	008004c4 	movi	r2,19
 400e058:	11803f2e 	bgeu	r2,r6,400e158 <_realloc_r+0x500>
 400e05c:	a8800017 	ldw	r2,0(r21)
 400e060:	b0800215 	stw	r2,8(r22)
 400e064:	a8800117 	ldw	r2,4(r21)
 400e068:	b0800315 	stw	r2,12(r22)
 400e06c:	008006c4 	movi	r2,27
 400e070:	11803f36 	bltu	r2,r6,400e170 <_realloc_r+0x518>
 400e074:	b0800404 	addi	r2,r22,16
 400e078:	ad400204 	addi	r21,r21,8
 400e07c:	a8c00017 	ldw	r3,0(r21)
 400e080:	10c00015 	stw	r3,0(r2)
 400e084:	a8c00117 	ldw	r3,4(r21)
 400e088:	10c00115 	stw	r3,4(r2)
 400e08c:	a8c00217 	ldw	r3,8(r21)
 400e090:	10c00215 	stw	r3,8(r2)
 400e094:	b447883a 	add	r3,r22,r17
 400e098:	bc45c83a 	sub	r2,r23,r17
 400e09c:	e0c00215 	stw	r3,8(fp)
 400e0a0:	10800054 	ori	r2,r2,1
 400e0a4:	18800115 	stw	r2,4(r3)
 400e0a8:	b0800117 	ldw	r2,4(r22)
 400e0ac:	a009883a 	mov	r4,r20
 400e0b0:	1080004c 	andi	r2,r2,1
 400e0b4:	1462b03a 	or	r17,r2,r17
 400e0b8:	b4400115 	stw	r17,4(r22)
 400e0bc:	400f1100 	call	400f110 <__malloc_unlock>
 400e0c0:	9005883a 	mov	r2,r18
 400e0c4:	003f4006 	br	400ddc8 <__alt_data_end+0xfc00ddc8>
 400e0c8:	a8c00217 	ldw	r3,8(r21)
 400e0cc:	90c00215 	stw	r3,8(r18)
 400e0d0:	a8c00317 	ldw	r3,12(r21)
 400e0d4:	90c00315 	stw	r3,12(r18)
 400e0d8:	30801126 	beq	r6,r2,400e120 <_realloc_r+0x4c8>
 400e0dc:	90800404 	addi	r2,r18,16
 400e0e0:	a8c00404 	addi	r3,r21,16
 400e0e4:	003f1906 	br	400dd4c <__alt_data_end+0xfc00dd4c>
 400e0e8:	90ffff17 	ldw	r3,-4(r18)
 400e0ec:	00bfff04 	movi	r2,-4
 400e0f0:	a825883a 	mov	r18,r21
 400e0f4:	1884703a 	and	r2,r3,r2
 400e0f8:	80a1883a 	add	r16,r16,r2
 400e0fc:	003f2406 	br	400dd90 <__alt_data_end+0xfc00dd90>
 400e100:	a8800217 	ldw	r2,8(r21)
 400e104:	b0800415 	stw	r2,16(r22)
 400e108:	a8800317 	ldw	r2,12(r21)
 400e10c:	b0800515 	stw	r2,20(r22)
 400e110:	31000a26 	beq	r6,r4,400e13c <_realloc_r+0x4e4>
 400e114:	b0800604 	addi	r2,r22,24
 400e118:	ad400404 	addi	r21,r21,16
 400e11c:	003fa906 	br	400dfc4 <__alt_data_end+0xfc00dfc4>
 400e120:	a9000417 	ldw	r4,16(r21)
 400e124:	90800604 	addi	r2,r18,24
 400e128:	a8c00604 	addi	r3,r21,24
 400e12c:	91000415 	stw	r4,16(r18)
 400e130:	a9000517 	ldw	r4,20(r21)
 400e134:	91000515 	stw	r4,20(r18)
 400e138:	003f0406 	br	400dd4c <__alt_data_end+0xfc00dd4c>
 400e13c:	a8c00417 	ldw	r3,16(r21)
 400e140:	ad400604 	addi	r21,r21,24
 400e144:	b0800804 	addi	r2,r22,32
 400e148:	b0c00615 	stw	r3,24(r22)
 400e14c:	a8ffff17 	ldw	r3,-4(r21)
 400e150:	b0c00715 	stw	r3,28(r22)
 400e154:	003f9b06 	br	400dfc4 <__alt_data_end+0xfc00dfc4>
 400e158:	9005883a 	mov	r2,r18
 400e15c:	003fc706 	br	400e07c <__alt_data_end+0xfc00e07c>
 400e160:	a80b883a 	mov	r5,r21
 400e164:	9009883a 	mov	r4,r18
 400e168:	400d9d40 	call	400d9d4 <memmove>
 400e16c:	003fc906 	br	400e094 <__alt_data_end+0xfc00e094>
 400e170:	a8800217 	ldw	r2,8(r21)
 400e174:	b0800415 	stw	r2,16(r22)
 400e178:	a8800317 	ldw	r2,12(r21)
 400e17c:	b0800515 	stw	r2,20(r22)
 400e180:	31000726 	beq	r6,r4,400e1a0 <_realloc_r+0x548>
 400e184:	b0800604 	addi	r2,r22,24
 400e188:	ad400404 	addi	r21,r21,16
 400e18c:	003fbb06 	br	400e07c <__alt_data_end+0xfc00e07c>
 400e190:	a009883a 	mov	r4,r20
 400e194:	400f1100 	call	400f110 <__malloc_unlock>
 400e198:	0005883a 	mov	r2,zero
 400e19c:	003f0a06 	br	400ddc8 <__alt_data_end+0xfc00ddc8>
 400e1a0:	a8c00417 	ldw	r3,16(r21)
 400e1a4:	ad400604 	addi	r21,r21,24
 400e1a8:	b0800804 	addi	r2,r22,32
 400e1ac:	b0c00615 	stw	r3,24(r22)
 400e1b0:	a8ffff17 	ldw	r3,-4(r21)
 400e1b4:	b0c00715 	stw	r3,28(r22)
 400e1b8:	003fb006 	br	400e07c <__alt_data_end+0xfc00e07c>

0400e1bc <__udivdi3>:
 400e1bc:	defff404 	addi	sp,sp,-48
 400e1c0:	dcc00515 	stw	r19,20(sp)
 400e1c4:	dc000215 	stw	r16,8(sp)
 400e1c8:	dfc00b15 	stw	ra,44(sp)
 400e1cc:	df000a15 	stw	fp,40(sp)
 400e1d0:	ddc00915 	stw	r23,36(sp)
 400e1d4:	dd800815 	stw	r22,32(sp)
 400e1d8:	dd400715 	stw	r21,28(sp)
 400e1dc:	dd000615 	stw	r20,24(sp)
 400e1e0:	dc800415 	stw	r18,16(sp)
 400e1e4:	dc400315 	stw	r17,12(sp)
 400e1e8:	2027883a 	mov	r19,r4
 400e1ec:	2821883a 	mov	r16,r5
 400e1f0:	3800461e 	bne	r7,zero,400e30c <__udivdi3+0x150>
 400e1f4:	3023883a 	mov	r17,r6
 400e1f8:	2025883a 	mov	r18,r4
 400e1fc:	2980572e 	bgeu	r5,r6,400e35c <__udivdi3+0x1a0>
 400e200:	00bfffd4 	movui	r2,65535
 400e204:	282d883a 	mov	r22,r5
 400e208:	1180b236 	bltu	r2,r6,400e4d4 <__udivdi3+0x318>
 400e20c:	00803fc4 	movi	r2,255
 400e210:	1185803a 	cmpltu	r2,r2,r6
 400e214:	100490fa 	slli	r2,r2,3
 400e218:	3086d83a 	srl	r3,r6,r2
 400e21c:	01010074 	movhi	r4,1025
 400e220:	21077884 	addi	r4,r4,7650
 400e224:	20c7883a 	add	r3,r4,r3
 400e228:	18c00003 	ldbu	r3,0(r3)
 400e22c:	1885883a 	add	r2,r3,r2
 400e230:	00c00804 	movi	r3,32
 400e234:	1887c83a 	sub	r3,r3,r2
 400e238:	18000526 	beq	r3,zero,400e250 <__udivdi3+0x94>
 400e23c:	80e0983a 	sll	r16,r16,r3
 400e240:	9884d83a 	srl	r2,r19,r2
 400e244:	30e2983a 	sll	r17,r6,r3
 400e248:	98e4983a 	sll	r18,r19,r3
 400e24c:	142cb03a 	or	r22,r2,r16
 400e250:	882ad43a 	srli	r21,r17,16
 400e254:	b009883a 	mov	r4,r22
 400e258:	8d3fffcc 	andi	r20,r17,65535
 400e25c:	a80b883a 	mov	r5,r21
 400e260:	400240c0 	call	400240c <__umodsi3>
 400e264:	b009883a 	mov	r4,r22
 400e268:	a80b883a 	mov	r5,r21
 400e26c:	1027883a 	mov	r19,r2
 400e270:	40023a80 	call	40023a8 <__udivsi3>
 400e274:	100b883a 	mov	r5,r2
 400e278:	a009883a 	mov	r4,r20
 400e27c:	102d883a 	mov	r22,r2
 400e280:	40024640 	call	4002464 <__mulsi3>
 400e284:	9826943a 	slli	r19,r19,16
 400e288:	9006d43a 	srli	r3,r18,16
 400e28c:	1cc6b03a 	or	r3,r3,r19
 400e290:	1880052e 	bgeu	r3,r2,400e2a8 <__udivdi3+0xec>
 400e294:	1c47883a 	add	r3,r3,r17
 400e298:	b13fffc4 	addi	r4,r22,-1
 400e29c:	1c400136 	bltu	r3,r17,400e2a4 <__udivdi3+0xe8>
 400e2a0:	18814236 	bltu	r3,r2,400e7ac <__udivdi3+0x5f0>
 400e2a4:	202d883a 	mov	r22,r4
 400e2a8:	18a1c83a 	sub	r16,r3,r2
 400e2ac:	8009883a 	mov	r4,r16
 400e2b0:	a80b883a 	mov	r5,r21
 400e2b4:	400240c0 	call	400240c <__umodsi3>
 400e2b8:	1027883a 	mov	r19,r2
 400e2bc:	8009883a 	mov	r4,r16
 400e2c0:	a80b883a 	mov	r5,r21
 400e2c4:	9826943a 	slli	r19,r19,16
 400e2c8:	40023a80 	call	40023a8 <__udivsi3>
 400e2cc:	100b883a 	mov	r5,r2
 400e2d0:	a009883a 	mov	r4,r20
 400e2d4:	94bfffcc 	andi	r18,r18,65535
 400e2d8:	1021883a 	mov	r16,r2
 400e2dc:	94e4b03a 	or	r18,r18,r19
 400e2e0:	40024640 	call	4002464 <__mulsi3>
 400e2e4:	9080052e 	bgeu	r18,r2,400e2fc <__udivdi3+0x140>
 400e2e8:	8ca5883a 	add	r18,r17,r18
 400e2ec:	80ffffc4 	addi	r3,r16,-1
 400e2f0:	94410c36 	bltu	r18,r17,400e724 <__udivdi3+0x568>
 400e2f4:	90810b2e 	bgeu	r18,r2,400e724 <__udivdi3+0x568>
 400e2f8:	843fff84 	addi	r16,r16,-2
 400e2fc:	b004943a 	slli	r2,r22,16
 400e300:	0007883a 	mov	r3,zero
 400e304:	1404b03a 	or	r2,r2,r16
 400e308:	00005e06 	br	400e484 <__udivdi3+0x2c8>
 400e30c:	29c05b36 	bltu	r5,r7,400e47c <__udivdi3+0x2c0>
 400e310:	00bfffd4 	movui	r2,65535
 400e314:	11c0672e 	bgeu	r2,r7,400e4b4 <__udivdi3+0x2f8>
 400e318:	00804034 	movhi	r2,256
 400e31c:	10bfffc4 	addi	r2,r2,-1
 400e320:	11c10a36 	bltu	r2,r7,400e74c <__udivdi3+0x590>
 400e324:	00800404 	movi	r2,16
 400e328:	3886d83a 	srl	r3,r7,r2
 400e32c:	01010074 	movhi	r4,1025
 400e330:	21077884 	addi	r4,r4,7650
 400e334:	20c7883a 	add	r3,r4,r3
 400e338:	18c00003 	ldbu	r3,0(r3)
 400e33c:	05c00804 	movi	r23,32
 400e340:	1885883a 	add	r2,r3,r2
 400e344:	b8afc83a 	sub	r23,r23,r2
 400e348:	b800671e 	bne	r23,zero,400e4e8 <__udivdi3+0x32c>
 400e34c:	3c010536 	bltu	r7,r16,400e764 <__udivdi3+0x5a8>
 400e350:	9985403a 	cmpgeu	r2,r19,r6
 400e354:	0007883a 	mov	r3,zero
 400e358:	00004a06 	br	400e484 <__udivdi3+0x2c8>
 400e35c:	3000041e 	bne	r6,zero,400e370 <__udivdi3+0x1b4>
 400e360:	000b883a 	mov	r5,zero
 400e364:	01000044 	movi	r4,1
 400e368:	40023a80 	call	40023a8 <__udivsi3>
 400e36c:	1023883a 	mov	r17,r2
 400e370:	00bfffd4 	movui	r2,65535
 400e374:	1440532e 	bgeu	r2,r17,400e4c4 <__udivdi3+0x308>
 400e378:	00804034 	movhi	r2,256
 400e37c:	10bfffc4 	addi	r2,r2,-1
 400e380:	1440f436 	bltu	r2,r17,400e754 <__udivdi3+0x598>
 400e384:	00800404 	movi	r2,16
 400e388:	8886d83a 	srl	r3,r17,r2
 400e38c:	01010074 	movhi	r4,1025
 400e390:	21077884 	addi	r4,r4,7650
 400e394:	20c7883a 	add	r3,r4,r3
 400e398:	18c00003 	ldbu	r3,0(r3)
 400e39c:	1885883a 	add	r2,r3,r2
 400e3a0:	00c00804 	movi	r3,32
 400e3a4:	1887c83a 	sub	r3,r3,r2
 400e3a8:	1800a51e 	bne	r3,zero,400e640 <__udivdi3+0x484>
 400e3ac:	882ad43a 	srli	r21,r17,16
 400e3b0:	8461c83a 	sub	r16,r16,r17
 400e3b4:	8d3fffcc 	andi	r20,r17,65535
 400e3b8:	00c00044 	movi	r3,1
 400e3bc:	a80b883a 	mov	r5,r21
 400e3c0:	8009883a 	mov	r4,r16
 400e3c4:	d8c00115 	stw	r3,4(sp)
 400e3c8:	400240c0 	call	400240c <__umodsi3>
 400e3cc:	a80b883a 	mov	r5,r21
 400e3d0:	8009883a 	mov	r4,r16
 400e3d4:	1027883a 	mov	r19,r2
 400e3d8:	40023a80 	call	40023a8 <__udivsi3>
 400e3dc:	a00b883a 	mov	r5,r20
 400e3e0:	1009883a 	mov	r4,r2
 400e3e4:	102d883a 	mov	r22,r2
 400e3e8:	40024640 	call	4002464 <__mulsi3>
 400e3ec:	9826943a 	slli	r19,r19,16
 400e3f0:	900ed43a 	srli	r7,r18,16
 400e3f4:	d8c00117 	ldw	r3,4(sp)
 400e3f8:	3cceb03a 	or	r7,r7,r19
 400e3fc:	3880052e 	bgeu	r7,r2,400e414 <__udivdi3+0x258>
 400e400:	3c4f883a 	add	r7,r7,r17
 400e404:	b13fffc4 	addi	r4,r22,-1
 400e408:	3c400136 	bltu	r7,r17,400e410 <__udivdi3+0x254>
 400e40c:	3880e436 	bltu	r7,r2,400e7a0 <__udivdi3+0x5e4>
 400e410:	202d883a 	mov	r22,r4
 400e414:	38a1c83a 	sub	r16,r7,r2
 400e418:	8009883a 	mov	r4,r16
 400e41c:	a80b883a 	mov	r5,r21
 400e420:	d8c00115 	stw	r3,4(sp)
 400e424:	400240c0 	call	400240c <__umodsi3>
 400e428:	1027883a 	mov	r19,r2
 400e42c:	8009883a 	mov	r4,r16
 400e430:	a80b883a 	mov	r5,r21
 400e434:	9826943a 	slli	r19,r19,16
 400e438:	40023a80 	call	40023a8 <__udivsi3>
 400e43c:	a00b883a 	mov	r5,r20
 400e440:	1009883a 	mov	r4,r2
 400e444:	94bfffcc 	andi	r18,r18,65535
 400e448:	1021883a 	mov	r16,r2
 400e44c:	94e4b03a 	or	r18,r18,r19
 400e450:	40024640 	call	4002464 <__mulsi3>
 400e454:	d8c00117 	ldw	r3,4(sp)
 400e458:	9080052e 	bgeu	r18,r2,400e470 <__udivdi3+0x2b4>
 400e45c:	8ca5883a 	add	r18,r17,r18
 400e460:	813fffc4 	addi	r4,r16,-1
 400e464:	9440ad36 	bltu	r18,r17,400e71c <__udivdi3+0x560>
 400e468:	9080ac2e 	bgeu	r18,r2,400e71c <__udivdi3+0x560>
 400e46c:	843fff84 	addi	r16,r16,-2
 400e470:	b004943a 	slli	r2,r22,16
 400e474:	1404b03a 	or	r2,r2,r16
 400e478:	00000206 	br	400e484 <__udivdi3+0x2c8>
 400e47c:	0007883a 	mov	r3,zero
 400e480:	0005883a 	mov	r2,zero
 400e484:	dfc00b17 	ldw	ra,44(sp)
 400e488:	df000a17 	ldw	fp,40(sp)
 400e48c:	ddc00917 	ldw	r23,36(sp)
 400e490:	dd800817 	ldw	r22,32(sp)
 400e494:	dd400717 	ldw	r21,28(sp)
 400e498:	dd000617 	ldw	r20,24(sp)
 400e49c:	dcc00517 	ldw	r19,20(sp)
 400e4a0:	dc800417 	ldw	r18,16(sp)
 400e4a4:	dc400317 	ldw	r17,12(sp)
 400e4a8:	dc000217 	ldw	r16,8(sp)
 400e4ac:	dec00c04 	addi	sp,sp,48
 400e4b0:	f800283a 	ret
 400e4b4:	00803fc4 	movi	r2,255
 400e4b8:	11c5803a 	cmpltu	r2,r2,r7
 400e4bc:	100490fa 	slli	r2,r2,3
 400e4c0:	003f9906 	br	400e328 <__alt_data_end+0xfc00e328>
 400e4c4:	00803fc4 	movi	r2,255
 400e4c8:	1445803a 	cmpltu	r2,r2,r17
 400e4cc:	100490fa 	slli	r2,r2,3
 400e4d0:	003fad06 	br	400e388 <__alt_data_end+0xfc00e388>
 400e4d4:	00804034 	movhi	r2,256
 400e4d8:	10bfffc4 	addi	r2,r2,-1
 400e4dc:	11809f36 	bltu	r2,r6,400e75c <__udivdi3+0x5a0>
 400e4e0:	00800404 	movi	r2,16
 400e4e4:	003f4c06 	br	400e218 <__alt_data_end+0xfc00e218>
 400e4e8:	3dce983a 	sll	r7,r7,r23
 400e4ec:	30b8d83a 	srl	fp,r6,r2
 400e4f0:	80a2d83a 	srl	r17,r16,r2
 400e4f4:	35cc983a 	sll	r6,r6,r23
 400e4f8:	3f38b03a 	or	fp,r7,fp
 400e4fc:	e024d43a 	srli	r18,fp,16
 400e500:	9884d83a 	srl	r2,r19,r2
 400e504:	85e0983a 	sll	r16,r16,r23
 400e508:	8809883a 	mov	r4,r17
 400e50c:	900b883a 	mov	r5,r18
 400e510:	d9800015 	stw	r6,0(sp)
 400e514:	1420b03a 	or	r16,r2,r16
 400e518:	400240c0 	call	400240c <__umodsi3>
 400e51c:	900b883a 	mov	r5,r18
 400e520:	8809883a 	mov	r4,r17
 400e524:	1029883a 	mov	r20,r2
 400e528:	e5bfffcc 	andi	r22,fp,65535
 400e52c:	40023a80 	call	40023a8 <__udivsi3>
 400e530:	100b883a 	mov	r5,r2
 400e534:	b009883a 	mov	r4,r22
 400e538:	102b883a 	mov	r21,r2
 400e53c:	40024640 	call	4002464 <__mulsi3>
 400e540:	a028943a 	slli	r20,r20,16
 400e544:	8006d43a 	srli	r3,r16,16
 400e548:	1d06b03a 	or	r3,r3,r20
 400e54c:	1880042e 	bgeu	r3,r2,400e560 <__udivdi3+0x3a4>
 400e550:	1f07883a 	add	r3,r3,fp
 400e554:	a93fffc4 	addi	r4,r21,-1
 400e558:	1f00892e 	bgeu	r3,fp,400e780 <__udivdi3+0x5c4>
 400e55c:	202b883a 	mov	r21,r4
 400e560:	18a3c83a 	sub	r17,r3,r2
 400e564:	8809883a 	mov	r4,r17
 400e568:	900b883a 	mov	r5,r18
 400e56c:	400240c0 	call	400240c <__umodsi3>
 400e570:	1029883a 	mov	r20,r2
 400e574:	8809883a 	mov	r4,r17
 400e578:	900b883a 	mov	r5,r18
 400e57c:	a028943a 	slli	r20,r20,16
 400e580:	40023a80 	call	40023a8 <__udivsi3>
 400e584:	100b883a 	mov	r5,r2
 400e588:	b009883a 	mov	r4,r22
 400e58c:	843fffcc 	andi	r16,r16,65535
 400e590:	1023883a 	mov	r17,r2
 400e594:	8520b03a 	or	r16,r16,r20
 400e598:	40024640 	call	4002464 <__mulsi3>
 400e59c:	8080042e 	bgeu	r16,r2,400e5b0 <__udivdi3+0x3f4>
 400e5a0:	8721883a 	add	r16,r16,fp
 400e5a4:	88ffffc4 	addi	r3,r17,-1
 400e5a8:	8700712e 	bgeu	r16,fp,400e770 <__udivdi3+0x5b4>
 400e5ac:	1823883a 	mov	r17,r3
 400e5b0:	a80e943a 	slli	r7,r21,16
 400e5b4:	d8c00017 	ldw	r3,0(sp)
 400e5b8:	80a1c83a 	sub	r16,r16,r2
 400e5bc:	3c64b03a 	or	r18,r7,r17
 400e5c0:	1d3fffcc 	andi	r20,r3,65535
 400e5c4:	9022d43a 	srli	r17,r18,16
 400e5c8:	95bfffcc 	andi	r22,r18,65535
 400e5cc:	a00b883a 	mov	r5,r20
 400e5d0:	b009883a 	mov	r4,r22
 400e5d4:	182ad43a 	srli	r21,r3,16
 400e5d8:	40024640 	call	4002464 <__mulsi3>
 400e5dc:	a00b883a 	mov	r5,r20
 400e5e0:	8809883a 	mov	r4,r17
 400e5e4:	1039883a 	mov	fp,r2
 400e5e8:	40024640 	call	4002464 <__mulsi3>
 400e5ec:	8809883a 	mov	r4,r17
 400e5f0:	a80b883a 	mov	r5,r21
 400e5f4:	1029883a 	mov	r20,r2
 400e5f8:	40024640 	call	4002464 <__mulsi3>
 400e5fc:	a80b883a 	mov	r5,r21
 400e600:	b009883a 	mov	r4,r22
 400e604:	1023883a 	mov	r17,r2
 400e608:	40024640 	call	4002464 <__mulsi3>
 400e60c:	e006d43a 	srli	r3,fp,16
 400e610:	1505883a 	add	r2,r2,r20
 400e614:	1887883a 	add	r3,r3,r2
 400e618:	1d00022e 	bgeu	r3,r20,400e624 <__udivdi3+0x468>
 400e61c:	00800074 	movhi	r2,1
 400e620:	88a3883a 	add	r17,r17,r2
 400e624:	1804d43a 	srli	r2,r3,16
 400e628:	1463883a 	add	r17,r2,r17
 400e62c:	84404436 	bltu	r16,r17,400e740 <__udivdi3+0x584>
 400e630:	84403e26 	beq	r16,r17,400e72c <__udivdi3+0x570>
 400e634:	9005883a 	mov	r2,r18
 400e638:	0007883a 	mov	r3,zero
 400e63c:	003f9106 	br	400e484 <__alt_data_end+0xfc00e484>
 400e640:	88e2983a 	sll	r17,r17,r3
 400e644:	80aed83a 	srl	r23,r16,r2
 400e648:	80e0983a 	sll	r16,r16,r3
 400e64c:	882ad43a 	srli	r21,r17,16
 400e650:	9884d83a 	srl	r2,r19,r2
 400e654:	b809883a 	mov	r4,r23
 400e658:	a80b883a 	mov	r5,r21
 400e65c:	98e4983a 	sll	r18,r19,r3
 400e660:	142cb03a 	or	r22,r2,r16
 400e664:	400240c0 	call	400240c <__umodsi3>
 400e668:	b809883a 	mov	r4,r23
 400e66c:	a80b883a 	mov	r5,r21
 400e670:	1027883a 	mov	r19,r2
 400e674:	8d3fffcc 	andi	r20,r17,65535
 400e678:	40023a80 	call	40023a8 <__udivsi3>
 400e67c:	a009883a 	mov	r4,r20
 400e680:	100b883a 	mov	r5,r2
 400e684:	102f883a 	mov	r23,r2
 400e688:	40024640 	call	4002464 <__mulsi3>
 400e68c:	9826943a 	slli	r19,r19,16
 400e690:	b008d43a 	srli	r4,r22,16
 400e694:	24c8b03a 	or	r4,r4,r19
 400e698:	2080062e 	bgeu	r4,r2,400e6b4 <__udivdi3+0x4f8>
 400e69c:	2449883a 	add	r4,r4,r17
 400e6a0:	b8ffffc4 	addi	r3,r23,-1
 400e6a4:	24403c36 	bltu	r4,r17,400e798 <__udivdi3+0x5dc>
 400e6a8:	20803b2e 	bgeu	r4,r2,400e798 <__udivdi3+0x5dc>
 400e6ac:	bdffff84 	addi	r23,r23,-2
 400e6b0:	2449883a 	add	r4,r4,r17
 400e6b4:	20a1c83a 	sub	r16,r4,r2
 400e6b8:	a80b883a 	mov	r5,r21
 400e6bc:	8009883a 	mov	r4,r16
 400e6c0:	400240c0 	call	400240c <__umodsi3>
 400e6c4:	a80b883a 	mov	r5,r21
 400e6c8:	8009883a 	mov	r4,r16
 400e6cc:	1027883a 	mov	r19,r2
 400e6d0:	40023a80 	call	40023a8 <__udivsi3>
 400e6d4:	a009883a 	mov	r4,r20
 400e6d8:	100b883a 	mov	r5,r2
 400e6dc:	9826943a 	slli	r19,r19,16
 400e6e0:	1039883a 	mov	fp,r2
 400e6e4:	40024640 	call	4002464 <__mulsi3>
 400e6e8:	b13fffcc 	andi	r4,r22,65535
 400e6ec:	24c8b03a 	or	r4,r4,r19
 400e6f0:	2080062e 	bgeu	r4,r2,400e70c <__udivdi3+0x550>
 400e6f4:	2449883a 	add	r4,r4,r17
 400e6f8:	e0ffffc4 	addi	r3,fp,-1
 400e6fc:	24402436 	bltu	r4,r17,400e790 <__udivdi3+0x5d4>
 400e700:	2080232e 	bgeu	r4,r2,400e790 <__udivdi3+0x5d4>
 400e704:	e73fff84 	addi	fp,fp,-2
 400e708:	2449883a 	add	r4,r4,r17
 400e70c:	b82e943a 	slli	r23,r23,16
 400e710:	20a1c83a 	sub	r16,r4,r2
 400e714:	bf06b03a 	or	r3,r23,fp
 400e718:	003f2806 	br	400e3bc <__alt_data_end+0xfc00e3bc>
 400e71c:	2021883a 	mov	r16,r4
 400e720:	003f5306 	br	400e470 <__alt_data_end+0xfc00e470>
 400e724:	1821883a 	mov	r16,r3
 400e728:	003ef406 	br	400e2fc <__alt_data_end+0xfc00e2fc>
 400e72c:	1806943a 	slli	r3,r3,16
 400e730:	9de6983a 	sll	r19,r19,r23
 400e734:	e73fffcc 	andi	fp,fp,65535
 400e738:	1f07883a 	add	r3,r3,fp
 400e73c:	98ffbd2e 	bgeu	r19,r3,400e634 <__alt_data_end+0xfc00e634>
 400e740:	90bfffc4 	addi	r2,r18,-1
 400e744:	0007883a 	mov	r3,zero
 400e748:	003f4e06 	br	400e484 <__alt_data_end+0xfc00e484>
 400e74c:	00800604 	movi	r2,24
 400e750:	003ef506 	br	400e328 <__alt_data_end+0xfc00e328>
 400e754:	00800604 	movi	r2,24
 400e758:	003f0b06 	br	400e388 <__alt_data_end+0xfc00e388>
 400e75c:	00800604 	movi	r2,24
 400e760:	003ead06 	br	400e218 <__alt_data_end+0xfc00e218>
 400e764:	0007883a 	mov	r3,zero
 400e768:	00800044 	movi	r2,1
 400e76c:	003f4506 	br	400e484 <__alt_data_end+0xfc00e484>
 400e770:	80bf8e2e 	bgeu	r16,r2,400e5ac <__alt_data_end+0xfc00e5ac>
 400e774:	8c7fff84 	addi	r17,r17,-2
 400e778:	8721883a 	add	r16,r16,fp
 400e77c:	003f8c06 	br	400e5b0 <__alt_data_end+0xfc00e5b0>
 400e780:	18bf762e 	bgeu	r3,r2,400e55c <__alt_data_end+0xfc00e55c>
 400e784:	ad7fff84 	addi	r21,r21,-2
 400e788:	1f07883a 	add	r3,r3,fp
 400e78c:	003f7406 	br	400e560 <__alt_data_end+0xfc00e560>
 400e790:	1839883a 	mov	fp,r3
 400e794:	003fdd06 	br	400e70c <__alt_data_end+0xfc00e70c>
 400e798:	182f883a 	mov	r23,r3
 400e79c:	003fc506 	br	400e6b4 <__alt_data_end+0xfc00e6b4>
 400e7a0:	b5bfff84 	addi	r22,r22,-2
 400e7a4:	3c4f883a 	add	r7,r7,r17
 400e7a8:	003f1a06 	br	400e414 <__alt_data_end+0xfc00e414>
 400e7ac:	b5bfff84 	addi	r22,r22,-2
 400e7b0:	1c47883a 	add	r3,r3,r17
 400e7b4:	003ebc06 	br	400e2a8 <__alt_data_end+0xfc00e2a8>

0400e7b8 <__umoddi3>:
 400e7b8:	defff304 	addi	sp,sp,-52
 400e7bc:	df000b15 	stw	fp,44(sp)
 400e7c0:	dc400415 	stw	r17,16(sp)
 400e7c4:	dc000315 	stw	r16,12(sp)
 400e7c8:	dfc00c15 	stw	ra,48(sp)
 400e7cc:	ddc00a15 	stw	r23,40(sp)
 400e7d0:	dd800915 	stw	r22,36(sp)
 400e7d4:	dd400815 	stw	r21,32(sp)
 400e7d8:	dd000715 	stw	r20,28(sp)
 400e7dc:	dcc00615 	stw	r19,24(sp)
 400e7e0:	dc800515 	stw	r18,20(sp)
 400e7e4:	2021883a 	mov	r16,r4
 400e7e8:	2823883a 	mov	r17,r5
 400e7ec:	2839883a 	mov	fp,r5
 400e7f0:	3800401e 	bne	r7,zero,400e8f4 <__umoddi3+0x13c>
 400e7f4:	3027883a 	mov	r19,r6
 400e7f8:	2029883a 	mov	r20,r4
 400e7fc:	2980552e 	bgeu	r5,r6,400e954 <__umoddi3+0x19c>
 400e800:	00bfffd4 	movui	r2,65535
 400e804:	1180a236 	bltu	r2,r6,400ea90 <__umoddi3+0x2d8>
 400e808:	01003fc4 	movi	r4,255
 400e80c:	2189803a 	cmpltu	r4,r4,r6
 400e810:	200890fa 	slli	r4,r4,3
 400e814:	3104d83a 	srl	r2,r6,r4
 400e818:	00c10074 	movhi	r3,1025
 400e81c:	18c77884 	addi	r3,r3,7650
 400e820:	1885883a 	add	r2,r3,r2
 400e824:	10c00003 	ldbu	r3,0(r2)
 400e828:	00800804 	movi	r2,32
 400e82c:	1909883a 	add	r4,r3,r4
 400e830:	1125c83a 	sub	r18,r2,r4
 400e834:	90000526 	beq	r18,zero,400e84c <__umoddi3+0x94>
 400e838:	8ca2983a 	sll	r17,r17,r18
 400e83c:	8108d83a 	srl	r4,r16,r4
 400e840:	34a6983a 	sll	r19,r6,r18
 400e844:	84a8983a 	sll	r20,r16,r18
 400e848:	2478b03a 	or	fp,r4,r17
 400e84c:	982cd43a 	srli	r22,r19,16
 400e850:	e009883a 	mov	r4,fp
 400e854:	9dffffcc 	andi	r23,r19,65535
 400e858:	b00b883a 	mov	r5,r22
 400e85c:	400240c0 	call	400240c <__umodsi3>
 400e860:	b00b883a 	mov	r5,r22
 400e864:	e009883a 	mov	r4,fp
 400e868:	102b883a 	mov	r21,r2
 400e86c:	40023a80 	call	40023a8 <__udivsi3>
 400e870:	100b883a 	mov	r5,r2
 400e874:	b809883a 	mov	r4,r23
 400e878:	40024640 	call	4002464 <__mulsi3>
 400e87c:	a82a943a 	slli	r21,r21,16
 400e880:	a006d43a 	srli	r3,r20,16
 400e884:	1d46b03a 	or	r3,r3,r21
 400e888:	1880032e 	bgeu	r3,r2,400e898 <__umoddi3+0xe0>
 400e88c:	1cc7883a 	add	r3,r3,r19
 400e890:	1cc00136 	bltu	r3,r19,400e898 <__umoddi3+0xe0>
 400e894:	18813136 	bltu	r3,r2,400ed5c <__umoddi3+0x5a4>
 400e898:	18a1c83a 	sub	r16,r3,r2
 400e89c:	b00b883a 	mov	r5,r22
 400e8a0:	8009883a 	mov	r4,r16
 400e8a4:	400240c0 	call	400240c <__umodsi3>
 400e8a8:	b00b883a 	mov	r5,r22
 400e8ac:	8009883a 	mov	r4,r16
 400e8b0:	1023883a 	mov	r17,r2
 400e8b4:	40023a80 	call	40023a8 <__udivsi3>
 400e8b8:	100b883a 	mov	r5,r2
 400e8bc:	b809883a 	mov	r4,r23
 400e8c0:	8822943a 	slli	r17,r17,16
 400e8c4:	40024640 	call	4002464 <__mulsi3>
 400e8c8:	a0ffffcc 	andi	r3,r20,65535
 400e8cc:	1c46b03a 	or	r3,r3,r17
 400e8d0:	1880042e 	bgeu	r3,r2,400e8e4 <__umoddi3+0x12c>
 400e8d4:	1cc7883a 	add	r3,r3,r19
 400e8d8:	1cc00236 	bltu	r3,r19,400e8e4 <__umoddi3+0x12c>
 400e8dc:	1880012e 	bgeu	r3,r2,400e8e4 <__umoddi3+0x12c>
 400e8e0:	1cc7883a 	add	r3,r3,r19
 400e8e4:	1885c83a 	sub	r2,r3,r2
 400e8e8:	1484d83a 	srl	r2,r2,r18
 400e8ec:	0007883a 	mov	r3,zero
 400e8f0:	00005306 	br	400ea40 <__umoddi3+0x288>
 400e8f4:	29c05036 	bltu	r5,r7,400ea38 <__umoddi3+0x280>
 400e8f8:	00bfffd4 	movui	r2,65535
 400e8fc:	11c05c2e 	bgeu	r2,r7,400ea70 <__umoddi3+0x2b8>
 400e900:	00804034 	movhi	r2,256
 400e904:	10bfffc4 	addi	r2,r2,-1
 400e908:	11c10636 	bltu	r2,r7,400ed24 <__umoddi3+0x56c>
 400e90c:	01000404 	movi	r4,16
 400e910:	3904d83a 	srl	r2,r7,r4
 400e914:	00c10074 	movhi	r3,1025
 400e918:	18c77884 	addi	r3,r3,7650
 400e91c:	1885883a 	add	r2,r3,r2
 400e920:	14c00003 	ldbu	r19,0(r2)
 400e924:	00c00804 	movi	r3,32
 400e928:	9927883a 	add	r19,r19,r4
 400e92c:	1ce9c83a 	sub	r20,r3,r19
 400e930:	a0005c1e 	bne	r20,zero,400eaa4 <__umoddi3+0x2ec>
 400e934:	3c400136 	bltu	r7,r17,400e93c <__umoddi3+0x184>
 400e938:	81810a36 	bltu	r16,r6,400ed64 <__umoddi3+0x5ac>
 400e93c:	8185c83a 	sub	r2,r16,r6
 400e940:	89e3c83a 	sub	r17,r17,r7
 400e944:	8089803a 	cmpltu	r4,r16,r2
 400e948:	8939c83a 	sub	fp,r17,r4
 400e94c:	e007883a 	mov	r3,fp
 400e950:	00003b06 	br	400ea40 <__umoddi3+0x288>
 400e954:	3000041e 	bne	r6,zero,400e968 <__umoddi3+0x1b0>
 400e958:	000b883a 	mov	r5,zero
 400e95c:	01000044 	movi	r4,1
 400e960:	40023a80 	call	40023a8 <__udivsi3>
 400e964:	1027883a 	mov	r19,r2
 400e968:	00bfffd4 	movui	r2,65535
 400e96c:	14c0442e 	bgeu	r2,r19,400ea80 <__umoddi3+0x2c8>
 400e970:	00804034 	movhi	r2,256
 400e974:	10bfffc4 	addi	r2,r2,-1
 400e978:	14c0ec36 	bltu	r2,r19,400ed2c <__umoddi3+0x574>
 400e97c:	00800404 	movi	r2,16
 400e980:	9886d83a 	srl	r3,r19,r2
 400e984:	01010074 	movhi	r4,1025
 400e988:	21077884 	addi	r4,r4,7650
 400e98c:	20c7883a 	add	r3,r4,r3
 400e990:	18c00003 	ldbu	r3,0(r3)
 400e994:	1887883a 	add	r3,r3,r2
 400e998:	00800804 	movi	r2,32
 400e99c:	10e5c83a 	sub	r18,r2,r3
 400e9a0:	9000ab1e 	bne	r18,zero,400ec50 <__umoddi3+0x498>
 400e9a4:	982cd43a 	srli	r22,r19,16
 400e9a8:	8ce3c83a 	sub	r17,r17,r19
 400e9ac:	9dffffcc 	andi	r23,r19,65535
 400e9b0:	b00b883a 	mov	r5,r22
 400e9b4:	8809883a 	mov	r4,r17
 400e9b8:	400240c0 	call	400240c <__umodsi3>
 400e9bc:	b00b883a 	mov	r5,r22
 400e9c0:	8809883a 	mov	r4,r17
 400e9c4:	102b883a 	mov	r21,r2
 400e9c8:	40023a80 	call	40023a8 <__udivsi3>
 400e9cc:	b80b883a 	mov	r5,r23
 400e9d0:	1009883a 	mov	r4,r2
 400e9d4:	40024640 	call	4002464 <__mulsi3>
 400e9d8:	a82a943a 	slli	r21,r21,16
 400e9dc:	a006d43a 	srli	r3,r20,16
 400e9e0:	1d46b03a 	or	r3,r3,r21
 400e9e4:	1880042e 	bgeu	r3,r2,400e9f8 <__umoddi3+0x240>
 400e9e8:	1cc7883a 	add	r3,r3,r19
 400e9ec:	1cc00236 	bltu	r3,r19,400e9f8 <__umoddi3+0x240>
 400e9f0:	1880012e 	bgeu	r3,r2,400e9f8 <__umoddi3+0x240>
 400e9f4:	1cc7883a 	add	r3,r3,r19
 400e9f8:	18a1c83a 	sub	r16,r3,r2
 400e9fc:	b00b883a 	mov	r5,r22
 400ea00:	8009883a 	mov	r4,r16
 400ea04:	400240c0 	call	400240c <__umodsi3>
 400ea08:	1023883a 	mov	r17,r2
 400ea0c:	b00b883a 	mov	r5,r22
 400ea10:	8009883a 	mov	r4,r16
 400ea14:	40023a80 	call	40023a8 <__udivsi3>
 400ea18:	8822943a 	slli	r17,r17,16
 400ea1c:	b80b883a 	mov	r5,r23
 400ea20:	1009883a 	mov	r4,r2
 400ea24:	40024640 	call	4002464 <__mulsi3>
 400ea28:	a53fffcc 	andi	r20,r20,65535
 400ea2c:	a446b03a 	or	r3,r20,r17
 400ea30:	18bfac2e 	bgeu	r3,r2,400e8e4 <__alt_data_end+0xfc00e8e4>
 400ea34:	003fa706 	br	400e8d4 <__alt_data_end+0xfc00e8d4>
 400ea38:	2005883a 	mov	r2,r4
 400ea3c:	2807883a 	mov	r3,r5
 400ea40:	dfc00c17 	ldw	ra,48(sp)
 400ea44:	df000b17 	ldw	fp,44(sp)
 400ea48:	ddc00a17 	ldw	r23,40(sp)
 400ea4c:	dd800917 	ldw	r22,36(sp)
 400ea50:	dd400817 	ldw	r21,32(sp)
 400ea54:	dd000717 	ldw	r20,28(sp)
 400ea58:	dcc00617 	ldw	r19,24(sp)
 400ea5c:	dc800517 	ldw	r18,20(sp)
 400ea60:	dc400417 	ldw	r17,16(sp)
 400ea64:	dc000317 	ldw	r16,12(sp)
 400ea68:	dec00d04 	addi	sp,sp,52
 400ea6c:	f800283a 	ret
 400ea70:	04c03fc4 	movi	r19,255
 400ea74:	99c9803a 	cmpltu	r4,r19,r7
 400ea78:	200890fa 	slli	r4,r4,3
 400ea7c:	003fa406 	br	400e910 <__alt_data_end+0xfc00e910>
 400ea80:	00803fc4 	movi	r2,255
 400ea84:	14c5803a 	cmpltu	r2,r2,r19
 400ea88:	100490fa 	slli	r2,r2,3
 400ea8c:	003fbc06 	br	400e980 <__alt_data_end+0xfc00e980>
 400ea90:	00804034 	movhi	r2,256
 400ea94:	10bfffc4 	addi	r2,r2,-1
 400ea98:	1180a636 	bltu	r2,r6,400ed34 <__umoddi3+0x57c>
 400ea9c:	01000404 	movi	r4,16
 400eaa0:	003f5c06 	br	400e814 <__alt_data_end+0xfc00e814>
 400eaa4:	3d0e983a 	sll	r7,r7,r20
 400eaa8:	34ead83a 	srl	r21,r6,r19
 400eaac:	8cc6d83a 	srl	r3,r17,r19
 400eab0:	8d10983a 	sll	r8,r17,r20
 400eab4:	3d6ab03a 	or	r21,r7,r21
 400eab8:	a82cd43a 	srli	r22,r21,16
 400eabc:	84e2d83a 	srl	r17,r16,r19
 400eac0:	1809883a 	mov	r4,r3
 400eac4:	b00b883a 	mov	r5,r22
 400eac8:	8a22b03a 	or	r17,r17,r8
 400eacc:	3524983a 	sll	r18,r6,r20
 400ead0:	dc400015 	stw	r17,0(sp)
 400ead4:	d8c00115 	stw	r3,4(sp)
 400ead8:	400240c0 	call	400240c <__umodsi3>
 400eadc:	d8c00117 	ldw	r3,4(sp)
 400eae0:	b00b883a 	mov	r5,r22
 400eae4:	1039883a 	mov	fp,r2
 400eae8:	1809883a 	mov	r4,r3
 400eaec:	40023a80 	call	40023a8 <__udivsi3>
 400eaf0:	adffffcc 	andi	r23,r21,65535
 400eaf4:	100b883a 	mov	r5,r2
 400eaf8:	b809883a 	mov	r4,r23
 400eafc:	1023883a 	mov	r17,r2
 400eb00:	40024640 	call	4002464 <__mulsi3>
 400eb04:	d9400017 	ldw	r5,0(sp)
 400eb08:	e008943a 	slli	r4,fp,16
 400eb0c:	8520983a 	sll	r16,r16,r20
 400eb10:	2806d43a 	srli	r3,r5,16
 400eb14:	1906b03a 	or	r3,r3,r4
 400eb18:	1880042e 	bgeu	r3,r2,400eb2c <__umoddi3+0x374>
 400eb1c:	1d47883a 	add	r3,r3,r21
 400eb20:	893fffc4 	addi	r4,r17,-1
 400eb24:	1d40892e 	bgeu	r3,r21,400ed4c <__umoddi3+0x594>
 400eb28:	2023883a 	mov	r17,r4
 400eb2c:	18b9c83a 	sub	fp,r3,r2
 400eb30:	b00b883a 	mov	r5,r22
 400eb34:	e009883a 	mov	r4,fp
 400eb38:	400240c0 	call	400240c <__umodsi3>
 400eb3c:	b00b883a 	mov	r5,r22
 400eb40:	e009883a 	mov	r4,fp
 400eb44:	d8800215 	stw	r2,8(sp)
 400eb48:	40023a80 	call	40023a8 <__udivsi3>
 400eb4c:	100b883a 	mov	r5,r2
 400eb50:	b809883a 	mov	r4,r23
 400eb54:	102d883a 	mov	r22,r2
 400eb58:	40024640 	call	4002464 <__mulsi3>
 400eb5c:	d9800217 	ldw	r6,8(sp)
 400eb60:	d8c00017 	ldw	r3,0(sp)
 400eb64:	300c943a 	slli	r6,r6,16
 400eb68:	1a3fffcc 	andi	r8,r3,65535
 400eb6c:	4190b03a 	or	r8,r8,r6
 400eb70:	4080042e 	bgeu	r8,r2,400eb84 <__umoddi3+0x3cc>
 400eb74:	4551883a 	add	r8,r8,r21
 400eb78:	b0ffffc4 	addi	r3,r22,-1
 400eb7c:	45406f2e 	bgeu	r8,r21,400ed3c <__umoddi3+0x584>
 400eb80:	182d883a 	mov	r22,r3
 400eb84:	880e943a 	slli	r7,r17,16
 400eb88:	9006d43a 	srli	r3,r18,16
 400eb8c:	91bfffcc 	andi	r6,r18,65535
 400eb90:	3dacb03a 	or	r22,r7,r22
 400eb94:	b02ed43a 	srli	r23,r22,16
 400eb98:	b5bfffcc 	andi	r22,r22,65535
 400eb9c:	300b883a 	mov	r5,r6
 400eba0:	b009883a 	mov	r4,r22
 400eba4:	40a3c83a 	sub	r17,r8,r2
 400eba8:	d8c00115 	stw	r3,4(sp)
 400ebac:	d9800215 	stw	r6,8(sp)
 400ebb0:	40024640 	call	4002464 <__mulsi3>
 400ebb4:	d9800217 	ldw	r6,8(sp)
 400ebb8:	b809883a 	mov	r4,r23
 400ebbc:	1039883a 	mov	fp,r2
 400ebc0:	300b883a 	mov	r5,r6
 400ebc4:	40024640 	call	4002464 <__mulsi3>
 400ebc8:	d8c00117 	ldw	r3,4(sp)
 400ebcc:	b809883a 	mov	r4,r23
 400ebd0:	d8800215 	stw	r2,8(sp)
 400ebd4:	180b883a 	mov	r5,r3
 400ebd8:	40024640 	call	4002464 <__mulsi3>
 400ebdc:	d8c00117 	ldw	r3,4(sp)
 400ebe0:	b009883a 	mov	r4,r22
 400ebe4:	102f883a 	mov	r23,r2
 400ebe8:	180b883a 	mov	r5,r3
 400ebec:	40024640 	call	4002464 <__mulsi3>
 400ebf0:	d9800217 	ldw	r6,8(sp)
 400ebf4:	e006d43a 	srli	r3,fp,16
 400ebf8:	1185883a 	add	r2,r2,r6
 400ebfc:	1885883a 	add	r2,r3,r2
 400ec00:	1180022e 	bgeu	r2,r6,400ec0c <__umoddi3+0x454>
 400ec04:	00c00074 	movhi	r3,1
 400ec08:	b8ef883a 	add	r23,r23,r3
 400ec0c:	1006d43a 	srli	r3,r2,16
 400ec10:	1004943a 	slli	r2,r2,16
 400ec14:	e73fffcc 	andi	fp,fp,65535
 400ec18:	1dc7883a 	add	r3,r3,r23
 400ec1c:	1739883a 	add	fp,r2,fp
 400ec20:	88c03a36 	bltu	r17,r3,400ed0c <__umoddi3+0x554>
 400ec24:	88c05126 	beq	r17,r3,400ed6c <__umoddi3+0x5b4>
 400ec28:	88c9c83a 	sub	r4,r17,r3
 400ec2c:	e00f883a 	mov	r7,fp
 400ec30:	81cfc83a 	sub	r7,r16,r7
 400ec34:	81c7803a 	cmpltu	r3,r16,r7
 400ec38:	20c7c83a 	sub	r3,r4,r3
 400ec3c:	1cc4983a 	sll	r2,r3,r19
 400ec40:	3d0ed83a 	srl	r7,r7,r20
 400ec44:	1d06d83a 	srl	r3,r3,r20
 400ec48:	11c4b03a 	or	r2,r2,r7
 400ec4c:	003f7c06 	br	400ea40 <__alt_data_end+0xfc00ea40>
 400ec50:	9ca6983a 	sll	r19,r19,r18
 400ec54:	88f8d83a 	srl	fp,r17,r3
 400ec58:	80c4d83a 	srl	r2,r16,r3
 400ec5c:	982cd43a 	srli	r22,r19,16
 400ec60:	8ca2983a 	sll	r17,r17,r18
 400ec64:	e009883a 	mov	r4,fp
 400ec68:	b00b883a 	mov	r5,r22
 400ec6c:	146ab03a 	or	r21,r2,r17
 400ec70:	400240c0 	call	400240c <__umodsi3>
 400ec74:	b00b883a 	mov	r5,r22
 400ec78:	e009883a 	mov	r4,fp
 400ec7c:	1029883a 	mov	r20,r2
 400ec80:	9dffffcc 	andi	r23,r19,65535
 400ec84:	40023a80 	call	40023a8 <__udivsi3>
 400ec88:	b809883a 	mov	r4,r23
 400ec8c:	100b883a 	mov	r5,r2
 400ec90:	40024640 	call	4002464 <__mulsi3>
 400ec94:	a008943a 	slli	r4,r20,16
 400ec98:	a806d43a 	srli	r3,r21,16
 400ec9c:	84a8983a 	sll	r20,r16,r18
 400eca0:	1906b03a 	or	r3,r3,r4
 400eca4:	1880042e 	bgeu	r3,r2,400ecb8 <__umoddi3+0x500>
 400eca8:	1cc7883a 	add	r3,r3,r19
 400ecac:	1cc00236 	bltu	r3,r19,400ecb8 <__umoddi3+0x500>
 400ecb0:	1880012e 	bgeu	r3,r2,400ecb8 <__umoddi3+0x500>
 400ecb4:	1cc7883a 	add	r3,r3,r19
 400ecb8:	18a3c83a 	sub	r17,r3,r2
 400ecbc:	b00b883a 	mov	r5,r22
 400ecc0:	8809883a 	mov	r4,r17
 400ecc4:	400240c0 	call	400240c <__umodsi3>
 400ecc8:	b00b883a 	mov	r5,r22
 400eccc:	8809883a 	mov	r4,r17
 400ecd0:	1021883a 	mov	r16,r2
 400ecd4:	40023a80 	call	40023a8 <__udivsi3>
 400ecd8:	100b883a 	mov	r5,r2
 400ecdc:	b809883a 	mov	r4,r23
 400ece0:	8020943a 	slli	r16,r16,16
 400ece4:	40024640 	call	4002464 <__mulsi3>
 400ece8:	a8ffffcc 	andi	r3,r21,65535
 400ecec:	1c06b03a 	or	r3,r3,r16
 400ecf0:	1880042e 	bgeu	r3,r2,400ed04 <__umoddi3+0x54c>
 400ecf4:	1cc7883a 	add	r3,r3,r19
 400ecf8:	1cc00236 	bltu	r3,r19,400ed04 <__umoddi3+0x54c>
 400ecfc:	1880012e 	bgeu	r3,r2,400ed04 <__umoddi3+0x54c>
 400ed00:	1cc7883a 	add	r3,r3,r19
 400ed04:	18a3c83a 	sub	r17,r3,r2
 400ed08:	003f2906 	br	400e9b0 <__alt_data_end+0xfc00e9b0>
 400ed0c:	e48fc83a 	sub	r7,fp,r18
 400ed10:	1d49c83a 	sub	r4,r3,r21
 400ed14:	e1f9803a 	cmpltu	fp,fp,r7
 400ed18:	2739c83a 	sub	fp,r4,fp
 400ed1c:	8f09c83a 	sub	r4,r17,fp
 400ed20:	003fc306 	br	400ec30 <__alt_data_end+0xfc00ec30>
 400ed24:	01000604 	movi	r4,24
 400ed28:	003ef906 	br	400e910 <__alt_data_end+0xfc00e910>
 400ed2c:	00800604 	movi	r2,24
 400ed30:	003f1306 	br	400e980 <__alt_data_end+0xfc00e980>
 400ed34:	01000604 	movi	r4,24
 400ed38:	003eb606 	br	400e814 <__alt_data_end+0xfc00e814>
 400ed3c:	40bf902e 	bgeu	r8,r2,400eb80 <__alt_data_end+0xfc00eb80>
 400ed40:	b5bfff84 	addi	r22,r22,-2
 400ed44:	4551883a 	add	r8,r8,r21
 400ed48:	003f8e06 	br	400eb84 <__alt_data_end+0xfc00eb84>
 400ed4c:	18bf762e 	bgeu	r3,r2,400eb28 <__alt_data_end+0xfc00eb28>
 400ed50:	8c7fff84 	addi	r17,r17,-2
 400ed54:	1d47883a 	add	r3,r3,r21
 400ed58:	003f7406 	br	400eb2c <__alt_data_end+0xfc00eb2c>
 400ed5c:	1cc7883a 	add	r3,r3,r19
 400ed60:	003ecd06 	br	400e898 <__alt_data_end+0xfc00e898>
 400ed64:	8005883a 	mov	r2,r16
 400ed68:	003ef806 	br	400e94c <__alt_data_end+0xfc00e94c>
 400ed6c:	873fe736 	bltu	r16,fp,400ed0c <__alt_data_end+0xfc00ed0c>
 400ed70:	e00f883a 	mov	r7,fp
 400ed74:	0009883a 	mov	r4,zero
 400ed78:	003fad06 	br	400ec30 <__alt_data_end+0xfc00ec30>

0400ed7c <__eqdf2>:
 400ed7c:	2804d53a 	srli	r2,r5,20
 400ed80:	3806d53a 	srli	r3,r7,20
 400ed84:	02000434 	movhi	r8,16
 400ed88:	423fffc4 	addi	r8,r8,-1
 400ed8c:	1081ffcc 	andi	r2,r2,2047
 400ed90:	0281ffc4 	movi	r10,2047
 400ed94:	2a12703a 	and	r9,r5,r8
 400ed98:	18c1ffcc 	andi	r3,r3,2047
 400ed9c:	3a10703a 	and	r8,r7,r8
 400eda0:	280ad7fa 	srli	r5,r5,31
 400eda4:	380ed7fa 	srli	r7,r7,31
 400eda8:	12801026 	beq	r2,r10,400edec <__eqdf2+0x70>
 400edac:	0281ffc4 	movi	r10,2047
 400edb0:	1a800a26 	beq	r3,r10,400eddc <__eqdf2+0x60>
 400edb4:	10c00226 	beq	r2,r3,400edc0 <__eqdf2+0x44>
 400edb8:	00800044 	movi	r2,1
 400edbc:	f800283a 	ret
 400edc0:	4a3ffd1e 	bne	r9,r8,400edb8 <__alt_data_end+0xfc00edb8>
 400edc4:	21bffc1e 	bne	r4,r6,400edb8 <__alt_data_end+0xfc00edb8>
 400edc8:	29c00c26 	beq	r5,r7,400edfc <__eqdf2+0x80>
 400edcc:	103ffa1e 	bne	r2,zero,400edb8 <__alt_data_end+0xfc00edb8>
 400edd0:	2244b03a 	or	r2,r4,r9
 400edd4:	1004c03a 	cmpne	r2,r2,zero
 400edd8:	f800283a 	ret
 400eddc:	3214b03a 	or	r10,r6,r8
 400ede0:	503ff426 	beq	r10,zero,400edb4 <__alt_data_end+0xfc00edb4>
 400ede4:	00800044 	movi	r2,1
 400ede8:	f800283a 	ret
 400edec:	2254b03a 	or	r10,r4,r9
 400edf0:	503fee26 	beq	r10,zero,400edac <__alt_data_end+0xfc00edac>
 400edf4:	00800044 	movi	r2,1
 400edf8:	f800283a 	ret
 400edfc:	0005883a 	mov	r2,zero
 400ee00:	f800283a 	ret

0400ee04 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 400ee04:	defff004 	addi	sp,sp,-64
 400ee08:	df000f15 	stw	fp,60(sp)
 400ee0c:	df000f04 	addi	fp,sp,60
 400ee10:	e13ffd15 	stw	r4,-12(fp)
 400ee14:	e17ffe15 	stw	r5,-8(fp)
 400ee18:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 400ee1c:	00bffa84 	movi	r2,-22
 400ee20:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400ee24:	e0bffd17 	ldw	r2,-12(fp)
 400ee28:	10800828 	cmpgeui	r2,r2,32
 400ee2c:	1000501e 	bne	r2,zero,400ef70 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ee30:	0005303a 	rdctl	r2,status
 400ee34:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ee38:	e0fff617 	ldw	r3,-40(fp)
 400ee3c:	00bfff84 	movi	r2,-2
 400ee40:	1884703a 	and	r2,r3,r2
 400ee44:	1001703a 	wrctl	status,r2
  
  return context;
 400ee48:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 400ee4c:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 400ee50:	00810074 	movhi	r2,1025
 400ee54:	10977804 	addi	r2,r2,24032
 400ee58:	e0fffd17 	ldw	r3,-12(fp)
 400ee5c:	180690fa 	slli	r3,r3,3
 400ee60:	10c5883a 	add	r2,r2,r3
 400ee64:	e0ffff17 	ldw	r3,-4(fp)
 400ee68:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 400ee6c:	00810074 	movhi	r2,1025
 400ee70:	10977804 	addi	r2,r2,24032
 400ee74:	e0fffd17 	ldw	r3,-12(fp)
 400ee78:	180690fa 	slli	r3,r3,3
 400ee7c:	10c5883a 	add	r2,r2,r3
 400ee80:	10800104 	addi	r2,r2,4
 400ee84:	e0fffe17 	ldw	r3,-8(fp)
 400ee88:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 400ee8c:	e0bfff17 	ldw	r2,-4(fp)
 400ee90:	10001926 	beq	r2,zero,400eef8 <alt_irq_register+0xf4>
 400ee94:	e0bffd17 	ldw	r2,-12(fp)
 400ee98:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ee9c:	0005303a 	rdctl	r2,status
 400eea0:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400eea4:	e0fff717 	ldw	r3,-36(fp)
 400eea8:	00bfff84 	movi	r2,-2
 400eeac:	1884703a 	and	r2,r3,r2
 400eeb0:	1001703a 	wrctl	status,r2
  
  return context;
 400eeb4:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400eeb8:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 400eebc:	00c00044 	movi	r3,1
 400eec0:	e0bff217 	ldw	r2,-56(fp)
 400eec4:	1884983a 	sll	r2,r3,r2
 400eec8:	1007883a 	mov	r3,r2
 400eecc:	d0a79717 	ldw	r2,-24996(gp)
 400eed0:	1884b03a 	or	r2,r3,r2
 400eed4:	d0a79715 	stw	r2,-24996(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400eed8:	d0a79717 	ldw	r2,-24996(gp)
 400eedc:	100170fa 	wrctl	ienable,r2
 400eee0:	e0bff817 	ldw	r2,-32(fp)
 400eee4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400eee8:	e0bff917 	ldw	r2,-28(fp)
 400eeec:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400eef0:	0005883a 	mov	r2,zero
 400eef4:	00001906 	br	400ef5c <alt_irq_register+0x158>
 400eef8:	e0bffd17 	ldw	r2,-12(fp)
 400eefc:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ef00:	0005303a 	rdctl	r2,status
 400ef04:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ef08:	e0fffa17 	ldw	r3,-24(fp)
 400ef0c:	00bfff84 	movi	r2,-2
 400ef10:	1884703a 	and	r2,r3,r2
 400ef14:	1001703a 	wrctl	status,r2
  
  return context;
 400ef18:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400ef1c:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 400ef20:	00c00044 	movi	r3,1
 400ef24:	e0bff417 	ldw	r2,-48(fp)
 400ef28:	1884983a 	sll	r2,r3,r2
 400ef2c:	0084303a 	nor	r2,zero,r2
 400ef30:	1007883a 	mov	r3,r2
 400ef34:	d0a79717 	ldw	r2,-24996(gp)
 400ef38:	1884703a 	and	r2,r3,r2
 400ef3c:	d0a79715 	stw	r2,-24996(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400ef40:	d0a79717 	ldw	r2,-24996(gp)
 400ef44:	100170fa 	wrctl	ienable,r2
 400ef48:	e0bffb17 	ldw	r2,-20(fp)
 400ef4c:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ef50:	e0bffc17 	ldw	r2,-16(fp)
 400ef54:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400ef58:	0005883a 	mov	r2,zero
 400ef5c:	e0bff115 	stw	r2,-60(fp)
 400ef60:	e0bff317 	ldw	r2,-52(fp)
 400ef64:	e0bff515 	stw	r2,-44(fp)
 400ef68:	e0bff517 	ldw	r2,-44(fp)
 400ef6c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 400ef70:	e0bff117 	ldw	r2,-60(fp)
}
 400ef74:	e037883a 	mov	sp,fp
 400ef78:	df000017 	ldw	fp,0(sp)
 400ef7c:	dec00104 	addi	sp,sp,4
 400ef80:	f800283a 	ret

0400ef84 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400ef84:	defffc04 	addi	sp,sp,-16
 400ef88:	df000315 	stw	fp,12(sp)
 400ef8c:	df000304 	addi	fp,sp,12
 400ef90:	e13ffd15 	stw	r4,-12(fp)
 400ef94:	e17ffe15 	stw	r5,-8(fp)
 400ef98:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400ef9c:	e0fffe17 	ldw	r3,-8(fp)
 400efa0:	e0bffd17 	ldw	r2,-12(fp)
 400efa4:	18800c26 	beq	r3,r2,400efd8 <alt_load_section+0x54>
  {
    while( to != end )
 400efa8:	00000806 	br	400efcc <alt_load_section+0x48>
    {
      *to++ = *from++;
 400efac:	e0bffe17 	ldw	r2,-8(fp)
 400efb0:	10c00104 	addi	r3,r2,4
 400efb4:	e0fffe15 	stw	r3,-8(fp)
 400efb8:	e0fffd17 	ldw	r3,-12(fp)
 400efbc:	19000104 	addi	r4,r3,4
 400efc0:	e13ffd15 	stw	r4,-12(fp)
 400efc4:	18c00017 	ldw	r3,0(r3)
 400efc8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400efcc:	e0fffe17 	ldw	r3,-8(fp)
 400efd0:	e0bfff17 	ldw	r2,-4(fp)
 400efd4:	18bff51e 	bne	r3,r2,400efac <__alt_data_end+0xfc00efac>
    {
      *to++ = *from++;
    }
  }
}
 400efd8:	0001883a 	nop
 400efdc:	e037883a 	mov	sp,fp
 400efe0:	df000017 	ldw	fp,0(sp)
 400efe4:	dec00104 	addi	sp,sp,4
 400efe8:	f800283a 	ret

0400efec <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400efec:	defffe04 	addi	sp,sp,-8
 400eff0:	dfc00115 	stw	ra,4(sp)
 400eff4:	df000015 	stw	fp,0(sp)
 400eff8:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400effc:	01810074 	movhi	r6,1025
 400f000:	318faf04 	addi	r6,r6,16060
 400f004:	01410074 	movhi	r5,1025
 400f008:	29484504 	addi	r5,r5,8468
 400f00c:	01010074 	movhi	r4,1025
 400f010:	210faf04 	addi	r4,r4,16060
 400f014:	400ef840 	call	400ef84 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400f018:	01810034 	movhi	r6,1024
 400f01c:	31808c04 	addi	r6,r6,560
 400f020:	01410034 	movhi	r5,1024
 400f024:	29400804 	addi	r5,r5,32
 400f028:	01010034 	movhi	r4,1024
 400f02c:	21000804 	addi	r4,r4,32
 400f030:	400ef840 	call	400ef84 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400f034:	01810074 	movhi	r6,1025
 400f038:	31884504 	addi	r6,r6,8468
 400f03c:	01410074 	movhi	r5,1025
 400f040:	29477604 	addi	r5,r5,7640
 400f044:	01010074 	movhi	r4,1025
 400f048:	21077604 	addi	r4,r4,7640
 400f04c:	400ef840 	call	400ef84 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400f050:	4010c700 	call	4010c70 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400f054:	4010e5c0 	call	4010e5c <alt_icache_flush_all>
}
 400f058:	0001883a 	nop
 400f05c:	e037883a 	mov	sp,fp
 400f060:	dfc00117 	ldw	ra,4(sp)
 400f064:	df000017 	ldw	fp,0(sp)
 400f068:	dec00204 	addi	sp,sp,8
 400f06c:	f800283a 	ret

0400f070 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400f070:	defffd04 	addi	sp,sp,-12
 400f074:	dfc00215 	stw	ra,8(sp)
 400f078:	df000115 	stw	fp,4(sp)
 400f07c:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400f080:	0009883a 	mov	r4,zero
 400f084:	400f2480 	call	400f248 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400f088:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400f08c:	400f2800 	call	400f280 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400f090:	01810074 	movhi	r6,1025
 400f094:	31882b04 	addi	r6,r6,8364
 400f098:	01410074 	movhi	r5,1025
 400f09c:	29482b04 	addi	r5,r5,8364
 400f0a0:	01010074 	movhi	r4,1025
 400f0a4:	21082b04 	addi	r4,r4,8364
 400f0a8:	40112000 	call	4011200 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400f0ac:	4010d9c0 	call	4010d9c <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400f0b0:	01010074 	movhi	r4,1025
 400f0b4:	21037f04 	addi	r4,r4,3580
 400f0b8:	4011a440 	call	4011a44 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400f0bc:	d0a79817 	ldw	r2,-24992(gp)
 400f0c0:	d0e79917 	ldw	r3,-24988(gp)
 400f0c4:	d1279a17 	ldw	r4,-24984(gp)
 400f0c8:	200d883a 	mov	r6,r4
 400f0cc:	180b883a 	mov	r5,r3
 400f0d0:	1009883a 	mov	r4,r2
 400f0d4:	4001b4c0 	call	4001b4c <main>
 400f0d8:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400f0dc:	01000044 	movi	r4,1
 400f0e0:	4010b980 	call	4010b98 <close>
  exit (result);
 400f0e4:	e13fff17 	ldw	r4,-4(fp)
 400f0e8:	4011a580 	call	4011a58 <exit>

0400f0ec <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400f0ec:	defffe04 	addi	sp,sp,-8
 400f0f0:	df000115 	stw	fp,4(sp)
 400f0f4:	df000104 	addi	fp,sp,4
 400f0f8:	e13fff15 	stw	r4,-4(fp)
}
 400f0fc:	0001883a 	nop
 400f100:	e037883a 	mov	sp,fp
 400f104:	df000017 	ldw	fp,0(sp)
 400f108:	dec00104 	addi	sp,sp,4
 400f10c:	f800283a 	ret

0400f110 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400f110:	defffe04 	addi	sp,sp,-8
 400f114:	df000115 	stw	fp,4(sp)
 400f118:	df000104 	addi	fp,sp,4
 400f11c:	e13fff15 	stw	r4,-4(fp)
}
 400f120:	0001883a 	nop
 400f124:	e037883a 	mov	sp,fp
 400f128:	df000017 	ldw	fp,0(sp)
 400f12c:	dec00104 	addi	sp,sp,4
 400f130:	f800283a 	ret

0400f134 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400f134:	defff904 	addi	sp,sp,-28
 400f138:	df000615 	stw	fp,24(sp)
 400f13c:	df000604 	addi	fp,sp,24
 400f140:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f144:	0005303a 	rdctl	r2,status
 400f148:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f14c:	e0fffe17 	ldw	r3,-8(fp)
 400f150:	00bfff84 	movi	r2,-2
 400f154:	1884703a 	and	r2,r3,r2
 400f158:	1001703a 	wrctl	status,r2
  
  return context;
 400f15c:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400f160:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400f164:	d0a01017 	ldw	r2,-32704(gp)
 400f168:	10c000c4 	addi	r3,r2,3
 400f16c:	00bfff04 	movi	r2,-4
 400f170:	1884703a 	and	r2,r3,r2
 400f174:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400f178:	d0e01017 	ldw	r3,-32704(gp)
 400f17c:	e0bfff17 	ldw	r2,-4(fp)
 400f180:	1887883a 	add	r3,r3,r2
 400f184:	00820034 	movhi	r2,2048
 400f188:	10800004 	addi	r2,r2,0
 400f18c:	10c0062e 	bgeu	r2,r3,400f1a8 <sbrk+0x74>
 400f190:	e0bffb17 	ldw	r2,-20(fp)
 400f194:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f198:	e0bffa17 	ldw	r2,-24(fp)
 400f19c:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400f1a0:	00bfffc4 	movi	r2,-1
 400f1a4:	00000b06 	br	400f1d4 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400f1a8:	d0a01017 	ldw	r2,-32704(gp)
 400f1ac:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400f1b0:	d0e01017 	ldw	r3,-32704(gp)
 400f1b4:	e0bfff17 	ldw	r2,-4(fp)
 400f1b8:	1885883a 	add	r2,r3,r2
 400f1bc:	d0a01015 	stw	r2,-32704(gp)
 400f1c0:	e0bffb17 	ldw	r2,-20(fp)
 400f1c4:	e0bffc15 	stw	r2,-16(fp)
 400f1c8:	e0bffc17 	ldw	r2,-16(fp)
 400f1cc:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400f1d0:	e0bffd17 	ldw	r2,-12(fp)
} 
 400f1d4:	e037883a 	mov	sp,fp
 400f1d8:	df000017 	ldw	fp,0(sp)
 400f1dc:	dec00104 	addi	sp,sp,4
 400f1e0:	f800283a 	ret

0400f1e4 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 400f1e4:	defffd04 	addi	sp,sp,-12
 400f1e8:	dfc00215 	stw	ra,8(sp)
 400f1ec:	df000115 	stw	fp,4(sp)
 400f1f0:	df000104 	addi	fp,sp,4
 400f1f4:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 400f1f8:	e13fff17 	ldw	r4,-4(fp)
 400f1fc:	4010a040 	call	4010a04 <alt_busy_sleep>
}
 400f200:	e037883a 	mov	sp,fp
 400f204:	dfc00117 	ldw	ra,4(sp)
 400f208:	df000017 	ldw	fp,0(sp)
 400f20c:	dec00204 	addi	sp,sp,8
 400f210:	f800283a 	ret

0400f214 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400f214:	defffd04 	addi	sp,sp,-12
 400f218:	dfc00215 	stw	ra,8(sp)
 400f21c:	df000115 	stw	fp,4(sp)
 400f220:	df000104 	addi	fp,sp,4
 400f224:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400f228:	d1601304 	addi	r5,gp,-32692
 400f22c:	e13fff17 	ldw	r4,-4(fp)
 400f230:	4010cf80 	call	4010cf8 <alt_dev_llist_insert>
}
 400f234:	e037883a 	mov	sp,fp
 400f238:	dfc00117 	ldw	ra,4(sp)
 400f23c:	df000017 	ldw	fp,0(sp)
 400f240:	dec00204 	addi	sp,sp,8
 400f244:	f800283a 	ret

0400f248 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400f248:	defffd04 	addi	sp,sp,-12
 400f24c:	dfc00215 	stw	ra,8(sp)
 400f250:	df000115 	stw	fp,4(sp)
 400f254:	df000104 	addi	fp,sp,4
 400f258:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 400f25c:	40117280 	call	4011728 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400f260:	00800044 	movi	r2,1
 400f264:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400f268:	0001883a 	nop
 400f26c:	e037883a 	mov	sp,fp
 400f270:	dfc00117 	ldw	ra,4(sp)
 400f274:	df000017 	ldw	fp,0(sp)
 400f278:	dec00204 	addi	sp,sp,8
 400f27c:	f800283a 	ret

0400f280 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400f280:	defffd04 	addi	sp,sp,-12
 400f284:	dfc00215 	stw	ra,8(sp)
 400f288:	df000115 	stw	fp,4(sp)
 400f28c:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 400f290:	000d883a 	mov	r6,zero
 400f294:	000b883a 	mov	r5,zero
 400f298:	01010074 	movhi	r4,1025
 400f29c:	210aa504 	addi	r4,r4,10900
 400f2a0:	400f6fc0 	call	400f6fc <altera_avalon_jtag_uart_init>
 400f2a4:	01010074 	movhi	r4,1025
 400f2a8:	210a9b04 	addi	r4,r4,10860
 400f2ac:	400f2140 	call	400f214 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( BLE_UART, ble_uart);
 400f2b0:	01800044 	movi	r6,1
 400f2b4:	000b883a 	mov	r5,zero
 400f2b8:	01010074 	movhi	r4,1025
 400f2bc:	210ebd04 	addi	r4,r4,15092
 400f2c0:	40101100 	call	4010110 <altera_avalon_uart_init>
 400f2c4:	01010074 	movhi	r4,1025
 400f2c8:	210eb304 	addi	r4,r4,15052
 400f2cc:	400f2140 	call	400f214 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( LIDAR_UART, lidar_uart);
 400f2d0:	01800084 	movi	r6,2
 400f2d4:	000b883a 	mov	r5,zero
 400f2d8:	01010074 	movhi	r4,1025
 400f2dc:	210eee04 	addi	r4,r4,15288
 400f2e0:	40101100 	call	4010110 <altera_avalon_uart_init>
 400f2e4:	01010074 	movhi	r4,1025
 400f2e8:	210ee404 	addi	r4,r4,15248
 400f2ec:	400f2140 	call	400f214 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_DMA_CONTROLLER, video_dma_controller);
 400f2f0:	00810074 	movhi	r2,1025
 400f2f4:	108f1504 	addi	r2,r2,15444
 400f2f8:	10800a17 	ldw	r2,40(r2)
 400f2fc:	10800017 	ldw	r2,0(r2)
 400f300:	1007883a 	mov	r3,r2
 400f304:	00810074 	movhi	r2,1025
 400f308:	108f1504 	addi	r2,r2,15444
 400f30c:	10c00b15 	stw	r3,44(r2)
 400f310:	00810074 	movhi	r2,1025
 400f314:	108f1504 	addi	r2,r2,15444
 400f318:	10800a17 	ldw	r2,40(r2)
 400f31c:	10800104 	addi	r2,r2,4
 400f320:	10800017 	ldw	r2,0(r2)
 400f324:	1007883a 	mov	r3,r2
 400f328:	00810074 	movhi	r2,1025
 400f32c:	108f1504 	addi	r2,r2,15444
 400f330:	10c00c15 	stw	r3,48(r2)
 400f334:	00810074 	movhi	r2,1025
 400f338:	108f1504 	addi	r2,r2,15444
 400f33c:	10800a17 	ldw	r2,40(r2)
 400f340:	10800204 	addi	r2,r2,8
 400f344:	10800017 	ldw	r2,0(r2)
 400f348:	10ffffcc 	andi	r3,r2,65535
 400f34c:	00810074 	movhi	r2,1025
 400f350:	108f1504 	addi	r2,r2,15444
 400f354:	10c01115 	stw	r3,68(r2)
 400f358:	00810074 	movhi	r2,1025
 400f35c:	108f1504 	addi	r2,r2,15444
 400f360:	10800a17 	ldw	r2,40(r2)
 400f364:	10800204 	addi	r2,r2,8
 400f368:	10800017 	ldw	r2,0(r2)
 400f36c:	1006d43a 	srli	r3,r2,16
 400f370:	00810074 	movhi	r2,1025
 400f374:	108f1504 	addi	r2,r2,15444
 400f378:	10c01215 	stw	r3,72(r2)
 400f37c:	00810074 	movhi	r2,1025
 400f380:	108f1504 	addi	r2,r2,15444
 400f384:	10800a17 	ldw	r2,40(r2)
 400f388:	10800304 	addi	r2,r2,12
 400f38c:	10800017 	ldw	r2,0(r2)
 400f390:	1005d07a 	srai	r2,r2,1
 400f394:	10c0004c 	andi	r3,r2,1
 400f398:	00810074 	movhi	r2,1025
 400f39c:	108f1504 	addi	r2,r2,15444
 400f3a0:	10c00d15 	stw	r3,52(r2)
 400f3a4:	00810074 	movhi	r2,1025
 400f3a8:	108f1504 	addi	r2,r2,15444
 400f3ac:	10800a17 	ldw	r2,40(r2)
 400f3b0:	10800304 	addi	r2,r2,12
 400f3b4:	10800017 	ldw	r2,0(r2)
 400f3b8:	1005d23a 	srai	r2,r2,8
 400f3bc:	108003cc 	andi	r2,r2,15
 400f3c0:	10800044 	addi	r2,r2,1
 400f3c4:	1007883a 	mov	r3,r2
 400f3c8:	00810074 	movhi	r2,1025
 400f3cc:	108f1504 	addi	r2,r2,15444
 400f3d0:	10c00e15 	stw	r3,56(r2)
 400f3d4:	00810074 	movhi	r2,1025
 400f3d8:	108f1504 	addi	r2,r2,15444
 400f3dc:	10800a17 	ldw	r2,40(r2)
 400f3e0:	10800304 	addi	r2,r2,12
 400f3e4:	10800017 	ldw	r2,0(r2)
 400f3e8:	1005d1ba 	srai	r2,r2,6
 400f3ec:	108000cc 	andi	r2,r2,3
 400f3f0:	10800044 	addi	r2,r2,1
 400f3f4:	1007883a 	mov	r3,r2
 400f3f8:	00810074 	movhi	r2,1025
 400f3fc:	108f1504 	addi	r2,r2,15444
 400f400:	10c00f15 	stw	r3,60(r2)
 400f404:	00810074 	movhi	r2,1025
 400f408:	108f1504 	addi	r2,r2,15444
 400f40c:	10800e17 	ldw	r2,56(r2)
 400f410:	1007883a 	mov	r3,r2
 400f414:	00810074 	movhi	r2,1025
 400f418:	108f1504 	addi	r2,r2,15444
 400f41c:	10800f17 	ldw	r2,60(r2)
 400f420:	100b883a 	mov	r5,r2
 400f424:	1809883a 	mov	r4,r3
 400f428:	40024640 	call	4002464 <__mulsi3>
 400f42c:	e0bfff05 	stb	r2,-4(fp)
 400f430:	e0bfff03 	ldbu	r2,-4(fp)
 400f434:	10800268 	cmpgeui	r2,r2,9
 400f438:	1000051e 	bne	r2,zero,400f450 <alt_sys_init+0x1d0>
 400f43c:	00810074 	movhi	r2,1025
 400f440:	108f1504 	addi	r2,r2,15444
 400f444:	00c00044 	movi	r3,1
 400f448:	10c01015 	stw	r3,64(r2)
 400f44c:	00000c06 	br	400f480 <alt_sys_init+0x200>
 400f450:	e0bfff03 	ldbu	r2,-4(fp)
 400f454:	10800468 	cmpgeui	r2,r2,17
 400f458:	1000051e 	bne	r2,zero,400f470 <alt_sys_init+0x1f0>
 400f45c:	00810074 	movhi	r2,1025
 400f460:	108f1504 	addi	r2,r2,15444
 400f464:	00c00084 	movi	r3,2
 400f468:	10c01015 	stw	r3,64(r2)
 400f46c:	00000406 	br	400f480 <alt_sys_init+0x200>
 400f470:	00810074 	movhi	r2,1025
 400f474:	108f1504 	addi	r2,r2,15444
 400f478:	00c00104 	movi	r3,4
 400f47c:	10c01015 	stw	r3,64(r2)
 400f480:	00810074 	movhi	r2,1025
 400f484:	108f1504 	addi	r2,r2,15444
 400f488:	10800a17 	ldw	r2,40(r2)
 400f48c:	10800304 	addi	r2,r2,12
 400f490:	10800017 	ldw	r2,0(r2)
 400f494:	1005d43a 	srai	r2,r2,16
 400f498:	e0bfff45 	stb	r2,-3(fp)
 400f49c:	00810074 	movhi	r2,1025
 400f4a0:	108f1504 	addi	r2,r2,15444
 400f4a4:	10800a17 	ldw	r2,40(r2)
 400f4a8:	10800304 	addi	r2,r2,12
 400f4ac:	10800017 	ldw	r2,0(r2)
 400f4b0:	1004d63a 	srli	r2,r2,24
 400f4b4:	e0bfff85 	stb	r2,-2(fp)
 400f4b8:	00810074 	movhi	r2,1025
 400f4bc:	108f1504 	addi	r2,r2,15444
 400f4c0:	10801017 	ldw	r2,64(r2)
 400f4c4:	10800058 	cmpnei	r2,r2,1
 400f4c8:	1000041e 	bne	r2,zero,400f4dc <alt_sys_init+0x25c>
 400f4cc:	00810074 	movhi	r2,1025
 400f4d0:	108f1504 	addi	r2,r2,15444
 400f4d4:	10001315 	stw	zero,76(r2)
 400f4d8:	00000e06 	br	400f514 <alt_sys_init+0x294>
 400f4dc:	00810074 	movhi	r2,1025
 400f4e0:	108f1504 	addi	r2,r2,15444
 400f4e4:	10801017 	ldw	r2,64(r2)
 400f4e8:	10800098 	cmpnei	r2,r2,2
 400f4ec:	1000051e 	bne	r2,zero,400f504 <alt_sys_init+0x284>
 400f4f0:	00810074 	movhi	r2,1025
 400f4f4:	108f1504 	addi	r2,r2,15444
 400f4f8:	00c00044 	movi	r3,1
 400f4fc:	10c01315 	stw	r3,76(r2)
 400f500:	00000406 	br	400f514 <alt_sys_init+0x294>
 400f504:	00810074 	movhi	r2,1025
 400f508:	108f1504 	addi	r2,r2,15444
 400f50c:	00c00084 	movi	r3,2
 400f510:	10c01315 	stw	r3,76(r2)
 400f514:	e0bfff43 	ldbu	r2,-3(fp)
 400f518:	00c00804 	movi	r3,32
 400f51c:	1885c83a 	sub	r2,r3,r2
 400f520:	00ffffc4 	movi	r3,-1
 400f524:	1886d83a 	srl	r3,r3,r2
 400f528:	00810074 	movhi	r2,1025
 400f52c:	108f1504 	addi	r2,r2,15444
 400f530:	10c01415 	stw	r3,80(r2)
 400f534:	e0ffff43 	ldbu	r3,-3(fp)
 400f538:	00810074 	movhi	r2,1025
 400f53c:	108f1504 	addi	r2,r2,15444
 400f540:	10801317 	ldw	r2,76(r2)
 400f544:	1887883a 	add	r3,r3,r2
 400f548:	00810074 	movhi	r2,1025
 400f54c:	108f1504 	addi	r2,r2,15444
 400f550:	10c01515 	stw	r3,84(r2)
 400f554:	e0bfff83 	ldbu	r2,-2(fp)
 400f558:	00c00804 	movi	r3,32
 400f55c:	1885c83a 	sub	r2,r3,r2
 400f560:	00ffffc4 	movi	r3,-1
 400f564:	1886d83a 	srl	r3,r3,r2
 400f568:	00810074 	movhi	r2,1025
 400f56c:	108f1504 	addi	r2,r2,15444
 400f570:	10c01615 	stw	r3,88(r2)
 400f574:	01010074 	movhi	r4,1025
 400f578:	210f1504 	addi	r4,r4,15444
 400f57c:	400f2140 	call	400f214 <alt_dev_reg>
}
 400f580:	0001883a 	nop
 400f584:	e037883a 	mov	sp,fp
 400f588:	dfc00117 	ldw	ra,4(sp)
 400f58c:	df000017 	ldw	fp,0(sp)
 400f590:	dec00204 	addi	sp,sp,8
 400f594:	f800283a 	ret

0400f598 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400f598:	defffa04 	addi	sp,sp,-24
 400f59c:	dfc00515 	stw	ra,20(sp)
 400f5a0:	df000415 	stw	fp,16(sp)
 400f5a4:	df000404 	addi	fp,sp,16
 400f5a8:	e13ffd15 	stw	r4,-12(fp)
 400f5ac:	e17ffe15 	stw	r5,-8(fp)
 400f5b0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400f5b4:	e0bffd17 	ldw	r2,-12(fp)
 400f5b8:	10800017 	ldw	r2,0(r2)
 400f5bc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400f5c0:	e0bffc17 	ldw	r2,-16(fp)
 400f5c4:	10c00a04 	addi	r3,r2,40
 400f5c8:	e0bffd17 	ldw	r2,-12(fp)
 400f5cc:	10800217 	ldw	r2,8(r2)
 400f5d0:	100f883a 	mov	r7,r2
 400f5d4:	e1bfff17 	ldw	r6,-4(fp)
 400f5d8:	e17ffe17 	ldw	r5,-8(fp)
 400f5dc:	1809883a 	mov	r4,r3
 400f5e0:	400fbc00 	call	400fbc0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400f5e4:	e037883a 	mov	sp,fp
 400f5e8:	dfc00117 	ldw	ra,4(sp)
 400f5ec:	df000017 	ldw	fp,0(sp)
 400f5f0:	dec00204 	addi	sp,sp,8
 400f5f4:	f800283a 	ret

0400f5f8 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400f5f8:	defffa04 	addi	sp,sp,-24
 400f5fc:	dfc00515 	stw	ra,20(sp)
 400f600:	df000415 	stw	fp,16(sp)
 400f604:	df000404 	addi	fp,sp,16
 400f608:	e13ffd15 	stw	r4,-12(fp)
 400f60c:	e17ffe15 	stw	r5,-8(fp)
 400f610:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400f614:	e0bffd17 	ldw	r2,-12(fp)
 400f618:	10800017 	ldw	r2,0(r2)
 400f61c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400f620:	e0bffc17 	ldw	r2,-16(fp)
 400f624:	10c00a04 	addi	r3,r2,40
 400f628:	e0bffd17 	ldw	r2,-12(fp)
 400f62c:	10800217 	ldw	r2,8(r2)
 400f630:	100f883a 	mov	r7,r2
 400f634:	e1bfff17 	ldw	r6,-4(fp)
 400f638:	e17ffe17 	ldw	r5,-8(fp)
 400f63c:	1809883a 	mov	r4,r3
 400f640:	400fddc0 	call	400fddc <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400f644:	e037883a 	mov	sp,fp
 400f648:	dfc00117 	ldw	ra,4(sp)
 400f64c:	df000017 	ldw	fp,0(sp)
 400f650:	dec00204 	addi	sp,sp,8
 400f654:	f800283a 	ret

0400f658 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400f658:	defffc04 	addi	sp,sp,-16
 400f65c:	dfc00315 	stw	ra,12(sp)
 400f660:	df000215 	stw	fp,8(sp)
 400f664:	df000204 	addi	fp,sp,8
 400f668:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400f66c:	e0bfff17 	ldw	r2,-4(fp)
 400f670:	10800017 	ldw	r2,0(r2)
 400f674:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400f678:	e0bffe17 	ldw	r2,-8(fp)
 400f67c:	10c00a04 	addi	r3,r2,40
 400f680:	e0bfff17 	ldw	r2,-4(fp)
 400f684:	10800217 	ldw	r2,8(r2)
 400f688:	100b883a 	mov	r5,r2
 400f68c:	1809883a 	mov	r4,r3
 400f690:	400fa680 	call	400fa68 <altera_avalon_jtag_uart_close>
}
 400f694:	e037883a 	mov	sp,fp
 400f698:	dfc00117 	ldw	ra,4(sp)
 400f69c:	df000017 	ldw	fp,0(sp)
 400f6a0:	dec00204 	addi	sp,sp,8
 400f6a4:	f800283a 	ret

0400f6a8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400f6a8:	defffa04 	addi	sp,sp,-24
 400f6ac:	dfc00515 	stw	ra,20(sp)
 400f6b0:	df000415 	stw	fp,16(sp)
 400f6b4:	df000404 	addi	fp,sp,16
 400f6b8:	e13ffd15 	stw	r4,-12(fp)
 400f6bc:	e17ffe15 	stw	r5,-8(fp)
 400f6c0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400f6c4:	e0bffd17 	ldw	r2,-12(fp)
 400f6c8:	10800017 	ldw	r2,0(r2)
 400f6cc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400f6d0:	e0bffc17 	ldw	r2,-16(fp)
 400f6d4:	10800a04 	addi	r2,r2,40
 400f6d8:	e1bfff17 	ldw	r6,-4(fp)
 400f6dc:	e17ffe17 	ldw	r5,-8(fp)
 400f6e0:	1009883a 	mov	r4,r2
 400f6e4:	400fad00 	call	400fad0 <altera_avalon_jtag_uart_ioctl>
}
 400f6e8:	e037883a 	mov	sp,fp
 400f6ec:	dfc00117 	ldw	ra,4(sp)
 400f6f0:	df000017 	ldw	fp,0(sp)
 400f6f4:	dec00204 	addi	sp,sp,8
 400f6f8:	f800283a 	ret

0400f6fc <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400f6fc:	defffa04 	addi	sp,sp,-24
 400f700:	dfc00515 	stw	ra,20(sp)
 400f704:	df000415 	stw	fp,16(sp)
 400f708:	df000404 	addi	fp,sp,16
 400f70c:	e13ffd15 	stw	r4,-12(fp)
 400f710:	e17ffe15 	stw	r5,-8(fp)
 400f714:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400f718:	e0bffd17 	ldw	r2,-12(fp)
 400f71c:	00c00044 	movi	r3,1
 400f720:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400f724:	e0bffd17 	ldw	r2,-12(fp)
 400f728:	10800017 	ldw	r2,0(r2)
 400f72c:	10800104 	addi	r2,r2,4
 400f730:	1007883a 	mov	r3,r2
 400f734:	e0bffd17 	ldw	r2,-12(fp)
 400f738:	10800817 	ldw	r2,32(r2)
 400f73c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400f740:	e0bffe17 	ldw	r2,-8(fp)
 400f744:	e0ffff17 	ldw	r3,-4(fp)
 400f748:	d8000015 	stw	zero,0(sp)
 400f74c:	e1fffd17 	ldw	r7,-12(fp)
 400f750:	01810074 	movhi	r6,1025
 400f754:	31bdef04 	addi	r6,r6,-2116
 400f758:	180b883a 	mov	r5,r3
 400f75c:	1009883a 	mov	r4,r2
 400f760:	4010e7c0 	call	4010e7c <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400f764:	e0bffd17 	ldw	r2,-12(fp)
 400f768:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400f76c:	e0bffd17 	ldw	r2,-12(fp)
 400f770:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400f774:	d0e79b17 	ldw	r3,-24980(gp)
 400f778:	e1fffd17 	ldw	r7,-12(fp)
 400f77c:	01810074 	movhi	r6,1025
 400f780:	31be7204 	addi	r6,r6,-1592
 400f784:	180b883a 	mov	r5,r3
 400f788:	1009883a 	mov	r4,r2
 400f78c:	40108d80 	call	40108d8 <alt_alarm_start>
 400f790:	1000040e 	bge	r2,zero,400f7a4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400f794:	e0fffd17 	ldw	r3,-12(fp)
 400f798:	00a00034 	movhi	r2,32768
 400f79c:	10bfffc4 	addi	r2,r2,-1
 400f7a0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400f7a4:	0001883a 	nop
 400f7a8:	e037883a 	mov	sp,fp
 400f7ac:	dfc00117 	ldw	ra,4(sp)
 400f7b0:	df000017 	ldw	fp,0(sp)
 400f7b4:	dec00204 	addi	sp,sp,8
 400f7b8:	f800283a 	ret

0400f7bc <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400f7bc:	defff804 	addi	sp,sp,-32
 400f7c0:	df000715 	stw	fp,28(sp)
 400f7c4:	df000704 	addi	fp,sp,28
 400f7c8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400f7cc:	e0bfff17 	ldw	r2,-4(fp)
 400f7d0:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 400f7d4:	e0bffb17 	ldw	r2,-20(fp)
 400f7d8:	10800017 	ldw	r2,0(r2)
 400f7dc:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400f7e0:	e0bffc17 	ldw	r2,-16(fp)
 400f7e4:	10800104 	addi	r2,r2,4
 400f7e8:	10800037 	ldwio	r2,0(r2)
 400f7ec:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400f7f0:	e0bffd17 	ldw	r2,-12(fp)
 400f7f4:	1080c00c 	andi	r2,r2,768
 400f7f8:	10006d26 	beq	r2,zero,400f9b0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400f7fc:	e0bffd17 	ldw	r2,-12(fp)
 400f800:	1080400c 	andi	r2,r2,256
 400f804:	10003526 	beq	r2,zero,400f8dc <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400f808:	00800074 	movhi	r2,1
 400f80c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400f810:	e0bffb17 	ldw	r2,-20(fp)
 400f814:	10800a17 	ldw	r2,40(r2)
 400f818:	10800044 	addi	r2,r2,1
 400f81c:	1081ffcc 	andi	r2,r2,2047
 400f820:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 400f824:	e0bffb17 	ldw	r2,-20(fp)
 400f828:	10c00b17 	ldw	r3,44(r2)
 400f82c:	e0bffe17 	ldw	r2,-8(fp)
 400f830:	18801526 	beq	r3,r2,400f888 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400f834:	e0bffc17 	ldw	r2,-16(fp)
 400f838:	10800037 	ldwio	r2,0(r2)
 400f83c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400f840:	e0bff917 	ldw	r2,-28(fp)
 400f844:	10a0000c 	andi	r2,r2,32768
 400f848:	10001126 	beq	r2,zero,400f890 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400f84c:	e0bffb17 	ldw	r2,-20(fp)
 400f850:	10800a17 	ldw	r2,40(r2)
 400f854:	e0fff917 	ldw	r3,-28(fp)
 400f858:	1809883a 	mov	r4,r3
 400f85c:	e0fffb17 	ldw	r3,-20(fp)
 400f860:	1885883a 	add	r2,r3,r2
 400f864:	10800e04 	addi	r2,r2,56
 400f868:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400f86c:	e0bffb17 	ldw	r2,-20(fp)
 400f870:	10800a17 	ldw	r2,40(r2)
 400f874:	10800044 	addi	r2,r2,1
 400f878:	10c1ffcc 	andi	r3,r2,2047
 400f87c:	e0bffb17 	ldw	r2,-20(fp)
 400f880:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400f884:	003fe206 	br	400f810 <__alt_data_end+0xfc00f810>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 400f888:	0001883a 	nop
 400f88c:	00000106 	br	400f894 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 400f890:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400f894:	e0bff917 	ldw	r2,-28(fp)
 400f898:	10bfffec 	andhi	r2,r2,65535
 400f89c:	10000f26 	beq	r2,zero,400f8dc <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400f8a0:	e0bffb17 	ldw	r2,-20(fp)
 400f8a4:	10c00817 	ldw	r3,32(r2)
 400f8a8:	00bfff84 	movi	r2,-2
 400f8ac:	1886703a 	and	r3,r3,r2
 400f8b0:	e0bffb17 	ldw	r2,-20(fp)
 400f8b4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400f8b8:	e0bffc17 	ldw	r2,-16(fp)
 400f8bc:	10800104 	addi	r2,r2,4
 400f8c0:	1007883a 	mov	r3,r2
 400f8c4:	e0bffb17 	ldw	r2,-20(fp)
 400f8c8:	10800817 	ldw	r2,32(r2)
 400f8cc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400f8d0:	e0bffc17 	ldw	r2,-16(fp)
 400f8d4:	10800104 	addi	r2,r2,4
 400f8d8:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400f8dc:	e0bffd17 	ldw	r2,-12(fp)
 400f8e0:	1080800c 	andi	r2,r2,512
 400f8e4:	103fbe26 	beq	r2,zero,400f7e0 <__alt_data_end+0xfc00f7e0>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400f8e8:	e0bffd17 	ldw	r2,-12(fp)
 400f8ec:	1004d43a 	srli	r2,r2,16
 400f8f0:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400f8f4:	00001406 	br	400f948 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400f8f8:	e0bffc17 	ldw	r2,-16(fp)
 400f8fc:	e0fffb17 	ldw	r3,-20(fp)
 400f900:	18c00d17 	ldw	r3,52(r3)
 400f904:	e13ffb17 	ldw	r4,-20(fp)
 400f908:	20c7883a 	add	r3,r4,r3
 400f90c:	18c20e04 	addi	r3,r3,2104
 400f910:	18c00003 	ldbu	r3,0(r3)
 400f914:	18c03fcc 	andi	r3,r3,255
 400f918:	18c0201c 	xori	r3,r3,128
 400f91c:	18ffe004 	addi	r3,r3,-128
 400f920:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400f924:	e0bffb17 	ldw	r2,-20(fp)
 400f928:	10800d17 	ldw	r2,52(r2)
 400f92c:	10800044 	addi	r2,r2,1
 400f930:	10c1ffcc 	andi	r3,r2,2047
 400f934:	e0bffb17 	ldw	r2,-20(fp)
 400f938:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400f93c:	e0bffa17 	ldw	r2,-24(fp)
 400f940:	10bfffc4 	addi	r2,r2,-1
 400f944:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400f948:	e0bffa17 	ldw	r2,-24(fp)
 400f94c:	10000526 	beq	r2,zero,400f964 <altera_avalon_jtag_uart_irq+0x1a8>
 400f950:	e0bffb17 	ldw	r2,-20(fp)
 400f954:	10c00d17 	ldw	r3,52(r2)
 400f958:	e0bffb17 	ldw	r2,-20(fp)
 400f95c:	10800c17 	ldw	r2,48(r2)
 400f960:	18bfe51e 	bne	r3,r2,400f8f8 <__alt_data_end+0xfc00f8f8>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400f964:	e0bffa17 	ldw	r2,-24(fp)
 400f968:	103f9d26 	beq	r2,zero,400f7e0 <__alt_data_end+0xfc00f7e0>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400f96c:	e0bffb17 	ldw	r2,-20(fp)
 400f970:	10c00817 	ldw	r3,32(r2)
 400f974:	00bfff44 	movi	r2,-3
 400f978:	1886703a 	and	r3,r3,r2
 400f97c:	e0bffb17 	ldw	r2,-20(fp)
 400f980:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400f984:	e0bffb17 	ldw	r2,-20(fp)
 400f988:	10800017 	ldw	r2,0(r2)
 400f98c:	10800104 	addi	r2,r2,4
 400f990:	1007883a 	mov	r3,r2
 400f994:	e0bffb17 	ldw	r2,-20(fp)
 400f998:	10800817 	ldw	r2,32(r2)
 400f99c:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400f9a0:	e0bffc17 	ldw	r2,-16(fp)
 400f9a4:	10800104 	addi	r2,r2,4
 400f9a8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400f9ac:	003f8c06 	br	400f7e0 <__alt_data_end+0xfc00f7e0>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400f9b0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 400f9b4:	0001883a 	nop
 400f9b8:	e037883a 	mov	sp,fp
 400f9bc:	df000017 	ldw	fp,0(sp)
 400f9c0:	dec00104 	addi	sp,sp,4
 400f9c4:	f800283a 	ret

0400f9c8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400f9c8:	defff804 	addi	sp,sp,-32
 400f9cc:	df000715 	stw	fp,28(sp)
 400f9d0:	df000704 	addi	fp,sp,28
 400f9d4:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400f9d8:	e0bffb17 	ldw	r2,-20(fp)
 400f9dc:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400f9e0:	e0bff917 	ldw	r2,-28(fp)
 400f9e4:	10800017 	ldw	r2,0(r2)
 400f9e8:	10800104 	addi	r2,r2,4
 400f9ec:	10800037 	ldwio	r2,0(r2)
 400f9f0:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400f9f4:	e0bffa17 	ldw	r2,-24(fp)
 400f9f8:	1081000c 	andi	r2,r2,1024
 400f9fc:	10000b26 	beq	r2,zero,400fa2c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400fa00:	e0bff917 	ldw	r2,-28(fp)
 400fa04:	10800017 	ldw	r2,0(r2)
 400fa08:	10800104 	addi	r2,r2,4
 400fa0c:	1007883a 	mov	r3,r2
 400fa10:	e0bff917 	ldw	r2,-28(fp)
 400fa14:	10800817 	ldw	r2,32(r2)
 400fa18:	10810014 	ori	r2,r2,1024
 400fa1c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400fa20:	e0bff917 	ldw	r2,-28(fp)
 400fa24:	10000915 	stw	zero,36(r2)
 400fa28:	00000a06 	br	400fa54 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400fa2c:	e0bff917 	ldw	r2,-28(fp)
 400fa30:	10c00917 	ldw	r3,36(r2)
 400fa34:	00a00034 	movhi	r2,32768
 400fa38:	10bfff04 	addi	r2,r2,-4
 400fa3c:	10c00536 	bltu	r2,r3,400fa54 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 400fa40:	e0bff917 	ldw	r2,-28(fp)
 400fa44:	10800917 	ldw	r2,36(r2)
 400fa48:	10c00044 	addi	r3,r2,1
 400fa4c:	e0bff917 	ldw	r2,-28(fp)
 400fa50:	10c00915 	stw	r3,36(r2)
 400fa54:	d0a79b17 	ldw	r2,-24980(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400fa58:	e037883a 	mov	sp,fp
 400fa5c:	df000017 	ldw	fp,0(sp)
 400fa60:	dec00104 	addi	sp,sp,4
 400fa64:	f800283a 	ret

0400fa68 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400fa68:	defffd04 	addi	sp,sp,-12
 400fa6c:	df000215 	stw	fp,8(sp)
 400fa70:	df000204 	addi	fp,sp,8
 400fa74:	e13ffe15 	stw	r4,-8(fp)
 400fa78:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400fa7c:	00000506 	br	400fa94 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400fa80:	e0bfff17 	ldw	r2,-4(fp)
 400fa84:	1090000c 	andi	r2,r2,16384
 400fa88:	10000226 	beq	r2,zero,400fa94 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400fa8c:	00bffd44 	movi	r2,-11
 400fa90:	00000b06 	br	400fac0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400fa94:	e0bffe17 	ldw	r2,-8(fp)
 400fa98:	10c00d17 	ldw	r3,52(r2)
 400fa9c:	e0bffe17 	ldw	r2,-8(fp)
 400faa0:	10800c17 	ldw	r2,48(r2)
 400faa4:	18800526 	beq	r3,r2,400fabc <altera_avalon_jtag_uart_close+0x54>
 400faa8:	e0bffe17 	ldw	r2,-8(fp)
 400faac:	10c00917 	ldw	r3,36(r2)
 400fab0:	e0bffe17 	ldw	r2,-8(fp)
 400fab4:	10800117 	ldw	r2,4(r2)
 400fab8:	18bff136 	bltu	r3,r2,400fa80 <__alt_data_end+0xfc00fa80>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400fabc:	0005883a 	mov	r2,zero
}
 400fac0:	e037883a 	mov	sp,fp
 400fac4:	df000017 	ldw	fp,0(sp)
 400fac8:	dec00104 	addi	sp,sp,4
 400facc:	f800283a 	ret

0400fad0 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400fad0:	defffa04 	addi	sp,sp,-24
 400fad4:	df000515 	stw	fp,20(sp)
 400fad8:	df000504 	addi	fp,sp,20
 400fadc:	e13ffd15 	stw	r4,-12(fp)
 400fae0:	e17ffe15 	stw	r5,-8(fp)
 400fae4:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 400fae8:	00bff9c4 	movi	r2,-25
 400faec:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400faf0:	e0bffe17 	ldw	r2,-8(fp)
 400faf4:	10da8060 	cmpeqi	r3,r2,27137
 400faf8:	1800031e 	bne	r3,zero,400fb08 <altera_avalon_jtag_uart_ioctl+0x38>
 400fafc:	109a80a0 	cmpeqi	r2,r2,27138
 400fb00:	1000181e 	bne	r2,zero,400fb64 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 400fb04:	00002906 	br	400fbac <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400fb08:	e0bffd17 	ldw	r2,-12(fp)
 400fb0c:	10c00117 	ldw	r3,4(r2)
 400fb10:	00a00034 	movhi	r2,32768
 400fb14:	10bfffc4 	addi	r2,r2,-1
 400fb18:	18802126 	beq	r3,r2,400fba0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 400fb1c:	e0bfff17 	ldw	r2,-4(fp)
 400fb20:	10800017 	ldw	r2,0(r2)
 400fb24:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400fb28:	e0bffc17 	ldw	r2,-16(fp)
 400fb2c:	10800090 	cmplti	r2,r2,2
 400fb30:	1000061e 	bne	r2,zero,400fb4c <altera_avalon_jtag_uart_ioctl+0x7c>
 400fb34:	e0fffc17 	ldw	r3,-16(fp)
 400fb38:	00a00034 	movhi	r2,32768
 400fb3c:	10bfffc4 	addi	r2,r2,-1
 400fb40:	18800226 	beq	r3,r2,400fb4c <altera_avalon_jtag_uart_ioctl+0x7c>
 400fb44:	e0bffc17 	ldw	r2,-16(fp)
 400fb48:	00000206 	br	400fb54 <altera_avalon_jtag_uart_ioctl+0x84>
 400fb4c:	00a00034 	movhi	r2,32768
 400fb50:	10bfff84 	addi	r2,r2,-2
 400fb54:	e0fffd17 	ldw	r3,-12(fp)
 400fb58:	18800115 	stw	r2,4(r3)
      rc = 0;
 400fb5c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400fb60:	00000f06 	br	400fba0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400fb64:	e0bffd17 	ldw	r2,-12(fp)
 400fb68:	10c00117 	ldw	r3,4(r2)
 400fb6c:	00a00034 	movhi	r2,32768
 400fb70:	10bfffc4 	addi	r2,r2,-1
 400fb74:	18800c26 	beq	r3,r2,400fba8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400fb78:	e0bffd17 	ldw	r2,-12(fp)
 400fb7c:	10c00917 	ldw	r3,36(r2)
 400fb80:	e0bffd17 	ldw	r2,-12(fp)
 400fb84:	10800117 	ldw	r2,4(r2)
 400fb88:	1885803a 	cmpltu	r2,r3,r2
 400fb8c:	10c03fcc 	andi	r3,r2,255
 400fb90:	e0bfff17 	ldw	r2,-4(fp)
 400fb94:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400fb98:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400fb9c:	00000206 	br	400fba8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 400fba0:	0001883a 	nop
 400fba4:	00000106 	br	400fbac <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 400fba8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 400fbac:	e0bffb17 	ldw	r2,-20(fp)
}
 400fbb0:	e037883a 	mov	sp,fp
 400fbb4:	df000017 	ldw	fp,0(sp)
 400fbb8:	dec00104 	addi	sp,sp,4
 400fbbc:	f800283a 	ret

0400fbc0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400fbc0:	defff304 	addi	sp,sp,-52
 400fbc4:	dfc00c15 	stw	ra,48(sp)
 400fbc8:	df000b15 	stw	fp,44(sp)
 400fbcc:	df000b04 	addi	fp,sp,44
 400fbd0:	e13ffc15 	stw	r4,-16(fp)
 400fbd4:	e17ffd15 	stw	r5,-12(fp)
 400fbd8:	e1bffe15 	stw	r6,-8(fp)
 400fbdc:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 400fbe0:	e0bffd17 	ldw	r2,-12(fp)
 400fbe4:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400fbe8:	00004706 	br	400fd08 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400fbec:	e0bffc17 	ldw	r2,-16(fp)
 400fbf0:	10800a17 	ldw	r2,40(r2)
 400fbf4:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 400fbf8:	e0bffc17 	ldw	r2,-16(fp)
 400fbfc:	10800b17 	ldw	r2,44(r2)
 400fc00:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 400fc04:	e0fff717 	ldw	r3,-36(fp)
 400fc08:	e0bff817 	ldw	r2,-32(fp)
 400fc0c:	18800536 	bltu	r3,r2,400fc24 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400fc10:	e0fff717 	ldw	r3,-36(fp)
 400fc14:	e0bff817 	ldw	r2,-32(fp)
 400fc18:	1885c83a 	sub	r2,r3,r2
 400fc1c:	e0bff615 	stw	r2,-40(fp)
 400fc20:	00000406 	br	400fc34 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400fc24:	00c20004 	movi	r3,2048
 400fc28:	e0bff817 	ldw	r2,-32(fp)
 400fc2c:	1885c83a 	sub	r2,r3,r2
 400fc30:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400fc34:	e0bff617 	ldw	r2,-40(fp)
 400fc38:	10001e26 	beq	r2,zero,400fcb4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 400fc3c:	e0fffe17 	ldw	r3,-8(fp)
 400fc40:	e0bff617 	ldw	r2,-40(fp)
 400fc44:	1880022e 	bgeu	r3,r2,400fc50 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 400fc48:	e0bffe17 	ldw	r2,-8(fp)
 400fc4c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400fc50:	e0bffc17 	ldw	r2,-16(fp)
 400fc54:	10c00e04 	addi	r3,r2,56
 400fc58:	e0bff817 	ldw	r2,-32(fp)
 400fc5c:	1885883a 	add	r2,r3,r2
 400fc60:	e1bff617 	ldw	r6,-40(fp)
 400fc64:	100b883a 	mov	r5,r2
 400fc68:	e13ff517 	ldw	r4,-44(fp)
 400fc6c:	40064240 	call	4006424 <memcpy>
      ptr   += n;
 400fc70:	e0fff517 	ldw	r3,-44(fp)
 400fc74:	e0bff617 	ldw	r2,-40(fp)
 400fc78:	1885883a 	add	r2,r3,r2
 400fc7c:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 400fc80:	e0fffe17 	ldw	r3,-8(fp)
 400fc84:	e0bff617 	ldw	r2,-40(fp)
 400fc88:	1885c83a 	sub	r2,r3,r2
 400fc8c:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400fc90:	e0fff817 	ldw	r3,-32(fp)
 400fc94:	e0bff617 	ldw	r2,-40(fp)
 400fc98:	1885883a 	add	r2,r3,r2
 400fc9c:	10c1ffcc 	andi	r3,r2,2047
 400fca0:	e0bffc17 	ldw	r2,-16(fp)
 400fca4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400fca8:	e0bffe17 	ldw	r2,-8(fp)
 400fcac:	00bfcf16 	blt	zero,r2,400fbec <__alt_data_end+0xfc00fbec>
 400fcb0:	00000106 	br	400fcb8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 400fcb4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400fcb8:	e0fff517 	ldw	r3,-44(fp)
 400fcbc:	e0bffd17 	ldw	r2,-12(fp)
 400fcc0:	1880141e 	bne	r3,r2,400fd14 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400fcc4:	e0bfff17 	ldw	r2,-4(fp)
 400fcc8:	1090000c 	andi	r2,r2,16384
 400fccc:	1000131e 	bne	r2,zero,400fd1c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400fcd0:	0001883a 	nop
 400fcd4:	e0bffc17 	ldw	r2,-16(fp)
 400fcd8:	10c00a17 	ldw	r3,40(r2)
 400fcdc:	e0bff717 	ldw	r2,-36(fp)
 400fce0:	1880051e 	bne	r3,r2,400fcf8 <altera_avalon_jtag_uart_read+0x138>
 400fce4:	e0bffc17 	ldw	r2,-16(fp)
 400fce8:	10c00917 	ldw	r3,36(r2)
 400fcec:	e0bffc17 	ldw	r2,-16(fp)
 400fcf0:	10800117 	ldw	r2,4(r2)
 400fcf4:	18bff736 	bltu	r3,r2,400fcd4 <__alt_data_end+0xfc00fcd4>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400fcf8:	e0bffc17 	ldw	r2,-16(fp)
 400fcfc:	10c00a17 	ldw	r3,40(r2)
 400fd00:	e0bff717 	ldw	r2,-36(fp)
 400fd04:	18800726 	beq	r3,r2,400fd24 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400fd08:	e0bffe17 	ldw	r2,-8(fp)
 400fd0c:	00bfb716 	blt	zero,r2,400fbec <__alt_data_end+0xfc00fbec>
 400fd10:	00000506 	br	400fd28 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 400fd14:	0001883a 	nop
 400fd18:	00000306 	br	400fd28 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 400fd1c:	0001883a 	nop
 400fd20:	00000106 	br	400fd28 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 400fd24:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400fd28:	e0fff517 	ldw	r3,-44(fp)
 400fd2c:	e0bffd17 	ldw	r2,-12(fp)
 400fd30:	18801826 	beq	r3,r2,400fd94 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fd34:	0005303a 	rdctl	r2,status
 400fd38:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fd3c:	e0fffb17 	ldw	r3,-20(fp)
 400fd40:	00bfff84 	movi	r2,-2
 400fd44:	1884703a 	and	r2,r3,r2
 400fd48:	1001703a 	wrctl	status,r2
  
  return context;
 400fd4c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400fd50:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400fd54:	e0bffc17 	ldw	r2,-16(fp)
 400fd58:	10800817 	ldw	r2,32(r2)
 400fd5c:	10c00054 	ori	r3,r2,1
 400fd60:	e0bffc17 	ldw	r2,-16(fp)
 400fd64:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400fd68:	e0bffc17 	ldw	r2,-16(fp)
 400fd6c:	10800017 	ldw	r2,0(r2)
 400fd70:	10800104 	addi	r2,r2,4
 400fd74:	1007883a 	mov	r3,r2
 400fd78:	e0bffc17 	ldw	r2,-16(fp)
 400fd7c:	10800817 	ldw	r2,32(r2)
 400fd80:	18800035 	stwio	r2,0(r3)
 400fd84:	e0bffa17 	ldw	r2,-24(fp)
 400fd88:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fd8c:	e0bff917 	ldw	r2,-28(fp)
 400fd90:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400fd94:	e0fff517 	ldw	r3,-44(fp)
 400fd98:	e0bffd17 	ldw	r2,-12(fp)
 400fd9c:	18800426 	beq	r3,r2,400fdb0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 400fda0:	e0fff517 	ldw	r3,-44(fp)
 400fda4:	e0bffd17 	ldw	r2,-12(fp)
 400fda8:	1885c83a 	sub	r2,r3,r2
 400fdac:	00000606 	br	400fdc8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 400fdb0:	e0bfff17 	ldw	r2,-4(fp)
 400fdb4:	1090000c 	andi	r2,r2,16384
 400fdb8:	10000226 	beq	r2,zero,400fdc4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 400fdbc:	00bffd44 	movi	r2,-11
 400fdc0:	00000106 	br	400fdc8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 400fdc4:	00bffec4 	movi	r2,-5
}
 400fdc8:	e037883a 	mov	sp,fp
 400fdcc:	dfc00117 	ldw	ra,4(sp)
 400fdd0:	df000017 	ldw	fp,0(sp)
 400fdd4:	dec00204 	addi	sp,sp,8
 400fdd8:	f800283a 	ret

0400fddc <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400fddc:	defff304 	addi	sp,sp,-52
 400fde0:	dfc00c15 	stw	ra,48(sp)
 400fde4:	df000b15 	stw	fp,44(sp)
 400fde8:	df000b04 	addi	fp,sp,44
 400fdec:	e13ffc15 	stw	r4,-16(fp)
 400fdf0:	e17ffd15 	stw	r5,-12(fp)
 400fdf4:	e1bffe15 	stw	r6,-8(fp)
 400fdf8:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400fdfc:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400fe00:	e0bffd17 	ldw	r2,-12(fp)
 400fe04:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400fe08:	00003706 	br	400fee8 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400fe0c:	e0bffc17 	ldw	r2,-16(fp)
 400fe10:	10800c17 	ldw	r2,48(r2)
 400fe14:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 400fe18:	e0bffc17 	ldw	r2,-16(fp)
 400fe1c:	10800d17 	ldw	r2,52(r2)
 400fe20:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 400fe24:	e0fff917 	ldw	r3,-28(fp)
 400fe28:	e0bff517 	ldw	r2,-44(fp)
 400fe2c:	1880062e 	bgeu	r3,r2,400fe48 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400fe30:	e0fff517 	ldw	r3,-44(fp)
 400fe34:	e0bff917 	ldw	r2,-28(fp)
 400fe38:	1885c83a 	sub	r2,r3,r2
 400fe3c:	10bfffc4 	addi	r2,r2,-1
 400fe40:	e0bff615 	stw	r2,-40(fp)
 400fe44:	00000b06 	br	400fe74 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 400fe48:	e0bff517 	ldw	r2,-44(fp)
 400fe4c:	10000526 	beq	r2,zero,400fe64 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400fe50:	00c20004 	movi	r3,2048
 400fe54:	e0bff917 	ldw	r2,-28(fp)
 400fe58:	1885c83a 	sub	r2,r3,r2
 400fe5c:	e0bff615 	stw	r2,-40(fp)
 400fe60:	00000406 	br	400fe74 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400fe64:	00c1ffc4 	movi	r3,2047
 400fe68:	e0bff917 	ldw	r2,-28(fp)
 400fe6c:	1885c83a 	sub	r2,r3,r2
 400fe70:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400fe74:	e0bff617 	ldw	r2,-40(fp)
 400fe78:	10001e26 	beq	r2,zero,400fef4 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 400fe7c:	e0fffe17 	ldw	r3,-8(fp)
 400fe80:	e0bff617 	ldw	r2,-40(fp)
 400fe84:	1880022e 	bgeu	r3,r2,400fe90 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 400fe88:	e0bffe17 	ldw	r2,-8(fp)
 400fe8c:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400fe90:	e0bffc17 	ldw	r2,-16(fp)
 400fe94:	10c20e04 	addi	r3,r2,2104
 400fe98:	e0bff917 	ldw	r2,-28(fp)
 400fe9c:	1885883a 	add	r2,r3,r2
 400fea0:	e1bff617 	ldw	r6,-40(fp)
 400fea4:	e17ffd17 	ldw	r5,-12(fp)
 400fea8:	1009883a 	mov	r4,r2
 400feac:	40064240 	call	4006424 <memcpy>
      ptr   += n;
 400feb0:	e0fffd17 	ldw	r3,-12(fp)
 400feb4:	e0bff617 	ldw	r2,-40(fp)
 400feb8:	1885883a 	add	r2,r3,r2
 400febc:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 400fec0:	e0fffe17 	ldw	r3,-8(fp)
 400fec4:	e0bff617 	ldw	r2,-40(fp)
 400fec8:	1885c83a 	sub	r2,r3,r2
 400fecc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400fed0:	e0fff917 	ldw	r3,-28(fp)
 400fed4:	e0bff617 	ldw	r2,-40(fp)
 400fed8:	1885883a 	add	r2,r3,r2
 400fedc:	10c1ffcc 	andi	r3,r2,2047
 400fee0:	e0bffc17 	ldw	r2,-16(fp)
 400fee4:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400fee8:	e0bffe17 	ldw	r2,-8(fp)
 400feec:	00bfc716 	blt	zero,r2,400fe0c <__alt_data_end+0xfc00fe0c>
 400fef0:	00000106 	br	400fef8 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 400fef4:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fef8:	0005303a 	rdctl	r2,status
 400fefc:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ff00:	e0fffb17 	ldw	r3,-20(fp)
 400ff04:	00bfff84 	movi	r2,-2
 400ff08:	1884703a 	and	r2,r3,r2
 400ff0c:	1001703a 	wrctl	status,r2
  
  return context;
 400ff10:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400ff14:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400ff18:	e0bffc17 	ldw	r2,-16(fp)
 400ff1c:	10800817 	ldw	r2,32(r2)
 400ff20:	10c00094 	ori	r3,r2,2
 400ff24:	e0bffc17 	ldw	r2,-16(fp)
 400ff28:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400ff2c:	e0bffc17 	ldw	r2,-16(fp)
 400ff30:	10800017 	ldw	r2,0(r2)
 400ff34:	10800104 	addi	r2,r2,4
 400ff38:	1007883a 	mov	r3,r2
 400ff3c:	e0bffc17 	ldw	r2,-16(fp)
 400ff40:	10800817 	ldw	r2,32(r2)
 400ff44:	18800035 	stwio	r2,0(r3)
 400ff48:	e0bffa17 	ldw	r2,-24(fp)
 400ff4c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ff50:	e0bff817 	ldw	r2,-32(fp)
 400ff54:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400ff58:	e0bffe17 	ldw	r2,-8(fp)
 400ff5c:	0080100e 	bge	zero,r2,400ffa0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 400ff60:	e0bfff17 	ldw	r2,-4(fp)
 400ff64:	1090000c 	andi	r2,r2,16384
 400ff68:	1000101e 	bne	r2,zero,400ffac <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400ff6c:	0001883a 	nop
 400ff70:	e0bffc17 	ldw	r2,-16(fp)
 400ff74:	10c00d17 	ldw	r3,52(r2)
 400ff78:	e0bff517 	ldw	r2,-44(fp)
 400ff7c:	1880051e 	bne	r3,r2,400ff94 <altera_avalon_jtag_uart_write+0x1b8>
 400ff80:	e0bffc17 	ldw	r2,-16(fp)
 400ff84:	10c00917 	ldw	r3,36(r2)
 400ff88:	e0bffc17 	ldw	r2,-16(fp)
 400ff8c:	10800117 	ldw	r2,4(r2)
 400ff90:	18bff736 	bltu	r3,r2,400ff70 <__alt_data_end+0xfc00ff70>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 400ff94:	e0bffc17 	ldw	r2,-16(fp)
 400ff98:	10800917 	ldw	r2,36(r2)
 400ff9c:	1000051e 	bne	r2,zero,400ffb4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 400ffa0:	e0bffe17 	ldw	r2,-8(fp)
 400ffa4:	00bfd016 	blt	zero,r2,400fee8 <__alt_data_end+0xfc00fee8>
 400ffa8:	00000306 	br	400ffb8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 400ffac:	0001883a 	nop
 400ffb0:	00000106 	br	400ffb8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 400ffb4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400ffb8:	e0fffd17 	ldw	r3,-12(fp)
 400ffbc:	e0bff717 	ldw	r2,-36(fp)
 400ffc0:	18800426 	beq	r3,r2,400ffd4 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 400ffc4:	e0fffd17 	ldw	r3,-12(fp)
 400ffc8:	e0bff717 	ldw	r2,-36(fp)
 400ffcc:	1885c83a 	sub	r2,r3,r2
 400ffd0:	00000606 	br	400ffec <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 400ffd4:	e0bfff17 	ldw	r2,-4(fp)
 400ffd8:	1090000c 	andi	r2,r2,16384
 400ffdc:	10000226 	beq	r2,zero,400ffe8 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 400ffe0:	00bffd44 	movi	r2,-11
 400ffe4:	00000106 	br	400ffec <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400ffe8:	00bffec4 	movi	r2,-5
}
 400ffec:	e037883a 	mov	sp,fp
 400fff0:	dfc00117 	ldw	ra,4(sp)
 400fff4:	df000017 	ldw	fp,0(sp)
 400fff8:	dec00204 	addi	sp,sp,8
 400fffc:	f800283a 	ret

04010000 <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 4010000:	defffa04 	addi	sp,sp,-24
 4010004:	dfc00515 	stw	ra,20(sp)
 4010008:	df000415 	stw	fp,16(sp)
 401000c:	df000404 	addi	fp,sp,16
 4010010:	e13ffd15 	stw	r4,-12(fp)
 4010014:	e17ffe15 	stw	r5,-8(fp)
 4010018:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 401001c:	e0bffd17 	ldw	r2,-12(fp)
 4010020:	10800017 	ldw	r2,0(r2)
 4010024:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 4010028:	e0bffc17 	ldw	r2,-16(fp)
 401002c:	10c00a04 	addi	r3,r2,40
 4010030:	e0bffd17 	ldw	r2,-12(fp)
 4010034:	10800217 	ldw	r2,8(r2)
 4010038:	100f883a 	mov	r7,r2
 401003c:	e1bfff17 	ldw	r6,-4(fp)
 4010040:	e17ffe17 	ldw	r5,-8(fp)
 4010044:	1809883a 	mov	r4,r3
 4010048:	40105140 	call	4010514 <altera_avalon_uart_read>
      fd->fd_flags);
}
 401004c:	e037883a 	mov	sp,fp
 4010050:	dfc00117 	ldw	ra,4(sp)
 4010054:	df000017 	ldw	fp,0(sp)
 4010058:	dec00204 	addi	sp,sp,8
 401005c:	f800283a 	ret

04010060 <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4010060:	defffa04 	addi	sp,sp,-24
 4010064:	dfc00515 	stw	ra,20(sp)
 4010068:	df000415 	stw	fp,16(sp)
 401006c:	df000404 	addi	fp,sp,16
 4010070:	e13ffd15 	stw	r4,-12(fp)
 4010074:	e17ffe15 	stw	r5,-8(fp)
 4010078:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 401007c:	e0bffd17 	ldw	r2,-12(fp)
 4010080:	10800017 	ldw	r2,0(r2)
 4010084:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 4010088:	e0bffc17 	ldw	r2,-16(fp)
 401008c:	10c00a04 	addi	r3,r2,40
 4010090:	e0bffd17 	ldw	r2,-12(fp)
 4010094:	10800217 	ldw	r2,8(r2)
 4010098:	100f883a 	mov	r7,r2
 401009c:	e1bfff17 	ldw	r6,-4(fp)
 40100a0:	e17ffe17 	ldw	r5,-8(fp)
 40100a4:	1809883a 	mov	r4,r3
 40100a8:	401072c0 	call	401072c <altera_avalon_uart_write>
      fd->fd_flags);
}
 40100ac:	e037883a 	mov	sp,fp
 40100b0:	dfc00117 	ldw	ra,4(sp)
 40100b4:	df000017 	ldw	fp,0(sp)
 40100b8:	dec00204 	addi	sp,sp,8
 40100bc:	f800283a 	ret

040100c0 <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 40100c0:	defffc04 	addi	sp,sp,-16
 40100c4:	dfc00315 	stw	ra,12(sp)
 40100c8:	df000215 	stw	fp,8(sp)
 40100cc:	df000204 	addi	fp,sp,8
 40100d0:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 40100d4:	e0bfff17 	ldw	r2,-4(fp)
 40100d8:	10800017 	ldw	r2,0(r2)
 40100dc:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 40100e0:	e0bffe17 	ldw	r2,-8(fp)
 40100e4:	10c00a04 	addi	r3,r2,40
 40100e8:	e0bfff17 	ldw	r2,-4(fp)
 40100ec:	10800217 	ldw	r2,8(r2)
 40100f0:	100b883a 	mov	r5,r2
 40100f4:	1809883a 	mov	r4,r3
 40100f8:	40104840 	call	4010484 <altera_avalon_uart_close>
}
 40100fc:	e037883a 	mov	sp,fp
 4010100:	dfc00117 	ldw	ra,4(sp)
 4010104:	df000017 	ldw	fp,0(sp)
 4010108:	dec00204 	addi	sp,sp,8
 401010c:	f800283a 	ret

04010110 <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 4010110:	defff804 	addi	sp,sp,-32
 4010114:	dfc00715 	stw	ra,28(sp)
 4010118:	df000615 	stw	fp,24(sp)
 401011c:	df000604 	addi	fp,sp,24
 4010120:	e13ffd15 	stw	r4,-12(fp)
 4010124:	e17ffe15 	stw	r5,-8(fp)
 4010128:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 401012c:	e0bffd17 	ldw	r2,-12(fp)
 4010130:	10800017 	ldw	r2,0(r2)
 4010134:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 4010138:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 401013c:	1000041e 	bne	r2,zero,4010150 <altera_avalon_uart_init+0x40>
 4010140:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 4010144:	1000021e 	bne	r2,zero,4010150 <altera_avalon_uart_init+0x40>
 4010148:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 401014c:	10000226 	beq	r2,zero,4010158 <altera_avalon_uart_init+0x48>
 4010150:	00800044 	movi	r2,1
 4010154:	00000106 	br	401015c <altera_avalon_uart_init+0x4c>
 4010158:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 401015c:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 4010160:	e0bffc17 	ldw	r2,-16(fp)
 4010164:	10000f1e 	bne	r2,zero,40101a4 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 4010168:	e0bffd17 	ldw	r2,-12(fp)
 401016c:	00c32004 	movi	r3,3200
 4010170:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 4010174:	e0bffb17 	ldw	r2,-20(fp)
 4010178:	10800304 	addi	r2,r2,12
 401017c:	e0fffd17 	ldw	r3,-12(fp)
 4010180:	18c00117 	ldw	r3,4(r3)
 4010184:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 4010188:	d8000015 	stw	zero,0(sp)
 401018c:	e1fffd17 	ldw	r7,-12(fp)
 4010190:	01810074 	movhi	r6,1025
 4010194:	31806f04 	addi	r6,r6,444
 4010198:	e17fff17 	ldw	r5,-4(fp)
 401019c:	e13ffe17 	ldw	r4,-8(fp)
 40101a0:	4010e7c0 	call	4010e7c <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 40101a4:	0001883a 	nop
 40101a8:	e037883a 	mov	sp,fp
 40101ac:	dfc00117 	ldw	ra,4(sp)
 40101b0:	df000017 	ldw	fp,0(sp)
 40101b4:	dec00204 	addi	sp,sp,8
 40101b8:	f800283a 	ret

040101bc <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 40101bc:	defffa04 	addi	sp,sp,-24
 40101c0:	dfc00515 	stw	ra,20(sp)
 40101c4:	df000415 	stw	fp,16(sp)
 40101c8:	df000404 	addi	fp,sp,16
 40101cc:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 40101d0:	e0bfff17 	ldw	r2,-4(fp)
 40101d4:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 40101d8:	e0bffc17 	ldw	r2,-16(fp)
 40101dc:	10800017 	ldw	r2,0(r2)
 40101e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 40101e4:	e0bffd17 	ldw	r2,-12(fp)
 40101e8:	10800204 	addi	r2,r2,8
 40101ec:	10800037 	ldwio	r2,0(r2)
 40101f0:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 40101f4:	e0bffd17 	ldw	r2,-12(fp)
 40101f8:	10800204 	addi	r2,r2,8
 40101fc:	0007883a 	mov	r3,zero
 4010200:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 4010204:	e0bffd17 	ldw	r2,-12(fp)
 4010208:	10800204 	addi	r2,r2,8
 401020c:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 4010210:	e0bffe17 	ldw	r2,-8(fp)
 4010214:	1080200c 	andi	r2,r2,128
 4010218:	10000326 	beq	r2,zero,4010228 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 401021c:	e17ffe17 	ldw	r5,-8(fp)
 4010220:	e13ffc17 	ldw	r4,-16(fp)
 4010224:	40102580 	call	4010258 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 4010228:	e0bffe17 	ldw	r2,-8(fp)
 401022c:	1081100c 	andi	r2,r2,1088
 4010230:	10000326 	beq	r2,zero,4010240 <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 4010234:	e17ffe17 	ldw	r5,-8(fp)
 4010238:	e13ffc17 	ldw	r4,-16(fp)
 401023c:	401033c0 	call	401033c <altera_avalon_uart_txirq>
  }
  

}
 4010240:	0001883a 	nop
 4010244:	e037883a 	mov	sp,fp
 4010248:	dfc00117 	ldw	ra,4(sp)
 401024c:	df000017 	ldw	fp,0(sp)
 4010250:	dec00204 	addi	sp,sp,8
 4010254:	f800283a 	ret

04010258 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 4010258:	defffc04 	addi	sp,sp,-16
 401025c:	df000315 	stw	fp,12(sp)
 4010260:	df000304 	addi	fp,sp,12
 4010264:	e13ffe15 	stw	r4,-8(fp)
 4010268:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 401026c:	e0bfff17 	ldw	r2,-4(fp)
 4010270:	108000cc 	andi	r2,r2,3
 4010274:	10002c1e 	bne	r2,zero,4010328 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 4010278:	e0bffe17 	ldw	r2,-8(fp)
 401027c:	10800317 	ldw	r2,12(r2)
 4010280:	e0bffe17 	ldw	r2,-8(fp)
 4010284:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 4010288:	e0bffe17 	ldw	r2,-8(fp)
 401028c:	10800317 	ldw	r2,12(r2)
 4010290:	10800044 	addi	r2,r2,1
 4010294:	10800fcc 	andi	r2,r2,63
 4010298:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 401029c:	e0bffe17 	ldw	r2,-8(fp)
 40102a0:	10800317 	ldw	r2,12(r2)
 40102a4:	e0fffe17 	ldw	r3,-8(fp)
 40102a8:	18c00017 	ldw	r3,0(r3)
 40102ac:	18c00037 	ldwio	r3,0(r3)
 40102b0:	1809883a 	mov	r4,r3
 40102b4:	e0fffe17 	ldw	r3,-8(fp)
 40102b8:	1885883a 	add	r2,r3,r2
 40102bc:	10800704 	addi	r2,r2,28
 40102c0:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 40102c4:	e0bffe17 	ldw	r2,-8(fp)
 40102c8:	e0fffd17 	ldw	r3,-12(fp)
 40102cc:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 40102d0:	e0bffe17 	ldw	r2,-8(fp)
 40102d4:	10800317 	ldw	r2,12(r2)
 40102d8:	10800044 	addi	r2,r2,1
 40102dc:	10800fcc 	andi	r2,r2,63
 40102e0:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 40102e4:	e0bffe17 	ldw	r2,-8(fp)
 40102e8:	10c00217 	ldw	r3,8(r2)
 40102ec:	e0bffd17 	ldw	r2,-12(fp)
 40102f0:	18800e1e 	bne	r3,r2,401032c <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 40102f4:	e0bffe17 	ldw	r2,-8(fp)
 40102f8:	10c00117 	ldw	r3,4(r2)
 40102fc:	00bfdfc4 	movi	r2,-129
 4010300:	1886703a 	and	r3,r3,r2
 4010304:	e0bffe17 	ldw	r2,-8(fp)
 4010308:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 401030c:	e0bffe17 	ldw	r2,-8(fp)
 4010310:	10800017 	ldw	r2,0(r2)
 4010314:	10800304 	addi	r2,r2,12
 4010318:	e0fffe17 	ldw	r3,-8(fp)
 401031c:	18c00117 	ldw	r3,4(r3)
 4010320:	10c00035 	stwio	r3,0(r2)
 4010324:	00000106 	br	401032c <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 4010328:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 401032c:	e037883a 	mov	sp,fp
 4010330:	df000017 	ldw	fp,0(sp)
 4010334:	dec00104 	addi	sp,sp,4
 4010338:	f800283a 	ret

0401033c <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 401033c:	defffb04 	addi	sp,sp,-20
 4010340:	df000415 	stw	fp,16(sp)
 4010344:	df000404 	addi	fp,sp,16
 4010348:	e13ffc15 	stw	r4,-16(fp)
 401034c:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 4010350:	e0bffc17 	ldw	r2,-16(fp)
 4010354:	10c00417 	ldw	r3,16(r2)
 4010358:	e0bffc17 	ldw	r2,-16(fp)
 401035c:	10800517 	ldw	r2,20(r2)
 4010360:	18803226 	beq	r3,r2,401042c <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 4010364:	e0bffc17 	ldw	r2,-16(fp)
 4010368:	10800617 	ldw	r2,24(r2)
 401036c:	1080008c 	andi	r2,r2,2
 4010370:	10000326 	beq	r2,zero,4010380 <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 4010374:	e0bffd17 	ldw	r2,-12(fp)
 4010378:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 401037c:	10001d26 	beq	r2,zero,40103f4 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 4010380:	e0bffc17 	ldw	r2,-16(fp)
 4010384:	10800417 	ldw	r2,16(r2)
 4010388:	e0bffc17 	ldw	r2,-16(fp)
 401038c:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 4010390:	e0bffc17 	ldw	r2,-16(fp)
 4010394:	10800017 	ldw	r2,0(r2)
 4010398:	10800104 	addi	r2,r2,4
 401039c:	e0fffc17 	ldw	r3,-16(fp)
 40103a0:	18c00417 	ldw	r3,16(r3)
 40103a4:	e13ffc17 	ldw	r4,-16(fp)
 40103a8:	20c7883a 	add	r3,r4,r3
 40103ac:	18c01704 	addi	r3,r3,92
 40103b0:	18c00003 	ldbu	r3,0(r3)
 40103b4:	18c03fcc 	andi	r3,r3,255
 40103b8:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 40103bc:	e0bffc17 	ldw	r2,-16(fp)
 40103c0:	10800417 	ldw	r2,16(r2)
 40103c4:	10800044 	addi	r2,r2,1
 40103c8:	e0fffc17 	ldw	r3,-16(fp)
 40103cc:	18800415 	stw	r2,16(r3)
 40103d0:	10c00fcc 	andi	r3,r2,63
 40103d4:	e0bffc17 	ldw	r2,-16(fp)
 40103d8:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 40103dc:	e0bffc17 	ldw	r2,-16(fp)
 40103e0:	10800117 	ldw	r2,4(r2)
 40103e4:	10c01014 	ori	r3,r2,64
 40103e8:	e0bffc17 	ldw	r2,-16(fp)
 40103ec:	10c00115 	stw	r3,4(r2)
 40103f0:	00000e06 	br	401042c <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 40103f4:	e0bffc17 	ldw	r2,-16(fp)
 40103f8:	10800017 	ldw	r2,0(r2)
 40103fc:	10800204 	addi	r2,r2,8
 4010400:	10800037 	ldwio	r2,0(r2)
 4010404:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 4010408:	e0bffd17 	ldw	r2,-12(fp)
 401040c:	1082000c 	andi	r2,r2,2048
 4010410:	1000061e 	bne	r2,zero,401042c <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 4010414:	e0bffc17 	ldw	r2,-16(fp)
 4010418:	10c00117 	ldw	r3,4(r2)
 401041c:	00bfefc4 	movi	r2,-65
 4010420:	1886703a 	and	r3,r3,r2
 4010424:	e0bffc17 	ldw	r2,-16(fp)
 4010428:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 401042c:	e0bffc17 	ldw	r2,-16(fp)
 4010430:	10c00417 	ldw	r3,16(r2)
 4010434:	e0bffc17 	ldw	r2,-16(fp)
 4010438:	10800517 	ldw	r2,20(r2)
 401043c:	1880061e 	bne	r3,r2,4010458 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 4010440:	e0bffc17 	ldw	r2,-16(fp)
 4010444:	10c00117 	ldw	r3,4(r2)
 4010448:	00beefc4 	movi	r2,-1089
 401044c:	1886703a 	and	r3,r3,r2
 4010450:	e0bffc17 	ldw	r2,-16(fp)
 4010454:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4010458:	e0bffc17 	ldw	r2,-16(fp)
 401045c:	10800017 	ldw	r2,0(r2)
 4010460:	10800304 	addi	r2,r2,12
 4010464:	e0fffc17 	ldw	r3,-16(fp)
 4010468:	18c00117 	ldw	r3,4(r3)
 401046c:	10c00035 	stwio	r3,0(r2)
}
 4010470:	0001883a 	nop
 4010474:	e037883a 	mov	sp,fp
 4010478:	df000017 	ldw	fp,0(sp)
 401047c:	dec00104 	addi	sp,sp,4
 4010480:	f800283a 	ret

04010484 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 4010484:	defffd04 	addi	sp,sp,-12
 4010488:	df000215 	stw	fp,8(sp)
 401048c:	df000204 	addi	fp,sp,8
 4010490:	e13ffe15 	stw	r4,-8(fp)
 4010494:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 4010498:	00000506 	br	40104b0 <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 401049c:	e0bfff17 	ldw	r2,-4(fp)
 40104a0:	1090000c 	andi	r2,r2,16384
 40104a4:	10000226 	beq	r2,zero,40104b0 <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40104a8:	00bffd44 	movi	r2,-11
 40104ac:	00000606 	br	40104c8 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 40104b0:	e0bffe17 	ldw	r2,-8(fp)
 40104b4:	10c00417 	ldw	r3,16(r2)
 40104b8:	e0bffe17 	ldw	r2,-8(fp)
 40104bc:	10800517 	ldw	r2,20(r2)
 40104c0:	18bff61e 	bne	r3,r2,401049c <__alt_data_end+0xfc01049c>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 40104c4:	0005883a 	mov	r2,zero
}
 40104c8:	e037883a 	mov	sp,fp
 40104cc:	df000017 	ldw	fp,0(sp)
 40104d0:	dec00104 	addi	sp,sp,4
 40104d4:	f800283a 	ret

040104d8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40104d8:	defffe04 	addi	sp,sp,-8
 40104dc:	dfc00115 	stw	ra,4(sp)
 40104e0:	df000015 	stw	fp,0(sp)
 40104e4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40104e8:	d0a01617 	ldw	r2,-32680(gp)
 40104ec:	10000326 	beq	r2,zero,40104fc <alt_get_errno+0x24>
 40104f0:	d0a01617 	ldw	r2,-32680(gp)
 40104f4:	103ee83a 	callr	r2
 40104f8:	00000106 	br	4010500 <alt_get_errno+0x28>
 40104fc:	d0a79604 	addi	r2,gp,-25000
}
 4010500:	e037883a 	mov	sp,fp
 4010504:	dfc00117 	ldw	ra,4(sp)
 4010508:	df000017 	ldw	fp,0(sp)
 401050c:	dec00204 	addi	sp,sp,8
 4010510:	f800283a 	ret

04010514 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 4010514:	defff204 	addi	sp,sp,-56
 4010518:	dfc00d15 	stw	ra,52(sp)
 401051c:	df000c15 	stw	fp,48(sp)
 4010520:	df000c04 	addi	fp,sp,48
 4010524:	e13ffc15 	stw	r4,-16(fp)
 4010528:	e17ffd15 	stw	r5,-12(fp)
 401052c:	e1bffe15 	stw	r6,-8(fp)
 4010530:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 4010534:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 4010538:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 401053c:	e0bfff17 	ldw	r2,-4(fp)
 4010540:	1090000c 	andi	r2,r2,16384
 4010544:	1005003a 	cmpeq	r2,r2,zero
 4010548:	10803fcc 	andi	r2,r2,255
 401054c:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 4010550:	00001306 	br	40105a0 <altera_avalon_uart_read+0x8c>
    {
      count++;
 4010554:	e0bff517 	ldw	r2,-44(fp)
 4010558:	10800044 	addi	r2,r2,1
 401055c:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 4010560:	e0bffd17 	ldw	r2,-12(fp)
 4010564:	10c00044 	addi	r3,r2,1
 4010568:	e0fffd15 	stw	r3,-12(fp)
 401056c:	e0fffc17 	ldw	r3,-16(fp)
 4010570:	18c00217 	ldw	r3,8(r3)
 4010574:	e13ffc17 	ldw	r4,-16(fp)
 4010578:	20c7883a 	add	r3,r4,r3
 401057c:	18c00704 	addi	r3,r3,28
 4010580:	18c00003 	ldbu	r3,0(r3)
 4010584:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 4010588:	e0bffc17 	ldw	r2,-16(fp)
 401058c:	10800217 	ldw	r2,8(r2)
 4010590:	10800044 	addi	r2,r2,1
 4010594:	10c00fcc 	andi	r3,r2,63
 4010598:	e0bffc17 	ldw	r2,-16(fp)
 401059c:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 40105a0:	e0fff517 	ldw	r3,-44(fp)
 40105a4:	e0bffe17 	ldw	r2,-8(fp)
 40105a8:	1880050e 	bge	r3,r2,40105c0 <altera_avalon_uart_read+0xac>
 40105ac:	e0bffc17 	ldw	r2,-16(fp)
 40105b0:	10c00217 	ldw	r3,8(r2)
 40105b4:	e0bffc17 	ldw	r2,-16(fp)
 40105b8:	10800317 	ldw	r2,12(r2)
 40105bc:	18bfe51e 	bne	r3,r2,4010554 <__alt_data_end+0xfc010554>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 40105c0:	e0bff517 	ldw	r2,-44(fp)
 40105c4:	1000251e 	bne	r2,zero,401065c <altera_avalon_uart_read+0x148>
 40105c8:	e0bffc17 	ldw	r2,-16(fp)
 40105cc:	10c00217 	ldw	r3,8(r2)
 40105d0:	e0bffc17 	ldw	r2,-16(fp)
 40105d4:	10800317 	ldw	r2,12(r2)
 40105d8:	1880201e 	bne	r3,r2,401065c <altera_avalon_uart_read+0x148>
    {
      if (!block)
 40105dc:	e0bff617 	ldw	r2,-40(fp)
 40105e0:	1000071e 	bne	r2,zero,4010600 <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 40105e4:	40104d80 	call	40104d8 <alt_get_errno>
 40105e8:	1007883a 	mov	r3,r2
 40105ec:	008002c4 	movi	r2,11
 40105f0:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 40105f4:	00800044 	movi	r2,1
 40105f8:	e0bff405 	stb	r2,-48(fp)
        break;
 40105fc:	00001b06 	br	401066c <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010600:	0005303a 	rdctl	r2,status
 4010604:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010608:	e0fff917 	ldw	r3,-28(fp)
 401060c:	00bfff84 	movi	r2,-2
 4010610:	1884703a 	and	r2,r3,r2
 4010614:	1001703a 	wrctl	status,r2
  
  return context;
 4010618:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 401061c:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4010620:	e0bffc17 	ldw	r2,-16(fp)
 4010624:	10800117 	ldw	r2,4(r2)
 4010628:	10c02014 	ori	r3,r2,128
 401062c:	e0bffc17 	ldw	r2,-16(fp)
 4010630:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4010634:	e0bffc17 	ldw	r2,-16(fp)
 4010638:	10800017 	ldw	r2,0(r2)
 401063c:	10800304 	addi	r2,r2,12
 4010640:	e0fffc17 	ldw	r3,-16(fp)
 4010644:	18c00117 	ldw	r3,4(r3)
 4010648:	10c00035 	stwio	r3,0(r2)
 401064c:	e0bff817 	ldw	r2,-32(fp)
 4010650:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010654:	e0bffa17 	ldw	r2,-24(fp)
 4010658:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 401065c:	e0bff517 	ldw	r2,-44(fp)
 4010660:	1000021e 	bne	r2,zero,401066c <altera_avalon_uart_read+0x158>
 4010664:	e0bffe17 	ldw	r2,-8(fp)
 4010668:	103fcd1e 	bne	r2,zero,40105a0 <__alt_data_end+0xfc0105a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401066c:	0005303a 	rdctl	r2,status
 4010670:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010674:	e0fffb17 	ldw	r3,-20(fp)
 4010678:	00bfff84 	movi	r2,-2
 401067c:	1884703a 	and	r2,r3,r2
 4010680:	1001703a 	wrctl	status,r2
  
  return context;
 4010684:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 4010688:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 401068c:	e0bffc17 	ldw	r2,-16(fp)
 4010690:	10800117 	ldw	r2,4(r2)
 4010694:	10c02014 	ori	r3,r2,128
 4010698:	e0bffc17 	ldw	r2,-16(fp)
 401069c:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40106a0:	e0bffc17 	ldw	r2,-16(fp)
 40106a4:	10800017 	ldw	r2,0(r2)
 40106a8:	10800304 	addi	r2,r2,12
 40106ac:	e0fffc17 	ldw	r3,-16(fp)
 40106b0:	18c00117 	ldw	r3,4(r3)
 40106b4:	10c00035 	stwio	r3,0(r2)
 40106b8:	e0bff817 	ldw	r2,-32(fp)
 40106bc:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40106c0:	e0bff717 	ldw	r2,-36(fp)
 40106c4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 40106c8:	e0bff403 	ldbu	r2,-48(fp)
 40106cc:	10000226 	beq	r2,zero,40106d8 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 40106d0:	00bffd44 	movi	r2,-11
 40106d4:	00000106 	br	40106dc <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 40106d8:	e0bff517 	ldw	r2,-44(fp)
  }
}
 40106dc:	e037883a 	mov	sp,fp
 40106e0:	dfc00117 	ldw	ra,4(sp)
 40106e4:	df000017 	ldw	fp,0(sp)
 40106e8:	dec00204 	addi	sp,sp,8
 40106ec:	f800283a 	ret

040106f0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40106f0:	defffe04 	addi	sp,sp,-8
 40106f4:	dfc00115 	stw	ra,4(sp)
 40106f8:	df000015 	stw	fp,0(sp)
 40106fc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010700:	d0a01617 	ldw	r2,-32680(gp)
 4010704:	10000326 	beq	r2,zero,4010714 <alt_get_errno+0x24>
 4010708:	d0a01617 	ldw	r2,-32680(gp)
 401070c:	103ee83a 	callr	r2
 4010710:	00000106 	br	4010718 <alt_get_errno+0x28>
 4010714:	d0a79604 	addi	r2,gp,-25000
}
 4010718:	e037883a 	mov	sp,fp
 401071c:	dfc00117 	ldw	ra,4(sp)
 4010720:	df000017 	ldw	fp,0(sp)
 4010724:	dec00204 	addi	sp,sp,8
 4010728:	f800283a 	ret

0401072c <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 401072c:	defff204 	addi	sp,sp,-56
 4010730:	dfc00d15 	stw	ra,52(sp)
 4010734:	df000c15 	stw	fp,48(sp)
 4010738:	df000c04 	addi	fp,sp,48
 401073c:	e13ffc15 	stw	r4,-16(fp)
 4010740:	e17ffd15 	stw	r5,-12(fp)
 4010744:	e1bffe15 	stw	r6,-8(fp)
 4010748:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 401074c:	e0bffe17 	ldw	r2,-8(fp)
 4010750:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 4010754:	e0bfff17 	ldw	r2,-4(fp)
 4010758:	1090000c 	andi	r2,r2,16384
 401075c:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 4010760:	00003c06 	br	4010854 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 4010764:	e0bffc17 	ldw	r2,-16(fp)
 4010768:	10800517 	ldw	r2,20(r2)
 401076c:	10800044 	addi	r2,r2,1
 4010770:	10800fcc 	andi	r2,r2,63
 4010774:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 4010778:	e0bffc17 	ldw	r2,-16(fp)
 401077c:	10c00417 	ldw	r3,16(r2)
 4010780:	e0bff717 	ldw	r2,-36(fp)
 4010784:	1880221e 	bne	r3,r2,4010810 <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 4010788:	e0bff517 	ldw	r2,-44(fp)
 401078c:	10000526 	beq	r2,zero,40107a4 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 4010790:	40106f00 	call	40106f0 <alt_get_errno>
 4010794:	1007883a 	mov	r3,r2
 4010798:	008002c4 	movi	r2,11
 401079c:	18800015 	stw	r2,0(r3)
        break;
 40107a0:	00002e06 	br	401085c <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40107a4:	0005303a 	rdctl	r2,status
 40107a8:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40107ac:	e0fff917 	ldw	r3,-28(fp)
 40107b0:	00bfff84 	movi	r2,-2
 40107b4:	1884703a 	and	r2,r3,r2
 40107b8:	1001703a 	wrctl	status,r2
  
  return context;
 40107bc:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 40107c0:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 40107c4:	e0bffc17 	ldw	r2,-16(fp)
 40107c8:	10800117 	ldw	r2,4(r2)
 40107cc:	10c11014 	ori	r3,r2,1088
 40107d0:	e0bffc17 	ldw	r2,-16(fp)
 40107d4:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40107d8:	e0bffc17 	ldw	r2,-16(fp)
 40107dc:	10800017 	ldw	r2,0(r2)
 40107e0:	10800304 	addi	r2,r2,12
 40107e4:	e0fffc17 	ldw	r3,-16(fp)
 40107e8:	18c00117 	ldw	r3,4(r3)
 40107ec:	10c00035 	stwio	r3,0(r2)
 40107f0:	e0bff817 	ldw	r2,-32(fp)
 40107f4:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40107f8:	e0bff617 	ldw	r2,-40(fp)
 40107fc:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 4010800:	e0bffc17 	ldw	r2,-16(fp)
 4010804:	10c00417 	ldw	r3,16(r2)
 4010808:	e0bff717 	ldw	r2,-36(fp)
 401080c:	18bffc26 	beq	r3,r2,4010800 <__alt_data_end+0xfc010800>
      }
    }

    count--;
 4010810:	e0bff417 	ldw	r2,-48(fp)
 4010814:	10bfffc4 	addi	r2,r2,-1
 4010818:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 401081c:	e0bffc17 	ldw	r2,-16(fp)
 4010820:	10c00517 	ldw	r3,20(r2)
 4010824:	e0bffd17 	ldw	r2,-12(fp)
 4010828:	11000044 	addi	r4,r2,1
 401082c:	e13ffd15 	stw	r4,-12(fp)
 4010830:	10800003 	ldbu	r2,0(r2)
 4010834:	1009883a 	mov	r4,r2
 4010838:	e0bffc17 	ldw	r2,-16(fp)
 401083c:	10c5883a 	add	r2,r2,r3
 4010840:	10801704 	addi	r2,r2,92
 4010844:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 4010848:	e0bffc17 	ldw	r2,-16(fp)
 401084c:	e0fff717 	ldw	r3,-36(fp)
 4010850:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 4010854:	e0bff417 	ldw	r2,-48(fp)
 4010858:	103fc21e 	bne	r2,zero,4010764 <__alt_data_end+0xfc010764>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 401085c:	0005303a 	rdctl	r2,status
 4010860:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010864:	e0fffb17 	ldw	r3,-20(fp)
 4010868:	00bfff84 	movi	r2,-2
 401086c:	1884703a 	and	r2,r3,r2
 4010870:	1001703a 	wrctl	status,r2
  
  return context;
 4010874:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 4010878:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 401087c:	e0bffc17 	ldw	r2,-16(fp)
 4010880:	10800117 	ldw	r2,4(r2)
 4010884:	10c11014 	ori	r3,r2,1088
 4010888:	e0bffc17 	ldw	r2,-16(fp)
 401088c:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4010890:	e0bffc17 	ldw	r2,-16(fp)
 4010894:	10800017 	ldw	r2,0(r2)
 4010898:	10800304 	addi	r2,r2,12
 401089c:	e0fffc17 	ldw	r3,-16(fp)
 40108a0:	18c00117 	ldw	r3,4(r3)
 40108a4:	10c00035 	stwio	r3,0(r2)
 40108a8:	e0bff817 	ldw	r2,-32(fp)
 40108ac:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40108b0:	e0bffa17 	ldw	r2,-24(fp)
 40108b4:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 40108b8:	e0fffe17 	ldw	r3,-8(fp)
 40108bc:	e0bff417 	ldw	r2,-48(fp)
 40108c0:	1885c83a 	sub	r2,r3,r2
}
 40108c4:	e037883a 	mov	sp,fp
 40108c8:	dfc00117 	ldw	ra,4(sp)
 40108cc:	df000017 	ldw	fp,0(sp)
 40108d0:	dec00204 	addi	sp,sp,8
 40108d4:	f800283a 	ret

040108d8 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 40108d8:	defff504 	addi	sp,sp,-44
 40108dc:	df000a15 	stw	fp,40(sp)
 40108e0:	df000a04 	addi	fp,sp,40
 40108e4:	e13ffc15 	stw	r4,-16(fp)
 40108e8:	e17ffd15 	stw	r5,-12(fp)
 40108ec:	e1bffe15 	stw	r6,-8(fp)
 40108f0:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 40108f4:	e03ff615 	stw	zero,-40(fp)
 40108f8:	d0a79b17 	ldw	r2,-24980(gp)
  
  if (alt_ticks_per_second ())
 40108fc:	10003c26 	beq	r2,zero,40109f0 <alt_alarm_start+0x118>
  {
    if (alarm)
 4010900:	e0bffc17 	ldw	r2,-16(fp)
 4010904:	10003826 	beq	r2,zero,40109e8 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4010908:	e0bffc17 	ldw	r2,-16(fp)
 401090c:	e0fffe17 	ldw	r3,-8(fp)
 4010910:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4010914:	e0bffc17 	ldw	r2,-16(fp)
 4010918:	e0ffff17 	ldw	r3,-4(fp)
 401091c:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010920:	0005303a 	rdctl	r2,status
 4010924:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010928:	e0fff917 	ldw	r3,-28(fp)
 401092c:	00bfff84 	movi	r2,-2
 4010930:	1884703a 	and	r2,r3,r2
 4010934:	1001703a 	wrctl	status,r2
  
  return context;
 4010938:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 401093c:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4010940:	d0a79c17 	ldw	r2,-24976(gp)
      
      current_nticks = alt_nticks();
 4010944:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4010948:	e0fffd17 	ldw	r3,-12(fp)
 401094c:	e0bff617 	ldw	r2,-40(fp)
 4010950:	1885883a 	add	r2,r3,r2
 4010954:	10c00044 	addi	r3,r2,1
 4010958:	e0bffc17 	ldw	r2,-16(fp)
 401095c:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4010960:	e0bffc17 	ldw	r2,-16(fp)
 4010964:	10c00217 	ldw	r3,8(r2)
 4010968:	e0bff617 	ldw	r2,-40(fp)
 401096c:	1880042e 	bgeu	r3,r2,4010980 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4010970:	e0bffc17 	ldw	r2,-16(fp)
 4010974:	00c00044 	movi	r3,1
 4010978:	10c00405 	stb	r3,16(r2)
 401097c:	00000206 	br	4010988 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4010980:	e0bffc17 	ldw	r2,-16(fp)
 4010984:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4010988:	e0bffc17 	ldw	r2,-16(fp)
 401098c:	d0e01704 	addi	r3,gp,-32676
 4010990:	e0fffa15 	stw	r3,-24(fp)
 4010994:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4010998:	e0bffb17 	ldw	r2,-20(fp)
 401099c:	e0fffa17 	ldw	r3,-24(fp)
 40109a0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 40109a4:	e0bffa17 	ldw	r2,-24(fp)
 40109a8:	10c00017 	ldw	r3,0(r2)
 40109ac:	e0bffb17 	ldw	r2,-20(fp)
 40109b0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 40109b4:	e0bffa17 	ldw	r2,-24(fp)
 40109b8:	10800017 	ldw	r2,0(r2)
 40109bc:	e0fffb17 	ldw	r3,-20(fp)
 40109c0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 40109c4:	e0bffa17 	ldw	r2,-24(fp)
 40109c8:	e0fffb17 	ldw	r3,-20(fp)
 40109cc:	10c00015 	stw	r3,0(r2)
 40109d0:	e0bff817 	ldw	r2,-32(fp)
 40109d4:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40109d8:	e0bff717 	ldw	r2,-36(fp)
 40109dc:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 40109e0:	0005883a 	mov	r2,zero
 40109e4:	00000306 	br	40109f4 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 40109e8:	00bffa84 	movi	r2,-22
 40109ec:	00000106 	br	40109f4 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 40109f0:	00bfde84 	movi	r2,-134
  }
}
 40109f4:	e037883a 	mov	sp,fp
 40109f8:	df000017 	ldw	fp,0(sp)
 40109fc:	dec00104 	addi	sp,sp,4
 4010a00:	f800283a 	ret

04010a04 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4010a04:	defffa04 	addi	sp,sp,-24
 4010a08:	dfc00515 	stw	ra,20(sp)
 4010a0c:	df000415 	stw	fp,16(sp)
 4010a10:	df000404 	addi	fp,sp,16
 4010a14:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4010a18:	00800244 	movi	r2,9
 4010a1c:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4010a20:	014003f4 	movhi	r5,15
 4010a24:	29509004 	addi	r5,r5,16960
 4010a28:	e13ffd17 	ldw	r4,-12(fp)
 4010a2c:	40024640 	call	4002464 <__mulsi3>
 4010a30:	100b883a 	mov	r5,r2
 4010a34:	01017db4 	movhi	r4,1526
 4010a38:	21384004 	addi	r4,r4,-7936
 4010a3c:	40023a80 	call	40023a8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4010a40:	100b883a 	mov	r5,r2
 4010a44:	01200034 	movhi	r4,32768
 4010a48:	213fffc4 	addi	r4,r4,-1
 4010a4c:	40023a80 	call	40023a8 <__udivsi3>
 4010a50:	100b883a 	mov	r5,r2
 4010a54:	e13fff17 	ldw	r4,-4(fp)
 4010a58:	40023a80 	call	40023a8 <__udivsi3>
 4010a5c:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4010a60:	e0bffe17 	ldw	r2,-8(fp)
 4010a64:	10002a26 	beq	r2,zero,4010b10 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4010a68:	e03ffc15 	stw	zero,-16(fp)
 4010a6c:	00001706 	br	4010acc <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4010a70:	00a00034 	movhi	r2,32768
 4010a74:	10bfffc4 	addi	r2,r2,-1
 4010a78:	10bfffc4 	addi	r2,r2,-1
 4010a7c:	103ffe1e 	bne	r2,zero,4010a78 <__alt_data_end+0xfc010a78>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4010a80:	014003f4 	movhi	r5,15
 4010a84:	29509004 	addi	r5,r5,16960
 4010a88:	e13ffd17 	ldw	r4,-12(fp)
 4010a8c:	40024640 	call	4002464 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4010a90:	100b883a 	mov	r5,r2
 4010a94:	01017db4 	movhi	r4,1526
 4010a98:	21384004 	addi	r4,r4,-7936
 4010a9c:	40023a80 	call	40023a8 <__udivsi3>
 4010aa0:	100b883a 	mov	r5,r2
 4010aa4:	01200034 	movhi	r4,32768
 4010aa8:	213fffc4 	addi	r4,r4,-1
 4010aac:	40023a80 	call	40023a8 <__udivsi3>
 4010ab0:	1007883a 	mov	r3,r2
 4010ab4:	e0bfff17 	ldw	r2,-4(fp)
 4010ab8:	10c5c83a 	sub	r2,r2,r3
 4010abc:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4010ac0:	e0bffc17 	ldw	r2,-16(fp)
 4010ac4:	10800044 	addi	r2,r2,1
 4010ac8:	e0bffc15 	stw	r2,-16(fp)
 4010acc:	e0fffc17 	ldw	r3,-16(fp)
 4010ad0:	e0bffe17 	ldw	r2,-8(fp)
 4010ad4:	18bfe616 	blt	r3,r2,4010a70 <__alt_data_end+0xfc010a70>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4010ad8:	014003f4 	movhi	r5,15
 4010adc:	29509004 	addi	r5,r5,16960
 4010ae0:	e13ffd17 	ldw	r4,-12(fp)
 4010ae4:	40024640 	call	4002464 <__mulsi3>
 4010ae8:	100b883a 	mov	r5,r2
 4010aec:	01017db4 	movhi	r4,1526
 4010af0:	21384004 	addi	r4,r4,-7936
 4010af4:	40023a80 	call	40023a8 <__udivsi3>
 4010af8:	e17fff17 	ldw	r5,-4(fp)
 4010afc:	1009883a 	mov	r4,r2
 4010b00:	40024640 	call	4002464 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4010b04:	10bfffc4 	addi	r2,r2,-1
 4010b08:	103ffe1e 	bne	r2,zero,4010b04 <__alt_data_end+0xfc010b04>
 4010b0c:	00000d06 	br	4010b44 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4010b10:	014003f4 	movhi	r5,15
 4010b14:	29509004 	addi	r5,r5,16960
 4010b18:	e13ffd17 	ldw	r4,-12(fp)
 4010b1c:	40024640 	call	4002464 <__mulsi3>
 4010b20:	100b883a 	mov	r5,r2
 4010b24:	01017db4 	movhi	r4,1526
 4010b28:	21384004 	addi	r4,r4,-7936
 4010b2c:	40023a80 	call	40023a8 <__udivsi3>
 4010b30:	e17fff17 	ldw	r5,-4(fp)
 4010b34:	1009883a 	mov	r4,r2
 4010b38:	40024640 	call	4002464 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4010b3c:	10bfffc4 	addi	r2,r2,-1
 4010b40:	00bffe16 	blt	zero,r2,4010b3c <__alt_data_end+0xfc010b3c>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4010b44:	0005883a 	mov	r2,zero
}
 4010b48:	e037883a 	mov	sp,fp
 4010b4c:	dfc00117 	ldw	ra,4(sp)
 4010b50:	df000017 	ldw	fp,0(sp)
 4010b54:	dec00204 	addi	sp,sp,8
 4010b58:	f800283a 	ret

04010b5c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010b5c:	defffe04 	addi	sp,sp,-8
 4010b60:	dfc00115 	stw	ra,4(sp)
 4010b64:	df000015 	stw	fp,0(sp)
 4010b68:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010b6c:	d0a01617 	ldw	r2,-32680(gp)
 4010b70:	10000326 	beq	r2,zero,4010b80 <alt_get_errno+0x24>
 4010b74:	d0a01617 	ldw	r2,-32680(gp)
 4010b78:	103ee83a 	callr	r2
 4010b7c:	00000106 	br	4010b84 <alt_get_errno+0x28>
 4010b80:	d0a79604 	addi	r2,gp,-25000
}
 4010b84:	e037883a 	mov	sp,fp
 4010b88:	dfc00117 	ldw	ra,4(sp)
 4010b8c:	df000017 	ldw	fp,0(sp)
 4010b90:	dec00204 	addi	sp,sp,8
 4010b94:	f800283a 	ret

04010b98 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4010b98:	defffb04 	addi	sp,sp,-20
 4010b9c:	dfc00415 	stw	ra,16(sp)
 4010ba0:	df000315 	stw	fp,12(sp)
 4010ba4:	df000304 	addi	fp,sp,12
 4010ba8:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4010bac:	e0bfff17 	ldw	r2,-4(fp)
 4010bb0:	10000816 	blt	r2,zero,4010bd4 <close+0x3c>
 4010bb4:	01400304 	movi	r5,12
 4010bb8:	e13fff17 	ldw	r4,-4(fp)
 4010bbc:	40024640 	call	4002464 <__mulsi3>
 4010bc0:	1007883a 	mov	r3,r2
 4010bc4:	00810074 	movhi	r2,1025
 4010bc8:	108f3604 	addi	r2,r2,15576
 4010bcc:	1885883a 	add	r2,r3,r2
 4010bd0:	00000106 	br	4010bd8 <close+0x40>
 4010bd4:	0005883a 	mov	r2,zero
 4010bd8:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4010bdc:	e0bffd17 	ldw	r2,-12(fp)
 4010be0:	10001926 	beq	r2,zero,4010c48 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4010be4:	e0bffd17 	ldw	r2,-12(fp)
 4010be8:	10800017 	ldw	r2,0(r2)
 4010bec:	10800417 	ldw	r2,16(r2)
 4010bf0:	10000626 	beq	r2,zero,4010c0c <close+0x74>
 4010bf4:	e0bffd17 	ldw	r2,-12(fp)
 4010bf8:	10800017 	ldw	r2,0(r2)
 4010bfc:	10800417 	ldw	r2,16(r2)
 4010c00:	e13ffd17 	ldw	r4,-12(fp)
 4010c04:	103ee83a 	callr	r2
 4010c08:	00000106 	br	4010c10 <close+0x78>
 4010c0c:	0005883a 	mov	r2,zero
 4010c10:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4010c14:	e13fff17 	ldw	r4,-4(fp)
 4010c18:	40115000 	call	4011500 <alt_release_fd>
    if (rval < 0)
 4010c1c:	e0bffe17 	ldw	r2,-8(fp)
 4010c20:	1000070e 	bge	r2,zero,4010c40 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4010c24:	4010b5c0 	call	4010b5c <alt_get_errno>
 4010c28:	1007883a 	mov	r3,r2
 4010c2c:	e0bffe17 	ldw	r2,-8(fp)
 4010c30:	0085c83a 	sub	r2,zero,r2
 4010c34:	18800015 	stw	r2,0(r3)
      return -1;
 4010c38:	00bfffc4 	movi	r2,-1
 4010c3c:	00000706 	br	4010c5c <close+0xc4>
    }
    return 0;
 4010c40:	0005883a 	mov	r2,zero
 4010c44:	00000506 	br	4010c5c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4010c48:	4010b5c0 	call	4010b5c <alt_get_errno>
 4010c4c:	1007883a 	mov	r3,r2
 4010c50:	00801444 	movi	r2,81
 4010c54:	18800015 	stw	r2,0(r3)
    return -1;
 4010c58:	00bfffc4 	movi	r2,-1
  }
}
 4010c5c:	e037883a 	mov	sp,fp
 4010c60:	dfc00117 	ldw	ra,4(sp)
 4010c64:	df000017 	ldw	fp,0(sp)
 4010c68:	dec00204 	addi	sp,sp,8
 4010c6c:	f800283a 	ret

04010c70 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4010c70:	deffff04 	addi	sp,sp,-4
 4010c74:	df000015 	stw	fp,0(sp)
 4010c78:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4010c7c:	0001883a 	nop
 4010c80:	e037883a 	mov	sp,fp
 4010c84:	df000017 	ldw	fp,0(sp)
 4010c88:	dec00104 	addi	sp,sp,4
 4010c8c:	f800283a 	ret

04010c90 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4010c90:	defffc04 	addi	sp,sp,-16
 4010c94:	df000315 	stw	fp,12(sp)
 4010c98:	df000304 	addi	fp,sp,12
 4010c9c:	e13ffd15 	stw	r4,-12(fp)
 4010ca0:	e17ffe15 	stw	r5,-8(fp)
 4010ca4:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4010ca8:	e0bfff17 	ldw	r2,-4(fp)
}
 4010cac:	e037883a 	mov	sp,fp
 4010cb0:	df000017 	ldw	fp,0(sp)
 4010cb4:	dec00104 	addi	sp,sp,4
 4010cb8:	f800283a 	ret

04010cbc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010cbc:	defffe04 	addi	sp,sp,-8
 4010cc0:	dfc00115 	stw	ra,4(sp)
 4010cc4:	df000015 	stw	fp,0(sp)
 4010cc8:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4010ccc:	d0a01617 	ldw	r2,-32680(gp)
 4010cd0:	10000326 	beq	r2,zero,4010ce0 <alt_get_errno+0x24>
 4010cd4:	d0a01617 	ldw	r2,-32680(gp)
 4010cd8:	103ee83a 	callr	r2
 4010cdc:	00000106 	br	4010ce4 <alt_get_errno+0x28>
 4010ce0:	d0a79604 	addi	r2,gp,-25000
}
 4010ce4:	e037883a 	mov	sp,fp
 4010ce8:	dfc00117 	ldw	ra,4(sp)
 4010cec:	df000017 	ldw	fp,0(sp)
 4010cf0:	dec00204 	addi	sp,sp,8
 4010cf4:	f800283a 	ret

04010cf8 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4010cf8:	defffa04 	addi	sp,sp,-24
 4010cfc:	dfc00515 	stw	ra,20(sp)
 4010d00:	df000415 	stw	fp,16(sp)
 4010d04:	df000404 	addi	fp,sp,16
 4010d08:	e13ffe15 	stw	r4,-8(fp)
 4010d0c:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4010d10:	e0bffe17 	ldw	r2,-8(fp)
 4010d14:	10000326 	beq	r2,zero,4010d24 <alt_dev_llist_insert+0x2c>
 4010d18:	e0bffe17 	ldw	r2,-8(fp)
 4010d1c:	10800217 	ldw	r2,8(r2)
 4010d20:	1000061e 	bne	r2,zero,4010d3c <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4010d24:	4010cbc0 	call	4010cbc <alt_get_errno>
 4010d28:	1007883a 	mov	r3,r2
 4010d2c:	00800584 	movi	r2,22
 4010d30:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4010d34:	00bffa84 	movi	r2,-22
 4010d38:	00001306 	br	4010d88 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4010d3c:	e0bffe17 	ldw	r2,-8(fp)
 4010d40:	e0ffff17 	ldw	r3,-4(fp)
 4010d44:	e0fffc15 	stw	r3,-16(fp)
 4010d48:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4010d4c:	e0bffd17 	ldw	r2,-12(fp)
 4010d50:	e0fffc17 	ldw	r3,-16(fp)
 4010d54:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4010d58:	e0bffc17 	ldw	r2,-16(fp)
 4010d5c:	10c00017 	ldw	r3,0(r2)
 4010d60:	e0bffd17 	ldw	r2,-12(fp)
 4010d64:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4010d68:	e0bffc17 	ldw	r2,-16(fp)
 4010d6c:	10800017 	ldw	r2,0(r2)
 4010d70:	e0fffd17 	ldw	r3,-12(fp)
 4010d74:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4010d78:	e0bffc17 	ldw	r2,-16(fp)
 4010d7c:	e0fffd17 	ldw	r3,-12(fp)
 4010d80:	10c00015 	stw	r3,0(r2)

  return 0;  
 4010d84:	0005883a 	mov	r2,zero
}
 4010d88:	e037883a 	mov	sp,fp
 4010d8c:	dfc00117 	ldw	ra,4(sp)
 4010d90:	df000017 	ldw	fp,0(sp)
 4010d94:	dec00204 	addi	sp,sp,8
 4010d98:	f800283a 	ret

04010d9c <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4010d9c:	defffd04 	addi	sp,sp,-12
 4010da0:	dfc00215 	stw	ra,8(sp)
 4010da4:	df000115 	stw	fp,4(sp)
 4010da8:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4010dac:	00810074 	movhi	r2,1025
 4010db0:	10877504 	addi	r2,r2,7636
 4010db4:	e0bfff15 	stw	r2,-4(fp)
 4010db8:	00000606 	br	4010dd4 <_do_ctors+0x38>
        (*ctor) (); 
 4010dbc:	e0bfff17 	ldw	r2,-4(fp)
 4010dc0:	10800017 	ldw	r2,0(r2)
 4010dc4:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4010dc8:	e0bfff17 	ldw	r2,-4(fp)
 4010dcc:	10bfff04 	addi	r2,r2,-4
 4010dd0:	e0bfff15 	stw	r2,-4(fp)
 4010dd4:	e0ffff17 	ldw	r3,-4(fp)
 4010dd8:	00810074 	movhi	r2,1025
 4010ddc:	10877604 	addi	r2,r2,7640
 4010de0:	18bff62e 	bgeu	r3,r2,4010dbc <__alt_data_end+0xfc010dbc>
        (*ctor) (); 
}
 4010de4:	0001883a 	nop
 4010de8:	e037883a 	mov	sp,fp
 4010dec:	dfc00117 	ldw	ra,4(sp)
 4010df0:	df000017 	ldw	fp,0(sp)
 4010df4:	dec00204 	addi	sp,sp,8
 4010df8:	f800283a 	ret

04010dfc <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4010dfc:	defffd04 	addi	sp,sp,-12
 4010e00:	dfc00215 	stw	ra,8(sp)
 4010e04:	df000115 	stw	fp,4(sp)
 4010e08:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4010e0c:	00810074 	movhi	r2,1025
 4010e10:	10877504 	addi	r2,r2,7636
 4010e14:	e0bfff15 	stw	r2,-4(fp)
 4010e18:	00000606 	br	4010e34 <_do_dtors+0x38>
        (*dtor) (); 
 4010e1c:	e0bfff17 	ldw	r2,-4(fp)
 4010e20:	10800017 	ldw	r2,0(r2)
 4010e24:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4010e28:	e0bfff17 	ldw	r2,-4(fp)
 4010e2c:	10bfff04 	addi	r2,r2,-4
 4010e30:	e0bfff15 	stw	r2,-4(fp)
 4010e34:	e0ffff17 	ldw	r3,-4(fp)
 4010e38:	00810074 	movhi	r2,1025
 4010e3c:	10877604 	addi	r2,r2,7640
 4010e40:	18bff62e 	bgeu	r3,r2,4010e1c <__alt_data_end+0xfc010e1c>
        (*dtor) (); 
}
 4010e44:	0001883a 	nop
 4010e48:	e037883a 	mov	sp,fp
 4010e4c:	dfc00117 	ldw	ra,4(sp)
 4010e50:	df000017 	ldw	fp,0(sp)
 4010e54:	dec00204 	addi	sp,sp,8
 4010e58:	f800283a 	ret

04010e5c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4010e5c:	deffff04 	addi	sp,sp,-4
 4010e60:	df000015 	stw	fp,0(sp)
 4010e64:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4010e68:	0001883a 	nop
 4010e6c:	e037883a 	mov	sp,fp
 4010e70:	df000017 	ldw	fp,0(sp)
 4010e74:	dec00104 	addi	sp,sp,4
 4010e78:	f800283a 	ret

04010e7c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4010e7c:	defff904 	addi	sp,sp,-28
 4010e80:	dfc00615 	stw	ra,24(sp)
 4010e84:	df000515 	stw	fp,20(sp)
 4010e88:	df000504 	addi	fp,sp,20
 4010e8c:	e13ffc15 	stw	r4,-16(fp)
 4010e90:	e17ffd15 	stw	r5,-12(fp)
 4010e94:	e1bffe15 	stw	r6,-8(fp)
 4010e98:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4010e9c:	e0800217 	ldw	r2,8(fp)
 4010ea0:	d8800015 	stw	r2,0(sp)
 4010ea4:	e1ffff17 	ldw	r7,-4(fp)
 4010ea8:	e1bffe17 	ldw	r6,-8(fp)
 4010eac:	e17ffd17 	ldw	r5,-12(fp)
 4010eb0:	e13ffc17 	ldw	r4,-16(fp)
 4010eb4:	401102c0 	call	401102c <alt_iic_isr_register>
}  
 4010eb8:	e037883a 	mov	sp,fp
 4010ebc:	dfc00117 	ldw	ra,4(sp)
 4010ec0:	df000017 	ldw	fp,0(sp)
 4010ec4:	dec00204 	addi	sp,sp,8
 4010ec8:	f800283a 	ret

04010ecc <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4010ecc:	defff904 	addi	sp,sp,-28
 4010ed0:	df000615 	stw	fp,24(sp)
 4010ed4:	df000604 	addi	fp,sp,24
 4010ed8:	e13ffe15 	stw	r4,-8(fp)
 4010edc:	e17fff15 	stw	r5,-4(fp)
 4010ee0:	e0bfff17 	ldw	r2,-4(fp)
 4010ee4:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010ee8:	0005303a 	rdctl	r2,status
 4010eec:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010ef0:	e0fffb17 	ldw	r3,-20(fp)
 4010ef4:	00bfff84 	movi	r2,-2
 4010ef8:	1884703a 	and	r2,r3,r2
 4010efc:	1001703a 	wrctl	status,r2
  
  return context;
 4010f00:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4010f04:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4010f08:	00c00044 	movi	r3,1
 4010f0c:	e0bffa17 	ldw	r2,-24(fp)
 4010f10:	1884983a 	sll	r2,r3,r2
 4010f14:	1007883a 	mov	r3,r2
 4010f18:	d0a79717 	ldw	r2,-24996(gp)
 4010f1c:	1884b03a 	or	r2,r3,r2
 4010f20:	d0a79715 	stw	r2,-24996(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4010f24:	d0a79717 	ldw	r2,-24996(gp)
 4010f28:	100170fa 	wrctl	ienable,r2
 4010f2c:	e0bffc17 	ldw	r2,-16(fp)
 4010f30:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010f34:	e0bffd17 	ldw	r2,-12(fp)
 4010f38:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4010f3c:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4010f40:	0001883a 	nop
}
 4010f44:	e037883a 	mov	sp,fp
 4010f48:	df000017 	ldw	fp,0(sp)
 4010f4c:	dec00104 	addi	sp,sp,4
 4010f50:	f800283a 	ret

04010f54 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4010f54:	defff904 	addi	sp,sp,-28
 4010f58:	df000615 	stw	fp,24(sp)
 4010f5c:	df000604 	addi	fp,sp,24
 4010f60:	e13ffe15 	stw	r4,-8(fp)
 4010f64:	e17fff15 	stw	r5,-4(fp)
 4010f68:	e0bfff17 	ldw	r2,-4(fp)
 4010f6c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010f70:	0005303a 	rdctl	r2,status
 4010f74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010f78:	e0fffb17 	ldw	r3,-20(fp)
 4010f7c:	00bfff84 	movi	r2,-2
 4010f80:	1884703a 	and	r2,r3,r2
 4010f84:	1001703a 	wrctl	status,r2
  
  return context;
 4010f88:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4010f8c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 4010f90:	00c00044 	movi	r3,1
 4010f94:	e0bffa17 	ldw	r2,-24(fp)
 4010f98:	1884983a 	sll	r2,r3,r2
 4010f9c:	0084303a 	nor	r2,zero,r2
 4010fa0:	1007883a 	mov	r3,r2
 4010fa4:	d0a79717 	ldw	r2,-24996(gp)
 4010fa8:	1884703a 	and	r2,r3,r2
 4010fac:	d0a79715 	stw	r2,-24996(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4010fb0:	d0a79717 	ldw	r2,-24996(gp)
 4010fb4:	100170fa 	wrctl	ienable,r2
 4010fb8:	e0bffc17 	ldw	r2,-16(fp)
 4010fbc:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010fc0:	e0bffd17 	ldw	r2,-12(fp)
 4010fc4:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4010fc8:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4010fcc:	0001883a 	nop
}
 4010fd0:	e037883a 	mov	sp,fp
 4010fd4:	df000017 	ldw	fp,0(sp)
 4010fd8:	dec00104 	addi	sp,sp,4
 4010fdc:	f800283a 	ret

04010fe0 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 4010fe0:	defffc04 	addi	sp,sp,-16
 4010fe4:	df000315 	stw	fp,12(sp)
 4010fe8:	df000304 	addi	fp,sp,12
 4010fec:	e13ffe15 	stw	r4,-8(fp)
 4010ff0:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4010ff4:	000530fa 	rdctl	r2,ienable
 4010ff8:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4010ffc:	00c00044 	movi	r3,1
 4011000:	e0bfff17 	ldw	r2,-4(fp)
 4011004:	1884983a 	sll	r2,r3,r2
 4011008:	1007883a 	mov	r3,r2
 401100c:	e0bffd17 	ldw	r2,-12(fp)
 4011010:	1884703a 	and	r2,r3,r2
 4011014:	1004c03a 	cmpne	r2,r2,zero
 4011018:	10803fcc 	andi	r2,r2,255
}
 401101c:	e037883a 	mov	sp,fp
 4011020:	df000017 	ldw	fp,0(sp)
 4011024:	dec00104 	addi	sp,sp,4
 4011028:	f800283a 	ret

0401102c <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 401102c:	defff504 	addi	sp,sp,-44
 4011030:	dfc00a15 	stw	ra,40(sp)
 4011034:	df000915 	stw	fp,36(sp)
 4011038:	df000904 	addi	fp,sp,36
 401103c:	e13ffc15 	stw	r4,-16(fp)
 4011040:	e17ffd15 	stw	r5,-12(fp)
 4011044:	e1bffe15 	stw	r6,-8(fp)
 4011048:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 401104c:	00bffa84 	movi	r2,-22
 4011050:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4011054:	e0bffd17 	ldw	r2,-12(fp)
 4011058:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 401105c:	e0bff817 	ldw	r2,-32(fp)
 4011060:	10800808 	cmpgei	r2,r2,32
 4011064:	1000271e 	bne	r2,zero,4011104 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011068:	0005303a 	rdctl	r2,status
 401106c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4011070:	e0fffb17 	ldw	r3,-20(fp)
 4011074:	00bfff84 	movi	r2,-2
 4011078:	1884703a 	and	r2,r3,r2
 401107c:	1001703a 	wrctl	status,r2
  
  return context;
 4011080:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 4011084:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 4011088:	00810074 	movhi	r2,1025
 401108c:	10977804 	addi	r2,r2,24032
 4011090:	e0fff817 	ldw	r3,-32(fp)
 4011094:	180690fa 	slli	r3,r3,3
 4011098:	10c5883a 	add	r2,r2,r3
 401109c:	e0fffe17 	ldw	r3,-8(fp)
 40110a0:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 40110a4:	00810074 	movhi	r2,1025
 40110a8:	10977804 	addi	r2,r2,24032
 40110ac:	e0fff817 	ldw	r3,-32(fp)
 40110b0:	180690fa 	slli	r3,r3,3
 40110b4:	10c5883a 	add	r2,r2,r3
 40110b8:	10800104 	addi	r2,r2,4
 40110bc:	e0ffff17 	ldw	r3,-4(fp)
 40110c0:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40110c4:	e0bffe17 	ldw	r2,-8(fp)
 40110c8:	10000526 	beq	r2,zero,40110e0 <alt_iic_isr_register+0xb4>
 40110cc:	e0bff817 	ldw	r2,-32(fp)
 40110d0:	100b883a 	mov	r5,r2
 40110d4:	e13ffc17 	ldw	r4,-16(fp)
 40110d8:	4010ecc0 	call	4010ecc <alt_ic_irq_enable>
 40110dc:	00000406 	br	40110f0 <alt_iic_isr_register+0xc4>
 40110e0:	e0bff817 	ldw	r2,-32(fp)
 40110e4:	100b883a 	mov	r5,r2
 40110e8:	e13ffc17 	ldw	r4,-16(fp)
 40110ec:	4010f540 	call	4010f54 <alt_ic_irq_disable>
 40110f0:	e0bff715 	stw	r2,-36(fp)
 40110f4:	e0bffa17 	ldw	r2,-24(fp)
 40110f8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40110fc:	e0bff917 	ldw	r2,-28(fp)
 4011100:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4011104:	e0bff717 	ldw	r2,-36(fp)
}
 4011108:	e037883a 	mov	sp,fp
 401110c:	dfc00117 	ldw	ra,4(sp)
 4011110:	df000017 	ldw	fp,0(sp)
 4011114:	dec00204 	addi	sp,sp,8
 4011118:	f800283a 	ret

0401111c <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 401111c:	defff804 	addi	sp,sp,-32
 4011120:	dfc00715 	stw	ra,28(sp)
 4011124:	df000615 	stw	fp,24(sp)
 4011128:	dc000515 	stw	r16,20(sp)
 401112c:	df000604 	addi	fp,sp,24
 4011130:	e13ffb15 	stw	r4,-20(fp)
 4011134:	e17ffc15 	stw	r5,-16(fp)
 4011138:	e1bffd15 	stw	r6,-12(fp)
 401113c:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4011140:	e1bffe17 	ldw	r6,-8(fp)
 4011144:	e17ffd17 	ldw	r5,-12(fp)
 4011148:	e13ffc17 	ldw	r4,-16(fp)
 401114c:	40113a40 	call	40113a4 <open>
 4011150:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4011154:	e0bffa17 	ldw	r2,-24(fp)
 4011158:	10002216 	blt	r2,zero,40111e4 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 401115c:	04010074 	movhi	r16,1025
 4011160:	840f3604 	addi	r16,r16,15576
 4011164:	e0bffa17 	ldw	r2,-24(fp)
 4011168:	01400304 	movi	r5,12
 401116c:	1009883a 	mov	r4,r2
 4011170:	40024640 	call	4002464 <__mulsi3>
 4011174:	8085883a 	add	r2,r16,r2
 4011178:	10c00017 	ldw	r3,0(r2)
 401117c:	e0bffb17 	ldw	r2,-20(fp)
 4011180:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 4011184:	04010074 	movhi	r16,1025
 4011188:	840f3604 	addi	r16,r16,15576
 401118c:	e0bffa17 	ldw	r2,-24(fp)
 4011190:	01400304 	movi	r5,12
 4011194:	1009883a 	mov	r4,r2
 4011198:	40024640 	call	4002464 <__mulsi3>
 401119c:	8085883a 	add	r2,r16,r2
 40111a0:	10800104 	addi	r2,r2,4
 40111a4:	10c00017 	ldw	r3,0(r2)
 40111a8:	e0bffb17 	ldw	r2,-20(fp)
 40111ac:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40111b0:	04010074 	movhi	r16,1025
 40111b4:	840f3604 	addi	r16,r16,15576
 40111b8:	e0bffa17 	ldw	r2,-24(fp)
 40111bc:	01400304 	movi	r5,12
 40111c0:	1009883a 	mov	r4,r2
 40111c4:	40024640 	call	4002464 <__mulsi3>
 40111c8:	8085883a 	add	r2,r16,r2
 40111cc:	10800204 	addi	r2,r2,8
 40111d0:	10c00017 	ldw	r3,0(r2)
 40111d4:	e0bffb17 	ldw	r2,-20(fp)
 40111d8:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 40111dc:	e13ffa17 	ldw	r4,-24(fp)
 40111e0:	40115000 	call	4011500 <alt_release_fd>
  }
} 
 40111e4:	0001883a 	nop
 40111e8:	e6ffff04 	addi	sp,fp,-4
 40111ec:	dfc00217 	ldw	ra,8(sp)
 40111f0:	df000117 	ldw	fp,4(sp)
 40111f4:	dc000017 	ldw	r16,0(sp)
 40111f8:	dec00304 	addi	sp,sp,12
 40111fc:	f800283a 	ret

04011200 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4011200:	defffb04 	addi	sp,sp,-20
 4011204:	dfc00415 	stw	ra,16(sp)
 4011208:	df000315 	stw	fp,12(sp)
 401120c:	df000304 	addi	fp,sp,12
 4011210:	e13ffd15 	stw	r4,-12(fp)
 4011214:	e17ffe15 	stw	r5,-8(fp)
 4011218:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 401121c:	01c07fc4 	movi	r7,511
 4011220:	01800044 	movi	r6,1
 4011224:	e17ffd17 	ldw	r5,-12(fp)
 4011228:	01010074 	movhi	r4,1025
 401122c:	210f3904 	addi	r4,r4,15588
 4011230:	401111c0 	call	401111c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4011234:	01c07fc4 	movi	r7,511
 4011238:	000d883a 	mov	r6,zero
 401123c:	e17ffe17 	ldw	r5,-8(fp)
 4011240:	01010074 	movhi	r4,1025
 4011244:	210f3604 	addi	r4,r4,15576
 4011248:	401111c0 	call	401111c <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 401124c:	01c07fc4 	movi	r7,511
 4011250:	01800044 	movi	r6,1
 4011254:	e17fff17 	ldw	r5,-4(fp)
 4011258:	01010074 	movhi	r4,1025
 401125c:	210f3c04 	addi	r4,r4,15600
 4011260:	401111c0 	call	401111c <alt_open_fd>
}  
 4011264:	0001883a 	nop
 4011268:	e037883a 	mov	sp,fp
 401126c:	dfc00117 	ldw	ra,4(sp)
 4011270:	df000017 	ldw	fp,0(sp)
 4011274:	dec00204 	addi	sp,sp,8
 4011278:	f800283a 	ret

0401127c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 401127c:	defffe04 	addi	sp,sp,-8
 4011280:	dfc00115 	stw	ra,4(sp)
 4011284:	df000015 	stw	fp,0(sp)
 4011288:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 401128c:	d0a01617 	ldw	r2,-32680(gp)
 4011290:	10000326 	beq	r2,zero,40112a0 <alt_get_errno+0x24>
 4011294:	d0a01617 	ldw	r2,-32680(gp)
 4011298:	103ee83a 	callr	r2
 401129c:	00000106 	br	40112a4 <alt_get_errno+0x28>
 40112a0:	d0a79604 	addi	r2,gp,-25000
}
 40112a4:	e037883a 	mov	sp,fp
 40112a8:	dfc00117 	ldw	ra,4(sp)
 40112ac:	df000017 	ldw	fp,0(sp)
 40112b0:	dec00204 	addi	sp,sp,8
 40112b4:	f800283a 	ret

040112b8 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40112b8:	defffb04 	addi	sp,sp,-20
 40112bc:	dfc00415 	stw	ra,16(sp)
 40112c0:	df000315 	stw	fp,12(sp)
 40112c4:	dc000215 	stw	r16,8(sp)
 40112c8:	df000304 	addi	fp,sp,12
 40112cc:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40112d0:	e0bffe17 	ldw	r2,-8(fp)
 40112d4:	10800217 	ldw	r2,8(r2)
 40112d8:	10d00034 	orhi	r3,r2,16384
 40112dc:	e0bffe17 	ldw	r2,-8(fp)
 40112e0:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40112e4:	e03ffd15 	stw	zero,-12(fp)
 40112e8:	00002306 	br	4011378 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 40112ec:	04010074 	movhi	r16,1025
 40112f0:	840f3604 	addi	r16,r16,15576
 40112f4:	e0bffd17 	ldw	r2,-12(fp)
 40112f8:	01400304 	movi	r5,12
 40112fc:	1009883a 	mov	r4,r2
 4011300:	40024640 	call	4002464 <__mulsi3>
 4011304:	8085883a 	add	r2,r16,r2
 4011308:	10c00017 	ldw	r3,0(r2)
 401130c:	e0bffe17 	ldw	r2,-8(fp)
 4011310:	10800017 	ldw	r2,0(r2)
 4011314:	1880151e 	bne	r3,r2,401136c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4011318:	04010074 	movhi	r16,1025
 401131c:	840f3604 	addi	r16,r16,15576
 4011320:	e0bffd17 	ldw	r2,-12(fp)
 4011324:	01400304 	movi	r5,12
 4011328:	1009883a 	mov	r4,r2
 401132c:	40024640 	call	4002464 <__mulsi3>
 4011330:	8085883a 	add	r2,r16,r2
 4011334:	10800204 	addi	r2,r2,8
 4011338:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 401133c:	10000b0e 	bge	r2,zero,401136c <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4011340:	01400304 	movi	r5,12
 4011344:	e13ffd17 	ldw	r4,-12(fp)
 4011348:	40024640 	call	4002464 <__mulsi3>
 401134c:	1007883a 	mov	r3,r2
 4011350:	00810074 	movhi	r2,1025
 4011354:	108f3604 	addi	r2,r2,15576
 4011358:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 401135c:	e0bffe17 	ldw	r2,-8(fp)
 4011360:	18800226 	beq	r3,r2,401136c <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 4011364:	00bffcc4 	movi	r2,-13
 4011368:	00000806 	br	401138c <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 401136c:	e0bffd17 	ldw	r2,-12(fp)
 4011370:	10800044 	addi	r2,r2,1
 4011374:	e0bffd15 	stw	r2,-12(fp)
 4011378:	d0a01517 	ldw	r2,-32684(gp)
 401137c:	1007883a 	mov	r3,r2
 4011380:	e0bffd17 	ldw	r2,-12(fp)
 4011384:	18bfd92e 	bgeu	r3,r2,40112ec <__alt_data_end+0xfc0112ec>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 4011388:	0005883a 	mov	r2,zero
}
 401138c:	e6ffff04 	addi	sp,fp,-4
 4011390:	dfc00217 	ldw	ra,8(sp)
 4011394:	df000117 	ldw	fp,4(sp)
 4011398:	dc000017 	ldw	r16,0(sp)
 401139c:	dec00304 	addi	sp,sp,12
 40113a0:	f800283a 	ret

040113a4 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40113a4:	defff604 	addi	sp,sp,-40
 40113a8:	dfc00915 	stw	ra,36(sp)
 40113ac:	df000815 	stw	fp,32(sp)
 40113b0:	df000804 	addi	fp,sp,32
 40113b4:	e13ffd15 	stw	r4,-12(fp)
 40113b8:	e17ffe15 	stw	r5,-8(fp)
 40113bc:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40113c0:	00bfffc4 	movi	r2,-1
 40113c4:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 40113c8:	00bffb44 	movi	r2,-19
 40113cc:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 40113d0:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40113d4:	d1601304 	addi	r5,gp,-32692
 40113d8:	e13ffd17 	ldw	r4,-12(fp)
 40113dc:	401174c0 	call	401174c <alt_find_dev>
 40113e0:	e0bff815 	stw	r2,-32(fp)
 40113e4:	e0bff817 	ldw	r2,-32(fp)
 40113e8:	1000051e 	bne	r2,zero,4011400 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 40113ec:	e13ffd17 	ldw	r4,-12(fp)
 40113f0:	40117dc0 	call	40117dc <alt_find_file>
 40113f4:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 40113f8:	00800044 	movi	r2,1
 40113fc:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4011400:	e0bff817 	ldw	r2,-32(fp)
 4011404:	10002b26 	beq	r2,zero,40114b4 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4011408:	e13ff817 	ldw	r4,-32(fp)
 401140c:	40118e40 	call	40118e4 <alt_get_fd>
 4011410:	e0bff915 	stw	r2,-28(fp)
 4011414:	e0bff917 	ldw	r2,-28(fp)
 4011418:	1000030e 	bge	r2,zero,4011428 <open+0x84>
    {
      status = index;
 401141c:	e0bff917 	ldw	r2,-28(fp)
 4011420:	e0bffa15 	stw	r2,-24(fp)
 4011424:	00002506 	br	40114bc <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4011428:	01400304 	movi	r5,12
 401142c:	e13ff917 	ldw	r4,-28(fp)
 4011430:	40024640 	call	4002464 <__mulsi3>
 4011434:	1007883a 	mov	r3,r2
 4011438:	00810074 	movhi	r2,1025
 401143c:	108f3604 	addi	r2,r2,15576
 4011440:	1885883a 	add	r2,r3,r2
 4011444:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4011448:	e0fffe17 	ldw	r3,-8(fp)
 401144c:	00900034 	movhi	r2,16384
 4011450:	10bfffc4 	addi	r2,r2,-1
 4011454:	1886703a 	and	r3,r3,r2
 4011458:	e0bffc17 	ldw	r2,-16(fp)
 401145c:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4011460:	e0bffb17 	ldw	r2,-20(fp)
 4011464:	1000051e 	bne	r2,zero,401147c <open+0xd8>
 4011468:	e13ffc17 	ldw	r4,-16(fp)
 401146c:	40112b80 	call	40112b8 <alt_file_locked>
 4011470:	e0bffa15 	stw	r2,-24(fp)
 4011474:	e0bffa17 	ldw	r2,-24(fp)
 4011478:	10001016 	blt	r2,zero,40114bc <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 401147c:	e0bff817 	ldw	r2,-32(fp)
 4011480:	10800317 	ldw	r2,12(r2)
 4011484:	10000826 	beq	r2,zero,40114a8 <open+0x104>
 4011488:	e0bff817 	ldw	r2,-32(fp)
 401148c:	10800317 	ldw	r2,12(r2)
 4011490:	e1ffff17 	ldw	r7,-4(fp)
 4011494:	e1bffe17 	ldw	r6,-8(fp)
 4011498:	e17ffd17 	ldw	r5,-12(fp)
 401149c:	e13ffc17 	ldw	r4,-16(fp)
 40114a0:	103ee83a 	callr	r2
 40114a4:	00000106 	br	40114ac <open+0x108>
 40114a8:	0005883a 	mov	r2,zero
 40114ac:	e0bffa15 	stw	r2,-24(fp)
 40114b0:	00000206 	br	40114bc <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40114b4:	00bffb44 	movi	r2,-19
 40114b8:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40114bc:	e0bffa17 	ldw	r2,-24(fp)
 40114c0:	1000090e 	bge	r2,zero,40114e8 <open+0x144>
  {
    alt_release_fd (index);  
 40114c4:	e13ff917 	ldw	r4,-28(fp)
 40114c8:	40115000 	call	4011500 <alt_release_fd>
    ALT_ERRNO = -status;
 40114cc:	401127c0 	call	401127c <alt_get_errno>
 40114d0:	1007883a 	mov	r3,r2
 40114d4:	e0bffa17 	ldw	r2,-24(fp)
 40114d8:	0085c83a 	sub	r2,zero,r2
 40114dc:	18800015 	stw	r2,0(r3)
    return -1;
 40114e0:	00bfffc4 	movi	r2,-1
 40114e4:	00000106 	br	40114ec <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 40114e8:	e0bff917 	ldw	r2,-28(fp)
}
 40114ec:	e037883a 	mov	sp,fp
 40114f0:	dfc00117 	ldw	ra,4(sp)
 40114f4:	df000017 	ldw	fp,0(sp)
 40114f8:	dec00204 	addi	sp,sp,8
 40114fc:	f800283a 	ret

04011500 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 4011500:	defffc04 	addi	sp,sp,-16
 4011504:	dfc00315 	stw	ra,12(sp)
 4011508:	df000215 	stw	fp,8(sp)
 401150c:	dc000115 	stw	r16,4(sp)
 4011510:	df000204 	addi	fp,sp,8
 4011514:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4011518:	e0bffe17 	ldw	r2,-8(fp)
 401151c:	108000d0 	cmplti	r2,r2,3
 4011520:	1000111e 	bne	r2,zero,4011568 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4011524:	04010074 	movhi	r16,1025
 4011528:	840f3604 	addi	r16,r16,15576
 401152c:	e0bffe17 	ldw	r2,-8(fp)
 4011530:	01400304 	movi	r5,12
 4011534:	1009883a 	mov	r4,r2
 4011538:	40024640 	call	4002464 <__mulsi3>
 401153c:	8085883a 	add	r2,r16,r2
 4011540:	10800204 	addi	r2,r2,8
 4011544:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4011548:	04010074 	movhi	r16,1025
 401154c:	840f3604 	addi	r16,r16,15576
 4011550:	e0bffe17 	ldw	r2,-8(fp)
 4011554:	01400304 	movi	r5,12
 4011558:	1009883a 	mov	r4,r2
 401155c:	40024640 	call	4002464 <__mulsi3>
 4011560:	8085883a 	add	r2,r16,r2
 4011564:	10000015 	stw	zero,0(r2)
  }
}
 4011568:	0001883a 	nop
 401156c:	e6ffff04 	addi	sp,fp,-4
 4011570:	dfc00217 	ldw	ra,8(sp)
 4011574:	df000117 	ldw	fp,4(sp)
 4011578:	dc000017 	ldw	r16,0(sp)
 401157c:	dec00304 	addi	sp,sp,12
 4011580:	f800283a 	ret

04011584 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4011584:	defffa04 	addi	sp,sp,-24
 4011588:	df000515 	stw	fp,20(sp)
 401158c:	df000504 	addi	fp,sp,20
 4011590:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4011594:	0005303a 	rdctl	r2,status
 4011598:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 401159c:	e0fffc17 	ldw	r3,-16(fp)
 40115a0:	00bfff84 	movi	r2,-2
 40115a4:	1884703a 	and	r2,r3,r2
 40115a8:	1001703a 	wrctl	status,r2
  
  return context;
 40115ac:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 40115b0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 40115b4:	e0bfff17 	ldw	r2,-4(fp)
 40115b8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 40115bc:	e0bffd17 	ldw	r2,-12(fp)
 40115c0:	10800017 	ldw	r2,0(r2)
 40115c4:	e0fffd17 	ldw	r3,-12(fp)
 40115c8:	18c00117 	ldw	r3,4(r3)
 40115cc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 40115d0:	e0bffd17 	ldw	r2,-12(fp)
 40115d4:	10800117 	ldw	r2,4(r2)
 40115d8:	e0fffd17 	ldw	r3,-12(fp)
 40115dc:	18c00017 	ldw	r3,0(r3)
 40115e0:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 40115e4:	e0bffd17 	ldw	r2,-12(fp)
 40115e8:	e0fffd17 	ldw	r3,-12(fp)
 40115ec:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 40115f0:	e0bffd17 	ldw	r2,-12(fp)
 40115f4:	e0fffd17 	ldw	r3,-12(fp)
 40115f8:	10c00015 	stw	r3,0(r2)
 40115fc:	e0bffb17 	ldw	r2,-20(fp)
 4011600:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4011604:	e0bffe17 	ldw	r2,-8(fp)
 4011608:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 401160c:	0001883a 	nop
 4011610:	e037883a 	mov	sp,fp
 4011614:	df000017 	ldw	fp,0(sp)
 4011618:	dec00104 	addi	sp,sp,4
 401161c:	f800283a 	ret

04011620 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 4011620:	defffb04 	addi	sp,sp,-20
 4011624:	dfc00415 	stw	ra,16(sp)
 4011628:	df000315 	stw	fp,12(sp)
 401162c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 4011630:	d0a01717 	ldw	r2,-32676(gp)
 4011634:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4011638:	d0a79c17 	ldw	r2,-24976(gp)
 401163c:	10800044 	addi	r2,r2,1
 4011640:	d0a79c15 	stw	r2,-24976(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4011644:	00002e06 	br	4011700 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4011648:	e0bffd17 	ldw	r2,-12(fp)
 401164c:	10800017 	ldw	r2,0(r2)
 4011650:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4011654:	e0bffd17 	ldw	r2,-12(fp)
 4011658:	10800403 	ldbu	r2,16(r2)
 401165c:	10803fcc 	andi	r2,r2,255
 4011660:	10000426 	beq	r2,zero,4011674 <alt_tick+0x54>
 4011664:	d0a79c17 	ldw	r2,-24976(gp)
 4011668:	1000021e 	bne	r2,zero,4011674 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 401166c:	e0bffd17 	ldw	r2,-12(fp)
 4011670:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4011674:	e0bffd17 	ldw	r2,-12(fp)
 4011678:	10800217 	ldw	r2,8(r2)
 401167c:	d0e79c17 	ldw	r3,-24976(gp)
 4011680:	18801d36 	bltu	r3,r2,40116f8 <alt_tick+0xd8>
 4011684:	e0bffd17 	ldw	r2,-12(fp)
 4011688:	10800403 	ldbu	r2,16(r2)
 401168c:	10803fcc 	andi	r2,r2,255
 4011690:	1000191e 	bne	r2,zero,40116f8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4011694:	e0bffd17 	ldw	r2,-12(fp)
 4011698:	10800317 	ldw	r2,12(r2)
 401169c:	e0fffd17 	ldw	r3,-12(fp)
 40116a0:	18c00517 	ldw	r3,20(r3)
 40116a4:	1809883a 	mov	r4,r3
 40116a8:	103ee83a 	callr	r2
 40116ac:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 40116b0:	e0bfff17 	ldw	r2,-4(fp)
 40116b4:	1000031e 	bne	r2,zero,40116c4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 40116b8:	e13ffd17 	ldw	r4,-12(fp)
 40116bc:	40115840 	call	4011584 <alt_alarm_stop>
 40116c0:	00000d06 	br	40116f8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 40116c4:	e0bffd17 	ldw	r2,-12(fp)
 40116c8:	10c00217 	ldw	r3,8(r2)
 40116cc:	e0bfff17 	ldw	r2,-4(fp)
 40116d0:	1887883a 	add	r3,r3,r2
 40116d4:	e0bffd17 	ldw	r2,-12(fp)
 40116d8:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 40116dc:	e0bffd17 	ldw	r2,-12(fp)
 40116e0:	10c00217 	ldw	r3,8(r2)
 40116e4:	d0a79c17 	ldw	r2,-24976(gp)
 40116e8:	1880032e 	bgeu	r3,r2,40116f8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 40116ec:	e0bffd17 	ldw	r2,-12(fp)
 40116f0:	00c00044 	movi	r3,1
 40116f4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 40116f8:	e0bffe17 	ldw	r2,-8(fp)
 40116fc:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4011700:	e0fffd17 	ldw	r3,-12(fp)
 4011704:	d0a01704 	addi	r2,gp,-32676
 4011708:	18bfcf1e 	bne	r3,r2,4011648 <__alt_data_end+0xfc011648>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 401170c:	0001883a 	nop
}
 4011710:	0001883a 	nop
 4011714:	e037883a 	mov	sp,fp
 4011718:	dfc00117 	ldw	ra,4(sp)
 401171c:	df000017 	ldw	fp,0(sp)
 4011720:	dec00204 	addi	sp,sp,8
 4011724:	f800283a 	ret

04011728 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4011728:	deffff04 	addi	sp,sp,-4
 401172c:	df000015 	stw	fp,0(sp)
 4011730:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4011734:	000170fa 	wrctl	ienable,zero
}
 4011738:	0001883a 	nop
 401173c:	e037883a 	mov	sp,fp
 4011740:	df000017 	ldw	fp,0(sp)
 4011744:	dec00104 	addi	sp,sp,4
 4011748:	f800283a 	ret

0401174c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 401174c:	defffa04 	addi	sp,sp,-24
 4011750:	dfc00515 	stw	ra,20(sp)
 4011754:	df000415 	stw	fp,16(sp)
 4011758:	df000404 	addi	fp,sp,16
 401175c:	e13ffe15 	stw	r4,-8(fp)
 4011760:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 4011764:	e0bfff17 	ldw	r2,-4(fp)
 4011768:	10800017 	ldw	r2,0(r2)
 401176c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4011770:	e13ffe17 	ldw	r4,-8(fp)
 4011774:	400bebc0 	call	400bebc <strlen>
 4011778:	10800044 	addi	r2,r2,1
 401177c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4011780:	00000d06 	br	40117b8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4011784:	e0bffc17 	ldw	r2,-16(fp)
 4011788:	10800217 	ldw	r2,8(r2)
 401178c:	e0fffd17 	ldw	r3,-12(fp)
 4011790:	180d883a 	mov	r6,r3
 4011794:	e17ffe17 	ldw	r5,-8(fp)
 4011798:	1009883a 	mov	r4,r2
 401179c:	4011a900 	call	4011a90 <memcmp>
 40117a0:	1000021e 	bne	r2,zero,40117ac <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40117a4:	e0bffc17 	ldw	r2,-16(fp)
 40117a8:	00000706 	br	40117c8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40117ac:	e0bffc17 	ldw	r2,-16(fp)
 40117b0:	10800017 	ldw	r2,0(r2)
 40117b4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40117b8:	e0fffc17 	ldw	r3,-16(fp)
 40117bc:	e0bfff17 	ldw	r2,-4(fp)
 40117c0:	18bff01e 	bne	r3,r2,4011784 <__alt_data_end+0xfc011784>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 40117c4:	0005883a 	mov	r2,zero
}
 40117c8:	e037883a 	mov	sp,fp
 40117cc:	dfc00117 	ldw	ra,4(sp)
 40117d0:	df000017 	ldw	fp,0(sp)
 40117d4:	dec00204 	addi	sp,sp,8
 40117d8:	f800283a 	ret

040117dc <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 40117dc:	defffb04 	addi	sp,sp,-20
 40117e0:	dfc00415 	stw	ra,16(sp)
 40117e4:	df000315 	stw	fp,12(sp)
 40117e8:	df000304 	addi	fp,sp,12
 40117ec:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 40117f0:	d0a01117 	ldw	r2,-32700(gp)
 40117f4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40117f8:	00003106 	br	40118c0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 40117fc:	e0bffd17 	ldw	r2,-12(fp)
 4011800:	10800217 	ldw	r2,8(r2)
 4011804:	1009883a 	mov	r4,r2
 4011808:	400bebc0 	call	400bebc <strlen>
 401180c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 4011810:	e0bffd17 	ldw	r2,-12(fp)
 4011814:	10c00217 	ldw	r3,8(r2)
 4011818:	e0bffe17 	ldw	r2,-8(fp)
 401181c:	10bfffc4 	addi	r2,r2,-1
 4011820:	1885883a 	add	r2,r3,r2
 4011824:	10800003 	ldbu	r2,0(r2)
 4011828:	10803fcc 	andi	r2,r2,255
 401182c:	1080201c 	xori	r2,r2,128
 4011830:	10bfe004 	addi	r2,r2,-128
 4011834:	10800bd8 	cmpnei	r2,r2,47
 4011838:	1000031e 	bne	r2,zero,4011848 <alt_find_file+0x6c>
    {
      len -= 1;
 401183c:	e0bffe17 	ldw	r2,-8(fp)
 4011840:	10bfffc4 	addi	r2,r2,-1
 4011844:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4011848:	e0bffe17 	ldw	r2,-8(fp)
 401184c:	e0ffff17 	ldw	r3,-4(fp)
 4011850:	1885883a 	add	r2,r3,r2
 4011854:	10800003 	ldbu	r2,0(r2)
 4011858:	10803fcc 	andi	r2,r2,255
 401185c:	1080201c 	xori	r2,r2,128
 4011860:	10bfe004 	addi	r2,r2,-128
 4011864:	10800be0 	cmpeqi	r2,r2,47
 4011868:	1000081e 	bne	r2,zero,401188c <alt_find_file+0xb0>
 401186c:	e0bffe17 	ldw	r2,-8(fp)
 4011870:	e0ffff17 	ldw	r3,-4(fp)
 4011874:	1885883a 	add	r2,r3,r2
 4011878:	10800003 	ldbu	r2,0(r2)
 401187c:	10803fcc 	andi	r2,r2,255
 4011880:	1080201c 	xori	r2,r2,128
 4011884:	10bfe004 	addi	r2,r2,-128
 4011888:	10000a1e 	bne	r2,zero,40118b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 401188c:	e0bffd17 	ldw	r2,-12(fp)
 4011890:	10800217 	ldw	r2,8(r2)
 4011894:	e0fffe17 	ldw	r3,-8(fp)
 4011898:	180d883a 	mov	r6,r3
 401189c:	e17fff17 	ldw	r5,-4(fp)
 40118a0:	1009883a 	mov	r4,r2
 40118a4:	4011a900 	call	4011a90 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40118a8:	1000021e 	bne	r2,zero,40118b4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40118ac:	e0bffd17 	ldw	r2,-12(fp)
 40118b0:	00000706 	br	40118d0 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 40118b4:	e0bffd17 	ldw	r2,-12(fp)
 40118b8:	10800017 	ldw	r2,0(r2)
 40118bc:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40118c0:	e0fffd17 	ldw	r3,-12(fp)
 40118c4:	d0a01104 	addi	r2,gp,-32700
 40118c8:	18bfcc1e 	bne	r3,r2,40117fc <__alt_data_end+0xfc0117fc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 40118cc:	0005883a 	mov	r2,zero
}
 40118d0:	e037883a 	mov	sp,fp
 40118d4:	dfc00117 	ldw	ra,4(sp)
 40118d8:	df000017 	ldw	fp,0(sp)
 40118dc:	dec00204 	addi	sp,sp,8
 40118e0:	f800283a 	ret

040118e4 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 40118e4:	defffa04 	addi	sp,sp,-24
 40118e8:	dfc00515 	stw	ra,20(sp)
 40118ec:	df000415 	stw	fp,16(sp)
 40118f0:	dc000315 	stw	r16,12(sp)
 40118f4:	df000404 	addi	fp,sp,16
 40118f8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 40118fc:	00bffa04 	movi	r2,-24
 4011900:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4011904:	e03ffc15 	stw	zero,-16(fp)
 4011908:	00001d06 	br	4011980 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 401190c:	04010074 	movhi	r16,1025
 4011910:	840f3604 	addi	r16,r16,15576
 4011914:	e0bffc17 	ldw	r2,-16(fp)
 4011918:	01400304 	movi	r5,12
 401191c:	1009883a 	mov	r4,r2
 4011920:	40024640 	call	4002464 <__mulsi3>
 4011924:	8085883a 	add	r2,r16,r2
 4011928:	10800017 	ldw	r2,0(r2)
 401192c:	1000111e 	bne	r2,zero,4011974 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4011930:	04010074 	movhi	r16,1025
 4011934:	840f3604 	addi	r16,r16,15576
 4011938:	e0bffc17 	ldw	r2,-16(fp)
 401193c:	01400304 	movi	r5,12
 4011940:	1009883a 	mov	r4,r2
 4011944:	40024640 	call	4002464 <__mulsi3>
 4011948:	8085883a 	add	r2,r16,r2
 401194c:	e0fffe17 	ldw	r3,-8(fp)
 4011950:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4011954:	d0e01517 	ldw	r3,-32684(gp)
 4011958:	e0bffc17 	ldw	r2,-16(fp)
 401195c:	1880020e 	bge	r3,r2,4011968 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4011960:	e0bffc17 	ldw	r2,-16(fp)
 4011964:	d0a01515 	stw	r2,-32684(gp)
      }
      rc = i;
 4011968:	e0bffc17 	ldw	r2,-16(fp)
 401196c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4011970:	00000606 	br	401198c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4011974:	e0bffc17 	ldw	r2,-16(fp)
 4011978:	10800044 	addi	r2,r2,1
 401197c:	e0bffc15 	stw	r2,-16(fp)
 4011980:	e0bffc17 	ldw	r2,-16(fp)
 4011984:	10800810 	cmplti	r2,r2,32
 4011988:	103fe01e 	bne	r2,zero,401190c <__alt_data_end+0xfc01190c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 401198c:	e0bffd17 	ldw	r2,-12(fp)
}
 4011990:	e6ffff04 	addi	sp,fp,-4
 4011994:	dfc00217 	ldw	ra,8(sp)
 4011998:	df000117 	ldw	fp,4(sp)
 401199c:	dc000017 	ldw	r16,0(sp)
 40119a0:	dec00304 	addi	sp,sp,12
 40119a4:	f800283a 	ret

040119a8 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 40119a8:	defffe04 	addi	sp,sp,-8
 40119ac:	df000115 	stw	fp,4(sp)
 40119b0:	df000104 	addi	fp,sp,4
 40119b4:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 40119b8:	e0bfff17 	ldw	r2,-4(fp)
 40119bc:	10bffe84 	addi	r2,r2,-6
 40119c0:	10c00428 	cmpgeui	r3,r2,16
 40119c4:	18001a1e 	bne	r3,zero,4011a30 <alt_exception_cause_generated_bad_addr+0x88>
 40119c8:	100690ba 	slli	r3,r2,2
 40119cc:	00810074 	movhi	r2,1025
 40119d0:	10867804 	addi	r2,r2,6624
 40119d4:	1885883a 	add	r2,r3,r2
 40119d8:	10800017 	ldw	r2,0(r2)
 40119dc:	1000683a 	jmp	r2
 40119e0:	04011a20 	cmpeqi	r16,zero,1128
 40119e4:	04011a20 	cmpeqi	r16,zero,1128
 40119e8:	04011a30 	cmpltui	r16,zero,1128
 40119ec:	04011a30 	cmpltui	r16,zero,1128
 40119f0:	04011a30 	cmpltui	r16,zero,1128
 40119f4:	04011a20 	cmpeqi	r16,zero,1128
 40119f8:	04011a28 	cmpgeui	r16,zero,1128
 40119fc:	04011a30 	cmpltui	r16,zero,1128
 4011a00:	04011a20 	cmpeqi	r16,zero,1128
 4011a04:	04011a20 	cmpeqi	r16,zero,1128
 4011a08:	04011a30 	cmpltui	r16,zero,1128
 4011a0c:	04011a20 	cmpeqi	r16,zero,1128
 4011a10:	04011a28 	cmpgeui	r16,zero,1128
 4011a14:	04011a30 	cmpltui	r16,zero,1128
 4011a18:	04011a30 	cmpltui	r16,zero,1128
 4011a1c:	04011a20 	cmpeqi	r16,zero,1128
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4011a20:	00800044 	movi	r2,1
 4011a24:	00000306 	br	4011a34 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4011a28:	0005883a 	mov	r2,zero
 4011a2c:	00000106 	br	4011a34 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4011a30:	0005883a 	mov	r2,zero
  }
}
 4011a34:	e037883a 	mov	sp,fp
 4011a38:	df000017 	ldw	fp,0(sp)
 4011a3c:	dec00104 	addi	sp,sp,4
 4011a40:	f800283a 	ret

04011a44 <atexit>:
 4011a44:	200b883a 	mov	r5,r4
 4011a48:	000f883a 	mov	r7,zero
 4011a4c:	000d883a 	mov	r6,zero
 4011a50:	0009883a 	mov	r4,zero
 4011a54:	4011b0c1 	jmpi	4011b0c <__register_exitproc>

04011a58 <exit>:
 4011a58:	defffe04 	addi	sp,sp,-8
 4011a5c:	000b883a 	mov	r5,zero
 4011a60:	dc000015 	stw	r16,0(sp)
 4011a64:	dfc00115 	stw	ra,4(sp)
 4011a68:	2021883a 	mov	r16,r4
 4011a6c:	4011c240 	call	4011c24 <__call_exitprocs>
 4011a70:	00810074 	movhi	r2,1025
 4011a74:	108fa004 	addi	r2,r2,16000
 4011a78:	11000017 	ldw	r4,0(r2)
 4011a7c:	20800f17 	ldw	r2,60(r4)
 4011a80:	10000126 	beq	r2,zero,4011a88 <exit+0x30>
 4011a84:	103ee83a 	callr	r2
 4011a88:	8009883a 	mov	r4,r16
 4011a8c:	4011da40 	call	4011da4 <_exit>

04011a90 <memcmp>:
 4011a90:	01c000c4 	movi	r7,3
 4011a94:	3980192e 	bgeu	r7,r6,4011afc <memcmp+0x6c>
 4011a98:	2144b03a 	or	r2,r4,r5
 4011a9c:	11c4703a 	and	r2,r2,r7
 4011aa0:	10000f26 	beq	r2,zero,4011ae0 <memcmp+0x50>
 4011aa4:	20800003 	ldbu	r2,0(r4)
 4011aa8:	28c00003 	ldbu	r3,0(r5)
 4011aac:	10c0151e 	bne	r2,r3,4011b04 <memcmp+0x74>
 4011ab0:	31bfff84 	addi	r6,r6,-2
 4011ab4:	01ffffc4 	movi	r7,-1
 4011ab8:	00000406 	br	4011acc <memcmp+0x3c>
 4011abc:	20800003 	ldbu	r2,0(r4)
 4011ac0:	28c00003 	ldbu	r3,0(r5)
 4011ac4:	31bfffc4 	addi	r6,r6,-1
 4011ac8:	10c00e1e 	bne	r2,r3,4011b04 <memcmp+0x74>
 4011acc:	21000044 	addi	r4,r4,1
 4011ad0:	29400044 	addi	r5,r5,1
 4011ad4:	31fff91e 	bne	r6,r7,4011abc <__alt_data_end+0xfc011abc>
 4011ad8:	0005883a 	mov	r2,zero
 4011adc:	f800283a 	ret
 4011ae0:	20c00017 	ldw	r3,0(r4)
 4011ae4:	28800017 	ldw	r2,0(r5)
 4011ae8:	18bfee1e 	bne	r3,r2,4011aa4 <__alt_data_end+0xfc011aa4>
 4011aec:	31bfff04 	addi	r6,r6,-4
 4011af0:	21000104 	addi	r4,r4,4
 4011af4:	29400104 	addi	r5,r5,4
 4011af8:	39bff936 	bltu	r7,r6,4011ae0 <__alt_data_end+0xfc011ae0>
 4011afc:	303fe91e 	bne	r6,zero,4011aa4 <__alt_data_end+0xfc011aa4>
 4011b00:	003ff506 	br	4011ad8 <__alt_data_end+0xfc011ad8>
 4011b04:	10c5c83a 	sub	r2,r2,r3
 4011b08:	f800283a 	ret

04011b0c <__register_exitproc>:
 4011b0c:	defffa04 	addi	sp,sp,-24
 4011b10:	dc000315 	stw	r16,12(sp)
 4011b14:	04010074 	movhi	r16,1025
 4011b18:	840fa004 	addi	r16,r16,16000
 4011b1c:	80c00017 	ldw	r3,0(r16)
 4011b20:	dc400415 	stw	r17,16(sp)
 4011b24:	dfc00515 	stw	ra,20(sp)
 4011b28:	18805217 	ldw	r2,328(r3)
 4011b2c:	2023883a 	mov	r17,r4
 4011b30:	10003726 	beq	r2,zero,4011c10 <__register_exitproc+0x104>
 4011b34:	10c00117 	ldw	r3,4(r2)
 4011b38:	010007c4 	movi	r4,31
 4011b3c:	20c00e16 	blt	r4,r3,4011b78 <__register_exitproc+0x6c>
 4011b40:	1a000044 	addi	r8,r3,1
 4011b44:	8800221e 	bne	r17,zero,4011bd0 <__register_exitproc+0xc4>
 4011b48:	18c00084 	addi	r3,r3,2
 4011b4c:	18c7883a 	add	r3,r3,r3
 4011b50:	18c7883a 	add	r3,r3,r3
 4011b54:	12000115 	stw	r8,4(r2)
 4011b58:	10c7883a 	add	r3,r2,r3
 4011b5c:	19400015 	stw	r5,0(r3)
 4011b60:	0005883a 	mov	r2,zero
 4011b64:	dfc00517 	ldw	ra,20(sp)
 4011b68:	dc400417 	ldw	r17,16(sp)
 4011b6c:	dc000317 	ldw	r16,12(sp)
 4011b70:	dec00604 	addi	sp,sp,24
 4011b74:	f800283a 	ret
 4011b78:	00800034 	movhi	r2,0
 4011b7c:	10800004 	addi	r2,r2,0
 4011b80:	10002626 	beq	r2,zero,4011c1c <__register_exitproc+0x110>
 4011b84:	01006404 	movi	r4,400
 4011b88:	d9400015 	stw	r5,0(sp)
 4011b8c:	d9800115 	stw	r6,4(sp)
 4011b90:	d9c00215 	stw	r7,8(sp)
 4011b94:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4011b98:	d9400017 	ldw	r5,0(sp)
 4011b9c:	d9800117 	ldw	r6,4(sp)
 4011ba0:	d9c00217 	ldw	r7,8(sp)
 4011ba4:	10001d26 	beq	r2,zero,4011c1c <__register_exitproc+0x110>
 4011ba8:	81000017 	ldw	r4,0(r16)
 4011bac:	10000115 	stw	zero,4(r2)
 4011bb0:	02000044 	movi	r8,1
 4011bb4:	22405217 	ldw	r9,328(r4)
 4011bb8:	0007883a 	mov	r3,zero
 4011bbc:	12400015 	stw	r9,0(r2)
 4011bc0:	20805215 	stw	r2,328(r4)
 4011bc4:	10006215 	stw	zero,392(r2)
 4011bc8:	10006315 	stw	zero,396(r2)
 4011bcc:	883fde26 	beq	r17,zero,4011b48 <__alt_data_end+0xfc011b48>
 4011bd0:	18c9883a 	add	r4,r3,r3
 4011bd4:	2109883a 	add	r4,r4,r4
 4011bd8:	1109883a 	add	r4,r2,r4
 4011bdc:	21802215 	stw	r6,136(r4)
 4011be0:	01800044 	movi	r6,1
 4011be4:	12406217 	ldw	r9,392(r2)
 4011be8:	30cc983a 	sll	r6,r6,r3
 4011bec:	4992b03a 	or	r9,r9,r6
 4011bf0:	12406215 	stw	r9,392(r2)
 4011bf4:	21c04215 	stw	r7,264(r4)
 4011bf8:	01000084 	movi	r4,2
 4011bfc:	893fd21e 	bne	r17,r4,4011b48 <__alt_data_end+0xfc011b48>
 4011c00:	11006317 	ldw	r4,396(r2)
 4011c04:	218cb03a 	or	r6,r4,r6
 4011c08:	11806315 	stw	r6,396(r2)
 4011c0c:	003fce06 	br	4011b48 <__alt_data_end+0xfc011b48>
 4011c10:	18805304 	addi	r2,r3,332
 4011c14:	18805215 	stw	r2,328(r3)
 4011c18:	003fc606 	br	4011b34 <__alt_data_end+0xfc011b34>
 4011c1c:	00bfffc4 	movi	r2,-1
 4011c20:	003fd006 	br	4011b64 <__alt_data_end+0xfc011b64>

04011c24 <__call_exitprocs>:
 4011c24:	defff504 	addi	sp,sp,-44
 4011c28:	df000915 	stw	fp,36(sp)
 4011c2c:	dd400615 	stw	r21,24(sp)
 4011c30:	dc800315 	stw	r18,12(sp)
 4011c34:	dfc00a15 	stw	ra,40(sp)
 4011c38:	ddc00815 	stw	r23,32(sp)
 4011c3c:	dd800715 	stw	r22,28(sp)
 4011c40:	dd000515 	stw	r20,20(sp)
 4011c44:	dcc00415 	stw	r19,16(sp)
 4011c48:	dc400215 	stw	r17,8(sp)
 4011c4c:	dc000115 	stw	r16,4(sp)
 4011c50:	d9000015 	stw	r4,0(sp)
 4011c54:	2839883a 	mov	fp,r5
 4011c58:	04800044 	movi	r18,1
 4011c5c:	057fffc4 	movi	r21,-1
 4011c60:	00810074 	movhi	r2,1025
 4011c64:	108fa004 	addi	r2,r2,16000
 4011c68:	12000017 	ldw	r8,0(r2)
 4011c6c:	45005217 	ldw	r20,328(r8)
 4011c70:	44c05204 	addi	r19,r8,328
 4011c74:	a0001c26 	beq	r20,zero,4011ce8 <__call_exitprocs+0xc4>
 4011c78:	a0800117 	ldw	r2,4(r20)
 4011c7c:	15ffffc4 	addi	r23,r2,-1
 4011c80:	b8000d16 	blt	r23,zero,4011cb8 <__call_exitprocs+0x94>
 4011c84:	14000044 	addi	r16,r2,1
 4011c88:	8421883a 	add	r16,r16,r16
 4011c8c:	8421883a 	add	r16,r16,r16
 4011c90:	84402004 	addi	r17,r16,128
 4011c94:	a463883a 	add	r17,r20,r17
 4011c98:	a421883a 	add	r16,r20,r16
 4011c9c:	e0001e26 	beq	fp,zero,4011d18 <__call_exitprocs+0xf4>
 4011ca0:	80804017 	ldw	r2,256(r16)
 4011ca4:	e0801c26 	beq	fp,r2,4011d18 <__call_exitprocs+0xf4>
 4011ca8:	bdffffc4 	addi	r23,r23,-1
 4011cac:	843fff04 	addi	r16,r16,-4
 4011cb0:	8c7fff04 	addi	r17,r17,-4
 4011cb4:	bd7ff91e 	bne	r23,r21,4011c9c <__alt_data_end+0xfc011c9c>
 4011cb8:	00800034 	movhi	r2,0
 4011cbc:	10800004 	addi	r2,r2,0
 4011cc0:	10000926 	beq	r2,zero,4011ce8 <__call_exitprocs+0xc4>
 4011cc4:	a0800117 	ldw	r2,4(r20)
 4011cc8:	1000301e 	bne	r2,zero,4011d8c <__call_exitprocs+0x168>
 4011ccc:	a0800017 	ldw	r2,0(r20)
 4011cd0:	10003226 	beq	r2,zero,4011d9c <__call_exitprocs+0x178>
 4011cd4:	a009883a 	mov	r4,r20
 4011cd8:	98800015 	stw	r2,0(r19)
 4011cdc:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4011ce0:	9d000017 	ldw	r20,0(r19)
 4011ce4:	a03fe41e 	bne	r20,zero,4011c78 <__alt_data_end+0xfc011c78>
 4011ce8:	dfc00a17 	ldw	ra,40(sp)
 4011cec:	df000917 	ldw	fp,36(sp)
 4011cf0:	ddc00817 	ldw	r23,32(sp)
 4011cf4:	dd800717 	ldw	r22,28(sp)
 4011cf8:	dd400617 	ldw	r21,24(sp)
 4011cfc:	dd000517 	ldw	r20,20(sp)
 4011d00:	dcc00417 	ldw	r19,16(sp)
 4011d04:	dc800317 	ldw	r18,12(sp)
 4011d08:	dc400217 	ldw	r17,8(sp)
 4011d0c:	dc000117 	ldw	r16,4(sp)
 4011d10:	dec00b04 	addi	sp,sp,44
 4011d14:	f800283a 	ret
 4011d18:	a0800117 	ldw	r2,4(r20)
 4011d1c:	80c00017 	ldw	r3,0(r16)
 4011d20:	10bfffc4 	addi	r2,r2,-1
 4011d24:	15c01426 	beq	r2,r23,4011d78 <__call_exitprocs+0x154>
 4011d28:	80000015 	stw	zero,0(r16)
 4011d2c:	183fde26 	beq	r3,zero,4011ca8 <__alt_data_end+0xfc011ca8>
 4011d30:	95c8983a 	sll	r4,r18,r23
 4011d34:	a0806217 	ldw	r2,392(r20)
 4011d38:	a5800117 	ldw	r22,4(r20)
 4011d3c:	2084703a 	and	r2,r4,r2
 4011d40:	10000b26 	beq	r2,zero,4011d70 <__call_exitprocs+0x14c>
 4011d44:	a0806317 	ldw	r2,396(r20)
 4011d48:	2088703a 	and	r4,r4,r2
 4011d4c:	20000c1e 	bne	r4,zero,4011d80 <__call_exitprocs+0x15c>
 4011d50:	89400017 	ldw	r5,0(r17)
 4011d54:	d9000017 	ldw	r4,0(sp)
 4011d58:	183ee83a 	callr	r3
 4011d5c:	a0800117 	ldw	r2,4(r20)
 4011d60:	15bfbf1e 	bne	r2,r22,4011c60 <__alt_data_end+0xfc011c60>
 4011d64:	98800017 	ldw	r2,0(r19)
 4011d68:	153fcf26 	beq	r2,r20,4011ca8 <__alt_data_end+0xfc011ca8>
 4011d6c:	003fbc06 	br	4011c60 <__alt_data_end+0xfc011c60>
 4011d70:	183ee83a 	callr	r3
 4011d74:	003ff906 	br	4011d5c <__alt_data_end+0xfc011d5c>
 4011d78:	a5c00115 	stw	r23,4(r20)
 4011d7c:	003feb06 	br	4011d2c <__alt_data_end+0xfc011d2c>
 4011d80:	89000017 	ldw	r4,0(r17)
 4011d84:	183ee83a 	callr	r3
 4011d88:	003ff406 	br	4011d5c <__alt_data_end+0xfc011d5c>
 4011d8c:	a0800017 	ldw	r2,0(r20)
 4011d90:	a027883a 	mov	r19,r20
 4011d94:	1029883a 	mov	r20,r2
 4011d98:	003fb606 	br	4011c74 <__alt_data_end+0xfc011c74>
 4011d9c:	0005883a 	mov	r2,zero
 4011da0:	003ffb06 	br	4011d90 <__alt_data_end+0xfc011d90>

04011da4 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4011da4:	defffd04 	addi	sp,sp,-12
 4011da8:	df000215 	stw	fp,8(sp)
 4011dac:	df000204 	addi	fp,sp,8
 4011db0:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4011db4:	0001883a 	nop
 4011db8:	e0bfff17 	ldw	r2,-4(fp)
 4011dbc:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4011dc0:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4011dc4:	10000226 	beq	r2,zero,4011dd0 <_exit+0x2c>
    ALT_SIM_FAIL();
 4011dc8:	002af070 	cmpltui	zero,zero,43969
 4011dcc:	00000106 	br	4011dd4 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4011dd0:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4011dd4:	003fff06 	br	4011dd4 <__alt_data_end+0xfc011dd4>
