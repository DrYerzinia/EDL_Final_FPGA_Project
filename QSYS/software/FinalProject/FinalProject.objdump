
FinalProject.elf:     file format elf32-littlenios2
FinalProject.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x000090e8 memsz 0x000090e8 flags r-x
    LOAD off    0x0000a108 vaddr 0x04009108 paddr 0x0400a95c align 2**12
         filesz 0x00001854 memsz 0x00001854 flags rw-
    LOAD off    0x0000c1b0 vaddr 0x0400c1b0 paddr 0x0400c1b0 align 2**12
         filesz 0x00000000 memsz 0x00000218 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00008d7c  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       0000015c  04008fac  04008fac  00009fac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001854  04009108  0400a95c  0000a108  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000218  0400c1b0  0400c1b0  0000c1b0  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0400c3c8  0400c3c8  0000b95c  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  0000b95c  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000970  00000000  00000000  0000b980  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000d0ab  00000000  00000000  0000c2f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00004cb6  00000000  00000000  0001939b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000054f5  00000000  00000000  0001e051  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00001608  00000000  00000000  00023548  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000030e5  00000000  00000000  00024b50  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00009c58  00000000  00000000  00027c35  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00031890  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000010f8  00000000  00000000  000318d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000353c5  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  000353c8  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000353cb  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000353cc  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  000353cd  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  000353d6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  000353df  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  000353e8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  000353f1  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     0006e181  00000000  00000000  0003542a  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
04008fac l    d  .rodata	00000000 .rodata
04009108 l    d  .rwdata	00000000 .rwdata
0400c1b0 l    d  .bss	00000000 .bss
0400c3c8 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FinalProject_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 hello_world.c
0400026c l     F .text	00000050 jtag_kiss_send
040002bc l     F .text	0000006c camera_dma_enable
04000328 l     F .text	000000a4 swap_buffer
040003cc l     F .text	00000114 take_raw_picture_and_send_to_jtag
040004e0 l     F .text	0000004c jpeg_jtag_send
0400052c l     F .text	00000028 read_uptime
04000554 l     F .text	00000028 read_line_detect
0400057c l     F .text	00000028 read_encoder_left
040005a4 l     F .text	00000028 read_encoder_right
040005cc l     F .text	000000dc set_motors
04000958 l     F .text	000000e8 motor_init
04000a40 l     F .text	00000048 wait_button_press
04000a88 l     F .text	0000056c motor_control_loop
04000ff4 l     F .text	000000c0 encoder_test
040010b4 l     F .text	000000e4 follow_line
04001198 l     F .text	000000ac motor_ramp_test
04001244 l     F .text	00000038 image_download_test
0400a92c l     O .rwdata	00000001 jpeg_transfer.3475
00000000 l    df *ABS*	00000000 kiss.c
00000000 l    df *ABS*	00000000 pid.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
040061d8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
04006370 l     F .text	00000034 alt_dev_reg
040091bc l     O .rwdata	00001060 jtag_uart
0400a21c l     O .rwdata	000000c4 ble_uart
0400a2e0 l     O .rwdata	0000005c video_dma_controller
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
040068f8 l     F .text	0000020c altera_avalon_jtag_uart_irq
04006b04 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_init.c
040072f8 l     F .text	0000009c altera_avalon_uart_irq
04007394 l     F .text	000000e4 altera_avalon_uart_rxirq
04007478 l     F .text	00000148 altera_avalon_uart_txirq
00000000 l    df *ABS*	00000000 altera_avalon_uart_read.c
04007614 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
0400782c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
04007c98 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
04007dcc l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
04007df8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04008258 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_open.c
040083b8 l     F .text	0000003c alt_get_errno
040083f4 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 impure.c
0400a4e4 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0400c1e4 g     O .bss	00000004 alt_instruction_exception_handler
040062c4 g     F .text	0000007c alt_main
0400c2c8 g     O .bss	00000100 alt_irq
0400a95c g       *ABS*	00000000 __flash_rwdata_start
0400c1ec g     O .bss	00000014 ble_buffer
0400228c g     F .text	00000440 .hidden __divsf3
04009174 g     O .rwdata	0000000c spin_5_times_ctrl
04004504 g     F .text	000000dc .hidden __gtdf2
04008864 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
0400c1ca g     O .bss	00000002 packet_length
04000020 g       *ABS*	00000000 __flash_exceptions_start
0400c1e8 g     O .bss	00000004 errno
0400c1d4 g     O .bss	00000004 alt_argv
04012908 g       *ABS*	00000000 _gp
0400127c g     F .text	00000208 ble_uart_handler
04006340 g     F .text	00000030 usleep
0400a924 g     O .rwdata	00000004 left_yaw_changes
04002c80 g     F .text	000004e4 .hidden __subsf3
0400a364 g     O .rwdata	00000180 alt_fd_list
0400918c g     O .rwdata	0000000c forward_ctrl
04008888 g     F .text	00000090 alt_find_dev
04005f10 g     F .text	00000148 memcpy
040058bc g     F .text	000000dc .hidden __floatsidf
0400833c g     F .text	0000007c alt_io_redirect
040045e0 g     F .text	000000f4 .hidden __ltdf2
0400a91c g     O .rwdata	00000004 forward_drive_changes
04008fac g       *ABS*	00000000 __DTOR_END__
0400a910 g     O .rwdata	00000001 maxPWM
04008ae4 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04006cfc g     F .text	0000021c altera_avalon_jtag_uart_read
04005e54 g     F .text	00000064 .hidden __udivsi3
04002788 g     F .text	000000c8 .hidden __lesf2
0400c200 g     O .bss	00000014 jtag_kiss
0400a944 g     O .rwdata	00000004 alt_max_fd
0400a90c g     O .rwdata	00000004 image_buffer_b
04006058 g     F .text	00000180 alt_irq_register
0400c214 g     O .bss	00000064 jtag_kiss_rx_buffer
04005a40 g     F .text	00000110 .hidden __extendsfdf2
04003288 g     F .text	000008ac .hidden __adddf3
0400a954 g     O .rwdata	00000004 _global_impure_ptr
0400c1bc g     O .bss	00000004 backward_yaw_changes
0400c3c8 g       *ABS*	00000000 __bss_end
04008168 g     F .text	000000f0 alt_iic_isr_register
0400875c g     F .text	00000108 alt_tick
040091b0 g     O .rwdata	0000000c right_ctrl
04005998 g     F .text	000000a8 .hidden __floatunsidf
0400724c g     F .text	000000ac altera_avalon_uart_init
0400811c g     F .text	0000004c alt_ic_irq_enabled
040086c0 g     F .text	0000009c alt_alarm_stop
0400c1cc g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d4 alt_irq_handler
0400a33c g     O .rwdata	00000028 alt_dev_null
0400a920 g     O .rwdata	00000004 backward_drive_changes
04007dac g     F .text	00000020 alt_dcache_flush_all
0400583c g     F .text	00000080 .hidden __fixdfsi
0400a928 g     O .rwdata	00000004 right_yaw_changes
0400a95c g       *ABS*	00000000 __ram_rwdata_end
0400a93c g     O .rwdata	00000008 alt_dev_list
040026cc g     F .text	000000bc .hidden __gtsf2
04009108 g       *ABS*	00000000 __ram_rodata_end
040045e0 g     F .text	000000f4 .hidden __ledf2
04000748 g     F .text	00000210 normalize_output
040006a8 g     F .text	000000a0 scale_output
04005eb8 g     F .text	00000058 .hidden __umodsi3
0400c3c8 g       *ABS*	00000000 end
04007868 g     F .text	000001ac altera_avalon_uart_write
04006838 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
04008fac g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0400719c g     F .text	00000060 altera_avalon_uart_write_fd
04005cf8 g     F .text	00000064 .hidden __clzsi2
040071fc g     F .text	00000050 altera_avalon_uart_close_fd
04006f18 g     F .text	00000224 altera_avalon_jtag_uart_write
0400a912 g     O .rwdata	00000001 minimum_stable_pwm
04008df8 g     F .text	00000180 __call_exitprocs
04000230 g     F .text	0000003c _start
0400c1dc g     O .bss	00000004 _alt_tick_rate
0400c1e0 g     O .bss	00000004 _alt_nticks
040063dc g     F .text	000002f8 alt_sys_init
04003164 g     F .text	00000124 .hidden __floatsisf
04008ce0 g     F .text	00000118 __register_exitproc
04006ba4 g     F .text	00000068 altera_avalon_jtag_uart_close
04001d9c g     F .text	00000028 .hidden __mulsi3
04009108 g       *ABS*	00000000 __ram_rwdata_start
04008fac g       *ABS*	00000000 __ram_rodata_start
040091a4 g     O .rwdata	0000000c left_ctrl
0400a918 g     O .rwdata	00000004 spin_1_yaw_changes
040066d4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04008a20 g     F .text	000000c4 alt_get_fd
04007b40 g     F .text	00000158 alt_busy_sleep
04008bcc g     F .text	0000007c memcmp
04006794 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0400c3c8 g       *ABS*	00000000 __alt_stack_base
040067e4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0400c278 g     O .bss	00000028 yaw_pid
04003b34 g     F .text	000009d0 .hidden __divdf3
040046d4 g     F .text	0000086c .hidden __muldf3
04008918 g     F .text	00000108 alt_find_file
0400c1c0 g     O .bss	00000004 left_drive_changes
04007e34 g     F .text	000000a4 alt_dev_llist_insert
0400c1c8 g     O .bss	00000001 ble_buffer_position
0400c1b0 g       *ABS*	00000000 __bss_start
0400151c g     F .text	000002f0 main
0400c1c4 g     O .bss	00000004 right_drive_changes
0400c1d8 g     O .bss	00000004 alt_envp
04006734 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04002788 g     F .text	000000c8 .hidden __ltsf2
04005b50 g     F .text	000001a8 .hidden __truncdfsf2
04001860 g     F .text	00000044 kiss_start
04009198 g     O .rwdata	0000000c backward_ctrl
0400a948 g     O .rwdata	00000004 alt_errno
04005d5c g     F .text	00000084 .hidden __divsi3
04008fac g       *ABS*	00000000 __CTOR_END__
04002850 g     F .text	00000430 .hidden __mulsf3
0400a914 g     O .rwdata	00000004 spin_5_yaw_changes
04008fac g       *ABS*	00000000 __flash_rodata_start
04008fac g       *ABS*	00000000 __DTOR_LIST__
040063a4 g     F .text	00000038 alt_irq_init
0400863c g     F .text	00000084 alt_release_fd
04008fac g     O .rodata	00000100 .hidden __clz_tab
04008b80 g     F .text	00000014 atexit
040026cc g     F .text	000000bc .hidden __gesf2
04009180 g     O .rwdata	0000000c spin_1_time_ctrl
0400a958 g     O .rwdata	00000004 _impure_ptr
0400c1d0 g     O .bss	00000004 alt_argc
04009108 g     O .rwdata	00000030 figure_8_drive_changes
04001a14 g     F .text	00000160 kiss_rx_byte
04007f38 g     F .text	00000060 _do_dtors
0400c1b4 g     O .bss	00000004 spin_1_drive_changes
04000020 g       .exceptions	00000000 alt_irq_entry
040019d0 g     F .text	00000044 kiss_end
0400a934 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04007fb8 g     F .text	00000050 alt_ic_isr_register
04009138 g     O .rwdata	00000030 figure_8_yaw_changes
0400a95c g       *ABS*	00000000 _edata
0400713c g     F .text	00000060 altera_avalon_uart_read_fd
0400c3c8 g       *ABS*	00000000 _end
04000230 g       *ABS*	00000000 __ram_exceptions_end
04006c0c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
04001b74 g     F .text	00000228 pid_compute
04008090 g     F .text	0000008c alt_ic_irq_disable
04008b94 g     F .text	00000038 exit
04005de0 g     F .text	00000074 .hidden __modsi3
0400c1c9 g     O .bss	00000001 packet_ready
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04000000 g       *ABS*	00000000 __alt_mem_sdram
04001484 g     F .text	00000098 jtag_uart_handler
0400c1b8 g     O .bss	00000004 forward_yaw_changes
040075c0 g     F .text	00000054 altera_avalon_uart_close
04008f78 g     F .text	00000034 _exit
04007a14 g     F .text	0000012c alt_alarm_start
04009168 g     O .rwdata	0000000c figure_8_ctrl
04008c48 g     F .text	00000098 strlen
040084e0 g     F .text	0000015c open
04004504 g     F .text	000000dc .hidden __gedf2
0400c1b0 g     O .bss	00000004 spin_5_drive_changes
0400a908 g     O .rwdata	00000004 image_buffer_a
04007f98 g     F .text	00000020 alt_icache_flush_all
0400a911 g     O .rwdata	00000001 minimum_zero
0400a930 g     O .rwdata	00000004 alt_priority_mask
04008008 g     F .text	00000088 alt_ic_irq_enable
04007650 g     F .text	000001dc altera_avalon_uart_read
04004f40 g     F .text	000008fc .hidden __subdf3
0400a94c g     O .rwdata	00000008 alt_alarm_list
04007ed8 g     F .text	00000060 _do_ctors
04007cd4 g     F .text	000000d8 close
04001dc4 g     F .text	000004c8 .hidden __addsf3
0400180c g     F .text	00000054 kiss_send_packet
040018a4 g     F .text	0000012c kiss_send_data
04006240 g     F .text	00000084 alt_load
0400c2a0 g     O .bss	00000028 drive_pid



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	00810074 	movhi	r2,1025
 4000140:	10b0b204 	addi	r2,r2,-15672
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	00810074 	movhi	r2,1025
 4000158:	10b0b204 	addi	r2,r2,-15672
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a63717 	ldw	r2,-26404(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a63717 	ldw	r2,-26404(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 400023c:	d68a4214 	ori	gp,gp,10504
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	00810034 	movhi	r2,1024
    ori r2, r2, %lo(__bss_start)
 4000244:	10b06c14 	ori	r2,r2,49584

    movhi r3, %hi(__bss_end)
 4000248:	00c10034 	movhi	r3,1024
    ori r3, r3, %lo(__bss_end)
 400024c:	18f0f214 	ori	r3,r3,50120

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	40062400 	call	4006240 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	40062c40 	call	40062c4 <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_data_end+0xfc000268>

0400026c <jtag_kiss_send>:
#define JTAG_UART__MASK__RVALID		0x00008000

#define max( a, b ) ( ( a > b) ? a : b )
#define min( a, b ) ( ( a < b) ? a : b )

static void jtag_kiss_send(uint8_t byte){
 400026c:	defffe04 	addi	sp,sp,-8
 4000270:	df000115 	stw	fp,4(sp)
 4000274:	df000104 	addi	fp,sp,4
 4000278:	2005883a 	mov	r2,r4
 400027c:	e0bfff05 	stb	r2,-4(fp)

         // Wait for room in buffer
         while( ! ( (*JTAG_UART_CONTROL) & 0xffff0000 ) );
 4000280:	0001883a 	nop
 4000284:	00820034 	movhi	r2,2048
 4000288:	10842504 	addi	r2,r2,4244
 400028c:	10800017 	ldw	r2,0(r2)
 4000290:	10bfffec 	andhi	r2,r2,65535
 4000294:	103ffb26 	beq	r2,zero,4000284 <__alt_data_end+0xfc000284>

         // Send byte
         *JTAG_UART_DATA = byte;
 4000298:	00820034 	movhi	r2,2048
 400029c:	10842404 	addi	r2,r2,4240
 40002a0:	e0ffff03 	ldbu	r3,-4(fp)
 40002a4:	10c00015 	stw	r3,0(r2)

}
 40002a8:	0001883a 	nop
 40002ac:	e037883a 	mov	sp,fp
 40002b0:	df000017 	ldw	fp,0(sp)
 40002b4:	dec00104 	addi	sp,sp,4
 40002b8:	f800283a 	ret

040002bc <camera_dma_enable>:

static void camera_dma_enable(bool enable){
 40002bc:	defffd04 	addi	sp,sp,-12
 40002c0:	df000215 	stw	fp,8(sp)
 40002c4:	df000204 	addi	fp,sp,8
 40002c8:	2005883a 	mov	r2,r4
 40002cc:	e0bfff05 	stb	r2,-4(fp)

	volatile uint32_t * control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
 40002d0:	00820034 	movhi	r2,2048
 40002d4:	10842304 	addi	r2,r2,4236
 40002d8:	e0bffe15 	stw	r2,-8(fp)
	if(enable){
 40002dc:	e0bfff03 	ldbu	r2,-4(fp)
 40002e0:	10000626 	beq	r2,zero,40002fc <camera_dma_enable+0x40>
		*control |= ~VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
 40002e4:	e0bffe17 	ldw	r2,-8(fp)
 40002e8:	10800017 	ldw	r2,0(r2)
 40002ec:	10c00114 	ori	r3,r2,4
 40002f0:	e0bffe17 	ldw	r2,-8(fp)
 40002f4:	10c00015 	stw	r3,0(r2)
	} else {
		*control &= VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
	}

}
 40002f8:	00000606 	br	4000314 <camera_dma_enable+0x58>

	volatile uint32_t * control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
	if(enable){
		*control |= ~VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
	} else {
		*control &= VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
 40002fc:	e0bffe17 	ldw	r2,-8(fp)
 4000300:	10c00017 	ldw	r3,0(r2)
 4000304:	00bffec4 	movi	r2,-5
 4000308:	1886703a 	and	r3,r3,r2
 400030c:	e0bffe17 	ldw	r2,-8(fp)
 4000310:	10c00015 	stw	r3,0(r2)
	}

}
 4000314:	0001883a 	nop
 4000318:	e037883a 	mov	sp,fp
 400031c:	df000017 	ldw	fp,0(sp)
 4000320:	dec00104 	addi	sp,sp,4
 4000324:	f800283a 	ret

04000328 <swap_buffer>:

static volatile uint32_t * swap_buffer(){
 4000328:	defffb04 	addi	sp,sp,-20
 400032c:	df000415 	stw	fp,16(sp)
 4000330:	df000404 	addi	fp,sp,16

	volatile uint32_t * buffer_address = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + 	VIDEO_DMA_CONTROLLER__BUFFER_OFFSET);
 4000334:	00820034 	movhi	r2,2048
 4000338:	10842004 	addi	r2,r2,4224
 400033c:	e0bffd15 	stw	r2,-12(fp)
	volatile uint32_t * back_buffer_address = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + 	VIDEO_DMA_CONTROLLER__BACK_BUFFER_OFFSET);
 4000340:	00820034 	movhi	r2,2048
 4000344:	10842104 	addi	r2,r2,4228
 4000348:	e0bffe15 	stw	r2,-8(fp)

	volatile uint32_t * status_control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
 400034c:	00820034 	movhi	r2,2048
 4000350:	10842304 	addi	r2,r2,4236
 4000354:	e0bfff15 	stw	r2,-4(fp)

	// instead of disabling DMA trigger buffer swap
	{

		// Setup back buffer register for swap
		if(*buffer_address == (uint32_t) image_buffer_a){
 4000358:	e0bffd17 	ldw	r2,-12(fp)
 400035c:	10800017 	ldw	r2,0(r2)
 4000360:	00c18034 	movhi	r3,1536
 4000364:	10c0071e 	bne	r2,r3,4000384 <swap_buffer+0x5c>
			current_image_buffer = image_buffer_a;
 4000368:	00818034 	movhi	r2,1536
 400036c:	e0bffc15 	stw	r2,-16(fp)
			*back_buffer_address = (uint32_t) image_buffer_b;
 4000370:	0081c034 	movhi	r2,1792
 4000374:	1007883a 	mov	r3,r2
 4000378:	e0bffe17 	ldw	r2,-8(fp)
 400037c:	10c00015 	stw	r3,0(r2)
 4000380:	00000606 	br	400039c <swap_buffer+0x74>
		} else {
			current_image_buffer = image_buffer_b;
 4000384:	0081c034 	movhi	r2,1792
 4000388:	e0bffc15 	stw	r2,-16(fp)
			*back_buffer_address = (uint32_t) image_buffer_a;
 400038c:	00818034 	movhi	r2,1536
 4000390:	1007883a 	mov	r3,r2
 4000394:	e0bffe17 	ldw	r2,-8(fp)
 4000398:	10c00015 	stw	r3,0(r2)
		}

		// Trigger buffer swap
		*buffer_address = 0;
 400039c:	e0bffd17 	ldw	r2,-12(fp)
 40003a0:	10000015 	stw	zero,0(r2)

		// Wait for buffer swap
		while(*status_control & VIDEO_DMA_CONTROLLER__STATUS_CONTROL__MASK__SWAP);
 40003a4:	0001883a 	nop
 40003a8:	e0bfff17 	ldw	r2,-4(fp)
 40003ac:	10800017 	ldw	r2,0(r2)
 40003b0:	1080004c 	andi	r2,r2,1
 40003b4:	103ffc1e 	bne	r2,zero,40003a8 <__alt_data_end+0xfc0003a8>

	}

	return current_image_buffer;
 40003b8:	e0bffc17 	ldw	r2,-16(fp)

}
 40003bc:	e037883a 	mov	sp,fp
 40003c0:	df000017 	ldw	fp,0(sp)
 40003c4:	dec00104 	addi	sp,sp,4
 40003c8:	f800283a 	ret

040003cc <take_raw_picture_and_send_to_jtag>:


static void  take_raw_picture_and_send_to_jtag(void){
 40003cc:	defffb04 	addi	sp,sp,-20
 40003d0:	dfc00415 	stw	ra,16(sp)
 40003d4:	df000315 	stw	fp,12(sp)
 40003d8:	df000304 	addi	fp,sp,12

	volatile uint32_t * current_image_buffer = swap_buffer();
 40003dc:	40003280 	call	4000328 <swap_buffer>
 40003e0:	e0bffe15 	stw	r2,-8(fp)

	kiss_start(&jtag_kiss);
 40003e4:	01010074 	movhi	r4,1025
 40003e8:	21308004 	addi	r4,r4,-15872
 40003ec:	40018600 	call	4001860 <kiss_start>

	// Inject packet type
	uint8_t packet_type = KISS_PACKET_OPCODES__RAW_IMAGE;
 40003f0:	00bfe0c4 	movi	r2,-125
 40003f4:	e0bfff05 	stb	r2,-4(fp)
	kiss_send_data(&jtag_kiss, &packet_type, 1);
 40003f8:	e0bfff04 	addi	r2,fp,-4
 40003fc:	01800044 	movi	r6,1
 4000400:	100b883a 	mov	r5,r2
 4000404:	01010074 	movhi	r4,1025
 4000408:	21308004 	addi	r4,r4,-15872
 400040c:	40018a40 	call	40018a4 <kiss_send_data>


	uint32_t i;
	for (i = 0; i < IMAGE_SIZE; i++) {
 4000410:	e03ffd15 	stw	zero,-12(fp)
 4000414:	00002506 	br	40004ac <take_raw_picture_and_send_to_jtag+0xe0>

		uint8_t pixel_data[3];

		pixel_data[0] = (current_image_buffer[i] & 0x00FF0000) >> 16;
 4000418:	e0bffd17 	ldw	r2,-12(fp)
 400041c:	1085883a 	add	r2,r2,r2
 4000420:	1085883a 	add	r2,r2,r2
 4000424:	1007883a 	mov	r3,r2
 4000428:	e0bffe17 	ldw	r2,-8(fp)
 400042c:	10c5883a 	add	r2,r2,r3
 4000430:	10800017 	ldw	r2,0(r2)
 4000434:	10803fec 	andhi	r2,r2,255
 4000438:	1004d43a 	srli	r2,r2,16
 400043c:	e0bfff45 	stb	r2,-3(fp)
		pixel_data[1] = (current_image_buffer[i] & 0x0000FF00) >> 8;
 4000440:	e0bffd17 	ldw	r2,-12(fp)
 4000444:	1085883a 	add	r2,r2,r2
 4000448:	1085883a 	add	r2,r2,r2
 400044c:	1007883a 	mov	r3,r2
 4000450:	e0bffe17 	ldw	r2,-8(fp)
 4000454:	10c5883a 	add	r2,r2,r3
 4000458:	10800017 	ldw	r2,0(r2)
 400045c:	10bfc00c 	andi	r2,r2,65280
 4000460:	1004d23a 	srli	r2,r2,8
 4000464:	e0bfff85 	stb	r2,-2(fp)
		pixel_data[2] = (current_image_buffer[i] & 0x000000FF) >> 0;
 4000468:	e0bffd17 	ldw	r2,-12(fp)
 400046c:	1085883a 	add	r2,r2,r2
 4000470:	1085883a 	add	r2,r2,r2
 4000474:	1007883a 	mov	r3,r2
 4000478:	e0bffe17 	ldw	r2,-8(fp)
 400047c:	10c5883a 	add	r2,r2,r3
 4000480:	10800017 	ldw	r2,0(r2)
 4000484:	e0bfffc5 	stb	r2,-1(fp)

		kiss_send_data(&jtag_kiss, pixel_data, 3);
 4000488:	e0bfff44 	addi	r2,fp,-3
 400048c:	018000c4 	movi	r6,3
 4000490:	100b883a 	mov	r5,r2
 4000494:	01010074 	movhi	r4,1025
 4000498:	21308004 	addi	r4,r4,-15872
 400049c:	40018a40 	call	40018a4 <kiss_send_data>
	uint8_t packet_type = KISS_PACKET_OPCODES__RAW_IMAGE;
	kiss_send_data(&jtag_kiss, &packet_type, 1);


	uint32_t i;
	for (i = 0; i < IMAGE_SIZE; i++) {
 40004a0:	e0bffd17 	ldw	r2,-12(fp)
 40004a4:	10800044 	addi	r2,r2,1
 40004a8:	e0bffd15 	stw	r2,-12(fp)
 40004ac:	e0fffd17 	ldw	r3,-12(fp)
 40004b0:	00800174 	movhi	r2,5
 40004b4:	10abffc4 	addi	r2,r2,-20481
 40004b8:	10ffd72e 	bgeu	r2,r3,4000418 <__alt_data_end+0xfc000418>

		kiss_send_data(&jtag_kiss, pixel_data, 3);

	}

	kiss_end(&jtag_kiss);
 40004bc:	01010074 	movhi	r4,1025
 40004c0:	21308004 	addi	r4,r4,-15872
 40004c4:	40019d00 	call	40019d0 <kiss_end>
}
 40004c8:	0001883a 	nop
 40004cc:	e037883a 	mov	sp,fp
 40004d0:	dfc00117 	ldw	ra,4(sp)
 40004d4:	df000017 	ldw	fp,0(sp)
 40004d8:	dec00204 	addi	sp,sp,8
 40004dc:	f800283a 	ret

040004e0 <jpeg_jtag_send>:

static void jpeg_jtag_send(void* context, void* data, int size) {
 40004e0:	defffb04 	addi	sp,sp,-20
 40004e4:	dfc00415 	stw	ra,16(sp)
 40004e8:	df000315 	stw	fp,12(sp)
 40004ec:	df000304 	addi	fp,sp,12
 40004f0:	e13ffd15 	stw	r4,-12(fp)
 40004f4:	e17ffe15 	stw	r5,-8(fp)
 40004f8:	e1bfff15 	stw	r6,-4(fp)

	kiss_send_data(&jtag_kiss, data, size);
 40004fc:	e0bfff17 	ldw	r2,-4(fp)
 4000500:	100d883a 	mov	r6,r2
 4000504:	e17ffe17 	ldw	r5,-8(fp)
 4000508:	01010074 	movhi	r4,1025
 400050c:	21308004 	addi	r4,r4,-15872
 4000510:	40018a40 	call	40018a4 <kiss_send_data>

};
 4000514:	0001883a 	nop
 4000518:	e037883a 	mov	sp,fp
 400051c:	dfc00117 	ldw	ra,4(sp)
 4000520:	df000017 	ldw	fp,0(sp)
 4000524:	dec00204 	addi	sp,sp,8
 4000528:	f800283a 	ret

0400052c <read_uptime>:
/**
 * Gets system uptime in ms
 *
 * @return uptime in ms
 */
static uint32_t read_uptime(void){
 400052c:	deffff04 	addi	sp,sp,-4
 4000530:	df000015 	stw	fp,0(sp)
 4000534:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(UPTIME_BASE);
 4000538:	00820034 	movhi	r2,2048
 400053c:	10840004 	addi	r2,r2,4096
 4000540:	10800037 	ldwio	r2,0(r2)

}
 4000544:	e037883a 	mov	sp,fp
 4000548:	df000017 	ldw	fp,0(sp)
 400054c:	dec00104 	addi	sp,sp,4
 4000550:	f800283a 	ret

04000554 <read_line_detect>:
 *************************************************/

PID_t drive_pid;
PID_t yaw_pid;

static uint32_t read_line_detect(void){
 4000554:	deffff04 	addi	sp,sp,-4
 4000558:	df000015 	stw	fp,0(sp)
 400055c:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(LINE_DETECT_BASE);
 4000560:	00820034 	movhi	r2,2048
 4000564:	10842804 	addi	r2,r2,4256
 4000568:	10800037 	ldwio	r2,0(r2)

}
 400056c:	e037883a 	mov	sp,fp
 4000570:	df000017 	ldw	fp,0(sp)
 4000574:	dec00104 	addi	sp,sp,4
 4000578:	f800283a 	ret

0400057c <read_encoder_left>:
/**
 * Reads the left encoder ticks
 *
 * @return left encoder ticks
 */
static int32_t read_encoder_left(void){
 400057c:	deffff04 	addi	sp,sp,-4
 4000580:	df000015 	stw	fp,0(sp)
 4000584:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(ENCODER_LEFT_BASE);
 4000588:	00820034 	movhi	r2,2048
 400058c:	10840c04 	addi	r2,r2,4144
 4000590:	10800037 	ldwio	r2,0(r2)

}
 4000594:	e037883a 	mov	sp,fp
 4000598:	df000017 	ldw	fp,0(sp)
 400059c:	dec00104 	addi	sp,sp,4
 40005a0:	f800283a 	ret

040005a4 <read_encoder_right>:
/**
 * Reads the right encoder ticks
 *
 * @return right encoder ticks
 */
static int32_t read_encoder_right(void){
 40005a4:	deffff04 	addi	sp,sp,-4
 40005a8:	df000015 	stw	fp,0(sp)
 40005ac:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(ENCODER_RIGHT_BASE);
 40005b0:	00820034 	movhi	r2,2048
 40005b4:	10841004 	addi	r2,r2,4160
 40005b8:	10800037 	ldwio	r2,0(r2)

}
 40005bc:	e037883a 	mov	sp,fp
 40005c0:	df000017 	ldw	fp,0(sp)
 40005c4:	dec00104 	addi	sp,sp,4
 40005c8:	f800283a 	ret

040005cc <set_motors>:
 * Sets the motors forward/reverse and speed reference using a -255 to 255 pwm output for each motor
 *
 * @param speed_left The desired PWM control signal for the left motor
 * @param speed_left The desired PWM control signal for the right motor
 */
static void set_motors(int16_t speed_left, int16_t speed_right){
 40005cc:	defffb04 	addi	sp,sp,-20
 40005d0:	df000415 	stw	fp,16(sp)
 40005d4:	df000404 	addi	fp,sp,16
 40005d8:	2007883a 	mov	r3,r4
 40005dc:	2805883a 	mov	r2,r5
 40005e0:	e0fffe0d 	sth	r3,-8(fp)
 40005e4:	e0bfff0d 	sth	r2,-4(fp)

	uint32_t motor_direction = 0;
 40005e8:	e03ffc15 	stw	zero,-16(fp)

	if(speed_left == 0){               // Stop left motor if input 0
 40005ec:	e0bffe0f 	ldh	r2,-8(fp)
 40005f0:	10000c26 	beq	r2,zero,4000624 <set_motors+0x58>
		motor_direction |= 0b00;
	} else if(speed_left < 0){
 40005f4:	e0bffe0f 	ldh	r2,-8(fp)
 40005f8:	1000070e 	bge	r2,zero,4000618 <set_motors+0x4c>
		motor_direction |= 0b01;
 40005fc:	e0bffc17 	ldw	r2,-16(fp)
 4000600:	10800054 	ori	r2,r2,1
 4000604:	e0bffc15 	stw	r2,-16(fp)
		speed_left *= -1;
 4000608:	e0bffe0b 	ldhu	r2,-8(fp)
 400060c:	0085c83a 	sub	r2,zero,r2
 4000610:	e0bffe0d 	sth	r2,-8(fp)
 4000614:	00000306 	br	4000624 <set_motors+0x58>
	} else {
		motor_direction |= 0b10;
 4000618:	e0bffc17 	ldw	r2,-16(fp)
 400061c:	10800094 	ori	r2,r2,2
 4000620:	e0bffc15 	stw	r2,-16(fp)
	}

	if(speed_right == 0){              // Stop right motor if input 0
 4000624:	e0bfff0f 	ldh	r2,-4(fp)
 4000628:	10000c26 	beq	r2,zero,400065c <set_motors+0x90>
		motor_direction |= 0b0000;
	} else if(speed_right < 0){
 400062c:	e0bfff0f 	ldh	r2,-4(fp)
 4000630:	1000070e 	bge	r2,zero,4000650 <set_motors+0x84>
		motor_direction |= 0b1000;
 4000634:	e0bffc17 	ldw	r2,-16(fp)
 4000638:	10800214 	ori	r2,r2,8
 400063c:	e0bffc15 	stw	r2,-16(fp)
		speed_right *= -1;
 4000640:	e0bfff0b 	ldhu	r2,-4(fp)
 4000644:	0085c83a 	sub	r2,zero,r2
 4000648:	e0bfff0d 	sth	r2,-4(fp)
 400064c:	00000306 	br	400065c <set_motors+0x90>
	} else {
		motor_direction |= 0b0100;
 4000650:	e0bffc17 	ldw	r2,-16(fp)
 4000654:	10800114 	ori	r2,r2,4
 4000658:	e0bffc15 	stw	r2,-16(fp)
	}

	// Set motor directions
	IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_DIRECTION_BASE, motor_direction);
 400065c:	e0fffc17 	ldw	r3,-16(fp)
 4000660:	00820034 	movhi	r2,2048
 4000664:	10840804 	addi	r2,r2,4128
 4000668:	10c00035 	stwio	r3,0(r2)

	// Set the PWM values
	volatile uint32_t pwm_command = ( ((uint32_t)speed_right) << 8) | ((uint32_t)speed_left);
 400066c:	e0bfff0f 	ldh	r2,-4(fp)
 4000670:	1006923a 	slli	r3,r2,8
 4000674:	e0bffe0f 	ldh	r2,-8(fp)
 4000678:	1884b03a 	or	r2,r3,r2
 400067c:	e0bffd15 	stw	r2,-12(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM_BASE, pwm_command);
 4000680:	e0bffd17 	ldw	r2,-12(fp)
 4000684:	1007883a 	mov	r3,r2
 4000688:	00820034 	movhi	r2,2048
 400068c:	10841404 	addi	r2,r2,4176
 4000690:	10c00035 	stwio	r3,0(r2)

}
 4000694:	0001883a 	nop
 4000698:	e037883a 	mov	sp,fp
 400069c:	df000017 	ldw	fp,0(sp)
 40006a0:	dec00104 	addi	sp,sp,4
 40006a4:	f800283a 	ret

040006a8 <scale_output>:
/**
 * Scales the PWM value from max scale ot match the maximum possible motor speed
 *
 * @param output The desired PWM control signal for the motor before scaling
 */
double scale_output(double output){
 40006a8:	defffc04 	addi	sp,sp,-16
 40006ac:	dfc00315 	stw	ra,12(sp)
 40006b0:	df000215 	stw	fp,8(sp)
 40006b4:	df000204 	addi	fp,sp,8
 40006b8:	e13ffe15 	stw	r4,-8(fp)
 40006bc:	e17fff15 	stw	r5,-4(fp)

  return output * (maxPWM / 255.0);
 40006c0:	00bff704 	movi	r2,-36
 40006c4:	10803fcc 	andi	r2,r2,255
 40006c8:	1009883a 	mov	r4,r2
 40006cc:	40058bc0 	call	40058bc <__floatsidf>
 40006d0:	1011883a 	mov	r8,r2
 40006d4:	1813883a 	mov	r9,r3
 40006d8:	000d883a 	mov	r6,zero
 40006dc:	01d01c34 	movhi	r7,16496
 40006e0:	39f80004 	addi	r7,r7,-8192
 40006e4:	4009883a 	mov	r4,r8
 40006e8:	480b883a 	mov	r5,r9
 40006ec:	4003b340 	call	4003b34 <__divdf3>
 40006f0:	1009883a 	mov	r4,r2
 40006f4:	180b883a 	mov	r5,r3
 40006f8:	2005883a 	mov	r2,r4
 40006fc:	2807883a 	mov	r3,r5
 4000700:	e1bffe17 	ldw	r6,-8(fp)
 4000704:	e1ffff17 	ldw	r7,-4(fp)
 4000708:	1009883a 	mov	r4,r2
 400070c:	180b883a 	mov	r5,r3
 4000710:	40046d40 	call	40046d4 <__muldf3>
 4000714:	100f883a 	mov	r7,r2
 4000718:	1811883a 	mov	r8,r3
 400071c:	380b883a 	mov	r5,r7
 4000720:	400d883a 	mov	r6,r8
 4000724:	2807883a 	mov	r3,r5
 4000728:	3009883a 	mov	r4,r6

}
 400072c:	1805883a 	mov	r2,r3
 4000730:	2007883a 	mov	r3,r4
 4000734:	e037883a 	mov	sp,fp
 4000738:	dfc00117 	ldw	ra,4(sp)
 400073c:	df000017 	ldw	fp,0(sp)
 4000740:	dec00204 	addi	sp,sp,8
 4000744:	f800283a 	ret

04000748 <normalize_output>:
 * the zone where the motor jumps, opting for a higher minimum speed before
 * cutoff
 *
 * @param output The desired PWM control signal for the motor before correction
 */
int normalize_output(double output){
 4000748:	defffb04 	addi	sp,sp,-20
 400074c:	dfc00415 	stw	ra,16(sp)
 4000750:	df000315 	stw	fp,12(sp)
 4000754:	dc000215 	stw	r16,8(sp)
 4000758:	df000304 	addi	fp,sp,12
 400075c:	e13ffd15 	stw	r4,-12(fp)
 4000760:	e17ffe15 	stw	r5,-8(fp)

  output = max(min(output, 255.0), -255.0);
 4000764:	000d883a 	mov	r6,zero
 4000768:	01d01c34 	movhi	r7,16496
 400076c:	39f80004 	addi	r7,r7,-8192
 4000770:	e13ffd17 	ldw	r4,-12(fp)
 4000774:	e17ffe17 	ldw	r5,-8(fp)
 4000778:	40045e00 	call	40045e0 <__ledf2>
 400077c:	10000a0e 	bge	r2,zero,40007a8 <normalize_output+0x60>
 4000780:	04000044 	movi	r16,1
 4000784:	000d883a 	mov	r6,zero
 4000788:	01f01c34 	movhi	r7,49264
 400078c:	39f80004 	addi	r7,r7,-8192
 4000790:	e13ffd17 	ldw	r4,-12(fp)
 4000794:	e17ffe17 	ldw	r5,-8(fp)
 4000798:	40045040 	call	4004504 <__gedf2>
 400079c:	00800316 	blt	zero,r2,40007ac <normalize_output+0x64>
 40007a0:	0021883a 	mov	r16,zero
 40007a4:	00000106 	br	40007ac <normalize_output+0x64>
 40007a8:	04000044 	movi	r16,1
 40007ac:	80803fcc 	andi	r2,r16,255
 40007b0:	10000e26 	beq	r2,zero,40007ec <normalize_output+0xa4>
 40007b4:	000d883a 	mov	r6,zero
 40007b8:	01d01c34 	movhi	r7,16496
 40007bc:	39f80004 	addi	r7,r7,-8192
 40007c0:	e13ffd17 	ldw	r4,-12(fp)
 40007c4:	e17ffe17 	ldw	r5,-8(fp)
 40007c8:	40045e00 	call	40045e0 <__ledf2>
 40007cc:	1000030e 	bge	r2,zero,40007dc <normalize_output+0x94>
 40007d0:	e0bffd17 	ldw	r2,-12(fp)
 40007d4:	e0fffe17 	ldw	r3,-8(fp)
 40007d8:	00000706 	br	40007f8 <normalize_output+0xb0>
 40007dc:	0005883a 	mov	r2,zero
 40007e0:	00d01c34 	movhi	r3,16496
 40007e4:	18f80004 	addi	r3,r3,-8192
 40007e8:	00000306 	br	40007f8 <normalize_output+0xb0>
 40007ec:	0005883a 	mov	r2,zero
 40007f0:	00f01c34 	movhi	r3,49264
 40007f4:	18f80004 	addi	r3,r3,-8192
 40007f8:	e0bffd15 	stw	r2,-12(fp)
 40007fc:	e0fffe15 	stw	r3,-8(fp)

  if( output < minimum_zero && output > -1 * minimum_zero){
 4000800:	00800044 	movi	r2,1
 4000804:	10803fcc 	andi	r2,r2,255
 4000808:	1009883a 	mov	r4,r2
 400080c:	40058bc0 	call	40058bc <__floatsidf>
 4000810:	1011883a 	mov	r8,r2
 4000814:	1813883a 	mov	r9,r3
 4000818:	e1bffd17 	ldw	r6,-12(fp)
 400081c:	e1fffe17 	ldw	r7,-8(fp)
 4000820:	4009883a 	mov	r4,r8
 4000824:	480b883a 	mov	r5,r9
 4000828:	40045040 	call	4004504 <__gedf2>
 400082c:	0080100e 	bge	zero,r2,4000870 <normalize_output+0x128>
 4000830:	00800044 	movi	r2,1
 4000834:	10803fcc 	andi	r2,r2,255
 4000838:	0085c83a 	sub	r2,zero,r2
 400083c:	1009883a 	mov	r4,r2
 4000840:	40058bc0 	call	40058bc <__floatsidf>
 4000844:	1011883a 	mov	r8,r2
 4000848:	1813883a 	mov	r9,r3
 400084c:	e1bffd17 	ldw	r6,-12(fp)
 4000850:	e1fffe17 	ldw	r7,-8(fp)
 4000854:	4009883a 	mov	r4,r8
 4000858:	480b883a 	mov	r5,r9
 400085c:	40045e00 	call	40045e0 <__ledf2>
 4000860:	1000030e 	bge	r2,zero,4000870 <normalize_output+0x128>

    output = 0;
 4000864:	e03ffd15 	stw	zero,-12(fp)
 4000868:	e03ffe15 	stw	zero,-8(fp)
 400086c:	00003106 	br	4000934 <normalize_output+0x1ec>

  } else if( output < minimum_stable_pwm && output > -1 * minimum_stable_pwm ){
 4000870:	00800f04 	movi	r2,60
 4000874:	10803fcc 	andi	r2,r2,255
 4000878:	1009883a 	mov	r4,r2
 400087c:	40058bc0 	call	40058bc <__floatsidf>
 4000880:	1011883a 	mov	r8,r2
 4000884:	1813883a 	mov	r9,r3
 4000888:	e1bffd17 	ldw	r6,-12(fp)
 400088c:	e1fffe17 	ldw	r7,-8(fp)
 4000890:	4009883a 	mov	r4,r8
 4000894:	480b883a 	mov	r5,r9
 4000898:	40045040 	call	4004504 <__gedf2>
 400089c:	0080250e 	bge	zero,r2,4000934 <normalize_output+0x1ec>
 40008a0:	00800f04 	movi	r2,60
 40008a4:	10803fcc 	andi	r2,r2,255
 40008a8:	0085c83a 	sub	r2,zero,r2
 40008ac:	1009883a 	mov	r4,r2
 40008b0:	40058bc0 	call	40058bc <__floatsidf>
 40008b4:	1011883a 	mov	r8,r2
 40008b8:	1813883a 	mov	r9,r3
 40008bc:	e1bffd17 	ldw	r6,-12(fp)
 40008c0:	e1fffe17 	ldw	r7,-8(fp)
 40008c4:	4009883a 	mov	r4,r8
 40008c8:	480b883a 	mov	r5,r9
 40008cc:	40045e00 	call	40045e0 <__ledf2>
 40008d0:	1000180e 	bge	r2,zero,4000934 <normalize_output+0x1ec>

    if(output > 0){
 40008d4:	000d883a 	mov	r6,zero
 40008d8:	000f883a 	mov	r7,zero
 40008dc:	e13ffd17 	ldw	r4,-12(fp)
 40008e0:	e17ffe17 	ldw	r5,-8(fp)
 40008e4:	40045040 	call	4004504 <__gedf2>
 40008e8:	0080090e 	bge	zero,r2,4000910 <normalize_output+0x1c8>
      output = minimum_stable_pwm;
 40008ec:	00800f04 	movi	r2,60
 40008f0:	10803fcc 	andi	r2,r2,255
 40008f4:	1009883a 	mov	r4,r2
 40008f8:	40059980 	call	4005998 <__floatunsidf>
 40008fc:	1009883a 	mov	r4,r2
 4000900:	180b883a 	mov	r5,r3
 4000904:	e13ffd15 	stw	r4,-12(fp)
 4000908:	e17ffe15 	stw	r5,-8(fp)
 400090c:	00000906 	br	4000934 <normalize_output+0x1ec>
    } else {
      output = -1 * minimum_stable_pwm;
 4000910:	00800f04 	movi	r2,60
 4000914:	10803fcc 	andi	r2,r2,255
 4000918:	0085c83a 	sub	r2,zero,r2
 400091c:	1009883a 	mov	r4,r2
 4000920:	40058bc0 	call	40058bc <__floatsidf>
 4000924:	1009883a 	mov	r4,r2
 4000928:	180b883a 	mov	r5,r3
 400092c:	e13ffd15 	stw	r4,-12(fp)
 4000930:	e17ffe15 	stw	r5,-8(fp)
    }

  }

  return output;
 4000934:	e13ffd17 	ldw	r4,-12(fp)
 4000938:	e17ffe17 	ldw	r5,-8(fp)
 400093c:	400583c0 	call	400583c <__fixdfsi>

}
 4000940:	e6ffff04 	addi	sp,fp,-4
 4000944:	dfc00217 	ldw	ra,8(sp)
 4000948:	df000117 	ldw	fp,4(sp)
 400094c:	dc000017 	ldw	r16,0(sp)
 4000950:	dec00304 	addi	sp,sp,12
 4000954:	f800283a 	ret

04000958 <motor_init>:

// Init motor pin states
static void motor_init(void){
 4000958:	defffe04 	addi	sp,sp,-8
 400095c:	dfc00115 	stw	ra,4(sp)
 4000960:	df000015 	stw	fp,0(sp)
 4000964:	d839883a 	mov	fp,sp
	// Default state to motors not enabled
	//digitalWrite(pinCW_Left, LOW);   // stop clockwise
	//digitalWrite(pinCC_Left, LOW);   // stop counter-clockwise

	// Stop motors
	set_motors(0, 0);
 4000968:	000b883a 	mov	r5,zero
 400096c:	0009883a 	mov	r4,zero
 4000970:	40005cc0 	call	40005cc <set_motors>
	* when the drive PID is at full output.
	*/

	// Setup the Drive PID

	drive_pid.kp   = 15;
 4000974:	00810074 	movhi	r2,1025
 4000978:	10b0a804 	addi	r2,r2,-15712
 400097c:	00d05c34 	movhi	r3,16752
 4000980:	10c00315 	stw	r3,12(r2)
	drive_pid.ki   = 0;
 4000984:	00810074 	movhi	r2,1025
 4000988:	10b0a804 	addi	r2,r2,-15712
 400098c:	10000415 	stw	zero,16(r2)
	drive_pid.kd   = 2;
 4000990:	00810074 	movhi	r2,1025
 4000994:	10b0a804 	addi	r2,r2,-15712
 4000998:	00d00034 	movhi	r3,16384
 400099c:	10c00515 	stw	r3,20(r2)
	drive_pid.max  =  120;					// Limit range to -128 to 128
 40009a0:	00810074 	movhi	r2,1025
 40009a4:	10b0a804 	addi	r2,r2,-15712
 40009a8:	00d0bc34 	movhi	r3,17136
 40009ac:	10c00715 	stw	r3,28(r2)
	drive_pid.min  = -120;
 40009b0:	00810074 	movhi	r2,1025
 40009b4:	10b0a804 	addi	r2,r2,-15712
 40009b8:	00f0bc34 	movhi	r3,49904
 40009bc:	10c00815 	stw	r3,32(r2)
	drive_pid.mode = FORWARD;
 40009c0:	00810074 	movhi	r2,1025
 40009c4:	10b0a804 	addi	r2,r2,-15712
 40009c8:	10000915 	stw	zero,36(r2)
	//drive_pid.SetSampleTime(20);          // 50 Hz update rate

	// Setup the Yaw PID
	yaw_pid.kp   = 20;
 40009cc:	00810074 	movhi	r2,1025
 40009d0:	10b09e04 	addi	r2,r2,-15752
 40009d4:	00d06834 	movhi	r3,16800
 40009d8:	10c00315 	stw	r3,12(r2)
	yaw_pid.ki   = 0;
 40009dc:	00810074 	movhi	r2,1025
 40009e0:	10b09e04 	addi	r2,r2,-15752
 40009e4:	10000415 	stw	zero,16(r2)
	yaw_pid.kd   = 2;
 40009e8:	00810074 	movhi	r2,1025
 40009ec:	10b09e04 	addi	r2,r2,-15752
 40009f0:	00d00034 	movhi	r3,16384
 40009f4:	10c00515 	stw	r3,20(r2)
	yaw_pid.max  =  140;
 40009f8:	00810074 	movhi	r2,1025
 40009fc:	10b09e04 	addi	r2,r2,-15752
 4000a00:	00d0c334 	movhi	r3,17164
 4000a04:	10c00715 	stw	r3,28(r2)
	yaw_pid.min  = -140;
 4000a08:	00810074 	movhi	r2,1025
 4000a0c:	10b09e04 	addi	r2,r2,-15752
 4000a10:	00f0c334 	movhi	r3,49932
 4000a14:	10c00815 	stw	r3,32(r2)
	yaw_pid.mode = REVERSE;
 4000a18:	00810074 	movhi	r2,1025
 4000a1c:	10b09e04 	addi	r2,r2,-15752
 4000a20:	00c00044 	movi	r3,1
 4000a24:	10c00915 	stw	r3,36(r2)

}
 4000a28:	0001883a 	nop
 4000a2c:	e037883a 	mov	sp,fp
 4000a30:	dfc00117 	ldw	ra,4(sp)
 4000a34:	df000017 	ldw	fp,0(sp)
 4000a38:	dec00204 	addi	sp,sp,8
 4000a3c:	f800283a 	ret

04000a40 <wait_button_press>:
	.num_states = 1,
	.drive_changes = right_drive_changes,
	.yaw_changes = right_yaw_changes
};

static void wait_button_press(void){
 4000a40:	defffe04 	addi	sp,sp,-8
 4000a44:	dfc00115 	stw	ra,4(sp)
 4000a48:	df000015 	stw	fp,0(sp)
 4000a4c:	d839883a 	mov	fp,sp

	// wait for ON switch
	while ( ( IORD_ALTERA_AVALON_PIO_DATA(ON_BUTTON_BASE) & 1 )  == 0){
 4000a50:	00000206 	br	4000a5c <wait_button_press+0x1c>
		usleep(1000);
 4000a54:	0100fa04 	movi	r4,1000
 4000a58:	40063400 	call	4006340 <usleep>
};

static void wait_button_press(void){

	// wait for ON switch
	while ( ( IORD_ALTERA_AVALON_PIO_DATA(ON_BUTTON_BASE) & 1 )  == 0){
 4000a5c:	00820034 	movhi	r2,2048
 4000a60:	10840404 	addi	r2,r2,4112
 4000a64:	10800037 	ldwio	r2,0(r2)
 4000a68:	1080004c 	andi	r2,r2,1
 4000a6c:	103ff926 	beq	r2,zero,4000a54 <__alt_data_end+0xfc000a54>
		usleep(1000);
	}

}
 4000a70:	0001883a 	nop
 4000a74:	e037883a 	mov	sp,fp
 4000a78:	dfc00117 	ldw	ra,4(sp)
 4000a7c:	df000017 	ldw	fp,0(sp)
 4000a80:	dec00204 	addi	sp,sp,8
 4000a84:	f800283a 	ret

04000a88 <motor_control_loop>:
static void motor_control_loop(control_t * instructions, bool wait){
 4000a88:	deffec04 	addi	sp,sp,-80
 4000a8c:	dfc01315 	stw	ra,76(sp)
 4000a90:	df001215 	stw	fp,72(sp)
 4000a94:	dc401115 	stw	r17,68(sp)
 4000a98:	dc001015 	stw	r16,64(sp)
 4000a9c:	df001204 	addi	fp,sp,72
 4000aa0:	e13ffc15 	stw	r4,-16(fp)
 4000aa4:	2805883a 	mov	r2,r5
 4000aa8:	e0bffd05 	stb	r2,-12(fp)

	motor_init();
 4000aac:	40009580 	call	4000958 <motor_init>

	//  Initialize drive and yaw setpoints to 0
	drive_pid.setpoint = 0.0f;
 4000ab0:	00810074 	movhi	r2,1025
 4000ab4:	10b0a804 	addi	r2,r2,-15712
 4000ab8:	10000015 	stw	zero,0(r2)
	yaw_pid.setpoint = 0.0f;
 4000abc:	00810074 	movhi	r2,1025
 4000ac0:	10b09e04 	addi	r2,r2,-15752
 4000ac4:	10000015 	stw	zero,0(r2)

	// State machine variables to allow transition between pre-programmed motions
	int state = 0;
 4000ac8:	e03fee15 	stw	zero,-72(fp)
	bool state_change = false;
 4000acc:	e03fef05 	stb	zero,-68(fp)

	// State machine finished, allows exiting of task loop to wait for another switch press to run again
	bool done = false;
 4000ad0:	e03fef45 	stb	zero,-67(fp)

	if(wait){
 4000ad4:	e0bffd03 	ldbu	r2,-12(fp)
 4000ad8:	10000126 	beq	r2,zero,4000ae0 <motor_control_loop+0x58>
		wait_button_press();
 4000adc:	4000a400 	call	4000a40 <wait_button_press>
	}

	usleep(100000);    // Allow user to step away before robot moves
 4000ae0:	010000b4 	movhi	r4,2
 4000ae4:	2121a804 	addi	r4,r4,-31072
 4000ae8:	40063400 	call	4006340 <usleep>

	// Reset state variables
	done = false;
 4000aec:	e03fef45 	stb	zero,-67(fp)
	state = 0;
 4000af0:	e03fee15 	stw	zero,-72(fp)

	// setup encoder offsets
	float left_offset = read_encoder_left() / 1000.0f;
 4000af4:	400057c0 	call	400057c <read_encoder_left>
 4000af8:	1009883a 	mov	r4,r2
 4000afc:	40031640 	call	4003164 <__floatsisf>
 4000b00:	1007883a 	mov	r3,r2
 4000b04:	01511eb4 	movhi	r5,17530
 4000b08:	1809883a 	mov	r4,r3
 4000b0c:	400228c0 	call	400228c <__divsf3>
 4000b10:	1007883a 	mov	r3,r2
 4000b14:	e0fff115 	stw	r3,-60(fp)
	float right_offset = read_encoder_right() / 1000.0f;
 4000b18:	40005a40 	call	40005a4 <read_encoder_right>
 4000b1c:	1009883a 	mov	r4,r2
 4000b20:	40031640 	call	4003164 <__floatsisf>
 4000b24:	1007883a 	mov	r3,r2
 4000b28:	01511eb4 	movhi	r5,17530
 4000b2c:	1809883a 	mov	r4,r3
 4000b30:	400228c0 	call	400228c <__divsf3>
 4000b34:	1007883a 	mov	r3,r2
 4000b38:	e0fff215 	stw	r3,-56(fp)

	// reset state
	drive_pid.setpoint = 0.0f;
 4000b3c:	00810074 	movhi	r2,1025
 4000b40:	10b0a804 	addi	r2,r2,-15712
 4000b44:	10000015 	stw	zero,0(r2)
	yaw_pid.setpoint = 0.0f;
 4000b48:	00810074 	movhi	r2,1025
 4000b4c:	10b09e04 	addi	r2,r2,-15752
 4000b50:	10000015 	stw	zero,0(r2)

	float last_time = read_uptime() / 1000.0;
 4000b54:	400052c0 	call	400052c <read_uptime>
 4000b58:	1009883a 	mov	r4,r2
 4000b5c:	40059980 	call	4005998 <__floatunsidf>
 4000b60:	1011883a 	mov	r8,r2
 4000b64:	1813883a 	mov	r9,r3
 4000b68:	000d883a 	mov	r6,zero
 4000b6c:	01d023f4 	movhi	r7,16527
 4000b70:	39d00004 	addi	r7,r7,16384
 4000b74:	4009883a 	mov	r4,r8
 4000b78:	480b883a 	mov	r5,r9
 4000b7c:	4003b340 	call	4003b34 <__divdf3>
 4000b80:	1009883a 	mov	r4,r2
 4000b84:	180b883a 	mov	r5,r3
 4000b88:	2005883a 	mov	r2,r4
 4000b8c:	2807883a 	mov	r3,r5
 4000b90:	1009883a 	mov	r4,r2
 4000b94:	180b883a 	mov	r5,r3
 4000b98:	4005b500 	call	4005b50 <__truncdfsf2>
 4000b9c:	1007883a 	mov	r3,r2
 4000ba0:	e0fff015 	stw	r3,-64(fp)

	// Run control loops while robot is operating
	while(!done){
 4000ba4:	00010706 	br	4000fc4 <motor_control_loop+0x53c>

		float uptime = read_uptime() / 1000.0;
 4000ba8:	400052c0 	call	400052c <read_uptime>
 4000bac:	1009883a 	mov	r4,r2
 4000bb0:	40059980 	call	4005998 <__floatunsidf>
 4000bb4:	1011883a 	mov	r8,r2
 4000bb8:	1813883a 	mov	r9,r3
 4000bbc:	000d883a 	mov	r6,zero
 4000bc0:	01d023f4 	movhi	r7,16527
 4000bc4:	39d00004 	addi	r7,r7,16384
 4000bc8:	4009883a 	mov	r4,r8
 4000bcc:	480b883a 	mov	r5,r9
 4000bd0:	4003b340 	call	4003b34 <__divdf3>
 4000bd4:	1009883a 	mov	r4,r2
 4000bd8:	180b883a 	mov	r5,r3
 4000bdc:	2005883a 	mov	r2,r4
 4000be0:	2807883a 	mov	r3,r5
 4000be4:	1009883a 	mov	r4,r2
 4000be8:	180b883a 	mov	r5,r3
 4000bec:	4005b500 	call	4005b50 <__truncdfsf2>
 4000bf0:	1007883a 	mov	r3,r2
 4000bf4:	e0fff315 	stw	r3,-52(fp)

		float dt = uptime - last_time;
 4000bf8:	e17ff017 	ldw	r5,-64(fp)
 4000bfc:	e13ff317 	ldw	r4,-52(fp)
 4000c00:	4002c800 	call	4002c80 <__subsf3>
 4000c04:	1007883a 	mov	r3,r2
 4000c08:	e0fff415 	stw	r3,-48(fp)

		// scale encoder outputs to be more consistent with PID gains
		float left_value = ( read_encoder_left() / 1000.0f ) - left_offset;
 4000c0c:	400057c0 	call	400057c <read_encoder_left>
 4000c10:	1009883a 	mov	r4,r2
 4000c14:	40031640 	call	4003164 <__floatsisf>
 4000c18:	1007883a 	mov	r3,r2
 4000c1c:	01511eb4 	movhi	r5,17530
 4000c20:	1809883a 	mov	r4,r3
 4000c24:	400228c0 	call	400228c <__divsf3>
 4000c28:	1007883a 	mov	r3,r2
 4000c2c:	1805883a 	mov	r2,r3
 4000c30:	e17ff117 	ldw	r5,-60(fp)
 4000c34:	1009883a 	mov	r4,r2
 4000c38:	4002c800 	call	4002c80 <__subsf3>
 4000c3c:	1007883a 	mov	r3,r2
 4000c40:	e0fff515 	stw	r3,-44(fp)
		float right_value = ( read_encoder_right() / 1000.0f ) - right_offset;
 4000c44:	40005a40 	call	40005a4 <read_encoder_right>
 4000c48:	1009883a 	mov	r4,r2
 4000c4c:	40031640 	call	4003164 <__floatsisf>
 4000c50:	1007883a 	mov	r3,r2
 4000c54:	01511eb4 	movhi	r5,17530
 4000c58:	1809883a 	mov	r4,r3
 4000c5c:	400228c0 	call	400228c <__divsf3>
 4000c60:	1007883a 	mov	r3,r2
 4000c64:	1805883a 	mov	r2,r3
 4000c68:	e17ff217 	ldw	r5,-56(fp)
 4000c6c:	1009883a 	mov	r4,r2
 4000c70:	4002c800 	call	4002c80 <__subsf3>
 4000c74:	1007883a 	mov	r3,r2
 4000c78:	e0fff615 	stw	r3,-40(fp)

		// Convert encoder values to Drive and Yaw state values for control
		float drive_value = ( left_value + right_value ) / 2.0f;
 4000c7c:	e17ff617 	ldw	r5,-40(fp)
 4000c80:	e13ff517 	ldw	r4,-44(fp)
 4000c84:	4001dc40 	call	4001dc4 <__addsf3>
 4000c88:	1007883a 	mov	r3,r2
 4000c8c:	1805883a 	mov	r2,r3
 4000c90:	01500034 	movhi	r5,16384
 4000c94:	1009883a 	mov	r4,r2
 4000c98:	400228c0 	call	400228c <__divsf3>
 4000c9c:	1007883a 	mov	r3,r2
 4000ca0:	e0fff715 	stw	r3,-36(fp)
		float yaw_value = left_value - right_value;
 4000ca4:	e17ff617 	ldw	r5,-40(fp)
 4000ca8:	e13ff517 	ldw	r4,-44(fp)
 4000cac:	4002c800 	call	4002c80 <__subsf3>
 4000cb0:	1007883a 	mov	r3,r2
 4000cb4:	e0fff815 	stw	r3,-32(fp)

			kiss_send_packet(&jtag_kiss, (const uint8_t *) states_msg, 9);
		}*/

		// Compute the control efforts from the PID loops
		fp_t drive_output = pid_compute(&drive_pid, drive_value, dt);
 4000cb8:	e1bff417 	ldw	r6,-48(fp)
 4000cbc:	e17ff717 	ldw	r5,-36(fp)
 4000cc0:	01010074 	movhi	r4,1025
 4000cc4:	2130a804 	addi	r4,r4,-15712
 4000cc8:	4001b740 	call	4001b74 <pid_compute>
 4000ccc:	e0bff915 	stw	r2,-28(fp)
		fp_t yaw_output   = pid_compute(&yaw_pid, yaw_value, dt);
 4000cd0:	e1bff417 	ldw	r6,-48(fp)
 4000cd4:	e17ff817 	ldw	r5,-32(fp)
 4000cd8:	01010074 	movhi	r4,1025
 4000cdc:	21309e04 	addi	r4,r4,-15752
 4000ce0:	4001b740 	call	4001b74 <pid_compute>
 4000ce4:	e0bffa15 	stw	r2,-24(fp)

		// Mix the control efforts into the motors
		int16_t left_output = normalize_output(scale_output(drive_output) + scale_output(yaw_output));
 4000ce8:	e13ff917 	ldw	r4,-28(fp)
 4000cec:	4005a400 	call	4005a40 <__extendsfdf2>
 4000cf0:	100b883a 	mov	r5,r2
 4000cf4:	180d883a 	mov	r6,r3
 4000cf8:	2809883a 	mov	r4,r5
 4000cfc:	300b883a 	mov	r5,r6
 4000d00:	40006a80 	call	40006a8 <scale_output>
 4000d04:	1021883a 	mov	r16,r2
 4000d08:	1823883a 	mov	r17,r3
 4000d0c:	e13ffa17 	ldw	r4,-24(fp)
 4000d10:	4005a400 	call	4005a40 <__extendsfdf2>
 4000d14:	100b883a 	mov	r5,r2
 4000d18:	180d883a 	mov	r6,r3
 4000d1c:	2809883a 	mov	r4,r5
 4000d20:	300b883a 	mov	r5,r6
 4000d24:	40006a80 	call	40006a8 <scale_output>
 4000d28:	1009883a 	mov	r4,r2
 4000d2c:	180b883a 	mov	r5,r3
 4000d30:	200d883a 	mov	r6,r4
 4000d34:	280f883a 	mov	r7,r5
 4000d38:	8009883a 	mov	r4,r16
 4000d3c:	880b883a 	mov	r5,r17
 4000d40:	40032880 	call	4003288 <__adddf3>
 4000d44:	1009883a 	mov	r4,r2
 4000d48:	180b883a 	mov	r5,r3
 4000d4c:	2005883a 	mov	r2,r4
 4000d50:	2807883a 	mov	r3,r5
 4000d54:	1009883a 	mov	r4,r2
 4000d58:	180b883a 	mov	r5,r3
 4000d5c:	40007480 	call	4000748 <normalize_output>
 4000d60:	e0bffb0d 	sth	r2,-20(fp)
		int16_t right_output = normalize_output(scale_output(drive_output) - scale_output(yaw_output));
 4000d64:	e13ff917 	ldw	r4,-28(fp)
 4000d68:	4005a400 	call	4005a40 <__extendsfdf2>
 4000d6c:	100b883a 	mov	r5,r2
 4000d70:	180d883a 	mov	r6,r3
 4000d74:	2809883a 	mov	r4,r5
 4000d78:	300b883a 	mov	r5,r6
 4000d7c:	40006a80 	call	40006a8 <scale_output>
 4000d80:	1021883a 	mov	r16,r2
 4000d84:	1823883a 	mov	r17,r3
 4000d88:	e13ffa17 	ldw	r4,-24(fp)
 4000d8c:	4005a400 	call	4005a40 <__extendsfdf2>
 4000d90:	100b883a 	mov	r5,r2
 4000d94:	180d883a 	mov	r6,r3
 4000d98:	2809883a 	mov	r4,r5
 4000d9c:	300b883a 	mov	r5,r6
 4000da0:	40006a80 	call	40006a8 <scale_output>
 4000da4:	1009883a 	mov	r4,r2
 4000da8:	180b883a 	mov	r5,r3
 4000dac:	200d883a 	mov	r6,r4
 4000db0:	280f883a 	mov	r7,r5
 4000db4:	8009883a 	mov	r4,r16
 4000db8:	880b883a 	mov	r5,r17
 4000dbc:	4004f400 	call	4004f40 <__subdf3>
 4000dc0:	1009883a 	mov	r4,r2
 4000dc4:	180b883a 	mov	r5,r3
 4000dc8:	2005883a 	mov	r2,r4
 4000dcc:	2807883a 	mov	r3,r5
 4000dd0:	1009883a 	mov	r4,r2
 4000dd4:	180b883a 	mov	r5,r3
 4000dd8:	40007480 	call	4000748 <normalize_output>
 4000ddc:	e0bffb8d 	sth	r2,-18(fp)

		// send the control efforts to the motors
		set_motors(left_output, right_output);
 4000de0:	e0bffb0f 	ldh	r2,-20(fp)
 4000de4:	e0fffb8f 	ldh	r3,-18(fp)
 4000de8:	180b883a 	mov	r5,r3
 4000dec:	1009883a 	mov	r4,r2
 4000df0:	40005cc0 	call	40005cc <set_motors>

		// Wait for drive and yaw goals to be met, then start a state transition
		if(drive_value < drive_pid.setpoint + TOLERANCE && drive_value > drive_pid.setpoint - TOLERANCE
 4000df4:	00810074 	movhi	r2,1025
 4000df8:	10b0a804 	addi	r2,r2,-15712
 4000dfc:	10c00017 	ldw	r3,0(r2)
 4000e00:	014f7374 	movhi	r5,15821
 4000e04:	29733344 	addi	r5,r5,-13107
 4000e08:	1809883a 	mov	r4,r3
 4000e0c:	4001dc40 	call	4001dc4 <__addsf3>
 4000e10:	1007883a 	mov	r3,r2
 4000e14:	1805883a 	mov	r2,r3
 4000e18:	e17ff717 	ldw	r5,-36(fp)
 4000e1c:	1009883a 	mov	r4,r2
 4000e20:	40026cc0 	call	40026cc <__gesf2>
 4000e24:	00802c0e 	bge	zero,r2,4000ed8 <motor_control_loop+0x450>
 4000e28:	00810074 	movhi	r2,1025
 4000e2c:	10b0a804 	addi	r2,r2,-15712
 4000e30:	10c00017 	ldw	r3,0(r2)
 4000e34:	014f7374 	movhi	r5,15821
 4000e38:	29733344 	addi	r5,r5,-13107
 4000e3c:	1809883a 	mov	r4,r3
 4000e40:	4002c800 	call	4002c80 <__subsf3>
 4000e44:	1007883a 	mov	r3,r2
 4000e48:	1805883a 	mov	r2,r3
 4000e4c:	e17ff717 	ldw	r5,-36(fp)
 4000e50:	1009883a 	mov	r4,r2
 4000e54:	40027880 	call	4002788 <__lesf2>
 4000e58:	10001f0e 	bge	r2,zero,4000ed8 <motor_control_loop+0x450>
		   && yaw_value < yaw_pid.setpoint + TOLERANCE && yaw_value > yaw_pid.setpoint - TOLERANCE){
 4000e5c:	00810074 	movhi	r2,1025
 4000e60:	10b09e04 	addi	r2,r2,-15752
 4000e64:	10c00017 	ldw	r3,0(r2)
 4000e68:	014f7374 	movhi	r5,15821
 4000e6c:	29733344 	addi	r5,r5,-13107
 4000e70:	1809883a 	mov	r4,r3
 4000e74:	4001dc40 	call	4001dc4 <__addsf3>
 4000e78:	1007883a 	mov	r3,r2
 4000e7c:	1805883a 	mov	r2,r3
 4000e80:	e17ff817 	ldw	r5,-32(fp)
 4000e84:	1009883a 	mov	r4,r2
 4000e88:	40026cc0 	call	40026cc <__gesf2>
 4000e8c:	0080120e 	bge	zero,r2,4000ed8 <motor_control_loop+0x450>
 4000e90:	00810074 	movhi	r2,1025
 4000e94:	10b09e04 	addi	r2,r2,-15752
 4000e98:	10c00017 	ldw	r3,0(r2)
 4000e9c:	014f7374 	movhi	r5,15821
 4000ea0:	29733344 	addi	r5,r5,-13107
 4000ea4:	1809883a 	mov	r4,r3
 4000ea8:	4002c800 	call	4002c80 <__subsf3>
 4000eac:	1007883a 	mov	r3,r2
 4000eb0:	1805883a 	mov	r2,r3
 4000eb4:	e17ff817 	ldw	r5,-32(fp)
 4000eb8:	1009883a 	mov	r4,r2
 4000ebc:	40027880 	call	4002788 <__lesf2>
 4000ec0:	1000050e 	bge	r2,zero,4000ed8 <motor_control_loop+0x450>
			state++;
 4000ec4:	e0bfee17 	ldw	r2,-72(fp)
 4000ec8:	10800044 	addi	r2,r2,1
 4000ecc:	e0bfee15 	stw	r2,-72(fp)
			state_change = true;
 4000ed0:	00800044 	movi	r2,1
 4000ed4:	e0bfef05 	stb	r2,-68(fp)
		}

		// Switch states to perform a figure 8 motion
		if(state_change){
 4000ed8:	e0bfef03 	ldbu	r2,-68(fp)
 4000edc:	10003726 	beq	r2,zero,4000fbc <motor_control_loop+0x534>

			if(state == ( instructions->num_states + 1) ){
 4000ee0:	e0bffc17 	ldw	r2,-16(fp)
 4000ee4:	1080000b 	ldhu	r2,0(r2)
 4000ee8:	10bfffcc 	andi	r2,r2,65535
 4000eec:	10c00044 	addi	r3,r2,1
 4000ef0:	e0bfee17 	ldw	r2,-72(fp)
 4000ef4:	1880061e 	bne	r3,r2,4000f10 <motor_control_loop+0x488>
				set_motors(0, 0);
 4000ef8:	000b883a 	mov	r5,zero
 4000efc:	0009883a 	mov	r4,zero
 4000f00:	40005cc0 	call	40005cc <set_motors>
				done = true;
 4000f04:	00800044 	movi	r2,1
 4000f08:	e0bfef45 	stb	r2,-67(fp)
 4000f0c:	00002a06 	br	4000fb8 <motor_control_loop+0x530>
			} else {
				drive_pid.setpoint += instructions->drive_changes[state - 1];
 4000f10:	00810074 	movhi	r2,1025
 4000f14:	10b0a804 	addi	r2,r2,-15712
 4000f18:	11800017 	ldw	r6,0(r2)
 4000f1c:	e0bffc17 	ldw	r2,-16(fp)
 4000f20:	10c00117 	ldw	r3,4(r2)
 4000f24:	e13fee17 	ldw	r4,-72(fp)
 4000f28:	00900034 	movhi	r2,16384
 4000f2c:	10bfffc4 	addi	r2,r2,-1
 4000f30:	2085883a 	add	r2,r4,r2
 4000f34:	1085883a 	add	r2,r2,r2
 4000f38:	1085883a 	add	r2,r2,r2
 4000f3c:	1885883a 	add	r2,r3,r2
 4000f40:	10c00017 	ldw	r3,0(r2)
 4000f44:	180b883a 	mov	r5,r3
 4000f48:	3009883a 	mov	r4,r6
 4000f4c:	4001dc40 	call	4001dc4 <__addsf3>
 4000f50:	1009883a 	mov	r4,r2
 4000f54:	2007883a 	mov	r3,r4
 4000f58:	00810074 	movhi	r2,1025
 4000f5c:	10b0a804 	addi	r2,r2,-15712
 4000f60:	10c00015 	stw	r3,0(r2)
				yaw_pid.setpoint += instructions->yaw_changes[state - 1];
 4000f64:	00810074 	movhi	r2,1025
 4000f68:	10b09e04 	addi	r2,r2,-15752
 4000f6c:	11800017 	ldw	r6,0(r2)
 4000f70:	e0bffc17 	ldw	r2,-16(fp)
 4000f74:	10c00217 	ldw	r3,8(r2)
 4000f78:	e13fee17 	ldw	r4,-72(fp)
 4000f7c:	00900034 	movhi	r2,16384
 4000f80:	10bfffc4 	addi	r2,r2,-1
 4000f84:	2085883a 	add	r2,r4,r2
 4000f88:	1085883a 	add	r2,r2,r2
 4000f8c:	1085883a 	add	r2,r2,r2
 4000f90:	1885883a 	add	r2,r3,r2
 4000f94:	10c00017 	ldw	r3,0(r2)
 4000f98:	180b883a 	mov	r5,r3
 4000f9c:	3009883a 	mov	r4,r6
 4000fa0:	4001dc40 	call	4001dc4 <__addsf3>
 4000fa4:	1009883a 	mov	r4,r2
 4000fa8:	2007883a 	mov	r3,r4
 4000fac:	00810074 	movhi	r2,1025
 4000fb0:	10b09e04 	addi	r2,r2,-15752
 4000fb4:	10c00015 	stw	r3,0(r2)
			}

			state_change = false;
 4000fb8:	e03fef05 	stb	zero,-68(fp)

		}

		last_time = uptime;
 4000fbc:	e0bff317 	ldw	r2,-52(fp)
 4000fc0:	e0bff015 	stw	r2,-64(fp)
	yaw_pid.setpoint = 0.0f;

	float last_time = read_uptime() / 1000.0;

	// Run control loops while robot is operating
	while(!done){
 4000fc4:	e0bfef43 	ldbu	r2,-67(fp)
 4000fc8:	1080005c 	xori	r2,r2,1
 4000fcc:	10803fcc 	andi	r2,r2,255
 4000fd0:	103ef51e 	bne	r2,zero,4000ba8 <__alt_data_end+0xfc000ba8>

		last_time = uptime;

	}

}
 4000fd4:	0001883a 	nop
 4000fd8:	e6fffe04 	addi	sp,fp,-8
 4000fdc:	dfc00317 	ldw	ra,12(sp)
 4000fe0:	df000217 	ldw	fp,8(sp)
 4000fe4:	dc400117 	ldw	r17,4(sp)
 4000fe8:	dc000017 	ldw	r16,0(sp)
 4000fec:	dec00404 	addi	sp,sp,16
 4000ff0:	f800283a 	ret

04000ff4 <encoder_test>:

// Tests //////////////////////////////////////////////////////////////////////

static void encoder_test(){
 4000ff4:	defff904 	addi	sp,sp,-28
 4000ff8:	dfc00615 	stw	ra,24(sp)
 4000ffc:	df000515 	stw	fp,20(sp)
 4001000:	df000504 	addi	fp,sp,20

	while(1){

		float left_value = read_encoder_left() / 1000.0f;
 4001004:	400057c0 	call	400057c <read_encoder_left>
 4001008:	1009883a 	mov	r4,r2
 400100c:	40031640 	call	4003164 <__floatsisf>
 4001010:	1007883a 	mov	r3,r2
 4001014:	01511eb4 	movhi	r5,17530
 4001018:	1809883a 	mov	r4,r3
 400101c:	400228c0 	call	400228c <__divsf3>
 4001020:	1007883a 	mov	r3,r2
 4001024:	1805883a 	mov	r2,r3
 4001028:	e0bffb15 	stw	r2,-20(fp)
		float right_value = read_encoder_right() / 1000.0f;
 400102c:	40005a40 	call	40005a4 <read_encoder_right>
 4001030:	1009883a 	mov	r4,r2
 4001034:	40031640 	call	4003164 <__floatsisf>
 4001038:	1007883a 	mov	r3,r2
 400103c:	01511eb4 	movhi	r5,17530
 4001040:	1809883a 	mov	r4,r3
 4001044:	400228c0 	call	400228c <__divsf3>
 4001048:	1007883a 	mov	r3,r2
 400104c:	1805883a 	mov	r2,r3
 4001050:	e0bffc15 	stw	r2,-16(fp)

		uint8_t states_msg[9];

		states_msg[0] = KISS_PACKET_OPCODES__STATES;
 4001054:	00bfe404 	movi	r2,-112
 4001058:	e0bffd05 	stb	r2,-12(fp)
		memcpy(states_msg + 1, &left_value, sizeof(left_value));
 400105c:	e0bffd04 	addi	r2,fp,-12
 4001060:	10800044 	addi	r2,r2,1
 4001064:	01800104 	movi	r6,4
 4001068:	e17ffb04 	addi	r5,fp,-20
 400106c:	1009883a 	mov	r4,r2
 4001070:	4005f100 	call	4005f10 <memcpy>
		memcpy(states_msg + 5, &right_value, sizeof(right_value));
 4001074:	e0bffd04 	addi	r2,fp,-12
 4001078:	10800144 	addi	r2,r2,5
 400107c:	e0fffc04 	addi	r3,fp,-16
 4001080:	01800104 	movi	r6,4
 4001084:	180b883a 	mov	r5,r3
 4001088:	1009883a 	mov	r4,r2
 400108c:	4005f100 	call	4005f10 <memcpy>

		kiss_send_packet(&jtag_kiss, (const uint8_t *) states_msg, 9);
 4001090:	e0bffd04 	addi	r2,fp,-12
 4001094:	01800244 	movi	r6,9
 4001098:	100b883a 	mov	r5,r2
 400109c:	01010074 	movhi	r4,1025
 40010a0:	21308004 	addi	r4,r4,-15872
 40010a4:	400180c0 	call	400180c <kiss_send_packet>

		usleep(10000);
 40010a8:	0109c404 	movi	r4,10000
 40010ac:	40063400 	call	4006340 <usleep>
	}
 40010b0:	003fd406 	br	4001004 <__alt_data_end+0xfc001004>

040010b4 <follow_line>:

}

static void follow_line(){
 40010b4:	defffc04 	addi	sp,sp,-16
 40010b8:	dfc00315 	stw	ra,12(sp)
 40010bc:	df000215 	stw	fp,8(sp)
 40010c0:	df000204 	addi	fp,sp,8

	uint32_t i;
	for(i = 0; i < 100000; i++){
 40010c4:	e03ffe15 	stw	zero,-8(fp)
 40010c8:	00002606 	br	4001164 <follow_line+0xb0>

		// line position -8 to 8
		int8_t line = read_line_detect() - 8;
 40010cc:	40005540 	call	4000554 <read_line_detect>
 40010d0:	10bffe04 	addi	r2,r2,-8
 40010d4:	e0bfff45 	stb	r2,-3(fp)

		int8_t yaw_bias = 0;
 40010d8:	e03fff05 	stb	zero,-4(fp)

		if(line < 0){
 40010dc:	e0bfff47 	ldb	r2,-3(fp)
 40010e0:	1000060e 	bge	r2,zero,40010fc <follow_line+0x48>
			yaw_bias = line * -10;
 40010e4:	e0bfff43 	ldbu	r2,-3(fp)
 40010e8:	017ffd84 	movi	r5,-10
 40010ec:	1009883a 	mov	r4,r2
 40010f0:	4001d9c0 	call	4001d9c <__mulsi3>
 40010f4:	e0bfff05 	stb	r2,-4(fp)
 40010f8:	00000706 	br	4001118 <follow_line+0x64>
			//set_motors(-1 * 15, 15);
		} else if(line > 0){
 40010fc:	e0bfff47 	ldb	r2,-3(fp)
 4001100:	0080050e 	bge	zero,r2,4001118 <follow_line+0x64>
			yaw_bias = line * -10;
 4001104:	e0bfff43 	ldbu	r2,-3(fp)
 4001108:	017ffd84 	movi	r5,-10
 400110c:	1009883a 	mov	r4,r2
 4001110:	4001d9c0 	call	4001d9c <__mulsi3>
 4001114:	e0bfff05 	stb	r2,-4(fp)
		} else {
			//set_motors(0, 0);
			//break;
		}

		set_motors(35 - yaw_bias, 35 + yaw_bias);
 4001118:	e0bfff07 	ldb	r2,-4(fp)
 400111c:	00c008c4 	movi	r3,35
 4001120:	1885c83a 	sub	r2,r3,r2
 4001124:	10ffffcc 	andi	r3,r2,65535
 4001128:	18e0001c 	xori	r3,r3,32768
 400112c:	18e00004 	addi	r3,r3,-32768
 4001130:	e0bfff07 	ldb	r2,-4(fp)
 4001134:	108008c4 	addi	r2,r2,35
 4001138:	10bfffcc 	andi	r2,r2,65535
 400113c:	10a0001c 	xori	r2,r2,32768
 4001140:	10a00004 	addi	r2,r2,-32768
 4001144:	100b883a 	mov	r5,r2
 4001148:	1809883a 	mov	r4,r3
 400114c:	40005cc0 	call	40005cc <set_motors>

		usleep(100);
 4001150:	01001904 	movi	r4,100
 4001154:	40063400 	call	4006340 <usleep>
}

static void follow_line(){

	uint32_t i;
	for(i = 0; i < 100000; i++){
 4001158:	e0bffe17 	ldw	r2,-8(fp)
 400115c:	10800044 	addi	r2,r2,1
 4001160:	e0bffe15 	stw	r2,-8(fp)
 4001164:	e0fffe17 	ldw	r3,-8(fp)
 4001168:	008000b4 	movhi	r2,2
 400116c:	10a1a7c4 	addi	r2,r2,-31073
 4001170:	10ffd62e 	bgeu	r2,r3,40010cc <__alt_data_end+0xfc0010cc>

		usleep(100);

	}

	set_motors(0, 0);
 4001174:	000b883a 	mov	r5,zero
 4001178:	0009883a 	mov	r4,zero
 400117c:	40005cc0 	call	40005cc <set_motors>

}
 4001180:	0001883a 	nop
 4001184:	e037883a 	mov	sp,fp
 4001188:	dfc00117 	ldw	ra,4(sp)
 400118c:	df000017 	ldw	fp,0(sp)
 4001190:	dec00204 	addi	sp,sp,8
 4001194:	f800283a 	ret

04001198 <motor_ramp_test>:

static void motor_ramp_test(){
 4001198:	defffd04 	addi	sp,sp,-12
 400119c:	dfc00215 	stw	ra,8(sp)
 40011a0:	df000115 	stw	fp,4(sp)
 40011a4:	df000104 	addi	fp,sp,4
	while(1){

		int16_t i;

		// Ramp up
		for(i = -255; i < 255; i++){
 40011a8:	00bfc044 	movi	r2,-255
 40011ac:	e0bfff0d 	sth	r2,-4(fp)
 40011b0:	00000a06 	br	40011dc <motor_ramp_test+0x44>
			set_motors(i, i);
 40011b4:	e0bfff0f 	ldh	r2,-4(fp)
 40011b8:	e0ffff0f 	ldh	r3,-4(fp)
 40011bc:	180b883a 	mov	r5,r3
 40011c0:	1009883a 	mov	r4,r2
 40011c4:	40005cc0 	call	40005cc <set_motors>
			usleep(2000);
 40011c8:	0101f404 	movi	r4,2000
 40011cc:	40063400 	call	4006340 <usleep>
	while(1){

		int16_t i;

		// Ramp up
		for(i = -255; i < 255; i++){
 40011d0:	e0bfff0b 	ldhu	r2,-4(fp)
 40011d4:	10800044 	addi	r2,r2,1
 40011d8:	e0bfff0d 	sth	r2,-4(fp)
 40011dc:	e0bfff0f 	ldh	r2,-4(fp)
 40011e0:	10803fd0 	cmplti	r2,r2,255
 40011e4:	103ff31e 	bne	r2,zero,40011b4 <__alt_data_end+0xfc0011b4>
			set_motors(i, i);
			usleep(2000);
		}

		// Ramp down
		for(i = 255; i > -255; i--){
 40011e8:	00803fc4 	movi	r2,255
 40011ec:	e0bfff0d 	sth	r2,-4(fp)
 40011f0:	00000a06 	br	400121c <motor_ramp_test+0x84>
			set_motors(i, i);
 40011f4:	e0bfff0f 	ldh	r2,-4(fp)
 40011f8:	e0ffff0f 	ldh	r3,-4(fp)
 40011fc:	180b883a 	mov	r5,r3
 4001200:	1009883a 	mov	r4,r2
 4001204:	40005cc0 	call	40005cc <set_motors>
			usleep(2000);
 4001208:	0101f404 	movi	r4,2000
 400120c:	40063400 	call	4006340 <usleep>
			set_motors(i, i);
			usleep(2000);
		}

		// Ramp down
		for(i = 255; i > -255; i--){
 4001210:	e0bfff0b 	ldhu	r2,-4(fp)
 4001214:	10bfffc4 	addi	r2,r2,-1
 4001218:	e0bfff0d 	sth	r2,-4(fp)
 400121c:	e0bfff0f 	ldh	r2,-4(fp)
 4001220:	10bfc088 	cmpgei	r2,r2,-254
 4001224:	103ff31e 	bne	r2,zero,40011f4 <__alt_data_end+0xfc0011f4>
			set_motors(i, i);
			usleep(2000);
		}

		set_motors(0, 0);
 4001228:	000b883a 	mov	r5,zero
 400122c:	0009883a 	mov	r4,zero
 4001230:	40005cc0 	call	40005cc <set_motors>
		usleep(1000000);
 4001234:	010003f4 	movhi	r4,15
 4001238:	21109004 	addi	r4,r4,16960
 400123c:	40063400 	call	4006340 <usleep>

	}
 4001240:	003fd906 	br	40011a8 <__alt_data_end+0xfc0011a8>

04001244 <image_download_test>:

}

static void image_download_test(){
 4001244:	defffe04 	addi	sp,sp,-8
 4001248:	dfc00115 	stw	ra,4(sp)
 400124c:	df000015 	stw	fp,0(sp)
 4001250:	d839883a 	mov	fp,sp

	// Send image
	const static bool jpeg_transfer = false;
	if(jpeg_transfer){
 4001254:	d0a00903 	ldbu	r2,-32732(gp)
 4001258:	10803fcc 	andi	r2,r2,255
 400125c:	1000011e 	bne	r2,zero,4001264 <image_download_test+0x20>
		//take_jpeg_picture_and_send_to_jtag();
	} else {
		// Naive Slow Transfer
		take_raw_picture_and_send_to_jtag();
 4001260:	40003cc0 	call	40003cc <take_raw_picture_and_send_to_jtag>
	}

}
 4001264:	0001883a 	nop
 4001268:	e037883a 	mov	sp,fp
 400126c:	dfc00117 	ldw	ra,4(sp)
 4001270:	df000017 	ldw	fp,0(sp)
 4001274:	dec00204 	addi	sp,sp,8
 4001278:	f800283a 	ret

0400127c <ble_uart_handler>:
#define BLE_BUFFER_LEN 20

uint8_t ble_buffer[BLE_BUFFER_LEN] = {0};
uint8_t ble_buffer_position = 0;

void ble_uart_handler(void * context){
 400127c:	defffa04 	addi	sp,sp,-24
 4001280:	dfc00515 	stw	ra,20(sp)
 4001284:	df000415 	stw	fp,16(sp)
 4001288:	dc000315 	stw	r16,12(sp)
 400128c:	df000404 	addi	fp,sp,16
 4001290:	e13ffe15 	stw	r4,-8(fp)

	if( (*BLE_UART_STATUS & 0x0080 ) != 0){
 4001294:	00820034 	movhi	r2,2048
 4001298:	10803204 	addi	r2,r2,200
 400129c:	10800017 	ldw	r2,0(r2)
 40012a0:	1080200c 	andi	r2,r2,128
 40012a4:	10007026 	beq	r2,zero,4001468 <ble_uart_handler+0x1ec>

		uint8_t byte = *BLE_UART_RX_DATA;
 40012a8:	00820034 	movhi	r2,2048
 40012ac:	10803004 	addi	r2,r2,192
 40012b0:	10800017 	ldw	r2,0(r2)
 40012b4:	e0bffd05 	stb	r2,-12(fp)

		ble_buffer[ble_buffer_position++] = byte;
 40012b8:	d0a63003 	ldbu	r2,-26432(gp)
 40012bc:	10c00044 	addi	r3,r2,1
 40012c0:	d0e63005 	stb	r3,-26432(gp)
 40012c4:	10c03fcc 	andi	r3,r2,255
 40012c8:	00810074 	movhi	r2,1025
 40012cc:	10b07b04 	addi	r2,r2,-15892
 40012d0:	10c5883a 	add	r2,r2,r3
 40012d4:	e0fffd03 	ldbu	r3,-12(fp)
 40012d8:	10c00005 	stb	r3,0(r2)

		if((byte & 0xFF) == '\n'){
 40012dc:	e0bffd03 	ldbu	r2,-12(fp)
 40012e0:	10800298 	cmpnei	r2,r2,10
 40012e4:	1000601e 	bne	r2,zero,4001468 <ble_uart_handler+0x1ec>
			 * M+000,+000 for stop
			 * M+255,+255 forward
			 * M-255,-255 reverse
			 * M-255,+255 right
			 */
			if( ble_buffer[0] == 'M' && ble_buffer_position == 11 ){
 40012e8:	00810074 	movhi	r2,1025
 40012ec:	10b07b04 	addi	r2,r2,-15892
 40012f0:	10800003 	ldbu	r2,0(r2)
 40012f4:	10803fcc 	andi	r2,r2,255
 40012f8:	10801358 	cmpnei	r2,r2,77
 40012fc:	1000591e 	bne	r2,zero,4001464 <ble_uart_handler+0x1e8>
 4001300:	d0a63003 	ldbu	r2,-26432(gp)
 4001304:	10803fcc 	andi	r2,r2,255
 4001308:	108002d8 	cmpnei	r2,r2,11
 400130c:	1000551e 	bne	r2,zero,4001464 <ble_uart_handler+0x1e8>

				int16_t left = 1;
 4001310:	00800044 	movi	r2,1
 4001314:	e0bffc0d 	sth	r2,-16(fp)
				int16_t right = 1;
 4001318:	00800044 	movi	r2,1
 400131c:	e0bffc8d 	sth	r2,-14(fp)

				// Deal with negatives
				if(ble_buffer[1] == '-'){
 4001320:	00810074 	movhi	r2,1025
 4001324:	10b07b04 	addi	r2,r2,-15892
 4001328:	10800043 	ldbu	r2,1(r2)
 400132c:	10803fcc 	andi	r2,r2,255
 4001330:	10800b58 	cmpnei	r2,r2,45
 4001334:	1000021e 	bne	r2,zero,4001340 <ble_uart_handler+0xc4>
					left = -1;
 4001338:	00bfffc4 	movi	r2,-1
 400133c:	e0bffc0d 	sth	r2,-16(fp)
				}
				if(ble_buffer[6] == '-'){
 4001340:	00810074 	movhi	r2,1025
 4001344:	10b07b04 	addi	r2,r2,-15892
 4001348:	10800183 	ldbu	r2,6(r2)
 400134c:	10803fcc 	andi	r2,r2,255
 4001350:	10800b58 	cmpnei	r2,r2,45
 4001354:	1000021e 	bne	r2,zero,4001360 <ble_uart_handler+0xe4>
					right = -1;
 4001358:	00bfffc4 	movi	r2,-1
 400135c:	e0bffc8d 	sth	r2,-14(fp)
				}

				// Convert text to magnitude
				left *=   ( ( ble_buffer[2] - '0' ) * 100 )
 4001360:	00810074 	movhi	r2,1025
 4001364:	10b07b04 	addi	r2,r2,-15892
 4001368:	10800083 	ldbu	r2,2(r2)
 400136c:	10803fcc 	andi	r2,r2,255
 4001370:	10bff404 	addi	r2,r2,-48
 4001374:	01401904 	movi	r5,100
 4001378:	1009883a 	mov	r4,r2
 400137c:	4001d9c0 	call	4001d9c <__mulsi3>
 4001380:	1021883a 	mov	r16,r2
						+ ( ( ble_buffer[3] - '0' ) *  10 )
 4001384:	00810074 	movhi	r2,1025
 4001388:	10b07b04 	addi	r2,r2,-15892
 400138c:	108000c3 	ldbu	r2,3(r2)
 4001390:	10803fcc 	andi	r2,r2,255
 4001394:	10bff404 	addi	r2,r2,-48
 4001398:	01400284 	movi	r5,10
 400139c:	1009883a 	mov	r4,r2
 40013a0:	4001d9c0 	call	4001d9c <__mulsi3>
 40013a4:	8087883a 	add	r3,r16,r2
						+ ( ( ble_buffer[4] - '0' )       );
 40013a8:	00810074 	movhi	r2,1025
 40013ac:	10b07b04 	addi	r2,r2,-15892
 40013b0:	10800103 	ldbu	r2,4(r2)
 40013b4:	10803fcc 	andi	r2,r2,255
 40013b8:	10bff404 	addi	r2,r2,-48
 40013bc:	1885883a 	add	r2,r3,r2
				if(ble_buffer[6] == '-'){
					right = -1;
				}

				// Convert text to magnitude
				left *=   ( ( ble_buffer[2] - '0' ) * 100 )
 40013c0:	1007883a 	mov	r3,r2
 40013c4:	e0bffc0b 	ldhu	r2,-16(fp)
 40013c8:	100b883a 	mov	r5,r2
 40013cc:	1809883a 	mov	r4,r3
 40013d0:	4001d9c0 	call	4001d9c <__mulsi3>
 40013d4:	e0bffc0d 	sth	r2,-16(fp)
						+ ( ( ble_buffer[3] - '0' ) *  10 )
						+ ( ( ble_buffer[4] - '0' )       );

				right *=   ( ( ble_buffer[7] - '0' ) * 100 )
 40013d8:	00810074 	movhi	r2,1025
 40013dc:	10b07b04 	addi	r2,r2,-15892
 40013e0:	108001c3 	ldbu	r2,7(r2)
 40013e4:	10803fcc 	andi	r2,r2,255
 40013e8:	10bff404 	addi	r2,r2,-48
 40013ec:	01401904 	movi	r5,100
 40013f0:	1009883a 	mov	r4,r2
 40013f4:	4001d9c0 	call	4001d9c <__mulsi3>
 40013f8:	1021883a 	mov	r16,r2
						 + ( ( ble_buffer[8] - '0' ) *  10 )
 40013fc:	00810074 	movhi	r2,1025
 4001400:	10b07b04 	addi	r2,r2,-15892
 4001404:	10800203 	ldbu	r2,8(r2)
 4001408:	10803fcc 	andi	r2,r2,255
 400140c:	10bff404 	addi	r2,r2,-48
 4001410:	01400284 	movi	r5,10
 4001414:	1009883a 	mov	r4,r2
 4001418:	4001d9c0 	call	4001d9c <__mulsi3>
 400141c:	8087883a 	add	r3,r16,r2
						 + ( ( ble_buffer[9] - '0' )       );
 4001420:	00810074 	movhi	r2,1025
 4001424:	10b07b04 	addi	r2,r2,-15892
 4001428:	10800243 	ldbu	r2,9(r2)
 400142c:	10803fcc 	andi	r2,r2,255
 4001430:	10bff404 	addi	r2,r2,-48
 4001434:	1885883a 	add	r2,r3,r2
				// Convert text to magnitude
				left *=   ( ( ble_buffer[2] - '0' ) * 100 )
						+ ( ( ble_buffer[3] - '0' ) *  10 )
						+ ( ( ble_buffer[4] - '0' )       );

				right *=   ( ( ble_buffer[7] - '0' ) * 100 )
 4001438:	1007883a 	mov	r3,r2
 400143c:	e0bffc8b 	ldhu	r2,-14(fp)
 4001440:	100b883a 	mov	r5,r2
 4001444:	1809883a 	mov	r4,r3
 4001448:	4001d9c0 	call	4001d9c <__mulsi3>
 400144c:	e0bffc8d 	sth	r2,-14(fp)
						 + ( ( ble_buffer[8] - '0' ) *  10 )
						 + ( ( ble_buffer[9] - '0' )       );

				set_motors(left, right);
 4001450:	e0bffc0f 	ldh	r2,-16(fp)
 4001454:	e0fffc8f 	ldh	r3,-14(fp)
 4001458:	180b883a 	mov	r5,r3
 400145c:	1009883a 	mov	r4,r2
 4001460:	40005cc0 	call	40005cc <set_motors>
				while( ! ( (*BLE_UART_STATUS) & 0x0040 ) );
				*BLE_UART_TX_DATA = ble_buffer[i];
			}
			 */

			ble_buffer_position = 0;
 4001464:	d0263005 	stb	zero,-26432(gp)

		}

	}

}
 4001468:	0001883a 	nop
 400146c:	e6ffff04 	addi	sp,fp,-4
 4001470:	dfc00217 	ldw	ra,8(sp)
 4001474:	df000117 	ldw	fp,4(sp)
 4001478:	dc000017 	ldw	r16,0(sp)
 400147c:	dec00304 	addi	sp,sp,12
 4001480:	f800283a 	ret

04001484 <jtag_uart_handler>:

bool packet_ready = false;
uint16_t packet_length = 0;

void jtag_uart_handler(void * context){
 4001484:	defffa04 	addi	sp,sp,-24
 4001488:	dfc00515 	stw	ra,20(sp)
 400148c:	df000415 	stw	fp,16(sp)
 4001490:	df000404 	addi	fp,sp,16
 4001494:	e13fff15 	stw	r4,-4(fp)

	bool has_data = true;
 4001498:	00800044 	movi	r2,1
 400149c:	e0bffc05 	stb	r2,-16(fp)

	while(has_data){
 40014a0:	00001606 	br	40014fc <jtag_uart_handler+0x78>

		// Read UART and see if there is data
		uint32_t data = *JTAG_UART_DATA;
 40014a4:	00820034 	movhi	r2,2048
 40014a8:	10842404 	addi	r2,r2,4240
 40014ac:	10800017 	ldw	r2,0(r2)
 40014b0:	e0bffd15 	stw	r2,-12(fp)
		if( (data & JTAG_UART__MASK__RVALID ) != 0){
 40014b4:	e0bffd17 	ldw	r2,-12(fp)
 40014b8:	10a0000c 	andi	r2,r2,32768
 40014bc:	10000e26 	beq	r2,zero,40014f8 <jtag_uart_handler+0x74>

			uint16_t len = kiss_rx_byte(&jtag_kiss, (uint8_t)( data & 0xFF ) );
 40014c0:	e0bffd17 	ldw	r2,-12(fp)
 40014c4:	10803fcc 	andi	r2,r2,255
 40014c8:	100b883a 	mov	r5,r2
 40014cc:	01010074 	movhi	r4,1025
 40014d0:	21308004 	addi	r4,r4,-15872
 40014d4:	4001a140 	call	4001a14 <kiss_rx_byte>
 40014d8:	e0bffe0d 	sth	r2,-8(fp)

			if(len > 0){
 40014dc:	e0bffe0b 	ldhu	r2,-8(fp)
 40014e0:	10000626 	beq	r2,zero,40014fc <jtag_uart_handler+0x78>

				packet_ready = true;
 40014e4:	00800044 	movi	r2,1
 40014e8:	d0a63045 	stb	r2,-26431(gp)
				packet_length = len;
 40014ec:	e0bffe0b 	ldhu	r2,-8(fp)
 40014f0:	d0a6308d 	sth	r2,-26430(gp)
 40014f4:	00000106 	br	40014fc <jtag_uart_handler+0x78>

			}

		} else {

			has_data = false;
 40014f8:	e03ffc05 	stb	zero,-16(fp)

void jtag_uart_handler(void * context){

	bool has_data = true;

	while(has_data){
 40014fc:	e0bffc03 	ldbu	r2,-16(fp)
 4001500:	103fe81e 	bne	r2,zero,40014a4 <__alt_data_end+0xfc0014a4>

		}

	}

}
 4001504:	0001883a 	nop
 4001508:	e037883a 	mov	sp,fp
 400150c:	dfc00117 	ldw	ra,4(sp)
 4001510:	df000017 	ldw	fp,0(sp)
 4001514:	dec00204 	addi	sp,sp,8
 4001518:	f800283a 	ret

0400151c <main>:


int main()
{
 400151c:	defff804 	addi	sp,sp,-32
 4001520:	dfc00715 	stw	ra,28(sp)
 4001524:	df000615 	stw	fp,24(sp)
 4001528:	df000604 	addi	fp,sp,24

	set_motors(0, 0);
 400152c:	000b883a 	mov	r5,zero
 4001530:	0009883a 	mov	r4,zero
 4001534:	40005cc0 	call	40005cc <set_motors>

	// Setup JTAG kiss interface
	jtag_kiss.send 				 = jtag_kiss_send;
 4001538:	00810074 	movhi	r2,1025
 400153c:	10b08004 	addi	r2,r2,-15872
 4001540:	00c10034 	movhi	r3,1024
 4001544:	18c09b04 	addi	r3,r3,620
 4001548:	10c00115 	stw	r3,4(r2)
	jtag_kiss.rx_state 			 = KISS_STATE__NORMAL;
 400154c:	00810074 	movhi	r2,1025
 4001550:	10b08004 	addi	r2,r2,-15872
 4001554:	10000215 	stw	zero,8(r2)
	jtag_kiss.rx_buffer 		 = jtag_kiss_rx_buffer;
 4001558:	00810074 	movhi	r2,1025
 400155c:	10b08004 	addi	r2,r2,-15872
 4001560:	00c10074 	movhi	r3,1025
 4001564:	18f08504 	addi	r3,r3,-15852
 4001568:	10c00315 	stw	r3,12(r2)
	jtag_kiss.rx_buffer_position = 0;
 400156c:	00810074 	movhi	r2,1025
 4001570:	10b08004 	addi	r2,r2,-15872
 4001574:	1000040d 	sth	zero,16(r2)

	//alt_ic_isr_register(JTAG_UART_IRQ, JTAG_UART_IRQ_INTERRUPT_CONTROLLER_ID, jtag_uart_handler, NULL, NULL);

	*JTAG_UART_CONTROL = 0; // Disable interrupts
 4001578:	00820034 	movhi	r2,2048
 400157c:	10842504 	addi	r2,r2,4244
 4001580:	10000015 	stw	zero,0(r2)
	alt_irq_register(JTAG_UART_IRQ, NULL,  jtag_uart_handler);
 4001584:	01810034 	movhi	r6,1024
 4001588:	31852104 	addi	r6,r6,5252
 400158c:	000b883a 	mov	r5,zero
 4001590:	0009883a 	mov	r4,zero
 4001594:	40060580 	call	4006058 <alt_irq_register>
	*JTAG_UART_CONTROL = 0x00000001; // Read interrupt
 4001598:	00820034 	movhi	r2,2048
 400159c:	10842504 	addi	r2,r2,4244
 40015a0:	00c00044 	movi	r3,1
 40015a4:	10c00015 	stw	r3,0(r2)

	*BLE_UART_CONTROL = 0; // Disable interrupts
 40015a8:	00820034 	movhi	r2,2048
 40015ac:	10803304 	addi	r2,r2,204
 40015b0:	10000015 	stw	zero,0(r2)
	alt_irq_register(BLE_UART_IRQ, NULL,  ble_uart_handler);
 40015b4:	01810034 	movhi	r6,1024
 40015b8:	31849f04 	addi	r6,r6,4732
 40015bc:	000b883a 	mov	r5,zero
 40015c0:	01000044 	movi	r4,1
 40015c4:	40060580 	call	4006058 <alt_irq_register>
	*BLE_UART_CONTROL = 0x0000080; // Read interrupt
 40015c8:	00820034 	movhi	r2,2048
 40015cc:	10803304 	addi	r2,r2,204
 40015d0:	00c02004 	movi	r3,128
 40015d4:	10c00015 	stw	r3,0(r2)

	// Send startup message
	const char hello_world[] = "\x81Hello from Nios II!";
 40015d8:	009b1974 	movhi	r2,27749
 40015dc:	10922044 	addi	r2,r2,18561
 40015e0:	e0bffa15 	stw	r2,-24(fp)
 40015e4:	00998834 	movhi	r2,26144
 40015e8:	109bdb04 	addi	r2,r2,28524
 40015ec:	e0bffb15 	stw	r2,-20(fp)
 40015f0:	00881b74 	movhi	r2,8301
 40015f4:	109bdc84 	addi	r2,r2,28530
 40015f8:	e0bffc15 	stw	r2,-16(fp)
 40015fc:	009cdbf4 	movhi	r2,29551
 4001600:	109a5384 	addi	r2,r2,26958
 4001604:	e0bffd15 	stw	r2,-12(fp)
 4001608:	00885274 	movhi	r2,8521
 400160c:	10924804 	addi	r2,r2,18720
 4001610:	e0bffe15 	stw	r2,-8(fp)
 4001614:	e03fff05 	stb	zero,-4(fp)
	kiss_send_packet(&jtag_kiss, (const uint8_t *) hello_world, sizeof(hello_world) - 1);
 4001618:	01800504 	movi	r6,20
 400161c:	e17ffa04 	addi	r5,fp,-24
 4001620:	01010074 	movhi	r4,1025
 4001624:	21308004 	addi	r4,r4,-15872
 4001628:	400180c0 	call	400180c <kiss_send_packet>

	usleep(1000000);
 400162c:	010003f4 	movhi	r4,15
 4001630:	21109004 	addi	r4,r4,16960
 4001634:	40063400 	call	4006340 <usleep>
	//	follow_line();
	//}

	while(1){

		if(packet_ready){
 4001638:	d0a63043 	ldbu	r2,-26431(gp)
 400163c:	10803fcc 	andi	r2,r2,255
 4001640:	103ffd26 	beq	r2,zero,4001638 <__alt_data_end+0xfc001638>

			packet_ready = false;
 4001644:	d0263045 	stb	zero,-26431(gp)

			switch(jtag_kiss.rx_buffer[0]){
 4001648:	00810074 	movhi	r2,1025
 400164c:	10b08004 	addi	r2,r2,-15872
 4001650:	10800317 	ldw	r2,12(r2)
 4001654:	10800003 	ldbu	r2,0(r2)
 4001658:	10803fcc 	andi	r2,r2,255
 400165c:	10bfec04 	addi	r2,r2,-80
 4001660:	10c00d28 	cmpgeui	r3,r2,52
 4001664:	1800671e 	bne	r3,zero,4001804 <main+0x2e8>
 4001668:	100690ba 	slli	r3,r2,2
 400166c:	00810034 	movhi	r2,1024
 4001670:	1085a004 	addi	r2,r2,5760
 4001674:	1885883a 	add	r2,r3,r2
 4001678:	10800017 	ldw	r2,0(r2)
 400167c:	1000683a 	jmp	r2
 4001680:	04001750 	cmplti	r16,zero,93
 4001684:	04001764 	muli	r16,zero,93
 4001688:	04001778 	rdprs	r16,zero,93
 400168c:	0400178c 	andi	r16,zero,94
 4001690:	040017a0 	cmpeqi	r16,zero,94
 4001694:	040017b4 	movhi	r16,94
 4001698:	04001804 	movi	r16,96
 400169c:	04001804 	movi	r16,96
 40016a0:	04001804 	movi	r16,96
 40016a4:	04001804 	movi	r16,96
 40016a8:	04001804 	movi	r16,96
 40016ac:	04001804 	movi	r16,96
 40016b0:	04001804 	movi	r16,96
 40016b4:	04001804 	movi	r16,96
 40016b8:	04001804 	movi	r16,96
 40016bc:	04001804 	movi	r16,96
 40016c0:	04001804 	movi	r16,96
 40016c4:	04001804 	movi	r16,96
 40016c8:	04001804 	movi	r16,96
 40016cc:	04001804 	movi	r16,96
 40016d0:	04001804 	movi	r16,96
 40016d4:	04001804 	movi	r16,96
 40016d8:	04001804 	movi	r16,96
 40016dc:	04001804 	movi	r16,96
 40016e0:	04001804 	movi	r16,96
 40016e4:	04001804 	movi	r16,96
 40016e8:	04001804 	movi	r16,96
 40016ec:	04001804 	movi	r16,96
 40016f0:	04001804 	movi	r16,96
 40016f4:	04001804 	movi	r16,96
 40016f8:	04001804 	movi	r16,96
 40016fc:	04001804 	movi	r16,96
 4001700:	040017c8 	cmpgei	r16,zero,95
 4001704:	040017f4 	movhi	r16,95
 4001708:	04001804 	movi	r16,96
 400170c:	04001804 	movi	r16,96
 4001710:	04001804 	movi	r16,96
 4001714:	04001804 	movi	r16,96
 4001718:	04001804 	movi	r16,96
 400171c:	04001804 	movi	r16,96
 4001720:	04001804 	movi	r16,96
 4001724:	04001804 	movi	r16,96
 4001728:	04001804 	movi	r16,96
 400172c:	04001804 	movi	r16,96
 4001730:	04001804 	movi	r16,96
 4001734:	04001804 	movi	r16,96
 4001738:	04001804 	movi	r16,96
 400173c:	04001804 	movi	r16,96
 4001740:	04001804 	movi	r16,96
 4001744:	04001804 	movi	r16,96
 4001748:	04001804 	movi	r16,96
 400174c:	040017fc 	xorhi	r16,zero,95

				case KISS_PACKET_OPCODES__DO_LOOP:
					motor_control_loop(&figure_8_ctrl, false);
 4001750:	000b883a 	mov	r5,zero
 4001754:	01010074 	movhi	r4,1025
 4001758:	21245a04 	addi	r4,r4,-28312
 400175c:	4000a880 	call	4000a88 <motor_control_loop>
					break;
 4001760:	00002906 	br	4001808 <main+0x2ec>

				case KISS_PACKET_OPCODES__DO_SPIN_5:
					motor_control_loop(&spin_5_times_ctrl, false);
 4001764:	000b883a 	mov	r5,zero
 4001768:	01010074 	movhi	r4,1025
 400176c:	21245d04 	addi	r4,r4,-28300
 4001770:	4000a880 	call	4000a88 <motor_control_loop>
					break;
 4001774:	00002406 	br	4001808 <main+0x2ec>

				case KISS_PACKET_OPCODES__MOVE_FORWARD:
					motor_control_loop(&forward_ctrl, false);
 4001778:	000b883a 	mov	r5,zero
 400177c:	01010074 	movhi	r4,1025
 4001780:	21246304 	addi	r4,r4,-28276
 4001784:	4000a880 	call	4000a88 <motor_control_loop>
					break;
 4001788:	00001f06 	br	4001808 <main+0x2ec>

				case KISS_PACKET_OPCODES__MOVE_BACKWARD:
					motor_control_loop(&backward_ctrl, false);
 400178c:	000b883a 	mov	r5,zero
 4001790:	01010074 	movhi	r4,1025
 4001794:	21246604 	addi	r4,r4,-28264
 4001798:	4000a880 	call	4000a88 <motor_control_loop>
					break;
 400179c:	00001a06 	br	4001808 <main+0x2ec>

				case KISS_PACKET_OPCODES__TURN_LEFT:
					motor_control_loop(&left_ctrl, false);
 40017a0:	000b883a 	mov	r5,zero
 40017a4:	01010074 	movhi	r4,1025
 40017a8:	21246904 	addi	r4,r4,-28252
 40017ac:	4000a880 	call	4000a88 <motor_control_loop>
					break;
 40017b0:	00001506 	br	4001808 <main+0x2ec>

				case KISS_PACKET_OPCODES__TURN_RIGHT:
					motor_control_loop(&right_ctrl, false);
 40017b4:	000b883a 	mov	r5,zero
 40017b8:	01010074 	movhi	r4,1025
 40017bc:	21246c04 	addi	r4,r4,-28240
 40017c0:	4000a880 	call	4000a88 <motor_control_loop>
					break;
 40017c4:	00001006 	br	4001808 <main+0x2ec>
				case KISS_PACKET_OPCODES__GET_LINE_POS:
					{

						uint8_t line_detect_message[2];

						line_detect_message[0] = KISS_PACKET_OPCODES__GET_LINE_POS;
 40017c8:	00801c04 	movi	r2,112
 40017cc:	e0bfff45 	stb	r2,-3(fp)
						line_detect_message[1] = read_line_detect();
 40017d0:	40005540 	call	4000554 <read_line_detect>
 40017d4:	e0bfff85 	stb	r2,-2(fp)

						kiss_send_packet(&jtag_kiss, (const uint8_t *) line_detect_message, 2);
 40017d8:	e0bfff44 	addi	r2,fp,-3
 40017dc:	01800084 	movi	r6,2
 40017e0:	100b883a 	mov	r5,r2
 40017e4:	01010074 	movhi	r4,1025
 40017e8:	21308004 	addi	r4,r4,-15872
 40017ec:	400180c0 	call	400180c <kiss_send_packet>
					}
					break;
 40017f0:	00000506 	br	4001808 <main+0x2ec>

				case KISS_PACKET_OPCODES__FOLLOW_LINE:
					follow_line();
 40017f4:	40010b40 	call	40010b4 <follow_line>
					break;
 40017f8:	00000306 	br	4001808 <main+0x2ec>

				case KISS_PACKET_OPCODES__RAW_IMAGE:
					image_download_test();
 40017fc:	40012440 	call	4001244 <image_download_test>
					break;
 4001800:	00000106 	br	4001808 <main+0x2ec>

				default:
					break;
 4001804:	0001883a 	nop

			}

		}

	}
 4001808:	003f8b06 	br	4001638 <__alt_data_end+0xfc001638>

0400180c <kiss_send_packet>:
 *      Author: DrYerzinia
 */

#include "kiss.h"

void kiss_send_packet(kiss_t * kiss, const uint8_t * data, size_t len){
 400180c:	defffb04 	addi	sp,sp,-20
 4001810:	dfc00415 	stw	ra,16(sp)
 4001814:	df000315 	stw	fp,12(sp)
 4001818:	df000304 	addi	fp,sp,12
 400181c:	e13ffd15 	stw	r4,-12(fp)
 4001820:	e17ffe15 	stw	r5,-8(fp)
 4001824:	e1bfff15 	stw	r6,-4(fp)

	kiss_start(kiss);
 4001828:	e13ffd17 	ldw	r4,-12(fp)
 400182c:	40018600 	call	4001860 <kiss_start>
	kiss_send_data(kiss, data, len);
 4001830:	e1bfff17 	ldw	r6,-4(fp)
 4001834:	e17ffe17 	ldw	r5,-8(fp)
 4001838:	e13ffd17 	ldw	r4,-12(fp)
 400183c:	40018a40 	call	40018a4 <kiss_send_data>
	kiss_end(kiss);
 4001840:	e13ffd17 	ldw	r4,-12(fp)
 4001844:	40019d00 	call	40019d0 <kiss_end>

}
 4001848:	0001883a 	nop
 400184c:	e037883a 	mov	sp,fp
 4001850:	dfc00117 	ldw	ra,4(sp)
 4001854:	df000017 	ldw	fp,0(sp)
 4001858:	dec00204 	addi	sp,sp,8
 400185c:	f800283a 	ret

04001860 <kiss_start>:

void kiss_start(kiss_t * kiss){
 4001860:	defffd04 	addi	sp,sp,-12
 4001864:	dfc00215 	stw	ra,8(sp)
 4001868:	df000115 	stw	fp,4(sp)
 400186c:	df000104 	addi	fp,sp,4
 4001870:	e13fff15 	stw	r4,-4(fp)

	kiss->state = KISS_STATE__NORMAL;
 4001874:	e0bfff17 	ldw	r2,-4(fp)
 4001878:	10000015 	stw	zero,0(r2)
	kiss->send(KISS_SYMBOLS__FEND);
 400187c:	e0bfff17 	ldw	r2,-4(fp)
 4001880:	10800117 	ldw	r2,4(r2)
 4001884:	01003004 	movi	r4,192
 4001888:	103ee83a 	callr	r2

}
 400188c:	0001883a 	nop
 4001890:	e037883a 	mov	sp,fp
 4001894:	dfc00117 	ldw	ra,4(sp)
 4001898:	df000017 	ldw	fp,0(sp)
 400189c:	dec00204 	addi	sp,sp,8
 40018a0:	f800283a 	ret

040018a4 <kiss_send_data>:

void kiss_send_data(kiss_t * kiss, const uint8_t * data, size_t len){
 40018a4:	defffa04 	addi	sp,sp,-24
 40018a8:	dfc00515 	stw	ra,20(sp)
 40018ac:	df000415 	stw	fp,16(sp)
 40018b0:	df000404 	addi	fp,sp,16
 40018b4:	e13ffd15 	stw	r4,-12(fp)
 40018b8:	e17ffe15 	stw	r5,-8(fp)
 40018bc:	e1bfff15 	stw	r6,-4(fp)

	while(len > 0){
 40018c0:	00003b06 	br	40019b0 <kiss_send_data+0x10c>

		switch( kiss->state ){
 40018c4:	e0bffd17 	ldw	r2,-12(fp)
 40018c8:	10800017 	ldw	r2,0(r2)
 40018cc:	10c00060 	cmpeqi	r3,r2,1
 40018d0:	1800291e 	bne	r3,zero,4001978 <kiss_send_data+0xd4>
 40018d4:	0080032e 	bgeu	zero,r2,40018e4 <kiss_send_data+0x40>
 40018d8:	108000a0 	cmpeqi	r2,r2,2
 40018dc:	10002d1e 	bne	r2,zero,4001994 <kiss_send_data+0xf0>
 40018e0:	00003306 	br	40019b0 <kiss_send_data+0x10c>

			case KISS_STATE__NORMAL:
				{

					len--;
 40018e4:	e0bfff17 	ldw	r2,-4(fp)
 40018e8:	10bfffc4 	addi	r2,r2,-1
 40018ec:	e0bfff15 	stw	r2,-4(fp)

					uint8_t next_symbol = (*data++);
 40018f0:	e0bffe17 	ldw	r2,-8(fp)
 40018f4:	10c00044 	addi	r3,r2,1
 40018f8:	e0fffe15 	stw	r3,-8(fp)
 40018fc:	10800003 	ldbu	r2,0(r2)
 4001900:	e0bffc05 	stb	r2,-16(fp)
					switch( next_symbol ){
 4001904:	e0bffc03 	ldbu	r2,-16(fp)
 4001908:	10c03020 	cmpeqi	r3,r2,192
 400190c:	1800031e 	bne	r3,zero,400191c <kiss_send_data+0x78>
 4001910:	108036e0 	cmpeqi	r2,r2,219
 4001914:	1000091e 	bne	r2,zero,400193c <kiss_send_data+0x98>
 4001918:	00001006 	br	400195c <kiss_send_data+0xb8>
						case KISS_SYMBOLS__FEND:
							kiss->state = KISS_STATE__END;
 400191c:	e0bffd17 	ldw	r2,-12(fp)
 4001920:	00c00084 	movi	r3,2
 4001924:	10c00015 	stw	r3,0(r2)
							kiss->send(KISS_SYMBOLS__FESC);
 4001928:	e0bffd17 	ldw	r2,-12(fp)
 400192c:	10800117 	ldw	r2,4(r2)
 4001930:	010036c4 	movi	r4,219
 4001934:	103ee83a 	callr	r2
							break;
 4001938:	00000e06 	br	4001974 <kiss_send_data+0xd0>
						case KISS_SYMBOLS__FESC:
							kiss->state = KISS_STATE__ESC;
 400193c:	e0bffd17 	ldw	r2,-12(fp)
 4001940:	00c00044 	movi	r3,1
 4001944:	10c00015 	stw	r3,0(r2)
							kiss->send(KISS_SYMBOLS__FESC);
 4001948:	e0bffd17 	ldw	r2,-12(fp)
 400194c:	10800117 	ldw	r2,4(r2)
 4001950:	010036c4 	movi	r4,219
 4001954:	103ee83a 	callr	r2
							break;
 4001958:	00000606 	br	4001974 <kiss_send_data+0xd0>
						default:
							kiss->send(next_symbol);
 400195c:	e0bffd17 	ldw	r2,-12(fp)
 4001960:	10800117 	ldw	r2,4(r2)
 4001964:	e0fffc03 	ldbu	r3,-16(fp)
 4001968:	1809883a 	mov	r4,r3
 400196c:	103ee83a 	callr	r2
							break;
 4001970:	0001883a 	nop
					}
				}
				break;
 4001974:	00000e06 	br	40019b0 <kiss_send_data+0x10c>

			case KISS_STATE__ESC:
				kiss->state = KISS_STATE__NORMAL;
 4001978:	e0bffd17 	ldw	r2,-12(fp)
 400197c:	10000015 	stw	zero,0(r2)
				kiss->send(KISS_SYMBOLS__TFESC);
 4001980:	e0bffd17 	ldw	r2,-12(fp)
 4001984:	10800117 	ldw	r2,4(r2)
 4001988:	01003744 	movi	r4,221
 400198c:	103ee83a 	callr	r2
				break;
 4001990:	00000706 	br	40019b0 <kiss_send_data+0x10c>

			case KISS_STATE__END:
				kiss->state = KISS_STATE__NORMAL;
 4001994:	e0bffd17 	ldw	r2,-12(fp)
 4001998:	10000015 	stw	zero,0(r2)
				kiss->send(KISS_SYMBOLS__TFEND);
 400199c:	e0bffd17 	ldw	r2,-12(fp)
 40019a0:	10800117 	ldw	r2,4(r2)
 40019a4:	01003704 	movi	r4,220
 40019a8:	103ee83a 	callr	r2
				break;
 40019ac:	0001883a 	nop

}

void kiss_send_data(kiss_t * kiss, const uint8_t * data, size_t len){

	while(len > 0){
 40019b0:	e0bfff17 	ldw	r2,-4(fp)
 40019b4:	103fc31e 	bne	r2,zero,40018c4 <__alt_data_end+0xfc0018c4>

		}

	}

}
 40019b8:	0001883a 	nop
 40019bc:	e037883a 	mov	sp,fp
 40019c0:	dfc00117 	ldw	ra,4(sp)
 40019c4:	df000017 	ldw	fp,0(sp)
 40019c8:	dec00204 	addi	sp,sp,8
 40019cc:	f800283a 	ret

040019d0 <kiss_end>:

void kiss_end(kiss_t * kiss){
 40019d0:	defffd04 	addi	sp,sp,-12
 40019d4:	dfc00215 	stw	ra,8(sp)
 40019d8:	df000115 	stw	fp,4(sp)
 40019dc:	df000104 	addi	fp,sp,4
 40019e0:	e13fff15 	stw	r4,-4(fp)

	kiss->state = KISS_STATE__NORMAL;
 40019e4:	e0bfff17 	ldw	r2,-4(fp)
 40019e8:	10000015 	stw	zero,0(r2)
	kiss->send(KISS_SYMBOLS__FEND);
 40019ec:	e0bfff17 	ldw	r2,-4(fp)
 40019f0:	10800117 	ldw	r2,4(r2)
 40019f4:	01003004 	movi	r4,192
 40019f8:	103ee83a 	callr	r2

}
 40019fc:	0001883a 	nop
 4001a00:	e037883a 	mov	sp,fp
 4001a04:	dfc00117 	ldw	ra,4(sp)
 4001a08:	df000017 	ldw	fp,0(sp)
 4001a0c:	dec00204 	addi	sp,sp,8
 4001a10:	f800283a 	ret

04001a14 <kiss_rx_byte>:

uint16_t kiss_rx_byte(kiss_t * kiss, uint8_t next_symbol){
 4001a14:	defffc04 	addi	sp,sp,-16
 4001a18:	df000315 	stw	fp,12(sp)
 4001a1c:	df000304 	addi	fp,sp,12
 4001a20:	e13ffe15 	stw	r4,-8(fp)
 4001a24:	2805883a 	mov	r2,r5
 4001a28:	e0bfff05 	stb	r2,-4(fp)

	switch( kiss->rx_state ){
 4001a2c:	e0bffe17 	ldw	r2,-8(fp)
 4001a30:	10800217 	ldw	r2,8(r2)
 4001a34:	10000326 	beq	r2,zero,4001a44 <kiss_rx_byte+0x30>
 4001a38:	10800060 	cmpeqi	r2,r2,1
 4001a3c:	1000251e 	bne	r2,zero,4001ad4 <kiss_rx_byte+0xc0>
 4001a40:	00004706 	br	4001b60 <kiss_rx_byte+0x14c>

		case KISS_STATE__NORMAL:
			{

				switch( next_symbol ){
 4001a44:	e0bfff03 	ldbu	r2,-4(fp)
 4001a48:	10c03020 	cmpeqi	r3,r2,192
 4001a4c:	1800031e 	bne	r3,zero,4001a5c <kiss_rx_byte+0x48>
 4001a50:	108036e0 	cmpeqi	r2,r2,219
 4001a54:	10000c1e 	bne	r2,zero,4001a88 <kiss_rx_byte+0x74>
 4001a58:	00000f06 	br	4001a98 <kiss_rx_byte+0x84>

					case KISS_SYMBOLS__FEND:
						{

							uint16_t len = kiss->rx_buffer_position;
 4001a5c:	e0bffe17 	ldw	r2,-8(fp)
 4001a60:	1080040b 	ldhu	r2,16(r2)
 4001a64:	e0bffd0d 	sth	r2,-12(fp)

							kiss->rx_state = KISS_STATE__NORMAL;
 4001a68:	e0bffe17 	ldw	r2,-8(fp)
 4001a6c:	10000215 	stw	zero,8(r2)
							kiss->rx_buffer_position = 0;
 4001a70:	e0bffe17 	ldw	r2,-8(fp)
 4001a74:	1000040d 	sth	zero,16(r2)

							if(len > 0){
 4001a78:	e0bffd0b 	ldhu	r2,-12(fp)
 4001a7c:	10001326 	beq	r2,zero,4001acc <kiss_rx_byte+0xb8>
								return len;
 4001a80:	e0bffd0b 	ldhu	r2,-12(fp)
 4001a84:	00003706 	br	4001b64 <kiss_rx_byte+0x150>
						}

						break;

					case KISS_SYMBOLS__FESC:
						kiss->rx_state = KISS_STATE__ESC;
 4001a88:	e0bffe17 	ldw	r2,-8(fp)
 4001a8c:	00c00044 	movi	r3,1
 4001a90:	10c00215 	stw	r3,8(r2)
						break;
 4001a94:	00000e06 	br	4001ad0 <kiss_rx_byte+0xbc>

					default:
						kiss->rx_buffer[kiss->rx_buffer_position++] = next_symbol;
 4001a98:	e0bffe17 	ldw	r2,-8(fp)
 4001a9c:	10c00317 	ldw	r3,12(r2)
 4001aa0:	e0bffe17 	ldw	r2,-8(fp)
 4001aa4:	1080040b 	ldhu	r2,16(r2)
 4001aa8:	11000044 	addi	r4,r2,1
 4001aac:	200b883a 	mov	r5,r4
 4001ab0:	e13ffe17 	ldw	r4,-8(fp)
 4001ab4:	2140040d 	sth	r5,16(r4)
 4001ab8:	10bfffcc 	andi	r2,r2,65535
 4001abc:	1885883a 	add	r2,r3,r2
 4001ac0:	e0ffff03 	ldbu	r3,-4(fp)
 4001ac4:	10c00005 	stb	r3,0(r2)
						break;
 4001ac8:	00000106 	br	4001ad0 <kiss_rx_byte+0xbc>
								return len;
							}

						}

						break;
 4001acc:	0001883a 	nop
						kiss->rx_buffer[kiss->rx_buffer_position++] = next_symbol;
						break;

				}
			}
			break;
 4001ad0:	00002306 	br	4001b60 <kiss_rx_byte+0x14c>

		case KISS_STATE__ESC:
			switch( next_symbol ){
 4001ad4:	e0bfff03 	ldbu	r2,-4(fp)
 4001ad8:	10c03720 	cmpeqi	r3,r2,220
 4001adc:	1800031e 	bne	r3,zero,4001aec <kiss_rx_byte+0xd8>
 4001ae0:	10803760 	cmpeqi	r2,r2,221
 4001ae4:	10000e1e 	bne	r2,zero,4001b20 <kiss_rx_byte+0x10c>
					kiss->rx_buffer[kiss->rx_buffer_position++] = KISS_SYMBOLS__FEND;
					break;

				default:
					// State machine hurt itself in confusion
					break;
 4001ae8:	00001a06 	br	4001b54 <kiss_rx_byte+0x140>
			break;

		case KISS_STATE__ESC:
			switch( next_symbol ){
				case KISS_SYMBOLS__TFEND:
					kiss->rx_buffer[kiss->rx_buffer_position++] = KISS_SYMBOLS__FEND;
 4001aec:	e0bffe17 	ldw	r2,-8(fp)
 4001af0:	10c00317 	ldw	r3,12(r2)
 4001af4:	e0bffe17 	ldw	r2,-8(fp)
 4001af8:	1080040b 	ldhu	r2,16(r2)
 4001afc:	11000044 	addi	r4,r2,1
 4001b00:	200b883a 	mov	r5,r4
 4001b04:	e13ffe17 	ldw	r4,-8(fp)
 4001b08:	2140040d 	sth	r5,16(r4)
 4001b0c:	10bfffcc 	andi	r2,r2,65535
 4001b10:	1885883a 	add	r2,r3,r2
 4001b14:	00fff004 	movi	r3,-64
 4001b18:	10c00005 	stb	r3,0(r2)
					break;
 4001b1c:	00000d06 	br	4001b54 <kiss_rx_byte+0x140>

				case KISS_SYMBOLS__TFESC:
					kiss->rx_buffer[kiss->rx_buffer_position++] = KISS_SYMBOLS__FEND;
 4001b20:	e0bffe17 	ldw	r2,-8(fp)
 4001b24:	10c00317 	ldw	r3,12(r2)
 4001b28:	e0bffe17 	ldw	r2,-8(fp)
 4001b2c:	1080040b 	ldhu	r2,16(r2)
 4001b30:	11000044 	addi	r4,r2,1
 4001b34:	200b883a 	mov	r5,r4
 4001b38:	e13ffe17 	ldw	r4,-8(fp)
 4001b3c:	2140040d 	sth	r5,16(r4)
 4001b40:	10bfffcc 	andi	r2,r2,65535
 4001b44:	1885883a 	add	r2,r3,r2
 4001b48:	00fff004 	movi	r3,-64
 4001b4c:	10c00005 	stb	r3,0(r2)
					break;
 4001b50:	0001883a 	nop

				default:
					// State machine hurt itself in confusion
					break;
			}
			kiss->rx_state = KISS_STATE__NORMAL;
 4001b54:	e0bffe17 	ldw	r2,-8(fp)
 4001b58:	10000215 	stw	zero,8(r2)
			break;
 4001b5c:	0001883a 	nop

	}

	return 0;
 4001b60:	0005883a 	mov	r2,zero

}
 4001b64:	e037883a 	mov	sp,fp
 4001b68:	df000017 	ldw	fp,0(sp)
 4001b6c:	dec00104 	addi	sp,sp,4
 4001b70:	f800283a 	ret

04001b74 <pid_compute>:
 * @param pid PID controller object
 * @param input Current state
 *
 * @return Control effort
 */
fp_t pid_compute(PID_t * pid, fp_t input, fp_t dt){
 4001b74:	defff704 	addi	sp,sp,-36
 4001b78:	dfc00815 	stw	ra,32(sp)
 4001b7c:	df000715 	stw	fp,28(sp)
 4001b80:	dc000615 	stw	r16,24(sp)
 4001b84:	df000704 	addi	fp,sp,28
 4001b88:	e13ffc15 	stw	r4,-16(fp)
 4001b8c:	e17ffd15 	stw	r5,-12(fp)
 4001b90:	e1bffe15 	stw	r6,-8(fp)

	fp_t err = pid->setpoint - input;
 4001b94:	e0bffc17 	ldw	r2,-16(fp)
 4001b98:	10c00017 	ldw	r3,0(r2)
 4001b9c:	e17ffd17 	ldw	r5,-12(fp)
 4001ba0:	1809883a 	mov	r4,r3
 4001ba4:	4002c800 	call	4002c80 <__subsf3>
 4001ba8:	1007883a 	mov	r3,r2
 4001bac:	e0fffa15 	stw	r3,-24(fp)

	// Integrate error
	pid->i += err;
 4001bb0:	e0bffc17 	ldw	r2,-16(fp)
 4001bb4:	10c00117 	ldw	r3,4(r2)
 4001bb8:	e17ffa17 	ldw	r5,-24(fp)
 4001bbc:	1809883a 	mov	r4,r3
 4001bc0:	4001dc40 	call	4001dc4 <__addsf3>
 4001bc4:	1009883a 	mov	r4,r2
 4001bc8:	2007883a 	mov	r3,r4
 4001bcc:	e0bffc17 	ldw	r2,-16(fp)
 4001bd0:	10c00115 	stw	r3,4(r2)

	// Check wind-up limit
	if(pid->i > pid->windup_limit){
 4001bd4:	e0bffc17 	ldw	r2,-16(fp)
 4001bd8:	10c00117 	ldw	r3,4(r2)
 4001bdc:	e0bffc17 	ldw	r2,-16(fp)
 4001be0:	11000617 	ldw	r4,24(r2)
 4001be4:	200b883a 	mov	r5,r4
 4001be8:	1809883a 	mov	r4,r3
 4001bec:	40026cc0 	call	40026cc <__gesf2>
 4001bf0:	0080050e 	bge	zero,r2,4001c08 <pid_compute+0x94>
		pid->i = pid->windup_limit;
 4001bf4:	e0bffc17 	ldw	r2,-16(fp)
 4001bf8:	10c00617 	ldw	r3,24(r2)
 4001bfc:	e0bffc17 	ldw	r2,-16(fp)
 4001c00:	10c00115 	stw	r3,4(r2)
 4001c04:	00000d06 	br	4001c3c <pid_compute+0xc8>
	} else if(pid->i < -1.0f * pid->windup_limit){
 4001c08:	e0bffc17 	ldw	r2,-16(fp)
 4001c0c:	11000117 	ldw	r4,4(r2)
 4001c10:	e0fffc17 	ldw	r3,-16(fp)
 4001c14:	18800617 	ldw	r2,24(r3)
 4001c18:	10a0003c 	xorhi	r2,r2,32768
 4001c1c:	100b883a 	mov	r5,r2
 4001c20:	40027880 	call	4002788 <__lesf2>
 4001c24:	1000050e 	bge	r2,zero,4001c3c <pid_compute+0xc8>
		pid->i = -1.0f * pid->windup_limit;
 4001c28:	e0fffc17 	ldw	r3,-16(fp)
 4001c2c:	18800617 	ldw	r2,24(r3)
 4001c30:	10e0003c 	xorhi	r3,r2,32768
 4001c34:	e0bffc17 	ldw	r2,-16(fp)
 4001c38:	10c00115 	stw	r3,4(r2)
	}

	fp_t der = err - pid->prev_err;
 4001c3c:	e0bffc17 	ldw	r2,-16(fp)
 4001c40:	10c00217 	ldw	r3,8(r2)
 4001c44:	180b883a 	mov	r5,r3
 4001c48:	e13ffa17 	ldw	r4,-24(fp)
 4001c4c:	4002c800 	call	4002c80 <__subsf3>
 4001c50:	1007883a 	mov	r3,r2
 4001c54:	e0fffb15 	stw	r3,-20(fp)

	pid->prev_err = err;
 4001c58:	e0bffc17 	ldw	r2,-16(fp)
 4001c5c:	e0fffa17 	ldw	r3,-24(fp)
 4001c60:	10c00215 	stw	r3,8(r2)

	fp_t output = ( pid->kp * err ) + ( pid->ki * pid->i * dt ) + ( pid->kd * der / dt );
 4001c64:	e0bffc17 	ldw	r2,-16(fp)
 4001c68:	10c00317 	ldw	r3,12(r2)
 4001c6c:	e17ffa17 	ldw	r5,-24(fp)
 4001c70:	1809883a 	mov	r4,r3
 4001c74:	40028500 	call	4002850 <__mulsf3>
 4001c78:	1007883a 	mov	r3,r2
 4001c7c:	1821883a 	mov	r16,r3
 4001c80:	e0bffc17 	ldw	r2,-16(fp)
 4001c84:	10c00417 	ldw	r3,16(r2)
 4001c88:	e0bffc17 	ldw	r2,-16(fp)
 4001c8c:	11000117 	ldw	r4,4(r2)
 4001c90:	200b883a 	mov	r5,r4
 4001c94:	1809883a 	mov	r4,r3
 4001c98:	40028500 	call	4002850 <__mulsf3>
 4001c9c:	1007883a 	mov	r3,r2
 4001ca0:	1805883a 	mov	r2,r3
 4001ca4:	e17ffe17 	ldw	r5,-8(fp)
 4001ca8:	1009883a 	mov	r4,r2
 4001cac:	40028500 	call	4002850 <__mulsf3>
 4001cb0:	1007883a 	mov	r3,r2
 4001cb4:	1805883a 	mov	r2,r3
 4001cb8:	100b883a 	mov	r5,r2
 4001cbc:	8009883a 	mov	r4,r16
 4001cc0:	4001dc40 	call	4001dc4 <__addsf3>
 4001cc4:	1007883a 	mov	r3,r2
 4001cc8:	1821883a 	mov	r16,r3
 4001ccc:	e0bffc17 	ldw	r2,-16(fp)
 4001cd0:	10c00517 	ldw	r3,20(r2)
 4001cd4:	e17ffb17 	ldw	r5,-20(fp)
 4001cd8:	1809883a 	mov	r4,r3
 4001cdc:	40028500 	call	4002850 <__mulsf3>
 4001ce0:	1007883a 	mov	r3,r2
 4001ce4:	1805883a 	mov	r2,r3
 4001ce8:	e17ffe17 	ldw	r5,-8(fp)
 4001cec:	1009883a 	mov	r4,r2
 4001cf0:	400228c0 	call	400228c <__divsf3>
 4001cf4:	1007883a 	mov	r3,r2
 4001cf8:	1805883a 	mov	r2,r3
 4001cfc:	100b883a 	mov	r5,r2
 4001d00:	8009883a 	mov	r4,r16
 4001d04:	4001dc40 	call	4001dc4 <__addsf3>
 4001d08:	1007883a 	mov	r3,r2
 4001d0c:	e0fff915 	stw	r3,-28(fp)

	// Don't command more than maximum value
	if( output > pid->max){
 4001d10:	e0bffc17 	ldw	r2,-16(fp)
 4001d14:	10c00717 	ldw	r3,28(r2)
 4001d18:	e17ff917 	ldw	r5,-28(fp)
 4001d1c:	1809883a 	mov	r4,r3
 4001d20:	40027880 	call	4002788 <__lesf2>
 4001d24:	1000040e 	bge	r2,zero,4001d38 <pid_compute+0x1c4>
		output = pid->max;
 4001d28:	e0bffc17 	ldw	r2,-16(fp)
 4001d2c:	10800717 	ldw	r2,28(r2)
 4001d30:	e0bff915 	stw	r2,-28(fp)
 4001d34:	00000906 	br	4001d5c <pid_compute+0x1e8>
	} else if( output < pid->min){
 4001d38:	e0bffc17 	ldw	r2,-16(fp)
 4001d3c:	10c00817 	ldw	r3,32(r2)
 4001d40:	e17ff917 	ldw	r5,-28(fp)
 4001d44:	1809883a 	mov	r4,r3
 4001d48:	40026cc0 	call	40026cc <__gesf2>
 4001d4c:	0080030e 	bge	zero,r2,4001d5c <pid_compute+0x1e8>
		output = pid->min;
 4001d50:	e0bffc17 	ldw	r2,-16(fp)
 4001d54:	10800817 	ldw	r2,32(r2)
 4001d58:	e0bff915 	stw	r2,-28(fp)
	}

	if( pid->mode == REVERSE){
 4001d5c:	e0bffc17 	ldw	r2,-16(fp)
 4001d60:	10800917 	ldw	r2,36(r2)
 4001d64:	10800058 	cmpnei	r2,r2,1
 4001d68:	1000031e 	bne	r2,zero,4001d78 <pid_compute+0x204>
		output *= -1.0f;
 4001d6c:	e0bff917 	ldw	r2,-28(fp)
 4001d70:	10a0003c 	xorhi	r2,r2,32768
 4001d74:	e0bff915 	stw	r2,-28(fp)
	}

	return output;
 4001d78:	e0bff917 	ldw	r2,-28(fp)
 4001d7c:	1007883a 	mov	r3,r2

}
 4001d80:	1805883a 	mov	r2,r3
 4001d84:	e6ffff04 	addi	sp,fp,-4
 4001d88:	dfc00217 	ldw	ra,8(sp)
 4001d8c:	df000117 	ldw	fp,4(sp)
 4001d90:	dc000017 	ldw	r16,0(sp)
 4001d94:	dec00304 	addi	sp,sp,12
 4001d98:	f800283a 	ret

04001d9c <__mulsi3>:
 4001d9c:	0005883a 	mov	r2,zero
 4001da0:	20000726 	beq	r4,zero,4001dc0 <__mulsi3+0x24>
 4001da4:	20c0004c 	andi	r3,r4,1
 4001da8:	2008d07a 	srli	r4,r4,1
 4001dac:	18000126 	beq	r3,zero,4001db4 <__mulsi3+0x18>
 4001db0:	1145883a 	add	r2,r2,r5
 4001db4:	294b883a 	add	r5,r5,r5
 4001db8:	203ffa1e 	bne	r4,zero,4001da4 <__alt_data_end+0xfc001da4>
 4001dbc:	f800283a 	ret
 4001dc0:	f800283a 	ret

04001dc4 <__addsf3>:
 4001dc4:	defffc04 	addi	sp,sp,-16
 4001dc8:	2004d7fa 	srli	r2,r4,31
 4001dcc:	280cd5fa 	srli	r6,r5,23
 4001dd0:	dc000015 	stw	r16,0(sp)
 4001dd4:	00c02034 	movhi	r3,128
 4001dd8:	2020d5fa 	srli	r16,r4,23
 4001ddc:	280ed7fa 	srli	r7,r5,31
 4001de0:	18ffffc4 	addi	r3,r3,-1
 4001de4:	dc400115 	stw	r17,4(sp)
 4001de8:	1908703a 	and	r4,r3,r4
 4001dec:	194a703a 	and	r5,r3,r5
 4001df0:	dfc00315 	stw	ra,12(sp)
 4001df4:	dc800215 	stw	r18,8(sp)
 4001df8:	14403fcc 	andi	r17,r2,255
 4001dfc:	84003fcc 	andi	r16,r16,255
 4001e00:	200890fa 	slli	r4,r4,3
 4001e04:	31803fcc 	andi	r6,r6,255
 4001e08:	280a90fa 	slli	r5,r5,3
 4001e0c:	89c05026 	beq	r17,r7,4001f50 <__addsf3+0x18c>
 4001e10:	8185c83a 	sub	r2,r16,r6
 4001e14:	00807a0e 	bge	zero,r2,4002000 <__addsf3+0x23c>
 4001e18:	30001e1e 	bne	r6,zero,4001e94 <__addsf3+0xd0>
 4001e1c:	28006d1e 	bne	r5,zero,4001fd4 <__addsf3+0x210>
 4001e20:	208001cc 	andi	r2,r4,7
 4001e24:	10000426 	beq	r2,zero,4001e38 <__addsf3+0x74>
 4001e28:	208003cc 	andi	r2,r4,15
 4001e2c:	00c00104 	movi	r3,4
 4001e30:	10c00126 	beq	r2,r3,4001e38 <__addsf3+0x74>
 4001e34:	20c9883a 	add	r4,r4,r3
 4001e38:	2081002c 	andhi	r2,r4,1024
 4001e3c:	10003926 	beq	r2,zero,4001f24 <__addsf3+0x160>
 4001e40:	84000044 	addi	r16,r16,1
 4001e44:	00803fc4 	movi	r2,255
 4001e48:	80807826 	beq	r16,r2,400202c <__addsf3+0x268>
 4001e4c:	200891ba 	slli	r4,r4,6
 4001e50:	8805883a 	mov	r2,r17
 4001e54:	2008d27a 	srli	r4,r4,9
 4001e58:	84003fcc 	andi	r16,r16,255
 4001e5c:	800695fa 	slli	r3,r16,23
 4001e60:	10803fcc 	andi	r2,r2,255
 4001e64:	04002034 	movhi	r16,128
 4001e68:	843fffc4 	addi	r16,r16,-1
 4001e6c:	100497fa 	slli	r2,r2,31
 4001e70:	2408703a 	and	r4,r4,r16
 4001e74:	20e0b03a 	or	r16,r4,r3
 4001e78:	8084b03a 	or	r2,r16,r2
 4001e7c:	dfc00317 	ldw	ra,12(sp)
 4001e80:	dc800217 	ldw	r18,8(sp)
 4001e84:	dc400117 	ldw	r17,4(sp)
 4001e88:	dc000017 	ldw	r16,0(sp)
 4001e8c:	dec00404 	addi	sp,sp,16
 4001e90:	f800283a 	ret
 4001e94:	00c03fc4 	movi	r3,255
 4001e98:	80ffe126 	beq	r16,r3,4001e20 <__alt_data_end+0xfc001e20>
 4001e9c:	29410034 	orhi	r5,r5,1024
 4001ea0:	00c006c4 	movi	r3,27
 4001ea4:	18807516 	blt	r3,r2,400207c <__addsf3+0x2b8>
 4001ea8:	00c00804 	movi	r3,32
 4001eac:	1887c83a 	sub	r3,r3,r2
 4001eb0:	28c6983a 	sll	r3,r5,r3
 4001eb4:	288ad83a 	srl	r5,r5,r2
 4001eb8:	1804c03a 	cmpne	r2,r3,zero
 4001ebc:	288ab03a 	or	r5,r5,r2
 4001ec0:	2149c83a 	sub	r4,r4,r5
 4001ec4:	2081002c 	andhi	r2,r4,1024
 4001ec8:	10001426 	beq	r2,zero,4001f1c <__addsf3+0x158>
 4001ecc:	04810034 	movhi	r18,1024
 4001ed0:	94bfffc4 	addi	r18,r18,-1
 4001ed4:	24a4703a 	and	r18,r4,r18
 4001ed8:	9009883a 	mov	r4,r18
 4001edc:	4005cf80 	call	4005cf8 <__clzsi2>
 4001ee0:	10bffec4 	addi	r2,r2,-5
 4001ee4:	90a4983a 	sll	r18,r18,r2
 4001ee8:	14005416 	blt	r2,r16,400203c <__addsf3+0x278>
 4001eec:	1405c83a 	sub	r2,r2,r16
 4001ef0:	11000044 	addi	r4,r2,1
 4001ef4:	00800804 	movi	r2,32
 4001ef8:	1105c83a 	sub	r2,r2,r4
 4001efc:	9084983a 	sll	r2,r18,r2
 4001f00:	9124d83a 	srl	r18,r18,r4
 4001f04:	0021883a 	mov	r16,zero
 4001f08:	1008c03a 	cmpne	r4,r2,zero
 4001f0c:	9108b03a 	or	r4,r18,r4
 4001f10:	003fc306 	br	4001e20 <__alt_data_end+0xfc001e20>
 4001f14:	1000db26 	beq	r2,zero,4002284 <__addsf3+0x4c0>
 4001f18:	1009883a 	mov	r4,r2
 4001f1c:	208001cc 	andi	r2,r4,7
 4001f20:	103fc11e 	bne	r2,zero,4001e28 <__alt_data_end+0xfc001e28>
 4001f24:	2006d0fa 	srli	r3,r4,3
 4001f28:	01003fc4 	movi	r4,255
 4001f2c:	8805883a 	mov	r2,r17
 4001f30:	8100241e 	bne	r16,r4,4001fc4 <__addsf3+0x200>
 4001f34:	18006e26 	beq	r3,zero,40020f0 <__addsf3+0x32c>
 4001f38:	19001034 	orhi	r4,r3,64
 4001f3c:	00c02034 	movhi	r3,128
 4001f40:	18ffffc4 	addi	r3,r3,-1
 4001f44:	043fffc4 	movi	r16,-1
 4001f48:	20c8703a 	and	r4,r4,r3
 4001f4c:	003fc206 	br	4001e58 <__alt_data_end+0xfc001e58>
 4001f50:	8187c83a 	sub	r3,r16,r6
 4001f54:	00c03e0e 	bge	zero,r3,4002050 <__addsf3+0x28c>
 4001f58:	30002326 	beq	r6,zero,4001fe8 <__addsf3+0x224>
 4001f5c:	01803fc4 	movi	r6,255
 4001f60:	81bfaf26 	beq	r16,r6,4001e20 <__alt_data_end+0xfc001e20>
 4001f64:	29410034 	orhi	r5,r5,1024
 4001f68:	018006c4 	movi	r6,27
 4001f6c:	30c07416 	blt	r6,r3,4002140 <__addsf3+0x37c>
 4001f70:	01800804 	movi	r6,32
 4001f74:	30cdc83a 	sub	r6,r6,r3
 4001f78:	298c983a 	sll	r6,r5,r6
 4001f7c:	28cad83a 	srl	r5,r5,r3
 4001f80:	3006c03a 	cmpne	r3,r6,zero
 4001f84:	28cab03a 	or	r5,r5,r3
 4001f88:	2149883a 	add	r4,r4,r5
 4001f8c:	20c1002c 	andhi	r3,r4,1024
 4001f90:	183fe226 	beq	r3,zero,4001f1c <__alt_data_end+0xfc001f1c>
 4001f94:	84000044 	addi	r16,r16,1
 4001f98:	00c03fc4 	movi	r3,255
 4001f9c:	80c05426 	beq	r16,r3,40020f0 <__addsf3+0x32c>
 4001fa0:	00bf0034 	movhi	r2,64512
 4001fa4:	10bfffc4 	addi	r2,r2,-1
 4001fa8:	20c0004c 	andi	r3,r4,1
 4001fac:	2088703a 	and	r4,r4,r2
 4001fb0:	2008d07a 	srli	r4,r4,1
 4001fb4:	20c8b03a 	or	r4,r4,r3
 4001fb8:	003f9906 	br	4001e20 <__alt_data_end+0xfc001e20>
 4001fbc:	0007883a 	mov	r3,zero
 4001fc0:	0005883a 	mov	r2,zero
 4001fc4:	01002034 	movhi	r4,128
 4001fc8:	213fffc4 	addi	r4,r4,-1
 4001fcc:	1908703a 	and	r4,r3,r4
 4001fd0:	003fa106 	br	4001e58 <__alt_data_end+0xfc001e58>
 4001fd4:	10bfffc4 	addi	r2,r2,-1
 4001fd8:	103fb926 	beq	r2,zero,4001ec0 <__alt_data_end+0xfc001ec0>
 4001fdc:	00c03fc4 	movi	r3,255
 4001fe0:	80ffaf1e 	bne	r16,r3,4001ea0 <__alt_data_end+0xfc001ea0>
 4001fe4:	003f8e06 	br	4001e20 <__alt_data_end+0xfc001e20>
 4001fe8:	283f8d26 	beq	r5,zero,4001e20 <__alt_data_end+0xfc001e20>
 4001fec:	18ffffc4 	addi	r3,r3,-1
 4001ff0:	183fe526 	beq	r3,zero,4001f88 <__alt_data_end+0xfc001f88>
 4001ff4:	01803fc4 	movi	r6,255
 4001ff8:	81bfdb1e 	bne	r16,r6,4001f68 <__alt_data_end+0xfc001f68>
 4001ffc:	003f8806 	br	4001e20 <__alt_data_end+0xfc001e20>
 4002000:	1000201e 	bne	r2,zero,4002084 <__addsf3+0x2c0>
 4002004:	80800044 	addi	r2,r16,1
 4002008:	10803fcc 	andi	r2,r2,255
 400200c:	01800044 	movi	r6,1
 4002010:	3080450e 	bge	r6,r2,4002128 <__addsf3+0x364>
 4002014:	2165c83a 	sub	r18,r4,r5
 4002018:	90c1002c 	andhi	r3,r18,1024
 400201c:	18002b26 	beq	r3,zero,40020cc <__addsf3+0x308>
 4002020:	2925c83a 	sub	r18,r5,r4
 4002024:	3823883a 	mov	r17,r7
 4002028:	003fab06 	br	4001ed8 <__alt_data_end+0xfc001ed8>
 400202c:	8805883a 	mov	r2,r17
 4002030:	043fffc4 	movi	r16,-1
 4002034:	0009883a 	mov	r4,zero
 4002038:	003f8706 	br	4001e58 <__alt_data_end+0xfc001e58>
 400203c:	013f0034 	movhi	r4,64512
 4002040:	213fffc4 	addi	r4,r4,-1
 4002044:	80a1c83a 	sub	r16,r16,r2
 4002048:	9108703a 	and	r4,r18,r4
 400204c:	003f7406 	br	4001e20 <__alt_data_end+0xfc001e20>
 4002050:	1800411e 	bne	r3,zero,4002158 <__addsf3+0x394>
 4002054:	80c00044 	addi	r3,r16,1
 4002058:	19c03fcc 	andi	r7,r3,255
 400205c:	01800044 	movi	r6,1
 4002060:	31c0260e 	bge	r6,r7,40020fc <__addsf3+0x338>
 4002064:	01803fc4 	movi	r6,255
 4002068:	19802126 	beq	r3,r6,40020f0 <__addsf3+0x32c>
 400206c:	2149883a 	add	r4,r4,r5
 4002070:	2008d07a 	srli	r4,r4,1
 4002074:	1821883a 	mov	r16,r3
 4002078:	003f6906 	br	4001e20 <__alt_data_end+0xfc001e20>
 400207c:	01400044 	movi	r5,1
 4002080:	003f8f06 	br	4001ec0 <__alt_data_end+0xfc001ec0>
 4002084:	8000151e 	bne	r16,zero,40020dc <__addsf3+0x318>
 4002088:	20002f26 	beq	r4,zero,4002148 <__addsf3+0x384>
 400208c:	0084303a 	nor	r2,zero,r2
 4002090:	10000a26 	beq	r2,zero,40020bc <__addsf3+0x2f8>
 4002094:	00c03fc4 	movi	r3,255
 4002098:	30c02b26 	beq	r6,r3,4002148 <__addsf3+0x384>
 400209c:	00c006c4 	movi	r3,27
 40020a0:	18806d16 	blt	r3,r2,4002258 <__addsf3+0x494>
 40020a4:	00c00804 	movi	r3,32
 40020a8:	1887c83a 	sub	r3,r3,r2
 40020ac:	20c6983a 	sll	r3,r4,r3
 40020b0:	2084d83a 	srl	r2,r4,r2
 40020b4:	1808c03a 	cmpne	r4,r3,zero
 40020b8:	1108b03a 	or	r4,r2,r4
 40020bc:	2909c83a 	sub	r4,r5,r4
 40020c0:	3021883a 	mov	r16,r6
 40020c4:	3823883a 	mov	r17,r7
 40020c8:	003f7e06 	br	4001ec4 <__alt_data_end+0xfc001ec4>
 40020cc:	903f821e 	bne	r18,zero,4001ed8 <__alt_data_end+0xfc001ed8>
 40020d0:	0005883a 	mov	r2,zero
 40020d4:	0021883a 	mov	r16,zero
 40020d8:	003fba06 	br	4001fc4 <__alt_data_end+0xfc001fc4>
 40020dc:	00c03fc4 	movi	r3,255
 40020e0:	30c01926 	beq	r6,r3,4002148 <__addsf3+0x384>
 40020e4:	0085c83a 	sub	r2,zero,r2
 40020e8:	21010034 	orhi	r4,r4,1024
 40020ec:	003feb06 	br	400209c <__alt_data_end+0xfc00209c>
 40020f0:	043fffc4 	movi	r16,-1
 40020f4:	0009883a 	mov	r4,zero
 40020f8:	003f5706 	br	4001e58 <__alt_data_end+0xfc001e58>
 40020fc:	80004a1e 	bne	r16,zero,4002228 <__addsf3+0x464>
 4002100:	20005926 	beq	r4,zero,4002268 <__addsf3+0x4a4>
 4002104:	283f4626 	beq	r5,zero,4001e20 <__alt_data_end+0xfc001e20>
 4002108:	2149883a 	add	r4,r4,r5
 400210c:	2081002c 	andhi	r2,r4,1024
 4002110:	103f8226 	beq	r2,zero,4001f1c <__alt_data_end+0xfc001f1c>
 4002114:	00bf0034 	movhi	r2,64512
 4002118:	10bfffc4 	addi	r2,r2,-1
 400211c:	3021883a 	mov	r16,r6
 4002120:	2088703a 	and	r4,r4,r2
 4002124:	003f3e06 	br	4001e20 <__alt_data_end+0xfc001e20>
 4002128:	8000121e 	bne	r16,zero,4002174 <__addsf3+0x3b0>
 400212c:	2000261e 	bne	r4,zero,40021c8 <__addsf3+0x404>
 4002130:	283fa226 	beq	r5,zero,4001fbc <__alt_data_end+0xfc001fbc>
 4002134:	2809883a 	mov	r4,r5
 4002138:	3823883a 	mov	r17,r7
 400213c:	003f3806 	br	4001e20 <__alt_data_end+0xfc001e20>
 4002140:	01400044 	movi	r5,1
 4002144:	003f9006 	br	4001f88 <__alt_data_end+0xfc001f88>
 4002148:	2809883a 	mov	r4,r5
 400214c:	3021883a 	mov	r16,r6
 4002150:	3823883a 	mov	r17,r7
 4002154:	003f3206 	br	4001e20 <__alt_data_end+0xfc001e20>
 4002158:	80000c1e 	bne	r16,zero,400218c <__addsf3+0x3c8>
 400215c:	20002f26 	beq	r4,zero,400221c <__addsf3+0x458>
 4002160:	00c6303a 	nor	r3,zero,r3
 4002164:	18002b1e 	bne	r3,zero,4002214 <__addsf3+0x450>
 4002168:	2149883a 	add	r4,r4,r5
 400216c:	3021883a 	mov	r16,r6
 4002170:	003f8606 	br	4001f8c <__alt_data_end+0xfc001f8c>
 4002174:	20001b1e 	bne	r4,zero,40021e4 <__addsf3+0x420>
 4002178:	28003926 	beq	r5,zero,4002260 <__addsf3+0x49c>
 400217c:	2809883a 	mov	r4,r5
 4002180:	3823883a 	mov	r17,r7
 4002184:	04003fc4 	movi	r16,255
 4002188:	003f2506 	br	4001e20 <__alt_data_end+0xfc001e20>
 400218c:	01c03fc4 	movi	r7,255
 4002190:	31c02226 	beq	r6,r7,400221c <__addsf3+0x458>
 4002194:	00c7c83a 	sub	r3,zero,r3
 4002198:	21010034 	orhi	r4,r4,1024
 400219c:	01c006c4 	movi	r7,27
 40021a0:	38c03616 	blt	r7,r3,400227c <__addsf3+0x4b8>
 40021a4:	01c00804 	movi	r7,32
 40021a8:	38cfc83a 	sub	r7,r7,r3
 40021ac:	21ce983a 	sll	r7,r4,r7
 40021b0:	20c6d83a 	srl	r3,r4,r3
 40021b4:	3808c03a 	cmpne	r4,r7,zero
 40021b8:	1906b03a 	or	r3,r3,r4
 40021bc:	1949883a 	add	r4,r3,r5
 40021c0:	3021883a 	mov	r16,r6
 40021c4:	003f7106 	br	4001f8c <__alt_data_end+0xfc001f8c>
 40021c8:	283f1526 	beq	r5,zero,4001e20 <__alt_data_end+0xfc001e20>
 40021cc:	2145c83a 	sub	r2,r4,r5
 40021d0:	10c1002c 	andhi	r3,r2,1024
 40021d4:	183f4f26 	beq	r3,zero,4001f14 <__alt_data_end+0xfc001f14>
 40021d8:	2909c83a 	sub	r4,r5,r4
 40021dc:	3823883a 	mov	r17,r7
 40021e0:	003f0f06 	br	4001e20 <__alt_data_end+0xfc001e20>
 40021e4:	28001a26 	beq	r5,zero,4002250 <__addsf3+0x48c>
 40021e8:	2008d0fa 	srli	r4,r4,3
 40021ec:	2080102c 	andhi	r2,r4,64
 40021f0:	10000526 	beq	r2,zero,4002208 <__addsf3+0x444>
 40021f4:	280ad0fa 	srli	r5,r5,3
 40021f8:	2880102c 	andhi	r2,r5,64
 40021fc:	1000021e 	bne	r2,zero,4002208 <__addsf3+0x444>
 4002200:	2809883a 	mov	r4,r5
 4002204:	3823883a 	mov	r17,r7
 4002208:	200890fa 	slli	r4,r4,3
 400220c:	04003fc4 	movi	r16,255
 4002210:	003f0306 	br	4001e20 <__alt_data_end+0xfc001e20>
 4002214:	01c03fc4 	movi	r7,255
 4002218:	31ffe01e 	bne	r6,r7,400219c <__alt_data_end+0xfc00219c>
 400221c:	2809883a 	mov	r4,r5
 4002220:	3021883a 	mov	r16,r6
 4002224:	003efe06 	br	4001e20 <__alt_data_end+0xfc001e20>
 4002228:	20001126 	beq	r4,zero,4002270 <__addsf3+0x4ac>
 400222c:	28000826 	beq	r5,zero,4002250 <__addsf3+0x48c>
 4002230:	2008d0fa 	srli	r4,r4,3
 4002234:	2080102c 	andhi	r2,r4,64
 4002238:	103ff326 	beq	r2,zero,4002208 <__alt_data_end+0xfc002208>
 400223c:	280ad0fa 	srli	r5,r5,3
 4002240:	2880102c 	andhi	r2,r5,64
 4002244:	103ff01e 	bne	r2,zero,4002208 <__alt_data_end+0xfc002208>
 4002248:	2809883a 	mov	r4,r5
 400224c:	003fee06 	br	4002208 <__alt_data_end+0xfc002208>
 4002250:	04003fc4 	movi	r16,255
 4002254:	003ef206 	br	4001e20 <__alt_data_end+0xfc001e20>
 4002258:	01000044 	movi	r4,1
 400225c:	003f9706 	br	40020bc <__alt_data_end+0xfc0020bc>
 4002260:	0005883a 	mov	r2,zero
 4002264:	003f3406 	br	4001f38 <__alt_data_end+0xfc001f38>
 4002268:	2809883a 	mov	r4,r5
 400226c:	003eec06 	br	4001e20 <__alt_data_end+0xfc001e20>
 4002270:	2809883a 	mov	r4,r5
 4002274:	04003fc4 	movi	r16,255
 4002278:	003ee906 	br	4001e20 <__alt_data_end+0xfc001e20>
 400227c:	00c00044 	movi	r3,1
 4002280:	003fce06 	br	40021bc <__alt_data_end+0xfc0021bc>
 4002284:	0005883a 	mov	r2,zero
 4002288:	003f4e06 	br	4001fc4 <__alt_data_end+0xfc001fc4>

0400228c <__divsf3>:
 400228c:	defff504 	addi	sp,sp,-44
 4002290:	200cd5fa 	srli	r6,r4,23
 4002294:	dcc00415 	stw	r19,16(sp)
 4002298:	2026d7fa 	srli	r19,r4,31
 400229c:	00c02034 	movhi	r3,128
 40022a0:	dd800715 	stw	r22,28(sp)
 40022a4:	dd000515 	stw	r20,20(sp)
 40022a8:	dc800315 	stw	r18,12(sp)
 40022ac:	18ffffc4 	addi	r3,r3,-1
 40022b0:	dfc00a15 	stw	ra,40(sp)
 40022b4:	df000915 	stw	fp,36(sp)
 40022b8:	ddc00815 	stw	r23,32(sp)
 40022bc:	dd400615 	stw	r21,24(sp)
 40022c0:	dc400215 	stw	r17,8(sp)
 40022c4:	dc000115 	stw	r16,4(sp)
 40022c8:	35003fcc 	andi	r20,r6,255
 40022cc:	1924703a 	and	r18,r3,r4
 40022d0:	9d803fcc 	andi	r22,r19,255
 40022d4:	a0005226 	beq	r20,zero,4002420 <__divsf3+0x194>
 40022d8:	00803fc4 	movi	r2,255
 40022dc:	a0802e26 	beq	r20,r2,4002398 <__divsf3+0x10c>
 40022e0:	91002034 	orhi	r4,r18,128
 40022e4:	202490fa 	slli	r18,r4,3
 40022e8:	a53fe044 	addi	r20,r20,-127
 40022ec:	0021883a 	mov	r16,zero
 40022f0:	002f883a 	mov	r23,zero
 40022f4:	280cd5fa 	srli	r6,r5,23
 40022f8:	282ad7fa 	srli	r21,r5,31
 40022fc:	00c02034 	movhi	r3,128
 4002300:	18ffffc4 	addi	r3,r3,-1
 4002304:	31803fcc 	andi	r6,r6,255
 4002308:	1962703a 	and	r17,r3,r5
 400230c:	af003fcc 	andi	fp,r21,255
 4002310:	30004a26 	beq	r6,zero,400243c <__divsf3+0x1b0>
 4002314:	00803fc4 	movi	r2,255
 4002318:	30804526 	beq	r6,r2,4002430 <__divsf3+0x1a4>
 400231c:	89402034 	orhi	r5,r17,128
 4002320:	282290fa 	slli	r17,r5,3
 4002324:	31bfe044 	addi	r6,r6,-127
 4002328:	000b883a 	mov	r5,zero
 400232c:	2c20b03a 	or	r16,r5,r16
 4002330:	802090ba 	slli	r16,r16,2
 4002334:	00810034 	movhi	r2,1024
 4002338:	1088d604 	addi	r2,r2,9048
 400233c:	80a1883a 	add	r16,r16,r2
 4002340:	81000017 	ldw	r4,0(r16)
 4002344:	9d46f03a 	xor	r3,r19,r21
 4002348:	180f883a 	mov	r7,r3
 400234c:	18803fcc 	andi	r2,r3,255
 4002350:	a18dc83a 	sub	r6,r20,r6
 4002354:	2000683a 	jmp	r4
 4002358:	0400253c 	xorhi	r16,zero,148
 400235c:	040023c0 	call	40023c <__reset-0x3bffdc4>
 4002360:	04002530 	cmpltui	r16,zero,148
 4002364:	040023ac 	andhi	r16,zero,142
 4002368:	04002530 	cmpltui	r16,zero,148
 400236c:	04002508 	cmpgei	r16,zero,148
 4002370:	04002530 	cmpltui	r16,zero,148
 4002374:	040023ac 	andhi	r16,zero,142
 4002378:	040023c0 	call	40023c <__reset-0x3bffdc4>
 400237c:	040023c0 	call	40023c <__reset-0x3bffdc4>
 4002380:	04002508 	cmpgei	r16,zero,148
 4002384:	040023ac 	andhi	r16,zero,142
 4002388:	0400261c 	xori	r16,zero,152
 400238c:	0400261c 	xori	r16,zero,152
 4002390:	0400261c 	xori	r16,zero,152
 4002394:	040025d0 	cmplti	r16,zero,151
 4002398:	9000581e 	bne	r18,zero,40024fc <__divsf3+0x270>
 400239c:	04000204 	movi	r16,8
 40023a0:	05c00084 	movi	r23,2
 40023a4:	003fd306 	br	40022f4 <__alt_data_end+0xfc0022f4>
 40023a8:	0023883a 	mov	r17,zero
 40023ac:	e02d883a 	mov	r22,fp
 40023b0:	282f883a 	mov	r23,r5
 40023b4:	00800084 	movi	r2,2
 40023b8:	b8808f1e 	bne	r23,r2,40025f8 <__divsf3+0x36c>
 40023bc:	b005883a 	mov	r2,r22
 40023c0:	11c0004c 	andi	r7,r2,1
 40023c4:	013fffc4 	movi	r4,-1
 40023c8:	000d883a 	mov	r6,zero
 40023cc:	21003fcc 	andi	r4,r4,255
 40023d0:	200895fa 	slli	r4,r4,23
 40023d4:	38803fcc 	andi	r2,r7,255
 40023d8:	00c02034 	movhi	r3,128
 40023dc:	100497fa 	slli	r2,r2,31
 40023e0:	18ffffc4 	addi	r3,r3,-1
 40023e4:	30c6703a 	and	r3,r6,r3
 40023e8:	1906b03a 	or	r3,r3,r4
 40023ec:	1884b03a 	or	r2,r3,r2
 40023f0:	dfc00a17 	ldw	ra,40(sp)
 40023f4:	df000917 	ldw	fp,36(sp)
 40023f8:	ddc00817 	ldw	r23,32(sp)
 40023fc:	dd800717 	ldw	r22,28(sp)
 4002400:	dd400617 	ldw	r21,24(sp)
 4002404:	dd000517 	ldw	r20,20(sp)
 4002408:	dcc00417 	ldw	r19,16(sp)
 400240c:	dc800317 	ldw	r18,12(sp)
 4002410:	dc400217 	ldw	r17,8(sp)
 4002414:	dc000117 	ldw	r16,4(sp)
 4002418:	dec00b04 	addi	sp,sp,44
 400241c:	f800283a 	ret
 4002420:	90002b1e 	bne	r18,zero,40024d0 <__divsf3+0x244>
 4002424:	04000104 	movi	r16,4
 4002428:	05c00044 	movi	r23,1
 400242c:	003fb106 	br	40022f4 <__alt_data_end+0xfc0022f4>
 4002430:	8800251e 	bne	r17,zero,40024c8 <__divsf3+0x23c>
 4002434:	01400084 	movi	r5,2
 4002438:	00000206 	br	4002444 <__divsf3+0x1b8>
 400243c:	88001a1e 	bne	r17,zero,40024a8 <__divsf3+0x21c>
 4002440:	01400044 	movi	r5,1
 4002444:	8160b03a 	or	r16,r16,r5
 4002448:	802090ba 	slli	r16,r16,2
 400244c:	00c10034 	movhi	r3,1024
 4002450:	18c91a04 	addi	r3,r3,9320
 4002454:	80e1883a 	add	r16,r16,r3
 4002458:	80c00017 	ldw	r3,0(r16)
 400245c:	9d44f03a 	xor	r2,r19,r21
 4002460:	a18dc83a 	sub	r6,r20,r6
 4002464:	1800683a 	jmp	r3
 4002468:	040023c0 	call	40023c <__reset-0x3bffdc4>
 400246c:	040023c0 	call	40023c <__reset-0x3bffdc4>
 4002470:	0400260c 	andi	r16,zero,152
 4002474:	040023a8 	cmpgeui	r16,zero,142
 4002478:	0400260c 	andi	r16,zero,152
 400247c:	04002508 	cmpgei	r16,zero,148
 4002480:	0400260c 	andi	r16,zero,152
 4002484:	040023a8 	cmpgeui	r16,zero,142
 4002488:	040023c0 	call	40023c <__reset-0x3bffdc4>
 400248c:	040023c0 	call	40023c <__reset-0x3bffdc4>
 4002490:	04002508 	cmpgei	r16,zero,148
 4002494:	040023a8 	cmpgeui	r16,zero,142
 4002498:	0400261c 	xori	r16,zero,152
 400249c:	0400261c 	xori	r16,zero,152
 40024a0:	0400261c 	xori	r16,zero,152
 40024a4:	04002634 	movhi	r16,152
 40024a8:	8809883a 	mov	r4,r17
 40024ac:	4005cf80 	call	4005cf8 <__clzsi2>
 40024b0:	10fffec4 	addi	r3,r2,-5
 40024b4:	10801d84 	addi	r2,r2,118
 40024b8:	88e2983a 	sll	r17,r17,r3
 40024bc:	008dc83a 	sub	r6,zero,r2
 40024c0:	000b883a 	mov	r5,zero
 40024c4:	003f9906 	br	400232c <__alt_data_end+0xfc00232c>
 40024c8:	014000c4 	movi	r5,3
 40024cc:	003f9706 	br	400232c <__alt_data_end+0xfc00232c>
 40024d0:	9009883a 	mov	r4,r18
 40024d4:	d9400015 	stw	r5,0(sp)
 40024d8:	4005cf80 	call	4005cf8 <__clzsi2>
 40024dc:	10fffec4 	addi	r3,r2,-5
 40024e0:	11801d84 	addi	r6,r2,118
 40024e4:	90e4983a 	sll	r18,r18,r3
 40024e8:	01a9c83a 	sub	r20,zero,r6
 40024ec:	0021883a 	mov	r16,zero
 40024f0:	002f883a 	mov	r23,zero
 40024f4:	d9400017 	ldw	r5,0(sp)
 40024f8:	003f7e06 	br	40022f4 <__alt_data_end+0xfc0022f4>
 40024fc:	04000304 	movi	r16,12
 4002500:	05c000c4 	movi	r23,3
 4002504:	003f7b06 	br	40022f4 <__alt_data_end+0xfc0022f4>
 4002508:	01802034 	movhi	r6,128
 400250c:	000f883a 	mov	r7,zero
 4002510:	31bfffc4 	addi	r6,r6,-1
 4002514:	013fffc4 	movi	r4,-1
 4002518:	003fac06 	br	40023cc <__alt_data_end+0xfc0023cc>
 400251c:	01400044 	movi	r5,1
 4002520:	2909c83a 	sub	r4,r5,r4
 4002524:	00c006c4 	movi	r3,27
 4002528:	19004b0e 	bge	r3,r4,4002658 <__divsf3+0x3cc>
 400252c:	114e703a 	and	r7,r2,r5
 4002530:	0009883a 	mov	r4,zero
 4002534:	000d883a 	mov	r6,zero
 4002538:	003fa406 	br	40023cc <__alt_data_end+0xfc0023cc>
 400253c:	9006917a 	slli	r3,r18,5
 4002540:	8822917a 	slli	r17,r17,5
 4002544:	1c40372e 	bgeu	r3,r17,4002624 <__divsf3+0x398>
 4002548:	31bfffc4 	addi	r6,r6,-1
 400254c:	010006c4 	movi	r4,27
 4002550:	000b883a 	mov	r5,zero
 4002554:	180f883a 	mov	r7,r3
 4002558:	294b883a 	add	r5,r5,r5
 400255c:	18c7883a 	add	r3,r3,r3
 4002560:	38000116 	blt	r7,zero,4002568 <__divsf3+0x2dc>
 4002564:	1c400236 	bltu	r3,r17,4002570 <__divsf3+0x2e4>
 4002568:	1c47c83a 	sub	r3,r3,r17
 400256c:	29400054 	ori	r5,r5,1
 4002570:	213fffc4 	addi	r4,r4,-1
 4002574:	203ff71e 	bne	r4,zero,4002554 <__alt_data_end+0xfc002554>
 4002578:	1806c03a 	cmpne	r3,r3,zero
 400257c:	1962b03a 	or	r17,r3,r5
 4002580:	31001fc4 	addi	r4,r6,127
 4002584:	013fe50e 	bge	zero,r4,400251c <__alt_data_end+0xfc00251c>
 4002588:	88c001cc 	andi	r3,r17,7
 400258c:	18000426 	beq	r3,zero,40025a0 <__divsf3+0x314>
 4002590:	88c003cc 	andi	r3,r17,15
 4002594:	01400104 	movi	r5,4
 4002598:	19400126 	beq	r3,r5,40025a0 <__divsf3+0x314>
 400259c:	8963883a 	add	r17,r17,r5
 40025a0:	88c2002c 	andhi	r3,r17,2048
 40025a4:	18000426 	beq	r3,zero,40025b8 <__divsf3+0x32c>
 40025a8:	00fe0034 	movhi	r3,63488
 40025ac:	18ffffc4 	addi	r3,r3,-1
 40025b0:	31002004 	addi	r4,r6,128
 40025b4:	88e2703a 	and	r17,r17,r3
 40025b8:	00c03f84 	movi	r3,254
 40025bc:	193f8016 	blt	r3,r4,40023c0 <__alt_data_end+0xfc0023c0>
 40025c0:	880c91ba 	slli	r6,r17,6
 40025c4:	11c0004c 	andi	r7,r2,1
 40025c8:	300cd27a 	srli	r6,r6,9
 40025cc:	003f7f06 	br	40023cc <__alt_data_end+0xfc0023cc>
 40025d0:	9080102c 	andhi	r2,r18,64
 40025d4:	10000226 	beq	r2,zero,40025e0 <__divsf3+0x354>
 40025d8:	8880102c 	andhi	r2,r17,64
 40025dc:	10001826 	beq	r2,zero,4002640 <__divsf3+0x3b4>
 40025e0:	00802034 	movhi	r2,128
 40025e4:	91801034 	orhi	r6,r18,64
 40025e8:	10bfffc4 	addi	r2,r2,-1
 40025ec:	980f883a 	mov	r7,r19
 40025f0:	308c703a 	and	r6,r6,r2
 40025f4:	003fc706 	br	4002514 <__alt_data_end+0xfc002514>
 40025f8:	008000c4 	movi	r2,3
 40025fc:	b8802d26 	beq	r23,r2,40026b4 <__divsf3+0x428>
 4002600:	00c00044 	movi	r3,1
 4002604:	b005883a 	mov	r2,r22
 4002608:	b8ffdd1e 	bne	r23,r3,4002580 <__alt_data_end+0xfc002580>
 400260c:	11c0004c 	andi	r7,r2,1
 4002610:	0009883a 	mov	r4,zero
 4002614:	000d883a 	mov	r6,zero
 4002618:	003f6c06 	br	40023cc <__alt_data_end+0xfc0023cc>
 400261c:	9023883a 	mov	r17,r18
 4002620:	003f6406 	br	40023b4 <__alt_data_end+0xfc0023b4>
 4002624:	1c47c83a 	sub	r3,r3,r17
 4002628:	01000684 	movi	r4,26
 400262c:	01400044 	movi	r5,1
 4002630:	003fc806 	br	4002554 <__alt_data_end+0xfc002554>
 4002634:	9080102c 	andhi	r2,r18,64
 4002638:	103fe926 	beq	r2,zero,40025e0 <__alt_data_end+0xfc0025e0>
 400263c:	0023883a 	mov	r17,zero
 4002640:	00802034 	movhi	r2,128
 4002644:	89801034 	orhi	r6,r17,64
 4002648:	10bfffc4 	addi	r2,r2,-1
 400264c:	a80f883a 	mov	r7,r21
 4002650:	308c703a 	and	r6,r6,r2
 4002654:	003faf06 	br	4002514 <__alt_data_end+0xfc002514>
 4002658:	01c00804 	movi	r7,32
 400265c:	390fc83a 	sub	r7,r7,r4
 4002660:	89ce983a 	sll	r7,r17,r7
 4002664:	890ad83a 	srl	r5,r17,r4
 4002668:	380ec03a 	cmpne	r7,r7,zero
 400266c:	29cab03a 	or	r5,r5,r7
 4002670:	28c001cc 	andi	r3,r5,7
 4002674:	18000426 	beq	r3,zero,4002688 <__divsf3+0x3fc>
 4002678:	28c003cc 	andi	r3,r5,15
 400267c:	01000104 	movi	r4,4
 4002680:	19000126 	beq	r3,r4,4002688 <__divsf3+0x3fc>
 4002684:	290b883a 	add	r5,r5,r4
 4002688:	28c1002c 	andhi	r3,r5,1024
 400268c:	18000426 	beq	r3,zero,40026a0 <__divsf3+0x414>
 4002690:	11c0004c 	andi	r7,r2,1
 4002694:	01000044 	movi	r4,1
 4002698:	000d883a 	mov	r6,zero
 400269c:	003f4b06 	br	40023cc <__alt_data_end+0xfc0023cc>
 40026a0:	280a91ba 	slli	r5,r5,6
 40026a4:	11c0004c 	andi	r7,r2,1
 40026a8:	0009883a 	mov	r4,zero
 40026ac:	280cd27a 	srli	r6,r5,9
 40026b0:	003f4606 	br	40023cc <__alt_data_end+0xfc0023cc>
 40026b4:	00802034 	movhi	r2,128
 40026b8:	89801034 	orhi	r6,r17,64
 40026bc:	10bfffc4 	addi	r2,r2,-1
 40026c0:	b00f883a 	mov	r7,r22
 40026c4:	308c703a 	and	r6,r6,r2
 40026c8:	003f9206 	br	4002514 <__alt_data_end+0xfc002514>

040026cc <__gesf2>:
 40026cc:	2004d5fa 	srli	r2,r4,23
 40026d0:	2806d5fa 	srli	r3,r5,23
 40026d4:	01802034 	movhi	r6,128
 40026d8:	31bfffc4 	addi	r6,r6,-1
 40026dc:	10803fcc 	andi	r2,r2,255
 40026e0:	01c03fc4 	movi	r7,255
 40026e4:	3110703a 	and	r8,r6,r4
 40026e8:	18c03fcc 	andi	r3,r3,255
 40026ec:	314c703a 	and	r6,r6,r5
 40026f0:	2008d7fa 	srli	r4,r4,31
 40026f4:	280ad7fa 	srli	r5,r5,31
 40026f8:	11c01926 	beq	r2,r7,4002760 <__gesf2+0x94>
 40026fc:	01c03fc4 	movi	r7,255
 4002700:	19c00f26 	beq	r3,r7,4002740 <__gesf2+0x74>
 4002704:	1000061e 	bne	r2,zero,4002720 <__gesf2+0x54>
 4002708:	400f003a 	cmpeq	r7,r8,zero
 400270c:	1800071e 	bne	r3,zero,400272c <__gesf2+0x60>
 4002710:	3000061e 	bne	r6,zero,400272c <__gesf2+0x60>
 4002714:	0005883a 	mov	r2,zero
 4002718:	40000e1e 	bne	r8,zero,4002754 <__gesf2+0x88>
 400271c:	f800283a 	ret
 4002720:	18000a1e 	bne	r3,zero,400274c <__gesf2+0x80>
 4002724:	30000b26 	beq	r6,zero,4002754 <__gesf2+0x88>
 4002728:	000f883a 	mov	r7,zero
 400272c:	29403fcc 	andi	r5,r5,255
 4002730:	38000726 	beq	r7,zero,4002750 <__gesf2+0x84>
 4002734:	28000826 	beq	r5,zero,4002758 <__gesf2+0x8c>
 4002738:	00800044 	movi	r2,1
 400273c:	f800283a 	ret
 4002740:	303ff026 	beq	r6,zero,4002704 <__alt_data_end+0xfc002704>
 4002744:	00bfff84 	movi	r2,-2
 4002748:	f800283a 	ret
 400274c:	29403fcc 	andi	r5,r5,255
 4002750:	21400526 	beq	r4,r5,4002768 <__gesf2+0x9c>
 4002754:	203ff826 	beq	r4,zero,4002738 <__alt_data_end+0xfc002738>
 4002758:	00bfffc4 	movi	r2,-1
 400275c:	f800283a 	ret
 4002760:	403fe626 	beq	r8,zero,40026fc <__alt_data_end+0xfc0026fc>
 4002764:	003ff706 	br	4002744 <__alt_data_end+0xfc002744>
 4002768:	18bffa16 	blt	r3,r2,4002754 <__alt_data_end+0xfc002754>
 400276c:	10c00216 	blt	r2,r3,4002778 <__gesf2+0xac>
 4002770:	323ff836 	bltu	r6,r8,4002754 <__alt_data_end+0xfc002754>
 4002774:	4180022e 	bgeu	r8,r6,4002780 <__gesf2+0xb4>
 4002778:	203fef1e 	bne	r4,zero,4002738 <__alt_data_end+0xfc002738>
 400277c:	003ff606 	br	4002758 <__alt_data_end+0xfc002758>
 4002780:	0005883a 	mov	r2,zero
 4002784:	f800283a 	ret

04002788 <__lesf2>:
 4002788:	2004d5fa 	srli	r2,r4,23
 400278c:	280cd5fa 	srli	r6,r5,23
 4002790:	00c02034 	movhi	r3,128
 4002794:	18ffffc4 	addi	r3,r3,-1
 4002798:	10803fcc 	andi	r2,r2,255
 400279c:	01c03fc4 	movi	r7,255
 40027a0:	1910703a 	and	r8,r3,r4
 40027a4:	31803fcc 	andi	r6,r6,255
 40027a8:	1946703a 	and	r3,r3,r5
 40027ac:	2008d7fa 	srli	r4,r4,31
 40027b0:	280ad7fa 	srli	r5,r5,31
 40027b4:	11c01b26 	beq	r2,r7,4002824 <__lesf2+0x9c>
 40027b8:	01c03fc4 	movi	r7,255
 40027bc:	31c01126 	beq	r6,r7,4002804 <__lesf2+0x7c>
 40027c0:	1000071e 	bne	r2,zero,40027e0 <__lesf2+0x58>
 40027c4:	400f003a 	cmpeq	r7,r8,zero
 40027c8:	21003fcc 	andi	r4,r4,255
 40027cc:	3000081e 	bne	r6,zero,40027f0 <__lesf2+0x68>
 40027d0:	1800071e 	bne	r3,zero,40027f0 <__lesf2+0x68>
 40027d4:	0005883a 	mov	r2,zero
 40027d8:	40000f1e 	bne	r8,zero,4002818 <__lesf2+0x90>
 40027dc:	f800283a 	ret
 40027e0:	21003fcc 	andi	r4,r4,255
 40027e4:	30000a1e 	bne	r6,zero,4002810 <__lesf2+0x88>
 40027e8:	18000b26 	beq	r3,zero,4002818 <__lesf2+0x90>
 40027ec:	000f883a 	mov	r7,zero
 40027f0:	29403fcc 	andi	r5,r5,255
 40027f4:	38000726 	beq	r7,zero,4002814 <__lesf2+0x8c>
 40027f8:	28000826 	beq	r5,zero,400281c <__lesf2+0x94>
 40027fc:	00800044 	movi	r2,1
 4002800:	f800283a 	ret
 4002804:	183fee26 	beq	r3,zero,40027c0 <__alt_data_end+0xfc0027c0>
 4002808:	00800084 	movi	r2,2
 400280c:	f800283a 	ret
 4002810:	29403fcc 	andi	r5,r5,255
 4002814:	21400626 	beq	r4,r5,4002830 <__lesf2+0xa8>
 4002818:	203ff826 	beq	r4,zero,40027fc <__alt_data_end+0xfc0027fc>
 400281c:	00bfffc4 	movi	r2,-1
 4002820:	f800283a 	ret
 4002824:	403fe426 	beq	r8,zero,40027b8 <__alt_data_end+0xfc0027b8>
 4002828:	00800084 	movi	r2,2
 400282c:	f800283a 	ret
 4002830:	30bff916 	blt	r6,r2,4002818 <__alt_data_end+0xfc002818>
 4002834:	11800216 	blt	r2,r6,4002840 <__lesf2+0xb8>
 4002838:	1a3ff736 	bltu	r3,r8,4002818 <__alt_data_end+0xfc002818>
 400283c:	40c0022e 	bgeu	r8,r3,4002848 <__lesf2+0xc0>
 4002840:	203fee1e 	bne	r4,zero,40027fc <__alt_data_end+0xfc0027fc>
 4002844:	003ff506 	br	400281c <__alt_data_end+0xfc00281c>
 4002848:	0005883a 	mov	r2,zero
 400284c:	f800283a 	ret

04002850 <__mulsf3>:
 4002850:	defff504 	addi	sp,sp,-44
 4002854:	dc000115 	stw	r16,4(sp)
 4002858:	2020d5fa 	srli	r16,r4,23
 400285c:	dd400615 	stw	r21,24(sp)
 4002860:	202ad7fa 	srli	r21,r4,31
 4002864:	dc800315 	stw	r18,12(sp)
 4002868:	04802034 	movhi	r18,128
 400286c:	df000915 	stw	fp,36(sp)
 4002870:	dd000515 	stw	r20,20(sp)
 4002874:	94bfffc4 	addi	r18,r18,-1
 4002878:	dfc00a15 	stw	ra,40(sp)
 400287c:	ddc00815 	stw	r23,32(sp)
 4002880:	dd800715 	stw	r22,28(sp)
 4002884:	dcc00415 	stw	r19,16(sp)
 4002888:	dc400215 	stw	r17,8(sp)
 400288c:	84003fcc 	andi	r16,r16,255
 4002890:	9124703a 	and	r18,r18,r4
 4002894:	a829883a 	mov	r20,r21
 4002898:	af003fcc 	andi	fp,r21,255
 400289c:	80005426 	beq	r16,zero,40029f0 <__mulsf3+0x1a0>
 40028a0:	00803fc4 	movi	r2,255
 40028a4:	80802f26 	beq	r16,r2,4002964 <__mulsf3+0x114>
 40028a8:	91002034 	orhi	r4,r18,128
 40028ac:	202490fa 	slli	r18,r4,3
 40028b0:	843fe044 	addi	r16,r16,-127
 40028b4:	0023883a 	mov	r17,zero
 40028b8:	002f883a 	mov	r23,zero
 40028bc:	2804d5fa 	srli	r2,r5,23
 40028c0:	282cd7fa 	srli	r22,r5,31
 40028c4:	01002034 	movhi	r4,128
 40028c8:	213fffc4 	addi	r4,r4,-1
 40028cc:	10803fcc 	andi	r2,r2,255
 40028d0:	2166703a 	and	r19,r4,r5
 40028d4:	b1803fcc 	andi	r6,r22,255
 40028d8:	10004c26 	beq	r2,zero,4002a0c <__mulsf3+0x1bc>
 40028dc:	00c03fc4 	movi	r3,255
 40028e0:	10c04726 	beq	r2,r3,4002a00 <__mulsf3+0x1b0>
 40028e4:	99002034 	orhi	r4,r19,128
 40028e8:	202690fa 	slli	r19,r4,3
 40028ec:	10bfe044 	addi	r2,r2,-127
 40028f0:	0007883a 	mov	r3,zero
 40028f4:	80a1883a 	add	r16,r16,r2
 40028f8:	010003c4 	movi	r4,15
 40028fc:	1c44b03a 	or	r2,r3,r17
 4002900:	b56af03a 	xor	r21,r22,r21
 4002904:	81c00044 	addi	r7,r16,1
 4002908:	20806b36 	bltu	r4,r2,4002ab8 <__mulsf3+0x268>
 400290c:	100490ba 	slli	r2,r2,2
 4002910:	01010034 	movhi	r4,1024
 4002914:	210a4904 	addi	r4,r4,10532
 4002918:	1105883a 	add	r2,r2,r4
 400291c:	10800017 	ldw	r2,0(r2)
 4002920:	1000683a 	jmp	r2
 4002924:	04002ab8 	rdprs	r16,zero,170
 4002928:	04002978 	rdprs	r16,zero,165
 400292c:	04002978 	rdprs	r16,zero,165
 4002930:	04002974 	movhi	r16,165
 4002934:	04002a9c 	xori	r16,zero,170
 4002938:	04002a9c 	xori	r16,zero,170
 400293c:	04002a88 	cmpgei	r16,zero,170
 4002940:	04002974 	movhi	r16,165
 4002944:	04002a9c 	xori	r16,zero,170
 4002948:	04002a88 	cmpgei	r16,zero,170
 400294c:	04002a9c 	xori	r16,zero,170
 4002950:	04002974 	movhi	r16,165
 4002954:	04002aa8 	cmpgeui	r16,zero,170
 4002958:	04002aa8 	cmpgeui	r16,zero,170
 400295c:	04002aa8 	cmpgeui	r16,zero,170
 4002960:	04002bb8 	rdprs	r16,zero,174
 4002964:	90003b1e 	bne	r18,zero,4002a54 <__mulsf3+0x204>
 4002968:	04400204 	movi	r17,8
 400296c:	05c00084 	movi	r23,2
 4002970:	003fd206 	br	40028bc <__alt_data_end+0xfc0028bc>
 4002974:	302b883a 	mov	r21,r6
 4002978:	00800084 	movi	r2,2
 400297c:	18802626 	beq	r3,r2,4002a18 <__mulsf3+0x1c8>
 4002980:	008000c4 	movi	r2,3
 4002984:	1880b826 	beq	r3,r2,4002c68 <__mulsf3+0x418>
 4002988:	00800044 	movi	r2,1
 400298c:	1880af1e 	bne	r3,r2,4002c4c <__mulsf3+0x3fc>
 4002990:	a829883a 	mov	r20,r21
 4002994:	0007883a 	mov	r3,zero
 4002998:	0009883a 	mov	r4,zero
 400299c:	18803fcc 	andi	r2,r3,255
 40029a0:	100695fa 	slli	r3,r2,23
 40029a4:	a0803fcc 	andi	r2,r20,255
 40029a8:	100a97fa 	slli	r5,r2,31
 40029ac:	00802034 	movhi	r2,128
 40029b0:	10bfffc4 	addi	r2,r2,-1
 40029b4:	2084703a 	and	r2,r4,r2
 40029b8:	10c4b03a 	or	r2,r2,r3
 40029bc:	1144b03a 	or	r2,r2,r5
 40029c0:	dfc00a17 	ldw	ra,40(sp)
 40029c4:	df000917 	ldw	fp,36(sp)
 40029c8:	ddc00817 	ldw	r23,32(sp)
 40029cc:	dd800717 	ldw	r22,28(sp)
 40029d0:	dd400617 	ldw	r21,24(sp)
 40029d4:	dd000517 	ldw	r20,20(sp)
 40029d8:	dcc00417 	ldw	r19,16(sp)
 40029dc:	dc800317 	ldw	r18,12(sp)
 40029e0:	dc400217 	ldw	r17,8(sp)
 40029e4:	dc000117 	ldw	r16,4(sp)
 40029e8:	dec00b04 	addi	sp,sp,44
 40029ec:	f800283a 	ret
 40029f0:	90000d1e 	bne	r18,zero,4002a28 <__mulsf3+0x1d8>
 40029f4:	04400104 	movi	r17,4
 40029f8:	05c00044 	movi	r23,1
 40029fc:	003faf06 	br	40028bc <__alt_data_end+0xfc0028bc>
 4002a00:	9806c03a 	cmpne	r3,r19,zero
 4002a04:	18c00084 	addi	r3,r3,2
 4002a08:	003fba06 	br	40028f4 <__alt_data_end+0xfc0028f4>
 4002a0c:	9800141e 	bne	r19,zero,4002a60 <__mulsf3+0x210>
 4002a10:	00c00044 	movi	r3,1
 4002a14:	003fb706 	br	40028f4 <__alt_data_end+0xfc0028f4>
 4002a18:	a829883a 	mov	r20,r21
 4002a1c:	00ffffc4 	movi	r3,-1
 4002a20:	0009883a 	mov	r4,zero
 4002a24:	003fdd06 	br	400299c <__alt_data_end+0xfc00299c>
 4002a28:	9009883a 	mov	r4,r18
 4002a2c:	d9400015 	stw	r5,0(sp)
 4002a30:	4005cf80 	call	4005cf8 <__clzsi2>
 4002a34:	10fffec4 	addi	r3,r2,-5
 4002a38:	10801d84 	addi	r2,r2,118
 4002a3c:	90e4983a 	sll	r18,r18,r3
 4002a40:	00a1c83a 	sub	r16,zero,r2
 4002a44:	0023883a 	mov	r17,zero
 4002a48:	002f883a 	mov	r23,zero
 4002a4c:	d9400017 	ldw	r5,0(sp)
 4002a50:	003f9a06 	br	40028bc <__alt_data_end+0xfc0028bc>
 4002a54:	04400304 	movi	r17,12
 4002a58:	05c000c4 	movi	r23,3
 4002a5c:	003f9706 	br	40028bc <__alt_data_end+0xfc0028bc>
 4002a60:	9809883a 	mov	r4,r19
 4002a64:	d9800015 	stw	r6,0(sp)
 4002a68:	4005cf80 	call	4005cf8 <__clzsi2>
 4002a6c:	10fffec4 	addi	r3,r2,-5
 4002a70:	10801d84 	addi	r2,r2,118
 4002a74:	98e6983a 	sll	r19,r19,r3
 4002a78:	0085c83a 	sub	r2,zero,r2
 4002a7c:	0007883a 	mov	r3,zero
 4002a80:	d9800017 	ldw	r6,0(sp)
 4002a84:	003f9b06 	br	40028f4 <__alt_data_end+0xfc0028f4>
 4002a88:	01002034 	movhi	r4,128
 4002a8c:	0029883a 	mov	r20,zero
 4002a90:	213fffc4 	addi	r4,r4,-1
 4002a94:	00ffffc4 	movi	r3,-1
 4002a98:	003fc006 	br	400299c <__alt_data_end+0xfc00299c>
 4002a9c:	9027883a 	mov	r19,r18
 4002aa0:	b807883a 	mov	r3,r23
 4002aa4:	003fb406 	br	4002978 <__alt_data_end+0xfc002978>
 4002aa8:	9027883a 	mov	r19,r18
 4002aac:	e02b883a 	mov	r21,fp
 4002ab0:	b807883a 	mov	r3,r23
 4002ab4:	003fb006 	br	4002978 <__alt_data_end+0xfc002978>
 4002ab8:	9028d43a 	srli	r20,r18,16
 4002abc:	982cd43a 	srli	r22,r19,16
 4002ac0:	94bfffcc 	andi	r18,r18,65535
 4002ac4:	9cffffcc 	andi	r19,r19,65535
 4002ac8:	980b883a 	mov	r5,r19
 4002acc:	9009883a 	mov	r4,r18
 4002ad0:	d9c00015 	stw	r7,0(sp)
 4002ad4:	4001d9c0 	call	4001d9c <__mulsi3>
 4002ad8:	a00b883a 	mov	r5,r20
 4002adc:	9809883a 	mov	r4,r19
 4002ae0:	1023883a 	mov	r17,r2
 4002ae4:	4001d9c0 	call	4001d9c <__mulsi3>
 4002ae8:	a009883a 	mov	r4,r20
 4002aec:	b00b883a 	mov	r5,r22
 4002af0:	1027883a 	mov	r19,r2
 4002af4:	4001d9c0 	call	4001d9c <__mulsi3>
 4002af8:	b00b883a 	mov	r5,r22
 4002afc:	9009883a 	mov	r4,r18
 4002b00:	1029883a 	mov	r20,r2
 4002b04:	4001d9c0 	call	4001d9c <__mulsi3>
 4002b08:	8806d43a 	srli	r3,r17,16
 4002b0c:	14c5883a 	add	r2,r2,r19
 4002b10:	d9c00017 	ldw	r7,0(sp)
 4002b14:	1885883a 	add	r2,r3,r2
 4002b18:	14c0022e 	bgeu	r2,r19,4002b24 <__mulsf3+0x2d4>
 4002b1c:	00c00074 	movhi	r3,1
 4002b20:	a0e9883a 	add	r20,r20,r3
 4002b24:	1026943a 	slli	r19,r2,16
 4002b28:	8c7fffcc 	andi	r17,r17,65535
 4002b2c:	1004d43a 	srli	r2,r2,16
 4002b30:	9c63883a 	add	r17,r19,r17
 4002b34:	882691ba 	slli	r19,r17,6
 4002b38:	1505883a 	add	r2,r2,r20
 4002b3c:	8822d6ba 	srli	r17,r17,26
 4002b40:	100891ba 	slli	r4,r2,6
 4002b44:	9826c03a 	cmpne	r19,r19,zero
 4002b48:	9c62b03a 	or	r17,r19,r17
 4002b4c:	8926b03a 	or	r19,r17,r4
 4002b50:	9882002c 	andhi	r2,r19,2048
 4002b54:	10000426 	beq	r2,zero,4002b68 <__mulsf3+0x318>
 4002b58:	9804d07a 	srli	r2,r19,1
 4002b5c:	9900004c 	andi	r4,r19,1
 4002b60:	3821883a 	mov	r16,r7
 4002b64:	1126b03a 	or	r19,r2,r4
 4002b68:	80c01fc4 	addi	r3,r16,127
 4002b6c:	00c0210e 	bge	zero,r3,4002bf4 <__mulsf3+0x3a4>
 4002b70:	988001cc 	andi	r2,r19,7
 4002b74:	10000426 	beq	r2,zero,4002b88 <__mulsf3+0x338>
 4002b78:	988003cc 	andi	r2,r19,15
 4002b7c:	01000104 	movi	r4,4
 4002b80:	11000126 	beq	r2,r4,4002b88 <__mulsf3+0x338>
 4002b84:	9927883a 	add	r19,r19,r4
 4002b88:	9882002c 	andhi	r2,r19,2048
 4002b8c:	10000426 	beq	r2,zero,4002ba0 <__mulsf3+0x350>
 4002b90:	00be0034 	movhi	r2,63488
 4002b94:	10bfffc4 	addi	r2,r2,-1
 4002b98:	80c02004 	addi	r3,r16,128
 4002b9c:	98a6703a 	and	r19,r19,r2
 4002ba0:	00803f84 	movi	r2,254
 4002ba4:	10ff9c16 	blt	r2,r3,4002a18 <__alt_data_end+0xfc002a18>
 4002ba8:	980891ba 	slli	r4,r19,6
 4002bac:	a829883a 	mov	r20,r21
 4002bb0:	2008d27a 	srli	r4,r4,9
 4002bb4:	003f7906 	br	400299c <__alt_data_end+0xfc00299c>
 4002bb8:	9080102c 	andhi	r2,r18,64
 4002bbc:	10000826 	beq	r2,zero,4002be0 <__mulsf3+0x390>
 4002bc0:	9880102c 	andhi	r2,r19,64
 4002bc4:	1000061e 	bne	r2,zero,4002be0 <__mulsf3+0x390>
 4002bc8:	00802034 	movhi	r2,128
 4002bcc:	99001034 	orhi	r4,r19,64
 4002bd0:	10bfffc4 	addi	r2,r2,-1
 4002bd4:	b029883a 	mov	r20,r22
 4002bd8:	2088703a 	and	r4,r4,r2
 4002bdc:	003fad06 	br	4002a94 <__alt_data_end+0xfc002a94>
 4002be0:	00802034 	movhi	r2,128
 4002be4:	91001034 	orhi	r4,r18,64
 4002be8:	10bfffc4 	addi	r2,r2,-1
 4002bec:	2088703a 	and	r4,r4,r2
 4002bf0:	003fa806 	br	4002a94 <__alt_data_end+0xfc002a94>
 4002bf4:	00800044 	movi	r2,1
 4002bf8:	10c7c83a 	sub	r3,r2,r3
 4002bfc:	008006c4 	movi	r2,27
 4002c00:	10ff6316 	blt	r2,r3,4002990 <__alt_data_end+0xfc002990>
 4002c04:	00800804 	movi	r2,32
 4002c08:	10c5c83a 	sub	r2,r2,r3
 4002c0c:	9884983a 	sll	r2,r19,r2
 4002c10:	98c6d83a 	srl	r3,r19,r3
 4002c14:	1004c03a 	cmpne	r2,r2,zero
 4002c18:	1884b03a 	or	r2,r3,r2
 4002c1c:	10c001cc 	andi	r3,r2,7
 4002c20:	18000426 	beq	r3,zero,4002c34 <__mulsf3+0x3e4>
 4002c24:	10c003cc 	andi	r3,r2,15
 4002c28:	01000104 	movi	r4,4
 4002c2c:	19000126 	beq	r3,r4,4002c34 <__mulsf3+0x3e4>
 4002c30:	1105883a 	add	r2,r2,r4
 4002c34:	10c1002c 	andhi	r3,r2,1024
 4002c38:	18000626 	beq	r3,zero,4002c54 <__mulsf3+0x404>
 4002c3c:	a829883a 	mov	r20,r21
 4002c40:	00c00044 	movi	r3,1
 4002c44:	0009883a 	mov	r4,zero
 4002c48:	003f5406 	br	400299c <__alt_data_end+0xfc00299c>
 4002c4c:	3821883a 	mov	r16,r7
 4002c50:	003fc506 	br	4002b68 <__alt_data_end+0xfc002b68>
 4002c54:	100491ba 	slli	r2,r2,6
 4002c58:	a829883a 	mov	r20,r21
 4002c5c:	0007883a 	mov	r3,zero
 4002c60:	1008d27a 	srli	r4,r2,9
 4002c64:	003f4d06 	br	400299c <__alt_data_end+0xfc00299c>
 4002c68:	00802034 	movhi	r2,128
 4002c6c:	99001034 	orhi	r4,r19,64
 4002c70:	10bfffc4 	addi	r2,r2,-1
 4002c74:	a829883a 	mov	r20,r21
 4002c78:	2088703a 	and	r4,r4,r2
 4002c7c:	003f8506 	br	4002a94 <__alt_data_end+0xfc002a94>

04002c80 <__subsf3>:
 4002c80:	defffc04 	addi	sp,sp,-16
 4002c84:	280cd5fa 	srli	r6,r5,23
 4002c88:	dc000015 	stw	r16,0(sp)
 4002c8c:	01c02034 	movhi	r7,128
 4002c90:	2020d5fa 	srli	r16,r4,23
 4002c94:	39ffffc4 	addi	r7,r7,-1
 4002c98:	3906703a 	and	r3,r7,r4
 4002c9c:	dc400115 	stw	r17,4(sp)
 4002ca0:	394e703a 	and	r7,r7,r5
 4002ca4:	2022d7fa 	srli	r17,r4,31
 4002ca8:	dfc00315 	stw	ra,12(sp)
 4002cac:	dc800215 	stw	r18,8(sp)
 4002cb0:	31803fcc 	andi	r6,r6,255
 4002cb4:	01003fc4 	movi	r4,255
 4002cb8:	84003fcc 	andi	r16,r16,255
 4002cbc:	180690fa 	slli	r3,r3,3
 4002cc0:	2804d7fa 	srli	r2,r5,31
 4002cc4:	380e90fa 	slli	r7,r7,3
 4002cc8:	31006d26 	beq	r6,r4,4002e80 <__subsf3+0x200>
 4002ccc:	1080005c 	xori	r2,r2,1
 4002cd0:	8189c83a 	sub	r4,r16,r6
 4002cd4:	14404f26 	beq	r2,r17,4002e14 <__subsf3+0x194>
 4002cd8:	0100770e 	bge	zero,r4,4002eb8 <__subsf3+0x238>
 4002cdc:	30001e1e 	bne	r6,zero,4002d58 <__subsf3+0xd8>
 4002ce0:	38006a1e 	bne	r7,zero,4002e8c <__subsf3+0x20c>
 4002ce4:	188001cc 	andi	r2,r3,7
 4002ce8:	10000426 	beq	r2,zero,4002cfc <__subsf3+0x7c>
 4002cec:	188003cc 	andi	r2,r3,15
 4002cf0:	01000104 	movi	r4,4
 4002cf4:	11000126 	beq	r2,r4,4002cfc <__subsf3+0x7c>
 4002cf8:	1907883a 	add	r3,r3,r4
 4002cfc:	1881002c 	andhi	r2,r3,1024
 4002d00:	10003926 	beq	r2,zero,4002de8 <__subsf3+0x168>
 4002d04:	84000044 	addi	r16,r16,1
 4002d08:	00803fc4 	movi	r2,255
 4002d0c:	80807526 	beq	r16,r2,4002ee4 <__subsf3+0x264>
 4002d10:	180691ba 	slli	r3,r3,6
 4002d14:	8880004c 	andi	r2,r17,1
 4002d18:	180ad27a 	srli	r5,r3,9
 4002d1c:	84003fcc 	andi	r16,r16,255
 4002d20:	800695fa 	slli	r3,r16,23
 4002d24:	10803fcc 	andi	r2,r2,255
 4002d28:	01002034 	movhi	r4,128
 4002d2c:	213fffc4 	addi	r4,r4,-1
 4002d30:	100497fa 	slli	r2,r2,31
 4002d34:	2920703a 	and	r16,r5,r4
 4002d38:	80e0b03a 	or	r16,r16,r3
 4002d3c:	8084b03a 	or	r2,r16,r2
 4002d40:	dfc00317 	ldw	ra,12(sp)
 4002d44:	dc800217 	ldw	r18,8(sp)
 4002d48:	dc400117 	ldw	r17,4(sp)
 4002d4c:	dc000017 	ldw	r16,0(sp)
 4002d50:	dec00404 	addi	sp,sp,16
 4002d54:	f800283a 	ret
 4002d58:	00803fc4 	movi	r2,255
 4002d5c:	80bfe126 	beq	r16,r2,4002ce4 <__alt_data_end+0xfc002ce4>
 4002d60:	39c10034 	orhi	r7,r7,1024
 4002d64:	008006c4 	movi	r2,27
 4002d68:	11007416 	blt	r2,r4,4002f3c <__subsf3+0x2bc>
 4002d6c:	00800804 	movi	r2,32
 4002d70:	1105c83a 	sub	r2,r2,r4
 4002d74:	3884983a 	sll	r2,r7,r2
 4002d78:	390ed83a 	srl	r7,r7,r4
 4002d7c:	1008c03a 	cmpne	r4,r2,zero
 4002d80:	390eb03a 	or	r7,r7,r4
 4002d84:	19c7c83a 	sub	r3,r3,r7
 4002d88:	1881002c 	andhi	r2,r3,1024
 4002d8c:	10001426 	beq	r2,zero,4002de0 <__subsf3+0x160>
 4002d90:	04810034 	movhi	r18,1024
 4002d94:	94bfffc4 	addi	r18,r18,-1
 4002d98:	1ca4703a 	and	r18,r3,r18
 4002d9c:	9009883a 	mov	r4,r18
 4002da0:	4005cf80 	call	4005cf8 <__clzsi2>
 4002da4:	10bffec4 	addi	r2,r2,-5
 4002da8:	90a4983a 	sll	r18,r18,r2
 4002dac:	14005116 	blt	r2,r16,4002ef4 <__subsf3+0x274>
 4002db0:	1405c83a 	sub	r2,r2,r16
 4002db4:	10c00044 	addi	r3,r2,1
 4002db8:	00800804 	movi	r2,32
 4002dbc:	10c5c83a 	sub	r2,r2,r3
 4002dc0:	9084983a 	sll	r2,r18,r2
 4002dc4:	90e4d83a 	srl	r18,r18,r3
 4002dc8:	0021883a 	mov	r16,zero
 4002dcc:	1006c03a 	cmpne	r3,r2,zero
 4002dd0:	90c6b03a 	or	r3,r18,r3
 4002dd4:	003fc306 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 4002dd8:	2000e026 	beq	r4,zero,400315c <__subsf3+0x4dc>
 4002ddc:	2007883a 	mov	r3,r4
 4002de0:	188001cc 	andi	r2,r3,7
 4002de4:	103fc11e 	bne	r2,zero,4002cec <__alt_data_end+0xfc002cec>
 4002de8:	180ad0fa 	srli	r5,r3,3
 4002dec:	00c03fc4 	movi	r3,255
 4002df0:	8880004c 	andi	r2,r17,1
 4002df4:	80c0031e 	bne	r16,r3,4002e04 <__subsf3+0x184>
 4002df8:	28006d26 	beq	r5,zero,4002fb0 <__subsf3+0x330>
 4002dfc:	29401034 	orhi	r5,r5,64
 4002e00:	043fffc4 	movi	r16,-1
 4002e04:	00c02034 	movhi	r3,128
 4002e08:	18ffffc4 	addi	r3,r3,-1
 4002e0c:	28ca703a 	and	r5,r5,r3
 4002e10:	003fc206 	br	4002d1c <__alt_data_end+0xfc002d1c>
 4002e14:	01003c0e 	bge	zero,r4,4002f08 <__subsf3+0x288>
 4002e18:	30002126 	beq	r6,zero,4002ea0 <__subsf3+0x220>
 4002e1c:	01403fc4 	movi	r5,255
 4002e20:	817fb026 	beq	r16,r5,4002ce4 <__alt_data_end+0xfc002ce4>
 4002e24:	39c10034 	orhi	r7,r7,1024
 4002e28:	014006c4 	movi	r5,27
 4002e2c:	29007416 	blt	r5,r4,4003000 <__subsf3+0x380>
 4002e30:	01400804 	movi	r5,32
 4002e34:	290bc83a 	sub	r5,r5,r4
 4002e38:	394a983a 	sll	r5,r7,r5
 4002e3c:	390ed83a 	srl	r7,r7,r4
 4002e40:	2808c03a 	cmpne	r4,r5,zero
 4002e44:	390eb03a 	or	r7,r7,r4
 4002e48:	19c7883a 	add	r3,r3,r7
 4002e4c:	1901002c 	andhi	r4,r3,1024
 4002e50:	20003826 	beq	r4,zero,4002f34 <__subsf3+0x2b4>
 4002e54:	84000044 	addi	r16,r16,1
 4002e58:	01003fc4 	movi	r4,255
 4002e5c:	81005426 	beq	r16,r4,4002fb0 <__subsf3+0x330>
 4002e60:	1023883a 	mov	r17,r2
 4002e64:	00bf0034 	movhi	r2,64512
 4002e68:	10bfffc4 	addi	r2,r2,-1
 4002e6c:	1900004c 	andi	r4,r3,1
 4002e70:	1886703a 	and	r3,r3,r2
 4002e74:	1806d07a 	srli	r3,r3,1
 4002e78:	1906b03a 	or	r3,r3,r4
 4002e7c:	003f9906 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 4002e80:	383f9226 	beq	r7,zero,4002ccc <__alt_data_end+0xfc002ccc>
 4002e84:	10803fcc 	andi	r2,r2,255
 4002e88:	003f9106 	br	4002cd0 <__alt_data_end+0xfc002cd0>
 4002e8c:	213fffc4 	addi	r4,r4,-1
 4002e90:	203fbc26 	beq	r4,zero,4002d84 <__alt_data_end+0xfc002d84>
 4002e94:	00803fc4 	movi	r2,255
 4002e98:	80bfb21e 	bne	r16,r2,4002d64 <__alt_data_end+0xfc002d64>
 4002e9c:	003f9106 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 4002ea0:	383f9026 	beq	r7,zero,4002ce4 <__alt_data_end+0xfc002ce4>
 4002ea4:	213fffc4 	addi	r4,r4,-1
 4002ea8:	203fe726 	beq	r4,zero,4002e48 <__alt_data_end+0xfc002e48>
 4002eac:	01403fc4 	movi	r5,255
 4002eb0:	817fdd1e 	bne	r16,r5,4002e28 <__alt_data_end+0xfc002e28>
 4002eb4:	003f8b06 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 4002eb8:	2000221e 	bne	r4,zero,4002f44 <__subsf3+0x2c4>
 4002ebc:	81000044 	addi	r4,r16,1
 4002ec0:	21003fcc 	andi	r4,r4,255
 4002ec4:	01400044 	movi	r5,1
 4002ec8:	2900470e 	bge	r5,r4,4002fe8 <__subsf3+0x368>
 4002ecc:	19e5c83a 	sub	r18,r3,r7
 4002ed0:	9141002c 	andhi	r5,r18,1024
 4002ed4:	28002d26 	beq	r5,zero,4002f8c <__subsf3+0x30c>
 4002ed8:	38e5c83a 	sub	r18,r7,r3
 4002edc:	1023883a 	mov	r17,r2
 4002ee0:	003fae06 	br	4002d9c <__alt_data_end+0xfc002d9c>
 4002ee4:	8880004c 	andi	r2,r17,1
 4002ee8:	043fffc4 	movi	r16,-1
 4002eec:	000b883a 	mov	r5,zero
 4002ef0:	003f8a06 	br	4002d1c <__alt_data_end+0xfc002d1c>
 4002ef4:	00ff0034 	movhi	r3,64512
 4002ef8:	18ffffc4 	addi	r3,r3,-1
 4002efc:	80a1c83a 	sub	r16,r16,r2
 4002f00:	90c6703a 	and	r3,r18,r3
 4002f04:	003f7706 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 4002f08:	2000431e 	bne	r4,zero,4003018 <__subsf3+0x398>
 4002f0c:	81000044 	addi	r4,r16,1
 4002f10:	21803fcc 	andi	r6,r4,255
 4002f14:	01400044 	movi	r5,1
 4002f18:	2980280e 	bge	r5,r6,4002fbc <__subsf3+0x33c>
 4002f1c:	01403fc4 	movi	r5,255
 4002f20:	21402326 	beq	r4,r5,4002fb0 <__subsf3+0x330>
 4002f24:	19c7883a 	add	r3,r3,r7
 4002f28:	1806d07a 	srli	r3,r3,1
 4002f2c:	2021883a 	mov	r16,r4
 4002f30:	003f6c06 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 4002f34:	1023883a 	mov	r17,r2
 4002f38:	003fa906 	br	4002de0 <__alt_data_end+0xfc002de0>
 4002f3c:	01c00044 	movi	r7,1
 4002f40:	003f9006 	br	4002d84 <__alt_data_end+0xfc002d84>
 4002f44:	8000151e 	bne	r16,zero,4002f9c <__subsf3+0x31c>
 4002f48:	18002f26 	beq	r3,zero,4003008 <__subsf3+0x388>
 4002f4c:	0108303a 	nor	r4,zero,r4
 4002f50:	20000a26 	beq	r4,zero,4002f7c <__subsf3+0x2fc>
 4002f54:	01403fc4 	movi	r5,255
 4002f58:	31402b26 	beq	r6,r5,4003008 <__subsf3+0x388>
 4002f5c:	014006c4 	movi	r5,27
 4002f60:	29006e16 	blt	r5,r4,400311c <__subsf3+0x49c>
 4002f64:	01400804 	movi	r5,32
 4002f68:	290bc83a 	sub	r5,r5,r4
 4002f6c:	194a983a 	sll	r5,r3,r5
 4002f70:	1908d83a 	srl	r4,r3,r4
 4002f74:	2806c03a 	cmpne	r3,r5,zero
 4002f78:	20c6b03a 	or	r3,r4,r3
 4002f7c:	38c7c83a 	sub	r3,r7,r3
 4002f80:	3021883a 	mov	r16,r6
 4002f84:	1023883a 	mov	r17,r2
 4002f88:	003f7f06 	br	4002d88 <__alt_data_end+0xfc002d88>
 4002f8c:	903f831e 	bne	r18,zero,4002d9c <__alt_data_end+0xfc002d9c>
 4002f90:	0005883a 	mov	r2,zero
 4002f94:	0021883a 	mov	r16,zero
 4002f98:	003f9a06 	br	4002e04 <__alt_data_end+0xfc002e04>
 4002f9c:	01403fc4 	movi	r5,255
 4002fa0:	31401926 	beq	r6,r5,4003008 <__subsf3+0x388>
 4002fa4:	0109c83a 	sub	r4,zero,r4
 4002fa8:	18c10034 	orhi	r3,r3,1024
 4002fac:	003feb06 	br	4002f5c <__alt_data_end+0xfc002f5c>
 4002fb0:	043fffc4 	movi	r16,-1
 4002fb4:	000b883a 	mov	r5,zero
 4002fb8:	003f5806 	br	4002d1c <__alt_data_end+0xfc002d1c>
 4002fbc:	8000481e 	bne	r16,zero,40030e0 <__subsf3+0x460>
 4002fc0:	18006226 	beq	r3,zero,400314c <__subsf3+0x4cc>
 4002fc4:	383f4726 	beq	r7,zero,4002ce4 <__alt_data_end+0xfc002ce4>
 4002fc8:	19c7883a 	add	r3,r3,r7
 4002fcc:	1881002c 	andhi	r2,r3,1024
 4002fd0:	103f8326 	beq	r2,zero,4002de0 <__alt_data_end+0xfc002de0>
 4002fd4:	00bf0034 	movhi	r2,64512
 4002fd8:	10bfffc4 	addi	r2,r2,-1
 4002fdc:	2821883a 	mov	r16,r5
 4002fe0:	1886703a 	and	r3,r3,r2
 4002fe4:	003f3f06 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 4002fe8:	80001c1e 	bne	r16,zero,400305c <__subsf3+0x3dc>
 4002fec:	1800261e 	bne	r3,zero,4003088 <__subsf3+0x408>
 4002ff0:	38004c26 	beq	r7,zero,4003124 <__subsf3+0x4a4>
 4002ff4:	3807883a 	mov	r3,r7
 4002ff8:	1023883a 	mov	r17,r2
 4002ffc:	003f3906 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 4003000:	01c00044 	movi	r7,1
 4003004:	003f9006 	br	4002e48 <__alt_data_end+0xfc002e48>
 4003008:	3807883a 	mov	r3,r7
 400300c:	3021883a 	mov	r16,r6
 4003010:	1023883a 	mov	r17,r2
 4003014:	003f3306 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 4003018:	8000161e 	bne	r16,zero,4003074 <__subsf3+0x3f4>
 400301c:	18002d26 	beq	r3,zero,40030d4 <__subsf3+0x454>
 4003020:	0108303a 	nor	r4,zero,r4
 4003024:	20000a26 	beq	r4,zero,4003050 <__subsf3+0x3d0>
 4003028:	01403fc4 	movi	r5,255
 400302c:	31402926 	beq	r6,r5,40030d4 <__subsf3+0x454>
 4003030:	014006c4 	movi	r5,27
 4003034:	29004716 	blt	r5,r4,4003154 <__subsf3+0x4d4>
 4003038:	01400804 	movi	r5,32
 400303c:	290bc83a 	sub	r5,r5,r4
 4003040:	194a983a 	sll	r5,r3,r5
 4003044:	1908d83a 	srl	r4,r3,r4
 4003048:	2806c03a 	cmpne	r3,r5,zero
 400304c:	20c6b03a 	or	r3,r4,r3
 4003050:	19c7883a 	add	r3,r3,r7
 4003054:	3021883a 	mov	r16,r6
 4003058:	003f7c06 	br	4002e4c <__alt_data_end+0xfc002e4c>
 400305c:	1800111e 	bne	r3,zero,40030a4 <__subsf3+0x424>
 4003060:	38003326 	beq	r7,zero,4003130 <__subsf3+0x4b0>
 4003064:	3807883a 	mov	r3,r7
 4003068:	1023883a 	mov	r17,r2
 400306c:	04003fc4 	movi	r16,255
 4003070:	003f1c06 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 4003074:	01403fc4 	movi	r5,255
 4003078:	31401626 	beq	r6,r5,40030d4 <__subsf3+0x454>
 400307c:	0109c83a 	sub	r4,zero,r4
 4003080:	18c10034 	orhi	r3,r3,1024
 4003084:	003fea06 	br	4003030 <__alt_data_end+0xfc003030>
 4003088:	383f1626 	beq	r7,zero,4002ce4 <__alt_data_end+0xfc002ce4>
 400308c:	19c9c83a 	sub	r4,r3,r7
 4003090:	2141002c 	andhi	r5,r4,1024
 4003094:	283f5026 	beq	r5,zero,4002dd8 <__alt_data_end+0xfc002dd8>
 4003098:	38c7c83a 	sub	r3,r7,r3
 400309c:	1023883a 	mov	r17,r2
 40030a0:	003f1006 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 40030a4:	38001b26 	beq	r7,zero,4003114 <__subsf3+0x494>
 40030a8:	1806d0fa 	srli	r3,r3,3
 40030ac:	1900102c 	andhi	r4,r3,64
 40030b0:	20000526 	beq	r4,zero,40030c8 <__subsf3+0x448>
 40030b4:	380ed0fa 	srli	r7,r7,3
 40030b8:	3900102c 	andhi	r4,r7,64
 40030bc:	2000021e 	bne	r4,zero,40030c8 <__subsf3+0x448>
 40030c0:	3807883a 	mov	r3,r7
 40030c4:	1023883a 	mov	r17,r2
 40030c8:	180690fa 	slli	r3,r3,3
 40030cc:	04003fc4 	movi	r16,255
 40030d0:	003f0406 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 40030d4:	3807883a 	mov	r3,r7
 40030d8:	3021883a 	mov	r16,r6
 40030dc:	003f0106 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 40030e0:	18001726 	beq	r3,zero,4003140 <__subsf3+0x4c0>
 40030e4:	38000b26 	beq	r7,zero,4003114 <__subsf3+0x494>
 40030e8:	1806d0fa 	srli	r3,r3,3
 40030ec:	1900102c 	andhi	r4,r3,64
 40030f0:	20000426 	beq	r4,zero,4003104 <__subsf3+0x484>
 40030f4:	380ed0fa 	srli	r7,r7,3
 40030f8:	3900102c 	andhi	r4,r7,64
 40030fc:	2000011e 	bne	r4,zero,4003104 <__subsf3+0x484>
 4003100:	3807883a 	mov	r3,r7
 4003104:	180690fa 	slli	r3,r3,3
 4003108:	1023883a 	mov	r17,r2
 400310c:	04003fc4 	movi	r16,255
 4003110:	003ef406 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 4003114:	04003fc4 	movi	r16,255
 4003118:	003ef206 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 400311c:	00c00044 	movi	r3,1
 4003120:	003f9606 	br	4002f7c <__alt_data_end+0xfc002f7c>
 4003124:	000b883a 	mov	r5,zero
 4003128:	0005883a 	mov	r2,zero
 400312c:	003f3506 	br	4002e04 <__alt_data_end+0xfc002e04>
 4003130:	01402034 	movhi	r5,128
 4003134:	297fffc4 	addi	r5,r5,-1
 4003138:	0005883a 	mov	r2,zero
 400313c:	003f2f06 	br	4002dfc <__alt_data_end+0xfc002dfc>
 4003140:	3807883a 	mov	r3,r7
 4003144:	04003fc4 	movi	r16,255
 4003148:	003ee606 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 400314c:	3807883a 	mov	r3,r7
 4003150:	003ee406 	br	4002ce4 <__alt_data_end+0xfc002ce4>
 4003154:	00c00044 	movi	r3,1
 4003158:	003fbd06 	br	4003050 <__alt_data_end+0xfc003050>
 400315c:	0005883a 	mov	r2,zero
 4003160:	003f2806 	br	4002e04 <__alt_data_end+0xfc002e04>

04003164 <__floatsisf>:
 4003164:	defffd04 	addi	sp,sp,-12
 4003168:	dfc00215 	stw	ra,8(sp)
 400316c:	dc400115 	stw	r17,4(sp)
 4003170:	dc000015 	stw	r16,0(sp)
 4003174:	20003526 	beq	r4,zero,400324c <__floatsisf+0xe8>
 4003178:	2021883a 	mov	r16,r4
 400317c:	2022d7fa 	srli	r17,r4,31
 4003180:	20003616 	blt	r4,zero,400325c <__floatsisf+0xf8>
 4003184:	8009883a 	mov	r4,r16
 4003188:	4005cf80 	call	4005cf8 <__clzsi2>
 400318c:	00c02784 	movi	r3,158
 4003190:	1887c83a 	sub	r3,r3,r2
 4003194:	01002584 	movi	r4,150
 4003198:	20c01416 	blt	r4,r3,40031ec <__floatsisf+0x88>
 400319c:	20c9c83a 	sub	r4,r4,r3
 40031a0:	8120983a 	sll	r16,r16,r4
 40031a4:	00802034 	movhi	r2,128
 40031a8:	10bfffc4 	addi	r2,r2,-1
 40031ac:	8809883a 	mov	r4,r17
 40031b0:	80a0703a 	and	r16,r16,r2
 40031b4:	18803fcc 	andi	r2,r3,255
 40031b8:	100695fa 	slli	r3,r2,23
 40031bc:	20803fcc 	andi	r2,r4,255
 40031c0:	100897fa 	slli	r4,r2,31
 40031c4:	00802034 	movhi	r2,128
 40031c8:	10bfffc4 	addi	r2,r2,-1
 40031cc:	8084703a 	and	r2,r16,r2
 40031d0:	10c4b03a 	or	r2,r2,r3
 40031d4:	1104b03a 	or	r2,r2,r4
 40031d8:	dfc00217 	ldw	ra,8(sp)
 40031dc:	dc400117 	ldw	r17,4(sp)
 40031e0:	dc000017 	ldw	r16,0(sp)
 40031e4:	dec00304 	addi	sp,sp,12
 40031e8:	f800283a 	ret
 40031ec:	01002644 	movi	r4,153
 40031f0:	20c01c16 	blt	r4,r3,4003264 <__floatsisf+0x100>
 40031f4:	20c9c83a 	sub	r4,r4,r3
 40031f8:	8120983a 	sll	r16,r16,r4
 40031fc:	013f0034 	movhi	r4,64512
 4003200:	213fffc4 	addi	r4,r4,-1
 4003204:	814001cc 	andi	r5,r16,7
 4003208:	8108703a 	and	r4,r16,r4
 400320c:	28000426 	beq	r5,zero,4003220 <__floatsisf+0xbc>
 4003210:	840003cc 	andi	r16,r16,15
 4003214:	01400104 	movi	r5,4
 4003218:	81400126 	beq	r16,r5,4003220 <__floatsisf+0xbc>
 400321c:	2149883a 	add	r4,r4,r5
 4003220:	2141002c 	andhi	r5,r4,1024
 4003224:	28000526 	beq	r5,zero,400323c <__floatsisf+0xd8>
 4003228:	00c027c4 	movi	r3,159
 400322c:	1887c83a 	sub	r3,r3,r2
 4003230:	00bf0034 	movhi	r2,64512
 4003234:	10bfffc4 	addi	r2,r2,-1
 4003238:	2088703a 	and	r4,r4,r2
 400323c:	202091ba 	slli	r16,r4,6
 4003240:	8809883a 	mov	r4,r17
 4003244:	8020d27a 	srli	r16,r16,9
 4003248:	003fda06 	br	40031b4 <__alt_data_end+0xfc0031b4>
 400324c:	0009883a 	mov	r4,zero
 4003250:	0007883a 	mov	r3,zero
 4003254:	0021883a 	mov	r16,zero
 4003258:	003fd606 	br	40031b4 <__alt_data_end+0xfc0031b4>
 400325c:	0121c83a 	sub	r16,zero,r4
 4003260:	003fc806 	br	4003184 <__alt_data_end+0xfc003184>
 4003264:	01002e44 	movi	r4,185
 4003268:	20c9c83a 	sub	r4,r4,r3
 400326c:	01400144 	movi	r5,5
 4003270:	8108983a 	sll	r4,r16,r4
 4003274:	288bc83a 	sub	r5,r5,r2
 4003278:	8160d83a 	srl	r16,r16,r5
 400327c:	2008c03a 	cmpne	r4,r4,zero
 4003280:	8120b03a 	or	r16,r16,r4
 4003284:	003fdd06 	br	40031fc <__alt_data_end+0xfc0031fc>

04003288 <__adddf3>:
 4003288:	02c00434 	movhi	r11,16
 400328c:	5affffc4 	addi	r11,r11,-1
 4003290:	2806d7fa 	srli	r3,r5,31
 4003294:	2ad4703a 	and	r10,r5,r11
 4003298:	3ad2703a 	and	r9,r7,r11
 400329c:	3804d53a 	srli	r2,r7,20
 40032a0:	3018d77a 	srli	r12,r6,29
 40032a4:	280ad53a 	srli	r5,r5,20
 40032a8:	501490fa 	slli	r10,r10,3
 40032ac:	2010d77a 	srli	r8,r4,29
 40032b0:	481290fa 	slli	r9,r9,3
 40032b4:	380ed7fa 	srli	r7,r7,31
 40032b8:	defffb04 	addi	sp,sp,-20
 40032bc:	dc800215 	stw	r18,8(sp)
 40032c0:	dc400115 	stw	r17,4(sp)
 40032c4:	dc000015 	stw	r16,0(sp)
 40032c8:	dfc00415 	stw	ra,16(sp)
 40032cc:	dcc00315 	stw	r19,12(sp)
 40032d0:	1c803fcc 	andi	r18,r3,255
 40032d4:	2c01ffcc 	andi	r16,r5,2047
 40032d8:	5210b03a 	or	r8,r10,r8
 40032dc:	202290fa 	slli	r17,r4,3
 40032e0:	1081ffcc 	andi	r2,r2,2047
 40032e4:	4b12b03a 	or	r9,r9,r12
 40032e8:	300c90fa 	slli	r6,r6,3
 40032ec:	91c07526 	beq	r18,r7,40034c4 <__adddf3+0x23c>
 40032f0:	8087c83a 	sub	r3,r16,r2
 40032f4:	00c0ab0e 	bge	zero,r3,40035a4 <__adddf3+0x31c>
 40032f8:	10002a1e 	bne	r2,zero,40033a4 <__adddf3+0x11c>
 40032fc:	4984b03a 	or	r2,r9,r6
 4003300:	1000961e 	bne	r2,zero,400355c <__adddf3+0x2d4>
 4003304:	888001cc 	andi	r2,r17,7
 4003308:	10000726 	beq	r2,zero,4003328 <__adddf3+0xa0>
 400330c:	888003cc 	andi	r2,r17,15
 4003310:	00c00104 	movi	r3,4
 4003314:	10c00426 	beq	r2,r3,4003328 <__adddf3+0xa0>
 4003318:	88c7883a 	add	r3,r17,r3
 400331c:	1c63803a 	cmpltu	r17,r3,r17
 4003320:	4451883a 	add	r8,r8,r17
 4003324:	1823883a 	mov	r17,r3
 4003328:	4080202c 	andhi	r2,r8,128
 400332c:	10005926 	beq	r2,zero,4003494 <__adddf3+0x20c>
 4003330:	84000044 	addi	r16,r16,1
 4003334:	0081ffc4 	movi	r2,2047
 4003338:	8080ba26 	beq	r16,r2,4003624 <__adddf3+0x39c>
 400333c:	00bfe034 	movhi	r2,65408
 4003340:	10bfffc4 	addi	r2,r2,-1
 4003344:	4090703a 	and	r8,r8,r2
 4003348:	4004977a 	slli	r2,r8,29
 400334c:	4010927a 	slli	r8,r8,9
 4003350:	8822d0fa 	srli	r17,r17,3
 4003354:	8401ffcc 	andi	r16,r16,2047
 4003358:	4010d33a 	srli	r8,r8,12
 400335c:	9007883a 	mov	r3,r18
 4003360:	1444b03a 	or	r2,r2,r17
 4003364:	8401ffcc 	andi	r16,r16,2047
 4003368:	8020953a 	slli	r16,r16,20
 400336c:	18c03fcc 	andi	r3,r3,255
 4003370:	01000434 	movhi	r4,16
 4003374:	213fffc4 	addi	r4,r4,-1
 4003378:	180697fa 	slli	r3,r3,31
 400337c:	4110703a 	and	r8,r8,r4
 4003380:	4410b03a 	or	r8,r8,r16
 4003384:	40c6b03a 	or	r3,r8,r3
 4003388:	dfc00417 	ldw	ra,16(sp)
 400338c:	dcc00317 	ldw	r19,12(sp)
 4003390:	dc800217 	ldw	r18,8(sp)
 4003394:	dc400117 	ldw	r17,4(sp)
 4003398:	dc000017 	ldw	r16,0(sp)
 400339c:	dec00504 	addi	sp,sp,20
 40033a0:	f800283a 	ret
 40033a4:	0081ffc4 	movi	r2,2047
 40033a8:	80bfd626 	beq	r16,r2,4003304 <__alt_data_end+0xfc003304>
 40033ac:	4a402034 	orhi	r9,r9,128
 40033b0:	00800e04 	movi	r2,56
 40033b4:	10c09f16 	blt	r2,r3,4003634 <__adddf3+0x3ac>
 40033b8:	008007c4 	movi	r2,31
 40033bc:	10c0c216 	blt	r2,r3,40036c8 <__adddf3+0x440>
 40033c0:	00800804 	movi	r2,32
 40033c4:	10c5c83a 	sub	r2,r2,r3
 40033c8:	488a983a 	sll	r5,r9,r2
 40033cc:	30c8d83a 	srl	r4,r6,r3
 40033d0:	3084983a 	sll	r2,r6,r2
 40033d4:	48c6d83a 	srl	r3,r9,r3
 40033d8:	290cb03a 	or	r6,r5,r4
 40033dc:	1004c03a 	cmpne	r2,r2,zero
 40033e0:	308cb03a 	or	r6,r6,r2
 40033e4:	898dc83a 	sub	r6,r17,r6
 40033e8:	89a3803a 	cmpltu	r17,r17,r6
 40033ec:	40d1c83a 	sub	r8,r8,r3
 40033f0:	4451c83a 	sub	r8,r8,r17
 40033f4:	3023883a 	mov	r17,r6
 40033f8:	4080202c 	andhi	r2,r8,128
 40033fc:	10002326 	beq	r2,zero,400348c <__adddf3+0x204>
 4003400:	04c02034 	movhi	r19,128
 4003404:	9cffffc4 	addi	r19,r19,-1
 4003408:	44e6703a 	and	r19,r8,r19
 400340c:	98007626 	beq	r19,zero,40035e8 <__adddf3+0x360>
 4003410:	9809883a 	mov	r4,r19
 4003414:	4005cf80 	call	4005cf8 <__clzsi2>
 4003418:	10fffe04 	addi	r3,r2,-8
 400341c:	010007c4 	movi	r4,31
 4003420:	20c07716 	blt	r4,r3,4003600 <__adddf3+0x378>
 4003424:	00800804 	movi	r2,32
 4003428:	10c5c83a 	sub	r2,r2,r3
 400342c:	8884d83a 	srl	r2,r17,r2
 4003430:	98d0983a 	sll	r8,r19,r3
 4003434:	88e2983a 	sll	r17,r17,r3
 4003438:	1204b03a 	or	r2,r2,r8
 400343c:	1c007416 	blt	r3,r16,4003610 <__adddf3+0x388>
 4003440:	1c21c83a 	sub	r16,r3,r16
 4003444:	82000044 	addi	r8,r16,1
 4003448:	00c007c4 	movi	r3,31
 400344c:	1a009116 	blt	r3,r8,4003694 <__adddf3+0x40c>
 4003450:	00c00804 	movi	r3,32
 4003454:	1a07c83a 	sub	r3,r3,r8
 4003458:	8a08d83a 	srl	r4,r17,r8
 400345c:	88e2983a 	sll	r17,r17,r3
 4003460:	10c6983a 	sll	r3,r2,r3
 4003464:	1210d83a 	srl	r8,r2,r8
 4003468:	8804c03a 	cmpne	r2,r17,zero
 400346c:	1906b03a 	or	r3,r3,r4
 4003470:	18a2b03a 	or	r17,r3,r2
 4003474:	0021883a 	mov	r16,zero
 4003478:	003fa206 	br	4003304 <__alt_data_end+0xfc003304>
 400347c:	1890b03a 	or	r8,r3,r2
 4003480:	40017d26 	beq	r8,zero,4003a78 <__adddf3+0x7f0>
 4003484:	1011883a 	mov	r8,r2
 4003488:	1823883a 	mov	r17,r3
 400348c:	888001cc 	andi	r2,r17,7
 4003490:	103f9e1e 	bne	r2,zero,400330c <__alt_data_end+0xfc00330c>
 4003494:	4004977a 	slli	r2,r8,29
 4003498:	8822d0fa 	srli	r17,r17,3
 400349c:	4010d0fa 	srli	r8,r8,3
 40034a0:	9007883a 	mov	r3,r18
 40034a4:	1444b03a 	or	r2,r2,r17
 40034a8:	0101ffc4 	movi	r4,2047
 40034ac:	81002426 	beq	r16,r4,4003540 <__adddf3+0x2b8>
 40034b0:	8120703a 	and	r16,r16,r4
 40034b4:	01000434 	movhi	r4,16
 40034b8:	213fffc4 	addi	r4,r4,-1
 40034bc:	4110703a 	and	r8,r8,r4
 40034c0:	003fa806 	br	4003364 <__alt_data_end+0xfc003364>
 40034c4:	8089c83a 	sub	r4,r16,r2
 40034c8:	01005e0e 	bge	zero,r4,4003644 <__adddf3+0x3bc>
 40034cc:	10002b26 	beq	r2,zero,400357c <__adddf3+0x2f4>
 40034d0:	0081ffc4 	movi	r2,2047
 40034d4:	80bf8b26 	beq	r16,r2,4003304 <__alt_data_end+0xfc003304>
 40034d8:	4a402034 	orhi	r9,r9,128
 40034dc:	00800e04 	movi	r2,56
 40034e0:	1100a40e 	bge	r2,r4,4003774 <__adddf3+0x4ec>
 40034e4:	498cb03a 	or	r6,r9,r6
 40034e8:	300ac03a 	cmpne	r5,r6,zero
 40034ec:	0013883a 	mov	r9,zero
 40034f0:	2c4b883a 	add	r5,r5,r17
 40034f4:	2c63803a 	cmpltu	r17,r5,r17
 40034f8:	4a11883a 	add	r8,r9,r8
 40034fc:	8a11883a 	add	r8,r17,r8
 4003500:	2823883a 	mov	r17,r5
 4003504:	4080202c 	andhi	r2,r8,128
 4003508:	103fe026 	beq	r2,zero,400348c <__alt_data_end+0xfc00348c>
 400350c:	84000044 	addi	r16,r16,1
 4003510:	0081ffc4 	movi	r2,2047
 4003514:	8080d226 	beq	r16,r2,4003860 <__adddf3+0x5d8>
 4003518:	00bfe034 	movhi	r2,65408
 400351c:	10bfffc4 	addi	r2,r2,-1
 4003520:	4090703a 	and	r8,r8,r2
 4003524:	880ad07a 	srli	r5,r17,1
 4003528:	400897fa 	slli	r4,r8,31
 400352c:	88c0004c 	andi	r3,r17,1
 4003530:	28e2b03a 	or	r17,r5,r3
 4003534:	4010d07a 	srli	r8,r8,1
 4003538:	2462b03a 	or	r17,r4,r17
 400353c:	003f7106 	br	4003304 <__alt_data_end+0xfc003304>
 4003540:	4088b03a 	or	r4,r8,r2
 4003544:	20014526 	beq	r4,zero,4003a5c <__adddf3+0x7d4>
 4003548:	01000434 	movhi	r4,16
 400354c:	42000234 	orhi	r8,r8,8
 4003550:	213fffc4 	addi	r4,r4,-1
 4003554:	4110703a 	and	r8,r8,r4
 4003558:	003f8206 	br	4003364 <__alt_data_end+0xfc003364>
 400355c:	18ffffc4 	addi	r3,r3,-1
 4003560:	1800491e 	bne	r3,zero,4003688 <__adddf3+0x400>
 4003564:	898bc83a 	sub	r5,r17,r6
 4003568:	8963803a 	cmpltu	r17,r17,r5
 400356c:	4251c83a 	sub	r8,r8,r9
 4003570:	4451c83a 	sub	r8,r8,r17
 4003574:	2823883a 	mov	r17,r5
 4003578:	003f9f06 	br	40033f8 <__alt_data_end+0xfc0033f8>
 400357c:	4984b03a 	or	r2,r9,r6
 4003580:	103f6026 	beq	r2,zero,4003304 <__alt_data_end+0xfc003304>
 4003584:	213fffc4 	addi	r4,r4,-1
 4003588:	2000931e 	bne	r4,zero,40037d8 <__adddf3+0x550>
 400358c:	898d883a 	add	r6,r17,r6
 4003590:	3463803a 	cmpltu	r17,r6,r17
 4003594:	4251883a 	add	r8,r8,r9
 4003598:	8a11883a 	add	r8,r17,r8
 400359c:	3023883a 	mov	r17,r6
 40035a0:	003fd806 	br	4003504 <__alt_data_end+0xfc003504>
 40035a4:	1800541e 	bne	r3,zero,40036f8 <__adddf3+0x470>
 40035a8:	80800044 	addi	r2,r16,1
 40035ac:	1081ffcc 	andi	r2,r2,2047
 40035b0:	00c00044 	movi	r3,1
 40035b4:	1880a00e 	bge	r3,r2,4003838 <__adddf3+0x5b0>
 40035b8:	8989c83a 	sub	r4,r17,r6
 40035bc:	8905803a 	cmpltu	r2,r17,r4
 40035c0:	4267c83a 	sub	r19,r8,r9
 40035c4:	98a7c83a 	sub	r19,r19,r2
 40035c8:	9880202c 	andhi	r2,r19,128
 40035cc:	10006326 	beq	r2,zero,400375c <__adddf3+0x4d4>
 40035d0:	3463c83a 	sub	r17,r6,r17
 40035d4:	4a07c83a 	sub	r3,r9,r8
 40035d8:	344d803a 	cmpltu	r6,r6,r17
 40035dc:	19a7c83a 	sub	r19,r3,r6
 40035e0:	3825883a 	mov	r18,r7
 40035e4:	983f8a1e 	bne	r19,zero,4003410 <__alt_data_end+0xfc003410>
 40035e8:	8809883a 	mov	r4,r17
 40035ec:	4005cf80 	call	4005cf8 <__clzsi2>
 40035f0:	10800804 	addi	r2,r2,32
 40035f4:	10fffe04 	addi	r3,r2,-8
 40035f8:	010007c4 	movi	r4,31
 40035fc:	20ff890e 	bge	r4,r3,4003424 <__alt_data_end+0xfc003424>
 4003600:	10bff604 	addi	r2,r2,-40
 4003604:	8884983a 	sll	r2,r17,r2
 4003608:	0023883a 	mov	r17,zero
 400360c:	1c3f8c0e 	bge	r3,r16,4003440 <__alt_data_end+0xfc003440>
 4003610:	023fe034 	movhi	r8,65408
 4003614:	423fffc4 	addi	r8,r8,-1
 4003618:	80e1c83a 	sub	r16,r16,r3
 400361c:	1210703a 	and	r8,r2,r8
 4003620:	003f3806 	br	4003304 <__alt_data_end+0xfc003304>
 4003624:	9007883a 	mov	r3,r18
 4003628:	0011883a 	mov	r8,zero
 400362c:	0005883a 	mov	r2,zero
 4003630:	003f4c06 	br	4003364 <__alt_data_end+0xfc003364>
 4003634:	498cb03a 	or	r6,r9,r6
 4003638:	300cc03a 	cmpne	r6,r6,zero
 400363c:	0007883a 	mov	r3,zero
 4003640:	003f6806 	br	40033e4 <__alt_data_end+0xfc0033e4>
 4003644:	20009c1e 	bne	r4,zero,40038b8 <__adddf3+0x630>
 4003648:	80800044 	addi	r2,r16,1
 400364c:	1141ffcc 	andi	r5,r2,2047
 4003650:	01000044 	movi	r4,1
 4003654:	2140670e 	bge	r4,r5,40037f4 <__adddf3+0x56c>
 4003658:	0101ffc4 	movi	r4,2047
 400365c:	11007f26 	beq	r2,r4,400385c <__adddf3+0x5d4>
 4003660:	898d883a 	add	r6,r17,r6
 4003664:	4247883a 	add	r3,r8,r9
 4003668:	3451803a 	cmpltu	r8,r6,r17
 400366c:	40d1883a 	add	r8,r8,r3
 4003670:	402297fa 	slli	r17,r8,31
 4003674:	300cd07a 	srli	r6,r6,1
 4003678:	4010d07a 	srli	r8,r8,1
 400367c:	1021883a 	mov	r16,r2
 4003680:	89a2b03a 	or	r17,r17,r6
 4003684:	003f1f06 	br	4003304 <__alt_data_end+0xfc003304>
 4003688:	0081ffc4 	movi	r2,2047
 400368c:	80bf481e 	bne	r16,r2,40033b0 <__alt_data_end+0xfc0033b0>
 4003690:	003f1c06 	br	4003304 <__alt_data_end+0xfc003304>
 4003694:	843ff844 	addi	r16,r16,-31
 4003698:	01000804 	movi	r4,32
 400369c:	1406d83a 	srl	r3,r2,r16
 40036a0:	41005026 	beq	r8,r4,40037e4 <__adddf3+0x55c>
 40036a4:	01001004 	movi	r4,64
 40036a8:	2211c83a 	sub	r8,r4,r8
 40036ac:	1204983a 	sll	r2,r2,r8
 40036b0:	88a2b03a 	or	r17,r17,r2
 40036b4:	8822c03a 	cmpne	r17,r17,zero
 40036b8:	1c62b03a 	or	r17,r3,r17
 40036bc:	0011883a 	mov	r8,zero
 40036c0:	0021883a 	mov	r16,zero
 40036c4:	003f7106 	br	400348c <__alt_data_end+0xfc00348c>
 40036c8:	193ff804 	addi	r4,r3,-32
 40036cc:	00800804 	movi	r2,32
 40036d0:	4908d83a 	srl	r4,r9,r4
 40036d4:	18804526 	beq	r3,r2,40037ec <__adddf3+0x564>
 40036d8:	00801004 	movi	r2,64
 40036dc:	10c5c83a 	sub	r2,r2,r3
 40036e0:	4886983a 	sll	r3,r9,r2
 40036e4:	198cb03a 	or	r6,r3,r6
 40036e8:	300cc03a 	cmpne	r6,r6,zero
 40036ec:	218cb03a 	or	r6,r4,r6
 40036f0:	0007883a 	mov	r3,zero
 40036f4:	003f3b06 	br	40033e4 <__alt_data_end+0xfc0033e4>
 40036f8:	80002a26 	beq	r16,zero,40037a4 <__adddf3+0x51c>
 40036fc:	0101ffc4 	movi	r4,2047
 4003700:	11006826 	beq	r2,r4,40038a4 <__adddf3+0x61c>
 4003704:	00c7c83a 	sub	r3,zero,r3
 4003708:	42002034 	orhi	r8,r8,128
 400370c:	01000e04 	movi	r4,56
 4003710:	20c07c16 	blt	r4,r3,4003904 <__adddf3+0x67c>
 4003714:	010007c4 	movi	r4,31
 4003718:	20c0da16 	blt	r4,r3,4003a84 <__adddf3+0x7fc>
 400371c:	01000804 	movi	r4,32
 4003720:	20c9c83a 	sub	r4,r4,r3
 4003724:	4114983a 	sll	r10,r8,r4
 4003728:	88cad83a 	srl	r5,r17,r3
 400372c:	8908983a 	sll	r4,r17,r4
 4003730:	40c6d83a 	srl	r3,r8,r3
 4003734:	5162b03a 	or	r17,r10,r5
 4003738:	2008c03a 	cmpne	r4,r4,zero
 400373c:	8922b03a 	or	r17,r17,r4
 4003740:	3463c83a 	sub	r17,r6,r17
 4003744:	48c7c83a 	sub	r3,r9,r3
 4003748:	344d803a 	cmpltu	r6,r6,r17
 400374c:	1991c83a 	sub	r8,r3,r6
 4003750:	1021883a 	mov	r16,r2
 4003754:	3825883a 	mov	r18,r7
 4003758:	003f2706 	br	40033f8 <__alt_data_end+0xfc0033f8>
 400375c:	24d0b03a 	or	r8,r4,r19
 4003760:	40001b1e 	bne	r8,zero,40037d0 <__adddf3+0x548>
 4003764:	0005883a 	mov	r2,zero
 4003768:	0007883a 	mov	r3,zero
 400376c:	0021883a 	mov	r16,zero
 4003770:	003f4d06 	br	40034a8 <__alt_data_end+0xfc0034a8>
 4003774:	008007c4 	movi	r2,31
 4003778:	11003c16 	blt	r2,r4,400386c <__adddf3+0x5e4>
 400377c:	00800804 	movi	r2,32
 4003780:	1105c83a 	sub	r2,r2,r4
 4003784:	488e983a 	sll	r7,r9,r2
 4003788:	310ad83a 	srl	r5,r6,r4
 400378c:	3084983a 	sll	r2,r6,r2
 4003790:	4912d83a 	srl	r9,r9,r4
 4003794:	394ab03a 	or	r5,r7,r5
 4003798:	1004c03a 	cmpne	r2,r2,zero
 400379c:	288ab03a 	or	r5,r5,r2
 40037a0:	003f5306 	br	40034f0 <__alt_data_end+0xfc0034f0>
 40037a4:	4448b03a 	or	r4,r8,r17
 40037a8:	20003e26 	beq	r4,zero,40038a4 <__adddf3+0x61c>
 40037ac:	00c6303a 	nor	r3,zero,r3
 40037b0:	18003a1e 	bne	r3,zero,400389c <__adddf3+0x614>
 40037b4:	3463c83a 	sub	r17,r6,r17
 40037b8:	4a07c83a 	sub	r3,r9,r8
 40037bc:	344d803a 	cmpltu	r6,r6,r17
 40037c0:	1991c83a 	sub	r8,r3,r6
 40037c4:	1021883a 	mov	r16,r2
 40037c8:	3825883a 	mov	r18,r7
 40037cc:	003f0a06 	br	40033f8 <__alt_data_end+0xfc0033f8>
 40037d0:	2023883a 	mov	r17,r4
 40037d4:	003f0d06 	br	400340c <__alt_data_end+0xfc00340c>
 40037d8:	0081ffc4 	movi	r2,2047
 40037dc:	80bf3f1e 	bne	r16,r2,40034dc <__alt_data_end+0xfc0034dc>
 40037e0:	003ec806 	br	4003304 <__alt_data_end+0xfc003304>
 40037e4:	0005883a 	mov	r2,zero
 40037e8:	003fb106 	br	40036b0 <__alt_data_end+0xfc0036b0>
 40037ec:	0007883a 	mov	r3,zero
 40037f0:	003fbc06 	br	40036e4 <__alt_data_end+0xfc0036e4>
 40037f4:	4444b03a 	or	r2,r8,r17
 40037f8:	8000871e 	bne	r16,zero,4003a18 <__adddf3+0x790>
 40037fc:	1000ba26 	beq	r2,zero,4003ae8 <__adddf3+0x860>
 4003800:	4984b03a 	or	r2,r9,r6
 4003804:	103ebf26 	beq	r2,zero,4003304 <__alt_data_end+0xfc003304>
 4003808:	8985883a 	add	r2,r17,r6
 400380c:	4247883a 	add	r3,r8,r9
 4003810:	1451803a 	cmpltu	r8,r2,r17
 4003814:	40d1883a 	add	r8,r8,r3
 4003818:	40c0202c 	andhi	r3,r8,128
 400381c:	1023883a 	mov	r17,r2
 4003820:	183f1a26 	beq	r3,zero,400348c <__alt_data_end+0xfc00348c>
 4003824:	00bfe034 	movhi	r2,65408
 4003828:	10bfffc4 	addi	r2,r2,-1
 400382c:	2021883a 	mov	r16,r4
 4003830:	4090703a 	and	r8,r8,r2
 4003834:	003eb306 	br	4003304 <__alt_data_end+0xfc003304>
 4003838:	4444b03a 	or	r2,r8,r17
 400383c:	8000291e 	bne	r16,zero,40038e4 <__adddf3+0x65c>
 4003840:	10004b1e 	bne	r2,zero,4003970 <__adddf3+0x6e8>
 4003844:	4990b03a 	or	r8,r9,r6
 4003848:	40008b26 	beq	r8,zero,4003a78 <__adddf3+0x7f0>
 400384c:	4811883a 	mov	r8,r9
 4003850:	3023883a 	mov	r17,r6
 4003854:	3825883a 	mov	r18,r7
 4003858:	003eaa06 	br	4003304 <__alt_data_end+0xfc003304>
 400385c:	1021883a 	mov	r16,r2
 4003860:	0011883a 	mov	r8,zero
 4003864:	0005883a 	mov	r2,zero
 4003868:	003f0f06 	br	40034a8 <__alt_data_end+0xfc0034a8>
 400386c:	217ff804 	addi	r5,r4,-32
 4003870:	00800804 	movi	r2,32
 4003874:	494ad83a 	srl	r5,r9,r5
 4003878:	20807d26 	beq	r4,r2,4003a70 <__adddf3+0x7e8>
 400387c:	00801004 	movi	r2,64
 4003880:	1109c83a 	sub	r4,r2,r4
 4003884:	4912983a 	sll	r9,r9,r4
 4003888:	498cb03a 	or	r6,r9,r6
 400388c:	300cc03a 	cmpne	r6,r6,zero
 4003890:	298ab03a 	or	r5,r5,r6
 4003894:	0013883a 	mov	r9,zero
 4003898:	003f1506 	br	40034f0 <__alt_data_end+0xfc0034f0>
 400389c:	0101ffc4 	movi	r4,2047
 40038a0:	113f9a1e 	bne	r2,r4,400370c <__alt_data_end+0xfc00370c>
 40038a4:	4811883a 	mov	r8,r9
 40038a8:	3023883a 	mov	r17,r6
 40038ac:	1021883a 	mov	r16,r2
 40038b0:	3825883a 	mov	r18,r7
 40038b4:	003e9306 	br	4003304 <__alt_data_end+0xfc003304>
 40038b8:	8000161e 	bne	r16,zero,4003914 <__adddf3+0x68c>
 40038bc:	444ab03a 	or	r5,r8,r17
 40038c0:	28005126 	beq	r5,zero,4003a08 <__adddf3+0x780>
 40038c4:	0108303a 	nor	r4,zero,r4
 40038c8:	20004d1e 	bne	r4,zero,4003a00 <__adddf3+0x778>
 40038cc:	89a3883a 	add	r17,r17,r6
 40038d0:	4253883a 	add	r9,r8,r9
 40038d4:	898d803a 	cmpltu	r6,r17,r6
 40038d8:	3251883a 	add	r8,r6,r9
 40038dc:	1021883a 	mov	r16,r2
 40038e0:	003f0806 	br	4003504 <__alt_data_end+0xfc003504>
 40038e4:	1000301e 	bne	r2,zero,40039a8 <__adddf3+0x720>
 40038e8:	4984b03a 	or	r2,r9,r6
 40038ec:	10007126 	beq	r2,zero,4003ab4 <__adddf3+0x82c>
 40038f0:	4811883a 	mov	r8,r9
 40038f4:	3023883a 	mov	r17,r6
 40038f8:	3825883a 	mov	r18,r7
 40038fc:	0401ffc4 	movi	r16,2047
 4003900:	003e8006 	br	4003304 <__alt_data_end+0xfc003304>
 4003904:	4462b03a 	or	r17,r8,r17
 4003908:	8822c03a 	cmpne	r17,r17,zero
 400390c:	0007883a 	mov	r3,zero
 4003910:	003f8b06 	br	4003740 <__alt_data_end+0xfc003740>
 4003914:	0141ffc4 	movi	r5,2047
 4003918:	11403b26 	beq	r2,r5,4003a08 <__adddf3+0x780>
 400391c:	0109c83a 	sub	r4,zero,r4
 4003920:	42002034 	orhi	r8,r8,128
 4003924:	01400e04 	movi	r5,56
 4003928:	29006716 	blt	r5,r4,4003ac8 <__adddf3+0x840>
 400392c:	014007c4 	movi	r5,31
 4003930:	29007016 	blt	r5,r4,4003af4 <__adddf3+0x86c>
 4003934:	01400804 	movi	r5,32
 4003938:	290bc83a 	sub	r5,r5,r4
 400393c:	4154983a 	sll	r10,r8,r5
 4003940:	890ed83a 	srl	r7,r17,r4
 4003944:	894a983a 	sll	r5,r17,r5
 4003948:	4108d83a 	srl	r4,r8,r4
 400394c:	51e2b03a 	or	r17,r10,r7
 4003950:	280ac03a 	cmpne	r5,r5,zero
 4003954:	8962b03a 	or	r17,r17,r5
 4003958:	89a3883a 	add	r17,r17,r6
 400395c:	2253883a 	add	r9,r4,r9
 4003960:	898d803a 	cmpltu	r6,r17,r6
 4003964:	3251883a 	add	r8,r6,r9
 4003968:	1021883a 	mov	r16,r2
 400396c:	003ee506 	br	4003504 <__alt_data_end+0xfc003504>
 4003970:	4984b03a 	or	r2,r9,r6
 4003974:	103e6326 	beq	r2,zero,4003304 <__alt_data_end+0xfc003304>
 4003978:	8987c83a 	sub	r3,r17,r6
 400397c:	88c9803a 	cmpltu	r4,r17,r3
 4003980:	4245c83a 	sub	r2,r8,r9
 4003984:	1105c83a 	sub	r2,r2,r4
 4003988:	1100202c 	andhi	r4,r2,128
 400398c:	203ebb26 	beq	r4,zero,400347c <__alt_data_end+0xfc00347c>
 4003990:	3463c83a 	sub	r17,r6,r17
 4003994:	4a07c83a 	sub	r3,r9,r8
 4003998:	344d803a 	cmpltu	r6,r6,r17
 400399c:	1991c83a 	sub	r8,r3,r6
 40039a0:	3825883a 	mov	r18,r7
 40039a4:	003e5706 	br	4003304 <__alt_data_end+0xfc003304>
 40039a8:	4984b03a 	or	r2,r9,r6
 40039ac:	10002e26 	beq	r2,zero,4003a68 <__adddf3+0x7e0>
 40039b0:	4004d0fa 	srli	r2,r8,3
 40039b4:	8822d0fa 	srli	r17,r17,3
 40039b8:	4010977a 	slli	r8,r8,29
 40039bc:	10c0022c 	andhi	r3,r2,8
 40039c0:	4462b03a 	or	r17,r8,r17
 40039c4:	18000826 	beq	r3,zero,40039e8 <__adddf3+0x760>
 40039c8:	4808d0fa 	srli	r4,r9,3
 40039cc:	20c0022c 	andhi	r3,r4,8
 40039d0:	1800051e 	bne	r3,zero,40039e8 <__adddf3+0x760>
 40039d4:	300cd0fa 	srli	r6,r6,3
 40039d8:	4806977a 	slli	r3,r9,29
 40039dc:	2005883a 	mov	r2,r4
 40039e0:	3825883a 	mov	r18,r7
 40039e4:	19a2b03a 	or	r17,r3,r6
 40039e8:	8810d77a 	srli	r8,r17,29
 40039ec:	100490fa 	slli	r2,r2,3
 40039f0:	882290fa 	slli	r17,r17,3
 40039f4:	0401ffc4 	movi	r16,2047
 40039f8:	4090b03a 	or	r8,r8,r2
 40039fc:	003e4106 	br	4003304 <__alt_data_end+0xfc003304>
 4003a00:	0141ffc4 	movi	r5,2047
 4003a04:	117fc71e 	bne	r2,r5,4003924 <__alt_data_end+0xfc003924>
 4003a08:	4811883a 	mov	r8,r9
 4003a0c:	3023883a 	mov	r17,r6
 4003a10:	1021883a 	mov	r16,r2
 4003a14:	003e3b06 	br	4003304 <__alt_data_end+0xfc003304>
 4003a18:	10002f26 	beq	r2,zero,4003ad8 <__adddf3+0x850>
 4003a1c:	4984b03a 	or	r2,r9,r6
 4003a20:	10001126 	beq	r2,zero,4003a68 <__adddf3+0x7e0>
 4003a24:	4004d0fa 	srli	r2,r8,3
 4003a28:	8822d0fa 	srli	r17,r17,3
 4003a2c:	4010977a 	slli	r8,r8,29
 4003a30:	10c0022c 	andhi	r3,r2,8
 4003a34:	4462b03a 	or	r17,r8,r17
 4003a38:	183feb26 	beq	r3,zero,40039e8 <__alt_data_end+0xfc0039e8>
 4003a3c:	4808d0fa 	srli	r4,r9,3
 4003a40:	20c0022c 	andhi	r3,r4,8
 4003a44:	183fe81e 	bne	r3,zero,40039e8 <__alt_data_end+0xfc0039e8>
 4003a48:	300cd0fa 	srli	r6,r6,3
 4003a4c:	4806977a 	slli	r3,r9,29
 4003a50:	2005883a 	mov	r2,r4
 4003a54:	19a2b03a 	or	r17,r3,r6
 4003a58:	003fe306 	br	40039e8 <__alt_data_end+0xfc0039e8>
 4003a5c:	0011883a 	mov	r8,zero
 4003a60:	0005883a 	mov	r2,zero
 4003a64:	003e3f06 	br	4003364 <__alt_data_end+0xfc003364>
 4003a68:	0401ffc4 	movi	r16,2047
 4003a6c:	003e2506 	br	4003304 <__alt_data_end+0xfc003304>
 4003a70:	0013883a 	mov	r9,zero
 4003a74:	003f8406 	br	4003888 <__alt_data_end+0xfc003888>
 4003a78:	0005883a 	mov	r2,zero
 4003a7c:	0007883a 	mov	r3,zero
 4003a80:	003e8906 	br	40034a8 <__alt_data_end+0xfc0034a8>
 4003a84:	197ff804 	addi	r5,r3,-32
 4003a88:	01000804 	movi	r4,32
 4003a8c:	414ad83a 	srl	r5,r8,r5
 4003a90:	19002426 	beq	r3,r4,4003b24 <__adddf3+0x89c>
 4003a94:	01001004 	movi	r4,64
 4003a98:	20c7c83a 	sub	r3,r4,r3
 4003a9c:	40c6983a 	sll	r3,r8,r3
 4003aa0:	1c46b03a 	or	r3,r3,r17
 4003aa4:	1806c03a 	cmpne	r3,r3,zero
 4003aa8:	28e2b03a 	or	r17,r5,r3
 4003aac:	0007883a 	mov	r3,zero
 4003ab0:	003f2306 	br	4003740 <__alt_data_end+0xfc003740>
 4003ab4:	0007883a 	mov	r3,zero
 4003ab8:	5811883a 	mov	r8,r11
 4003abc:	00bfffc4 	movi	r2,-1
 4003ac0:	0401ffc4 	movi	r16,2047
 4003ac4:	003e7806 	br	40034a8 <__alt_data_end+0xfc0034a8>
 4003ac8:	4462b03a 	or	r17,r8,r17
 4003acc:	8822c03a 	cmpne	r17,r17,zero
 4003ad0:	0009883a 	mov	r4,zero
 4003ad4:	003fa006 	br	4003958 <__alt_data_end+0xfc003958>
 4003ad8:	4811883a 	mov	r8,r9
 4003adc:	3023883a 	mov	r17,r6
 4003ae0:	0401ffc4 	movi	r16,2047
 4003ae4:	003e0706 	br	4003304 <__alt_data_end+0xfc003304>
 4003ae8:	4811883a 	mov	r8,r9
 4003aec:	3023883a 	mov	r17,r6
 4003af0:	003e0406 	br	4003304 <__alt_data_end+0xfc003304>
 4003af4:	21fff804 	addi	r7,r4,-32
 4003af8:	01400804 	movi	r5,32
 4003afc:	41ced83a 	srl	r7,r8,r7
 4003b00:	21400a26 	beq	r4,r5,4003b2c <__adddf3+0x8a4>
 4003b04:	01401004 	movi	r5,64
 4003b08:	2909c83a 	sub	r4,r5,r4
 4003b0c:	4108983a 	sll	r4,r8,r4
 4003b10:	2448b03a 	or	r4,r4,r17
 4003b14:	2008c03a 	cmpne	r4,r4,zero
 4003b18:	3922b03a 	or	r17,r7,r4
 4003b1c:	0009883a 	mov	r4,zero
 4003b20:	003f8d06 	br	4003958 <__alt_data_end+0xfc003958>
 4003b24:	0007883a 	mov	r3,zero
 4003b28:	003fdd06 	br	4003aa0 <__alt_data_end+0xfc003aa0>
 4003b2c:	0009883a 	mov	r4,zero
 4003b30:	003ff706 	br	4003b10 <__alt_data_end+0xfc003b10>

04003b34 <__divdf3>:
 4003b34:	defff004 	addi	sp,sp,-64
 4003b38:	dc800815 	stw	r18,32(sp)
 4003b3c:	2824d53a 	srli	r18,r5,20
 4003b40:	dd800c15 	stw	r22,48(sp)
 4003b44:	282cd7fa 	srli	r22,r5,31
 4003b48:	dc000615 	stw	r16,24(sp)
 4003b4c:	04000434 	movhi	r16,16
 4003b50:	843fffc4 	addi	r16,r16,-1
 4003b54:	dfc00f15 	stw	ra,60(sp)
 4003b58:	df000e15 	stw	fp,56(sp)
 4003b5c:	ddc00d15 	stw	r23,52(sp)
 4003b60:	dd400b15 	stw	r21,44(sp)
 4003b64:	dd000a15 	stw	r20,40(sp)
 4003b68:	dcc00915 	stw	r19,36(sp)
 4003b6c:	dc400715 	stw	r17,28(sp)
 4003b70:	9481ffcc 	andi	r18,r18,2047
 4003b74:	2c20703a 	and	r16,r5,r16
 4003b78:	b2003fcc 	andi	r8,r22,255
 4003b7c:	90006126 	beq	r18,zero,4003d04 <__divdf3+0x1d0>
 4003b80:	0081ffc4 	movi	r2,2047
 4003b84:	202b883a 	mov	r21,r4
 4003b88:	90803726 	beq	r18,r2,4003c68 <__divdf3+0x134>
 4003b8c:	80800434 	orhi	r2,r16,16
 4003b90:	100490fa 	slli	r2,r2,3
 4003b94:	2020d77a 	srli	r16,r4,29
 4003b98:	202a90fa 	slli	r21,r4,3
 4003b9c:	94bf0044 	addi	r18,r18,-1023
 4003ba0:	80a0b03a 	or	r16,r16,r2
 4003ba4:	0013883a 	mov	r9,zero
 4003ba8:	000b883a 	mov	r5,zero
 4003bac:	3806d53a 	srli	r3,r7,20
 4003bb0:	382ed7fa 	srli	r23,r7,31
 4003bb4:	04400434 	movhi	r17,16
 4003bb8:	8c7fffc4 	addi	r17,r17,-1
 4003bbc:	18c1ffcc 	andi	r3,r3,2047
 4003bc0:	3029883a 	mov	r20,r6
 4003bc4:	3c62703a 	and	r17,r7,r17
 4003bc8:	bf003fcc 	andi	fp,r23,255
 4003bcc:	18006e26 	beq	r3,zero,4003d88 <__divdf3+0x254>
 4003bd0:	0081ffc4 	movi	r2,2047
 4003bd4:	18806626 	beq	r3,r2,4003d70 <__divdf3+0x23c>
 4003bd8:	88800434 	orhi	r2,r17,16
 4003bdc:	100490fa 	slli	r2,r2,3
 4003be0:	3022d77a 	srli	r17,r6,29
 4003be4:	302890fa 	slli	r20,r6,3
 4003be8:	18ff0044 	addi	r3,r3,-1023
 4003bec:	88a2b03a 	or	r17,r17,r2
 4003bf0:	000f883a 	mov	r7,zero
 4003bf4:	b5e6f03a 	xor	r19,r22,r23
 4003bf8:	3a4cb03a 	or	r6,r7,r9
 4003bfc:	008003c4 	movi	r2,15
 4003c00:	9809883a 	mov	r4,r19
 4003c04:	90c7c83a 	sub	r3,r18,r3
 4003c08:	9cc03fcc 	andi	r19,r19,255
 4003c0c:	11809636 	bltu	r2,r6,4003e68 <__divdf3+0x334>
 4003c10:	300c90ba 	slli	r6,r6,2
 4003c14:	00810034 	movhi	r2,1024
 4003c18:	108f0a04 	addi	r2,r2,15400
 4003c1c:	308d883a 	add	r6,r6,r2
 4003c20:	30800017 	ldw	r2,0(r6)
 4003c24:	1000683a 	jmp	r2
 4003c28:	04003e68 	cmpgeui	r16,zero,249
 4003c2c:	04003ca0 	cmpeqi	r16,zero,242
 4003c30:	04003e58 	cmpnei	r16,zero,249
 4003c34:	04003c94 	movui	r16,242
 4003c38:	04003e58 	cmpnei	r16,zero,249
 4003c3c:	04003e2c 	andhi	r16,zero,248
 4003c40:	04003e58 	cmpnei	r16,zero,249
 4003c44:	04003c94 	movui	r16,242
 4003c48:	04003ca0 	cmpeqi	r16,zero,242
 4003c4c:	04003ca0 	cmpeqi	r16,zero,242
 4003c50:	04003e2c 	andhi	r16,zero,248
 4003c54:	04003c94 	movui	r16,242
 4003c58:	04003c84 	movi	r16,242
 4003c5c:	04003c84 	movi	r16,242
 4003c60:	04003c84 	movi	r16,242
 4003c64:	040041f0 	cmpltui	r16,zero,263
 4003c68:	2404b03a 	or	r2,r4,r16
 4003c6c:	10006c1e 	bne	r2,zero,4003e20 <__divdf3+0x2ec>
 4003c70:	02400204 	movi	r9,8
 4003c74:	0021883a 	mov	r16,zero
 4003c78:	002b883a 	mov	r21,zero
 4003c7c:	01400084 	movi	r5,2
 4003c80:	003fca06 	br	4003bac <__alt_data_end+0xfc003bac>
 4003c84:	8023883a 	mov	r17,r16
 4003c88:	a829883a 	mov	r20,r21
 4003c8c:	4039883a 	mov	fp,r8
 4003c90:	280f883a 	mov	r7,r5
 4003c94:	00800084 	movi	r2,2
 4003c98:	3881601e 	bne	r7,r2,400421c <__divdf3+0x6e8>
 4003c9c:	e027883a 	mov	r19,fp
 4003ca0:	9900004c 	andi	r4,r19,1
 4003ca4:	0081ffc4 	movi	r2,2047
 4003ca8:	0021883a 	mov	r16,zero
 4003cac:	002b883a 	mov	r21,zero
 4003cb0:	1004953a 	slli	r2,r2,20
 4003cb4:	20c03fcc 	andi	r3,r4,255
 4003cb8:	01400434 	movhi	r5,16
 4003cbc:	297fffc4 	addi	r5,r5,-1
 4003cc0:	180697fa 	slli	r3,r3,31
 4003cc4:	8160703a 	and	r16,r16,r5
 4003cc8:	80a0b03a 	or	r16,r16,r2
 4003ccc:	80c6b03a 	or	r3,r16,r3
 4003cd0:	a805883a 	mov	r2,r21
 4003cd4:	dfc00f17 	ldw	ra,60(sp)
 4003cd8:	df000e17 	ldw	fp,56(sp)
 4003cdc:	ddc00d17 	ldw	r23,52(sp)
 4003ce0:	dd800c17 	ldw	r22,48(sp)
 4003ce4:	dd400b17 	ldw	r21,44(sp)
 4003ce8:	dd000a17 	ldw	r20,40(sp)
 4003cec:	dcc00917 	ldw	r19,36(sp)
 4003cf0:	dc800817 	ldw	r18,32(sp)
 4003cf4:	dc400717 	ldw	r17,28(sp)
 4003cf8:	dc000617 	ldw	r16,24(sp)
 4003cfc:	dec01004 	addi	sp,sp,64
 4003d00:	f800283a 	ret
 4003d04:	2404b03a 	or	r2,r4,r16
 4003d08:	2023883a 	mov	r17,r4
 4003d0c:	10003f26 	beq	r2,zero,4003e0c <__divdf3+0x2d8>
 4003d10:	80015e26 	beq	r16,zero,400428c <__divdf3+0x758>
 4003d14:	8009883a 	mov	r4,r16
 4003d18:	d9800215 	stw	r6,8(sp)
 4003d1c:	d9c00515 	stw	r7,20(sp)
 4003d20:	da000415 	stw	r8,16(sp)
 4003d24:	4005cf80 	call	4005cf8 <__clzsi2>
 4003d28:	d9800217 	ldw	r6,8(sp)
 4003d2c:	d9c00517 	ldw	r7,20(sp)
 4003d30:	da000417 	ldw	r8,16(sp)
 4003d34:	113ffd44 	addi	r4,r2,-11
 4003d38:	00c00704 	movi	r3,28
 4003d3c:	19014f16 	blt	r3,r4,400427c <__divdf3+0x748>
 4003d40:	00c00744 	movi	r3,29
 4003d44:	157ffe04 	addi	r21,r2,-8
 4003d48:	1907c83a 	sub	r3,r3,r4
 4003d4c:	8560983a 	sll	r16,r16,r21
 4003d50:	88c6d83a 	srl	r3,r17,r3
 4003d54:	8d6a983a 	sll	r21,r17,r21
 4003d58:	1c20b03a 	or	r16,r3,r16
 4003d5c:	1080fcc4 	addi	r2,r2,1011
 4003d60:	00a5c83a 	sub	r18,zero,r2
 4003d64:	0013883a 	mov	r9,zero
 4003d68:	000b883a 	mov	r5,zero
 4003d6c:	003f8f06 	br	4003bac <__alt_data_end+0xfc003bac>
 4003d70:	3444b03a 	or	r2,r6,r17
 4003d74:	1000231e 	bne	r2,zero,4003e04 <__divdf3+0x2d0>
 4003d78:	0023883a 	mov	r17,zero
 4003d7c:	0029883a 	mov	r20,zero
 4003d80:	01c00084 	movi	r7,2
 4003d84:	003f9b06 	br	4003bf4 <__alt_data_end+0xfc003bf4>
 4003d88:	3444b03a 	or	r2,r6,r17
 4003d8c:	10001926 	beq	r2,zero,4003df4 <__divdf3+0x2c0>
 4003d90:	88014b26 	beq	r17,zero,40042c0 <__divdf3+0x78c>
 4003d94:	8809883a 	mov	r4,r17
 4003d98:	d9400115 	stw	r5,4(sp)
 4003d9c:	d9800215 	stw	r6,8(sp)
 4003da0:	da000415 	stw	r8,16(sp)
 4003da4:	da400315 	stw	r9,12(sp)
 4003da8:	4005cf80 	call	4005cf8 <__clzsi2>
 4003dac:	d9400117 	ldw	r5,4(sp)
 4003db0:	d9800217 	ldw	r6,8(sp)
 4003db4:	da000417 	ldw	r8,16(sp)
 4003db8:	da400317 	ldw	r9,12(sp)
 4003dbc:	113ffd44 	addi	r4,r2,-11
 4003dc0:	00c00704 	movi	r3,28
 4003dc4:	19013a16 	blt	r3,r4,40042b0 <__divdf3+0x77c>
 4003dc8:	00c00744 	movi	r3,29
 4003dcc:	153ffe04 	addi	r20,r2,-8
 4003dd0:	1907c83a 	sub	r3,r3,r4
 4003dd4:	8d22983a 	sll	r17,r17,r20
 4003dd8:	30c6d83a 	srl	r3,r6,r3
 4003ddc:	3528983a 	sll	r20,r6,r20
 4003de0:	1c62b03a 	or	r17,r3,r17
 4003de4:	1080fcc4 	addi	r2,r2,1011
 4003de8:	0087c83a 	sub	r3,zero,r2
 4003dec:	000f883a 	mov	r7,zero
 4003df0:	003f8006 	br	4003bf4 <__alt_data_end+0xfc003bf4>
 4003df4:	0023883a 	mov	r17,zero
 4003df8:	0029883a 	mov	r20,zero
 4003dfc:	01c00044 	movi	r7,1
 4003e00:	003f7c06 	br	4003bf4 <__alt_data_end+0xfc003bf4>
 4003e04:	01c000c4 	movi	r7,3
 4003e08:	003f7a06 	br	4003bf4 <__alt_data_end+0xfc003bf4>
 4003e0c:	02400104 	movi	r9,4
 4003e10:	0021883a 	mov	r16,zero
 4003e14:	002b883a 	mov	r21,zero
 4003e18:	01400044 	movi	r5,1
 4003e1c:	003f6306 	br	4003bac <__alt_data_end+0xfc003bac>
 4003e20:	02400304 	movi	r9,12
 4003e24:	014000c4 	movi	r5,3
 4003e28:	003f6006 	br	4003bac <__alt_data_end+0xfc003bac>
 4003e2c:	04000434 	movhi	r16,16
 4003e30:	0009883a 	mov	r4,zero
 4003e34:	843fffc4 	addi	r16,r16,-1
 4003e38:	057fffc4 	movi	r21,-1
 4003e3c:	0081ffc4 	movi	r2,2047
 4003e40:	003f9b06 	br	4003cb0 <__alt_data_end+0xfc003cb0>
 4003e44:	00c00044 	movi	r3,1
 4003e48:	1887c83a 	sub	r3,r3,r2
 4003e4c:	01000e04 	movi	r4,56
 4003e50:	20c1530e 	bge	r4,r3,40043a0 <__divdf3+0x86c>
 4003e54:	9900004c 	andi	r4,r19,1
 4003e58:	0005883a 	mov	r2,zero
 4003e5c:	0021883a 	mov	r16,zero
 4003e60:	002b883a 	mov	r21,zero
 4003e64:	003f9206 	br	4003cb0 <__alt_data_end+0xfc003cb0>
 4003e68:	8c012e36 	bltu	r17,r16,4004324 <__divdf3+0x7f0>
 4003e6c:	84412c26 	beq	r16,r17,4004320 <__divdf3+0x7ec>
 4003e70:	a82f883a 	mov	r23,r21
 4003e74:	18ffffc4 	addi	r3,r3,-1
 4003e78:	002b883a 	mov	r21,zero
 4003e7c:	a004d63a 	srli	r2,r20,24
 4003e80:	8822923a 	slli	r17,r17,8
 4003e84:	a028923a 	slli	r20,r20,8
 4003e88:	8009883a 	mov	r4,r16
 4003e8c:	88acb03a 	or	r22,r17,r2
 4003e90:	dd000015 	stw	r20,0(sp)
 4003e94:	b028d43a 	srli	r20,r22,16
 4003e98:	d8c00215 	stw	r3,8(sp)
 4003e9c:	b4bfffcc 	andi	r18,r22,65535
 4003ea0:	a00b883a 	mov	r5,r20
 4003ea4:	4005e540 	call	4005e54 <__udivsi3>
 4003ea8:	100b883a 	mov	r5,r2
 4003eac:	9009883a 	mov	r4,r18
 4003eb0:	1023883a 	mov	r17,r2
 4003eb4:	4001d9c0 	call	4001d9c <__mulsi3>
 4003eb8:	8009883a 	mov	r4,r16
 4003ebc:	a00b883a 	mov	r5,r20
 4003ec0:	1039883a 	mov	fp,r2
 4003ec4:	4005eb80 	call	4005eb8 <__umodsi3>
 4003ec8:	1004943a 	slli	r2,r2,16
 4003ecc:	b808d43a 	srli	r4,r23,16
 4003ed0:	d8c00217 	ldw	r3,8(sp)
 4003ed4:	2084b03a 	or	r2,r4,r2
 4003ed8:	1700062e 	bgeu	r2,fp,4003ef4 <__divdf3+0x3c0>
 4003edc:	1585883a 	add	r2,r2,r22
 4003ee0:	893fffc4 	addi	r4,r17,-1
 4003ee4:	15811d36 	bltu	r2,r22,400435c <__divdf3+0x828>
 4003ee8:	17011c2e 	bgeu	r2,fp,400435c <__divdf3+0x828>
 4003eec:	8c7fff84 	addi	r17,r17,-2
 4003ef0:	1585883a 	add	r2,r2,r22
 4003ef4:	1739c83a 	sub	fp,r2,fp
 4003ef8:	a00b883a 	mov	r5,r20
 4003efc:	e009883a 	mov	r4,fp
 4003f00:	d8c00215 	stw	r3,8(sp)
 4003f04:	4005e540 	call	4005e54 <__udivsi3>
 4003f08:	100b883a 	mov	r5,r2
 4003f0c:	9009883a 	mov	r4,r18
 4003f10:	1021883a 	mov	r16,r2
 4003f14:	4001d9c0 	call	4001d9c <__mulsi3>
 4003f18:	a00b883a 	mov	r5,r20
 4003f1c:	e009883a 	mov	r4,fp
 4003f20:	d8800415 	stw	r2,16(sp)
 4003f24:	4005eb80 	call	4005eb8 <__umodsi3>
 4003f28:	1004943a 	slli	r2,r2,16
 4003f2c:	da000417 	ldw	r8,16(sp)
 4003f30:	bdffffcc 	andi	r23,r23,65535
 4003f34:	b884b03a 	or	r2,r23,r2
 4003f38:	d8c00217 	ldw	r3,8(sp)
 4003f3c:	1200062e 	bgeu	r2,r8,4003f58 <__divdf3+0x424>
 4003f40:	1585883a 	add	r2,r2,r22
 4003f44:	813fffc4 	addi	r4,r16,-1
 4003f48:	15810236 	bltu	r2,r22,4004354 <__divdf3+0x820>
 4003f4c:	1201012e 	bgeu	r2,r8,4004354 <__divdf3+0x820>
 4003f50:	843fff84 	addi	r16,r16,-2
 4003f54:	1585883a 	add	r2,r2,r22
 4003f58:	8822943a 	slli	r17,r17,16
 4003f5c:	d9800017 	ldw	r6,0(sp)
 4003f60:	1211c83a 	sub	r8,r2,r8
 4003f64:	8c22b03a 	or	r17,r17,r16
 4003f68:	373fffcc 	andi	fp,r6,65535
 4003f6c:	8abfffcc 	andi	r10,r17,65535
 4003f70:	8820d43a 	srli	r16,r17,16
 4003f74:	5009883a 	mov	r4,r10
 4003f78:	e00b883a 	mov	r5,fp
 4003f7c:	302ed43a 	srli	r23,r6,16
 4003f80:	d8c00215 	stw	r3,8(sp)
 4003f84:	da000415 	stw	r8,16(sp)
 4003f88:	da800115 	stw	r10,4(sp)
 4003f8c:	4001d9c0 	call	4001d9c <__mulsi3>
 4003f90:	800b883a 	mov	r5,r16
 4003f94:	e009883a 	mov	r4,fp
 4003f98:	d8800515 	stw	r2,20(sp)
 4003f9c:	4001d9c0 	call	4001d9c <__mulsi3>
 4003fa0:	8009883a 	mov	r4,r16
 4003fa4:	b80b883a 	mov	r5,r23
 4003fa8:	d8800315 	stw	r2,12(sp)
 4003fac:	4001d9c0 	call	4001d9c <__mulsi3>
 4003fb0:	da800117 	ldw	r10,4(sp)
 4003fb4:	b80b883a 	mov	r5,r23
 4003fb8:	1021883a 	mov	r16,r2
 4003fbc:	5009883a 	mov	r4,r10
 4003fc0:	4001d9c0 	call	4001d9c <__mulsi3>
 4003fc4:	d9c00517 	ldw	r7,20(sp)
 4003fc8:	da400317 	ldw	r9,12(sp)
 4003fcc:	d8c00217 	ldw	r3,8(sp)
 4003fd0:	3808d43a 	srli	r4,r7,16
 4003fd4:	1245883a 	add	r2,r2,r9
 4003fd8:	da000417 	ldw	r8,16(sp)
 4003fdc:	2085883a 	add	r2,r4,r2
 4003fe0:	1240022e 	bgeu	r2,r9,4003fec <__divdf3+0x4b8>
 4003fe4:	01000074 	movhi	r4,1
 4003fe8:	8121883a 	add	r16,r16,r4
 4003fec:	1008d43a 	srli	r4,r2,16
 4003ff0:	1004943a 	slli	r2,r2,16
 4003ff4:	39ffffcc 	andi	r7,r7,65535
 4003ff8:	2409883a 	add	r4,r4,r16
 4003ffc:	11c5883a 	add	r2,r2,r7
 4004000:	4100bb36 	bltu	r8,r4,40042f0 <__divdf3+0x7bc>
 4004004:	4100d726 	beq	r8,r4,4004364 <__divdf3+0x830>
 4004008:	4109c83a 	sub	r4,r8,r4
 400400c:	a8a1c83a 	sub	r16,r21,r2
 4004010:	ac2b803a 	cmpltu	r21,r21,r16
 4004014:	256bc83a 	sub	r21,r4,r21
 4004018:	b540d926 	beq	r22,r21,4004380 <__divdf3+0x84c>
 400401c:	a00b883a 	mov	r5,r20
 4004020:	a809883a 	mov	r4,r21
 4004024:	d8c00215 	stw	r3,8(sp)
 4004028:	4005e540 	call	4005e54 <__udivsi3>
 400402c:	100b883a 	mov	r5,r2
 4004030:	9009883a 	mov	r4,r18
 4004034:	d8800515 	stw	r2,20(sp)
 4004038:	4001d9c0 	call	4001d9c <__mulsi3>
 400403c:	a809883a 	mov	r4,r21
 4004040:	a00b883a 	mov	r5,r20
 4004044:	d8800415 	stw	r2,16(sp)
 4004048:	4005eb80 	call	4005eb8 <__umodsi3>
 400404c:	1004943a 	slli	r2,r2,16
 4004050:	8008d43a 	srli	r4,r16,16
 4004054:	da000417 	ldw	r8,16(sp)
 4004058:	d8c00217 	ldw	r3,8(sp)
 400405c:	2084b03a 	or	r2,r4,r2
 4004060:	d9c00517 	ldw	r7,20(sp)
 4004064:	1200062e 	bgeu	r2,r8,4004080 <__divdf3+0x54c>
 4004068:	1585883a 	add	r2,r2,r22
 400406c:	393fffc4 	addi	r4,r7,-1
 4004070:	1580c536 	bltu	r2,r22,4004388 <__divdf3+0x854>
 4004074:	1200c42e 	bgeu	r2,r8,4004388 <__divdf3+0x854>
 4004078:	39ffff84 	addi	r7,r7,-2
 400407c:	1585883a 	add	r2,r2,r22
 4004080:	122bc83a 	sub	r21,r2,r8
 4004084:	a00b883a 	mov	r5,r20
 4004088:	a809883a 	mov	r4,r21
 400408c:	d8c00215 	stw	r3,8(sp)
 4004090:	d9c00515 	stw	r7,20(sp)
 4004094:	4005e540 	call	4005e54 <__udivsi3>
 4004098:	9009883a 	mov	r4,r18
 400409c:	100b883a 	mov	r5,r2
 40040a0:	d8800415 	stw	r2,16(sp)
 40040a4:	4001d9c0 	call	4001d9c <__mulsi3>
 40040a8:	a809883a 	mov	r4,r21
 40040ac:	a00b883a 	mov	r5,r20
 40040b0:	1025883a 	mov	r18,r2
 40040b4:	4005eb80 	call	4005eb8 <__umodsi3>
 40040b8:	1004943a 	slli	r2,r2,16
 40040bc:	813fffcc 	andi	r4,r16,65535
 40040c0:	d8c00217 	ldw	r3,8(sp)
 40040c4:	20a0b03a 	or	r16,r4,r2
 40040c8:	d9c00517 	ldw	r7,20(sp)
 40040cc:	da000417 	ldw	r8,16(sp)
 40040d0:	8480062e 	bgeu	r16,r18,40040ec <__divdf3+0x5b8>
 40040d4:	85a1883a 	add	r16,r16,r22
 40040d8:	40bfffc4 	addi	r2,r8,-1
 40040dc:	8580ac36 	bltu	r16,r22,4004390 <__divdf3+0x85c>
 40040e0:	8480ab2e 	bgeu	r16,r18,4004390 <__divdf3+0x85c>
 40040e4:	423fff84 	addi	r8,r8,-2
 40040e8:	85a1883a 	add	r16,r16,r22
 40040ec:	3804943a 	slli	r2,r7,16
 40040f0:	84a1c83a 	sub	r16,r16,r18
 40040f4:	e009883a 	mov	r4,fp
 40040f8:	1228b03a 	or	r20,r2,r8
 40040fc:	a1ffffcc 	andi	r7,r20,65535
 4004100:	a024d43a 	srli	r18,r20,16
 4004104:	380b883a 	mov	r5,r7
 4004108:	d8c00215 	stw	r3,8(sp)
 400410c:	d9c00515 	stw	r7,20(sp)
 4004110:	4001d9c0 	call	4001d9c <__mulsi3>
 4004114:	900b883a 	mov	r5,r18
 4004118:	e009883a 	mov	r4,fp
 400411c:	102b883a 	mov	r21,r2
 4004120:	4001d9c0 	call	4001d9c <__mulsi3>
 4004124:	900b883a 	mov	r5,r18
 4004128:	b809883a 	mov	r4,r23
 400412c:	1039883a 	mov	fp,r2
 4004130:	4001d9c0 	call	4001d9c <__mulsi3>
 4004134:	d9c00517 	ldw	r7,20(sp)
 4004138:	b80b883a 	mov	r5,r23
 400413c:	1025883a 	mov	r18,r2
 4004140:	3809883a 	mov	r4,r7
 4004144:	4001d9c0 	call	4001d9c <__mulsi3>
 4004148:	a808d43a 	srli	r4,r21,16
 400414c:	1705883a 	add	r2,r2,fp
 4004150:	d8c00217 	ldw	r3,8(sp)
 4004154:	2085883a 	add	r2,r4,r2
 4004158:	1700022e 	bgeu	r2,fp,4004164 <__divdf3+0x630>
 400415c:	01000074 	movhi	r4,1
 4004160:	9125883a 	add	r18,r18,r4
 4004164:	1008d43a 	srli	r4,r2,16
 4004168:	1004943a 	slli	r2,r2,16
 400416c:	ad7fffcc 	andi	r21,r21,65535
 4004170:	2489883a 	add	r4,r4,r18
 4004174:	1545883a 	add	r2,r2,r21
 4004178:	81003836 	bltu	r16,r4,400425c <__divdf3+0x728>
 400417c:	81003626 	beq	r16,r4,4004258 <__divdf3+0x724>
 4004180:	a5000054 	ori	r20,r20,1
 4004184:	1880ffc4 	addi	r2,r3,1023
 4004188:	00bf2e0e 	bge	zero,r2,4003e44 <__alt_data_end+0xfc003e44>
 400418c:	a10001cc 	andi	r4,r20,7
 4004190:	20000726 	beq	r4,zero,40041b0 <__divdf3+0x67c>
 4004194:	a10003cc 	andi	r4,r20,15
 4004198:	01400104 	movi	r5,4
 400419c:	21400426 	beq	r4,r5,40041b0 <__divdf3+0x67c>
 40041a0:	a149883a 	add	r4,r20,r5
 40041a4:	2529803a 	cmpltu	r20,r4,r20
 40041a8:	8d23883a 	add	r17,r17,r20
 40041ac:	2029883a 	mov	r20,r4
 40041b0:	8900402c 	andhi	r4,r17,256
 40041b4:	20000426 	beq	r4,zero,40041c8 <__divdf3+0x694>
 40041b8:	18810004 	addi	r2,r3,1024
 40041bc:	00ffc034 	movhi	r3,65280
 40041c0:	18ffffc4 	addi	r3,r3,-1
 40041c4:	88e2703a 	and	r17,r17,r3
 40041c8:	00c1ff84 	movi	r3,2046
 40041cc:	18beb416 	blt	r3,r2,4003ca0 <__alt_data_end+0xfc003ca0>
 40041d0:	a028d0fa 	srli	r20,r20,3
 40041d4:	882a977a 	slli	r21,r17,29
 40041d8:	8820927a 	slli	r16,r17,9
 40041dc:	1081ffcc 	andi	r2,r2,2047
 40041e0:	ad2ab03a 	or	r21,r21,r20
 40041e4:	8020d33a 	srli	r16,r16,12
 40041e8:	9900004c 	andi	r4,r19,1
 40041ec:	003eb006 	br	4003cb0 <__alt_data_end+0xfc003cb0>
 40041f0:	8080022c 	andhi	r2,r16,8
 40041f4:	10001226 	beq	r2,zero,4004240 <__divdf3+0x70c>
 40041f8:	8880022c 	andhi	r2,r17,8
 40041fc:	1000101e 	bne	r2,zero,4004240 <__divdf3+0x70c>
 4004200:	00800434 	movhi	r2,16
 4004204:	8c000234 	orhi	r16,r17,8
 4004208:	10bfffc4 	addi	r2,r2,-1
 400420c:	b809883a 	mov	r4,r23
 4004210:	80a0703a 	and	r16,r16,r2
 4004214:	a02b883a 	mov	r21,r20
 4004218:	003f0806 	br	4003e3c <__alt_data_end+0xfc003e3c>
 400421c:	008000c4 	movi	r2,3
 4004220:	3880b126 	beq	r7,r2,40044e8 <__divdf3+0x9b4>
 4004224:	00800044 	movi	r2,1
 4004228:	38805b1e 	bne	r7,r2,4004398 <__divdf3+0x864>
 400422c:	e009883a 	mov	r4,fp
 4004230:	0005883a 	mov	r2,zero
 4004234:	0021883a 	mov	r16,zero
 4004238:	002b883a 	mov	r21,zero
 400423c:	003e9c06 	br	4003cb0 <__alt_data_end+0xfc003cb0>
 4004240:	00800434 	movhi	r2,16
 4004244:	84000234 	orhi	r16,r16,8
 4004248:	10bfffc4 	addi	r2,r2,-1
 400424c:	b009883a 	mov	r4,r22
 4004250:	80a0703a 	and	r16,r16,r2
 4004254:	003ef906 	br	4003e3c <__alt_data_end+0xfc003e3c>
 4004258:	103fca26 	beq	r2,zero,4004184 <__alt_data_end+0xfc004184>
 400425c:	b421883a 	add	r16,r22,r16
 4004260:	a17fffc4 	addi	r5,r20,-1
 4004264:	8580422e 	bgeu	r16,r22,4004370 <__divdf3+0x83c>
 4004268:	2829883a 	mov	r20,r5
 400426c:	813fc41e 	bne	r16,r4,4004180 <__alt_data_end+0xfc004180>
 4004270:	d9800017 	ldw	r6,0(sp)
 4004274:	30bfc21e 	bne	r6,r2,4004180 <__alt_data_end+0xfc004180>
 4004278:	003fc206 	br	4004184 <__alt_data_end+0xfc004184>
 400427c:	143ff604 	addi	r16,r2,-40
 4004280:	8c20983a 	sll	r16,r17,r16
 4004284:	002b883a 	mov	r21,zero
 4004288:	003eb406 	br	4003d5c <__alt_data_end+0xfc003d5c>
 400428c:	d9800215 	stw	r6,8(sp)
 4004290:	d9c00515 	stw	r7,20(sp)
 4004294:	da000415 	stw	r8,16(sp)
 4004298:	4005cf80 	call	4005cf8 <__clzsi2>
 400429c:	10800804 	addi	r2,r2,32
 40042a0:	da000417 	ldw	r8,16(sp)
 40042a4:	d9c00517 	ldw	r7,20(sp)
 40042a8:	d9800217 	ldw	r6,8(sp)
 40042ac:	003ea106 	br	4003d34 <__alt_data_end+0xfc003d34>
 40042b0:	147ff604 	addi	r17,r2,-40
 40042b4:	3462983a 	sll	r17,r6,r17
 40042b8:	0029883a 	mov	r20,zero
 40042bc:	003ec906 	br	4003de4 <__alt_data_end+0xfc003de4>
 40042c0:	3009883a 	mov	r4,r6
 40042c4:	d9400115 	stw	r5,4(sp)
 40042c8:	d9800215 	stw	r6,8(sp)
 40042cc:	da000415 	stw	r8,16(sp)
 40042d0:	da400315 	stw	r9,12(sp)
 40042d4:	4005cf80 	call	4005cf8 <__clzsi2>
 40042d8:	10800804 	addi	r2,r2,32
 40042dc:	da400317 	ldw	r9,12(sp)
 40042e0:	da000417 	ldw	r8,16(sp)
 40042e4:	d9800217 	ldw	r6,8(sp)
 40042e8:	d9400117 	ldw	r5,4(sp)
 40042ec:	003eb306 	br	4003dbc <__alt_data_end+0xfc003dbc>
 40042f0:	d9800017 	ldw	r6,0(sp)
 40042f4:	a9ab883a 	add	r21,r21,r6
 40042f8:	a98b803a 	cmpltu	r5,r21,r6
 40042fc:	2d8b883a 	add	r5,r5,r22
 4004300:	2a11883a 	add	r8,r5,r8
 4004304:	897fffc4 	addi	r5,r17,-1
 4004308:	b2000c2e 	bgeu	r22,r8,400433c <__divdf3+0x808>
 400430c:	41003f36 	bltu	r8,r4,400440c <__divdf3+0x8d8>
 4004310:	22006c26 	beq	r4,r8,40044c4 <__divdf3+0x990>
 4004314:	4109c83a 	sub	r4,r8,r4
 4004318:	2823883a 	mov	r17,r5
 400431c:	003f3b06 	br	400400c <__alt_data_end+0xfc00400c>
 4004320:	ad3ed336 	bltu	r21,r20,4003e70 <__alt_data_end+0xfc003e70>
 4004324:	a804d07a 	srli	r2,r21,1
 4004328:	802e97fa 	slli	r23,r16,31
 400432c:	a82a97fa 	slli	r21,r21,31
 4004330:	8020d07a 	srli	r16,r16,1
 4004334:	b8aeb03a 	or	r23,r23,r2
 4004338:	003ed006 	br	4003e7c <__alt_data_end+0xfc003e7c>
 400433c:	b23ff51e 	bne	r22,r8,4004314 <__alt_data_end+0xfc004314>
 4004340:	d9800017 	ldw	r6,0(sp)
 4004344:	a9bff12e 	bgeu	r21,r6,400430c <__alt_data_end+0xfc00430c>
 4004348:	b109c83a 	sub	r4,r22,r4
 400434c:	2823883a 	mov	r17,r5
 4004350:	003f2e06 	br	400400c <__alt_data_end+0xfc00400c>
 4004354:	2021883a 	mov	r16,r4
 4004358:	003eff06 	br	4003f58 <__alt_data_end+0xfc003f58>
 400435c:	2023883a 	mov	r17,r4
 4004360:	003ee406 	br	4003ef4 <__alt_data_end+0xfc003ef4>
 4004364:	a8bfe236 	bltu	r21,r2,40042f0 <__alt_data_end+0xfc0042f0>
 4004368:	0009883a 	mov	r4,zero
 400436c:	003f2706 	br	400400c <__alt_data_end+0xfc00400c>
 4004370:	81002d36 	bltu	r16,r4,4004428 <__divdf3+0x8f4>
 4004374:	24005626 	beq	r4,r16,40044d0 <__divdf3+0x99c>
 4004378:	2829883a 	mov	r20,r5
 400437c:	003f8006 	br	4004180 <__alt_data_end+0xfc004180>
 4004380:	053fffc4 	movi	r20,-1
 4004384:	003f7f06 	br	4004184 <__alt_data_end+0xfc004184>
 4004388:	200f883a 	mov	r7,r4
 400438c:	003f3c06 	br	4004080 <__alt_data_end+0xfc004080>
 4004390:	1011883a 	mov	r8,r2
 4004394:	003f5506 	br	40040ec <__alt_data_end+0xfc0040ec>
 4004398:	e027883a 	mov	r19,fp
 400439c:	003f7906 	br	4004184 <__alt_data_end+0xfc004184>
 40043a0:	010007c4 	movi	r4,31
 40043a4:	20c02816 	blt	r4,r3,4004448 <__divdf3+0x914>
 40043a8:	00800804 	movi	r2,32
 40043ac:	10c5c83a 	sub	r2,r2,r3
 40043b0:	888a983a 	sll	r5,r17,r2
 40043b4:	a0c8d83a 	srl	r4,r20,r3
 40043b8:	a084983a 	sll	r2,r20,r2
 40043bc:	88e2d83a 	srl	r17,r17,r3
 40043c0:	2906b03a 	or	r3,r5,r4
 40043c4:	1004c03a 	cmpne	r2,r2,zero
 40043c8:	1886b03a 	or	r3,r3,r2
 40043cc:	188001cc 	andi	r2,r3,7
 40043d0:	10000726 	beq	r2,zero,40043f0 <__divdf3+0x8bc>
 40043d4:	188003cc 	andi	r2,r3,15
 40043d8:	01000104 	movi	r4,4
 40043dc:	11000426 	beq	r2,r4,40043f0 <__divdf3+0x8bc>
 40043e0:	1805883a 	mov	r2,r3
 40043e4:	10c00104 	addi	r3,r2,4
 40043e8:	1885803a 	cmpltu	r2,r3,r2
 40043ec:	88a3883a 	add	r17,r17,r2
 40043f0:	8880202c 	andhi	r2,r17,128
 40043f4:	10002926 	beq	r2,zero,400449c <__divdf3+0x968>
 40043f8:	9900004c 	andi	r4,r19,1
 40043fc:	00800044 	movi	r2,1
 4004400:	0021883a 	mov	r16,zero
 4004404:	002b883a 	mov	r21,zero
 4004408:	003e2906 	br	4003cb0 <__alt_data_end+0xfc003cb0>
 400440c:	d9800017 	ldw	r6,0(sp)
 4004410:	8c7fff84 	addi	r17,r17,-2
 4004414:	a9ab883a 	add	r21,r21,r6
 4004418:	a98b803a 	cmpltu	r5,r21,r6
 400441c:	2d8b883a 	add	r5,r5,r22
 4004420:	2a11883a 	add	r8,r5,r8
 4004424:	003ef806 	br	4004008 <__alt_data_end+0xfc004008>
 4004428:	d9800017 	ldw	r6,0(sp)
 400442c:	318f883a 	add	r7,r6,r6
 4004430:	398b803a 	cmpltu	r5,r7,r6
 4004434:	2d8d883a 	add	r6,r5,r22
 4004438:	81a1883a 	add	r16,r16,r6
 400443c:	a17fff84 	addi	r5,r20,-2
 4004440:	d9c00015 	stw	r7,0(sp)
 4004444:	003f8806 	br	4004268 <__alt_data_end+0xfc004268>
 4004448:	013ff844 	movi	r4,-31
 400444c:	2085c83a 	sub	r2,r4,r2
 4004450:	8888d83a 	srl	r4,r17,r2
 4004454:	00800804 	movi	r2,32
 4004458:	18802126 	beq	r3,r2,40044e0 <__divdf3+0x9ac>
 400445c:	04001004 	movi	r16,64
 4004460:	80c7c83a 	sub	r3,r16,r3
 4004464:	88e0983a 	sll	r16,r17,r3
 4004468:	8504b03a 	or	r2,r16,r20
 400446c:	1004c03a 	cmpne	r2,r2,zero
 4004470:	2084b03a 	or	r2,r4,r2
 4004474:	144001cc 	andi	r17,r2,7
 4004478:	88000d1e 	bne	r17,zero,40044b0 <__divdf3+0x97c>
 400447c:	0021883a 	mov	r16,zero
 4004480:	102ad0fa 	srli	r21,r2,3
 4004484:	9900004c 	andi	r4,r19,1
 4004488:	0005883a 	mov	r2,zero
 400448c:	ac6ab03a 	or	r21,r21,r17
 4004490:	003e0706 	br	4003cb0 <__alt_data_end+0xfc003cb0>
 4004494:	1007883a 	mov	r3,r2
 4004498:	0023883a 	mov	r17,zero
 400449c:	8820927a 	slli	r16,r17,9
 40044a0:	1805883a 	mov	r2,r3
 40044a4:	8822977a 	slli	r17,r17,29
 40044a8:	8020d33a 	srli	r16,r16,12
 40044ac:	003ff406 	br	4004480 <__alt_data_end+0xfc004480>
 40044b0:	10c003cc 	andi	r3,r2,15
 40044b4:	01000104 	movi	r4,4
 40044b8:	193ff626 	beq	r3,r4,4004494 <__alt_data_end+0xfc004494>
 40044bc:	0023883a 	mov	r17,zero
 40044c0:	003fc806 	br	40043e4 <__alt_data_end+0xfc0043e4>
 40044c4:	a8bfd136 	bltu	r21,r2,400440c <__alt_data_end+0xfc00440c>
 40044c8:	2823883a 	mov	r17,r5
 40044cc:	003fa606 	br	4004368 <__alt_data_end+0xfc004368>
 40044d0:	d9800017 	ldw	r6,0(sp)
 40044d4:	30bfd436 	bltu	r6,r2,4004428 <__alt_data_end+0xfc004428>
 40044d8:	2829883a 	mov	r20,r5
 40044dc:	003f6406 	br	4004270 <__alt_data_end+0xfc004270>
 40044e0:	0021883a 	mov	r16,zero
 40044e4:	003fe006 	br	4004468 <__alt_data_end+0xfc004468>
 40044e8:	00800434 	movhi	r2,16
 40044ec:	8c000234 	orhi	r16,r17,8
 40044f0:	10bfffc4 	addi	r2,r2,-1
 40044f4:	e009883a 	mov	r4,fp
 40044f8:	80a0703a 	and	r16,r16,r2
 40044fc:	a02b883a 	mov	r21,r20
 4004500:	003e4e06 	br	4003e3c <__alt_data_end+0xfc003e3c>

04004504 <__gedf2>:
 4004504:	2804d53a 	srli	r2,r5,20
 4004508:	3806d53a 	srli	r3,r7,20
 400450c:	02000434 	movhi	r8,16
 4004510:	423fffc4 	addi	r8,r8,-1
 4004514:	1081ffcc 	andi	r2,r2,2047
 4004518:	0241ffc4 	movi	r9,2047
 400451c:	2a14703a 	and	r10,r5,r8
 4004520:	18c1ffcc 	andi	r3,r3,2047
 4004524:	3a10703a 	and	r8,r7,r8
 4004528:	280ad7fa 	srli	r5,r5,31
 400452c:	380ed7fa 	srli	r7,r7,31
 4004530:	12401d26 	beq	r2,r9,40045a8 <__gedf2+0xa4>
 4004534:	0241ffc4 	movi	r9,2047
 4004538:	1a401226 	beq	r3,r9,4004584 <__gedf2+0x80>
 400453c:	1000081e 	bne	r2,zero,4004560 <__gedf2+0x5c>
 4004540:	2296b03a 	or	r11,r4,r10
 4004544:	5813003a 	cmpeq	r9,r11,zero
 4004548:	1800091e 	bne	r3,zero,4004570 <__gedf2+0x6c>
 400454c:	3218b03a 	or	r12,r6,r8
 4004550:	6000071e 	bne	r12,zero,4004570 <__gedf2+0x6c>
 4004554:	0005883a 	mov	r2,zero
 4004558:	5800101e 	bne	r11,zero,400459c <__gedf2+0x98>
 400455c:	f800283a 	ret
 4004560:	18000c1e 	bne	r3,zero,4004594 <__gedf2+0x90>
 4004564:	3212b03a 	or	r9,r6,r8
 4004568:	48000c26 	beq	r9,zero,400459c <__gedf2+0x98>
 400456c:	0013883a 	mov	r9,zero
 4004570:	39c03fcc 	andi	r7,r7,255
 4004574:	48000826 	beq	r9,zero,4004598 <__gedf2+0x94>
 4004578:	38000926 	beq	r7,zero,40045a0 <__gedf2+0x9c>
 400457c:	00800044 	movi	r2,1
 4004580:	f800283a 	ret
 4004584:	3212b03a 	or	r9,r6,r8
 4004588:	483fec26 	beq	r9,zero,400453c <__alt_data_end+0xfc00453c>
 400458c:	00bfff84 	movi	r2,-2
 4004590:	f800283a 	ret
 4004594:	39c03fcc 	andi	r7,r7,255
 4004598:	29c00626 	beq	r5,r7,40045b4 <__gedf2+0xb0>
 400459c:	283ff726 	beq	r5,zero,400457c <__alt_data_end+0xfc00457c>
 40045a0:	00bfffc4 	movi	r2,-1
 40045a4:	f800283a 	ret
 40045a8:	2292b03a 	or	r9,r4,r10
 40045ac:	483fe126 	beq	r9,zero,4004534 <__alt_data_end+0xfc004534>
 40045b0:	003ff606 	br	400458c <__alt_data_end+0xfc00458c>
 40045b4:	18bff916 	blt	r3,r2,400459c <__alt_data_end+0xfc00459c>
 40045b8:	10c00316 	blt	r2,r3,40045c8 <__gedf2+0xc4>
 40045bc:	42bff736 	bltu	r8,r10,400459c <__alt_data_end+0xfc00459c>
 40045c0:	52000326 	beq	r10,r8,40045d0 <__gedf2+0xcc>
 40045c4:	5200042e 	bgeu	r10,r8,40045d8 <__gedf2+0xd4>
 40045c8:	283fec1e 	bne	r5,zero,400457c <__alt_data_end+0xfc00457c>
 40045cc:	003ff406 	br	40045a0 <__alt_data_end+0xfc0045a0>
 40045d0:	313ff236 	bltu	r6,r4,400459c <__alt_data_end+0xfc00459c>
 40045d4:	21bffc36 	bltu	r4,r6,40045c8 <__alt_data_end+0xfc0045c8>
 40045d8:	0005883a 	mov	r2,zero
 40045dc:	f800283a 	ret

040045e0 <__ledf2>:
 40045e0:	2804d53a 	srli	r2,r5,20
 40045e4:	3810d53a 	srli	r8,r7,20
 40045e8:	00c00434 	movhi	r3,16
 40045ec:	18ffffc4 	addi	r3,r3,-1
 40045f0:	1081ffcc 	andi	r2,r2,2047
 40045f4:	0241ffc4 	movi	r9,2047
 40045f8:	28d4703a 	and	r10,r5,r3
 40045fc:	4201ffcc 	andi	r8,r8,2047
 4004600:	38c6703a 	and	r3,r7,r3
 4004604:	280ad7fa 	srli	r5,r5,31
 4004608:	380ed7fa 	srli	r7,r7,31
 400460c:	12401f26 	beq	r2,r9,400468c <__ledf2+0xac>
 4004610:	0241ffc4 	movi	r9,2047
 4004614:	42401426 	beq	r8,r9,4004668 <__ledf2+0x88>
 4004618:	1000091e 	bne	r2,zero,4004640 <__ledf2+0x60>
 400461c:	2296b03a 	or	r11,r4,r10
 4004620:	5813003a 	cmpeq	r9,r11,zero
 4004624:	29403fcc 	andi	r5,r5,255
 4004628:	40000a1e 	bne	r8,zero,4004654 <__ledf2+0x74>
 400462c:	30d8b03a 	or	r12,r6,r3
 4004630:	6000081e 	bne	r12,zero,4004654 <__ledf2+0x74>
 4004634:	0005883a 	mov	r2,zero
 4004638:	5800111e 	bne	r11,zero,4004680 <__ledf2+0xa0>
 400463c:	f800283a 	ret
 4004640:	29403fcc 	andi	r5,r5,255
 4004644:	40000c1e 	bne	r8,zero,4004678 <__ledf2+0x98>
 4004648:	30d2b03a 	or	r9,r6,r3
 400464c:	48000c26 	beq	r9,zero,4004680 <__ledf2+0xa0>
 4004650:	0013883a 	mov	r9,zero
 4004654:	39c03fcc 	andi	r7,r7,255
 4004658:	48000826 	beq	r9,zero,400467c <__ledf2+0x9c>
 400465c:	38001126 	beq	r7,zero,40046a4 <__ledf2+0xc4>
 4004660:	00800044 	movi	r2,1
 4004664:	f800283a 	ret
 4004668:	30d2b03a 	or	r9,r6,r3
 400466c:	483fea26 	beq	r9,zero,4004618 <__alt_data_end+0xfc004618>
 4004670:	00800084 	movi	r2,2
 4004674:	f800283a 	ret
 4004678:	39c03fcc 	andi	r7,r7,255
 400467c:	39400726 	beq	r7,r5,400469c <__ledf2+0xbc>
 4004680:	2800081e 	bne	r5,zero,40046a4 <__ledf2+0xc4>
 4004684:	00800044 	movi	r2,1
 4004688:	f800283a 	ret
 400468c:	2292b03a 	or	r9,r4,r10
 4004690:	483fdf26 	beq	r9,zero,4004610 <__alt_data_end+0xfc004610>
 4004694:	00800084 	movi	r2,2
 4004698:	f800283a 	ret
 400469c:	4080030e 	bge	r8,r2,40046ac <__ledf2+0xcc>
 40046a0:	383fef26 	beq	r7,zero,4004660 <__alt_data_end+0xfc004660>
 40046a4:	00bfffc4 	movi	r2,-1
 40046a8:	f800283a 	ret
 40046ac:	123feb16 	blt	r2,r8,400465c <__alt_data_end+0xfc00465c>
 40046b0:	1abff336 	bltu	r3,r10,4004680 <__alt_data_end+0xfc004680>
 40046b4:	50c00326 	beq	r10,r3,40046c4 <__ledf2+0xe4>
 40046b8:	50c0042e 	bgeu	r10,r3,40046cc <__ledf2+0xec>
 40046bc:	283fe81e 	bne	r5,zero,4004660 <__alt_data_end+0xfc004660>
 40046c0:	003ff806 	br	40046a4 <__alt_data_end+0xfc0046a4>
 40046c4:	313fee36 	bltu	r6,r4,4004680 <__alt_data_end+0xfc004680>
 40046c8:	21bffc36 	bltu	r4,r6,40046bc <__alt_data_end+0xfc0046bc>
 40046cc:	0005883a 	mov	r2,zero
 40046d0:	f800283a 	ret

040046d4 <__muldf3>:
 40046d4:	deffee04 	addi	sp,sp,-72
 40046d8:	dd000c15 	stw	r20,48(sp)
 40046dc:	2828d53a 	srli	r20,r5,20
 40046e0:	ddc00f15 	stw	r23,60(sp)
 40046e4:	282ed7fa 	srli	r23,r5,31
 40046e8:	dc000815 	stw	r16,32(sp)
 40046ec:	04000434 	movhi	r16,16
 40046f0:	dcc00b15 	stw	r19,44(sp)
 40046f4:	843fffc4 	addi	r16,r16,-1
 40046f8:	dfc01115 	stw	ra,68(sp)
 40046fc:	df001015 	stw	fp,64(sp)
 4004700:	dd800e15 	stw	r22,56(sp)
 4004704:	dd400d15 	stw	r21,52(sp)
 4004708:	dc800a15 	stw	r18,40(sp)
 400470c:	dc400915 	stw	r17,36(sp)
 4004710:	a501ffcc 	andi	r20,r20,2047
 4004714:	2c20703a 	and	r16,r5,r16
 4004718:	b827883a 	mov	r19,r23
 400471c:	ba403fcc 	andi	r9,r23,255
 4004720:	a0006026 	beq	r20,zero,40048a4 <__muldf3+0x1d0>
 4004724:	0081ffc4 	movi	r2,2047
 4004728:	202d883a 	mov	r22,r4
 400472c:	a0803626 	beq	r20,r2,4004808 <__muldf3+0x134>
 4004730:	84000434 	orhi	r16,r16,16
 4004734:	200ad77a 	srli	r5,r4,29
 4004738:	800490fa 	slli	r2,r16,3
 400473c:	202c90fa 	slli	r22,r4,3
 4004740:	a53f0044 	addi	r20,r20,-1023
 4004744:	28a0b03a 	or	r16,r5,r2
 4004748:	002b883a 	mov	r21,zero
 400474c:	000b883a 	mov	r5,zero
 4004750:	3804d53a 	srli	r2,r7,20
 4004754:	3838d7fa 	srli	fp,r7,31
 4004758:	04400434 	movhi	r17,16
 400475c:	8c7fffc4 	addi	r17,r17,-1
 4004760:	1081ffcc 	andi	r2,r2,2047
 4004764:	3025883a 	mov	r18,r6
 4004768:	3c62703a 	and	r17,r7,r17
 400476c:	e2803fcc 	andi	r10,fp,255
 4004770:	10006d26 	beq	r2,zero,4004928 <__muldf3+0x254>
 4004774:	00c1ffc4 	movi	r3,2047
 4004778:	10c06526 	beq	r2,r3,4004910 <__muldf3+0x23c>
 400477c:	8c400434 	orhi	r17,r17,16
 4004780:	300ed77a 	srli	r7,r6,29
 4004784:	880690fa 	slli	r3,r17,3
 4004788:	302490fa 	slli	r18,r6,3
 400478c:	10bf0044 	addi	r2,r2,-1023
 4004790:	38e2b03a 	or	r17,r7,r3
 4004794:	000f883a 	mov	r7,zero
 4004798:	a087883a 	add	r3,r20,r2
 400479c:	010003c4 	movi	r4,15
 40047a0:	3d44b03a 	or	r2,r7,r21
 40047a4:	e5ccf03a 	xor	r6,fp,r23
 40047a8:	1a000044 	addi	r8,r3,1
 40047ac:	20809b36 	bltu	r4,r2,4004a1c <__muldf3+0x348>
 40047b0:	100490ba 	slli	r2,r2,2
 40047b4:	01010034 	movhi	r4,1024
 40047b8:	2111f204 	addi	r4,r4,18376
 40047bc:	1105883a 	add	r2,r2,r4
 40047c0:	10800017 	ldw	r2,0(r2)
 40047c4:	1000683a 	jmp	r2
 40047c8:	04004a1c 	xori	r16,zero,296
 40047cc:	04004828 	cmpgeui	r16,zero,288
 40047d0:	04004828 	cmpgeui	r16,zero,288
 40047d4:	04004824 	muli	r16,zero,288
 40047d8:	040049f8 	rdprs	r16,zero,295
 40047dc:	040049f8 	rdprs	r16,zero,295
 40047e0:	040049e0 	cmpeqi	r16,zero,295
 40047e4:	04004824 	muli	r16,zero,288
 40047e8:	040049f8 	rdprs	r16,zero,295
 40047ec:	040049e0 	cmpeqi	r16,zero,295
 40047f0:	040049f8 	rdprs	r16,zero,295
 40047f4:	04004824 	muli	r16,zero,288
 40047f8:	04004a08 	cmpgei	r16,zero,296
 40047fc:	04004a08 	cmpgei	r16,zero,296
 4004800:	04004a08 	cmpgei	r16,zero,296
 4004804:	04004d68 	cmpgeui	r16,zero,309
 4004808:	2404b03a 	or	r2,r4,r16
 400480c:	1000711e 	bne	r2,zero,40049d4 <__muldf3+0x300>
 4004810:	05400204 	movi	r21,8
 4004814:	0021883a 	mov	r16,zero
 4004818:	002d883a 	mov	r22,zero
 400481c:	01400084 	movi	r5,2
 4004820:	003fcb06 	br	4004750 <__alt_data_end+0xfc004750>
 4004824:	500d883a 	mov	r6,r10
 4004828:	00800084 	movi	r2,2
 400482c:	38805926 	beq	r7,r2,4004994 <__muldf3+0x2c0>
 4004830:	008000c4 	movi	r2,3
 4004834:	3881bb26 	beq	r7,r2,4004f24 <__muldf3+0x850>
 4004838:	00800044 	movi	r2,1
 400483c:	3881961e 	bne	r7,r2,4004e98 <__muldf3+0x7c4>
 4004840:	3027883a 	mov	r19,r6
 4004844:	0005883a 	mov	r2,zero
 4004848:	0021883a 	mov	r16,zero
 400484c:	002d883a 	mov	r22,zero
 4004850:	1004953a 	slli	r2,r2,20
 4004854:	98c03fcc 	andi	r3,r19,255
 4004858:	04400434 	movhi	r17,16
 400485c:	8c7fffc4 	addi	r17,r17,-1
 4004860:	180697fa 	slli	r3,r3,31
 4004864:	8460703a 	and	r16,r16,r17
 4004868:	80a0b03a 	or	r16,r16,r2
 400486c:	80c6b03a 	or	r3,r16,r3
 4004870:	b005883a 	mov	r2,r22
 4004874:	dfc01117 	ldw	ra,68(sp)
 4004878:	df001017 	ldw	fp,64(sp)
 400487c:	ddc00f17 	ldw	r23,60(sp)
 4004880:	dd800e17 	ldw	r22,56(sp)
 4004884:	dd400d17 	ldw	r21,52(sp)
 4004888:	dd000c17 	ldw	r20,48(sp)
 400488c:	dcc00b17 	ldw	r19,44(sp)
 4004890:	dc800a17 	ldw	r18,40(sp)
 4004894:	dc400917 	ldw	r17,36(sp)
 4004898:	dc000817 	ldw	r16,32(sp)
 400489c:	dec01204 	addi	sp,sp,72
 40048a0:	f800283a 	ret
 40048a4:	2404b03a 	or	r2,r4,r16
 40048a8:	202b883a 	mov	r21,r4
 40048ac:	10004426 	beq	r2,zero,40049c0 <__muldf3+0x2ec>
 40048b0:	80015126 	beq	r16,zero,4004df8 <__muldf3+0x724>
 40048b4:	8009883a 	mov	r4,r16
 40048b8:	d9800715 	stw	r6,28(sp)
 40048bc:	d9c00215 	stw	r7,8(sp)
 40048c0:	da400415 	stw	r9,16(sp)
 40048c4:	4005cf80 	call	4005cf8 <__clzsi2>
 40048c8:	d9800717 	ldw	r6,28(sp)
 40048cc:	d9c00217 	ldw	r7,8(sp)
 40048d0:	da400417 	ldw	r9,16(sp)
 40048d4:	113ffd44 	addi	r4,r2,-11
 40048d8:	00c00704 	movi	r3,28
 40048dc:	19014216 	blt	r3,r4,4004de8 <__muldf3+0x714>
 40048e0:	00c00744 	movi	r3,29
 40048e4:	15bffe04 	addi	r22,r2,-8
 40048e8:	1907c83a 	sub	r3,r3,r4
 40048ec:	85a0983a 	sll	r16,r16,r22
 40048f0:	a8c6d83a 	srl	r3,r21,r3
 40048f4:	adac983a 	sll	r22,r21,r22
 40048f8:	1c20b03a 	or	r16,r3,r16
 40048fc:	1080fcc4 	addi	r2,r2,1011
 4004900:	00a9c83a 	sub	r20,zero,r2
 4004904:	002b883a 	mov	r21,zero
 4004908:	000b883a 	mov	r5,zero
 400490c:	003f9006 	br	4004750 <__alt_data_end+0xfc004750>
 4004910:	3446b03a 	or	r3,r6,r17
 4004914:	1800281e 	bne	r3,zero,40049b8 <__muldf3+0x2e4>
 4004918:	0023883a 	mov	r17,zero
 400491c:	0025883a 	mov	r18,zero
 4004920:	01c00084 	movi	r7,2
 4004924:	003f9c06 	br	4004798 <__alt_data_end+0xfc004798>
 4004928:	3446b03a 	or	r3,r6,r17
 400492c:	18001e26 	beq	r3,zero,40049a8 <__muldf3+0x2d4>
 4004930:	88012126 	beq	r17,zero,4004db8 <__muldf3+0x6e4>
 4004934:	8809883a 	mov	r4,r17
 4004938:	d9400215 	stw	r5,8(sp)
 400493c:	d9800715 	stw	r6,28(sp)
 4004940:	da400415 	stw	r9,16(sp)
 4004944:	da800315 	stw	r10,12(sp)
 4004948:	4005cf80 	call	4005cf8 <__clzsi2>
 400494c:	d9400217 	ldw	r5,8(sp)
 4004950:	d9800717 	ldw	r6,28(sp)
 4004954:	da400417 	ldw	r9,16(sp)
 4004958:	da800317 	ldw	r10,12(sp)
 400495c:	113ffd44 	addi	r4,r2,-11
 4004960:	00c00704 	movi	r3,28
 4004964:	19011016 	blt	r3,r4,4004da8 <__muldf3+0x6d4>
 4004968:	00c00744 	movi	r3,29
 400496c:	14bffe04 	addi	r18,r2,-8
 4004970:	1907c83a 	sub	r3,r3,r4
 4004974:	8ca2983a 	sll	r17,r17,r18
 4004978:	30c6d83a 	srl	r3,r6,r3
 400497c:	34a4983a 	sll	r18,r6,r18
 4004980:	1c62b03a 	or	r17,r3,r17
 4004984:	1080fcc4 	addi	r2,r2,1011
 4004988:	0085c83a 	sub	r2,zero,r2
 400498c:	000f883a 	mov	r7,zero
 4004990:	003f8106 	br	4004798 <__alt_data_end+0xfc004798>
 4004994:	3027883a 	mov	r19,r6
 4004998:	0081ffc4 	movi	r2,2047
 400499c:	0021883a 	mov	r16,zero
 40049a0:	002d883a 	mov	r22,zero
 40049a4:	003faa06 	br	4004850 <__alt_data_end+0xfc004850>
 40049a8:	0023883a 	mov	r17,zero
 40049ac:	0025883a 	mov	r18,zero
 40049b0:	01c00044 	movi	r7,1
 40049b4:	003f7806 	br	4004798 <__alt_data_end+0xfc004798>
 40049b8:	01c000c4 	movi	r7,3
 40049bc:	003f7606 	br	4004798 <__alt_data_end+0xfc004798>
 40049c0:	05400104 	movi	r21,4
 40049c4:	0021883a 	mov	r16,zero
 40049c8:	002d883a 	mov	r22,zero
 40049cc:	01400044 	movi	r5,1
 40049d0:	003f5f06 	br	4004750 <__alt_data_end+0xfc004750>
 40049d4:	05400304 	movi	r21,12
 40049d8:	014000c4 	movi	r5,3
 40049dc:	003f5c06 	br	4004750 <__alt_data_end+0xfc004750>
 40049e0:	04000434 	movhi	r16,16
 40049e4:	0027883a 	mov	r19,zero
 40049e8:	843fffc4 	addi	r16,r16,-1
 40049ec:	05bfffc4 	movi	r22,-1
 40049f0:	0081ffc4 	movi	r2,2047
 40049f4:	003f9606 	br	4004850 <__alt_data_end+0xfc004850>
 40049f8:	8023883a 	mov	r17,r16
 40049fc:	b025883a 	mov	r18,r22
 4004a00:	280f883a 	mov	r7,r5
 4004a04:	003f8806 	br	4004828 <__alt_data_end+0xfc004828>
 4004a08:	8023883a 	mov	r17,r16
 4004a0c:	b025883a 	mov	r18,r22
 4004a10:	480d883a 	mov	r6,r9
 4004a14:	280f883a 	mov	r7,r5
 4004a18:	003f8306 	br	4004828 <__alt_data_end+0xfc004828>
 4004a1c:	b026d43a 	srli	r19,r22,16
 4004a20:	902ed43a 	srli	r23,r18,16
 4004a24:	b5bfffcc 	andi	r22,r22,65535
 4004a28:	94bfffcc 	andi	r18,r18,65535
 4004a2c:	b00b883a 	mov	r5,r22
 4004a30:	9009883a 	mov	r4,r18
 4004a34:	d8c00515 	stw	r3,20(sp)
 4004a38:	d9800715 	stw	r6,28(sp)
 4004a3c:	da000615 	stw	r8,24(sp)
 4004a40:	4001d9c0 	call	4001d9c <__mulsi3>
 4004a44:	980b883a 	mov	r5,r19
 4004a48:	9009883a 	mov	r4,r18
 4004a4c:	1029883a 	mov	r20,r2
 4004a50:	4001d9c0 	call	4001d9c <__mulsi3>
 4004a54:	b80b883a 	mov	r5,r23
 4004a58:	9809883a 	mov	r4,r19
 4004a5c:	102b883a 	mov	r21,r2
 4004a60:	4001d9c0 	call	4001d9c <__mulsi3>
 4004a64:	b809883a 	mov	r4,r23
 4004a68:	b00b883a 	mov	r5,r22
 4004a6c:	1039883a 	mov	fp,r2
 4004a70:	4001d9c0 	call	4001d9c <__mulsi3>
 4004a74:	a008d43a 	srli	r4,r20,16
 4004a78:	1545883a 	add	r2,r2,r21
 4004a7c:	d8c00517 	ldw	r3,20(sp)
 4004a80:	2085883a 	add	r2,r4,r2
 4004a84:	d9800717 	ldw	r6,28(sp)
 4004a88:	da000617 	ldw	r8,24(sp)
 4004a8c:	1540022e 	bgeu	r2,r21,4004a98 <__muldf3+0x3c4>
 4004a90:	01000074 	movhi	r4,1
 4004a94:	e139883a 	add	fp,fp,r4
 4004a98:	100e943a 	slli	r7,r2,16
 4004a9c:	1004d43a 	srli	r2,r2,16
 4004aa0:	882ad43a 	srli	r21,r17,16
 4004aa4:	a53fffcc 	andi	r20,r20,65535
 4004aa8:	8c7fffcc 	andi	r17,r17,65535
 4004aac:	3d29883a 	add	r20,r7,r20
 4004ab0:	b00b883a 	mov	r5,r22
 4004ab4:	8809883a 	mov	r4,r17
 4004ab8:	d8c00515 	stw	r3,20(sp)
 4004abc:	d9800715 	stw	r6,28(sp)
 4004ac0:	da000615 	stw	r8,24(sp)
 4004ac4:	dd000115 	stw	r20,4(sp)
 4004ac8:	d8800015 	stw	r2,0(sp)
 4004acc:	4001d9c0 	call	4001d9c <__mulsi3>
 4004ad0:	980b883a 	mov	r5,r19
 4004ad4:	8809883a 	mov	r4,r17
 4004ad8:	d8800215 	stw	r2,8(sp)
 4004adc:	4001d9c0 	call	4001d9c <__mulsi3>
 4004ae0:	9809883a 	mov	r4,r19
 4004ae4:	a80b883a 	mov	r5,r21
 4004ae8:	1029883a 	mov	r20,r2
 4004aec:	4001d9c0 	call	4001d9c <__mulsi3>
 4004af0:	b00b883a 	mov	r5,r22
 4004af4:	a809883a 	mov	r4,r21
 4004af8:	d8800415 	stw	r2,16(sp)
 4004afc:	4001d9c0 	call	4001d9c <__mulsi3>
 4004b00:	d9c00217 	ldw	r7,8(sp)
 4004b04:	1505883a 	add	r2,r2,r20
 4004b08:	d8c00517 	ldw	r3,20(sp)
 4004b0c:	3826d43a 	srli	r19,r7,16
 4004b10:	d9800717 	ldw	r6,28(sp)
 4004b14:	da000617 	ldw	r8,24(sp)
 4004b18:	9885883a 	add	r2,r19,r2
 4004b1c:	da400417 	ldw	r9,16(sp)
 4004b20:	1500022e 	bgeu	r2,r20,4004b2c <__muldf3+0x458>
 4004b24:	01000074 	movhi	r4,1
 4004b28:	4913883a 	add	r9,r9,r4
 4004b2c:	1028d43a 	srli	r20,r2,16
 4004b30:	1004943a 	slli	r2,r2,16
 4004b34:	802cd43a 	srli	r22,r16,16
 4004b38:	843fffcc 	andi	r16,r16,65535
 4004b3c:	3cffffcc 	andi	r19,r7,65535
 4004b40:	9009883a 	mov	r4,r18
 4004b44:	800b883a 	mov	r5,r16
 4004b48:	a269883a 	add	r20,r20,r9
 4004b4c:	d8c00515 	stw	r3,20(sp)
 4004b50:	d9800715 	stw	r6,28(sp)
 4004b54:	da000615 	stw	r8,24(sp)
 4004b58:	14e7883a 	add	r19,r2,r19
 4004b5c:	4001d9c0 	call	4001d9c <__mulsi3>
 4004b60:	9009883a 	mov	r4,r18
 4004b64:	b00b883a 	mov	r5,r22
 4004b68:	d8800315 	stw	r2,12(sp)
 4004b6c:	4001d9c0 	call	4001d9c <__mulsi3>
 4004b70:	b809883a 	mov	r4,r23
 4004b74:	b00b883a 	mov	r5,r22
 4004b78:	d8800215 	stw	r2,8(sp)
 4004b7c:	4001d9c0 	call	4001d9c <__mulsi3>
 4004b80:	b80b883a 	mov	r5,r23
 4004b84:	8009883a 	mov	r4,r16
 4004b88:	d8800415 	stw	r2,16(sp)
 4004b8c:	4001d9c0 	call	4001d9c <__mulsi3>
 4004b90:	da800317 	ldw	r10,12(sp)
 4004b94:	d9c00217 	ldw	r7,8(sp)
 4004b98:	d9000017 	ldw	r4,0(sp)
 4004b9c:	502ed43a 	srli	r23,r10,16
 4004ba0:	11c5883a 	add	r2,r2,r7
 4004ba4:	24e5883a 	add	r18,r4,r19
 4004ba8:	b885883a 	add	r2,r23,r2
 4004bac:	d8c00517 	ldw	r3,20(sp)
 4004bb0:	d9800717 	ldw	r6,28(sp)
 4004bb4:	da000617 	ldw	r8,24(sp)
 4004bb8:	da400417 	ldw	r9,16(sp)
 4004bbc:	11c0022e 	bgeu	r2,r7,4004bc8 <__muldf3+0x4f4>
 4004bc0:	01000074 	movhi	r4,1
 4004bc4:	4913883a 	add	r9,r9,r4
 4004bc8:	100ed43a 	srli	r7,r2,16
 4004bcc:	1004943a 	slli	r2,r2,16
 4004bd0:	55ffffcc 	andi	r23,r10,65535
 4004bd4:	3a53883a 	add	r9,r7,r9
 4004bd8:	8809883a 	mov	r4,r17
 4004bdc:	800b883a 	mov	r5,r16
 4004be0:	d8c00515 	stw	r3,20(sp)
 4004be4:	d9800715 	stw	r6,28(sp)
 4004be8:	da000615 	stw	r8,24(sp)
 4004bec:	da400415 	stw	r9,16(sp)
 4004bf0:	15ef883a 	add	r23,r2,r23
 4004bf4:	4001d9c0 	call	4001d9c <__mulsi3>
 4004bf8:	8809883a 	mov	r4,r17
 4004bfc:	b00b883a 	mov	r5,r22
 4004c00:	d8800215 	stw	r2,8(sp)
 4004c04:	4001d9c0 	call	4001d9c <__mulsi3>
 4004c08:	b00b883a 	mov	r5,r22
 4004c0c:	a809883a 	mov	r4,r21
 4004c10:	d8800315 	stw	r2,12(sp)
 4004c14:	4001d9c0 	call	4001d9c <__mulsi3>
 4004c18:	8009883a 	mov	r4,r16
 4004c1c:	a80b883a 	mov	r5,r21
 4004c20:	1023883a 	mov	r17,r2
 4004c24:	4001d9c0 	call	4001d9c <__mulsi3>
 4004c28:	d9c00217 	ldw	r7,8(sp)
 4004c2c:	da800317 	ldw	r10,12(sp)
 4004c30:	d8c00517 	ldw	r3,20(sp)
 4004c34:	3808d43a 	srli	r4,r7,16
 4004c38:	1285883a 	add	r2,r2,r10
 4004c3c:	d9800717 	ldw	r6,28(sp)
 4004c40:	2085883a 	add	r2,r4,r2
 4004c44:	da000617 	ldw	r8,24(sp)
 4004c48:	da400417 	ldw	r9,16(sp)
 4004c4c:	1280022e 	bgeu	r2,r10,4004c58 <__muldf3+0x584>
 4004c50:	01000074 	movhi	r4,1
 4004c54:	8923883a 	add	r17,r17,r4
 4004c58:	1008943a 	slli	r4,r2,16
 4004c5c:	39ffffcc 	andi	r7,r7,65535
 4004c60:	e4b9883a 	add	fp,fp,r18
 4004c64:	21cf883a 	add	r7,r4,r7
 4004c68:	e4e7803a 	cmpltu	r19,fp,r19
 4004c6c:	3d0f883a 	add	r7,r7,r20
 4004c70:	bf39883a 	add	fp,r23,fp
 4004c74:	99c9883a 	add	r4,r19,r7
 4004c78:	e5ef803a 	cmpltu	r23,fp,r23
 4004c7c:	490b883a 	add	r5,r9,r4
 4004c80:	1004d43a 	srli	r2,r2,16
 4004c84:	b965883a 	add	r18,r23,r5
 4004c88:	24c9803a 	cmpltu	r4,r4,r19
 4004c8c:	3d29803a 	cmpltu	r20,r7,r20
 4004c90:	a128b03a 	or	r20,r20,r4
 4004c94:	95ef803a 	cmpltu	r23,r18,r23
 4004c98:	2a53803a 	cmpltu	r9,r5,r9
 4004c9c:	a0a9883a 	add	r20,r20,r2
 4004ca0:	4deeb03a 	or	r23,r9,r23
 4004ca4:	a5ef883a 	add	r23,r20,r23
 4004ca8:	bc63883a 	add	r17,r23,r17
 4004cac:	e004927a 	slli	r2,fp,9
 4004cb0:	d9000117 	ldw	r4,4(sp)
 4004cb4:	882e927a 	slli	r23,r17,9
 4004cb8:	9022d5fa 	srli	r17,r18,23
 4004cbc:	e038d5fa 	srli	fp,fp,23
 4004cc0:	1104b03a 	or	r2,r2,r4
 4004cc4:	9024927a 	slli	r18,r18,9
 4004cc8:	1004c03a 	cmpne	r2,r2,zero
 4004ccc:	bc62b03a 	or	r17,r23,r17
 4004cd0:	1738b03a 	or	fp,r2,fp
 4004cd4:	8880402c 	andhi	r2,r17,256
 4004cd8:	e4a4b03a 	or	r18,fp,r18
 4004cdc:	10000726 	beq	r2,zero,4004cfc <__muldf3+0x628>
 4004ce0:	9006d07a 	srli	r3,r18,1
 4004ce4:	880497fa 	slli	r2,r17,31
 4004ce8:	9480004c 	andi	r18,r18,1
 4004cec:	8822d07a 	srli	r17,r17,1
 4004cf0:	1ca4b03a 	or	r18,r3,r18
 4004cf4:	14a4b03a 	or	r18,r2,r18
 4004cf8:	4007883a 	mov	r3,r8
 4004cfc:	1880ffc4 	addi	r2,r3,1023
 4004d00:	0080460e 	bge	zero,r2,4004e1c <__muldf3+0x748>
 4004d04:	910001cc 	andi	r4,r18,7
 4004d08:	20000726 	beq	r4,zero,4004d28 <__muldf3+0x654>
 4004d0c:	910003cc 	andi	r4,r18,15
 4004d10:	01400104 	movi	r5,4
 4004d14:	21400426 	beq	r4,r5,4004d28 <__muldf3+0x654>
 4004d18:	9149883a 	add	r4,r18,r5
 4004d1c:	24a5803a 	cmpltu	r18,r4,r18
 4004d20:	8ca3883a 	add	r17,r17,r18
 4004d24:	2025883a 	mov	r18,r4
 4004d28:	8900402c 	andhi	r4,r17,256
 4004d2c:	20000426 	beq	r4,zero,4004d40 <__muldf3+0x66c>
 4004d30:	18810004 	addi	r2,r3,1024
 4004d34:	00ffc034 	movhi	r3,65280
 4004d38:	18ffffc4 	addi	r3,r3,-1
 4004d3c:	88e2703a 	and	r17,r17,r3
 4004d40:	00c1ff84 	movi	r3,2046
 4004d44:	18bf1316 	blt	r3,r2,4004994 <__alt_data_end+0xfc004994>
 4004d48:	882c977a 	slli	r22,r17,29
 4004d4c:	9024d0fa 	srli	r18,r18,3
 4004d50:	8822927a 	slli	r17,r17,9
 4004d54:	1081ffcc 	andi	r2,r2,2047
 4004d58:	b4acb03a 	or	r22,r22,r18
 4004d5c:	8820d33a 	srli	r16,r17,12
 4004d60:	3027883a 	mov	r19,r6
 4004d64:	003eba06 	br	4004850 <__alt_data_end+0xfc004850>
 4004d68:	8080022c 	andhi	r2,r16,8
 4004d6c:	10000926 	beq	r2,zero,4004d94 <__muldf3+0x6c0>
 4004d70:	8880022c 	andhi	r2,r17,8
 4004d74:	1000071e 	bne	r2,zero,4004d94 <__muldf3+0x6c0>
 4004d78:	00800434 	movhi	r2,16
 4004d7c:	8c000234 	orhi	r16,r17,8
 4004d80:	10bfffc4 	addi	r2,r2,-1
 4004d84:	e027883a 	mov	r19,fp
 4004d88:	80a0703a 	and	r16,r16,r2
 4004d8c:	902d883a 	mov	r22,r18
 4004d90:	003f1706 	br	40049f0 <__alt_data_end+0xfc0049f0>
 4004d94:	00800434 	movhi	r2,16
 4004d98:	84000234 	orhi	r16,r16,8
 4004d9c:	10bfffc4 	addi	r2,r2,-1
 4004da0:	80a0703a 	and	r16,r16,r2
 4004da4:	003f1206 	br	40049f0 <__alt_data_end+0xfc0049f0>
 4004da8:	147ff604 	addi	r17,r2,-40
 4004dac:	3462983a 	sll	r17,r6,r17
 4004db0:	0025883a 	mov	r18,zero
 4004db4:	003ef306 	br	4004984 <__alt_data_end+0xfc004984>
 4004db8:	3009883a 	mov	r4,r6
 4004dbc:	d9400215 	stw	r5,8(sp)
 4004dc0:	d9800715 	stw	r6,28(sp)
 4004dc4:	da400415 	stw	r9,16(sp)
 4004dc8:	da800315 	stw	r10,12(sp)
 4004dcc:	4005cf80 	call	4005cf8 <__clzsi2>
 4004dd0:	10800804 	addi	r2,r2,32
 4004dd4:	da800317 	ldw	r10,12(sp)
 4004dd8:	da400417 	ldw	r9,16(sp)
 4004ddc:	d9800717 	ldw	r6,28(sp)
 4004de0:	d9400217 	ldw	r5,8(sp)
 4004de4:	003edd06 	br	400495c <__alt_data_end+0xfc00495c>
 4004de8:	143ff604 	addi	r16,r2,-40
 4004dec:	ac20983a 	sll	r16,r21,r16
 4004df0:	002d883a 	mov	r22,zero
 4004df4:	003ec106 	br	40048fc <__alt_data_end+0xfc0048fc>
 4004df8:	d9800715 	stw	r6,28(sp)
 4004dfc:	d9c00215 	stw	r7,8(sp)
 4004e00:	da400415 	stw	r9,16(sp)
 4004e04:	4005cf80 	call	4005cf8 <__clzsi2>
 4004e08:	10800804 	addi	r2,r2,32
 4004e0c:	da400417 	ldw	r9,16(sp)
 4004e10:	d9c00217 	ldw	r7,8(sp)
 4004e14:	d9800717 	ldw	r6,28(sp)
 4004e18:	003eae06 	br	40048d4 <__alt_data_end+0xfc0048d4>
 4004e1c:	00c00044 	movi	r3,1
 4004e20:	1887c83a 	sub	r3,r3,r2
 4004e24:	01000e04 	movi	r4,56
 4004e28:	20fe8516 	blt	r4,r3,4004840 <__alt_data_end+0xfc004840>
 4004e2c:	010007c4 	movi	r4,31
 4004e30:	20c01b16 	blt	r4,r3,4004ea0 <__muldf3+0x7cc>
 4004e34:	00800804 	movi	r2,32
 4004e38:	10c5c83a 	sub	r2,r2,r3
 4004e3c:	888a983a 	sll	r5,r17,r2
 4004e40:	90c8d83a 	srl	r4,r18,r3
 4004e44:	9084983a 	sll	r2,r18,r2
 4004e48:	88e2d83a 	srl	r17,r17,r3
 4004e4c:	2906b03a 	or	r3,r5,r4
 4004e50:	1004c03a 	cmpne	r2,r2,zero
 4004e54:	1886b03a 	or	r3,r3,r2
 4004e58:	188001cc 	andi	r2,r3,7
 4004e5c:	10000726 	beq	r2,zero,4004e7c <__muldf3+0x7a8>
 4004e60:	188003cc 	andi	r2,r3,15
 4004e64:	01000104 	movi	r4,4
 4004e68:	11000426 	beq	r2,r4,4004e7c <__muldf3+0x7a8>
 4004e6c:	1805883a 	mov	r2,r3
 4004e70:	10c00104 	addi	r3,r2,4
 4004e74:	1885803a 	cmpltu	r2,r3,r2
 4004e78:	88a3883a 	add	r17,r17,r2
 4004e7c:	8880202c 	andhi	r2,r17,128
 4004e80:	10001c26 	beq	r2,zero,4004ef4 <__muldf3+0x820>
 4004e84:	3027883a 	mov	r19,r6
 4004e88:	00800044 	movi	r2,1
 4004e8c:	0021883a 	mov	r16,zero
 4004e90:	002d883a 	mov	r22,zero
 4004e94:	003e6e06 	br	4004850 <__alt_data_end+0xfc004850>
 4004e98:	4007883a 	mov	r3,r8
 4004e9c:	003f9706 	br	4004cfc <__alt_data_end+0xfc004cfc>
 4004ea0:	017ff844 	movi	r5,-31
 4004ea4:	2885c83a 	sub	r2,r5,r2
 4004ea8:	888ad83a 	srl	r5,r17,r2
 4004eac:	00800804 	movi	r2,32
 4004eb0:	18801a26 	beq	r3,r2,4004f1c <__muldf3+0x848>
 4004eb4:	01001004 	movi	r4,64
 4004eb8:	20c7c83a 	sub	r3,r4,r3
 4004ebc:	88e2983a 	sll	r17,r17,r3
 4004ec0:	8ca4b03a 	or	r18,r17,r18
 4004ec4:	9004c03a 	cmpne	r2,r18,zero
 4004ec8:	2884b03a 	or	r2,r5,r2
 4004ecc:	144001cc 	andi	r17,r2,7
 4004ed0:	88000d1e 	bne	r17,zero,4004f08 <__muldf3+0x834>
 4004ed4:	0021883a 	mov	r16,zero
 4004ed8:	102cd0fa 	srli	r22,r2,3
 4004edc:	3027883a 	mov	r19,r6
 4004ee0:	0005883a 	mov	r2,zero
 4004ee4:	b46cb03a 	or	r22,r22,r17
 4004ee8:	003e5906 	br	4004850 <__alt_data_end+0xfc004850>
 4004eec:	1007883a 	mov	r3,r2
 4004ef0:	0023883a 	mov	r17,zero
 4004ef4:	8820927a 	slli	r16,r17,9
 4004ef8:	1805883a 	mov	r2,r3
 4004efc:	8822977a 	slli	r17,r17,29
 4004f00:	8020d33a 	srli	r16,r16,12
 4004f04:	003ff406 	br	4004ed8 <__alt_data_end+0xfc004ed8>
 4004f08:	10c003cc 	andi	r3,r2,15
 4004f0c:	01000104 	movi	r4,4
 4004f10:	193ff626 	beq	r3,r4,4004eec <__alt_data_end+0xfc004eec>
 4004f14:	0023883a 	mov	r17,zero
 4004f18:	003fd506 	br	4004e70 <__alt_data_end+0xfc004e70>
 4004f1c:	0023883a 	mov	r17,zero
 4004f20:	003fe706 	br	4004ec0 <__alt_data_end+0xfc004ec0>
 4004f24:	00800434 	movhi	r2,16
 4004f28:	8c000234 	orhi	r16,r17,8
 4004f2c:	10bfffc4 	addi	r2,r2,-1
 4004f30:	3027883a 	mov	r19,r6
 4004f34:	80a0703a 	and	r16,r16,r2
 4004f38:	902d883a 	mov	r22,r18
 4004f3c:	003eac06 	br	40049f0 <__alt_data_end+0xfc0049f0>

04004f40 <__subdf3>:
 4004f40:	02000434 	movhi	r8,16
 4004f44:	423fffc4 	addi	r8,r8,-1
 4004f48:	defffb04 	addi	sp,sp,-20
 4004f4c:	2a14703a 	and	r10,r5,r8
 4004f50:	3812d53a 	srli	r9,r7,20
 4004f54:	3a10703a 	and	r8,r7,r8
 4004f58:	2006d77a 	srli	r3,r4,29
 4004f5c:	3004d77a 	srli	r2,r6,29
 4004f60:	dc000015 	stw	r16,0(sp)
 4004f64:	501490fa 	slli	r10,r10,3
 4004f68:	2820d53a 	srli	r16,r5,20
 4004f6c:	401090fa 	slli	r8,r8,3
 4004f70:	dc800215 	stw	r18,8(sp)
 4004f74:	dc400115 	stw	r17,4(sp)
 4004f78:	dfc00415 	stw	ra,16(sp)
 4004f7c:	202290fa 	slli	r17,r4,3
 4004f80:	dcc00315 	stw	r19,12(sp)
 4004f84:	4a41ffcc 	andi	r9,r9,2047
 4004f88:	0101ffc4 	movi	r4,2047
 4004f8c:	2824d7fa 	srli	r18,r5,31
 4004f90:	8401ffcc 	andi	r16,r16,2047
 4004f94:	50c6b03a 	or	r3,r10,r3
 4004f98:	380ed7fa 	srli	r7,r7,31
 4004f9c:	408ab03a 	or	r5,r8,r2
 4004fa0:	300c90fa 	slli	r6,r6,3
 4004fa4:	49009626 	beq	r9,r4,4005200 <__subdf3+0x2c0>
 4004fa8:	39c0005c 	xori	r7,r7,1
 4004fac:	8245c83a 	sub	r2,r16,r9
 4004fb0:	3c807426 	beq	r7,r18,4005184 <__subdf3+0x244>
 4004fb4:	0080af0e 	bge	zero,r2,4005274 <__subdf3+0x334>
 4004fb8:	48002a1e 	bne	r9,zero,4005064 <__subdf3+0x124>
 4004fbc:	2988b03a 	or	r4,r5,r6
 4004fc0:	20009a1e 	bne	r4,zero,400522c <__subdf3+0x2ec>
 4004fc4:	888001cc 	andi	r2,r17,7
 4004fc8:	10000726 	beq	r2,zero,4004fe8 <__subdf3+0xa8>
 4004fcc:	888003cc 	andi	r2,r17,15
 4004fd0:	01000104 	movi	r4,4
 4004fd4:	11000426 	beq	r2,r4,4004fe8 <__subdf3+0xa8>
 4004fd8:	890b883a 	add	r5,r17,r4
 4004fdc:	2c63803a 	cmpltu	r17,r5,r17
 4004fe0:	1c47883a 	add	r3,r3,r17
 4004fe4:	2823883a 	mov	r17,r5
 4004fe8:	1880202c 	andhi	r2,r3,128
 4004fec:	10005926 	beq	r2,zero,4005154 <__subdf3+0x214>
 4004ff0:	84000044 	addi	r16,r16,1
 4004ff4:	0081ffc4 	movi	r2,2047
 4004ff8:	8080be26 	beq	r16,r2,40052f4 <__subdf3+0x3b4>
 4004ffc:	017fe034 	movhi	r5,65408
 4005000:	297fffc4 	addi	r5,r5,-1
 4005004:	1946703a 	and	r3,r3,r5
 4005008:	1804977a 	slli	r2,r3,29
 400500c:	1806927a 	slli	r3,r3,9
 4005010:	8822d0fa 	srli	r17,r17,3
 4005014:	8401ffcc 	andi	r16,r16,2047
 4005018:	180ad33a 	srli	r5,r3,12
 400501c:	9100004c 	andi	r4,r18,1
 4005020:	1444b03a 	or	r2,r2,r17
 4005024:	80c1ffcc 	andi	r3,r16,2047
 4005028:	1820953a 	slli	r16,r3,20
 400502c:	20c03fcc 	andi	r3,r4,255
 4005030:	180897fa 	slli	r4,r3,31
 4005034:	00c00434 	movhi	r3,16
 4005038:	18ffffc4 	addi	r3,r3,-1
 400503c:	28c6703a 	and	r3,r5,r3
 4005040:	1c06b03a 	or	r3,r3,r16
 4005044:	1906b03a 	or	r3,r3,r4
 4005048:	dfc00417 	ldw	ra,16(sp)
 400504c:	dcc00317 	ldw	r19,12(sp)
 4005050:	dc800217 	ldw	r18,8(sp)
 4005054:	dc400117 	ldw	r17,4(sp)
 4005058:	dc000017 	ldw	r16,0(sp)
 400505c:	dec00504 	addi	sp,sp,20
 4005060:	f800283a 	ret
 4005064:	0101ffc4 	movi	r4,2047
 4005068:	813fd626 	beq	r16,r4,4004fc4 <__alt_data_end+0xfc004fc4>
 400506c:	29402034 	orhi	r5,r5,128
 4005070:	01000e04 	movi	r4,56
 4005074:	2080a316 	blt	r4,r2,4005304 <__subdf3+0x3c4>
 4005078:	010007c4 	movi	r4,31
 400507c:	2080c616 	blt	r4,r2,4005398 <__subdf3+0x458>
 4005080:	01000804 	movi	r4,32
 4005084:	2089c83a 	sub	r4,r4,r2
 4005088:	2910983a 	sll	r8,r5,r4
 400508c:	308ed83a 	srl	r7,r6,r2
 4005090:	3108983a 	sll	r4,r6,r4
 4005094:	2884d83a 	srl	r2,r5,r2
 4005098:	41ccb03a 	or	r6,r8,r7
 400509c:	2008c03a 	cmpne	r4,r4,zero
 40050a0:	310cb03a 	or	r6,r6,r4
 40050a4:	898dc83a 	sub	r6,r17,r6
 40050a8:	89a3803a 	cmpltu	r17,r17,r6
 40050ac:	1887c83a 	sub	r3,r3,r2
 40050b0:	1c47c83a 	sub	r3,r3,r17
 40050b4:	3023883a 	mov	r17,r6
 40050b8:	1880202c 	andhi	r2,r3,128
 40050bc:	10002326 	beq	r2,zero,400514c <__subdf3+0x20c>
 40050c0:	04c02034 	movhi	r19,128
 40050c4:	9cffffc4 	addi	r19,r19,-1
 40050c8:	1ce6703a 	and	r19,r3,r19
 40050cc:	98007a26 	beq	r19,zero,40052b8 <__subdf3+0x378>
 40050d0:	9809883a 	mov	r4,r19
 40050d4:	4005cf80 	call	4005cf8 <__clzsi2>
 40050d8:	113ffe04 	addi	r4,r2,-8
 40050dc:	00c007c4 	movi	r3,31
 40050e0:	19007b16 	blt	r3,r4,40052d0 <__subdf3+0x390>
 40050e4:	00800804 	movi	r2,32
 40050e8:	1105c83a 	sub	r2,r2,r4
 40050ec:	8884d83a 	srl	r2,r17,r2
 40050f0:	9906983a 	sll	r3,r19,r4
 40050f4:	8922983a 	sll	r17,r17,r4
 40050f8:	10c4b03a 	or	r2,r2,r3
 40050fc:	24007816 	blt	r4,r16,40052e0 <__subdf3+0x3a0>
 4005100:	2421c83a 	sub	r16,r4,r16
 4005104:	80c00044 	addi	r3,r16,1
 4005108:	010007c4 	movi	r4,31
 400510c:	20c09516 	blt	r4,r3,4005364 <__subdf3+0x424>
 4005110:	01400804 	movi	r5,32
 4005114:	28cbc83a 	sub	r5,r5,r3
 4005118:	88c8d83a 	srl	r4,r17,r3
 400511c:	8962983a 	sll	r17,r17,r5
 4005120:	114a983a 	sll	r5,r2,r5
 4005124:	10c6d83a 	srl	r3,r2,r3
 4005128:	8804c03a 	cmpne	r2,r17,zero
 400512c:	290ab03a 	or	r5,r5,r4
 4005130:	28a2b03a 	or	r17,r5,r2
 4005134:	0021883a 	mov	r16,zero
 4005138:	003fa206 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 400513c:	2090b03a 	or	r8,r4,r2
 4005140:	40018e26 	beq	r8,zero,400577c <__subdf3+0x83c>
 4005144:	1007883a 	mov	r3,r2
 4005148:	2023883a 	mov	r17,r4
 400514c:	888001cc 	andi	r2,r17,7
 4005150:	103f9e1e 	bne	r2,zero,4004fcc <__alt_data_end+0xfc004fcc>
 4005154:	1804977a 	slli	r2,r3,29
 4005158:	8822d0fa 	srli	r17,r17,3
 400515c:	1810d0fa 	srli	r8,r3,3
 4005160:	9100004c 	andi	r4,r18,1
 4005164:	1444b03a 	or	r2,r2,r17
 4005168:	00c1ffc4 	movi	r3,2047
 400516c:	80c02826 	beq	r16,r3,4005210 <__subdf3+0x2d0>
 4005170:	01400434 	movhi	r5,16
 4005174:	297fffc4 	addi	r5,r5,-1
 4005178:	80e0703a 	and	r16,r16,r3
 400517c:	414a703a 	and	r5,r8,r5
 4005180:	003fa806 	br	4005024 <__alt_data_end+0xfc005024>
 4005184:	0080630e 	bge	zero,r2,4005314 <__subdf3+0x3d4>
 4005188:	48003026 	beq	r9,zero,400524c <__subdf3+0x30c>
 400518c:	0101ffc4 	movi	r4,2047
 4005190:	813f8c26 	beq	r16,r4,4004fc4 <__alt_data_end+0xfc004fc4>
 4005194:	29402034 	orhi	r5,r5,128
 4005198:	01000e04 	movi	r4,56
 400519c:	2080a90e 	bge	r4,r2,4005444 <__subdf3+0x504>
 40051a0:	298cb03a 	or	r6,r5,r6
 40051a4:	3012c03a 	cmpne	r9,r6,zero
 40051a8:	0005883a 	mov	r2,zero
 40051ac:	4c53883a 	add	r9,r9,r17
 40051b0:	4c63803a 	cmpltu	r17,r9,r17
 40051b4:	10c7883a 	add	r3,r2,r3
 40051b8:	88c7883a 	add	r3,r17,r3
 40051bc:	4823883a 	mov	r17,r9
 40051c0:	1880202c 	andhi	r2,r3,128
 40051c4:	1000d026 	beq	r2,zero,4005508 <__subdf3+0x5c8>
 40051c8:	84000044 	addi	r16,r16,1
 40051cc:	0081ffc4 	movi	r2,2047
 40051d0:	8080fe26 	beq	r16,r2,40055cc <__subdf3+0x68c>
 40051d4:	00bfe034 	movhi	r2,65408
 40051d8:	10bfffc4 	addi	r2,r2,-1
 40051dc:	1886703a 	and	r3,r3,r2
 40051e0:	880ad07a 	srli	r5,r17,1
 40051e4:	180497fa 	slli	r2,r3,31
 40051e8:	8900004c 	andi	r4,r17,1
 40051ec:	2922b03a 	or	r17,r5,r4
 40051f0:	1806d07a 	srli	r3,r3,1
 40051f4:	1462b03a 	or	r17,r2,r17
 40051f8:	3825883a 	mov	r18,r7
 40051fc:	003f7106 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 4005200:	2984b03a 	or	r2,r5,r6
 4005204:	103f6826 	beq	r2,zero,4004fa8 <__alt_data_end+0xfc004fa8>
 4005208:	39c03fcc 	andi	r7,r7,255
 400520c:	003f6706 	br	4004fac <__alt_data_end+0xfc004fac>
 4005210:	4086b03a 	or	r3,r8,r2
 4005214:	18015226 	beq	r3,zero,4005760 <__subdf3+0x820>
 4005218:	00c00434 	movhi	r3,16
 400521c:	41400234 	orhi	r5,r8,8
 4005220:	18ffffc4 	addi	r3,r3,-1
 4005224:	28ca703a 	and	r5,r5,r3
 4005228:	003f7e06 	br	4005024 <__alt_data_end+0xfc005024>
 400522c:	10bfffc4 	addi	r2,r2,-1
 4005230:	1000491e 	bne	r2,zero,4005358 <__subdf3+0x418>
 4005234:	898fc83a 	sub	r7,r17,r6
 4005238:	89e3803a 	cmpltu	r17,r17,r7
 400523c:	1947c83a 	sub	r3,r3,r5
 4005240:	1c47c83a 	sub	r3,r3,r17
 4005244:	3823883a 	mov	r17,r7
 4005248:	003f9b06 	br	40050b8 <__alt_data_end+0xfc0050b8>
 400524c:	2988b03a 	or	r4,r5,r6
 4005250:	203f5c26 	beq	r4,zero,4004fc4 <__alt_data_end+0xfc004fc4>
 4005254:	10bfffc4 	addi	r2,r2,-1
 4005258:	1000931e 	bne	r2,zero,40054a8 <__subdf3+0x568>
 400525c:	898d883a 	add	r6,r17,r6
 4005260:	3463803a 	cmpltu	r17,r6,r17
 4005264:	1947883a 	add	r3,r3,r5
 4005268:	88c7883a 	add	r3,r17,r3
 400526c:	3023883a 	mov	r17,r6
 4005270:	003fd306 	br	40051c0 <__alt_data_end+0xfc0051c0>
 4005274:	1000541e 	bne	r2,zero,40053c8 <__subdf3+0x488>
 4005278:	80800044 	addi	r2,r16,1
 400527c:	1081ffcc 	andi	r2,r2,2047
 4005280:	01000044 	movi	r4,1
 4005284:	2080a20e 	bge	r4,r2,4005510 <__subdf3+0x5d0>
 4005288:	8989c83a 	sub	r4,r17,r6
 400528c:	8905803a 	cmpltu	r2,r17,r4
 4005290:	1967c83a 	sub	r19,r3,r5
 4005294:	98a7c83a 	sub	r19,r19,r2
 4005298:	9880202c 	andhi	r2,r19,128
 400529c:	10006326 	beq	r2,zero,400542c <__subdf3+0x4ec>
 40052a0:	3463c83a 	sub	r17,r6,r17
 40052a4:	28c7c83a 	sub	r3,r5,r3
 40052a8:	344d803a 	cmpltu	r6,r6,r17
 40052ac:	19a7c83a 	sub	r19,r3,r6
 40052b0:	3825883a 	mov	r18,r7
 40052b4:	983f861e 	bne	r19,zero,40050d0 <__alt_data_end+0xfc0050d0>
 40052b8:	8809883a 	mov	r4,r17
 40052bc:	4005cf80 	call	4005cf8 <__clzsi2>
 40052c0:	10800804 	addi	r2,r2,32
 40052c4:	113ffe04 	addi	r4,r2,-8
 40052c8:	00c007c4 	movi	r3,31
 40052cc:	193f850e 	bge	r3,r4,40050e4 <__alt_data_end+0xfc0050e4>
 40052d0:	10bff604 	addi	r2,r2,-40
 40052d4:	8884983a 	sll	r2,r17,r2
 40052d8:	0023883a 	mov	r17,zero
 40052dc:	243f880e 	bge	r4,r16,4005100 <__alt_data_end+0xfc005100>
 40052e0:	00ffe034 	movhi	r3,65408
 40052e4:	18ffffc4 	addi	r3,r3,-1
 40052e8:	8121c83a 	sub	r16,r16,r4
 40052ec:	10c6703a 	and	r3,r2,r3
 40052f0:	003f3406 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 40052f4:	9100004c 	andi	r4,r18,1
 40052f8:	000b883a 	mov	r5,zero
 40052fc:	0005883a 	mov	r2,zero
 4005300:	003f4806 	br	4005024 <__alt_data_end+0xfc005024>
 4005304:	298cb03a 	or	r6,r5,r6
 4005308:	300cc03a 	cmpne	r6,r6,zero
 400530c:	0005883a 	mov	r2,zero
 4005310:	003f6406 	br	40050a4 <__alt_data_end+0xfc0050a4>
 4005314:	10009a1e 	bne	r2,zero,4005580 <__subdf3+0x640>
 4005318:	82400044 	addi	r9,r16,1
 400531c:	4881ffcc 	andi	r2,r9,2047
 4005320:	02800044 	movi	r10,1
 4005324:	5080670e 	bge	r10,r2,40054c4 <__subdf3+0x584>
 4005328:	0081ffc4 	movi	r2,2047
 400532c:	4880af26 	beq	r9,r2,40055ec <__subdf3+0x6ac>
 4005330:	898d883a 	add	r6,r17,r6
 4005334:	1945883a 	add	r2,r3,r5
 4005338:	3447803a 	cmpltu	r3,r6,r17
 400533c:	1887883a 	add	r3,r3,r2
 4005340:	182297fa 	slli	r17,r3,31
 4005344:	300cd07a 	srli	r6,r6,1
 4005348:	1806d07a 	srli	r3,r3,1
 400534c:	4821883a 	mov	r16,r9
 4005350:	89a2b03a 	or	r17,r17,r6
 4005354:	003f1b06 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 4005358:	0101ffc4 	movi	r4,2047
 400535c:	813f441e 	bne	r16,r4,4005070 <__alt_data_end+0xfc005070>
 4005360:	003f1806 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 4005364:	843ff844 	addi	r16,r16,-31
 4005368:	01400804 	movi	r5,32
 400536c:	1408d83a 	srl	r4,r2,r16
 4005370:	19405026 	beq	r3,r5,40054b4 <__subdf3+0x574>
 4005374:	01401004 	movi	r5,64
 4005378:	28c7c83a 	sub	r3,r5,r3
 400537c:	10c4983a 	sll	r2,r2,r3
 4005380:	88a2b03a 	or	r17,r17,r2
 4005384:	8822c03a 	cmpne	r17,r17,zero
 4005388:	2462b03a 	or	r17,r4,r17
 400538c:	0007883a 	mov	r3,zero
 4005390:	0021883a 	mov	r16,zero
 4005394:	003f6d06 	br	400514c <__alt_data_end+0xfc00514c>
 4005398:	11fff804 	addi	r7,r2,-32
 400539c:	01000804 	movi	r4,32
 40053a0:	29ced83a 	srl	r7,r5,r7
 40053a4:	11004526 	beq	r2,r4,40054bc <__subdf3+0x57c>
 40053a8:	01001004 	movi	r4,64
 40053ac:	2089c83a 	sub	r4,r4,r2
 40053b0:	2904983a 	sll	r2,r5,r4
 40053b4:	118cb03a 	or	r6,r2,r6
 40053b8:	300cc03a 	cmpne	r6,r6,zero
 40053bc:	398cb03a 	or	r6,r7,r6
 40053c0:	0005883a 	mov	r2,zero
 40053c4:	003f3706 	br	40050a4 <__alt_data_end+0xfc0050a4>
 40053c8:	80002a26 	beq	r16,zero,4005474 <__subdf3+0x534>
 40053cc:	0101ffc4 	movi	r4,2047
 40053d0:	49006626 	beq	r9,r4,400556c <__subdf3+0x62c>
 40053d4:	0085c83a 	sub	r2,zero,r2
 40053d8:	18c02034 	orhi	r3,r3,128
 40053dc:	01000e04 	movi	r4,56
 40053e0:	20807e16 	blt	r4,r2,40055dc <__subdf3+0x69c>
 40053e4:	010007c4 	movi	r4,31
 40053e8:	2080e716 	blt	r4,r2,4005788 <__subdf3+0x848>
 40053ec:	01000804 	movi	r4,32
 40053f0:	2089c83a 	sub	r4,r4,r2
 40053f4:	1914983a 	sll	r10,r3,r4
 40053f8:	8890d83a 	srl	r8,r17,r2
 40053fc:	8908983a 	sll	r4,r17,r4
 4005400:	1884d83a 	srl	r2,r3,r2
 4005404:	5222b03a 	or	r17,r10,r8
 4005408:	2006c03a 	cmpne	r3,r4,zero
 400540c:	88e2b03a 	or	r17,r17,r3
 4005410:	3463c83a 	sub	r17,r6,r17
 4005414:	2885c83a 	sub	r2,r5,r2
 4005418:	344d803a 	cmpltu	r6,r6,r17
 400541c:	1187c83a 	sub	r3,r2,r6
 4005420:	4821883a 	mov	r16,r9
 4005424:	3825883a 	mov	r18,r7
 4005428:	003f2306 	br	40050b8 <__alt_data_end+0xfc0050b8>
 400542c:	24d0b03a 	or	r8,r4,r19
 4005430:	40001b1e 	bne	r8,zero,40054a0 <__subdf3+0x560>
 4005434:	0005883a 	mov	r2,zero
 4005438:	0009883a 	mov	r4,zero
 400543c:	0021883a 	mov	r16,zero
 4005440:	003f4906 	br	4005168 <__alt_data_end+0xfc005168>
 4005444:	010007c4 	movi	r4,31
 4005448:	20803a16 	blt	r4,r2,4005534 <__subdf3+0x5f4>
 400544c:	01000804 	movi	r4,32
 4005450:	2089c83a 	sub	r4,r4,r2
 4005454:	2912983a 	sll	r9,r5,r4
 4005458:	3090d83a 	srl	r8,r6,r2
 400545c:	3108983a 	sll	r4,r6,r4
 4005460:	2884d83a 	srl	r2,r5,r2
 4005464:	4a12b03a 	or	r9,r9,r8
 4005468:	2008c03a 	cmpne	r4,r4,zero
 400546c:	4912b03a 	or	r9,r9,r4
 4005470:	003f4e06 	br	40051ac <__alt_data_end+0xfc0051ac>
 4005474:	1c48b03a 	or	r4,r3,r17
 4005478:	20003c26 	beq	r4,zero,400556c <__subdf3+0x62c>
 400547c:	0084303a 	nor	r2,zero,r2
 4005480:	1000381e 	bne	r2,zero,4005564 <__subdf3+0x624>
 4005484:	3463c83a 	sub	r17,r6,r17
 4005488:	28c5c83a 	sub	r2,r5,r3
 400548c:	344d803a 	cmpltu	r6,r6,r17
 4005490:	1187c83a 	sub	r3,r2,r6
 4005494:	4821883a 	mov	r16,r9
 4005498:	3825883a 	mov	r18,r7
 400549c:	003f0606 	br	40050b8 <__alt_data_end+0xfc0050b8>
 40054a0:	2023883a 	mov	r17,r4
 40054a4:	003f0906 	br	40050cc <__alt_data_end+0xfc0050cc>
 40054a8:	0101ffc4 	movi	r4,2047
 40054ac:	813f3a1e 	bne	r16,r4,4005198 <__alt_data_end+0xfc005198>
 40054b0:	003ec406 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 40054b4:	0005883a 	mov	r2,zero
 40054b8:	003fb106 	br	4005380 <__alt_data_end+0xfc005380>
 40054bc:	0005883a 	mov	r2,zero
 40054c0:	003fbc06 	br	40053b4 <__alt_data_end+0xfc0053b4>
 40054c4:	1c44b03a 	or	r2,r3,r17
 40054c8:	80008e1e 	bne	r16,zero,4005704 <__subdf3+0x7c4>
 40054cc:	1000c826 	beq	r2,zero,40057f0 <__subdf3+0x8b0>
 40054d0:	2984b03a 	or	r2,r5,r6
 40054d4:	103ebb26 	beq	r2,zero,4004fc4 <__alt_data_end+0xfc004fc4>
 40054d8:	8989883a 	add	r4,r17,r6
 40054dc:	1945883a 	add	r2,r3,r5
 40054e0:	2447803a 	cmpltu	r3,r4,r17
 40054e4:	1887883a 	add	r3,r3,r2
 40054e8:	1880202c 	andhi	r2,r3,128
 40054ec:	2023883a 	mov	r17,r4
 40054f0:	103f1626 	beq	r2,zero,400514c <__alt_data_end+0xfc00514c>
 40054f4:	00bfe034 	movhi	r2,65408
 40054f8:	10bfffc4 	addi	r2,r2,-1
 40054fc:	5021883a 	mov	r16,r10
 4005500:	1886703a 	and	r3,r3,r2
 4005504:	003eaf06 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 4005508:	3825883a 	mov	r18,r7
 400550c:	003f0f06 	br	400514c <__alt_data_end+0xfc00514c>
 4005510:	1c44b03a 	or	r2,r3,r17
 4005514:	8000251e 	bne	r16,zero,40055ac <__subdf3+0x66c>
 4005518:	1000661e 	bne	r2,zero,40056b4 <__subdf3+0x774>
 400551c:	2990b03a 	or	r8,r5,r6
 4005520:	40009626 	beq	r8,zero,400577c <__subdf3+0x83c>
 4005524:	2807883a 	mov	r3,r5
 4005528:	3023883a 	mov	r17,r6
 400552c:	3825883a 	mov	r18,r7
 4005530:	003ea406 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 4005534:	127ff804 	addi	r9,r2,-32
 4005538:	01000804 	movi	r4,32
 400553c:	2a52d83a 	srl	r9,r5,r9
 4005540:	11008c26 	beq	r2,r4,4005774 <__subdf3+0x834>
 4005544:	01001004 	movi	r4,64
 4005548:	2085c83a 	sub	r2,r4,r2
 400554c:	2884983a 	sll	r2,r5,r2
 4005550:	118cb03a 	or	r6,r2,r6
 4005554:	300cc03a 	cmpne	r6,r6,zero
 4005558:	4992b03a 	or	r9,r9,r6
 400555c:	0005883a 	mov	r2,zero
 4005560:	003f1206 	br	40051ac <__alt_data_end+0xfc0051ac>
 4005564:	0101ffc4 	movi	r4,2047
 4005568:	493f9c1e 	bne	r9,r4,40053dc <__alt_data_end+0xfc0053dc>
 400556c:	2807883a 	mov	r3,r5
 4005570:	3023883a 	mov	r17,r6
 4005574:	4821883a 	mov	r16,r9
 4005578:	3825883a 	mov	r18,r7
 400557c:	003e9106 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 4005580:	80001f1e 	bne	r16,zero,4005600 <__subdf3+0x6c0>
 4005584:	1c48b03a 	or	r4,r3,r17
 4005588:	20005a26 	beq	r4,zero,40056f4 <__subdf3+0x7b4>
 400558c:	0084303a 	nor	r2,zero,r2
 4005590:	1000561e 	bne	r2,zero,40056ec <__subdf3+0x7ac>
 4005594:	89a3883a 	add	r17,r17,r6
 4005598:	1945883a 	add	r2,r3,r5
 400559c:	898d803a 	cmpltu	r6,r17,r6
 40055a0:	3087883a 	add	r3,r6,r2
 40055a4:	4821883a 	mov	r16,r9
 40055a8:	003f0506 	br	40051c0 <__alt_data_end+0xfc0051c0>
 40055ac:	10002b1e 	bne	r2,zero,400565c <__subdf3+0x71c>
 40055b0:	2984b03a 	or	r2,r5,r6
 40055b4:	10008026 	beq	r2,zero,40057b8 <__subdf3+0x878>
 40055b8:	2807883a 	mov	r3,r5
 40055bc:	3023883a 	mov	r17,r6
 40055c0:	3825883a 	mov	r18,r7
 40055c4:	0401ffc4 	movi	r16,2047
 40055c8:	003e7e06 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 40055cc:	3809883a 	mov	r4,r7
 40055d0:	0011883a 	mov	r8,zero
 40055d4:	0005883a 	mov	r2,zero
 40055d8:	003ee306 	br	4005168 <__alt_data_end+0xfc005168>
 40055dc:	1c62b03a 	or	r17,r3,r17
 40055e0:	8822c03a 	cmpne	r17,r17,zero
 40055e4:	0005883a 	mov	r2,zero
 40055e8:	003f8906 	br	4005410 <__alt_data_end+0xfc005410>
 40055ec:	3809883a 	mov	r4,r7
 40055f0:	4821883a 	mov	r16,r9
 40055f4:	0011883a 	mov	r8,zero
 40055f8:	0005883a 	mov	r2,zero
 40055fc:	003eda06 	br	4005168 <__alt_data_end+0xfc005168>
 4005600:	0101ffc4 	movi	r4,2047
 4005604:	49003b26 	beq	r9,r4,40056f4 <__subdf3+0x7b4>
 4005608:	0085c83a 	sub	r2,zero,r2
 400560c:	18c02034 	orhi	r3,r3,128
 4005610:	01000e04 	movi	r4,56
 4005614:	20806e16 	blt	r4,r2,40057d0 <__subdf3+0x890>
 4005618:	010007c4 	movi	r4,31
 400561c:	20807716 	blt	r4,r2,40057fc <__subdf3+0x8bc>
 4005620:	01000804 	movi	r4,32
 4005624:	2089c83a 	sub	r4,r4,r2
 4005628:	1914983a 	sll	r10,r3,r4
 400562c:	8890d83a 	srl	r8,r17,r2
 4005630:	8908983a 	sll	r4,r17,r4
 4005634:	1884d83a 	srl	r2,r3,r2
 4005638:	5222b03a 	or	r17,r10,r8
 400563c:	2006c03a 	cmpne	r3,r4,zero
 4005640:	88e2b03a 	or	r17,r17,r3
 4005644:	89a3883a 	add	r17,r17,r6
 4005648:	1145883a 	add	r2,r2,r5
 400564c:	898d803a 	cmpltu	r6,r17,r6
 4005650:	3087883a 	add	r3,r6,r2
 4005654:	4821883a 	mov	r16,r9
 4005658:	003ed906 	br	40051c0 <__alt_data_end+0xfc0051c0>
 400565c:	2984b03a 	or	r2,r5,r6
 4005660:	10004226 	beq	r2,zero,400576c <__subdf3+0x82c>
 4005664:	1808d0fa 	srli	r4,r3,3
 4005668:	8822d0fa 	srli	r17,r17,3
 400566c:	1806977a 	slli	r3,r3,29
 4005670:	2080022c 	andhi	r2,r4,8
 4005674:	1c62b03a 	or	r17,r3,r17
 4005678:	10000826 	beq	r2,zero,400569c <__subdf3+0x75c>
 400567c:	2812d0fa 	srli	r9,r5,3
 4005680:	4880022c 	andhi	r2,r9,8
 4005684:	1000051e 	bne	r2,zero,400569c <__subdf3+0x75c>
 4005688:	300cd0fa 	srli	r6,r6,3
 400568c:	2804977a 	slli	r2,r5,29
 4005690:	4809883a 	mov	r4,r9
 4005694:	3825883a 	mov	r18,r7
 4005698:	11a2b03a 	or	r17,r2,r6
 400569c:	8806d77a 	srli	r3,r17,29
 40056a0:	200890fa 	slli	r4,r4,3
 40056a4:	882290fa 	slli	r17,r17,3
 40056a8:	0401ffc4 	movi	r16,2047
 40056ac:	1906b03a 	or	r3,r3,r4
 40056b0:	003e4406 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 40056b4:	2984b03a 	or	r2,r5,r6
 40056b8:	103e4226 	beq	r2,zero,4004fc4 <__alt_data_end+0xfc004fc4>
 40056bc:	8989c83a 	sub	r4,r17,r6
 40056c0:	8911803a 	cmpltu	r8,r17,r4
 40056c4:	1945c83a 	sub	r2,r3,r5
 40056c8:	1205c83a 	sub	r2,r2,r8
 40056cc:	1200202c 	andhi	r8,r2,128
 40056d0:	403e9a26 	beq	r8,zero,400513c <__alt_data_end+0xfc00513c>
 40056d4:	3463c83a 	sub	r17,r6,r17
 40056d8:	28c5c83a 	sub	r2,r5,r3
 40056dc:	344d803a 	cmpltu	r6,r6,r17
 40056e0:	1187c83a 	sub	r3,r2,r6
 40056e4:	3825883a 	mov	r18,r7
 40056e8:	003e3606 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 40056ec:	0101ffc4 	movi	r4,2047
 40056f0:	493fc71e 	bne	r9,r4,4005610 <__alt_data_end+0xfc005610>
 40056f4:	2807883a 	mov	r3,r5
 40056f8:	3023883a 	mov	r17,r6
 40056fc:	4821883a 	mov	r16,r9
 4005700:	003e3006 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 4005704:	10003626 	beq	r2,zero,40057e0 <__subdf3+0x8a0>
 4005708:	2984b03a 	or	r2,r5,r6
 400570c:	10001726 	beq	r2,zero,400576c <__subdf3+0x82c>
 4005710:	1808d0fa 	srli	r4,r3,3
 4005714:	8822d0fa 	srli	r17,r17,3
 4005718:	1806977a 	slli	r3,r3,29
 400571c:	2080022c 	andhi	r2,r4,8
 4005720:	1c62b03a 	or	r17,r3,r17
 4005724:	10000726 	beq	r2,zero,4005744 <__subdf3+0x804>
 4005728:	2812d0fa 	srli	r9,r5,3
 400572c:	4880022c 	andhi	r2,r9,8
 4005730:	1000041e 	bne	r2,zero,4005744 <__subdf3+0x804>
 4005734:	300cd0fa 	srli	r6,r6,3
 4005738:	2804977a 	slli	r2,r5,29
 400573c:	4809883a 	mov	r4,r9
 4005740:	11a2b03a 	or	r17,r2,r6
 4005744:	8806d77a 	srli	r3,r17,29
 4005748:	200890fa 	slli	r4,r4,3
 400574c:	882290fa 	slli	r17,r17,3
 4005750:	3825883a 	mov	r18,r7
 4005754:	1906b03a 	or	r3,r3,r4
 4005758:	0401ffc4 	movi	r16,2047
 400575c:	003e1906 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 4005760:	000b883a 	mov	r5,zero
 4005764:	0005883a 	mov	r2,zero
 4005768:	003e2e06 	br	4005024 <__alt_data_end+0xfc005024>
 400576c:	0401ffc4 	movi	r16,2047
 4005770:	003e1406 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 4005774:	0005883a 	mov	r2,zero
 4005778:	003f7506 	br	4005550 <__alt_data_end+0xfc005550>
 400577c:	0005883a 	mov	r2,zero
 4005780:	0009883a 	mov	r4,zero
 4005784:	003e7806 	br	4005168 <__alt_data_end+0xfc005168>
 4005788:	123ff804 	addi	r8,r2,-32
 400578c:	01000804 	movi	r4,32
 4005790:	1a10d83a 	srl	r8,r3,r8
 4005794:	11002526 	beq	r2,r4,400582c <__subdf3+0x8ec>
 4005798:	01001004 	movi	r4,64
 400579c:	2085c83a 	sub	r2,r4,r2
 40057a0:	1884983a 	sll	r2,r3,r2
 40057a4:	1444b03a 	or	r2,r2,r17
 40057a8:	1004c03a 	cmpne	r2,r2,zero
 40057ac:	40a2b03a 	or	r17,r8,r2
 40057b0:	0005883a 	mov	r2,zero
 40057b4:	003f1606 	br	4005410 <__alt_data_end+0xfc005410>
 40057b8:	02000434 	movhi	r8,16
 40057bc:	0009883a 	mov	r4,zero
 40057c0:	423fffc4 	addi	r8,r8,-1
 40057c4:	00bfffc4 	movi	r2,-1
 40057c8:	0401ffc4 	movi	r16,2047
 40057cc:	003e6606 	br	4005168 <__alt_data_end+0xfc005168>
 40057d0:	1c62b03a 	or	r17,r3,r17
 40057d4:	8822c03a 	cmpne	r17,r17,zero
 40057d8:	0005883a 	mov	r2,zero
 40057dc:	003f9906 	br	4005644 <__alt_data_end+0xfc005644>
 40057e0:	2807883a 	mov	r3,r5
 40057e4:	3023883a 	mov	r17,r6
 40057e8:	0401ffc4 	movi	r16,2047
 40057ec:	003df506 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 40057f0:	2807883a 	mov	r3,r5
 40057f4:	3023883a 	mov	r17,r6
 40057f8:	003df206 	br	4004fc4 <__alt_data_end+0xfc004fc4>
 40057fc:	123ff804 	addi	r8,r2,-32
 4005800:	01000804 	movi	r4,32
 4005804:	1a10d83a 	srl	r8,r3,r8
 4005808:	11000a26 	beq	r2,r4,4005834 <__subdf3+0x8f4>
 400580c:	01001004 	movi	r4,64
 4005810:	2085c83a 	sub	r2,r4,r2
 4005814:	1884983a 	sll	r2,r3,r2
 4005818:	1444b03a 	or	r2,r2,r17
 400581c:	1004c03a 	cmpne	r2,r2,zero
 4005820:	40a2b03a 	or	r17,r8,r2
 4005824:	0005883a 	mov	r2,zero
 4005828:	003f8606 	br	4005644 <__alt_data_end+0xfc005644>
 400582c:	0005883a 	mov	r2,zero
 4005830:	003fdc06 	br	40057a4 <__alt_data_end+0xfc0057a4>
 4005834:	0005883a 	mov	r2,zero
 4005838:	003ff706 	br	4005818 <__alt_data_end+0xfc005818>

0400583c <__fixdfsi>:
 400583c:	280cd53a 	srli	r6,r5,20
 4005840:	00c00434 	movhi	r3,16
 4005844:	18ffffc4 	addi	r3,r3,-1
 4005848:	3181ffcc 	andi	r6,r6,2047
 400584c:	01c0ff84 	movi	r7,1022
 4005850:	28c6703a 	and	r3,r5,r3
 4005854:	280ad7fa 	srli	r5,r5,31
 4005858:	3980120e 	bge	r7,r6,40058a4 <__fixdfsi+0x68>
 400585c:	00810744 	movi	r2,1053
 4005860:	11800c16 	blt	r2,r6,4005894 <__fixdfsi+0x58>
 4005864:	00810cc4 	movi	r2,1075
 4005868:	1185c83a 	sub	r2,r2,r6
 400586c:	01c007c4 	movi	r7,31
 4005870:	18c00434 	orhi	r3,r3,16
 4005874:	38800d16 	blt	r7,r2,40058ac <__fixdfsi+0x70>
 4005878:	31befb44 	addi	r6,r6,-1043
 400587c:	2084d83a 	srl	r2,r4,r2
 4005880:	1986983a 	sll	r3,r3,r6
 4005884:	1884b03a 	or	r2,r3,r2
 4005888:	28000726 	beq	r5,zero,40058a8 <__fixdfsi+0x6c>
 400588c:	0085c83a 	sub	r2,zero,r2
 4005890:	f800283a 	ret
 4005894:	00a00034 	movhi	r2,32768
 4005898:	10bfffc4 	addi	r2,r2,-1
 400589c:	2885883a 	add	r2,r5,r2
 40058a0:	f800283a 	ret
 40058a4:	0005883a 	mov	r2,zero
 40058a8:	f800283a 	ret
 40058ac:	008104c4 	movi	r2,1043
 40058b0:	1185c83a 	sub	r2,r2,r6
 40058b4:	1884d83a 	srl	r2,r3,r2
 40058b8:	003ff306 	br	4005888 <__alt_data_end+0xfc005888>

040058bc <__floatsidf>:
 40058bc:	defffd04 	addi	sp,sp,-12
 40058c0:	dfc00215 	stw	ra,8(sp)
 40058c4:	dc400115 	stw	r17,4(sp)
 40058c8:	dc000015 	stw	r16,0(sp)
 40058cc:	20002b26 	beq	r4,zero,400597c <__floatsidf+0xc0>
 40058d0:	2023883a 	mov	r17,r4
 40058d4:	2020d7fa 	srli	r16,r4,31
 40058d8:	20002d16 	blt	r4,zero,4005990 <__floatsidf+0xd4>
 40058dc:	8809883a 	mov	r4,r17
 40058e0:	4005cf80 	call	4005cf8 <__clzsi2>
 40058e4:	01410784 	movi	r5,1054
 40058e8:	288bc83a 	sub	r5,r5,r2
 40058ec:	01010cc4 	movi	r4,1075
 40058f0:	2149c83a 	sub	r4,r4,r5
 40058f4:	00c007c4 	movi	r3,31
 40058f8:	1900160e 	bge	r3,r4,4005954 <__floatsidf+0x98>
 40058fc:	00c104c4 	movi	r3,1043
 4005900:	1947c83a 	sub	r3,r3,r5
 4005904:	88c6983a 	sll	r3,r17,r3
 4005908:	00800434 	movhi	r2,16
 400590c:	10bfffc4 	addi	r2,r2,-1
 4005910:	1886703a 	and	r3,r3,r2
 4005914:	2941ffcc 	andi	r5,r5,2047
 4005918:	800d883a 	mov	r6,r16
 400591c:	0005883a 	mov	r2,zero
 4005920:	280a953a 	slli	r5,r5,20
 4005924:	31803fcc 	andi	r6,r6,255
 4005928:	01000434 	movhi	r4,16
 400592c:	300c97fa 	slli	r6,r6,31
 4005930:	213fffc4 	addi	r4,r4,-1
 4005934:	1906703a 	and	r3,r3,r4
 4005938:	1946b03a 	or	r3,r3,r5
 400593c:	1986b03a 	or	r3,r3,r6
 4005940:	dfc00217 	ldw	ra,8(sp)
 4005944:	dc400117 	ldw	r17,4(sp)
 4005948:	dc000017 	ldw	r16,0(sp)
 400594c:	dec00304 	addi	sp,sp,12
 4005950:	f800283a 	ret
 4005954:	00c002c4 	movi	r3,11
 4005958:	1887c83a 	sub	r3,r3,r2
 400595c:	88c6d83a 	srl	r3,r17,r3
 4005960:	8904983a 	sll	r2,r17,r4
 4005964:	01000434 	movhi	r4,16
 4005968:	213fffc4 	addi	r4,r4,-1
 400596c:	2941ffcc 	andi	r5,r5,2047
 4005970:	1906703a 	and	r3,r3,r4
 4005974:	800d883a 	mov	r6,r16
 4005978:	003fe906 	br	4005920 <__alt_data_end+0xfc005920>
 400597c:	000d883a 	mov	r6,zero
 4005980:	000b883a 	mov	r5,zero
 4005984:	0007883a 	mov	r3,zero
 4005988:	0005883a 	mov	r2,zero
 400598c:	003fe406 	br	4005920 <__alt_data_end+0xfc005920>
 4005990:	0123c83a 	sub	r17,zero,r4
 4005994:	003fd106 	br	40058dc <__alt_data_end+0xfc0058dc>

04005998 <__floatunsidf>:
 4005998:	defffe04 	addi	sp,sp,-8
 400599c:	dc000015 	stw	r16,0(sp)
 40059a0:	dfc00115 	stw	ra,4(sp)
 40059a4:	2021883a 	mov	r16,r4
 40059a8:	20002226 	beq	r4,zero,4005a34 <__floatunsidf+0x9c>
 40059ac:	4005cf80 	call	4005cf8 <__clzsi2>
 40059b0:	01010784 	movi	r4,1054
 40059b4:	2089c83a 	sub	r4,r4,r2
 40059b8:	01810cc4 	movi	r6,1075
 40059bc:	310dc83a 	sub	r6,r6,r4
 40059c0:	00c007c4 	movi	r3,31
 40059c4:	1980120e 	bge	r3,r6,4005a10 <__floatunsidf+0x78>
 40059c8:	00c104c4 	movi	r3,1043
 40059cc:	1907c83a 	sub	r3,r3,r4
 40059d0:	80ca983a 	sll	r5,r16,r3
 40059d4:	00800434 	movhi	r2,16
 40059d8:	10bfffc4 	addi	r2,r2,-1
 40059dc:	2101ffcc 	andi	r4,r4,2047
 40059e0:	0021883a 	mov	r16,zero
 40059e4:	288a703a 	and	r5,r5,r2
 40059e8:	2008953a 	slli	r4,r4,20
 40059ec:	00c00434 	movhi	r3,16
 40059f0:	18ffffc4 	addi	r3,r3,-1
 40059f4:	28c6703a 	and	r3,r5,r3
 40059f8:	8005883a 	mov	r2,r16
 40059fc:	1906b03a 	or	r3,r3,r4
 4005a00:	dfc00117 	ldw	ra,4(sp)
 4005a04:	dc000017 	ldw	r16,0(sp)
 4005a08:	dec00204 	addi	sp,sp,8
 4005a0c:	f800283a 	ret
 4005a10:	00c002c4 	movi	r3,11
 4005a14:	188bc83a 	sub	r5,r3,r2
 4005a18:	814ad83a 	srl	r5,r16,r5
 4005a1c:	00c00434 	movhi	r3,16
 4005a20:	18ffffc4 	addi	r3,r3,-1
 4005a24:	81a0983a 	sll	r16,r16,r6
 4005a28:	2101ffcc 	andi	r4,r4,2047
 4005a2c:	28ca703a 	and	r5,r5,r3
 4005a30:	003fed06 	br	40059e8 <__alt_data_end+0xfc0059e8>
 4005a34:	0009883a 	mov	r4,zero
 4005a38:	000b883a 	mov	r5,zero
 4005a3c:	003fea06 	br	40059e8 <__alt_data_end+0xfc0059e8>

04005a40 <__extendsfdf2>:
 4005a40:	200ad5fa 	srli	r5,r4,23
 4005a44:	defffd04 	addi	sp,sp,-12
 4005a48:	dc400115 	stw	r17,4(sp)
 4005a4c:	29403fcc 	andi	r5,r5,255
 4005a50:	29800044 	addi	r6,r5,1
 4005a54:	04402034 	movhi	r17,128
 4005a58:	dc000015 	stw	r16,0(sp)
 4005a5c:	8c7fffc4 	addi	r17,r17,-1
 4005a60:	dfc00215 	stw	ra,8(sp)
 4005a64:	31803fcc 	andi	r6,r6,255
 4005a68:	00800044 	movi	r2,1
 4005a6c:	8922703a 	and	r17,r17,r4
 4005a70:	2020d7fa 	srli	r16,r4,31
 4005a74:	1180110e 	bge	r2,r6,4005abc <__extendsfdf2+0x7c>
 4005a78:	880cd0fa 	srli	r6,r17,3
 4005a7c:	8822977a 	slli	r17,r17,29
 4005a80:	2940e004 	addi	r5,r5,896
 4005a84:	2941ffcc 	andi	r5,r5,2047
 4005a88:	2804953a 	slli	r2,r5,20
 4005a8c:	01400434 	movhi	r5,16
 4005a90:	800697fa 	slli	r3,r16,31
 4005a94:	297fffc4 	addi	r5,r5,-1
 4005a98:	314a703a 	and	r5,r6,r5
 4005a9c:	288ab03a 	or	r5,r5,r2
 4005aa0:	28c6b03a 	or	r3,r5,r3
 4005aa4:	8805883a 	mov	r2,r17
 4005aa8:	dfc00217 	ldw	ra,8(sp)
 4005aac:	dc400117 	ldw	r17,4(sp)
 4005ab0:	dc000017 	ldw	r16,0(sp)
 4005ab4:	dec00304 	addi	sp,sp,12
 4005ab8:	f800283a 	ret
 4005abc:	2800111e 	bne	r5,zero,4005b04 <__extendsfdf2+0xc4>
 4005ac0:	88001c26 	beq	r17,zero,4005b34 <__extendsfdf2+0xf4>
 4005ac4:	8809883a 	mov	r4,r17
 4005ac8:	4005cf80 	call	4005cf8 <__clzsi2>
 4005acc:	00c00284 	movi	r3,10
 4005ad0:	18801b16 	blt	r3,r2,4005b40 <__extendsfdf2+0x100>
 4005ad4:	018002c4 	movi	r6,11
 4005ad8:	308dc83a 	sub	r6,r6,r2
 4005adc:	11000544 	addi	r4,r2,21
 4005ae0:	8986d83a 	srl	r3,r17,r6
 4005ae4:	8922983a 	sll	r17,r17,r4
 4005ae8:	0180e244 	movi	r6,905
 4005aec:	01400434 	movhi	r5,16
 4005af0:	3085c83a 	sub	r2,r6,r2
 4005af4:	297fffc4 	addi	r5,r5,-1
 4005af8:	194c703a 	and	r6,r3,r5
 4005afc:	1141ffcc 	andi	r5,r2,2047
 4005b00:	003fe006 	br	4005a84 <__alt_data_end+0xfc005a84>
 4005b04:	88000826 	beq	r17,zero,4005b28 <__extendsfdf2+0xe8>
 4005b08:	880cd0fa 	srli	r6,r17,3
 4005b0c:	00800434 	movhi	r2,16
 4005b10:	10bfffc4 	addi	r2,r2,-1
 4005b14:	31800234 	orhi	r6,r6,8
 4005b18:	8822977a 	slli	r17,r17,29
 4005b1c:	308c703a 	and	r6,r6,r2
 4005b20:	0141ffc4 	movi	r5,2047
 4005b24:	003fd706 	br	4005a84 <__alt_data_end+0xfc005a84>
 4005b28:	0141ffc4 	movi	r5,2047
 4005b2c:	000d883a 	mov	r6,zero
 4005b30:	003fd406 	br	4005a84 <__alt_data_end+0xfc005a84>
 4005b34:	000b883a 	mov	r5,zero
 4005b38:	000d883a 	mov	r6,zero
 4005b3c:	003fd106 	br	4005a84 <__alt_data_end+0xfc005a84>
 4005b40:	11bffd44 	addi	r6,r2,-11
 4005b44:	8986983a 	sll	r3,r17,r6
 4005b48:	0023883a 	mov	r17,zero
 4005b4c:	003fe606 	br	4005ae8 <__alt_data_end+0xfc005ae8>

04005b50 <__truncdfsf2>:
 4005b50:	2810d53a 	srli	r8,r5,20
 4005b54:	01c00434 	movhi	r7,16
 4005b58:	39ffffc4 	addi	r7,r7,-1
 4005b5c:	29ce703a 	and	r7,r5,r7
 4005b60:	4201ffcc 	andi	r8,r8,2047
 4005b64:	380e90fa 	slli	r7,r7,3
 4005b68:	200cd77a 	srli	r6,r4,29
 4005b6c:	42400044 	addi	r9,r8,1
 4005b70:	4a41ffcc 	andi	r9,r9,2047
 4005b74:	00c00044 	movi	r3,1
 4005b78:	280ad7fa 	srli	r5,r5,31
 4005b7c:	31ceb03a 	or	r7,r6,r7
 4005b80:	200490fa 	slli	r2,r4,3
 4005b84:	1a40230e 	bge	r3,r9,4005c14 <__truncdfsf2+0xc4>
 4005b88:	40ff2004 	addi	r3,r8,-896
 4005b8c:	01803f84 	movi	r6,254
 4005b90:	30c01516 	blt	r6,r3,4005be8 <__truncdfsf2+0x98>
 4005b94:	00c0380e 	bge	zero,r3,4005c78 <__truncdfsf2+0x128>
 4005b98:	200c91ba 	slli	r6,r4,6
 4005b9c:	380e90fa 	slli	r7,r7,3
 4005ba0:	1004d77a 	srli	r2,r2,29
 4005ba4:	300cc03a 	cmpne	r6,r6,zero
 4005ba8:	31ccb03a 	or	r6,r6,r7
 4005bac:	308cb03a 	or	r6,r6,r2
 4005bb0:	308001cc 	andi	r2,r6,7
 4005bb4:	10000426 	beq	r2,zero,4005bc8 <__truncdfsf2+0x78>
 4005bb8:	308003cc 	andi	r2,r6,15
 4005bbc:	01000104 	movi	r4,4
 4005bc0:	11000126 	beq	r2,r4,4005bc8 <__truncdfsf2+0x78>
 4005bc4:	31800104 	addi	r6,r6,4
 4005bc8:	3081002c 	andhi	r2,r6,1024
 4005bcc:	10001626 	beq	r2,zero,4005c28 <__truncdfsf2+0xd8>
 4005bd0:	18c00044 	addi	r3,r3,1
 4005bd4:	00803fc4 	movi	r2,255
 4005bd8:	18800326 	beq	r3,r2,4005be8 <__truncdfsf2+0x98>
 4005bdc:	300c91ba 	slli	r6,r6,6
 4005be0:	300cd27a 	srli	r6,r6,9
 4005be4:	00000206 	br	4005bf0 <__truncdfsf2+0xa0>
 4005be8:	00ffffc4 	movi	r3,-1
 4005bec:	000d883a 	mov	r6,zero
 4005bf0:	18c03fcc 	andi	r3,r3,255
 4005bf4:	180895fa 	slli	r4,r3,23
 4005bf8:	00c02034 	movhi	r3,128
 4005bfc:	280a97fa 	slli	r5,r5,31
 4005c00:	18ffffc4 	addi	r3,r3,-1
 4005c04:	30c6703a 	and	r3,r6,r3
 4005c08:	1906b03a 	or	r3,r3,r4
 4005c0c:	1944b03a 	or	r2,r3,r5
 4005c10:	f800283a 	ret
 4005c14:	40000b1e 	bne	r8,zero,4005c44 <__truncdfsf2+0xf4>
 4005c18:	388cb03a 	or	r6,r7,r2
 4005c1c:	0007883a 	mov	r3,zero
 4005c20:	30000426 	beq	r6,zero,4005c34 <__truncdfsf2+0xe4>
 4005c24:	01800144 	movi	r6,5
 4005c28:	00803fc4 	movi	r2,255
 4005c2c:	300cd0fa 	srli	r6,r6,3
 4005c30:	18800a26 	beq	r3,r2,4005c5c <__truncdfsf2+0x10c>
 4005c34:	00802034 	movhi	r2,128
 4005c38:	10bfffc4 	addi	r2,r2,-1
 4005c3c:	308c703a 	and	r6,r6,r2
 4005c40:	003feb06 	br	4005bf0 <__alt_data_end+0xfc005bf0>
 4005c44:	3888b03a 	or	r4,r7,r2
 4005c48:	203fe726 	beq	r4,zero,4005be8 <__alt_data_end+0xfc005be8>
 4005c4c:	380c90fa 	slli	r6,r7,3
 4005c50:	00c03fc4 	movi	r3,255
 4005c54:	31808034 	orhi	r6,r6,512
 4005c58:	003fd506 	br	4005bb0 <__alt_data_end+0xfc005bb0>
 4005c5c:	303fe226 	beq	r6,zero,4005be8 <__alt_data_end+0xfc005be8>
 4005c60:	00802034 	movhi	r2,128
 4005c64:	31801034 	orhi	r6,r6,64
 4005c68:	10bfffc4 	addi	r2,r2,-1
 4005c6c:	00ffffc4 	movi	r3,-1
 4005c70:	308c703a 	and	r6,r6,r2
 4005c74:	003fde06 	br	4005bf0 <__alt_data_end+0xfc005bf0>
 4005c78:	013ffa44 	movi	r4,-23
 4005c7c:	19000e16 	blt	r3,r4,4005cb8 <__truncdfsf2+0x168>
 4005c80:	01000784 	movi	r4,30
 4005c84:	20c9c83a 	sub	r4,r4,r3
 4005c88:	018007c4 	movi	r6,31
 4005c8c:	39c02034 	orhi	r7,r7,128
 4005c90:	31000b16 	blt	r6,r4,4005cc0 <__truncdfsf2+0x170>
 4005c94:	423f2084 	addi	r8,r8,-894
 4005c98:	120c983a 	sll	r6,r2,r8
 4005c9c:	3a0e983a 	sll	r7,r7,r8
 4005ca0:	1104d83a 	srl	r2,r2,r4
 4005ca4:	300cc03a 	cmpne	r6,r6,zero
 4005ca8:	31ceb03a 	or	r7,r6,r7
 4005cac:	388cb03a 	or	r6,r7,r2
 4005cb0:	0007883a 	mov	r3,zero
 4005cb4:	003fbe06 	br	4005bb0 <__alt_data_end+0xfc005bb0>
 4005cb8:	0007883a 	mov	r3,zero
 4005cbc:	003fd906 	br	4005c24 <__alt_data_end+0xfc005c24>
 4005cc0:	01bfff84 	movi	r6,-2
 4005cc4:	30cdc83a 	sub	r6,r6,r3
 4005cc8:	00c00804 	movi	r3,32
 4005ccc:	398cd83a 	srl	r6,r7,r6
 4005cd0:	20c00726 	beq	r4,r3,4005cf0 <__truncdfsf2+0x1a0>
 4005cd4:	423f2884 	addi	r8,r8,-862
 4005cd8:	3a0e983a 	sll	r7,r7,r8
 4005cdc:	3884b03a 	or	r2,r7,r2
 4005ce0:	1004c03a 	cmpne	r2,r2,zero
 4005ce4:	118cb03a 	or	r6,r2,r6
 4005ce8:	0007883a 	mov	r3,zero
 4005cec:	003fb006 	br	4005bb0 <__alt_data_end+0xfc005bb0>
 4005cf0:	000f883a 	mov	r7,zero
 4005cf4:	003ff906 	br	4005cdc <__alt_data_end+0xfc005cdc>

04005cf8 <__clzsi2>:
 4005cf8:	00bfffd4 	movui	r2,65535
 4005cfc:	11000536 	bltu	r2,r4,4005d14 <__clzsi2+0x1c>
 4005d00:	00803fc4 	movi	r2,255
 4005d04:	11000f36 	bltu	r2,r4,4005d44 <__clzsi2+0x4c>
 4005d08:	00800804 	movi	r2,32
 4005d0c:	0007883a 	mov	r3,zero
 4005d10:	00000506 	br	4005d28 <__clzsi2+0x30>
 4005d14:	00804034 	movhi	r2,256
 4005d18:	10bfffc4 	addi	r2,r2,-1
 4005d1c:	11000c2e 	bgeu	r2,r4,4005d50 <__clzsi2+0x58>
 4005d20:	00800204 	movi	r2,8
 4005d24:	00c00604 	movi	r3,24
 4005d28:	20c8d83a 	srl	r4,r4,r3
 4005d2c:	00c10074 	movhi	r3,1025
 4005d30:	18e3eb04 	addi	r3,r3,-28756
 4005d34:	1909883a 	add	r4,r3,r4
 4005d38:	20c00003 	ldbu	r3,0(r4)
 4005d3c:	10c5c83a 	sub	r2,r2,r3
 4005d40:	f800283a 	ret
 4005d44:	00800604 	movi	r2,24
 4005d48:	00c00204 	movi	r3,8
 4005d4c:	003ff606 	br	4005d28 <__alt_data_end+0xfc005d28>
 4005d50:	00800404 	movi	r2,16
 4005d54:	1007883a 	mov	r3,r2
 4005d58:	003ff306 	br	4005d28 <__alt_data_end+0xfc005d28>

04005d5c <__divsi3>:
 4005d5c:	20001b16 	blt	r4,zero,4005dcc <__divsi3+0x70>
 4005d60:	000f883a 	mov	r7,zero
 4005d64:	28001616 	blt	r5,zero,4005dc0 <__divsi3+0x64>
 4005d68:	200d883a 	mov	r6,r4
 4005d6c:	29001a2e 	bgeu	r5,r4,4005dd8 <__divsi3+0x7c>
 4005d70:	00800804 	movi	r2,32
 4005d74:	00c00044 	movi	r3,1
 4005d78:	00000106 	br	4005d80 <__divsi3+0x24>
 4005d7c:	10000d26 	beq	r2,zero,4005db4 <__divsi3+0x58>
 4005d80:	294b883a 	add	r5,r5,r5
 4005d84:	10bfffc4 	addi	r2,r2,-1
 4005d88:	18c7883a 	add	r3,r3,r3
 4005d8c:	293ffb36 	bltu	r5,r4,4005d7c <__alt_data_end+0xfc005d7c>
 4005d90:	0005883a 	mov	r2,zero
 4005d94:	18000726 	beq	r3,zero,4005db4 <__divsi3+0x58>
 4005d98:	0005883a 	mov	r2,zero
 4005d9c:	31400236 	bltu	r6,r5,4005da8 <__divsi3+0x4c>
 4005da0:	314dc83a 	sub	r6,r6,r5
 4005da4:	10c4b03a 	or	r2,r2,r3
 4005da8:	1806d07a 	srli	r3,r3,1
 4005dac:	280ad07a 	srli	r5,r5,1
 4005db0:	183ffa1e 	bne	r3,zero,4005d9c <__alt_data_end+0xfc005d9c>
 4005db4:	38000126 	beq	r7,zero,4005dbc <__divsi3+0x60>
 4005db8:	0085c83a 	sub	r2,zero,r2
 4005dbc:	f800283a 	ret
 4005dc0:	014bc83a 	sub	r5,zero,r5
 4005dc4:	39c0005c 	xori	r7,r7,1
 4005dc8:	003fe706 	br	4005d68 <__alt_data_end+0xfc005d68>
 4005dcc:	0109c83a 	sub	r4,zero,r4
 4005dd0:	01c00044 	movi	r7,1
 4005dd4:	003fe306 	br	4005d64 <__alt_data_end+0xfc005d64>
 4005dd8:	00c00044 	movi	r3,1
 4005ddc:	003fee06 	br	4005d98 <__alt_data_end+0xfc005d98>

04005de0 <__modsi3>:
 4005de0:	20001716 	blt	r4,zero,4005e40 <__modsi3+0x60>
 4005de4:	000f883a 	mov	r7,zero
 4005de8:	2005883a 	mov	r2,r4
 4005dec:	28001216 	blt	r5,zero,4005e38 <__modsi3+0x58>
 4005df0:	2900162e 	bgeu	r5,r4,4005e4c <__modsi3+0x6c>
 4005df4:	01800804 	movi	r6,32
 4005df8:	00c00044 	movi	r3,1
 4005dfc:	00000106 	br	4005e04 <__modsi3+0x24>
 4005e00:	30000a26 	beq	r6,zero,4005e2c <__modsi3+0x4c>
 4005e04:	294b883a 	add	r5,r5,r5
 4005e08:	31bfffc4 	addi	r6,r6,-1
 4005e0c:	18c7883a 	add	r3,r3,r3
 4005e10:	293ffb36 	bltu	r5,r4,4005e00 <__alt_data_end+0xfc005e00>
 4005e14:	18000526 	beq	r3,zero,4005e2c <__modsi3+0x4c>
 4005e18:	1806d07a 	srli	r3,r3,1
 4005e1c:	11400136 	bltu	r2,r5,4005e24 <__modsi3+0x44>
 4005e20:	1145c83a 	sub	r2,r2,r5
 4005e24:	280ad07a 	srli	r5,r5,1
 4005e28:	183ffb1e 	bne	r3,zero,4005e18 <__alt_data_end+0xfc005e18>
 4005e2c:	38000126 	beq	r7,zero,4005e34 <__modsi3+0x54>
 4005e30:	0085c83a 	sub	r2,zero,r2
 4005e34:	f800283a 	ret
 4005e38:	014bc83a 	sub	r5,zero,r5
 4005e3c:	003fec06 	br	4005df0 <__alt_data_end+0xfc005df0>
 4005e40:	0109c83a 	sub	r4,zero,r4
 4005e44:	01c00044 	movi	r7,1
 4005e48:	003fe706 	br	4005de8 <__alt_data_end+0xfc005de8>
 4005e4c:	00c00044 	movi	r3,1
 4005e50:	003ff106 	br	4005e18 <__alt_data_end+0xfc005e18>

04005e54 <__udivsi3>:
 4005e54:	200d883a 	mov	r6,r4
 4005e58:	2900152e 	bgeu	r5,r4,4005eb0 <__udivsi3+0x5c>
 4005e5c:	28001416 	blt	r5,zero,4005eb0 <__udivsi3+0x5c>
 4005e60:	00800804 	movi	r2,32
 4005e64:	00c00044 	movi	r3,1
 4005e68:	00000206 	br	4005e74 <__udivsi3+0x20>
 4005e6c:	10000e26 	beq	r2,zero,4005ea8 <__udivsi3+0x54>
 4005e70:	28000516 	blt	r5,zero,4005e88 <__udivsi3+0x34>
 4005e74:	294b883a 	add	r5,r5,r5
 4005e78:	10bfffc4 	addi	r2,r2,-1
 4005e7c:	18c7883a 	add	r3,r3,r3
 4005e80:	293ffa36 	bltu	r5,r4,4005e6c <__alt_data_end+0xfc005e6c>
 4005e84:	18000826 	beq	r3,zero,4005ea8 <__udivsi3+0x54>
 4005e88:	0005883a 	mov	r2,zero
 4005e8c:	31400236 	bltu	r6,r5,4005e98 <__udivsi3+0x44>
 4005e90:	314dc83a 	sub	r6,r6,r5
 4005e94:	10c4b03a 	or	r2,r2,r3
 4005e98:	1806d07a 	srli	r3,r3,1
 4005e9c:	280ad07a 	srli	r5,r5,1
 4005ea0:	183ffa1e 	bne	r3,zero,4005e8c <__alt_data_end+0xfc005e8c>
 4005ea4:	f800283a 	ret
 4005ea8:	0005883a 	mov	r2,zero
 4005eac:	f800283a 	ret
 4005eb0:	00c00044 	movi	r3,1
 4005eb4:	003ff406 	br	4005e88 <__alt_data_end+0xfc005e88>

04005eb8 <__umodsi3>:
 4005eb8:	2005883a 	mov	r2,r4
 4005ebc:	2900122e 	bgeu	r5,r4,4005f08 <__umodsi3+0x50>
 4005ec0:	28001116 	blt	r5,zero,4005f08 <__umodsi3+0x50>
 4005ec4:	01800804 	movi	r6,32
 4005ec8:	00c00044 	movi	r3,1
 4005ecc:	00000206 	br	4005ed8 <__umodsi3+0x20>
 4005ed0:	30000c26 	beq	r6,zero,4005f04 <__umodsi3+0x4c>
 4005ed4:	28000516 	blt	r5,zero,4005eec <__umodsi3+0x34>
 4005ed8:	294b883a 	add	r5,r5,r5
 4005edc:	31bfffc4 	addi	r6,r6,-1
 4005ee0:	18c7883a 	add	r3,r3,r3
 4005ee4:	293ffa36 	bltu	r5,r4,4005ed0 <__alt_data_end+0xfc005ed0>
 4005ee8:	18000626 	beq	r3,zero,4005f04 <__umodsi3+0x4c>
 4005eec:	1806d07a 	srli	r3,r3,1
 4005ef0:	11400136 	bltu	r2,r5,4005ef8 <__umodsi3+0x40>
 4005ef4:	1145c83a 	sub	r2,r2,r5
 4005ef8:	280ad07a 	srli	r5,r5,1
 4005efc:	183ffb1e 	bne	r3,zero,4005eec <__alt_data_end+0xfc005eec>
 4005f00:	f800283a 	ret
 4005f04:	f800283a 	ret
 4005f08:	00c00044 	movi	r3,1
 4005f0c:	003ff706 	br	4005eec <__alt_data_end+0xfc005eec>

04005f10 <memcpy>:
 4005f10:	defffd04 	addi	sp,sp,-12
 4005f14:	dfc00215 	stw	ra,8(sp)
 4005f18:	dc400115 	stw	r17,4(sp)
 4005f1c:	dc000015 	stw	r16,0(sp)
 4005f20:	00c003c4 	movi	r3,15
 4005f24:	2005883a 	mov	r2,r4
 4005f28:	1980452e 	bgeu	r3,r6,4006040 <memcpy+0x130>
 4005f2c:	2906b03a 	or	r3,r5,r4
 4005f30:	18c000cc 	andi	r3,r3,3
 4005f34:	1800441e 	bne	r3,zero,4006048 <memcpy+0x138>
 4005f38:	347ffc04 	addi	r17,r6,-16
 4005f3c:	8822d13a 	srli	r17,r17,4
 4005f40:	28c00104 	addi	r3,r5,4
 4005f44:	23400104 	addi	r13,r4,4
 4005f48:	8820913a 	slli	r16,r17,4
 4005f4c:	2b000204 	addi	r12,r5,8
 4005f50:	22c00204 	addi	r11,r4,8
 4005f54:	84000504 	addi	r16,r16,20
 4005f58:	2a800304 	addi	r10,r5,12
 4005f5c:	22400304 	addi	r9,r4,12
 4005f60:	2c21883a 	add	r16,r5,r16
 4005f64:	2811883a 	mov	r8,r5
 4005f68:	200f883a 	mov	r7,r4
 4005f6c:	41000017 	ldw	r4,0(r8)
 4005f70:	1fc00017 	ldw	ra,0(r3)
 4005f74:	63c00017 	ldw	r15,0(r12)
 4005f78:	39000015 	stw	r4,0(r7)
 4005f7c:	53800017 	ldw	r14,0(r10)
 4005f80:	6fc00015 	stw	ra,0(r13)
 4005f84:	5bc00015 	stw	r15,0(r11)
 4005f88:	4b800015 	stw	r14,0(r9)
 4005f8c:	18c00404 	addi	r3,r3,16
 4005f90:	39c00404 	addi	r7,r7,16
 4005f94:	42000404 	addi	r8,r8,16
 4005f98:	6b400404 	addi	r13,r13,16
 4005f9c:	63000404 	addi	r12,r12,16
 4005fa0:	5ac00404 	addi	r11,r11,16
 4005fa4:	52800404 	addi	r10,r10,16
 4005fa8:	4a400404 	addi	r9,r9,16
 4005fac:	1c3fef1e 	bne	r3,r16,4005f6c <__alt_data_end+0xfc005f6c>
 4005fb0:	89c00044 	addi	r7,r17,1
 4005fb4:	380e913a 	slli	r7,r7,4
 4005fb8:	310003cc 	andi	r4,r6,15
 4005fbc:	02c000c4 	movi	r11,3
 4005fc0:	11c7883a 	add	r3,r2,r7
 4005fc4:	29cb883a 	add	r5,r5,r7
 4005fc8:	5900212e 	bgeu	r11,r4,4006050 <memcpy+0x140>
 4005fcc:	1813883a 	mov	r9,r3
 4005fd0:	2811883a 	mov	r8,r5
 4005fd4:	200f883a 	mov	r7,r4
 4005fd8:	42800017 	ldw	r10,0(r8)
 4005fdc:	4a400104 	addi	r9,r9,4
 4005fe0:	39ffff04 	addi	r7,r7,-4
 4005fe4:	4abfff15 	stw	r10,-4(r9)
 4005fe8:	42000104 	addi	r8,r8,4
 4005fec:	59fffa36 	bltu	r11,r7,4005fd8 <__alt_data_end+0xfc005fd8>
 4005ff0:	213fff04 	addi	r4,r4,-4
 4005ff4:	2008d0ba 	srli	r4,r4,2
 4005ff8:	318000cc 	andi	r6,r6,3
 4005ffc:	21000044 	addi	r4,r4,1
 4006000:	2109883a 	add	r4,r4,r4
 4006004:	2109883a 	add	r4,r4,r4
 4006008:	1907883a 	add	r3,r3,r4
 400600c:	290b883a 	add	r5,r5,r4
 4006010:	30000626 	beq	r6,zero,400602c <memcpy+0x11c>
 4006014:	198d883a 	add	r6,r3,r6
 4006018:	29c00003 	ldbu	r7,0(r5)
 400601c:	18c00044 	addi	r3,r3,1
 4006020:	29400044 	addi	r5,r5,1
 4006024:	19ffffc5 	stb	r7,-1(r3)
 4006028:	19bffb1e 	bne	r3,r6,4006018 <__alt_data_end+0xfc006018>
 400602c:	dfc00217 	ldw	ra,8(sp)
 4006030:	dc400117 	ldw	r17,4(sp)
 4006034:	dc000017 	ldw	r16,0(sp)
 4006038:	dec00304 	addi	sp,sp,12
 400603c:	f800283a 	ret
 4006040:	2007883a 	mov	r3,r4
 4006044:	003ff206 	br	4006010 <__alt_data_end+0xfc006010>
 4006048:	2007883a 	mov	r3,r4
 400604c:	003ff106 	br	4006014 <__alt_data_end+0xfc006014>
 4006050:	200d883a 	mov	r6,r4
 4006054:	003fee06 	br	4006010 <__alt_data_end+0xfc006010>

04006058 <alt_irq_register>:
 */
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
 4006058:	defff004 	addi	sp,sp,-64
 400605c:	df000f15 	stw	fp,60(sp)
 4006060:	df000f04 	addi	fp,sp,60
 4006064:	e13ffd15 	stw	r4,-12(fp)
 4006068:	e17ffe15 	stw	r5,-8(fp)
 400606c:	e1bfff15 	stw	r6,-4(fp)
  int rc = -EINVAL;  
 4006070:	00bffa84 	movi	r2,-22
 4006074:	e0bff115 	stw	r2,-60(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4006078:	e0bffd17 	ldw	r2,-12(fp)
 400607c:	10800828 	cmpgeui	r2,r2,32
 4006080:	1000501e 	bne	r2,zero,40061c4 <alt_irq_register+0x16c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006084:	0005303a 	rdctl	r2,status
 4006088:	e0bff615 	stw	r2,-40(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400608c:	e0fff617 	ldw	r3,-40(fp)
 4006090:	00bfff84 	movi	r2,-2
 4006094:	1884703a 	and	r2,r3,r2
 4006098:	1001703a 	wrctl	status,r2
  
  return context;
 400609c:	e0bff617 	ldw	r2,-40(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all ();
 40060a0:	e0bff315 	stw	r2,-52(fp)

    alt_irq[id].handler = handler;
 40060a4:	00810074 	movhi	r2,1025
 40060a8:	10b0b204 	addi	r2,r2,-15672
 40060ac:	e0fffd17 	ldw	r3,-12(fp)
 40060b0:	180690fa 	slli	r3,r3,3
 40060b4:	10c5883a 	add	r2,r2,r3
 40060b8:	e0ffff17 	ldw	r3,-4(fp)
 40060bc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = context;
 40060c0:	00810074 	movhi	r2,1025
 40060c4:	10b0b204 	addi	r2,r2,-15672
 40060c8:	e0fffd17 	ldw	r3,-12(fp)
 40060cc:	180690fa 	slli	r3,r3,3
 40060d0:	10c5883a 	add	r2,r2,r3
 40060d4:	10800104 	addi	r2,r2,4
 40060d8:	e0fffe17 	ldw	r3,-8(fp)
 40060dc:	10c00015 	stw	r3,0(r2)

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
 40060e0:	e0bfff17 	ldw	r2,-4(fp)
 40060e4:	10001926 	beq	r2,zero,400614c <alt_irq_register+0xf4>
 40060e8:	e0bffd17 	ldw	r2,-12(fp)
 40060ec:	e0bff215 	stw	r2,-56(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40060f0:	0005303a 	rdctl	r2,status
 40060f4:	e0bff715 	stw	r2,-36(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40060f8:	e0fff717 	ldw	r3,-36(fp)
 40060fc:	00bfff84 	movi	r2,-2
 4006100:	1884703a 	and	r2,r3,r2
 4006104:	1001703a 	wrctl	status,r2
  
  return context;
 4006108:	e0bff717 	ldw	r2,-36(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400610c:	e0bff815 	stw	r2,-32(fp)

  alt_irq_active |= (1 << id);
 4006110:	00c00044 	movi	r3,1
 4006114:	e0bff217 	ldw	r2,-56(fp)
 4006118:	1884983a 	sll	r2,r3,r2
 400611c:	1007883a 	mov	r3,r2
 4006120:	d0a63117 	ldw	r2,-26428(gp)
 4006124:	1884b03a 	or	r2,r3,r2
 4006128:	d0a63115 	stw	r2,-26428(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400612c:	d0a63117 	ldw	r2,-26428(gp)
 4006130:	100170fa 	wrctl	ienable,r2
 4006134:	e0bff817 	ldw	r2,-32(fp)
 4006138:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400613c:	e0bff917 	ldw	r2,-28(fp)
 4006140:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4006144:	0005883a 	mov	r2,zero
 4006148:	00001906 	br	40061b0 <alt_irq_register+0x158>
 400614c:	e0bffd17 	ldw	r2,-12(fp)
 4006150:	e0bff415 	stw	r2,-48(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006154:	0005303a 	rdctl	r2,status
 4006158:	e0bffa15 	stw	r2,-24(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400615c:	e0fffa17 	ldw	r3,-24(fp)
 4006160:	00bfff84 	movi	r2,-2
 4006164:	1884703a 	and	r2,r3,r2
 4006168:	1001703a 	wrctl	status,r2
  
  return context;
 400616c:	e0bffa17 	ldw	r2,-24(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4006170:	e0bffb15 	stw	r2,-20(fp)

  alt_irq_active &= ~(1 << id);
 4006174:	00c00044 	movi	r3,1
 4006178:	e0bff417 	ldw	r2,-48(fp)
 400617c:	1884983a 	sll	r2,r3,r2
 4006180:	0084303a 	nor	r2,zero,r2
 4006184:	1007883a 	mov	r3,r2
 4006188:	d0a63117 	ldw	r2,-26428(gp)
 400618c:	1884703a 	and	r2,r3,r2
 4006190:	d0a63115 	stw	r2,-26428(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4006194:	d0a63117 	ldw	r2,-26428(gp)
 4006198:	100170fa 	wrctl	ienable,r2
 400619c:	e0bffb17 	ldw	r2,-20(fp)
 40061a0:	e0bffc15 	stw	r2,-16(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40061a4:	e0bffc17 	ldw	r2,-16(fp)
 40061a8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40061ac:	0005883a 	mov	r2,zero
 40061b0:	e0bff115 	stw	r2,-60(fp)
 40061b4:	e0bff317 	ldw	r2,-52(fp)
 40061b8:	e0bff515 	stw	r2,-44(fp)
 40061bc:	e0bff517 	ldw	r2,-44(fp)
 40061c0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }
  return rc; 
 40061c4:	e0bff117 	ldw	r2,-60(fp)
}
 40061c8:	e037883a 	mov	sp,fp
 40061cc:	df000017 	ldw	fp,0(sp)
 40061d0:	dec00104 	addi	sp,sp,4
 40061d4:	f800283a 	ret

040061d8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 40061d8:	defffc04 	addi	sp,sp,-16
 40061dc:	df000315 	stw	fp,12(sp)
 40061e0:	df000304 	addi	fp,sp,12
 40061e4:	e13ffd15 	stw	r4,-12(fp)
 40061e8:	e17ffe15 	stw	r5,-8(fp)
 40061ec:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 40061f0:	e0fffe17 	ldw	r3,-8(fp)
 40061f4:	e0bffd17 	ldw	r2,-12(fp)
 40061f8:	18800c26 	beq	r3,r2,400622c <alt_load_section+0x54>
  {
    while( to != end )
 40061fc:	00000806 	br	4006220 <alt_load_section+0x48>
    {
      *to++ = *from++;
 4006200:	e0bffe17 	ldw	r2,-8(fp)
 4006204:	10c00104 	addi	r3,r2,4
 4006208:	e0fffe15 	stw	r3,-8(fp)
 400620c:	e0fffd17 	ldw	r3,-12(fp)
 4006210:	19000104 	addi	r4,r3,4
 4006214:	e13ffd15 	stw	r4,-12(fp)
 4006218:	18c00017 	ldw	r3,0(r3)
 400621c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 4006220:	e0fffe17 	ldw	r3,-8(fp)
 4006224:	e0bfff17 	ldw	r2,-4(fp)
 4006228:	18bff51e 	bne	r3,r2,4006200 <__alt_data_end+0xfc006200>
    {
      *to++ = *from++;
    }
  }
}
 400622c:	0001883a 	nop
 4006230:	e037883a 	mov	sp,fp
 4006234:	df000017 	ldw	fp,0(sp)
 4006238:	dec00104 	addi	sp,sp,4
 400623c:	f800283a 	ret

04006240 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 4006240:	defffe04 	addi	sp,sp,-8
 4006244:	dfc00115 	stw	ra,4(sp)
 4006248:	df000015 	stw	fp,0(sp)
 400624c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 4006250:	01810074 	movhi	r6,1025
 4006254:	31aa5704 	addi	r6,r6,-22180
 4006258:	01410074 	movhi	r5,1025
 400625c:	29644204 	addi	r5,r5,-28408
 4006260:	01010074 	movhi	r4,1025
 4006264:	212a5704 	addi	r4,r4,-22180
 4006268:	40061d80 	call	40061d8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400626c:	01810034 	movhi	r6,1024
 4006270:	31808c04 	addi	r6,r6,560
 4006274:	01410034 	movhi	r5,1024
 4006278:	29400804 	addi	r5,r5,32
 400627c:	01010034 	movhi	r4,1024
 4006280:	21000804 	addi	r4,r4,32
 4006284:	40061d80 	call	40061d8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 4006288:	01810074 	movhi	r6,1025
 400628c:	31a44204 	addi	r6,r6,-28408
 4006290:	01410074 	movhi	r5,1025
 4006294:	2963eb04 	addi	r5,r5,-28756
 4006298:	01010074 	movhi	r4,1025
 400629c:	2123eb04 	addi	r4,r4,-28756
 40062a0:	40061d80 	call	40061d8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 40062a4:	4007dac0 	call	4007dac <alt_dcache_flush_all>
  alt_icache_flush_all();
 40062a8:	4007f980 	call	4007f98 <alt_icache_flush_all>
}
 40062ac:	0001883a 	nop
 40062b0:	e037883a 	mov	sp,fp
 40062b4:	dfc00117 	ldw	ra,4(sp)
 40062b8:	df000017 	ldw	fp,0(sp)
 40062bc:	dec00204 	addi	sp,sp,8
 40062c0:	f800283a 	ret

040062c4 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 40062c4:	defffd04 	addi	sp,sp,-12
 40062c8:	dfc00215 	stw	ra,8(sp)
 40062cc:	df000115 	stw	fp,4(sp)
 40062d0:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 40062d4:	0009883a 	mov	r4,zero
 40062d8:	40063a40 	call	40063a4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 40062dc:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 40062e0:	40063dc0 	call	40063dc <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 40062e4:	01810074 	movhi	r6,1025
 40062e8:	31a42b04 	addi	r6,r6,-28500
 40062ec:	01410074 	movhi	r5,1025
 40062f0:	29642b04 	addi	r5,r5,-28500
 40062f4:	01010074 	movhi	r4,1025
 40062f8:	21242b04 	addi	r4,r4,-28500
 40062fc:	400833c0 	call	400833c <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 4006300:	4007ed80 	call	4007ed8 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 4006304:	01010034 	movhi	r4,1024
 4006308:	211fce04 	addi	r4,r4,32568
 400630c:	4008b800 	call	4008b80 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 4006310:	d0a63217 	ldw	r2,-26424(gp)
 4006314:	d0e63317 	ldw	r3,-26420(gp)
 4006318:	d1263417 	ldw	r4,-26416(gp)
 400631c:	200d883a 	mov	r6,r4
 4006320:	180b883a 	mov	r5,r3
 4006324:	1009883a 	mov	r4,r2
 4006328:	400151c0 	call	400151c <main>
 400632c:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 4006330:	01000044 	movi	r4,1
 4006334:	4007cd40 	call	4007cd4 <close>
  exit (result);
 4006338:	e13fff17 	ldw	r4,-4(fp)
 400633c:	4008b940 	call	4008b94 <exit>

04006340 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 4006340:	defffd04 	addi	sp,sp,-12
 4006344:	dfc00215 	stw	ra,8(sp)
 4006348:	df000115 	stw	fp,4(sp)
 400634c:	df000104 	addi	fp,sp,4
 4006350:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 4006354:	e13fff17 	ldw	r4,-4(fp)
 4006358:	4007b400 	call	4007b40 <alt_busy_sleep>
}
 400635c:	e037883a 	mov	sp,fp
 4006360:	dfc00117 	ldw	ra,4(sp)
 4006364:	df000017 	ldw	fp,0(sp)
 4006368:	dec00204 	addi	sp,sp,8
 400636c:	f800283a 	ret

04006370 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 4006370:	defffd04 	addi	sp,sp,-12
 4006374:	dfc00215 	stw	ra,8(sp)
 4006378:	df000115 	stw	fp,4(sp)
 400637c:	df000104 	addi	fp,sp,4
 4006380:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 4006384:	d1600d04 	addi	r5,gp,-32716
 4006388:	e13fff17 	ldw	r4,-4(fp)
 400638c:	4007e340 	call	4007e34 <alt_dev_llist_insert>
}
 4006390:	e037883a 	mov	sp,fp
 4006394:	dfc00117 	ldw	ra,4(sp)
 4006398:	df000017 	ldw	fp,0(sp)
 400639c:	dec00204 	addi	sp,sp,8
 40063a0:	f800283a 	ret

040063a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 40063a4:	defffd04 	addi	sp,sp,-12
 40063a8:	dfc00215 	stw	ra,8(sp)
 40063ac:	df000115 	stw	fp,4(sp)
 40063b0:	df000104 	addi	fp,sp,4
 40063b4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 40063b8:	40088640 	call	4008864 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 40063bc:	00800044 	movi	r2,1
 40063c0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 40063c4:	0001883a 	nop
 40063c8:	e037883a 	mov	sp,fp
 40063cc:	dfc00117 	ldw	ra,4(sp)
 40063d0:	df000017 	ldw	fp,0(sp)
 40063d4:	dec00204 	addi	sp,sp,8
 40063d8:	f800283a 	ret

040063dc <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 40063dc:	defffd04 	addi	sp,sp,-12
 40063e0:	dfc00215 	stw	ra,8(sp)
 40063e4:	df000115 	stw	fp,4(sp)
 40063e8:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 40063ec:	000d883a 	mov	r6,zero
 40063f0:	000b883a 	mov	r5,zero
 40063f4:	01010074 	movhi	r4,1025
 40063f8:	21247904 	addi	r4,r4,-28188
 40063fc:	40068380 	call	4006838 <altera_avalon_jtag_uart_init>
 4006400:	01010074 	movhi	r4,1025
 4006404:	21246f04 	addi	r4,r4,-28228
 4006408:	40063700 	call	4006370 <alt_dev_reg>
    ALTERA_AVALON_UART_INIT ( BLE_UART, ble_uart);
 400640c:	01800044 	movi	r6,1
 4006410:	000b883a 	mov	r5,zero
 4006414:	01010074 	movhi	r4,1025
 4006418:	21289104 	addi	r4,r4,-23996
 400641c:	400724c0 	call	400724c <altera_avalon_uart_init>
 4006420:	01010074 	movhi	r4,1025
 4006424:	21288704 	addi	r4,r4,-24036
 4006428:	40063700 	call	4006370 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_DMA_CONTROLLER, video_dma_controller);
 400642c:	00810074 	movhi	r2,1025
 4006430:	10a8b804 	addi	r2,r2,-23840
 4006434:	10800a17 	ldw	r2,40(r2)
 4006438:	10800017 	ldw	r2,0(r2)
 400643c:	1007883a 	mov	r3,r2
 4006440:	00810074 	movhi	r2,1025
 4006444:	10a8b804 	addi	r2,r2,-23840
 4006448:	10c00b15 	stw	r3,44(r2)
 400644c:	00810074 	movhi	r2,1025
 4006450:	10a8b804 	addi	r2,r2,-23840
 4006454:	10800a17 	ldw	r2,40(r2)
 4006458:	10800104 	addi	r2,r2,4
 400645c:	10800017 	ldw	r2,0(r2)
 4006460:	1007883a 	mov	r3,r2
 4006464:	00810074 	movhi	r2,1025
 4006468:	10a8b804 	addi	r2,r2,-23840
 400646c:	10c00c15 	stw	r3,48(r2)
 4006470:	00810074 	movhi	r2,1025
 4006474:	10a8b804 	addi	r2,r2,-23840
 4006478:	10800a17 	ldw	r2,40(r2)
 400647c:	10800204 	addi	r2,r2,8
 4006480:	10800017 	ldw	r2,0(r2)
 4006484:	10ffffcc 	andi	r3,r2,65535
 4006488:	00810074 	movhi	r2,1025
 400648c:	10a8b804 	addi	r2,r2,-23840
 4006490:	10c01115 	stw	r3,68(r2)
 4006494:	00810074 	movhi	r2,1025
 4006498:	10a8b804 	addi	r2,r2,-23840
 400649c:	10800a17 	ldw	r2,40(r2)
 40064a0:	10800204 	addi	r2,r2,8
 40064a4:	10800017 	ldw	r2,0(r2)
 40064a8:	1006d43a 	srli	r3,r2,16
 40064ac:	00810074 	movhi	r2,1025
 40064b0:	10a8b804 	addi	r2,r2,-23840
 40064b4:	10c01215 	stw	r3,72(r2)
 40064b8:	00810074 	movhi	r2,1025
 40064bc:	10a8b804 	addi	r2,r2,-23840
 40064c0:	10800a17 	ldw	r2,40(r2)
 40064c4:	10800304 	addi	r2,r2,12
 40064c8:	10800017 	ldw	r2,0(r2)
 40064cc:	1005d07a 	srai	r2,r2,1
 40064d0:	10c0004c 	andi	r3,r2,1
 40064d4:	00810074 	movhi	r2,1025
 40064d8:	10a8b804 	addi	r2,r2,-23840
 40064dc:	10c00d15 	stw	r3,52(r2)
 40064e0:	00810074 	movhi	r2,1025
 40064e4:	10a8b804 	addi	r2,r2,-23840
 40064e8:	10800a17 	ldw	r2,40(r2)
 40064ec:	10800304 	addi	r2,r2,12
 40064f0:	10800017 	ldw	r2,0(r2)
 40064f4:	1005d23a 	srai	r2,r2,8
 40064f8:	108003cc 	andi	r2,r2,15
 40064fc:	10800044 	addi	r2,r2,1
 4006500:	1007883a 	mov	r3,r2
 4006504:	00810074 	movhi	r2,1025
 4006508:	10a8b804 	addi	r2,r2,-23840
 400650c:	10c00e15 	stw	r3,56(r2)
 4006510:	00810074 	movhi	r2,1025
 4006514:	10a8b804 	addi	r2,r2,-23840
 4006518:	10800a17 	ldw	r2,40(r2)
 400651c:	10800304 	addi	r2,r2,12
 4006520:	10800017 	ldw	r2,0(r2)
 4006524:	1005d1ba 	srai	r2,r2,6
 4006528:	108000cc 	andi	r2,r2,3
 400652c:	10800044 	addi	r2,r2,1
 4006530:	1007883a 	mov	r3,r2
 4006534:	00810074 	movhi	r2,1025
 4006538:	10a8b804 	addi	r2,r2,-23840
 400653c:	10c00f15 	stw	r3,60(r2)
 4006540:	00810074 	movhi	r2,1025
 4006544:	10a8b804 	addi	r2,r2,-23840
 4006548:	10800e17 	ldw	r2,56(r2)
 400654c:	1007883a 	mov	r3,r2
 4006550:	00810074 	movhi	r2,1025
 4006554:	10a8b804 	addi	r2,r2,-23840
 4006558:	10800f17 	ldw	r2,60(r2)
 400655c:	100b883a 	mov	r5,r2
 4006560:	1809883a 	mov	r4,r3
 4006564:	4001d9c0 	call	4001d9c <__mulsi3>
 4006568:	e0bfff05 	stb	r2,-4(fp)
 400656c:	e0bfff03 	ldbu	r2,-4(fp)
 4006570:	10800268 	cmpgeui	r2,r2,9
 4006574:	1000051e 	bne	r2,zero,400658c <alt_sys_init+0x1b0>
 4006578:	00810074 	movhi	r2,1025
 400657c:	10a8b804 	addi	r2,r2,-23840
 4006580:	00c00044 	movi	r3,1
 4006584:	10c01015 	stw	r3,64(r2)
 4006588:	00000c06 	br	40065bc <alt_sys_init+0x1e0>
 400658c:	e0bfff03 	ldbu	r2,-4(fp)
 4006590:	10800468 	cmpgeui	r2,r2,17
 4006594:	1000051e 	bne	r2,zero,40065ac <alt_sys_init+0x1d0>
 4006598:	00810074 	movhi	r2,1025
 400659c:	10a8b804 	addi	r2,r2,-23840
 40065a0:	00c00084 	movi	r3,2
 40065a4:	10c01015 	stw	r3,64(r2)
 40065a8:	00000406 	br	40065bc <alt_sys_init+0x1e0>
 40065ac:	00810074 	movhi	r2,1025
 40065b0:	10a8b804 	addi	r2,r2,-23840
 40065b4:	00c00104 	movi	r3,4
 40065b8:	10c01015 	stw	r3,64(r2)
 40065bc:	00810074 	movhi	r2,1025
 40065c0:	10a8b804 	addi	r2,r2,-23840
 40065c4:	10800a17 	ldw	r2,40(r2)
 40065c8:	10800304 	addi	r2,r2,12
 40065cc:	10800017 	ldw	r2,0(r2)
 40065d0:	1005d43a 	srai	r2,r2,16
 40065d4:	e0bfff45 	stb	r2,-3(fp)
 40065d8:	00810074 	movhi	r2,1025
 40065dc:	10a8b804 	addi	r2,r2,-23840
 40065e0:	10800a17 	ldw	r2,40(r2)
 40065e4:	10800304 	addi	r2,r2,12
 40065e8:	10800017 	ldw	r2,0(r2)
 40065ec:	1004d63a 	srli	r2,r2,24
 40065f0:	e0bfff85 	stb	r2,-2(fp)
 40065f4:	00810074 	movhi	r2,1025
 40065f8:	10a8b804 	addi	r2,r2,-23840
 40065fc:	10801017 	ldw	r2,64(r2)
 4006600:	10800058 	cmpnei	r2,r2,1
 4006604:	1000041e 	bne	r2,zero,4006618 <alt_sys_init+0x23c>
 4006608:	00810074 	movhi	r2,1025
 400660c:	10a8b804 	addi	r2,r2,-23840
 4006610:	10001315 	stw	zero,76(r2)
 4006614:	00000e06 	br	4006650 <alt_sys_init+0x274>
 4006618:	00810074 	movhi	r2,1025
 400661c:	10a8b804 	addi	r2,r2,-23840
 4006620:	10801017 	ldw	r2,64(r2)
 4006624:	10800098 	cmpnei	r2,r2,2
 4006628:	1000051e 	bne	r2,zero,4006640 <alt_sys_init+0x264>
 400662c:	00810074 	movhi	r2,1025
 4006630:	10a8b804 	addi	r2,r2,-23840
 4006634:	00c00044 	movi	r3,1
 4006638:	10c01315 	stw	r3,76(r2)
 400663c:	00000406 	br	4006650 <alt_sys_init+0x274>
 4006640:	00810074 	movhi	r2,1025
 4006644:	10a8b804 	addi	r2,r2,-23840
 4006648:	00c00084 	movi	r3,2
 400664c:	10c01315 	stw	r3,76(r2)
 4006650:	e0bfff43 	ldbu	r2,-3(fp)
 4006654:	00c00804 	movi	r3,32
 4006658:	1885c83a 	sub	r2,r3,r2
 400665c:	00ffffc4 	movi	r3,-1
 4006660:	1886d83a 	srl	r3,r3,r2
 4006664:	00810074 	movhi	r2,1025
 4006668:	10a8b804 	addi	r2,r2,-23840
 400666c:	10c01415 	stw	r3,80(r2)
 4006670:	e0ffff43 	ldbu	r3,-3(fp)
 4006674:	00810074 	movhi	r2,1025
 4006678:	10a8b804 	addi	r2,r2,-23840
 400667c:	10801317 	ldw	r2,76(r2)
 4006680:	1887883a 	add	r3,r3,r2
 4006684:	00810074 	movhi	r2,1025
 4006688:	10a8b804 	addi	r2,r2,-23840
 400668c:	10c01515 	stw	r3,84(r2)
 4006690:	e0bfff83 	ldbu	r2,-2(fp)
 4006694:	00c00804 	movi	r3,32
 4006698:	1885c83a 	sub	r2,r3,r2
 400669c:	00ffffc4 	movi	r3,-1
 40066a0:	1886d83a 	srl	r3,r3,r2
 40066a4:	00810074 	movhi	r2,1025
 40066a8:	10a8b804 	addi	r2,r2,-23840
 40066ac:	10c01615 	stw	r3,88(r2)
 40066b0:	01010074 	movhi	r4,1025
 40066b4:	2128b804 	addi	r4,r4,-23840
 40066b8:	40063700 	call	4006370 <alt_dev_reg>
}
 40066bc:	0001883a 	nop
 40066c0:	e037883a 	mov	sp,fp
 40066c4:	dfc00117 	ldw	ra,4(sp)
 40066c8:	df000017 	ldw	fp,0(sp)
 40066cc:	dec00204 	addi	sp,sp,8
 40066d0:	f800283a 	ret

040066d4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 40066d4:	defffa04 	addi	sp,sp,-24
 40066d8:	dfc00515 	stw	ra,20(sp)
 40066dc:	df000415 	stw	fp,16(sp)
 40066e0:	df000404 	addi	fp,sp,16
 40066e4:	e13ffd15 	stw	r4,-12(fp)
 40066e8:	e17ffe15 	stw	r5,-8(fp)
 40066ec:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40066f0:	e0bffd17 	ldw	r2,-12(fp)
 40066f4:	10800017 	ldw	r2,0(r2)
 40066f8:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 40066fc:	e0bffc17 	ldw	r2,-16(fp)
 4006700:	10c00a04 	addi	r3,r2,40
 4006704:	e0bffd17 	ldw	r2,-12(fp)
 4006708:	10800217 	ldw	r2,8(r2)
 400670c:	100f883a 	mov	r7,r2
 4006710:	e1bfff17 	ldw	r6,-4(fp)
 4006714:	e17ffe17 	ldw	r5,-8(fp)
 4006718:	1809883a 	mov	r4,r3
 400671c:	4006cfc0 	call	4006cfc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 4006720:	e037883a 	mov	sp,fp
 4006724:	dfc00117 	ldw	ra,4(sp)
 4006728:	df000017 	ldw	fp,0(sp)
 400672c:	dec00204 	addi	sp,sp,8
 4006730:	f800283a 	ret

04006734 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 4006734:	defffa04 	addi	sp,sp,-24
 4006738:	dfc00515 	stw	ra,20(sp)
 400673c:	df000415 	stw	fp,16(sp)
 4006740:	df000404 	addi	fp,sp,16
 4006744:	e13ffd15 	stw	r4,-12(fp)
 4006748:	e17ffe15 	stw	r5,-8(fp)
 400674c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 4006750:	e0bffd17 	ldw	r2,-12(fp)
 4006754:	10800017 	ldw	r2,0(r2)
 4006758:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400675c:	e0bffc17 	ldw	r2,-16(fp)
 4006760:	10c00a04 	addi	r3,r2,40
 4006764:	e0bffd17 	ldw	r2,-12(fp)
 4006768:	10800217 	ldw	r2,8(r2)
 400676c:	100f883a 	mov	r7,r2
 4006770:	e1bfff17 	ldw	r6,-4(fp)
 4006774:	e17ffe17 	ldw	r5,-8(fp)
 4006778:	1809883a 	mov	r4,r3
 400677c:	4006f180 	call	4006f18 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 4006780:	e037883a 	mov	sp,fp
 4006784:	dfc00117 	ldw	ra,4(sp)
 4006788:	df000017 	ldw	fp,0(sp)
 400678c:	dec00204 	addi	sp,sp,8
 4006790:	f800283a 	ret

04006794 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 4006794:	defffc04 	addi	sp,sp,-16
 4006798:	dfc00315 	stw	ra,12(sp)
 400679c:	df000215 	stw	fp,8(sp)
 40067a0:	df000204 	addi	fp,sp,8
 40067a4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 40067a8:	e0bfff17 	ldw	r2,-4(fp)
 40067ac:	10800017 	ldw	r2,0(r2)
 40067b0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 40067b4:	e0bffe17 	ldw	r2,-8(fp)
 40067b8:	10c00a04 	addi	r3,r2,40
 40067bc:	e0bfff17 	ldw	r2,-4(fp)
 40067c0:	10800217 	ldw	r2,8(r2)
 40067c4:	100b883a 	mov	r5,r2
 40067c8:	1809883a 	mov	r4,r3
 40067cc:	4006ba40 	call	4006ba4 <altera_avalon_jtag_uart_close>
}
 40067d0:	e037883a 	mov	sp,fp
 40067d4:	dfc00117 	ldw	ra,4(sp)
 40067d8:	df000017 	ldw	fp,0(sp)
 40067dc:	dec00204 	addi	sp,sp,8
 40067e0:	f800283a 	ret

040067e4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 40067e4:	defffa04 	addi	sp,sp,-24
 40067e8:	dfc00515 	stw	ra,20(sp)
 40067ec:	df000415 	stw	fp,16(sp)
 40067f0:	df000404 	addi	fp,sp,16
 40067f4:	e13ffd15 	stw	r4,-12(fp)
 40067f8:	e17ffe15 	stw	r5,-8(fp)
 40067fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 4006800:	e0bffd17 	ldw	r2,-12(fp)
 4006804:	10800017 	ldw	r2,0(r2)
 4006808:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400680c:	e0bffc17 	ldw	r2,-16(fp)
 4006810:	10800a04 	addi	r2,r2,40
 4006814:	e1bfff17 	ldw	r6,-4(fp)
 4006818:	e17ffe17 	ldw	r5,-8(fp)
 400681c:	1009883a 	mov	r4,r2
 4006820:	4006c0c0 	call	4006c0c <altera_avalon_jtag_uart_ioctl>
}
 4006824:	e037883a 	mov	sp,fp
 4006828:	dfc00117 	ldw	ra,4(sp)
 400682c:	df000017 	ldw	fp,0(sp)
 4006830:	dec00204 	addi	sp,sp,8
 4006834:	f800283a 	ret

04006838 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 4006838:	defffa04 	addi	sp,sp,-24
 400683c:	dfc00515 	stw	ra,20(sp)
 4006840:	df000415 	stw	fp,16(sp)
 4006844:	df000404 	addi	fp,sp,16
 4006848:	e13ffd15 	stw	r4,-12(fp)
 400684c:	e17ffe15 	stw	r5,-8(fp)
 4006850:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4006854:	e0bffd17 	ldw	r2,-12(fp)
 4006858:	00c00044 	movi	r3,1
 400685c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 4006860:	e0bffd17 	ldw	r2,-12(fp)
 4006864:	10800017 	ldw	r2,0(r2)
 4006868:	10800104 	addi	r2,r2,4
 400686c:	1007883a 	mov	r3,r2
 4006870:	e0bffd17 	ldw	r2,-12(fp)
 4006874:	10800817 	ldw	r2,32(r2)
 4006878:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400687c:	e0bffe17 	ldw	r2,-8(fp)
 4006880:	e0ffff17 	ldw	r3,-4(fp)
 4006884:	d8000015 	stw	zero,0(sp)
 4006888:	e1fffd17 	ldw	r7,-12(fp)
 400688c:	01810034 	movhi	r6,1024
 4006890:	319a3e04 	addi	r6,r6,26872
 4006894:	180b883a 	mov	r5,r3
 4006898:	1009883a 	mov	r4,r2
 400689c:	4007fb80 	call	4007fb8 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 40068a0:	e0bffd17 	ldw	r2,-12(fp)
 40068a4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 40068a8:	e0bffd17 	ldw	r2,-12(fp)
 40068ac:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 40068b0:	d0e63517 	ldw	r3,-26412(gp)
 40068b4:	e1fffd17 	ldw	r7,-12(fp)
 40068b8:	01810034 	movhi	r6,1024
 40068bc:	319ac104 	addi	r6,r6,27396
 40068c0:	180b883a 	mov	r5,r3
 40068c4:	1009883a 	mov	r4,r2
 40068c8:	4007a140 	call	4007a14 <alt_alarm_start>
 40068cc:	1000040e 	bge	r2,zero,40068e0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 40068d0:	e0fffd17 	ldw	r3,-12(fp)
 40068d4:	00a00034 	movhi	r2,32768
 40068d8:	10bfffc4 	addi	r2,r2,-1
 40068dc:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 40068e0:	0001883a 	nop
 40068e4:	e037883a 	mov	sp,fp
 40068e8:	dfc00117 	ldw	ra,4(sp)
 40068ec:	df000017 	ldw	fp,0(sp)
 40068f0:	dec00204 	addi	sp,sp,8
 40068f4:	f800283a 	ret

040068f8 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 40068f8:	defff804 	addi	sp,sp,-32
 40068fc:	df000715 	stw	fp,28(sp)
 4006900:	df000704 	addi	fp,sp,28
 4006904:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 4006908:	e0bfff17 	ldw	r2,-4(fp)
 400690c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 4006910:	e0bffb17 	ldw	r2,-20(fp)
 4006914:	10800017 	ldw	r2,0(r2)
 4006918:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400691c:	e0bffc17 	ldw	r2,-16(fp)
 4006920:	10800104 	addi	r2,r2,4
 4006924:	10800037 	ldwio	r2,0(r2)
 4006928:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400692c:	e0bffd17 	ldw	r2,-12(fp)
 4006930:	1080c00c 	andi	r2,r2,768
 4006934:	10006d26 	beq	r2,zero,4006aec <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 4006938:	e0bffd17 	ldw	r2,-12(fp)
 400693c:	1080400c 	andi	r2,r2,256
 4006940:	10003526 	beq	r2,zero,4006a18 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 4006944:	00800074 	movhi	r2,1
 4006948:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400694c:	e0bffb17 	ldw	r2,-20(fp)
 4006950:	10800a17 	ldw	r2,40(r2)
 4006954:	10800044 	addi	r2,r2,1
 4006958:	1081ffcc 	andi	r2,r2,2047
 400695c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 4006960:	e0bffb17 	ldw	r2,-20(fp)
 4006964:	10c00b17 	ldw	r3,44(r2)
 4006968:	e0bffe17 	ldw	r2,-8(fp)
 400696c:	18801526 	beq	r3,r2,40069c4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 4006970:	e0bffc17 	ldw	r2,-16(fp)
 4006974:	10800037 	ldwio	r2,0(r2)
 4006978:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400697c:	e0bff917 	ldw	r2,-28(fp)
 4006980:	10a0000c 	andi	r2,r2,32768
 4006984:	10001126 	beq	r2,zero,40069cc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 4006988:	e0bffb17 	ldw	r2,-20(fp)
 400698c:	10800a17 	ldw	r2,40(r2)
 4006990:	e0fff917 	ldw	r3,-28(fp)
 4006994:	1809883a 	mov	r4,r3
 4006998:	e0fffb17 	ldw	r3,-20(fp)
 400699c:	1885883a 	add	r2,r3,r2
 40069a0:	10800e04 	addi	r2,r2,56
 40069a4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 40069a8:	e0bffb17 	ldw	r2,-20(fp)
 40069ac:	10800a17 	ldw	r2,40(r2)
 40069b0:	10800044 	addi	r2,r2,1
 40069b4:	10c1ffcc 	andi	r3,r2,2047
 40069b8:	e0bffb17 	ldw	r2,-20(fp)
 40069bc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 40069c0:	003fe206 	br	400694c <__alt_data_end+0xfc00694c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 40069c4:	0001883a 	nop
 40069c8:	00000106 	br	40069d0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 40069cc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 40069d0:	e0bff917 	ldw	r2,-28(fp)
 40069d4:	10bfffec 	andhi	r2,r2,65535
 40069d8:	10000f26 	beq	r2,zero,4006a18 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 40069dc:	e0bffb17 	ldw	r2,-20(fp)
 40069e0:	10c00817 	ldw	r3,32(r2)
 40069e4:	00bfff84 	movi	r2,-2
 40069e8:	1886703a 	and	r3,r3,r2
 40069ec:	e0bffb17 	ldw	r2,-20(fp)
 40069f0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 40069f4:	e0bffc17 	ldw	r2,-16(fp)
 40069f8:	10800104 	addi	r2,r2,4
 40069fc:	1007883a 	mov	r3,r2
 4006a00:	e0bffb17 	ldw	r2,-20(fp)
 4006a04:	10800817 	ldw	r2,32(r2)
 4006a08:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4006a0c:	e0bffc17 	ldw	r2,-16(fp)
 4006a10:	10800104 	addi	r2,r2,4
 4006a14:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 4006a18:	e0bffd17 	ldw	r2,-12(fp)
 4006a1c:	1080800c 	andi	r2,r2,512
 4006a20:	103fbe26 	beq	r2,zero,400691c <__alt_data_end+0xfc00691c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 4006a24:	e0bffd17 	ldw	r2,-12(fp)
 4006a28:	1004d43a 	srli	r2,r2,16
 4006a2c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 4006a30:	00001406 	br	4006a84 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 4006a34:	e0bffc17 	ldw	r2,-16(fp)
 4006a38:	e0fffb17 	ldw	r3,-20(fp)
 4006a3c:	18c00d17 	ldw	r3,52(r3)
 4006a40:	e13ffb17 	ldw	r4,-20(fp)
 4006a44:	20c7883a 	add	r3,r4,r3
 4006a48:	18c20e04 	addi	r3,r3,2104
 4006a4c:	18c00003 	ldbu	r3,0(r3)
 4006a50:	18c03fcc 	andi	r3,r3,255
 4006a54:	18c0201c 	xori	r3,r3,128
 4006a58:	18ffe004 	addi	r3,r3,-128
 4006a5c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4006a60:	e0bffb17 	ldw	r2,-20(fp)
 4006a64:	10800d17 	ldw	r2,52(r2)
 4006a68:	10800044 	addi	r2,r2,1
 4006a6c:	10c1ffcc 	andi	r3,r2,2047
 4006a70:	e0bffb17 	ldw	r2,-20(fp)
 4006a74:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 4006a78:	e0bffa17 	ldw	r2,-24(fp)
 4006a7c:	10bfffc4 	addi	r2,r2,-1
 4006a80:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 4006a84:	e0bffa17 	ldw	r2,-24(fp)
 4006a88:	10000526 	beq	r2,zero,4006aa0 <altera_avalon_jtag_uart_irq+0x1a8>
 4006a8c:	e0bffb17 	ldw	r2,-20(fp)
 4006a90:	10c00d17 	ldw	r3,52(r2)
 4006a94:	e0bffb17 	ldw	r2,-20(fp)
 4006a98:	10800c17 	ldw	r2,48(r2)
 4006a9c:	18bfe51e 	bne	r3,r2,4006a34 <__alt_data_end+0xfc006a34>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 4006aa0:	e0bffa17 	ldw	r2,-24(fp)
 4006aa4:	103f9d26 	beq	r2,zero,400691c <__alt_data_end+0xfc00691c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4006aa8:	e0bffb17 	ldw	r2,-20(fp)
 4006aac:	10c00817 	ldw	r3,32(r2)
 4006ab0:	00bfff44 	movi	r2,-3
 4006ab4:	1886703a 	and	r3,r3,r2
 4006ab8:	e0bffb17 	ldw	r2,-20(fp)
 4006abc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4006ac0:	e0bffb17 	ldw	r2,-20(fp)
 4006ac4:	10800017 	ldw	r2,0(r2)
 4006ac8:	10800104 	addi	r2,r2,4
 4006acc:	1007883a 	mov	r3,r2
 4006ad0:	e0bffb17 	ldw	r2,-20(fp)
 4006ad4:	10800817 	ldw	r2,32(r2)
 4006ad8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 4006adc:	e0bffc17 	ldw	r2,-16(fp)
 4006ae0:	10800104 	addi	r2,r2,4
 4006ae4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 4006ae8:	003f8c06 	br	400691c <__alt_data_end+0xfc00691c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 4006aec:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 4006af0:	0001883a 	nop
 4006af4:	e037883a 	mov	sp,fp
 4006af8:	df000017 	ldw	fp,0(sp)
 4006afc:	dec00104 	addi	sp,sp,4
 4006b00:	f800283a 	ret

04006b04 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 4006b04:	defff804 	addi	sp,sp,-32
 4006b08:	df000715 	stw	fp,28(sp)
 4006b0c:	df000704 	addi	fp,sp,28
 4006b10:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 4006b14:	e0bffb17 	ldw	r2,-20(fp)
 4006b18:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 4006b1c:	e0bff917 	ldw	r2,-28(fp)
 4006b20:	10800017 	ldw	r2,0(r2)
 4006b24:	10800104 	addi	r2,r2,4
 4006b28:	10800037 	ldwio	r2,0(r2)
 4006b2c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 4006b30:	e0bffa17 	ldw	r2,-24(fp)
 4006b34:	1081000c 	andi	r2,r2,1024
 4006b38:	10000b26 	beq	r2,zero,4006b68 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 4006b3c:	e0bff917 	ldw	r2,-28(fp)
 4006b40:	10800017 	ldw	r2,0(r2)
 4006b44:	10800104 	addi	r2,r2,4
 4006b48:	1007883a 	mov	r3,r2
 4006b4c:	e0bff917 	ldw	r2,-28(fp)
 4006b50:	10800817 	ldw	r2,32(r2)
 4006b54:	10810014 	ori	r2,r2,1024
 4006b58:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 4006b5c:	e0bff917 	ldw	r2,-28(fp)
 4006b60:	10000915 	stw	zero,36(r2)
 4006b64:	00000a06 	br	4006b90 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 4006b68:	e0bff917 	ldw	r2,-28(fp)
 4006b6c:	10c00917 	ldw	r3,36(r2)
 4006b70:	00a00034 	movhi	r2,32768
 4006b74:	10bfff04 	addi	r2,r2,-4
 4006b78:	10c00536 	bltu	r2,r3,4006b90 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 4006b7c:	e0bff917 	ldw	r2,-28(fp)
 4006b80:	10800917 	ldw	r2,36(r2)
 4006b84:	10c00044 	addi	r3,r2,1
 4006b88:	e0bff917 	ldw	r2,-28(fp)
 4006b8c:	10c00915 	stw	r3,36(r2)
 4006b90:	d0a63517 	ldw	r2,-26412(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 4006b94:	e037883a 	mov	sp,fp
 4006b98:	df000017 	ldw	fp,0(sp)
 4006b9c:	dec00104 	addi	sp,sp,4
 4006ba0:	f800283a 	ret

04006ba4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 4006ba4:	defffd04 	addi	sp,sp,-12
 4006ba8:	df000215 	stw	fp,8(sp)
 4006bac:	df000204 	addi	fp,sp,8
 4006bb0:	e13ffe15 	stw	r4,-8(fp)
 4006bb4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4006bb8:	00000506 	br	4006bd0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 4006bbc:	e0bfff17 	ldw	r2,-4(fp)
 4006bc0:	1090000c 	andi	r2,r2,16384
 4006bc4:	10000226 	beq	r2,zero,4006bd0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 4006bc8:	00bffd44 	movi	r2,-11
 4006bcc:	00000b06 	br	4006bfc <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 4006bd0:	e0bffe17 	ldw	r2,-8(fp)
 4006bd4:	10c00d17 	ldw	r3,52(r2)
 4006bd8:	e0bffe17 	ldw	r2,-8(fp)
 4006bdc:	10800c17 	ldw	r2,48(r2)
 4006be0:	18800526 	beq	r3,r2,4006bf8 <altera_avalon_jtag_uart_close+0x54>
 4006be4:	e0bffe17 	ldw	r2,-8(fp)
 4006be8:	10c00917 	ldw	r3,36(r2)
 4006bec:	e0bffe17 	ldw	r2,-8(fp)
 4006bf0:	10800117 	ldw	r2,4(r2)
 4006bf4:	18bff136 	bltu	r3,r2,4006bbc <__alt_data_end+0xfc006bbc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4006bf8:	0005883a 	mov	r2,zero
}
 4006bfc:	e037883a 	mov	sp,fp
 4006c00:	df000017 	ldw	fp,0(sp)
 4006c04:	dec00104 	addi	sp,sp,4
 4006c08:	f800283a 	ret

04006c0c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 4006c0c:	defffa04 	addi	sp,sp,-24
 4006c10:	df000515 	stw	fp,20(sp)
 4006c14:	df000504 	addi	fp,sp,20
 4006c18:	e13ffd15 	stw	r4,-12(fp)
 4006c1c:	e17ffe15 	stw	r5,-8(fp)
 4006c20:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 4006c24:	00bff9c4 	movi	r2,-25
 4006c28:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 4006c2c:	e0bffe17 	ldw	r2,-8(fp)
 4006c30:	10da8060 	cmpeqi	r3,r2,27137
 4006c34:	1800031e 	bne	r3,zero,4006c44 <altera_avalon_jtag_uart_ioctl+0x38>
 4006c38:	109a80a0 	cmpeqi	r2,r2,27138
 4006c3c:	1000181e 	bne	r2,zero,4006ca0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 4006c40:	00002906 	br	4006ce8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 4006c44:	e0bffd17 	ldw	r2,-12(fp)
 4006c48:	10c00117 	ldw	r3,4(r2)
 4006c4c:	00a00034 	movhi	r2,32768
 4006c50:	10bfffc4 	addi	r2,r2,-1
 4006c54:	18802126 	beq	r3,r2,4006cdc <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 4006c58:	e0bfff17 	ldw	r2,-4(fp)
 4006c5c:	10800017 	ldw	r2,0(r2)
 4006c60:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 4006c64:	e0bffc17 	ldw	r2,-16(fp)
 4006c68:	10800090 	cmplti	r2,r2,2
 4006c6c:	1000061e 	bne	r2,zero,4006c88 <altera_avalon_jtag_uart_ioctl+0x7c>
 4006c70:	e0fffc17 	ldw	r3,-16(fp)
 4006c74:	00a00034 	movhi	r2,32768
 4006c78:	10bfffc4 	addi	r2,r2,-1
 4006c7c:	18800226 	beq	r3,r2,4006c88 <altera_avalon_jtag_uart_ioctl+0x7c>
 4006c80:	e0bffc17 	ldw	r2,-16(fp)
 4006c84:	00000206 	br	4006c90 <altera_avalon_jtag_uart_ioctl+0x84>
 4006c88:	00a00034 	movhi	r2,32768
 4006c8c:	10bfff84 	addi	r2,r2,-2
 4006c90:	e0fffd17 	ldw	r3,-12(fp)
 4006c94:	18800115 	stw	r2,4(r3)
      rc = 0;
 4006c98:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4006c9c:	00000f06 	br	4006cdc <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 4006ca0:	e0bffd17 	ldw	r2,-12(fp)
 4006ca4:	10c00117 	ldw	r3,4(r2)
 4006ca8:	00a00034 	movhi	r2,32768
 4006cac:	10bfffc4 	addi	r2,r2,-1
 4006cb0:	18800c26 	beq	r3,r2,4006ce4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 4006cb4:	e0bffd17 	ldw	r2,-12(fp)
 4006cb8:	10c00917 	ldw	r3,36(r2)
 4006cbc:	e0bffd17 	ldw	r2,-12(fp)
 4006cc0:	10800117 	ldw	r2,4(r2)
 4006cc4:	1885803a 	cmpltu	r2,r3,r2
 4006cc8:	10c03fcc 	andi	r3,r2,255
 4006ccc:	e0bfff17 	ldw	r2,-4(fp)
 4006cd0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 4006cd4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 4006cd8:	00000206 	br	4006ce4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 4006cdc:	0001883a 	nop
 4006ce0:	00000106 	br	4006ce8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 4006ce4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 4006ce8:	e0bffb17 	ldw	r2,-20(fp)
}
 4006cec:	e037883a 	mov	sp,fp
 4006cf0:	df000017 	ldw	fp,0(sp)
 4006cf4:	dec00104 	addi	sp,sp,4
 4006cf8:	f800283a 	ret

04006cfc <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 4006cfc:	defff304 	addi	sp,sp,-52
 4006d00:	dfc00c15 	stw	ra,48(sp)
 4006d04:	df000b15 	stw	fp,44(sp)
 4006d08:	df000b04 	addi	fp,sp,44
 4006d0c:	e13ffc15 	stw	r4,-16(fp)
 4006d10:	e17ffd15 	stw	r5,-12(fp)
 4006d14:	e1bffe15 	stw	r6,-8(fp)
 4006d18:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 4006d1c:	e0bffd17 	ldw	r2,-12(fp)
 4006d20:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4006d24:	00004706 	br	4006e44 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 4006d28:	e0bffc17 	ldw	r2,-16(fp)
 4006d2c:	10800a17 	ldw	r2,40(r2)
 4006d30:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 4006d34:	e0bffc17 	ldw	r2,-16(fp)
 4006d38:	10800b17 	ldw	r2,44(r2)
 4006d3c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 4006d40:	e0fff717 	ldw	r3,-36(fp)
 4006d44:	e0bff817 	ldw	r2,-32(fp)
 4006d48:	18800536 	bltu	r3,r2,4006d60 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 4006d4c:	e0fff717 	ldw	r3,-36(fp)
 4006d50:	e0bff817 	ldw	r2,-32(fp)
 4006d54:	1885c83a 	sub	r2,r3,r2
 4006d58:	e0bff615 	stw	r2,-40(fp)
 4006d5c:	00000406 	br	4006d70 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 4006d60:	00c20004 	movi	r3,2048
 4006d64:	e0bff817 	ldw	r2,-32(fp)
 4006d68:	1885c83a 	sub	r2,r3,r2
 4006d6c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4006d70:	e0bff617 	ldw	r2,-40(fp)
 4006d74:	10001e26 	beq	r2,zero,4006df0 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 4006d78:	e0fffe17 	ldw	r3,-8(fp)
 4006d7c:	e0bff617 	ldw	r2,-40(fp)
 4006d80:	1880022e 	bgeu	r3,r2,4006d8c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 4006d84:	e0bffe17 	ldw	r2,-8(fp)
 4006d88:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 4006d8c:	e0bffc17 	ldw	r2,-16(fp)
 4006d90:	10c00e04 	addi	r3,r2,56
 4006d94:	e0bff817 	ldw	r2,-32(fp)
 4006d98:	1885883a 	add	r2,r3,r2
 4006d9c:	e1bff617 	ldw	r6,-40(fp)
 4006da0:	100b883a 	mov	r5,r2
 4006da4:	e13ff517 	ldw	r4,-44(fp)
 4006da8:	4005f100 	call	4005f10 <memcpy>
      ptr   += n;
 4006dac:	e0fff517 	ldw	r3,-44(fp)
 4006db0:	e0bff617 	ldw	r2,-40(fp)
 4006db4:	1885883a 	add	r2,r3,r2
 4006db8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 4006dbc:	e0fffe17 	ldw	r3,-8(fp)
 4006dc0:	e0bff617 	ldw	r2,-40(fp)
 4006dc4:	1885c83a 	sub	r2,r3,r2
 4006dc8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 4006dcc:	e0fff817 	ldw	r3,-32(fp)
 4006dd0:	e0bff617 	ldw	r2,-40(fp)
 4006dd4:	1885883a 	add	r2,r3,r2
 4006dd8:	10c1ffcc 	andi	r3,r2,2047
 4006ddc:	e0bffc17 	ldw	r2,-16(fp)
 4006de0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 4006de4:	e0bffe17 	ldw	r2,-8(fp)
 4006de8:	00bfcf16 	blt	zero,r2,4006d28 <__alt_data_end+0xfc006d28>
 4006dec:	00000106 	br	4006df4 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 4006df0:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 4006df4:	e0fff517 	ldw	r3,-44(fp)
 4006df8:	e0bffd17 	ldw	r2,-12(fp)
 4006dfc:	1880141e 	bne	r3,r2,4006e50 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 4006e00:	e0bfff17 	ldw	r2,-4(fp)
 4006e04:	1090000c 	andi	r2,r2,16384
 4006e08:	1000131e 	bne	r2,zero,4006e58 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 4006e0c:	0001883a 	nop
 4006e10:	e0bffc17 	ldw	r2,-16(fp)
 4006e14:	10c00a17 	ldw	r3,40(r2)
 4006e18:	e0bff717 	ldw	r2,-36(fp)
 4006e1c:	1880051e 	bne	r3,r2,4006e34 <altera_avalon_jtag_uart_read+0x138>
 4006e20:	e0bffc17 	ldw	r2,-16(fp)
 4006e24:	10c00917 	ldw	r3,36(r2)
 4006e28:	e0bffc17 	ldw	r2,-16(fp)
 4006e2c:	10800117 	ldw	r2,4(r2)
 4006e30:	18bff736 	bltu	r3,r2,4006e10 <__alt_data_end+0xfc006e10>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 4006e34:	e0bffc17 	ldw	r2,-16(fp)
 4006e38:	10c00a17 	ldw	r3,40(r2)
 4006e3c:	e0bff717 	ldw	r2,-36(fp)
 4006e40:	18800726 	beq	r3,r2,4006e60 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 4006e44:	e0bffe17 	ldw	r2,-8(fp)
 4006e48:	00bfb716 	blt	zero,r2,4006d28 <__alt_data_end+0xfc006d28>
 4006e4c:	00000506 	br	4006e64 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 4006e50:	0001883a 	nop
 4006e54:	00000306 	br	4006e64 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 4006e58:	0001883a 	nop
 4006e5c:	00000106 	br	4006e64 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 4006e60:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 4006e64:	e0fff517 	ldw	r3,-44(fp)
 4006e68:	e0bffd17 	ldw	r2,-12(fp)
 4006e6c:	18801826 	beq	r3,r2,4006ed0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4006e70:	0005303a 	rdctl	r2,status
 4006e74:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4006e78:	e0fffb17 	ldw	r3,-20(fp)
 4006e7c:	00bfff84 	movi	r2,-2
 4006e80:	1884703a 	and	r2,r3,r2
 4006e84:	1001703a 	wrctl	status,r2
  
  return context;
 4006e88:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 4006e8c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 4006e90:	e0bffc17 	ldw	r2,-16(fp)
 4006e94:	10800817 	ldw	r2,32(r2)
 4006e98:	10c00054 	ori	r3,r2,1
 4006e9c:	e0bffc17 	ldw	r2,-16(fp)
 4006ea0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4006ea4:	e0bffc17 	ldw	r2,-16(fp)
 4006ea8:	10800017 	ldw	r2,0(r2)
 4006eac:	10800104 	addi	r2,r2,4
 4006eb0:	1007883a 	mov	r3,r2
 4006eb4:	e0bffc17 	ldw	r2,-16(fp)
 4006eb8:	10800817 	ldw	r2,32(r2)
 4006ebc:	18800035 	stwio	r2,0(r3)
 4006ec0:	e0bffa17 	ldw	r2,-24(fp)
 4006ec4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4006ec8:	e0bff917 	ldw	r2,-28(fp)
 4006ecc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 4006ed0:	e0fff517 	ldw	r3,-44(fp)
 4006ed4:	e0bffd17 	ldw	r2,-12(fp)
 4006ed8:	18800426 	beq	r3,r2,4006eec <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 4006edc:	e0fff517 	ldw	r3,-44(fp)
 4006ee0:	e0bffd17 	ldw	r2,-12(fp)
 4006ee4:	1885c83a 	sub	r2,r3,r2
 4006ee8:	00000606 	br	4006f04 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 4006eec:	e0bfff17 	ldw	r2,-4(fp)
 4006ef0:	1090000c 	andi	r2,r2,16384
 4006ef4:	10000226 	beq	r2,zero,4006f00 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 4006ef8:	00bffd44 	movi	r2,-11
 4006efc:	00000106 	br	4006f04 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 4006f00:	00bffec4 	movi	r2,-5
}
 4006f04:	e037883a 	mov	sp,fp
 4006f08:	dfc00117 	ldw	ra,4(sp)
 4006f0c:	df000017 	ldw	fp,0(sp)
 4006f10:	dec00204 	addi	sp,sp,8
 4006f14:	f800283a 	ret

04006f18 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 4006f18:	defff304 	addi	sp,sp,-52
 4006f1c:	dfc00c15 	stw	ra,48(sp)
 4006f20:	df000b15 	stw	fp,44(sp)
 4006f24:	df000b04 	addi	fp,sp,44
 4006f28:	e13ffc15 	stw	r4,-16(fp)
 4006f2c:	e17ffd15 	stw	r5,-12(fp)
 4006f30:	e1bffe15 	stw	r6,-8(fp)
 4006f34:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 4006f38:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 4006f3c:	e0bffd17 	ldw	r2,-12(fp)
 4006f40:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4006f44:	00003706 	br	4007024 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 4006f48:	e0bffc17 	ldw	r2,-16(fp)
 4006f4c:	10800c17 	ldw	r2,48(r2)
 4006f50:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 4006f54:	e0bffc17 	ldw	r2,-16(fp)
 4006f58:	10800d17 	ldw	r2,52(r2)
 4006f5c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 4006f60:	e0fff917 	ldw	r3,-28(fp)
 4006f64:	e0bff517 	ldw	r2,-44(fp)
 4006f68:	1880062e 	bgeu	r3,r2,4006f84 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 4006f6c:	e0fff517 	ldw	r3,-44(fp)
 4006f70:	e0bff917 	ldw	r2,-28(fp)
 4006f74:	1885c83a 	sub	r2,r3,r2
 4006f78:	10bfffc4 	addi	r2,r2,-1
 4006f7c:	e0bff615 	stw	r2,-40(fp)
 4006f80:	00000b06 	br	4006fb0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 4006f84:	e0bff517 	ldw	r2,-44(fp)
 4006f88:	10000526 	beq	r2,zero,4006fa0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 4006f8c:	00c20004 	movi	r3,2048
 4006f90:	e0bff917 	ldw	r2,-28(fp)
 4006f94:	1885c83a 	sub	r2,r3,r2
 4006f98:	e0bff615 	stw	r2,-40(fp)
 4006f9c:	00000406 	br	4006fb0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 4006fa0:	00c1ffc4 	movi	r3,2047
 4006fa4:	e0bff917 	ldw	r2,-28(fp)
 4006fa8:	1885c83a 	sub	r2,r3,r2
 4006fac:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 4006fb0:	e0bff617 	ldw	r2,-40(fp)
 4006fb4:	10001e26 	beq	r2,zero,4007030 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 4006fb8:	e0fffe17 	ldw	r3,-8(fp)
 4006fbc:	e0bff617 	ldw	r2,-40(fp)
 4006fc0:	1880022e 	bgeu	r3,r2,4006fcc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 4006fc4:	e0bffe17 	ldw	r2,-8(fp)
 4006fc8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 4006fcc:	e0bffc17 	ldw	r2,-16(fp)
 4006fd0:	10c20e04 	addi	r3,r2,2104
 4006fd4:	e0bff917 	ldw	r2,-28(fp)
 4006fd8:	1885883a 	add	r2,r3,r2
 4006fdc:	e1bff617 	ldw	r6,-40(fp)
 4006fe0:	e17ffd17 	ldw	r5,-12(fp)
 4006fe4:	1009883a 	mov	r4,r2
 4006fe8:	4005f100 	call	4005f10 <memcpy>
      ptr   += n;
 4006fec:	e0fffd17 	ldw	r3,-12(fp)
 4006ff0:	e0bff617 	ldw	r2,-40(fp)
 4006ff4:	1885883a 	add	r2,r3,r2
 4006ff8:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 4006ffc:	e0fffe17 	ldw	r3,-8(fp)
 4007000:	e0bff617 	ldw	r2,-40(fp)
 4007004:	1885c83a 	sub	r2,r3,r2
 4007008:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400700c:	e0fff917 	ldw	r3,-28(fp)
 4007010:	e0bff617 	ldw	r2,-40(fp)
 4007014:	1885883a 	add	r2,r3,r2
 4007018:	10c1ffcc 	andi	r3,r2,2047
 400701c:	e0bffc17 	ldw	r2,-16(fp)
 4007020:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 4007024:	e0bffe17 	ldw	r2,-8(fp)
 4007028:	00bfc716 	blt	zero,r2,4006f48 <__alt_data_end+0xfc006f48>
 400702c:	00000106 	br	4007034 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 4007030:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007034:	0005303a 	rdctl	r2,status
 4007038:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400703c:	e0fffb17 	ldw	r3,-20(fp)
 4007040:	00bfff84 	movi	r2,-2
 4007044:	1884703a 	and	r2,r3,r2
 4007048:	1001703a 	wrctl	status,r2
  
  return context;
 400704c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 4007050:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 4007054:	e0bffc17 	ldw	r2,-16(fp)
 4007058:	10800817 	ldw	r2,32(r2)
 400705c:	10c00094 	ori	r3,r2,2
 4007060:	e0bffc17 	ldw	r2,-16(fp)
 4007064:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 4007068:	e0bffc17 	ldw	r2,-16(fp)
 400706c:	10800017 	ldw	r2,0(r2)
 4007070:	10800104 	addi	r2,r2,4
 4007074:	1007883a 	mov	r3,r2
 4007078:	e0bffc17 	ldw	r2,-16(fp)
 400707c:	10800817 	ldw	r2,32(r2)
 4007080:	18800035 	stwio	r2,0(r3)
 4007084:	e0bffa17 	ldw	r2,-24(fp)
 4007088:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400708c:	e0bff817 	ldw	r2,-32(fp)
 4007090:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 4007094:	e0bffe17 	ldw	r2,-8(fp)
 4007098:	0080100e 	bge	zero,r2,40070dc <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 400709c:	e0bfff17 	ldw	r2,-4(fp)
 40070a0:	1090000c 	andi	r2,r2,16384
 40070a4:	1000101e 	bne	r2,zero,40070e8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 40070a8:	0001883a 	nop
 40070ac:	e0bffc17 	ldw	r2,-16(fp)
 40070b0:	10c00d17 	ldw	r3,52(r2)
 40070b4:	e0bff517 	ldw	r2,-44(fp)
 40070b8:	1880051e 	bne	r3,r2,40070d0 <altera_avalon_jtag_uart_write+0x1b8>
 40070bc:	e0bffc17 	ldw	r2,-16(fp)
 40070c0:	10c00917 	ldw	r3,36(r2)
 40070c4:	e0bffc17 	ldw	r2,-16(fp)
 40070c8:	10800117 	ldw	r2,4(r2)
 40070cc:	18bff736 	bltu	r3,r2,40070ac <__alt_data_end+0xfc0070ac>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 40070d0:	e0bffc17 	ldw	r2,-16(fp)
 40070d4:	10800917 	ldw	r2,36(r2)
 40070d8:	1000051e 	bne	r2,zero,40070f0 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 40070dc:	e0bffe17 	ldw	r2,-8(fp)
 40070e0:	00bfd016 	blt	zero,r2,4007024 <__alt_data_end+0xfc007024>
 40070e4:	00000306 	br	40070f4 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 40070e8:	0001883a 	nop
 40070ec:	00000106 	br	40070f4 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 40070f0:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 40070f4:	e0fffd17 	ldw	r3,-12(fp)
 40070f8:	e0bff717 	ldw	r2,-36(fp)
 40070fc:	18800426 	beq	r3,r2,4007110 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 4007100:	e0fffd17 	ldw	r3,-12(fp)
 4007104:	e0bff717 	ldw	r2,-36(fp)
 4007108:	1885c83a 	sub	r2,r3,r2
 400710c:	00000606 	br	4007128 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 4007110:	e0bfff17 	ldw	r2,-4(fp)
 4007114:	1090000c 	andi	r2,r2,16384
 4007118:	10000226 	beq	r2,zero,4007124 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 400711c:	00bffd44 	movi	r2,-11
 4007120:	00000106 	br	4007128 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 4007124:	00bffec4 	movi	r2,-5
}
 4007128:	e037883a 	mov	sp,fp
 400712c:	dfc00117 	ldw	ra,4(sp)
 4007130:	df000017 	ldw	fp,0(sp)
 4007134:	dec00204 	addi	sp,sp,8
 4007138:	f800283a 	ret

0400713c <altera_avalon_uart_read_fd>:
 *
 */

int 
altera_avalon_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400713c:	defffa04 	addi	sp,sp,-24
 4007140:	dfc00515 	stw	ra,20(sp)
 4007144:	df000415 	stw	fp,16(sp)
 4007148:	df000404 	addi	fp,sp,16
 400714c:	e13ffd15 	stw	r4,-12(fp)
 4007150:	e17ffe15 	stw	r5,-8(fp)
 4007154:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 4007158:	e0bffd17 	ldw	r2,-12(fp)
 400715c:	10800017 	ldw	r2,0(r2)
 4007160:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_read(&dev->state, buffer, space,
 4007164:	e0bffc17 	ldw	r2,-16(fp)
 4007168:	10c00a04 	addi	r3,r2,40
 400716c:	e0bffd17 	ldw	r2,-12(fp)
 4007170:	10800217 	ldw	r2,8(r2)
 4007174:	100f883a 	mov	r7,r2
 4007178:	e1bfff17 	ldw	r6,-4(fp)
 400717c:	e17ffe17 	ldw	r5,-8(fp)
 4007180:	1809883a 	mov	r4,r3
 4007184:	40076500 	call	4007650 <altera_avalon_uart_read>
      fd->fd_flags);
}
 4007188:	e037883a 	mov	sp,fp
 400718c:	dfc00117 	ldw	ra,4(sp)
 4007190:	df000017 	ldw	fp,0(sp)
 4007194:	dec00204 	addi	sp,sp,8
 4007198:	f800283a 	ret

0400719c <altera_avalon_uart_write_fd>:

int 
altera_avalon_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400719c:	defffa04 	addi	sp,sp,-24
 40071a0:	dfc00515 	stw	ra,20(sp)
 40071a4:	df000415 	stw	fp,16(sp)
 40071a8:	df000404 	addi	fp,sp,16
 40071ac:	e13ffd15 	stw	r4,-12(fp)
 40071b0:	e17ffe15 	stw	r5,-8(fp)
 40071b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 40071b8:	e0bffd17 	ldw	r2,-12(fp)
 40071bc:	10800017 	ldw	r2,0(r2)
 40071c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_uart_write(&dev->state, buffer, space,
 40071c4:	e0bffc17 	ldw	r2,-16(fp)
 40071c8:	10c00a04 	addi	r3,r2,40
 40071cc:	e0bffd17 	ldw	r2,-12(fp)
 40071d0:	10800217 	ldw	r2,8(r2)
 40071d4:	100f883a 	mov	r7,r2
 40071d8:	e1bfff17 	ldw	r6,-4(fp)
 40071dc:	e17ffe17 	ldw	r5,-8(fp)
 40071e0:	1809883a 	mov	r4,r3
 40071e4:	40078680 	call	4007868 <altera_avalon_uart_write>
      fd->fd_flags);
}
 40071e8:	e037883a 	mov	sp,fp
 40071ec:	dfc00117 	ldw	ra,4(sp)
 40071f0:	df000017 	ldw	fp,0(sp)
 40071f4:	dec00204 	addi	sp,sp,8
 40071f8:	f800283a 	ret

040071fc <altera_avalon_uart_close_fd>:

#endif /* ALTERA_AVALON_UART_USE_IOCTL */

int 
altera_avalon_uart_close_fd(alt_fd* fd)
{
 40071fc:	defffc04 	addi	sp,sp,-16
 4007200:	dfc00315 	stw	ra,12(sp)
 4007204:	df000215 	stw	fp,8(sp)
 4007208:	df000204 	addi	fp,sp,8
 400720c:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_uart_dev* dev = (altera_avalon_uart_dev*) fd->dev; 
 4007210:	e0bfff17 	ldw	r2,-4(fp)
 4007214:	10800017 	ldw	r2,0(r2)
 4007218:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_uart_close(&dev->state, fd->fd_flags);
 400721c:	e0bffe17 	ldw	r2,-8(fp)
 4007220:	10c00a04 	addi	r3,r2,40
 4007224:	e0bfff17 	ldw	r2,-4(fp)
 4007228:	10800217 	ldw	r2,8(r2)
 400722c:	100b883a 	mov	r5,r2
 4007230:	1809883a 	mov	r4,r3
 4007234:	40075c00 	call	40075c0 <altera_avalon_uart_close>
}
 4007238:	e037883a 	mov	sp,fp
 400723c:	dfc00117 	ldw	ra,4(sp)
 4007240:	df000017 	ldw	fp,0(sp)
 4007244:	dec00204 	addi	sp,sp,8
 4007248:	f800283a 	ret

0400724c <altera_avalon_uart_init>:
  alt_u32 status);

void 
altera_avalon_uart_init(altera_avalon_uart_state* sp, 
  alt_u32 irq_controller_id,  alt_u32 irq)
{
 400724c:	defff804 	addi	sp,sp,-32
 4007250:	dfc00715 	stw	ra,28(sp)
 4007254:	df000615 	stw	fp,24(sp)
 4007258:	df000604 	addi	fp,sp,24
 400725c:	e13ffd15 	stw	r4,-12(fp)
 4007260:	e17ffe15 	stw	r5,-8(fp)
 4007264:	e1bfff15 	stw	r6,-4(fp)
  void* base = sp->base;
 4007268:	e0bffd17 	ldw	r2,-12(fp)
 400726c:	10800017 	ldw	r2,0(r2)
 4007270:	e0bffb15 	stw	r2,-20(fp)
 * HAL.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_no_error (void)
{
  return 0;
 4007274:	0005883a 	mov	r2,zero
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 4007278:	1000041e 	bne	r2,zero,400728c <altera_avalon_uart_init+0x40>
 400727c:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 4007280:	1000021e 	bne	r2,zero,400728c <altera_avalon_uart_init+0x40>
 4007284:	0005883a 	mov	r2,zero
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
 4007288:	10000226 	beq	r2,zero,4007294 <altera_avalon_uart_init+0x48>
 400728c:	00800044 	movi	r2,1
 4007290:	00000106 	br	4007298 <altera_avalon_uart_init+0x4c>
 4007294:	0005883a 	mov	r2,zero
  /* 
   * Initialise the read and write flags and the semaphores used to 
   * protect access to the circular buffers when running in a multi-threaded
   * environment.
   */
  error = ALT_FLAG_CREATE (&sp->events, 0)    || 
 4007298:	e0bffc15 	stw	r2,-16(fp)
          ALT_SEM_CREATE (&sp->read_lock, 1)  ||
          ALT_SEM_CREATE (&sp->write_lock, 1);

  if (!error)
 400729c:	e0bffc17 	ldw	r2,-16(fp)
 40072a0:	10000f1e 	bne	r2,zero,40072e0 <altera_avalon_uart_init+0x94>
  {
    /* enable interrupts at the device */
    sp->ctrl = ALTERA_AVALON_UART_CONTROL_RTS_MSK  |
 40072a4:	e0bffd17 	ldw	r2,-12(fp)
 40072a8:	00c32004 	movi	r3,3200
 40072ac:	10c00115 	stw	r3,4(r2)
                ALTERA_AVALON_UART_CONTROL_RRDY_MSK |
                ALTERA_AVALON_UART_CONTROL_DCTS_MSK;

    IOWR_ALTERA_AVALON_UART_CONTROL(base, sp->ctrl); 
 40072b0:	e0bffb17 	ldw	r2,-20(fp)
 40072b4:	10800304 	addi	r2,r2,12
 40072b8:	e0fffd17 	ldw	r3,-12(fp)
 40072bc:	18c00117 	ldw	r3,4(r3)
 40072c0:	10c00035 	stwio	r3,0(r2)
  
    /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
    alt_ic_isr_register(irq_controller_id, irq, altera_avalon_uart_irq, sp, 
 40072c4:	d8000015 	stw	zero,0(sp)
 40072c8:	e1fffd17 	ldw	r7,-12(fp)
 40072cc:	01810034 	movhi	r6,1024
 40072d0:	319cbe04 	addi	r6,r6,29432
 40072d4:	e17fff17 	ldw	r5,-4(fp)
 40072d8:	e13ffe17 	ldw	r4,-8(fp)
 40072dc:	4007fb80 	call	4007fb8 <alt_ic_isr_register>
      0x0);
#else
    alt_irq_register (irq, sp, altera_avalon_uart_irq);
#endif  
  }
}
 40072e0:	0001883a 	nop
 40072e4:	e037883a 	mov	sp,fp
 40072e8:	dfc00117 	ldw	ra,4(sp)
 40072ec:	df000017 	ldw	fp,0(sp)
 40072f0:	dec00204 	addi	sp,sp,8
 40072f4:	f800283a 	ret

040072f8 <altera_avalon_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_uart_irq(void* context)
#else
static void altera_avalon_uart_irq(void* context, alt_u32 id)
#endif
{
 40072f8:	defffa04 	addi	sp,sp,-24
 40072fc:	dfc00515 	stw	ra,20(sp)
 4007300:	df000415 	stw	fp,16(sp)
 4007304:	df000404 	addi	fp,sp,16
 4007308:	e13fff15 	stw	r4,-4(fp)
  alt_u32 status;

  altera_avalon_uart_state* sp = (altera_avalon_uart_state*) context;
 400730c:	e0bfff17 	ldw	r2,-4(fp)
 4007310:	e0bffc15 	stw	r2,-16(fp)
  void* base               = sp->base;
 4007314:	e0bffc17 	ldw	r2,-16(fp)
 4007318:	10800017 	ldw	r2,0(r2)
 400731c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Read the status register in order to determine the cause of the
   * interrupt.
   */

  status = IORD_ALTERA_AVALON_UART_STATUS(base);
 4007320:	e0bffd17 	ldw	r2,-12(fp)
 4007324:	10800204 	addi	r2,r2,8
 4007328:	10800037 	ldwio	r2,0(r2)
 400732c:	e0bffe15 	stw	r2,-8(fp)

  /* Clear any error flags set at the device */
  IOWR_ALTERA_AVALON_UART_STATUS(base, 0);
 4007330:	e0bffd17 	ldw	r2,-12(fp)
 4007334:	10800204 	addi	r2,r2,8
 4007338:	0007883a 	mov	r3,zero
 400733c:	10c00035 	stwio	r3,0(r2)

  /* Dummy read to ensure IRQ is negated before ISR returns */
  IORD_ALTERA_AVALON_UART_STATUS(base);
 4007340:	e0bffd17 	ldw	r2,-12(fp)
 4007344:	10800204 	addi	r2,r2,8
 4007348:	10800037 	ldwio	r2,0(r2)
  
  /* process a read irq */
  if (status & ALTERA_AVALON_UART_STATUS_RRDY_MSK)
 400734c:	e0bffe17 	ldw	r2,-8(fp)
 4007350:	1080200c 	andi	r2,r2,128
 4007354:	10000326 	beq	r2,zero,4007364 <altera_avalon_uart_irq+0x6c>
  {
    altera_avalon_uart_rxirq(sp, status);
 4007358:	e17ffe17 	ldw	r5,-8(fp)
 400735c:	e13ffc17 	ldw	r4,-16(fp)
 4007360:	40073940 	call	4007394 <altera_avalon_uart_rxirq>
  }

  /* process a write irq */
  if (status & (ALTERA_AVALON_UART_STATUS_TRDY_MSK | 
 4007364:	e0bffe17 	ldw	r2,-8(fp)
 4007368:	1081100c 	andi	r2,r2,1088
 400736c:	10000326 	beq	r2,zero,400737c <altera_avalon_uart_irq+0x84>
                  ALTERA_AVALON_UART_STATUS_DCTS_MSK))
  {
    altera_avalon_uart_txirq(sp, status);
 4007370:	e17ffe17 	ldw	r5,-8(fp)
 4007374:	e13ffc17 	ldw	r4,-16(fp)
 4007378:	40074780 	call	4007478 <altera_avalon_uart_txirq>
  }
  

}
 400737c:	0001883a 	nop
 4007380:	e037883a 	mov	sp,fp
 4007384:	dfc00117 	ldw	ra,4(sp)
 4007388:	df000017 	ldw	fp,0(sp)
 400738c:	dec00204 	addi	sp,sp,8
 4007390:	f800283a 	ret

04007394 <altera_avalon_uart_rxirq>:
 * the receive circular buffer, and sets the apropriate flags to indicate 
 * that there is data ready to be processed.
 */
static void 
altera_avalon_uart_rxirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 4007394:	defffc04 	addi	sp,sp,-16
 4007398:	df000315 	stw	fp,12(sp)
 400739c:	df000304 	addi	fp,sp,12
 40073a0:	e13ffe15 	stw	r4,-8(fp)
 40073a4:	e17fff15 	stw	r5,-4(fp)
  alt_u32 next;
  
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
 40073a8:	e0bfff17 	ldw	r2,-4(fp)
 40073ac:	108000cc 	andi	r2,r2,3
 40073b0:	10002c1e 	bne	r2,zero,4007464 <altera_avalon_uart_rxirq+0xd0>
   * In a multi-threaded environment, set the read event flag to indicate
   * that there is data ready. This is only done if the circular buffer was
   * previously empty.
   */

  if (sp->rx_end == sp->rx_start)
 40073b4:	e0bffe17 	ldw	r2,-8(fp)
 40073b8:	10800317 	ldw	r2,12(r2)
 40073bc:	e0bffe17 	ldw	r2,-8(fp)
 40073c0:	10800217 	ldw	r2,8(r2)
    ALT_FLAG_POST (sp->events, ALT_UART_READ_RDY, OS_FLAG_SET);
  }

  /* Determine which slot to use next in the circular buffer */

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 40073c4:	e0bffe17 	ldw	r2,-8(fp)
 40073c8:	10800317 	ldw	r2,12(r2)
 40073cc:	10800044 	addi	r2,r2,1
 40073d0:	10800fcc 	andi	r2,r2,63
 40073d4:	e0bffd15 	stw	r2,-12(fp)

  /* Transfer data from the device to the circular buffer */

  sp->rx_buf[sp->rx_end] = IORD_ALTERA_AVALON_UART_RXDATA(sp->base);
 40073d8:	e0bffe17 	ldw	r2,-8(fp)
 40073dc:	10800317 	ldw	r2,12(r2)
 40073e0:	e0fffe17 	ldw	r3,-8(fp)
 40073e4:	18c00017 	ldw	r3,0(r3)
 40073e8:	18c00037 	ldwio	r3,0(r3)
 40073ec:	1809883a 	mov	r4,r3
 40073f0:	e0fffe17 	ldw	r3,-8(fp)
 40073f4:	1885883a 	add	r2,r3,r2
 40073f8:	10800704 	addi	r2,r2,28
 40073fc:	11000005 	stb	r4,0(r2)

  sp->rx_end = next;
 4007400:	e0bffe17 	ldw	r2,-8(fp)
 4007404:	e0fffd17 	ldw	r3,-12(fp)
 4007408:	10c00315 	stw	r3,12(r2)

  next = (sp->rx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 400740c:	e0bffe17 	ldw	r2,-8(fp)
 4007410:	10800317 	ldw	r2,12(r2)
 4007414:	10800044 	addi	r2,r2,1
 4007418:	10800fcc 	andi	r2,r2,63
 400741c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * If the cicular buffer was full, disable interrupts. Interrupts will be
   * re-enabled when data is removed from the buffer.
   */

  if (next == sp->rx_start)
 4007420:	e0bffe17 	ldw	r2,-8(fp)
 4007424:	10c00217 	ldw	r3,8(r2)
 4007428:	e0bffd17 	ldw	r2,-12(fp)
 400742c:	18800e1e 	bne	r3,r2,4007468 <altera_avalon_uart_rxirq+0xd4>
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 4007430:	e0bffe17 	ldw	r2,-8(fp)
 4007434:	10c00117 	ldw	r3,4(r2)
 4007438:	00bfdfc4 	movi	r2,-129
 400743c:	1886703a 	and	r3,r3,r2
 4007440:	e0bffe17 	ldw	r2,-8(fp)
 4007444:	10c00115 	stw	r3,4(r2)
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
 4007448:	e0bffe17 	ldw	r2,-8(fp)
 400744c:	10800017 	ldw	r2,0(r2)
 4007450:	10800304 	addi	r2,r2,12
 4007454:	e0fffe17 	ldw	r3,-8(fp)
 4007458:	18c00117 	ldw	r3,4(r3)
 400745c:	10c00035 	stwio	r3,0(r2)
 4007460:	00000106 	br	4007468 <altera_avalon_uart_rxirq+0xd4>
  /* If there was an error, discard the data */

  if (status & (ALTERA_AVALON_UART_STATUS_PE_MSK | 
                  ALTERA_AVALON_UART_STATUS_FE_MSK))
  {
    return;
 4007464:	0001883a 	nop
  if (next == sp->rx_start)
  {
    sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
    IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl); 
  }   
}
 4007468:	e037883a 	mov	sp,fp
 400746c:	df000017 	ldw	fp,0(sp)
 4007470:	dec00104 	addi	sp,sp,4
 4007474:	f800283a 	ret

04007478 <altera_avalon_uart_txirq>:
 * buffer to the device, and sets the apropriate flags to indicate that 
 * there is data ready to be processed.
 */
static void 
altera_avalon_uart_txirq(altera_avalon_uart_state* sp, alt_u32 status)
{
 4007478:	defffb04 	addi	sp,sp,-20
 400747c:	df000415 	stw	fp,16(sp)
 4007480:	df000404 	addi	fp,sp,16
 4007484:	e13ffc15 	stw	r4,-16(fp)
 4007488:	e17ffd15 	stw	r5,-12(fp)
  /* Transfer data if there is some ready to be transfered */

  if (sp->tx_start != sp->tx_end)
 400748c:	e0bffc17 	ldw	r2,-16(fp)
 4007490:	10c00417 	ldw	r3,16(r2)
 4007494:	e0bffc17 	ldw	r2,-16(fp)
 4007498:	10800517 	ldw	r2,20(r2)
 400749c:	18803226 	beq	r3,r2,4007568 <altera_avalon_uart_txirq+0xf0>
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 40074a0:	e0bffc17 	ldw	r2,-16(fp)
 40074a4:	10800617 	ldw	r2,24(r2)
 40074a8:	1080008c 	andi	r2,r2,2
 40074ac:	10000326 	beq	r2,zero,40074bc <altera_avalon_uart_txirq+0x44>
      (status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 40074b0:	e0bffd17 	ldw	r2,-12(fp)
 40074b4:	1082000c 	andi	r2,r2,2048
    /* 
     * If the device is using flow control (i.e. RTS/CTS), then the
     * transmitter is required to throttle if CTS is high.
     */

    if (!(sp->flags & ALT_AVALON_UART_FC) ||
 40074b8:	10001d26 	beq	r2,zero,4007530 <altera_avalon_uart_txirq+0xb8>
       * In a multi-threaded environment, set the write event flag to indicate
       * that there is space in the circular buffer. This is only done if the
       * buffer was previously empty.
       */

      if (sp->tx_start == ((sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK))
 40074bc:	e0bffc17 	ldw	r2,-16(fp)
 40074c0:	10800417 	ldw	r2,16(r2)
 40074c4:	e0bffc17 	ldw	r2,-16(fp)
 40074c8:	10800517 	ldw	r2,20(r2)
                       OS_FLAG_SET);
      }

      /* Write the data to the device */

      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, sp->tx_buf[sp->tx_start]);
 40074cc:	e0bffc17 	ldw	r2,-16(fp)
 40074d0:	10800017 	ldw	r2,0(r2)
 40074d4:	10800104 	addi	r2,r2,4
 40074d8:	e0fffc17 	ldw	r3,-16(fp)
 40074dc:	18c00417 	ldw	r3,16(r3)
 40074e0:	e13ffc17 	ldw	r4,-16(fp)
 40074e4:	20c7883a 	add	r3,r4,r3
 40074e8:	18c01704 	addi	r3,r3,92
 40074ec:	18c00003 	ldbu	r3,0(r3)
 40074f0:	18c03fcc 	andi	r3,r3,255
 40074f4:	10c00035 	stwio	r3,0(r2)

      sp->tx_start = (++sp->tx_start) & ALT_AVALON_UART_BUF_MSK;
 40074f8:	e0bffc17 	ldw	r2,-16(fp)
 40074fc:	10800417 	ldw	r2,16(r2)
 4007500:	10800044 	addi	r2,r2,1
 4007504:	e0fffc17 	ldw	r3,-16(fp)
 4007508:	18800415 	stw	r2,16(r3)
 400750c:	10c00fcc 	andi	r3,r2,63
 4007510:	e0bffc17 	ldw	r2,-16(fp)
 4007514:	10c00415 	stw	r3,16(r2)
      /*
       * In case the tranmit interrupt had previously been disabled by 
       * detecting a low value on CTS, it is reenabled here.
       */ 

      sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 4007518:	e0bffc17 	ldw	r2,-16(fp)
 400751c:	10800117 	ldw	r2,4(r2)
 4007520:	10c01014 	ori	r3,r2,64
 4007524:	e0bffc17 	ldw	r2,-16(fp)
 4007528:	10c00115 	stw	r3,4(r2)
 400752c:	00000e06 	br	4007568 <altera_avalon_uart_txirq+0xf0>
       * the last write to the status register. To avoid this resulting in
       * deadlock, it's necessary to re-check the status register here
       * before throttling.
       */
 
      status = IORD_ALTERA_AVALON_UART_STATUS(sp->base); 
 4007530:	e0bffc17 	ldw	r2,-16(fp)
 4007534:	10800017 	ldw	r2,0(r2)
 4007538:	10800204 	addi	r2,r2,8
 400753c:	10800037 	ldwio	r2,0(r2)
 4007540:	e0bffd15 	stw	r2,-12(fp)

      if (!(status & ALTERA_AVALON_UART_STATUS_CTS_MSK))
 4007544:	e0bffd17 	ldw	r2,-12(fp)
 4007548:	1082000c 	andi	r2,r2,2048
 400754c:	1000061e 	bne	r2,zero,4007568 <altera_avalon_uart_txirq+0xf0>
      {
        sp->ctrl &= ~ALTERA_AVALON_UART_CONTROL_TRDY_MSK;
 4007550:	e0bffc17 	ldw	r2,-16(fp)
 4007554:	10c00117 	ldw	r3,4(r2)
 4007558:	00bfefc4 	movi	r2,-65
 400755c:	1886703a 	and	r3,r3,r2
 4007560:	e0bffc17 	ldw	r2,-16(fp)
 4007564:	10c00115 	stw	r3,4(r2)
  /*
   * If the circular buffer is empty, disable the interrupt. This will be
   * re-enabled when new data is placed in the buffer.
   */

  if (sp->tx_start == sp->tx_end)
 4007568:	e0bffc17 	ldw	r2,-16(fp)
 400756c:	10c00417 	ldw	r3,16(r2)
 4007570:	e0bffc17 	ldw	r2,-16(fp)
 4007574:	10800517 	ldw	r2,20(r2)
 4007578:	1880061e 	bne	r3,r2,4007594 <altera_avalon_uart_txirq+0x11c>
  {
    sp->ctrl &= ~(ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 400757c:	e0bffc17 	ldw	r2,-16(fp)
 4007580:	10c00117 	ldw	r3,4(r2)
 4007584:	00beefc4 	movi	r2,-1089
 4007588:	1886703a 	and	r3,r3,r2
 400758c:	e0bffc17 	ldw	r2,-16(fp)
 4007590:	10c00115 	stw	r3,4(r2)
                    ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
  }

  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4007594:	e0bffc17 	ldw	r2,-16(fp)
 4007598:	10800017 	ldw	r2,0(r2)
 400759c:	10800304 	addi	r2,r2,12
 40075a0:	e0fffc17 	ldw	r3,-16(fp)
 40075a4:	18c00117 	ldw	r3,4(r3)
 40075a8:	10c00035 	stwio	r3,0(r2)
}
 40075ac:	0001883a 	nop
 40075b0:	e037883a 	mov	sp,fp
 40075b4:	df000017 	ldw	fp,0(sp)
 40075b8:	dec00104 	addi	sp,sp,4
 40075bc:	f800283a 	ret

040075c0 <altera_avalon_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
 40075c0:	defffd04 	addi	sp,sp,-12
 40075c4:	df000215 	stw	fp,8(sp)
 40075c8:	df000204 	addi	fp,sp,8
 40075cc:	e13ffe15 	stw	r4,-8(fp)
 40075d0:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 40075d4:	00000506 	br	40075ec <altera_avalon_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 40075d8:	e0bfff17 	ldw	r2,-4(fp)
 40075dc:	1090000c 	andi	r2,r2,16384
 40075e0:	10000226 	beq	r2,zero,40075ec <altera_avalon_uart_close+0x2c>
      return -EWOULDBLOCK; 
 40075e4:	00bffd44 	movi	r2,-11
 40075e8:	00000606 	br	4007604 <altera_avalon_uart_close+0x44>
int altera_avalon_uart_close(altera_avalon_uart_state* sp, int flags)
{
  /* 
   * Wait for all transmit data to be emptied by the UART ISR.
   */
  while (sp->tx_start != sp->tx_end) {
 40075ec:	e0bffe17 	ldw	r2,-8(fp)
 40075f0:	10c00417 	ldw	r3,16(r2)
 40075f4:	e0bffe17 	ldw	r2,-8(fp)
 40075f8:	10800517 	ldw	r2,20(r2)
 40075fc:	18bff61e 	bne	r3,r2,40075d8 <__alt_data_end+0xfc0075d8>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 4007600:	0005883a 	mov	r2,zero
}
 4007604:	e037883a 	mov	sp,fp
 4007608:	df000017 	ldw	fp,0(sp)
 400760c:	dec00104 	addi	sp,sp,4
 4007610:	f800283a 	ret

04007614 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4007614:	defffe04 	addi	sp,sp,-8
 4007618:	dfc00115 	stw	ra,4(sp)
 400761c:	df000015 	stw	fp,0(sp)
 4007620:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4007624:	d0a01017 	ldw	r2,-32704(gp)
 4007628:	10000326 	beq	r2,zero,4007638 <alt_get_errno+0x24>
 400762c:	d0a01017 	ldw	r2,-32704(gp)
 4007630:	103ee83a 	callr	r2
 4007634:	00000106 	br	400763c <alt_get_errno+0x28>
 4007638:	d0a63804 	addi	r2,gp,-26400
}
 400763c:	e037883a 	mov	sp,fp
 4007640:	dfc00117 	ldw	ra,4(sp)
 4007644:	df000017 	ldw	fp,0(sp)
 4007648:	dec00204 	addi	sp,sp,8
 400764c:	f800283a 	ret

04007650 <altera_avalon_uart_read>:
 */

int 
altera_avalon_uart_read(altera_avalon_uart_state* sp, char* ptr, int len,
  int flags)
{
 4007650:	defff204 	addi	sp,sp,-56
 4007654:	dfc00d15 	stw	ra,52(sp)
 4007658:	df000c15 	stw	fp,48(sp)
 400765c:	df000c04 	addi	fp,sp,48
 4007660:	e13ffc15 	stw	r4,-16(fp)
 4007664:	e17ffd15 	stw	r5,-12(fp)
 4007668:	e1bffe15 	stw	r6,-8(fp)
 400766c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             block;
  alt_u8          read_would_block = 0;
 4007670:	e03ff405 	stb	zero,-48(fp)
  int             count = 0;
 4007674:	e03ff515 	stw	zero,-44(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  block = !(flags & O_NONBLOCK);
 4007678:	e0bfff17 	ldw	r2,-4(fp)
 400767c:	1090000c 	andi	r2,r2,16384
 4007680:	1005003a 	cmpeq	r2,r2,zero
 4007684:	10803fcc 	andi	r2,r2,255
 4007688:	e0bff615 	stw	r2,-40(fp)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 400768c:	00001306 	br	40076dc <altera_avalon_uart_read+0x8c>
    {
      count++;
 4007690:	e0bff517 	ldw	r2,-44(fp)
 4007694:	10800044 	addi	r2,r2,1
 4007698:	e0bff515 	stw	r2,-44(fp)
      *ptr++ = sp->rx_buf[sp->rx_start];
 400769c:	e0bffd17 	ldw	r2,-12(fp)
 40076a0:	10c00044 	addi	r3,r2,1
 40076a4:	e0fffd15 	stw	r3,-12(fp)
 40076a8:	e0fffc17 	ldw	r3,-16(fp)
 40076ac:	18c00217 	ldw	r3,8(r3)
 40076b0:	e13ffc17 	ldw	r4,-16(fp)
 40076b4:	20c7883a 	add	r3,r4,r3
 40076b8:	18c00704 	addi	r3,r3,28
 40076bc:	18c00003 	ldbu	r3,0(r3)
 40076c0:	10c00005 	stb	r3,0(r2)
      
      sp->rx_start = (sp->rx_start+1) & ALT_AVALON_UART_BUF_MSK;
 40076c4:	e0bffc17 	ldw	r2,-16(fp)
 40076c8:	10800217 	ldw	r2,8(r2)
 40076cc:	10800044 	addi	r2,r2,1
 40076d0:	10c00fcc 	andi	r3,r2,63
 40076d4:	e0bffc17 	ldw	r2,-16(fp)
 40076d8:	10c00215 	stw	r3,8(r2)
    /*
     * Read the required amount of data, until the circular buffer runs
     * empty
     */

    while ((count < len) && (sp->rx_start != sp->rx_end))
 40076dc:	e0fff517 	ldw	r3,-44(fp)
 40076e0:	e0bffe17 	ldw	r2,-8(fp)
 40076e4:	1880050e 	bge	r3,r2,40076fc <altera_avalon_uart_read+0xac>
 40076e8:	e0bffc17 	ldw	r2,-16(fp)
 40076ec:	10c00217 	ldw	r3,8(r2)
 40076f0:	e0bffc17 	ldw	r2,-16(fp)
 40076f4:	10800317 	ldw	r2,12(r2)
 40076f8:	18bfe51e 	bne	r3,r2,4007690 <__alt_data_end+0xfc007690>
    /*
     * If no data has been transferred, the circular buffer is empty, and
     * this is not a non-blocking access, block waiting for data to arrive.
     */

    if (!count && (sp->rx_start == sp->rx_end))
 40076fc:	e0bff517 	ldw	r2,-44(fp)
 4007700:	1000251e 	bne	r2,zero,4007798 <altera_avalon_uart_read+0x148>
 4007704:	e0bffc17 	ldw	r2,-16(fp)
 4007708:	10c00217 	ldw	r3,8(r2)
 400770c:	e0bffc17 	ldw	r2,-16(fp)
 4007710:	10800317 	ldw	r2,12(r2)
 4007714:	1880201e 	bne	r3,r2,4007798 <altera_avalon_uart_read+0x148>
    {
      if (!block)
 4007718:	e0bff617 	ldw	r2,-40(fp)
 400771c:	1000071e 	bne	r2,zero,400773c <altera_avalon_uart_read+0xec>
      {
        /* Set errno to indicate the reason we're not returning any data */

        ALT_ERRNO = EWOULDBLOCK;
 4007720:	40076140 	call	4007614 <alt_get_errno>
 4007724:	1007883a 	mov	r3,r2
 4007728:	008002c4 	movi	r2,11
 400772c:	18800015 	stw	r2,0(r3)
        read_would_block = 1;
 4007730:	00800044 	movi	r2,1
 4007734:	e0bff405 	stb	r2,-48(fp)
        break;
 4007738:	00001b06 	br	40077a8 <altera_avalon_uart_read+0x158>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400773c:	0005303a 	rdctl	r2,status
 4007740:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007744:	e0fff917 	ldw	r3,-28(fp)
 4007748:	00bfff84 	movi	r2,-2
 400774c:	1884703a 	and	r2,r3,r2
 4007750:	1001703a 	wrctl	status,r2
  
  return context;
 4007754:	e0bff917 	ldw	r2,-28(fp)
      {
       /* Block waiting for some data to arrive */

       /* First, ensure read interrupts are enabled to avoid deadlock */

       context = alt_irq_disable_all ();
 4007758:	e0bff815 	stw	r2,-32(fp)
       sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 400775c:	e0bffc17 	ldw	r2,-16(fp)
 4007760:	10800117 	ldw	r2,4(r2)
 4007764:	10c02014 	ori	r3,r2,128
 4007768:	e0bffc17 	ldw	r2,-16(fp)
 400776c:	10c00115 	stw	r3,4(r2)
       IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4007770:	e0bffc17 	ldw	r2,-16(fp)
 4007774:	10800017 	ldw	r2,0(r2)
 4007778:	10800304 	addi	r2,r2,12
 400777c:	e0fffc17 	ldw	r3,-16(fp)
 4007780:	18c00117 	ldw	r3,4(r3)
 4007784:	10c00035 	stwio	r3,0(r2)
 4007788:	e0bff817 	ldw	r2,-32(fp)
 400778c:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007790:	e0bffa17 	ldw	r2,-24(fp)
 4007794:	1001703a 	wrctl	status,r2
                      OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                      0);
      }
    }
  }
  while (!count && len);
 4007798:	e0bff517 	ldw	r2,-44(fp)
 400779c:	1000021e 	bne	r2,zero,40077a8 <altera_avalon_uart_read+0x158>
 40077a0:	e0bffe17 	ldw	r2,-8(fp)
 40077a4:	103fcd1e 	bne	r2,zero,40076dc <__alt_data_end+0xfc0076dc>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40077a8:	0005303a 	rdctl	r2,status
 40077ac:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40077b0:	e0fffb17 	ldw	r3,-20(fp)
 40077b4:	00bfff84 	movi	r2,-2
 40077b8:	1884703a 	and	r2,r3,r2
 40077bc:	1001703a 	wrctl	status,r2
  
  return context;
 40077c0:	e0bffb17 	ldw	r2,-20(fp)
  /*
   * Ensure that interrupts are enabled, so that the circular buffer can
   * re-fill.
   */

  context = alt_irq_disable_all ();
 40077c4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_RRDY_MSK;
 40077c8:	e0bffc17 	ldw	r2,-16(fp)
 40077cc:	10800117 	ldw	r2,4(r2)
 40077d0:	10c02014 	ori	r3,r2,128
 40077d4:	e0bffc17 	ldw	r2,-16(fp)
 40077d8:	10c00115 	stw	r3,4(r2)
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40077dc:	e0bffc17 	ldw	r2,-16(fp)
 40077e0:	10800017 	ldw	r2,0(r2)
 40077e4:	10800304 	addi	r2,r2,12
 40077e8:	e0fffc17 	ldw	r3,-16(fp)
 40077ec:	18c00117 	ldw	r3,4(r3)
 40077f0:	10c00035 	stwio	r3,0(r2)
 40077f4:	e0bff817 	ldw	r2,-32(fp)
 40077f8:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40077fc:	e0bff717 	ldw	r2,-36(fp)
 4007800:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* Return the number of bytes read */
  if(read_would_block) {
 4007804:	e0bff403 	ldbu	r2,-48(fp)
 4007808:	10000226 	beq	r2,zero,4007814 <altera_avalon_uart_read+0x1c4>
    return -EWOULDBLOCK;
 400780c:	00bffd44 	movi	r2,-11
 4007810:	00000106 	br	4007818 <altera_avalon_uart_read+0x1c8>
  }
  else {
    return count;
 4007814:	e0bff517 	ldw	r2,-44(fp)
  }
}
 4007818:	e037883a 	mov	sp,fp
 400781c:	dfc00117 	ldw	ra,4(sp)
 4007820:	df000017 	ldw	fp,0(sp)
 4007824:	dec00204 	addi	sp,sp,8
 4007828:	f800283a 	ret

0400782c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400782c:	defffe04 	addi	sp,sp,-8
 4007830:	dfc00115 	stw	ra,4(sp)
 4007834:	df000015 	stw	fp,0(sp)
 4007838:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400783c:	d0a01017 	ldw	r2,-32704(gp)
 4007840:	10000326 	beq	r2,zero,4007850 <alt_get_errno+0x24>
 4007844:	d0a01017 	ldw	r2,-32704(gp)
 4007848:	103ee83a 	callr	r2
 400784c:	00000106 	br	4007854 <alt_get_errno+0x28>
 4007850:	d0a63804 	addi	r2,gp,-26400
}
 4007854:	e037883a 	mov	sp,fp
 4007858:	dfc00117 	ldw	ra,4(sp)
 400785c:	df000017 	ldw	fp,0(sp)
 4007860:	dec00204 	addi	sp,sp,8
 4007864:	f800283a 	ret

04007868 <altera_avalon_uart_write>:
 */

int
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
 4007868:	defff204 	addi	sp,sp,-56
 400786c:	dfc00d15 	stw	ra,52(sp)
 4007870:	df000c15 	stw	fp,48(sp)
 4007874:	df000c04 	addi	fp,sp,48
 4007878:	e13ffc15 	stw	r4,-16(fp)
 400787c:	e17ffd15 	stw	r5,-12(fp)
 4007880:	e1bffe15 	stw	r6,-8(fp)
 4007884:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context context;
  int             no_block;
  alt_u32         next;
  int             count = len;
 4007888:	e0bffe17 	ldw	r2,-8(fp)
 400788c:	e0bff415 	stw	r2,-48(fp)
  /* 
   * Construct a flag to indicate whether the device is being accessed in
   * blocking or non-blocking mode.
   */

  no_block = (flags & O_NONBLOCK);
 4007890:	e0bfff17 	ldw	r2,-4(fp)
 4007894:	1090000c 	andi	r2,r2,16384
 4007898:	e0bff515 	stw	r2,-44(fp)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 400789c:	00003c06 	br	4007990 <altera_avalon_uart_write+0x128>
  {
    /* Determine the next slot in the buffer to access */

    next = (sp->tx_end + 1) & ALT_AVALON_UART_BUF_MSK;
 40078a0:	e0bffc17 	ldw	r2,-16(fp)
 40078a4:	10800517 	ldw	r2,20(r2)
 40078a8:	10800044 	addi	r2,r2,1
 40078ac:	10800fcc 	andi	r2,r2,63
 40078b0:	e0bff715 	stw	r2,-36(fp)

    /* block waiting for space if necessary */

    if (next == sp->tx_start)
 40078b4:	e0bffc17 	ldw	r2,-16(fp)
 40078b8:	10c00417 	ldw	r3,16(r2)
 40078bc:	e0bff717 	ldw	r2,-36(fp)
 40078c0:	1880221e 	bne	r3,r2,400794c <altera_avalon_uart_write+0xe4>
    {
      if (no_block)
 40078c4:	e0bff517 	ldw	r2,-44(fp)
 40078c8:	10000526 	beq	r2,zero,40078e0 <altera_avalon_uart_write+0x78>
      {
        /* Set errno to indicate why this function returned early */
 
        ALT_ERRNO = EWOULDBLOCK;
 40078cc:	400782c0 	call	400782c <alt_get_errno>
 40078d0:	1007883a 	mov	r3,r2
 40078d4:	008002c4 	movi	r2,11
 40078d8:	18800015 	stw	r2,0(r3)
        break;
 40078dc:	00002e06 	br	4007998 <altera_avalon_uart_write+0x130>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40078e0:	0005303a 	rdctl	r2,status
 40078e4:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40078e8:	e0fff917 	ldw	r3,-28(fp)
 40078ec:	00bfff84 	movi	r2,-2
 40078f0:	1884703a 	and	r2,r3,r2
 40078f4:	1001703a 	wrctl	status,r2
  
  return context;
 40078f8:	e0bff917 	ldw	r2,-28(fp)
      {
        /* Block waiting for space in the circular buffer */

        /* First, ensure transmit interrupts are enabled to avoid deadlock */

        context = alt_irq_disable_all ();
 40078fc:	e0bff815 	stw	r2,-32(fp)
        sp->ctrl |= (ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 4007900:	e0bffc17 	ldw	r2,-16(fp)
 4007904:	10800117 	ldw	r2,4(r2)
 4007908:	10c11014 	ori	r3,r2,1088
 400790c:	e0bffc17 	ldw	r2,-16(fp)
 4007910:	10c00115 	stw	r3,4(r2)
                        ALTERA_AVALON_UART_CONTROL_DCTS_MSK);
        IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 4007914:	e0bffc17 	ldw	r2,-16(fp)
 4007918:	10800017 	ldw	r2,0(r2)
 400791c:	10800304 	addi	r2,r2,12
 4007920:	e0fffc17 	ldw	r3,-16(fp)
 4007924:	18c00117 	ldw	r3,4(r3)
 4007928:	10c00035 	stwio	r3,0(r2)
 400792c:	e0bff817 	ldw	r2,-32(fp)
 4007930:	e0bff615 	stw	r2,-40(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007934:	e0bff617 	ldw	r2,-40(fp)
 4007938:	1001703a 	wrctl	status,r2
          ALT_FLAG_PEND (sp->events, 
                         ALT_UART_WRITE_RDY,
                         OS_FLAG_WAIT_SET_ANY + OS_FLAG_CONSUME,
                         0);
        }
        while ((next == sp->tx_start));
 400793c:	e0bffc17 	ldw	r2,-16(fp)
 4007940:	10c00417 	ldw	r3,16(r2)
 4007944:	e0bff717 	ldw	r2,-36(fp)
 4007948:	18bffc26 	beq	r3,r2,400793c <__alt_data_end+0xfc00793c>
      }
    }

    count--;
 400794c:	e0bff417 	ldw	r2,-48(fp)
 4007950:	10bfffc4 	addi	r2,r2,-1
 4007954:	e0bff415 	stw	r2,-48(fp)

    /* Add the next character to the transmit buffer */

    sp->tx_buf[sp->tx_end] = *ptr++;
 4007958:	e0bffc17 	ldw	r2,-16(fp)
 400795c:	10c00517 	ldw	r3,20(r2)
 4007960:	e0bffd17 	ldw	r2,-12(fp)
 4007964:	11000044 	addi	r4,r2,1
 4007968:	e13ffd15 	stw	r4,-12(fp)
 400796c:	10800003 	ldbu	r2,0(r2)
 4007970:	1009883a 	mov	r4,r2
 4007974:	e0bffc17 	ldw	r2,-16(fp)
 4007978:	10c5883a 	add	r2,r2,r3
 400797c:	10801704 	addi	r2,r2,92
 4007980:	11000005 	stb	r4,0(r2)
    sp->tx_end = next;
 4007984:	e0bffc17 	ldw	r2,-16(fp)
 4007988:	e0fff717 	ldw	r3,-36(fp)
 400798c:	10c00515 	stw	r3,20(r2)
   * Loop transferring data from the input buffer to the transmit circular
   * buffer. The loop is terminated once all the data has been transferred,
   * or, (if in non-blocking mode) the buffer becomes full.
   */

  while (count)
 4007990:	e0bff417 	ldw	r2,-48(fp)
 4007994:	103fc21e 	bne	r2,zero,40078a0 <__alt_data_end+0xfc0078a0>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007998:	0005303a 	rdctl	r2,status
 400799c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40079a0:	e0fffb17 	ldw	r3,-20(fp)
 40079a4:	00bfff84 	movi	r2,-2
 40079a8:	1884703a 	and	r2,r3,r2
 40079ac:	1001703a 	wrctl	status,r2
  
  return context;
 40079b0:	e0bffb17 	ldw	r2,-20(fp)
  /* 
   * Ensure that interrupts are enabled, so that the circular buffer can 
   * drain.
   */

  context = alt_irq_disable_all ();
 40079b4:	e0bff815 	stw	r2,-32(fp)
  sp->ctrl |= ALTERA_AVALON_UART_CONTROL_TRDY_MSK |
 40079b8:	e0bffc17 	ldw	r2,-16(fp)
 40079bc:	10800117 	ldw	r2,4(r2)
 40079c0:	10c11014 	ori	r3,r2,1088
 40079c4:	e0bffc17 	ldw	r2,-16(fp)
 40079c8:	10c00115 	stw	r3,4(r2)
                 ALTERA_AVALON_UART_CONTROL_DCTS_MSK;
  IOWR_ALTERA_AVALON_UART_CONTROL(sp->base, sp->ctrl);
 40079cc:	e0bffc17 	ldw	r2,-16(fp)
 40079d0:	10800017 	ldw	r2,0(r2)
 40079d4:	10800304 	addi	r2,r2,12
 40079d8:	e0fffc17 	ldw	r3,-16(fp)
 40079dc:	18c00117 	ldw	r3,4(r3)
 40079e0:	10c00035 	stwio	r3,0(r2)
 40079e4:	e0bff817 	ldw	r2,-32(fp)
 40079e8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40079ec:	e0bffa17 	ldw	r2,-24(fp)
 40079f0:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (context);

  /* return the number of bytes written */

  return (len - count);
 40079f4:	e0fffe17 	ldw	r3,-8(fp)
 40079f8:	e0bff417 	ldw	r2,-48(fp)
 40079fc:	1885c83a 	sub	r2,r3,r2
}
 4007a00:	e037883a 	mov	sp,fp
 4007a04:	dfc00117 	ldw	ra,4(sp)
 4007a08:	df000017 	ldw	fp,0(sp)
 4007a0c:	dec00204 	addi	sp,sp,8
 4007a10:	f800283a 	ret

04007a14 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 4007a14:	defff504 	addi	sp,sp,-44
 4007a18:	df000a15 	stw	fp,40(sp)
 4007a1c:	df000a04 	addi	fp,sp,40
 4007a20:	e13ffc15 	stw	r4,-16(fp)
 4007a24:	e17ffd15 	stw	r5,-12(fp)
 4007a28:	e1bffe15 	stw	r6,-8(fp)
 4007a2c:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 4007a30:	e03ff615 	stw	zero,-40(fp)
 4007a34:	d0a63517 	ldw	r2,-26412(gp)
  
  if (alt_ticks_per_second ())
 4007a38:	10003c26 	beq	r2,zero,4007b2c <alt_alarm_start+0x118>
  {
    if (alarm)
 4007a3c:	e0bffc17 	ldw	r2,-16(fp)
 4007a40:	10003826 	beq	r2,zero,4007b24 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 4007a44:	e0bffc17 	ldw	r2,-16(fp)
 4007a48:	e0fffe17 	ldw	r3,-8(fp)
 4007a4c:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 4007a50:	e0bffc17 	ldw	r2,-16(fp)
 4007a54:	e0ffff17 	ldw	r3,-4(fp)
 4007a58:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4007a5c:	0005303a 	rdctl	r2,status
 4007a60:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4007a64:	e0fff917 	ldw	r3,-28(fp)
 4007a68:	00bfff84 	movi	r2,-2
 4007a6c:	1884703a 	and	r2,r3,r2
 4007a70:	1001703a 	wrctl	status,r2
  
  return context;
 4007a74:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 4007a78:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 4007a7c:	d0a63617 	ldw	r2,-26408(gp)
      
      current_nticks = alt_nticks();
 4007a80:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 4007a84:	e0fffd17 	ldw	r3,-12(fp)
 4007a88:	e0bff617 	ldw	r2,-40(fp)
 4007a8c:	1885883a 	add	r2,r3,r2
 4007a90:	10c00044 	addi	r3,r2,1
 4007a94:	e0bffc17 	ldw	r2,-16(fp)
 4007a98:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 4007a9c:	e0bffc17 	ldw	r2,-16(fp)
 4007aa0:	10c00217 	ldw	r3,8(r2)
 4007aa4:	e0bff617 	ldw	r2,-40(fp)
 4007aa8:	1880042e 	bgeu	r3,r2,4007abc <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 4007aac:	e0bffc17 	ldw	r2,-16(fp)
 4007ab0:	00c00044 	movi	r3,1
 4007ab4:	10c00405 	stb	r3,16(r2)
 4007ab8:	00000206 	br	4007ac4 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 4007abc:	e0bffc17 	ldw	r2,-16(fp)
 4007ac0:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 4007ac4:	e0bffc17 	ldw	r2,-16(fp)
 4007ac8:	d0e01104 	addi	r3,gp,-32700
 4007acc:	e0fffa15 	stw	r3,-24(fp)
 4007ad0:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4007ad4:	e0bffb17 	ldw	r2,-20(fp)
 4007ad8:	e0fffa17 	ldw	r3,-24(fp)
 4007adc:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4007ae0:	e0bffa17 	ldw	r2,-24(fp)
 4007ae4:	10c00017 	ldw	r3,0(r2)
 4007ae8:	e0bffb17 	ldw	r2,-20(fp)
 4007aec:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4007af0:	e0bffa17 	ldw	r2,-24(fp)
 4007af4:	10800017 	ldw	r2,0(r2)
 4007af8:	e0fffb17 	ldw	r3,-20(fp)
 4007afc:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4007b00:	e0bffa17 	ldw	r2,-24(fp)
 4007b04:	e0fffb17 	ldw	r3,-20(fp)
 4007b08:	10c00015 	stw	r3,0(r2)
 4007b0c:	e0bff817 	ldw	r2,-32(fp)
 4007b10:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4007b14:	e0bff717 	ldw	r2,-36(fp)
 4007b18:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 4007b1c:	0005883a 	mov	r2,zero
 4007b20:	00000306 	br	4007b30 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 4007b24:	00bffa84 	movi	r2,-22
 4007b28:	00000106 	br	4007b30 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 4007b2c:	00bfde84 	movi	r2,-134
  }
}
 4007b30:	e037883a 	mov	sp,fp
 4007b34:	df000017 	ldw	fp,0(sp)
 4007b38:	dec00104 	addi	sp,sp,4
 4007b3c:	f800283a 	ret

04007b40 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 4007b40:	defffa04 	addi	sp,sp,-24
 4007b44:	dfc00515 	stw	ra,20(sp)
 4007b48:	df000415 	stw	fp,16(sp)
 4007b4c:	df000404 	addi	fp,sp,16
 4007b50:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 4007b54:	00800244 	movi	r2,9
 4007b58:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 4007b5c:	014003f4 	movhi	r5,15
 4007b60:	29509004 	addi	r5,r5,16960
 4007b64:	e13ffd17 	ldw	r4,-12(fp)
 4007b68:	4001d9c0 	call	4001d9c <__mulsi3>
 4007b6c:	100b883a 	mov	r5,r2
 4007b70:	01017db4 	movhi	r4,1526
 4007b74:	21384004 	addi	r4,r4,-7936
 4007b78:	4005e540 	call	4005e54 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 4007b7c:	100b883a 	mov	r5,r2
 4007b80:	01200034 	movhi	r4,32768
 4007b84:	213fffc4 	addi	r4,r4,-1
 4007b88:	4005e540 	call	4005e54 <__udivsi3>
 4007b8c:	100b883a 	mov	r5,r2
 4007b90:	e13fff17 	ldw	r4,-4(fp)
 4007b94:	4005e540 	call	4005e54 <__udivsi3>
 4007b98:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 4007b9c:	e0bffe17 	ldw	r2,-8(fp)
 4007ba0:	10002a26 	beq	r2,zero,4007c4c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 4007ba4:	e03ffc15 	stw	zero,-16(fp)
 4007ba8:	00001706 	br	4007c08 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 4007bac:	00a00034 	movhi	r2,32768
 4007bb0:	10bfffc4 	addi	r2,r2,-1
 4007bb4:	10bfffc4 	addi	r2,r2,-1
 4007bb8:	103ffe1e 	bne	r2,zero,4007bb4 <__alt_data_end+0xfc007bb4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 4007bbc:	014003f4 	movhi	r5,15
 4007bc0:	29509004 	addi	r5,r5,16960
 4007bc4:	e13ffd17 	ldw	r4,-12(fp)
 4007bc8:	4001d9c0 	call	4001d9c <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 4007bcc:	100b883a 	mov	r5,r2
 4007bd0:	01017db4 	movhi	r4,1526
 4007bd4:	21384004 	addi	r4,r4,-7936
 4007bd8:	4005e540 	call	4005e54 <__udivsi3>
 4007bdc:	100b883a 	mov	r5,r2
 4007be0:	01200034 	movhi	r4,32768
 4007be4:	213fffc4 	addi	r4,r4,-1
 4007be8:	4005e540 	call	4005e54 <__udivsi3>
 4007bec:	1007883a 	mov	r3,r2
 4007bf0:	e0bfff17 	ldw	r2,-4(fp)
 4007bf4:	10c5c83a 	sub	r2,r2,r3
 4007bf8:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 4007bfc:	e0bffc17 	ldw	r2,-16(fp)
 4007c00:	10800044 	addi	r2,r2,1
 4007c04:	e0bffc15 	stw	r2,-16(fp)
 4007c08:	e0fffc17 	ldw	r3,-16(fp)
 4007c0c:	e0bffe17 	ldw	r2,-8(fp)
 4007c10:	18bfe616 	blt	r3,r2,4007bac <__alt_data_end+0xfc007bac>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4007c14:	014003f4 	movhi	r5,15
 4007c18:	29509004 	addi	r5,r5,16960
 4007c1c:	e13ffd17 	ldw	r4,-12(fp)
 4007c20:	4001d9c0 	call	4001d9c <__mulsi3>
 4007c24:	100b883a 	mov	r5,r2
 4007c28:	01017db4 	movhi	r4,1526
 4007c2c:	21384004 	addi	r4,r4,-7936
 4007c30:	4005e540 	call	4005e54 <__udivsi3>
 4007c34:	e17fff17 	ldw	r5,-4(fp)
 4007c38:	1009883a 	mov	r4,r2
 4007c3c:	4001d9c0 	call	4001d9c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4007c40:	10bfffc4 	addi	r2,r2,-1
 4007c44:	103ffe1e 	bne	r2,zero,4007c40 <__alt_data_end+0xfc007c40>
 4007c48:	00000d06 	br	4007c80 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 4007c4c:	014003f4 	movhi	r5,15
 4007c50:	29509004 	addi	r5,r5,16960
 4007c54:	e13ffd17 	ldw	r4,-12(fp)
 4007c58:	4001d9c0 	call	4001d9c <__mulsi3>
 4007c5c:	100b883a 	mov	r5,r2
 4007c60:	01017db4 	movhi	r4,1526
 4007c64:	21384004 	addi	r4,r4,-7936
 4007c68:	4005e540 	call	4005e54 <__udivsi3>
 4007c6c:	e17fff17 	ldw	r5,-4(fp)
 4007c70:	1009883a 	mov	r4,r2
 4007c74:	4001d9c0 	call	4001d9c <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 4007c78:	10bfffc4 	addi	r2,r2,-1
 4007c7c:	00bffe16 	blt	zero,r2,4007c78 <__alt_data_end+0xfc007c78>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 4007c80:	0005883a 	mov	r2,zero
}
 4007c84:	e037883a 	mov	sp,fp
 4007c88:	dfc00117 	ldw	ra,4(sp)
 4007c8c:	df000017 	ldw	fp,0(sp)
 4007c90:	dec00204 	addi	sp,sp,8
 4007c94:	f800283a 	ret

04007c98 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4007c98:	defffe04 	addi	sp,sp,-8
 4007c9c:	dfc00115 	stw	ra,4(sp)
 4007ca0:	df000015 	stw	fp,0(sp)
 4007ca4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4007ca8:	d0a01017 	ldw	r2,-32704(gp)
 4007cac:	10000326 	beq	r2,zero,4007cbc <alt_get_errno+0x24>
 4007cb0:	d0a01017 	ldw	r2,-32704(gp)
 4007cb4:	103ee83a 	callr	r2
 4007cb8:	00000106 	br	4007cc0 <alt_get_errno+0x28>
 4007cbc:	d0a63804 	addi	r2,gp,-26400
}
 4007cc0:	e037883a 	mov	sp,fp
 4007cc4:	dfc00117 	ldw	ra,4(sp)
 4007cc8:	df000017 	ldw	fp,0(sp)
 4007ccc:	dec00204 	addi	sp,sp,8
 4007cd0:	f800283a 	ret

04007cd4 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 4007cd4:	defffb04 	addi	sp,sp,-20
 4007cd8:	dfc00415 	stw	ra,16(sp)
 4007cdc:	df000315 	stw	fp,12(sp)
 4007ce0:	df000304 	addi	fp,sp,12
 4007ce4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 4007ce8:	e0bfff17 	ldw	r2,-4(fp)
 4007cec:	10000816 	blt	r2,zero,4007d10 <close+0x3c>
 4007cf0:	01400304 	movi	r5,12
 4007cf4:	e13fff17 	ldw	r4,-4(fp)
 4007cf8:	4001d9c0 	call	4001d9c <__mulsi3>
 4007cfc:	1007883a 	mov	r3,r2
 4007d00:	00810074 	movhi	r2,1025
 4007d04:	10a8d904 	addi	r2,r2,-23708
 4007d08:	1885883a 	add	r2,r3,r2
 4007d0c:	00000106 	br	4007d14 <close+0x40>
 4007d10:	0005883a 	mov	r2,zero
 4007d14:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 4007d18:	e0bffd17 	ldw	r2,-12(fp)
 4007d1c:	10001926 	beq	r2,zero,4007d84 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 4007d20:	e0bffd17 	ldw	r2,-12(fp)
 4007d24:	10800017 	ldw	r2,0(r2)
 4007d28:	10800417 	ldw	r2,16(r2)
 4007d2c:	10000626 	beq	r2,zero,4007d48 <close+0x74>
 4007d30:	e0bffd17 	ldw	r2,-12(fp)
 4007d34:	10800017 	ldw	r2,0(r2)
 4007d38:	10800417 	ldw	r2,16(r2)
 4007d3c:	e13ffd17 	ldw	r4,-12(fp)
 4007d40:	103ee83a 	callr	r2
 4007d44:	00000106 	br	4007d4c <close+0x78>
 4007d48:	0005883a 	mov	r2,zero
 4007d4c:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 4007d50:	e13fff17 	ldw	r4,-4(fp)
 4007d54:	400863c0 	call	400863c <alt_release_fd>
    if (rval < 0)
 4007d58:	e0bffe17 	ldw	r2,-8(fp)
 4007d5c:	1000070e 	bge	r2,zero,4007d7c <close+0xa8>
    {
      ALT_ERRNO = -rval;
 4007d60:	4007c980 	call	4007c98 <alt_get_errno>
 4007d64:	1007883a 	mov	r3,r2
 4007d68:	e0bffe17 	ldw	r2,-8(fp)
 4007d6c:	0085c83a 	sub	r2,zero,r2
 4007d70:	18800015 	stw	r2,0(r3)
      return -1;
 4007d74:	00bfffc4 	movi	r2,-1
 4007d78:	00000706 	br	4007d98 <close+0xc4>
    }
    return 0;
 4007d7c:	0005883a 	mov	r2,zero
 4007d80:	00000506 	br	4007d98 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 4007d84:	4007c980 	call	4007c98 <alt_get_errno>
 4007d88:	1007883a 	mov	r3,r2
 4007d8c:	00801444 	movi	r2,81
 4007d90:	18800015 	stw	r2,0(r3)
    return -1;
 4007d94:	00bfffc4 	movi	r2,-1
  }
}
 4007d98:	e037883a 	mov	sp,fp
 4007d9c:	dfc00117 	ldw	ra,4(sp)
 4007da0:	df000017 	ldw	fp,0(sp)
 4007da4:	dec00204 	addi	sp,sp,8
 4007da8:	f800283a 	ret

04007dac <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 4007dac:	deffff04 	addi	sp,sp,-4
 4007db0:	df000015 	stw	fp,0(sp)
 4007db4:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 4007db8:	0001883a 	nop
 4007dbc:	e037883a 	mov	sp,fp
 4007dc0:	df000017 	ldw	fp,0(sp)
 4007dc4:	dec00104 	addi	sp,sp,4
 4007dc8:	f800283a 	ret

04007dcc <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 4007dcc:	defffc04 	addi	sp,sp,-16
 4007dd0:	df000315 	stw	fp,12(sp)
 4007dd4:	df000304 	addi	fp,sp,12
 4007dd8:	e13ffd15 	stw	r4,-12(fp)
 4007ddc:	e17ffe15 	stw	r5,-8(fp)
 4007de0:	e1bfff15 	stw	r6,-4(fp)
  return len;
 4007de4:	e0bfff17 	ldw	r2,-4(fp)
}
 4007de8:	e037883a 	mov	sp,fp
 4007dec:	df000017 	ldw	fp,0(sp)
 4007df0:	dec00104 	addi	sp,sp,4
 4007df4:	f800283a 	ret

04007df8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4007df8:	defffe04 	addi	sp,sp,-8
 4007dfc:	dfc00115 	stw	ra,4(sp)
 4007e00:	df000015 	stw	fp,0(sp)
 4007e04:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 4007e08:	d0a01017 	ldw	r2,-32704(gp)
 4007e0c:	10000326 	beq	r2,zero,4007e1c <alt_get_errno+0x24>
 4007e10:	d0a01017 	ldw	r2,-32704(gp)
 4007e14:	103ee83a 	callr	r2
 4007e18:	00000106 	br	4007e20 <alt_get_errno+0x28>
 4007e1c:	d0a63804 	addi	r2,gp,-26400
}
 4007e20:	e037883a 	mov	sp,fp
 4007e24:	dfc00117 	ldw	ra,4(sp)
 4007e28:	df000017 	ldw	fp,0(sp)
 4007e2c:	dec00204 	addi	sp,sp,8
 4007e30:	f800283a 	ret

04007e34 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 4007e34:	defffa04 	addi	sp,sp,-24
 4007e38:	dfc00515 	stw	ra,20(sp)
 4007e3c:	df000415 	stw	fp,16(sp)
 4007e40:	df000404 	addi	fp,sp,16
 4007e44:	e13ffe15 	stw	r4,-8(fp)
 4007e48:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 4007e4c:	e0bffe17 	ldw	r2,-8(fp)
 4007e50:	10000326 	beq	r2,zero,4007e60 <alt_dev_llist_insert+0x2c>
 4007e54:	e0bffe17 	ldw	r2,-8(fp)
 4007e58:	10800217 	ldw	r2,8(r2)
 4007e5c:	1000061e 	bne	r2,zero,4007e78 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 4007e60:	4007df80 	call	4007df8 <alt_get_errno>
 4007e64:	1007883a 	mov	r3,r2
 4007e68:	00800584 	movi	r2,22
 4007e6c:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 4007e70:	00bffa84 	movi	r2,-22
 4007e74:	00001306 	br	4007ec4 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 4007e78:	e0bffe17 	ldw	r2,-8(fp)
 4007e7c:	e0ffff17 	ldw	r3,-4(fp)
 4007e80:	e0fffc15 	stw	r3,-16(fp)
 4007e84:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 4007e88:	e0bffd17 	ldw	r2,-12(fp)
 4007e8c:	e0fffc17 	ldw	r3,-16(fp)
 4007e90:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 4007e94:	e0bffc17 	ldw	r2,-16(fp)
 4007e98:	10c00017 	ldw	r3,0(r2)
 4007e9c:	e0bffd17 	ldw	r2,-12(fp)
 4007ea0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 4007ea4:	e0bffc17 	ldw	r2,-16(fp)
 4007ea8:	10800017 	ldw	r2,0(r2)
 4007eac:	e0fffd17 	ldw	r3,-12(fp)
 4007eb0:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 4007eb4:	e0bffc17 	ldw	r2,-16(fp)
 4007eb8:	e0fffd17 	ldw	r3,-12(fp)
 4007ebc:	10c00015 	stw	r3,0(r2)

  return 0;  
 4007ec0:	0005883a 	mov	r2,zero
}
 4007ec4:	e037883a 	mov	sp,fp
 4007ec8:	dfc00117 	ldw	ra,4(sp)
 4007ecc:	df000017 	ldw	fp,0(sp)
 4007ed0:	dec00204 	addi	sp,sp,8
 4007ed4:	f800283a 	ret

04007ed8 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 4007ed8:	defffd04 	addi	sp,sp,-12
 4007edc:	dfc00215 	stw	ra,8(sp)
 4007ee0:	df000115 	stw	fp,4(sp)
 4007ee4:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4007ee8:	00810074 	movhi	r2,1025
 4007eec:	10a3ea04 	addi	r2,r2,-28760
 4007ef0:	e0bfff15 	stw	r2,-4(fp)
 4007ef4:	00000606 	br	4007f10 <_do_ctors+0x38>
        (*ctor) (); 
 4007ef8:	e0bfff17 	ldw	r2,-4(fp)
 4007efc:	10800017 	ldw	r2,0(r2)
 4007f00:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 4007f04:	e0bfff17 	ldw	r2,-4(fp)
 4007f08:	10bfff04 	addi	r2,r2,-4
 4007f0c:	e0bfff15 	stw	r2,-4(fp)
 4007f10:	e0ffff17 	ldw	r3,-4(fp)
 4007f14:	00810074 	movhi	r2,1025
 4007f18:	10a3eb04 	addi	r2,r2,-28756
 4007f1c:	18bff62e 	bgeu	r3,r2,4007ef8 <__alt_data_end+0xfc007ef8>
        (*ctor) (); 
}
 4007f20:	0001883a 	nop
 4007f24:	e037883a 	mov	sp,fp
 4007f28:	dfc00117 	ldw	ra,4(sp)
 4007f2c:	df000017 	ldw	fp,0(sp)
 4007f30:	dec00204 	addi	sp,sp,8
 4007f34:	f800283a 	ret

04007f38 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 4007f38:	defffd04 	addi	sp,sp,-12
 4007f3c:	dfc00215 	stw	ra,8(sp)
 4007f40:	df000115 	stw	fp,4(sp)
 4007f44:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4007f48:	00810074 	movhi	r2,1025
 4007f4c:	10a3ea04 	addi	r2,r2,-28760
 4007f50:	e0bfff15 	stw	r2,-4(fp)
 4007f54:	00000606 	br	4007f70 <_do_dtors+0x38>
        (*dtor) (); 
 4007f58:	e0bfff17 	ldw	r2,-4(fp)
 4007f5c:	10800017 	ldw	r2,0(r2)
 4007f60:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 4007f64:	e0bfff17 	ldw	r2,-4(fp)
 4007f68:	10bfff04 	addi	r2,r2,-4
 4007f6c:	e0bfff15 	stw	r2,-4(fp)
 4007f70:	e0ffff17 	ldw	r3,-4(fp)
 4007f74:	00810074 	movhi	r2,1025
 4007f78:	10a3eb04 	addi	r2,r2,-28756
 4007f7c:	18bff62e 	bgeu	r3,r2,4007f58 <__alt_data_end+0xfc007f58>
        (*dtor) (); 
}
 4007f80:	0001883a 	nop
 4007f84:	e037883a 	mov	sp,fp
 4007f88:	dfc00117 	ldw	ra,4(sp)
 4007f8c:	df000017 	ldw	fp,0(sp)
 4007f90:	dec00204 	addi	sp,sp,8
 4007f94:	f800283a 	ret

04007f98 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 4007f98:	deffff04 	addi	sp,sp,-4
 4007f9c:	df000015 	stw	fp,0(sp)
 4007fa0:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 4007fa4:	0001883a 	nop
 4007fa8:	e037883a 	mov	sp,fp
 4007fac:	df000017 	ldw	fp,0(sp)
 4007fb0:	dec00104 	addi	sp,sp,4
 4007fb4:	f800283a 	ret

04007fb8 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4007fb8:	defff904 	addi	sp,sp,-28
 4007fbc:	dfc00615 	stw	ra,24(sp)
 4007fc0:	df000515 	stw	fp,20(sp)
 4007fc4:	df000504 	addi	fp,sp,20
 4007fc8:	e13ffc15 	stw	r4,-16(fp)
 4007fcc:	e17ffd15 	stw	r5,-12(fp)
 4007fd0:	e1bffe15 	stw	r6,-8(fp)
 4007fd4:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 4007fd8:	e0800217 	ldw	r2,8(fp)
 4007fdc:	d8800015 	stw	r2,0(sp)
 4007fe0:	e1ffff17 	ldw	r7,-4(fp)
 4007fe4:	e1bffe17 	ldw	r6,-8(fp)
 4007fe8:	e17ffd17 	ldw	r5,-12(fp)
 4007fec:	e13ffc17 	ldw	r4,-16(fp)
 4007ff0:	40081680 	call	4008168 <alt_iic_isr_register>
}  
 4007ff4:	e037883a 	mov	sp,fp
 4007ff8:	dfc00117 	ldw	ra,4(sp)
 4007ffc:	df000017 	ldw	fp,0(sp)
 4008000:	dec00204 	addi	sp,sp,8
 4008004:	f800283a 	ret

04008008 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 4008008:	defff904 	addi	sp,sp,-28
 400800c:	df000615 	stw	fp,24(sp)
 4008010:	df000604 	addi	fp,sp,24
 4008014:	e13ffe15 	stw	r4,-8(fp)
 4008018:	e17fff15 	stw	r5,-4(fp)
 400801c:	e0bfff17 	ldw	r2,-4(fp)
 4008020:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4008024:	0005303a 	rdctl	r2,status
 4008028:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400802c:	e0fffb17 	ldw	r3,-20(fp)
 4008030:	00bfff84 	movi	r2,-2
 4008034:	1884703a 	and	r2,r3,r2
 4008038:	1001703a 	wrctl	status,r2
  
  return context;
 400803c:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 4008040:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4008044:	00c00044 	movi	r3,1
 4008048:	e0bffa17 	ldw	r2,-24(fp)
 400804c:	1884983a 	sll	r2,r3,r2
 4008050:	1007883a 	mov	r3,r2
 4008054:	d0a63117 	ldw	r2,-26428(gp)
 4008058:	1884b03a 	or	r2,r3,r2
 400805c:	d0a63115 	stw	r2,-26428(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 4008060:	d0a63117 	ldw	r2,-26428(gp)
 4008064:	100170fa 	wrctl	ienable,r2
 4008068:	e0bffc17 	ldw	r2,-16(fp)
 400806c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008070:	e0bffd17 	ldw	r2,-12(fp)
 4008074:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4008078:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 400807c:	0001883a 	nop
}
 4008080:	e037883a 	mov	sp,fp
 4008084:	df000017 	ldw	fp,0(sp)
 4008088:	dec00104 	addi	sp,sp,4
 400808c:	f800283a 	ret

04008090 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 4008090:	defff904 	addi	sp,sp,-28
 4008094:	df000615 	stw	fp,24(sp)
 4008098:	df000604 	addi	fp,sp,24
 400809c:	e13ffe15 	stw	r4,-8(fp)
 40080a0:	e17fff15 	stw	r5,-4(fp)
 40080a4:	e0bfff17 	ldw	r2,-4(fp)
 40080a8:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40080ac:	0005303a 	rdctl	r2,status
 40080b0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40080b4:	e0fffb17 	ldw	r3,-20(fp)
 40080b8:	00bfff84 	movi	r2,-2
 40080bc:	1884703a 	and	r2,r3,r2
 40080c0:	1001703a 	wrctl	status,r2
  
  return context;
 40080c4:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40080c8:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 40080cc:	00c00044 	movi	r3,1
 40080d0:	e0bffa17 	ldw	r2,-24(fp)
 40080d4:	1884983a 	sll	r2,r3,r2
 40080d8:	0084303a 	nor	r2,zero,r2
 40080dc:	1007883a 	mov	r3,r2
 40080e0:	d0a63117 	ldw	r2,-26428(gp)
 40080e4:	1884703a 	and	r2,r3,r2
 40080e8:	d0a63115 	stw	r2,-26428(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40080ec:	d0a63117 	ldw	r2,-26428(gp)
 40080f0:	100170fa 	wrctl	ienable,r2
 40080f4:	e0bffc17 	ldw	r2,-16(fp)
 40080f8:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40080fc:	e0bffd17 	ldw	r2,-12(fp)
 4008100:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4008104:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 4008108:	0001883a 	nop
}
 400810c:	e037883a 	mov	sp,fp
 4008110:	df000017 	ldw	fp,0(sp)
 4008114:	dec00104 	addi	sp,sp,4
 4008118:	f800283a 	ret

0400811c <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400811c:	defffc04 	addi	sp,sp,-16
 4008120:	df000315 	stw	fp,12(sp)
 4008124:	df000304 	addi	fp,sp,12
 4008128:	e13ffe15 	stw	r4,-8(fp)
 400812c:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 4008130:	000530fa 	rdctl	r2,ienable
 4008134:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4008138:	00c00044 	movi	r3,1
 400813c:	e0bfff17 	ldw	r2,-4(fp)
 4008140:	1884983a 	sll	r2,r3,r2
 4008144:	1007883a 	mov	r3,r2
 4008148:	e0bffd17 	ldw	r2,-12(fp)
 400814c:	1884703a 	and	r2,r3,r2
 4008150:	1004c03a 	cmpne	r2,r2,zero
 4008154:	10803fcc 	andi	r2,r2,255
}
 4008158:	e037883a 	mov	sp,fp
 400815c:	df000017 	ldw	fp,0(sp)
 4008160:	dec00104 	addi	sp,sp,4
 4008164:	f800283a 	ret

04008168 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4008168:	defff504 	addi	sp,sp,-44
 400816c:	dfc00a15 	stw	ra,40(sp)
 4008170:	df000915 	stw	fp,36(sp)
 4008174:	df000904 	addi	fp,sp,36
 4008178:	e13ffc15 	stw	r4,-16(fp)
 400817c:	e17ffd15 	stw	r5,-12(fp)
 4008180:	e1bffe15 	stw	r6,-8(fp)
 4008184:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4008188:	00bffa84 	movi	r2,-22
 400818c:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 4008190:	e0bffd17 	ldw	r2,-12(fp)
 4008194:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4008198:	e0bff817 	ldw	r2,-32(fp)
 400819c:	10800808 	cmpgei	r2,r2,32
 40081a0:	1000271e 	bne	r2,zero,4008240 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40081a4:	0005303a 	rdctl	r2,status
 40081a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40081ac:	e0fffb17 	ldw	r3,-20(fp)
 40081b0:	00bfff84 	movi	r2,-2
 40081b4:	1884703a 	and	r2,r3,r2
 40081b8:	1001703a 	wrctl	status,r2
  
  return context;
 40081bc:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 40081c0:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 40081c4:	00810074 	movhi	r2,1025
 40081c8:	10b0b204 	addi	r2,r2,-15672
 40081cc:	e0fff817 	ldw	r3,-32(fp)
 40081d0:	180690fa 	slli	r3,r3,3
 40081d4:	10c5883a 	add	r2,r2,r3
 40081d8:	e0fffe17 	ldw	r3,-8(fp)
 40081dc:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 40081e0:	00810074 	movhi	r2,1025
 40081e4:	10b0b204 	addi	r2,r2,-15672
 40081e8:	e0fff817 	ldw	r3,-32(fp)
 40081ec:	180690fa 	slli	r3,r3,3
 40081f0:	10c5883a 	add	r2,r2,r3
 40081f4:	10800104 	addi	r2,r2,4
 40081f8:	e0ffff17 	ldw	r3,-4(fp)
 40081fc:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 4008200:	e0bffe17 	ldw	r2,-8(fp)
 4008204:	10000526 	beq	r2,zero,400821c <alt_iic_isr_register+0xb4>
 4008208:	e0bff817 	ldw	r2,-32(fp)
 400820c:	100b883a 	mov	r5,r2
 4008210:	e13ffc17 	ldw	r4,-16(fp)
 4008214:	40080080 	call	4008008 <alt_ic_irq_enable>
 4008218:	00000406 	br	400822c <alt_iic_isr_register+0xc4>
 400821c:	e0bff817 	ldw	r2,-32(fp)
 4008220:	100b883a 	mov	r5,r2
 4008224:	e13ffc17 	ldw	r4,-16(fp)
 4008228:	40080900 	call	4008090 <alt_ic_irq_disable>
 400822c:	e0bff715 	stw	r2,-36(fp)
 4008230:	e0bffa17 	ldw	r2,-24(fp)
 4008234:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008238:	e0bff917 	ldw	r2,-28(fp)
 400823c:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 4008240:	e0bff717 	ldw	r2,-36(fp)
}
 4008244:	e037883a 	mov	sp,fp
 4008248:	dfc00117 	ldw	ra,4(sp)
 400824c:	df000017 	ldw	fp,0(sp)
 4008250:	dec00204 	addi	sp,sp,8
 4008254:	f800283a 	ret

04008258 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4008258:	defff804 	addi	sp,sp,-32
 400825c:	dfc00715 	stw	ra,28(sp)
 4008260:	df000615 	stw	fp,24(sp)
 4008264:	dc000515 	stw	r16,20(sp)
 4008268:	df000604 	addi	fp,sp,24
 400826c:	e13ffb15 	stw	r4,-20(fp)
 4008270:	e17ffc15 	stw	r5,-16(fp)
 4008274:	e1bffd15 	stw	r6,-12(fp)
 4008278:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 400827c:	e1bffe17 	ldw	r6,-8(fp)
 4008280:	e17ffd17 	ldw	r5,-12(fp)
 4008284:	e13ffc17 	ldw	r4,-16(fp)
 4008288:	40084e00 	call	40084e0 <open>
 400828c:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 4008290:	e0bffa17 	ldw	r2,-24(fp)
 4008294:	10002216 	blt	r2,zero,4008320 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 4008298:	04010074 	movhi	r16,1025
 400829c:	8428d904 	addi	r16,r16,-23708
 40082a0:	e0bffa17 	ldw	r2,-24(fp)
 40082a4:	01400304 	movi	r5,12
 40082a8:	1009883a 	mov	r4,r2
 40082ac:	4001d9c0 	call	4001d9c <__mulsi3>
 40082b0:	8085883a 	add	r2,r16,r2
 40082b4:	10c00017 	ldw	r3,0(r2)
 40082b8:	e0bffb17 	ldw	r2,-20(fp)
 40082bc:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 40082c0:	04010074 	movhi	r16,1025
 40082c4:	8428d904 	addi	r16,r16,-23708
 40082c8:	e0bffa17 	ldw	r2,-24(fp)
 40082cc:	01400304 	movi	r5,12
 40082d0:	1009883a 	mov	r4,r2
 40082d4:	4001d9c0 	call	4001d9c <__mulsi3>
 40082d8:	8085883a 	add	r2,r16,r2
 40082dc:	10800104 	addi	r2,r2,4
 40082e0:	10c00017 	ldw	r3,0(r2)
 40082e4:	e0bffb17 	ldw	r2,-20(fp)
 40082e8:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40082ec:	04010074 	movhi	r16,1025
 40082f0:	8428d904 	addi	r16,r16,-23708
 40082f4:	e0bffa17 	ldw	r2,-24(fp)
 40082f8:	01400304 	movi	r5,12
 40082fc:	1009883a 	mov	r4,r2
 4008300:	4001d9c0 	call	4001d9c <__mulsi3>
 4008304:	8085883a 	add	r2,r16,r2
 4008308:	10800204 	addi	r2,r2,8
 400830c:	10c00017 	ldw	r3,0(r2)
 4008310:	e0bffb17 	ldw	r2,-20(fp)
 4008314:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 4008318:	e13ffa17 	ldw	r4,-24(fp)
 400831c:	400863c0 	call	400863c <alt_release_fd>
  }
} 
 4008320:	0001883a 	nop
 4008324:	e6ffff04 	addi	sp,fp,-4
 4008328:	dfc00217 	ldw	ra,8(sp)
 400832c:	df000117 	ldw	fp,4(sp)
 4008330:	dc000017 	ldw	r16,0(sp)
 4008334:	dec00304 	addi	sp,sp,12
 4008338:	f800283a 	ret

0400833c <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400833c:	defffb04 	addi	sp,sp,-20
 4008340:	dfc00415 	stw	ra,16(sp)
 4008344:	df000315 	stw	fp,12(sp)
 4008348:	df000304 	addi	fp,sp,12
 400834c:	e13ffd15 	stw	r4,-12(fp)
 4008350:	e17ffe15 	stw	r5,-8(fp)
 4008354:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4008358:	01c07fc4 	movi	r7,511
 400835c:	01800044 	movi	r6,1
 4008360:	e17ffd17 	ldw	r5,-12(fp)
 4008364:	01010074 	movhi	r4,1025
 4008368:	2128dc04 	addi	r4,r4,-23696
 400836c:	40082580 	call	4008258 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 4008370:	01c07fc4 	movi	r7,511
 4008374:	000d883a 	mov	r6,zero
 4008378:	e17ffe17 	ldw	r5,-8(fp)
 400837c:	01010074 	movhi	r4,1025
 4008380:	2128d904 	addi	r4,r4,-23708
 4008384:	40082580 	call	4008258 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4008388:	01c07fc4 	movi	r7,511
 400838c:	01800044 	movi	r6,1
 4008390:	e17fff17 	ldw	r5,-4(fp)
 4008394:	01010074 	movhi	r4,1025
 4008398:	2128df04 	addi	r4,r4,-23684
 400839c:	40082580 	call	4008258 <alt_open_fd>
}  
 40083a0:	0001883a 	nop
 40083a4:	e037883a 	mov	sp,fp
 40083a8:	dfc00117 	ldw	ra,4(sp)
 40083ac:	df000017 	ldw	fp,0(sp)
 40083b0:	dec00204 	addi	sp,sp,8
 40083b4:	f800283a 	ret

040083b8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 40083b8:	defffe04 	addi	sp,sp,-8
 40083bc:	dfc00115 	stw	ra,4(sp)
 40083c0:	df000015 	stw	fp,0(sp)
 40083c4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40083c8:	d0a01017 	ldw	r2,-32704(gp)
 40083cc:	10000326 	beq	r2,zero,40083dc <alt_get_errno+0x24>
 40083d0:	d0a01017 	ldw	r2,-32704(gp)
 40083d4:	103ee83a 	callr	r2
 40083d8:	00000106 	br	40083e0 <alt_get_errno+0x28>
 40083dc:	d0a63804 	addi	r2,gp,-26400
}
 40083e0:	e037883a 	mov	sp,fp
 40083e4:	dfc00117 	ldw	ra,4(sp)
 40083e8:	df000017 	ldw	fp,0(sp)
 40083ec:	dec00204 	addi	sp,sp,8
 40083f0:	f800283a 	ret

040083f4 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40083f4:	defffb04 	addi	sp,sp,-20
 40083f8:	dfc00415 	stw	ra,16(sp)
 40083fc:	df000315 	stw	fp,12(sp)
 4008400:	dc000215 	stw	r16,8(sp)
 4008404:	df000304 	addi	fp,sp,12
 4008408:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400840c:	e0bffe17 	ldw	r2,-8(fp)
 4008410:	10800217 	ldw	r2,8(r2)
 4008414:	10d00034 	orhi	r3,r2,16384
 4008418:	e0bffe17 	ldw	r2,-8(fp)
 400841c:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4008420:	e03ffd15 	stw	zero,-12(fp)
 4008424:	00002306 	br	40084b4 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4008428:	04010074 	movhi	r16,1025
 400842c:	8428d904 	addi	r16,r16,-23708
 4008430:	e0bffd17 	ldw	r2,-12(fp)
 4008434:	01400304 	movi	r5,12
 4008438:	1009883a 	mov	r4,r2
 400843c:	4001d9c0 	call	4001d9c <__mulsi3>
 4008440:	8085883a 	add	r2,r16,r2
 4008444:	10c00017 	ldw	r3,0(r2)
 4008448:	e0bffe17 	ldw	r2,-8(fp)
 400844c:	10800017 	ldw	r2,0(r2)
 4008450:	1880151e 	bne	r3,r2,40084a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4008454:	04010074 	movhi	r16,1025
 4008458:	8428d904 	addi	r16,r16,-23708
 400845c:	e0bffd17 	ldw	r2,-12(fp)
 4008460:	01400304 	movi	r5,12
 4008464:	1009883a 	mov	r4,r2
 4008468:	4001d9c0 	call	4001d9c <__mulsi3>
 400846c:	8085883a 	add	r2,r16,r2
 4008470:	10800204 	addi	r2,r2,8
 4008474:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4008478:	10000b0e 	bge	r2,zero,40084a8 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 400847c:	01400304 	movi	r5,12
 4008480:	e13ffd17 	ldw	r4,-12(fp)
 4008484:	4001d9c0 	call	4001d9c <__mulsi3>
 4008488:	1007883a 	mov	r3,r2
 400848c:	00810074 	movhi	r2,1025
 4008490:	10a8d904 	addi	r2,r2,-23708
 4008494:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4008498:	e0bffe17 	ldw	r2,-8(fp)
 400849c:	18800226 	beq	r3,r2,40084a8 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 40084a0:	00bffcc4 	movi	r2,-13
 40084a4:	00000806 	br	40084c8 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40084a8:	e0bffd17 	ldw	r2,-12(fp)
 40084ac:	10800044 	addi	r2,r2,1
 40084b0:	e0bffd15 	stw	r2,-12(fp)
 40084b4:	d0a00f17 	ldw	r2,-32708(gp)
 40084b8:	1007883a 	mov	r3,r2
 40084bc:	e0bffd17 	ldw	r2,-12(fp)
 40084c0:	18bfd92e 	bgeu	r3,r2,4008428 <__alt_data_end+0xfc008428>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40084c4:	0005883a 	mov	r2,zero
}
 40084c8:	e6ffff04 	addi	sp,fp,-4
 40084cc:	dfc00217 	ldw	ra,8(sp)
 40084d0:	df000117 	ldw	fp,4(sp)
 40084d4:	dc000017 	ldw	r16,0(sp)
 40084d8:	dec00304 	addi	sp,sp,12
 40084dc:	f800283a 	ret

040084e0 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40084e0:	defff604 	addi	sp,sp,-40
 40084e4:	dfc00915 	stw	ra,36(sp)
 40084e8:	df000815 	stw	fp,32(sp)
 40084ec:	df000804 	addi	fp,sp,32
 40084f0:	e13ffd15 	stw	r4,-12(fp)
 40084f4:	e17ffe15 	stw	r5,-8(fp)
 40084f8:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40084fc:	00bfffc4 	movi	r2,-1
 4008500:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 4008504:	00bffb44 	movi	r2,-19
 4008508:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 400850c:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 4008510:	d1600d04 	addi	r5,gp,-32716
 4008514:	e13ffd17 	ldw	r4,-12(fp)
 4008518:	40088880 	call	4008888 <alt_find_dev>
 400851c:	e0bff815 	stw	r2,-32(fp)
 4008520:	e0bff817 	ldw	r2,-32(fp)
 4008524:	1000051e 	bne	r2,zero,400853c <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4008528:	e13ffd17 	ldw	r4,-12(fp)
 400852c:	40089180 	call	4008918 <alt_find_file>
 4008530:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4008534:	00800044 	movi	r2,1
 4008538:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400853c:	e0bff817 	ldw	r2,-32(fp)
 4008540:	10002b26 	beq	r2,zero,40085f0 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4008544:	e13ff817 	ldw	r4,-32(fp)
 4008548:	4008a200 	call	4008a20 <alt_get_fd>
 400854c:	e0bff915 	stw	r2,-28(fp)
 4008550:	e0bff917 	ldw	r2,-28(fp)
 4008554:	1000030e 	bge	r2,zero,4008564 <open+0x84>
    {
      status = index;
 4008558:	e0bff917 	ldw	r2,-28(fp)
 400855c:	e0bffa15 	stw	r2,-24(fp)
 4008560:	00002506 	br	40085f8 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4008564:	01400304 	movi	r5,12
 4008568:	e13ff917 	ldw	r4,-28(fp)
 400856c:	4001d9c0 	call	4001d9c <__mulsi3>
 4008570:	1007883a 	mov	r3,r2
 4008574:	00810074 	movhi	r2,1025
 4008578:	10a8d904 	addi	r2,r2,-23708
 400857c:	1885883a 	add	r2,r3,r2
 4008580:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4008584:	e0fffe17 	ldw	r3,-8(fp)
 4008588:	00900034 	movhi	r2,16384
 400858c:	10bfffc4 	addi	r2,r2,-1
 4008590:	1886703a 	and	r3,r3,r2
 4008594:	e0bffc17 	ldw	r2,-16(fp)
 4008598:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400859c:	e0bffb17 	ldw	r2,-20(fp)
 40085a0:	1000051e 	bne	r2,zero,40085b8 <open+0xd8>
 40085a4:	e13ffc17 	ldw	r4,-16(fp)
 40085a8:	40083f40 	call	40083f4 <alt_file_locked>
 40085ac:	e0bffa15 	stw	r2,-24(fp)
 40085b0:	e0bffa17 	ldw	r2,-24(fp)
 40085b4:	10001016 	blt	r2,zero,40085f8 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 40085b8:	e0bff817 	ldw	r2,-32(fp)
 40085bc:	10800317 	ldw	r2,12(r2)
 40085c0:	10000826 	beq	r2,zero,40085e4 <open+0x104>
 40085c4:	e0bff817 	ldw	r2,-32(fp)
 40085c8:	10800317 	ldw	r2,12(r2)
 40085cc:	e1ffff17 	ldw	r7,-4(fp)
 40085d0:	e1bffe17 	ldw	r6,-8(fp)
 40085d4:	e17ffd17 	ldw	r5,-12(fp)
 40085d8:	e13ffc17 	ldw	r4,-16(fp)
 40085dc:	103ee83a 	callr	r2
 40085e0:	00000106 	br	40085e8 <open+0x108>
 40085e4:	0005883a 	mov	r2,zero
 40085e8:	e0bffa15 	stw	r2,-24(fp)
 40085ec:	00000206 	br	40085f8 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40085f0:	00bffb44 	movi	r2,-19
 40085f4:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40085f8:	e0bffa17 	ldw	r2,-24(fp)
 40085fc:	1000090e 	bge	r2,zero,4008624 <open+0x144>
  {
    alt_release_fd (index);  
 4008600:	e13ff917 	ldw	r4,-28(fp)
 4008604:	400863c0 	call	400863c <alt_release_fd>
    ALT_ERRNO = -status;
 4008608:	40083b80 	call	40083b8 <alt_get_errno>
 400860c:	1007883a 	mov	r3,r2
 4008610:	e0bffa17 	ldw	r2,-24(fp)
 4008614:	0085c83a 	sub	r2,zero,r2
 4008618:	18800015 	stw	r2,0(r3)
    return -1;
 400861c:	00bfffc4 	movi	r2,-1
 4008620:	00000106 	br	4008628 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4008624:	e0bff917 	ldw	r2,-28(fp)
}
 4008628:	e037883a 	mov	sp,fp
 400862c:	dfc00117 	ldw	ra,4(sp)
 4008630:	df000017 	ldw	fp,0(sp)
 4008634:	dec00204 	addi	sp,sp,8
 4008638:	f800283a 	ret

0400863c <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400863c:	defffc04 	addi	sp,sp,-16
 4008640:	dfc00315 	stw	ra,12(sp)
 4008644:	df000215 	stw	fp,8(sp)
 4008648:	dc000115 	stw	r16,4(sp)
 400864c:	df000204 	addi	fp,sp,8
 4008650:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 4008654:	e0bffe17 	ldw	r2,-8(fp)
 4008658:	108000d0 	cmplti	r2,r2,3
 400865c:	1000111e 	bne	r2,zero,40086a4 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 4008660:	04010074 	movhi	r16,1025
 4008664:	8428d904 	addi	r16,r16,-23708
 4008668:	e0bffe17 	ldw	r2,-8(fp)
 400866c:	01400304 	movi	r5,12
 4008670:	1009883a 	mov	r4,r2
 4008674:	4001d9c0 	call	4001d9c <__mulsi3>
 4008678:	8085883a 	add	r2,r16,r2
 400867c:	10800204 	addi	r2,r2,8
 4008680:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 4008684:	04010074 	movhi	r16,1025
 4008688:	8428d904 	addi	r16,r16,-23708
 400868c:	e0bffe17 	ldw	r2,-8(fp)
 4008690:	01400304 	movi	r5,12
 4008694:	1009883a 	mov	r4,r2
 4008698:	4001d9c0 	call	4001d9c <__mulsi3>
 400869c:	8085883a 	add	r2,r16,r2
 40086a0:	10000015 	stw	zero,0(r2)
  }
}
 40086a4:	0001883a 	nop
 40086a8:	e6ffff04 	addi	sp,fp,-4
 40086ac:	dfc00217 	ldw	ra,8(sp)
 40086b0:	df000117 	ldw	fp,4(sp)
 40086b4:	dc000017 	ldw	r16,0(sp)
 40086b8:	dec00304 	addi	sp,sp,12
 40086bc:	f800283a 	ret

040086c0 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 40086c0:	defffa04 	addi	sp,sp,-24
 40086c4:	df000515 	stw	fp,20(sp)
 40086c8:	df000504 	addi	fp,sp,20
 40086cc:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 40086d0:	0005303a 	rdctl	r2,status
 40086d4:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 40086d8:	e0fffc17 	ldw	r3,-16(fp)
 40086dc:	00bfff84 	movi	r2,-2
 40086e0:	1884703a 	and	r2,r3,r2
 40086e4:	1001703a 	wrctl	status,r2
  
  return context;
 40086e8:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 40086ec:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 40086f0:	e0bfff17 	ldw	r2,-4(fp)
 40086f4:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 40086f8:	e0bffd17 	ldw	r2,-12(fp)
 40086fc:	10800017 	ldw	r2,0(r2)
 4008700:	e0fffd17 	ldw	r3,-12(fp)
 4008704:	18c00117 	ldw	r3,4(r3)
 4008708:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400870c:	e0bffd17 	ldw	r2,-12(fp)
 4008710:	10800117 	ldw	r2,4(r2)
 4008714:	e0fffd17 	ldw	r3,-12(fp)
 4008718:	18c00017 	ldw	r3,0(r3)
 400871c:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4008720:	e0bffd17 	ldw	r2,-12(fp)
 4008724:	e0fffd17 	ldw	r3,-12(fp)
 4008728:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400872c:	e0bffd17 	ldw	r2,-12(fp)
 4008730:	e0fffd17 	ldw	r3,-12(fp)
 4008734:	10c00015 	stw	r3,0(r2)
 4008738:	e0bffb17 	ldw	r2,-20(fp)
 400873c:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4008740:	e0bffe17 	ldw	r2,-8(fp)
 4008744:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 4008748:	0001883a 	nop
 400874c:	e037883a 	mov	sp,fp
 4008750:	df000017 	ldw	fp,0(sp)
 4008754:	dec00104 	addi	sp,sp,4
 4008758:	f800283a 	ret

0400875c <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400875c:	defffb04 	addi	sp,sp,-20
 4008760:	dfc00415 	stw	ra,16(sp)
 4008764:	df000315 	stw	fp,12(sp)
 4008768:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400876c:	d0a01117 	ldw	r2,-32700(gp)
 4008770:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 4008774:	d0a63617 	ldw	r2,-26408(gp)
 4008778:	10800044 	addi	r2,r2,1
 400877c:	d0a63615 	stw	r2,-26408(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4008780:	00002e06 	br	400883c <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 4008784:	e0bffd17 	ldw	r2,-12(fp)
 4008788:	10800017 	ldw	r2,0(r2)
 400878c:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 4008790:	e0bffd17 	ldw	r2,-12(fp)
 4008794:	10800403 	ldbu	r2,16(r2)
 4008798:	10803fcc 	andi	r2,r2,255
 400879c:	10000426 	beq	r2,zero,40087b0 <alt_tick+0x54>
 40087a0:	d0a63617 	ldw	r2,-26408(gp)
 40087a4:	1000021e 	bne	r2,zero,40087b0 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 40087a8:	e0bffd17 	ldw	r2,-12(fp)
 40087ac:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 40087b0:	e0bffd17 	ldw	r2,-12(fp)
 40087b4:	10800217 	ldw	r2,8(r2)
 40087b8:	d0e63617 	ldw	r3,-26408(gp)
 40087bc:	18801d36 	bltu	r3,r2,4008834 <alt_tick+0xd8>
 40087c0:	e0bffd17 	ldw	r2,-12(fp)
 40087c4:	10800403 	ldbu	r2,16(r2)
 40087c8:	10803fcc 	andi	r2,r2,255
 40087cc:	1000191e 	bne	r2,zero,4008834 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 40087d0:	e0bffd17 	ldw	r2,-12(fp)
 40087d4:	10800317 	ldw	r2,12(r2)
 40087d8:	e0fffd17 	ldw	r3,-12(fp)
 40087dc:	18c00517 	ldw	r3,20(r3)
 40087e0:	1809883a 	mov	r4,r3
 40087e4:	103ee83a 	callr	r2
 40087e8:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 40087ec:	e0bfff17 	ldw	r2,-4(fp)
 40087f0:	1000031e 	bne	r2,zero,4008800 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 40087f4:	e13ffd17 	ldw	r4,-12(fp)
 40087f8:	40086c00 	call	40086c0 <alt_alarm_stop>
 40087fc:	00000d06 	br	4008834 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4008800:	e0bffd17 	ldw	r2,-12(fp)
 4008804:	10c00217 	ldw	r3,8(r2)
 4008808:	e0bfff17 	ldw	r2,-4(fp)
 400880c:	1887883a 	add	r3,r3,r2
 4008810:	e0bffd17 	ldw	r2,-12(fp)
 4008814:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4008818:	e0bffd17 	ldw	r2,-12(fp)
 400881c:	10c00217 	ldw	r3,8(r2)
 4008820:	d0a63617 	ldw	r2,-26408(gp)
 4008824:	1880032e 	bgeu	r3,r2,4008834 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4008828:	e0bffd17 	ldw	r2,-12(fp)
 400882c:	00c00044 	movi	r3,1
 4008830:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 4008834:	e0bffe17 	ldw	r2,-8(fp)
 4008838:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400883c:	e0fffd17 	ldw	r3,-12(fp)
 4008840:	d0a01104 	addi	r2,gp,-32700
 4008844:	18bfcf1e 	bne	r3,r2,4008784 <__alt_data_end+0xfc008784>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 4008848:	0001883a 	nop
}
 400884c:	0001883a 	nop
 4008850:	e037883a 	mov	sp,fp
 4008854:	dfc00117 	ldw	ra,4(sp)
 4008858:	df000017 	ldw	fp,0(sp)
 400885c:	dec00204 	addi	sp,sp,8
 4008860:	f800283a 	ret

04008864 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 4008864:	deffff04 	addi	sp,sp,-4
 4008868:	df000015 	stw	fp,0(sp)
 400886c:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 4008870:	000170fa 	wrctl	ienable,zero
}
 4008874:	0001883a 	nop
 4008878:	e037883a 	mov	sp,fp
 400887c:	df000017 	ldw	fp,0(sp)
 4008880:	dec00104 	addi	sp,sp,4
 4008884:	f800283a 	ret

04008888 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 4008888:	defffa04 	addi	sp,sp,-24
 400888c:	dfc00515 	stw	ra,20(sp)
 4008890:	df000415 	stw	fp,16(sp)
 4008894:	df000404 	addi	fp,sp,16
 4008898:	e13ffe15 	stw	r4,-8(fp)
 400889c:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40088a0:	e0bfff17 	ldw	r2,-4(fp)
 40088a4:	10800017 	ldw	r2,0(r2)
 40088a8:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 40088ac:	e13ffe17 	ldw	r4,-8(fp)
 40088b0:	4008c480 	call	4008c48 <strlen>
 40088b4:	10800044 	addi	r2,r2,1
 40088b8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40088bc:	00000d06 	br	40088f4 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 40088c0:	e0bffc17 	ldw	r2,-16(fp)
 40088c4:	10800217 	ldw	r2,8(r2)
 40088c8:	e0fffd17 	ldw	r3,-12(fp)
 40088cc:	180d883a 	mov	r6,r3
 40088d0:	e17ffe17 	ldw	r5,-8(fp)
 40088d4:	1009883a 	mov	r4,r2
 40088d8:	4008bcc0 	call	4008bcc <memcmp>
 40088dc:	1000021e 	bne	r2,zero,40088e8 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 40088e0:	e0bffc17 	ldw	r2,-16(fp)
 40088e4:	00000706 	br	4008904 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 40088e8:	e0bffc17 	ldw	r2,-16(fp)
 40088ec:	10800017 	ldw	r2,0(r2)
 40088f0:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 40088f4:	e0fffc17 	ldw	r3,-16(fp)
 40088f8:	e0bfff17 	ldw	r2,-4(fp)
 40088fc:	18bff01e 	bne	r3,r2,40088c0 <__alt_data_end+0xfc0088c0>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4008900:	0005883a 	mov	r2,zero
}
 4008904:	e037883a 	mov	sp,fp
 4008908:	dfc00117 	ldw	ra,4(sp)
 400890c:	df000017 	ldw	fp,0(sp)
 4008910:	dec00204 	addi	sp,sp,8
 4008914:	f800283a 	ret

04008918 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4008918:	defffb04 	addi	sp,sp,-20
 400891c:	dfc00415 	stw	ra,16(sp)
 4008920:	df000315 	stw	fp,12(sp)
 4008924:	df000304 	addi	fp,sp,12
 4008928:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400892c:	d0a00b17 	ldw	r2,-32724(gp)
 4008930:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4008934:	00003106 	br	40089fc <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4008938:	e0bffd17 	ldw	r2,-12(fp)
 400893c:	10800217 	ldw	r2,8(r2)
 4008940:	1009883a 	mov	r4,r2
 4008944:	4008c480 	call	4008c48 <strlen>
 4008948:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 400894c:	e0bffd17 	ldw	r2,-12(fp)
 4008950:	10c00217 	ldw	r3,8(r2)
 4008954:	e0bffe17 	ldw	r2,-8(fp)
 4008958:	10bfffc4 	addi	r2,r2,-1
 400895c:	1885883a 	add	r2,r3,r2
 4008960:	10800003 	ldbu	r2,0(r2)
 4008964:	10803fcc 	andi	r2,r2,255
 4008968:	1080201c 	xori	r2,r2,128
 400896c:	10bfe004 	addi	r2,r2,-128
 4008970:	10800bd8 	cmpnei	r2,r2,47
 4008974:	1000031e 	bne	r2,zero,4008984 <alt_find_file+0x6c>
    {
      len -= 1;
 4008978:	e0bffe17 	ldw	r2,-8(fp)
 400897c:	10bfffc4 	addi	r2,r2,-1
 4008980:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 4008984:	e0bffe17 	ldw	r2,-8(fp)
 4008988:	e0ffff17 	ldw	r3,-4(fp)
 400898c:	1885883a 	add	r2,r3,r2
 4008990:	10800003 	ldbu	r2,0(r2)
 4008994:	10803fcc 	andi	r2,r2,255
 4008998:	1080201c 	xori	r2,r2,128
 400899c:	10bfe004 	addi	r2,r2,-128
 40089a0:	10800be0 	cmpeqi	r2,r2,47
 40089a4:	1000081e 	bne	r2,zero,40089c8 <alt_find_file+0xb0>
 40089a8:	e0bffe17 	ldw	r2,-8(fp)
 40089ac:	e0ffff17 	ldw	r3,-4(fp)
 40089b0:	1885883a 	add	r2,r3,r2
 40089b4:	10800003 	ldbu	r2,0(r2)
 40089b8:	10803fcc 	andi	r2,r2,255
 40089bc:	1080201c 	xori	r2,r2,128
 40089c0:	10bfe004 	addi	r2,r2,-128
 40089c4:	10000a1e 	bne	r2,zero,40089f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 40089c8:	e0bffd17 	ldw	r2,-12(fp)
 40089cc:	10800217 	ldw	r2,8(r2)
 40089d0:	e0fffe17 	ldw	r3,-8(fp)
 40089d4:	180d883a 	mov	r6,r3
 40089d8:	e17fff17 	ldw	r5,-4(fp)
 40089dc:	1009883a 	mov	r4,r2
 40089e0:	4008bcc0 	call	4008bcc <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40089e4:	1000021e 	bne	r2,zero,40089f0 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 40089e8:	e0bffd17 	ldw	r2,-12(fp)
 40089ec:	00000706 	br	4008a0c <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 40089f0:	e0bffd17 	ldw	r2,-12(fp)
 40089f4:	10800017 	ldw	r2,0(r2)
 40089f8:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 40089fc:	e0fffd17 	ldw	r3,-12(fp)
 4008a00:	d0a00b04 	addi	r2,gp,-32724
 4008a04:	18bfcc1e 	bne	r3,r2,4008938 <__alt_data_end+0xfc008938>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4008a08:	0005883a 	mov	r2,zero
}
 4008a0c:	e037883a 	mov	sp,fp
 4008a10:	dfc00117 	ldw	ra,4(sp)
 4008a14:	df000017 	ldw	fp,0(sp)
 4008a18:	dec00204 	addi	sp,sp,8
 4008a1c:	f800283a 	ret

04008a20 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4008a20:	defffa04 	addi	sp,sp,-24
 4008a24:	dfc00515 	stw	ra,20(sp)
 4008a28:	df000415 	stw	fp,16(sp)
 4008a2c:	dc000315 	stw	r16,12(sp)
 4008a30:	df000404 	addi	fp,sp,16
 4008a34:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 4008a38:	00bffa04 	movi	r2,-24
 4008a3c:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4008a40:	e03ffc15 	stw	zero,-16(fp)
 4008a44:	00001d06 	br	4008abc <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 4008a48:	04010074 	movhi	r16,1025
 4008a4c:	8428d904 	addi	r16,r16,-23708
 4008a50:	e0bffc17 	ldw	r2,-16(fp)
 4008a54:	01400304 	movi	r5,12
 4008a58:	1009883a 	mov	r4,r2
 4008a5c:	4001d9c0 	call	4001d9c <__mulsi3>
 4008a60:	8085883a 	add	r2,r16,r2
 4008a64:	10800017 	ldw	r2,0(r2)
 4008a68:	1000111e 	bne	r2,zero,4008ab0 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 4008a6c:	04010074 	movhi	r16,1025
 4008a70:	8428d904 	addi	r16,r16,-23708
 4008a74:	e0bffc17 	ldw	r2,-16(fp)
 4008a78:	01400304 	movi	r5,12
 4008a7c:	1009883a 	mov	r4,r2
 4008a80:	4001d9c0 	call	4001d9c <__mulsi3>
 4008a84:	8085883a 	add	r2,r16,r2
 4008a88:	e0fffe17 	ldw	r3,-8(fp)
 4008a8c:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 4008a90:	d0e00f17 	ldw	r3,-32708(gp)
 4008a94:	e0bffc17 	ldw	r2,-16(fp)
 4008a98:	1880020e 	bge	r3,r2,4008aa4 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 4008a9c:	e0bffc17 	ldw	r2,-16(fp)
 4008aa0:	d0a00f15 	stw	r2,-32708(gp)
      }
      rc = i;
 4008aa4:	e0bffc17 	ldw	r2,-16(fp)
 4008aa8:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4008aac:	00000606 	br	4008ac8 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4008ab0:	e0bffc17 	ldw	r2,-16(fp)
 4008ab4:	10800044 	addi	r2,r2,1
 4008ab8:	e0bffc15 	stw	r2,-16(fp)
 4008abc:	e0bffc17 	ldw	r2,-16(fp)
 4008ac0:	10800810 	cmplti	r2,r2,32
 4008ac4:	103fe01e 	bne	r2,zero,4008a48 <__alt_data_end+0xfc008a48>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4008ac8:	e0bffd17 	ldw	r2,-12(fp)
}
 4008acc:	e6ffff04 	addi	sp,fp,-4
 4008ad0:	dfc00217 	ldw	ra,8(sp)
 4008ad4:	df000117 	ldw	fp,4(sp)
 4008ad8:	dc000017 	ldw	r16,0(sp)
 4008adc:	dec00304 	addi	sp,sp,12
 4008ae0:	f800283a 	ret

04008ae4 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4008ae4:	defffe04 	addi	sp,sp,-8
 4008ae8:	df000115 	stw	fp,4(sp)
 4008aec:	df000104 	addi	fp,sp,4
 4008af0:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4008af4:	e0bfff17 	ldw	r2,-4(fp)
 4008af8:	10bffe84 	addi	r2,r2,-6
 4008afc:	10c00428 	cmpgeui	r3,r2,16
 4008b00:	18001a1e 	bne	r3,zero,4008b6c <alt_exception_cause_generated_bad_addr+0x88>
 4008b04:	100690ba 	slli	r3,r2,2
 4008b08:	00810074 	movhi	r2,1025
 4008b0c:	10a2c704 	addi	r2,r2,-29924
 4008b10:	1885883a 	add	r2,r3,r2
 4008b14:	10800017 	ldw	r2,0(r2)
 4008b18:	1000683a 	jmp	r2
 4008b1c:	04008b5c 	xori	r16,zero,557
 4008b20:	04008b5c 	xori	r16,zero,557
 4008b24:	04008b6c 	andhi	r16,zero,557
 4008b28:	04008b6c 	andhi	r16,zero,557
 4008b2c:	04008b6c 	andhi	r16,zero,557
 4008b30:	04008b5c 	xori	r16,zero,557
 4008b34:	04008b64 	muli	r16,zero,557
 4008b38:	04008b6c 	andhi	r16,zero,557
 4008b3c:	04008b5c 	xori	r16,zero,557
 4008b40:	04008b5c 	xori	r16,zero,557
 4008b44:	04008b6c 	andhi	r16,zero,557
 4008b48:	04008b5c 	xori	r16,zero,557
 4008b4c:	04008b64 	muli	r16,zero,557
 4008b50:	04008b6c 	andhi	r16,zero,557
 4008b54:	04008b6c 	andhi	r16,zero,557
 4008b58:	04008b5c 	xori	r16,zero,557
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4008b5c:	00800044 	movi	r2,1
 4008b60:	00000306 	br	4008b70 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4008b64:	0005883a 	mov	r2,zero
 4008b68:	00000106 	br	4008b70 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4008b6c:	0005883a 	mov	r2,zero
  }
}
 4008b70:	e037883a 	mov	sp,fp
 4008b74:	df000017 	ldw	fp,0(sp)
 4008b78:	dec00104 	addi	sp,sp,4
 4008b7c:	f800283a 	ret

04008b80 <atexit>:
 4008b80:	200b883a 	mov	r5,r4
 4008b84:	000f883a 	mov	r7,zero
 4008b88:	000d883a 	mov	r6,zero
 4008b8c:	0009883a 	mov	r4,zero
 4008b90:	4008ce01 	jmpi	4008ce0 <__register_exitproc>

04008b94 <exit>:
 4008b94:	defffe04 	addi	sp,sp,-8
 4008b98:	000b883a 	mov	r5,zero
 4008b9c:	dc000015 	stw	r16,0(sp)
 4008ba0:	dfc00115 	stw	ra,4(sp)
 4008ba4:	2021883a 	mov	r16,r4
 4008ba8:	4008df80 	call	4008df8 <__call_exitprocs>
 4008bac:	00810074 	movhi	r2,1025
 4008bb0:	10aa5504 	addi	r2,r2,-22188
 4008bb4:	11000017 	ldw	r4,0(r2)
 4008bb8:	20800f17 	ldw	r2,60(r4)
 4008bbc:	10000126 	beq	r2,zero,4008bc4 <exit+0x30>
 4008bc0:	103ee83a 	callr	r2
 4008bc4:	8009883a 	mov	r4,r16
 4008bc8:	4008f780 	call	4008f78 <_exit>

04008bcc <memcmp>:
 4008bcc:	01c000c4 	movi	r7,3
 4008bd0:	3980192e 	bgeu	r7,r6,4008c38 <memcmp+0x6c>
 4008bd4:	2144b03a 	or	r2,r4,r5
 4008bd8:	11c4703a 	and	r2,r2,r7
 4008bdc:	10000f26 	beq	r2,zero,4008c1c <memcmp+0x50>
 4008be0:	20800003 	ldbu	r2,0(r4)
 4008be4:	28c00003 	ldbu	r3,0(r5)
 4008be8:	10c0151e 	bne	r2,r3,4008c40 <memcmp+0x74>
 4008bec:	31bfff84 	addi	r6,r6,-2
 4008bf0:	01ffffc4 	movi	r7,-1
 4008bf4:	00000406 	br	4008c08 <memcmp+0x3c>
 4008bf8:	20800003 	ldbu	r2,0(r4)
 4008bfc:	28c00003 	ldbu	r3,0(r5)
 4008c00:	31bfffc4 	addi	r6,r6,-1
 4008c04:	10c00e1e 	bne	r2,r3,4008c40 <memcmp+0x74>
 4008c08:	21000044 	addi	r4,r4,1
 4008c0c:	29400044 	addi	r5,r5,1
 4008c10:	31fff91e 	bne	r6,r7,4008bf8 <__alt_data_end+0xfc008bf8>
 4008c14:	0005883a 	mov	r2,zero
 4008c18:	f800283a 	ret
 4008c1c:	20c00017 	ldw	r3,0(r4)
 4008c20:	28800017 	ldw	r2,0(r5)
 4008c24:	18bfee1e 	bne	r3,r2,4008be0 <__alt_data_end+0xfc008be0>
 4008c28:	31bfff04 	addi	r6,r6,-4
 4008c2c:	21000104 	addi	r4,r4,4
 4008c30:	29400104 	addi	r5,r5,4
 4008c34:	39bff936 	bltu	r7,r6,4008c1c <__alt_data_end+0xfc008c1c>
 4008c38:	303fe91e 	bne	r6,zero,4008be0 <__alt_data_end+0xfc008be0>
 4008c3c:	003ff506 	br	4008c14 <__alt_data_end+0xfc008c14>
 4008c40:	10c5c83a 	sub	r2,r2,r3
 4008c44:	f800283a 	ret

04008c48 <strlen>:
 4008c48:	208000cc 	andi	r2,r4,3
 4008c4c:	10002026 	beq	r2,zero,4008cd0 <strlen+0x88>
 4008c50:	20800007 	ldb	r2,0(r4)
 4008c54:	10002026 	beq	r2,zero,4008cd8 <strlen+0x90>
 4008c58:	2005883a 	mov	r2,r4
 4008c5c:	00000206 	br	4008c68 <strlen+0x20>
 4008c60:	10c00007 	ldb	r3,0(r2)
 4008c64:	18001826 	beq	r3,zero,4008cc8 <strlen+0x80>
 4008c68:	10800044 	addi	r2,r2,1
 4008c6c:	10c000cc 	andi	r3,r2,3
 4008c70:	183ffb1e 	bne	r3,zero,4008c60 <__alt_data_end+0xfc008c60>
 4008c74:	10c00017 	ldw	r3,0(r2)
 4008c78:	01ffbff4 	movhi	r7,65279
 4008c7c:	39ffbfc4 	addi	r7,r7,-257
 4008c80:	00ca303a 	nor	r5,zero,r3
 4008c84:	01a02074 	movhi	r6,32897
 4008c88:	19c7883a 	add	r3,r3,r7
 4008c8c:	31a02004 	addi	r6,r6,-32640
 4008c90:	1946703a 	and	r3,r3,r5
 4008c94:	1986703a 	and	r3,r3,r6
 4008c98:	1800091e 	bne	r3,zero,4008cc0 <strlen+0x78>
 4008c9c:	10800104 	addi	r2,r2,4
 4008ca0:	10c00017 	ldw	r3,0(r2)
 4008ca4:	19cb883a 	add	r5,r3,r7
 4008ca8:	00c6303a 	nor	r3,zero,r3
 4008cac:	28c6703a 	and	r3,r5,r3
 4008cb0:	1986703a 	and	r3,r3,r6
 4008cb4:	183ff926 	beq	r3,zero,4008c9c <__alt_data_end+0xfc008c9c>
 4008cb8:	00000106 	br	4008cc0 <strlen+0x78>
 4008cbc:	10800044 	addi	r2,r2,1
 4008cc0:	10c00007 	ldb	r3,0(r2)
 4008cc4:	183ffd1e 	bne	r3,zero,4008cbc <__alt_data_end+0xfc008cbc>
 4008cc8:	1105c83a 	sub	r2,r2,r4
 4008ccc:	f800283a 	ret
 4008cd0:	2005883a 	mov	r2,r4
 4008cd4:	003fe706 	br	4008c74 <__alt_data_end+0xfc008c74>
 4008cd8:	0005883a 	mov	r2,zero
 4008cdc:	f800283a 	ret

04008ce0 <__register_exitproc>:
 4008ce0:	defffa04 	addi	sp,sp,-24
 4008ce4:	dc000315 	stw	r16,12(sp)
 4008ce8:	04010074 	movhi	r16,1025
 4008cec:	842a5504 	addi	r16,r16,-22188
 4008cf0:	80c00017 	ldw	r3,0(r16)
 4008cf4:	dc400415 	stw	r17,16(sp)
 4008cf8:	dfc00515 	stw	ra,20(sp)
 4008cfc:	18805217 	ldw	r2,328(r3)
 4008d00:	2023883a 	mov	r17,r4
 4008d04:	10003726 	beq	r2,zero,4008de4 <__register_exitproc+0x104>
 4008d08:	10c00117 	ldw	r3,4(r2)
 4008d0c:	010007c4 	movi	r4,31
 4008d10:	20c00e16 	blt	r4,r3,4008d4c <__register_exitproc+0x6c>
 4008d14:	1a000044 	addi	r8,r3,1
 4008d18:	8800221e 	bne	r17,zero,4008da4 <__register_exitproc+0xc4>
 4008d1c:	18c00084 	addi	r3,r3,2
 4008d20:	18c7883a 	add	r3,r3,r3
 4008d24:	18c7883a 	add	r3,r3,r3
 4008d28:	12000115 	stw	r8,4(r2)
 4008d2c:	10c7883a 	add	r3,r2,r3
 4008d30:	19400015 	stw	r5,0(r3)
 4008d34:	0005883a 	mov	r2,zero
 4008d38:	dfc00517 	ldw	ra,20(sp)
 4008d3c:	dc400417 	ldw	r17,16(sp)
 4008d40:	dc000317 	ldw	r16,12(sp)
 4008d44:	dec00604 	addi	sp,sp,24
 4008d48:	f800283a 	ret
 4008d4c:	00800034 	movhi	r2,0
 4008d50:	10800004 	addi	r2,r2,0
 4008d54:	10002626 	beq	r2,zero,4008df0 <__register_exitproc+0x110>
 4008d58:	01006404 	movi	r4,400
 4008d5c:	d9400015 	stw	r5,0(sp)
 4008d60:	d9800115 	stw	r6,4(sp)
 4008d64:	d9c00215 	stw	r7,8(sp)
 4008d68:	00000000 	call	0 <__reset-0x4000000>
 4008d6c:	d9400017 	ldw	r5,0(sp)
 4008d70:	d9800117 	ldw	r6,4(sp)
 4008d74:	d9c00217 	ldw	r7,8(sp)
 4008d78:	10001d26 	beq	r2,zero,4008df0 <__register_exitproc+0x110>
 4008d7c:	81000017 	ldw	r4,0(r16)
 4008d80:	10000115 	stw	zero,4(r2)
 4008d84:	02000044 	movi	r8,1
 4008d88:	22405217 	ldw	r9,328(r4)
 4008d8c:	0007883a 	mov	r3,zero
 4008d90:	12400015 	stw	r9,0(r2)
 4008d94:	20805215 	stw	r2,328(r4)
 4008d98:	10006215 	stw	zero,392(r2)
 4008d9c:	10006315 	stw	zero,396(r2)
 4008da0:	883fde26 	beq	r17,zero,4008d1c <__alt_data_end+0xfc008d1c>
 4008da4:	18c9883a 	add	r4,r3,r3
 4008da8:	2109883a 	add	r4,r4,r4
 4008dac:	1109883a 	add	r4,r2,r4
 4008db0:	21802215 	stw	r6,136(r4)
 4008db4:	01800044 	movi	r6,1
 4008db8:	12406217 	ldw	r9,392(r2)
 4008dbc:	30cc983a 	sll	r6,r6,r3
 4008dc0:	4992b03a 	or	r9,r9,r6
 4008dc4:	12406215 	stw	r9,392(r2)
 4008dc8:	21c04215 	stw	r7,264(r4)
 4008dcc:	01000084 	movi	r4,2
 4008dd0:	893fd21e 	bne	r17,r4,4008d1c <__alt_data_end+0xfc008d1c>
 4008dd4:	11006317 	ldw	r4,396(r2)
 4008dd8:	218cb03a 	or	r6,r4,r6
 4008ddc:	11806315 	stw	r6,396(r2)
 4008de0:	003fce06 	br	4008d1c <__alt_data_end+0xfc008d1c>
 4008de4:	18805304 	addi	r2,r3,332
 4008de8:	18805215 	stw	r2,328(r3)
 4008dec:	003fc606 	br	4008d08 <__alt_data_end+0xfc008d08>
 4008df0:	00bfffc4 	movi	r2,-1
 4008df4:	003fd006 	br	4008d38 <__alt_data_end+0xfc008d38>

04008df8 <__call_exitprocs>:
 4008df8:	defff504 	addi	sp,sp,-44
 4008dfc:	df000915 	stw	fp,36(sp)
 4008e00:	dd400615 	stw	r21,24(sp)
 4008e04:	dc800315 	stw	r18,12(sp)
 4008e08:	dfc00a15 	stw	ra,40(sp)
 4008e0c:	ddc00815 	stw	r23,32(sp)
 4008e10:	dd800715 	stw	r22,28(sp)
 4008e14:	dd000515 	stw	r20,20(sp)
 4008e18:	dcc00415 	stw	r19,16(sp)
 4008e1c:	dc400215 	stw	r17,8(sp)
 4008e20:	dc000115 	stw	r16,4(sp)
 4008e24:	d9000015 	stw	r4,0(sp)
 4008e28:	2839883a 	mov	fp,r5
 4008e2c:	04800044 	movi	r18,1
 4008e30:	057fffc4 	movi	r21,-1
 4008e34:	00810074 	movhi	r2,1025
 4008e38:	10aa5504 	addi	r2,r2,-22188
 4008e3c:	12000017 	ldw	r8,0(r2)
 4008e40:	45005217 	ldw	r20,328(r8)
 4008e44:	44c05204 	addi	r19,r8,328
 4008e48:	a0001c26 	beq	r20,zero,4008ebc <__call_exitprocs+0xc4>
 4008e4c:	a0800117 	ldw	r2,4(r20)
 4008e50:	15ffffc4 	addi	r23,r2,-1
 4008e54:	b8000d16 	blt	r23,zero,4008e8c <__call_exitprocs+0x94>
 4008e58:	14000044 	addi	r16,r2,1
 4008e5c:	8421883a 	add	r16,r16,r16
 4008e60:	8421883a 	add	r16,r16,r16
 4008e64:	84402004 	addi	r17,r16,128
 4008e68:	a463883a 	add	r17,r20,r17
 4008e6c:	a421883a 	add	r16,r20,r16
 4008e70:	e0001e26 	beq	fp,zero,4008eec <__call_exitprocs+0xf4>
 4008e74:	80804017 	ldw	r2,256(r16)
 4008e78:	e0801c26 	beq	fp,r2,4008eec <__call_exitprocs+0xf4>
 4008e7c:	bdffffc4 	addi	r23,r23,-1
 4008e80:	843fff04 	addi	r16,r16,-4
 4008e84:	8c7fff04 	addi	r17,r17,-4
 4008e88:	bd7ff91e 	bne	r23,r21,4008e70 <__alt_data_end+0xfc008e70>
 4008e8c:	00800034 	movhi	r2,0
 4008e90:	10800004 	addi	r2,r2,0
 4008e94:	10000926 	beq	r2,zero,4008ebc <__call_exitprocs+0xc4>
 4008e98:	a0800117 	ldw	r2,4(r20)
 4008e9c:	1000301e 	bne	r2,zero,4008f60 <__call_exitprocs+0x168>
 4008ea0:	a0800017 	ldw	r2,0(r20)
 4008ea4:	10003226 	beq	r2,zero,4008f70 <__call_exitprocs+0x178>
 4008ea8:	a009883a 	mov	r4,r20
 4008eac:	98800015 	stw	r2,0(r19)
 4008eb0:	00000000 	call	0 <__reset-0x4000000>
 4008eb4:	9d000017 	ldw	r20,0(r19)
 4008eb8:	a03fe41e 	bne	r20,zero,4008e4c <__alt_data_end+0xfc008e4c>
 4008ebc:	dfc00a17 	ldw	ra,40(sp)
 4008ec0:	df000917 	ldw	fp,36(sp)
 4008ec4:	ddc00817 	ldw	r23,32(sp)
 4008ec8:	dd800717 	ldw	r22,28(sp)
 4008ecc:	dd400617 	ldw	r21,24(sp)
 4008ed0:	dd000517 	ldw	r20,20(sp)
 4008ed4:	dcc00417 	ldw	r19,16(sp)
 4008ed8:	dc800317 	ldw	r18,12(sp)
 4008edc:	dc400217 	ldw	r17,8(sp)
 4008ee0:	dc000117 	ldw	r16,4(sp)
 4008ee4:	dec00b04 	addi	sp,sp,44
 4008ee8:	f800283a 	ret
 4008eec:	a0800117 	ldw	r2,4(r20)
 4008ef0:	80c00017 	ldw	r3,0(r16)
 4008ef4:	10bfffc4 	addi	r2,r2,-1
 4008ef8:	15c01426 	beq	r2,r23,4008f4c <__call_exitprocs+0x154>
 4008efc:	80000015 	stw	zero,0(r16)
 4008f00:	183fde26 	beq	r3,zero,4008e7c <__alt_data_end+0xfc008e7c>
 4008f04:	95c8983a 	sll	r4,r18,r23
 4008f08:	a0806217 	ldw	r2,392(r20)
 4008f0c:	a5800117 	ldw	r22,4(r20)
 4008f10:	2084703a 	and	r2,r4,r2
 4008f14:	10000b26 	beq	r2,zero,4008f44 <__call_exitprocs+0x14c>
 4008f18:	a0806317 	ldw	r2,396(r20)
 4008f1c:	2088703a 	and	r4,r4,r2
 4008f20:	20000c1e 	bne	r4,zero,4008f54 <__call_exitprocs+0x15c>
 4008f24:	89400017 	ldw	r5,0(r17)
 4008f28:	d9000017 	ldw	r4,0(sp)
 4008f2c:	183ee83a 	callr	r3
 4008f30:	a0800117 	ldw	r2,4(r20)
 4008f34:	15bfbf1e 	bne	r2,r22,4008e34 <__alt_data_end+0xfc008e34>
 4008f38:	98800017 	ldw	r2,0(r19)
 4008f3c:	153fcf26 	beq	r2,r20,4008e7c <__alt_data_end+0xfc008e7c>
 4008f40:	003fbc06 	br	4008e34 <__alt_data_end+0xfc008e34>
 4008f44:	183ee83a 	callr	r3
 4008f48:	003ff906 	br	4008f30 <__alt_data_end+0xfc008f30>
 4008f4c:	a5c00115 	stw	r23,4(r20)
 4008f50:	003feb06 	br	4008f00 <__alt_data_end+0xfc008f00>
 4008f54:	89000017 	ldw	r4,0(r17)
 4008f58:	183ee83a 	callr	r3
 4008f5c:	003ff406 	br	4008f30 <__alt_data_end+0xfc008f30>
 4008f60:	a0800017 	ldw	r2,0(r20)
 4008f64:	a027883a 	mov	r19,r20
 4008f68:	1029883a 	mov	r20,r2
 4008f6c:	003fb606 	br	4008e48 <__alt_data_end+0xfc008e48>
 4008f70:	0005883a 	mov	r2,zero
 4008f74:	003ffb06 	br	4008f64 <__alt_data_end+0xfc008f64>

04008f78 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 4008f78:	defffd04 	addi	sp,sp,-12
 4008f7c:	df000215 	stw	fp,8(sp)
 4008f80:	df000204 	addi	fp,sp,8
 4008f84:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 4008f88:	0001883a 	nop
 4008f8c:	e0bfff17 	ldw	r2,-4(fp)
 4008f90:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 4008f94:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 4008f98:	10000226 	beq	r2,zero,4008fa4 <_exit+0x2c>
    ALT_SIM_FAIL();
 4008f9c:	002af070 	cmpltui	zero,zero,43969
 4008fa0:	00000106 	br	4008fa8 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 4008fa4:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 4008fa8:	003fff06 	br	4008fa8 <__alt_data_end+0xfc008fa8>
