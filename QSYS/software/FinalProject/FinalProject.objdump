
FinalProject.elf:     file format elf32-littlenios2
FinalProject.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x0000d68c memsz 0x0000d68c flags r-x
    LOAD off    0x0000e6ac vaddr 0x0400d6ac paddr 0x0400f204 align 2**12
         filesz 0x00001b58 memsz 0x00001b58 flags rw-
    LOAD off    0x00010d5c vaddr 0x04010d5c paddr 0x04010d5c align 2**12
         filesz 0x00000000 memsz 0x0004b168 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         0000ce24  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000658  0400d054  0400d054  0000e054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001b58  0400d6ac  0400f204  0000e6ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0004b168  04010d5c  04010d5c  00010d5c  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0405bec4  0405bec4  00010204  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00010204  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000e70  00000000  00000000  00010228  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00021502  00000000  00000000  00011098  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00008ad8  00000000  00000000  0003259a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000a49c  00000000  00000000  0003b072  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00002260  00000000  00000000  00045510  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    000041ae  00000000  00000000  00047770  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    0000cd26  00000000  00000000  0004b91e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00058644  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000011b0  00000000  00000000  00058688  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0005cd95  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0005cd98  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0005cd9b  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0005cd9c  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0005cd9d  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0005cda6  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0005cdaf  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0005cdb8  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  0005cdc1  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00058f16  00000000  00000000  0005cdfa  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
0400d054 l    d  .rodata	00000000 .rodata
0400d6ac l    d  .rwdata	00000000 .rwdata
04010d5c l    d  .bss	00000000 .bss
0405bec4 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FinalProject_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 hello_world.c
0400d054 l     O .rodata	00000040 tjei_default_qt_luma_from_spec
0400d094 l     O .rodata	00000040 tjei_default_qt_chroma_from_paper
0400d0d4 l     O .rodata	00000010 tjei_default_ht_luma_dc_len
0400d0e4 l     O .rodata	0000000c tjei_default_ht_luma_dc
0400d0f0 l     O .rodata	00000010 tjei_default_ht_chroma_dc_len
0400d100 l     O .rodata	0000000c tjei_default_ht_chroma_dc
0400d10c l     O .rodata	00000010 tjei_default_ht_luma_ac_len
0400d11c l     O .rodata	000000a2 tjei_default_ht_luma_ac
0400d1be l     O .rodata	00000010 tjei_default_ht_chroma_ac_len
0400d1ce l     O .rodata	000000a2 tjei_default_ht_chroma_ac
0400d270 l     O .rodata	00000040 tjei_zig_zag
0400026c l     F .text	00000050 tjei_be_word
0400f1b4 l     O .rwdata	00000005 tjeik_jfif_id
0400d2b0 l     O .rodata	0000001d tjeik_com_str
040002bc l     F .text	0000014c tjei_write
0400d408 l     O .rodata	0000000b __func__.4050
04000408 l     F .text	000000dc tjei_write_DQT
0400d414 l     O .rodata	0000000f __func__.4058
040004e4 l     F .text	00000190 tjei_write_DHT
0400d424 l     O .rodata	0000000f __func__.4076
04000674 l     F .text	000000b0 tjei_huff_get_code_lengths
04000724 l     F .text	00000130 tjei_huff_get_codes
0400d434 l     O .rodata	00000014 __func__.4101
04000854 l     F .text	000000cc tjei_huff_get_extended
04000920 l     F .text	000000c0 tjei_calculate_variable_length_int
040009e0 l     F .text	0000011c tjei_write_bits
04000afc l     F .text	0000083c tjei_fdct
04001338 l     F .text	000004b8 tjei_encode_and_write_MCU
0400d448 l     O .rodata	0000001a __func__.4202
040017f0 l     F .text	00000384 tjei_huff_expand
0400d464 l     O .rodata	00000011 __func__.4218
04001b74 l     F .text	00000e34 tjei_encode_main
0400d478 l     O .rodata	00000020 aan_scales.4247
0400d498 l     O .rodata	00000011 __func__.4262
0400d4ac l     O .rodata	00000015 __func__.4335
04002bfc l     F .text	00000028 read_encoder_left
04002c24 l     F .text	00000028 read_encoder_right
04002c4c l     F .text	00000088 set_motors
04002cd4 l     F .text	00000050 jtag_kiss_send
04002d24 l     F .text	0000006c camera_dma_enable
04002d90 l     F .text	000000a4 swap_buffer
04002e34 l     F .text	00000104 take_raw_picture_and_send_to_jtag
04002f38 l     F .text	00000048 jpeg_jtag_send
04002f80 l     F .text	0000018c take_jpeg_picture_and_send_to_jtag
00000000 l    df *ABS*	00000000 kiss.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 impure.c
0400d6ac l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 vfprintf.c
04005178 l     F .text	000000fc __sprint_r.part.0
0400d637 l     O .rodata	00000010 zeroes.4349
040067b4 l     F .text	000000bc __sbprintf
0400d647 l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
04006c6c l     F .text	00000008 __fp_unlock
04006c80 l     F .text	0000019c __sinit.part.1
04006e1c l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
0400daf0 l     O .rwdata	00000020 lc_ctype_charset
0400dad0 l     O .rwdata	00000020 lc_message_charset
0400db10 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0400a41c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400a530 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400a590 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0400a6a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0400a78c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400a8f8 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400a9e4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400abc0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
0400f1f4 l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0400ae64 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400afa0 l     F .text	00000034 alt_dev_reg
0400e0f8 l     O .rwdata	00001060 jtag_uart
0400f158 l     O .rwdata	0000005c video_dma_controller
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400b508 l     F .text	0000020c altera_avalon_jtag_uart_irq
0400b714 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400bff0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
0400c450 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
0400c5b0 l     F .text	0000003c alt_get_errno
0400c5ec l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04010d98 g     O .bss	00000004 alt_instruction_exception_handler
04009748 g     F .text	00000054 _isatty_r
0400aafc g     F .text	0000007c alt_main
0405bdc4 g     O .bss	00000100 alt_irq
0400979c g     F .text	00000060 _lseek_r
0400f204 g       *ABS*	00000000 __flash_rwdata_start
0405bec4 g       *ABS*	00000000 __alt_heap_start
04005118 g     F .text	0000005c _kill_r
0400934c g     F .text	0000009c _wcrtomb_r
04004ee0 g     F .text	00000084 _signal_r
0400901c g     F .text	0000005c __sseek
04006fcc g     F .text	00000010 __sinit
040091f4 g     F .text	00000140 __swbuf_r
04007ca8 g     F .text	0000007c _setlocale_r
04006e24 g     F .text	00000078 __sfmoreglue
0400ab9c g     F .text	00000024 __malloc_unlock
04003af4 g     F .text	00000440 .hidden __divsf3
04008830 g     F .text	0000015c memmove
04006fb4 g     F .text	00000018 _cleanup
04004904 g     F .text	00000070 .hidden __fixsfsi
04010dc4 g     O .bss	0004b000 jpeg_image_buffer
0400c9d8 g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
040096ec g     F .text	0000005c _fstat_r
04010d64 g     O .bss	00000004 errno
04008f98 g     F .text	00000008 __seofread
04010d84 g     O .bss	00000004 alt_argv
040171b4 g       *ABS*	00000000 _gp
0400ae34 g     F .text	00000030 usleep
04004420 g     F .text	000004e4 .hidden __subsf3
0400a684 g     F .text	00000020 getpid
0400df78 g     O .rwdata	00000180 alt_fd_list
0400c9fc g     F .text	00000090 alt_find_dev
04004bd4 g     F .text	00000148 memcpy
04006c74 g     F .text	0000000c _cleanup_r
0400c534 g     F .text	0000007c alt_io_redirect
0400d054 g       *ABS*	00000000 __DTOR_END__
0400cc58 g     F .text	0000009c alt_exception_cause_generated_bad_addr
04006798 g     F .text	0000001c __vfiprintf_internal
0400b90c g     F .text	0000021c altera_avalon_jtag_uart_read
04003548 g     F .text	00000064 .hidden __udivsi3
0400a6e0 g     F .text	000000ac isatty
04004f64 g     F .text	000000bc _raise_r
04004afc g     F .text	00000068 __assert_func
04007d24 g     F .text	0000000c __locale_charset
04010d7c g     O .bss	00000004 __malloc_top_pad
04005174 g     F .text	00000004 _getpid_r
04010d5c g     O .bss	00000008 jtag_kiss
0400f1cc g     O .rwdata	00000004 __mb_cur_max
04007d54 g     F .text	0000000c _localeconv_r
04007658 g     F .text	000004c8 __sfvwrite_r
04005020 g     F .text	000000a8 __sigtramp_r
04008ef0 g     F .text	00000054 _sbrk_r
040097fc g     F .text	00000060 _read_r
0400f1ec g     O .rwdata	00000004 alt_max_fd
040095e8 g     F .text	000000f0 _fclose_r
0400f1c0 g     O .rwdata	00000004 image_buffer_b
04006c3c g     F .text	00000030 fflush
04010d78 g     O .bss	00000004 __malloc_max_sbrked_mem
04009e58 g     F .text	000005c4 .hidden __umoddi3
0400aa20 g     F .text	000000dc lseek
0400f1c4 g     O .rwdata	00000004 _global_impure_ptr
0400898c g     F .text	00000564 _realloc_r
0405bec4 g       *ABS*	00000000 __bss_end
0400c360 g     F .text	000000f0 alt_iic_isr_register
0400c8d0 g     F .text	00000108 alt_tick
0400985c g     F .text	000005fc .hidden __udivdi3
04007180 g     F .text	00000024 _fputwc_r
04004e5c g     F .text	00000018 abort
04006fec g     F .text	00000018 __fp_lock_all
0400c314 g     F .text	0000004c alt_ic_irq_enabled
0400c834 g     F .text	0000009c alt_alarm_stop
04010d8c g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d4 alt_irq_handler
0400df50 g     O .rwdata	00000028 alt_dev_null
0400bfd0 g     F .text	00000020 alt_dcache_flush_all
0400f204 g       *ABS*	00000000 __ram_rwdata_end
0400f1e4 g     O .rwdata	00000008 alt_dev_list
0400aea0 g     F .text	00000100 write
04003f34 g     F .text	000000bc .hidden __gtsf2
0400d6ac g       *ABS*	00000000 __ram_rodata_end
0400a5cc g     F .text	000000b8 fstat
0400a7c8 g     F .text	00000130 kill
04010d70 g     O .bss	00000004 __nlocale_changed
0400528c g     F .text	0000150c ___vfiprintf_internal_r
040035ac g     F .text	00000058 .hidden __umodsi3
0405bec4 g       *ABS*	00000000 end
0400b448 g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
0400d054 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
04004a98 g     F .text	00000064 .hidden __clzsi2
0400bb28 g     F .text	00000224 altera_avalon_jtag_uart_write
04006fdc g     F .text	00000004 __sfp_lock_acquire
0400874c g     F .text	000000e4 memchr
04007348 g     F .text	00000310 _free_r
04007d30 g     F .text	00000010 __locale_mb_cur_max
0400ced4 g     F .text	00000180 __call_exitprocs
04010d6c g     O .bss	00000004 __mlocale_changed
0400f1d0 g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
04010d90 g     O .bss	00000004 _alt_tick_rate
04010d94 g     O .bss	00000004 _alt_nticks
040050dc g     F .text	00000018 signal
0400abfc g     F .text	00000104 read
0400b00c g     F .text	000002d8 alt_sys_init
04004974 g     F .text	00000124 .hidden __floatsisf
0400cdbc g     F .text	00000118 __register_exitproc
0400b7b4 g     F .text	00000068 altera_avalon_jtag_uart_close
04003604 g     F .text	00000028 .hidden __mulsi3
0400d6ac g       *ABS*	00000000 __ram_rwdata_start
0400d054 g       *ABS*	00000000 __ram_rodata_start
04010d9c g     O .bss	00000028 __malloc_current_mallinfo
0400b2e4 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0400cb94 g     F .text	000000c4 alt_get_fd
0400be78 g     F .text	00000158 alt_busy_sleep
04009594 g     F .text	00000054 _close_r
040029a8 g     F .text	00000254 tje_encode_with_func
0400cd40 g     F .text	0000007c memcmp
0400b3a4 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0405bec4 g       *ABS*	00000000 __alt_stack_base
0400b3f4 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
04006870 g     F .text	00000154 __swsetup_r
04006e9c g     F .text	00000118 __sfp
0400db48 g     O .rwdata	00000408 __malloc_av_
04006fe8 g     F .text	00000004 __sinit_lock_release
04008f44 g     F .text	00000054 __sread
0400ca8c g     F .text	00000108 alt_find_file
0400c02c g     F .text	000000a4 alt_dev_llist_insert
0400ab78 g     F .text	00000024 __malloc_lock
0400ad84 g     F .text	000000b0 sbrk
04006be0 g     F .text	0000005c _fflush_r
04010d5c g       *ABS*	00000000 __bss_start
04004d1c g     F .text	00000128 memset
0400310c g     F .text	00000038 main
04010d88 g     O .bss	00000004 alt_envp
04010d74 g     O .bss	00000004 __malloc_max_total_mem
0400b344 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
04009334 g     F .text	00000018 __swbuf
04009078 g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
040096d8 g     F .text	00000014 fclose
04003198 g     F .text	00000044 kiss_start
04007f40 g     F .text	0000080c _malloc_r
040094a8 g     F .text	00000030 __ascii_wctomb
0400f1f0 g     O .rwdata	00000004 alt_errno
04004b78 g     F .text	00000020 _fiprintf_r
040050f4 g     F .text	00000010 _init_signal
04007b20 g     F .text	000000c4 _fwalk
04003450 g     F .text	00000084 .hidden __divsi3
04007224 g     F .text	00000124 _malloc_trim_r
0400d054 g       *ABS*	00000000 __CTOR_END__
04003ff0 g     F .text	00000430 .hidden __mulsf3
04009080 g     F .text	000000dc strcmp
0400d054 g       *ABS*	00000000 __flash_rodata_start
0400d054 g       *ABS*	00000000 __DTOR_LIST__
0400afd4 g     F .text	00000038 alt_irq_init
0400ad00 g     F .text	00000084 alt_release_fd
0400d4c1 g     O .rodata	00000100 .hidden __clz_tab
04010d68 g     O .bss	00000004 _PathLocale
0400ccf4 g     F .text	00000014 atexit
04003f34 g     F .text	000000bc .hidden __gesf2
04009534 g     F .text	00000060 _write_r
04007d60 g     F .text	00000018 setlocale
0400f1c8 g     O .rwdata	00000004 _impure_ptr
04010d80 g     O .bss	00000004 alt_argc
040069c4 g     F .text	0000021c __sflush_r
0400c130 g     F .text	00000060 _do_dtors
04007d4c g     F .text	00000008 __locale_cjk_lang
04000020 g       .exceptions	00000000 alt_irq_entry
04007004 g     F .text	00000018 __fp_unlock_all
04003308 g     F .text	00000044 kiss_end
0400f1dc g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
04007d78 g     F .text	0000000c localeconv
0400c1b0 g     F .text	00000050 alt_ic_isr_register
0400f204 g       *ABS*	00000000 _edata
0405bec4 g       *ABS*	00000000 _end
0400701c g     F .text	00000164 __fputwc
04000230 g       *ABS*	00000000 __ram_exceptions_end
0400b81c g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
0400c288 g     F .text	0000008c alt_ic_irq_disable
04008fa0 g     F .text	0000007c __swrite
0400f1d4 g     O .rwdata	00000004 __malloc_trim_threshold
04007d40 g     F .text	0000000c __locale_msgcharset
0400cd08 g     F .text	00000038 exit
04004b98 g     F .text	0000003c fiprintf
04004e44 g     F .text	00000018 _vfiprintf_r
04007be4 g     F .text	000000c4 _fwalk_reent
040034d4 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
04006fe0 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
0400a55c g     F .text	00000034 _exit
0400bd4c g     F .text	0000012c alt_alarm_start
04007d84 g     F .text	000001bc __smakebuf_r
0400915c g     F .text	00000098 strlen
04004e74 g     F .text	0000006c _init_signal_r
0400c6d8 g     F .text	0000015c open
0400f1bc g     O .rwdata	00000004 image_buffer_a
04004b64 g     F .text	00000014 __assert
0400f1d8 g     O .rwdata	00000004 __wctomb
04005274 g     F .text	00000018 __sprint_r
0400c190 g     F .text	00000020 alt_icache_flush_all
0400334c g     F .text	00000104 floorf
0400f1f8 g     O .rwdata	00000004 alt_priority_mask
0400c200 g     F .text	00000088 alt_ic_irq_enable
040094d8 g     F .text	0000005c _wctomb_r
0400f1fc g     O .rwdata	00000008 alt_alarm_list
0400c0d0 g     F .text	00000060 _do_ctors
04005104 g     F .text	00000014 __sigtramp
040093e8 g     F .text	000000c0 wcrtomb
0400a458 g     F .text	000000d8 close
0400362c g     F .text	000004c8 .hidden __addsf3
04003144 g     F .text	00000054 kiss_send_packet
040031dc g     F .text	0000012c kiss_send_data
0400a960 g     F .text	00000084 alt_load
040071a4 g     F .text	00000080 fputwc
040050c8 g     F .text	00000014 raise
04006fe4 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008101b4 	movhi	r2,1030
 4000140:	10af7104 	addi	r2,r2,-16956
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008101b4 	movhi	r2,1030
 4000158:	10af7104 	addi	r2,r2,-16956
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a6f917 	ldw	r2,-25628(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a6f917 	ldw	r2,-25628(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 400023c:	d69c6d14 	ori	gp,gp,29108
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000244:	10835714 	ori	r2,r2,3420

    movhi r3, %hi(__bss_end)
 4000248:	00c10174 	movhi	r3,1029
    ori r3, r3, %lo(__bss_end)
 400024c:	18efb114 	ori	r3,r3,48836

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	400a9600 	call	400a960 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	400aafc0 	call	400aafc <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_data_end+0xfc000268>

0400026c <tjei_be_word>:
		35, 36, 48, 49, 57, 58, 62, 63,
	};

	// Memory order as big endian. 0xhilo -> 0xlohi which looks as 0xhilo in memory.
	static uint16_t tjei_be_word(const uint16_t le_word)
	{
 400026c:	defffd04 	addi	sp,sp,-12
 4000270:	df000215 	stw	fp,8(sp)
 4000274:	df000204 	addi	fp,sp,8
 4000278:	2005883a 	mov	r2,r4
 400027c:	e0bfff0d 	sth	r2,-4(fp)
		uint16_t lo = (le_word & 0x00ff);
 4000280:	e0bfff0b 	ldhu	r2,-4(fp)
 4000284:	10803fcc 	andi	r2,r2,255
 4000288:	e0bffe0d 	sth	r2,-8(fp)
		uint16_t hi = ((le_word & 0xff00) >> 8);
 400028c:	e0bfff0b 	ldhu	r2,-4(fp)
 4000290:	1004d23a 	srli	r2,r2,8
 4000294:	e0bffe8d 	sth	r2,-6(fp)
		return (uint16_t)((lo << 8) | hi);
 4000298:	e0bffe0b 	ldhu	r2,-8(fp)
 400029c:	1004923a 	slli	r2,r2,8
 40002a0:	1007883a 	mov	r3,r2
 40002a4:	e0bffe8b 	ldhu	r2,-6(fp)
 40002a8:	1884b03a 	or	r2,r3,r2
	}
 40002ac:	e037883a 	mov	sp,fp
 40002b0:	df000017 	ldw	fp,0(sp)
 40002b4:	dec00104 	addi	sp,sp,4
 40002b8:	f800283a 	ret

040002bc <tjei_write>:
	} TJEScanHeader;
#pragma pack(pop)


	static void tjei_write(TJEState* state, const void* data, size_t num_bytes, size_t num_elements)
	{
 40002bc:	defff804 	addi	sp,sp,-32
 40002c0:	dfc00715 	stw	ra,28(sp)
 40002c4:	df000615 	stw	fp,24(sp)
 40002c8:	df000604 	addi	fp,sp,24
 40002cc:	e13ffc15 	stw	r4,-16(fp)
 40002d0:	e17ffd15 	stw	r5,-12(fp)
 40002d4:	e1bffe15 	stw	r6,-8(fp)
 40002d8:	e1ffff15 	stw	r7,-4(fp)
		size_t to_write = num_bytes * num_elements;
 40002dc:	e17fff17 	ldw	r5,-4(fp)
 40002e0:	e13ffe17 	ldw	r4,-8(fp)
 40002e4:	40036040 	call	4003604 <__mulsi3>
 40002e8:	e0bffa15 	stw	r2,-24(fp)

		// Cap to the buffer available size and copy memory.
		size_t capped_count = tjei_min(to_write, TJEI_BUFFER_SIZE - 1 - state->output_buffer_count);
 40002ec:	e0bffc17 	ldw	r2,-16(fp)
 40002f0:	10832b17 	ldw	r2,3244(r2)
 40002f4:	00c0ffc4 	movi	r3,1023
 40002f8:	1885c83a 	sub	r2,r3,r2
 40002fc:	e0fffa17 	ldw	r3,-24(fp)
 4000300:	1880012e 	bgeu	r3,r2,4000308 <tjei_write+0x4c>
 4000304:	1805883a 	mov	r2,r3
 4000308:	e0bffb15 	stw	r2,-20(fp)

		memcpy(state->output_buffer + state->output_buffer_count, data, capped_count);
 400030c:	e0bffc17 	ldw	r2,-16(fp)
 4000310:	10c32c04 	addi	r3,r2,3248
 4000314:	e0bffc17 	ldw	r2,-16(fp)
 4000318:	10832b17 	ldw	r2,3244(r2)
 400031c:	1885883a 	add	r2,r3,r2
 4000320:	e1bffb17 	ldw	r6,-20(fp)
 4000324:	e17ffd17 	ldw	r5,-12(fp)
 4000328:	1009883a 	mov	r4,r2
 400032c:	4004bd40 	call	4004bd4 <memcpy>
		state->output_buffer_count += capped_count;
 4000330:	e0bffc17 	ldw	r2,-16(fp)
 4000334:	10c32b17 	ldw	r3,3244(r2)
 4000338:	e0bffb17 	ldw	r2,-20(fp)
 400033c:	1887883a 	add	r3,r3,r2
 4000340:	e0bffc17 	ldw	r2,-16(fp)
 4000344:	10c32b15 	stw	r3,3244(r2)

		assert(state->output_buffer_count <= TJEI_BUFFER_SIZE - 1);
 4000348:	e0bffc17 	ldw	r2,-16(fp)
 400034c:	10832b17 	ldw	r2,3244(r2)
 4000350:	10810030 	cmpltui	r2,r2,1024
 4000354:	1000081e 	bne	r2,zero,4000378 <tjei_write+0xbc>
 4000358:	01c10074 	movhi	r7,1025
 400035c:	39f4b404 	addi	r7,r7,-11568
 4000360:	01810074 	movhi	r6,1025
 4000364:	31b50204 	addi	r6,r6,-11256
 4000368:	01406644 	movi	r5,409
 400036c:	01010074 	movhi	r4,1025
 4000370:	2134c104 	addi	r4,r4,-11516
 4000374:	4004afc0 	call	4004afc <__assert_func>

		// Flush the buffer.
		if (state->output_buffer_count == TJEI_BUFFER_SIZE - 1) {
 4000378:	e0bffc17 	ldw	r2,-16(fp)
 400037c:	10832b17 	ldw	r2,3244(r2)
 4000380:	1080ffd8 	cmpnei	r2,r2,1023
 4000384:	10000c1e 	bne	r2,zero,40003b8 <tjei_write+0xfc>
			state->write_context.func(state->write_context.context, state->output_buffer, (int)state->output_buffer_count);
 4000388:	e0bffc17 	ldw	r2,-16(fp)
 400038c:	10832a17 	ldw	r2,3240(r2)
 4000390:	e0fffc17 	ldw	r3,-16(fp)
 4000394:	19032917 	ldw	r4,3236(r3)
 4000398:	e0fffc17 	ldw	r3,-16(fp)
 400039c:	19432c04 	addi	r5,r3,3248
 40003a0:	e0fffc17 	ldw	r3,-16(fp)
 40003a4:	18c32b17 	ldw	r3,3244(r3)
 40003a8:	180d883a 	mov	r6,r3
 40003ac:	103ee83a 	callr	r2
			state->output_buffer_count = 0;
 40003b0:	e0bffc17 	ldw	r2,-16(fp)
 40003b4:	10032b15 	stw	zero,3244(r2)
		}

		// Recursively calling ourselves with the rest of the buffer.
		if (capped_count < to_write) {
 40003b8:	e0fffb17 	ldw	r3,-20(fp)
 40003bc:	e0bffa17 	ldw	r2,-24(fp)
 40003c0:	18800b2e 	bgeu	r3,r2,40003f0 <tjei_write+0x134>
			tjei_write(state, (uint8_t*)data + capped_count, to_write - capped_count, 1);
 40003c4:	e0fffd17 	ldw	r3,-12(fp)
 40003c8:	e0bffb17 	ldw	r2,-20(fp)
 40003cc:	1889883a 	add	r4,r3,r2
 40003d0:	e0fffa17 	ldw	r3,-24(fp)
 40003d4:	e0bffb17 	ldw	r2,-20(fp)
 40003d8:	1885c83a 	sub	r2,r3,r2
 40003dc:	01c00044 	movi	r7,1
 40003e0:	100d883a 	mov	r6,r2
 40003e4:	200b883a 	mov	r5,r4
 40003e8:	e13ffc17 	ldw	r4,-16(fp)
 40003ec:	40002bc0 	call	40002bc <tjei_write>
		}
	}
 40003f0:	0001883a 	nop
 40003f4:	e037883a 	mov	sp,fp
 40003f8:	dfc00117 	ldw	ra,4(sp)
 40003fc:	df000017 	ldw	fp,0(sp)
 4000400:	dec00204 	addi	sp,sp,8
 4000404:	f800283a 	ret

04000408 <tjei_write_DQT>:

	static void tjei_write_DQT(TJEState* state, const uint8_t* matrix, uint8_t id)
	{
 4000408:	defff904 	addi	sp,sp,-28
 400040c:	dfc00615 	stw	ra,24(sp)
 4000410:	df000515 	stw	fp,20(sp)
 4000414:	df000504 	addi	fp,sp,20
 4000418:	e13ffd15 	stw	r4,-12(fp)
 400041c:	e17ffe15 	stw	r5,-8(fp)
 4000420:	3005883a 	mov	r2,r6
 4000424:	e0bfff05 	stb	r2,-4(fp)
		uint16_t DQT = tjei_be_word(0xffdb);
 4000428:	013ff6d4 	movui	r4,65499
 400042c:	400026c0 	call	400026c <tjei_be_word>
 4000430:	e0bffb0d 	sth	r2,-20(fp)
		tjei_write(state, &DQT, sizeof(uint16_t), 1);
 4000434:	01c00044 	movi	r7,1
 4000438:	01800084 	movi	r6,2
 400043c:	e17ffb04 	addi	r5,fp,-20
 4000440:	e13ffd17 	ldw	r4,-12(fp)
 4000444:	40002bc0 	call	40002bc <tjei_write>
		uint16_t len = tjei_be_word(0x0043); // 2(len) + 1(id) + 64(matrix) = 67 = 0x43
 4000448:	010010c4 	movi	r4,67
 400044c:	400026c0 	call	400026c <tjei_be_word>
 4000450:	e0bffb8d 	sth	r2,-18(fp)
		tjei_write(state, &len, sizeof(uint16_t), 1);
 4000454:	e0bffb84 	addi	r2,fp,-18
 4000458:	01c00044 	movi	r7,1
 400045c:	01800084 	movi	r6,2
 4000460:	100b883a 	mov	r5,r2
 4000464:	e13ffd17 	ldw	r4,-12(fp)
 4000468:	40002bc0 	call	40002bc <tjei_write>
		assert(id < 4);
 400046c:	e0bfff03 	ldbu	r2,-4(fp)
 4000470:	10800130 	cmpltui	r2,r2,4
 4000474:	1000081e 	bne	r2,zero,4000498 <tjei_write_DQT+0x90>
 4000478:	01c10074 	movhi	r7,1025
 400047c:	39f4c404 	addi	r7,r7,-11504
 4000480:	01810074 	movhi	r6,1025
 4000484:	31b50504 	addi	r6,r6,-11244
 4000488:	01406b44 	movi	r5,429
 400048c:	01010074 	movhi	r4,1025
 4000490:	2134c104 	addi	r4,r4,-11516
 4000494:	4004afc0 	call	4004afc <__assert_func>
		uint8_t precision_and_id = id;  // 0x0000 8 bits | 0x00id
 4000498:	e0bfff03 	ldbu	r2,-4(fp)
 400049c:	e0bffc05 	stb	r2,-16(fp)
		tjei_write(state, &precision_and_id, sizeof(uint8_t), 1);
 40004a0:	e0bffc04 	addi	r2,fp,-16
 40004a4:	01c00044 	movi	r7,1
 40004a8:	01800044 	movi	r6,1
 40004ac:	100b883a 	mov	r5,r2
 40004b0:	e13ffd17 	ldw	r4,-12(fp)
 40004b4:	40002bc0 	call	40002bc <tjei_write>
		// Write matrix
		tjei_write(state, matrix, 64 * sizeof(uint8_t), 1);
 40004b8:	01c00044 	movi	r7,1
 40004bc:	01801004 	movi	r6,64
 40004c0:	e17ffe17 	ldw	r5,-8(fp)
 40004c4:	e13ffd17 	ldw	r4,-12(fp)
 40004c8:	40002bc0 	call	40002bc <tjei_write>
	}
 40004cc:	0001883a 	nop
 40004d0:	e037883a 	mov	sp,fp
 40004d4:	dfc00117 	ldw	ra,4(sp)
 40004d8:	df000017 	ldw	fp,0(sp)
 40004dc:	dec00204 	addi	sp,sp,8
 40004e0:	f800283a 	ret

040004e4 <tjei_write_DHT>:
	static void tjei_write_DHT(TJEState* state,
		uint8_t const* matrix_len,
		uint8_t const* matrix_val,
		TJEHuffmanTableClass ht_class,
		uint8_t id)
	{
 40004e4:	defff504 	addi	sp,sp,-44
 40004e8:	dfc00a15 	stw	ra,40(sp)
 40004ec:	df000915 	stw	fp,36(sp)
 40004f0:	df000904 	addi	fp,sp,36
 40004f4:	e13ffb15 	stw	r4,-20(fp)
 40004f8:	e17ffc15 	stw	r5,-16(fp)
 40004fc:	e1bffd15 	stw	r6,-12(fp)
 4000500:	e1fffe15 	stw	r7,-8(fp)
 4000504:	e0800217 	ldw	r2,8(fp)
 4000508:	e0bfff05 	stb	r2,-4(fp)
		int num_values = 0;
 400050c:	e03ff715 	stw	zero,-36(fp)
		for (int i = 0; i < 16; ++i) {
 4000510:	e03ff815 	stw	zero,-32(fp)
 4000514:	00000b06 	br	4000544 <tjei_write_DHT+0x60>
			num_values += matrix_len[i];
 4000518:	e0bff817 	ldw	r2,-32(fp)
 400051c:	e0fffc17 	ldw	r3,-16(fp)
 4000520:	1885883a 	add	r2,r3,r2
 4000524:	10800003 	ldbu	r2,0(r2)
 4000528:	10803fcc 	andi	r2,r2,255
 400052c:	e0fff717 	ldw	r3,-36(fp)
 4000530:	1885883a 	add	r2,r3,r2
 4000534:	e0bff715 	stw	r2,-36(fp)
		uint8_t const* matrix_val,
		TJEHuffmanTableClass ht_class,
		uint8_t id)
	{
		int num_values = 0;
		for (int i = 0; i < 16; ++i) {
 4000538:	e0bff817 	ldw	r2,-32(fp)
 400053c:	10800044 	addi	r2,r2,1
 4000540:	e0bff815 	stw	r2,-32(fp)
 4000544:	e0bff817 	ldw	r2,-32(fp)
 4000548:	10800410 	cmplti	r2,r2,16
 400054c:	103ff21e 	bne	r2,zero,4000518 <__alt_data_end+0xfc000518>
			num_values += matrix_len[i];
		}
		assert(num_values <= 0xffff);
 4000550:	e0bff717 	ldw	r2,-36(fp)
 4000554:	00ffffd4 	movui	r3,65535
 4000558:	1880080e 	bge	r3,r2,400057c <tjei_write_DHT+0x98>
 400055c:	01c10074 	movhi	r7,1025
 4000560:	39f4c604 	addi	r7,r7,-11496
 4000564:	01810074 	movhi	r6,1025
 4000568:	31b50904 	addi	r6,r6,-11228
 400056c:	01407104 	movi	r5,452
 4000570:	01010074 	movhi	r4,1025
 4000574:	2134c104 	addi	r4,r4,-11516
 4000578:	4004afc0 	call	4004afc <__assert_func>

		uint16_t DHT = tjei_be_word(0xffc4);
 400057c:	013ff114 	movui	r4,65476
 4000580:	400026c0 	call	400026c <tjei_be_word>
 4000584:	e0bff90d 	sth	r2,-28(fp)
		// 2(len) + 1(Tc|th) + 16 (num lengths) + ?? (num values)
		uint16_t len = tjei_be_word(2 + 1 + 16 + (uint16_t)num_values);
 4000588:	e0bff717 	ldw	r2,-36(fp)
 400058c:	108004c4 	addi	r2,r2,19
 4000590:	10bfffcc 	andi	r2,r2,65535
 4000594:	1009883a 	mov	r4,r2
 4000598:	400026c0 	call	400026c <tjei_be_word>
 400059c:	e0bff98d 	sth	r2,-26(fp)
		assert(id < 4);
 40005a0:	e0bfff03 	ldbu	r2,-4(fp)
 40005a4:	10800130 	cmpltui	r2,r2,4
 40005a8:	1000081e 	bne	r2,zero,40005cc <tjei_write_DHT+0xe8>
 40005ac:	01c10074 	movhi	r7,1025
 40005b0:	39f4c404 	addi	r7,r7,-11504
 40005b4:	01810074 	movhi	r6,1025
 40005b8:	31b50904 	addi	r6,r6,-11228
 40005bc:	01407244 	movi	r5,457
 40005c0:	01010074 	movhi	r4,1025
 40005c4:	2134c104 	addi	r4,r4,-11516
 40005c8:	4004afc0 	call	4004afc <__assert_func>
		uint8_t tc_th = (uint8_t)((((uint8_t)ht_class) << 4) | id);
 40005cc:	e0bffe17 	ldw	r2,-8(fp)
 40005d0:	10803fcc 	andi	r2,r2,255
 40005d4:	1004913a 	slli	r2,r2,4
 40005d8:	1007883a 	mov	r3,r2
 40005dc:	e0bfff03 	ldbu	r2,-4(fp)
 40005e0:	1884b03a 	or	r2,r3,r2
 40005e4:	e0bffa05 	stb	r2,-24(fp)

		tjei_write(state, &DHT, sizeof(uint16_t), 1);
 40005e8:	e0bff904 	addi	r2,fp,-28
 40005ec:	01c00044 	movi	r7,1
 40005f0:	01800084 	movi	r6,2
 40005f4:	100b883a 	mov	r5,r2
 40005f8:	e13ffb17 	ldw	r4,-20(fp)
 40005fc:	40002bc0 	call	40002bc <tjei_write>
		tjei_write(state, &len, sizeof(uint16_t), 1);
 4000600:	e0bff984 	addi	r2,fp,-26
 4000604:	01c00044 	movi	r7,1
 4000608:	01800084 	movi	r6,2
 400060c:	100b883a 	mov	r5,r2
 4000610:	e13ffb17 	ldw	r4,-20(fp)
 4000614:	40002bc0 	call	40002bc <tjei_write>
		tjei_write(state, &tc_th, sizeof(uint8_t), 1);
 4000618:	e0bffa04 	addi	r2,fp,-24
 400061c:	01c00044 	movi	r7,1
 4000620:	01800044 	movi	r6,1
 4000624:	100b883a 	mov	r5,r2
 4000628:	e13ffb17 	ldw	r4,-20(fp)
 400062c:	40002bc0 	call	40002bc <tjei_write>
		tjei_write(state, matrix_len, sizeof(uint8_t), 16);
 4000630:	01c00404 	movi	r7,16
 4000634:	01800044 	movi	r6,1
 4000638:	e17ffc17 	ldw	r5,-16(fp)
 400063c:	e13ffb17 	ldw	r4,-20(fp)
 4000640:	40002bc0 	call	40002bc <tjei_write>
		tjei_write(state, matrix_val, sizeof(uint8_t), (size_t)num_values);
 4000644:	e0bff717 	ldw	r2,-36(fp)
 4000648:	100f883a 	mov	r7,r2
 400064c:	01800044 	movi	r6,1
 4000650:	e17ffd17 	ldw	r5,-12(fp)
 4000654:	e13ffb17 	ldw	r4,-20(fp)
 4000658:	40002bc0 	call	40002bc <tjei_write>
	}
 400065c:	0001883a 	nop
 4000660:	e037883a 	mov	sp,fp
 4000664:	dfc00117 	ldw	ra,4(sp)
 4000668:	df000017 	ldw	fp,0(sp)
 400066c:	dec00204 	addi	sp,sp,8
 4000670:	f800283a 	ret

04000674 <tjei_huff_get_code_lengths>:
	//  Huffman deflation code.
	// ============================================================

	// Returns all code sizes from the BITS specification (JPEG C.3)
	static uint8_t* tjei_huff_get_code_lengths(uint8_t huffsize[/*256*/], uint8_t const* bits)
	{
 4000674:	defffa04 	addi	sp,sp,-24
 4000678:	df000515 	stw	fp,20(sp)
 400067c:	df000504 	addi	fp,sp,20
 4000680:	e13ffe15 	stw	r4,-8(fp)
 4000684:	e17fff15 	stw	r5,-4(fp)
		int k = 0;
 4000688:	e03ffb15 	stw	zero,-20(fp)
		for (int i = 0; i < 16; ++i) {
 400068c:	e03ffc15 	stw	zero,-16(fp)
 4000690:	00001c06 	br	4000704 <tjei_huff_get_code_lengths+0x90>
			for (int j = 0; j < bits[i]; ++j) {
 4000694:	e03ffd15 	stw	zero,-12(fp)
 4000698:	00000c06 	br	40006cc <tjei_huff_get_code_lengths+0x58>
				huffsize[k++] = (uint8_t)(i + 1);
 400069c:	e0bffb17 	ldw	r2,-20(fp)
 40006a0:	10c00044 	addi	r3,r2,1
 40006a4:	e0fffb15 	stw	r3,-20(fp)
 40006a8:	1007883a 	mov	r3,r2
 40006ac:	e0bffe17 	ldw	r2,-8(fp)
 40006b0:	10c5883a 	add	r2,r2,r3
 40006b4:	e0fffc17 	ldw	r3,-16(fp)
 40006b8:	18c00044 	addi	r3,r3,1
 40006bc:	10c00005 	stb	r3,0(r2)
	// Returns all code sizes from the BITS specification (JPEG C.3)
	static uint8_t* tjei_huff_get_code_lengths(uint8_t huffsize[/*256*/], uint8_t const* bits)
	{
		int k = 0;
		for (int i = 0; i < 16; ++i) {
			for (int j = 0; j < bits[i]; ++j) {
 40006c0:	e0bffd17 	ldw	r2,-12(fp)
 40006c4:	10800044 	addi	r2,r2,1
 40006c8:	e0bffd15 	stw	r2,-12(fp)
 40006cc:	e0bffc17 	ldw	r2,-16(fp)
 40006d0:	e0ffff17 	ldw	r3,-4(fp)
 40006d4:	1885883a 	add	r2,r3,r2
 40006d8:	10800003 	ldbu	r2,0(r2)
 40006dc:	10803fcc 	andi	r2,r2,255
 40006e0:	e0fffd17 	ldw	r3,-12(fp)
 40006e4:	18bfed16 	blt	r3,r2,400069c <__alt_data_end+0xfc00069c>
				huffsize[k++] = (uint8_t)(i + 1);
			}
			huffsize[k] = 0;
 40006e8:	e0bffb17 	ldw	r2,-20(fp)
 40006ec:	e0fffe17 	ldw	r3,-8(fp)
 40006f0:	1885883a 	add	r2,r3,r2
 40006f4:	10000005 	stb	zero,0(r2)

	// Returns all code sizes from the BITS specification (JPEG C.3)
	static uint8_t* tjei_huff_get_code_lengths(uint8_t huffsize[/*256*/], uint8_t const* bits)
	{
		int k = 0;
		for (int i = 0; i < 16; ++i) {
 40006f8:	e0bffc17 	ldw	r2,-16(fp)
 40006fc:	10800044 	addi	r2,r2,1
 4000700:	e0bffc15 	stw	r2,-16(fp)
 4000704:	e0bffc17 	ldw	r2,-16(fp)
 4000708:	10800410 	cmplti	r2,r2,16
 400070c:	103fe11e 	bne	r2,zero,4000694 <__alt_data_end+0xfc000694>
			for (int j = 0; j < bits[i]; ++j) {
				huffsize[k++] = (uint8_t)(i + 1);
			}
			huffsize[k] = 0;
		}
		return huffsize;
 4000710:	e0bffe17 	ldw	r2,-8(fp)
	}
 4000714:	e037883a 	mov	sp,fp
 4000718:	df000017 	ldw	fp,0(sp)
 400071c:	dec00104 	addi	sp,sp,4
 4000720:	f800283a 	ret

04000724 <tjei_huff_get_codes>:

	// Fills out the prefixes for each code.
	static uint16_t* tjei_huff_get_codes(uint16_t codes[], uint8_t* huffsize, int64_t count)
	{
 4000724:	defff704 	addi	sp,sp,-36
 4000728:	dfc00815 	stw	ra,32(sp)
 400072c:	df000715 	stw	fp,28(sp)
 4000730:	df000704 	addi	fp,sp,28
 4000734:	e13ffc15 	stw	r4,-16(fp)
 4000738:	e17ffd15 	stw	r5,-12(fp)
 400073c:	e1bffe15 	stw	r6,-8(fp)
 4000740:	e1ffff15 	stw	r7,-4(fp)
		uint16_t code = 0;
 4000744:	e03ff90d 	sth	zero,-28(fp)
		int k = 0;
 4000748:	e03ffa15 	stw	zero,-24(fp)
		uint8_t sz = huffsize[0];
 400074c:	e13ffd17 	ldw	r4,-12(fp)
 4000750:	21000003 	ldbu	r4,0(r4)
 4000754:	e13ffb05 	stb	r4,-20(fp)
		for (;;) {
			do {
				assert(k < count);
 4000758:	e13ffa17 	ldw	r4,-24(fp)
 400075c:	2005883a 	mov	r2,r4
 4000760:	2009d7fa 	srai	r4,r4,31
 4000764:	2007883a 	mov	r3,r4
 4000768:	e13fff17 	ldw	r4,-4(fp)
 400076c:	19000c16 	blt	r3,r4,40007a0 <tjei_huff_get_codes+0x7c>
 4000770:	e13fff17 	ldw	r4,-4(fp)
 4000774:	20c0021e 	bne	r4,r3,4000780 <tjei_huff_get_codes+0x5c>
 4000778:	e13ffe17 	ldw	r4,-8(fp)
 400077c:	11000836 	bltu	r2,r4,40007a0 <tjei_huff_get_codes+0x7c>
 4000780:	01c10074 	movhi	r7,1025
 4000784:	39f4cc04 	addi	r7,r7,-11472
 4000788:	01810074 	movhi	r6,1025
 400078c:	31b50d04 	addi	r6,r6,-11212
 4000790:	01407ac4 	movi	r5,491
 4000794:	01010074 	movhi	r4,1025
 4000798:	2134c104 	addi	r4,r4,-11516
 400079c:	4004afc0 	call	4004afc <__assert_func>
				codes[k++] = code++;
 40007a0:	e13ffa17 	ldw	r4,-24(fp)
 40007a4:	21400044 	addi	r5,r4,1
 40007a8:	e17ffa15 	stw	r5,-24(fp)
 40007ac:	2109883a 	add	r4,r4,r4
 40007b0:	200b883a 	mov	r5,r4
 40007b4:	e13ffc17 	ldw	r4,-16(fp)
 40007b8:	214b883a 	add	r5,r4,r5
 40007bc:	e13ff90b 	ldhu	r4,-28(fp)
 40007c0:	21800044 	addi	r6,r4,1
 40007c4:	e1bff90d 	sth	r6,-28(fp)
 40007c8:	2900000d 	sth	r4,0(r5)
			} while (huffsize[k] == sz);
 40007cc:	e13ffa17 	ldw	r4,-24(fp)
 40007d0:	e17ffd17 	ldw	r5,-12(fp)
 40007d4:	2909883a 	add	r4,r5,r4
 40007d8:	21000003 	ldbu	r4,0(r4)
 40007dc:	21403fcc 	andi	r5,r4,255
 40007e0:	e13ffb03 	ldbu	r4,-20(fp)
 40007e4:	293fdc26 	beq	r5,r4,4000758 <__alt_data_end+0xfc000758>
			if (huffsize[k] == 0) {
 40007e8:	e13ffa17 	ldw	r4,-24(fp)
 40007ec:	e17ffd17 	ldw	r5,-12(fp)
 40007f0:	2909883a 	add	r4,r5,r4
 40007f4:	21000003 	ldbu	r4,0(r4)
 40007f8:	21003fcc 	andi	r4,r4,255
 40007fc:	2000021e 	bne	r4,zero,4000808 <tjei_huff_get_codes+0xe4>
				return codes;
 4000800:	e0bffc17 	ldw	r2,-16(fp)
 4000804:	00000e06 	br	4000840 <tjei_huff_get_codes+0x11c>
			}
			do {
				code = (uint16_t)(code << 1);
 4000808:	e13ff90b 	ldhu	r4,-28(fp)
 400080c:	2109883a 	add	r4,r4,r4
 4000810:	e13ff90d 	sth	r4,-28(fp)
				++sz;
 4000814:	e13ffb03 	ldbu	r4,-20(fp)
 4000818:	21000044 	addi	r4,r4,1
 400081c:	e13ffb05 	stb	r4,-20(fp)
			} while (huffsize[k] != sz);
 4000820:	e13ffa17 	ldw	r4,-24(fp)
 4000824:	e17ffd17 	ldw	r5,-12(fp)
 4000828:	2909883a 	add	r4,r5,r4
 400082c:	21000003 	ldbu	r4,0(r4)
 4000830:	21403fcc 	andi	r5,r4,255
 4000834:	e13ffb03 	ldbu	r4,-20(fp)
 4000838:	293ff31e 	bne	r5,r4,4000808 <__alt_data_end+0xfc000808>
		}
 400083c:	003fc606 	br	4000758 <__alt_data_end+0xfc000758>
	}
 4000840:	e037883a 	mov	sp,fp
 4000844:	dfc00117 	ldw	ra,4(sp)
 4000848:	df000017 	ldw	fp,0(sp)
 400084c:	dec00204 	addi	sp,sp,8
 4000850:	f800283a 	ret

04000854 <tjei_huff_get_extended>:
	static void tjei_huff_get_extended(uint8_t* out_ehuffsize,
		uint16_t* out_ehuffcode,
		uint8_t const* huffval,
		uint8_t* huffsize,
		uint16_t* huffcode, int64_t count)
	{
 4000854:	defff904 	addi	sp,sp,-28
 4000858:	df000615 	stw	fp,24(sp)
 400085c:	df000604 	addi	fp,sp,24
 4000860:	e13ffc15 	stw	r4,-16(fp)
 4000864:	e17ffd15 	stw	r5,-12(fp)
 4000868:	e1bffe15 	stw	r6,-8(fp)
 400086c:	e1ffff15 	stw	r7,-4(fp)
		int k = 0;
 4000870:	e03ffa15 	stw	zero,-24(fp)
		do {
			uint8_t val = huffval[k];
 4000874:	e13ffa17 	ldw	r4,-24(fp)
 4000878:	e17ffe17 	ldw	r5,-8(fp)
 400087c:	2909883a 	add	r4,r5,r4
 4000880:	21000003 	ldbu	r4,0(r4)
 4000884:	e13ffb05 	stb	r4,-20(fp)
			out_ehuffcode[val] = huffcode[k];
 4000888:	e13ffb03 	ldbu	r4,-20(fp)
 400088c:	2109883a 	add	r4,r4,r4
 4000890:	200b883a 	mov	r5,r4
 4000894:	e13ffd17 	ldw	r4,-12(fp)
 4000898:	214b883a 	add	r5,r4,r5
 400089c:	e13ffa17 	ldw	r4,-24(fp)
 40008a0:	2109883a 	add	r4,r4,r4
 40008a4:	200d883a 	mov	r6,r4
 40008a8:	e1000117 	ldw	r4,4(fp)
 40008ac:	2189883a 	add	r4,r4,r6
 40008b0:	2100000b 	ldhu	r4,0(r4)
 40008b4:	2900000d 	sth	r4,0(r5)
			out_ehuffsize[val] = huffsize[k];
 40008b8:	e13ffb03 	ldbu	r4,-20(fp)
 40008bc:	e17ffc17 	ldw	r5,-16(fp)
 40008c0:	2909883a 	add	r4,r5,r4
 40008c4:	e17ffa17 	ldw	r5,-24(fp)
 40008c8:	e1bfff17 	ldw	r6,-4(fp)
 40008cc:	314b883a 	add	r5,r6,r5
 40008d0:	29400003 	ldbu	r5,0(r5)
 40008d4:	21400005 	stb	r5,0(r4)
			k++;
 40008d8:	e13ffa17 	ldw	r4,-24(fp)
 40008dc:	21000044 	addi	r4,r4,1
 40008e0:	e13ffa15 	stw	r4,-24(fp)
		} while (k < count);
 40008e4:	e13ffa17 	ldw	r4,-24(fp)
 40008e8:	2005883a 	mov	r2,r4
 40008ec:	2009d7fa 	srai	r4,r4,31
 40008f0:	2007883a 	mov	r3,r4
 40008f4:	e1000317 	ldw	r4,12(fp)
 40008f8:	193fde16 	blt	r3,r4,4000874 <__alt_data_end+0xfc000874>
 40008fc:	e1000317 	ldw	r4,12(fp)
 4000900:	20c0021e 	bne	r4,r3,400090c <tjei_huff_get_extended+0xb8>
 4000904:	e1000217 	ldw	r4,8(fp)
 4000908:	113fda36 	bltu	r2,r4,4000874 <__alt_data_end+0xfc000874>
	}
 400090c:	0001883a 	nop
 4000910:	e037883a 	mov	sp,fp
 4000914:	df000017 	ldw	fp,0(sp)
 4000918:	dec00104 	addi	sp,sp,4
 400091c:	f800283a 	ret

04000920 <tjei_calculate_variable_length_int>:

	// Returns:
	//  out[1] : number of bits
	//  out[0] : bits
	TJEI_FORCE_INLINE void tjei_calculate_variable_length_int(int value, uint16_t out[2])
	{
 4000920:	defffc04 	addi	sp,sp,-16
 4000924:	df000315 	stw	fp,12(sp)
 4000928:	df000304 	addi	fp,sp,12
 400092c:	e13ffe15 	stw	r4,-8(fp)
 4000930:	e17fff15 	stw	r5,-4(fp)
		int abs_val = value;
 4000934:	e0bffe17 	ldw	r2,-8(fp)
 4000938:	e0bffd15 	stw	r2,-12(fp)
		if (value < 0) {
 400093c:	e0bffe17 	ldw	r2,-8(fp)
 4000940:	1000060e 	bge	r2,zero,400095c <tjei_calculate_variable_length_int+0x3c>
			abs_val = -abs_val;
 4000944:	e0bffd17 	ldw	r2,-12(fp)
 4000948:	0085c83a 	sub	r2,zero,r2
 400094c:	e0bffd15 	stw	r2,-12(fp)
			--value;
 4000950:	e0bffe17 	ldw	r2,-8(fp)
 4000954:	10bfffc4 	addi	r2,r2,-1
 4000958:	e0bffe15 	stw	r2,-8(fp)
		}
		out[1] = 1;
 400095c:	e0bfff17 	ldw	r2,-4(fp)
 4000960:	10800084 	addi	r2,r2,2
 4000964:	00c00044 	movi	r3,1
 4000968:	10c0000d 	sth	r3,0(r2)
		while (abs_val >>= 1) {
 400096c:	00000506 	br	4000984 <tjei_calculate_variable_length_int+0x64>
			++out[1];
 4000970:	e0bfff17 	ldw	r2,-4(fp)
 4000974:	10800084 	addi	r2,r2,2
 4000978:	10c0000b 	ldhu	r3,0(r2)
 400097c:	18c00044 	addi	r3,r3,1
 4000980:	10c0000d 	sth	r3,0(r2)
		if (value < 0) {
			abs_val = -abs_val;
			--value;
		}
		out[1] = 1;
		while (abs_val >>= 1) {
 4000984:	e0bffd17 	ldw	r2,-12(fp)
 4000988:	1005d07a 	srai	r2,r2,1
 400098c:	e0bffd15 	stw	r2,-12(fp)
 4000990:	e0bffd17 	ldw	r2,-12(fp)
 4000994:	103ff61e 	bne	r2,zero,4000970 <__alt_data_end+0xfc000970>
			++out[1];
		}
		out[0] = (uint16_t)(value & ((1 << out[1]) - 1));
 4000998:	e0bffe17 	ldw	r2,-8(fp)
 400099c:	1009883a 	mov	r4,r2
 40009a0:	e0bfff17 	ldw	r2,-4(fp)
 40009a4:	10800084 	addi	r2,r2,2
 40009a8:	1080000b 	ldhu	r2,0(r2)
 40009ac:	10bfffcc 	andi	r2,r2,65535
 40009b0:	00c00044 	movi	r3,1
 40009b4:	1884983a 	sll	r2,r3,r2
 40009b8:	10bfffc4 	addi	r2,r2,-1
 40009bc:	2084703a 	and	r2,r4,r2
 40009c0:	1007883a 	mov	r3,r2
 40009c4:	e0bfff17 	ldw	r2,-4(fp)
 40009c8:	10c0000d 	sth	r3,0(r2)
	}
 40009cc:	0001883a 	nop
 40009d0:	e037883a 	mov	sp,fp
 40009d4:	df000017 	ldw	fp,0(sp)
 40009d8:	dec00104 	addi	sp,sp,4
 40009dc:	f800283a 	ret

040009e0 <tjei_write_bits>:

	// Write bits to file.
	TJEI_FORCE_INLINE void tjei_write_bits(TJEState* state,
		uint32_t* bitbuffer, uint32_t* location,
		uint16_t num_bits, uint16_t bits)
	{
 40009e0:	defff704 	addi	sp,sp,-36
 40009e4:	dfc00815 	stw	ra,32(sp)
 40009e8:	df000715 	stw	fp,28(sp)
 40009ec:	df000704 	addi	fp,sp,28
 40009f0:	e13ffb15 	stw	r4,-20(fp)
 40009f4:	e17ffc15 	stw	r5,-16(fp)
 40009f8:	e1bffd15 	stw	r6,-12(fp)
 40009fc:	3807883a 	mov	r3,r7
 4000a00:	e0800217 	ldw	r2,8(fp)
 4000a04:	e0fffe0d 	sth	r3,-8(fp)
 4000a08:	e0bfff0d 	sth	r2,-4(fp)
		// This call pushes to the bitbuffer and saves the location. Data is pushed
		// from most significant to less significant.
		// When we can write a full byte, we write a byte and shift.

		// Push the stack.
		uint32_t nloc = *location + num_bits;
 4000a0c:	e0bffd17 	ldw	r2,-12(fp)
 4000a10:	10c00017 	ldw	r3,0(r2)
 4000a14:	e0bffe0b 	ldhu	r2,-8(fp)
 4000a18:	1885883a 	add	r2,r3,r2
 4000a1c:	e0bff915 	stw	r2,-28(fp)
		*bitbuffer |= (uint32_t)(bits << (32 - nloc));
 4000a20:	e0bffc17 	ldw	r2,-16(fp)
 4000a24:	10800017 	ldw	r2,0(r2)
 4000a28:	e13fff0b 	ldhu	r4,-4(fp)
 4000a2c:	01400804 	movi	r5,32
 4000a30:	e0fff917 	ldw	r3,-28(fp)
 4000a34:	28c7c83a 	sub	r3,r5,r3
 4000a38:	20c6983a 	sll	r3,r4,r3
 4000a3c:	10c6b03a 	or	r3,r2,r3
 4000a40:	e0bffc17 	ldw	r2,-16(fp)
 4000a44:	10c00015 	stw	r3,0(r2)
		*location = nloc;
 4000a48:	e0bffd17 	ldw	r2,-12(fp)
 4000a4c:	e0fff917 	ldw	r3,-28(fp)
 4000a50:	10c00015 	stw	r3,0(r2)
		while (*location >= 8) {
 4000a54:	00001f06 	br	4000ad4 <tjei_write_bits+0xf4>
			// Grab the most significant byte.
			uint8_t c = (uint8_t)((*bitbuffer) >> 24);
 4000a58:	e0bffc17 	ldw	r2,-16(fp)
 4000a5c:	10800017 	ldw	r2,0(r2)
 4000a60:	1004d63a 	srli	r2,r2,24
 4000a64:	e0bffa05 	stb	r2,-24(fp)
			// Write it to file.
			tjei_write(state, &c, 1, 1);
 4000a68:	e0bffa04 	addi	r2,fp,-24
 4000a6c:	01c00044 	movi	r7,1
 4000a70:	01800044 	movi	r6,1
 4000a74:	100b883a 	mov	r5,r2
 4000a78:	e13ffb17 	ldw	r4,-20(fp)
 4000a7c:	40002bc0 	call	40002bc <tjei_write>
			if (c == 0xff) {
 4000a80:	e0bffa03 	ldbu	r2,-24(fp)
 4000a84:	10803fcc 	andi	r2,r2,255
 4000a88:	10803fd8 	cmpnei	r2,r2,255
 4000a8c:	1000071e 	bne	r2,zero,4000aac <tjei_write_bits+0xcc>
				// Special case: tell JPEG this is not a marker.
				char z = 0;
 4000a90:	e03ffa45 	stb	zero,-23(fp)
				tjei_write(state, &z, 1, 1);
 4000a94:	e0bffa44 	addi	r2,fp,-23
 4000a98:	01c00044 	movi	r7,1
 4000a9c:	01800044 	movi	r6,1
 4000aa0:	100b883a 	mov	r5,r2
 4000aa4:	e13ffb17 	ldw	r4,-20(fp)
 4000aa8:	40002bc0 	call	40002bc <tjei_write>
			}
			// Pop the stack.
			*bitbuffer <<= 8;
 4000aac:	e0bffc17 	ldw	r2,-16(fp)
 4000ab0:	10800017 	ldw	r2,0(r2)
 4000ab4:	1006923a 	slli	r3,r2,8
 4000ab8:	e0bffc17 	ldw	r2,-16(fp)
 4000abc:	10c00015 	stw	r3,0(r2)
			*location -= 8;
 4000ac0:	e0bffd17 	ldw	r2,-12(fp)
 4000ac4:	10800017 	ldw	r2,0(r2)
 4000ac8:	10fffe04 	addi	r3,r2,-8
 4000acc:	e0bffd17 	ldw	r2,-12(fp)
 4000ad0:	10c00015 	stw	r3,0(r2)

		// Push the stack.
		uint32_t nloc = *location + num_bits;
		*bitbuffer |= (uint32_t)(bits << (32 - nloc));
		*location = nloc;
		while (*location >= 8) {
 4000ad4:	e0bffd17 	ldw	r2,-12(fp)
 4000ad8:	10800017 	ldw	r2,0(r2)
 4000adc:	10800228 	cmpgeui	r2,r2,8
 4000ae0:	103fdd1e 	bne	r2,zero,4000a58 <__alt_data_end+0xfc000a58>
			}
			// Pop the stack.
			*bitbuffer <<= 8;
			*location -= 8;
		}
	}
 4000ae4:	0001883a 	nop
 4000ae8:	e037883a 	mov	sp,fp
 4000aec:	dfc00117 	ldw	ra,4(sp)
 4000af0:	df000017 	ldw	fp,0(sp)
 4000af4:	dec00204 	addi	sp,sp,8
 4000af8:	f800283a 	ret

04000afc <tjei_fdct>:
	//  Japanese, but the algorithm is described in the Pennebaker & Mitchell
	//  JPEG textbook (see REFERENCES section in file README).  The following code
	//  is based directly on figure 4-8 in P&M.
	//
	static void tjei_fdct(float* data)
	{
 4000afc:	deffe704 	addi	sp,sp,-100
 4000b00:	dfc01815 	stw	ra,96(sp)
 4000b04:	df001715 	stw	fp,92(sp)
 4000b08:	dc001615 	stw	r16,88(sp)
 4000b0c:	df001704 	addi	fp,sp,92
 4000b10:	e13ffe15 	stw	r4,-8(fp)
		float* dataptr;
		int ctr;

		/* Pass 1: process rows. */

		dataptr = data;
 4000b14:	e0bffe17 	ldw	r2,-8(fp)
 4000b18:	e0bfe915 	stw	r2,-92(fp)
		for (ctr = 7; ctr >= 0; ctr--) {
 4000b1c:	008001c4 	movi	r2,7
 4000b20:	e0bfea15 	stw	r2,-88(fp)
 4000b24:	0000fa06 	br	4000f10 <tjei_fdct+0x414>
			tmp0 = dataptr[0] + dataptr[7];
 4000b28:	e0bfe917 	ldw	r2,-92(fp)
 4000b2c:	10c00017 	ldw	r3,0(r2)
 4000b30:	e0bfe917 	ldw	r2,-92(fp)
 4000b34:	10800704 	addi	r2,r2,28
 4000b38:	11000017 	ldw	r4,0(r2)
 4000b3c:	200b883a 	mov	r5,r4
 4000b40:	1809883a 	mov	r4,r3
 4000b44:	400362c0 	call	400362c <__addsf3>
 4000b48:	1007883a 	mov	r3,r2
 4000b4c:	e0ffeb15 	stw	r3,-84(fp)
			tmp7 = dataptr[0] - dataptr[7];
 4000b50:	e0bfe917 	ldw	r2,-92(fp)
 4000b54:	10c00017 	ldw	r3,0(r2)
 4000b58:	e0bfe917 	ldw	r2,-92(fp)
 4000b5c:	10800704 	addi	r2,r2,28
 4000b60:	11000017 	ldw	r4,0(r2)
 4000b64:	200b883a 	mov	r5,r4
 4000b68:	1809883a 	mov	r4,r3
 4000b6c:	40044200 	call	4004420 <__subsf3>
 4000b70:	1007883a 	mov	r3,r2
 4000b74:	e0ffec15 	stw	r3,-80(fp)
			tmp1 = dataptr[1] + dataptr[6];
 4000b78:	e0bfe917 	ldw	r2,-92(fp)
 4000b7c:	10800104 	addi	r2,r2,4
 4000b80:	10c00017 	ldw	r3,0(r2)
 4000b84:	e0bfe917 	ldw	r2,-92(fp)
 4000b88:	10800604 	addi	r2,r2,24
 4000b8c:	11000017 	ldw	r4,0(r2)
 4000b90:	200b883a 	mov	r5,r4
 4000b94:	1809883a 	mov	r4,r3
 4000b98:	400362c0 	call	400362c <__addsf3>
 4000b9c:	1007883a 	mov	r3,r2
 4000ba0:	e0ffed15 	stw	r3,-76(fp)
			tmp6 = dataptr[1] - dataptr[6];
 4000ba4:	e0bfe917 	ldw	r2,-92(fp)
 4000ba8:	10800104 	addi	r2,r2,4
 4000bac:	10c00017 	ldw	r3,0(r2)
 4000bb0:	e0bfe917 	ldw	r2,-92(fp)
 4000bb4:	10800604 	addi	r2,r2,24
 4000bb8:	11000017 	ldw	r4,0(r2)
 4000bbc:	200b883a 	mov	r5,r4
 4000bc0:	1809883a 	mov	r4,r3
 4000bc4:	40044200 	call	4004420 <__subsf3>
 4000bc8:	1007883a 	mov	r3,r2
 4000bcc:	e0ffee15 	stw	r3,-72(fp)
			tmp2 = dataptr[2] + dataptr[5];
 4000bd0:	e0bfe917 	ldw	r2,-92(fp)
 4000bd4:	10800204 	addi	r2,r2,8
 4000bd8:	10c00017 	ldw	r3,0(r2)
 4000bdc:	e0bfe917 	ldw	r2,-92(fp)
 4000be0:	10800504 	addi	r2,r2,20
 4000be4:	11000017 	ldw	r4,0(r2)
 4000be8:	200b883a 	mov	r5,r4
 4000bec:	1809883a 	mov	r4,r3
 4000bf0:	400362c0 	call	400362c <__addsf3>
 4000bf4:	1007883a 	mov	r3,r2
 4000bf8:	e0ffef15 	stw	r3,-68(fp)
			tmp5 = dataptr[2] - dataptr[5];
 4000bfc:	e0bfe917 	ldw	r2,-92(fp)
 4000c00:	10800204 	addi	r2,r2,8
 4000c04:	10c00017 	ldw	r3,0(r2)
 4000c08:	e0bfe917 	ldw	r2,-92(fp)
 4000c0c:	10800504 	addi	r2,r2,20
 4000c10:	11000017 	ldw	r4,0(r2)
 4000c14:	200b883a 	mov	r5,r4
 4000c18:	1809883a 	mov	r4,r3
 4000c1c:	40044200 	call	4004420 <__subsf3>
 4000c20:	1007883a 	mov	r3,r2
 4000c24:	e0fff015 	stw	r3,-64(fp)
			tmp3 = dataptr[3] + dataptr[4];
 4000c28:	e0bfe917 	ldw	r2,-92(fp)
 4000c2c:	10800304 	addi	r2,r2,12
 4000c30:	10c00017 	ldw	r3,0(r2)
 4000c34:	e0bfe917 	ldw	r2,-92(fp)
 4000c38:	10800404 	addi	r2,r2,16
 4000c3c:	11000017 	ldw	r4,0(r2)
 4000c40:	200b883a 	mov	r5,r4
 4000c44:	1809883a 	mov	r4,r3
 4000c48:	400362c0 	call	400362c <__addsf3>
 4000c4c:	1007883a 	mov	r3,r2
 4000c50:	e0fff115 	stw	r3,-60(fp)
			tmp4 = dataptr[3] - dataptr[4];
 4000c54:	e0bfe917 	ldw	r2,-92(fp)
 4000c58:	10800304 	addi	r2,r2,12
 4000c5c:	10c00017 	ldw	r3,0(r2)
 4000c60:	e0bfe917 	ldw	r2,-92(fp)
 4000c64:	10800404 	addi	r2,r2,16
 4000c68:	11000017 	ldw	r4,0(r2)
 4000c6c:	200b883a 	mov	r5,r4
 4000c70:	1809883a 	mov	r4,r3
 4000c74:	40044200 	call	4004420 <__subsf3>
 4000c78:	1007883a 	mov	r3,r2
 4000c7c:	e0fff215 	stw	r3,-56(fp)

			/* Even part */

			tmp10 = tmp0 + tmp3;    /* phase 2 */
 4000c80:	e17ff117 	ldw	r5,-60(fp)
 4000c84:	e13feb17 	ldw	r4,-84(fp)
 4000c88:	400362c0 	call	400362c <__addsf3>
 4000c8c:	1007883a 	mov	r3,r2
 4000c90:	e0fff315 	stw	r3,-52(fp)
			tmp13 = tmp0 - tmp3;
 4000c94:	e17ff117 	ldw	r5,-60(fp)
 4000c98:	e13feb17 	ldw	r4,-84(fp)
 4000c9c:	40044200 	call	4004420 <__subsf3>
 4000ca0:	1007883a 	mov	r3,r2
 4000ca4:	e0fff415 	stw	r3,-48(fp)
			tmp11 = tmp1 + tmp2;
 4000ca8:	e17fef17 	ldw	r5,-68(fp)
 4000cac:	e13fed17 	ldw	r4,-76(fp)
 4000cb0:	400362c0 	call	400362c <__addsf3>
 4000cb4:	1007883a 	mov	r3,r2
 4000cb8:	e0fff515 	stw	r3,-44(fp)
			tmp12 = tmp1 - tmp2;
 4000cbc:	e17fef17 	ldw	r5,-68(fp)
 4000cc0:	e13fed17 	ldw	r4,-76(fp)
 4000cc4:	40044200 	call	4004420 <__subsf3>
 4000cc8:	1007883a 	mov	r3,r2
 4000ccc:	e0fff615 	stw	r3,-40(fp)

			dataptr[0] = tmp10 + tmp11; /* phase 3 */
 4000cd0:	e17ff517 	ldw	r5,-44(fp)
 4000cd4:	e13ff317 	ldw	r4,-52(fp)
 4000cd8:	400362c0 	call	400362c <__addsf3>
 4000cdc:	1009883a 	mov	r4,r2
 4000ce0:	2007883a 	mov	r3,r4
 4000ce4:	e0bfe917 	ldw	r2,-92(fp)
 4000ce8:	10c00015 	stw	r3,0(r2)
			dataptr[4] = tmp10 - tmp11;
 4000cec:	e0bfe917 	ldw	r2,-92(fp)
 4000cf0:	14000404 	addi	r16,r2,16
 4000cf4:	e17ff517 	ldw	r5,-44(fp)
 4000cf8:	e13ff317 	ldw	r4,-52(fp)
 4000cfc:	40044200 	call	4004420 <__subsf3>
 4000d00:	1007883a 	mov	r3,r2
 4000d04:	1805883a 	mov	r2,r3
 4000d08:	80800015 	stw	r2,0(r16)

			z1 = (tmp12 + tmp13) * ((float)0.707106781); /* c4 */
 4000d0c:	e17ff417 	ldw	r5,-48(fp)
 4000d10:	e13ff617 	ldw	r4,-40(fp)
 4000d14:	400362c0 	call	400362c <__addsf3>
 4000d18:	1007883a 	mov	r3,r2
 4000d1c:	1805883a 	mov	r2,r3
 4000d20:	014fcd74 	movhi	r5,16181
 4000d24:	29413cc4 	addi	r5,r5,1267
 4000d28:	1009883a 	mov	r4,r2
 4000d2c:	4003ff00 	call	4003ff0 <__mulsf3>
 4000d30:	1007883a 	mov	r3,r2
 4000d34:	e0fff715 	stw	r3,-36(fp)
			dataptr[2] = tmp13 + z1;    /* phase 5 */
 4000d38:	e0bfe917 	ldw	r2,-92(fp)
 4000d3c:	14000204 	addi	r16,r2,8
 4000d40:	e17ff717 	ldw	r5,-36(fp)
 4000d44:	e13ff417 	ldw	r4,-48(fp)
 4000d48:	400362c0 	call	400362c <__addsf3>
 4000d4c:	1007883a 	mov	r3,r2
 4000d50:	1805883a 	mov	r2,r3
 4000d54:	80800015 	stw	r2,0(r16)
			dataptr[6] = tmp13 - z1;
 4000d58:	e0bfe917 	ldw	r2,-92(fp)
 4000d5c:	14000604 	addi	r16,r2,24
 4000d60:	e17ff717 	ldw	r5,-36(fp)
 4000d64:	e13ff417 	ldw	r4,-48(fp)
 4000d68:	40044200 	call	4004420 <__subsf3>
 4000d6c:	1007883a 	mov	r3,r2
 4000d70:	1805883a 	mov	r2,r3
 4000d74:	80800015 	stw	r2,0(r16)

			/* Odd part */

			tmp10 = tmp4 + tmp5;    /* phase 2 */
 4000d78:	e17ff017 	ldw	r5,-64(fp)
 4000d7c:	e13ff217 	ldw	r4,-56(fp)
 4000d80:	400362c0 	call	400362c <__addsf3>
 4000d84:	1007883a 	mov	r3,r2
 4000d88:	e0fff315 	stw	r3,-52(fp)
			tmp11 = tmp5 + tmp6;
 4000d8c:	e17fee17 	ldw	r5,-72(fp)
 4000d90:	e13ff017 	ldw	r4,-64(fp)
 4000d94:	400362c0 	call	400362c <__addsf3>
 4000d98:	1007883a 	mov	r3,r2
 4000d9c:	e0fff515 	stw	r3,-44(fp)
			tmp12 = tmp6 + tmp7;
 4000da0:	e17fec17 	ldw	r5,-80(fp)
 4000da4:	e13fee17 	ldw	r4,-72(fp)
 4000da8:	400362c0 	call	400362c <__addsf3>
 4000dac:	1007883a 	mov	r3,r2
 4000db0:	e0fff615 	stw	r3,-40(fp)

			/* The rotator is modified from fig 4-8 to avoid extra negations. */
			z5 = (tmp10 - tmp12) * ((float)0.382683433); /* c6 */
 4000db4:	e17ff617 	ldw	r5,-40(fp)
 4000db8:	e13ff317 	ldw	r4,-52(fp)
 4000dbc:	40044200 	call	4004420 <__subsf3>
 4000dc0:	1007883a 	mov	r3,r2
 4000dc4:	1805883a 	mov	r2,r3
 4000dc8:	014fb134 	movhi	r5,16068
 4000dcc:	297bc544 	addi	r5,r5,-4331
 4000dd0:	1009883a 	mov	r4,r2
 4000dd4:	4003ff00 	call	4003ff0 <__mulsf3>
 4000dd8:	1007883a 	mov	r3,r2
 4000ddc:	e0fff815 	stw	r3,-32(fp)
			z2 = ((float)0.541196100) * tmp10 + z5; /* c2-c6 */
 4000de0:	014fc2f4 	movhi	r5,16139
 4000de4:	2962f504 	addi	r5,r5,-29740
 4000de8:	e13ff317 	ldw	r4,-52(fp)
 4000dec:	4003ff00 	call	4003ff0 <__mulsf3>
 4000df0:	1007883a 	mov	r3,r2
 4000df4:	1805883a 	mov	r2,r3
 4000df8:	e17ff817 	ldw	r5,-32(fp)
 4000dfc:	1009883a 	mov	r4,r2
 4000e00:	400362c0 	call	400362c <__addsf3>
 4000e04:	1007883a 	mov	r3,r2
 4000e08:	e0fff915 	stw	r3,-28(fp)
			z4 = ((float)1.306562965) * tmp12 + z5; /* c2+c6 */
 4000e0c:	014fe9f4 	movhi	r5,16295
 4000e10:	294f5d44 	addi	r5,r5,15733
 4000e14:	e13ff617 	ldw	r4,-40(fp)
 4000e18:	4003ff00 	call	4003ff0 <__mulsf3>
 4000e1c:	1007883a 	mov	r3,r2
 4000e20:	1805883a 	mov	r2,r3
 4000e24:	e17ff817 	ldw	r5,-32(fp)
 4000e28:	1009883a 	mov	r4,r2
 4000e2c:	400362c0 	call	400362c <__addsf3>
 4000e30:	1007883a 	mov	r3,r2
 4000e34:	e0fffa15 	stw	r3,-24(fp)
			z3 = tmp11 * ((float)0.707106781); /* c4 */
 4000e38:	014fcd74 	movhi	r5,16181
 4000e3c:	29413cc4 	addi	r5,r5,1267
 4000e40:	e13ff517 	ldw	r4,-44(fp)
 4000e44:	4003ff00 	call	4003ff0 <__mulsf3>
 4000e48:	1007883a 	mov	r3,r2
 4000e4c:	e0fffb15 	stw	r3,-20(fp)

			z11 = tmp7 + z3;        /* phase 5 */
 4000e50:	e17ffb17 	ldw	r5,-20(fp)
 4000e54:	e13fec17 	ldw	r4,-80(fp)
 4000e58:	400362c0 	call	400362c <__addsf3>
 4000e5c:	1007883a 	mov	r3,r2
 4000e60:	e0fffc15 	stw	r3,-16(fp)
			z13 = tmp7 - z3;
 4000e64:	e17ffb17 	ldw	r5,-20(fp)
 4000e68:	e13fec17 	ldw	r4,-80(fp)
 4000e6c:	40044200 	call	4004420 <__subsf3>
 4000e70:	1007883a 	mov	r3,r2
 4000e74:	e0fffd15 	stw	r3,-12(fp)

			dataptr[5] = z13 + z2;  /* phase 6 */
 4000e78:	e0bfe917 	ldw	r2,-92(fp)
 4000e7c:	14000504 	addi	r16,r2,20
 4000e80:	e17ff917 	ldw	r5,-28(fp)
 4000e84:	e13ffd17 	ldw	r4,-12(fp)
 4000e88:	400362c0 	call	400362c <__addsf3>
 4000e8c:	1007883a 	mov	r3,r2
 4000e90:	1805883a 	mov	r2,r3
 4000e94:	80800015 	stw	r2,0(r16)
			dataptr[3] = z13 - z2;
 4000e98:	e0bfe917 	ldw	r2,-92(fp)
 4000e9c:	14000304 	addi	r16,r2,12
 4000ea0:	e17ff917 	ldw	r5,-28(fp)
 4000ea4:	e13ffd17 	ldw	r4,-12(fp)
 4000ea8:	40044200 	call	4004420 <__subsf3>
 4000eac:	1007883a 	mov	r3,r2
 4000eb0:	1805883a 	mov	r2,r3
 4000eb4:	80800015 	stw	r2,0(r16)
			dataptr[1] = z11 + z4;
 4000eb8:	e0bfe917 	ldw	r2,-92(fp)
 4000ebc:	14000104 	addi	r16,r2,4
 4000ec0:	e17ffa17 	ldw	r5,-24(fp)
 4000ec4:	e13ffc17 	ldw	r4,-16(fp)
 4000ec8:	400362c0 	call	400362c <__addsf3>
 4000ecc:	1007883a 	mov	r3,r2
 4000ed0:	1805883a 	mov	r2,r3
 4000ed4:	80800015 	stw	r2,0(r16)
			dataptr[7] = z11 - z4;
 4000ed8:	e0bfe917 	ldw	r2,-92(fp)
 4000edc:	14000704 	addi	r16,r2,28
 4000ee0:	e17ffa17 	ldw	r5,-24(fp)
 4000ee4:	e13ffc17 	ldw	r4,-16(fp)
 4000ee8:	40044200 	call	4004420 <__subsf3>
 4000eec:	1007883a 	mov	r3,r2
 4000ef0:	1805883a 	mov	r2,r3
 4000ef4:	80800015 	stw	r2,0(r16)

			dataptr += 8;     /* advance pointer to next row */
 4000ef8:	e0bfe917 	ldw	r2,-92(fp)
 4000efc:	10800804 	addi	r2,r2,32
 4000f00:	e0bfe915 	stw	r2,-92(fp)
		int ctr;

		/* Pass 1: process rows. */

		dataptr = data;
		for (ctr = 7; ctr >= 0; ctr--) {
 4000f04:	e0bfea17 	ldw	r2,-88(fp)
 4000f08:	10bfffc4 	addi	r2,r2,-1
 4000f0c:	e0bfea15 	stw	r2,-88(fp)
 4000f10:	e0bfea17 	ldw	r2,-88(fp)
 4000f14:	103f040e 	bge	r2,zero,4000b28 <__alt_data_end+0xfc000b28>
			dataptr += 8;     /* advance pointer to next row */
		}

		/* Pass 2: process columns. */

		dataptr = data;
 4000f18:	e0bffe17 	ldw	r2,-8(fp)
 4000f1c:	e0bfe915 	stw	r2,-92(fp)
		for (ctr = 8 - 1; ctr >= 0; ctr--) {
 4000f20:	008001c4 	movi	r2,7
 4000f24:	e0bfea15 	stw	r2,-88(fp)
 4000f28:	0000fa06 	br	4001314 <tjei_fdct+0x818>
			tmp0 = dataptr[8 * 0] + dataptr[8 * 7];
 4000f2c:	e0bfe917 	ldw	r2,-92(fp)
 4000f30:	10c00017 	ldw	r3,0(r2)
 4000f34:	e0bfe917 	ldw	r2,-92(fp)
 4000f38:	10803804 	addi	r2,r2,224
 4000f3c:	11000017 	ldw	r4,0(r2)
 4000f40:	200b883a 	mov	r5,r4
 4000f44:	1809883a 	mov	r4,r3
 4000f48:	400362c0 	call	400362c <__addsf3>
 4000f4c:	1007883a 	mov	r3,r2
 4000f50:	e0ffeb15 	stw	r3,-84(fp)
			tmp7 = dataptr[8 * 0] - dataptr[8 * 7];
 4000f54:	e0bfe917 	ldw	r2,-92(fp)
 4000f58:	10c00017 	ldw	r3,0(r2)
 4000f5c:	e0bfe917 	ldw	r2,-92(fp)
 4000f60:	10803804 	addi	r2,r2,224
 4000f64:	11000017 	ldw	r4,0(r2)
 4000f68:	200b883a 	mov	r5,r4
 4000f6c:	1809883a 	mov	r4,r3
 4000f70:	40044200 	call	4004420 <__subsf3>
 4000f74:	1007883a 	mov	r3,r2
 4000f78:	e0ffec15 	stw	r3,-80(fp)
			tmp1 = dataptr[8 * 1] + dataptr[8 * 6];
 4000f7c:	e0bfe917 	ldw	r2,-92(fp)
 4000f80:	10800804 	addi	r2,r2,32
 4000f84:	10c00017 	ldw	r3,0(r2)
 4000f88:	e0bfe917 	ldw	r2,-92(fp)
 4000f8c:	10803004 	addi	r2,r2,192
 4000f90:	11000017 	ldw	r4,0(r2)
 4000f94:	200b883a 	mov	r5,r4
 4000f98:	1809883a 	mov	r4,r3
 4000f9c:	400362c0 	call	400362c <__addsf3>
 4000fa0:	1007883a 	mov	r3,r2
 4000fa4:	e0ffed15 	stw	r3,-76(fp)
			tmp6 = dataptr[8 * 1] - dataptr[8 * 6];
 4000fa8:	e0bfe917 	ldw	r2,-92(fp)
 4000fac:	10800804 	addi	r2,r2,32
 4000fb0:	10c00017 	ldw	r3,0(r2)
 4000fb4:	e0bfe917 	ldw	r2,-92(fp)
 4000fb8:	10803004 	addi	r2,r2,192
 4000fbc:	11000017 	ldw	r4,0(r2)
 4000fc0:	200b883a 	mov	r5,r4
 4000fc4:	1809883a 	mov	r4,r3
 4000fc8:	40044200 	call	4004420 <__subsf3>
 4000fcc:	1007883a 	mov	r3,r2
 4000fd0:	e0ffee15 	stw	r3,-72(fp)
			tmp2 = dataptr[8 * 2] + dataptr[8 * 5];
 4000fd4:	e0bfe917 	ldw	r2,-92(fp)
 4000fd8:	10801004 	addi	r2,r2,64
 4000fdc:	10c00017 	ldw	r3,0(r2)
 4000fe0:	e0bfe917 	ldw	r2,-92(fp)
 4000fe4:	10802804 	addi	r2,r2,160
 4000fe8:	11000017 	ldw	r4,0(r2)
 4000fec:	200b883a 	mov	r5,r4
 4000ff0:	1809883a 	mov	r4,r3
 4000ff4:	400362c0 	call	400362c <__addsf3>
 4000ff8:	1007883a 	mov	r3,r2
 4000ffc:	e0ffef15 	stw	r3,-68(fp)
			tmp5 = dataptr[8 * 2] - dataptr[8 * 5];
 4001000:	e0bfe917 	ldw	r2,-92(fp)
 4001004:	10801004 	addi	r2,r2,64
 4001008:	10c00017 	ldw	r3,0(r2)
 400100c:	e0bfe917 	ldw	r2,-92(fp)
 4001010:	10802804 	addi	r2,r2,160
 4001014:	11000017 	ldw	r4,0(r2)
 4001018:	200b883a 	mov	r5,r4
 400101c:	1809883a 	mov	r4,r3
 4001020:	40044200 	call	4004420 <__subsf3>
 4001024:	1007883a 	mov	r3,r2
 4001028:	e0fff015 	stw	r3,-64(fp)
			tmp3 = dataptr[8 * 3] + dataptr[8 * 4];
 400102c:	e0bfe917 	ldw	r2,-92(fp)
 4001030:	10801804 	addi	r2,r2,96
 4001034:	10c00017 	ldw	r3,0(r2)
 4001038:	e0bfe917 	ldw	r2,-92(fp)
 400103c:	10802004 	addi	r2,r2,128
 4001040:	11000017 	ldw	r4,0(r2)
 4001044:	200b883a 	mov	r5,r4
 4001048:	1809883a 	mov	r4,r3
 400104c:	400362c0 	call	400362c <__addsf3>
 4001050:	1007883a 	mov	r3,r2
 4001054:	e0fff115 	stw	r3,-60(fp)
			tmp4 = dataptr[8 * 3] - dataptr[8 * 4];
 4001058:	e0bfe917 	ldw	r2,-92(fp)
 400105c:	10801804 	addi	r2,r2,96
 4001060:	10c00017 	ldw	r3,0(r2)
 4001064:	e0bfe917 	ldw	r2,-92(fp)
 4001068:	10802004 	addi	r2,r2,128
 400106c:	11000017 	ldw	r4,0(r2)
 4001070:	200b883a 	mov	r5,r4
 4001074:	1809883a 	mov	r4,r3
 4001078:	40044200 	call	4004420 <__subsf3>
 400107c:	1007883a 	mov	r3,r2
 4001080:	e0fff215 	stw	r3,-56(fp)

			/* Even part */

			tmp10 = tmp0 + tmp3;    /* phase 2 */
 4001084:	e17ff117 	ldw	r5,-60(fp)
 4001088:	e13feb17 	ldw	r4,-84(fp)
 400108c:	400362c0 	call	400362c <__addsf3>
 4001090:	1007883a 	mov	r3,r2
 4001094:	e0fff315 	stw	r3,-52(fp)
			tmp13 = tmp0 - tmp3;
 4001098:	e17ff117 	ldw	r5,-60(fp)
 400109c:	e13feb17 	ldw	r4,-84(fp)
 40010a0:	40044200 	call	4004420 <__subsf3>
 40010a4:	1007883a 	mov	r3,r2
 40010a8:	e0fff415 	stw	r3,-48(fp)
			tmp11 = tmp1 + tmp2;
 40010ac:	e17fef17 	ldw	r5,-68(fp)
 40010b0:	e13fed17 	ldw	r4,-76(fp)
 40010b4:	400362c0 	call	400362c <__addsf3>
 40010b8:	1007883a 	mov	r3,r2
 40010bc:	e0fff515 	stw	r3,-44(fp)
			tmp12 = tmp1 - tmp2;
 40010c0:	e17fef17 	ldw	r5,-68(fp)
 40010c4:	e13fed17 	ldw	r4,-76(fp)
 40010c8:	40044200 	call	4004420 <__subsf3>
 40010cc:	1007883a 	mov	r3,r2
 40010d0:	e0fff615 	stw	r3,-40(fp)

			dataptr[8 * 0] = tmp10 + tmp11; /* phase 3 */
 40010d4:	e17ff517 	ldw	r5,-44(fp)
 40010d8:	e13ff317 	ldw	r4,-52(fp)
 40010dc:	400362c0 	call	400362c <__addsf3>
 40010e0:	1009883a 	mov	r4,r2
 40010e4:	2007883a 	mov	r3,r4
 40010e8:	e0bfe917 	ldw	r2,-92(fp)
 40010ec:	10c00015 	stw	r3,0(r2)
			dataptr[8 * 4] = tmp10 - tmp11;
 40010f0:	e0bfe917 	ldw	r2,-92(fp)
 40010f4:	14002004 	addi	r16,r2,128
 40010f8:	e17ff517 	ldw	r5,-44(fp)
 40010fc:	e13ff317 	ldw	r4,-52(fp)
 4001100:	40044200 	call	4004420 <__subsf3>
 4001104:	1007883a 	mov	r3,r2
 4001108:	1805883a 	mov	r2,r3
 400110c:	80800015 	stw	r2,0(r16)

			z1 = (tmp12 + tmp13) * ((float)0.707106781); /* c4 */
 4001110:	e17ff417 	ldw	r5,-48(fp)
 4001114:	e13ff617 	ldw	r4,-40(fp)
 4001118:	400362c0 	call	400362c <__addsf3>
 400111c:	1007883a 	mov	r3,r2
 4001120:	1805883a 	mov	r2,r3
 4001124:	014fcd74 	movhi	r5,16181
 4001128:	29413cc4 	addi	r5,r5,1267
 400112c:	1009883a 	mov	r4,r2
 4001130:	4003ff00 	call	4003ff0 <__mulsf3>
 4001134:	1007883a 	mov	r3,r2
 4001138:	e0fff715 	stw	r3,-36(fp)
			dataptr[8 * 2] = tmp13 + z1; /* phase 5 */
 400113c:	e0bfe917 	ldw	r2,-92(fp)
 4001140:	14001004 	addi	r16,r2,64
 4001144:	e17ff717 	ldw	r5,-36(fp)
 4001148:	e13ff417 	ldw	r4,-48(fp)
 400114c:	400362c0 	call	400362c <__addsf3>
 4001150:	1007883a 	mov	r3,r2
 4001154:	1805883a 	mov	r2,r3
 4001158:	80800015 	stw	r2,0(r16)
			dataptr[8 * 6] = tmp13 - z1;
 400115c:	e0bfe917 	ldw	r2,-92(fp)
 4001160:	14003004 	addi	r16,r2,192
 4001164:	e17ff717 	ldw	r5,-36(fp)
 4001168:	e13ff417 	ldw	r4,-48(fp)
 400116c:	40044200 	call	4004420 <__subsf3>
 4001170:	1007883a 	mov	r3,r2
 4001174:	1805883a 	mov	r2,r3
 4001178:	80800015 	stw	r2,0(r16)

			/* Odd part */

			tmp10 = tmp4 + tmp5;    /* phase 2 */
 400117c:	e17ff017 	ldw	r5,-64(fp)
 4001180:	e13ff217 	ldw	r4,-56(fp)
 4001184:	400362c0 	call	400362c <__addsf3>
 4001188:	1007883a 	mov	r3,r2
 400118c:	e0fff315 	stw	r3,-52(fp)
			tmp11 = tmp5 + tmp6;
 4001190:	e17fee17 	ldw	r5,-72(fp)
 4001194:	e13ff017 	ldw	r4,-64(fp)
 4001198:	400362c0 	call	400362c <__addsf3>
 400119c:	1007883a 	mov	r3,r2
 40011a0:	e0fff515 	stw	r3,-44(fp)
			tmp12 = tmp6 + tmp7;
 40011a4:	e17fec17 	ldw	r5,-80(fp)
 40011a8:	e13fee17 	ldw	r4,-72(fp)
 40011ac:	400362c0 	call	400362c <__addsf3>
 40011b0:	1007883a 	mov	r3,r2
 40011b4:	e0fff615 	stw	r3,-40(fp)

			/* The rotator is modified from fig 4-8 to avoid extra negations. */
			z5 = (tmp10 - tmp12) * ((float)0.382683433); /* c6 */
 40011b8:	e17ff617 	ldw	r5,-40(fp)
 40011bc:	e13ff317 	ldw	r4,-52(fp)
 40011c0:	40044200 	call	4004420 <__subsf3>
 40011c4:	1007883a 	mov	r3,r2
 40011c8:	1805883a 	mov	r2,r3
 40011cc:	014fb134 	movhi	r5,16068
 40011d0:	297bc544 	addi	r5,r5,-4331
 40011d4:	1009883a 	mov	r4,r2
 40011d8:	4003ff00 	call	4003ff0 <__mulsf3>
 40011dc:	1007883a 	mov	r3,r2
 40011e0:	e0fff815 	stw	r3,-32(fp)
			z2 = ((float)0.541196100) * tmp10 + z5; /* c2-c6 */
 40011e4:	014fc2f4 	movhi	r5,16139
 40011e8:	2962f504 	addi	r5,r5,-29740
 40011ec:	e13ff317 	ldw	r4,-52(fp)
 40011f0:	4003ff00 	call	4003ff0 <__mulsf3>
 40011f4:	1007883a 	mov	r3,r2
 40011f8:	1805883a 	mov	r2,r3
 40011fc:	e17ff817 	ldw	r5,-32(fp)
 4001200:	1009883a 	mov	r4,r2
 4001204:	400362c0 	call	400362c <__addsf3>
 4001208:	1007883a 	mov	r3,r2
 400120c:	e0fff915 	stw	r3,-28(fp)
			z4 = ((float)1.306562965) * tmp12 + z5; /* c2+c6 */
 4001210:	014fe9f4 	movhi	r5,16295
 4001214:	294f5d44 	addi	r5,r5,15733
 4001218:	e13ff617 	ldw	r4,-40(fp)
 400121c:	4003ff00 	call	4003ff0 <__mulsf3>
 4001220:	1007883a 	mov	r3,r2
 4001224:	1805883a 	mov	r2,r3
 4001228:	e17ff817 	ldw	r5,-32(fp)
 400122c:	1009883a 	mov	r4,r2
 4001230:	400362c0 	call	400362c <__addsf3>
 4001234:	1007883a 	mov	r3,r2
 4001238:	e0fffa15 	stw	r3,-24(fp)
			z3 = tmp11 * ((float)0.707106781); /* c4 */
 400123c:	014fcd74 	movhi	r5,16181
 4001240:	29413cc4 	addi	r5,r5,1267
 4001244:	e13ff517 	ldw	r4,-44(fp)
 4001248:	4003ff00 	call	4003ff0 <__mulsf3>
 400124c:	1007883a 	mov	r3,r2
 4001250:	e0fffb15 	stw	r3,-20(fp)

			z11 = tmp7 + z3;        /* phase 5 */
 4001254:	e17ffb17 	ldw	r5,-20(fp)
 4001258:	e13fec17 	ldw	r4,-80(fp)
 400125c:	400362c0 	call	400362c <__addsf3>
 4001260:	1007883a 	mov	r3,r2
 4001264:	e0fffc15 	stw	r3,-16(fp)
			z13 = tmp7 - z3;
 4001268:	e17ffb17 	ldw	r5,-20(fp)
 400126c:	e13fec17 	ldw	r4,-80(fp)
 4001270:	40044200 	call	4004420 <__subsf3>
 4001274:	1007883a 	mov	r3,r2
 4001278:	e0fffd15 	stw	r3,-12(fp)

			dataptr[8 * 5] = z13 + z2; /* phase 6 */
 400127c:	e0bfe917 	ldw	r2,-92(fp)
 4001280:	14002804 	addi	r16,r2,160
 4001284:	e17ff917 	ldw	r5,-28(fp)
 4001288:	e13ffd17 	ldw	r4,-12(fp)
 400128c:	400362c0 	call	400362c <__addsf3>
 4001290:	1007883a 	mov	r3,r2
 4001294:	1805883a 	mov	r2,r3
 4001298:	80800015 	stw	r2,0(r16)
			dataptr[8 * 3] = z13 - z2;
 400129c:	e0bfe917 	ldw	r2,-92(fp)
 40012a0:	14001804 	addi	r16,r2,96
 40012a4:	e17ff917 	ldw	r5,-28(fp)
 40012a8:	e13ffd17 	ldw	r4,-12(fp)
 40012ac:	40044200 	call	4004420 <__subsf3>
 40012b0:	1007883a 	mov	r3,r2
 40012b4:	1805883a 	mov	r2,r3
 40012b8:	80800015 	stw	r2,0(r16)
			dataptr[8 * 1] = z11 + z4;
 40012bc:	e0bfe917 	ldw	r2,-92(fp)
 40012c0:	14000804 	addi	r16,r2,32
 40012c4:	e17ffa17 	ldw	r5,-24(fp)
 40012c8:	e13ffc17 	ldw	r4,-16(fp)
 40012cc:	400362c0 	call	400362c <__addsf3>
 40012d0:	1007883a 	mov	r3,r2
 40012d4:	1805883a 	mov	r2,r3
 40012d8:	80800015 	stw	r2,0(r16)
			dataptr[8 * 7] = z11 - z4;
 40012dc:	e0bfe917 	ldw	r2,-92(fp)
 40012e0:	14003804 	addi	r16,r2,224
 40012e4:	e17ffa17 	ldw	r5,-24(fp)
 40012e8:	e13ffc17 	ldw	r4,-16(fp)
 40012ec:	40044200 	call	4004420 <__subsf3>
 40012f0:	1007883a 	mov	r3,r2
 40012f4:	1805883a 	mov	r2,r3
 40012f8:	80800015 	stw	r2,0(r16)

			dataptr++;          /* advance pointer to next column */
 40012fc:	e0bfe917 	ldw	r2,-92(fp)
 4001300:	10800104 	addi	r2,r2,4
 4001304:	e0bfe915 	stw	r2,-92(fp)
		}

		/* Pass 2: process columns. */

		dataptr = data;
		for (ctr = 8 - 1; ctr >= 0; ctr--) {
 4001308:	e0bfea17 	ldw	r2,-88(fp)
 400130c:	10bfffc4 	addi	r2,r2,-1
 4001310:	e0bfea15 	stw	r2,-88(fp)
 4001314:	e0bfea17 	ldw	r2,-88(fp)
 4001318:	103f040e 	bge	r2,zero,4000f2c <__alt_data_end+0xfc000f2c>
			dataptr[8 * 1] = z11 + z4;
			dataptr[8 * 7] = z11 - z4;

			dataptr++;          /* advance pointer to next column */
		}
	}
 400131c:	0001883a 	nop
 4001320:	e6ffff04 	addi	sp,fp,-4
 4001324:	dfc00217 	ldw	ra,8(sp)
 4001328:	df000117 	ldw	fp,4(sp)
 400132c:	dc000017 	ldw	r16,0(sp)
 4001330:	dec00304 	addi	sp,sp,12
 4001334:	f800283a 	ret

04001338 <tjei_encode_and_write_MCU>:
		uint8_t* huff_dc_len, uint16_t* huff_dc_code, // Huffman tables
		uint8_t* huff_ac_len, uint16_t* huff_ac_code,
		int* pred,  // Previous DC coefficient
		uint32_t* bitbuffer,  // Bitstack.
		uint32_t* location)
	{
 4001338:	deff6f04 	addi	sp,sp,-580
 400133c:	dfc09015 	stw	ra,576(sp)
 4001340:	df008f15 	stw	fp,572(sp)
 4001344:	df008f04 	addi	fp,sp,572
 4001348:	e13ffc15 	stw	r4,-16(fp)
 400134c:	e17ffd15 	stw	r5,-12(fp)
 4001350:	e1bffe15 	stw	r6,-8(fp)
 4001354:	e1ffff15 	stw	r7,-4(fp)
		int du[64];  // Data unit in zig-zag order

		float dct_mcu[64];
		memcpy(dct_mcu, mcu, 64 * sizeof(float));
 4001358:	e0bfbb04 	addi	r2,fp,-276
 400135c:	01804004 	movi	r6,256
 4001360:	e17ffd17 	ldw	r5,-12(fp)
 4001364:	1009883a 	mov	r4,r2
 4001368:	4004bd40 	call	4004bd4 <memcpy>

#if TJE_USE_FAST_DCT
		tjei_fdct(dct_mcu);
 400136c:	e0bfbb04 	addi	r2,fp,-276
 4001370:	1009883a 	mov	r4,r2
 4001374:	4000afc0 	call	4000afc <tjei_fdct>
		for (int i = 0; i < 64; ++i) {
 4001378:	e03f7215 	stw	zero,-568(fp)
 400137c:	00003906 	br	4001464 <tjei_encode_and_write_MCU+0x12c>
			float fval = dct_mcu[i];
 4001380:	e0bf7217 	ldw	r2,-568(fp)
 4001384:	1085883a 	add	r2,r2,r2
 4001388:	1085883a 	add	r2,r2,r2
 400138c:	e0ff7204 	addi	r3,fp,-568
 4001390:	1885883a 	add	r2,r3,r2
 4001394:	10804904 	addi	r2,r2,292
 4001398:	10800017 	ldw	r2,0(r2)
 400139c:	e0bf7715 	stw	r2,-548(fp)
			fval *= qt[i];
 40013a0:	e0bf7217 	ldw	r2,-568(fp)
 40013a4:	1085883a 	add	r2,r2,r2
 40013a8:	1085883a 	add	r2,r2,r2
 40013ac:	1007883a 	mov	r3,r2
 40013b0:	e0bffe17 	ldw	r2,-8(fp)
 40013b4:	10c5883a 	add	r2,r2,r3
 40013b8:	10c00017 	ldw	r3,0(r2)
 40013bc:	180b883a 	mov	r5,r3
 40013c0:	e13f7717 	ldw	r4,-548(fp)
 40013c4:	4003ff00 	call	4003ff0 <__mulsf3>
 40013c8:	1007883a 	mov	r3,r2
 40013cc:	e0ff7715 	stw	r3,-548(fp)
#if 0
			fval = (fval > 0) ? floorf(fval + 0.5f) : ceilf(fval - 0.5f);
#else
			fval = floorf(fval + 1024 + 0.5f);
 40013d0:	01512034 	movhi	r5,17536
 40013d4:	e13f7717 	ldw	r4,-548(fp)
 40013d8:	400362c0 	call	400362c <__addsf3>
 40013dc:	1007883a 	mov	r3,r2
 40013e0:	1805883a 	mov	r2,r3
 40013e4:	014fc034 	movhi	r5,16128
 40013e8:	1009883a 	mov	r4,r2
 40013ec:	400362c0 	call	400362c <__addsf3>
 40013f0:	1007883a 	mov	r3,r2
 40013f4:	1805883a 	mov	r2,r3
 40013f8:	1009883a 	mov	r4,r2
 40013fc:	400334c0 	call	400334c <floorf>
 4001400:	e0bf7715 	stw	r2,-548(fp)
			fval -= 1024;
 4001404:	01512034 	movhi	r5,17536
 4001408:	e13f7717 	ldw	r4,-548(fp)
 400140c:	40044200 	call	4004420 <__subsf3>
 4001410:	1007883a 	mov	r3,r2
 4001414:	e0ff7715 	stw	r3,-548(fp)
#endif
			int val = (int)fval;
 4001418:	e13f7717 	ldw	r4,-548(fp)
 400141c:	40049040 	call	4004904 <__fixsfsi>
 4001420:	e0bf7815 	stw	r2,-544(fp)
			du[tjei_zig_zag[i]] = val;
 4001424:	00810074 	movhi	r2,1025
 4001428:	10b49c04 	addi	r2,r2,-11664
 400142c:	e0ff7217 	ldw	r3,-568(fp)
 4001430:	10c5883a 	add	r2,r2,r3
 4001434:	10800003 	ldbu	r2,0(r2)
 4001438:	10803fcc 	andi	r2,r2,255
 400143c:	1085883a 	add	r2,r2,r2
 4001440:	1085883a 	add	r2,r2,r2
 4001444:	e0ff7204 	addi	r3,fp,-568
 4001448:	1885883a 	add	r2,r3,r2
 400144c:	10800904 	addi	r2,r2,36
 4001450:	e0ff7817 	ldw	r3,-544(fp)
 4001454:	10c00015 	stw	r3,0(r2)
		float dct_mcu[64];
		memcpy(dct_mcu, mcu, 64 * sizeof(float));

#if TJE_USE_FAST_DCT
		tjei_fdct(dct_mcu);
		for (int i = 0; i < 64; ++i) {
 4001458:	e0bf7217 	ldw	r2,-568(fp)
 400145c:	10800044 	addi	r2,r2,1
 4001460:	e0bf7215 	stw	r2,-568(fp)
 4001464:	e0bf7217 	ldw	r2,-568(fp)
 4001468:	10801010 	cmplti	r2,r2,64
 400146c:	103fc41e 	bne	r2,zero,4001380 <__alt_data_end+0xfc001380>
#endif

		uint16_t vli[2];

		// Encode DC coefficient.
		int diff = du[0] - *pred;
 4001470:	e0ff7b17 	ldw	r3,-532(fp)
 4001474:	e0800517 	ldw	r2,20(fp)
 4001478:	10800017 	ldw	r2,0(r2)
 400147c:	1885c83a 	sub	r2,r3,r2
 4001480:	e0bf7915 	stw	r2,-540(fp)
		*pred = du[0];
 4001484:	e0ff7b17 	ldw	r3,-532(fp)
 4001488:	e0800517 	ldw	r2,20(fp)
 400148c:	10c00015 	stw	r3,0(r2)
		if (diff != 0) {
 4001490:	e0bf7917 	ldw	r2,-540(fp)
 4001494:	10002326 	beq	r2,zero,4001524 <tjei_encode_and_write_MCU+0x1ec>
			tjei_calculate_variable_length_int(diff, vli);
 4001498:	e0bffb04 	addi	r2,fp,-20
 400149c:	100b883a 	mov	r5,r2
 40014a0:	e13f7917 	ldw	r4,-540(fp)
 40014a4:	40009200 	call	4000920 <tjei_calculate_variable_length_int>
			// Write number of bits with Huffman coding
			tjei_write_bits(state, bitbuffer, location, huff_dc_len[vli[1]], huff_dc_code[vli[1]]);
 40014a8:	e0bffb8b 	ldhu	r2,-18(fp)
 40014ac:	10bfffcc 	andi	r2,r2,65535
 40014b0:	e0ffff17 	ldw	r3,-4(fp)
 40014b4:	1885883a 	add	r2,r3,r2
 40014b8:	10800003 	ldbu	r2,0(r2)
 40014bc:	10c03fcc 	andi	r3,r2,255
 40014c0:	e0bffb8b 	ldhu	r2,-18(fp)
 40014c4:	10bfffcc 	andi	r2,r2,65535
 40014c8:	1085883a 	add	r2,r2,r2
 40014cc:	1009883a 	mov	r4,r2
 40014d0:	e0800217 	ldw	r2,8(fp)
 40014d4:	1105883a 	add	r2,r2,r4
 40014d8:	1080000b 	ldhu	r2,0(r2)
 40014dc:	10bfffcc 	andi	r2,r2,65535
 40014e0:	d8800015 	stw	r2,0(sp)
 40014e4:	180f883a 	mov	r7,r3
 40014e8:	e1800717 	ldw	r6,28(fp)
 40014ec:	e1400617 	ldw	r5,24(fp)
 40014f0:	e13ffc17 	ldw	r4,-16(fp)
 40014f4:	40009e00 	call	40009e0 <tjei_write_bits>
			// Write the bits.
			tjei_write_bits(state, bitbuffer, location, vli[1], vli[0]);
 40014f8:	e0bffb8b 	ldhu	r2,-18(fp)
 40014fc:	10ffffcc 	andi	r3,r2,65535
 4001500:	e0bffb0b 	ldhu	r2,-20(fp)
 4001504:	10bfffcc 	andi	r2,r2,65535
 4001508:	d8800015 	stw	r2,0(sp)
 400150c:	180f883a 	mov	r7,r3
 4001510:	e1800717 	ldw	r6,28(fp)
 4001514:	e1400617 	ldw	r5,24(fp)
 4001518:	e13ffc17 	ldw	r4,-16(fp)
 400151c:	40009e00 	call	40009e0 <tjei_write_bits>
 4001520:	00000c06 	br	4001554 <tjei_encode_and_write_MCU+0x21c>
		}
		else {
			tjei_write_bits(state, bitbuffer, location, huff_dc_len[0], huff_dc_code[0]);
 4001524:	e0bfff17 	ldw	r2,-4(fp)
 4001528:	10800003 	ldbu	r2,0(r2)
 400152c:	10c03fcc 	andi	r3,r2,255
 4001530:	e0800217 	ldw	r2,8(fp)
 4001534:	1080000b 	ldhu	r2,0(r2)
 4001538:	10bfffcc 	andi	r2,r2,65535
 400153c:	d8800015 	stw	r2,0(sp)
 4001540:	180f883a 	mov	r7,r3
 4001544:	e1800717 	ldw	r6,28(fp)
 4001548:	e1400617 	ldw	r5,24(fp)
 400154c:	e13ffc17 	ldw	r4,-16(fp)
 4001550:	40009e00 	call	40009e0 <tjei_write_bits>
		}

		// ==== Encode AC coefficients ====

		int last_non_zero_i = 0;
 4001554:	e03f7315 	stw	zero,-564(fp)
		// Find the last non-zero element.
		for (int i = 63; i > 0; --i) {
 4001558:	00800fc4 	movi	r2,63
 400155c:	e0bf7415 	stw	r2,-560(fp)
 4001560:	00000e06 	br	400159c <tjei_encode_and_write_MCU+0x264>
			if (du[i] != 0) {
 4001564:	e0bf7417 	ldw	r2,-560(fp)
 4001568:	1085883a 	add	r2,r2,r2
 400156c:	1085883a 	add	r2,r2,r2
 4001570:	e0ff7204 	addi	r3,fp,-568
 4001574:	1885883a 	add	r2,r3,r2
 4001578:	10800904 	addi	r2,r2,36
 400157c:	10800017 	ldw	r2,0(r2)
 4001580:	10000326 	beq	r2,zero,4001590 <tjei_encode_and_write_MCU+0x258>
				last_non_zero_i = i;
 4001584:	e0bf7417 	ldw	r2,-560(fp)
 4001588:	e0bf7315 	stw	r2,-564(fp)
				break;
 400158c:	00000506 	br	40015a4 <tjei_encode_and_write_MCU+0x26c>

		// ==== Encode AC coefficients ====

		int last_non_zero_i = 0;
		// Find the last non-zero element.
		for (int i = 63; i > 0; --i) {
 4001590:	e0bf7417 	ldw	r2,-560(fp)
 4001594:	10bfffc4 	addi	r2,r2,-1
 4001598:	e0bf7415 	stw	r2,-560(fp)
 400159c:	e0bf7417 	ldw	r2,-560(fp)
 40015a0:	00bff016 	blt	zero,r2,4001564 <__alt_data_end+0xfc001564>
				last_non_zero_i = i;
				break;
			}
		}

		for (int i = 1; i <= last_non_zero_i; ++i) {
 40015a4:	00800044 	movi	r2,1
 40015a8:	e0bf7515 	stw	r2,-556(fp)
 40015ac:	00007706 	br	400178c <tjei_encode_and_write_MCU+0x454>
			// If zero, increase count. If >=15, encode (FF,00)
			int zero_count = 0;
 40015b0:	e03f7615 	stw	zero,-552(fp)
			while (du[i] == 0) {
 40015b4:	00001806 	br	4001618 <tjei_encode_and_write_MCU+0x2e0>
				++zero_count;
 40015b8:	e0bf7617 	ldw	r2,-552(fp)
 40015bc:	10800044 	addi	r2,r2,1
 40015c0:	e0bf7615 	stw	r2,-552(fp)
				++i;
 40015c4:	e0bf7517 	ldw	r2,-556(fp)
 40015c8:	10800044 	addi	r2,r2,1
 40015cc:	e0bf7515 	stw	r2,-556(fp)
				if (zero_count == 16) {
 40015d0:	e0bf7617 	ldw	r2,-552(fp)
 40015d4:	10800418 	cmpnei	r2,r2,16
 40015d8:	10000f1e 	bne	r2,zero,4001618 <tjei_encode_and_write_MCU+0x2e0>
					// encode (ff,00) == 0xf0
					tjei_write_bits(state, bitbuffer, location, huff_ac_len[0xf0], huff_ac_code[0xf0]);
 40015dc:	e0800317 	ldw	r2,12(fp)
 40015e0:	10803c04 	addi	r2,r2,240
 40015e4:	10800003 	ldbu	r2,0(r2)
 40015e8:	10c03fcc 	andi	r3,r2,255
 40015ec:	e0800417 	ldw	r2,16(fp)
 40015f0:	10807804 	addi	r2,r2,480
 40015f4:	1080000b 	ldhu	r2,0(r2)
 40015f8:	10bfffcc 	andi	r2,r2,65535
 40015fc:	d8800015 	stw	r2,0(sp)
 4001600:	180f883a 	mov	r7,r3
 4001604:	e1800717 	ldw	r6,28(fp)
 4001608:	e1400617 	ldw	r5,24(fp)
 400160c:	e13ffc17 	ldw	r4,-16(fp)
 4001610:	40009e00 	call	40009e0 <tjei_write_bits>
					zero_count = 0;
 4001614:	e03f7615 	stw	zero,-552(fp)
		}

		for (int i = 1; i <= last_non_zero_i; ++i) {
			// If zero, increase count. If >=15, encode (FF,00)
			int zero_count = 0;
			while (du[i] == 0) {
 4001618:	e0bf7517 	ldw	r2,-556(fp)
 400161c:	1085883a 	add	r2,r2,r2
 4001620:	1085883a 	add	r2,r2,r2
 4001624:	e0ff7204 	addi	r3,fp,-568
 4001628:	1885883a 	add	r2,r3,r2
 400162c:	10800904 	addi	r2,r2,36
 4001630:	10800017 	ldw	r2,0(r2)
 4001634:	103fe026 	beq	r2,zero,40015b8 <__alt_data_end+0xfc0015b8>
					// encode (ff,00) == 0xf0
					tjei_write_bits(state, bitbuffer, location, huff_ac_len[0xf0], huff_ac_code[0xf0]);
					zero_count = 0;
				}
			}
			tjei_calculate_variable_length_int(du[i], vli);
 4001638:	e0bf7517 	ldw	r2,-556(fp)
 400163c:	1085883a 	add	r2,r2,r2
 4001640:	1085883a 	add	r2,r2,r2
 4001644:	e0ff7204 	addi	r3,fp,-568
 4001648:	1885883a 	add	r2,r3,r2
 400164c:	10800904 	addi	r2,r2,36
 4001650:	10800017 	ldw	r2,0(r2)
 4001654:	e0fffb04 	addi	r3,fp,-20
 4001658:	180b883a 	mov	r5,r3
 400165c:	1009883a 	mov	r4,r2
 4001660:	40009200 	call	4000920 <tjei_calculate_variable_length_int>

			assert(zero_count < 0x10);
 4001664:	e0bf7617 	ldw	r2,-552(fp)
 4001668:	10800410 	cmplti	r2,r2,16
 400166c:	1000081e 	bne	r2,zero,4001690 <tjei_encode_and_write_MCU+0x358>
 4001670:	01c10074 	movhi	r7,1025
 4001674:	39f4cf04 	addi	r7,r7,-11460
 4001678:	01810074 	movhi	r6,1025
 400167c:	31b51204 	addi	r6,r6,-11192
 4001680:	0140c744 	movi	r5,797
 4001684:	01010074 	movhi	r4,1025
 4001688:	2134c104 	addi	r4,r4,-11516
 400168c:	4004afc0 	call	4004afc <__assert_func>
			assert(vli[1] <= 10);
 4001690:	e0bffb8b 	ldhu	r2,-18(fp)
 4001694:	10bfffcc 	andi	r2,r2,65535
 4001698:	108002f0 	cmpltui	r2,r2,11
 400169c:	1000081e 	bne	r2,zero,40016c0 <tjei_encode_and_write_MCU+0x388>
 40016a0:	01c10074 	movhi	r7,1025
 40016a4:	39f4d404 	addi	r7,r7,-11440
 40016a8:	01810074 	movhi	r6,1025
 40016ac:	31b51204 	addi	r6,r6,-11192
 40016b0:	0140c784 	movi	r5,798
 40016b4:	01010074 	movhi	r4,1025
 40016b8:	2134c104 	addi	r4,r4,-11516
 40016bc:	4004afc0 	call	4004afc <__assert_func>

			uint16_t sym1 = (uint16_t)((uint16_t)zero_count << 4) | vli[1];
 40016c0:	e0bf7617 	ldw	r2,-552(fp)
 40016c4:	1004913a 	slli	r2,r2,4
 40016c8:	1007883a 	mov	r3,r2
 40016cc:	e0bffb8b 	ldhu	r2,-18(fp)
 40016d0:	1884b03a 	or	r2,r3,r2
 40016d4:	e0bf7a0d 	sth	r2,-536(fp)

			assert(huff_ac_len[sym1] != 0);
 40016d8:	e0bf7a0b 	ldhu	r2,-536(fp)
 40016dc:	e0c00317 	ldw	r3,12(fp)
 40016e0:	1885883a 	add	r2,r3,r2
 40016e4:	10800003 	ldbu	r2,0(r2)
 40016e8:	10803fcc 	andi	r2,r2,255
 40016ec:	1000081e 	bne	r2,zero,4001710 <tjei_encode_and_write_MCU+0x3d8>
 40016f0:	01c10074 	movhi	r7,1025
 40016f4:	39f4d804 	addi	r7,r7,-11424
 40016f8:	01810074 	movhi	r6,1025
 40016fc:	31b51204 	addi	r6,r6,-11192
 4001700:	0140c884 	movi	r5,802
 4001704:	01010074 	movhi	r4,1025
 4001708:	2134c104 	addi	r4,r4,-11516
 400170c:	4004afc0 	call	4004afc <__assert_func>

			// Write symbol 1  --- (RUNLENGTH, SIZE)
			tjei_write_bits(state, bitbuffer, location, huff_ac_len[sym1], huff_ac_code[sym1]);
 4001710:	e0bf7a0b 	ldhu	r2,-536(fp)
 4001714:	e0c00317 	ldw	r3,12(fp)
 4001718:	1885883a 	add	r2,r3,r2
 400171c:	10800003 	ldbu	r2,0(r2)
 4001720:	10c03fcc 	andi	r3,r2,255
 4001724:	e0bf7a0b 	ldhu	r2,-536(fp)
 4001728:	1085883a 	add	r2,r2,r2
 400172c:	1009883a 	mov	r4,r2
 4001730:	e0800417 	ldw	r2,16(fp)
 4001734:	1105883a 	add	r2,r2,r4
 4001738:	1080000b 	ldhu	r2,0(r2)
 400173c:	10bfffcc 	andi	r2,r2,65535
 4001740:	d8800015 	stw	r2,0(sp)
 4001744:	180f883a 	mov	r7,r3
 4001748:	e1800717 	ldw	r6,28(fp)
 400174c:	e1400617 	ldw	r5,24(fp)
 4001750:	e13ffc17 	ldw	r4,-16(fp)
 4001754:	40009e00 	call	40009e0 <tjei_write_bits>
			// Write symbol 2  --- (AMPLITUDE)
			tjei_write_bits(state, bitbuffer, location, vli[1], vli[0]);
 4001758:	e0bffb8b 	ldhu	r2,-18(fp)
 400175c:	10ffffcc 	andi	r3,r2,65535
 4001760:	e0bffb0b 	ldhu	r2,-20(fp)
 4001764:	10bfffcc 	andi	r2,r2,65535
 4001768:	d8800015 	stw	r2,0(sp)
 400176c:	180f883a 	mov	r7,r3
 4001770:	e1800717 	ldw	r6,28(fp)
 4001774:	e1400617 	ldw	r5,24(fp)
 4001778:	e13ffc17 	ldw	r4,-16(fp)
 400177c:	40009e00 	call	40009e0 <tjei_write_bits>
				last_non_zero_i = i;
				break;
			}
		}

		for (int i = 1; i <= last_non_zero_i; ++i) {
 4001780:	e0bf7517 	ldw	r2,-556(fp)
 4001784:	10800044 	addi	r2,r2,1
 4001788:	e0bf7515 	stw	r2,-556(fp)
 400178c:	e0bf7517 	ldw	r2,-556(fp)
 4001790:	e0ff7317 	ldw	r3,-564(fp)
 4001794:	18bf860e 	bge	r3,r2,40015b0 <__alt_data_end+0xfc0015b0>
			tjei_write_bits(state, bitbuffer, location, huff_ac_len[sym1], huff_ac_code[sym1]);
			// Write symbol 2  --- (AMPLITUDE)
			tjei_write_bits(state, bitbuffer, location, vli[1], vli[0]);
		}

		if (last_non_zero_i != 63) {
 4001798:	e0bf7317 	ldw	r2,-564(fp)
 400179c:	10800fe0 	cmpeqi	r2,r2,63
 40017a0:	10000d1e 	bne	r2,zero,40017d8 <tjei_encode_and_write_MCU+0x4a0>
			// write EOB HUFF(00,00)
			tjei_write_bits(state, bitbuffer, location, huff_ac_len[0], huff_ac_code[0]);
 40017a4:	e0800317 	ldw	r2,12(fp)
 40017a8:	10800003 	ldbu	r2,0(r2)
 40017ac:	10c03fcc 	andi	r3,r2,255
 40017b0:	e0800417 	ldw	r2,16(fp)
 40017b4:	1080000b 	ldhu	r2,0(r2)
 40017b8:	10bfffcc 	andi	r2,r2,65535
 40017bc:	d8800015 	stw	r2,0(sp)
 40017c0:	180f883a 	mov	r7,r3
 40017c4:	e1800717 	ldw	r6,28(fp)
 40017c8:	e1400617 	ldw	r5,24(fp)
 40017cc:	e13ffc17 	ldw	r4,-16(fp)
 40017d0:	40009e00 	call	40009e0 <tjei_write_bits>
		}
		return;
 40017d4:	0001883a 	nop
 40017d8:	0001883a 	nop
	}
 40017dc:	e037883a 	mov	sp,fp
 40017e0:	dfc00117 	ldw	ra,4(sp)
 40017e4:	df000017 	ldw	fp,0(sp)
 40017e8:	dec00204 	addi	sp,sp,8
 40017ec:	f800283a 	ret

040017f0 <tjei_huff_expand>:
	};
#endif

	// Set up huffman tables in state.
	static void tjei_huff_expand(TJEState* state)
	{
 40017f0:	defceb04 	addi	sp,sp,-3156
 40017f4:	dfc31415 	stw	ra,3152(sp)
 40017f8:	df031315 	stw	fp,3148(sp)
 40017fc:	dcc31215 	stw	r19,3144(sp)
 4001800:	dc831115 	stw	r18,3140(sp)
 4001804:	dc431015 	stw	r17,3136(sp)
 4001808:	dc030f15 	stw	r16,3132(sp)
 400180c:	df031304 	addi	fp,sp,3148
 4001810:	e13ffb15 	stw	r4,-20(fp)
		assert(state);
 4001814:	e0bffb17 	ldw	r2,-20(fp)
 4001818:	1000081e 	bne	r2,zero,400183c <tjei_huff_expand+0x4c>
 400181c:	01c10074 	movhi	r7,1025
 4001820:	39f4de04 	addi	r7,r7,-11400
 4001824:	01810074 	movhi	r6,1025
 4001828:	31b51904 	addi	r6,r6,-11164
 400182c:	0140d0c4 	movi	r5,835
 4001830:	01010074 	movhi	r4,1025
 4001834:	2134c104 	addi	r4,r4,-11516
 4001838:	4004afc0 	call	4004afc <__assert_func>

		state->ht_bits[TJEI_LUMA_DC] = tjei_default_ht_luma_dc_len;
 400183c:	e0fffb17 	ldw	r3,-20(fp)
 4001840:	00810074 	movhi	r2,1025
 4001844:	10b43504 	addi	r2,r2,-12076
 4001848:	18830115 	stw	r2,3076(r3)
		state->ht_bits[TJEI_LUMA_AC] = tjei_default_ht_luma_ac_len;
 400184c:	e0fffb17 	ldw	r3,-20(fp)
 4001850:	00810074 	movhi	r2,1025
 4001854:	10b44304 	addi	r2,r2,-12020
 4001858:	18830215 	stw	r2,3080(r3)
		state->ht_bits[TJEI_CHROMA_DC] = tjei_default_ht_chroma_dc_len;
 400185c:	e0fffb17 	ldw	r3,-20(fp)
 4001860:	00810074 	movhi	r2,1025
 4001864:	10b43c04 	addi	r2,r2,-12048
 4001868:	18830315 	stw	r2,3084(r3)
		state->ht_bits[TJEI_CHROMA_AC] = tjei_default_ht_chroma_ac_len;
 400186c:	e0fffb17 	ldw	r3,-20(fp)
 4001870:	00810074 	movhi	r2,1025
 4001874:	10b46f84 	addi	r2,r2,-11842
 4001878:	18830415 	stw	r2,3088(r3)

		state->ht_vals[TJEI_LUMA_DC] = tjei_default_ht_luma_dc;
 400187c:	e0fffb17 	ldw	r3,-20(fp)
 4001880:	00810074 	movhi	r2,1025
 4001884:	10b43904 	addi	r2,r2,-12060
 4001888:	18830515 	stw	r2,3092(r3)
		state->ht_vals[TJEI_LUMA_AC] = tjei_default_ht_luma_ac;
 400188c:	e0fffb17 	ldw	r3,-20(fp)
 4001890:	00810074 	movhi	r2,1025
 4001894:	10b44704 	addi	r2,r2,-12004
 4001898:	18830615 	stw	r2,3096(r3)
		state->ht_vals[TJEI_CHROMA_DC] = tjei_default_ht_chroma_dc;
 400189c:	e0fffb17 	ldw	r3,-20(fp)
 40018a0:	00810074 	movhi	r2,1025
 40018a4:	10b44004 	addi	r2,r2,-12032
 40018a8:	18830715 	stw	r2,3100(r3)
		state->ht_vals[TJEI_CHROMA_AC] = tjei_default_ht_chroma_ac;
 40018ac:	e0fffb17 	ldw	r3,-20(fp)
 40018b0:	00810074 	movhi	r2,1025
 40018b4:	10b47384 	addi	r2,r2,-11826
 40018b8:	18830815 	stw	r2,3104(r3)

		// How many codes in total for each of LUMA_(DC|AC) and CHROMA_(DC|AC)
		int32_t spec_tables_len[4] = { 0 };
 40018bc:	e03cf615 	stw	zero,-3112(fp)
 40018c0:	e03cf715 	stw	zero,-3108(fp)
 40018c4:	e03cf815 	stw	zero,-3104(fp)
 40018c8:	e03cf915 	stw	zero,-3100(fp)

		for (int i = 0; i < 4; ++i) {
 40018cc:	e03cf015 	stw	zero,-3136(fp)
 40018d0:	00002506 	br	4001968 <tjei_huff_expand+0x178>
			for (int k = 0; k < 16; ++k) {
 40018d4:	e03cf115 	stw	zero,-3132(fp)
 40018d8:	00001d06 	br	4001950 <tjei_huff_expand+0x160>
				spec_tables_len[i] += state->ht_bits[i][k];
 40018dc:	e0bcf017 	ldw	r2,-3136(fp)
 40018e0:	1085883a 	add	r2,r2,r2
 40018e4:	1085883a 	add	r2,r2,r2
 40018e8:	e0fcf004 	addi	r3,fp,-3136
 40018ec:	1885883a 	add	r2,r3,r2
 40018f0:	10800604 	addi	r2,r2,24
 40018f4:	10c00017 	ldw	r3,0(r2)
 40018f8:	e13ffb17 	ldw	r4,-20(fp)
 40018fc:	e0bcf017 	ldw	r2,-3136(fp)
 4001900:	1080c044 	addi	r2,r2,769
 4001904:	1085883a 	add	r2,r2,r2
 4001908:	1085883a 	add	r2,r2,r2
 400190c:	2085883a 	add	r2,r4,r2
 4001910:	11000017 	ldw	r4,0(r2)
 4001914:	e0bcf117 	ldw	r2,-3132(fp)
 4001918:	2085883a 	add	r2,r4,r2
 400191c:	10800003 	ldbu	r2,0(r2)
 4001920:	10803fcc 	andi	r2,r2,255
 4001924:	1887883a 	add	r3,r3,r2
 4001928:	e0bcf017 	ldw	r2,-3136(fp)
 400192c:	1085883a 	add	r2,r2,r2
 4001930:	1085883a 	add	r2,r2,r2
 4001934:	e13cf004 	addi	r4,fp,-3136
 4001938:	2085883a 	add	r2,r4,r2
 400193c:	10800604 	addi	r2,r2,24
 4001940:	10c00015 	stw	r3,0(r2)

		// How many codes in total for each of LUMA_(DC|AC) and CHROMA_(DC|AC)
		int32_t spec_tables_len[4] = { 0 };

		for (int i = 0; i < 4; ++i) {
			for (int k = 0; k < 16; ++k) {
 4001944:	e0bcf117 	ldw	r2,-3132(fp)
 4001948:	10800044 	addi	r2,r2,1
 400194c:	e0bcf115 	stw	r2,-3132(fp)
 4001950:	e0bcf117 	ldw	r2,-3132(fp)
 4001954:	10800410 	cmplti	r2,r2,16
 4001958:	103fe01e 	bne	r2,zero,40018dc <__alt_data_end+0xfc0018dc>
		state->ht_vals[TJEI_CHROMA_AC] = tjei_default_ht_chroma_ac;

		// How many codes in total for each of LUMA_(DC|AC) and CHROMA_(DC|AC)
		int32_t spec_tables_len[4] = { 0 };

		for (int i = 0; i < 4; ++i) {
 400195c:	e0bcf017 	ldw	r2,-3136(fp)
 4001960:	10800044 	addi	r2,r2,1
 4001964:	e0bcf015 	stw	r2,-3136(fp)
 4001968:	e0bcf017 	ldw	r2,-3136(fp)
 400196c:	10800110 	cmplti	r2,r2,4
 4001970:	103fd81e 	bne	r2,zero,40018d4 <__alt_data_end+0xfc0018d4>
		}

		// Fill out the extended tables..
		uint8_t huffsize[4][257];
		uint16_t huffcode[4][256];
		for (int i = 0; i < 4; ++i) {
 4001974:	e03cf215 	stw	zero,-3128(fp)
 4001978:	00003a06 	br	4001a64 <tjei_huff_expand+0x274>
			assert(256 >= spec_tables_len[i]);
 400197c:	e0bcf217 	ldw	r2,-3128(fp)
 4001980:	1085883a 	add	r2,r2,r2
 4001984:	1085883a 	add	r2,r2,r2
 4001988:	e0fcf004 	addi	r3,fp,-3136
 400198c:	1885883a 	add	r2,r3,r2
 4001990:	10800604 	addi	r2,r2,24
 4001994:	10800017 	ldw	r2,0(r2)
 4001998:	10804050 	cmplti	r2,r2,257
 400199c:	1000081e 	bne	r2,zero,40019c0 <tjei_huff_expand+0x1d0>
 40019a0:	01c10074 	movhi	r7,1025
 40019a4:	39f4e004 	addi	r7,r7,-11392
 40019a8:	01810074 	movhi	r6,1025
 40019ac:	31b51904 	addi	r6,r6,-11164
 40019b0:	0140d704 	movi	r5,860
 40019b4:	01010074 	movhi	r4,1025
 40019b8:	2134c104 	addi	r4,r4,-11516
 40019bc:	4004afc0 	call	4004afc <__assert_func>
			tjei_huff_get_code_lengths(huffsize[i], state->ht_bits[i]);
 40019c0:	e4bcfa04 	addi	r18,fp,-3096
 40019c4:	01404044 	movi	r5,257
 40019c8:	e13cf217 	ldw	r4,-3128(fp)
 40019cc:	40036040 	call	4003604 <__mulsi3>
 40019d0:	9089883a 	add	r4,r18,r2
 40019d4:	e0fffb17 	ldw	r3,-20(fp)
 40019d8:	e0bcf217 	ldw	r2,-3128(fp)
 40019dc:	1080c044 	addi	r2,r2,769
 40019e0:	1085883a 	add	r2,r2,r2
 40019e4:	1085883a 	add	r2,r2,r2
 40019e8:	1885883a 	add	r2,r3,r2
 40019ec:	10800017 	ldw	r2,0(r2)
 40019f0:	100b883a 	mov	r5,r2
 40019f4:	40006740 	call	4000674 <tjei_huff_get_code_lengths>
			tjei_huff_get_codes(huffcode[i], huffsize[i], spec_tables_len[i]);
 40019f8:	e0fdfb04 	addi	r3,fp,-2068
 40019fc:	e0bcf217 	ldw	r2,-3128(fp)
 4001a00:	1004927a 	slli	r2,r2,9
 4001a04:	18a7883a 	add	r19,r3,r2
 4001a08:	e4bcfa04 	addi	r18,fp,-3096
 4001a0c:	01404044 	movi	r5,257
 4001a10:	e13cf217 	ldw	r4,-3128(fp)
 4001a14:	40036040 	call	4003604 <__mulsi3>
 4001a18:	9087883a 	add	r3,r18,r2
 4001a1c:	e0bcf217 	ldw	r2,-3128(fp)
 4001a20:	1085883a 	add	r2,r2,r2
 4001a24:	1085883a 	add	r2,r2,r2
 4001a28:	e13cf004 	addi	r4,fp,-3136
 4001a2c:	2085883a 	add	r2,r4,r2
 4001a30:	10800604 	addi	r2,r2,24
 4001a34:	10800017 	ldw	r2,0(r2)
 4001a38:	1021883a 	mov	r16,r2
 4001a3c:	1005d7fa 	srai	r2,r2,31
 4001a40:	1023883a 	mov	r17,r2
 4001a44:	800d883a 	mov	r6,r16
 4001a48:	880f883a 	mov	r7,r17
 4001a4c:	180b883a 	mov	r5,r3
 4001a50:	9809883a 	mov	r4,r19
 4001a54:	40007240 	call	4000724 <tjei_huff_get_codes>
		}

		// Fill out the extended tables..
		uint8_t huffsize[4][257];
		uint16_t huffcode[4][256];
		for (int i = 0; i < 4; ++i) {
 4001a58:	e0bcf217 	ldw	r2,-3128(fp)
 4001a5c:	10800044 	addi	r2,r2,1
 4001a60:	e0bcf215 	stw	r2,-3128(fp)
 4001a64:	e0bcf217 	ldw	r2,-3128(fp)
 4001a68:	10800110 	cmplti	r2,r2,4
 4001a6c:	103fc31e 	bne	r2,zero,400197c <__alt_data_end+0xfc00197c>
			assert(256 >= spec_tables_len[i]);
			tjei_huff_get_code_lengths(huffsize[i], state->ht_bits[i]);
			tjei_huff_get_codes(huffcode[i], huffsize[i], spec_tables_len[i]);
		}
		for (int i = 0; i < 4; ++i) {
 4001a70:	e03cf315 	stw	zero,-3124(fp)
 4001a74:	00003206 	br	4001b40 <tjei_huff_expand+0x350>
			int64_t count = spec_tables_len[i];
 4001a78:	e0bcf317 	ldw	r2,-3124(fp)
 4001a7c:	1085883a 	add	r2,r2,r2
 4001a80:	1085883a 	add	r2,r2,r2
 4001a84:	e0fcf004 	addi	r3,fp,-3136
 4001a88:	1885883a 	add	r2,r3,r2
 4001a8c:	10800604 	addi	r2,r2,24
 4001a90:	10800017 	ldw	r2,0(r2)
 4001a94:	e0bcf415 	stw	r2,-3120(fp)
 4001a98:	1005d7fa 	srai	r2,r2,31
 4001a9c:	e0bcf515 	stw	r2,-3116(fp)
			tjei_huff_get_extended(state->ehuffsize[i],
 4001aa0:	01404044 	movi	r5,257
 4001aa4:	e13cf317 	ldw	r4,-3124(fp)
 4001aa8:	40036040 	call	4003604 <__mulsi3>
 4001aac:	1007883a 	mov	r3,r2
 4001ab0:	e0bffb17 	ldw	r2,-20(fp)
 4001ab4:	10e3883a 	add	r17,r2,r3
				state->ehuffcode[i],
 4001ab8:	e0bcf317 	ldw	r2,-3124(fp)
 4001abc:	1004927a 	slli	r2,r2,9
 4001ac0:	10810104 	addi	r2,r2,1028
 4001ac4:	e0fffb17 	ldw	r3,-20(fp)
 4001ac8:	18a5883a 	add	r18,r3,r2
			tjei_huff_get_code_lengths(huffsize[i], state->ht_bits[i]);
			tjei_huff_get_codes(huffcode[i], huffsize[i], spec_tables_len[i]);
		}
		for (int i = 0; i < 4; ++i) {
			int64_t count = spec_tables_len[i];
			tjei_huff_get_extended(state->ehuffsize[i],
 4001acc:	e0fffb17 	ldw	r3,-20(fp)
 4001ad0:	e0bcf317 	ldw	r2,-3124(fp)
 4001ad4:	1080c144 	addi	r2,r2,773
 4001ad8:	1085883a 	add	r2,r2,r2
 4001adc:	1085883a 	add	r2,r2,r2
 4001ae0:	1885883a 	add	r2,r3,r2
 4001ae4:	14c00017 	ldw	r19,0(r2)
 4001ae8:	e43cfa04 	addi	r16,fp,-3096
 4001aec:	01404044 	movi	r5,257
 4001af0:	e13cf317 	ldw	r4,-3124(fp)
 4001af4:	40036040 	call	4003604 <__mulsi3>
 4001af8:	8089883a 	add	r4,r16,r2
 4001afc:	e0fdfb04 	addi	r3,fp,-2068
 4001b00:	e0bcf317 	ldw	r2,-3124(fp)
 4001b04:	1004927a 	slli	r2,r2,9
 4001b08:	1885883a 	add	r2,r3,r2
 4001b0c:	e0fcf417 	ldw	r3,-3120(fp)
 4001b10:	d8c00115 	stw	r3,4(sp)
 4001b14:	e0fcf517 	ldw	r3,-3116(fp)
 4001b18:	d8c00215 	stw	r3,8(sp)
 4001b1c:	d8800015 	stw	r2,0(sp)
 4001b20:	200f883a 	mov	r7,r4
 4001b24:	980d883a 	mov	r6,r19
 4001b28:	900b883a 	mov	r5,r18
 4001b2c:	8809883a 	mov	r4,r17
 4001b30:	40008540 	call	4000854 <tjei_huff_get_extended>
		for (int i = 0; i < 4; ++i) {
			assert(256 >= spec_tables_len[i]);
			tjei_huff_get_code_lengths(huffsize[i], state->ht_bits[i]);
			tjei_huff_get_codes(huffcode[i], huffsize[i], spec_tables_len[i]);
		}
		for (int i = 0; i < 4; ++i) {
 4001b34:	e0bcf317 	ldw	r2,-3124(fp)
 4001b38:	10800044 	addi	r2,r2,1
 4001b3c:	e0bcf315 	stw	r2,-3124(fp)
 4001b40:	e0bcf317 	ldw	r2,-3124(fp)
 4001b44:	10800110 	cmplti	r2,r2,4
 4001b48:	103fcb1e 	bne	r2,zero,4001a78 <__alt_data_end+0xfc001a78>
				state->ehuffcode[i],
				state->ht_vals[i],
				&huffsize[i][0],
				&huffcode[i][0], count);
		}
	}
 4001b4c:	0001883a 	nop
 4001b50:	e6fffc04 	addi	sp,fp,-16
 4001b54:	dfc00517 	ldw	ra,20(sp)
 4001b58:	df000417 	ldw	fp,16(sp)
 4001b5c:	dcc00317 	ldw	r19,12(sp)
 4001b60:	dc800217 	ldw	r18,8(sp)
 4001b64:	dc400117 	ldw	r17,4(sp)
 4001b68:	dc000017 	ldw	r16,0(sp)
 4001b6c:	dec00604 	addi	sp,sp,24
 4001b70:	f800283a 	ret

04001b74 <tjei_encode_main>:
	static int tjei_encode_main(TJEState* state,
		const unsigned char* src_data,
		const int width,
		const int height,
		const int src_num_components)
	{
 4001b74:	defe8204 	addi	sp,sp,-1528
 4001b78:	dfc17d15 	stw	ra,1524(sp)
 4001b7c:	df017c15 	stw	fp,1520(sp)
 4001b80:	dc417b15 	stw	r17,1516(sp)
 4001b84:	dc017a15 	stw	r16,1512(sp)
 4001b88:	df017c04 	addi	fp,sp,1520
 4001b8c:	e13ffa15 	stw	r4,-24(fp)
 4001b90:	e17ffb15 	stw	r5,-20(fp)
 4001b94:	e1bffc15 	stw	r6,-16(fp)
 4001b98:	e1fffd15 	stw	r7,-12(fp)
		if (src_num_components != 3 && src_num_components != 4) {
 4001b9c:	e0800217 	ldw	r2,8(fp)
 4001ba0:	108000e0 	cmpeqi	r2,r2,3
 4001ba4:	1000051e 	bne	r2,zero,4001bbc <tjei_encode_main+0x48>
 4001ba8:	e0800217 	ldw	r2,8(fp)
 4001bac:	10800120 	cmpeqi	r2,r2,4
 4001bb0:	1000021e 	bne	r2,zero,4001bbc <tjei_encode_main+0x48>
			return 0;
 4001bb4:	0005883a 	mov	r2,zero
 4001bb8:	00037406 	br	400298c <tjei_encode_main+0xe18>
		}

		if (width > 0xffff || height > 0xffff) {
 4001bbc:	e0bffc17 	ldw	r2,-16(fp)
 4001bc0:	00ffffd4 	movui	r3,65535
 4001bc4:	18800316 	blt	r3,r2,4001bd4 <tjei_encode_main+0x60>
 4001bc8:	e0bffd17 	ldw	r2,-12(fp)
 4001bcc:	00ffffd4 	movui	r3,65535
 4001bd0:	1880020e 	bge	r3,r2,4001bdc <tjei_encode_main+0x68>
			return 0;
 4001bd4:	0005883a 	mov	r2,zero
 4001bd8:	00036c06 	br	400298c <tjei_encode_main+0xe18>
			1.0f, 1.387039845f, 1.306562965f, 1.175875602f,
			1.0f, 0.785694958f, 0.541196100f, 0.275899379f
		};

		// build (de)quantization tables
		for (int y = 0; y < 8; y++) {
 4001bdc:	e03e8a15 	stw	zero,-1496(fp)
 4001be0:	00008306 	br	4001df0 <tjei_encode_main+0x27c>
			for (int x = 0; x < 8; x++) {
 4001be4:	e03e8b15 	stw	zero,-1492(fp)
 4001be8:	00007b06 	br	4001dd8 <tjei_encode_main+0x264>
				int i = y * 8 + x;
 4001bec:	e0be8a17 	ldw	r2,-1496(fp)
 4001bf0:	100690fa 	slli	r3,r2,3
 4001bf4:	e0be8b17 	ldw	r2,-1492(fp)
 4001bf8:	1885883a 	add	r2,r3,r2
 4001bfc:	e0be9315 	stw	r2,-1460(fp)
				pqt.luma[y * 8 + x] = 1.0f / (8 * aan_scales[x] * aan_scales[y] * state->qt_luma[tjei_zig_zag[i]]);
 4001c00:	e0be8a17 	ldw	r2,-1496(fp)
 4001c04:	100690fa 	slli	r3,r2,3
 4001c08:	e0be8b17 	ldw	r2,-1492(fp)
 4001c0c:	18a1883a 	add	r16,r3,r2
 4001c10:	00810074 	movhi	r2,1025
 4001c14:	10b51e04 	addi	r2,r2,-11144
 4001c18:	e0fe8b17 	ldw	r3,-1492(fp)
 4001c1c:	18c7883a 	add	r3,r3,r3
 4001c20:	18c7883a 	add	r3,r3,r3
 4001c24:	10c5883a 	add	r2,r2,r3
 4001c28:	10c00017 	ldw	r3,0(r2)
 4001c2c:	01504034 	movhi	r5,16640
 4001c30:	1809883a 	mov	r4,r3
 4001c34:	4003ff00 	call	4003ff0 <__mulsf3>
 4001c38:	1007883a 	mov	r3,r2
 4001c3c:	1809883a 	mov	r4,r3
 4001c40:	00810074 	movhi	r2,1025
 4001c44:	10b51e04 	addi	r2,r2,-11144
 4001c48:	e0fe8a17 	ldw	r3,-1496(fp)
 4001c4c:	18c7883a 	add	r3,r3,r3
 4001c50:	18c7883a 	add	r3,r3,r3
 4001c54:	10c5883a 	add	r2,r2,r3
 4001c58:	10c00017 	ldw	r3,0(r2)
 4001c5c:	180b883a 	mov	r5,r3
 4001c60:	4003ff00 	call	4003ff0 <__mulsf3>
 4001c64:	1007883a 	mov	r3,r2
 4001c68:	1823883a 	mov	r17,r3
 4001c6c:	00810074 	movhi	r2,1025
 4001c70:	10b49c04 	addi	r2,r2,-11664
 4001c74:	e0fe9317 	ldw	r3,-1460(fp)
 4001c78:	10c5883a 	add	r2,r2,r3
 4001c7c:	10800003 	ldbu	r2,0(r2)
 4001c80:	10803fcc 	andi	r2,r2,255
 4001c84:	e0fffa17 	ldw	r3,-24(fp)
 4001c88:	1885883a 	add	r2,r3,r2
 4001c8c:	10830904 	addi	r2,r2,3108
 4001c90:	10800003 	ldbu	r2,0(r2)
 4001c94:	10803fcc 	andi	r2,r2,255
 4001c98:	1009883a 	mov	r4,r2
 4001c9c:	40049740 	call	4004974 <__floatsisf>
 4001ca0:	1007883a 	mov	r3,r2
 4001ca4:	180b883a 	mov	r5,r3
 4001ca8:	8809883a 	mov	r4,r17
 4001cac:	4003ff00 	call	4003ff0 <__mulsf3>
 4001cb0:	1007883a 	mov	r3,r2
 4001cb4:	1805883a 	mov	r2,r3
 4001cb8:	100b883a 	mov	r5,r2
 4001cbc:	010fe034 	movhi	r4,16256
 4001cc0:	4003af40 	call	4003af4 <__divsf3>
 4001cc4:	1009883a 	mov	r4,r2
 4001cc8:	2007883a 	mov	r3,r4
 4001ccc:	80801004 	addi	r2,r16,64
 4001cd0:	1085883a 	add	r2,r2,r2
 4001cd4:	1085883a 	add	r2,r2,r2
 4001cd8:	e13e8a04 	addi	r4,fp,-1496
 4001cdc:	2085883a 	add	r2,r4,r2
 4001ce0:	10801204 	addi	r2,r2,72
 4001ce4:	10c00015 	stw	r3,0(r2)
				pqt.chroma[y * 8 + x] = 1.0f / (8 * aan_scales[x] * aan_scales[y] * state->qt_chroma[tjei_zig_zag[i]]);
 4001ce8:	e0be8a17 	ldw	r2,-1496(fp)
 4001cec:	100690fa 	slli	r3,r2,3
 4001cf0:	e0be8b17 	ldw	r2,-1492(fp)
 4001cf4:	18a1883a 	add	r16,r3,r2
 4001cf8:	00810074 	movhi	r2,1025
 4001cfc:	10b51e04 	addi	r2,r2,-11144
 4001d00:	e0fe8b17 	ldw	r3,-1492(fp)
 4001d04:	18c7883a 	add	r3,r3,r3
 4001d08:	18c7883a 	add	r3,r3,r3
 4001d0c:	10c5883a 	add	r2,r2,r3
 4001d10:	10c00017 	ldw	r3,0(r2)
 4001d14:	01504034 	movhi	r5,16640
 4001d18:	1809883a 	mov	r4,r3
 4001d1c:	4003ff00 	call	4003ff0 <__mulsf3>
 4001d20:	1007883a 	mov	r3,r2
 4001d24:	1809883a 	mov	r4,r3
 4001d28:	00810074 	movhi	r2,1025
 4001d2c:	10b51e04 	addi	r2,r2,-11144
 4001d30:	e0fe8a17 	ldw	r3,-1496(fp)
 4001d34:	18c7883a 	add	r3,r3,r3
 4001d38:	18c7883a 	add	r3,r3,r3
 4001d3c:	10c5883a 	add	r2,r2,r3
 4001d40:	10c00017 	ldw	r3,0(r2)
 4001d44:	180b883a 	mov	r5,r3
 4001d48:	4003ff00 	call	4003ff0 <__mulsf3>
 4001d4c:	1007883a 	mov	r3,r2
 4001d50:	1823883a 	mov	r17,r3
 4001d54:	00810074 	movhi	r2,1025
 4001d58:	10b49c04 	addi	r2,r2,-11664
 4001d5c:	e0fe9317 	ldw	r3,-1460(fp)
 4001d60:	10c5883a 	add	r2,r2,r3
 4001d64:	10800003 	ldbu	r2,0(r2)
 4001d68:	10803fcc 	andi	r2,r2,255
 4001d6c:	e0fffa17 	ldw	r3,-24(fp)
 4001d70:	1885883a 	add	r2,r3,r2
 4001d74:	10831904 	addi	r2,r2,3172
 4001d78:	10800003 	ldbu	r2,0(r2)
 4001d7c:	10803fcc 	andi	r2,r2,255
 4001d80:	1009883a 	mov	r4,r2
 4001d84:	40049740 	call	4004974 <__floatsisf>
 4001d88:	1007883a 	mov	r3,r2
 4001d8c:	180b883a 	mov	r5,r3
 4001d90:	8809883a 	mov	r4,r17
 4001d94:	4003ff00 	call	4003ff0 <__mulsf3>
 4001d98:	1007883a 	mov	r3,r2
 4001d9c:	1805883a 	mov	r2,r3
 4001da0:	100b883a 	mov	r5,r2
 4001da4:	010fe034 	movhi	r4,16256
 4001da8:	4003af40 	call	4003af4 <__divsf3>
 4001dac:	1009883a 	mov	r4,r2
 4001db0:	2007883a 	mov	r3,r4
 4001db4:	8405883a 	add	r2,r16,r16
 4001db8:	1085883a 	add	r2,r2,r2
 4001dbc:	e13e8a04 	addi	r4,fp,-1496
 4001dc0:	2085883a 	add	r2,r4,r2
 4001dc4:	10801204 	addi	r2,r2,72
 4001dc8:	10c00015 	stw	r3,0(r2)
			1.0f, 0.785694958f, 0.541196100f, 0.275899379f
		};

		// build (de)quantization tables
		for (int y = 0; y < 8; y++) {
			for (int x = 0; x < 8; x++) {
 4001dcc:	e0be8b17 	ldw	r2,-1492(fp)
 4001dd0:	10800044 	addi	r2,r2,1
 4001dd4:	e0be8b15 	stw	r2,-1492(fp)
 4001dd8:	e0be8b17 	ldw	r2,-1492(fp)
 4001ddc:	10800210 	cmplti	r2,r2,8
 4001de0:	103f821e 	bne	r2,zero,4001bec <__alt_data_end+0xfc001bec>
			1.0f, 1.387039845f, 1.306562965f, 1.175875602f,
			1.0f, 0.785694958f, 0.541196100f, 0.275899379f
		};

		// build (de)quantization tables
		for (int y = 0; y < 8; y++) {
 4001de4:	e0be8a17 	ldw	r2,-1496(fp)
 4001de8:	10800044 	addi	r2,r2,1
 4001dec:	e0be8a15 	stw	r2,-1496(fp)
 4001df0:	e0be8a17 	ldw	r2,-1496(fp)
 4001df4:	10800210 	cmplti	r2,r2,8
 4001df8:	103f7a1e 	bne	r2,zero,4001be4 <__alt_data_end+0xfc001be4>
#endif

		{ // Write header
			TJEJPEGHeader header;
			// JFIF header.
			header.SOI = tjei_be_word(0xffd8);  // Sequential DCT
 4001dfc:	013ff614 	movui	r4,65496
 4001e00:	400026c0 	call	400026c <tjei_be_word>
 4001e04:	e0bfe18d 	sth	r2,-122(fp)
			header.APP0 = tjei_be_word(0xffe0);
 4001e08:	013ff814 	movui	r4,65504
 4001e0c:	400026c0 	call	400026c <tjei_be_word>
 4001e10:	e0bfe20d 	sth	r2,-120(fp)

			uint16_t jfif_len = sizeof(TJEJPEGHeader) - 4 /*SOI & APP0 markers*/;
 4001e14:	00800404 	movi	r2,16
 4001e18:	e0be940d 	sth	r2,-1456(fp)
			header.jfif_len = tjei_be_word(jfif_len);
 4001e1c:	e0be940b 	ldhu	r2,-1456(fp)
 4001e20:	1009883a 	mov	r4,r2
 4001e24:	400026c0 	call	400026c <tjei_be_word>
 4001e28:	e0bfe28d 	sth	r2,-118(fp)
			memcpy(header.jfif_id, (void*)tjeik_jfif_id, 5);
 4001e2c:	d0a0000b 	ldhu	r2,-32768(gp)
 4001e30:	e0bfe30d 	sth	r2,-116(fp)
 4001e34:	d0a0008b 	ldhu	r2,-32766(gp)
 4001e38:	e0bfe38d 	sth	r2,-114(fp)
 4001e3c:	d0a00103 	ldbu	r2,-32764(gp)
 4001e40:	e0bfe405 	stb	r2,-112(fp)
			header.version = tjei_be_word(0x0102);
 4001e44:	01004084 	movi	r4,258
 4001e48:	400026c0 	call	400026c <tjei_be_word>
 4001e4c:	100b883a 	mov	r5,r2
 4001e50:	28bfffcc 	andi	r2,r5,65535
 4001e54:	11003fcc 	andi	r4,r2,255
 4001e58:	e0bfe443 	ldbu	r2,-111(fp)
 4001e5c:	1004703a 	and	r2,r2,zero
 4001e60:	1007883a 	mov	r3,r2
 4001e64:	2005883a 	mov	r2,r4
 4001e68:	1884b03a 	or	r2,r3,r2
 4001e6c:	e0bfe445 	stb	r2,-111(fp)
 4001e70:	28bfffcc 	andi	r2,r5,65535
 4001e74:	1004d23a 	srli	r2,r2,8
 4001e78:	113fffcc 	andi	r4,r2,65535
 4001e7c:	e0bfe483 	ldbu	r2,-110(fp)
 4001e80:	1004703a 	and	r2,r2,zero
 4001e84:	1007883a 	mov	r3,r2
 4001e88:	2005883a 	mov	r2,r4
 4001e8c:	1884b03a 	or	r2,r3,r2
 4001e90:	e0bfe485 	stb	r2,-110(fp)
			header.units = 0x01;  // Dots-per-inch
 4001e94:	00800044 	movi	r2,1
 4001e98:	e0bfe4c5 	stb	r2,-109(fp)
			header.x_density = tjei_be_word(0x0060);  // 96 DPI
 4001e9c:	01001804 	movi	r4,96
 4001ea0:	400026c0 	call	400026c <tjei_be_word>
 4001ea4:	e0bfe50d 	sth	r2,-108(fp)
			header.y_density = tjei_be_word(0x0060);  // 96 DPI
 4001ea8:	01001804 	movi	r4,96
 4001eac:	400026c0 	call	400026c <tjei_be_word>
 4001eb0:	e0bfe58d 	sth	r2,-106(fp)
			header.x_thumb = 0;
 4001eb4:	e03fe605 	stb	zero,-104(fp)
			header.y_thumb = 0;
 4001eb8:	e03fe645 	stb	zero,-103(fp)
			tjei_write(state, &header, sizeof(TJEJPEGHeader), 1);
 4001ebc:	e0bfe184 	addi	r2,fp,-122
 4001ec0:	01c00044 	movi	r7,1
 4001ec4:	01800504 	movi	r6,20
 4001ec8:	100b883a 	mov	r5,r2
 4001ecc:	e13ffa17 	ldw	r4,-24(fp)
 4001ed0:	40002bc0 	call	40002bc <tjei_write>
		}
		{  // Write comment
			TJEJPEGComment com;
			uint16_t com_len = 2 + sizeof(tjeik_com_str) - 1;
 4001ed4:	00800784 	movi	r2,30
 4001ed8:	e0be948d 	sth	r2,-1454(fp)
			// Comment
			com.com = tjei_be_word(0xfffe);
 4001edc:	013fff94 	movui	r4,65534
 4001ee0:	400026c0 	call	400026c <tjei_be_word>
 4001ee4:	e0bff18d 	sth	r2,-58(fp)
			com.com_len = tjei_be_word(com_len);
 4001ee8:	e0be948b 	ldhu	r2,-1454(fp)
 4001eec:	1009883a 	mov	r4,r2
 4001ef0:	400026c0 	call	400026c <tjei_be_word>
 4001ef4:	e0bff20d 	sth	r2,-56(fp)
			memcpy(com.com_str, (void*)tjeik_com_str, sizeof(tjeik_com_str) - 1);
 4001ef8:	00810074 	movhi	r2,1025
 4001efc:	10b4ac04 	addi	r2,r2,-11600
 4001f00:	10c0000b 	ldhu	r3,0(r2)
 4001f04:	e0fff28d 	sth	r3,-54(fp)
 4001f08:	10c0008b 	ldhu	r3,2(r2)
 4001f0c:	e0fff30d 	sth	r3,-52(fp)
 4001f10:	10c0010b 	ldhu	r3,4(r2)
 4001f14:	e0fff38d 	sth	r3,-50(fp)
 4001f18:	10c0018b 	ldhu	r3,6(r2)
 4001f1c:	e0fff40d 	sth	r3,-48(fp)
 4001f20:	10c0020b 	ldhu	r3,8(r2)
 4001f24:	e0fff48d 	sth	r3,-46(fp)
 4001f28:	10c0028b 	ldhu	r3,10(r2)
 4001f2c:	e0fff50d 	sth	r3,-44(fp)
 4001f30:	10c0030b 	ldhu	r3,12(r2)
 4001f34:	e0fff58d 	sth	r3,-42(fp)
 4001f38:	10c0038b 	ldhu	r3,14(r2)
 4001f3c:	e0fff60d 	sth	r3,-40(fp)
 4001f40:	10c0040b 	ldhu	r3,16(r2)
 4001f44:	e0fff68d 	sth	r3,-38(fp)
 4001f48:	10c0048b 	ldhu	r3,18(r2)
 4001f4c:	e0fff70d 	sth	r3,-36(fp)
 4001f50:	10c0050b 	ldhu	r3,20(r2)
 4001f54:	e0fff78d 	sth	r3,-34(fp)
 4001f58:	10c0058b 	ldhu	r3,22(r2)
 4001f5c:	e0fff80d 	sth	r3,-32(fp)
 4001f60:	10c0060b 	ldhu	r3,24(r2)
 4001f64:	e0fff88d 	sth	r3,-30(fp)
 4001f68:	1080068b 	ldhu	r2,26(r2)
 4001f6c:	e0bff90d 	sth	r2,-28(fp)
			tjei_write(state, &com, sizeof(TJEJPEGComment), 1);
 4001f70:	e0bff184 	addi	r2,fp,-58
 4001f74:	01c00044 	movi	r7,1
 4001f78:	01800804 	movi	r6,32
 4001f7c:	100b883a 	mov	r5,r2
 4001f80:	e13ffa17 	ldw	r4,-24(fp)
 4001f84:	40002bc0 	call	40002bc <tjei_write>
		}

		// Write quantization tables.
		tjei_write_DQT(state, state->qt_luma, 0x00);
 4001f88:	e0bffa17 	ldw	r2,-24(fp)
 4001f8c:	10830904 	addi	r2,r2,3108
 4001f90:	000d883a 	mov	r6,zero
 4001f94:	100b883a 	mov	r5,r2
 4001f98:	e13ffa17 	ldw	r4,-24(fp)
 4001f9c:	40004080 	call	4000408 <tjei_write_DQT>
		tjei_write_DQT(state, state->qt_chroma, 0x01);
 4001fa0:	e0bffa17 	ldw	r2,-24(fp)
 4001fa4:	10831904 	addi	r2,r2,3172
 4001fa8:	01800044 	movi	r6,1
 4001fac:	100b883a 	mov	r5,r2
 4001fb0:	e13ffa17 	ldw	r4,-24(fp)
 4001fb4:	40004080 	call	4000408 <tjei_write_DQT>

		{  // Write the frame marker.
			TJEFrameHeader header;
			header.SOF = tjei_be_word(0xffc0);
 4001fb8:	013ff014 	movui	r4,65472
 4001fbc:	400026c0 	call	400026c <tjei_be_word>
 4001fc0:	e0bfe68d 	sth	r2,-102(fp)
			header.len = tjei_be_word(8 + 3 * 3);
 4001fc4:	01000444 	movi	r4,17
 4001fc8:	400026c0 	call	400026c <tjei_be_word>
 4001fcc:	e0bfe70d 	sth	r2,-100(fp)
			header.precision = 8;
 4001fd0:	00800204 	movi	r2,8
 4001fd4:	e0bfe785 	stb	r2,-98(fp)
			assert(width <= 0xffff);
 4001fd8:	e0bffc17 	ldw	r2,-16(fp)
 4001fdc:	00ffffd4 	movui	r3,65535
 4001fe0:	1880080e 	bge	r3,r2,4002004 <tjei_encode_main+0x490>
 4001fe4:	01c10074 	movhi	r7,1025
 4001fe8:	39f4e704 	addi	r7,r7,-11364
 4001fec:	01810074 	movhi	r6,1025
 4001ff0:	31b52604 	addi	r6,r6,-11112
 4001ff4:	0140edc4 	movi	r5,951
 4001ff8:	01010074 	movhi	r4,1025
 4001ffc:	2134c104 	addi	r4,r4,-11516
 4002000:	4004afc0 	call	4004afc <__assert_func>
			assert(height <= 0xffff);
 4002004:	e0bffd17 	ldw	r2,-12(fp)
 4002008:	00ffffd4 	movui	r3,65535
 400200c:	1880080e 	bge	r3,r2,4002030 <tjei_encode_main+0x4bc>
 4002010:	01c10074 	movhi	r7,1025
 4002014:	39f4eb04 	addi	r7,r7,-11348
 4002018:	01810074 	movhi	r6,1025
 400201c:	31b52604 	addi	r6,r6,-11112
 4002020:	0140ee04 	movi	r5,952
 4002024:	01010074 	movhi	r4,1025
 4002028:	2134c104 	addi	r4,r4,-11516
 400202c:	4004afc0 	call	4004afc <__assert_func>
			header.width = tjei_be_word((uint16_t)width);
 4002030:	e0bffc17 	ldw	r2,-16(fp)
 4002034:	10bfffcc 	andi	r2,r2,65535
 4002038:	1009883a 	mov	r4,r2
 400203c:	400026c0 	call	400026c <tjei_be_word>
 4002040:	100b883a 	mov	r5,r2
 4002044:	28bfffcc 	andi	r2,r5,65535
 4002048:	11003fcc 	andi	r4,r2,255
 400204c:	e0bfe843 	ldbu	r2,-95(fp)
 4002050:	1004703a 	and	r2,r2,zero
 4002054:	1007883a 	mov	r3,r2
 4002058:	2005883a 	mov	r2,r4
 400205c:	1884b03a 	or	r2,r3,r2
 4002060:	e0bfe845 	stb	r2,-95(fp)
 4002064:	28bfffcc 	andi	r2,r5,65535
 4002068:	1004d23a 	srli	r2,r2,8
 400206c:	113fffcc 	andi	r4,r2,65535
 4002070:	e0bfe883 	ldbu	r2,-94(fp)
 4002074:	1004703a 	and	r2,r2,zero
 4002078:	1007883a 	mov	r3,r2
 400207c:	2005883a 	mov	r2,r4
 4002080:	1884b03a 	or	r2,r3,r2
 4002084:	e0bfe885 	stb	r2,-94(fp)
			header.height = tjei_be_word((uint16_t)height);
 4002088:	e0bffd17 	ldw	r2,-12(fp)
 400208c:	10bfffcc 	andi	r2,r2,65535
 4002090:	1009883a 	mov	r4,r2
 4002094:	400026c0 	call	400026c <tjei_be_word>
 4002098:	100b883a 	mov	r5,r2
 400209c:	28bfffcc 	andi	r2,r5,65535
 40020a0:	11003fcc 	andi	r4,r2,255
 40020a4:	e0bfe7c3 	ldbu	r2,-97(fp)
 40020a8:	1004703a 	and	r2,r2,zero
 40020ac:	1007883a 	mov	r3,r2
 40020b0:	2005883a 	mov	r2,r4
 40020b4:	1884b03a 	or	r2,r3,r2
 40020b8:	e0bfe7c5 	stb	r2,-97(fp)
 40020bc:	28bfffcc 	andi	r2,r5,65535
 40020c0:	1004d23a 	srli	r2,r2,8
 40020c4:	113fffcc 	andi	r4,r2,65535
 40020c8:	e0bfe803 	ldbu	r2,-96(fp)
 40020cc:	1004703a 	and	r2,r2,zero
 40020d0:	1007883a 	mov	r3,r2
 40020d4:	2005883a 	mov	r2,r4
 40020d8:	1884b03a 	or	r2,r3,r2
 40020dc:	e0bfe805 	stb	r2,-96(fp)
			header.num_components = 3;
 40020e0:	008000c4 	movi	r2,3
 40020e4:	e0bfe8c5 	stb	r2,-93(fp)
			uint8_t tables[3] = {
 40020e8:	e03feb45 	stb	zero,-83(fp)
 40020ec:	00800044 	movi	r2,1
 40020f0:	e0bfeb85 	stb	r2,-82(fp)
 40020f4:	00800044 	movi	r2,1
 40020f8:	e0bfebc5 	stb	r2,-81(fp)
				0,  // Luma component gets luma table (see tjei_write_DQT call above.)
				1,  // Chroma component gets chroma table
				1,  // Chroma component gets chroma table
			};
			for (int i = 0; i < 3; ++i) {
 40020fc:	e03e8c15 	stw	zero,-1488(fp)
 4002100:	00001a06 	br	400216c <tjei_encode_main+0x5f8>
				TJEComponentSpec spec;
				spec.component_id = (uint8_t)(i + 1);  // No particular reason. Just 1, 2, 3.
 4002104:	e0be8c17 	ldw	r2,-1488(fp)
 4002108:	10800044 	addi	r2,r2,1
 400210c:	e0bfec05 	stb	r2,-80(fp)
				spec.sampling_factors = (uint8_t)0x11;
 4002110:	00800444 	movi	r2,17
 4002114:	e0bfec45 	stb	r2,-79(fp)
				spec.qt = tables[i];
 4002118:	e0ffeb44 	addi	r3,fp,-83
 400211c:	e0be8c17 	ldw	r2,-1488(fp)
 4002120:	1885883a 	add	r2,r3,r2
 4002124:	10800003 	ldbu	r2,0(r2)
 4002128:	e0bfec85 	stb	r2,-78(fp)

				header.component_spec[i] = spec;
 400212c:	e0fe8c17 	ldw	r3,-1488(fp)
 4002130:	1805883a 	mov	r2,r3
 4002134:	1085883a 	add	r2,r2,r2
 4002138:	10c5883a 	add	r2,r2,r3
 400213c:	e0fe8a04 	addi	r3,fp,-1496
 4002140:	1885883a 	add	r2,r3,r2
 4002144:	10815e84 	addi	r2,r2,1402
 4002148:	e0ffec03 	ldbu	r3,-80(fp)
 400214c:	10c00085 	stb	r3,2(r2)
 4002150:	e0ffec43 	ldbu	r3,-79(fp)
 4002154:	10c000c5 	stb	r3,3(r2)
 4002158:	e0ffec83 	ldbu	r3,-78(fp)
 400215c:	10c00105 	stb	r3,4(r2)
			uint8_t tables[3] = {
				0,  // Luma component gets luma table (see tjei_write_DQT call above.)
				1,  // Chroma component gets chroma table
				1,  // Chroma component gets chroma table
			};
			for (int i = 0; i < 3; ++i) {
 4002160:	e0be8c17 	ldw	r2,-1488(fp)
 4002164:	10800044 	addi	r2,r2,1
 4002168:	e0be8c15 	stw	r2,-1488(fp)
 400216c:	e0be8c17 	ldw	r2,-1488(fp)
 4002170:	108000d0 	cmplti	r2,r2,3
 4002174:	103fe31e 	bne	r2,zero,4002104 <__alt_data_end+0xfc002104>
				spec.qt = tables[i];

				header.component_spec[i] = spec;
			}
			// Write to file.
			tjei_write(state, &header, sizeof(TJEFrameHeader), 1);
 4002178:	e0bfe684 	addi	r2,fp,-102
 400217c:	01c00044 	movi	r7,1
 4002180:	018004c4 	movi	r6,19
 4002184:	100b883a 	mov	r5,r2
 4002188:	e13ffa17 	ldw	r4,-24(fp)
 400218c:	40002bc0 	call	40002bc <tjei_write>
		}

		tjei_write_DHT(state, state->ht_bits[TJEI_LUMA_DC], state->ht_vals[TJEI_LUMA_DC], TJEI_DC, 0);
 4002190:	e0bffa17 	ldw	r2,-24(fp)
 4002194:	10c30117 	ldw	r3,3076(r2)
 4002198:	e0bffa17 	ldw	r2,-24(fp)
 400219c:	10830517 	ldw	r2,3092(r2)
 40021a0:	d8000015 	stw	zero,0(sp)
 40021a4:	000f883a 	mov	r7,zero
 40021a8:	100d883a 	mov	r6,r2
 40021ac:	180b883a 	mov	r5,r3
 40021b0:	e13ffa17 	ldw	r4,-24(fp)
 40021b4:	40004e40 	call	40004e4 <tjei_write_DHT>
		tjei_write_DHT(state, state->ht_bits[TJEI_LUMA_AC], state->ht_vals[TJEI_LUMA_AC], TJEI_AC, 0);
 40021b8:	e0bffa17 	ldw	r2,-24(fp)
 40021bc:	10c30217 	ldw	r3,3080(r2)
 40021c0:	e0bffa17 	ldw	r2,-24(fp)
 40021c4:	10830617 	ldw	r2,3096(r2)
 40021c8:	d8000015 	stw	zero,0(sp)
 40021cc:	01c00044 	movi	r7,1
 40021d0:	100d883a 	mov	r6,r2
 40021d4:	180b883a 	mov	r5,r3
 40021d8:	e13ffa17 	ldw	r4,-24(fp)
 40021dc:	40004e40 	call	40004e4 <tjei_write_DHT>
		tjei_write_DHT(state, state->ht_bits[TJEI_CHROMA_DC], state->ht_vals[TJEI_CHROMA_DC], TJEI_DC, 1);
 40021e0:	e0bffa17 	ldw	r2,-24(fp)
 40021e4:	10c30317 	ldw	r3,3084(r2)
 40021e8:	e0bffa17 	ldw	r2,-24(fp)
 40021ec:	11030717 	ldw	r4,3100(r2)
 40021f0:	00800044 	movi	r2,1
 40021f4:	d8800015 	stw	r2,0(sp)
 40021f8:	000f883a 	mov	r7,zero
 40021fc:	200d883a 	mov	r6,r4
 4002200:	180b883a 	mov	r5,r3
 4002204:	e13ffa17 	ldw	r4,-24(fp)
 4002208:	40004e40 	call	40004e4 <tjei_write_DHT>
		tjei_write_DHT(state, state->ht_bits[TJEI_CHROMA_AC], state->ht_vals[TJEI_CHROMA_AC], TJEI_AC, 1);
 400220c:	e0bffa17 	ldw	r2,-24(fp)
 4002210:	10c30417 	ldw	r3,3088(r2)
 4002214:	e0bffa17 	ldw	r2,-24(fp)
 4002218:	11030817 	ldw	r4,3104(r2)
 400221c:	00800044 	movi	r2,1
 4002220:	d8800015 	stw	r2,0(sp)
 4002224:	01c00044 	movi	r7,1
 4002228:	200d883a 	mov	r6,r4
 400222c:	180b883a 	mov	r5,r3
 4002230:	e13ffa17 	ldw	r4,-24(fp)
 4002234:	40004e40 	call	40004e4 <tjei_write_DHT>

		// Write start of scan
		{
			TJEScanHeader header;
			header.SOS = tjei_be_word(0xffda);
 4002238:	013ff694 	movui	r4,65498
 400223c:	400026c0 	call	400026c <tjei_be_word>
 4002240:	100b883a 	mov	r5,r2
 4002244:	28bfffcc 	andi	r2,r5,65535
 4002248:	11003fcc 	andi	r4,r2,255
 400224c:	e0bfecc3 	ldbu	r2,-77(fp)
 4002250:	1004703a 	and	r2,r2,zero
 4002254:	1007883a 	mov	r3,r2
 4002258:	2005883a 	mov	r2,r4
 400225c:	1884b03a 	or	r2,r3,r2
 4002260:	e0bfecc5 	stb	r2,-77(fp)
 4002264:	28bfffcc 	andi	r2,r5,65535
 4002268:	1004d23a 	srli	r2,r2,8
 400226c:	113fffcc 	andi	r4,r2,65535
 4002270:	e0bfed03 	ldbu	r2,-76(fp)
 4002274:	1004703a 	and	r2,r2,zero
 4002278:	1007883a 	mov	r3,r2
 400227c:	2005883a 	mov	r2,r4
 4002280:	1884b03a 	or	r2,r3,r2
 4002284:	e0bfed05 	stb	r2,-76(fp)
			header.len = tjei_be_word((uint16_t)(6 + (sizeof(TJEFrameComponentSpec) * 3)));
 4002288:	01000304 	movi	r4,12
 400228c:	400026c0 	call	400026c <tjei_be_word>
 4002290:	100b883a 	mov	r5,r2
 4002294:	28bfffcc 	andi	r2,r5,65535
 4002298:	11003fcc 	andi	r4,r2,255
 400229c:	e0bfed43 	ldbu	r2,-75(fp)
 40022a0:	1004703a 	and	r2,r2,zero
 40022a4:	1007883a 	mov	r3,r2
 40022a8:	2005883a 	mov	r2,r4
 40022ac:	1884b03a 	or	r2,r3,r2
 40022b0:	e0bfed45 	stb	r2,-75(fp)
 40022b4:	28bfffcc 	andi	r2,r5,65535
 40022b8:	1004d23a 	srli	r2,r2,8
 40022bc:	113fffcc 	andi	r4,r2,65535
 40022c0:	e0bfed83 	ldbu	r2,-74(fp)
 40022c4:	1004703a 	and	r2,r2,zero
 40022c8:	1007883a 	mov	r3,r2
 40022cc:	2005883a 	mov	r2,r4
 40022d0:	1884b03a 	or	r2,r3,r2
 40022d4:	e0bfed85 	stb	r2,-74(fp)
			header.num_components = 3;
 40022d8:	008000c4 	movi	r2,3
 40022dc:	e0bfedc5 	stb	r2,-73(fp)

			uint8_t tables[3] = {
 40022e0:	e03ff045 	stb	zero,-63(fp)
 40022e4:	00800444 	movi	r2,17
 40022e8:	e0bff085 	stb	r2,-62(fp)
 40022ec:	00800444 	movi	r2,17
 40022f0:	e0bff0c5 	stb	r2,-61(fp)
				0x00,
				0x11,
				0x11,
			};
			for (int i = 0; i < 3; ++i) {
 40022f4:	e03e8d15 	stw	zero,-1484(fp)
 40022f8:	00001506 	br	4002350 <tjei_encode_main+0x7dc>
				TJEFrameComponentSpec cs;
				// Must be equal to component_id from frame header above.
				cs.component_id = (uint8_t)(i + 1);
 40022fc:	e0be8d17 	ldw	r2,-1484(fp)
 4002300:	10800044 	addi	r2,r2,1
 4002304:	e0bff105 	stb	r2,-60(fp)
				cs.dc_ac = (uint8_t)tables[i];
 4002308:	e0fff044 	addi	r3,fp,-63
 400230c:	e0be8d17 	ldw	r2,-1484(fp)
 4002310:	1885883a 	add	r2,r3,r2
 4002314:	10800003 	ldbu	r2,0(r2)
 4002318:	e0bff145 	stb	r2,-59(fp)

				header.component_spec[i] = cs;
 400231c:	e0be8d17 	ldw	r2,-1484(fp)
 4002320:	10800084 	addi	r2,r2,2
 4002324:	1085883a 	add	r2,r2,r2
 4002328:	e13e8a04 	addi	r4,fp,-1496
 400232c:	2085883a 	add	r2,r4,r2
 4002330:	108162c4 	addi	r2,r2,1419
 4002334:	e0fff103 	ldbu	r3,-60(fp)
 4002338:	10c00045 	stb	r3,1(r2)
 400233c:	e0fff143 	ldbu	r3,-59(fp)
 4002340:	10c00085 	stb	r3,2(r2)
			uint8_t tables[3] = {
				0x00,
				0x11,
				0x11,
			};
			for (int i = 0; i < 3; ++i) {
 4002344:	e0be8d17 	ldw	r2,-1484(fp)
 4002348:	10800044 	addi	r2,r2,1
 400234c:	e0be8d15 	stw	r2,-1484(fp)
 4002350:	e0be8d17 	ldw	r2,-1484(fp)
 4002354:	108000d0 	cmplti	r2,r2,3
 4002358:	103fe81e 	bne	r2,zero,40022fc <__alt_data_end+0xfc0022fc>
				cs.component_id = (uint8_t)(i + 1);
				cs.dc_ac = (uint8_t)tables[i];

				header.component_spec[i] = cs;
			}
			header.first = 0;
 400235c:	e03fef85 	stb	zero,-66(fp)
			header.last = 63;
 4002360:	00800fc4 	movi	r2,63
 4002364:	e0bfefc5 	stb	r2,-65(fp)
			header.ah_al = 0;
 4002368:	e03ff005 	stb	zero,-64(fp)
			tjei_write(state, &header, sizeof(TJEScanHeader), 1);
 400236c:	e0bfecc4 	addi	r2,fp,-77
 4002370:	01c00044 	movi	r7,1
 4002374:	01800384 	movi	r6,14
 4002378:	100b883a 	mov	r5,r2
 400237c:	e13ffa17 	ldw	r4,-24(fp)
 4002380:	40002bc0 	call	40002bc <tjei_write>
		float du_y[64];
		float du_b[64];
		float du_r[64];

		// Set diff to 0.
		int pred_y = 0;
 4002384:	e03fdc15 	stw	zero,-144(fp)
		int pred_b = 0;
 4002388:	e03fdd15 	stw	zero,-140(fp)
		int pred_r = 0;
 400238c:	e03fde15 	stw	zero,-136(fp)

		// Bit stack
		uint32_t bitbuffer = 0;
 4002390:	e03fdf15 	stw	zero,-132(fp)
		uint32_t location = 0;
 4002394:	e03fe015 	stw	zero,-128(fp)


		for (int y = 0; y < height; y += 8) {
 4002398:	e03e8e15 	stw	zero,-1480(fp)
 400239c:	00014d06 	br	40028d4 <tjei_encode_main+0xd60>
			for (int x = 0; x < width; x += 8) {
 40023a0:	e03e8f15 	stw	zero,-1476(fp)
 40023a4:	00014506 	br	40028bc <tjei_encode_main+0xd48>
				// Block loop: ====
				for (int off_y = 0; off_y < 8; ++off_y) {
 40023a8:	e03e9015 	stw	zero,-1472(fp)
 40023ac:	0000fb06 	br	400279c <tjei_encode_main+0xc28>
					for (int off_x = 0; off_x < 8; ++off_x) {
 40023b0:	e03e9115 	stw	zero,-1468(fp)
 40023b4:	0000f306 	br	4002784 <tjei_encode_main+0xc10>
						int block_index = (off_y * 8 + off_x);
 40023b8:	e0be9017 	ldw	r2,-1472(fp)
 40023bc:	100690fa 	slli	r3,r2,3
 40023c0:	e0be9117 	ldw	r2,-1468(fp)
 40023c4:	1885883a 	add	r2,r3,r2
 40023c8:	e0be9515 	stw	r2,-1452(fp)

						int src_index = (((y + off_y) * width) + (x + off_x)) * src_num_components;
 40023cc:	e0fe8e17 	ldw	r3,-1480(fp)
 40023d0:	e0be9017 	ldw	r2,-1472(fp)
 40023d4:	1885883a 	add	r2,r3,r2
 40023d8:	e17ffc17 	ldw	r5,-16(fp)
 40023dc:	1009883a 	mov	r4,r2
 40023e0:	40036040 	call	4003604 <__mulsi3>
 40023e4:	1009883a 	mov	r4,r2
 40023e8:	e0fe8f17 	ldw	r3,-1476(fp)
 40023ec:	e0be9117 	ldw	r2,-1468(fp)
 40023f0:	1885883a 	add	r2,r3,r2
 40023f4:	2085883a 	add	r2,r4,r2
 40023f8:	e1400217 	ldw	r5,8(fp)
 40023fc:	1009883a 	mov	r4,r2
 4002400:	40036040 	call	4003604 <__mulsi3>
 4002404:	e0be9215 	stw	r2,-1464(fp)

						int col = x + off_x;
 4002408:	e0fe8f17 	ldw	r3,-1476(fp)
 400240c:	e0be9117 	ldw	r2,-1468(fp)
 4002410:	1885883a 	add	r2,r3,r2
 4002414:	e0be9615 	stw	r2,-1448(fp)
						int row = y + off_y;
 4002418:	e0fe8e17 	ldw	r3,-1480(fp)
 400241c:	e0be9017 	ldw	r2,-1472(fp)
 4002420:	1885883a 	add	r2,r3,r2
 4002424:	e0be9715 	stw	r2,-1444(fp)

						if (row >= height) {
 4002428:	e0fe9717 	ldw	r3,-1444(fp)
 400242c:	e0bffd17 	ldw	r2,-12(fp)
 4002430:	18800e16 	blt	r3,r2,400246c <tjei_encode_main+0x8f8>
							src_index -= (width * (row - height + 1)) * src_num_components;
 4002434:	e0fe9717 	ldw	r3,-1444(fp)
 4002438:	e0bffd17 	ldw	r2,-12(fp)
 400243c:	1885c83a 	sub	r2,r3,r2
 4002440:	10800044 	addi	r2,r2,1
 4002444:	e17ffc17 	ldw	r5,-16(fp)
 4002448:	1009883a 	mov	r4,r2
 400244c:	40036040 	call	4003604 <__mulsi3>
 4002450:	e1400217 	ldw	r5,8(fp)
 4002454:	1009883a 	mov	r4,r2
 4002458:	40036040 	call	4003604 <__mulsi3>
 400245c:	1007883a 	mov	r3,r2
 4002460:	e0be9217 	ldw	r2,-1464(fp)
 4002464:	10c5c83a 	sub	r2,r2,r3
 4002468:	e0be9215 	stw	r2,-1464(fp)
						}
						if (col >= width) {
 400246c:	e0fe9617 	ldw	r3,-1448(fp)
 4002470:	e0bffc17 	ldw	r2,-16(fp)
 4002474:	18800b16 	blt	r3,r2,40024a4 <tjei_encode_main+0x930>
							src_index -= (col - width + 1) * src_num_components;
 4002478:	e0fe9617 	ldw	r3,-1448(fp)
 400247c:	e0bffc17 	ldw	r2,-16(fp)
 4002480:	1885c83a 	sub	r2,r3,r2
 4002484:	10800044 	addi	r2,r2,1
 4002488:	e1400217 	ldw	r5,8(fp)
 400248c:	1009883a 	mov	r4,r2
 4002490:	40036040 	call	4003604 <__mulsi3>
 4002494:	1007883a 	mov	r3,r2
 4002498:	e0be9217 	ldw	r2,-1464(fp)
 400249c:	10c5c83a 	sub	r2,r2,r3
 40024a0:	e0be9215 	stw	r2,-1464(fp)
						}
						assert(src_index < width * height * src_num_components);
 40024a4:	e17ffd17 	ldw	r5,-12(fp)
 40024a8:	e13ffc17 	ldw	r4,-16(fp)
 40024ac:	40036040 	call	4003604 <__mulsi3>
 40024b0:	e1400217 	ldw	r5,8(fp)
 40024b4:	1009883a 	mov	r4,r2
 40024b8:	40036040 	call	4003604 <__mulsi3>
 40024bc:	1007883a 	mov	r3,r2
 40024c0:	e0be9217 	ldw	r2,-1464(fp)
 40024c4:	10c00816 	blt	r2,r3,40024e8 <tjei_encode_main+0x974>
 40024c8:	01c10074 	movhi	r7,1025
 40024cc:	39f4f004 	addi	r7,r7,-11328
 40024d0:	01810074 	movhi	r6,1025
 40024d4:	31b52604 	addi	r6,r6,-11112
 40024d8:	01410384 	movi	r5,1038
 40024dc:	01010074 	movhi	r4,1025
 40024e0:	2134c104 	addi	r4,r4,-11516
 40024e4:	4004afc0 	call	4004afc <__assert_func>

						uint8_t r = src_data[src_index + 0];
 40024e8:	e0be9217 	ldw	r2,-1464(fp)
 40024ec:	e0fffb17 	ldw	r3,-20(fp)
 40024f0:	1885883a 	add	r2,r3,r2
 40024f4:	10800003 	ldbu	r2,0(r2)
 40024f8:	e0be9805 	stb	r2,-1440(fp)
						uint8_t g = src_data[src_index + 1];
 40024fc:	e0be9217 	ldw	r2,-1464(fp)
 4002500:	10800044 	addi	r2,r2,1
 4002504:	e0fffb17 	ldw	r3,-20(fp)
 4002508:	1885883a 	add	r2,r3,r2
 400250c:	10800003 	ldbu	r2,0(r2)
 4002510:	e0be9845 	stb	r2,-1439(fp)
						uint8_t b = src_data[src_index + 2];
 4002514:	e0be9217 	ldw	r2,-1464(fp)
 4002518:	10800084 	addi	r2,r2,2
 400251c:	e0fffb17 	ldw	r3,-20(fp)
 4002520:	1885883a 	add	r2,r3,r2
 4002524:	10800003 	ldbu	r2,0(r2)
 4002528:	e0be9885 	stb	r2,-1438(fp)

						float luma = 0.299f * r + 0.587f * g + 0.114f * b - 128;
 400252c:	e0be9803 	ldbu	r2,-1440(fp)
 4002530:	1009883a 	mov	r4,r2
 4002534:	40049740 	call	4004974 <__floatsisf>
 4002538:	1007883a 	mov	r3,r2
 400253c:	014fa674 	movhi	r5,16025
 4002540:	2945a1c4 	addi	r5,r5,5767
 4002544:	1809883a 	mov	r4,r3
 4002548:	4003ff00 	call	4003ff0 <__mulsf3>
 400254c:	1007883a 	mov	r3,r2
 4002550:	1821883a 	mov	r16,r3
 4002554:	e0be9843 	ldbu	r2,-1439(fp)
 4002558:	1009883a 	mov	r4,r2
 400255c:	40049740 	call	4004974 <__floatsisf>
 4002560:	1007883a 	mov	r3,r2
 4002564:	014fc5b4 	movhi	r5,16150
 4002568:	29516884 	addi	r5,r5,17826
 400256c:	1809883a 	mov	r4,r3
 4002570:	4003ff00 	call	4003ff0 <__mulsf3>
 4002574:	1007883a 	mov	r3,r2
 4002578:	1805883a 	mov	r2,r3
 400257c:	100b883a 	mov	r5,r2
 4002580:	8009883a 	mov	r4,r16
 4002584:	400362c0 	call	400362c <__addsf3>
 4002588:	1007883a 	mov	r3,r2
 400258c:	1821883a 	mov	r16,r3
 4002590:	e0be9883 	ldbu	r2,-1438(fp)
 4002594:	1009883a 	mov	r4,r2
 4002598:	40049740 	call	4004974 <__floatsisf>
 400259c:	1007883a 	mov	r3,r2
 40025a0:	014f7a74 	movhi	r5,15849
 40025a4:	295e3544 	addi	r5,r5,30933
 40025a8:	1809883a 	mov	r4,r3
 40025ac:	4003ff00 	call	4003ff0 <__mulsf3>
 40025b0:	1007883a 	mov	r3,r2
 40025b4:	1805883a 	mov	r2,r3
 40025b8:	100b883a 	mov	r5,r2
 40025bc:	8009883a 	mov	r4,r16
 40025c0:	400362c0 	call	400362c <__addsf3>
 40025c4:	1007883a 	mov	r3,r2
 40025c8:	1805883a 	mov	r2,r3
 40025cc:	0150c034 	movhi	r5,17152
 40025d0:	1009883a 	mov	r4,r2
 40025d4:	40044200 	call	4004420 <__subsf3>
 40025d8:	1007883a 	mov	r3,r2
 40025dc:	e0fe9915 	stw	r3,-1436(fp)
						float cb = -0.1687f * r - 0.3313f * g + 0.5f * b;
 40025e0:	e0be9803 	ldbu	r2,-1440(fp)
 40025e4:	1009883a 	mov	r4,r2
 40025e8:	40049740 	call	4004974 <__floatsisf>
 40025ec:	1007883a 	mov	r3,r2
 40025f0:	016f8b74 	movhi	r5,48685
 40025f4:	296fec44 	addi	r5,r5,-16463
 40025f8:	1809883a 	mov	r4,r3
 40025fc:	4003ff00 	call	4003ff0 <__mulsf3>
 4002600:	1007883a 	mov	r3,r2
 4002604:	1821883a 	mov	r16,r3
 4002608:	e0be9843 	ldbu	r2,-1439(fp)
 400260c:	1009883a 	mov	r4,r2
 4002610:	40049740 	call	4004974 <__floatsisf>
 4002614:	1007883a 	mov	r3,r2
 4002618:	014faab4 	movhi	r5,16042
 400261c:	296809c4 	addi	r5,r5,-24537
 4002620:	1809883a 	mov	r4,r3
 4002624:	4003ff00 	call	4003ff0 <__mulsf3>
 4002628:	1007883a 	mov	r3,r2
 400262c:	1805883a 	mov	r2,r3
 4002630:	100b883a 	mov	r5,r2
 4002634:	8009883a 	mov	r4,r16
 4002638:	40044200 	call	4004420 <__subsf3>
 400263c:	1007883a 	mov	r3,r2
 4002640:	1821883a 	mov	r16,r3
 4002644:	e0be9883 	ldbu	r2,-1438(fp)
 4002648:	1009883a 	mov	r4,r2
 400264c:	40049740 	call	4004974 <__floatsisf>
 4002650:	1007883a 	mov	r3,r2
 4002654:	014fc034 	movhi	r5,16128
 4002658:	1809883a 	mov	r4,r3
 400265c:	4003ff00 	call	4003ff0 <__mulsf3>
 4002660:	1007883a 	mov	r3,r2
 4002664:	1805883a 	mov	r2,r3
 4002668:	100b883a 	mov	r5,r2
 400266c:	8009883a 	mov	r4,r16
 4002670:	400362c0 	call	400362c <__addsf3>
 4002674:	1007883a 	mov	r3,r2
 4002678:	e0fe9a15 	stw	r3,-1432(fp)
						float cr = 0.5f * r - 0.4187f * g - 0.0813f * b;
 400267c:	e0be9803 	ldbu	r2,-1440(fp)
 4002680:	1009883a 	mov	r4,r2
 4002684:	40049740 	call	4004974 <__floatsisf>
 4002688:	1007883a 	mov	r3,r2
 400268c:	014fc034 	movhi	r5,16128
 4002690:	1809883a 	mov	r4,r3
 4002694:	4003ff00 	call	4003ff0 <__mulsf3>
 4002698:	1007883a 	mov	r3,r2
 400269c:	1821883a 	mov	r16,r3
 40026a0:	e0be9843 	ldbu	r2,-1439(fp)
 40026a4:	1009883a 	mov	r4,r2
 40026a8:	40049740 	call	4004974 <__floatsisf>
 40026ac:	1007883a 	mov	r3,r2
 40026b0:	014fb5b4 	movhi	r5,16086
 40026b4:	2957f644 	addi	r5,r5,24537
 40026b8:	1809883a 	mov	r4,r3
 40026bc:	4003ff00 	call	4003ff0 <__mulsf3>
 40026c0:	1007883a 	mov	r3,r2
 40026c4:	1805883a 	mov	r2,r3
 40026c8:	100b883a 	mov	r5,r2
 40026cc:	8009883a 	mov	r4,r16
 40026d0:	40044200 	call	4004420 <__subsf3>
 40026d4:	1007883a 	mov	r3,r2
 40026d8:	1821883a 	mov	r16,r3
 40026dc:	e0be9883 	ldbu	r2,-1438(fp)
 40026e0:	1009883a 	mov	r4,r2
 40026e4:	40049740 	call	4004974 <__floatsisf>
 40026e8:	1007883a 	mov	r3,r2
 40026ec:	014f69f4 	movhi	r5,15783
 40026f0:	29602744 	addi	r5,r5,-32611
 40026f4:	1809883a 	mov	r4,r3
 40026f8:	4003ff00 	call	4003ff0 <__mulsf3>
 40026fc:	1007883a 	mov	r3,r2
 4002700:	1805883a 	mov	r2,r3
 4002704:	100b883a 	mov	r5,r2
 4002708:	8009883a 	mov	r4,r16
 400270c:	40044200 	call	4004420 <__subsf3>
 4002710:	1007883a 	mov	r3,r2
 4002714:	e0fe9b15 	stw	r3,-1428(fp)

						du_y[block_index] = luma;
 4002718:	e0be9517 	ldw	r2,-1452(fp)
 400271c:	1085883a 	add	r2,r2,r2
 4002720:	1085883a 	add	r2,r2,r2
 4002724:	e0fe8a04 	addi	r3,fp,-1496
 4002728:	1885883a 	add	r2,r3,r2
 400272c:	10809204 	addi	r2,r2,584
 4002730:	e0fe9917 	ldw	r3,-1436(fp)
 4002734:	10c00015 	stw	r3,0(r2)
						du_b[block_index] = cb;
 4002738:	e0be9517 	ldw	r2,-1452(fp)
 400273c:	1085883a 	add	r2,r2,r2
 4002740:	1085883a 	add	r2,r2,r2
 4002744:	e13e8a04 	addi	r4,fp,-1496
 4002748:	2085883a 	add	r2,r4,r2
 400274c:	1080d204 	addi	r2,r2,840
 4002750:	e0fe9a17 	ldw	r3,-1432(fp)
 4002754:	10c00015 	stw	r3,0(r2)
						du_r[block_index] = cr;
 4002758:	e0be9517 	ldw	r2,-1452(fp)
 400275c:	1085883a 	add	r2,r2,r2
 4002760:	1085883a 	add	r2,r2,r2
 4002764:	e0fe8a04 	addi	r3,fp,-1496
 4002768:	1885883a 	add	r2,r3,r2
 400276c:	10811204 	addi	r2,r2,1096
 4002770:	e0fe9b17 	ldw	r3,-1428(fp)
 4002774:	10c00015 	stw	r3,0(r2)

		for (int y = 0; y < height; y += 8) {
			for (int x = 0; x < width; x += 8) {
				// Block loop: ====
				for (int off_y = 0; off_y < 8; ++off_y) {
					for (int off_x = 0; off_x < 8; ++off_x) {
 4002778:	e0be9117 	ldw	r2,-1468(fp)
 400277c:	10800044 	addi	r2,r2,1
 4002780:	e0be9115 	stw	r2,-1468(fp)
 4002784:	e0be9117 	ldw	r2,-1468(fp)
 4002788:	10800210 	cmplti	r2,r2,8
 400278c:	103f0a1e 	bne	r2,zero,40023b8 <__alt_data_end+0xfc0023b8>


		for (int y = 0; y < height; y += 8) {
			for (int x = 0; x < width; x += 8) {
				// Block loop: ====
				for (int off_y = 0; off_y < 8; ++off_y) {
 4002790:	e0be9017 	ldw	r2,-1472(fp)
 4002794:	10800044 	addi	r2,r2,1
 4002798:	e0be9015 	stw	r2,-1472(fp)
 400279c:	e0be9017 	ldw	r2,-1472(fp)
 40027a0:	10800210 	cmplti	r2,r2,8
 40027a4:	103f021e 	bne	r2,zero,40023b0 <__alt_data_end+0xfc0023b0>
#if TJE_USE_FAST_DCT
					pqt.luma,
#else
					state->qt_luma,
#endif
					state->ehuffsize[TJEI_LUMA_DC], state->ehuffcode[TJEI_LUMA_DC],
 40027a8:	e1fffa17 	ldw	r7,-24(fp)
 40027ac:	e0bffa17 	ldw	r2,-24(fp)
 40027b0:	10810104 	addi	r2,r2,1028
					state->ehuffsize[TJEI_LUMA_AC], state->ehuffcode[TJEI_LUMA_AC],
 40027b4:	e0fffa17 	ldw	r3,-24(fp)
 40027b8:	18c04044 	addi	r3,r3,257
 40027bc:	e13ffa17 	ldw	r4,-24(fp)
 40027c0:	21018104 	addi	r4,r4,1540
						du_b[block_index] = cb;
						du_r[block_index] = cr;
					}
				}

				tjei_encode_and_write_MCU(state, du_y,
 40027c4:	e17e9c04 	addi	r5,fp,-1424
 40027c8:	29804004 	addi	r6,r5,256
 40027cc:	e23f1c04 	addi	r8,fp,-912
 40027d0:	e17fe004 	addi	r5,fp,-128
 40027d4:	d9400515 	stw	r5,20(sp)
 40027d8:	e17fdf04 	addi	r5,fp,-132
 40027dc:	d9400415 	stw	r5,16(sp)
 40027e0:	e17fdc04 	addi	r5,fp,-144
 40027e4:	d9400315 	stw	r5,12(sp)
 40027e8:	d9000215 	stw	r4,8(sp)
 40027ec:	d8c00115 	stw	r3,4(sp)
 40027f0:	d8800015 	stw	r2,0(sp)
 40027f4:	400b883a 	mov	r5,r8
 40027f8:	e13ffa17 	ldw	r4,-24(fp)
 40027fc:	40013380 	call	4001338 <tjei_encode_and_write_MCU>
#if TJE_USE_FAST_DCT
					pqt.chroma,
#else
					state->qt_chroma,
#endif
					state->ehuffsize[TJEI_CHROMA_DC], state->ehuffcode[TJEI_CHROMA_DC],
 4002800:	e0bffa17 	ldw	r2,-24(fp)
 4002804:	11c08084 	addi	r7,r2,514
 4002808:	e0bffa17 	ldw	r2,-24(fp)
 400280c:	10820104 	addi	r2,r2,2052
					state->ehuffsize[TJEI_CHROMA_AC], state->ehuffcode[TJEI_CHROMA_AC],
 4002810:	e0fffa17 	ldw	r3,-24(fp)
 4002814:	18c0c0c4 	addi	r3,r3,771
 4002818:	e13ffa17 	ldw	r4,-24(fp)
 400281c:	21028104 	addi	r4,r4,2564
					state->qt_luma,
#endif
					state->ehuffsize[TJEI_LUMA_DC], state->ehuffcode[TJEI_LUMA_DC],
					state->ehuffsize[TJEI_LUMA_AC], state->ehuffcode[TJEI_LUMA_AC],
					&pred_y, &bitbuffer, &location);
				tjei_encode_and_write_MCU(state, du_b,
 4002820:	e1be9c04 	addi	r6,fp,-1424
 4002824:	e23f5c04 	addi	r8,fp,-656
 4002828:	e17fe004 	addi	r5,fp,-128
 400282c:	d9400515 	stw	r5,20(sp)
 4002830:	e17fdf04 	addi	r5,fp,-132
 4002834:	d9400415 	stw	r5,16(sp)
 4002838:	e17fdd04 	addi	r5,fp,-140
 400283c:	d9400315 	stw	r5,12(sp)
 4002840:	d9000215 	stw	r4,8(sp)
 4002844:	d8c00115 	stw	r3,4(sp)
 4002848:	d8800015 	stw	r2,0(sp)
 400284c:	400b883a 	mov	r5,r8
 4002850:	e13ffa17 	ldw	r4,-24(fp)
 4002854:	40013380 	call	4001338 <tjei_encode_and_write_MCU>
#if TJE_USE_FAST_DCT
					pqt.chroma,
#else
					state->qt_chroma,
#endif
					state->ehuffsize[TJEI_CHROMA_DC], state->ehuffcode[TJEI_CHROMA_DC],
 4002858:	e0bffa17 	ldw	r2,-24(fp)
 400285c:	11c08084 	addi	r7,r2,514
 4002860:	e0bffa17 	ldw	r2,-24(fp)
 4002864:	10820104 	addi	r2,r2,2052
					state->ehuffsize[TJEI_CHROMA_AC], state->ehuffcode[TJEI_CHROMA_AC],
 4002868:	e0fffa17 	ldw	r3,-24(fp)
 400286c:	18c0c0c4 	addi	r3,r3,771
 4002870:	e13ffa17 	ldw	r4,-24(fp)
 4002874:	21028104 	addi	r4,r4,2564
					state->qt_chroma,
#endif
					state->ehuffsize[TJEI_CHROMA_DC], state->ehuffcode[TJEI_CHROMA_DC],
					state->ehuffsize[TJEI_CHROMA_AC], state->ehuffcode[TJEI_CHROMA_AC],
					&pred_b, &bitbuffer, &location);
				tjei_encode_and_write_MCU(state, du_r,
 4002878:	e1be9c04 	addi	r6,fp,-1424
 400287c:	e23f9c04 	addi	r8,fp,-400
 4002880:	e17fe004 	addi	r5,fp,-128
 4002884:	d9400515 	stw	r5,20(sp)
 4002888:	e17fdf04 	addi	r5,fp,-132
 400288c:	d9400415 	stw	r5,16(sp)
 4002890:	e17fde04 	addi	r5,fp,-136
 4002894:	d9400315 	stw	r5,12(sp)
 4002898:	d9000215 	stw	r4,8(sp)
 400289c:	d8c00115 	stw	r3,4(sp)
 40028a0:	d8800015 	stw	r2,0(sp)
 40028a4:	400b883a 	mov	r5,r8
 40028a8:	e13ffa17 	ldw	r4,-24(fp)
 40028ac:	40013380 	call	4001338 <tjei_encode_and_write_MCU>
		uint32_t bitbuffer = 0;
		uint32_t location = 0;


		for (int y = 0; y < height; y += 8) {
			for (int x = 0; x < width; x += 8) {
 40028b0:	e0be8f17 	ldw	r2,-1476(fp)
 40028b4:	10800204 	addi	r2,r2,8
 40028b8:	e0be8f15 	stw	r2,-1476(fp)
 40028bc:	e0fe8f17 	ldw	r3,-1476(fp)
 40028c0:	e0bffc17 	ldw	r2,-16(fp)
 40028c4:	18beb816 	blt	r3,r2,40023a8 <__alt_data_end+0xfc0023a8>
		// Bit stack
		uint32_t bitbuffer = 0;
		uint32_t location = 0;


		for (int y = 0; y < height; y += 8) {
 40028c8:	e0be8e17 	ldw	r2,-1480(fp)
 40028cc:	10800204 	addi	r2,r2,8
 40028d0:	e0be8e15 	stw	r2,-1480(fp)
 40028d4:	e0fe8e17 	ldw	r3,-1480(fp)
 40028d8:	e0bffd17 	ldw	r2,-12(fp)
 40028dc:	18beb016 	blt	r3,r2,40023a0 <__alt_data_end+0xfc0023a0>
			}
		}

		// Finish the image.
		{ // Flush
			if (location > 0 && location < 8) {
 40028e0:	e0bfe017 	ldw	r2,-128(fp)
 40028e4:	10001026 	beq	r2,zero,4002928 <tjei_encode_main+0xdb4>
 40028e8:	e0bfe017 	ldw	r2,-128(fp)
 40028ec:	10800228 	cmpgeui	r2,r2,8
 40028f0:	10000d1e 	bne	r2,zero,4002928 <tjei_encode_main+0xdb4>
				tjei_write_bits(state, &bitbuffer, &location, (uint16_t)(8 - location), 0);
 40028f4:	e0bfe017 	ldw	r2,-128(fp)
 40028f8:	1007883a 	mov	r3,r2
 40028fc:	00800204 	movi	r2,8
 4002900:	10c5c83a 	sub	r2,r2,r3
 4002904:	113fffcc 	andi	r4,r2,65535
 4002908:	e0ffe004 	addi	r3,fp,-128
 400290c:	e0bfdf04 	addi	r2,fp,-132
 4002910:	d8000015 	stw	zero,0(sp)
 4002914:	200f883a 	mov	r7,r4
 4002918:	180d883a 	mov	r6,r3
 400291c:	100b883a 	mov	r5,r2
 4002920:	e13ffa17 	ldw	r4,-24(fp)
 4002924:	40009e00 	call	40009e0 <tjei_write_bits>
			}
		}
		uint16_t EOI = tjei_be_word(0xffd9);
 4002928:	013ff654 	movui	r4,65497
 400292c:	400026c0 	call	400026c <tjei_be_word>
 4002930:	e0bfe10d 	sth	r2,-124(fp)
		tjei_write(state, &EOI, sizeof(uint16_t), 1);
 4002934:	e0bfe104 	addi	r2,fp,-124
 4002938:	01c00044 	movi	r7,1
 400293c:	01800084 	movi	r6,2
 4002940:	100b883a 	mov	r5,r2
 4002944:	e13ffa17 	ldw	r4,-24(fp)
 4002948:	40002bc0 	call	40002bc <tjei_write>

		if (state->output_buffer_count) {
 400294c:	e0bffa17 	ldw	r2,-24(fp)
 4002950:	10832b17 	ldw	r2,3244(r2)
 4002954:	10000c26 	beq	r2,zero,4002988 <tjei_encode_main+0xe14>
			state->write_context.func(state->write_context.context, state->output_buffer, (int)state->output_buffer_count);
 4002958:	e0bffa17 	ldw	r2,-24(fp)
 400295c:	10832a17 	ldw	r2,3240(r2)
 4002960:	e0fffa17 	ldw	r3,-24(fp)
 4002964:	19032917 	ldw	r4,3236(r3)
 4002968:	e0fffa17 	ldw	r3,-24(fp)
 400296c:	19432c04 	addi	r5,r3,3248
 4002970:	e0fffa17 	ldw	r3,-24(fp)
 4002974:	18c32b17 	ldw	r3,3244(r3)
 4002978:	180d883a 	mov	r6,r3
 400297c:	103ee83a 	callr	r2
			state->output_buffer_count = 0;
 4002980:	e0bffa17 	ldw	r2,-24(fp)
 4002984:	10032b15 	stw	zero,3244(r2)
		}

		return 1;
 4002988:	00800044 	movi	r2,1
	}
 400298c:	e6fffe04 	addi	sp,fp,-8
 4002990:	dfc00317 	ldw	ra,12(sp)
 4002994:	df000217 	ldw	fp,8(sp)
 4002998:	dc400117 	ldw	r17,4(sp)
 400299c:	dc000017 	ldw	r16,0(sp)
 40029a0:	dec00404 	addi	sp,sp,16
 40029a4:	f800283a 	ret

040029a8 <tje_encode_with_func>:
		const int quality,
		const int width,
		const int height,
		const int num_components,
		const unsigned char* src_data)
	{
 40029a8:	defbc704 	addi	sp,sp,-4324
 40029ac:	dfc43815 	stw	ra,4320(sp)
 40029b0:	df043715 	stw	fp,4316(sp)
 40029b4:	df043704 	addi	fp,sp,4316
 40029b8:	e13ffc15 	stw	r4,-16(fp)
 40029bc:	e17ffd15 	stw	r5,-12(fp)
 40029c0:	e1bffe15 	stw	r6,-8(fp)
 40029c4:	e1ffff15 	stw	r7,-4(fp)
		if (quality < 1 || quality > 3) {
 40029c8:	e0bffe17 	ldw	r2,-8(fp)
 40029cc:	0080030e 	bge	zero,r2,40029dc <tje_encode_with_func+0x34>
 40029d0:	e0bffe17 	ldw	r2,-8(fp)
 40029d4:	10800110 	cmplti	r2,r2,4
 40029d8:	1000021e 	bne	r2,zero,40029e4 <tje_encode_with_func+0x3c>
			tje_log("[ERROR] -- Valid 'quality' values are 1 (lowest), 2, or 3 (highest)\n");
			return 0;
 40029dc:	0005883a 	mov	r2,zero
 40029e0:	00008106 	br	4002be8 <tje_encode_with_func+0x240>
		}

		TJEState state = { 0 };
 40029e4:	e0bbce04 	addi	r2,fp,-4296
 40029e8:	00c42c04 	movi	r3,4272
 40029ec:	180d883a 	mov	r6,r3
 40029f0:	000b883a 	mov	r5,zero
 40029f4:	1009883a 	mov	r4,r2
 40029f8:	4004d1c0 	call	4004d1c <memset>

		uint8_t qt_factor = 1;
 40029fc:	00800044 	movi	r2,1
 4002a00:	e0bbca05 	stb	r2,-4312(fp)
		switch (quality) {
 4002a04:	e0bffe17 	ldw	r2,-8(fp)
 4002a08:	10c000a0 	cmpeqi	r3,r2,2
 4002a0c:	1800181e 	bne	r3,zero,4002a70 <tje_encode_with_func+0xc8>
 4002a10:	10c000e0 	cmpeqi	r3,r2,3
 4002a14:	1800031e 	bne	r3,zero,4002a24 <tje_encode_with_func+0x7c>
 4002a18:	10800060 	cmpeqi	r2,r2,1
 4002a1c:	1000161e 	bne	r2,zero,4002a78 <tje_encode_with_func+0xd0>
 4002a20:	00005206 	br	4002b6c <tje_encode_with_func+0x1c4>
		case 3:
			for (int i = 0; i < 64; ++i) {
 4002a24:	e03bcb15 	stw	zero,-4308(fp)
 4002a28:	00000d06 	br	4002a60 <tje_encode_with_func+0xb8>
				state.qt_luma[i] = 1;
 4002a2c:	e0fed704 	addi	r3,fp,-1188
 4002a30:	e0bbcb17 	ldw	r2,-4308(fp)
 4002a34:	1885883a 	add	r2,r3,r2
 4002a38:	00c00044 	movi	r3,1
 4002a3c:	10c00005 	stb	r3,0(r2)
				state.qt_chroma[i] = 1;
 4002a40:	e0fee704 	addi	r3,fp,-1124
 4002a44:	e0bbcb17 	ldw	r2,-4308(fp)
 4002a48:	1885883a 	add	r2,r3,r2
 4002a4c:	00c00044 	movi	r3,1
 4002a50:	10c00005 	stb	r3,0(r2)
		TJEState state = { 0 };

		uint8_t qt_factor = 1;
		switch (quality) {
		case 3:
			for (int i = 0; i < 64; ++i) {
 4002a54:	e0bbcb17 	ldw	r2,-4308(fp)
 4002a58:	10800044 	addi	r2,r2,1
 4002a5c:	e0bbcb15 	stw	r2,-4308(fp)
 4002a60:	e0bbcb17 	ldw	r2,-4308(fp)
 4002a64:	10801010 	cmplti	r2,r2,64
 4002a68:	103ff01e 	bne	r2,zero,4002a2c <__alt_data_end+0xfc002a2c>
				state.qt_luma[i] = 1;
				state.qt_chroma[i] = 1;
			}
			break;
 4002a6c:	00004706 	br	4002b8c <tje_encode_with_func+0x1e4>
		case 2:
			qt_factor = 10;
 4002a70:	00800284 	movi	r2,10
 4002a74:	e0bbca05 	stb	r2,-4312(fp)
			// don't break. fall through.
		case 1:
			for (int i = 0; i < 64; ++i) {
 4002a78:	e03bcc15 	stw	zero,-4304(fp)
 4002a7c:	00003706 	br	4002b5c <tje_encode_with_func+0x1b4>
				state.qt_luma[i] = tjei_default_qt_luma_from_spec[i] / qt_factor;
 4002a80:	00810074 	movhi	r2,1025
 4002a84:	10b41504 	addi	r2,r2,-12204
 4002a88:	e0fbcc17 	ldw	r3,-4304(fp)
 4002a8c:	10c5883a 	add	r2,r2,r3
 4002a90:	10800003 	ldbu	r2,0(r2)
 4002a94:	10803fcc 	andi	r2,r2,255
 4002a98:	e0fbca03 	ldbu	r3,-4312(fp)
 4002a9c:	180b883a 	mov	r5,r3
 4002aa0:	1009883a 	mov	r4,r2
 4002aa4:	40035480 	call	4003548 <__udivsi3>
 4002aa8:	1009883a 	mov	r4,r2
 4002aac:	e0fed704 	addi	r3,fp,-1188
 4002ab0:	e0bbcc17 	ldw	r2,-4304(fp)
 4002ab4:	1885883a 	add	r2,r3,r2
 4002ab8:	11000005 	stb	r4,0(r2)
				if (state.qt_luma[i] == 0) {
 4002abc:	e0fed704 	addi	r3,fp,-1188
 4002ac0:	e0bbcc17 	ldw	r2,-4304(fp)
 4002ac4:	1885883a 	add	r2,r3,r2
 4002ac8:	10800003 	ldbu	r2,0(r2)
 4002acc:	10803fcc 	andi	r2,r2,255
 4002ad0:	1000051e 	bne	r2,zero,4002ae8 <tje_encode_with_func+0x140>
					state.qt_luma[i] = 1;
 4002ad4:	e0fed704 	addi	r3,fp,-1188
 4002ad8:	e0bbcc17 	ldw	r2,-4304(fp)
 4002adc:	1885883a 	add	r2,r3,r2
 4002ae0:	00c00044 	movi	r3,1
 4002ae4:	10c00005 	stb	r3,0(r2)
				}
				state.qt_chroma[i] = tjei_default_qt_chroma_from_paper[i] / qt_factor;
 4002ae8:	00810074 	movhi	r2,1025
 4002aec:	10b42504 	addi	r2,r2,-12140
 4002af0:	e0fbcc17 	ldw	r3,-4304(fp)
 4002af4:	10c5883a 	add	r2,r2,r3
 4002af8:	10800003 	ldbu	r2,0(r2)
 4002afc:	10803fcc 	andi	r2,r2,255
 4002b00:	e0fbca03 	ldbu	r3,-4312(fp)
 4002b04:	180b883a 	mov	r5,r3
 4002b08:	1009883a 	mov	r4,r2
 4002b0c:	40035480 	call	4003548 <__udivsi3>
 4002b10:	1009883a 	mov	r4,r2
 4002b14:	e0fee704 	addi	r3,fp,-1124
 4002b18:	e0bbcc17 	ldw	r2,-4304(fp)
 4002b1c:	1885883a 	add	r2,r3,r2
 4002b20:	11000005 	stb	r4,0(r2)
				if (state.qt_chroma[i] == 0) {
 4002b24:	e0fee704 	addi	r3,fp,-1124
 4002b28:	e0bbcc17 	ldw	r2,-4304(fp)
 4002b2c:	1885883a 	add	r2,r3,r2
 4002b30:	10800003 	ldbu	r2,0(r2)
 4002b34:	10803fcc 	andi	r2,r2,255
 4002b38:	1000051e 	bne	r2,zero,4002b50 <tje_encode_with_func+0x1a8>
					state.qt_chroma[i] = 1;
 4002b3c:	e0fee704 	addi	r3,fp,-1124
 4002b40:	e0bbcc17 	ldw	r2,-4304(fp)
 4002b44:	1885883a 	add	r2,r3,r2
 4002b48:	00c00044 	movi	r3,1
 4002b4c:	10c00005 	stb	r3,0(r2)
			break;
		case 2:
			qt_factor = 10;
			// don't break. fall through.
		case 1:
			for (int i = 0; i < 64; ++i) {
 4002b50:	e0bbcc17 	ldw	r2,-4304(fp)
 4002b54:	10800044 	addi	r2,r2,1
 4002b58:	e0bbcc15 	stw	r2,-4304(fp)
 4002b5c:	e0bbcc17 	ldw	r2,-4304(fp)
 4002b60:	10801010 	cmplti	r2,r2,64
 4002b64:	103fc61e 	bne	r2,zero,4002a80 <__alt_data_end+0xfc002a80>
				state.qt_chroma[i] = tjei_default_qt_chroma_from_paper[i] / qt_factor;
				if (state.qt_chroma[i] == 0) {
					state.qt_chroma[i] = 1;
				}
			}
			break;
 4002b68:	00000806 	br	4002b8c <tje_encode_with_func+0x1e4>
		default:
			assert(!"invalid code path");
 4002b6c:	01c10074 	movhi	r7,1025
 4002b70:	39f4fc04 	addi	r7,r7,-11280
 4002b74:	01810074 	movhi	r6,1025
 4002b78:	31b52b04 	addi	r6,r6,-11092
 4002b7c:	01411d84 	movi	r5,1142
 4002b80:	01010074 	movhi	r4,1025
 4002b84:	2134c104 	addi	r4,r4,-11516
 4002b88:	4004afc0 	call	4004afc <__assert_func>
			break;
		}

		TJEWriteContext wc = { 0 };
 4002b8c:	e03ffa15 	stw	zero,-24(fp)
 4002b90:	e03ffb15 	stw	zero,-20(fp)

		wc.context = context;
 4002b94:	e0bffd17 	ldw	r2,-12(fp)
 4002b98:	e0bffa15 	stw	r2,-24(fp)
		wc.func = func;
 4002b9c:	e0bffc17 	ldw	r2,-16(fp)
 4002ba0:	e0bffb15 	stw	r2,-20(fp)

		state.write_context = wc;
 4002ba4:	e0bffa17 	ldw	r2,-24(fp)
 4002ba8:	e0bef715 	stw	r2,-1060(fp)
 4002bac:	e0bffb17 	ldw	r2,-20(fp)
 4002bb0:	e0bef815 	stw	r2,-1056(fp)


		tjei_huff_expand(&state);
 4002bb4:	e0bbce04 	addi	r2,fp,-4296
 4002bb8:	1009883a 	mov	r4,r2
 4002bbc:	40017f00 	call	40017f0 <tjei_huff_expand>

		int result = tjei_encode_main(&state, src_data, width, height, num_components);
 4002bc0:	e0fbce04 	addi	r3,fp,-4296
 4002bc4:	e0800317 	ldw	r2,12(fp)
 4002bc8:	d8800015 	stw	r2,0(sp)
 4002bcc:	e1c00217 	ldw	r7,8(fp)
 4002bd0:	e1bfff17 	ldw	r6,-4(fp)
 4002bd4:	e1400417 	ldw	r5,16(fp)
 4002bd8:	1809883a 	mov	r4,r3
 4002bdc:	4001b740 	call	4001b74 <tjei_encode_main>
 4002be0:	e0bbcd15 	stw	r2,-4300(fp)

		return result;
 4002be4:	e0bbcd17 	ldw	r2,-4300(fp)
	}
 4002be8:	e037883a 	mov	sp,fp
 4002bec:	dfc00117 	ldw	ra,4(sp)
 4002bf0:	df000017 	ldw	fp,0(sp)
 4002bf4:	dec00204 	addi	sp,sp,8
 4002bf8:	f800283a 	ret

04002bfc <read_encoder_left>:

// Encoder
#define ENCODER_LEFT_BASE 0x8001000
#define ENCODER_RIGHT_BASE 0x8001010

static int32_t read_encoder_left(void){
 4002bfc:	deffff04 	addi	sp,sp,-4
 4002c00:	df000015 	stw	fp,0(sp)
 4002c04:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(ENCODER_LEFT_BASE);
 4002c08:	00820034 	movhi	r2,2048
 4002c0c:	10840004 	addi	r2,r2,4096
 4002c10:	10800037 	ldwio	r2,0(r2)

}
 4002c14:	e037883a 	mov	sp,fp
 4002c18:	df000017 	ldw	fp,0(sp)
 4002c1c:	dec00104 	addi	sp,sp,4
 4002c20:	f800283a 	ret

04002c24 <read_encoder_right>:

static int32_t read_encoder_right(void){
 4002c24:	deffff04 	addi	sp,sp,-4
 4002c28:	df000015 	stw	fp,0(sp)
 4002c2c:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(ENCODER_RIGHT_BASE);
 4002c30:	00820034 	movhi	r2,2048
 4002c34:	10840404 	addi	r2,r2,4112
 4002c38:	10800037 	ldwio	r2,0(r2)

}
 4002c3c:	e037883a 	mov	sp,fp
 4002c40:	df000017 	ldw	fp,0(sp)
 4002c44:	dec00104 	addi	sp,sp,4
 4002c48:	f800283a 	ret

04002c4c <set_motors>:

static void set_motors(int speed_left, int speed_right){
 4002c4c:	defffc04 	addi	sp,sp,-16
 4002c50:	df000315 	stw	fp,12(sp)
 4002c54:	df000304 	addi	fp,sp,12
 4002c58:	e13ffe15 	stw	r4,-8(fp)
 4002c5c:	e17fff15 	stw	r5,-4(fp)

  if(speed_left == 0){               // Stop left motor if input 0
 4002c60:	e0bffe17 	ldw	r2,-8(fp)
 4002c64:	10000526 	beq	r2,zero,4002c7c <set_motors+0x30>
    //digitalWrite(pinCW_Right,LOW);
    //digitalWrite(pinCC_Right,LOW);
  } else if(speed_left < 0){
 4002c68:	e0bffe17 	ldw	r2,-8(fp)
 4002c6c:	1000030e 	bge	r2,zero,4002c7c <set_motors+0x30>
    //digitalWrite(pinCW_Left,HIGH);
    //digitalWrite(pinCC_Left,LOW);
    speed_left *= -1;
 4002c70:	e0bffe17 	ldw	r2,-8(fp)
 4002c74:	0085c83a 	sub	r2,zero,r2
 4002c78:	e0bffe15 	stw	r2,-8(fp)
  } else {
    //digitalWrite(pinCW_Left,LOW);
    //digitalWrite(pinCC_Left,HIGH);
  }

  if(speed_right == 0){              // Stop right motor if input 0
 4002c7c:	e0bfff17 	ldw	r2,-4(fp)
 4002c80:	10000526 	beq	r2,zero,4002c98 <set_motors+0x4c>
    //digitalWrite(pinCW_Right,LOW);
    //digitalWrite(pinCC_Right,LOW);
  } else if(speed_right < 0){
 4002c84:	e0bfff17 	ldw	r2,-4(fp)
 4002c88:	1000030e 	bge	r2,zero,4002c98 <set_motors+0x4c>
    //digitalWrite(pinCW_Right,HIGH);
    //digitalWrite(pinCC_Right,LOW);
    speed_right *= -1;
 4002c8c:	e0bfff17 	ldw	r2,-4(fp)
 4002c90:	0085c83a 	sub	r2,zero,r2
 4002c94:	e0bfff15 	stw	r2,-4(fp)
    //digitalWrite(pinCW_Right, LOW);
    //digitalWrite(pinCC_Right,HIGH);
  }

  // Set the PWM values
  volatile uint32_t pwm_command = ( ((uint32_t)speed_right) << 8) | ((uint32_t)speed_left);
 4002c98:	e0bfff17 	ldw	r2,-4(fp)
 4002c9c:	1006923a 	slli	r3,r2,8
 4002ca0:	e0bffe17 	ldw	r2,-8(fp)
 4002ca4:	1884b03a 	or	r2,r3,r2
 4002ca8:	e0bffd15 	stw	r2,-12(fp)
  IOWR_ALTERA_AVALON_PIO_DATA(PWM_BASE, pwm_command);
 4002cac:	e0bffd17 	ldw	r2,-12(fp)
 4002cb0:	1007883a 	mov	r3,r2
 4002cb4:	00820034 	movhi	r2,2048
 4002cb8:	10840004 	addi	r2,r2,4096
 4002cbc:	10c00035 	stwio	r3,0(r2)

}
 4002cc0:	0001883a 	nop
 4002cc4:	e037883a 	mov	sp,fp
 4002cc8:	df000017 	ldw	fp,0(sp)
 4002ccc:	dec00104 	addi	sp,sp,4
 4002cd0:	f800283a 	ret

04002cd4 <jtag_kiss_send>:

static void jtag_kiss_send(uint8_t byte){
 4002cd4:	defffe04 	addi	sp,sp,-8
 4002cd8:	df000115 	stw	fp,4(sp)
 4002cdc:	df000104 	addi	fp,sp,4
 4002ce0:	2005883a 	mov	r2,r4
 4002ce4:	e0bfff05 	stb	r2,-4(fp)

         // Wait for room in buffer
         while( ! ( (*JTAG_UART_CONTROL) & 0xffff0000 ) );
 4002ce8:	0001883a 	nop
 4002cec:	00820034 	movhi	r2,2048
 4002cf0:	10840d04 	addi	r2,r2,4148
 4002cf4:	10800017 	ldw	r2,0(r2)
 4002cf8:	10bfffec 	andhi	r2,r2,65535
 4002cfc:	103ffb26 	beq	r2,zero,4002cec <__alt_data_end+0xfc002cec>

         // Send byte
         *JTAG_UART_DATA = byte;
 4002d00:	00820034 	movhi	r2,2048
 4002d04:	10840c04 	addi	r2,r2,4144
 4002d08:	e0ffff03 	ldbu	r3,-4(fp)
 4002d0c:	10c00015 	stw	r3,0(r2)

}
 4002d10:	0001883a 	nop
 4002d14:	e037883a 	mov	sp,fp
 4002d18:	df000017 	ldw	fp,0(sp)
 4002d1c:	dec00104 	addi	sp,sp,4
 4002d20:	f800283a 	ret

04002d24 <camera_dma_enable>:

uint8_t jpeg_image_buffer[IMAGE_SIZE];

static void camera_dma_enable(bool enable){
 4002d24:	defffd04 	addi	sp,sp,-12
 4002d28:	df000215 	stw	fp,8(sp)
 4002d2c:	df000204 	addi	fp,sp,8
 4002d30:	2005883a 	mov	r2,r4
 4002d34:	e0bfff05 	stb	r2,-4(fp)

	volatile uint32_t * control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
 4002d38:	00820034 	movhi	r2,2048
 4002d3c:	10840304 	addi	r2,r2,4108
 4002d40:	e0bffe15 	stw	r2,-8(fp)
	if(enable){
 4002d44:	e0bfff03 	ldbu	r2,-4(fp)
 4002d48:	10000626 	beq	r2,zero,4002d64 <camera_dma_enable+0x40>
		*control |= ~VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
 4002d4c:	e0bffe17 	ldw	r2,-8(fp)
 4002d50:	10800017 	ldw	r2,0(r2)
 4002d54:	10c00114 	ori	r3,r2,4
 4002d58:	e0bffe17 	ldw	r2,-8(fp)
 4002d5c:	10c00015 	stw	r3,0(r2)
	} else {
		*control &= VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
	}

}
 4002d60:	00000606 	br	4002d7c <camera_dma_enable+0x58>

	volatile uint32_t * control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
	if(enable){
		*control |= ~VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
	} else {
		*control &= VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
 4002d64:	e0bffe17 	ldw	r2,-8(fp)
 4002d68:	10c00017 	ldw	r3,0(r2)
 4002d6c:	00bffec4 	movi	r2,-5
 4002d70:	1886703a 	and	r3,r3,r2
 4002d74:	e0bffe17 	ldw	r2,-8(fp)
 4002d78:	10c00015 	stw	r3,0(r2)
	}

}
 4002d7c:	0001883a 	nop
 4002d80:	e037883a 	mov	sp,fp
 4002d84:	df000017 	ldw	fp,0(sp)
 4002d88:	dec00104 	addi	sp,sp,4
 4002d8c:	f800283a 	ret

04002d90 <swap_buffer>:

static volatile uint32_t * swap_buffer(){
 4002d90:	defffb04 	addi	sp,sp,-20
 4002d94:	df000415 	stw	fp,16(sp)
 4002d98:	df000404 	addi	fp,sp,16

	volatile uint32_t * buffer_address = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + 	VIDEO_DMA_CONTROLLER__BUFFER_OFFSET);
 4002d9c:	00820034 	movhi	r2,2048
 4002da0:	10840004 	addi	r2,r2,4096
 4002da4:	e0bffd15 	stw	r2,-12(fp)
	volatile uint32_t * back_buffer_address = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + 	VIDEO_DMA_CONTROLLER__BACK_BUFFER_OFFSET);
 4002da8:	00820034 	movhi	r2,2048
 4002dac:	10840104 	addi	r2,r2,4100
 4002db0:	e0bffe15 	stw	r2,-8(fp)

	volatile uint32_t * status_control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
 4002db4:	00820034 	movhi	r2,2048
 4002db8:	10840304 	addi	r2,r2,4108
 4002dbc:	e0bfff15 	stw	r2,-4(fp)

	// instead of disabling DMA trigger buffer swap
	{

		// Setup back buffer register for swap
		if(*buffer_address == (uint32_t) image_buffer_a){
 4002dc0:	e0bffd17 	ldw	r2,-12(fp)
 4002dc4:	10800017 	ldw	r2,0(r2)
 4002dc8:	00c18034 	movhi	r3,1536
 4002dcc:	10c0071e 	bne	r2,r3,4002dec <swap_buffer+0x5c>
			current_image_buffer = image_buffer_a;
 4002dd0:	00818034 	movhi	r2,1536
 4002dd4:	e0bffc15 	stw	r2,-16(fp)
			*back_buffer_address = (uint32_t) image_buffer_b;
 4002dd8:	0081c034 	movhi	r2,1792
 4002ddc:	1007883a 	mov	r3,r2
 4002de0:	e0bffe17 	ldw	r2,-8(fp)
 4002de4:	10c00015 	stw	r3,0(r2)
 4002de8:	00000606 	br	4002e04 <swap_buffer+0x74>
		} else {
			current_image_buffer = image_buffer_b;
 4002dec:	0081c034 	movhi	r2,1792
 4002df0:	e0bffc15 	stw	r2,-16(fp)
			*back_buffer_address = (uint32_t) image_buffer_a;
 4002df4:	00818034 	movhi	r2,1536
 4002df8:	1007883a 	mov	r3,r2
 4002dfc:	e0bffe17 	ldw	r2,-8(fp)
 4002e00:	10c00015 	stw	r3,0(r2)
		}

		// Trigger buffer swap
		*buffer_address = 0;
 4002e04:	e0bffd17 	ldw	r2,-12(fp)
 4002e08:	10000015 	stw	zero,0(r2)

		// Wait for buffer swap
		while(*status_control & VIDEO_DMA_CONTROLLER__STATUS_CONTROL__MASK__SWAP);
 4002e0c:	0001883a 	nop
 4002e10:	e0bfff17 	ldw	r2,-4(fp)
 4002e14:	10800017 	ldw	r2,0(r2)
 4002e18:	1080004c 	andi	r2,r2,1
 4002e1c:	103ffc1e 	bne	r2,zero,4002e10 <__alt_data_end+0xfc002e10>

	}

	return current_image_buffer;
 4002e20:	e0bffc17 	ldw	r2,-16(fp)

}
 4002e24:	e037883a 	mov	sp,fp
 4002e28:	df000017 	ldw	fp,0(sp)
 4002e2c:	dec00104 	addi	sp,sp,4
 4002e30:	f800283a 	ret

04002e34 <take_raw_picture_and_send_to_jtag>:


static void  take_raw_picture_and_send_to_jtag(void){
 4002e34:	defffb04 	addi	sp,sp,-20
 4002e38:	dfc00415 	stw	ra,16(sp)
 4002e3c:	df000315 	stw	fp,12(sp)
 4002e40:	df000304 	addi	fp,sp,12

	volatile uint32_t * current_image_buffer = swap_buffer();
 4002e44:	4002d900 	call	4002d90 <swap_buffer>
 4002e48:	e0bffe15 	stw	r2,-8(fp)

	kiss_start(&jtag_kiss);
 4002e4c:	d126ea04 	addi	r4,gp,-25688
 4002e50:	40031980 	call	4003198 <kiss_start>

	// Inject packet type
	uint8_t packet_type = KISS_PACKET_OPCODES__RAW_IMAGE;
 4002e54:	00bfe0c4 	movi	r2,-125
 4002e58:	e0bfff05 	stb	r2,-4(fp)
	kiss_send_data(&jtag_kiss, &packet_type, 1);
 4002e5c:	e0bfff04 	addi	r2,fp,-4
 4002e60:	01800044 	movi	r6,1
 4002e64:	100b883a 	mov	r5,r2
 4002e68:	d126ea04 	addi	r4,gp,-25688
 4002e6c:	40031dc0 	call	40031dc <kiss_send_data>


	uint32_t i;
	for (i = 0; i < IMAGE_SIZE; i++) {
 4002e70:	e03ffd15 	stw	zero,-12(fp)
 4002e74:	00002406 	br	4002f08 <take_raw_picture_and_send_to_jtag+0xd4>

		uint8_t pixel_data[3];

		pixel_data[0] = (current_image_buffer[i] & 0x00FF0000) >> 16;
 4002e78:	e0bffd17 	ldw	r2,-12(fp)
 4002e7c:	1085883a 	add	r2,r2,r2
 4002e80:	1085883a 	add	r2,r2,r2
 4002e84:	1007883a 	mov	r3,r2
 4002e88:	e0bffe17 	ldw	r2,-8(fp)
 4002e8c:	10c5883a 	add	r2,r2,r3
 4002e90:	10800017 	ldw	r2,0(r2)
 4002e94:	10803fec 	andhi	r2,r2,255
 4002e98:	1004d43a 	srli	r2,r2,16
 4002e9c:	e0bfff45 	stb	r2,-3(fp)
		pixel_data[1] = (current_image_buffer[i] & 0x0000FF00) >> 8;
 4002ea0:	e0bffd17 	ldw	r2,-12(fp)
 4002ea4:	1085883a 	add	r2,r2,r2
 4002ea8:	1085883a 	add	r2,r2,r2
 4002eac:	1007883a 	mov	r3,r2
 4002eb0:	e0bffe17 	ldw	r2,-8(fp)
 4002eb4:	10c5883a 	add	r2,r2,r3
 4002eb8:	10800017 	ldw	r2,0(r2)
 4002ebc:	10bfc00c 	andi	r2,r2,65280
 4002ec0:	1004d23a 	srli	r2,r2,8
 4002ec4:	e0bfff85 	stb	r2,-2(fp)
		pixel_data[2] = (current_image_buffer[i] & 0x000000FF) >> 0;
 4002ec8:	e0bffd17 	ldw	r2,-12(fp)
 4002ecc:	1085883a 	add	r2,r2,r2
 4002ed0:	1085883a 	add	r2,r2,r2
 4002ed4:	1007883a 	mov	r3,r2
 4002ed8:	e0bffe17 	ldw	r2,-8(fp)
 4002edc:	10c5883a 	add	r2,r2,r3
 4002ee0:	10800017 	ldw	r2,0(r2)
 4002ee4:	e0bfffc5 	stb	r2,-1(fp)

		kiss_send_data(&jtag_kiss, pixel_data, 3);
 4002ee8:	e0bfff44 	addi	r2,fp,-3
 4002eec:	018000c4 	movi	r6,3
 4002ef0:	100b883a 	mov	r5,r2
 4002ef4:	d126ea04 	addi	r4,gp,-25688
 4002ef8:	40031dc0 	call	40031dc <kiss_send_data>
	uint8_t packet_type = KISS_PACKET_OPCODES__RAW_IMAGE;
	kiss_send_data(&jtag_kiss, &packet_type, 1);


	uint32_t i;
	for (i = 0; i < IMAGE_SIZE; i++) {
 4002efc:	e0bffd17 	ldw	r2,-12(fp)
 4002f00:	10800044 	addi	r2,r2,1
 4002f04:	e0bffd15 	stw	r2,-12(fp)
 4002f08:	e0fffd17 	ldw	r3,-12(fp)
 4002f0c:	00800174 	movhi	r2,5
 4002f10:	10abffc4 	addi	r2,r2,-20481
 4002f14:	10ffd82e 	bgeu	r2,r3,4002e78 <__alt_data_end+0xfc002e78>

		kiss_send_data(&jtag_kiss, pixel_data, 3);

	}

	kiss_end(&jtag_kiss);
 4002f18:	d126ea04 	addi	r4,gp,-25688
 4002f1c:	40033080 	call	4003308 <kiss_end>
}
 4002f20:	0001883a 	nop
 4002f24:	e037883a 	mov	sp,fp
 4002f28:	dfc00117 	ldw	ra,4(sp)
 4002f2c:	df000017 	ldw	fp,0(sp)
 4002f30:	dec00204 	addi	sp,sp,8
 4002f34:	f800283a 	ret

04002f38 <jpeg_jtag_send>:

static void jpeg_jtag_send(void* context, void* data, int size) {
 4002f38:	defffb04 	addi	sp,sp,-20
 4002f3c:	dfc00415 	stw	ra,16(sp)
 4002f40:	df000315 	stw	fp,12(sp)
 4002f44:	df000304 	addi	fp,sp,12
 4002f48:	e13ffd15 	stw	r4,-12(fp)
 4002f4c:	e17ffe15 	stw	r5,-8(fp)
 4002f50:	e1bfff15 	stw	r6,-4(fp)

	kiss_send_data(&jtag_kiss, data, size);
 4002f54:	e0bfff17 	ldw	r2,-4(fp)
 4002f58:	100d883a 	mov	r6,r2
 4002f5c:	e17ffe17 	ldw	r5,-8(fp)
 4002f60:	d126ea04 	addi	r4,gp,-25688
 4002f64:	40031dc0 	call	40031dc <kiss_send_data>

};
 4002f68:	0001883a 	nop
 4002f6c:	e037883a 	mov	sp,fp
 4002f70:	dfc00117 	ldw	ra,4(sp)
 4002f74:	df000017 	ldw	fp,0(sp)
 4002f78:	dec00204 	addi	sp,sp,8
 4002f7c:	f800283a 	ret

04002f80 <take_jpeg_picture_and_send_to_jtag>:

static void take_jpeg_picture_and_send_to_jtag(void) {
 4002f80:	defff804 	addi	sp,sp,-32
 4002f84:	dfc00715 	stw	ra,28(sp)
 4002f88:	df000615 	stw	fp,24(sp)
 4002f8c:	df000604 	addi	fp,sp,24

	volatile uint32_t * current_image_buffer = swap_buffer();
 4002f90:	4002d900 	call	4002d90 <swap_buffer>
 4002f94:	e0bffe15 	stw	r2,-8(fp)

	// copy image buffer to correct format
	uint32_t i;
	for(i = 0; i < IMAGE_SIZE; i++){
 4002f98:	e03ffd15 	stw	zero,-12(fp)
 4002f9c:	00003906 	br	4003084 <take_jpeg_picture_and_send_to_jtag+0x104>
		jpeg_image_buffer[i*3 + 0] = (current_image_buffer[i] & 0x00FF0000) >> 16;
 4002fa0:	e0fffd17 	ldw	r3,-12(fp)
 4002fa4:	1805883a 	mov	r2,r3
 4002fa8:	1085883a 	add	r2,r2,r2
 4002fac:	10c7883a 	add	r3,r2,r3
 4002fb0:	e0bffd17 	ldw	r2,-12(fp)
 4002fb4:	1085883a 	add	r2,r2,r2
 4002fb8:	1085883a 	add	r2,r2,r2
 4002fbc:	1009883a 	mov	r4,r2
 4002fc0:	e0bffe17 	ldw	r2,-8(fp)
 4002fc4:	1105883a 	add	r2,r2,r4
 4002fc8:	10800017 	ldw	r2,0(r2)
 4002fcc:	10803fec 	andhi	r2,r2,255
 4002fd0:	1004d43a 	srli	r2,r2,16
 4002fd4:	1009883a 	mov	r4,r2
 4002fd8:	00810074 	movhi	r2,1025
 4002fdc:	10837104 	addi	r2,r2,3524
 4002fe0:	10c5883a 	add	r2,r2,r3
 4002fe4:	11000005 	stb	r4,0(r2)
		jpeg_image_buffer[i*3 + 1] = (current_image_buffer[i] & 0x000000FF) >> 0;
 4002fe8:	e0fffd17 	ldw	r3,-12(fp)
 4002fec:	1805883a 	mov	r2,r3
 4002ff0:	1085883a 	add	r2,r2,r2
 4002ff4:	10c5883a 	add	r2,r2,r3
 4002ff8:	10c00044 	addi	r3,r2,1
 4002ffc:	e0bffd17 	ldw	r2,-12(fp)
 4003000:	1085883a 	add	r2,r2,r2
 4003004:	1085883a 	add	r2,r2,r2
 4003008:	1009883a 	mov	r4,r2
 400300c:	e0bffe17 	ldw	r2,-8(fp)
 4003010:	1105883a 	add	r2,r2,r4
 4003014:	10800017 	ldw	r2,0(r2)
 4003018:	1009883a 	mov	r4,r2
 400301c:	00810074 	movhi	r2,1025
 4003020:	10837104 	addi	r2,r2,3524
 4003024:	10c5883a 	add	r2,r2,r3
 4003028:	11000005 	stb	r4,0(r2)
		jpeg_image_buffer[i*3 + 2] = (current_image_buffer[i] & 0x0000FF00) >> 8;
 400302c:	e0fffd17 	ldw	r3,-12(fp)
 4003030:	1805883a 	mov	r2,r3
 4003034:	1085883a 	add	r2,r2,r2
 4003038:	10c5883a 	add	r2,r2,r3
 400303c:	10c00084 	addi	r3,r2,2
 4003040:	e0bffd17 	ldw	r2,-12(fp)
 4003044:	1085883a 	add	r2,r2,r2
 4003048:	1085883a 	add	r2,r2,r2
 400304c:	1009883a 	mov	r4,r2
 4003050:	e0bffe17 	ldw	r2,-8(fp)
 4003054:	1105883a 	add	r2,r2,r4
 4003058:	10800017 	ldw	r2,0(r2)
 400305c:	10bfc00c 	andi	r2,r2,65280
 4003060:	1004d23a 	srli	r2,r2,8
 4003064:	1009883a 	mov	r4,r2
 4003068:	00810074 	movhi	r2,1025
 400306c:	10837104 	addi	r2,r2,3524
 4003070:	10c5883a 	add	r2,r2,r3
 4003074:	11000005 	stb	r4,0(r2)

	volatile uint32_t * current_image_buffer = swap_buffer();

	// copy image buffer to correct format
	uint32_t i;
	for(i = 0; i < IMAGE_SIZE; i++){
 4003078:	e0bffd17 	ldw	r2,-12(fp)
 400307c:	10800044 	addi	r2,r2,1
 4003080:	e0bffd15 	stw	r2,-12(fp)
 4003084:	e0fffd17 	ldw	r3,-12(fp)
 4003088:	00800174 	movhi	r2,5
 400308c:	10abffc4 	addi	r2,r2,-20481
 4003090:	10ffc32e 	bgeu	r2,r3,4002fa0 <__alt_data_end+0xfc002fa0>
		jpeg_image_buffer[i*3 + 0] = (current_image_buffer[i] & 0x00FF0000) >> 16;
		jpeg_image_buffer[i*3 + 1] = (current_image_buffer[i] & 0x000000FF) >> 0;
		jpeg_image_buffer[i*3 + 2] = (current_image_buffer[i] & 0x0000FF00) >> 8;
	}

	kiss_start(&jtag_kiss);
 4003094:	d126ea04 	addi	r4,gp,-25688
 4003098:	40031980 	call	4003198 <kiss_start>

	// Inject packet type
	uint8_t packet_type = KISS_PACKET_OPCODES__JPEG_IMAGE;
 400309c:	00bfe084 	movi	r2,-126
 40030a0:	e0bfff05 	stb	r2,-4(fp)
	kiss_send_data(&jtag_kiss, &packet_type, 1);
 40030a4:	e0bfff04 	addi	r2,fp,-4
 40030a8:	01800044 	movi	r6,1
 40030ac:	100b883a 	mov	r5,r2
 40030b0:	d126ea04 	addi	r4,gp,-25688
 40030b4:	40031dc0 	call	40031dc <kiss_send_data>

	// Convert image to JPEG and send over JTAG
	tje_encode_with_func(
 40030b8:	00810074 	movhi	r2,1025
 40030bc:	10837104 	addi	r2,r2,3524
 40030c0:	d8800215 	stw	r2,8(sp)
 40030c4:	008000c4 	movi	r2,3
 40030c8:	d8800115 	stw	r2,4(sp)
 40030cc:	00807804 	movi	r2,480
 40030d0:	d8800015 	stw	r2,0(sp)
 40030d4:	01c0a004 	movi	r7,640
 40030d8:	01800044 	movi	r6,1
 40030dc:	000b883a 	mov	r5,zero
 40030e0:	01010034 	movhi	r4,1024
 40030e4:	210bce04 	addi	r4,r4,12088
 40030e8:	40029a80 	call	40029a8 <tje_encode_with_func>
		IMAGE_HEIGHT,
		IMAGE_CHANNELS,
		jpeg_image_buffer // TODO select image buffer based on above swap
	);

	kiss_end(&jtag_kiss);
 40030ec:	d126ea04 	addi	r4,gp,-25688
 40030f0:	40033080 	call	4003308 <kiss_end>

}
 40030f4:	0001883a 	nop
 40030f8:	e037883a 	mov	sp,fp
 40030fc:	dfc00117 	ldw	ra,4(sp)
 4003100:	df000017 	ldw	fp,0(sp)
 4003104:	dec00204 	addi	sp,sp,8
 4003108:	f800283a 	ret

0400310c <main>:

int main()
{
 400310c:	defffc04 	addi	sp,sp,-16
 4003110:	dfc00315 	stw	ra,12(sp)
 4003114:	df000215 	stw	fp,8(sp)
 4003118:	df000204 	addi	fp,sp,8

	// Setup JTAG kiss interface
	jtag_kiss.send = jtag_kiss_send;
 400311c:	00810034 	movhi	r2,1024
 4003120:	108b3504 	addi	r2,r2,11476
 4003124:	d0a6eb15 	stw	r2,-25684(gp)


	// Encoder test
	int32_t encoder_left, encoder_right;
	while(1){
		encoder_left = read_encoder_left();
 4003128:	4002bfc0 	call	4002bfc <read_encoder_left>
 400312c:	e0bffe15 	stw	r2,-8(fp)
		encoder_right = read_encoder_right();
 4003130:	4002c240 	call	4002c24 <read_encoder_right>
 4003134:	e0bfff15 	stw	r2,-4(fp)
		usleep(10000);
 4003138:	0109c404 	movi	r4,10000
 400313c:	400ae340 	call	400ae34 <usleep>
	}
 4003140:	003ff906 	br	4003128 <__alt_data_end+0xfc003128>

04003144 <kiss_send_packet>:
 *      Author: DrYerzinia
 */

#include "kiss.h"

void kiss_send_packet(kiss_t * kiss, const uint8_t * data, size_t len){
 4003144:	defffb04 	addi	sp,sp,-20
 4003148:	dfc00415 	stw	ra,16(sp)
 400314c:	df000315 	stw	fp,12(sp)
 4003150:	df000304 	addi	fp,sp,12
 4003154:	e13ffd15 	stw	r4,-12(fp)
 4003158:	e17ffe15 	stw	r5,-8(fp)
 400315c:	e1bfff15 	stw	r6,-4(fp)

	kiss_start(kiss);
 4003160:	e13ffd17 	ldw	r4,-12(fp)
 4003164:	40031980 	call	4003198 <kiss_start>
	kiss_send_data(kiss, data, len);
 4003168:	e1bfff17 	ldw	r6,-4(fp)
 400316c:	e17ffe17 	ldw	r5,-8(fp)
 4003170:	e13ffd17 	ldw	r4,-12(fp)
 4003174:	40031dc0 	call	40031dc <kiss_send_data>
	kiss_end(kiss);
 4003178:	e13ffd17 	ldw	r4,-12(fp)
 400317c:	40033080 	call	4003308 <kiss_end>

}
 4003180:	0001883a 	nop
 4003184:	e037883a 	mov	sp,fp
 4003188:	dfc00117 	ldw	ra,4(sp)
 400318c:	df000017 	ldw	fp,0(sp)
 4003190:	dec00204 	addi	sp,sp,8
 4003194:	f800283a 	ret

04003198 <kiss_start>:

void kiss_start(kiss_t * kiss){
 4003198:	defffd04 	addi	sp,sp,-12
 400319c:	dfc00215 	stw	ra,8(sp)
 40031a0:	df000115 	stw	fp,4(sp)
 40031a4:	df000104 	addi	fp,sp,4
 40031a8:	e13fff15 	stw	r4,-4(fp)

	kiss->state = KISS_STATE__NORMAL;
 40031ac:	e0bfff17 	ldw	r2,-4(fp)
 40031b0:	10000015 	stw	zero,0(r2)
	kiss->send(KISS_SYMBOLS__FEND);
 40031b4:	e0bfff17 	ldw	r2,-4(fp)
 40031b8:	10800117 	ldw	r2,4(r2)
 40031bc:	01003004 	movi	r4,192
 40031c0:	103ee83a 	callr	r2

}
 40031c4:	0001883a 	nop
 40031c8:	e037883a 	mov	sp,fp
 40031cc:	dfc00117 	ldw	ra,4(sp)
 40031d0:	df000017 	ldw	fp,0(sp)
 40031d4:	dec00204 	addi	sp,sp,8
 40031d8:	f800283a 	ret

040031dc <kiss_send_data>:

void kiss_send_data(kiss_t * kiss, const uint8_t * data, size_t len){
 40031dc:	defffa04 	addi	sp,sp,-24
 40031e0:	dfc00515 	stw	ra,20(sp)
 40031e4:	df000415 	stw	fp,16(sp)
 40031e8:	df000404 	addi	fp,sp,16
 40031ec:	e13ffd15 	stw	r4,-12(fp)
 40031f0:	e17ffe15 	stw	r5,-8(fp)
 40031f4:	e1bfff15 	stw	r6,-4(fp)

	while(len > 0){
 40031f8:	00003b06 	br	40032e8 <kiss_send_data+0x10c>

		switch( kiss->state ){
 40031fc:	e0bffd17 	ldw	r2,-12(fp)
 4003200:	10800017 	ldw	r2,0(r2)
 4003204:	10c00060 	cmpeqi	r3,r2,1
 4003208:	1800291e 	bne	r3,zero,40032b0 <kiss_send_data+0xd4>
 400320c:	0080032e 	bgeu	zero,r2,400321c <kiss_send_data+0x40>
 4003210:	108000a0 	cmpeqi	r2,r2,2
 4003214:	10002d1e 	bne	r2,zero,40032cc <kiss_send_data+0xf0>
 4003218:	00003306 	br	40032e8 <kiss_send_data+0x10c>

			case KISS_STATE__NORMAL:
				{

					len--;
 400321c:	e0bfff17 	ldw	r2,-4(fp)
 4003220:	10bfffc4 	addi	r2,r2,-1
 4003224:	e0bfff15 	stw	r2,-4(fp)

					uint8_t next_symbol = (*data++);
 4003228:	e0bffe17 	ldw	r2,-8(fp)
 400322c:	10c00044 	addi	r3,r2,1
 4003230:	e0fffe15 	stw	r3,-8(fp)
 4003234:	10800003 	ldbu	r2,0(r2)
 4003238:	e0bffc05 	stb	r2,-16(fp)
					switch( next_symbol ){
 400323c:	e0bffc03 	ldbu	r2,-16(fp)
 4003240:	10c03020 	cmpeqi	r3,r2,192
 4003244:	1800031e 	bne	r3,zero,4003254 <kiss_send_data+0x78>
 4003248:	108036e0 	cmpeqi	r2,r2,219
 400324c:	1000091e 	bne	r2,zero,4003274 <kiss_send_data+0x98>
 4003250:	00001006 	br	4003294 <kiss_send_data+0xb8>
						case KISS_SYMBOLS__FEND:
							kiss->state = KISS_STATE__END;
 4003254:	e0bffd17 	ldw	r2,-12(fp)
 4003258:	00c00084 	movi	r3,2
 400325c:	10c00015 	stw	r3,0(r2)
							kiss->send(KISS_SYMBOLS__FESC);
 4003260:	e0bffd17 	ldw	r2,-12(fp)
 4003264:	10800117 	ldw	r2,4(r2)
 4003268:	010036c4 	movi	r4,219
 400326c:	103ee83a 	callr	r2
							break;
 4003270:	00000e06 	br	40032ac <kiss_send_data+0xd0>
						case KISS_SYMBOLS__FESC:
							kiss->state = KISS_STATE__ESC;
 4003274:	e0bffd17 	ldw	r2,-12(fp)
 4003278:	00c00044 	movi	r3,1
 400327c:	10c00015 	stw	r3,0(r2)
							kiss->send(KISS_SYMBOLS__FESC);
 4003280:	e0bffd17 	ldw	r2,-12(fp)
 4003284:	10800117 	ldw	r2,4(r2)
 4003288:	010036c4 	movi	r4,219
 400328c:	103ee83a 	callr	r2
							break;
 4003290:	00000606 	br	40032ac <kiss_send_data+0xd0>
						default:
							kiss->send(next_symbol);
 4003294:	e0bffd17 	ldw	r2,-12(fp)
 4003298:	10800117 	ldw	r2,4(r2)
 400329c:	e0fffc03 	ldbu	r3,-16(fp)
 40032a0:	1809883a 	mov	r4,r3
 40032a4:	103ee83a 	callr	r2
							break;
 40032a8:	0001883a 	nop
					}
				}
				break;
 40032ac:	00000e06 	br	40032e8 <kiss_send_data+0x10c>

			case KISS_STATE__ESC:
				kiss->state = KISS_STATE__NORMAL;
 40032b0:	e0bffd17 	ldw	r2,-12(fp)
 40032b4:	10000015 	stw	zero,0(r2)
				kiss->send(KISS_SYMBOLS__TFESC);
 40032b8:	e0bffd17 	ldw	r2,-12(fp)
 40032bc:	10800117 	ldw	r2,4(r2)
 40032c0:	01003744 	movi	r4,221
 40032c4:	103ee83a 	callr	r2
				break;
 40032c8:	00000706 	br	40032e8 <kiss_send_data+0x10c>

			case KISS_STATE__END:
				kiss->state = KISS_STATE__NORMAL;
 40032cc:	e0bffd17 	ldw	r2,-12(fp)
 40032d0:	10000015 	stw	zero,0(r2)
				kiss->send(KISS_SYMBOLS__TFEND);
 40032d4:	e0bffd17 	ldw	r2,-12(fp)
 40032d8:	10800117 	ldw	r2,4(r2)
 40032dc:	01003704 	movi	r4,220
 40032e0:	103ee83a 	callr	r2
				break;
 40032e4:	0001883a 	nop

}

void kiss_send_data(kiss_t * kiss, const uint8_t * data, size_t len){

	while(len > 0){
 40032e8:	e0bfff17 	ldw	r2,-4(fp)
 40032ec:	103fc31e 	bne	r2,zero,40031fc <__alt_data_end+0xfc0031fc>

		}

	}

}
 40032f0:	0001883a 	nop
 40032f4:	e037883a 	mov	sp,fp
 40032f8:	dfc00117 	ldw	ra,4(sp)
 40032fc:	df000017 	ldw	fp,0(sp)
 4003300:	dec00204 	addi	sp,sp,8
 4003304:	f800283a 	ret

04003308 <kiss_end>:

void kiss_end(kiss_t * kiss){
 4003308:	defffd04 	addi	sp,sp,-12
 400330c:	dfc00215 	stw	ra,8(sp)
 4003310:	df000115 	stw	fp,4(sp)
 4003314:	df000104 	addi	fp,sp,4
 4003318:	e13fff15 	stw	r4,-4(fp)

	kiss->state = KISS_STATE__NORMAL;
 400331c:	e0bfff17 	ldw	r2,-4(fp)
 4003320:	10000015 	stw	zero,0(r2)
	kiss->send(KISS_SYMBOLS__FEND);
 4003324:	e0bfff17 	ldw	r2,-4(fp)
 4003328:	10800117 	ldw	r2,4(r2)
 400332c:	01003004 	movi	r4,192
 4003330:	103ee83a 	callr	r2

}
 4003334:	0001883a 	nop
 4003338:	e037883a 	mov	sp,fp
 400333c:	dfc00117 	ldw	ra,4(sp)
 4003340:	df000017 	ldw	fp,0(sp)
 4003344:	dec00204 	addi	sp,sp,8
 4003348:	f800283a 	ret

0400334c <floorf>:
 400334c:	defffa04 	addi	sp,sp,-24
 4003350:	dc800215 	stw	r18,8(sp)
 4003354:	04a00034 	movhi	r18,32768
 4003358:	94bfffc4 	addi	r18,r18,-1
 400335c:	9124703a 	and	r18,r18,r4
 4003360:	dc400115 	stw	r17,4(sp)
 4003364:	9022d5fa 	srli	r17,r18,23
 4003368:	dc000015 	stw	r16,0(sp)
 400336c:	dfc00515 	stw	ra,20(sp)
 4003370:	dd000415 	stw	r20,16(sp)
 4003374:	dcc00315 	stw	r19,12(sp)
 4003378:	8c7fe044 	addi	r17,r17,-127
 400337c:	00800584 	movi	r2,22
 4003380:	2021883a 	mov	r16,r4
 4003384:	14401216 	blt	r2,r17,40033d0 <floorf+0x84>
 4003388:	2029883a 	mov	r20,r4
 400338c:	88001f16 	blt	r17,zero,400340c <floorf+0xc0>
 4003390:	04802034 	movhi	r18,128
 4003394:	94bfffc4 	addi	r18,r18,-1
 4003398:	9465d83a 	sra	r18,r18,r17
 400339c:	9104703a 	and	r2,r18,r4
 40033a0:	10000e26 	beq	r2,zero,40033dc <floorf+0x90>
 40033a4:	015c52b4 	movhi	r5,29002
 40033a8:	297cb284 	addi	r5,r5,-3382
 40033ac:	400362c0 	call	400362c <__addsf3>
 40033b0:	000b883a 	mov	r5,zero
 40033b4:	1009883a 	mov	r4,r2
 40033b8:	4003f340 	call	4003f34 <__gesf2>
 40033bc:	0080070e 	bge	zero,r2,40033dc <floorf+0x90>
 40033c0:	80001c16 	blt	r16,zero,4003434 <floorf+0xe8>
 40033c4:	0484303a 	nor	r2,zero,r18
 40033c8:	1504703a 	and	r2,r2,r20
 40033cc:	00000406 	br	40033e0 <floorf+0x94>
 40033d0:	009fe034 	movhi	r2,32640
 40033d4:	10bfffc4 	addi	r2,r2,-1
 40033d8:	14800936 	bltu	r2,r18,4003400 <floorf+0xb4>
 40033dc:	8005883a 	mov	r2,r16
 40033e0:	dfc00517 	ldw	ra,20(sp)
 40033e4:	dd000417 	ldw	r20,16(sp)
 40033e8:	dcc00317 	ldw	r19,12(sp)
 40033ec:	dc800217 	ldw	r18,8(sp)
 40033f0:	dc400117 	ldw	r17,4(sp)
 40033f4:	dc000017 	ldw	r16,0(sp)
 40033f8:	dec00604 	addi	sp,sp,24
 40033fc:	f800283a 	ret
 4003400:	200b883a 	mov	r5,r4
 4003404:	400362c0 	call	400362c <__addsf3>
 4003408:	003ff506 	br	40033e0 <__alt_data_end+0xfc0033e0>
 400340c:	015c52b4 	movhi	r5,29002
 4003410:	297cb284 	addi	r5,r5,-3382
 4003414:	400362c0 	call	400362c <__addsf3>
 4003418:	000b883a 	mov	r5,zero
 400341c:	1009883a 	mov	r4,r2
 4003420:	4003f340 	call	4003f34 <__gesf2>
 4003424:	00bfed0e 	bge	zero,r2,40033dc <__alt_data_end+0xfc0033dc>
 4003428:	80000616 	blt	r16,zero,4003444 <floorf+0xf8>
 400342c:	0005883a 	mov	r2,zero
 4003430:	003feb06 	br	40033e0 <__alt_data_end+0xfc0033e0>
 4003434:	00802034 	movhi	r2,128
 4003438:	1445d83a 	sra	r2,r2,r17
 400343c:	1429883a 	add	r20,r2,r16
 4003440:	003fe006 	br	40033c4 <__alt_data_end+0xfc0033c4>
 4003444:	903fe526 	beq	r18,zero,40033dc <__alt_data_end+0xfc0033dc>
 4003448:	00afe034 	movhi	r2,49024
 400344c:	003fe406 	br	40033e0 <__alt_data_end+0xfc0033e0>

04003450 <__divsi3>:
 4003450:	20001b16 	blt	r4,zero,40034c0 <__divsi3+0x70>
 4003454:	000f883a 	mov	r7,zero
 4003458:	28001616 	blt	r5,zero,40034b4 <__divsi3+0x64>
 400345c:	200d883a 	mov	r6,r4
 4003460:	29001a2e 	bgeu	r5,r4,40034cc <__divsi3+0x7c>
 4003464:	00800804 	movi	r2,32
 4003468:	00c00044 	movi	r3,1
 400346c:	00000106 	br	4003474 <__divsi3+0x24>
 4003470:	10000d26 	beq	r2,zero,40034a8 <__divsi3+0x58>
 4003474:	294b883a 	add	r5,r5,r5
 4003478:	10bfffc4 	addi	r2,r2,-1
 400347c:	18c7883a 	add	r3,r3,r3
 4003480:	293ffb36 	bltu	r5,r4,4003470 <__alt_data_end+0xfc003470>
 4003484:	0005883a 	mov	r2,zero
 4003488:	18000726 	beq	r3,zero,40034a8 <__divsi3+0x58>
 400348c:	0005883a 	mov	r2,zero
 4003490:	31400236 	bltu	r6,r5,400349c <__divsi3+0x4c>
 4003494:	314dc83a 	sub	r6,r6,r5
 4003498:	10c4b03a 	or	r2,r2,r3
 400349c:	1806d07a 	srli	r3,r3,1
 40034a0:	280ad07a 	srli	r5,r5,1
 40034a4:	183ffa1e 	bne	r3,zero,4003490 <__alt_data_end+0xfc003490>
 40034a8:	38000126 	beq	r7,zero,40034b0 <__divsi3+0x60>
 40034ac:	0085c83a 	sub	r2,zero,r2
 40034b0:	f800283a 	ret
 40034b4:	014bc83a 	sub	r5,zero,r5
 40034b8:	39c0005c 	xori	r7,r7,1
 40034bc:	003fe706 	br	400345c <__alt_data_end+0xfc00345c>
 40034c0:	0109c83a 	sub	r4,zero,r4
 40034c4:	01c00044 	movi	r7,1
 40034c8:	003fe306 	br	4003458 <__alt_data_end+0xfc003458>
 40034cc:	00c00044 	movi	r3,1
 40034d0:	003fee06 	br	400348c <__alt_data_end+0xfc00348c>

040034d4 <__modsi3>:
 40034d4:	20001716 	blt	r4,zero,4003534 <__modsi3+0x60>
 40034d8:	000f883a 	mov	r7,zero
 40034dc:	2005883a 	mov	r2,r4
 40034e0:	28001216 	blt	r5,zero,400352c <__modsi3+0x58>
 40034e4:	2900162e 	bgeu	r5,r4,4003540 <__modsi3+0x6c>
 40034e8:	01800804 	movi	r6,32
 40034ec:	00c00044 	movi	r3,1
 40034f0:	00000106 	br	40034f8 <__modsi3+0x24>
 40034f4:	30000a26 	beq	r6,zero,4003520 <__modsi3+0x4c>
 40034f8:	294b883a 	add	r5,r5,r5
 40034fc:	31bfffc4 	addi	r6,r6,-1
 4003500:	18c7883a 	add	r3,r3,r3
 4003504:	293ffb36 	bltu	r5,r4,40034f4 <__alt_data_end+0xfc0034f4>
 4003508:	18000526 	beq	r3,zero,4003520 <__modsi3+0x4c>
 400350c:	1806d07a 	srli	r3,r3,1
 4003510:	11400136 	bltu	r2,r5,4003518 <__modsi3+0x44>
 4003514:	1145c83a 	sub	r2,r2,r5
 4003518:	280ad07a 	srli	r5,r5,1
 400351c:	183ffb1e 	bne	r3,zero,400350c <__alt_data_end+0xfc00350c>
 4003520:	38000126 	beq	r7,zero,4003528 <__modsi3+0x54>
 4003524:	0085c83a 	sub	r2,zero,r2
 4003528:	f800283a 	ret
 400352c:	014bc83a 	sub	r5,zero,r5
 4003530:	003fec06 	br	40034e4 <__alt_data_end+0xfc0034e4>
 4003534:	0109c83a 	sub	r4,zero,r4
 4003538:	01c00044 	movi	r7,1
 400353c:	003fe706 	br	40034dc <__alt_data_end+0xfc0034dc>
 4003540:	00c00044 	movi	r3,1
 4003544:	003ff106 	br	400350c <__alt_data_end+0xfc00350c>

04003548 <__udivsi3>:
 4003548:	200d883a 	mov	r6,r4
 400354c:	2900152e 	bgeu	r5,r4,40035a4 <__udivsi3+0x5c>
 4003550:	28001416 	blt	r5,zero,40035a4 <__udivsi3+0x5c>
 4003554:	00800804 	movi	r2,32
 4003558:	00c00044 	movi	r3,1
 400355c:	00000206 	br	4003568 <__udivsi3+0x20>
 4003560:	10000e26 	beq	r2,zero,400359c <__udivsi3+0x54>
 4003564:	28000516 	blt	r5,zero,400357c <__udivsi3+0x34>
 4003568:	294b883a 	add	r5,r5,r5
 400356c:	10bfffc4 	addi	r2,r2,-1
 4003570:	18c7883a 	add	r3,r3,r3
 4003574:	293ffa36 	bltu	r5,r4,4003560 <__alt_data_end+0xfc003560>
 4003578:	18000826 	beq	r3,zero,400359c <__udivsi3+0x54>
 400357c:	0005883a 	mov	r2,zero
 4003580:	31400236 	bltu	r6,r5,400358c <__udivsi3+0x44>
 4003584:	314dc83a 	sub	r6,r6,r5
 4003588:	10c4b03a 	or	r2,r2,r3
 400358c:	1806d07a 	srli	r3,r3,1
 4003590:	280ad07a 	srli	r5,r5,1
 4003594:	183ffa1e 	bne	r3,zero,4003580 <__alt_data_end+0xfc003580>
 4003598:	f800283a 	ret
 400359c:	0005883a 	mov	r2,zero
 40035a0:	f800283a 	ret
 40035a4:	00c00044 	movi	r3,1
 40035a8:	003ff406 	br	400357c <__alt_data_end+0xfc00357c>

040035ac <__umodsi3>:
 40035ac:	2005883a 	mov	r2,r4
 40035b0:	2900122e 	bgeu	r5,r4,40035fc <__umodsi3+0x50>
 40035b4:	28001116 	blt	r5,zero,40035fc <__umodsi3+0x50>
 40035b8:	01800804 	movi	r6,32
 40035bc:	00c00044 	movi	r3,1
 40035c0:	00000206 	br	40035cc <__umodsi3+0x20>
 40035c4:	30000c26 	beq	r6,zero,40035f8 <__umodsi3+0x4c>
 40035c8:	28000516 	blt	r5,zero,40035e0 <__umodsi3+0x34>
 40035cc:	294b883a 	add	r5,r5,r5
 40035d0:	31bfffc4 	addi	r6,r6,-1
 40035d4:	18c7883a 	add	r3,r3,r3
 40035d8:	293ffa36 	bltu	r5,r4,40035c4 <__alt_data_end+0xfc0035c4>
 40035dc:	18000626 	beq	r3,zero,40035f8 <__umodsi3+0x4c>
 40035e0:	1806d07a 	srli	r3,r3,1
 40035e4:	11400136 	bltu	r2,r5,40035ec <__umodsi3+0x40>
 40035e8:	1145c83a 	sub	r2,r2,r5
 40035ec:	280ad07a 	srli	r5,r5,1
 40035f0:	183ffb1e 	bne	r3,zero,40035e0 <__alt_data_end+0xfc0035e0>
 40035f4:	f800283a 	ret
 40035f8:	f800283a 	ret
 40035fc:	00c00044 	movi	r3,1
 4003600:	003ff706 	br	40035e0 <__alt_data_end+0xfc0035e0>

04003604 <__mulsi3>:
 4003604:	0005883a 	mov	r2,zero
 4003608:	20000726 	beq	r4,zero,4003628 <__mulsi3+0x24>
 400360c:	20c0004c 	andi	r3,r4,1
 4003610:	2008d07a 	srli	r4,r4,1
 4003614:	18000126 	beq	r3,zero,400361c <__mulsi3+0x18>
 4003618:	1145883a 	add	r2,r2,r5
 400361c:	294b883a 	add	r5,r5,r5
 4003620:	203ffa1e 	bne	r4,zero,400360c <__alt_data_end+0xfc00360c>
 4003624:	f800283a 	ret
 4003628:	f800283a 	ret

0400362c <__addsf3>:
 400362c:	defffc04 	addi	sp,sp,-16
 4003630:	2004d7fa 	srli	r2,r4,31
 4003634:	280cd5fa 	srli	r6,r5,23
 4003638:	dc000015 	stw	r16,0(sp)
 400363c:	00c02034 	movhi	r3,128
 4003640:	2020d5fa 	srli	r16,r4,23
 4003644:	280ed7fa 	srli	r7,r5,31
 4003648:	18ffffc4 	addi	r3,r3,-1
 400364c:	dc400115 	stw	r17,4(sp)
 4003650:	1908703a 	and	r4,r3,r4
 4003654:	194a703a 	and	r5,r3,r5
 4003658:	dfc00315 	stw	ra,12(sp)
 400365c:	dc800215 	stw	r18,8(sp)
 4003660:	14403fcc 	andi	r17,r2,255
 4003664:	84003fcc 	andi	r16,r16,255
 4003668:	200890fa 	slli	r4,r4,3
 400366c:	31803fcc 	andi	r6,r6,255
 4003670:	280a90fa 	slli	r5,r5,3
 4003674:	89c05026 	beq	r17,r7,40037b8 <__addsf3+0x18c>
 4003678:	8185c83a 	sub	r2,r16,r6
 400367c:	00807a0e 	bge	zero,r2,4003868 <__addsf3+0x23c>
 4003680:	30001e1e 	bne	r6,zero,40036fc <__addsf3+0xd0>
 4003684:	28006d1e 	bne	r5,zero,400383c <__addsf3+0x210>
 4003688:	208001cc 	andi	r2,r4,7
 400368c:	10000426 	beq	r2,zero,40036a0 <__addsf3+0x74>
 4003690:	208003cc 	andi	r2,r4,15
 4003694:	00c00104 	movi	r3,4
 4003698:	10c00126 	beq	r2,r3,40036a0 <__addsf3+0x74>
 400369c:	20c9883a 	add	r4,r4,r3
 40036a0:	2081002c 	andhi	r2,r4,1024
 40036a4:	10003926 	beq	r2,zero,400378c <__addsf3+0x160>
 40036a8:	84000044 	addi	r16,r16,1
 40036ac:	00803fc4 	movi	r2,255
 40036b0:	80807826 	beq	r16,r2,4003894 <__addsf3+0x268>
 40036b4:	200891ba 	slli	r4,r4,6
 40036b8:	8805883a 	mov	r2,r17
 40036bc:	2008d27a 	srli	r4,r4,9
 40036c0:	84003fcc 	andi	r16,r16,255
 40036c4:	800695fa 	slli	r3,r16,23
 40036c8:	10803fcc 	andi	r2,r2,255
 40036cc:	04002034 	movhi	r16,128
 40036d0:	843fffc4 	addi	r16,r16,-1
 40036d4:	100497fa 	slli	r2,r2,31
 40036d8:	2408703a 	and	r4,r4,r16
 40036dc:	20e0b03a 	or	r16,r4,r3
 40036e0:	8084b03a 	or	r2,r16,r2
 40036e4:	dfc00317 	ldw	ra,12(sp)
 40036e8:	dc800217 	ldw	r18,8(sp)
 40036ec:	dc400117 	ldw	r17,4(sp)
 40036f0:	dc000017 	ldw	r16,0(sp)
 40036f4:	dec00404 	addi	sp,sp,16
 40036f8:	f800283a 	ret
 40036fc:	00c03fc4 	movi	r3,255
 4003700:	80ffe126 	beq	r16,r3,4003688 <__alt_data_end+0xfc003688>
 4003704:	29410034 	orhi	r5,r5,1024
 4003708:	00c006c4 	movi	r3,27
 400370c:	18807516 	blt	r3,r2,40038e4 <__addsf3+0x2b8>
 4003710:	00c00804 	movi	r3,32
 4003714:	1887c83a 	sub	r3,r3,r2
 4003718:	28c6983a 	sll	r3,r5,r3
 400371c:	288ad83a 	srl	r5,r5,r2
 4003720:	1804c03a 	cmpne	r2,r3,zero
 4003724:	288ab03a 	or	r5,r5,r2
 4003728:	2149c83a 	sub	r4,r4,r5
 400372c:	2081002c 	andhi	r2,r4,1024
 4003730:	10001426 	beq	r2,zero,4003784 <__addsf3+0x158>
 4003734:	04810034 	movhi	r18,1024
 4003738:	94bfffc4 	addi	r18,r18,-1
 400373c:	24a4703a 	and	r18,r4,r18
 4003740:	9009883a 	mov	r4,r18
 4003744:	4004a980 	call	4004a98 <__clzsi2>
 4003748:	10bffec4 	addi	r2,r2,-5
 400374c:	90a4983a 	sll	r18,r18,r2
 4003750:	14005416 	blt	r2,r16,40038a4 <__addsf3+0x278>
 4003754:	1405c83a 	sub	r2,r2,r16
 4003758:	11000044 	addi	r4,r2,1
 400375c:	00800804 	movi	r2,32
 4003760:	1105c83a 	sub	r2,r2,r4
 4003764:	9084983a 	sll	r2,r18,r2
 4003768:	9124d83a 	srl	r18,r18,r4
 400376c:	0021883a 	mov	r16,zero
 4003770:	1008c03a 	cmpne	r4,r2,zero
 4003774:	9108b03a 	or	r4,r18,r4
 4003778:	003fc306 	br	4003688 <__alt_data_end+0xfc003688>
 400377c:	1000db26 	beq	r2,zero,4003aec <__addsf3+0x4c0>
 4003780:	1009883a 	mov	r4,r2
 4003784:	208001cc 	andi	r2,r4,7
 4003788:	103fc11e 	bne	r2,zero,4003690 <__alt_data_end+0xfc003690>
 400378c:	2006d0fa 	srli	r3,r4,3
 4003790:	01003fc4 	movi	r4,255
 4003794:	8805883a 	mov	r2,r17
 4003798:	8100241e 	bne	r16,r4,400382c <__addsf3+0x200>
 400379c:	18006e26 	beq	r3,zero,4003958 <__addsf3+0x32c>
 40037a0:	19001034 	orhi	r4,r3,64
 40037a4:	00c02034 	movhi	r3,128
 40037a8:	18ffffc4 	addi	r3,r3,-1
 40037ac:	043fffc4 	movi	r16,-1
 40037b0:	20c8703a 	and	r4,r4,r3
 40037b4:	003fc206 	br	40036c0 <__alt_data_end+0xfc0036c0>
 40037b8:	8187c83a 	sub	r3,r16,r6
 40037bc:	00c03e0e 	bge	zero,r3,40038b8 <__addsf3+0x28c>
 40037c0:	30002326 	beq	r6,zero,4003850 <__addsf3+0x224>
 40037c4:	01803fc4 	movi	r6,255
 40037c8:	81bfaf26 	beq	r16,r6,4003688 <__alt_data_end+0xfc003688>
 40037cc:	29410034 	orhi	r5,r5,1024
 40037d0:	018006c4 	movi	r6,27
 40037d4:	30c07416 	blt	r6,r3,40039a8 <__addsf3+0x37c>
 40037d8:	01800804 	movi	r6,32
 40037dc:	30cdc83a 	sub	r6,r6,r3
 40037e0:	298c983a 	sll	r6,r5,r6
 40037e4:	28cad83a 	srl	r5,r5,r3
 40037e8:	3006c03a 	cmpne	r3,r6,zero
 40037ec:	28cab03a 	or	r5,r5,r3
 40037f0:	2149883a 	add	r4,r4,r5
 40037f4:	20c1002c 	andhi	r3,r4,1024
 40037f8:	183fe226 	beq	r3,zero,4003784 <__alt_data_end+0xfc003784>
 40037fc:	84000044 	addi	r16,r16,1
 4003800:	00c03fc4 	movi	r3,255
 4003804:	80c05426 	beq	r16,r3,4003958 <__addsf3+0x32c>
 4003808:	00bf0034 	movhi	r2,64512
 400380c:	10bfffc4 	addi	r2,r2,-1
 4003810:	20c0004c 	andi	r3,r4,1
 4003814:	2088703a 	and	r4,r4,r2
 4003818:	2008d07a 	srli	r4,r4,1
 400381c:	20c8b03a 	or	r4,r4,r3
 4003820:	003f9906 	br	4003688 <__alt_data_end+0xfc003688>
 4003824:	0007883a 	mov	r3,zero
 4003828:	0005883a 	mov	r2,zero
 400382c:	01002034 	movhi	r4,128
 4003830:	213fffc4 	addi	r4,r4,-1
 4003834:	1908703a 	and	r4,r3,r4
 4003838:	003fa106 	br	40036c0 <__alt_data_end+0xfc0036c0>
 400383c:	10bfffc4 	addi	r2,r2,-1
 4003840:	103fb926 	beq	r2,zero,4003728 <__alt_data_end+0xfc003728>
 4003844:	00c03fc4 	movi	r3,255
 4003848:	80ffaf1e 	bne	r16,r3,4003708 <__alt_data_end+0xfc003708>
 400384c:	003f8e06 	br	4003688 <__alt_data_end+0xfc003688>
 4003850:	283f8d26 	beq	r5,zero,4003688 <__alt_data_end+0xfc003688>
 4003854:	18ffffc4 	addi	r3,r3,-1
 4003858:	183fe526 	beq	r3,zero,40037f0 <__alt_data_end+0xfc0037f0>
 400385c:	01803fc4 	movi	r6,255
 4003860:	81bfdb1e 	bne	r16,r6,40037d0 <__alt_data_end+0xfc0037d0>
 4003864:	003f8806 	br	4003688 <__alt_data_end+0xfc003688>
 4003868:	1000201e 	bne	r2,zero,40038ec <__addsf3+0x2c0>
 400386c:	80800044 	addi	r2,r16,1
 4003870:	10803fcc 	andi	r2,r2,255
 4003874:	01800044 	movi	r6,1
 4003878:	3080450e 	bge	r6,r2,4003990 <__addsf3+0x364>
 400387c:	2165c83a 	sub	r18,r4,r5
 4003880:	90c1002c 	andhi	r3,r18,1024
 4003884:	18002b26 	beq	r3,zero,4003934 <__addsf3+0x308>
 4003888:	2925c83a 	sub	r18,r5,r4
 400388c:	3823883a 	mov	r17,r7
 4003890:	003fab06 	br	4003740 <__alt_data_end+0xfc003740>
 4003894:	8805883a 	mov	r2,r17
 4003898:	043fffc4 	movi	r16,-1
 400389c:	0009883a 	mov	r4,zero
 40038a0:	003f8706 	br	40036c0 <__alt_data_end+0xfc0036c0>
 40038a4:	013f0034 	movhi	r4,64512
 40038a8:	213fffc4 	addi	r4,r4,-1
 40038ac:	80a1c83a 	sub	r16,r16,r2
 40038b0:	9108703a 	and	r4,r18,r4
 40038b4:	003f7406 	br	4003688 <__alt_data_end+0xfc003688>
 40038b8:	1800411e 	bne	r3,zero,40039c0 <__addsf3+0x394>
 40038bc:	80c00044 	addi	r3,r16,1
 40038c0:	19c03fcc 	andi	r7,r3,255
 40038c4:	01800044 	movi	r6,1
 40038c8:	31c0260e 	bge	r6,r7,4003964 <__addsf3+0x338>
 40038cc:	01803fc4 	movi	r6,255
 40038d0:	19802126 	beq	r3,r6,4003958 <__addsf3+0x32c>
 40038d4:	2149883a 	add	r4,r4,r5
 40038d8:	2008d07a 	srli	r4,r4,1
 40038dc:	1821883a 	mov	r16,r3
 40038e0:	003f6906 	br	4003688 <__alt_data_end+0xfc003688>
 40038e4:	01400044 	movi	r5,1
 40038e8:	003f8f06 	br	4003728 <__alt_data_end+0xfc003728>
 40038ec:	8000151e 	bne	r16,zero,4003944 <__addsf3+0x318>
 40038f0:	20002f26 	beq	r4,zero,40039b0 <__addsf3+0x384>
 40038f4:	0084303a 	nor	r2,zero,r2
 40038f8:	10000a26 	beq	r2,zero,4003924 <__addsf3+0x2f8>
 40038fc:	00c03fc4 	movi	r3,255
 4003900:	30c02b26 	beq	r6,r3,40039b0 <__addsf3+0x384>
 4003904:	00c006c4 	movi	r3,27
 4003908:	18806d16 	blt	r3,r2,4003ac0 <__addsf3+0x494>
 400390c:	00c00804 	movi	r3,32
 4003910:	1887c83a 	sub	r3,r3,r2
 4003914:	20c6983a 	sll	r3,r4,r3
 4003918:	2084d83a 	srl	r2,r4,r2
 400391c:	1808c03a 	cmpne	r4,r3,zero
 4003920:	1108b03a 	or	r4,r2,r4
 4003924:	2909c83a 	sub	r4,r5,r4
 4003928:	3021883a 	mov	r16,r6
 400392c:	3823883a 	mov	r17,r7
 4003930:	003f7e06 	br	400372c <__alt_data_end+0xfc00372c>
 4003934:	903f821e 	bne	r18,zero,4003740 <__alt_data_end+0xfc003740>
 4003938:	0005883a 	mov	r2,zero
 400393c:	0021883a 	mov	r16,zero
 4003940:	003fba06 	br	400382c <__alt_data_end+0xfc00382c>
 4003944:	00c03fc4 	movi	r3,255
 4003948:	30c01926 	beq	r6,r3,40039b0 <__addsf3+0x384>
 400394c:	0085c83a 	sub	r2,zero,r2
 4003950:	21010034 	orhi	r4,r4,1024
 4003954:	003feb06 	br	4003904 <__alt_data_end+0xfc003904>
 4003958:	043fffc4 	movi	r16,-1
 400395c:	0009883a 	mov	r4,zero
 4003960:	003f5706 	br	40036c0 <__alt_data_end+0xfc0036c0>
 4003964:	80004a1e 	bne	r16,zero,4003a90 <__addsf3+0x464>
 4003968:	20005926 	beq	r4,zero,4003ad0 <__addsf3+0x4a4>
 400396c:	283f4626 	beq	r5,zero,4003688 <__alt_data_end+0xfc003688>
 4003970:	2149883a 	add	r4,r4,r5
 4003974:	2081002c 	andhi	r2,r4,1024
 4003978:	103f8226 	beq	r2,zero,4003784 <__alt_data_end+0xfc003784>
 400397c:	00bf0034 	movhi	r2,64512
 4003980:	10bfffc4 	addi	r2,r2,-1
 4003984:	3021883a 	mov	r16,r6
 4003988:	2088703a 	and	r4,r4,r2
 400398c:	003f3e06 	br	4003688 <__alt_data_end+0xfc003688>
 4003990:	8000121e 	bne	r16,zero,40039dc <__addsf3+0x3b0>
 4003994:	2000261e 	bne	r4,zero,4003a30 <__addsf3+0x404>
 4003998:	283fa226 	beq	r5,zero,4003824 <__alt_data_end+0xfc003824>
 400399c:	2809883a 	mov	r4,r5
 40039a0:	3823883a 	mov	r17,r7
 40039a4:	003f3806 	br	4003688 <__alt_data_end+0xfc003688>
 40039a8:	01400044 	movi	r5,1
 40039ac:	003f9006 	br	40037f0 <__alt_data_end+0xfc0037f0>
 40039b0:	2809883a 	mov	r4,r5
 40039b4:	3021883a 	mov	r16,r6
 40039b8:	3823883a 	mov	r17,r7
 40039bc:	003f3206 	br	4003688 <__alt_data_end+0xfc003688>
 40039c0:	80000c1e 	bne	r16,zero,40039f4 <__addsf3+0x3c8>
 40039c4:	20002f26 	beq	r4,zero,4003a84 <__addsf3+0x458>
 40039c8:	00c6303a 	nor	r3,zero,r3
 40039cc:	18002b1e 	bne	r3,zero,4003a7c <__addsf3+0x450>
 40039d0:	2149883a 	add	r4,r4,r5
 40039d4:	3021883a 	mov	r16,r6
 40039d8:	003f8606 	br	40037f4 <__alt_data_end+0xfc0037f4>
 40039dc:	20001b1e 	bne	r4,zero,4003a4c <__addsf3+0x420>
 40039e0:	28003926 	beq	r5,zero,4003ac8 <__addsf3+0x49c>
 40039e4:	2809883a 	mov	r4,r5
 40039e8:	3823883a 	mov	r17,r7
 40039ec:	04003fc4 	movi	r16,255
 40039f0:	003f2506 	br	4003688 <__alt_data_end+0xfc003688>
 40039f4:	01c03fc4 	movi	r7,255
 40039f8:	31c02226 	beq	r6,r7,4003a84 <__addsf3+0x458>
 40039fc:	00c7c83a 	sub	r3,zero,r3
 4003a00:	21010034 	orhi	r4,r4,1024
 4003a04:	01c006c4 	movi	r7,27
 4003a08:	38c03616 	blt	r7,r3,4003ae4 <__addsf3+0x4b8>
 4003a0c:	01c00804 	movi	r7,32
 4003a10:	38cfc83a 	sub	r7,r7,r3
 4003a14:	21ce983a 	sll	r7,r4,r7
 4003a18:	20c6d83a 	srl	r3,r4,r3
 4003a1c:	3808c03a 	cmpne	r4,r7,zero
 4003a20:	1906b03a 	or	r3,r3,r4
 4003a24:	1949883a 	add	r4,r3,r5
 4003a28:	3021883a 	mov	r16,r6
 4003a2c:	003f7106 	br	40037f4 <__alt_data_end+0xfc0037f4>
 4003a30:	283f1526 	beq	r5,zero,4003688 <__alt_data_end+0xfc003688>
 4003a34:	2145c83a 	sub	r2,r4,r5
 4003a38:	10c1002c 	andhi	r3,r2,1024
 4003a3c:	183f4f26 	beq	r3,zero,400377c <__alt_data_end+0xfc00377c>
 4003a40:	2909c83a 	sub	r4,r5,r4
 4003a44:	3823883a 	mov	r17,r7
 4003a48:	003f0f06 	br	4003688 <__alt_data_end+0xfc003688>
 4003a4c:	28001a26 	beq	r5,zero,4003ab8 <__addsf3+0x48c>
 4003a50:	2008d0fa 	srli	r4,r4,3
 4003a54:	2080102c 	andhi	r2,r4,64
 4003a58:	10000526 	beq	r2,zero,4003a70 <__addsf3+0x444>
 4003a5c:	280ad0fa 	srli	r5,r5,3
 4003a60:	2880102c 	andhi	r2,r5,64
 4003a64:	1000021e 	bne	r2,zero,4003a70 <__addsf3+0x444>
 4003a68:	2809883a 	mov	r4,r5
 4003a6c:	3823883a 	mov	r17,r7
 4003a70:	200890fa 	slli	r4,r4,3
 4003a74:	04003fc4 	movi	r16,255
 4003a78:	003f0306 	br	4003688 <__alt_data_end+0xfc003688>
 4003a7c:	01c03fc4 	movi	r7,255
 4003a80:	31ffe01e 	bne	r6,r7,4003a04 <__alt_data_end+0xfc003a04>
 4003a84:	2809883a 	mov	r4,r5
 4003a88:	3021883a 	mov	r16,r6
 4003a8c:	003efe06 	br	4003688 <__alt_data_end+0xfc003688>
 4003a90:	20001126 	beq	r4,zero,4003ad8 <__addsf3+0x4ac>
 4003a94:	28000826 	beq	r5,zero,4003ab8 <__addsf3+0x48c>
 4003a98:	2008d0fa 	srli	r4,r4,3
 4003a9c:	2080102c 	andhi	r2,r4,64
 4003aa0:	103ff326 	beq	r2,zero,4003a70 <__alt_data_end+0xfc003a70>
 4003aa4:	280ad0fa 	srli	r5,r5,3
 4003aa8:	2880102c 	andhi	r2,r5,64
 4003aac:	103ff01e 	bne	r2,zero,4003a70 <__alt_data_end+0xfc003a70>
 4003ab0:	2809883a 	mov	r4,r5
 4003ab4:	003fee06 	br	4003a70 <__alt_data_end+0xfc003a70>
 4003ab8:	04003fc4 	movi	r16,255
 4003abc:	003ef206 	br	4003688 <__alt_data_end+0xfc003688>
 4003ac0:	01000044 	movi	r4,1
 4003ac4:	003f9706 	br	4003924 <__alt_data_end+0xfc003924>
 4003ac8:	0005883a 	mov	r2,zero
 4003acc:	003f3406 	br	40037a0 <__alt_data_end+0xfc0037a0>
 4003ad0:	2809883a 	mov	r4,r5
 4003ad4:	003eec06 	br	4003688 <__alt_data_end+0xfc003688>
 4003ad8:	2809883a 	mov	r4,r5
 4003adc:	04003fc4 	movi	r16,255
 4003ae0:	003ee906 	br	4003688 <__alt_data_end+0xfc003688>
 4003ae4:	00c00044 	movi	r3,1
 4003ae8:	003fce06 	br	4003a24 <__alt_data_end+0xfc003a24>
 4003aec:	0005883a 	mov	r2,zero
 4003af0:	003f4e06 	br	400382c <__alt_data_end+0xfc00382c>

04003af4 <__divsf3>:
 4003af4:	defff504 	addi	sp,sp,-44
 4003af8:	200cd5fa 	srli	r6,r4,23
 4003afc:	dcc00415 	stw	r19,16(sp)
 4003b00:	2026d7fa 	srli	r19,r4,31
 4003b04:	00c02034 	movhi	r3,128
 4003b08:	dd800715 	stw	r22,28(sp)
 4003b0c:	dd000515 	stw	r20,20(sp)
 4003b10:	dc800315 	stw	r18,12(sp)
 4003b14:	18ffffc4 	addi	r3,r3,-1
 4003b18:	dfc00a15 	stw	ra,40(sp)
 4003b1c:	df000915 	stw	fp,36(sp)
 4003b20:	ddc00815 	stw	r23,32(sp)
 4003b24:	dd400615 	stw	r21,24(sp)
 4003b28:	dc400215 	stw	r17,8(sp)
 4003b2c:	dc000115 	stw	r16,4(sp)
 4003b30:	35003fcc 	andi	r20,r6,255
 4003b34:	1924703a 	and	r18,r3,r4
 4003b38:	9d803fcc 	andi	r22,r19,255
 4003b3c:	a0005226 	beq	r20,zero,4003c88 <__divsf3+0x194>
 4003b40:	00803fc4 	movi	r2,255
 4003b44:	a0802e26 	beq	r20,r2,4003c00 <__divsf3+0x10c>
 4003b48:	91002034 	orhi	r4,r18,128
 4003b4c:	202490fa 	slli	r18,r4,3
 4003b50:	a53fe044 	addi	r20,r20,-127
 4003b54:	0021883a 	mov	r16,zero
 4003b58:	002f883a 	mov	r23,zero
 4003b5c:	280cd5fa 	srli	r6,r5,23
 4003b60:	282ad7fa 	srli	r21,r5,31
 4003b64:	00c02034 	movhi	r3,128
 4003b68:	18ffffc4 	addi	r3,r3,-1
 4003b6c:	31803fcc 	andi	r6,r6,255
 4003b70:	1962703a 	and	r17,r3,r5
 4003b74:	af003fcc 	andi	fp,r21,255
 4003b78:	30004a26 	beq	r6,zero,4003ca4 <__divsf3+0x1b0>
 4003b7c:	00803fc4 	movi	r2,255
 4003b80:	30804526 	beq	r6,r2,4003c98 <__divsf3+0x1a4>
 4003b84:	89402034 	orhi	r5,r17,128
 4003b88:	282290fa 	slli	r17,r5,3
 4003b8c:	31bfe044 	addi	r6,r6,-127
 4003b90:	000b883a 	mov	r5,zero
 4003b94:	2c20b03a 	or	r16,r5,r16
 4003b98:	802090ba 	slli	r16,r16,2
 4003b9c:	00810034 	movhi	r2,1024
 4003ba0:	108ef004 	addi	r2,r2,15296
 4003ba4:	80a1883a 	add	r16,r16,r2
 4003ba8:	81000017 	ldw	r4,0(r16)
 4003bac:	9d46f03a 	xor	r3,r19,r21
 4003bb0:	180f883a 	mov	r7,r3
 4003bb4:	18803fcc 	andi	r2,r3,255
 4003bb8:	a18dc83a 	sub	r6,r20,r6
 4003bbc:	2000683a 	jmp	r4
 4003bc0:	04003da4 	muli	r16,zero,246
 4003bc4:	04003c28 	cmpgeui	r16,zero,240
 4003bc8:	04003d98 	cmpnei	r16,zero,246
 4003bcc:	04003c14 	movui	r16,240
 4003bd0:	04003d98 	cmpnei	r16,zero,246
 4003bd4:	04003d70 	cmpltui	r16,zero,245
 4003bd8:	04003d98 	cmpnei	r16,zero,246
 4003bdc:	04003c14 	movui	r16,240
 4003be0:	04003c28 	cmpgeui	r16,zero,240
 4003be4:	04003c28 	cmpgeui	r16,zero,240
 4003be8:	04003d70 	cmpltui	r16,zero,245
 4003bec:	04003c14 	movui	r16,240
 4003bf0:	04003e84 	movi	r16,250
 4003bf4:	04003e84 	movi	r16,250
 4003bf8:	04003e84 	movi	r16,250
 4003bfc:	04003e38 	rdprs	r16,zero,248
 4003c00:	9000581e 	bne	r18,zero,4003d64 <__divsf3+0x270>
 4003c04:	04000204 	movi	r16,8
 4003c08:	05c00084 	movi	r23,2
 4003c0c:	003fd306 	br	4003b5c <__alt_data_end+0xfc003b5c>
 4003c10:	0023883a 	mov	r17,zero
 4003c14:	e02d883a 	mov	r22,fp
 4003c18:	282f883a 	mov	r23,r5
 4003c1c:	00800084 	movi	r2,2
 4003c20:	b8808f1e 	bne	r23,r2,4003e60 <__divsf3+0x36c>
 4003c24:	b005883a 	mov	r2,r22
 4003c28:	11c0004c 	andi	r7,r2,1
 4003c2c:	013fffc4 	movi	r4,-1
 4003c30:	000d883a 	mov	r6,zero
 4003c34:	21003fcc 	andi	r4,r4,255
 4003c38:	200895fa 	slli	r4,r4,23
 4003c3c:	38803fcc 	andi	r2,r7,255
 4003c40:	00c02034 	movhi	r3,128
 4003c44:	100497fa 	slli	r2,r2,31
 4003c48:	18ffffc4 	addi	r3,r3,-1
 4003c4c:	30c6703a 	and	r3,r6,r3
 4003c50:	1906b03a 	or	r3,r3,r4
 4003c54:	1884b03a 	or	r2,r3,r2
 4003c58:	dfc00a17 	ldw	ra,40(sp)
 4003c5c:	df000917 	ldw	fp,36(sp)
 4003c60:	ddc00817 	ldw	r23,32(sp)
 4003c64:	dd800717 	ldw	r22,28(sp)
 4003c68:	dd400617 	ldw	r21,24(sp)
 4003c6c:	dd000517 	ldw	r20,20(sp)
 4003c70:	dcc00417 	ldw	r19,16(sp)
 4003c74:	dc800317 	ldw	r18,12(sp)
 4003c78:	dc400217 	ldw	r17,8(sp)
 4003c7c:	dc000117 	ldw	r16,4(sp)
 4003c80:	dec00b04 	addi	sp,sp,44
 4003c84:	f800283a 	ret
 4003c88:	90002b1e 	bne	r18,zero,4003d38 <__divsf3+0x244>
 4003c8c:	04000104 	movi	r16,4
 4003c90:	05c00044 	movi	r23,1
 4003c94:	003fb106 	br	4003b5c <__alt_data_end+0xfc003b5c>
 4003c98:	8800251e 	bne	r17,zero,4003d30 <__divsf3+0x23c>
 4003c9c:	01400084 	movi	r5,2
 4003ca0:	00000206 	br	4003cac <__divsf3+0x1b8>
 4003ca4:	88001a1e 	bne	r17,zero,4003d10 <__divsf3+0x21c>
 4003ca8:	01400044 	movi	r5,1
 4003cac:	8160b03a 	or	r16,r16,r5
 4003cb0:	802090ba 	slli	r16,r16,2
 4003cb4:	00c10034 	movhi	r3,1024
 4003cb8:	18cf3404 	addi	r3,r3,15568
 4003cbc:	80e1883a 	add	r16,r16,r3
 4003cc0:	80c00017 	ldw	r3,0(r16)
 4003cc4:	9d44f03a 	xor	r2,r19,r21
 4003cc8:	a18dc83a 	sub	r6,r20,r6
 4003ccc:	1800683a 	jmp	r3
 4003cd0:	04003c28 	cmpgeui	r16,zero,240
 4003cd4:	04003c28 	cmpgeui	r16,zero,240
 4003cd8:	04003e74 	movhi	r16,249
 4003cdc:	04003c10 	cmplti	r16,zero,240
 4003ce0:	04003e74 	movhi	r16,249
 4003ce4:	04003d70 	cmpltui	r16,zero,245
 4003ce8:	04003e74 	movhi	r16,249
 4003cec:	04003c10 	cmplti	r16,zero,240
 4003cf0:	04003c28 	cmpgeui	r16,zero,240
 4003cf4:	04003c28 	cmpgeui	r16,zero,240
 4003cf8:	04003d70 	cmpltui	r16,zero,245
 4003cfc:	04003c10 	cmplti	r16,zero,240
 4003d00:	04003e84 	movi	r16,250
 4003d04:	04003e84 	movi	r16,250
 4003d08:	04003e84 	movi	r16,250
 4003d0c:	04003e9c 	xori	r16,zero,250
 4003d10:	8809883a 	mov	r4,r17
 4003d14:	4004a980 	call	4004a98 <__clzsi2>
 4003d18:	10fffec4 	addi	r3,r2,-5
 4003d1c:	10801d84 	addi	r2,r2,118
 4003d20:	88e2983a 	sll	r17,r17,r3
 4003d24:	008dc83a 	sub	r6,zero,r2
 4003d28:	000b883a 	mov	r5,zero
 4003d2c:	003f9906 	br	4003b94 <__alt_data_end+0xfc003b94>
 4003d30:	014000c4 	movi	r5,3
 4003d34:	003f9706 	br	4003b94 <__alt_data_end+0xfc003b94>
 4003d38:	9009883a 	mov	r4,r18
 4003d3c:	d9400015 	stw	r5,0(sp)
 4003d40:	4004a980 	call	4004a98 <__clzsi2>
 4003d44:	10fffec4 	addi	r3,r2,-5
 4003d48:	11801d84 	addi	r6,r2,118
 4003d4c:	90e4983a 	sll	r18,r18,r3
 4003d50:	01a9c83a 	sub	r20,zero,r6
 4003d54:	0021883a 	mov	r16,zero
 4003d58:	002f883a 	mov	r23,zero
 4003d5c:	d9400017 	ldw	r5,0(sp)
 4003d60:	003f7e06 	br	4003b5c <__alt_data_end+0xfc003b5c>
 4003d64:	04000304 	movi	r16,12
 4003d68:	05c000c4 	movi	r23,3
 4003d6c:	003f7b06 	br	4003b5c <__alt_data_end+0xfc003b5c>
 4003d70:	01802034 	movhi	r6,128
 4003d74:	000f883a 	mov	r7,zero
 4003d78:	31bfffc4 	addi	r6,r6,-1
 4003d7c:	013fffc4 	movi	r4,-1
 4003d80:	003fac06 	br	4003c34 <__alt_data_end+0xfc003c34>
 4003d84:	01400044 	movi	r5,1
 4003d88:	2909c83a 	sub	r4,r5,r4
 4003d8c:	00c006c4 	movi	r3,27
 4003d90:	19004b0e 	bge	r3,r4,4003ec0 <__divsf3+0x3cc>
 4003d94:	114e703a 	and	r7,r2,r5
 4003d98:	0009883a 	mov	r4,zero
 4003d9c:	000d883a 	mov	r6,zero
 4003da0:	003fa406 	br	4003c34 <__alt_data_end+0xfc003c34>
 4003da4:	9006917a 	slli	r3,r18,5
 4003da8:	8822917a 	slli	r17,r17,5
 4003dac:	1c40372e 	bgeu	r3,r17,4003e8c <__divsf3+0x398>
 4003db0:	31bfffc4 	addi	r6,r6,-1
 4003db4:	010006c4 	movi	r4,27
 4003db8:	000b883a 	mov	r5,zero
 4003dbc:	180f883a 	mov	r7,r3
 4003dc0:	294b883a 	add	r5,r5,r5
 4003dc4:	18c7883a 	add	r3,r3,r3
 4003dc8:	38000116 	blt	r7,zero,4003dd0 <__divsf3+0x2dc>
 4003dcc:	1c400236 	bltu	r3,r17,4003dd8 <__divsf3+0x2e4>
 4003dd0:	1c47c83a 	sub	r3,r3,r17
 4003dd4:	29400054 	ori	r5,r5,1
 4003dd8:	213fffc4 	addi	r4,r4,-1
 4003ddc:	203ff71e 	bne	r4,zero,4003dbc <__alt_data_end+0xfc003dbc>
 4003de0:	1806c03a 	cmpne	r3,r3,zero
 4003de4:	1962b03a 	or	r17,r3,r5
 4003de8:	31001fc4 	addi	r4,r6,127
 4003dec:	013fe50e 	bge	zero,r4,4003d84 <__alt_data_end+0xfc003d84>
 4003df0:	88c001cc 	andi	r3,r17,7
 4003df4:	18000426 	beq	r3,zero,4003e08 <__divsf3+0x314>
 4003df8:	88c003cc 	andi	r3,r17,15
 4003dfc:	01400104 	movi	r5,4
 4003e00:	19400126 	beq	r3,r5,4003e08 <__divsf3+0x314>
 4003e04:	8963883a 	add	r17,r17,r5
 4003e08:	88c2002c 	andhi	r3,r17,2048
 4003e0c:	18000426 	beq	r3,zero,4003e20 <__divsf3+0x32c>
 4003e10:	00fe0034 	movhi	r3,63488
 4003e14:	18ffffc4 	addi	r3,r3,-1
 4003e18:	31002004 	addi	r4,r6,128
 4003e1c:	88e2703a 	and	r17,r17,r3
 4003e20:	00c03f84 	movi	r3,254
 4003e24:	193f8016 	blt	r3,r4,4003c28 <__alt_data_end+0xfc003c28>
 4003e28:	880c91ba 	slli	r6,r17,6
 4003e2c:	11c0004c 	andi	r7,r2,1
 4003e30:	300cd27a 	srli	r6,r6,9
 4003e34:	003f7f06 	br	4003c34 <__alt_data_end+0xfc003c34>
 4003e38:	9080102c 	andhi	r2,r18,64
 4003e3c:	10000226 	beq	r2,zero,4003e48 <__divsf3+0x354>
 4003e40:	8880102c 	andhi	r2,r17,64
 4003e44:	10001826 	beq	r2,zero,4003ea8 <__divsf3+0x3b4>
 4003e48:	00802034 	movhi	r2,128
 4003e4c:	91801034 	orhi	r6,r18,64
 4003e50:	10bfffc4 	addi	r2,r2,-1
 4003e54:	980f883a 	mov	r7,r19
 4003e58:	308c703a 	and	r6,r6,r2
 4003e5c:	003fc706 	br	4003d7c <__alt_data_end+0xfc003d7c>
 4003e60:	008000c4 	movi	r2,3
 4003e64:	b8802d26 	beq	r23,r2,4003f1c <__divsf3+0x428>
 4003e68:	00c00044 	movi	r3,1
 4003e6c:	b005883a 	mov	r2,r22
 4003e70:	b8ffdd1e 	bne	r23,r3,4003de8 <__alt_data_end+0xfc003de8>
 4003e74:	11c0004c 	andi	r7,r2,1
 4003e78:	0009883a 	mov	r4,zero
 4003e7c:	000d883a 	mov	r6,zero
 4003e80:	003f6c06 	br	4003c34 <__alt_data_end+0xfc003c34>
 4003e84:	9023883a 	mov	r17,r18
 4003e88:	003f6406 	br	4003c1c <__alt_data_end+0xfc003c1c>
 4003e8c:	1c47c83a 	sub	r3,r3,r17
 4003e90:	01000684 	movi	r4,26
 4003e94:	01400044 	movi	r5,1
 4003e98:	003fc806 	br	4003dbc <__alt_data_end+0xfc003dbc>
 4003e9c:	9080102c 	andhi	r2,r18,64
 4003ea0:	103fe926 	beq	r2,zero,4003e48 <__alt_data_end+0xfc003e48>
 4003ea4:	0023883a 	mov	r17,zero
 4003ea8:	00802034 	movhi	r2,128
 4003eac:	89801034 	orhi	r6,r17,64
 4003eb0:	10bfffc4 	addi	r2,r2,-1
 4003eb4:	a80f883a 	mov	r7,r21
 4003eb8:	308c703a 	and	r6,r6,r2
 4003ebc:	003faf06 	br	4003d7c <__alt_data_end+0xfc003d7c>
 4003ec0:	01c00804 	movi	r7,32
 4003ec4:	390fc83a 	sub	r7,r7,r4
 4003ec8:	89ce983a 	sll	r7,r17,r7
 4003ecc:	890ad83a 	srl	r5,r17,r4
 4003ed0:	380ec03a 	cmpne	r7,r7,zero
 4003ed4:	29cab03a 	or	r5,r5,r7
 4003ed8:	28c001cc 	andi	r3,r5,7
 4003edc:	18000426 	beq	r3,zero,4003ef0 <__divsf3+0x3fc>
 4003ee0:	28c003cc 	andi	r3,r5,15
 4003ee4:	01000104 	movi	r4,4
 4003ee8:	19000126 	beq	r3,r4,4003ef0 <__divsf3+0x3fc>
 4003eec:	290b883a 	add	r5,r5,r4
 4003ef0:	28c1002c 	andhi	r3,r5,1024
 4003ef4:	18000426 	beq	r3,zero,4003f08 <__divsf3+0x414>
 4003ef8:	11c0004c 	andi	r7,r2,1
 4003efc:	01000044 	movi	r4,1
 4003f00:	000d883a 	mov	r6,zero
 4003f04:	003f4b06 	br	4003c34 <__alt_data_end+0xfc003c34>
 4003f08:	280a91ba 	slli	r5,r5,6
 4003f0c:	11c0004c 	andi	r7,r2,1
 4003f10:	0009883a 	mov	r4,zero
 4003f14:	280cd27a 	srli	r6,r5,9
 4003f18:	003f4606 	br	4003c34 <__alt_data_end+0xfc003c34>
 4003f1c:	00802034 	movhi	r2,128
 4003f20:	89801034 	orhi	r6,r17,64
 4003f24:	10bfffc4 	addi	r2,r2,-1
 4003f28:	b00f883a 	mov	r7,r22
 4003f2c:	308c703a 	and	r6,r6,r2
 4003f30:	003f9206 	br	4003d7c <__alt_data_end+0xfc003d7c>

04003f34 <__gesf2>:
 4003f34:	2004d5fa 	srli	r2,r4,23
 4003f38:	2806d5fa 	srli	r3,r5,23
 4003f3c:	01802034 	movhi	r6,128
 4003f40:	31bfffc4 	addi	r6,r6,-1
 4003f44:	10803fcc 	andi	r2,r2,255
 4003f48:	01c03fc4 	movi	r7,255
 4003f4c:	3110703a 	and	r8,r6,r4
 4003f50:	18c03fcc 	andi	r3,r3,255
 4003f54:	314c703a 	and	r6,r6,r5
 4003f58:	2008d7fa 	srli	r4,r4,31
 4003f5c:	280ad7fa 	srli	r5,r5,31
 4003f60:	11c01926 	beq	r2,r7,4003fc8 <__gesf2+0x94>
 4003f64:	01c03fc4 	movi	r7,255
 4003f68:	19c00f26 	beq	r3,r7,4003fa8 <__gesf2+0x74>
 4003f6c:	1000061e 	bne	r2,zero,4003f88 <__gesf2+0x54>
 4003f70:	400f003a 	cmpeq	r7,r8,zero
 4003f74:	1800071e 	bne	r3,zero,4003f94 <__gesf2+0x60>
 4003f78:	3000061e 	bne	r6,zero,4003f94 <__gesf2+0x60>
 4003f7c:	0005883a 	mov	r2,zero
 4003f80:	40000e1e 	bne	r8,zero,4003fbc <__gesf2+0x88>
 4003f84:	f800283a 	ret
 4003f88:	18000a1e 	bne	r3,zero,4003fb4 <__gesf2+0x80>
 4003f8c:	30000b26 	beq	r6,zero,4003fbc <__gesf2+0x88>
 4003f90:	000f883a 	mov	r7,zero
 4003f94:	29403fcc 	andi	r5,r5,255
 4003f98:	38000726 	beq	r7,zero,4003fb8 <__gesf2+0x84>
 4003f9c:	28000826 	beq	r5,zero,4003fc0 <__gesf2+0x8c>
 4003fa0:	00800044 	movi	r2,1
 4003fa4:	f800283a 	ret
 4003fa8:	303ff026 	beq	r6,zero,4003f6c <__alt_data_end+0xfc003f6c>
 4003fac:	00bfff84 	movi	r2,-2
 4003fb0:	f800283a 	ret
 4003fb4:	29403fcc 	andi	r5,r5,255
 4003fb8:	21400526 	beq	r4,r5,4003fd0 <__gesf2+0x9c>
 4003fbc:	203ff826 	beq	r4,zero,4003fa0 <__alt_data_end+0xfc003fa0>
 4003fc0:	00bfffc4 	movi	r2,-1
 4003fc4:	f800283a 	ret
 4003fc8:	403fe626 	beq	r8,zero,4003f64 <__alt_data_end+0xfc003f64>
 4003fcc:	003ff706 	br	4003fac <__alt_data_end+0xfc003fac>
 4003fd0:	18bffa16 	blt	r3,r2,4003fbc <__alt_data_end+0xfc003fbc>
 4003fd4:	10c00216 	blt	r2,r3,4003fe0 <__gesf2+0xac>
 4003fd8:	323ff836 	bltu	r6,r8,4003fbc <__alt_data_end+0xfc003fbc>
 4003fdc:	4180022e 	bgeu	r8,r6,4003fe8 <__gesf2+0xb4>
 4003fe0:	203fef1e 	bne	r4,zero,4003fa0 <__alt_data_end+0xfc003fa0>
 4003fe4:	003ff606 	br	4003fc0 <__alt_data_end+0xfc003fc0>
 4003fe8:	0005883a 	mov	r2,zero
 4003fec:	f800283a 	ret

04003ff0 <__mulsf3>:
 4003ff0:	defff504 	addi	sp,sp,-44
 4003ff4:	dc000115 	stw	r16,4(sp)
 4003ff8:	2020d5fa 	srli	r16,r4,23
 4003ffc:	dd400615 	stw	r21,24(sp)
 4004000:	202ad7fa 	srli	r21,r4,31
 4004004:	dc800315 	stw	r18,12(sp)
 4004008:	04802034 	movhi	r18,128
 400400c:	df000915 	stw	fp,36(sp)
 4004010:	dd000515 	stw	r20,20(sp)
 4004014:	94bfffc4 	addi	r18,r18,-1
 4004018:	dfc00a15 	stw	ra,40(sp)
 400401c:	ddc00815 	stw	r23,32(sp)
 4004020:	dd800715 	stw	r22,28(sp)
 4004024:	dcc00415 	stw	r19,16(sp)
 4004028:	dc400215 	stw	r17,8(sp)
 400402c:	84003fcc 	andi	r16,r16,255
 4004030:	9124703a 	and	r18,r18,r4
 4004034:	a829883a 	mov	r20,r21
 4004038:	af003fcc 	andi	fp,r21,255
 400403c:	80005426 	beq	r16,zero,4004190 <__mulsf3+0x1a0>
 4004040:	00803fc4 	movi	r2,255
 4004044:	80802f26 	beq	r16,r2,4004104 <__mulsf3+0x114>
 4004048:	91002034 	orhi	r4,r18,128
 400404c:	202490fa 	slli	r18,r4,3
 4004050:	843fe044 	addi	r16,r16,-127
 4004054:	0023883a 	mov	r17,zero
 4004058:	002f883a 	mov	r23,zero
 400405c:	2804d5fa 	srli	r2,r5,23
 4004060:	282cd7fa 	srli	r22,r5,31
 4004064:	01002034 	movhi	r4,128
 4004068:	213fffc4 	addi	r4,r4,-1
 400406c:	10803fcc 	andi	r2,r2,255
 4004070:	2166703a 	and	r19,r4,r5
 4004074:	b1803fcc 	andi	r6,r22,255
 4004078:	10004c26 	beq	r2,zero,40041ac <__mulsf3+0x1bc>
 400407c:	00c03fc4 	movi	r3,255
 4004080:	10c04726 	beq	r2,r3,40041a0 <__mulsf3+0x1b0>
 4004084:	99002034 	orhi	r4,r19,128
 4004088:	202690fa 	slli	r19,r4,3
 400408c:	10bfe044 	addi	r2,r2,-127
 4004090:	0007883a 	mov	r3,zero
 4004094:	80a1883a 	add	r16,r16,r2
 4004098:	010003c4 	movi	r4,15
 400409c:	1c44b03a 	or	r2,r3,r17
 40040a0:	b56af03a 	xor	r21,r22,r21
 40040a4:	81c00044 	addi	r7,r16,1
 40040a8:	20806b36 	bltu	r4,r2,4004258 <__mulsf3+0x268>
 40040ac:	100490ba 	slli	r2,r2,2
 40040b0:	01010034 	movhi	r4,1024
 40040b4:	21103104 	addi	r4,r4,16580
 40040b8:	1105883a 	add	r2,r2,r4
 40040bc:	10800017 	ldw	r2,0(r2)
 40040c0:	1000683a 	jmp	r2
 40040c4:	04004258 	cmpnei	r16,zero,265
 40040c8:	04004118 	cmpnei	r16,zero,260
 40040cc:	04004118 	cmpnei	r16,zero,260
 40040d0:	04004114 	movui	r16,260
 40040d4:	0400423c 	xorhi	r16,zero,264
 40040d8:	0400423c 	xorhi	r16,zero,264
 40040dc:	04004228 	cmpgeui	r16,zero,264
 40040e0:	04004114 	movui	r16,260
 40040e4:	0400423c 	xorhi	r16,zero,264
 40040e8:	04004228 	cmpgeui	r16,zero,264
 40040ec:	0400423c 	xorhi	r16,zero,264
 40040f0:	04004114 	movui	r16,260
 40040f4:	04004248 	cmpgei	r16,zero,265
 40040f8:	04004248 	cmpgei	r16,zero,265
 40040fc:	04004248 	cmpgei	r16,zero,265
 4004100:	04004358 	cmpnei	r16,zero,269
 4004104:	90003b1e 	bne	r18,zero,40041f4 <__mulsf3+0x204>
 4004108:	04400204 	movi	r17,8
 400410c:	05c00084 	movi	r23,2
 4004110:	003fd206 	br	400405c <__alt_data_end+0xfc00405c>
 4004114:	302b883a 	mov	r21,r6
 4004118:	00800084 	movi	r2,2
 400411c:	18802626 	beq	r3,r2,40041b8 <__mulsf3+0x1c8>
 4004120:	008000c4 	movi	r2,3
 4004124:	1880b826 	beq	r3,r2,4004408 <__mulsf3+0x418>
 4004128:	00800044 	movi	r2,1
 400412c:	1880af1e 	bne	r3,r2,40043ec <__mulsf3+0x3fc>
 4004130:	a829883a 	mov	r20,r21
 4004134:	0007883a 	mov	r3,zero
 4004138:	0009883a 	mov	r4,zero
 400413c:	18803fcc 	andi	r2,r3,255
 4004140:	100695fa 	slli	r3,r2,23
 4004144:	a0803fcc 	andi	r2,r20,255
 4004148:	100a97fa 	slli	r5,r2,31
 400414c:	00802034 	movhi	r2,128
 4004150:	10bfffc4 	addi	r2,r2,-1
 4004154:	2084703a 	and	r2,r4,r2
 4004158:	10c4b03a 	or	r2,r2,r3
 400415c:	1144b03a 	or	r2,r2,r5
 4004160:	dfc00a17 	ldw	ra,40(sp)
 4004164:	df000917 	ldw	fp,36(sp)
 4004168:	ddc00817 	ldw	r23,32(sp)
 400416c:	dd800717 	ldw	r22,28(sp)
 4004170:	dd400617 	ldw	r21,24(sp)
 4004174:	dd000517 	ldw	r20,20(sp)
 4004178:	dcc00417 	ldw	r19,16(sp)
 400417c:	dc800317 	ldw	r18,12(sp)
 4004180:	dc400217 	ldw	r17,8(sp)
 4004184:	dc000117 	ldw	r16,4(sp)
 4004188:	dec00b04 	addi	sp,sp,44
 400418c:	f800283a 	ret
 4004190:	90000d1e 	bne	r18,zero,40041c8 <__mulsf3+0x1d8>
 4004194:	04400104 	movi	r17,4
 4004198:	05c00044 	movi	r23,1
 400419c:	003faf06 	br	400405c <__alt_data_end+0xfc00405c>
 40041a0:	9806c03a 	cmpne	r3,r19,zero
 40041a4:	18c00084 	addi	r3,r3,2
 40041a8:	003fba06 	br	4004094 <__alt_data_end+0xfc004094>
 40041ac:	9800141e 	bne	r19,zero,4004200 <__mulsf3+0x210>
 40041b0:	00c00044 	movi	r3,1
 40041b4:	003fb706 	br	4004094 <__alt_data_end+0xfc004094>
 40041b8:	a829883a 	mov	r20,r21
 40041bc:	00ffffc4 	movi	r3,-1
 40041c0:	0009883a 	mov	r4,zero
 40041c4:	003fdd06 	br	400413c <__alt_data_end+0xfc00413c>
 40041c8:	9009883a 	mov	r4,r18
 40041cc:	d9400015 	stw	r5,0(sp)
 40041d0:	4004a980 	call	4004a98 <__clzsi2>
 40041d4:	10fffec4 	addi	r3,r2,-5
 40041d8:	10801d84 	addi	r2,r2,118
 40041dc:	90e4983a 	sll	r18,r18,r3
 40041e0:	00a1c83a 	sub	r16,zero,r2
 40041e4:	0023883a 	mov	r17,zero
 40041e8:	002f883a 	mov	r23,zero
 40041ec:	d9400017 	ldw	r5,0(sp)
 40041f0:	003f9a06 	br	400405c <__alt_data_end+0xfc00405c>
 40041f4:	04400304 	movi	r17,12
 40041f8:	05c000c4 	movi	r23,3
 40041fc:	003f9706 	br	400405c <__alt_data_end+0xfc00405c>
 4004200:	9809883a 	mov	r4,r19
 4004204:	d9800015 	stw	r6,0(sp)
 4004208:	4004a980 	call	4004a98 <__clzsi2>
 400420c:	10fffec4 	addi	r3,r2,-5
 4004210:	10801d84 	addi	r2,r2,118
 4004214:	98e6983a 	sll	r19,r19,r3
 4004218:	0085c83a 	sub	r2,zero,r2
 400421c:	0007883a 	mov	r3,zero
 4004220:	d9800017 	ldw	r6,0(sp)
 4004224:	003f9b06 	br	4004094 <__alt_data_end+0xfc004094>
 4004228:	01002034 	movhi	r4,128
 400422c:	0029883a 	mov	r20,zero
 4004230:	213fffc4 	addi	r4,r4,-1
 4004234:	00ffffc4 	movi	r3,-1
 4004238:	003fc006 	br	400413c <__alt_data_end+0xfc00413c>
 400423c:	9027883a 	mov	r19,r18
 4004240:	b807883a 	mov	r3,r23
 4004244:	003fb406 	br	4004118 <__alt_data_end+0xfc004118>
 4004248:	9027883a 	mov	r19,r18
 400424c:	e02b883a 	mov	r21,fp
 4004250:	b807883a 	mov	r3,r23
 4004254:	003fb006 	br	4004118 <__alt_data_end+0xfc004118>
 4004258:	9028d43a 	srli	r20,r18,16
 400425c:	982cd43a 	srli	r22,r19,16
 4004260:	94bfffcc 	andi	r18,r18,65535
 4004264:	9cffffcc 	andi	r19,r19,65535
 4004268:	980b883a 	mov	r5,r19
 400426c:	9009883a 	mov	r4,r18
 4004270:	d9c00015 	stw	r7,0(sp)
 4004274:	40036040 	call	4003604 <__mulsi3>
 4004278:	a00b883a 	mov	r5,r20
 400427c:	9809883a 	mov	r4,r19
 4004280:	1023883a 	mov	r17,r2
 4004284:	40036040 	call	4003604 <__mulsi3>
 4004288:	a009883a 	mov	r4,r20
 400428c:	b00b883a 	mov	r5,r22
 4004290:	1027883a 	mov	r19,r2
 4004294:	40036040 	call	4003604 <__mulsi3>
 4004298:	b00b883a 	mov	r5,r22
 400429c:	9009883a 	mov	r4,r18
 40042a0:	1029883a 	mov	r20,r2
 40042a4:	40036040 	call	4003604 <__mulsi3>
 40042a8:	8806d43a 	srli	r3,r17,16
 40042ac:	14c5883a 	add	r2,r2,r19
 40042b0:	d9c00017 	ldw	r7,0(sp)
 40042b4:	1885883a 	add	r2,r3,r2
 40042b8:	14c0022e 	bgeu	r2,r19,40042c4 <__mulsf3+0x2d4>
 40042bc:	00c00074 	movhi	r3,1
 40042c0:	a0e9883a 	add	r20,r20,r3
 40042c4:	1026943a 	slli	r19,r2,16
 40042c8:	8c7fffcc 	andi	r17,r17,65535
 40042cc:	1004d43a 	srli	r2,r2,16
 40042d0:	9c63883a 	add	r17,r19,r17
 40042d4:	882691ba 	slli	r19,r17,6
 40042d8:	1505883a 	add	r2,r2,r20
 40042dc:	8822d6ba 	srli	r17,r17,26
 40042e0:	100891ba 	slli	r4,r2,6
 40042e4:	9826c03a 	cmpne	r19,r19,zero
 40042e8:	9c62b03a 	or	r17,r19,r17
 40042ec:	8926b03a 	or	r19,r17,r4
 40042f0:	9882002c 	andhi	r2,r19,2048
 40042f4:	10000426 	beq	r2,zero,4004308 <__mulsf3+0x318>
 40042f8:	9804d07a 	srli	r2,r19,1
 40042fc:	9900004c 	andi	r4,r19,1
 4004300:	3821883a 	mov	r16,r7
 4004304:	1126b03a 	or	r19,r2,r4
 4004308:	80c01fc4 	addi	r3,r16,127
 400430c:	00c0210e 	bge	zero,r3,4004394 <__mulsf3+0x3a4>
 4004310:	988001cc 	andi	r2,r19,7
 4004314:	10000426 	beq	r2,zero,4004328 <__mulsf3+0x338>
 4004318:	988003cc 	andi	r2,r19,15
 400431c:	01000104 	movi	r4,4
 4004320:	11000126 	beq	r2,r4,4004328 <__mulsf3+0x338>
 4004324:	9927883a 	add	r19,r19,r4
 4004328:	9882002c 	andhi	r2,r19,2048
 400432c:	10000426 	beq	r2,zero,4004340 <__mulsf3+0x350>
 4004330:	00be0034 	movhi	r2,63488
 4004334:	10bfffc4 	addi	r2,r2,-1
 4004338:	80c02004 	addi	r3,r16,128
 400433c:	98a6703a 	and	r19,r19,r2
 4004340:	00803f84 	movi	r2,254
 4004344:	10ff9c16 	blt	r2,r3,40041b8 <__alt_data_end+0xfc0041b8>
 4004348:	980891ba 	slli	r4,r19,6
 400434c:	a829883a 	mov	r20,r21
 4004350:	2008d27a 	srli	r4,r4,9
 4004354:	003f7906 	br	400413c <__alt_data_end+0xfc00413c>
 4004358:	9080102c 	andhi	r2,r18,64
 400435c:	10000826 	beq	r2,zero,4004380 <__mulsf3+0x390>
 4004360:	9880102c 	andhi	r2,r19,64
 4004364:	1000061e 	bne	r2,zero,4004380 <__mulsf3+0x390>
 4004368:	00802034 	movhi	r2,128
 400436c:	99001034 	orhi	r4,r19,64
 4004370:	10bfffc4 	addi	r2,r2,-1
 4004374:	b029883a 	mov	r20,r22
 4004378:	2088703a 	and	r4,r4,r2
 400437c:	003fad06 	br	4004234 <__alt_data_end+0xfc004234>
 4004380:	00802034 	movhi	r2,128
 4004384:	91001034 	orhi	r4,r18,64
 4004388:	10bfffc4 	addi	r2,r2,-1
 400438c:	2088703a 	and	r4,r4,r2
 4004390:	003fa806 	br	4004234 <__alt_data_end+0xfc004234>
 4004394:	00800044 	movi	r2,1
 4004398:	10c7c83a 	sub	r3,r2,r3
 400439c:	008006c4 	movi	r2,27
 40043a0:	10ff6316 	blt	r2,r3,4004130 <__alt_data_end+0xfc004130>
 40043a4:	00800804 	movi	r2,32
 40043a8:	10c5c83a 	sub	r2,r2,r3
 40043ac:	9884983a 	sll	r2,r19,r2
 40043b0:	98c6d83a 	srl	r3,r19,r3
 40043b4:	1004c03a 	cmpne	r2,r2,zero
 40043b8:	1884b03a 	or	r2,r3,r2
 40043bc:	10c001cc 	andi	r3,r2,7
 40043c0:	18000426 	beq	r3,zero,40043d4 <__mulsf3+0x3e4>
 40043c4:	10c003cc 	andi	r3,r2,15
 40043c8:	01000104 	movi	r4,4
 40043cc:	19000126 	beq	r3,r4,40043d4 <__mulsf3+0x3e4>
 40043d0:	1105883a 	add	r2,r2,r4
 40043d4:	10c1002c 	andhi	r3,r2,1024
 40043d8:	18000626 	beq	r3,zero,40043f4 <__mulsf3+0x404>
 40043dc:	a829883a 	mov	r20,r21
 40043e0:	00c00044 	movi	r3,1
 40043e4:	0009883a 	mov	r4,zero
 40043e8:	003f5406 	br	400413c <__alt_data_end+0xfc00413c>
 40043ec:	3821883a 	mov	r16,r7
 40043f0:	003fc506 	br	4004308 <__alt_data_end+0xfc004308>
 40043f4:	100491ba 	slli	r2,r2,6
 40043f8:	a829883a 	mov	r20,r21
 40043fc:	0007883a 	mov	r3,zero
 4004400:	1008d27a 	srli	r4,r2,9
 4004404:	003f4d06 	br	400413c <__alt_data_end+0xfc00413c>
 4004408:	00802034 	movhi	r2,128
 400440c:	99001034 	orhi	r4,r19,64
 4004410:	10bfffc4 	addi	r2,r2,-1
 4004414:	a829883a 	mov	r20,r21
 4004418:	2088703a 	and	r4,r4,r2
 400441c:	003f8506 	br	4004234 <__alt_data_end+0xfc004234>

04004420 <__subsf3>:
 4004420:	defffc04 	addi	sp,sp,-16
 4004424:	280cd5fa 	srli	r6,r5,23
 4004428:	dc000015 	stw	r16,0(sp)
 400442c:	01c02034 	movhi	r7,128
 4004430:	2020d5fa 	srli	r16,r4,23
 4004434:	39ffffc4 	addi	r7,r7,-1
 4004438:	3906703a 	and	r3,r7,r4
 400443c:	dc400115 	stw	r17,4(sp)
 4004440:	394e703a 	and	r7,r7,r5
 4004444:	2022d7fa 	srli	r17,r4,31
 4004448:	dfc00315 	stw	ra,12(sp)
 400444c:	dc800215 	stw	r18,8(sp)
 4004450:	31803fcc 	andi	r6,r6,255
 4004454:	01003fc4 	movi	r4,255
 4004458:	84003fcc 	andi	r16,r16,255
 400445c:	180690fa 	slli	r3,r3,3
 4004460:	2804d7fa 	srli	r2,r5,31
 4004464:	380e90fa 	slli	r7,r7,3
 4004468:	31006d26 	beq	r6,r4,4004620 <__subsf3+0x200>
 400446c:	1080005c 	xori	r2,r2,1
 4004470:	8189c83a 	sub	r4,r16,r6
 4004474:	14404f26 	beq	r2,r17,40045b4 <__subsf3+0x194>
 4004478:	0100770e 	bge	zero,r4,4004658 <__subsf3+0x238>
 400447c:	30001e1e 	bne	r6,zero,40044f8 <__subsf3+0xd8>
 4004480:	38006a1e 	bne	r7,zero,400462c <__subsf3+0x20c>
 4004484:	188001cc 	andi	r2,r3,7
 4004488:	10000426 	beq	r2,zero,400449c <__subsf3+0x7c>
 400448c:	188003cc 	andi	r2,r3,15
 4004490:	01000104 	movi	r4,4
 4004494:	11000126 	beq	r2,r4,400449c <__subsf3+0x7c>
 4004498:	1907883a 	add	r3,r3,r4
 400449c:	1881002c 	andhi	r2,r3,1024
 40044a0:	10003926 	beq	r2,zero,4004588 <__subsf3+0x168>
 40044a4:	84000044 	addi	r16,r16,1
 40044a8:	00803fc4 	movi	r2,255
 40044ac:	80807526 	beq	r16,r2,4004684 <__subsf3+0x264>
 40044b0:	180691ba 	slli	r3,r3,6
 40044b4:	8880004c 	andi	r2,r17,1
 40044b8:	180ad27a 	srli	r5,r3,9
 40044bc:	84003fcc 	andi	r16,r16,255
 40044c0:	800695fa 	slli	r3,r16,23
 40044c4:	10803fcc 	andi	r2,r2,255
 40044c8:	01002034 	movhi	r4,128
 40044cc:	213fffc4 	addi	r4,r4,-1
 40044d0:	100497fa 	slli	r2,r2,31
 40044d4:	2920703a 	and	r16,r5,r4
 40044d8:	80e0b03a 	or	r16,r16,r3
 40044dc:	8084b03a 	or	r2,r16,r2
 40044e0:	dfc00317 	ldw	ra,12(sp)
 40044e4:	dc800217 	ldw	r18,8(sp)
 40044e8:	dc400117 	ldw	r17,4(sp)
 40044ec:	dc000017 	ldw	r16,0(sp)
 40044f0:	dec00404 	addi	sp,sp,16
 40044f4:	f800283a 	ret
 40044f8:	00803fc4 	movi	r2,255
 40044fc:	80bfe126 	beq	r16,r2,4004484 <__alt_data_end+0xfc004484>
 4004500:	39c10034 	orhi	r7,r7,1024
 4004504:	008006c4 	movi	r2,27
 4004508:	11007416 	blt	r2,r4,40046dc <__subsf3+0x2bc>
 400450c:	00800804 	movi	r2,32
 4004510:	1105c83a 	sub	r2,r2,r4
 4004514:	3884983a 	sll	r2,r7,r2
 4004518:	390ed83a 	srl	r7,r7,r4
 400451c:	1008c03a 	cmpne	r4,r2,zero
 4004520:	390eb03a 	or	r7,r7,r4
 4004524:	19c7c83a 	sub	r3,r3,r7
 4004528:	1881002c 	andhi	r2,r3,1024
 400452c:	10001426 	beq	r2,zero,4004580 <__subsf3+0x160>
 4004530:	04810034 	movhi	r18,1024
 4004534:	94bfffc4 	addi	r18,r18,-1
 4004538:	1ca4703a 	and	r18,r3,r18
 400453c:	9009883a 	mov	r4,r18
 4004540:	4004a980 	call	4004a98 <__clzsi2>
 4004544:	10bffec4 	addi	r2,r2,-5
 4004548:	90a4983a 	sll	r18,r18,r2
 400454c:	14005116 	blt	r2,r16,4004694 <__subsf3+0x274>
 4004550:	1405c83a 	sub	r2,r2,r16
 4004554:	10c00044 	addi	r3,r2,1
 4004558:	00800804 	movi	r2,32
 400455c:	10c5c83a 	sub	r2,r2,r3
 4004560:	9084983a 	sll	r2,r18,r2
 4004564:	90e4d83a 	srl	r18,r18,r3
 4004568:	0021883a 	mov	r16,zero
 400456c:	1006c03a 	cmpne	r3,r2,zero
 4004570:	90c6b03a 	or	r3,r18,r3
 4004574:	003fc306 	br	4004484 <__alt_data_end+0xfc004484>
 4004578:	2000e026 	beq	r4,zero,40048fc <__subsf3+0x4dc>
 400457c:	2007883a 	mov	r3,r4
 4004580:	188001cc 	andi	r2,r3,7
 4004584:	103fc11e 	bne	r2,zero,400448c <__alt_data_end+0xfc00448c>
 4004588:	180ad0fa 	srli	r5,r3,3
 400458c:	00c03fc4 	movi	r3,255
 4004590:	8880004c 	andi	r2,r17,1
 4004594:	80c0031e 	bne	r16,r3,40045a4 <__subsf3+0x184>
 4004598:	28006d26 	beq	r5,zero,4004750 <__subsf3+0x330>
 400459c:	29401034 	orhi	r5,r5,64
 40045a0:	043fffc4 	movi	r16,-1
 40045a4:	00c02034 	movhi	r3,128
 40045a8:	18ffffc4 	addi	r3,r3,-1
 40045ac:	28ca703a 	and	r5,r5,r3
 40045b0:	003fc206 	br	40044bc <__alt_data_end+0xfc0044bc>
 40045b4:	01003c0e 	bge	zero,r4,40046a8 <__subsf3+0x288>
 40045b8:	30002126 	beq	r6,zero,4004640 <__subsf3+0x220>
 40045bc:	01403fc4 	movi	r5,255
 40045c0:	817fb026 	beq	r16,r5,4004484 <__alt_data_end+0xfc004484>
 40045c4:	39c10034 	orhi	r7,r7,1024
 40045c8:	014006c4 	movi	r5,27
 40045cc:	29007416 	blt	r5,r4,40047a0 <__subsf3+0x380>
 40045d0:	01400804 	movi	r5,32
 40045d4:	290bc83a 	sub	r5,r5,r4
 40045d8:	394a983a 	sll	r5,r7,r5
 40045dc:	390ed83a 	srl	r7,r7,r4
 40045e0:	2808c03a 	cmpne	r4,r5,zero
 40045e4:	390eb03a 	or	r7,r7,r4
 40045e8:	19c7883a 	add	r3,r3,r7
 40045ec:	1901002c 	andhi	r4,r3,1024
 40045f0:	20003826 	beq	r4,zero,40046d4 <__subsf3+0x2b4>
 40045f4:	84000044 	addi	r16,r16,1
 40045f8:	01003fc4 	movi	r4,255
 40045fc:	81005426 	beq	r16,r4,4004750 <__subsf3+0x330>
 4004600:	1023883a 	mov	r17,r2
 4004604:	00bf0034 	movhi	r2,64512
 4004608:	10bfffc4 	addi	r2,r2,-1
 400460c:	1900004c 	andi	r4,r3,1
 4004610:	1886703a 	and	r3,r3,r2
 4004614:	1806d07a 	srli	r3,r3,1
 4004618:	1906b03a 	or	r3,r3,r4
 400461c:	003f9906 	br	4004484 <__alt_data_end+0xfc004484>
 4004620:	383f9226 	beq	r7,zero,400446c <__alt_data_end+0xfc00446c>
 4004624:	10803fcc 	andi	r2,r2,255
 4004628:	003f9106 	br	4004470 <__alt_data_end+0xfc004470>
 400462c:	213fffc4 	addi	r4,r4,-1
 4004630:	203fbc26 	beq	r4,zero,4004524 <__alt_data_end+0xfc004524>
 4004634:	00803fc4 	movi	r2,255
 4004638:	80bfb21e 	bne	r16,r2,4004504 <__alt_data_end+0xfc004504>
 400463c:	003f9106 	br	4004484 <__alt_data_end+0xfc004484>
 4004640:	383f9026 	beq	r7,zero,4004484 <__alt_data_end+0xfc004484>
 4004644:	213fffc4 	addi	r4,r4,-1
 4004648:	203fe726 	beq	r4,zero,40045e8 <__alt_data_end+0xfc0045e8>
 400464c:	01403fc4 	movi	r5,255
 4004650:	817fdd1e 	bne	r16,r5,40045c8 <__alt_data_end+0xfc0045c8>
 4004654:	003f8b06 	br	4004484 <__alt_data_end+0xfc004484>
 4004658:	2000221e 	bne	r4,zero,40046e4 <__subsf3+0x2c4>
 400465c:	81000044 	addi	r4,r16,1
 4004660:	21003fcc 	andi	r4,r4,255
 4004664:	01400044 	movi	r5,1
 4004668:	2900470e 	bge	r5,r4,4004788 <__subsf3+0x368>
 400466c:	19e5c83a 	sub	r18,r3,r7
 4004670:	9141002c 	andhi	r5,r18,1024
 4004674:	28002d26 	beq	r5,zero,400472c <__subsf3+0x30c>
 4004678:	38e5c83a 	sub	r18,r7,r3
 400467c:	1023883a 	mov	r17,r2
 4004680:	003fae06 	br	400453c <__alt_data_end+0xfc00453c>
 4004684:	8880004c 	andi	r2,r17,1
 4004688:	043fffc4 	movi	r16,-1
 400468c:	000b883a 	mov	r5,zero
 4004690:	003f8a06 	br	40044bc <__alt_data_end+0xfc0044bc>
 4004694:	00ff0034 	movhi	r3,64512
 4004698:	18ffffc4 	addi	r3,r3,-1
 400469c:	80a1c83a 	sub	r16,r16,r2
 40046a0:	90c6703a 	and	r3,r18,r3
 40046a4:	003f7706 	br	4004484 <__alt_data_end+0xfc004484>
 40046a8:	2000431e 	bne	r4,zero,40047b8 <__subsf3+0x398>
 40046ac:	81000044 	addi	r4,r16,1
 40046b0:	21803fcc 	andi	r6,r4,255
 40046b4:	01400044 	movi	r5,1
 40046b8:	2980280e 	bge	r5,r6,400475c <__subsf3+0x33c>
 40046bc:	01403fc4 	movi	r5,255
 40046c0:	21402326 	beq	r4,r5,4004750 <__subsf3+0x330>
 40046c4:	19c7883a 	add	r3,r3,r7
 40046c8:	1806d07a 	srli	r3,r3,1
 40046cc:	2021883a 	mov	r16,r4
 40046d0:	003f6c06 	br	4004484 <__alt_data_end+0xfc004484>
 40046d4:	1023883a 	mov	r17,r2
 40046d8:	003fa906 	br	4004580 <__alt_data_end+0xfc004580>
 40046dc:	01c00044 	movi	r7,1
 40046e0:	003f9006 	br	4004524 <__alt_data_end+0xfc004524>
 40046e4:	8000151e 	bne	r16,zero,400473c <__subsf3+0x31c>
 40046e8:	18002f26 	beq	r3,zero,40047a8 <__subsf3+0x388>
 40046ec:	0108303a 	nor	r4,zero,r4
 40046f0:	20000a26 	beq	r4,zero,400471c <__subsf3+0x2fc>
 40046f4:	01403fc4 	movi	r5,255
 40046f8:	31402b26 	beq	r6,r5,40047a8 <__subsf3+0x388>
 40046fc:	014006c4 	movi	r5,27
 4004700:	29006e16 	blt	r5,r4,40048bc <__subsf3+0x49c>
 4004704:	01400804 	movi	r5,32
 4004708:	290bc83a 	sub	r5,r5,r4
 400470c:	194a983a 	sll	r5,r3,r5
 4004710:	1908d83a 	srl	r4,r3,r4
 4004714:	2806c03a 	cmpne	r3,r5,zero
 4004718:	20c6b03a 	or	r3,r4,r3
 400471c:	38c7c83a 	sub	r3,r7,r3
 4004720:	3021883a 	mov	r16,r6
 4004724:	1023883a 	mov	r17,r2
 4004728:	003f7f06 	br	4004528 <__alt_data_end+0xfc004528>
 400472c:	903f831e 	bne	r18,zero,400453c <__alt_data_end+0xfc00453c>
 4004730:	0005883a 	mov	r2,zero
 4004734:	0021883a 	mov	r16,zero
 4004738:	003f9a06 	br	40045a4 <__alt_data_end+0xfc0045a4>
 400473c:	01403fc4 	movi	r5,255
 4004740:	31401926 	beq	r6,r5,40047a8 <__subsf3+0x388>
 4004744:	0109c83a 	sub	r4,zero,r4
 4004748:	18c10034 	orhi	r3,r3,1024
 400474c:	003feb06 	br	40046fc <__alt_data_end+0xfc0046fc>
 4004750:	043fffc4 	movi	r16,-1
 4004754:	000b883a 	mov	r5,zero
 4004758:	003f5806 	br	40044bc <__alt_data_end+0xfc0044bc>
 400475c:	8000481e 	bne	r16,zero,4004880 <__subsf3+0x460>
 4004760:	18006226 	beq	r3,zero,40048ec <__subsf3+0x4cc>
 4004764:	383f4726 	beq	r7,zero,4004484 <__alt_data_end+0xfc004484>
 4004768:	19c7883a 	add	r3,r3,r7
 400476c:	1881002c 	andhi	r2,r3,1024
 4004770:	103f8326 	beq	r2,zero,4004580 <__alt_data_end+0xfc004580>
 4004774:	00bf0034 	movhi	r2,64512
 4004778:	10bfffc4 	addi	r2,r2,-1
 400477c:	2821883a 	mov	r16,r5
 4004780:	1886703a 	and	r3,r3,r2
 4004784:	003f3f06 	br	4004484 <__alt_data_end+0xfc004484>
 4004788:	80001c1e 	bne	r16,zero,40047fc <__subsf3+0x3dc>
 400478c:	1800261e 	bne	r3,zero,4004828 <__subsf3+0x408>
 4004790:	38004c26 	beq	r7,zero,40048c4 <__subsf3+0x4a4>
 4004794:	3807883a 	mov	r3,r7
 4004798:	1023883a 	mov	r17,r2
 400479c:	003f3906 	br	4004484 <__alt_data_end+0xfc004484>
 40047a0:	01c00044 	movi	r7,1
 40047a4:	003f9006 	br	40045e8 <__alt_data_end+0xfc0045e8>
 40047a8:	3807883a 	mov	r3,r7
 40047ac:	3021883a 	mov	r16,r6
 40047b0:	1023883a 	mov	r17,r2
 40047b4:	003f3306 	br	4004484 <__alt_data_end+0xfc004484>
 40047b8:	8000161e 	bne	r16,zero,4004814 <__subsf3+0x3f4>
 40047bc:	18002d26 	beq	r3,zero,4004874 <__subsf3+0x454>
 40047c0:	0108303a 	nor	r4,zero,r4
 40047c4:	20000a26 	beq	r4,zero,40047f0 <__subsf3+0x3d0>
 40047c8:	01403fc4 	movi	r5,255
 40047cc:	31402926 	beq	r6,r5,4004874 <__subsf3+0x454>
 40047d0:	014006c4 	movi	r5,27
 40047d4:	29004716 	blt	r5,r4,40048f4 <__subsf3+0x4d4>
 40047d8:	01400804 	movi	r5,32
 40047dc:	290bc83a 	sub	r5,r5,r4
 40047e0:	194a983a 	sll	r5,r3,r5
 40047e4:	1908d83a 	srl	r4,r3,r4
 40047e8:	2806c03a 	cmpne	r3,r5,zero
 40047ec:	20c6b03a 	or	r3,r4,r3
 40047f0:	19c7883a 	add	r3,r3,r7
 40047f4:	3021883a 	mov	r16,r6
 40047f8:	003f7c06 	br	40045ec <__alt_data_end+0xfc0045ec>
 40047fc:	1800111e 	bne	r3,zero,4004844 <__subsf3+0x424>
 4004800:	38003326 	beq	r7,zero,40048d0 <__subsf3+0x4b0>
 4004804:	3807883a 	mov	r3,r7
 4004808:	1023883a 	mov	r17,r2
 400480c:	04003fc4 	movi	r16,255
 4004810:	003f1c06 	br	4004484 <__alt_data_end+0xfc004484>
 4004814:	01403fc4 	movi	r5,255
 4004818:	31401626 	beq	r6,r5,4004874 <__subsf3+0x454>
 400481c:	0109c83a 	sub	r4,zero,r4
 4004820:	18c10034 	orhi	r3,r3,1024
 4004824:	003fea06 	br	40047d0 <__alt_data_end+0xfc0047d0>
 4004828:	383f1626 	beq	r7,zero,4004484 <__alt_data_end+0xfc004484>
 400482c:	19c9c83a 	sub	r4,r3,r7
 4004830:	2141002c 	andhi	r5,r4,1024
 4004834:	283f5026 	beq	r5,zero,4004578 <__alt_data_end+0xfc004578>
 4004838:	38c7c83a 	sub	r3,r7,r3
 400483c:	1023883a 	mov	r17,r2
 4004840:	003f1006 	br	4004484 <__alt_data_end+0xfc004484>
 4004844:	38001b26 	beq	r7,zero,40048b4 <__subsf3+0x494>
 4004848:	1806d0fa 	srli	r3,r3,3
 400484c:	1900102c 	andhi	r4,r3,64
 4004850:	20000526 	beq	r4,zero,4004868 <__subsf3+0x448>
 4004854:	380ed0fa 	srli	r7,r7,3
 4004858:	3900102c 	andhi	r4,r7,64
 400485c:	2000021e 	bne	r4,zero,4004868 <__subsf3+0x448>
 4004860:	3807883a 	mov	r3,r7
 4004864:	1023883a 	mov	r17,r2
 4004868:	180690fa 	slli	r3,r3,3
 400486c:	04003fc4 	movi	r16,255
 4004870:	003f0406 	br	4004484 <__alt_data_end+0xfc004484>
 4004874:	3807883a 	mov	r3,r7
 4004878:	3021883a 	mov	r16,r6
 400487c:	003f0106 	br	4004484 <__alt_data_end+0xfc004484>
 4004880:	18001726 	beq	r3,zero,40048e0 <__subsf3+0x4c0>
 4004884:	38000b26 	beq	r7,zero,40048b4 <__subsf3+0x494>
 4004888:	1806d0fa 	srli	r3,r3,3
 400488c:	1900102c 	andhi	r4,r3,64
 4004890:	20000426 	beq	r4,zero,40048a4 <__subsf3+0x484>
 4004894:	380ed0fa 	srli	r7,r7,3
 4004898:	3900102c 	andhi	r4,r7,64
 400489c:	2000011e 	bne	r4,zero,40048a4 <__subsf3+0x484>
 40048a0:	3807883a 	mov	r3,r7
 40048a4:	180690fa 	slli	r3,r3,3
 40048a8:	1023883a 	mov	r17,r2
 40048ac:	04003fc4 	movi	r16,255
 40048b0:	003ef406 	br	4004484 <__alt_data_end+0xfc004484>
 40048b4:	04003fc4 	movi	r16,255
 40048b8:	003ef206 	br	4004484 <__alt_data_end+0xfc004484>
 40048bc:	00c00044 	movi	r3,1
 40048c0:	003f9606 	br	400471c <__alt_data_end+0xfc00471c>
 40048c4:	000b883a 	mov	r5,zero
 40048c8:	0005883a 	mov	r2,zero
 40048cc:	003f3506 	br	40045a4 <__alt_data_end+0xfc0045a4>
 40048d0:	01402034 	movhi	r5,128
 40048d4:	297fffc4 	addi	r5,r5,-1
 40048d8:	0005883a 	mov	r2,zero
 40048dc:	003f2f06 	br	400459c <__alt_data_end+0xfc00459c>
 40048e0:	3807883a 	mov	r3,r7
 40048e4:	04003fc4 	movi	r16,255
 40048e8:	003ee606 	br	4004484 <__alt_data_end+0xfc004484>
 40048ec:	3807883a 	mov	r3,r7
 40048f0:	003ee406 	br	4004484 <__alt_data_end+0xfc004484>
 40048f4:	00c00044 	movi	r3,1
 40048f8:	003fbd06 	br	40047f0 <__alt_data_end+0xfc0047f0>
 40048fc:	0005883a 	mov	r2,zero
 4004900:	003f2806 	br	40045a4 <__alt_data_end+0xfc0045a4>

04004904 <__fixsfsi>:
 4004904:	200ad5fa 	srli	r5,r4,23
 4004908:	00c02034 	movhi	r3,128
 400490c:	18ffffc4 	addi	r3,r3,-1
 4004910:	29403fcc 	andi	r5,r5,255
 4004914:	00801f84 	movi	r2,126
 4004918:	1906703a 	and	r3,r3,r4
 400491c:	2008d7fa 	srli	r4,r4,31
 4004920:	11400e0e 	bge	r2,r5,400495c <__fixsfsi+0x58>
 4004924:	00802744 	movi	r2,157
 4004928:	11400816 	blt	r2,r5,400494c <__fixsfsi+0x48>
 400492c:	00802544 	movi	r2,149
 4004930:	18c02034 	orhi	r3,r3,128
 4004934:	11400b0e 	bge	r2,r5,4004964 <__fixsfsi+0x60>
 4004938:	28bfda84 	addi	r2,r5,-150
 400493c:	1884983a 	sll	r2,r3,r2
 4004940:	20000726 	beq	r4,zero,4004960 <__fixsfsi+0x5c>
 4004944:	0085c83a 	sub	r2,zero,r2
 4004948:	f800283a 	ret
 400494c:	00a00034 	movhi	r2,32768
 4004950:	10bfffc4 	addi	r2,r2,-1
 4004954:	2085883a 	add	r2,r4,r2
 4004958:	f800283a 	ret
 400495c:	0005883a 	mov	r2,zero
 4004960:	f800283a 	ret
 4004964:	00802584 	movi	r2,150
 4004968:	1145c83a 	sub	r2,r2,r5
 400496c:	1884d83a 	srl	r2,r3,r2
 4004970:	003ff306 	br	4004940 <__alt_data_end+0xfc004940>

04004974 <__floatsisf>:
 4004974:	defffd04 	addi	sp,sp,-12
 4004978:	dfc00215 	stw	ra,8(sp)
 400497c:	dc400115 	stw	r17,4(sp)
 4004980:	dc000015 	stw	r16,0(sp)
 4004984:	20003526 	beq	r4,zero,4004a5c <__floatsisf+0xe8>
 4004988:	2021883a 	mov	r16,r4
 400498c:	2022d7fa 	srli	r17,r4,31
 4004990:	20003616 	blt	r4,zero,4004a6c <__floatsisf+0xf8>
 4004994:	8009883a 	mov	r4,r16
 4004998:	4004a980 	call	4004a98 <__clzsi2>
 400499c:	00c02784 	movi	r3,158
 40049a0:	1887c83a 	sub	r3,r3,r2
 40049a4:	01002584 	movi	r4,150
 40049a8:	20c01416 	blt	r4,r3,40049fc <__floatsisf+0x88>
 40049ac:	20c9c83a 	sub	r4,r4,r3
 40049b0:	8120983a 	sll	r16,r16,r4
 40049b4:	00802034 	movhi	r2,128
 40049b8:	10bfffc4 	addi	r2,r2,-1
 40049bc:	8809883a 	mov	r4,r17
 40049c0:	80a0703a 	and	r16,r16,r2
 40049c4:	18803fcc 	andi	r2,r3,255
 40049c8:	100695fa 	slli	r3,r2,23
 40049cc:	20803fcc 	andi	r2,r4,255
 40049d0:	100897fa 	slli	r4,r2,31
 40049d4:	00802034 	movhi	r2,128
 40049d8:	10bfffc4 	addi	r2,r2,-1
 40049dc:	8084703a 	and	r2,r16,r2
 40049e0:	10c4b03a 	or	r2,r2,r3
 40049e4:	1104b03a 	or	r2,r2,r4
 40049e8:	dfc00217 	ldw	ra,8(sp)
 40049ec:	dc400117 	ldw	r17,4(sp)
 40049f0:	dc000017 	ldw	r16,0(sp)
 40049f4:	dec00304 	addi	sp,sp,12
 40049f8:	f800283a 	ret
 40049fc:	01002644 	movi	r4,153
 4004a00:	20c01c16 	blt	r4,r3,4004a74 <__floatsisf+0x100>
 4004a04:	20c9c83a 	sub	r4,r4,r3
 4004a08:	8120983a 	sll	r16,r16,r4
 4004a0c:	013f0034 	movhi	r4,64512
 4004a10:	213fffc4 	addi	r4,r4,-1
 4004a14:	814001cc 	andi	r5,r16,7
 4004a18:	8108703a 	and	r4,r16,r4
 4004a1c:	28000426 	beq	r5,zero,4004a30 <__floatsisf+0xbc>
 4004a20:	840003cc 	andi	r16,r16,15
 4004a24:	01400104 	movi	r5,4
 4004a28:	81400126 	beq	r16,r5,4004a30 <__floatsisf+0xbc>
 4004a2c:	2149883a 	add	r4,r4,r5
 4004a30:	2141002c 	andhi	r5,r4,1024
 4004a34:	28000526 	beq	r5,zero,4004a4c <__floatsisf+0xd8>
 4004a38:	00c027c4 	movi	r3,159
 4004a3c:	1887c83a 	sub	r3,r3,r2
 4004a40:	00bf0034 	movhi	r2,64512
 4004a44:	10bfffc4 	addi	r2,r2,-1
 4004a48:	2088703a 	and	r4,r4,r2
 4004a4c:	202091ba 	slli	r16,r4,6
 4004a50:	8809883a 	mov	r4,r17
 4004a54:	8020d27a 	srli	r16,r16,9
 4004a58:	003fda06 	br	40049c4 <__alt_data_end+0xfc0049c4>
 4004a5c:	0009883a 	mov	r4,zero
 4004a60:	0007883a 	mov	r3,zero
 4004a64:	0021883a 	mov	r16,zero
 4004a68:	003fd606 	br	40049c4 <__alt_data_end+0xfc0049c4>
 4004a6c:	0121c83a 	sub	r16,zero,r4
 4004a70:	003fc806 	br	4004994 <__alt_data_end+0xfc004994>
 4004a74:	01002e44 	movi	r4,185
 4004a78:	20c9c83a 	sub	r4,r4,r3
 4004a7c:	01400144 	movi	r5,5
 4004a80:	8108983a 	sll	r4,r16,r4
 4004a84:	288bc83a 	sub	r5,r5,r2
 4004a88:	8160d83a 	srl	r16,r16,r5
 4004a8c:	2008c03a 	cmpne	r4,r4,zero
 4004a90:	8120b03a 	or	r16,r16,r4
 4004a94:	003fdd06 	br	4004a0c <__alt_data_end+0xfc004a0c>

04004a98 <__clzsi2>:
 4004a98:	00bfffd4 	movui	r2,65535
 4004a9c:	11000536 	bltu	r2,r4,4004ab4 <__clzsi2+0x1c>
 4004aa0:	00803fc4 	movi	r2,255
 4004aa4:	11000f36 	bltu	r2,r4,4004ae4 <__clzsi2+0x4c>
 4004aa8:	00800804 	movi	r2,32
 4004aac:	0007883a 	mov	r3,zero
 4004ab0:	00000506 	br	4004ac8 <__clzsi2+0x30>
 4004ab4:	00804034 	movhi	r2,256
 4004ab8:	10bfffc4 	addi	r2,r2,-1
 4004abc:	11000c2e 	bgeu	r2,r4,4004af0 <__clzsi2+0x58>
 4004ac0:	00800204 	movi	r2,8
 4004ac4:	00c00604 	movi	r3,24
 4004ac8:	20c8d83a 	srl	r4,r4,r3
 4004acc:	00c10074 	movhi	r3,1025
 4004ad0:	18f53044 	addi	r3,r3,-11071
 4004ad4:	1909883a 	add	r4,r3,r4
 4004ad8:	20c00003 	ldbu	r3,0(r4)
 4004adc:	10c5c83a 	sub	r2,r2,r3
 4004ae0:	f800283a 	ret
 4004ae4:	00800604 	movi	r2,24
 4004ae8:	00c00204 	movi	r3,8
 4004aec:	003ff606 	br	4004ac8 <__alt_data_end+0xfc004ac8>
 4004af0:	00800404 	movi	r2,16
 4004af4:	1007883a 	mov	r3,r2
 4004af8:	003ff306 	br	4004ac8 <__alt_data_end+0xfc004ac8>

04004afc <__assert_func>:
 4004afc:	00810074 	movhi	r2,1025
 4004b00:	10bc7204 	addi	r2,r2,-3640
 4004b04:	10800017 	ldw	r2,0(r2)
 4004b08:	defffc04 	addi	sp,sp,-16
 4004b0c:	dfc00315 	stw	ra,12(sp)
 4004b10:	2015883a 	mov	r10,r4
 4004b14:	2811883a 	mov	r8,r5
 4004b18:	3813883a 	mov	r9,r7
 4004b1c:	11000317 	ldw	r4,12(r2)
 4004b20:	30000c26 	beq	r6,zero,4004b54 <__assert_func+0x58>
 4004b24:	00c10074 	movhi	r3,1025
 4004b28:	18f57104 	addi	r3,r3,-10812
 4004b2c:	3005883a 	mov	r2,r6
 4004b30:	01410074 	movhi	r5,1025
 4004b34:	29757504 	addi	r5,r5,-10796
 4004b38:	500f883a 	mov	r7,r10
 4004b3c:	480d883a 	mov	r6,r9
 4004b40:	d8c00115 	stw	r3,4(sp)
 4004b44:	da000015 	stw	r8,0(sp)
 4004b48:	d8800215 	stw	r2,8(sp)
 4004b4c:	4004b980 	call	4004b98 <fiprintf>
 4004b50:	4004e5c0 	call	4004e5c <abort>
 4004b54:	00c10074 	movhi	r3,1025
 4004b58:	18f57404 	addi	r3,r3,-10800
 4004b5c:	1805883a 	mov	r2,r3
 4004b60:	003ff306 	br	4004b30 <__alt_data_end+0xfc004b30>

04004b64 <__assert>:
 4004b64:	deffff04 	addi	sp,sp,-4
 4004b68:	300f883a 	mov	r7,r6
 4004b6c:	000d883a 	mov	r6,zero
 4004b70:	dfc00015 	stw	ra,0(sp)
 4004b74:	4004afc0 	call	4004afc <__assert_func>

04004b78 <_fiprintf_r>:
 4004b78:	defffe04 	addi	sp,sp,-8
 4004b7c:	dfc00015 	stw	ra,0(sp)
 4004b80:	d9c00115 	stw	r7,4(sp)
 4004b84:	d9c00104 	addi	r7,sp,4
 4004b88:	4004e440 	call	4004e44 <_vfiprintf_r>
 4004b8c:	dfc00017 	ldw	ra,0(sp)
 4004b90:	dec00204 	addi	sp,sp,8
 4004b94:	f800283a 	ret

04004b98 <fiprintf>:
 4004b98:	defffd04 	addi	sp,sp,-12
 4004b9c:	2005883a 	mov	r2,r4
 4004ba0:	dfc00015 	stw	ra,0(sp)
 4004ba4:	d9800115 	stw	r6,4(sp)
 4004ba8:	d9c00215 	stw	r7,8(sp)
 4004bac:	00c10074 	movhi	r3,1025
 4004bb0:	18fc7204 	addi	r3,r3,-3640
 4004bb4:	19000017 	ldw	r4,0(r3)
 4004bb8:	280d883a 	mov	r6,r5
 4004bbc:	d9c00104 	addi	r7,sp,4
 4004bc0:	100b883a 	mov	r5,r2
 4004bc4:	4004e440 	call	4004e44 <_vfiprintf_r>
 4004bc8:	dfc00017 	ldw	ra,0(sp)
 4004bcc:	dec00304 	addi	sp,sp,12
 4004bd0:	f800283a 	ret

04004bd4 <memcpy>:
 4004bd4:	defffd04 	addi	sp,sp,-12
 4004bd8:	dfc00215 	stw	ra,8(sp)
 4004bdc:	dc400115 	stw	r17,4(sp)
 4004be0:	dc000015 	stw	r16,0(sp)
 4004be4:	00c003c4 	movi	r3,15
 4004be8:	2005883a 	mov	r2,r4
 4004bec:	1980452e 	bgeu	r3,r6,4004d04 <memcpy+0x130>
 4004bf0:	2906b03a 	or	r3,r5,r4
 4004bf4:	18c000cc 	andi	r3,r3,3
 4004bf8:	1800441e 	bne	r3,zero,4004d0c <memcpy+0x138>
 4004bfc:	347ffc04 	addi	r17,r6,-16
 4004c00:	8822d13a 	srli	r17,r17,4
 4004c04:	28c00104 	addi	r3,r5,4
 4004c08:	23400104 	addi	r13,r4,4
 4004c0c:	8820913a 	slli	r16,r17,4
 4004c10:	2b000204 	addi	r12,r5,8
 4004c14:	22c00204 	addi	r11,r4,8
 4004c18:	84000504 	addi	r16,r16,20
 4004c1c:	2a800304 	addi	r10,r5,12
 4004c20:	22400304 	addi	r9,r4,12
 4004c24:	2c21883a 	add	r16,r5,r16
 4004c28:	2811883a 	mov	r8,r5
 4004c2c:	200f883a 	mov	r7,r4
 4004c30:	41000017 	ldw	r4,0(r8)
 4004c34:	1fc00017 	ldw	ra,0(r3)
 4004c38:	63c00017 	ldw	r15,0(r12)
 4004c3c:	39000015 	stw	r4,0(r7)
 4004c40:	53800017 	ldw	r14,0(r10)
 4004c44:	6fc00015 	stw	ra,0(r13)
 4004c48:	5bc00015 	stw	r15,0(r11)
 4004c4c:	4b800015 	stw	r14,0(r9)
 4004c50:	18c00404 	addi	r3,r3,16
 4004c54:	39c00404 	addi	r7,r7,16
 4004c58:	42000404 	addi	r8,r8,16
 4004c5c:	6b400404 	addi	r13,r13,16
 4004c60:	63000404 	addi	r12,r12,16
 4004c64:	5ac00404 	addi	r11,r11,16
 4004c68:	52800404 	addi	r10,r10,16
 4004c6c:	4a400404 	addi	r9,r9,16
 4004c70:	1c3fef1e 	bne	r3,r16,4004c30 <__alt_data_end+0xfc004c30>
 4004c74:	89c00044 	addi	r7,r17,1
 4004c78:	380e913a 	slli	r7,r7,4
 4004c7c:	310003cc 	andi	r4,r6,15
 4004c80:	02c000c4 	movi	r11,3
 4004c84:	11c7883a 	add	r3,r2,r7
 4004c88:	29cb883a 	add	r5,r5,r7
 4004c8c:	5900212e 	bgeu	r11,r4,4004d14 <memcpy+0x140>
 4004c90:	1813883a 	mov	r9,r3
 4004c94:	2811883a 	mov	r8,r5
 4004c98:	200f883a 	mov	r7,r4
 4004c9c:	42800017 	ldw	r10,0(r8)
 4004ca0:	4a400104 	addi	r9,r9,4
 4004ca4:	39ffff04 	addi	r7,r7,-4
 4004ca8:	4abfff15 	stw	r10,-4(r9)
 4004cac:	42000104 	addi	r8,r8,4
 4004cb0:	59fffa36 	bltu	r11,r7,4004c9c <__alt_data_end+0xfc004c9c>
 4004cb4:	213fff04 	addi	r4,r4,-4
 4004cb8:	2008d0ba 	srli	r4,r4,2
 4004cbc:	318000cc 	andi	r6,r6,3
 4004cc0:	21000044 	addi	r4,r4,1
 4004cc4:	2109883a 	add	r4,r4,r4
 4004cc8:	2109883a 	add	r4,r4,r4
 4004ccc:	1907883a 	add	r3,r3,r4
 4004cd0:	290b883a 	add	r5,r5,r4
 4004cd4:	30000626 	beq	r6,zero,4004cf0 <memcpy+0x11c>
 4004cd8:	198d883a 	add	r6,r3,r6
 4004cdc:	29c00003 	ldbu	r7,0(r5)
 4004ce0:	18c00044 	addi	r3,r3,1
 4004ce4:	29400044 	addi	r5,r5,1
 4004ce8:	19ffffc5 	stb	r7,-1(r3)
 4004cec:	19bffb1e 	bne	r3,r6,4004cdc <__alt_data_end+0xfc004cdc>
 4004cf0:	dfc00217 	ldw	ra,8(sp)
 4004cf4:	dc400117 	ldw	r17,4(sp)
 4004cf8:	dc000017 	ldw	r16,0(sp)
 4004cfc:	dec00304 	addi	sp,sp,12
 4004d00:	f800283a 	ret
 4004d04:	2007883a 	mov	r3,r4
 4004d08:	003ff206 	br	4004cd4 <__alt_data_end+0xfc004cd4>
 4004d0c:	2007883a 	mov	r3,r4
 4004d10:	003ff106 	br	4004cd8 <__alt_data_end+0xfc004cd8>
 4004d14:	200d883a 	mov	r6,r4
 4004d18:	003fee06 	br	4004cd4 <__alt_data_end+0xfc004cd4>

04004d1c <memset>:
 4004d1c:	20c000cc 	andi	r3,r4,3
 4004d20:	2005883a 	mov	r2,r4
 4004d24:	18004426 	beq	r3,zero,4004e38 <memset+0x11c>
 4004d28:	31ffffc4 	addi	r7,r6,-1
 4004d2c:	30004026 	beq	r6,zero,4004e30 <memset+0x114>
 4004d30:	2813883a 	mov	r9,r5
 4004d34:	200d883a 	mov	r6,r4
 4004d38:	2007883a 	mov	r3,r4
 4004d3c:	00000406 	br	4004d50 <memset+0x34>
 4004d40:	3a3fffc4 	addi	r8,r7,-1
 4004d44:	31800044 	addi	r6,r6,1
 4004d48:	38003926 	beq	r7,zero,4004e30 <memset+0x114>
 4004d4c:	400f883a 	mov	r7,r8
 4004d50:	18c00044 	addi	r3,r3,1
 4004d54:	32400005 	stb	r9,0(r6)
 4004d58:	1a0000cc 	andi	r8,r3,3
 4004d5c:	403ff81e 	bne	r8,zero,4004d40 <__alt_data_end+0xfc004d40>
 4004d60:	010000c4 	movi	r4,3
 4004d64:	21c02d2e 	bgeu	r4,r7,4004e1c <memset+0x100>
 4004d68:	29003fcc 	andi	r4,r5,255
 4004d6c:	200c923a 	slli	r6,r4,8
 4004d70:	3108b03a 	or	r4,r6,r4
 4004d74:	200c943a 	slli	r6,r4,16
 4004d78:	218cb03a 	or	r6,r4,r6
 4004d7c:	010003c4 	movi	r4,15
 4004d80:	21c0182e 	bgeu	r4,r7,4004de4 <memset+0xc8>
 4004d84:	3b3ffc04 	addi	r12,r7,-16
 4004d88:	6018d13a 	srli	r12,r12,4
 4004d8c:	1a000104 	addi	r8,r3,4
 4004d90:	1ac00204 	addi	r11,r3,8
 4004d94:	6008913a 	slli	r4,r12,4
 4004d98:	1a800304 	addi	r10,r3,12
 4004d9c:	1813883a 	mov	r9,r3
 4004da0:	21000504 	addi	r4,r4,20
 4004da4:	1909883a 	add	r4,r3,r4
 4004da8:	49800015 	stw	r6,0(r9)
 4004dac:	41800015 	stw	r6,0(r8)
 4004db0:	59800015 	stw	r6,0(r11)
 4004db4:	51800015 	stw	r6,0(r10)
 4004db8:	42000404 	addi	r8,r8,16
 4004dbc:	4a400404 	addi	r9,r9,16
 4004dc0:	5ac00404 	addi	r11,r11,16
 4004dc4:	52800404 	addi	r10,r10,16
 4004dc8:	413ff71e 	bne	r8,r4,4004da8 <__alt_data_end+0xfc004da8>
 4004dcc:	63000044 	addi	r12,r12,1
 4004dd0:	6018913a 	slli	r12,r12,4
 4004dd4:	39c003cc 	andi	r7,r7,15
 4004dd8:	010000c4 	movi	r4,3
 4004ddc:	1b07883a 	add	r3,r3,r12
 4004de0:	21c00e2e 	bgeu	r4,r7,4004e1c <memset+0x100>
 4004de4:	1813883a 	mov	r9,r3
 4004de8:	3811883a 	mov	r8,r7
 4004dec:	010000c4 	movi	r4,3
 4004df0:	49800015 	stw	r6,0(r9)
 4004df4:	423fff04 	addi	r8,r8,-4
 4004df8:	4a400104 	addi	r9,r9,4
 4004dfc:	223ffc36 	bltu	r4,r8,4004df0 <__alt_data_end+0xfc004df0>
 4004e00:	393fff04 	addi	r4,r7,-4
 4004e04:	2008d0ba 	srli	r4,r4,2
 4004e08:	39c000cc 	andi	r7,r7,3
 4004e0c:	21000044 	addi	r4,r4,1
 4004e10:	2109883a 	add	r4,r4,r4
 4004e14:	2109883a 	add	r4,r4,r4
 4004e18:	1907883a 	add	r3,r3,r4
 4004e1c:	38000526 	beq	r7,zero,4004e34 <memset+0x118>
 4004e20:	19cf883a 	add	r7,r3,r7
 4004e24:	19400005 	stb	r5,0(r3)
 4004e28:	18c00044 	addi	r3,r3,1
 4004e2c:	38fffd1e 	bne	r7,r3,4004e24 <__alt_data_end+0xfc004e24>
 4004e30:	f800283a 	ret
 4004e34:	f800283a 	ret
 4004e38:	2007883a 	mov	r3,r4
 4004e3c:	300f883a 	mov	r7,r6
 4004e40:	003fc706 	br	4004d60 <__alt_data_end+0xfc004d60>

04004e44 <_vfiprintf_r>:
 4004e44:	deffff04 	addi	sp,sp,-4
 4004e48:	dfc00015 	stw	ra,0(sp)
 4004e4c:	400528c0 	call	400528c <___vfiprintf_internal_r>
 4004e50:	dfc00017 	ldw	ra,0(sp)
 4004e54:	dec00104 	addi	sp,sp,4
 4004e58:	f800283a 	ret

04004e5c <abort>:
 4004e5c:	deffff04 	addi	sp,sp,-4
 4004e60:	01000184 	movi	r4,6
 4004e64:	dfc00015 	stw	ra,0(sp)
 4004e68:	40050c80 	call	40050c8 <raise>
 4004e6c:	01000044 	movi	r4,1
 4004e70:	400a55c0 	call	400a55c <_exit>

04004e74 <_init_signal_r>:
 4004e74:	2080b717 	ldw	r2,732(r4)
 4004e78:	10000226 	beq	r2,zero,4004e84 <_init_signal_r+0x10>
 4004e7c:	0005883a 	mov	r2,zero
 4004e80:	f800283a 	ret
 4004e84:	defffe04 	addi	sp,sp,-8
 4004e88:	01402004 	movi	r5,128
 4004e8c:	dc000015 	stw	r16,0(sp)
 4004e90:	dfc00115 	stw	ra,4(sp)
 4004e94:	2021883a 	mov	r16,r4
 4004e98:	4007f400 	call	4007f40 <_malloc_r>
 4004e9c:	8080b715 	stw	r2,732(r16)
 4004ea0:	10000d26 	beq	r2,zero,4004ed8 <_init_signal_r+0x64>
 4004ea4:	0007883a 	mov	r3,zero
 4004ea8:	01002004 	movi	r4,128
 4004eac:	00000106 	br	4004eb4 <_init_signal_r+0x40>
 4004eb0:	8080b717 	ldw	r2,732(r16)
 4004eb4:	10c5883a 	add	r2,r2,r3
 4004eb8:	10000015 	stw	zero,0(r2)
 4004ebc:	18c00104 	addi	r3,r3,4
 4004ec0:	193ffb1e 	bne	r3,r4,4004eb0 <__alt_data_end+0xfc004eb0>
 4004ec4:	0005883a 	mov	r2,zero
 4004ec8:	dfc00117 	ldw	ra,4(sp)
 4004ecc:	dc000017 	ldw	r16,0(sp)
 4004ed0:	dec00204 	addi	sp,sp,8
 4004ed4:	f800283a 	ret
 4004ed8:	00bfffc4 	movi	r2,-1
 4004edc:	003ffa06 	br	4004ec8 <__alt_data_end+0xfc004ec8>

04004ee0 <_signal_r>:
 4004ee0:	00c007c4 	movi	r3,31
 4004ee4:	19401536 	bltu	r3,r5,4004f3c <_signal_r+0x5c>
 4004ee8:	2080b717 	ldw	r2,732(r4)
 4004eec:	defffc04 	addi	sp,sp,-16
 4004ef0:	dc800215 	stw	r18,8(sp)
 4004ef4:	dc400115 	stw	r17,4(sp)
 4004ef8:	dc000015 	stw	r16,0(sp)
 4004efc:	dfc00315 	stw	ra,12(sp)
 4004f00:	3023883a 	mov	r17,r6
 4004f04:	2021883a 	mov	r16,r4
 4004f08:	2825883a 	mov	r18,r5
 4004f0c:	10000f26 	beq	r2,zero,4004f4c <_signal_r+0x6c>
 4004f10:	948b883a 	add	r5,r18,r18
 4004f14:	294b883a 	add	r5,r5,r5
 4004f18:	114b883a 	add	r5,r2,r5
 4004f1c:	28800017 	ldw	r2,0(r5)
 4004f20:	2c400015 	stw	r17,0(r5)
 4004f24:	dfc00317 	ldw	ra,12(sp)
 4004f28:	dc800217 	ldw	r18,8(sp)
 4004f2c:	dc400117 	ldw	r17,4(sp)
 4004f30:	dc000017 	ldw	r16,0(sp)
 4004f34:	dec00404 	addi	sp,sp,16
 4004f38:	f800283a 	ret
 4004f3c:	00c00584 	movi	r3,22
 4004f40:	20c00015 	stw	r3,0(r4)
 4004f44:	00bfffc4 	movi	r2,-1
 4004f48:	f800283a 	ret
 4004f4c:	4004e740 	call	4004e74 <_init_signal_r>
 4004f50:	1000021e 	bne	r2,zero,4004f5c <_signal_r+0x7c>
 4004f54:	8080b717 	ldw	r2,732(r16)
 4004f58:	003fed06 	br	4004f10 <__alt_data_end+0xfc004f10>
 4004f5c:	00bfffc4 	movi	r2,-1
 4004f60:	003ff006 	br	4004f24 <__alt_data_end+0xfc004f24>

04004f64 <_raise_r>:
 4004f64:	008007c4 	movi	r2,31
 4004f68:	11402936 	bltu	r2,r5,4005010 <_raise_r+0xac>
 4004f6c:	20c0b717 	ldw	r3,732(r4)
 4004f70:	defffd04 	addi	sp,sp,-12
 4004f74:	dc400115 	stw	r17,4(sp)
 4004f78:	dc000015 	stw	r16,0(sp)
 4004f7c:	dfc00215 	stw	ra,8(sp)
 4004f80:	2021883a 	mov	r16,r4
 4004f84:	2823883a 	mov	r17,r5
 4004f88:	18001726 	beq	r3,zero,4004fe8 <_raise_r+0x84>
 4004f8c:	2945883a 	add	r2,r5,r5
 4004f90:	1085883a 	add	r2,r2,r2
 4004f94:	1887883a 	add	r3,r3,r2
 4004f98:	19800017 	ldw	r6,0(r3)
 4004f9c:	30001226 	beq	r6,zero,4004fe8 <_raise_r+0x84>
 4004fa0:	00800044 	movi	r2,1
 4004fa4:	30800e26 	beq	r6,r2,4004fe0 <_raise_r+0x7c>
 4004fa8:	013fffc4 	movi	r4,-1
 4004fac:	31000926 	beq	r6,r4,4004fd4 <_raise_r+0x70>
 4004fb0:	18000015 	stw	zero,0(r3)
 4004fb4:	2809883a 	mov	r4,r5
 4004fb8:	303ee83a 	callr	r6
 4004fbc:	0005883a 	mov	r2,zero
 4004fc0:	dfc00217 	ldw	ra,8(sp)
 4004fc4:	dc400117 	ldw	r17,4(sp)
 4004fc8:	dc000017 	ldw	r16,0(sp)
 4004fcc:	dec00304 	addi	sp,sp,12
 4004fd0:	f800283a 	ret
 4004fd4:	00c00584 	movi	r3,22
 4004fd8:	80c00015 	stw	r3,0(r16)
 4004fdc:	003ff806 	br	4004fc0 <__alt_data_end+0xfc004fc0>
 4004fe0:	0005883a 	mov	r2,zero
 4004fe4:	003ff606 	br	4004fc0 <__alt_data_end+0xfc004fc0>
 4004fe8:	8009883a 	mov	r4,r16
 4004fec:	40051740 	call	4005174 <_getpid_r>
 4004ff0:	880d883a 	mov	r6,r17
 4004ff4:	100b883a 	mov	r5,r2
 4004ff8:	8009883a 	mov	r4,r16
 4004ffc:	dfc00217 	ldw	ra,8(sp)
 4005000:	dc400117 	ldw	r17,4(sp)
 4005004:	dc000017 	ldw	r16,0(sp)
 4005008:	dec00304 	addi	sp,sp,12
 400500c:	40051181 	jmpi	4005118 <_kill_r>
 4005010:	00800584 	movi	r2,22
 4005014:	20800015 	stw	r2,0(r4)
 4005018:	00bfffc4 	movi	r2,-1
 400501c:	f800283a 	ret

04005020 <__sigtramp_r>:
 4005020:	008007c4 	movi	r2,31
 4005024:	11402436 	bltu	r2,r5,40050b8 <__sigtramp_r+0x98>
 4005028:	20c0b717 	ldw	r3,732(r4)
 400502c:	defffd04 	addi	sp,sp,-12
 4005030:	dc400115 	stw	r17,4(sp)
 4005034:	dc000015 	stw	r16,0(sp)
 4005038:	dfc00215 	stw	ra,8(sp)
 400503c:	2021883a 	mov	r16,r4
 4005040:	2823883a 	mov	r17,r5
 4005044:	18001826 	beq	r3,zero,40050a8 <__sigtramp_r+0x88>
 4005048:	8c45883a 	add	r2,r17,r17
 400504c:	1085883a 	add	r2,r2,r2
 4005050:	1885883a 	add	r2,r3,r2
 4005054:	10c00017 	ldw	r3,0(r2)
 4005058:	18001126 	beq	r3,zero,40050a0 <__sigtramp_r+0x80>
 400505c:	013fffc4 	movi	r4,-1
 4005060:	19000d26 	beq	r3,r4,4005098 <__sigtramp_r+0x78>
 4005064:	01000044 	movi	r4,1
 4005068:	19000926 	beq	r3,r4,4005090 <__sigtramp_r+0x70>
 400506c:	10000015 	stw	zero,0(r2)
 4005070:	8809883a 	mov	r4,r17
 4005074:	183ee83a 	callr	r3
 4005078:	0005883a 	mov	r2,zero
 400507c:	dfc00217 	ldw	ra,8(sp)
 4005080:	dc400117 	ldw	r17,4(sp)
 4005084:	dc000017 	ldw	r16,0(sp)
 4005088:	dec00304 	addi	sp,sp,12
 400508c:	f800283a 	ret
 4005090:	008000c4 	movi	r2,3
 4005094:	003ff906 	br	400507c <__alt_data_end+0xfc00507c>
 4005098:	00800084 	movi	r2,2
 400509c:	003ff706 	br	400507c <__alt_data_end+0xfc00507c>
 40050a0:	00800044 	movi	r2,1
 40050a4:	003ff506 	br	400507c <__alt_data_end+0xfc00507c>
 40050a8:	4004e740 	call	4004e74 <_init_signal_r>
 40050ac:	1000041e 	bne	r2,zero,40050c0 <__sigtramp_r+0xa0>
 40050b0:	80c0b717 	ldw	r3,732(r16)
 40050b4:	003fe406 	br	4005048 <__alt_data_end+0xfc005048>
 40050b8:	00bfffc4 	movi	r2,-1
 40050bc:	f800283a 	ret
 40050c0:	00bfffc4 	movi	r2,-1
 40050c4:	003fed06 	br	400507c <__alt_data_end+0xfc00507c>

040050c8 <raise>:
 40050c8:	00810074 	movhi	r2,1025
 40050cc:	10bc7204 	addi	r2,r2,-3640
 40050d0:	200b883a 	mov	r5,r4
 40050d4:	11000017 	ldw	r4,0(r2)
 40050d8:	4004f641 	jmpi	4004f64 <_raise_r>

040050dc <signal>:
 40050dc:	00810074 	movhi	r2,1025
 40050e0:	10bc7204 	addi	r2,r2,-3640
 40050e4:	280d883a 	mov	r6,r5
 40050e8:	200b883a 	mov	r5,r4
 40050ec:	11000017 	ldw	r4,0(r2)
 40050f0:	4004ee01 	jmpi	4004ee0 <_signal_r>

040050f4 <_init_signal>:
 40050f4:	00810074 	movhi	r2,1025
 40050f8:	10bc7204 	addi	r2,r2,-3640
 40050fc:	11000017 	ldw	r4,0(r2)
 4005100:	4004e741 	jmpi	4004e74 <_init_signal_r>

04005104 <__sigtramp>:
 4005104:	00810074 	movhi	r2,1025
 4005108:	10bc7204 	addi	r2,r2,-3640
 400510c:	200b883a 	mov	r5,r4
 4005110:	11000017 	ldw	r4,0(r2)
 4005114:	40050201 	jmpi	4005020 <__sigtramp_r>

04005118 <_kill_r>:
 4005118:	defffd04 	addi	sp,sp,-12
 400511c:	2805883a 	mov	r2,r5
 4005120:	dc000015 	stw	r16,0(sp)
 4005124:	04010074 	movhi	r16,1025
 4005128:	dc400115 	stw	r17,4(sp)
 400512c:	84035904 	addi	r16,r16,3428
 4005130:	2023883a 	mov	r17,r4
 4005134:	300b883a 	mov	r5,r6
 4005138:	1009883a 	mov	r4,r2
 400513c:	dfc00215 	stw	ra,8(sp)
 4005140:	80000015 	stw	zero,0(r16)
 4005144:	400a7c80 	call	400a7c8 <kill>
 4005148:	00ffffc4 	movi	r3,-1
 400514c:	10c00526 	beq	r2,r3,4005164 <_kill_r+0x4c>
 4005150:	dfc00217 	ldw	ra,8(sp)
 4005154:	dc400117 	ldw	r17,4(sp)
 4005158:	dc000017 	ldw	r16,0(sp)
 400515c:	dec00304 	addi	sp,sp,12
 4005160:	f800283a 	ret
 4005164:	80c00017 	ldw	r3,0(r16)
 4005168:	183ff926 	beq	r3,zero,4005150 <__alt_data_end+0xfc005150>
 400516c:	88c00015 	stw	r3,0(r17)
 4005170:	003ff706 	br	4005150 <__alt_data_end+0xfc005150>

04005174 <_getpid_r>:
 4005174:	400a6841 	jmpi	400a684 <getpid>

04005178 <__sprint_r.part.0>:
 4005178:	28801917 	ldw	r2,100(r5)
 400517c:	defff604 	addi	sp,sp,-40
 4005180:	dd400515 	stw	r21,20(sp)
 4005184:	dfc00915 	stw	ra,36(sp)
 4005188:	df000815 	stw	fp,32(sp)
 400518c:	ddc00715 	stw	r23,28(sp)
 4005190:	dd800615 	stw	r22,24(sp)
 4005194:	dd000415 	stw	r20,16(sp)
 4005198:	dcc00315 	stw	r19,12(sp)
 400519c:	dc800215 	stw	r18,8(sp)
 40051a0:	dc400115 	stw	r17,4(sp)
 40051a4:	dc000015 	stw	r16,0(sp)
 40051a8:	1088000c 	andi	r2,r2,8192
 40051ac:	302b883a 	mov	r21,r6
 40051b0:	10002e26 	beq	r2,zero,400526c <__sprint_r.part.0+0xf4>
 40051b4:	30800217 	ldw	r2,8(r6)
 40051b8:	35800017 	ldw	r22,0(r6)
 40051bc:	10002926 	beq	r2,zero,4005264 <__sprint_r.part.0+0xec>
 40051c0:	2827883a 	mov	r19,r5
 40051c4:	2029883a 	mov	r20,r4
 40051c8:	b5c00104 	addi	r23,r22,4
 40051cc:	04bfffc4 	movi	r18,-1
 40051d0:	bc400017 	ldw	r17,0(r23)
 40051d4:	b4000017 	ldw	r16,0(r22)
 40051d8:	0039883a 	mov	fp,zero
 40051dc:	8822d0ba 	srli	r17,r17,2
 40051e0:	8800031e 	bne	r17,zero,40051f0 <__sprint_r.part.0+0x78>
 40051e4:	00001806 	br	4005248 <__sprint_r.part.0+0xd0>
 40051e8:	84000104 	addi	r16,r16,4
 40051ec:	8f001526 	beq	r17,fp,4005244 <__sprint_r.part.0+0xcc>
 40051f0:	81400017 	ldw	r5,0(r16)
 40051f4:	980d883a 	mov	r6,r19
 40051f8:	a009883a 	mov	r4,r20
 40051fc:	40071800 	call	4007180 <_fputwc_r>
 4005200:	e7000044 	addi	fp,fp,1
 4005204:	14bff81e 	bne	r2,r18,40051e8 <__alt_data_end+0xfc0051e8>
 4005208:	9005883a 	mov	r2,r18
 400520c:	a8000215 	stw	zero,8(r21)
 4005210:	a8000115 	stw	zero,4(r21)
 4005214:	dfc00917 	ldw	ra,36(sp)
 4005218:	df000817 	ldw	fp,32(sp)
 400521c:	ddc00717 	ldw	r23,28(sp)
 4005220:	dd800617 	ldw	r22,24(sp)
 4005224:	dd400517 	ldw	r21,20(sp)
 4005228:	dd000417 	ldw	r20,16(sp)
 400522c:	dcc00317 	ldw	r19,12(sp)
 4005230:	dc800217 	ldw	r18,8(sp)
 4005234:	dc400117 	ldw	r17,4(sp)
 4005238:	dc000017 	ldw	r16,0(sp)
 400523c:	dec00a04 	addi	sp,sp,40
 4005240:	f800283a 	ret
 4005244:	a8800217 	ldw	r2,8(r21)
 4005248:	8c63883a 	add	r17,r17,r17
 400524c:	8c63883a 	add	r17,r17,r17
 4005250:	1445c83a 	sub	r2,r2,r17
 4005254:	a8800215 	stw	r2,8(r21)
 4005258:	b5800204 	addi	r22,r22,8
 400525c:	bdc00204 	addi	r23,r23,8
 4005260:	103fdb1e 	bne	r2,zero,40051d0 <__alt_data_end+0xfc0051d0>
 4005264:	0005883a 	mov	r2,zero
 4005268:	003fe806 	br	400520c <__alt_data_end+0xfc00520c>
 400526c:	40076580 	call	4007658 <__sfvwrite_r>
 4005270:	003fe606 	br	400520c <__alt_data_end+0xfc00520c>

04005274 <__sprint_r>:
 4005274:	30c00217 	ldw	r3,8(r6)
 4005278:	18000126 	beq	r3,zero,4005280 <__sprint_r+0xc>
 400527c:	40051781 	jmpi	4005178 <__sprint_r.part.0>
 4005280:	30000115 	stw	zero,4(r6)
 4005284:	0005883a 	mov	r2,zero
 4005288:	f800283a 	ret

0400528c <___vfiprintf_internal_r>:
 400528c:	deffca04 	addi	sp,sp,-216
 4005290:	dd403115 	stw	r21,196(sp)
 4005294:	dfc03515 	stw	ra,212(sp)
 4005298:	df003415 	stw	fp,208(sp)
 400529c:	ddc03315 	stw	r23,204(sp)
 40052a0:	dd803215 	stw	r22,200(sp)
 40052a4:	dd003015 	stw	r20,192(sp)
 40052a8:	dcc02f15 	stw	r19,188(sp)
 40052ac:	dc802e15 	stw	r18,184(sp)
 40052b0:	dc402d15 	stw	r17,180(sp)
 40052b4:	dc002c15 	stw	r16,176(sp)
 40052b8:	d9002115 	stw	r4,132(sp)
 40052bc:	d9402015 	stw	r5,128(sp)
 40052c0:	d9c02215 	stw	r7,136(sp)
 40052c4:	302b883a 	mov	r21,r6
 40052c8:	20000226 	beq	r4,zero,40052d4 <___vfiprintf_internal_r+0x48>
 40052cc:	20800e17 	ldw	r2,56(r4)
 40052d0:	1000cf26 	beq	r2,zero,4005610 <___vfiprintf_internal_r+0x384>
 40052d4:	d8c02017 	ldw	r3,128(sp)
 40052d8:	1880030b 	ldhu	r2,12(r3)
 40052dc:	10c8000c 	andi	r3,r2,8192
 40052e0:	1800071e 	bne	r3,zero,4005300 <___vfiprintf_internal_r+0x74>
 40052e4:	d9402017 	ldw	r5,128(sp)
 40052e8:	00f7ffc4 	movi	r3,-8193
 40052ec:	10880014 	ori	r2,r2,8192
 40052f0:	29001917 	ldw	r4,100(r5)
 40052f4:	2880030d 	sth	r2,12(r5)
 40052f8:	20c6703a 	and	r3,r4,r3
 40052fc:	28c01915 	stw	r3,100(r5)
 4005300:	10c0020c 	andi	r3,r2,8
 4005304:	1800a526 	beq	r3,zero,400559c <___vfiprintf_internal_r+0x310>
 4005308:	d9002017 	ldw	r4,128(sp)
 400530c:	20c00417 	ldw	r3,16(r4)
 4005310:	1800a226 	beq	r3,zero,400559c <___vfiprintf_internal_r+0x310>
 4005314:	1080068c 	andi	r2,r2,26
 4005318:	00c00284 	movi	r3,10
 400531c:	10c0a826 	beq	r2,r3,40055c0 <___vfiprintf_internal_r+0x334>
 4005320:	d9001a04 	addi	r4,sp,104
 4005324:	d94019c4 	addi	r5,sp,103
 4005328:	04810074 	movhi	r18,1025
 400532c:	2145c83a 	sub	r2,r4,r5
 4005330:	94b58dc4 	addi	r18,r18,-10697
 4005334:	d9001e15 	stw	r4,120(sp)
 4005338:	d9401f15 	stw	r5,124(sp)
 400533c:	dec01a15 	stw	sp,104(sp)
 4005340:	d8001c15 	stw	zero,112(sp)
 4005344:	d8001b15 	stw	zero,108(sp)
 4005348:	d811883a 	mov	r8,sp
 400534c:	d8002615 	stw	zero,152(sp)
 4005350:	d8002415 	stw	zero,144(sp)
 4005354:	d8802815 	stw	r2,160(sp)
 4005358:	a82d883a 	mov	r22,r21
 400535c:	b0800007 	ldb	r2,0(r22)
 4005360:	10040d26 	beq	r2,zero,4006398 <___vfiprintf_internal_r+0x110c>
 4005364:	00c00944 	movi	r3,37
 4005368:	b029883a 	mov	r20,r22
 400536c:	10c0021e 	bne	r2,r3,4005378 <___vfiprintf_internal_r+0xec>
 4005370:	00001606 	br	40053cc <___vfiprintf_internal_r+0x140>
 4005374:	10c00326 	beq	r2,r3,4005384 <___vfiprintf_internal_r+0xf8>
 4005378:	a5000044 	addi	r20,r20,1
 400537c:	a0800007 	ldb	r2,0(r20)
 4005380:	103ffc1e 	bne	r2,zero,4005374 <__alt_data_end+0xfc005374>
 4005384:	a5a1c83a 	sub	r16,r20,r22
 4005388:	80001026 	beq	r16,zero,40053cc <___vfiprintf_internal_r+0x140>
 400538c:	d8c01c17 	ldw	r3,112(sp)
 4005390:	d8801b17 	ldw	r2,108(sp)
 4005394:	45800015 	stw	r22,0(r8)
 4005398:	80c7883a 	add	r3,r16,r3
 400539c:	10800044 	addi	r2,r2,1
 40053a0:	44000115 	stw	r16,4(r8)
 40053a4:	d8c01c15 	stw	r3,112(sp)
 40053a8:	d8801b15 	stw	r2,108(sp)
 40053ac:	010001c4 	movi	r4,7
 40053b0:	2080750e 	bge	r4,r2,4005588 <___vfiprintf_internal_r+0x2fc>
 40053b4:	1803951e 	bne	r3,zero,400620c <___vfiprintf_internal_r+0xf80>
 40053b8:	d8c02417 	ldw	r3,144(sp)
 40053bc:	d8001b15 	stw	zero,108(sp)
 40053c0:	d811883a 	mov	r8,sp
 40053c4:	1c07883a 	add	r3,r3,r16
 40053c8:	d8c02415 	stw	r3,144(sp)
 40053cc:	a0800007 	ldb	r2,0(r20)
 40053d0:	1002e026 	beq	r2,zero,4005f54 <___vfiprintf_internal_r+0xcc8>
 40053d4:	a5800044 	addi	r22,r20,1
 40053d8:	a0c00047 	ldb	r3,1(r20)
 40053dc:	d8001d85 	stb	zero,118(sp)
 40053e0:	0027883a 	mov	r19,zero
 40053e4:	d8002305 	stb	zero,140(sp)
 40053e8:	043fffc4 	movi	r16,-1
 40053ec:	d8002515 	stw	zero,148(sp)
 40053f0:	0023883a 	mov	r17,zero
 40053f4:	05001604 	movi	r20,88
 40053f8:	05400244 	movi	r21,9
 40053fc:	402f883a 	mov	r23,r8
 4005400:	b5800044 	addi	r22,r22,1
 4005404:	18bff804 	addi	r2,r3,-32
 4005408:	a0827736 	bltu	r20,r2,4005de8 <___vfiprintf_internal_r+0xb5c>
 400540c:	100490ba 	slli	r2,r2,2
 4005410:	01010034 	movhi	r4,1024
 4005414:	21150904 	addi	r4,r4,21540
 4005418:	1105883a 	add	r2,r2,r4
 400541c:	10800017 	ldw	r2,0(r2)
 4005420:	1000683a 	jmp	r2
 4005424:	04005ae8 	cmpgeui	r16,zero,363
 4005428:	04005de8 	cmpgeui	r16,zero,375
 400542c:	04005de8 	cmpgeui	r16,zero,375
 4005430:	04005b04 	movi	r16,364
 4005434:	04005de8 	cmpgeui	r16,zero,375
 4005438:	04005de8 	cmpgeui	r16,zero,375
 400543c:	04005de8 	cmpgeui	r16,zero,375
 4005440:	04005de8 	cmpgeui	r16,zero,375
 4005444:	04005de8 	cmpgeui	r16,zero,375
 4005448:	04005de8 	cmpgeui	r16,zero,375
 400544c:	04005d0c 	andi	r16,zero,372
 4005450:	04005d30 	cmpltui	r16,zero,372
 4005454:	04005de8 	cmpgeui	r16,zero,375
 4005458:	04005628 	cmpgeui	r16,zero,344
 400545c:	04005d44 	movi	r16,373
 4005460:	04005de8 	cmpgeui	r16,zero,375
 4005464:	04005b10 	cmplti	r16,zero,364
 4005468:	04005b1c 	xori	r16,zero,364
 400546c:	04005b1c 	xori	r16,zero,364
 4005470:	04005b1c 	xori	r16,zero,364
 4005474:	04005b1c 	xori	r16,zero,364
 4005478:	04005b1c 	xori	r16,zero,364
 400547c:	04005b1c 	xori	r16,zero,364
 4005480:	04005b1c 	xori	r16,zero,364
 4005484:	04005b1c 	xori	r16,zero,364
 4005488:	04005b1c 	xori	r16,zero,364
 400548c:	04005de8 	cmpgeui	r16,zero,375
 4005490:	04005de8 	cmpgeui	r16,zero,375
 4005494:	04005de8 	cmpgeui	r16,zero,375
 4005498:	04005de8 	cmpgeui	r16,zero,375
 400549c:	04005de8 	cmpgeui	r16,zero,375
 40054a0:	04005de8 	cmpgeui	r16,zero,375
 40054a4:	04005de8 	cmpgeui	r16,zero,375
 40054a8:	04005de8 	cmpgeui	r16,zero,375
 40054ac:	04005de8 	cmpgeui	r16,zero,375
 40054b0:	04005de8 	cmpgeui	r16,zero,375
 40054b4:	04005b5c 	xori	r16,zero,365
 40054b8:	04005de8 	cmpgeui	r16,zero,375
 40054bc:	04005de8 	cmpgeui	r16,zero,375
 40054c0:	04005de8 	cmpgeui	r16,zero,375
 40054c4:	04005de8 	cmpgeui	r16,zero,375
 40054c8:	04005de8 	cmpgeui	r16,zero,375
 40054cc:	04005de8 	cmpgeui	r16,zero,375
 40054d0:	04005de8 	cmpgeui	r16,zero,375
 40054d4:	04005de8 	cmpgeui	r16,zero,375
 40054d8:	04005de8 	cmpgeui	r16,zero,375
 40054dc:	04005de8 	cmpgeui	r16,zero,375
 40054e0:	04005b98 	cmpnei	r16,zero,366
 40054e4:	04005de8 	cmpgeui	r16,zero,375
 40054e8:	04005de8 	cmpgeui	r16,zero,375
 40054ec:	04005de8 	cmpgeui	r16,zero,375
 40054f0:	04005de8 	cmpgeui	r16,zero,375
 40054f4:	04005de8 	cmpgeui	r16,zero,375
 40054f8:	04005bf4 	movhi	r16,367
 40054fc:	04005de8 	cmpgeui	r16,zero,375
 4005500:	04005de8 	cmpgeui	r16,zero,375
 4005504:	04005c68 	cmpgeui	r16,zero,369
 4005508:	04005de8 	cmpgeui	r16,zero,375
 400550c:	04005de8 	cmpgeui	r16,zero,375
 4005510:	04005de8 	cmpgeui	r16,zero,375
 4005514:	04005de8 	cmpgeui	r16,zero,375
 4005518:	04005de8 	cmpgeui	r16,zero,375
 400551c:	04005de8 	cmpgeui	r16,zero,375
 4005520:	04005de8 	cmpgeui	r16,zero,375
 4005524:	04005de8 	cmpgeui	r16,zero,375
 4005528:	04005de8 	cmpgeui	r16,zero,375
 400552c:	04005de8 	cmpgeui	r16,zero,375
 4005530:	04005a10 	cmplti	r16,zero,360
 4005534:	04005a40 	call	4005a4 <__alt_mem_sdram-0x3bffa5c>
 4005538:	04005de8 	cmpgeui	r16,zero,375
 400553c:	04005de8 	cmpgeui	r16,zero,375
 4005540:	04005de8 	cmpgeui	r16,zero,375
 4005544:	04005d90 	cmplti	r16,zero,374
 4005548:	04005a40 	call	4005a4 <__alt_mem_sdram-0x3bffa5c>
 400554c:	04005de8 	cmpgeui	r16,zero,375
 4005550:	04005de8 	cmpgeui	r16,zero,375
 4005554:	040058e8 	cmpgeui	r16,zero,355
 4005558:	04005de8 	cmpgeui	r16,zero,375
 400555c:	040058fc 	xorhi	r16,zero,355
 4005560:	04005934 	movhi	r16,356
 4005564:	04005634 	movhi	r16,344
 4005568:	040058dc 	xori	r16,zero,355
 400556c:	04005de8 	cmpgeui	r16,zero,375
 4005570:	04005ca8 	cmpgeui	r16,zero,370
 4005574:	04005de8 	cmpgeui	r16,zero,375
 4005578:	04005cf4 	movhi	r16,371
 400557c:	04005de8 	cmpgeui	r16,zero,375
 4005580:	04005de8 	cmpgeui	r16,zero,375
 4005584:	040059b8 	rdprs	r16,zero,358
 4005588:	42000204 	addi	r8,r8,8
 400558c:	d8c02417 	ldw	r3,144(sp)
 4005590:	1c07883a 	add	r3,r3,r16
 4005594:	d8c02415 	stw	r3,144(sp)
 4005598:	003f8c06 	br	40053cc <__alt_data_end+0xfc0053cc>
 400559c:	d9402017 	ldw	r5,128(sp)
 40055a0:	d9002117 	ldw	r4,132(sp)
 40055a4:	40068700 	call	4006870 <__swsetup_r>
 40055a8:	1003c11e 	bne	r2,zero,40064b0 <___vfiprintf_internal_r+0x1224>
 40055ac:	d9402017 	ldw	r5,128(sp)
 40055b0:	00c00284 	movi	r3,10
 40055b4:	2880030b 	ldhu	r2,12(r5)
 40055b8:	1080068c 	andi	r2,r2,26
 40055bc:	10ff581e 	bne	r2,r3,4005320 <__alt_data_end+0xfc005320>
 40055c0:	d8c02017 	ldw	r3,128(sp)
 40055c4:	1880038f 	ldh	r2,14(r3)
 40055c8:	103f5516 	blt	r2,zero,4005320 <__alt_data_end+0xfc005320>
 40055cc:	d9c02217 	ldw	r7,136(sp)
 40055d0:	d9002117 	ldw	r4,132(sp)
 40055d4:	a80d883a 	mov	r6,r21
 40055d8:	180b883a 	mov	r5,r3
 40055dc:	40067b40 	call	40067b4 <__sbprintf>
 40055e0:	dfc03517 	ldw	ra,212(sp)
 40055e4:	df003417 	ldw	fp,208(sp)
 40055e8:	ddc03317 	ldw	r23,204(sp)
 40055ec:	dd803217 	ldw	r22,200(sp)
 40055f0:	dd403117 	ldw	r21,196(sp)
 40055f4:	dd003017 	ldw	r20,192(sp)
 40055f8:	dcc02f17 	ldw	r19,188(sp)
 40055fc:	dc802e17 	ldw	r18,184(sp)
 4005600:	dc402d17 	ldw	r17,180(sp)
 4005604:	dc002c17 	ldw	r16,176(sp)
 4005608:	dec03604 	addi	sp,sp,216
 400560c:	f800283a 	ret
 4005610:	4006fcc0 	call	4006fcc <__sinit>
 4005614:	003f2f06 	br	40052d4 <__alt_data_end+0xfc0052d4>
 4005618:	d8c02517 	ldw	r3,148(sp)
 400561c:	d8802215 	stw	r2,136(sp)
 4005620:	00c7c83a 	sub	r3,zero,r3
 4005624:	d8c02515 	stw	r3,148(sp)
 4005628:	8c400114 	ori	r17,r17,4
 400562c:	b0c00007 	ldb	r3,0(r22)
 4005630:	003f7306 	br	4005400 <__alt_data_end+0xfc005400>
 4005634:	00800c04 	movi	r2,48
 4005638:	d9402217 	ldw	r5,136(sp)
 400563c:	d8801d05 	stb	r2,116(sp)
 4005640:	00801e04 	movi	r2,120
 4005644:	d8801d45 	stb	r2,117(sp)
 4005648:	d8001d85 	stb	zero,118(sp)
 400564c:	b811883a 	mov	r8,r23
 4005650:	28c00104 	addi	r3,r5,4
 4005654:	2cc00017 	ldw	r19,0(r5)
 4005658:	0029883a 	mov	r20,zero
 400565c:	88800094 	ori	r2,r17,2
 4005660:	80032516 	blt	r16,zero,40062f8 <___vfiprintf_internal_r+0x106c>
 4005664:	00bfdfc4 	movi	r2,-129
 4005668:	88a2703a 	and	r17,r17,r2
 400566c:	d8c02215 	stw	r3,136(sp)
 4005670:	8c400094 	ori	r17,r17,2
 4005674:	98032a1e 	bne	r19,zero,4006320 <___vfiprintf_internal_r+0x1094>
 4005678:	00810074 	movhi	r2,1025
 400567c:	10b58704 	addi	r2,r2,-10724
 4005680:	d8802615 	stw	r2,152(sp)
 4005684:	002b883a 	mov	r21,zero
 4005688:	8001741e 	bne	r16,zero,4005c5c <___vfiprintf_internal_r+0x9d0>
 400568c:	0021883a 	mov	r16,zero
 4005690:	0029883a 	mov	r20,zero
 4005694:	ddc01a04 	addi	r23,sp,104
 4005698:	8027883a 	mov	r19,r16
 400569c:	8500010e 	bge	r16,r20,40056a4 <___vfiprintf_internal_r+0x418>
 40056a0:	a027883a 	mov	r19,r20
 40056a4:	ad403fcc 	andi	r21,r21,255
 40056a8:	ad40201c 	xori	r21,r21,128
 40056ac:	ad7fe004 	addi	r21,r21,-128
 40056b0:	a8000126 	beq	r21,zero,40056b8 <___vfiprintf_internal_r+0x42c>
 40056b4:	9cc00044 	addi	r19,r19,1
 40056b8:	89c0008c 	andi	r7,r17,2
 40056bc:	38000126 	beq	r7,zero,40056c4 <___vfiprintf_internal_r+0x438>
 40056c0:	9cc00084 	addi	r19,r19,2
 40056c4:	88c0210c 	andi	r3,r17,132
 40056c8:	1801dd1e 	bne	r3,zero,4005e40 <___vfiprintf_internal_r+0xbb4>
 40056cc:	d9402517 	ldw	r5,148(sp)
 40056d0:	2cebc83a 	sub	r21,r5,r19
 40056d4:	0541da0e 	bge	zero,r21,4005e40 <___vfiprintf_internal_r+0xbb4>
 40056d8:	07000404 	movi	fp,16
 40056dc:	d8801c17 	ldw	r2,112(sp)
 40056e0:	e543be0e 	bge	fp,r21,40065dc <___vfiprintf_internal_r+0x1350>
 40056e4:	01410074 	movhi	r5,1025
 40056e8:	297591c4 	addi	r5,r5,-10681
 40056ec:	dc002715 	stw	r16,156(sp)
 40056f0:	d9801b17 	ldw	r6,108(sp)
 40056f4:	a821883a 	mov	r16,r21
 40056f8:	d9402315 	stw	r5,140(sp)
 40056fc:	028001c4 	movi	r10,7
 4005700:	d9c02915 	stw	r7,164(sp)
 4005704:	182b883a 	mov	r21,r3
 4005708:	00000506 	br	4005720 <___vfiprintf_internal_r+0x494>
 400570c:	31000084 	addi	r4,r6,2
 4005710:	42000204 	addi	r8,r8,8
 4005714:	180d883a 	mov	r6,r3
 4005718:	843ffc04 	addi	r16,r16,-16
 400571c:	e4000f0e 	bge	fp,r16,400575c <___vfiprintf_internal_r+0x4d0>
 4005720:	01010074 	movhi	r4,1025
 4005724:	10800404 	addi	r2,r2,16
 4005728:	30c00044 	addi	r3,r6,1
 400572c:	213591c4 	addi	r4,r4,-10681
 4005730:	41000015 	stw	r4,0(r8)
 4005734:	47000115 	stw	fp,4(r8)
 4005738:	d8801c15 	stw	r2,112(sp)
 400573c:	d8c01b15 	stw	r3,108(sp)
 4005740:	50fff20e 	bge	r10,r3,400570c <__alt_data_end+0xfc00570c>
 4005744:	1001b21e 	bne	r2,zero,4005e10 <___vfiprintf_internal_r+0xb84>
 4005748:	843ffc04 	addi	r16,r16,-16
 400574c:	000d883a 	mov	r6,zero
 4005750:	01000044 	movi	r4,1
 4005754:	d811883a 	mov	r8,sp
 4005758:	e43ff116 	blt	fp,r16,4005720 <__alt_data_end+0xfc005720>
 400575c:	a807883a 	mov	r3,r21
 4005760:	d9c02917 	ldw	r7,164(sp)
 4005764:	802b883a 	mov	r21,r16
 4005768:	dc002717 	ldw	r16,156(sp)
 400576c:	d9402317 	ldw	r5,140(sp)
 4005770:	a885883a 	add	r2,r21,r2
 4005774:	45400115 	stw	r21,4(r8)
 4005778:	41400015 	stw	r5,0(r8)
 400577c:	d8801c15 	stw	r2,112(sp)
 4005780:	d9001b15 	stw	r4,108(sp)
 4005784:	014001c4 	movi	r5,7
 4005788:	29026216 	blt	r5,r4,4006114 <___vfiprintf_internal_r+0xe88>
 400578c:	d9801d87 	ldb	r6,118(sp)
 4005790:	42000204 	addi	r8,r8,8
 4005794:	21400044 	addi	r5,r4,1
 4005798:	3001ae1e 	bne	r6,zero,4005e54 <___vfiprintf_internal_r+0xbc8>
 400579c:	3801bb26 	beq	r7,zero,4005e8c <___vfiprintf_internal_r+0xc00>
 40057a0:	d9001d04 	addi	r4,sp,116
 40057a4:	10800084 	addi	r2,r2,2
 40057a8:	41000015 	stw	r4,0(r8)
 40057ac:	01000084 	movi	r4,2
 40057b0:	41000115 	stw	r4,4(r8)
 40057b4:	d8801c15 	stw	r2,112(sp)
 40057b8:	d9401b15 	stw	r5,108(sp)
 40057bc:	010001c4 	movi	r4,7
 40057c0:	2142680e 	bge	r4,r5,4006164 <___vfiprintf_internal_r+0xed8>
 40057c4:	1002b11e 	bne	r2,zero,400628c <___vfiprintf_internal_r+0x1000>
 40057c8:	01802004 	movi	r6,128
 40057cc:	01400044 	movi	r5,1
 40057d0:	0009883a 	mov	r4,zero
 40057d4:	d811883a 	mov	r8,sp
 40057d8:	1981ae1e 	bne	r3,r6,4005e94 <___vfiprintf_internal_r+0xc08>
 40057dc:	d8c02517 	ldw	r3,148(sp)
 40057e0:	1cf9c83a 	sub	fp,r3,r19
 40057e4:	0701ab0e 	bge	zero,fp,4005e94 <___vfiprintf_internal_r+0xc08>
 40057e8:	05400404 	movi	r21,16
 40057ec:	af03a90e 	bge	r21,fp,4006694 <___vfiprintf_internal_r+0x1408>
 40057f0:	01410074 	movhi	r5,1025
 40057f4:	29758dc4 	addi	r5,r5,-10697
 40057f8:	d9402315 	stw	r5,140(sp)
 40057fc:	01c001c4 	movi	r7,7
 4005800:	00000506 	br	4005818 <___vfiprintf_internal_r+0x58c>
 4005804:	21800084 	addi	r6,r4,2
 4005808:	42000204 	addi	r8,r8,8
 400580c:	1809883a 	mov	r4,r3
 4005810:	e73ffc04 	addi	fp,fp,-16
 4005814:	af000d0e 	bge	r21,fp,400584c <___vfiprintf_internal_r+0x5c0>
 4005818:	10800404 	addi	r2,r2,16
 400581c:	20c00044 	addi	r3,r4,1
 4005820:	44800015 	stw	r18,0(r8)
 4005824:	45400115 	stw	r21,4(r8)
 4005828:	d8801c15 	stw	r2,112(sp)
 400582c:	d8c01b15 	stw	r3,108(sp)
 4005830:	38fff40e 	bge	r7,r3,4005804 <__alt_data_end+0xfc005804>
 4005834:	10022b1e 	bne	r2,zero,40060e4 <___vfiprintf_internal_r+0xe58>
 4005838:	e73ffc04 	addi	fp,fp,-16
 400583c:	01800044 	movi	r6,1
 4005840:	0009883a 	mov	r4,zero
 4005844:	d811883a 	mov	r8,sp
 4005848:	af3ff316 	blt	r21,fp,4005818 <__alt_data_end+0xfc005818>
 400584c:	d8c02317 	ldw	r3,140(sp)
 4005850:	1705883a 	add	r2,r2,fp
 4005854:	47000115 	stw	fp,4(r8)
 4005858:	40c00015 	stw	r3,0(r8)
 400585c:	d8801c15 	stw	r2,112(sp)
 4005860:	d9801b15 	stw	r6,108(sp)
 4005864:	00c001c4 	movi	r3,7
 4005868:	19829416 	blt	r3,r6,40062bc <___vfiprintf_internal_r+0x1030>
 400586c:	8521c83a 	sub	r16,r16,r20
 4005870:	42000204 	addi	r8,r8,8
 4005874:	31400044 	addi	r5,r6,1
 4005878:	3009883a 	mov	r4,r6
 400587c:	04018716 	blt	zero,r16,4005e9c <___vfiprintf_internal_r+0xc10>
 4005880:	a085883a 	add	r2,r20,r2
 4005884:	45c00015 	stw	r23,0(r8)
 4005888:	45000115 	stw	r20,4(r8)
 400588c:	d8801c15 	stw	r2,112(sp)
 4005890:	d9401b15 	stw	r5,108(sp)
 4005894:	00c001c4 	movi	r3,7
 4005898:	1941c20e 	bge	r3,r5,4005fa4 <___vfiprintf_internal_r+0xd18>
 400589c:	1002531e 	bne	r2,zero,40061ec <___vfiprintf_internal_r+0xf60>
 40058a0:	d8001b15 	stw	zero,108(sp)
 40058a4:	8c40010c 	andi	r17,r17,4
 40058a8:	88023226 	beq	r17,zero,4006174 <___vfiprintf_internal_r+0xee8>
 40058ac:	d9002517 	ldw	r4,148(sp)
 40058b0:	24e3c83a 	sub	r17,r4,r19
 40058b4:	04432916 	blt	zero,r17,400655c <___vfiprintf_internal_r+0x12d0>
 40058b8:	d8802517 	ldw	r2,148(sp)
 40058bc:	14c0010e 	bge	r2,r19,40058c4 <___vfiprintf_internal_r+0x638>
 40058c0:	9805883a 	mov	r2,r19
 40058c4:	d8c02417 	ldw	r3,144(sp)
 40058c8:	1887883a 	add	r3,r3,r2
 40058cc:	d8c02415 	stw	r3,144(sp)
 40058d0:	d8001b15 	stw	zero,108(sp)
 40058d4:	d811883a 	mov	r8,sp
 40058d8:	003ea006 	br	400535c <__alt_data_end+0xfc00535c>
 40058dc:	8c400814 	ori	r17,r17,32
 40058e0:	b0c00007 	ldb	r3,0(r22)
 40058e4:	003ec606 	br	4005400 <__alt_data_end+0xfc005400>
 40058e8:	b0c00007 	ldb	r3,0(r22)
 40058ec:	00801b04 	movi	r2,108
 40058f0:	18832026 	beq	r3,r2,4006574 <___vfiprintf_internal_r+0x12e8>
 40058f4:	8c400414 	ori	r17,r17,16
 40058f8:	003ec106 	br	4005400 <__alt_data_end+0xfc005400>
 40058fc:	9cc03fcc 	andi	r19,r19,255
 4005900:	b811883a 	mov	r8,r23
 4005904:	9803981e 	bne	r19,zero,4006768 <___vfiprintf_internal_r+0x14dc>
 4005908:	8880080c 	andi	r2,r17,32
 400590c:	1002be26 	beq	r2,zero,4006408 <___vfiprintf_internal_r+0x117c>
 4005910:	d9002217 	ldw	r4,136(sp)
 4005914:	d9402417 	ldw	r5,144(sp)
 4005918:	20800017 	ldw	r2,0(r4)
 400591c:	2807d7fa 	srai	r3,r5,31
 4005920:	21000104 	addi	r4,r4,4
 4005924:	d9002215 	stw	r4,136(sp)
 4005928:	11400015 	stw	r5,0(r2)
 400592c:	10c00115 	stw	r3,4(r2)
 4005930:	003e8a06 	br	400535c <__alt_data_end+0xfc00535c>
 4005934:	9cc03fcc 	andi	r19,r19,255
 4005938:	b811883a 	mov	r8,r23
 400593c:	9803871e 	bne	r19,zero,400675c <___vfiprintf_internal_r+0x14d0>
 4005940:	8880080c 	andi	r2,r17,32
 4005944:	10009a26 	beq	r2,zero,4005bb0 <___vfiprintf_internal_r+0x924>
 4005948:	d9002217 	ldw	r4,136(sp)
 400594c:	d8001d85 	stb	zero,118(sp)
 4005950:	20800204 	addi	r2,r4,8
 4005954:	24c00017 	ldw	r19,0(r4)
 4005958:	25000117 	ldw	r20,4(r4)
 400595c:	8002a416 	blt	r16,zero,40063f0 <___vfiprintf_internal_r+0x1164>
 4005960:	013fdfc4 	movi	r4,-129
 4005964:	9d06b03a 	or	r3,r19,r20
 4005968:	d8802215 	stw	r2,136(sp)
 400596c:	8922703a 	and	r17,r17,r4
 4005970:	18009b26 	beq	r3,zero,4005be0 <___vfiprintf_internal_r+0x954>
 4005974:	002b883a 	mov	r21,zero
 4005978:	ddc01a04 	addi	r23,sp,104
 400597c:	9806d0fa 	srli	r3,r19,3
 4005980:	a008977a 	slli	r4,r20,29
 4005984:	a028d0fa 	srli	r20,r20,3
 4005988:	9cc001cc 	andi	r19,r19,7
 400598c:	98800c04 	addi	r2,r19,48
 4005990:	bdffffc4 	addi	r23,r23,-1
 4005994:	20e6b03a 	or	r19,r4,r3
 4005998:	b8800005 	stb	r2,0(r23)
 400599c:	9d06b03a 	or	r3,r19,r20
 40059a0:	183ff61e 	bne	r3,zero,400597c <__alt_data_end+0xfc00597c>
 40059a4:	88c0004c 	andi	r3,r17,1
 40059a8:	18021f1e 	bne	r3,zero,4006228 <___vfiprintf_internal_r+0xf9c>
 40059ac:	d9401e17 	ldw	r5,120(sp)
 40059b0:	2de9c83a 	sub	r20,r5,r23
 40059b4:	003f3806 	br	4005698 <__alt_data_end+0xfc005698>
 40059b8:	9cc03fcc 	andi	r19,r19,255
 40059bc:	b811883a 	mov	r8,r23
 40059c0:	98034f1e 	bne	r19,zero,4006700 <___vfiprintf_internal_r+0x1474>
 40059c4:	00810074 	movhi	r2,1025
 40059c8:	10b58704 	addi	r2,r2,-10724
 40059cc:	d8802615 	stw	r2,152(sp)
 40059d0:	8880080c 	andi	r2,r17,32
 40059d4:	1000ac26 	beq	r2,zero,4005c88 <___vfiprintf_internal_r+0x9fc>
 40059d8:	d9002217 	ldw	r4,136(sp)
 40059dc:	24c00017 	ldw	r19,0(r4)
 40059e0:	25000117 	ldw	r20,4(r4)
 40059e4:	21000204 	addi	r4,r4,8
 40059e8:	d9002215 	stw	r4,136(sp)
 40059ec:	8880004c 	andi	r2,r17,1
 40059f0:	1001e726 	beq	r2,zero,4006190 <___vfiprintf_internal_r+0xf04>
 40059f4:	9d04b03a 	or	r2,r19,r20
 40059f8:	10025c1e 	bne	r2,zero,400636c <___vfiprintf_internal_r+0x10e0>
 40059fc:	d8001d85 	stb	zero,118(sp)
 4005a00:	80024416 	blt	r16,zero,4006314 <___vfiprintf_internal_r+0x1088>
 4005a04:	00bfdfc4 	movi	r2,-129
 4005a08:	88a2703a 	and	r17,r17,r2
 4005a0c:	003f1d06 	br	4005684 <__alt_data_end+0xfc005684>
 4005a10:	d8c02217 	ldw	r3,136(sp)
 4005a14:	04c00044 	movi	r19,1
 4005a18:	b811883a 	mov	r8,r23
 4005a1c:	18800017 	ldw	r2,0(r3)
 4005a20:	18c00104 	addi	r3,r3,4
 4005a24:	d8001d85 	stb	zero,118(sp)
 4005a28:	d8801005 	stb	r2,64(sp)
 4005a2c:	d8c02215 	stw	r3,136(sp)
 4005a30:	9829883a 	mov	r20,r19
 4005a34:	ddc01004 	addi	r23,sp,64
 4005a38:	0021883a 	mov	r16,zero
 4005a3c:	003f1e06 	br	40056b8 <__alt_data_end+0xfc0056b8>
 4005a40:	9cc03fcc 	andi	r19,r19,255
 4005a44:	b811883a 	mov	r8,r23
 4005a48:	9803331e 	bne	r19,zero,4006718 <___vfiprintf_internal_r+0x148c>
 4005a4c:	8880080c 	andi	r2,r17,32
 4005a50:	10004826 	beq	r2,zero,4005b74 <___vfiprintf_internal_r+0x8e8>
 4005a54:	d9002217 	ldw	r4,136(sp)
 4005a58:	20800117 	ldw	r2,4(r4)
 4005a5c:	24c00017 	ldw	r19,0(r4)
 4005a60:	21000204 	addi	r4,r4,8
 4005a64:	d9002215 	stw	r4,136(sp)
 4005a68:	1029883a 	mov	r20,r2
 4005a6c:	10024c16 	blt	r2,zero,40063a0 <___vfiprintf_internal_r+0x1114>
 4005a70:	dd401d83 	ldbu	r21,118(sp)
 4005a74:	80007116 	blt	r16,zero,4005c3c <___vfiprintf_internal_r+0x9b0>
 4005a78:	00ffdfc4 	movi	r3,-129
 4005a7c:	9d04b03a 	or	r2,r19,r20
 4005a80:	88e2703a 	and	r17,r17,r3
 4005a84:	1000d126 	beq	r2,zero,4005dcc <___vfiprintf_internal_r+0xb40>
 4005a88:	a0023526 	beq	r20,zero,4006360 <___vfiprintf_internal_r+0x10d4>
 4005a8c:	ddc01a04 	addi	r23,sp,104
 4005a90:	4039883a 	mov	fp,r8
 4005a94:	9809883a 	mov	r4,r19
 4005a98:	a00b883a 	mov	r5,r20
 4005a9c:	01800284 	movi	r6,10
 4005aa0:	000f883a 	mov	r7,zero
 4005aa4:	4009e580 	call	4009e58 <__umoddi3>
 4005aa8:	10800c04 	addi	r2,r2,48
 4005aac:	bdffffc4 	addi	r23,r23,-1
 4005ab0:	9809883a 	mov	r4,r19
 4005ab4:	a00b883a 	mov	r5,r20
 4005ab8:	b8800005 	stb	r2,0(r23)
 4005abc:	01800284 	movi	r6,10
 4005ac0:	000f883a 	mov	r7,zero
 4005ac4:	400985c0 	call	400985c <__udivdi3>
 4005ac8:	1027883a 	mov	r19,r2
 4005acc:	10c4b03a 	or	r2,r2,r3
 4005ad0:	1829883a 	mov	r20,r3
 4005ad4:	103fef1e 	bne	r2,zero,4005a94 <__alt_data_end+0xfc005a94>
 4005ad8:	d9001e17 	ldw	r4,120(sp)
 4005adc:	e011883a 	mov	r8,fp
 4005ae0:	25e9c83a 	sub	r20,r4,r23
 4005ae4:	003eec06 	br	4005698 <__alt_data_end+0xfc005698>
 4005ae8:	d8802307 	ldb	r2,140(sp)
 4005aec:	1002361e 	bne	r2,zero,40063c8 <___vfiprintf_internal_r+0x113c>
 4005af0:	00c00804 	movi	r3,32
 4005af4:	d8c02305 	stb	r3,140(sp)
 4005af8:	04c00044 	movi	r19,1
 4005afc:	b0c00007 	ldb	r3,0(r22)
 4005b00:	003e3f06 	br	4005400 <__alt_data_end+0xfc005400>
 4005b04:	8c400054 	ori	r17,r17,1
 4005b08:	b0c00007 	ldb	r3,0(r22)
 4005b0c:	003e3c06 	br	4005400 <__alt_data_end+0xfc005400>
 4005b10:	8c402014 	ori	r17,r17,128
 4005b14:	b0c00007 	ldb	r3,0(r22)
 4005b18:	003e3906 	br	4005400 <__alt_data_end+0xfc005400>
 4005b1c:	dc002715 	stw	r16,156(sp)
 4005b20:	d8002515 	stw	zero,148(sp)
 4005b24:	1f3ff404 	addi	fp,r3,-48
 4005b28:	0009883a 	mov	r4,zero
 4005b2c:	b021883a 	mov	r16,r22
 4005b30:	01400284 	movi	r5,10
 4005b34:	40036040 	call	4003604 <__mulsi3>
 4005b38:	80c00007 	ldb	r3,0(r16)
 4005b3c:	e089883a 	add	r4,fp,r2
 4005b40:	b5800044 	addi	r22,r22,1
 4005b44:	1f3ff404 	addi	fp,r3,-48
 4005b48:	b021883a 	mov	r16,r22
 4005b4c:	af3ff82e 	bgeu	r21,fp,4005b30 <__alt_data_end+0xfc005b30>
 4005b50:	d9002515 	stw	r4,148(sp)
 4005b54:	dc002717 	ldw	r16,156(sp)
 4005b58:	003e2a06 	br	4005404 <__alt_data_end+0xfc005404>
 4005b5c:	9cc03fcc 	andi	r19,r19,255
 4005b60:	b811883a 	mov	r8,r23
 4005b64:	9802e91e 	bne	r19,zero,400670c <___vfiprintf_internal_r+0x1480>
 4005b68:	8c400414 	ori	r17,r17,16
 4005b6c:	8880080c 	andi	r2,r17,32
 4005b70:	103fb81e 	bne	r2,zero,4005a54 <__alt_data_end+0xfc005a54>
 4005b74:	8880040c 	andi	r2,r17,16
 4005b78:	10022e26 	beq	r2,zero,4006434 <___vfiprintf_internal_r+0x11a8>
 4005b7c:	d9402217 	ldw	r5,136(sp)
 4005b80:	2cc00017 	ldw	r19,0(r5)
 4005b84:	29400104 	addi	r5,r5,4
 4005b88:	d9402215 	stw	r5,136(sp)
 4005b8c:	9829d7fa 	srai	r20,r19,31
 4005b90:	a005883a 	mov	r2,r20
 4005b94:	003fb506 	br	4005a6c <__alt_data_end+0xfc005a6c>
 4005b98:	9cc03fcc 	andi	r19,r19,255
 4005b9c:	b811883a 	mov	r8,r23
 4005ba0:	9802fa1e 	bne	r19,zero,400678c <___vfiprintf_internal_r+0x1500>
 4005ba4:	8c400414 	ori	r17,r17,16
 4005ba8:	8880080c 	andi	r2,r17,32
 4005bac:	103f661e 	bne	r2,zero,4005948 <__alt_data_end+0xfc005948>
 4005bb0:	8880040c 	andi	r2,r17,16
 4005bb4:	10020626 	beq	r2,zero,40063d0 <___vfiprintf_internal_r+0x1144>
 4005bb8:	d9402217 	ldw	r5,136(sp)
 4005bbc:	d8001d85 	stb	zero,118(sp)
 4005bc0:	0029883a 	mov	r20,zero
 4005bc4:	28800104 	addi	r2,r5,4
 4005bc8:	2cc00017 	ldw	r19,0(r5)
 4005bcc:	80020816 	blt	r16,zero,40063f0 <___vfiprintf_internal_r+0x1164>
 4005bd0:	00ffdfc4 	movi	r3,-129
 4005bd4:	d8802215 	stw	r2,136(sp)
 4005bd8:	88e2703a 	and	r17,r17,r3
 4005bdc:	983f651e 	bne	r19,zero,4005974 <__alt_data_end+0xfc005974>
 4005be0:	002b883a 	mov	r21,zero
 4005be4:	8002cf26 	beq	r16,zero,4006724 <___vfiprintf_internal_r+0x1498>
 4005be8:	0027883a 	mov	r19,zero
 4005bec:	0029883a 	mov	r20,zero
 4005bf0:	003f6106 	br	4005978 <__alt_data_end+0xfc005978>
 4005bf4:	9cc03fcc 	andi	r19,r19,255
 4005bf8:	b811883a 	mov	r8,r23
 4005bfc:	9802e01e 	bne	r19,zero,4006780 <___vfiprintf_internal_r+0x14f4>
 4005c00:	8c400414 	ori	r17,r17,16
 4005c04:	8880080c 	andi	r2,r17,32
 4005c08:	1000641e 	bne	r2,zero,4005d9c <___vfiprintf_internal_r+0xb10>
 4005c0c:	8880040c 	andi	r2,r17,16
 4005c10:	1001c81e 	bne	r2,zero,4006334 <___vfiprintf_internal_r+0x10a8>
 4005c14:	8880100c 	andi	r2,r17,64
 4005c18:	d8001d85 	stb	zero,118(sp)
 4005c1c:	1002281e 	bne	r2,zero,40064c0 <___vfiprintf_internal_r+0x1234>
 4005c20:	d9002217 	ldw	r4,136(sp)
 4005c24:	0029883a 	mov	r20,zero
 4005c28:	20800104 	addi	r2,r4,4
 4005c2c:	24c00017 	ldw	r19,0(r4)
 4005c30:	8001c60e 	bge	r16,zero,400634c <___vfiprintf_internal_r+0x10c0>
 4005c34:	d8802215 	stw	r2,136(sp)
 4005c38:	002b883a 	mov	r21,zero
 4005c3c:	9d04b03a 	or	r2,r19,r20
 4005c40:	103f911e 	bne	r2,zero,4005a88 <__alt_data_end+0xfc005a88>
 4005c44:	00800044 	movi	r2,1
 4005c48:	10803fcc 	andi	r2,r2,255
 4005c4c:	00c00044 	movi	r3,1
 4005c50:	10c05f26 	beq	r2,r3,4005dd0 <___vfiprintf_internal_r+0xb44>
 4005c54:	00c00084 	movi	r3,2
 4005c58:	10ffe31e 	bne	r2,r3,4005be8 <__alt_data_end+0xfc005be8>
 4005c5c:	0027883a 	mov	r19,zero
 4005c60:	0029883a 	mov	r20,zero
 4005c64:	00015106 	br	40061ac <___vfiprintf_internal_r+0xf20>
 4005c68:	9cc03fcc 	andi	r19,r19,255
 4005c6c:	b811883a 	mov	r8,r23
 4005c70:	9802c01e 	bne	r19,zero,4006774 <___vfiprintf_internal_r+0x14e8>
 4005c74:	01410074 	movhi	r5,1025
 4005c78:	29758204 	addi	r5,r5,-10744
 4005c7c:	d9402615 	stw	r5,152(sp)
 4005c80:	8880080c 	andi	r2,r17,32
 4005c84:	103f541e 	bne	r2,zero,40059d8 <__alt_data_end+0xfc0059d8>
 4005c88:	8880040c 	andi	r2,r17,16
 4005c8c:	1001f226 	beq	r2,zero,4006458 <___vfiprintf_internal_r+0x11cc>
 4005c90:	d9402217 	ldw	r5,136(sp)
 4005c94:	0029883a 	mov	r20,zero
 4005c98:	2cc00017 	ldw	r19,0(r5)
 4005c9c:	29400104 	addi	r5,r5,4
 4005ca0:	d9402215 	stw	r5,136(sp)
 4005ca4:	003f5106 	br	40059ec <__alt_data_end+0xfc0059ec>
 4005ca8:	d8c02217 	ldw	r3,136(sp)
 4005cac:	b811883a 	mov	r8,r23
 4005cb0:	d8001d85 	stb	zero,118(sp)
 4005cb4:	1dc00017 	ldw	r23,0(r3)
 4005cb8:	1f000104 	addi	fp,r3,4
 4005cbc:	b8025926 	beq	r23,zero,4006624 <___vfiprintf_internal_r+0x1398>
 4005cc0:	80023316 	blt	r16,zero,4006590 <___vfiprintf_internal_r+0x1304>
 4005cc4:	800d883a 	mov	r6,r16
 4005cc8:	000b883a 	mov	r5,zero
 4005ccc:	b809883a 	mov	r4,r23
 4005cd0:	da002a15 	stw	r8,168(sp)
 4005cd4:	400874c0 	call	400874c <memchr>
 4005cd8:	da002a17 	ldw	r8,168(sp)
 4005cdc:	10026826 	beq	r2,zero,4006680 <___vfiprintf_internal_r+0x13f4>
 4005ce0:	15e9c83a 	sub	r20,r2,r23
 4005ce4:	dd401d83 	ldbu	r21,118(sp)
 4005ce8:	df002215 	stw	fp,136(sp)
 4005cec:	0021883a 	mov	r16,zero
 4005cf0:	003e6906 	br	4005698 <__alt_data_end+0xfc005698>
 4005cf4:	9cc03fcc 	andi	r19,r19,255
 4005cf8:	b811883a 	mov	r8,r23
 4005cfc:	983fc126 	beq	r19,zero,4005c04 <__alt_data_end+0xfc005c04>
 4005d00:	d8c02303 	ldbu	r3,140(sp)
 4005d04:	d8c01d85 	stb	r3,118(sp)
 4005d08:	003fbe06 	br	4005c04 <__alt_data_end+0xfc005c04>
 4005d0c:	d9002217 	ldw	r4,136(sp)
 4005d10:	d9402217 	ldw	r5,136(sp)
 4005d14:	21000017 	ldw	r4,0(r4)
 4005d18:	28800104 	addi	r2,r5,4
 4005d1c:	d9002515 	stw	r4,148(sp)
 4005d20:	203e3d16 	blt	r4,zero,4005618 <__alt_data_end+0xfc005618>
 4005d24:	d8802215 	stw	r2,136(sp)
 4005d28:	b0c00007 	ldb	r3,0(r22)
 4005d2c:	003db406 	br	4005400 <__alt_data_end+0xfc005400>
 4005d30:	00c00ac4 	movi	r3,43
 4005d34:	d8c02305 	stb	r3,140(sp)
 4005d38:	04c00044 	movi	r19,1
 4005d3c:	b0c00007 	ldb	r3,0(r22)
 4005d40:	003daf06 	br	4005400 <__alt_data_end+0xfc005400>
 4005d44:	b0c00007 	ldb	r3,0(r22)
 4005d48:	01000a84 	movi	r4,42
 4005d4c:	b4000044 	addi	r16,r22,1
 4005d50:	19025e26 	beq	r3,r4,40066cc <___vfiprintf_internal_r+0x1440>
 4005d54:	1f3ff404 	addi	fp,r3,-48
 4005d58:	0009883a 	mov	r4,zero
 4005d5c:	af025236 	bltu	r21,fp,40066a8 <___vfiprintf_internal_r+0x141c>
 4005d60:	01400284 	movi	r5,10
 4005d64:	40036040 	call	4003604 <__mulsi3>
 4005d68:	80c00007 	ldb	r3,0(r16)
 4005d6c:	1709883a 	add	r4,r2,fp
 4005d70:	85800044 	addi	r22,r16,1
 4005d74:	1f3ff404 	addi	fp,r3,-48
 4005d78:	b021883a 	mov	r16,r22
 4005d7c:	af3ff82e 	bgeu	r21,fp,4005d60 <__alt_data_end+0xfc005d60>
 4005d80:	2021883a 	mov	r16,r4
 4005d84:	203d9f0e 	bge	r4,zero,4005404 <__alt_data_end+0xfc005404>
 4005d88:	043fffc4 	movi	r16,-1
 4005d8c:	003d9d06 	br	4005404 <__alt_data_end+0xfc005404>
 4005d90:	8c401014 	ori	r17,r17,64
 4005d94:	b0c00007 	ldb	r3,0(r22)
 4005d98:	003d9906 	br	4005400 <__alt_data_end+0xfc005400>
 4005d9c:	d9002217 	ldw	r4,136(sp)
 4005da0:	d8001d85 	stb	zero,118(sp)
 4005da4:	20c00204 	addi	r3,r4,8
 4005da8:	24c00017 	ldw	r19,0(r4)
 4005dac:	25000117 	ldw	r20,4(r4)
 4005db0:	8001e716 	blt	r16,zero,4006550 <___vfiprintf_internal_r+0x12c4>
 4005db4:	013fdfc4 	movi	r4,-129
 4005db8:	9d04b03a 	or	r2,r19,r20
 4005dbc:	d8c02215 	stw	r3,136(sp)
 4005dc0:	8922703a 	and	r17,r17,r4
 4005dc4:	002b883a 	mov	r21,zero
 4005dc8:	103f2f1e 	bne	r2,zero,4005a88 <__alt_data_end+0xfc005a88>
 4005dcc:	803e2f26 	beq	r16,zero,400568c <__alt_data_end+0xfc00568c>
 4005dd0:	0027883a 	mov	r19,zero
 4005dd4:	9cc00c04 	addi	r19,r19,48
 4005dd8:	dcc019c5 	stb	r19,103(sp)
 4005ddc:	dd002817 	ldw	r20,160(sp)
 4005de0:	ddc019c4 	addi	r23,sp,103
 4005de4:	003e2c06 	br	4005698 <__alt_data_end+0xfc005698>
 4005de8:	9cc03fcc 	andi	r19,r19,255
 4005dec:	b811883a 	mov	r8,r23
 4005df0:	9802571e 	bne	r19,zero,4006750 <___vfiprintf_internal_r+0x14c4>
 4005df4:	18005726 	beq	r3,zero,4005f54 <___vfiprintf_internal_r+0xcc8>
 4005df8:	04c00044 	movi	r19,1
 4005dfc:	d8c01005 	stb	r3,64(sp)
 4005e00:	d8001d85 	stb	zero,118(sp)
 4005e04:	9829883a 	mov	r20,r19
 4005e08:	ddc01004 	addi	r23,sp,64
 4005e0c:	003f0a06 	br	4005a38 <__alt_data_end+0xfc005a38>
 4005e10:	d9402017 	ldw	r5,128(sp)
 4005e14:	d9002117 	ldw	r4,132(sp)
 4005e18:	d9801a04 	addi	r6,sp,104
 4005e1c:	da802a15 	stw	r10,168(sp)
 4005e20:	40051780 	call	4005178 <__sprint_r.part.0>
 4005e24:	da802a17 	ldw	r10,168(sp)
 4005e28:	1000501e 	bne	r2,zero,4005f6c <___vfiprintf_internal_r+0xce0>
 4005e2c:	d9801b17 	ldw	r6,108(sp)
 4005e30:	d8801c17 	ldw	r2,112(sp)
 4005e34:	d811883a 	mov	r8,sp
 4005e38:	31000044 	addi	r4,r6,1
 4005e3c:	003e3606 	br	4005718 <__alt_data_end+0xfc005718>
 4005e40:	d9001b17 	ldw	r4,108(sp)
 4005e44:	d8801c17 	ldw	r2,112(sp)
 4005e48:	21400044 	addi	r5,r4,1
 4005e4c:	d9801d87 	ldb	r6,118(sp)
 4005e50:	303e5226 	beq	r6,zero,400579c <__alt_data_end+0xfc00579c>
 4005e54:	01800044 	movi	r6,1
 4005e58:	d9001d84 	addi	r4,sp,118
 4005e5c:	1185883a 	add	r2,r2,r6
 4005e60:	41000015 	stw	r4,0(r8)
 4005e64:	41800115 	stw	r6,4(r8)
 4005e68:	d8801c15 	stw	r2,112(sp)
 4005e6c:	d9401b15 	stw	r5,108(sp)
 4005e70:	010001c4 	movi	r4,7
 4005e74:	2140b00e 	bge	r4,r5,4006138 <___vfiprintf_internal_r+0xeac>
 4005e78:	1000f61e 	bne	r2,zero,4006254 <___vfiprintf_internal_r+0xfc8>
 4005e7c:	3800b31e 	bne	r7,zero,400614c <___vfiprintf_internal_r+0xec0>
 4005e80:	0009883a 	mov	r4,zero
 4005e84:	300b883a 	mov	r5,r6
 4005e88:	d811883a 	mov	r8,sp
 4005e8c:	01802004 	movi	r6,128
 4005e90:	19be5226 	beq	r3,r6,40057dc <__alt_data_end+0xfc0057dc>
 4005e94:	8521c83a 	sub	r16,r16,r20
 4005e98:	043e790e 	bge	zero,r16,4005880 <__alt_data_end+0xfc005880>
 4005e9c:	05400404 	movi	r21,16
 4005ea0:	ac01b00e 	bge	r21,r16,4006564 <___vfiprintf_internal_r+0x12d8>
 4005ea4:	01410074 	movhi	r5,1025
 4005ea8:	29758dc4 	addi	r5,r5,-10697
 4005eac:	d9402315 	stw	r5,140(sp)
 4005eb0:	070001c4 	movi	fp,7
 4005eb4:	00000506 	br	4005ecc <___vfiprintf_internal_r+0xc40>
 4005eb8:	21400084 	addi	r5,r4,2
 4005ebc:	42000204 	addi	r8,r8,8
 4005ec0:	1809883a 	mov	r4,r3
 4005ec4:	843ffc04 	addi	r16,r16,-16
 4005ec8:	ac000d0e 	bge	r21,r16,4005f00 <___vfiprintf_internal_r+0xc74>
 4005ecc:	10800404 	addi	r2,r2,16
 4005ed0:	20c00044 	addi	r3,r4,1
 4005ed4:	44800015 	stw	r18,0(r8)
 4005ed8:	45400115 	stw	r21,4(r8)
 4005edc:	d8801c15 	stw	r2,112(sp)
 4005ee0:	d8c01b15 	stw	r3,108(sp)
 4005ee4:	e0fff40e 	bge	fp,r3,4005eb8 <__alt_data_end+0xfc005eb8>
 4005ee8:	1000101e 	bne	r2,zero,4005f2c <___vfiprintf_internal_r+0xca0>
 4005eec:	843ffc04 	addi	r16,r16,-16
 4005ef0:	01400044 	movi	r5,1
 4005ef4:	0009883a 	mov	r4,zero
 4005ef8:	d811883a 	mov	r8,sp
 4005efc:	ac3ff316 	blt	r21,r16,4005ecc <__alt_data_end+0xfc005ecc>
 4005f00:	d8c02317 	ldw	r3,140(sp)
 4005f04:	1405883a 	add	r2,r2,r16
 4005f08:	44000115 	stw	r16,4(r8)
 4005f0c:	40c00015 	stw	r3,0(r8)
 4005f10:	d8801c15 	stw	r2,112(sp)
 4005f14:	d9401b15 	stw	r5,108(sp)
 4005f18:	00c001c4 	movi	r3,7
 4005f1c:	19401916 	blt	r3,r5,4005f84 <___vfiprintf_internal_r+0xcf8>
 4005f20:	42000204 	addi	r8,r8,8
 4005f24:	29400044 	addi	r5,r5,1
 4005f28:	003e5506 	br	4005880 <__alt_data_end+0xfc005880>
 4005f2c:	d9402017 	ldw	r5,128(sp)
 4005f30:	d9002117 	ldw	r4,132(sp)
 4005f34:	d9801a04 	addi	r6,sp,104
 4005f38:	40051780 	call	4005178 <__sprint_r.part.0>
 4005f3c:	10000b1e 	bne	r2,zero,4005f6c <___vfiprintf_internal_r+0xce0>
 4005f40:	d9001b17 	ldw	r4,108(sp)
 4005f44:	d8801c17 	ldw	r2,112(sp)
 4005f48:	d811883a 	mov	r8,sp
 4005f4c:	21400044 	addi	r5,r4,1
 4005f50:	003fdc06 	br	4005ec4 <__alt_data_end+0xfc005ec4>
 4005f54:	d8801c17 	ldw	r2,112(sp)
 4005f58:	10000426 	beq	r2,zero,4005f6c <___vfiprintf_internal_r+0xce0>
 4005f5c:	d9402017 	ldw	r5,128(sp)
 4005f60:	d9002117 	ldw	r4,132(sp)
 4005f64:	d9801a04 	addi	r6,sp,104
 4005f68:	40051780 	call	4005178 <__sprint_r.part.0>
 4005f6c:	d9402017 	ldw	r5,128(sp)
 4005f70:	2880030b 	ldhu	r2,12(r5)
 4005f74:	1080100c 	andi	r2,r2,64
 4005f78:	10014d1e 	bne	r2,zero,40064b0 <___vfiprintf_internal_r+0x1224>
 4005f7c:	d8802417 	ldw	r2,144(sp)
 4005f80:	003d9706 	br	40055e0 <__alt_data_end+0xfc0055e0>
 4005f84:	1000d21e 	bne	r2,zero,40062d0 <___vfiprintf_internal_r+0x1044>
 4005f88:	00c00044 	movi	r3,1
 4005f8c:	a005883a 	mov	r2,r20
 4005f90:	ddc00015 	stw	r23,0(sp)
 4005f94:	dd000115 	stw	r20,4(sp)
 4005f98:	dd001c15 	stw	r20,112(sp)
 4005f9c:	d8c01b15 	stw	r3,108(sp)
 4005fa0:	d811883a 	mov	r8,sp
 4005fa4:	42000204 	addi	r8,r8,8
 4005fa8:	8c40010c 	andi	r17,r17,4
 4005fac:	88004026 	beq	r17,zero,40060b0 <___vfiprintf_internal_r+0xe24>
 4005fb0:	d9002517 	ldw	r4,148(sp)
 4005fb4:	24e3c83a 	sub	r17,r4,r19
 4005fb8:	04403d0e 	bge	zero,r17,40060b0 <___vfiprintf_internal_r+0xe24>
 4005fbc:	04000404 	movi	r16,16
 4005fc0:	8441a90e 	bge	r16,r17,4006668 <___vfiprintf_internal_r+0x13dc>
 4005fc4:	00c10074 	movhi	r3,1025
 4005fc8:	18f591c4 	addi	r3,r3,-10681
 4005fcc:	d9001b17 	ldw	r4,108(sp)
 4005fd0:	d8c02315 	stw	r3,140(sp)
 4005fd4:	050001c4 	movi	r20,7
 4005fd8:	dd402117 	ldw	r21,132(sp)
 4005fdc:	ddc02017 	ldw	r23,128(sp)
 4005fe0:	00000506 	br	4005ff8 <___vfiprintf_internal_r+0xd6c>
 4005fe4:	21400084 	addi	r5,r4,2
 4005fe8:	42000204 	addi	r8,r8,8
 4005fec:	1809883a 	mov	r4,r3
 4005ff0:	8c7ffc04 	addi	r17,r17,-16
 4005ff4:	84400f0e 	bge	r16,r17,4006034 <___vfiprintf_internal_r+0xda8>
 4005ff8:	01410074 	movhi	r5,1025
 4005ffc:	10800404 	addi	r2,r2,16
 4006000:	20c00044 	addi	r3,r4,1
 4006004:	297591c4 	addi	r5,r5,-10681
 4006008:	41400015 	stw	r5,0(r8)
 400600c:	44000115 	stw	r16,4(r8)
 4006010:	d8801c15 	stw	r2,112(sp)
 4006014:	d8c01b15 	stw	r3,108(sp)
 4006018:	a0fff20e 	bge	r20,r3,4005fe4 <__alt_data_end+0xfc005fe4>
 400601c:	1000141e 	bne	r2,zero,4006070 <___vfiprintf_internal_r+0xde4>
 4006020:	8c7ffc04 	addi	r17,r17,-16
 4006024:	01400044 	movi	r5,1
 4006028:	0009883a 	mov	r4,zero
 400602c:	d811883a 	mov	r8,sp
 4006030:	847ff116 	blt	r16,r17,4005ff8 <__alt_data_end+0xfc005ff8>
 4006034:	d8c02317 	ldw	r3,140(sp)
 4006038:	1445883a 	add	r2,r2,r17
 400603c:	44400115 	stw	r17,4(r8)
 4006040:	40c00015 	stw	r3,0(r8)
 4006044:	d8801c15 	stw	r2,112(sp)
 4006048:	d9401b15 	stw	r5,108(sp)
 400604c:	00c001c4 	movi	r3,7
 4006050:	1940170e 	bge	r3,r5,40060b0 <___vfiprintf_internal_r+0xe24>
 4006054:	1000101e 	bne	r2,zero,4006098 <___vfiprintf_internal_r+0xe0c>
 4006058:	d8802517 	ldw	r2,148(sp)
 400605c:	14c11616 	blt	r2,r19,40064b8 <___vfiprintf_internal_r+0x122c>
 4006060:	d9002417 	ldw	r4,144(sp)
 4006064:	2089883a 	add	r4,r4,r2
 4006068:	d9002415 	stw	r4,144(sp)
 400606c:	003e1806 	br	40058d0 <__alt_data_end+0xfc0058d0>
 4006070:	d9801a04 	addi	r6,sp,104
 4006074:	b80b883a 	mov	r5,r23
 4006078:	a809883a 	mov	r4,r21
 400607c:	40051780 	call	4005178 <__sprint_r.part.0>
 4006080:	103fba1e 	bne	r2,zero,4005f6c <__alt_data_end+0xfc005f6c>
 4006084:	d9001b17 	ldw	r4,108(sp)
 4006088:	d8801c17 	ldw	r2,112(sp)
 400608c:	d811883a 	mov	r8,sp
 4006090:	21400044 	addi	r5,r4,1
 4006094:	003fd606 	br	4005ff0 <__alt_data_end+0xfc005ff0>
 4006098:	d9402017 	ldw	r5,128(sp)
 400609c:	d9002117 	ldw	r4,132(sp)
 40060a0:	d9801a04 	addi	r6,sp,104
 40060a4:	40051780 	call	4005178 <__sprint_r.part.0>
 40060a8:	103fb01e 	bne	r2,zero,4005f6c <__alt_data_end+0xfc005f6c>
 40060ac:	d8801c17 	ldw	r2,112(sp)
 40060b0:	d8c02517 	ldw	r3,148(sp)
 40060b4:	1cc0010e 	bge	r3,r19,40060bc <___vfiprintf_internal_r+0xe30>
 40060b8:	9807883a 	mov	r3,r19
 40060bc:	d9002417 	ldw	r4,144(sp)
 40060c0:	20c9883a 	add	r4,r4,r3
 40060c4:	d9002415 	stw	r4,144(sp)
 40060c8:	103e0126 	beq	r2,zero,40058d0 <__alt_data_end+0xfc0058d0>
 40060cc:	d9402017 	ldw	r5,128(sp)
 40060d0:	d9002117 	ldw	r4,132(sp)
 40060d4:	d9801a04 	addi	r6,sp,104
 40060d8:	40051780 	call	4005178 <__sprint_r.part.0>
 40060dc:	103dfc26 	beq	r2,zero,40058d0 <__alt_data_end+0xfc0058d0>
 40060e0:	003fa206 	br	4005f6c <__alt_data_end+0xfc005f6c>
 40060e4:	d9402017 	ldw	r5,128(sp)
 40060e8:	d9002117 	ldw	r4,132(sp)
 40060ec:	d9801a04 	addi	r6,sp,104
 40060f0:	d9c02b15 	stw	r7,172(sp)
 40060f4:	40051780 	call	4005178 <__sprint_r.part.0>
 40060f8:	d9c02b17 	ldw	r7,172(sp)
 40060fc:	103f9b1e 	bne	r2,zero,4005f6c <__alt_data_end+0xfc005f6c>
 4006100:	d9001b17 	ldw	r4,108(sp)
 4006104:	d8801c17 	ldw	r2,112(sp)
 4006108:	d811883a 	mov	r8,sp
 400610c:	21800044 	addi	r6,r4,1
 4006110:	003dbf06 	br	4005810 <__alt_data_end+0xfc005810>
 4006114:	1000d81e 	bne	r2,zero,4006478 <___vfiprintf_internal_r+0x11ec>
 4006118:	d9001d87 	ldb	r4,118(sp)
 400611c:	20000a26 	beq	r4,zero,4006148 <___vfiprintf_internal_r+0xebc>
 4006120:	00800044 	movi	r2,1
 4006124:	d9001d84 	addi	r4,sp,118
 4006128:	100b883a 	mov	r5,r2
 400612c:	d9000015 	stw	r4,0(sp)
 4006130:	d8800115 	stw	r2,4(sp)
 4006134:	d811883a 	mov	r8,sp
 4006138:	2809883a 	mov	r4,r5
 400613c:	42000204 	addi	r8,r8,8
 4006140:	29400044 	addi	r5,r5,1
 4006144:	003d9506 	br	400579c <__alt_data_end+0xfc00579c>
 4006148:	3800fd26 	beq	r7,zero,4006540 <___vfiprintf_internal_r+0x12b4>
 400614c:	00800084 	movi	r2,2
 4006150:	d9001d04 	addi	r4,sp,116
 4006154:	d9000015 	stw	r4,0(sp)
 4006158:	d8800115 	stw	r2,4(sp)
 400615c:	01400044 	movi	r5,1
 4006160:	d811883a 	mov	r8,sp
 4006164:	2809883a 	mov	r4,r5
 4006168:	42000204 	addi	r8,r8,8
 400616c:	29400044 	addi	r5,r5,1
 4006170:	003f4606 	br	4005e8c <__alt_data_end+0xfc005e8c>
 4006174:	d8802517 	ldw	r2,148(sp)
 4006178:	14c0010e 	bge	r2,r19,4006180 <___vfiprintf_internal_r+0xef4>
 400617c:	9805883a 	mov	r2,r19
 4006180:	d9402417 	ldw	r5,144(sp)
 4006184:	288b883a 	add	r5,r5,r2
 4006188:	d9402415 	stw	r5,144(sp)
 400618c:	003dd006 	br	40058d0 <__alt_data_end+0xfc0058d0>
 4006190:	d8001d85 	stb	zero,118(sp)
 4006194:	80005d16 	blt	r16,zero,400630c <___vfiprintf_internal_r+0x1080>
 4006198:	00ffdfc4 	movi	r3,-129
 400619c:	9d04b03a 	or	r2,r19,r20
 40061a0:	88e2703a 	and	r17,r17,r3
 40061a4:	103d3726 	beq	r2,zero,4005684 <__alt_data_end+0xfc005684>
 40061a8:	002b883a 	mov	r21,zero
 40061ac:	d9002617 	ldw	r4,152(sp)
 40061b0:	ddc01a04 	addi	r23,sp,104
 40061b4:	988003cc 	andi	r2,r19,15
 40061b8:	a006973a 	slli	r3,r20,28
 40061bc:	2085883a 	add	r2,r4,r2
 40061c0:	9826d13a 	srli	r19,r19,4
 40061c4:	10800003 	ldbu	r2,0(r2)
 40061c8:	a028d13a 	srli	r20,r20,4
 40061cc:	bdffffc4 	addi	r23,r23,-1
 40061d0:	1ce6b03a 	or	r19,r3,r19
 40061d4:	b8800005 	stb	r2,0(r23)
 40061d8:	9d04b03a 	or	r2,r19,r20
 40061dc:	103ff51e 	bne	r2,zero,40061b4 <__alt_data_end+0xfc0061b4>
 40061e0:	d8801e17 	ldw	r2,120(sp)
 40061e4:	15e9c83a 	sub	r20,r2,r23
 40061e8:	003d2b06 	br	4005698 <__alt_data_end+0xfc005698>
 40061ec:	d9402017 	ldw	r5,128(sp)
 40061f0:	d9002117 	ldw	r4,132(sp)
 40061f4:	d9801a04 	addi	r6,sp,104
 40061f8:	40051780 	call	4005178 <__sprint_r.part.0>
 40061fc:	103f5b1e 	bne	r2,zero,4005f6c <__alt_data_end+0xfc005f6c>
 4006200:	d8801c17 	ldw	r2,112(sp)
 4006204:	d811883a 	mov	r8,sp
 4006208:	003f6706 	br	4005fa8 <__alt_data_end+0xfc005fa8>
 400620c:	d9402017 	ldw	r5,128(sp)
 4006210:	d9002117 	ldw	r4,132(sp)
 4006214:	d9801a04 	addi	r6,sp,104
 4006218:	40051780 	call	4005178 <__sprint_r.part.0>
 400621c:	103f531e 	bne	r2,zero,4005f6c <__alt_data_end+0xfc005f6c>
 4006220:	d811883a 	mov	r8,sp
 4006224:	003cd906 	br	400558c <__alt_data_end+0xfc00558c>
 4006228:	10803fcc 	andi	r2,r2,255
 400622c:	1080201c 	xori	r2,r2,128
 4006230:	10bfe004 	addi	r2,r2,-128
 4006234:	00c00c04 	movi	r3,48
 4006238:	10ffe926 	beq	r2,r3,40061e0 <__alt_data_end+0xfc0061e0>
 400623c:	b8ffffc5 	stb	r3,-1(r23)
 4006240:	d8c01e17 	ldw	r3,120(sp)
 4006244:	b8bfffc4 	addi	r2,r23,-1
 4006248:	102f883a 	mov	r23,r2
 400624c:	18a9c83a 	sub	r20,r3,r2
 4006250:	003d1106 	br	4005698 <__alt_data_end+0xfc005698>
 4006254:	d9402017 	ldw	r5,128(sp)
 4006258:	d9002117 	ldw	r4,132(sp)
 400625c:	d9801a04 	addi	r6,sp,104
 4006260:	d8c02a15 	stw	r3,168(sp)
 4006264:	d9c02b15 	stw	r7,172(sp)
 4006268:	40051780 	call	4005178 <__sprint_r.part.0>
 400626c:	d8c02a17 	ldw	r3,168(sp)
 4006270:	d9c02b17 	ldw	r7,172(sp)
 4006274:	103f3d1e 	bne	r2,zero,4005f6c <__alt_data_end+0xfc005f6c>
 4006278:	d9001b17 	ldw	r4,108(sp)
 400627c:	d8801c17 	ldw	r2,112(sp)
 4006280:	d811883a 	mov	r8,sp
 4006284:	21400044 	addi	r5,r4,1
 4006288:	003d4406 	br	400579c <__alt_data_end+0xfc00579c>
 400628c:	d9402017 	ldw	r5,128(sp)
 4006290:	d9002117 	ldw	r4,132(sp)
 4006294:	d9801a04 	addi	r6,sp,104
 4006298:	d8c02a15 	stw	r3,168(sp)
 400629c:	40051780 	call	4005178 <__sprint_r.part.0>
 40062a0:	d8c02a17 	ldw	r3,168(sp)
 40062a4:	103f311e 	bne	r2,zero,4005f6c <__alt_data_end+0xfc005f6c>
 40062a8:	d9001b17 	ldw	r4,108(sp)
 40062ac:	d8801c17 	ldw	r2,112(sp)
 40062b0:	d811883a 	mov	r8,sp
 40062b4:	21400044 	addi	r5,r4,1
 40062b8:	003ef406 	br	4005e8c <__alt_data_end+0xfc005e8c>
 40062bc:	1000bd1e 	bne	r2,zero,40065b4 <___vfiprintf_internal_r+0x1328>
 40062c0:	01400044 	movi	r5,1
 40062c4:	0009883a 	mov	r4,zero
 40062c8:	d811883a 	mov	r8,sp
 40062cc:	003ef106 	br	4005e94 <__alt_data_end+0xfc005e94>
 40062d0:	d9402017 	ldw	r5,128(sp)
 40062d4:	d9002117 	ldw	r4,132(sp)
 40062d8:	d9801a04 	addi	r6,sp,104
 40062dc:	40051780 	call	4005178 <__sprint_r.part.0>
 40062e0:	103f221e 	bne	r2,zero,4005f6c <__alt_data_end+0xfc005f6c>
 40062e4:	d9401b17 	ldw	r5,108(sp)
 40062e8:	d8801c17 	ldw	r2,112(sp)
 40062ec:	d811883a 	mov	r8,sp
 40062f0:	29400044 	addi	r5,r5,1
 40062f4:	003d6206 	br	4005880 <__alt_data_end+0xfc005880>
 40062f8:	01410074 	movhi	r5,1025
 40062fc:	29758704 	addi	r5,r5,-10724
 4006300:	d9402615 	stw	r5,152(sp)
 4006304:	d8c02215 	stw	r3,136(sp)
 4006308:	1023883a 	mov	r17,r2
 400630c:	9d04b03a 	or	r2,r19,r20
 4006310:	103fa51e 	bne	r2,zero,40061a8 <__alt_data_end+0xfc0061a8>
 4006314:	002b883a 	mov	r21,zero
 4006318:	00800084 	movi	r2,2
 400631c:	003e4a06 	br	4005c48 <__alt_data_end+0xfc005c48>
 4006320:	01410074 	movhi	r5,1025
 4006324:	29758704 	addi	r5,r5,-10724
 4006328:	002b883a 	mov	r21,zero
 400632c:	d9402615 	stw	r5,152(sp)
 4006330:	003f9e06 	br	40061ac <__alt_data_end+0xfc0061ac>
 4006334:	d9402217 	ldw	r5,136(sp)
 4006338:	d8001d85 	stb	zero,118(sp)
 400633c:	0029883a 	mov	r20,zero
 4006340:	28800104 	addi	r2,r5,4
 4006344:	2cc00017 	ldw	r19,0(r5)
 4006348:	803e3a16 	blt	r16,zero,4005c34 <__alt_data_end+0xfc005c34>
 400634c:	00ffdfc4 	movi	r3,-129
 4006350:	d8802215 	stw	r2,136(sp)
 4006354:	88e2703a 	and	r17,r17,r3
 4006358:	002b883a 	mov	r21,zero
 400635c:	983e9b26 	beq	r19,zero,4005dcc <__alt_data_end+0xfc005dcc>
 4006360:	00800244 	movi	r2,9
 4006364:	14fdc936 	bltu	r2,r19,4005a8c <__alt_data_end+0xfc005a8c>
 4006368:	003e9a06 	br	4005dd4 <__alt_data_end+0xfc005dd4>
 400636c:	00800c04 	movi	r2,48
 4006370:	d8c01d45 	stb	r3,117(sp)
 4006374:	d8801d05 	stb	r2,116(sp)
 4006378:	d8001d85 	stb	zero,118(sp)
 400637c:	88c00094 	ori	r3,r17,2
 4006380:	80009c16 	blt	r16,zero,40065f4 <___vfiprintf_internal_r+0x1368>
 4006384:	00bfdfc4 	movi	r2,-129
 4006388:	88a2703a 	and	r17,r17,r2
 400638c:	8c400094 	ori	r17,r17,2
 4006390:	002b883a 	mov	r21,zero
 4006394:	003f8506 	br	40061ac <__alt_data_end+0xfc0061ac>
 4006398:	b029883a 	mov	r20,r22
 400639c:	003c0b06 	br	40053cc <__alt_data_end+0xfc0053cc>
 40063a0:	04e7c83a 	sub	r19,zero,r19
 40063a4:	05400b44 	movi	r21,45
 40063a8:	9804c03a 	cmpne	r2,r19,zero
 40063ac:	0529c83a 	sub	r20,zero,r20
 40063b0:	dd401d85 	stb	r21,118(sp)
 40063b4:	a0a9c83a 	sub	r20,r20,r2
 40063b8:	80009716 	blt	r16,zero,4006618 <___vfiprintf_internal_r+0x138c>
 40063bc:	00bfdfc4 	movi	r2,-129
 40063c0:	88a2703a 	and	r17,r17,r2
 40063c4:	003db006 	br	4005a88 <__alt_data_end+0xfc005a88>
 40063c8:	b0c00007 	ldb	r3,0(r22)
 40063cc:	003c0c06 	br	4005400 <__alt_data_end+0xfc005400>
 40063d0:	8880100c 	andi	r2,r17,64
 40063d4:	d8001d85 	stb	zero,118(sp)
 40063d8:	1000461e 	bne	r2,zero,40064f4 <___vfiprintf_internal_r+0x1268>
 40063dc:	d9002217 	ldw	r4,136(sp)
 40063e0:	0029883a 	mov	r20,zero
 40063e4:	20800104 	addi	r2,r4,4
 40063e8:	24c00017 	ldw	r19,0(r4)
 40063ec:	803df80e 	bge	r16,zero,4005bd0 <__alt_data_end+0xfc005bd0>
 40063f0:	9d06b03a 	or	r3,r19,r20
 40063f4:	d8802215 	stw	r2,136(sp)
 40063f8:	183d5e1e 	bne	r3,zero,4005974 <__alt_data_end+0xfc005974>
 40063fc:	002b883a 	mov	r21,zero
 4006400:	0005883a 	mov	r2,zero
 4006404:	003e1006 	br	4005c48 <__alt_data_end+0xfc005c48>
 4006408:	8880040c 	andi	r2,r17,16
 400640c:	1000321e 	bne	r2,zero,40064d8 <___vfiprintf_internal_r+0x124c>
 4006410:	8c40100c 	andi	r17,r17,64
 4006414:	88008d26 	beq	r17,zero,400664c <___vfiprintf_internal_r+0x13c0>
 4006418:	d9402217 	ldw	r5,136(sp)
 400641c:	d8c02417 	ldw	r3,144(sp)
 4006420:	28800017 	ldw	r2,0(r5)
 4006424:	29400104 	addi	r5,r5,4
 4006428:	d9402215 	stw	r5,136(sp)
 400642c:	10c0000d 	sth	r3,0(r2)
 4006430:	003bca06 	br	400535c <__alt_data_end+0xfc00535c>
 4006434:	8880100c 	andi	r2,r17,64
 4006438:	10003a26 	beq	r2,zero,4006524 <___vfiprintf_internal_r+0x1298>
 400643c:	d8802217 	ldw	r2,136(sp)
 4006440:	14c0000f 	ldh	r19,0(r2)
 4006444:	10800104 	addi	r2,r2,4
 4006448:	d8802215 	stw	r2,136(sp)
 400644c:	9829d7fa 	srai	r20,r19,31
 4006450:	a005883a 	mov	r2,r20
 4006454:	003d8506 	br	4005a6c <__alt_data_end+0xfc005a6c>
 4006458:	8880100c 	andi	r2,r17,64
 400645c:	10002b26 	beq	r2,zero,400650c <___vfiprintf_internal_r+0x1280>
 4006460:	d8802217 	ldw	r2,136(sp)
 4006464:	0029883a 	mov	r20,zero
 4006468:	14c0000b 	ldhu	r19,0(r2)
 400646c:	10800104 	addi	r2,r2,4
 4006470:	d8802215 	stw	r2,136(sp)
 4006474:	003d5d06 	br	40059ec <__alt_data_end+0xfc0059ec>
 4006478:	d9402017 	ldw	r5,128(sp)
 400647c:	d9002117 	ldw	r4,132(sp)
 4006480:	d9801a04 	addi	r6,sp,104
 4006484:	d8c02a15 	stw	r3,168(sp)
 4006488:	d9c02b15 	stw	r7,172(sp)
 400648c:	40051780 	call	4005178 <__sprint_r.part.0>
 4006490:	d8c02a17 	ldw	r3,168(sp)
 4006494:	d9c02b17 	ldw	r7,172(sp)
 4006498:	103eb41e 	bne	r2,zero,4005f6c <__alt_data_end+0xfc005f6c>
 400649c:	d9001b17 	ldw	r4,108(sp)
 40064a0:	d8801c17 	ldw	r2,112(sp)
 40064a4:	d811883a 	mov	r8,sp
 40064a8:	21400044 	addi	r5,r4,1
 40064ac:	003e6706 	br	4005e4c <__alt_data_end+0xfc005e4c>
 40064b0:	00bfffc4 	movi	r2,-1
 40064b4:	003c4a06 	br	40055e0 <__alt_data_end+0xfc0055e0>
 40064b8:	9805883a 	mov	r2,r19
 40064bc:	003ee806 	br	4006060 <__alt_data_end+0xfc006060>
 40064c0:	d8c02217 	ldw	r3,136(sp)
 40064c4:	0029883a 	mov	r20,zero
 40064c8:	18800104 	addi	r2,r3,4
 40064cc:	1cc0000b 	ldhu	r19,0(r3)
 40064d0:	803f9e0e 	bge	r16,zero,400634c <__alt_data_end+0xfc00634c>
 40064d4:	003dd706 	br	4005c34 <__alt_data_end+0xfc005c34>
 40064d8:	d8c02217 	ldw	r3,136(sp)
 40064dc:	d9002417 	ldw	r4,144(sp)
 40064e0:	18800017 	ldw	r2,0(r3)
 40064e4:	18c00104 	addi	r3,r3,4
 40064e8:	d8c02215 	stw	r3,136(sp)
 40064ec:	11000015 	stw	r4,0(r2)
 40064f0:	003b9a06 	br	400535c <__alt_data_end+0xfc00535c>
 40064f4:	d8c02217 	ldw	r3,136(sp)
 40064f8:	0029883a 	mov	r20,zero
 40064fc:	18800104 	addi	r2,r3,4
 4006500:	1cc0000b 	ldhu	r19,0(r3)
 4006504:	803db20e 	bge	r16,zero,4005bd0 <__alt_data_end+0xfc005bd0>
 4006508:	003fb906 	br	40063f0 <__alt_data_end+0xfc0063f0>
 400650c:	d9002217 	ldw	r4,136(sp)
 4006510:	0029883a 	mov	r20,zero
 4006514:	24c00017 	ldw	r19,0(r4)
 4006518:	21000104 	addi	r4,r4,4
 400651c:	d9002215 	stw	r4,136(sp)
 4006520:	003d3206 	br	40059ec <__alt_data_end+0xfc0059ec>
 4006524:	d8c02217 	ldw	r3,136(sp)
 4006528:	1cc00017 	ldw	r19,0(r3)
 400652c:	18c00104 	addi	r3,r3,4
 4006530:	d8c02215 	stw	r3,136(sp)
 4006534:	9829d7fa 	srai	r20,r19,31
 4006538:	a005883a 	mov	r2,r20
 400653c:	003d4b06 	br	4005a6c <__alt_data_end+0xfc005a6c>
 4006540:	0009883a 	mov	r4,zero
 4006544:	01400044 	movi	r5,1
 4006548:	d811883a 	mov	r8,sp
 400654c:	003e4f06 	br	4005e8c <__alt_data_end+0xfc005e8c>
 4006550:	d8c02215 	stw	r3,136(sp)
 4006554:	002b883a 	mov	r21,zero
 4006558:	003db806 	br	4005c3c <__alt_data_end+0xfc005c3c>
 400655c:	d811883a 	mov	r8,sp
 4006560:	003e9606 	br	4005fbc <__alt_data_end+0xfc005fbc>
 4006564:	01010074 	movhi	r4,1025
 4006568:	21358dc4 	addi	r4,r4,-10697
 400656c:	d9002315 	stw	r4,140(sp)
 4006570:	003e6306 	br	4005f00 <__alt_data_end+0xfc005f00>
 4006574:	b0c00043 	ldbu	r3,1(r22)
 4006578:	8c400814 	ori	r17,r17,32
 400657c:	b5800044 	addi	r22,r22,1
 4006580:	18c03fcc 	andi	r3,r3,255
 4006584:	18c0201c 	xori	r3,r3,128
 4006588:	18ffe004 	addi	r3,r3,-128
 400658c:	003b9c06 	br	4005400 <__alt_data_end+0xfc005400>
 4006590:	b809883a 	mov	r4,r23
 4006594:	da002a15 	stw	r8,168(sp)
 4006598:	400915c0 	call	400915c <strlen>
 400659c:	1029883a 	mov	r20,r2
 40065a0:	dd401d83 	ldbu	r21,118(sp)
 40065a4:	df002215 	stw	fp,136(sp)
 40065a8:	0021883a 	mov	r16,zero
 40065ac:	da002a17 	ldw	r8,168(sp)
 40065b0:	003c3906 	br	4005698 <__alt_data_end+0xfc005698>
 40065b4:	d9402017 	ldw	r5,128(sp)
 40065b8:	d9002117 	ldw	r4,132(sp)
 40065bc:	d9801a04 	addi	r6,sp,104
 40065c0:	40051780 	call	4005178 <__sprint_r.part.0>
 40065c4:	103e691e 	bne	r2,zero,4005f6c <__alt_data_end+0xfc005f6c>
 40065c8:	d9001b17 	ldw	r4,108(sp)
 40065cc:	d8801c17 	ldw	r2,112(sp)
 40065d0:	d811883a 	mov	r8,sp
 40065d4:	21400044 	addi	r5,r4,1
 40065d8:	003e2e06 	br	4005e94 <__alt_data_end+0xfc005e94>
 40065dc:	01010074 	movhi	r4,1025
 40065e0:	213591c4 	addi	r4,r4,-10681
 40065e4:	d9002315 	stw	r4,140(sp)
 40065e8:	d9001b17 	ldw	r4,108(sp)
 40065ec:	21000044 	addi	r4,r4,1
 40065f0:	003c5e06 	br	400576c <__alt_data_end+0xfc00576c>
 40065f4:	002b883a 	mov	r21,zero
 40065f8:	00800084 	movi	r2,2
 40065fc:	10803fcc 	andi	r2,r2,255
 4006600:	01000044 	movi	r4,1
 4006604:	11002b26 	beq	r2,r4,40066b4 <___vfiprintf_internal_r+0x1428>
 4006608:	01000084 	movi	r4,2
 400660c:	11002b1e 	bne	r2,r4,40066bc <___vfiprintf_internal_r+0x1430>
 4006610:	1823883a 	mov	r17,r3
 4006614:	003ee506 	br	40061ac <__alt_data_end+0xfc0061ac>
 4006618:	8807883a 	mov	r3,r17
 400661c:	00800044 	movi	r2,1
 4006620:	003ff606 	br	40065fc <__alt_data_end+0xfc0065fc>
 4006624:	00800184 	movi	r2,6
 4006628:	1400012e 	bgeu	r2,r16,4006630 <___vfiprintf_internal_r+0x13a4>
 400662c:	1021883a 	mov	r16,r2
 4006630:	8029883a 	mov	r20,r16
 4006634:	8027883a 	mov	r19,r16
 4006638:	80002216 	blt	r16,zero,40066c4 <___vfiprintf_internal_r+0x1438>
 400663c:	05c10074 	movhi	r23,1025
 4006640:	df002215 	stw	fp,136(sp)
 4006644:	bdf58c04 	addi	r23,r23,-10704
 4006648:	003cfb06 	br	4005a38 <__alt_data_end+0xfc005a38>
 400664c:	d9002217 	ldw	r4,136(sp)
 4006650:	d9402417 	ldw	r5,144(sp)
 4006654:	20800017 	ldw	r2,0(r4)
 4006658:	21000104 	addi	r4,r4,4
 400665c:	d9002215 	stw	r4,136(sp)
 4006660:	11400015 	stw	r5,0(r2)
 4006664:	003b3d06 	br	400535c <__alt_data_end+0xfc00535c>
 4006668:	01410074 	movhi	r5,1025
 400666c:	297591c4 	addi	r5,r5,-10681
 4006670:	d9402315 	stw	r5,140(sp)
 4006674:	d9401b17 	ldw	r5,108(sp)
 4006678:	29400044 	addi	r5,r5,1
 400667c:	003e6d06 	br	4006034 <__alt_data_end+0xfc006034>
 4006680:	8029883a 	mov	r20,r16
 4006684:	dd401d83 	ldbu	r21,118(sp)
 4006688:	df002215 	stw	fp,136(sp)
 400668c:	0021883a 	mov	r16,zero
 4006690:	003c0106 	br	4005698 <__alt_data_end+0xfc005698>
 4006694:	00c10074 	movhi	r3,1025
 4006698:	18f58dc4 	addi	r3,r3,-10697
 400669c:	d8c02315 	stw	r3,140(sp)
 40066a0:	280d883a 	mov	r6,r5
 40066a4:	003c6906 	br	400584c <__alt_data_end+0xfc00584c>
 40066a8:	802d883a 	mov	r22,r16
 40066ac:	0021883a 	mov	r16,zero
 40066b0:	003b5406 	br	4005404 <__alt_data_end+0xfc005404>
 40066b4:	1823883a 	mov	r17,r3
 40066b8:	003cf306 	br	4005a88 <__alt_data_end+0xfc005a88>
 40066bc:	1823883a 	mov	r17,r3
 40066c0:	003cad06 	br	4005978 <__alt_data_end+0xfc005978>
 40066c4:	0027883a 	mov	r19,zero
 40066c8:	003fdc06 	br	400663c <__alt_data_end+0xfc00663c>
 40066cc:	d9402217 	ldw	r5,136(sp)
 40066d0:	8005883a 	mov	r2,r16
 40066d4:	b0c00043 	ldbu	r3,1(r22)
 40066d8:	2c000017 	ldw	r16,0(r5)
 40066dc:	29000104 	addi	r4,r5,4
 40066e0:	d9002215 	stw	r4,136(sp)
 40066e4:	102d883a 	mov	r22,r2
 40066e8:	803fa50e 	bge	r16,zero,4006580 <__alt_data_end+0xfc006580>
 40066ec:	18c03fcc 	andi	r3,r3,255
 40066f0:	18c0201c 	xori	r3,r3,128
 40066f4:	043fffc4 	movi	r16,-1
 40066f8:	18ffe004 	addi	r3,r3,-128
 40066fc:	003b4006 	br	4005400 <__alt_data_end+0xfc005400>
 4006700:	d9402303 	ldbu	r5,140(sp)
 4006704:	d9401d85 	stb	r5,118(sp)
 4006708:	003cae06 	br	40059c4 <__alt_data_end+0xfc0059c4>
 400670c:	d8c02303 	ldbu	r3,140(sp)
 4006710:	d8c01d85 	stb	r3,118(sp)
 4006714:	003d1406 	br	4005b68 <__alt_data_end+0xfc005b68>
 4006718:	d8c02303 	ldbu	r3,140(sp)
 400671c:	d8c01d85 	stb	r3,118(sp)
 4006720:	003cca06 	br	4005a4c <__alt_data_end+0xfc005a4c>
 4006724:	8880004c 	andi	r2,r17,1
 4006728:	002b883a 	mov	r21,zero
 400672c:	10000526 	beq	r2,zero,4006744 <___vfiprintf_internal_r+0x14b8>
 4006730:	00800c04 	movi	r2,48
 4006734:	d88019c5 	stb	r2,103(sp)
 4006738:	dd002817 	ldw	r20,160(sp)
 400673c:	ddc019c4 	addi	r23,sp,103
 4006740:	003bd506 	br	4005698 <__alt_data_end+0xfc005698>
 4006744:	0029883a 	mov	r20,zero
 4006748:	ddc01a04 	addi	r23,sp,104
 400674c:	003bd206 	br	4005698 <__alt_data_end+0xfc005698>
 4006750:	d9002303 	ldbu	r4,140(sp)
 4006754:	d9001d85 	stb	r4,118(sp)
 4006758:	003da606 	br	4005df4 <__alt_data_end+0xfc005df4>
 400675c:	d8c02303 	ldbu	r3,140(sp)
 4006760:	d8c01d85 	stb	r3,118(sp)
 4006764:	003c7606 	br	4005940 <__alt_data_end+0xfc005940>
 4006768:	d8c02303 	ldbu	r3,140(sp)
 400676c:	d8c01d85 	stb	r3,118(sp)
 4006770:	003c6506 	br	4005908 <__alt_data_end+0xfc005908>
 4006774:	d9002303 	ldbu	r4,140(sp)
 4006778:	d9001d85 	stb	r4,118(sp)
 400677c:	003d3d06 	br	4005c74 <__alt_data_end+0xfc005c74>
 4006780:	d8c02303 	ldbu	r3,140(sp)
 4006784:	d8c01d85 	stb	r3,118(sp)
 4006788:	003d1d06 	br	4005c00 <__alt_data_end+0xfc005c00>
 400678c:	d8c02303 	ldbu	r3,140(sp)
 4006790:	d8c01d85 	stb	r3,118(sp)
 4006794:	003d0306 	br	4005ba4 <__alt_data_end+0xfc005ba4>

04006798 <__vfiprintf_internal>:
 4006798:	00810074 	movhi	r2,1025
 400679c:	10bc7204 	addi	r2,r2,-3640
 40067a0:	300f883a 	mov	r7,r6
 40067a4:	280d883a 	mov	r6,r5
 40067a8:	200b883a 	mov	r5,r4
 40067ac:	11000017 	ldw	r4,0(r2)
 40067b0:	400528c1 	jmpi	400528c <___vfiprintf_internal_r>

040067b4 <__sbprintf>:
 40067b4:	2880030b 	ldhu	r2,12(r5)
 40067b8:	2ac01917 	ldw	r11,100(r5)
 40067bc:	2a80038b 	ldhu	r10,14(r5)
 40067c0:	2a400717 	ldw	r9,28(r5)
 40067c4:	2a000917 	ldw	r8,36(r5)
 40067c8:	defee204 	addi	sp,sp,-1144
 40067cc:	00c10004 	movi	r3,1024
 40067d0:	dc011a15 	stw	r16,1128(sp)
 40067d4:	10bfff4c 	andi	r2,r2,65533
 40067d8:	2821883a 	mov	r16,r5
 40067dc:	d8cb883a 	add	r5,sp,r3
 40067e0:	dc811c15 	stw	r18,1136(sp)
 40067e4:	dc411b15 	stw	r17,1132(sp)
 40067e8:	dfc11d15 	stw	ra,1140(sp)
 40067ec:	2025883a 	mov	r18,r4
 40067f0:	d881030d 	sth	r2,1036(sp)
 40067f4:	dac11915 	stw	r11,1124(sp)
 40067f8:	da81038d 	sth	r10,1038(sp)
 40067fc:	da410715 	stw	r9,1052(sp)
 4006800:	da010915 	stw	r8,1060(sp)
 4006804:	dec10015 	stw	sp,1024(sp)
 4006808:	dec10415 	stw	sp,1040(sp)
 400680c:	d8c10215 	stw	r3,1032(sp)
 4006810:	d8c10515 	stw	r3,1044(sp)
 4006814:	d8010615 	stw	zero,1048(sp)
 4006818:	400528c0 	call	400528c <___vfiprintf_internal_r>
 400681c:	1023883a 	mov	r17,r2
 4006820:	10000416 	blt	r2,zero,4006834 <__sbprintf+0x80>
 4006824:	d9410004 	addi	r5,sp,1024
 4006828:	9009883a 	mov	r4,r18
 400682c:	4006be00 	call	4006be0 <_fflush_r>
 4006830:	10000d1e 	bne	r2,zero,4006868 <__sbprintf+0xb4>
 4006834:	d881030b 	ldhu	r2,1036(sp)
 4006838:	1080100c 	andi	r2,r2,64
 400683c:	10000326 	beq	r2,zero,400684c <__sbprintf+0x98>
 4006840:	8080030b 	ldhu	r2,12(r16)
 4006844:	10801014 	ori	r2,r2,64
 4006848:	8080030d 	sth	r2,12(r16)
 400684c:	8805883a 	mov	r2,r17
 4006850:	dfc11d17 	ldw	ra,1140(sp)
 4006854:	dc811c17 	ldw	r18,1136(sp)
 4006858:	dc411b17 	ldw	r17,1132(sp)
 400685c:	dc011a17 	ldw	r16,1128(sp)
 4006860:	dec11e04 	addi	sp,sp,1144
 4006864:	f800283a 	ret
 4006868:	047fffc4 	movi	r17,-1
 400686c:	003ff106 	br	4006834 <__alt_data_end+0xfc006834>

04006870 <__swsetup_r>:
 4006870:	00810074 	movhi	r2,1025
 4006874:	defffd04 	addi	sp,sp,-12
 4006878:	10bc7204 	addi	r2,r2,-3640
 400687c:	dc400115 	stw	r17,4(sp)
 4006880:	2023883a 	mov	r17,r4
 4006884:	11000017 	ldw	r4,0(r2)
 4006888:	dc000015 	stw	r16,0(sp)
 400688c:	dfc00215 	stw	ra,8(sp)
 4006890:	2821883a 	mov	r16,r5
 4006894:	20000226 	beq	r4,zero,40068a0 <__swsetup_r+0x30>
 4006898:	20800e17 	ldw	r2,56(r4)
 400689c:	10003126 	beq	r2,zero,4006964 <__swsetup_r+0xf4>
 40068a0:	8080030b 	ldhu	r2,12(r16)
 40068a4:	10c0020c 	andi	r3,r2,8
 40068a8:	1009883a 	mov	r4,r2
 40068ac:	18000f26 	beq	r3,zero,40068ec <__swsetup_r+0x7c>
 40068b0:	80c00417 	ldw	r3,16(r16)
 40068b4:	18001526 	beq	r3,zero,400690c <__swsetup_r+0x9c>
 40068b8:	1100004c 	andi	r4,r2,1
 40068bc:	20001c1e 	bne	r4,zero,4006930 <__swsetup_r+0xc0>
 40068c0:	1080008c 	andi	r2,r2,2
 40068c4:	1000291e 	bne	r2,zero,400696c <__swsetup_r+0xfc>
 40068c8:	80800517 	ldw	r2,20(r16)
 40068cc:	80800215 	stw	r2,8(r16)
 40068d0:	18001c26 	beq	r3,zero,4006944 <__swsetup_r+0xd4>
 40068d4:	0005883a 	mov	r2,zero
 40068d8:	dfc00217 	ldw	ra,8(sp)
 40068dc:	dc400117 	ldw	r17,4(sp)
 40068e0:	dc000017 	ldw	r16,0(sp)
 40068e4:	dec00304 	addi	sp,sp,12
 40068e8:	f800283a 	ret
 40068ec:	2080040c 	andi	r2,r4,16
 40068f0:	10002e26 	beq	r2,zero,40069ac <__swsetup_r+0x13c>
 40068f4:	2080010c 	andi	r2,r4,4
 40068f8:	10001e1e 	bne	r2,zero,4006974 <__swsetup_r+0x104>
 40068fc:	80c00417 	ldw	r3,16(r16)
 4006900:	20800214 	ori	r2,r4,8
 4006904:	8080030d 	sth	r2,12(r16)
 4006908:	183feb1e 	bne	r3,zero,40068b8 <__alt_data_end+0xfc0068b8>
 400690c:	1100a00c 	andi	r4,r2,640
 4006910:	01408004 	movi	r5,512
 4006914:	217fe826 	beq	r4,r5,40068b8 <__alt_data_end+0xfc0068b8>
 4006918:	800b883a 	mov	r5,r16
 400691c:	8809883a 	mov	r4,r17
 4006920:	4007d840 	call	4007d84 <__smakebuf_r>
 4006924:	8080030b 	ldhu	r2,12(r16)
 4006928:	80c00417 	ldw	r3,16(r16)
 400692c:	003fe206 	br	40068b8 <__alt_data_end+0xfc0068b8>
 4006930:	80800517 	ldw	r2,20(r16)
 4006934:	80000215 	stw	zero,8(r16)
 4006938:	0085c83a 	sub	r2,zero,r2
 400693c:	80800615 	stw	r2,24(r16)
 4006940:	183fe41e 	bne	r3,zero,40068d4 <__alt_data_end+0xfc0068d4>
 4006944:	80c0030b 	ldhu	r3,12(r16)
 4006948:	0005883a 	mov	r2,zero
 400694c:	1900200c 	andi	r4,r3,128
 4006950:	203fe126 	beq	r4,zero,40068d8 <__alt_data_end+0xfc0068d8>
 4006954:	18c01014 	ori	r3,r3,64
 4006958:	80c0030d 	sth	r3,12(r16)
 400695c:	00bfffc4 	movi	r2,-1
 4006960:	003fdd06 	br	40068d8 <__alt_data_end+0xfc0068d8>
 4006964:	4006fcc0 	call	4006fcc <__sinit>
 4006968:	003fcd06 	br	40068a0 <__alt_data_end+0xfc0068a0>
 400696c:	0005883a 	mov	r2,zero
 4006970:	003fd606 	br	40068cc <__alt_data_end+0xfc0068cc>
 4006974:	81400c17 	ldw	r5,48(r16)
 4006978:	28000626 	beq	r5,zero,4006994 <__swsetup_r+0x124>
 400697c:	80801004 	addi	r2,r16,64
 4006980:	28800326 	beq	r5,r2,4006990 <__swsetup_r+0x120>
 4006984:	8809883a 	mov	r4,r17
 4006988:	40073480 	call	4007348 <_free_r>
 400698c:	8100030b 	ldhu	r4,12(r16)
 4006990:	80000c15 	stw	zero,48(r16)
 4006994:	80c00417 	ldw	r3,16(r16)
 4006998:	00bff6c4 	movi	r2,-37
 400699c:	1108703a 	and	r4,r2,r4
 40069a0:	80000115 	stw	zero,4(r16)
 40069a4:	80c00015 	stw	r3,0(r16)
 40069a8:	003fd506 	br	4006900 <__alt_data_end+0xfc006900>
 40069ac:	00800244 	movi	r2,9
 40069b0:	88800015 	stw	r2,0(r17)
 40069b4:	20801014 	ori	r2,r4,64
 40069b8:	8080030d 	sth	r2,12(r16)
 40069bc:	00bfffc4 	movi	r2,-1
 40069c0:	003fc506 	br	40068d8 <__alt_data_end+0xfc0068d8>

040069c4 <__sflush_r>:
 40069c4:	2880030b 	ldhu	r2,12(r5)
 40069c8:	defffb04 	addi	sp,sp,-20
 40069cc:	dcc00315 	stw	r19,12(sp)
 40069d0:	dc400115 	stw	r17,4(sp)
 40069d4:	dfc00415 	stw	ra,16(sp)
 40069d8:	dc800215 	stw	r18,8(sp)
 40069dc:	dc000015 	stw	r16,0(sp)
 40069e0:	10c0020c 	andi	r3,r2,8
 40069e4:	2823883a 	mov	r17,r5
 40069e8:	2027883a 	mov	r19,r4
 40069ec:	1800311e 	bne	r3,zero,4006ab4 <__sflush_r+0xf0>
 40069f0:	28c00117 	ldw	r3,4(r5)
 40069f4:	10820014 	ori	r2,r2,2048
 40069f8:	2880030d 	sth	r2,12(r5)
 40069fc:	00c04b0e 	bge	zero,r3,4006b2c <__sflush_r+0x168>
 4006a00:	8a000a17 	ldw	r8,40(r17)
 4006a04:	40002326 	beq	r8,zero,4006a94 <__sflush_r+0xd0>
 4006a08:	9c000017 	ldw	r16,0(r19)
 4006a0c:	10c4000c 	andi	r3,r2,4096
 4006a10:	98000015 	stw	zero,0(r19)
 4006a14:	18004826 	beq	r3,zero,4006b38 <__sflush_r+0x174>
 4006a18:	89801417 	ldw	r6,80(r17)
 4006a1c:	10c0010c 	andi	r3,r2,4
 4006a20:	18000626 	beq	r3,zero,4006a3c <__sflush_r+0x78>
 4006a24:	88c00117 	ldw	r3,4(r17)
 4006a28:	88800c17 	ldw	r2,48(r17)
 4006a2c:	30cdc83a 	sub	r6,r6,r3
 4006a30:	10000226 	beq	r2,zero,4006a3c <__sflush_r+0x78>
 4006a34:	88800f17 	ldw	r2,60(r17)
 4006a38:	308dc83a 	sub	r6,r6,r2
 4006a3c:	89400717 	ldw	r5,28(r17)
 4006a40:	000f883a 	mov	r7,zero
 4006a44:	9809883a 	mov	r4,r19
 4006a48:	403ee83a 	callr	r8
 4006a4c:	00ffffc4 	movi	r3,-1
 4006a50:	10c04426 	beq	r2,r3,4006b64 <__sflush_r+0x1a0>
 4006a54:	88c0030b 	ldhu	r3,12(r17)
 4006a58:	89000417 	ldw	r4,16(r17)
 4006a5c:	88000115 	stw	zero,4(r17)
 4006a60:	197dffcc 	andi	r5,r3,63487
 4006a64:	8940030d 	sth	r5,12(r17)
 4006a68:	89000015 	stw	r4,0(r17)
 4006a6c:	18c4000c 	andi	r3,r3,4096
 4006a70:	18002c1e 	bne	r3,zero,4006b24 <__sflush_r+0x160>
 4006a74:	89400c17 	ldw	r5,48(r17)
 4006a78:	9c000015 	stw	r16,0(r19)
 4006a7c:	28000526 	beq	r5,zero,4006a94 <__sflush_r+0xd0>
 4006a80:	88801004 	addi	r2,r17,64
 4006a84:	28800226 	beq	r5,r2,4006a90 <__sflush_r+0xcc>
 4006a88:	9809883a 	mov	r4,r19
 4006a8c:	40073480 	call	4007348 <_free_r>
 4006a90:	88000c15 	stw	zero,48(r17)
 4006a94:	0005883a 	mov	r2,zero
 4006a98:	dfc00417 	ldw	ra,16(sp)
 4006a9c:	dcc00317 	ldw	r19,12(sp)
 4006aa0:	dc800217 	ldw	r18,8(sp)
 4006aa4:	dc400117 	ldw	r17,4(sp)
 4006aa8:	dc000017 	ldw	r16,0(sp)
 4006aac:	dec00504 	addi	sp,sp,20
 4006ab0:	f800283a 	ret
 4006ab4:	2c800417 	ldw	r18,16(r5)
 4006ab8:	903ff626 	beq	r18,zero,4006a94 <__alt_data_end+0xfc006a94>
 4006abc:	2c000017 	ldw	r16,0(r5)
 4006ac0:	108000cc 	andi	r2,r2,3
 4006ac4:	2c800015 	stw	r18,0(r5)
 4006ac8:	84a1c83a 	sub	r16,r16,r18
 4006acc:	1000131e 	bne	r2,zero,4006b1c <__sflush_r+0x158>
 4006ad0:	28800517 	ldw	r2,20(r5)
 4006ad4:	88800215 	stw	r2,8(r17)
 4006ad8:	04000316 	blt	zero,r16,4006ae8 <__sflush_r+0x124>
 4006adc:	003fed06 	br	4006a94 <__alt_data_end+0xfc006a94>
 4006ae0:	90a5883a 	add	r18,r18,r2
 4006ae4:	043feb0e 	bge	zero,r16,4006a94 <__alt_data_end+0xfc006a94>
 4006ae8:	88800917 	ldw	r2,36(r17)
 4006aec:	89400717 	ldw	r5,28(r17)
 4006af0:	800f883a 	mov	r7,r16
 4006af4:	900d883a 	mov	r6,r18
 4006af8:	9809883a 	mov	r4,r19
 4006afc:	103ee83a 	callr	r2
 4006b00:	80a1c83a 	sub	r16,r16,r2
 4006b04:	00bff616 	blt	zero,r2,4006ae0 <__alt_data_end+0xfc006ae0>
 4006b08:	88c0030b 	ldhu	r3,12(r17)
 4006b0c:	00bfffc4 	movi	r2,-1
 4006b10:	18c01014 	ori	r3,r3,64
 4006b14:	88c0030d 	sth	r3,12(r17)
 4006b18:	003fdf06 	br	4006a98 <__alt_data_end+0xfc006a98>
 4006b1c:	0005883a 	mov	r2,zero
 4006b20:	003fec06 	br	4006ad4 <__alt_data_end+0xfc006ad4>
 4006b24:	88801415 	stw	r2,80(r17)
 4006b28:	003fd206 	br	4006a74 <__alt_data_end+0xfc006a74>
 4006b2c:	28c00f17 	ldw	r3,60(r5)
 4006b30:	00ffb316 	blt	zero,r3,4006a00 <__alt_data_end+0xfc006a00>
 4006b34:	003fd706 	br	4006a94 <__alt_data_end+0xfc006a94>
 4006b38:	89400717 	ldw	r5,28(r17)
 4006b3c:	000d883a 	mov	r6,zero
 4006b40:	01c00044 	movi	r7,1
 4006b44:	9809883a 	mov	r4,r19
 4006b48:	403ee83a 	callr	r8
 4006b4c:	100d883a 	mov	r6,r2
 4006b50:	00bfffc4 	movi	r2,-1
 4006b54:	30801426 	beq	r6,r2,4006ba8 <__sflush_r+0x1e4>
 4006b58:	8880030b 	ldhu	r2,12(r17)
 4006b5c:	8a000a17 	ldw	r8,40(r17)
 4006b60:	003fae06 	br	4006a1c <__alt_data_end+0xfc006a1c>
 4006b64:	98c00017 	ldw	r3,0(r19)
 4006b68:	183fba26 	beq	r3,zero,4006a54 <__alt_data_end+0xfc006a54>
 4006b6c:	01000744 	movi	r4,29
 4006b70:	19000626 	beq	r3,r4,4006b8c <__sflush_r+0x1c8>
 4006b74:	01000584 	movi	r4,22
 4006b78:	19000426 	beq	r3,r4,4006b8c <__sflush_r+0x1c8>
 4006b7c:	88c0030b 	ldhu	r3,12(r17)
 4006b80:	18c01014 	ori	r3,r3,64
 4006b84:	88c0030d 	sth	r3,12(r17)
 4006b88:	003fc306 	br	4006a98 <__alt_data_end+0xfc006a98>
 4006b8c:	8880030b 	ldhu	r2,12(r17)
 4006b90:	88c00417 	ldw	r3,16(r17)
 4006b94:	88000115 	stw	zero,4(r17)
 4006b98:	10bdffcc 	andi	r2,r2,63487
 4006b9c:	8880030d 	sth	r2,12(r17)
 4006ba0:	88c00015 	stw	r3,0(r17)
 4006ba4:	003fb306 	br	4006a74 <__alt_data_end+0xfc006a74>
 4006ba8:	98800017 	ldw	r2,0(r19)
 4006bac:	103fea26 	beq	r2,zero,4006b58 <__alt_data_end+0xfc006b58>
 4006bb0:	00c00744 	movi	r3,29
 4006bb4:	10c00226 	beq	r2,r3,4006bc0 <__sflush_r+0x1fc>
 4006bb8:	00c00584 	movi	r3,22
 4006bbc:	10c0031e 	bne	r2,r3,4006bcc <__sflush_r+0x208>
 4006bc0:	9c000015 	stw	r16,0(r19)
 4006bc4:	0005883a 	mov	r2,zero
 4006bc8:	003fb306 	br	4006a98 <__alt_data_end+0xfc006a98>
 4006bcc:	88c0030b 	ldhu	r3,12(r17)
 4006bd0:	3005883a 	mov	r2,r6
 4006bd4:	18c01014 	ori	r3,r3,64
 4006bd8:	88c0030d 	sth	r3,12(r17)
 4006bdc:	003fae06 	br	4006a98 <__alt_data_end+0xfc006a98>

04006be0 <_fflush_r>:
 4006be0:	defffd04 	addi	sp,sp,-12
 4006be4:	dc000115 	stw	r16,4(sp)
 4006be8:	dfc00215 	stw	ra,8(sp)
 4006bec:	2021883a 	mov	r16,r4
 4006bf0:	20000226 	beq	r4,zero,4006bfc <_fflush_r+0x1c>
 4006bf4:	20800e17 	ldw	r2,56(r4)
 4006bf8:	10000c26 	beq	r2,zero,4006c2c <_fflush_r+0x4c>
 4006bfc:	2880030f 	ldh	r2,12(r5)
 4006c00:	1000051e 	bne	r2,zero,4006c18 <_fflush_r+0x38>
 4006c04:	0005883a 	mov	r2,zero
 4006c08:	dfc00217 	ldw	ra,8(sp)
 4006c0c:	dc000117 	ldw	r16,4(sp)
 4006c10:	dec00304 	addi	sp,sp,12
 4006c14:	f800283a 	ret
 4006c18:	8009883a 	mov	r4,r16
 4006c1c:	dfc00217 	ldw	ra,8(sp)
 4006c20:	dc000117 	ldw	r16,4(sp)
 4006c24:	dec00304 	addi	sp,sp,12
 4006c28:	40069c41 	jmpi	40069c4 <__sflush_r>
 4006c2c:	d9400015 	stw	r5,0(sp)
 4006c30:	4006fcc0 	call	4006fcc <__sinit>
 4006c34:	d9400017 	ldw	r5,0(sp)
 4006c38:	003ff006 	br	4006bfc <__alt_data_end+0xfc006bfc>

04006c3c <fflush>:
 4006c3c:	20000526 	beq	r4,zero,4006c54 <fflush+0x18>
 4006c40:	00810074 	movhi	r2,1025
 4006c44:	10bc7204 	addi	r2,r2,-3640
 4006c48:	200b883a 	mov	r5,r4
 4006c4c:	11000017 	ldw	r4,0(r2)
 4006c50:	4006be01 	jmpi	4006be0 <_fflush_r>
 4006c54:	00810074 	movhi	r2,1025
 4006c58:	10bc7104 	addi	r2,r2,-3644
 4006c5c:	11000017 	ldw	r4,0(r2)
 4006c60:	01410034 	movhi	r5,1024
 4006c64:	295af804 	addi	r5,r5,27616
 4006c68:	4007be41 	jmpi	4007be4 <_fwalk_reent>

04006c6c <__fp_unlock>:
 4006c6c:	0005883a 	mov	r2,zero
 4006c70:	f800283a 	ret

04006c74 <_cleanup_r>:
 4006c74:	01410074 	movhi	r5,1025
 4006c78:	29657a04 	addi	r5,r5,-27160
 4006c7c:	4007be41 	jmpi	4007be4 <_fwalk_reent>

04006c80 <__sinit.part.1>:
 4006c80:	defff704 	addi	sp,sp,-36
 4006c84:	00c10034 	movhi	r3,1024
 4006c88:	dfc00815 	stw	ra,32(sp)
 4006c8c:	ddc00715 	stw	r23,28(sp)
 4006c90:	dd800615 	stw	r22,24(sp)
 4006c94:	dd400515 	stw	r21,20(sp)
 4006c98:	dd000415 	stw	r20,16(sp)
 4006c9c:	dcc00315 	stw	r19,12(sp)
 4006ca0:	dc800215 	stw	r18,8(sp)
 4006ca4:	dc400115 	stw	r17,4(sp)
 4006ca8:	dc000015 	stw	r16,0(sp)
 4006cac:	18db1d04 	addi	r3,r3,27764
 4006cb0:	24000117 	ldw	r16,4(r4)
 4006cb4:	20c00f15 	stw	r3,60(r4)
 4006cb8:	2080bb04 	addi	r2,r4,748
 4006cbc:	00c000c4 	movi	r3,3
 4006cc0:	20c0b915 	stw	r3,740(r4)
 4006cc4:	2080ba15 	stw	r2,744(r4)
 4006cc8:	2000b815 	stw	zero,736(r4)
 4006ccc:	05c00204 	movi	r23,8
 4006cd0:	00800104 	movi	r2,4
 4006cd4:	2025883a 	mov	r18,r4
 4006cd8:	b80d883a 	mov	r6,r23
 4006cdc:	81001704 	addi	r4,r16,92
 4006ce0:	000b883a 	mov	r5,zero
 4006ce4:	80000015 	stw	zero,0(r16)
 4006ce8:	80000115 	stw	zero,4(r16)
 4006cec:	80000215 	stw	zero,8(r16)
 4006cf0:	8080030d 	sth	r2,12(r16)
 4006cf4:	80001915 	stw	zero,100(r16)
 4006cf8:	8000038d 	sth	zero,14(r16)
 4006cfc:	80000415 	stw	zero,16(r16)
 4006d00:	80000515 	stw	zero,20(r16)
 4006d04:	80000615 	stw	zero,24(r16)
 4006d08:	4004d1c0 	call	4004d1c <memset>
 4006d0c:	05810074 	movhi	r22,1025
 4006d10:	94400217 	ldw	r17,8(r18)
 4006d14:	05410074 	movhi	r21,1025
 4006d18:	05010074 	movhi	r20,1025
 4006d1c:	04c10074 	movhi	r19,1025
 4006d20:	b5a3d104 	addi	r22,r22,-28860
 4006d24:	ad63e804 	addi	r21,r21,-28768
 4006d28:	a5240704 	addi	r20,r20,-28644
 4006d2c:	9ce41e04 	addi	r19,r19,-28552
 4006d30:	85800815 	stw	r22,32(r16)
 4006d34:	85400915 	stw	r21,36(r16)
 4006d38:	85000a15 	stw	r20,40(r16)
 4006d3c:	84c00b15 	stw	r19,44(r16)
 4006d40:	84000715 	stw	r16,28(r16)
 4006d44:	00800284 	movi	r2,10
 4006d48:	8880030d 	sth	r2,12(r17)
 4006d4c:	00800044 	movi	r2,1
 4006d50:	b80d883a 	mov	r6,r23
 4006d54:	89001704 	addi	r4,r17,92
 4006d58:	000b883a 	mov	r5,zero
 4006d5c:	88000015 	stw	zero,0(r17)
 4006d60:	88000115 	stw	zero,4(r17)
 4006d64:	88000215 	stw	zero,8(r17)
 4006d68:	88001915 	stw	zero,100(r17)
 4006d6c:	8880038d 	sth	r2,14(r17)
 4006d70:	88000415 	stw	zero,16(r17)
 4006d74:	88000515 	stw	zero,20(r17)
 4006d78:	88000615 	stw	zero,24(r17)
 4006d7c:	4004d1c0 	call	4004d1c <memset>
 4006d80:	94000317 	ldw	r16,12(r18)
 4006d84:	00800484 	movi	r2,18
 4006d88:	8c400715 	stw	r17,28(r17)
 4006d8c:	8d800815 	stw	r22,32(r17)
 4006d90:	8d400915 	stw	r21,36(r17)
 4006d94:	8d000a15 	stw	r20,40(r17)
 4006d98:	8cc00b15 	stw	r19,44(r17)
 4006d9c:	8080030d 	sth	r2,12(r16)
 4006da0:	00800084 	movi	r2,2
 4006da4:	80000015 	stw	zero,0(r16)
 4006da8:	80000115 	stw	zero,4(r16)
 4006dac:	80000215 	stw	zero,8(r16)
 4006db0:	80001915 	stw	zero,100(r16)
 4006db4:	8080038d 	sth	r2,14(r16)
 4006db8:	80000415 	stw	zero,16(r16)
 4006dbc:	80000515 	stw	zero,20(r16)
 4006dc0:	80000615 	stw	zero,24(r16)
 4006dc4:	b80d883a 	mov	r6,r23
 4006dc8:	000b883a 	mov	r5,zero
 4006dcc:	81001704 	addi	r4,r16,92
 4006dd0:	4004d1c0 	call	4004d1c <memset>
 4006dd4:	00800044 	movi	r2,1
 4006dd8:	84000715 	stw	r16,28(r16)
 4006ddc:	85800815 	stw	r22,32(r16)
 4006de0:	85400915 	stw	r21,36(r16)
 4006de4:	85000a15 	stw	r20,40(r16)
 4006de8:	84c00b15 	stw	r19,44(r16)
 4006dec:	90800e15 	stw	r2,56(r18)
 4006df0:	dfc00817 	ldw	ra,32(sp)
 4006df4:	ddc00717 	ldw	r23,28(sp)
 4006df8:	dd800617 	ldw	r22,24(sp)
 4006dfc:	dd400517 	ldw	r21,20(sp)
 4006e00:	dd000417 	ldw	r20,16(sp)
 4006e04:	dcc00317 	ldw	r19,12(sp)
 4006e08:	dc800217 	ldw	r18,8(sp)
 4006e0c:	dc400117 	ldw	r17,4(sp)
 4006e10:	dc000017 	ldw	r16,0(sp)
 4006e14:	dec00904 	addi	sp,sp,36
 4006e18:	f800283a 	ret

04006e1c <__fp_lock>:
 4006e1c:	0005883a 	mov	r2,zero
 4006e20:	f800283a 	ret

04006e24 <__sfmoreglue>:
 4006e24:	defffc04 	addi	sp,sp,-16
 4006e28:	dc800215 	stw	r18,8(sp)
 4006e2c:	2825883a 	mov	r18,r5
 4006e30:	dc000015 	stw	r16,0(sp)
 4006e34:	01401a04 	movi	r5,104
 4006e38:	2021883a 	mov	r16,r4
 4006e3c:	913fffc4 	addi	r4,r18,-1
 4006e40:	dfc00315 	stw	ra,12(sp)
 4006e44:	dc400115 	stw	r17,4(sp)
 4006e48:	40036040 	call	4003604 <__mulsi3>
 4006e4c:	8009883a 	mov	r4,r16
 4006e50:	11401d04 	addi	r5,r2,116
 4006e54:	1023883a 	mov	r17,r2
 4006e58:	4007f400 	call	4007f40 <_malloc_r>
 4006e5c:	1021883a 	mov	r16,r2
 4006e60:	10000726 	beq	r2,zero,4006e80 <__sfmoreglue+0x5c>
 4006e64:	11000304 	addi	r4,r2,12
 4006e68:	10000015 	stw	zero,0(r2)
 4006e6c:	14800115 	stw	r18,4(r2)
 4006e70:	11000215 	stw	r4,8(r2)
 4006e74:	89801a04 	addi	r6,r17,104
 4006e78:	000b883a 	mov	r5,zero
 4006e7c:	4004d1c0 	call	4004d1c <memset>
 4006e80:	8005883a 	mov	r2,r16
 4006e84:	dfc00317 	ldw	ra,12(sp)
 4006e88:	dc800217 	ldw	r18,8(sp)
 4006e8c:	dc400117 	ldw	r17,4(sp)
 4006e90:	dc000017 	ldw	r16,0(sp)
 4006e94:	dec00404 	addi	sp,sp,16
 4006e98:	f800283a 	ret

04006e9c <__sfp>:
 4006e9c:	defffb04 	addi	sp,sp,-20
 4006ea0:	dc000015 	stw	r16,0(sp)
 4006ea4:	04010074 	movhi	r16,1025
 4006ea8:	843c7104 	addi	r16,r16,-3644
 4006eac:	dcc00315 	stw	r19,12(sp)
 4006eb0:	2027883a 	mov	r19,r4
 4006eb4:	81000017 	ldw	r4,0(r16)
 4006eb8:	dfc00415 	stw	ra,16(sp)
 4006ebc:	dc800215 	stw	r18,8(sp)
 4006ec0:	20800e17 	ldw	r2,56(r4)
 4006ec4:	dc400115 	stw	r17,4(sp)
 4006ec8:	1000021e 	bne	r2,zero,4006ed4 <__sfp+0x38>
 4006ecc:	4006c800 	call	4006c80 <__sinit.part.1>
 4006ed0:	81000017 	ldw	r4,0(r16)
 4006ed4:	2480b804 	addi	r18,r4,736
 4006ed8:	047fffc4 	movi	r17,-1
 4006edc:	91000117 	ldw	r4,4(r18)
 4006ee0:	94000217 	ldw	r16,8(r18)
 4006ee4:	213fffc4 	addi	r4,r4,-1
 4006ee8:	20000a16 	blt	r4,zero,4006f14 <__sfp+0x78>
 4006eec:	8080030f 	ldh	r2,12(r16)
 4006ef0:	10000c26 	beq	r2,zero,4006f24 <__sfp+0x88>
 4006ef4:	80c01d04 	addi	r3,r16,116
 4006ef8:	00000206 	br	4006f04 <__sfp+0x68>
 4006efc:	18bfe60f 	ldh	r2,-104(r3)
 4006f00:	10000826 	beq	r2,zero,4006f24 <__sfp+0x88>
 4006f04:	213fffc4 	addi	r4,r4,-1
 4006f08:	1c3ffd04 	addi	r16,r3,-12
 4006f0c:	18c01a04 	addi	r3,r3,104
 4006f10:	247ffa1e 	bne	r4,r17,4006efc <__alt_data_end+0xfc006efc>
 4006f14:	90800017 	ldw	r2,0(r18)
 4006f18:	10001d26 	beq	r2,zero,4006f90 <__sfp+0xf4>
 4006f1c:	1025883a 	mov	r18,r2
 4006f20:	003fee06 	br	4006edc <__alt_data_end+0xfc006edc>
 4006f24:	00bfffc4 	movi	r2,-1
 4006f28:	8080038d 	sth	r2,14(r16)
 4006f2c:	00800044 	movi	r2,1
 4006f30:	8080030d 	sth	r2,12(r16)
 4006f34:	80001915 	stw	zero,100(r16)
 4006f38:	80000015 	stw	zero,0(r16)
 4006f3c:	80000215 	stw	zero,8(r16)
 4006f40:	80000115 	stw	zero,4(r16)
 4006f44:	80000415 	stw	zero,16(r16)
 4006f48:	80000515 	stw	zero,20(r16)
 4006f4c:	80000615 	stw	zero,24(r16)
 4006f50:	01800204 	movi	r6,8
 4006f54:	000b883a 	mov	r5,zero
 4006f58:	81001704 	addi	r4,r16,92
 4006f5c:	4004d1c0 	call	4004d1c <memset>
 4006f60:	8005883a 	mov	r2,r16
 4006f64:	80000c15 	stw	zero,48(r16)
 4006f68:	80000d15 	stw	zero,52(r16)
 4006f6c:	80001115 	stw	zero,68(r16)
 4006f70:	80001215 	stw	zero,72(r16)
 4006f74:	dfc00417 	ldw	ra,16(sp)
 4006f78:	dcc00317 	ldw	r19,12(sp)
 4006f7c:	dc800217 	ldw	r18,8(sp)
 4006f80:	dc400117 	ldw	r17,4(sp)
 4006f84:	dc000017 	ldw	r16,0(sp)
 4006f88:	dec00504 	addi	sp,sp,20
 4006f8c:	f800283a 	ret
 4006f90:	01400104 	movi	r5,4
 4006f94:	9809883a 	mov	r4,r19
 4006f98:	4006e240 	call	4006e24 <__sfmoreglue>
 4006f9c:	90800015 	stw	r2,0(r18)
 4006fa0:	103fde1e 	bne	r2,zero,4006f1c <__alt_data_end+0xfc006f1c>
 4006fa4:	00800304 	movi	r2,12
 4006fa8:	98800015 	stw	r2,0(r19)
 4006fac:	0005883a 	mov	r2,zero
 4006fb0:	003ff006 	br	4006f74 <__alt_data_end+0xfc006f74>

04006fb4 <_cleanup>:
 4006fb4:	00810074 	movhi	r2,1025
 4006fb8:	10bc7104 	addi	r2,r2,-3644
 4006fbc:	11000017 	ldw	r4,0(r2)
 4006fc0:	01410074 	movhi	r5,1025
 4006fc4:	29657a04 	addi	r5,r5,-27160
 4006fc8:	4007be41 	jmpi	4007be4 <_fwalk_reent>

04006fcc <__sinit>:
 4006fcc:	20800e17 	ldw	r2,56(r4)
 4006fd0:	10000126 	beq	r2,zero,4006fd8 <__sinit+0xc>
 4006fd4:	f800283a 	ret
 4006fd8:	4006c801 	jmpi	4006c80 <__sinit.part.1>

04006fdc <__sfp_lock_acquire>:
 4006fdc:	f800283a 	ret

04006fe0 <__sfp_lock_release>:
 4006fe0:	f800283a 	ret

04006fe4 <__sinit_lock_acquire>:
 4006fe4:	f800283a 	ret

04006fe8 <__sinit_lock_release>:
 4006fe8:	f800283a 	ret

04006fec <__fp_lock_all>:
 4006fec:	00810074 	movhi	r2,1025
 4006ff0:	10bc7204 	addi	r2,r2,-3640
 4006ff4:	11000017 	ldw	r4,0(r2)
 4006ff8:	01410034 	movhi	r5,1024
 4006ffc:	295b8704 	addi	r5,r5,28188
 4007000:	4007b201 	jmpi	4007b20 <_fwalk>

04007004 <__fp_unlock_all>:
 4007004:	00810074 	movhi	r2,1025
 4007008:	10bc7204 	addi	r2,r2,-3640
 400700c:	11000017 	ldw	r4,0(r2)
 4007010:	01410034 	movhi	r5,1024
 4007014:	295b1b04 	addi	r5,r5,27756
 4007018:	4007b201 	jmpi	4007b20 <_fwalk>

0400701c <__fputwc>:
 400701c:	defff804 	addi	sp,sp,-32
 4007020:	dcc00415 	stw	r19,16(sp)
 4007024:	dc800315 	stw	r18,12(sp)
 4007028:	dc000115 	stw	r16,4(sp)
 400702c:	dfc00715 	stw	ra,28(sp)
 4007030:	dd400615 	stw	r21,24(sp)
 4007034:	dd000515 	stw	r20,20(sp)
 4007038:	dc400215 	stw	r17,8(sp)
 400703c:	2027883a 	mov	r19,r4
 4007040:	2825883a 	mov	r18,r5
 4007044:	3021883a 	mov	r16,r6
 4007048:	4007d300 	call	4007d30 <__locale_mb_cur_max>
 400704c:	00c00044 	movi	r3,1
 4007050:	10c03e26 	beq	r2,r3,400714c <__fputwc+0x130>
 4007054:	81c01704 	addi	r7,r16,92
 4007058:	900d883a 	mov	r6,r18
 400705c:	d80b883a 	mov	r5,sp
 4007060:	9809883a 	mov	r4,r19
 4007064:	400934c0 	call	400934c <_wcrtomb_r>
 4007068:	1029883a 	mov	r20,r2
 400706c:	00bfffc4 	movi	r2,-1
 4007070:	a0802026 	beq	r20,r2,40070f4 <__fputwc+0xd8>
 4007074:	d9400003 	ldbu	r5,0(sp)
 4007078:	a0001c26 	beq	r20,zero,40070ec <__fputwc+0xd0>
 400707c:	0023883a 	mov	r17,zero
 4007080:	05400284 	movi	r21,10
 4007084:	00000906 	br	40070ac <__fputwc+0x90>
 4007088:	80800017 	ldw	r2,0(r16)
 400708c:	11400005 	stb	r5,0(r2)
 4007090:	80c00017 	ldw	r3,0(r16)
 4007094:	18c00044 	addi	r3,r3,1
 4007098:	80c00015 	stw	r3,0(r16)
 400709c:	8c400044 	addi	r17,r17,1
 40070a0:	dc45883a 	add	r2,sp,r17
 40070a4:	8d00112e 	bgeu	r17,r20,40070ec <__fputwc+0xd0>
 40070a8:	11400003 	ldbu	r5,0(r2)
 40070ac:	80c00217 	ldw	r3,8(r16)
 40070b0:	18ffffc4 	addi	r3,r3,-1
 40070b4:	80c00215 	stw	r3,8(r16)
 40070b8:	183ff30e 	bge	r3,zero,4007088 <__alt_data_end+0xfc007088>
 40070bc:	80800617 	ldw	r2,24(r16)
 40070c0:	18801916 	blt	r3,r2,4007128 <__fputwc+0x10c>
 40070c4:	80800017 	ldw	r2,0(r16)
 40070c8:	11400005 	stb	r5,0(r2)
 40070cc:	80800017 	ldw	r2,0(r16)
 40070d0:	10c00003 	ldbu	r3,0(r2)
 40070d4:	10800044 	addi	r2,r2,1
 40070d8:	1d402326 	beq	r3,r21,4007168 <__fputwc+0x14c>
 40070dc:	80800015 	stw	r2,0(r16)
 40070e0:	8c400044 	addi	r17,r17,1
 40070e4:	dc45883a 	add	r2,sp,r17
 40070e8:	8d3fef36 	bltu	r17,r20,40070a8 <__alt_data_end+0xfc0070a8>
 40070ec:	9005883a 	mov	r2,r18
 40070f0:	00000406 	br	4007104 <__fputwc+0xe8>
 40070f4:	80c0030b 	ldhu	r3,12(r16)
 40070f8:	a005883a 	mov	r2,r20
 40070fc:	18c01014 	ori	r3,r3,64
 4007100:	80c0030d 	sth	r3,12(r16)
 4007104:	dfc00717 	ldw	ra,28(sp)
 4007108:	dd400617 	ldw	r21,24(sp)
 400710c:	dd000517 	ldw	r20,20(sp)
 4007110:	dcc00417 	ldw	r19,16(sp)
 4007114:	dc800317 	ldw	r18,12(sp)
 4007118:	dc400217 	ldw	r17,8(sp)
 400711c:	dc000117 	ldw	r16,4(sp)
 4007120:	dec00804 	addi	sp,sp,32
 4007124:	f800283a 	ret
 4007128:	800d883a 	mov	r6,r16
 400712c:	29403fcc 	andi	r5,r5,255
 4007130:	9809883a 	mov	r4,r19
 4007134:	40091f40 	call	40091f4 <__swbuf_r>
 4007138:	10bfffe0 	cmpeqi	r2,r2,-1
 400713c:	10803fcc 	andi	r2,r2,255
 4007140:	103fd626 	beq	r2,zero,400709c <__alt_data_end+0xfc00709c>
 4007144:	00bfffc4 	movi	r2,-1
 4007148:	003fee06 	br	4007104 <__alt_data_end+0xfc007104>
 400714c:	90ffffc4 	addi	r3,r18,-1
 4007150:	01003f84 	movi	r4,254
 4007154:	20ffbf36 	bltu	r4,r3,4007054 <__alt_data_end+0xfc007054>
 4007158:	900b883a 	mov	r5,r18
 400715c:	dc800005 	stb	r18,0(sp)
 4007160:	1029883a 	mov	r20,r2
 4007164:	003fc506 	br	400707c <__alt_data_end+0xfc00707c>
 4007168:	800d883a 	mov	r6,r16
 400716c:	a80b883a 	mov	r5,r21
 4007170:	9809883a 	mov	r4,r19
 4007174:	40091f40 	call	40091f4 <__swbuf_r>
 4007178:	10bfffe0 	cmpeqi	r2,r2,-1
 400717c:	003fef06 	br	400713c <__alt_data_end+0xfc00713c>

04007180 <_fputwc_r>:
 4007180:	3080030b 	ldhu	r2,12(r6)
 4007184:	10c8000c 	andi	r3,r2,8192
 4007188:	1800051e 	bne	r3,zero,40071a0 <_fputwc_r+0x20>
 400718c:	30c01917 	ldw	r3,100(r6)
 4007190:	10880014 	ori	r2,r2,8192
 4007194:	3080030d 	sth	r2,12(r6)
 4007198:	18880014 	ori	r2,r3,8192
 400719c:	30801915 	stw	r2,100(r6)
 40071a0:	400701c1 	jmpi	400701c <__fputwc>

040071a4 <fputwc>:
 40071a4:	00810074 	movhi	r2,1025
 40071a8:	defffc04 	addi	sp,sp,-16
 40071ac:	10bc7204 	addi	r2,r2,-3640
 40071b0:	dc000115 	stw	r16,4(sp)
 40071b4:	14000017 	ldw	r16,0(r2)
 40071b8:	dc400215 	stw	r17,8(sp)
 40071bc:	dfc00315 	stw	ra,12(sp)
 40071c0:	2023883a 	mov	r17,r4
 40071c4:	80000226 	beq	r16,zero,40071d0 <fputwc+0x2c>
 40071c8:	80800e17 	ldw	r2,56(r16)
 40071cc:	10001026 	beq	r2,zero,4007210 <fputwc+0x6c>
 40071d0:	2880030b 	ldhu	r2,12(r5)
 40071d4:	10c8000c 	andi	r3,r2,8192
 40071d8:	1800051e 	bne	r3,zero,40071f0 <fputwc+0x4c>
 40071dc:	28c01917 	ldw	r3,100(r5)
 40071e0:	10880014 	ori	r2,r2,8192
 40071e4:	2880030d 	sth	r2,12(r5)
 40071e8:	18880014 	ori	r2,r3,8192
 40071ec:	28801915 	stw	r2,100(r5)
 40071f0:	280d883a 	mov	r6,r5
 40071f4:	8009883a 	mov	r4,r16
 40071f8:	880b883a 	mov	r5,r17
 40071fc:	dfc00317 	ldw	ra,12(sp)
 4007200:	dc400217 	ldw	r17,8(sp)
 4007204:	dc000117 	ldw	r16,4(sp)
 4007208:	dec00404 	addi	sp,sp,16
 400720c:	400701c1 	jmpi	400701c <__fputwc>
 4007210:	8009883a 	mov	r4,r16
 4007214:	d9400015 	stw	r5,0(sp)
 4007218:	4006fcc0 	call	4006fcc <__sinit>
 400721c:	d9400017 	ldw	r5,0(sp)
 4007220:	003feb06 	br	40071d0 <__alt_data_end+0xfc0071d0>

04007224 <_malloc_trim_r>:
 4007224:	defffb04 	addi	sp,sp,-20
 4007228:	dcc00315 	stw	r19,12(sp)
 400722c:	04c10074 	movhi	r19,1025
 4007230:	dc800215 	stw	r18,8(sp)
 4007234:	dc400115 	stw	r17,4(sp)
 4007238:	dc000015 	stw	r16,0(sp)
 400723c:	dfc00415 	stw	ra,16(sp)
 4007240:	2821883a 	mov	r16,r5
 4007244:	9cf6d204 	addi	r19,r19,-9400
 4007248:	2025883a 	mov	r18,r4
 400724c:	400ab780 	call	400ab78 <__malloc_lock>
 4007250:	98800217 	ldw	r2,8(r19)
 4007254:	14400117 	ldw	r17,4(r2)
 4007258:	00bfff04 	movi	r2,-4
 400725c:	88a2703a 	and	r17,r17,r2
 4007260:	8c21c83a 	sub	r16,r17,r16
 4007264:	8403fbc4 	addi	r16,r16,4079
 4007268:	8020d33a 	srli	r16,r16,12
 400726c:	0083ffc4 	movi	r2,4095
 4007270:	843fffc4 	addi	r16,r16,-1
 4007274:	8020933a 	slli	r16,r16,12
 4007278:	1400060e 	bge	r2,r16,4007294 <_malloc_trim_r+0x70>
 400727c:	000b883a 	mov	r5,zero
 4007280:	9009883a 	mov	r4,r18
 4007284:	4008ef00 	call	4008ef0 <_sbrk_r>
 4007288:	98c00217 	ldw	r3,8(r19)
 400728c:	1c47883a 	add	r3,r3,r17
 4007290:	10c00a26 	beq	r2,r3,40072bc <_malloc_trim_r+0x98>
 4007294:	9009883a 	mov	r4,r18
 4007298:	400ab9c0 	call	400ab9c <__malloc_unlock>
 400729c:	0005883a 	mov	r2,zero
 40072a0:	dfc00417 	ldw	ra,16(sp)
 40072a4:	dcc00317 	ldw	r19,12(sp)
 40072a8:	dc800217 	ldw	r18,8(sp)
 40072ac:	dc400117 	ldw	r17,4(sp)
 40072b0:	dc000017 	ldw	r16,0(sp)
 40072b4:	dec00504 	addi	sp,sp,20
 40072b8:	f800283a 	ret
 40072bc:	040bc83a 	sub	r5,zero,r16
 40072c0:	9009883a 	mov	r4,r18
 40072c4:	4008ef00 	call	4008ef0 <_sbrk_r>
 40072c8:	00ffffc4 	movi	r3,-1
 40072cc:	10c00d26 	beq	r2,r3,4007304 <_malloc_trim_r+0xe0>
 40072d0:	00c10074 	movhi	r3,1025
 40072d4:	18c36704 	addi	r3,r3,3484
 40072d8:	18800017 	ldw	r2,0(r3)
 40072dc:	99000217 	ldw	r4,8(r19)
 40072e0:	8c23c83a 	sub	r17,r17,r16
 40072e4:	8c400054 	ori	r17,r17,1
 40072e8:	1421c83a 	sub	r16,r2,r16
 40072ec:	24400115 	stw	r17,4(r4)
 40072f0:	9009883a 	mov	r4,r18
 40072f4:	1c000015 	stw	r16,0(r3)
 40072f8:	400ab9c0 	call	400ab9c <__malloc_unlock>
 40072fc:	00800044 	movi	r2,1
 4007300:	003fe706 	br	40072a0 <__alt_data_end+0xfc0072a0>
 4007304:	000b883a 	mov	r5,zero
 4007308:	9009883a 	mov	r4,r18
 400730c:	4008ef00 	call	4008ef0 <_sbrk_r>
 4007310:	99000217 	ldw	r4,8(r19)
 4007314:	014003c4 	movi	r5,15
 4007318:	1107c83a 	sub	r3,r2,r4
 400731c:	28ffdd0e 	bge	r5,r3,4007294 <__alt_data_end+0xfc007294>
 4007320:	01410074 	movhi	r5,1025
 4007324:	297c7404 	addi	r5,r5,-3632
 4007328:	29400017 	ldw	r5,0(r5)
 400732c:	18c00054 	ori	r3,r3,1
 4007330:	20c00115 	stw	r3,4(r4)
 4007334:	00c10074 	movhi	r3,1025
 4007338:	1145c83a 	sub	r2,r2,r5
 400733c:	18c36704 	addi	r3,r3,3484
 4007340:	18800015 	stw	r2,0(r3)
 4007344:	003fd306 	br	4007294 <__alt_data_end+0xfc007294>

04007348 <_free_r>:
 4007348:	28004126 	beq	r5,zero,4007450 <_free_r+0x108>
 400734c:	defffd04 	addi	sp,sp,-12
 4007350:	dc400115 	stw	r17,4(sp)
 4007354:	dc000015 	stw	r16,0(sp)
 4007358:	2023883a 	mov	r17,r4
 400735c:	2821883a 	mov	r16,r5
 4007360:	dfc00215 	stw	ra,8(sp)
 4007364:	400ab780 	call	400ab78 <__malloc_lock>
 4007368:	81ffff17 	ldw	r7,-4(r16)
 400736c:	00bfff84 	movi	r2,-2
 4007370:	01010074 	movhi	r4,1025
 4007374:	81bffe04 	addi	r6,r16,-8
 4007378:	3884703a 	and	r2,r7,r2
 400737c:	2136d204 	addi	r4,r4,-9400
 4007380:	308b883a 	add	r5,r6,r2
 4007384:	2a400117 	ldw	r9,4(r5)
 4007388:	22000217 	ldw	r8,8(r4)
 400738c:	00ffff04 	movi	r3,-4
 4007390:	48c6703a 	and	r3,r9,r3
 4007394:	2a005726 	beq	r5,r8,40074f4 <_free_r+0x1ac>
 4007398:	28c00115 	stw	r3,4(r5)
 400739c:	39c0004c 	andi	r7,r7,1
 40073a0:	3800091e 	bne	r7,zero,40073c8 <_free_r+0x80>
 40073a4:	823ffe17 	ldw	r8,-8(r16)
 40073a8:	22400204 	addi	r9,r4,8
 40073ac:	320dc83a 	sub	r6,r6,r8
 40073b0:	31c00217 	ldw	r7,8(r6)
 40073b4:	1205883a 	add	r2,r2,r8
 40073b8:	3a406526 	beq	r7,r9,4007550 <_free_r+0x208>
 40073bc:	32000317 	ldw	r8,12(r6)
 40073c0:	3a000315 	stw	r8,12(r7)
 40073c4:	41c00215 	stw	r7,8(r8)
 40073c8:	28cf883a 	add	r7,r5,r3
 40073cc:	39c00117 	ldw	r7,4(r7)
 40073d0:	39c0004c 	andi	r7,r7,1
 40073d4:	38003a26 	beq	r7,zero,40074c0 <_free_r+0x178>
 40073d8:	10c00054 	ori	r3,r2,1
 40073dc:	30c00115 	stw	r3,4(r6)
 40073e0:	3087883a 	add	r3,r6,r2
 40073e4:	18800015 	stw	r2,0(r3)
 40073e8:	00c07fc4 	movi	r3,511
 40073ec:	18801936 	bltu	r3,r2,4007454 <_free_r+0x10c>
 40073f0:	1004d0fa 	srli	r2,r2,3
 40073f4:	01c00044 	movi	r7,1
 40073f8:	21400117 	ldw	r5,4(r4)
 40073fc:	10c00044 	addi	r3,r2,1
 4007400:	18c7883a 	add	r3,r3,r3
 4007404:	1005d0ba 	srai	r2,r2,2
 4007408:	18c7883a 	add	r3,r3,r3
 400740c:	18c7883a 	add	r3,r3,r3
 4007410:	1907883a 	add	r3,r3,r4
 4007414:	3884983a 	sll	r2,r7,r2
 4007418:	19c00017 	ldw	r7,0(r3)
 400741c:	1a3ffe04 	addi	r8,r3,-8
 4007420:	1144b03a 	or	r2,r2,r5
 4007424:	32000315 	stw	r8,12(r6)
 4007428:	31c00215 	stw	r7,8(r6)
 400742c:	20800115 	stw	r2,4(r4)
 4007430:	19800015 	stw	r6,0(r3)
 4007434:	39800315 	stw	r6,12(r7)
 4007438:	8809883a 	mov	r4,r17
 400743c:	dfc00217 	ldw	ra,8(sp)
 4007440:	dc400117 	ldw	r17,4(sp)
 4007444:	dc000017 	ldw	r16,0(sp)
 4007448:	dec00304 	addi	sp,sp,12
 400744c:	400ab9c1 	jmpi	400ab9c <__malloc_unlock>
 4007450:	f800283a 	ret
 4007454:	100ad27a 	srli	r5,r2,9
 4007458:	00c00104 	movi	r3,4
 400745c:	19404a36 	bltu	r3,r5,4007588 <_free_r+0x240>
 4007460:	100ad1ba 	srli	r5,r2,6
 4007464:	28c00e44 	addi	r3,r5,57
 4007468:	18c7883a 	add	r3,r3,r3
 400746c:	29400e04 	addi	r5,r5,56
 4007470:	18c7883a 	add	r3,r3,r3
 4007474:	18c7883a 	add	r3,r3,r3
 4007478:	1909883a 	add	r4,r3,r4
 400747c:	20c00017 	ldw	r3,0(r4)
 4007480:	01c10074 	movhi	r7,1025
 4007484:	213ffe04 	addi	r4,r4,-8
 4007488:	39f6d204 	addi	r7,r7,-9400
 400748c:	20c04426 	beq	r4,r3,40075a0 <_free_r+0x258>
 4007490:	01ffff04 	movi	r7,-4
 4007494:	19400117 	ldw	r5,4(r3)
 4007498:	29ca703a 	and	r5,r5,r7
 400749c:	1140022e 	bgeu	r2,r5,40074a8 <_free_r+0x160>
 40074a0:	18c00217 	ldw	r3,8(r3)
 40074a4:	20fffb1e 	bne	r4,r3,4007494 <__alt_data_end+0xfc007494>
 40074a8:	19000317 	ldw	r4,12(r3)
 40074ac:	31000315 	stw	r4,12(r6)
 40074b0:	30c00215 	stw	r3,8(r6)
 40074b4:	21800215 	stw	r6,8(r4)
 40074b8:	19800315 	stw	r6,12(r3)
 40074bc:	003fde06 	br	4007438 <__alt_data_end+0xfc007438>
 40074c0:	29c00217 	ldw	r7,8(r5)
 40074c4:	10c5883a 	add	r2,r2,r3
 40074c8:	00c10074 	movhi	r3,1025
 40074cc:	18f6d404 	addi	r3,r3,-9392
 40074d0:	38c03b26 	beq	r7,r3,40075c0 <_free_r+0x278>
 40074d4:	2a000317 	ldw	r8,12(r5)
 40074d8:	11400054 	ori	r5,r2,1
 40074dc:	3087883a 	add	r3,r6,r2
 40074e0:	3a000315 	stw	r8,12(r7)
 40074e4:	41c00215 	stw	r7,8(r8)
 40074e8:	31400115 	stw	r5,4(r6)
 40074ec:	18800015 	stw	r2,0(r3)
 40074f0:	003fbd06 	br	40073e8 <__alt_data_end+0xfc0073e8>
 40074f4:	39c0004c 	andi	r7,r7,1
 40074f8:	10c5883a 	add	r2,r2,r3
 40074fc:	3800071e 	bne	r7,zero,400751c <_free_r+0x1d4>
 4007500:	81fffe17 	ldw	r7,-8(r16)
 4007504:	31cdc83a 	sub	r6,r6,r7
 4007508:	30c00317 	ldw	r3,12(r6)
 400750c:	31400217 	ldw	r5,8(r6)
 4007510:	11c5883a 	add	r2,r2,r7
 4007514:	28c00315 	stw	r3,12(r5)
 4007518:	19400215 	stw	r5,8(r3)
 400751c:	10c00054 	ori	r3,r2,1
 4007520:	30c00115 	stw	r3,4(r6)
 4007524:	00c10074 	movhi	r3,1025
 4007528:	18fc7504 	addi	r3,r3,-3628
 400752c:	18c00017 	ldw	r3,0(r3)
 4007530:	21800215 	stw	r6,8(r4)
 4007534:	10ffc036 	bltu	r2,r3,4007438 <__alt_data_end+0xfc007438>
 4007538:	00810074 	movhi	r2,1025
 400753c:	10835f04 	addi	r2,r2,3452
 4007540:	11400017 	ldw	r5,0(r2)
 4007544:	8809883a 	mov	r4,r17
 4007548:	40072240 	call	4007224 <_malloc_trim_r>
 400754c:	003fba06 	br	4007438 <__alt_data_end+0xfc007438>
 4007550:	28c9883a 	add	r4,r5,r3
 4007554:	21000117 	ldw	r4,4(r4)
 4007558:	2100004c 	andi	r4,r4,1
 400755c:	2000391e 	bne	r4,zero,4007644 <_free_r+0x2fc>
 4007560:	29c00217 	ldw	r7,8(r5)
 4007564:	29000317 	ldw	r4,12(r5)
 4007568:	1885883a 	add	r2,r3,r2
 400756c:	10c00054 	ori	r3,r2,1
 4007570:	39000315 	stw	r4,12(r7)
 4007574:	21c00215 	stw	r7,8(r4)
 4007578:	30c00115 	stw	r3,4(r6)
 400757c:	308d883a 	add	r6,r6,r2
 4007580:	30800015 	stw	r2,0(r6)
 4007584:	003fac06 	br	4007438 <__alt_data_end+0xfc007438>
 4007588:	00c00504 	movi	r3,20
 400758c:	19401536 	bltu	r3,r5,40075e4 <_free_r+0x29c>
 4007590:	28c01704 	addi	r3,r5,92
 4007594:	18c7883a 	add	r3,r3,r3
 4007598:	294016c4 	addi	r5,r5,91
 400759c:	003fb406 	br	4007470 <__alt_data_end+0xfc007470>
 40075a0:	280bd0ba 	srai	r5,r5,2
 40075a4:	00c00044 	movi	r3,1
 40075a8:	38800117 	ldw	r2,4(r7)
 40075ac:	194a983a 	sll	r5,r3,r5
 40075b0:	2007883a 	mov	r3,r4
 40075b4:	2884b03a 	or	r2,r5,r2
 40075b8:	38800115 	stw	r2,4(r7)
 40075bc:	003fbb06 	br	40074ac <__alt_data_end+0xfc0074ac>
 40075c0:	21800515 	stw	r6,20(r4)
 40075c4:	21800415 	stw	r6,16(r4)
 40075c8:	10c00054 	ori	r3,r2,1
 40075cc:	31c00315 	stw	r7,12(r6)
 40075d0:	31c00215 	stw	r7,8(r6)
 40075d4:	30c00115 	stw	r3,4(r6)
 40075d8:	308d883a 	add	r6,r6,r2
 40075dc:	30800015 	stw	r2,0(r6)
 40075e0:	003f9506 	br	4007438 <__alt_data_end+0xfc007438>
 40075e4:	00c01504 	movi	r3,84
 40075e8:	19400536 	bltu	r3,r5,4007600 <_free_r+0x2b8>
 40075ec:	100ad33a 	srli	r5,r2,12
 40075f0:	28c01bc4 	addi	r3,r5,111
 40075f4:	18c7883a 	add	r3,r3,r3
 40075f8:	29401b84 	addi	r5,r5,110
 40075fc:	003f9c06 	br	4007470 <__alt_data_end+0xfc007470>
 4007600:	00c05504 	movi	r3,340
 4007604:	19400536 	bltu	r3,r5,400761c <_free_r+0x2d4>
 4007608:	100ad3fa 	srli	r5,r2,15
 400760c:	28c01e04 	addi	r3,r5,120
 4007610:	18c7883a 	add	r3,r3,r3
 4007614:	29401dc4 	addi	r5,r5,119
 4007618:	003f9506 	br	4007470 <__alt_data_end+0xfc007470>
 400761c:	00c15504 	movi	r3,1364
 4007620:	19400536 	bltu	r3,r5,4007638 <_free_r+0x2f0>
 4007624:	100ad4ba 	srli	r5,r2,18
 4007628:	28c01f44 	addi	r3,r5,125
 400762c:	18c7883a 	add	r3,r3,r3
 4007630:	29401f04 	addi	r5,r5,124
 4007634:	003f8e06 	br	4007470 <__alt_data_end+0xfc007470>
 4007638:	00c03f84 	movi	r3,254
 400763c:	01401f84 	movi	r5,126
 4007640:	003f8b06 	br	4007470 <__alt_data_end+0xfc007470>
 4007644:	10c00054 	ori	r3,r2,1
 4007648:	30c00115 	stw	r3,4(r6)
 400764c:	308d883a 	add	r6,r6,r2
 4007650:	30800015 	stw	r2,0(r6)
 4007654:	003f7806 	br	4007438 <__alt_data_end+0xfc007438>

04007658 <__sfvwrite_r>:
 4007658:	30800217 	ldw	r2,8(r6)
 400765c:	10006726 	beq	r2,zero,40077fc <__sfvwrite_r+0x1a4>
 4007660:	28c0030b 	ldhu	r3,12(r5)
 4007664:	defff404 	addi	sp,sp,-48
 4007668:	dd400715 	stw	r21,28(sp)
 400766c:	dd000615 	stw	r20,24(sp)
 4007670:	dc000215 	stw	r16,8(sp)
 4007674:	dfc00b15 	stw	ra,44(sp)
 4007678:	df000a15 	stw	fp,40(sp)
 400767c:	ddc00915 	stw	r23,36(sp)
 4007680:	dd800815 	stw	r22,32(sp)
 4007684:	dcc00515 	stw	r19,20(sp)
 4007688:	dc800415 	stw	r18,16(sp)
 400768c:	dc400315 	stw	r17,12(sp)
 4007690:	1880020c 	andi	r2,r3,8
 4007694:	2821883a 	mov	r16,r5
 4007698:	202b883a 	mov	r21,r4
 400769c:	3029883a 	mov	r20,r6
 40076a0:	10002726 	beq	r2,zero,4007740 <__sfvwrite_r+0xe8>
 40076a4:	28800417 	ldw	r2,16(r5)
 40076a8:	10002526 	beq	r2,zero,4007740 <__sfvwrite_r+0xe8>
 40076ac:	1880008c 	andi	r2,r3,2
 40076b0:	a4400017 	ldw	r17,0(r20)
 40076b4:	10002a26 	beq	r2,zero,4007760 <__sfvwrite_r+0x108>
 40076b8:	05a00034 	movhi	r22,32768
 40076bc:	0027883a 	mov	r19,zero
 40076c0:	0025883a 	mov	r18,zero
 40076c4:	b5bf0004 	addi	r22,r22,-1024
 40076c8:	980d883a 	mov	r6,r19
 40076cc:	a809883a 	mov	r4,r21
 40076d0:	90004626 	beq	r18,zero,40077ec <__sfvwrite_r+0x194>
 40076d4:	900f883a 	mov	r7,r18
 40076d8:	b480022e 	bgeu	r22,r18,40076e4 <__sfvwrite_r+0x8c>
 40076dc:	01e00034 	movhi	r7,32768
 40076e0:	39ff0004 	addi	r7,r7,-1024
 40076e4:	80800917 	ldw	r2,36(r16)
 40076e8:	81400717 	ldw	r5,28(r16)
 40076ec:	103ee83a 	callr	r2
 40076f0:	00805a0e 	bge	zero,r2,400785c <__sfvwrite_r+0x204>
 40076f4:	a0c00217 	ldw	r3,8(r20)
 40076f8:	98a7883a 	add	r19,r19,r2
 40076fc:	90a5c83a 	sub	r18,r18,r2
 4007700:	1885c83a 	sub	r2,r3,r2
 4007704:	a0800215 	stw	r2,8(r20)
 4007708:	103fef1e 	bne	r2,zero,40076c8 <__alt_data_end+0xfc0076c8>
 400770c:	0005883a 	mov	r2,zero
 4007710:	dfc00b17 	ldw	ra,44(sp)
 4007714:	df000a17 	ldw	fp,40(sp)
 4007718:	ddc00917 	ldw	r23,36(sp)
 400771c:	dd800817 	ldw	r22,32(sp)
 4007720:	dd400717 	ldw	r21,28(sp)
 4007724:	dd000617 	ldw	r20,24(sp)
 4007728:	dcc00517 	ldw	r19,20(sp)
 400772c:	dc800417 	ldw	r18,16(sp)
 4007730:	dc400317 	ldw	r17,12(sp)
 4007734:	dc000217 	ldw	r16,8(sp)
 4007738:	dec00c04 	addi	sp,sp,48
 400773c:	f800283a 	ret
 4007740:	800b883a 	mov	r5,r16
 4007744:	a809883a 	mov	r4,r21
 4007748:	40068700 	call	4006870 <__swsetup_r>
 400774c:	1000ee1e 	bne	r2,zero,4007b08 <__sfvwrite_r+0x4b0>
 4007750:	80c0030b 	ldhu	r3,12(r16)
 4007754:	a4400017 	ldw	r17,0(r20)
 4007758:	1880008c 	andi	r2,r3,2
 400775c:	103fd61e 	bne	r2,zero,40076b8 <__alt_data_end+0xfc0076b8>
 4007760:	1880004c 	andi	r2,r3,1
 4007764:	1000421e 	bne	r2,zero,4007870 <__sfvwrite_r+0x218>
 4007768:	0039883a 	mov	fp,zero
 400776c:	0025883a 	mov	r18,zero
 4007770:	90001a26 	beq	r18,zero,40077dc <__sfvwrite_r+0x184>
 4007774:	1880800c 	andi	r2,r3,512
 4007778:	84c00217 	ldw	r19,8(r16)
 400777c:	10002126 	beq	r2,zero,4007804 <__sfvwrite_r+0x1ac>
 4007780:	982f883a 	mov	r23,r19
 4007784:	94c09636 	bltu	r18,r19,40079e0 <__sfvwrite_r+0x388>
 4007788:	1881200c 	andi	r2,r3,1152
 400778c:	1000a11e 	bne	r2,zero,4007a14 <__sfvwrite_r+0x3bc>
 4007790:	81000017 	ldw	r4,0(r16)
 4007794:	b80d883a 	mov	r6,r23
 4007798:	e00b883a 	mov	r5,fp
 400779c:	40088300 	call	4008830 <memmove>
 40077a0:	80c00217 	ldw	r3,8(r16)
 40077a4:	81000017 	ldw	r4,0(r16)
 40077a8:	9005883a 	mov	r2,r18
 40077ac:	1ce7c83a 	sub	r19,r3,r19
 40077b0:	25cf883a 	add	r7,r4,r23
 40077b4:	84c00215 	stw	r19,8(r16)
 40077b8:	81c00015 	stw	r7,0(r16)
 40077bc:	a0c00217 	ldw	r3,8(r20)
 40077c0:	e0b9883a 	add	fp,fp,r2
 40077c4:	90a5c83a 	sub	r18,r18,r2
 40077c8:	18a7c83a 	sub	r19,r3,r2
 40077cc:	a4c00215 	stw	r19,8(r20)
 40077d0:	983fce26 	beq	r19,zero,400770c <__alt_data_end+0xfc00770c>
 40077d4:	80c0030b 	ldhu	r3,12(r16)
 40077d8:	903fe61e 	bne	r18,zero,4007774 <__alt_data_end+0xfc007774>
 40077dc:	8f000017 	ldw	fp,0(r17)
 40077e0:	8c800117 	ldw	r18,4(r17)
 40077e4:	8c400204 	addi	r17,r17,8
 40077e8:	003fe106 	br	4007770 <__alt_data_end+0xfc007770>
 40077ec:	8cc00017 	ldw	r19,0(r17)
 40077f0:	8c800117 	ldw	r18,4(r17)
 40077f4:	8c400204 	addi	r17,r17,8
 40077f8:	003fb306 	br	40076c8 <__alt_data_end+0xfc0076c8>
 40077fc:	0005883a 	mov	r2,zero
 4007800:	f800283a 	ret
 4007804:	81000017 	ldw	r4,0(r16)
 4007808:	80800417 	ldw	r2,16(r16)
 400780c:	11005a36 	bltu	r2,r4,4007978 <__sfvwrite_r+0x320>
 4007810:	85c00517 	ldw	r23,20(r16)
 4007814:	95c05836 	bltu	r18,r23,4007978 <__sfvwrite_r+0x320>
 4007818:	00a00034 	movhi	r2,32768
 400781c:	10bfffc4 	addi	r2,r2,-1
 4007820:	9009883a 	mov	r4,r18
 4007824:	1480012e 	bgeu	r2,r18,400782c <__sfvwrite_r+0x1d4>
 4007828:	1009883a 	mov	r4,r2
 400782c:	b80b883a 	mov	r5,r23
 4007830:	40034500 	call	4003450 <__divsi3>
 4007834:	b80b883a 	mov	r5,r23
 4007838:	1009883a 	mov	r4,r2
 400783c:	40036040 	call	4003604 <__mulsi3>
 4007840:	81400717 	ldw	r5,28(r16)
 4007844:	80c00917 	ldw	r3,36(r16)
 4007848:	100f883a 	mov	r7,r2
 400784c:	e00d883a 	mov	r6,fp
 4007850:	a809883a 	mov	r4,r21
 4007854:	183ee83a 	callr	r3
 4007858:	00bfd816 	blt	zero,r2,40077bc <__alt_data_end+0xfc0077bc>
 400785c:	8080030b 	ldhu	r2,12(r16)
 4007860:	10801014 	ori	r2,r2,64
 4007864:	8080030d 	sth	r2,12(r16)
 4007868:	00bfffc4 	movi	r2,-1
 400786c:	003fa806 	br	4007710 <__alt_data_end+0xfc007710>
 4007870:	0027883a 	mov	r19,zero
 4007874:	0011883a 	mov	r8,zero
 4007878:	0039883a 	mov	fp,zero
 400787c:	0025883a 	mov	r18,zero
 4007880:	90001f26 	beq	r18,zero,4007900 <__sfvwrite_r+0x2a8>
 4007884:	40005a26 	beq	r8,zero,40079f0 <__sfvwrite_r+0x398>
 4007888:	982d883a 	mov	r22,r19
 400788c:	94c0012e 	bgeu	r18,r19,4007894 <__sfvwrite_r+0x23c>
 4007890:	902d883a 	mov	r22,r18
 4007894:	81000017 	ldw	r4,0(r16)
 4007898:	80800417 	ldw	r2,16(r16)
 400789c:	b02f883a 	mov	r23,r22
 40078a0:	81c00517 	ldw	r7,20(r16)
 40078a4:	1100032e 	bgeu	r2,r4,40078b4 <__sfvwrite_r+0x25c>
 40078a8:	80c00217 	ldw	r3,8(r16)
 40078ac:	38c7883a 	add	r3,r7,r3
 40078b0:	1d801816 	blt	r3,r22,4007914 <__sfvwrite_r+0x2bc>
 40078b4:	b1c03e16 	blt	r22,r7,40079b0 <__sfvwrite_r+0x358>
 40078b8:	80800917 	ldw	r2,36(r16)
 40078bc:	81400717 	ldw	r5,28(r16)
 40078c0:	e00d883a 	mov	r6,fp
 40078c4:	da000115 	stw	r8,4(sp)
 40078c8:	a809883a 	mov	r4,r21
 40078cc:	103ee83a 	callr	r2
 40078d0:	102f883a 	mov	r23,r2
 40078d4:	da000117 	ldw	r8,4(sp)
 40078d8:	00bfe00e 	bge	zero,r2,400785c <__alt_data_end+0xfc00785c>
 40078dc:	9de7c83a 	sub	r19,r19,r23
 40078e0:	98001f26 	beq	r19,zero,4007960 <__sfvwrite_r+0x308>
 40078e4:	a0800217 	ldw	r2,8(r20)
 40078e8:	e5f9883a 	add	fp,fp,r23
 40078ec:	95e5c83a 	sub	r18,r18,r23
 40078f0:	15efc83a 	sub	r23,r2,r23
 40078f4:	a5c00215 	stw	r23,8(r20)
 40078f8:	b83f8426 	beq	r23,zero,400770c <__alt_data_end+0xfc00770c>
 40078fc:	903fe11e 	bne	r18,zero,4007884 <__alt_data_end+0xfc007884>
 4007900:	8f000017 	ldw	fp,0(r17)
 4007904:	8c800117 	ldw	r18,4(r17)
 4007908:	0011883a 	mov	r8,zero
 400790c:	8c400204 	addi	r17,r17,8
 4007910:	003fdb06 	br	4007880 <__alt_data_end+0xfc007880>
 4007914:	180d883a 	mov	r6,r3
 4007918:	e00b883a 	mov	r5,fp
 400791c:	da000115 	stw	r8,4(sp)
 4007920:	d8c00015 	stw	r3,0(sp)
 4007924:	40088300 	call	4008830 <memmove>
 4007928:	d8c00017 	ldw	r3,0(sp)
 400792c:	80800017 	ldw	r2,0(r16)
 4007930:	800b883a 	mov	r5,r16
 4007934:	a809883a 	mov	r4,r21
 4007938:	10c5883a 	add	r2,r2,r3
 400793c:	80800015 	stw	r2,0(r16)
 4007940:	d8c00015 	stw	r3,0(sp)
 4007944:	4006be00 	call	4006be0 <_fflush_r>
 4007948:	d8c00017 	ldw	r3,0(sp)
 400794c:	da000117 	ldw	r8,4(sp)
 4007950:	103fc21e 	bne	r2,zero,400785c <__alt_data_end+0xfc00785c>
 4007954:	182f883a 	mov	r23,r3
 4007958:	9de7c83a 	sub	r19,r19,r23
 400795c:	983fe11e 	bne	r19,zero,40078e4 <__alt_data_end+0xfc0078e4>
 4007960:	800b883a 	mov	r5,r16
 4007964:	a809883a 	mov	r4,r21
 4007968:	4006be00 	call	4006be0 <_fflush_r>
 400796c:	103fbb1e 	bne	r2,zero,400785c <__alt_data_end+0xfc00785c>
 4007970:	0011883a 	mov	r8,zero
 4007974:	003fdb06 	br	40078e4 <__alt_data_end+0xfc0078e4>
 4007978:	94c0012e 	bgeu	r18,r19,4007980 <__sfvwrite_r+0x328>
 400797c:	9027883a 	mov	r19,r18
 4007980:	980d883a 	mov	r6,r19
 4007984:	e00b883a 	mov	r5,fp
 4007988:	40088300 	call	4008830 <memmove>
 400798c:	80800217 	ldw	r2,8(r16)
 4007990:	80c00017 	ldw	r3,0(r16)
 4007994:	14c5c83a 	sub	r2,r2,r19
 4007998:	1cc7883a 	add	r3,r3,r19
 400799c:	80800215 	stw	r2,8(r16)
 40079a0:	80c00015 	stw	r3,0(r16)
 40079a4:	10004326 	beq	r2,zero,4007ab4 <__sfvwrite_r+0x45c>
 40079a8:	9805883a 	mov	r2,r19
 40079ac:	003f8306 	br	40077bc <__alt_data_end+0xfc0077bc>
 40079b0:	b00d883a 	mov	r6,r22
 40079b4:	e00b883a 	mov	r5,fp
 40079b8:	da000115 	stw	r8,4(sp)
 40079bc:	40088300 	call	4008830 <memmove>
 40079c0:	80800217 	ldw	r2,8(r16)
 40079c4:	80c00017 	ldw	r3,0(r16)
 40079c8:	da000117 	ldw	r8,4(sp)
 40079cc:	1585c83a 	sub	r2,r2,r22
 40079d0:	1dad883a 	add	r22,r3,r22
 40079d4:	80800215 	stw	r2,8(r16)
 40079d8:	85800015 	stw	r22,0(r16)
 40079dc:	003fbf06 	br	40078dc <__alt_data_end+0xfc0078dc>
 40079e0:	81000017 	ldw	r4,0(r16)
 40079e4:	9027883a 	mov	r19,r18
 40079e8:	902f883a 	mov	r23,r18
 40079ec:	003f6906 	br	4007794 <__alt_data_end+0xfc007794>
 40079f0:	900d883a 	mov	r6,r18
 40079f4:	01400284 	movi	r5,10
 40079f8:	e009883a 	mov	r4,fp
 40079fc:	400874c0 	call	400874c <memchr>
 4007a00:	10003e26 	beq	r2,zero,4007afc <__sfvwrite_r+0x4a4>
 4007a04:	10800044 	addi	r2,r2,1
 4007a08:	1727c83a 	sub	r19,r2,fp
 4007a0c:	02000044 	movi	r8,1
 4007a10:	003f9d06 	br	4007888 <__alt_data_end+0xfc007888>
 4007a14:	80800517 	ldw	r2,20(r16)
 4007a18:	81400417 	ldw	r5,16(r16)
 4007a1c:	81c00017 	ldw	r7,0(r16)
 4007a20:	10a7883a 	add	r19,r2,r2
 4007a24:	9885883a 	add	r2,r19,r2
 4007a28:	1026d7fa 	srli	r19,r2,31
 4007a2c:	396dc83a 	sub	r22,r7,r5
 4007a30:	b1000044 	addi	r4,r22,1
 4007a34:	9885883a 	add	r2,r19,r2
 4007a38:	1027d07a 	srai	r19,r2,1
 4007a3c:	2485883a 	add	r2,r4,r18
 4007a40:	980d883a 	mov	r6,r19
 4007a44:	9880022e 	bgeu	r19,r2,4007a50 <__sfvwrite_r+0x3f8>
 4007a48:	1027883a 	mov	r19,r2
 4007a4c:	100d883a 	mov	r6,r2
 4007a50:	18c1000c 	andi	r3,r3,1024
 4007a54:	18001c26 	beq	r3,zero,4007ac8 <__sfvwrite_r+0x470>
 4007a58:	300b883a 	mov	r5,r6
 4007a5c:	a809883a 	mov	r4,r21
 4007a60:	4007f400 	call	4007f40 <_malloc_r>
 4007a64:	102f883a 	mov	r23,r2
 4007a68:	10002926 	beq	r2,zero,4007b10 <__sfvwrite_r+0x4b8>
 4007a6c:	81400417 	ldw	r5,16(r16)
 4007a70:	b00d883a 	mov	r6,r22
 4007a74:	1009883a 	mov	r4,r2
 4007a78:	4004bd40 	call	4004bd4 <memcpy>
 4007a7c:	8080030b 	ldhu	r2,12(r16)
 4007a80:	00fedfc4 	movi	r3,-1153
 4007a84:	10c4703a 	and	r2,r2,r3
 4007a88:	10802014 	ori	r2,r2,128
 4007a8c:	8080030d 	sth	r2,12(r16)
 4007a90:	bd89883a 	add	r4,r23,r22
 4007a94:	9d8fc83a 	sub	r7,r19,r22
 4007a98:	85c00415 	stw	r23,16(r16)
 4007a9c:	84c00515 	stw	r19,20(r16)
 4007aa0:	81000015 	stw	r4,0(r16)
 4007aa4:	9027883a 	mov	r19,r18
 4007aa8:	81c00215 	stw	r7,8(r16)
 4007aac:	902f883a 	mov	r23,r18
 4007ab0:	003f3806 	br	4007794 <__alt_data_end+0xfc007794>
 4007ab4:	800b883a 	mov	r5,r16
 4007ab8:	a809883a 	mov	r4,r21
 4007abc:	4006be00 	call	4006be0 <_fflush_r>
 4007ac0:	103fb926 	beq	r2,zero,40079a8 <__alt_data_end+0xfc0079a8>
 4007ac4:	003f6506 	br	400785c <__alt_data_end+0xfc00785c>
 4007ac8:	a809883a 	mov	r4,r21
 4007acc:	400898c0 	call	400898c <_realloc_r>
 4007ad0:	102f883a 	mov	r23,r2
 4007ad4:	103fee1e 	bne	r2,zero,4007a90 <__alt_data_end+0xfc007a90>
 4007ad8:	81400417 	ldw	r5,16(r16)
 4007adc:	a809883a 	mov	r4,r21
 4007ae0:	40073480 	call	4007348 <_free_r>
 4007ae4:	8080030b 	ldhu	r2,12(r16)
 4007ae8:	00ffdfc4 	movi	r3,-129
 4007aec:	1884703a 	and	r2,r3,r2
 4007af0:	00c00304 	movi	r3,12
 4007af4:	a8c00015 	stw	r3,0(r21)
 4007af8:	003f5906 	br	4007860 <__alt_data_end+0xfc007860>
 4007afc:	94c00044 	addi	r19,r18,1
 4007b00:	02000044 	movi	r8,1
 4007b04:	003f6006 	br	4007888 <__alt_data_end+0xfc007888>
 4007b08:	00bfffc4 	movi	r2,-1
 4007b0c:	003f0006 	br	4007710 <__alt_data_end+0xfc007710>
 4007b10:	00800304 	movi	r2,12
 4007b14:	a8800015 	stw	r2,0(r21)
 4007b18:	8080030b 	ldhu	r2,12(r16)
 4007b1c:	003f5006 	br	4007860 <__alt_data_end+0xfc007860>

04007b20 <_fwalk>:
 4007b20:	defff704 	addi	sp,sp,-36
 4007b24:	dd000415 	stw	r20,16(sp)
 4007b28:	dfc00815 	stw	ra,32(sp)
 4007b2c:	ddc00715 	stw	r23,28(sp)
 4007b30:	dd800615 	stw	r22,24(sp)
 4007b34:	dd400515 	stw	r21,20(sp)
 4007b38:	dcc00315 	stw	r19,12(sp)
 4007b3c:	dc800215 	stw	r18,8(sp)
 4007b40:	dc400115 	stw	r17,4(sp)
 4007b44:	dc000015 	stw	r16,0(sp)
 4007b48:	2500b804 	addi	r20,r4,736
 4007b4c:	a0002326 	beq	r20,zero,4007bdc <_fwalk+0xbc>
 4007b50:	282b883a 	mov	r21,r5
 4007b54:	002f883a 	mov	r23,zero
 4007b58:	05800044 	movi	r22,1
 4007b5c:	04ffffc4 	movi	r19,-1
 4007b60:	a4400117 	ldw	r17,4(r20)
 4007b64:	a4800217 	ldw	r18,8(r20)
 4007b68:	8c7fffc4 	addi	r17,r17,-1
 4007b6c:	88000d16 	blt	r17,zero,4007ba4 <_fwalk+0x84>
 4007b70:	94000304 	addi	r16,r18,12
 4007b74:	94800384 	addi	r18,r18,14
 4007b78:	8080000b 	ldhu	r2,0(r16)
 4007b7c:	8c7fffc4 	addi	r17,r17,-1
 4007b80:	813ffd04 	addi	r4,r16,-12
 4007b84:	b080042e 	bgeu	r22,r2,4007b98 <_fwalk+0x78>
 4007b88:	9080000f 	ldh	r2,0(r18)
 4007b8c:	14c00226 	beq	r2,r19,4007b98 <_fwalk+0x78>
 4007b90:	a83ee83a 	callr	r21
 4007b94:	b8aeb03a 	or	r23,r23,r2
 4007b98:	84001a04 	addi	r16,r16,104
 4007b9c:	94801a04 	addi	r18,r18,104
 4007ba0:	8cfff51e 	bne	r17,r19,4007b78 <__alt_data_end+0xfc007b78>
 4007ba4:	a5000017 	ldw	r20,0(r20)
 4007ba8:	a03fed1e 	bne	r20,zero,4007b60 <__alt_data_end+0xfc007b60>
 4007bac:	b805883a 	mov	r2,r23
 4007bb0:	dfc00817 	ldw	ra,32(sp)
 4007bb4:	ddc00717 	ldw	r23,28(sp)
 4007bb8:	dd800617 	ldw	r22,24(sp)
 4007bbc:	dd400517 	ldw	r21,20(sp)
 4007bc0:	dd000417 	ldw	r20,16(sp)
 4007bc4:	dcc00317 	ldw	r19,12(sp)
 4007bc8:	dc800217 	ldw	r18,8(sp)
 4007bcc:	dc400117 	ldw	r17,4(sp)
 4007bd0:	dc000017 	ldw	r16,0(sp)
 4007bd4:	dec00904 	addi	sp,sp,36
 4007bd8:	f800283a 	ret
 4007bdc:	002f883a 	mov	r23,zero
 4007be0:	003ff206 	br	4007bac <__alt_data_end+0xfc007bac>

04007be4 <_fwalk_reent>:
 4007be4:	defff704 	addi	sp,sp,-36
 4007be8:	dd000415 	stw	r20,16(sp)
 4007bec:	dfc00815 	stw	ra,32(sp)
 4007bf0:	ddc00715 	stw	r23,28(sp)
 4007bf4:	dd800615 	stw	r22,24(sp)
 4007bf8:	dd400515 	stw	r21,20(sp)
 4007bfc:	dcc00315 	stw	r19,12(sp)
 4007c00:	dc800215 	stw	r18,8(sp)
 4007c04:	dc400115 	stw	r17,4(sp)
 4007c08:	dc000015 	stw	r16,0(sp)
 4007c0c:	2500b804 	addi	r20,r4,736
 4007c10:	a0002326 	beq	r20,zero,4007ca0 <_fwalk_reent+0xbc>
 4007c14:	282b883a 	mov	r21,r5
 4007c18:	2027883a 	mov	r19,r4
 4007c1c:	002f883a 	mov	r23,zero
 4007c20:	05800044 	movi	r22,1
 4007c24:	04bfffc4 	movi	r18,-1
 4007c28:	a4400117 	ldw	r17,4(r20)
 4007c2c:	a4000217 	ldw	r16,8(r20)
 4007c30:	8c7fffc4 	addi	r17,r17,-1
 4007c34:	88000c16 	blt	r17,zero,4007c68 <_fwalk_reent+0x84>
 4007c38:	84000304 	addi	r16,r16,12
 4007c3c:	8080000b 	ldhu	r2,0(r16)
 4007c40:	8c7fffc4 	addi	r17,r17,-1
 4007c44:	817ffd04 	addi	r5,r16,-12
 4007c48:	b080052e 	bgeu	r22,r2,4007c60 <_fwalk_reent+0x7c>
 4007c4c:	8080008f 	ldh	r2,2(r16)
 4007c50:	9809883a 	mov	r4,r19
 4007c54:	14800226 	beq	r2,r18,4007c60 <_fwalk_reent+0x7c>
 4007c58:	a83ee83a 	callr	r21
 4007c5c:	b8aeb03a 	or	r23,r23,r2
 4007c60:	84001a04 	addi	r16,r16,104
 4007c64:	8cbff51e 	bne	r17,r18,4007c3c <__alt_data_end+0xfc007c3c>
 4007c68:	a5000017 	ldw	r20,0(r20)
 4007c6c:	a03fee1e 	bne	r20,zero,4007c28 <__alt_data_end+0xfc007c28>
 4007c70:	b805883a 	mov	r2,r23
 4007c74:	dfc00817 	ldw	ra,32(sp)
 4007c78:	ddc00717 	ldw	r23,28(sp)
 4007c7c:	dd800617 	ldw	r22,24(sp)
 4007c80:	dd400517 	ldw	r21,20(sp)
 4007c84:	dd000417 	ldw	r20,16(sp)
 4007c88:	dcc00317 	ldw	r19,12(sp)
 4007c8c:	dc800217 	ldw	r18,8(sp)
 4007c90:	dc400117 	ldw	r17,4(sp)
 4007c94:	dc000017 	ldw	r16,0(sp)
 4007c98:	dec00904 	addi	sp,sp,36
 4007c9c:	f800283a 	ret
 4007ca0:	002f883a 	mov	r23,zero
 4007ca4:	003ff206 	br	4007c70 <__alt_data_end+0xfc007c70>

04007ca8 <_setlocale_r>:
 4007ca8:	30001b26 	beq	r6,zero,4007d18 <_setlocale_r+0x70>
 4007cac:	01410074 	movhi	r5,1025
 4007cb0:	defffe04 	addi	sp,sp,-8
 4007cb4:	29759604 	addi	r5,r5,-10664
 4007cb8:	3009883a 	mov	r4,r6
 4007cbc:	dc000015 	stw	r16,0(sp)
 4007cc0:	dfc00115 	stw	ra,4(sp)
 4007cc4:	3021883a 	mov	r16,r6
 4007cc8:	40090800 	call	4009080 <strcmp>
 4007ccc:	1000061e 	bne	r2,zero,4007ce8 <_setlocale_r+0x40>
 4007cd0:	00810074 	movhi	r2,1025
 4007cd4:	10b58104 	addi	r2,r2,-10748
 4007cd8:	dfc00117 	ldw	ra,4(sp)
 4007cdc:	dc000017 	ldw	r16,0(sp)
 4007ce0:	dec00204 	addi	sp,sp,8
 4007ce4:	f800283a 	ret
 4007ce8:	01410074 	movhi	r5,1025
 4007cec:	29758104 	addi	r5,r5,-10748
 4007cf0:	8009883a 	mov	r4,r16
 4007cf4:	40090800 	call	4009080 <strcmp>
 4007cf8:	103ff526 	beq	r2,zero,4007cd0 <__alt_data_end+0xfc007cd0>
 4007cfc:	01410074 	movhi	r5,1025
 4007d00:	29757404 	addi	r5,r5,-10800
 4007d04:	8009883a 	mov	r4,r16
 4007d08:	40090800 	call	4009080 <strcmp>
 4007d0c:	103ff026 	beq	r2,zero,4007cd0 <__alt_data_end+0xfc007cd0>
 4007d10:	0005883a 	mov	r2,zero
 4007d14:	003ff006 	br	4007cd8 <__alt_data_end+0xfc007cd8>
 4007d18:	00810074 	movhi	r2,1025
 4007d1c:	10b58104 	addi	r2,r2,-10748
 4007d20:	f800283a 	ret

04007d24 <__locale_charset>:
 4007d24:	00810074 	movhi	r2,1025
 4007d28:	10b6bc04 	addi	r2,r2,-9488
 4007d2c:	f800283a 	ret

04007d30 <__locale_mb_cur_max>:
 4007d30:	00810074 	movhi	r2,1025
 4007d34:	10bc7304 	addi	r2,r2,-3636
 4007d38:	10800017 	ldw	r2,0(r2)
 4007d3c:	f800283a 	ret

04007d40 <__locale_msgcharset>:
 4007d40:	00810074 	movhi	r2,1025
 4007d44:	10b6b404 	addi	r2,r2,-9520
 4007d48:	f800283a 	ret

04007d4c <__locale_cjk_lang>:
 4007d4c:	0005883a 	mov	r2,zero
 4007d50:	f800283a 	ret

04007d54 <_localeconv_r>:
 4007d54:	00810074 	movhi	r2,1025
 4007d58:	10b6c404 	addi	r2,r2,-9456
 4007d5c:	f800283a 	ret

04007d60 <setlocale>:
 4007d60:	00810074 	movhi	r2,1025
 4007d64:	10bc7204 	addi	r2,r2,-3640
 4007d68:	280d883a 	mov	r6,r5
 4007d6c:	200b883a 	mov	r5,r4
 4007d70:	11000017 	ldw	r4,0(r2)
 4007d74:	4007ca81 	jmpi	4007ca8 <_setlocale_r>

04007d78 <localeconv>:
 4007d78:	00810074 	movhi	r2,1025
 4007d7c:	10b6c404 	addi	r2,r2,-9456
 4007d80:	f800283a 	ret

04007d84 <__smakebuf_r>:
 4007d84:	2880030b 	ldhu	r2,12(r5)
 4007d88:	10c0008c 	andi	r3,r2,2
 4007d8c:	1800411e 	bne	r3,zero,4007e94 <__smakebuf_r+0x110>
 4007d90:	deffec04 	addi	sp,sp,-80
 4007d94:	dc000f15 	stw	r16,60(sp)
 4007d98:	2821883a 	mov	r16,r5
 4007d9c:	2940038f 	ldh	r5,14(r5)
 4007da0:	dc401015 	stw	r17,64(sp)
 4007da4:	dfc01315 	stw	ra,76(sp)
 4007da8:	dcc01215 	stw	r19,72(sp)
 4007dac:	dc801115 	stw	r18,68(sp)
 4007db0:	2023883a 	mov	r17,r4
 4007db4:	28001c16 	blt	r5,zero,4007e28 <__smakebuf_r+0xa4>
 4007db8:	d80d883a 	mov	r6,sp
 4007dbc:	40096ec0 	call	40096ec <_fstat_r>
 4007dc0:	10001816 	blt	r2,zero,4007e24 <__smakebuf_r+0xa0>
 4007dc4:	d8800117 	ldw	r2,4(sp)
 4007dc8:	00e00014 	movui	r3,32768
 4007dcc:	10bc000c 	andi	r2,r2,61440
 4007dd0:	14c80020 	cmpeqi	r19,r2,8192
 4007dd4:	10c03726 	beq	r2,r3,4007eb4 <__smakebuf_r+0x130>
 4007dd8:	80c0030b 	ldhu	r3,12(r16)
 4007ddc:	18c20014 	ori	r3,r3,2048
 4007de0:	80c0030d 	sth	r3,12(r16)
 4007de4:	00c80004 	movi	r3,8192
 4007de8:	10c0521e 	bne	r2,r3,4007f34 <__smakebuf_r+0x1b0>
 4007dec:	8140038f 	ldh	r5,14(r16)
 4007df0:	8809883a 	mov	r4,r17
 4007df4:	40097480 	call	4009748 <_isatty_r>
 4007df8:	10004c26 	beq	r2,zero,4007f2c <__smakebuf_r+0x1a8>
 4007dfc:	8080030b 	ldhu	r2,12(r16)
 4007e00:	80c010c4 	addi	r3,r16,67
 4007e04:	80c00015 	stw	r3,0(r16)
 4007e08:	10800054 	ori	r2,r2,1
 4007e0c:	8080030d 	sth	r2,12(r16)
 4007e10:	00800044 	movi	r2,1
 4007e14:	80c00415 	stw	r3,16(r16)
 4007e18:	80800515 	stw	r2,20(r16)
 4007e1c:	04810004 	movi	r18,1024
 4007e20:	00000706 	br	4007e40 <__smakebuf_r+0xbc>
 4007e24:	8080030b 	ldhu	r2,12(r16)
 4007e28:	10c0200c 	andi	r3,r2,128
 4007e2c:	18001f1e 	bne	r3,zero,4007eac <__smakebuf_r+0x128>
 4007e30:	04810004 	movi	r18,1024
 4007e34:	10820014 	ori	r2,r2,2048
 4007e38:	8080030d 	sth	r2,12(r16)
 4007e3c:	0027883a 	mov	r19,zero
 4007e40:	900b883a 	mov	r5,r18
 4007e44:	8809883a 	mov	r4,r17
 4007e48:	4007f400 	call	4007f40 <_malloc_r>
 4007e4c:	10002c26 	beq	r2,zero,4007f00 <__smakebuf_r+0x17c>
 4007e50:	80c0030b 	ldhu	r3,12(r16)
 4007e54:	01010034 	movhi	r4,1024
 4007e58:	211b1d04 	addi	r4,r4,27764
 4007e5c:	89000f15 	stw	r4,60(r17)
 4007e60:	18c02014 	ori	r3,r3,128
 4007e64:	80c0030d 	sth	r3,12(r16)
 4007e68:	80800015 	stw	r2,0(r16)
 4007e6c:	80800415 	stw	r2,16(r16)
 4007e70:	84800515 	stw	r18,20(r16)
 4007e74:	98001a1e 	bne	r19,zero,4007ee0 <__smakebuf_r+0x15c>
 4007e78:	dfc01317 	ldw	ra,76(sp)
 4007e7c:	dcc01217 	ldw	r19,72(sp)
 4007e80:	dc801117 	ldw	r18,68(sp)
 4007e84:	dc401017 	ldw	r17,64(sp)
 4007e88:	dc000f17 	ldw	r16,60(sp)
 4007e8c:	dec01404 	addi	sp,sp,80
 4007e90:	f800283a 	ret
 4007e94:	288010c4 	addi	r2,r5,67
 4007e98:	28800015 	stw	r2,0(r5)
 4007e9c:	28800415 	stw	r2,16(r5)
 4007ea0:	00800044 	movi	r2,1
 4007ea4:	28800515 	stw	r2,20(r5)
 4007ea8:	f800283a 	ret
 4007eac:	04801004 	movi	r18,64
 4007eb0:	003fe006 	br	4007e34 <__alt_data_end+0xfc007e34>
 4007eb4:	81000a17 	ldw	r4,40(r16)
 4007eb8:	00c10074 	movhi	r3,1025
 4007ebc:	18e40704 	addi	r3,r3,-28644
 4007ec0:	20ffc51e 	bne	r4,r3,4007dd8 <__alt_data_end+0xfc007dd8>
 4007ec4:	8080030b 	ldhu	r2,12(r16)
 4007ec8:	04810004 	movi	r18,1024
 4007ecc:	84801315 	stw	r18,76(r16)
 4007ed0:	1484b03a 	or	r2,r2,r18
 4007ed4:	8080030d 	sth	r2,12(r16)
 4007ed8:	0027883a 	mov	r19,zero
 4007edc:	003fd806 	br	4007e40 <__alt_data_end+0xfc007e40>
 4007ee0:	8140038f 	ldh	r5,14(r16)
 4007ee4:	8809883a 	mov	r4,r17
 4007ee8:	40097480 	call	4009748 <_isatty_r>
 4007eec:	103fe226 	beq	r2,zero,4007e78 <__alt_data_end+0xfc007e78>
 4007ef0:	8080030b 	ldhu	r2,12(r16)
 4007ef4:	10800054 	ori	r2,r2,1
 4007ef8:	8080030d 	sth	r2,12(r16)
 4007efc:	003fde06 	br	4007e78 <__alt_data_end+0xfc007e78>
 4007f00:	8080030b 	ldhu	r2,12(r16)
 4007f04:	10c0800c 	andi	r3,r2,512
 4007f08:	183fdb1e 	bne	r3,zero,4007e78 <__alt_data_end+0xfc007e78>
 4007f0c:	10800094 	ori	r2,r2,2
 4007f10:	80c010c4 	addi	r3,r16,67
 4007f14:	8080030d 	sth	r2,12(r16)
 4007f18:	00800044 	movi	r2,1
 4007f1c:	80c00015 	stw	r3,0(r16)
 4007f20:	80c00415 	stw	r3,16(r16)
 4007f24:	80800515 	stw	r2,20(r16)
 4007f28:	003fd306 	br	4007e78 <__alt_data_end+0xfc007e78>
 4007f2c:	04810004 	movi	r18,1024
 4007f30:	003fc306 	br	4007e40 <__alt_data_end+0xfc007e40>
 4007f34:	0027883a 	mov	r19,zero
 4007f38:	04810004 	movi	r18,1024
 4007f3c:	003fc006 	br	4007e40 <__alt_data_end+0xfc007e40>

04007f40 <_malloc_r>:
 4007f40:	defff504 	addi	sp,sp,-44
 4007f44:	dc800315 	stw	r18,12(sp)
 4007f48:	dfc00a15 	stw	ra,40(sp)
 4007f4c:	df000915 	stw	fp,36(sp)
 4007f50:	ddc00815 	stw	r23,32(sp)
 4007f54:	dd800715 	stw	r22,28(sp)
 4007f58:	dd400615 	stw	r21,24(sp)
 4007f5c:	dd000515 	stw	r20,20(sp)
 4007f60:	dcc00415 	stw	r19,16(sp)
 4007f64:	dc400215 	stw	r17,8(sp)
 4007f68:	dc000115 	stw	r16,4(sp)
 4007f6c:	288002c4 	addi	r2,r5,11
 4007f70:	00c00584 	movi	r3,22
 4007f74:	2025883a 	mov	r18,r4
 4007f78:	18807f2e 	bgeu	r3,r2,4008178 <_malloc_r+0x238>
 4007f7c:	047ffe04 	movi	r17,-8
 4007f80:	1462703a 	and	r17,r2,r17
 4007f84:	8800a316 	blt	r17,zero,4008214 <_malloc_r+0x2d4>
 4007f88:	8940a236 	bltu	r17,r5,4008214 <_malloc_r+0x2d4>
 4007f8c:	400ab780 	call	400ab78 <__malloc_lock>
 4007f90:	00807dc4 	movi	r2,503
 4007f94:	1441e92e 	bgeu	r2,r17,400873c <_malloc_r+0x7fc>
 4007f98:	8804d27a 	srli	r2,r17,9
 4007f9c:	1000a126 	beq	r2,zero,4008224 <_malloc_r+0x2e4>
 4007fa0:	00c00104 	movi	r3,4
 4007fa4:	18811e36 	bltu	r3,r2,4008420 <_malloc_r+0x4e0>
 4007fa8:	8804d1ba 	srli	r2,r17,6
 4007fac:	12000e44 	addi	r8,r2,57
 4007fb0:	11c00e04 	addi	r7,r2,56
 4007fb4:	4209883a 	add	r4,r8,r8
 4007fb8:	04c10074 	movhi	r19,1025
 4007fbc:	2109883a 	add	r4,r4,r4
 4007fc0:	9cf6d204 	addi	r19,r19,-9400
 4007fc4:	2109883a 	add	r4,r4,r4
 4007fc8:	9909883a 	add	r4,r19,r4
 4007fcc:	24000117 	ldw	r16,4(r4)
 4007fd0:	213ffe04 	addi	r4,r4,-8
 4007fd4:	24009726 	beq	r4,r16,4008234 <_malloc_r+0x2f4>
 4007fd8:	80800117 	ldw	r2,4(r16)
 4007fdc:	01bfff04 	movi	r6,-4
 4007fe0:	014003c4 	movi	r5,15
 4007fe4:	1184703a 	and	r2,r2,r6
 4007fe8:	1447c83a 	sub	r3,r2,r17
 4007fec:	28c00716 	blt	r5,r3,400800c <_malloc_r+0xcc>
 4007ff0:	1800920e 	bge	r3,zero,400823c <_malloc_r+0x2fc>
 4007ff4:	84000317 	ldw	r16,12(r16)
 4007ff8:	24008e26 	beq	r4,r16,4008234 <_malloc_r+0x2f4>
 4007ffc:	80800117 	ldw	r2,4(r16)
 4008000:	1184703a 	and	r2,r2,r6
 4008004:	1447c83a 	sub	r3,r2,r17
 4008008:	28fff90e 	bge	r5,r3,4007ff0 <__alt_data_end+0xfc007ff0>
 400800c:	3809883a 	mov	r4,r7
 4008010:	01810074 	movhi	r6,1025
 4008014:	9c000417 	ldw	r16,16(r19)
 4008018:	31b6d204 	addi	r6,r6,-9400
 400801c:	32000204 	addi	r8,r6,8
 4008020:	82013426 	beq	r16,r8,40084f4 <_malloc_r+0x5b4>
 4008024:	80c00117 	ldw	r3,4(r16)
 4008028:	00bfff04 	movi	r2,-4
 400802c:	188e703a 	and	r7,r3,r2
 4008030:	3c45c83a 	sub	r2,r7,r17
 4008034:	00c003c4 	movi	r3,15
 4008038:	18811f16 	blt	r3,r2,40084b8 <_malloc_r+0x578>
 400803c:	32000515 	stw	r8,20(r6)
 4008040:	32000415 	stw	r8,16(r6)
 4008044:	10007f0e 	bge	r2,zero,4008244 <_malloc_r+0x304>
 4008048:	00807fc4 	movi	r2,511
 400804c:	11c0fd36 	bltu	r2,r7,4008444 <_malloc_r+0x504>
 4008050:	3806d0fa 	srli	r3,r7,3
 4008054:	01c00044 	movi	r7,1
 4008058:	30800117 	ldw	r2,4(r6)
 400805c:	19400044 	addi	r5,r3,1
 4008060:	294b883a 	add	r5,r5,r5
 4008064:	1807d0ba 	srai	r3,r3,2
 4008068:	294b883a 	add	r5,r5,r5
 400806c:	294b883a 	add	r5,r5,r5
 4008070:	298b883a 	add	r5,r5,r6
 4008074:	38c6983a 	sll	r3,r7,r3
 4008078:	29c00017 	ldw	r7,0(r5)
 400807c:	2a7ffe04 	addi	r9,r5,-8
 4008080:	1886b03a 	or	r3,r3,r2
 4008084:	82400315 	stw	r9,12(r16)
 4008088:	81c00215 	stw	r7,8(r16)
 400808c:	30c00115 	stw	r3,4(r6)
 4008090:	2c000015 	stw	r16,0(r5)
 4008094:	3c000315 	stw	r16,12(r7)
 4008098:	2005d0ba 	srai	r2,r4,2
 400809c:	01400044 	movi	r5,1
 40080a0:	288a983a 	sll	r5,r5,r2
 40080a4:	19406f36 	bltu	r3,r5,4008264 <_malloc_r+0x324>
 40080a8:	28c4703a 	and	r2,r5,r3
 40080ac:	10000a1e 	bne	r2,zero,40080d8 <_malloc_r+0x198>
 40080b0:	00bfff04 	movi	r2,-4
 40080b4:	294b883a 	add	r5,r5,r5
 40080b8:	2088703a 	and	r4,r4,r2
 40080bc:	28c4703a 	and	r2,r5,r3
 40080c0:	21000104 	addi	r4,r4,4
 40080c4:	1000041e 	bne	r2,zero,40080d8 <_malloc_r+0x198>
 40080c8:	294b883a 	add	r5,r5,r5
 40080cc:	28c4703a 	and	r2,r5,r3
 40080d0:	21000104 	addi	r4,r4,4
 40080d4:	103ffc26 	beq	r2,zero,40080c8 <__alt_data_end+0xfc0080c8>
 40080d8:	02bfff04 	movi	r10,-4
 40080dc:	024003c4 	movi	r9,15
 40080e0:	21800044 	addi	r6,r4,1
 40080e4:	318d883a 	add	r6,r6,r6
 40080e8:	318d883a 	add	r6,r6,r6
 40080ec:	318d883a 	add	r6,r6,r6
 40080f0:	998d883a 	add	r6,r19,r6
 40080f4:	333ffe04 	addi	r12,r6,-8
 40080f8:	2017883a 	mov	r11,r4
 40080fc:	31800104 	addi	r6,r6,4
 4008100:	34000017 	ldw	r16,0(r6)
 4008104:	31fffd04 	addi	r7,r6,-12
 4008108:	81c0041e 	bne	r16,r7,400811c <_malloc_r+0x1dc>
 400810c:	0000fb06 	br	40084fc <_malloc_r+0x5bc>
 4008110:	1801030e 	bge	r3,zero,4008520 <_malloc_r+0x5e0>
 4008114:	84000317 	ldw	r16,12(r16)
 4008118:	81c0f826 	beq	r16,r7,40084fc <_malloc_r+0x5bc>
 400811c:	80800117 	ldw	r2,4(r16)
 4008120:	1284703a 	and	r2,r2,r10
 4008124:	1447c83a 	sub	r3,r2,r17
 4008128:	48fff90e 	bge	r9,r3,4008110 <__alt_data_end+0xfc008110>
 400812c:	80800317 	ldw	r2,12(r16)
 4008130:	81000217 	ldw	r4,8(r16)
 4008134:	89400054 	ori	r5,r17,1
 4008138:	81400115 	stw	r5,4(r16)
 400813c:	20800315 	stw	r2,12(r4)
 4008140:	11000215 	stw	r4,8(r2)
 4008144:	8463883a 	add	r17,r16,r17
 4008148:	9c400515 	stw	r17,20(r19)
 400814c:	9c400415 	stw	r17,16(r19)
 4008150:	18800054 	ori	r2,r3,1
 4008154:	88800115 	stw	r2,4(r17)
 4008158:	8a000315 	stw	r8,12(r17)
 400815c:	8a000215 	stw	r8,8(r17)
 4008160:	88e3883a 	add	r17,r17,r3
 4008164:	88c00015 	stw	r3,0(r17)
 4008168:	9009883a 	mov	r4,r18
 400816c:	400ab9c0 	call	400ab9c <__malloc_unlock>
 4008170:	80800204 	addi	r2,r16,8
 4008174:	00001b06 	br	40081e4 <_malloc_r+0x2a4>
 4008178:	04400404 	movi	r17,16
 400817c:	89402536 	bltu	r17,r5,4008214 <_malloc_r+0x2d4>
 4008180:	400ab780 	call	400ab78 <__malloc_lock>
 4008184:	00800184 	movi	r2,6
 4008188:	01000084 	movi	r4,2
 400818c:	04c10074 	movhi	r19,1025
 4008190:	1085883a 	add	r2,r2,r2
 4008194:	9cf6d204 	addi	r19,r19,-9400
 4008198:	1085883a 	add	r2,r2,r2
 400819c:	9885883a 	add	r2,r19,r2
 40081a0:	14000117 	ldw	r16,4(r2)
 40081a4:	10fffe04 	addi	r3,r2,-8
 40081a8:	80c0d926 	beq	r16,r3,4008510 <_malloc_r+0x5d0>
 40081ac:	80c00117 	ldw	r3,4(r16)
 40081b0:	81000317 	ldw	r4,12(r16)
 40081b4:	00bfff04 	movi	r2,-4
 40081b8:	1884703a 	and	r2,r3,r2
 40081bc:	81400217 	ldw	r5,8(r16)
 40081c0:	8085883a 	add	r2,r16,r2
 40081c4:	10c00117 	ldw	r3,4(r2)
 40081c8:	29000315 	stw	r4,12(r5)
 40081cc:	21400215 	stw	r5,8(r4)
 40081d0:	18c00054 	ori	r3,r3,1
 40081d4:	10c00115 	stw	r3,4(r2)
 40081d8:	9009883a 	mov	r4,r18
 40081dc:	400ab9c0 	call	400ab9c <__malloc_unlock>
 40081e0:	80800204 	addi	r2,r16,8
 40081e4:	dfc00a17 	ldw	ra,40(sp)
 40081e8:	df000917 	ldw	fp,36(sp)
 40081ec:	ddc00817 	ldw	r23,32(sp)
 40081f0:	dd800717 	ldw	r22,28(sp)
 40081f4:	dd400617 	ldw	r21,24(sp)
 40081f8:	dd000517 	ldw	r20,20(sp)
 40081fc:	dcc00417 	ldw	r19,16(sp)
 4008200:	dc800317 	ldw	r18,12(sp)
 4008204:	dc400217 	ldw	r17,8(sp)
 4008208:	dc000117 	ldw	r16,4(sp)
 400820c:	dec00b04 	addi	sp,sp,44
 4008210:	f800283a 	ret
 4008214:	00800304 	movi	r2,12
 4008218:	90800015 	stw	r2,0(r18)
 400821c:	0005883a 	mov	r2,zero
 4008220:	003ff006 	br	40081e4 <__alt_data_end+0xfc0081e4>
 4008224:	01002004 	movi	r4,128
 4008228:	02001004 	movi	r8,64
 400822c:	01c00fc4 	movi	r7,63
 4008230:	003f6106 	br	4007fb8 <__alt_data_end+0xfc007fb8>
 4008234:	4009883a 	mov	r4,r8
 4008238:	003f7506 	br	4008010 <__alt_data_end+0xfc008010>
 400823c:	81000317 	ldw	r4,12(r16)
 4008240:	003fde06 	br	40081bc <__alt_data_end+0xfc0081bc>
 4008244:	81c5883a 	add	r2,r16,r7
 4008248:	11400117 	ldw	r5,4(r2)
 400824c:	9009883a 	mov	r4,r18
 4008250:	29400054 	ori	r5,r5,1
 4008254:	11400115 	stw	r5,4(r2)
 4008258:	400ab9c0 	call	400ab9c <__malloc_unlock>
 400825c:	80800204 	addi	r2,r16,8
 4008260:	003fe006 	br	40081e4 <__alt_data_end+0xfc0081e4>
 4008264:	9c000217 	ldw	r16,8(r19)
 4008268:	00bfff04 	movi	r2,-4
 400826c:	85800117 	ldw	r22,4(r16)
 4008270:	b0ac703a 	and	r22,r22,r2
 4008274:	b4400336 	bltu	r22,r17,4008284 <_malloc_r+0x344>
 4008278:	b445c83a 	sub	r2,r22,r17
 400827c:	00c003c4 	movi	r3,15
 4008280:	18805d16 	blt	r3,r2,40083f8 <_malloc_r+0x4b8>
 4008284:	05c10074 	movhi	r23,1025
 4008288:	00810074 	movhi	r2,1025
 400828c:	10835f04 	addi	r2,r2,3452
 4008290:	bdfc7404 	addi	r23,r23,-3632
 4008294:	15400017 	ldw	r21,0(r2)
 4008298:	b8c00017 	ldw	r3,0(r23)
 400829c:	00bfffc4 	movi	r2,-1
 40082a0:	858d883a 	add	r6,r16,r22
 40082a4:	8d6b883a 	add	r21,r17,r21
 40082a8:	1880ea26 	beq	r3,r2,4008654 <_malloc_r+0x714>
 40082ac:	ad4403c4 	addi	r21,r21,4111
 40082b0:	00bc0004 	movi	r2,-4096
 40082b4:	a8aa703a 	and	r21,r21,r2
 40082b8:	a80b883a 	mov	r5,r21
 40082bc:	9009883a 	mov	r4,r18
 40082c0:	d9800015 	stw	r6,0(sp)
 40082c4:	4008ef00 	call	4008ef0 <_sbrk_r>
 40082c8:	1029883a 	mov	r20,r2
 40082cc:	00bfffc4 	movi	r2,-1
 40082d0:	d9800017 	ldw	r6,0(sp)
 40082d4:	a080e826 	beq	r20,r2,4008678 <_malloc_r+0x738>
 40082d8:	a180a636 	bltu	r20,r6,4008574 <_malloc_r+0x634>
 40082dc:	07010074 	movhi	fp,1025
 40082e0:	e7036704 	addi	fp,fp,3484
 40082e4:	e0800017 	ldw	r2,0(fp)
 40082e8:	a887883a 	add	r3,r21,r2
 40082ec:	e0c00015 	stw	r3,0(fp)
 40082f0:	3500e626 	beq	r6,r20,400868c <_malloc_r+0x74c>
 40082f4:	b9000017 	ldw	r4,0(r23)
 40082f8:	00bfffc4 	movi	r2,-1
 40082fc:	2080ee26 	beq	r4,r2,40086b8 <_malloc_r+0x778>
 4008300:	a185c83a 	sub	r2,r20,r6
 4008304:	10c5883a 	add	r2,r2,r3
 4008308:	e0800015 	stw	r2,0(fp)
 400830c:	a0c001cc 	andi	r3,r20,7
 4008310:	1800bc26 	beq	r3,zero,4008604 <_malloc_r+0x6c4>
 4008314:	a0e9c83a 	sub	r20,r20,r3
 4008318:	00840204 	movi	r2,4104
 400831c:	a5000204 	addi	r20,r20,8
 4008320:	10c7c83a 	sub	r3,r2,r3
 4008324:	a545883a 	add	r2,r20,r21
 4008328:	1083ffcc 	andi	r2,r2,4095
 400832c:	18abc83a 	sub	r21,r3,r2
 4008330:	a80b883a 	mov	r5,r21
 4008334:	9009883a 	mov	r4,r18
 4008338:	4008ef00 	call	4008ef0 <_sbrk_r>
 400833c:	00ffffc4 	movi	r3,-1
 4008340:	10c0e126 	beq	r2,r3,40086c8 <_malloc_r+0x788>
 4008344:	1505c83a 	sub	r2,r2,r20
 4008348:	1545883a 	add	r2,r2,r21
 400834c:	10800054 	ori	r2,r2,1
 4008350:	e0c00017 	ldw	r3,0(fp)
 4008354:	9d000215 	stw	r20,8(r19)
 4008358:	a0800115 	stw	r2,4(r20)
 400835c:	a8c7883a 	add	r3,r21,r3
 4008360:	e0c00015 	stw	r3,0(fp)
 4008364:	84c00e26 	beq	r16,r19,40083a0 <_malloc_r+0x460>
 4008368:	018003c4 	movi	r6,15
 400836c:	3580a72e 	bgeu	r6,r22,400860c <_malloc_r+0x6cc>
 4008370:	81400117 	ldw	r5,4(r16)
 4008374:	013ffe04 	movi	r4,-8
 4008378:	b0bffd04 	addi	r2,r22,-12
 400837c:	1104703a 	and	r2,r2,r4
 4008380:	2900004c 	andi	r4,r5,1
 4008384:	2088b03a 	or	r4,r4,r2
 4008388:	81000115 	stw	r4,4(r16)
 400838c:	01400144 	movi	r5,5
 4008390:	8089883a 	add	r4,r16,r2
 4008394:	21400115 	stw	r5,4(r4)
 4008398:	21400215 	stw	r5,8(r4)
 400839c:	3080cd36 	bltu	r6,r2,40086d4 <_malloc_r+0x794>
 40083a0:	00810074 	movhi	r2,1025
 40083a4:	10835e04 	addi	r2,r2,3448
 40083a8:	11000017 	ldw	r4,0(r2)
 40083ac:	20c0012e 	bgeu	r4,r3,40083b4 <_malloc_r+0x474>
 40083b0:	10c00015 	stw	r3,0(r2)
 40083b4:	00810074 	movhi	r2,1025
 40083b8:	10835d04 	addi	r2,r2,3444
 40083bc:	11000017 	ldw	r4,0(r2)
 40083c0:	9c000217 	ldw	r16,8(r19)
 40083c4:	20c0012e 	bgeu	r4,r3,40083cc <_malloc_r+0x48c>
 40083c8:	10c00015 	stw	r3,0(r2)
 40083cc:	80c00117 	ldw	r3,4(r16)
 40083d0:	00bfff04 	movi	r2,-4
 40083d4:	1886703a 	and	r3,r3,r2
 40083d8:	1c45c83a 	sub	r2,r3,r17
 40083dc:	1c400236 	bltu	r3,r17,40083e8 <_malloc_r+0x4a8>
 40083e0:	00c003c4 	movi	r3,15
 40083e4:	18800416 	blt	r3,r2,40083f8 <_malloc_r+0x4b8>
 40083e8:	9009883a 	mov	r4,r18
 40083ec:	400ab9c0 	call	400ab9c <__malloc_unlock>
 40083f0:	0005883a 	mov	r2,zero
 40083f4:	003f7b06 	br	40081e4 <__alt_data_end+0xfc0081e4>
 40083f8:	88c00054 	ori	r3,r17,1
 40083fc:	80c00115 	stw	r3,4(r16)
 4008400:	8463883a 	add	r17,r16,r17
 4008404:	10800054 	ori	r2,r2,1
 4008408:	9c400215 	stw	r17,8(r19)
 400840c:	88800115 	stw	r2,4(r17)
 4008410:	9009883a 	mov	r4,r18
 4008414:	400ab9c0 	call	400ab9c <__malloc_unlock>
 4008418:	80800204 	addi	r2,r16,8
 400841c:	003f7106 	br	40081e4 <__alt_data_end+0xfc0081e4>
 4008420:	00c00504 	movi	r3,20
 4008424:	18804a2e 	bgeu	r3,r2,4008550 <_malloc_r+0x610>
 4008428:	00c01504 	movi	r3,84
 400842c:	18806e36 	bltu	r3,r2,40085e8 <_malloc_r+0x6a8>
 4008430:	8804d33a 	srli	r2,r17,12
 4008434:	12001bc4 	addi	r8,r2,111
 4008438:	11c01b84 	addi	r7,r2,110
 400843c:	4209883a 	add	r4,r8,r8
 4008440:	003edd06 	br	4007fb8 <__alt_data_end+0xfc007fb8>
 4008444:	3804d27a 	srli	r2,r7,9
 4008448:	00c00104 	movi	r3,4
 400844c:	1880442e 	bgeu	r3,r2,4008560 <_malloc_r+0x620>
 4008450:	00c00504 	movi	r3,20
 4008454:	18808136 	bltu	r3,r2,400865c <_malloc_r+0x71c>
 4008458:	11401704 	addi	r5,r2,92
 400845c:	10c016c4 	addi	r3,r2,91
 4008460:	294b883a 	add	r5,r5,r5
 4008464:	294b883a 	add	r5,r5,r5
 4008468:	294b883a 	add	r5,r5,r5
 400846c:	994b883a 	add	r5,r19,r5
 4008470:	28800017 	ldw	r2,0(r5)
 4008474:	01810074 	movhi	r6,1025
 4008478:	297ffe04 	addi	r5,r5,-8
 400847c:	31b6d204 	addi	r6,r6,-9400
 4008480:	28806526 	beq	r5,r2,4008618 <_malloc_r+0x6d8>
 4008484:	01bfff04 	movi	r6,-4
 4008488:	10c00117 	ldw	r3,4(r2)
 400848c:	1986703a 	and	r3,r3,r6
 4008490:	38c0022e 	bgeu	r7,r3,400849c <_malloc_r+0x55c>
 4008494:	10800217 	ldw	r2,8(r2)
 4008498:	28bffb1e 	bne	r5,r2,4008488 <__alt_data_end+0xfc008488>
 400849c:	11400317 	ldw	r5,12(r2)
 40084a0:	98c00117 	ldw	r3,4(r19)
 40084a4:	81400315 	stw	r5,12(r16)
 40084a8:	80800215 	stw	r2,8(r16)
 40084ac:	2c000215 	stw	r16,8(r5)
 40084b0:	14000315 	stw	r16,12(r2)
 40084b4:	003ef806 	br	4008098 <__alt_data_end+0xfc008098>
 40084b8:	88c00054 	ori	r3,r17,1
 40084bc:	80c00115 	stw	r3,4(r16)
 40084c0:	8463883a 	add	r17,r16,r17
 40084c4:	34400515 	stw	r17,20(r6)
 40084c8:	34400415 	stw	r17,16(r6)
 40084cc:	10c00054 	ori	r3,r2,1
 40084d0:	8a000315 	stw	r8,12(r17)
 40084d4:	8a000215 	stw	r8,8(r17)
 40084d8:	88c00115 	stw	r3,4(r17)
 40084dc:	88a3883a 	add	r17,r17,r2
 40084e0:	88800015 	stw	r2,0(r17)
 40084e4:	9009883a 	mov	r4,r18
 40084e8:	400ab9c0 	call	400ab9c <__malloc_unlock>
 40084ec:	80800204 	addi	r2,r16,8
 40084f0:	003f3c06 	br	40081e4 <__alt_data_end+0xfc0081e4>
 40084f4:	30c00117 	ldw	r3,4(r6)
 40084f8:	003ee706 	br	4008098 <__alt_data_end+0xfc008098>
 40084fc:	5ac00044 	addi	r11,r11,1
 4008500:	588000cc 	andi	r2,r11,3
 4008504:	31800204 	addi	r6,r6,8
 4008508:	103efd1e 	bne	r2,zero,4008100 <__alt_data_end+0xfc008100>
 400850c:	00002406 	br	40085a0 <_malloc_r+0x660>
 4008510:	14000317 	ldw	r16,12(r2)
 4008514:	143f251e 	bne	r2,r16,40081ac <__alt_data_end+0xfc0081ac>
 4008518:	21000084 	addi	r4,r4,2
 400851c:	003ebc06 	br	4008010 <__alt_data_end+0xfc008010>
 4008520:	8085883a 	add	r2,r16,r2
 4008524:	10c00117 	ldw	r3,4(r2)
 4008528:	81000317 	ldw	r4,12(r16)
 400852c:	81400217 	ldw	r5,8(r16)
 4008530:	18c00054 	ori	r3,r3,1
 4008534:	10c00115 	stw	r3,4(r2)
 4008538:	29000315 	stw	r4,12(r5)
 400853c:	21400215 	stw	r5,8(r4)
 4008540:	9009883a 	mov	r4,r18
 4008544:	400ab9c0 	call	400ab9c <__malloc_unlock>
 4008548:	80800204 	addi	r2,r16,8
 400854c:	003f2506 	br	40081e4 <__alt_data_end+0xfc0081e4>
 4008550:	12001704 	addi	r8,r2,92
 4008554:	11c016c4 	addi	r7,r2,91
 4008558:	4209883a 	add	r4,r8,r8
 400855c:	003e9606 	br	4007fb8 <__alt_data_end+0xfc007fb8>
 4008560:	3804d1ba 	srli	r2,r7,6
 4008564:	11400e44 	addi	r5,r2,57
 4008568:	10c00e04 	addi	r3,r2,56
 400856c:	294b883a 	add	r5,r5,r5
 4008570:	003fbc06 	br	4008464 <__alt_data_end+0xfc008464>
 4008574:	84ff5926 	beq	r16,r19,40082dc <__alt_data_end+0xfc0082dc>
 4008578:	00810074 	movhi	r2,1025
 400857c:	10b6d204 	addi	r2,r2,-9400
 4008580:	14000217 	ldw	r16,8(r2)
 4008584:	00bfff04 	movi	r2,-4
 4008588:	80c00117 	ldw	r3,4(r16)
 400858c:	1886703a 	and	r3,r3,r2
 4008590:	003f9106 	br	40083d8 <__alt_data_end+0xfc0083d8>
 4008594:	60800217 	ldw	r2,8(r12)
 4008598:	213fffc4 	addi	r4,r4,-1
 400859c:	1300651e 	bne	r2,r12,4008734 <_malloc_r+0x7f4>
 40085a0:	208000cc 	andi	r2,r4,3
 40085a4:	633ffe04 	addi	r12,r12,-8
 40085a8:	103ffa1e 	bne	r2,zero,4008594 <__alt_data_end+0xfc008594>
 40085ac:	98800117 	ldw	r2,4(r19)
 40085b0:	0146303a 	nor	r3,zero,r5
 40085b4:	1884703a 	and	r2,r3,r2
 40085b8:	98800115 	stw	r2,4(r19)
 40085bc:	294b883a 	add	r5,r5,r5
 40085c0:	117f2836 	bltu	r2,r5,4008264 <__alt_data_end+0xfc008264>
 40085c4:	283f2726 	beq	r5,zero,4008264 <__alt_data_end+0xfc008264>
 40085c8:	2886703a 	and	r3,r5,r2
 40085cc:	5809883a 	mov	r4,r11
 40085d0:	183ec31e 	bne	r3,zero,40080e0 <__alt_data_end+0xfc0080e0>
 40085d4:	294b883a 	add	r5,r5,r5
 40085d8:	2886703a 	and	r3,r5,r2
 40085dc:	21000104 	addi	r4,r4,4
 40085e0:	183ffc26 	beq	r3,zero,40085d4 <__alt_data_end+0xfc0085d4>
 40085e4:	003ebe06 	br	40080e0 <__alt_data_end+0xfc0080e0>
 40085e8:	00c05504 	movi	r3,340
 40085ec:	18801236 	bltu	r3,r2,4008638 <_malloc_r+0x6f8>
 40085f0:	8804d3fa 	srli	r2,r17,15
 40085f4:	12001e04 	addi	r8,r2,120
 40085f8:	11c01dc4 	addi	r7,r2,119
 40085fc:	4209883a 	add	r4,r8,r8
 4008600:	003e6d06 	br	4007fb8 <__alt_data_end+0xfc007fb8>
 4008604:	00c40004 	movi	r3,4096
 4008608:	003f4606 	br	4008324 <__alt_data_end+0xfc008324>
 400860c:	00800044 	movi	r2,1
 4008610:	a0800115 	stw	r2,4(r20)
 4008614:	003f7406 	br	40083e8 <__alt_data_end+0xfc0083e8>
 4008618:	1805d0ba 	srai	r2,r3,2
 400861c:	01c00044 	movi	r7,1
 4008620:	30c00117 	ldw	r3,4(r6)
 4008624:	388e983a 	sll	r7,r7,r2
 4008628:	2805883a 	mov	r2,r5
 400862c:	38c6b03a 	or	r3,r7,r3
 4008630:	30c00115 	stw	r3,4(r6)
 4008634:	003f9b06 	br	40084a4 <__alt_data_end+0xfc0084a4>
 4008638:	00c15504 	movi	r3,1364
 400863c:	18801a36 	bltu	r3,r2,40086a8 <_malloc_r+0x768>
 4008640:	8804d4ba 	srli	r2,r17,18
 4008644:	12001f44 	addi	r8,r2,125
 4008648:	11c01f04 	addi	r7,r2,124
 400864c:	4209883a 	add	r4,r8,r8
 4008650:	003e5906 	br	4007fb8 <__alt_data_end+0xfc007fb8>
 4008654:	ad400404 	addi	r21,r21,16
 4008658:	003f1706 	br	40082b8 <__alt_data_end+0xfc0082b8>
 400865c:	00c01504 	movi	r3,84
 4008660:	18802336 	bltu	r3,r2,40086f0 <_malloc_r+0x7b0>
 4008664:	3804d33a 	srli	r2,r7,12
 4008668:	11401bc4 	addi	r5,r2,111
 400866c:	10c01b84 	addi	r3,r2,110
 4008670:	294b883a 	add	r5,r5,r5
 4008674:	003f7b06 	br	4008464 <__alt_data_end+0xfc008464>
 4008678:	9c000217 	ldw	r16,8(r19)
 400867c:	00bfff04 	movi	r2,-4
 4008680:	80c00117 	ldw	r3,4(r16)
 4008684:	1886703a 	and	r3,r3,r2
 4008688:	003f5306 	br	40083d8 <__alt_data_end+0xfc0083d8>
 400868c:	3083ffcc 	andi	r2,r6,4095
 4008690:	103f181e 	bne	r2,zero,40082f4 <__alt_data_end+0xfc0082f4>
 4008694:	99000217 	ldw	r4,8(r19)
 4008698:	b545883a 	add	r2,r22,r21
 400869c:	10800054 	ori	r2,r2,1
 40086a0:	20800115 	stw	r2,4(r4)
 40086a4:	003f3e06 	br	40083a0 <__alt_data_end+0xfc0083a0>
 40086a8:	01003f84 	movi	r4,254
 40086ac:	02001fc4 	movi	r8,127
 40086b0:	01c01f84 	movi	r7,126
 40086b4:	003e4006 	br	4007fb8 <__alt_data_end+0xfc007fb8>
 40086b8:	00810074 	movhi	r2,1025
 40086bc:	10bc7404 	addi	r2,r2,-3632
 40086c0:	15000015 	stw	r20,0(r2)
 40086c4:	003f1106 	br	400830c <__alt_data_end+0xfc00830c>
 40086c8:	00800044 	movi	r2,1
 40086cc:	002b883a 	mov	r21,zero
 40086d0:	003f1f06 	br	4008350 <__alt_data_end+0xfc008350>
 40086d4:	81400204 	addi	r5,r16,8
 40086d8:	9009883a 	mov	r4,r18
 40086dc:	40073480 	call	4007348 <_free_r>
 40086e0:	00810074 	movhi	r2,1025
 40086e4:	10836704 	addi	r2,r2,3484
 40086e8:	10c00017 	ldw	r3,0(r2)
 40086ec:	003f2c06 	br	40083a0 <__alt_data_end+0xfc0083a0>
 40086f0:	00c05504 	movi	r3,340
 40086f4:	18800536 	bltu	r3,r2,400870c <_malloc_r+0x7cc>
 40086f8:	3804d3fa 	srli	r2,r7,15
 40086fc:	11401e04 	addi	r5,r2,120
 4008700:	10c01dc4 	addi	r3,r2,119
 4008704:	294b883a 	add	r5,r5,r5
 4008708:	003f5606 	br	4008464 <__alt_data_end+0xfc008464>
 400870c:	00c15504 	movi	r3,1364
 4008710:	18800536 	bltu	r3,r2,4008728 <_malloc_r+0x7e8>
 4008714:	3804d4ba 	srli	r2,r7,18
 4008718:	11401f44 	addi	r5,r2,125
 400871c:	10c01f04 	addi	r3,r2,124
 4008720:	294b883a 	add	r5,r5,r5
 4008724:	003f4f06 	br	4008464 <__alt_data_end+0xfc008464>
 4008728:	01403f84 	movi	r5,254
 400872c:	00c01f84 	movi	r3,126
 4008730:	003f4c06 	br	4008464 <__alt_data_end+0xfc008464>
 4008734:	98800117 	ldw	r2,4(r19)
 4008738:	003fa006 	br	40085bc <__alt_data_end+0xfc0085bc>
 400873c:	8808d0fa 	srli	r4,r17,3
 4008740:	20800044 	addi	r2,r4,1
 4008744:	1085883a 	add	r2,r2,r2
 4008748:	003e9006 	br	400818c <__alt_data_end+0xfc00818c>

0400874c <memchr>:
 400874c:	208000cc 	andi	r2,r4,3
 4008750:	280f883a 	mov	r7,r5
 4008754:	10003426 	beq	r2,zero,4008828 <memchr+0xdc>
 4008758:	30bfffc4 	addi	r2,r6,-1
 400875c:	30001a26 	beq	r6,zero,40087c8 <memchr+0x7c>
 4008760:	20c00003 	ldbu	r3,0(r4)
 4008764:	29803fcc 	andi	r6,r5,255
 4008768:	30c0051e 	bne	r6,r3,4008780 <memchr+0x34>
 400876c:	00001806 	br	40087d0 <memchr+0x84>
 4008770:	10001526 	beq	r2,zero,40087c8 <memchr+0x7c>
 4008774:	20c00003 	ldbu	r3,0(r4)
 4008778:	10bfffc4 	addi	r2,r2,-1
 400877c:	30c01426 	beq	r6,r3,40087d0 <memchr+0x84>
 4008780:	21000044 	addi	r4,r4,1
 4008784:	20c000cc 	andi	r3,r4,3
 4008788:	183ff91e 	bne	r3,zero,4008770 <__alt_data_end+0xfc008770>
 400878c:	020000c4 	movi	r8,3
 4008790:	40801136 	bltu	r8,r2,40087d8 <memchr+0x8c>
 4008794:	10000c26 	beq	r2,zero,40087c8 <memchr+0x7c>
 4008798:	20c00003 	ldbu	r3,0(r4)
 400879c:	29403fcc 	andi	r5,r5,255
 40087a0:	28c00b26 	beq	r5,r3,40087d0 <memchr+0x84>
 40087a4:	20c00044 	addi	r3,r4,1
 40087a8:	39803fcc 	andi	r6,r7,255
 40087ac:	2089883a 	add	r4,r4,r2
 40087b0:	00000306 	br	40087c0 <memchr+0x74>
 40087b4:	18c00044 	addi	r3,r3,1
 40087b8:	197fffc3 	ldbu	r5,-1(r3)
 40087bc:	31400526 	beq	r6,r5,40087d4 <memchr+0x88>
 40087c0:	1805883a 	mov	r2,r3
 40087c4:	20fffb1e 	bne	r4,r3,40087b4 <__alt_data_end+0xfc0087b4>
 40087c8:	0005883a 	mov	r2,zero
 40087cc:	f800283a 	ret
 40087d0:	2005883a 	mov	r2,r4
 40087d4:	f800283a 	ret
 40087d8:	28c03fcc 	andi	r3,r5,255
 40087dc:	1812923a 	slli	r9,r3,8
 40087e0:	02ffbff4 	movhi	r11,65279
 40087e4:	02a02074 	movhi	r10,32897
 40087e8:	48d2b03a 	or	r9,r9,r3
 40087ec:	4806943a 	slli	r3,r9,16
 40087f0:	5affbfc4 	addi	r11,r11,-257
 40087f4:	52a02004 	addi	r10,r10,-32640
 40087f8:	48d2b03a 	or	r9,r9,r3
 40087fc:	20c00017 	ldw	r3,0(r4)
 4008800:	48c6f03a 	xor	r3,r9,r3
 4008804:	1acd883a 	add	r6,r3,r11
 4008808:	00c6303a 	nor	r3,zero,r3
 400880c:	30c6703a 	and	r3,r6,r3
 4008810:	1a86703a 	and	r3,r3,r10
 4008814:	183fe01e 	bne	r3,zero,4008798 <__alt_data_end+0xfc008798>
 4008818:	10bfff04 	addi	r2,r2,-4
 400881c:	21000104 	addi	r4,r4,4
 4008820:	40bff636 	bltu	r8,r2,40087fc <__alt_data_end+0xfc0087fc>
 4008824:	003fdb06 	br	4008794 <__alt_data_end+0xfc008794>
 4008828:	3005883a 	mov	r2,r6
 400882c:	003fd706 	br	400878c <__alt_data_end+0xfc00878c>

04008830 <memmove>:
 4008830:	2005883a 	mov	r2,r4
 4008834:	29000b2e 	bgeu	r5,r4,4008864 <memmove+0x34>
 4008838:	298f883a 	add	r7,r5,r6
 400883c:	21c0092e 	bgeu	r4,r7,4008864 <memmove+0x34>
 4008840:	2187883a 	add	r3,r4,r6
 4008844:	198bc83a 	sub	r5,r3,r6
 4008848:	30004826 	beq	r6,zero,400896c <memmove+0x13c>
 400884c:	39ffffc4 	addi	r7,r7,-1
 4008850:	39000003 	ldbu	r4,0(r7)
 4008854:	18ffffc4 	addi	r3,r3,-1
 4008858:	19000005 	stb	r4,0(r3)
 400885c:	28fffb1e 	bne	r5,r3,400884c <__alt_data_end+0xfc00884c>
 4008860:	f800283a 	ret
 4008864:	00c003c4 	movi	r3,15
 4008868:	1980412e 	bgeu	r3,r6,4008970 <memmove+0x140>
 400886c:	2886b03a 	or	r3,r5,r2
 4008870:	18c000cc 	andi	r3,r3,3
 4008874:	1800401e 	bne	r3,zero,4008978 <memmove+0x148>
 4008878:	33fffc04 	addi	r15,r6,-16
 400887c:	781ed13a 	srli	r15,r15,4
 4008880:	28c00104 	addi	r3,r5,4
 4008884:	13400104 	addi	r13,r2,4
 4008888:	781c913a 	slli	r14,r15,4
 400888c:	2b000204 	addi	r12,r5,8
 4008890:	12c00204 	addi	r11,r2,8
 4008894:	73800504 	addi	r14,r14,20
 4008898:	2a800304 	addi	r10,r5,12
 400889c:	12400304 	addi	r9,r2,12
 40088a0:	2b9d883a 	add	r14,r5,r14
 40088a4:	2811883a 	mov	r8,r5
 40088a8:	100f883a 	mov	r7,r2
 40088ac:	41000017 	ldw	r4,0(r8)
 40088b0:	39c00404 	addi	r7,r7,16
 40088b4:	18c00404 	addi	r3,r3,16
 40088b8:	393ffc15 	stw	r4,-16(r7)
 40088bc:	193ffc17 	ldw	r4,-16(r3)
 40088c0:	6b400404 	addi	r13,r13,16
 40088c4:	5ac00404 	addi	r11,r11,16
 40088c8:	693ffc15 	stw	r4,-16(r13)
 40088cc:	61000017 	ldw	r4,0(r12)
 40088d0:	4a400404 	addi	r9,r9,16
 40088d4:	42000404 	addi	r8,r8,16
 40088d8:	593ffc15 	stw	r4,-16(r11)
 40088dc:	51000017 	ldw	r4,0(r10)
 40088e0:	63000404 	addi	r12,r12,16
 40088e4:	52800404 	addi	r10,r10,16
 40088e8:	493ffc15 	stw	r4,-16(r9)
 40088ec:	1bbfef1e 	bne	r3,r14,40088ac <__alt_data_end+0xfc0088ac>
 40088f0:	79000044 	addi	r4,r15,1
 40088f4:	2008913a 	slli	r4,r4,4
 40088f8:	328003cc 	andi	r10,r6,15
 40088fc:	02c000c4 	movi	r11,3
 4008900:	1107883a 	add	r3,r2,r4
 4008904:	290b883a 	add	r5,r5,r4
 4008908:	5a801e2e 	bgeu	r11,r10,4008984 <memmove+0x154>
 400890c:	1813883a 	mov	r9,r3
 4008910:	2811883a 	mov	r8,r5
 4008914:	500f883a 	mov	r7,r10
 4008918:	41000017 	ldw	r4,0(r8)
 400891c:	4a400104 	addi	r9,r9,4
 4008920:	39ffff04 	addi	r7,r7,-4
 4008924:	493fff15 	stw	r4,-4(r9)
 4008928:	42000104 	addi	r8,r8,4
 400892c:	59fffa36 	bltu	r11,r7,4008918 <__alt_data_end+0xfc008918>
 4008930:	513fff04 	addi	r4,r10,-4
 4008934:	2008d0ba 	srli	r4,r4,2
 4008938:	318000cc 	andi	r6,r6,3
 400893c:	21000044 	addi	r4,r4,1
 4008940:	2109883a 	add	r4,r4,r4
 4008944:	2109883a 	add	r4,r4,r4
 4008948:	1907883a 	add	r3,r3,r4
 400894c:	290b883a 	add	r5,r5,r4
 4008950:	30000b26 	beq	r6,zero,4008980 <memmove+0x150>
 4008954:	198d883a 	add	r6,r3,r6
 4008958:	29c00003 	ldbu	r7,0(r5)
 400895c:	18c00044 	addi	r3,r3,1
 4008960:	29400044 	addi	r5,r5,1
 4008964:	19ffffc5 	stb	r7,-1(r3)
 4008968:	19bffb1e 	bne	r3,r6,4008958 <__alt_data_end+0xfc008958>
 400896c:	f800283a 	ret
 4008970:	1007883a 	mov	r3,r2
 4008974:	003ff606 	br	4008950 <__alt_data_end+0xfc008950>
 4008978:	1007883a 	mov	r3,r2
 400897c:	003ff506 	br	4008954 <__alt_data_end+0xfc008954>
 4008980:	f800283a 	ret
 4008984:	500d883a 	mov	r6,r10
 4008988:	003ff106 	br	4008950 <__alt_data_end+0xfc008950>

0400898c <_realloc_r>:
 400898c:	defff604 	addi	sp,sp,-40
 4008990:	dc800215 	stw	r18,8(sp)
 4008994:	dfc00915 	stw	ra,36(sp)
 4008998:	df000815 	stw	fp,32(sp)
 400899c:	ddc00715 	stw	r23,28(sp)
 40089a0:	dd800615 	stw	r22,24(sp)
 40089a4:	dd400515 	stw	r21,20(sp)
 40089a8:	dd000415 	stw	r20,16(sp)
 40089ac:	dcc00315 	stw	r19,12(sp)
 40089b0:	dc400115 	stw	r17,4(sp)
 40089b4:	dc000015 	stw	r16,0(sp)
 40089b8:	3025883a 	mov	r18,r6
 40089bc:	2800b726 	beq	r5,zero,4008c9c <_realloc_r+0x310>
 40089c0:	282b883a 	mov	r21,r5
 40089c4:	2029883a 	mov	r20,r4
 40089c8:	400ab780 	call	400ab78 <__malloc_lock>
 40089cc:	a8bfff17 	ldw	r2,-4(r21)
 40089d0:	043fff04 	movi	r16,-4
 40089d4:	90c002c4 	addi	r3,r18,11
 40089d8:	01000584 	movi	r4,22
 40089dc:	acfffe04 	addi	r19,r21,-8
 40089e0:	1420703a 	and	r16,r2,r16
 40089e4:	20c0332e 	bgeu	r4,r3,4008ab4 <_realloc_r+0x128>
 40089e8:	047ffe04 	movi	r17,-8
 40089ec:	1c62703a 	and	r17,r3,r17
 40089f0:	8807883a 	mov	r3,r17
 40089f4:	88005816 	blt	r17,zero,4008b58 <_realloc_r+0x1cc>
 40089f8:	8c805736 	bltu	r17,r18,4008b58 <_realloc_r+0x1cc>
 40089fc:	80c0300e 	bge	r16,r3,4008ac0 <_realloc_r+0x134>
 4008a00:	07010074 	movhi	fp,1025
 4008a04:	e736d204 	addi	fp,fp,-9400
 4008a08:	e1c00217 	ldw	r7,8(fp)
 4008a0c:	9c09883a 	add	r4,r19,r16
 4008a10:	22000117 	ldw	r8,4(r4)
 4008a14:	21c06326 	beq	r4,r7,4008ba4 <_realloc_r+0x218>
 4008a18:	017fff84 	movi	r5,-2
 4008a1c:	414a703a 	and	r5,r8,r5
 4008a20:	214b883a 	add	r5,r4,r5
 4008a24:	29800117 	ldw	r6,4(r5)
 4008a28:	3180004c 	andi	r6,r6,1
 4008a2c:	30003f26 	beq	r6,zero,4008b2c <_realloc_r+0x1a0>
 4008a30:	1080004c 	andi	r2,r2,1
 4008a34:	10008326 	beq	r2,zero,4008c44 <_realloc_r+0x2b8>
 4008a38:	900b883a 	mov	r5,r18
 4008a3c:	a009883a 	mov	r4,r20
 4008a40:	4007f400 	call	4007f40 <_malloc_r>
 4008a44:	1025883a 	mov	r18,r2
 4008a48:	10011e26 	beq	r2,zero,4008ec4 <_realloc_r+0x538>
 4008a4c:	a93fff17 	ldw	r4,-4(r21)
 4008a50:	10fffe04 	addi	r3,r2,-8
 4008a54:	00bfff84 	movi	r2,-2
 4008a58:	2084703a 	and	r2,r4,r2
 4008a5c:	9885883a 	add	r2,r19,r2
 4008a60:	1880ee26 	beq	r3,r2,4008e1c <_realloc_r+0x490>
 4008a64:	81bfff04 	addi	r6,r16,-4
 4008a68:	00800904 	movi	r2,36
 4008a6c:	1180b836 	bltu	r2,r6,4008d50 <_realloc_r+0x3c4>
 4008a70:	00c004c4 	movi	r3,19
 4008a74:	19809636 	bltu	r3,r6,4008cd0 <_realloc_r+0x344>
 4008a78:	9005883a 	mov	r2,r18
 4008a7c:	a807883a 	mov	r3,r21
 4008a80:	19000017 	ldw	r4,0(r3)
 4008a84:	11000015 	stw	r4,0(r2)
 4008a88:	19000117 	ldw	r4,4(r3)
 4008a8c:	11000115 	stw	r4,4(r2)
 4008a90:	18c00217 	ldw	r3,8(r3)
 4008a94:	10c00215 	stw	r3,8(r2)
 4008a98:	a80b883a 	mov	r5,r21
 4008a9c:	a009883a 	mov	r4,r20
 4008aa0:	40073480 	call	4007348 <_free_r>
 4008aa4:	a009883a 	mov	r4,r20
 4008aa8:	400ab9c0 	call	400ab9c <__malloc_unlock>
 4008aac:	9005883a 	mov	r2,r18
 4008ab0:	00001206 	br	4008afc <_realloc_r+0x170>
 4008ab4:	00c00404 	movi	r3,16
 4008ab8:	1823883a 	mov	r17,r3
 4008abc:	003fce06 	br	40089f8 <__alt_data_end+0xfc0089f8>
 4008ac0:	a825883a 	mov	r18,r21
 4008ac4:	8445c83a 	sub	r2,r16,r17
 4008ac8:	00c003c4 	movi	r3,15
 4008acc:	18802636 	bltu	r3,r2,4008b68 <_realloc_r+0x1dc>
 4008ad0:	99800117 	ldw	r6,4(r19)
 4008ad4:	9c07883a 	add	r3,r19,r16
 4008ad8:	3180004c 	andi	r6,r6,1
 4008adc:	3420b03a 	or	r16,r6,r16
 4008ae0:	9c000115 	stw	r16,4(r19)
 4008ae4:	18800117 	ldw	r2,4(r3)
 4008ae8:	10800054 	ori	r2,r2,1
 4008aec:	18800115 	stw	r2,4(r3)
 4008af0:	a009883a 	mov	r4,r20
 4008af4:	400ab9c0 	call	400ab9c <__malloc_unlock>
 4008af8:	9005883a 	mov	r2,r18
 4008afc:	dfc00917 	ldw	ra,36(sp)
 4008b00:	df000817 	ldw	fp,32(sp)
 4008b04:	ddc00717 	ldw	r23,28(sp)
 4008b08:	dd800617 	ldw	r22,24(sp)
 4008b0c:	dd400517 	ldw	r21,20(sp)
 4008b10:	dd000417 	ldw	r20,16(sp)
 4008b14:	dcc00317 	ldw	r19,12(sp)
 4008b18:	dc800217 	ldw	r18,8(sp)
 4008b1c:	dc400117 	ldw	r17,4(sp)
 4008b20:	dc000017 	ldw	r16,0(sp)
 4008b24:	dec00a04 	addi	sp,sp,40
 4008b28:	f800283a 	ret
 4008b2c:	017fff04 	movi	r5,-4
 4008b30:	414a703a 	and	r5,r8,r5
 4008b34:	814d883a 	add	r6,r16,r5
 4008b38:	30c01f16 	blt	r6,r3,4008bb8 <_realloc_r+0x22c>
 4008b3c:	20800317 	ldw	r2,12(r4)
 4008b40:	20c00217 	ldw	r3,8(r4)
 4008b44:	a825883a 	mov	r18,r21
 4008b48:	3021883a 	mov	r16,r6
 4008b4c:	18800315 	stw	r2,12(r3)
 4008b50:	10c00215 	stw	r3,8(r2)
 4008b54:	003fdb06 	br	4008ac4 <__alt_data_end+0xfc008ac4>
 4008b58:	00800304 	movi	r2,12
 4008b5c:	a0800015 	stw	r2,0(r20)
 4008b60:	0005883a 	mov	r2,zero
 4008b64:	003fe506 	br	4008afc <__alt_data_end+0xfc008afc>
 4008b68:	98c00117 	ldw	r3,4(r19)
 4008b6c:	9c4b883a 	add	r5,r19,r17
 4008b70:	11000054 	ori	r4,r2,1
 4008b74:	18c0004c 	andi	r3,r3,1
 4008b78:	1c62b03a 	or	r17,r3,r17
 4008b7c:	9c400115 	stw	r17,4(r19)
 4008b80:	29000115 	stw	r4,4(r5)
 4008b84:	2885883a 	add	r2,r5,r2
 4008b88:	10c00117 	ldw	r3,4(r2)
 4008b8c:	29400204 	addi	r5,r5,8
 4008b90:	a009883a 	mov	r4,r20
 4008b94:	18c00054 	ori	r3,r3,1
 4008b98:	10c00115 	stw	r3,4(r2)
 4008b9c:	40073480 	call	4007348 <_free_r>
 4008ba0:	003fd306 	br	4008af0 <__alt_data_end+0xfc008af0>
 4008ba4:	017fff04 	movi	r5,-4
 4008ba8:	414a703a 	and	r5,r8,r5
 4008bac:	89800404 	addi	r6,r17,16
 4008bb0:	8151883a 	add	r8,r16,r5
 4008bb4:	4180590e 	bge	r8,r6,4008d1c <_realloc_r+0x390>
 4008bb8:	1080004c 	andi	r2,r2,1
 4008bbc:	103f9e1e 	bne	r2,zero,4008a38 <__alt_data_end+0xfc008a38>
 4008bc0:	adbffe17 	ldw	r22,-8(r21)
 4008bc4:	00bfff04 	movi	r2,-4
 4008bc8:	9dadc83a 	sub	r22,r19,r22
 4008bcc:	b1800117 	ldw	r6,4(r22)
 4008bd0:	3084703a 	and	r2,r6,r2
 4008bd4:	20002026 	beq	r4,zero,4008c58 <_realloc_r+0x2cc>
 4008bd8:	80af883a 	add	r23,r16,r2
 4008bdc:	b96f883a 	add	r23,r23,r5
 4008be0:	21c05f26 	beq	r4,r7,4008d60 <_realloc_r+0x3d4>
 4008be4:	b8c01c16 	blt	r23,r3,4008c58 <_realloc_r+0x2cc>
 4008be8:	20800317 	ldw	r2,12(r4)
 4008bec:	20c00217 	ldw	r3,8(r4)
 4008bf0:	81bfff04 	addi	r6,r16,-4
 4008bf4:	01000904 	movi	r4,36
 4008bf8:	18800315 	stw	r2,12(r3)
 4008bfc:	10c00215 	stw	r3,8(r2)
 4008c00:	b0c00217 	ldw	r3,8(r22)
 4008c04:	b0800317 	ldw	r2,12(r22)
 4008c08:	b4800204 	addi	r18,r22,8
 4008c0c:	18800315 	stw	r2,12(r3)
 4008c10:	10c00215 	stw	r3,8(r2)
 4008c14:	21801b36 	bltu	r4,r6,4008c84 <_realloc_r+0x2f8>
 4008c18:	008004c4 	movi	r2,19
 4008c1c:	1180352e 	bgeu	r2,r6,4008cf4 <_realloc_r+0x368>
 4008c20:	a8800017 	ldw	r2,0(r21)
 4008c24:	b0800215 	stw	r2,8(r22)
 4008c28:	a8800117 	ldw	r2,4(r21)
 4008c2c:	b0800315 	stw	r2,12(r22)
 4008c30:	008006c4 	movi	r2,27
 4008c34:	11807f36 	bltu	r2,r6,4008e34 <_realloc_r+0x4a8>
 4008c38:	b0800404 	addi	r2,r22,16
 4008c3c:	ad400204 	addi	r21,r21,8
 4008c40:	00002d06 	br	4008cf8 <_realloc_r+0x36c>
 4008c44:	adbffe17 	ldw	r22,-8(r21)
 4008c48:	00bfff04 	movi	r2,-4
 4008c4c:	9dadc83a 	sub	r22,r19,r22
 4008c50:	b1000117 	ldw	r4,4(r22)
 4008c54:	2084703a 	and	r2,r4,r2
 4008c58:	b03f7726 	beq	r22,zero,4008a38 <__alt_data_end+0xfc008a38>
 4008c5c:	80af883a 	add	r23,r16,r2
 4008c60:	b8ff7516 	blt	r23,r3,4008a38 <__alt_data_end+0xfc008a38>
 4008c64:	b0800317 	ldw	r2,12(r22)
 4008c68:	b0c00217 	ldw	r3,8(r22)
 4008c6c:	81bfff04 	addi	r6,r16,-4
 4008c70:	01000904 	movi	r4,36
 4008c74:	18800315 	stw	r2,12(r3)
 4008c78:	10c00215 	stw	r3,8(r2)
 4008c7c:	b4800204 	addi	r18,r22,8
 4008c80:	21bfe52e 	bgeu	r4,r6,4008c18 <__alt_data_end+0xfc008c18>
 4008c84:	a80b883a 	mov	r5,r21
 4008c88:	9009883a 	mov	r4,r18
 4008c8c:	40088300 	call	4008830 <memmove>
 4008c90:	b821883a 	mov	r16,r23
 4008c94:	b027883a 	mov	r19,r22
 4008c98:	003f8a06 	br	4008ac4 <__alt_data_end+0xfc008ac4>
 4008c9c:	300b883a 	mov	r5,r6
 4008ca0:	dfc00917 	ldw	ra,36(sp)
 4008ca4:	df000817 	ldw	fp,32(sp)
 4008ca8:	ddc00717 	ldw	r23,28(sp)
 4008cac:	dd800617 	ldw	r22,24(sp)
 4008cb0:	dd400517 	ldw	r21,20(sp)
 4008cb4:	dd000417 	ldw	r20,16(sp)
 4008cb8:	dcc00317 	ldw	r19,12(sp)
 4008cbc:	dc800217 	ldw	r18,8(sp)
 4008cc0:	dc400117 	ldw	r17,4(sp)
 4008cc4:	dc000017 	ldw	r16,0(sp)
 4008cc8:	dec00a04 	addi	sp,sp,40
 4008ccc:	4007f401 	jmpi	4007f40 <_malloc_r>
 4008cd0:	a8c00017 	ldw	r3,0(r21)
 4008cd4:	90c00015 	stw	r3,0(r18)
 4008cd8:	a8c00117 	ldw	r3,4(r21)
 4008cdc:	90c00115 	stw	r3,4(r18)
 4008ce0:	00c006c4 	movi	r3,27
 4008ce4:	19804536 	bltu	r3,r6,4008dfc <_realloc_r+0x470>
 4008ce8:	90800204 	addi	r2,r18,8
 4008cec:	a8c00204 	addi	r3,r21,8
 4008cf0:	003f6306 	br	4008a80 <__alt_data_end+0xfc008a80>
 4008cf4:	9005883a 	mov	r2,r18
 4008cf8:	a8c00017 	ldw	r3,0(r21)
 4008cfc:	b821883a 	mov	r16,r23
 4008d00:	b027883a 	mov	r19,r22
 4008d04:	10c00015 	stw	r3,0(r2)
 4008d08:	a8c00117 	ldw	r3,4(r21)
 4008d0c:	10c00115 	stw	r3,4(r2)
 4008d10:	a8c00217 	ldw	r3,8(r21)
 4008d14:	10c00215 	stw	r3,8(r2)
 4008d18:	003f6a06 	br	4008ac4 <__alt_data_end+0xfc008ac4>
 4008d1c:	9c67883a 	add	r19,r19,r17
 4008d20:	4445c83a 	sub	r2,r8,r17
 4008d24:	e4c00215 	stw	r19,8(fp)
 4008d28:	10800054 	ori	r2,r2,1
 4008d2c:	98800115 	stw	r2,4(r19)
 4008d30:	a8bfff17 	ldw	r2,-4(r21)
 4008d34:	a009883a 	mov	r4,r20
 4008d38:	1080004c 	andi	r2,r2,1
 4008d3c:	1462b03a 	or	r17,r2,r17
 4008d40:	ac7fff15 	stw	r17,-4(r21)
 4008d44:	400ab9c0 	call	400ab9c <__malloc_unlock>
 4008d48:	a805883a 	mov	r2,r21
 4008d4c:	003f6b06 	br	4008afc <__alt_data_end+0xfc008afc>
 4008d50:	a80b883a 	mov	r5,r21
 4008d54:	9009883a 	mov	r4,r18
 4008d58:	40088300 	call	4008830 <memmove>
 4008d5c:	003f4e06 	br	4008a98 <__alt_data_end+0xfc008a98>
 4008d60:	89000404 	addi	r4,r17,16
 4008d64:	b93fbc16 	blt	r23,r4,4008c58 <__alt_data_end+0xfc008c58>
 4008d68:	b0800317 	ldw	r2,12(r22)
 4008d6c:	b0c00217 	ldw	r3,8(r22)
 4008d70:	81bfff04 	addi	r6,r16,-4
 4008d74:	01000904 	movi	r4,36
 4008d78:	18800315 	stw	r2,12(r3)
 4008d7c:	10c00215 	stw	r3,8(r2)
 4008d80:	b4800204 	addi	r18,r22,8
 4008d84:	21804336 	bltu	r4,r6,4008e94 <_realloc_r+0x508>
 4008d88:	008004c4 	movi	r2,19
 4008d8c:	11803f2e 	bgeu	r2,r6,4008e8c <_realloc_r+0x500>
 4008d90:	a8800017 	ldw	r2,0(r21)
 4008d94:	b0800215 	stw	r2,8(r22)
 4008d98:	a8800117 	ldw	r2,4(r21)
 4008d9c:	b0800315 	stw	r2,12(r22)
 4008da0:	008006c4 	movi	r2,27
 4008da4:	11803f36 	bltu	r2,r6,4008ea4 <_realloc_r+0x518>
 4008da8:	b0800404 	addi	r2,r22,16
 4008dac:	ad400204 	addi	r21,r21,8
 4008db0:	a8c00017 	ldw	r3,0(r21)
 4008db4:	10c00015 	stw	r3,0(r2)
 4008db8:	a8c00117 	ldw	r3,4(r21)
 4008dbc:	10c00115 	stw	r3,4(r2)
 4008dc0:	a8c00217 	ldw	r3,8(r21)
 4008dc4:	10c00215 	stw	r3,8(r2)
 4008dc8:	b447883a 	add	r3,r22,r17
 4008dcc:	bc45c83a 	sub	r2,r23,r17
 4008dd0:	e0c00215 	stw	r3,8(fp)
 4008dd4:	10800054 	ori	r2,r2,1
 4008dd8:	18800115 	stw	r2,4(r3)
 4008ddc:	b0800117 	ldw	r2,4(r22)
 4008de0:	a009883a 	mov	r4,r20
 4008de4:	1080004c 	andi	r2,r2,1
 4008de8:	1462b03a 	or	r17,r2,r17
 4008dec:	b4400115 	stw	r17,4(r22)
 4008df0:	400ab9c0 	call	400ab9c <__malloc_unlock>
 4008df4:	9005883a 	mov	r2,r18
 4008df8:	003f4006 	br	4008afc <__alt_data_end+0xfc008afc>
 4008dfc:	a8c00217 	ldw	r3,8(r21)
 4008e00:	90c00215 	stw	r3,8(r18)
 4008e04:	a8c00317 	ldw	r3,12(r21)
 4008e08:	90c00315 	stw	r3,12(r18)
 4008e0c:	30801126 	beq	r6,r2,4008e54 <_realloc_r+0x4c8>
 4008e10:	90800404 	addi	r2,r18,16
 4008e14:	a8c00404 	addi	r3,r21,16
 4008e18:	003f1906 	br	4008a80 <__alt_data_end+0xfc008a80>
 4008e1c:	90ffff17 	ldw	r3,-4(r18)
 4008e20:	00bfff04 	movi	r2,-4
 4008e24:	a825883a 	mov	r18,r21
 4008e28:	1884703a 	and	r2,r3,r2
 4008e2c:	80a1883a 	add	r16,r16,r2
 4008e30:	003f2406 	br	4008ac4 <__alt_data_end+0xfc008ac4>
 4008e34:	a8800217 	ldw	r2,8(r21)
 4008e38:	b0800415 	stw	r2,16(r22)
 4008e3c:	a8800317 	ldw	r2,12(r21)
 4008e40:	b0800515 	stw	r2,20(r22)
 4008e44:	31000a26 	beq	r6,r4,4008e70 <_realloc_r+0x4e4>
 4008e48:	b0800604 	addi	r2,r22,24
 4008e4c:	ad400404 	addi	r21,r21,16
 4008e50:	003fa906 	br	4008cf8 <__alt_data_end+0xfc008cf8>
 4008e54:	a9000417 	ldw	r4,16(r21)
 4008e58:	90800604 	addi	r2,r18,24
 4008e5c:	a8c00604 	addi	r3,r21,24
 4008e60:	91000415 	stw	r4,16(r18)
 4008e64:	a9000517 	ldw	r4,20(r21)
 4008e68:	91000515 	stw	r4,20(r18)
 4008e6c:	003f0406 	br	4008a80 <__alt_data_end+0xfc008a80>
 4008e70:	a8c00417 	ldw	r3,16(r21)
 4008e74:	ad400604 	addi	r21,r21,24
 4008e78:	b0800804 	addi	r2,r22,32
 4008e7c:	b0c00615 	stw	r3,24(r22)
 4008e80:	a8ffff17 	ldw	r3,-4(r21)
 4008e84:	b0c00715 	stw	r3,28(r22)
 4008e88:	003f9b06 	br	4008cf8 <__alt_data_end+0xfc008cf8>
 4008e8c:	9005883a 	mov	r2,r18
 4008e90:	003fc706 	br	4008db0 <__alt_data_end+0xfc008db0>
 4008e94:	a80b883a 	mov	r5,r21
 4008e98:	9009883a 	mov	r4,r18
 4008e9c:	40088300 	call	4008830 <memmove>
 4008ea0:	003fc906 	br	4008dc8 <__alt_data_end+0xfc008dc8>
 4008ea4:	a8800217 	ldw	r2,8(r21)
 4008ea8:	b0800415 	stw	r2,16(r22)
 4008eac:	a8800317 	ldw	r2,12(r21)
 4008eb0:	b0800515 	stw	r2,20(r22)
 4008eb4:	31000726 	beq	r6,r4,4008ed4 <_realloc_r+0x548>
 4008eb8:	b0800604 	addi	r2,r22,24
 4008ebc:	ad400404 	addi	r21,r21,16
 4008ec0:	003fbb06 	br	4008db0 <__alt_data_end+0xfc008db0>
 4008ec4:	a009883a 	mov	r4,r20
 4008ec8:	400ab9c0 	call	400ab9c <__malloc_unlock>
 4008ecc:	0005883a 	mov	r2,zero
 4008ed0:	003f0a06 	br	4008afc <__alt_data_end+0xfc008afc>
 4008ed4:	a8c00417 	ldw	r3,16(r21)
 4008ed8:	ad400604 	addi	r21,r21,24
 4008edc:	b0800804 	addi	r2,r22,32
 4008ee0:	b0c00615 	stw	r3,24(r22)
 4008ee4:	a8ffff17 	ldw	r3,-4(r21)
 4008ee8:	b0c00715 	stw	r3,28(r22)
 4008eec:	003fb006 	br	4008db0 <__alt_data_end+0xfc008db0>

04008ef0 <_sbrk_r>:
 4008ef0:	defffd04 	addi	sp,sp,-12
 4008ef4:	dc000015 	stw	r16,0(sp)
 4008ef8:	04010074 	movhi	r16,1025
 4008efc:	dc400115 	stw	r17,4(sp)
 4008f00:	84035904 	addi	r16,r16,3428
 4008f04:	2023883a 	mov	r17,r4
 4008f08:	2809883a 	mov	r4,r5
 4008f0c:	dfc00215 	stw	ra,8(sp)
 4008f10:	80000015 	stw	zero,0(r16)
 4008f14:	400ad840 	call	400ad84 <sbrk>
 4008f18:	00ffffc4 	movi	r3,-1
 4008f1c:	10c00526 	beq	r2,r3,4008f34 <_sbrk_r+0x44>
 4008f20:	dfc00217 	ldw	ra,8(sp)
 4008f24:	dc400117 	ldw	r17,4(sp)
 4008f28:	dc000017 	ldw	r16,0(sp)
 4008f2c:	dec00304 	addi	sp,sp,12
 4008f30:	f800283a 	ret
 4008f34:	80c00017 	ldw	r3,0(r16)
 4008f38:	183ff926 	beq	r3,zero,4008f20 <__alt_data_end+0xfc008f20>
 4008f3c:	88c00015 	stw	r3,0(r17)
 4008f40:	003ff706 	br	4008f20 <__alt_data_end+0xfc008f20>

04008f44 <__sread>:
 4008f44:	defffe04 	addi	sp,sp,-8
 4008f48:	dc000015 	stw	r16,0(sp)
 4008f4c:	2821883a 	mov	r16,r5
 4008f50:	2940038f 	ldh	r5,14(r5)
 4008f54:	dfc00115 	stw	ra,4(sp)
 4008f58:	40097fc0 	call	40097fc <_read_r>
 4008f5c:	10000716 	blt	r2,zero,4008f7c <__sread+0x38>
 4008f60:	80c01417 	ldw	r3,80(r16)
 4008f64:	1887883a 	add	r3,r3,r2
 4008f68:	80c01415 	stw	r3,80(r16)
 4008f6c:	dfc00117 	ldw	ra,4(sp)
 4008f70:	dc000017 	ldw	r16,0(sp)
 4008f74:	dec00204 	addi	sp,sp,8
 4008f78:	f800283a 	ret
 4008f7c:	80c0030b 	ldhu	r3,12(r16)
 4008f80:	18fbffcc 	andi	r3,r3,61439
 4008f84:	80c0030d 	sth	r3,12(r16)
 4008f88:	dfc00117 	ldw	ra,4(sp)
 4008f8c:	dc000017 	ldw	r16,0(sp)
 4008f90:	dec00204 	addi	sp,sp,8
 4008f94:	f800283a 	ret

04008f98 <__seofread>:
 4008f98:	0005883a 	mov	r2,zero
 4008f9c:	f800283a 	ret

04008fa0 <__swrite>:
 4008fa0:	2880030b 	ldhu	r2,12(r5)
 4008fa4:	defffb04 	addi	sp,sp,-20
 4008fa8:	dcc00315 	stw	r19,12(sp)
 4008fac:	dc800215 	stw	r18,8(sp)
 4008fb0:	dc400115 	stw	r17,4(sp)
 4008fb4:	dc000015 	stw	r16,0(sp)
 4008fb8:	dfc00415 	stw	ra,16(sp)
 4008fbc:	10c0400c 	andi	r3,r2,256
 4008fc0:	2821883a 	mov	r16,r5
 4008fc4:	2023883a 	mov	r17,r4
 4008fc8:	3025883a 	mov	r18,r6
 4008fcc:	3827883a 	mov	r19,r7
 4008fd0:	18000526 	beq	r3,zero,4008fe8 <__swrite+0x48>
 4008fd4:	2940038f 	ldh	r5,14(r5)
 4008fd8:	01c00084 	movi	r7,2
 4008fdc:	000d883a 	mov	r6,zero
 4008fe0:	400979c0 	call	400979c <_lseek_r>
 4008fe4:	8080030b 	ldhu	r2,12(r16)
 4008fe8:	8140038f 	ldh	r5,14(r16)
 4008fec:	10bbffcc 	andi	r2,r2,61439
 4008ff0:	980f883a 	mov	r7,r19
 4008ff4:	900d883a 	mov	r6,r18
 4008ff8:	8809883a 	mov	r4,r17
 4008ffc:	8080030d 	sth	r2,12(r16)
 4009000:	dfc00417 	ldw	ra,16(sp)
 4009004:	dcc00317 	ldw	r19,12(sp)
 4009008:	dc800217 	ldw	r18,8(sp)
 400900c:	dc400117 	ldw	r17,4(sp)
 4009010:	dc000017 	ldw	r16,0(sp)
 4009014:	dec00504 	addi	sp,sp,20
 4009018:	40095341 	jmpi	4009534 <_write_r>

0400901c <__sseek>:
 400901c:	defffe04 	addi	sp,sp,-8
 4009020:	dc000015 	stw	r16,0(sp)
 4009024:	2821883a 	mov	r16,r5
 4009028:	2940038f 	ldh	r5,14(r5)
 400902c:	dfc00115 	stw	ra,4(sp)
 4009030:	400979c0 	call	400979c <_lseek_r>
 4009034:	00ffffc4 	movi	r3,-1
 4009038:	10c00826 	beq	r2,r3,400905c <__sseek+0x40>
 400903c:	80c0030b 	ldhu	r3,12(r16)
 4009040:	80801415 	stw	r2,80(r16)
 4009044:	18c40014 	ori	r3,r3,4096
 4009048:	80c0030d 	sth	r3,12(r16)
 400904c:	dfc00117 	ldw	ra,4(sp)
 4009050:	dc000017 	ldw	r16,0(sp)
 4009054:	dec00204 	addi	sp,sp,8
 4009058:	f800283a 	ret
 400905c:	80c0030b 	ldhu	r3,12(r16)
 4009060:	18fbffcc 	andi	r3,r3,61439
 4009064:	80c0030d 	sth	r3,12(r16)
 4009068:	dfc00117 	ldw	ra,4(sp)
 400906c:	dc000017 	ldw	r16,0(sp)
 4009070:	dec00204 	addi	sp,sp,8
 4009074:	f800283a 	ret

04009078 <__sclose>:
 4009078:	2940038f 	ldh	r5,14(r5)
 400907c:	40095941 	jmpi	4009594 <_close_r>

04009080 <strcmp>:
 4009080:	2144b03a 	or	r2,r4,r5
 4009084:	108000cc 	andi	r2,r2,3
 4009088:	1000171e 	bne	r2,zero,40090e8 <strcmp+0x68>
 400908c:	20800017 	ldw	r2,0(r4)
 4009090:	28c00017 	ldw	r3,0(r5)
 4009094:	10c0141e 	bne	r2,r3,40090e8 <strcmp+0x68>
 4009098:	027fbff4 	movhi	r9,65279
 400909c:	4a7fbfc4 	addi	r9,r9,-257
 40090a0:	0086303a 	nor	r3,zero,r2
 40090a4:	02202074 	movhi	r8,32897
 40090a8:	1245883a 	add	r2,r2,r9
 40090ac:	42202004 	addi	r8,r8,-32640
 40090b0:	10c4703a 	and	r2,r2,r3
 40090b4:	1204703a 	and	r2,r2,r8
 40090b8:	10000226 	beq	r2,zero,40090c4 <strcmp+0x44>
 40090bc:	00002306 	br	400914c <strcmp+0xcc>
 40090c0:	1000221e 	bne	r2,zero,400914c <strcmp+0xcc>
 40090c4:	21000104 	addi	r4,r4,4
 40090c8:	20c00017 	ldw	r3,0(r4)
 40090cc:	29400104 	addi	r5,r5,4
 40090d0:	29800017 	ldw	r6,0(r5)
 40090d4:	1a4f883a 	add	r7,r3,r9
 40090d8:	00c4303a 	nor	r2,zero,r3
 40090dc:	3884703a 	and	r2,r7,r2
 40090e0:	1204703a 	and	r2,r2,r8
 40090e4:	19bff626 	beq	r3,r6,40090c0 <__alt_data_end+0xfc0090c0>
 40090e8:	20800003 	ldbu	r2,0(r4)
 40090ec:	10c03fcc 	andi	r3,r2,255
 40090f0:	18c0201c 	xori	r3,r3,128
 40090f4:	18ffe004 	addi	r3,r3,-128
 40090f8:	18000c26 	beq	r3,zero,400912c <strcmp+0xac>
 40090fc:	29800007 	ldb	r6,0(r5)
 4009100:	19800326 	beq	r3,r6,4009110 <strcmp+0x90>
 4009104:	00001306 	br	4009154 <strcmp+0xd4>
 4009108:	29800007 	ldb	r6,0(r5)
 400910c:	11800b1e 	bne	r2,r6,400913c <strcmp+0xbc>
 4009110:	21000044 	addi	r4,r4,1
 4009114:	20c00003 	ldbu	r3,0(r4)
 4009118:	29400044 	addi	r5,r5,1
 400911c:	18803fcc 	andi	r2,r3,255
 4009120:	1080201c 	xori	r2,r2,128
 4009124:	10bfe004 	addi	r2,r2,-128
 4009128:	103ff71e 	bne	r2,zero,4009108 <__alt_data_end+0xfc009108>
 400912c:	0007883a 	mov	r3,zero
 4009130:	28800003 	ldbu	r2,0(r5)
 4009134:	1885c83a 	sub	r2,r3,r2
 4009138:	f800283a 	ret
 400913c:	28800003 	ldbu	r2,0(r5)
 4009140:	18c03fcc 	andi	r3,r3,255
 4009144:	1885c83a 	sub	r2,r3,r2
 4009148:	f800283a 	ret
 400914c:	0005883a 	mov	r2,zero
 4009150:	f800283a 	ret
 4009154:	10c03fcc 	andi	r3,r2,255
 4009158:	003ff506 	br	4009130 <__alt_data_end+0xfc009130>

0400915c <strlen>:
 400915c:	208000cc 	andi	r2,r4,3
 4009160:	10002026 	beq	r2,zero,40091e4 <strlen+0x88>
 4009164:	20800007 	ldb	r2,0(r4)
 4009168:	10002026 	beq	r2,zero,40091ec <strlen+0x90>
 400916c:	2005883a 	mov	r2,r4
 4009170:	00000206 	br	400917c <strlen+0x20>
 4009174:	10c00007 	ldb	r3,0(r2)
 4009178:	18001826 	beq	r3,zero,40091dc <strlen+0x80>
 400917c:	10800044 	addi	r2,r2,1
 4009180:	10c000cc 	andi	r3,r2,3
 4009184:	183ffb1e 	bne	r3,zero,4009174 <__alt_data_end+0xfc009174>
 4009188:	10c00017 	ldw	r3,0(r2)
 400918c:	01ffbff4 	movhi	r7,65279
 4009190:	39ffbfc4 	addi	r7,r7,-257
 4009194:	00ca303a 	nor	r5,zero,r3
 4009198:	01a02074 	movhi	r6,32897
 400919c:	19c7883a 	add	r3,r3,r7
 40091a0:	31a02004 	addi	r6,r6,-32640
 40091a4:	1946703a 	and	r3,r3,r5
 40091a8:	1986703a 	and	r3,r3,r6
 40091ac:	1800091e 	bne	r3,zero,40091d4 <strlen+0x78>
 40091b0:	10800104 	addi	r2,r2,4
 40091b4:	10c00017 	ldw	r3,0(r2)
 40091b8:	19cb883a 	add	r5,r3,r7
 40091bc:	00c6303a 	nor	r3,zero,r3
 40091c0:	28c6703a 	and	r3,r5,r3
 40091c4:	1986703a 	and	r3,r3,r6
 40091c8:	183ff926 	beq	r3,zero,40091b0 <__alt_data_end+0xfc0091b0>
 40091cc:	00000106 	br	40091d4 <strlen+0x78>
 40091d0:	10800044 	addi	r2,r2,1
 40091d4:	10c00007 	ldb	r3,0(r2)
 40091d8:	183ffd1e 	bne	r3,zero,40091d0 <__alt_data_end+0xfc0091d0>
 40091dc:	1105c83a 	sub	r2,r2,r4
 40091e0:	f800283a 	ret
 40091e4:	2005883a 	mov	r2,r4
 40091e8:	003fe706 	br	4009188 <__alt_data_end+0xfc009188>
 40091ec:	0005883a 	mov	r2,zero
 40091f0:	f800283a 	ret

040091f4 <__swbuf_r>:
 40091f4:	defffb04 	addi	sp,sp,-20
 40091f8:	dcc00315 	stw	r19,12(sp)
 40091fc:	dc800215 	stw	r18,8(sp)
 4009200:	dc000015 	stw	r16,0(sp)
 4009204:	dfc00415 	stw	ra,16(sp)
 4009208:	dc400115 	stw	r17,4(sp)
 400920c:	2025883a 	mov	r18,r4
 4009210:	2827883a 	mov	r19,r5
 4009214:	3021883a 	mov	r16,r6
 4009218:	20000226 	beq	r4,zero,4009224 <__swbuf_r+0x30>
 400921c:	20800e17 	ldw	r2,56(r4)
 4009220:	10004226 	beq	r2,zero,400932c <__swbuf_r+0x138>
 4009224:	80800617 	ldw	r2,24(r16)
 4009228:	8100030b 	ldhu	r4,12(r16)
 400922c:	80800215 	stw	r2,8(r16)
 4009230:	2080020c 	andi	r2,r4,8
 4009234:	10003626 	beq	r2,zero,4009310 <__swbuf_r+0x11c>
 4009238:	80c00417 	ldw	r3,16(r16)
 400923c:	18003426 	beq	r3,zero,4009310 <__swbuf_r+0x11c>
 4009240:	2088000c 	andi	r2,r4,8192
 4009244:	9c403fcc 	andi	r17,r19,255
 4009248:	10001a26 	beq	r2,zero,40092b4 <__swbuf_r+0xc0>
 400924c:	80800017 	ldw	r2,0(r16)
 4009250:	81000517 	ldw	r4,20(r16)
 4009254:	10c7c83a 	sub	r3,r2,r3
 4009258:	1900200e 	bge	r3,r4,40092dc <__swbuf_r+0xe8>
 400925c:	18c00044 	addi	r3,r3,1
 4009260:	81000217 	ldw	r4,8(r16)
 4009264:	11400044 	addi	r5,r2,1
 4009268:	81400015 	stw	r5,0(r16)
 400926c:	213fffc4 	addi	r4,r4,-1
 4009270:	81000215 	stw	r4,8(r16)
 4009274:	14c00005 	stb	r19,0(r2)
 4009278:	80800517 	ldw	r2,20(r16)
 400927c:	10c01e26 	beq	r2,r3,40092f8 <__swbuf_r+0x104>
 4009280:	8080030b 	ldhu	r2,12(r16)
 4009284:	1080004c 	andi	r2,r2,1
 4009288:	10000226 	beq	r2,zero,4009294 <__swbuf_r+0xa0>
 400928c:	00800284 	movi	r2,10
 4009290:	88801926 	beq	r17,r2,40092f8 <__swbuf_r+0x104>
 4009294:	8805883a 	mov	r2,r17
 4009298:	dfc00417 	ldw	ra,16(sp)
 400929c:	dcc00317 	ldw	r19,12(sp)
 40092a0:	dc800217 	ldw	r18,8(sp)
 40092a4:	dc400117 	ldw	r17,4(sp)
 40092a8:	dc000017 	ldw	r16,0(sp)
 40092ac:	dec00504 	addi	sp,sp,20
 40092b0:	f800283a 	ret
 40092b4:	81401917 	ldw	r5,100(r16)
 40092b8:	00b7ffc4 	movi	r2,-8193
 40092bc:	21080014 	ori	r4,r4,8192
 40092c0:	2884703a 	and	r2,r5,r2
 40092c4:	80801915 	stw	r2,100(r16)
 40092c8:	80800017 	ldw	r2,0(r16)
 40092cc:	8100030d 	sth	r4,12(r16)
 40092d0:	81000517 	ldw	r4,20(r16)
 40092d4:	10c7c83a 	sub	r3,r2,r3
 40092d8:	193fe016 	blt	r3,r4,400925c <__alt_data_end+0xfc00925c>
 40092dc:	800b883a 	mov	r5,r16
 40092e0:	9009883a 	mov	r4,r18
 40092e4:	4006be00 	call	4006be0 <_fflush_r>
 40092e8:	1000071e 	bne	r2,zero,4009308 <__swbuf_r+0x114>
 40092ec:	80800017 	ldw	r2,0(r16)
 40092f0:	00c00044 	movi	r3,1
 40092f4:	003fda06 	br	4009260 <__alt_data_end+0xfc009260>
 40092f8:	800b883a 	mov	r5,r16
 40092fc:	9009883a 	mov	r4,r18
 4009300:	4006be00 	call	4006be0 <_fflush_r>
 4009304:	103fe326 	beq	r2,zero,4009294 <__alt_data_end+0xfc009294>
 4009308:	00bfffc4 	movi	r2,-1
 400930c:	003fe206 	br	4009298 <__alt_data_end+0xfc009298>
 4009310:	800b883a 	mov	r5,r16
 4009314:	9009883a 	mov	r4,r18
 4009318:	40068700 	call	4006870 <__swsetup_r>
 400931c:	103ffa1e 	bne	r2,zero,4009308 <__alt_data_end+0xfc009308>
 4009320:	8100030b 	ldhu	r4,12(r16)
 4009324:	80c00417 	ldw	r3,16(r16)
 4009328:	003fc506 	br	4009240 <__alt_data_end+0xfc009240>
 400932c:	4006fcc0 	call	4006fcc <__sinit>
 4009330:	003fbc06 	br	4009224 <__alt_data_end+0xfc009224>

04009334 <__swbuf>:
 4009334:	00810074 	movhi	r2,1025
 4009338:	10bc7204 	addi	r2,r2,-3640
 400933c:	280d883a 	mov	r6,r5
 4009340:	200b883a 	mov	r5,r4
 4009344:	11000017 	ldw	r4,0(r2)
 4009348:	40091f41 	jmpi	40091f4 <__swbuf_r>

0400934c <_wcrtomb_r>:
 400934c:	defff604 	addi	sp,sp,-40
 4009350:	00810074 	movhi	r2,1025
 4009354:	dc800815 	stw	r18,32(sp)
 4009358:	dc400715 	stw	r17,28(sp)
 400935c:	dc000615 	stw	r16,24(sp)
 4009360:	10bc7604 	addi	r2,r2,-3624
 4009364:	dfc00915 	stw	ra,36(sp)
 4009368:	2021883a 	mov	r16,r4
 400936c:	3823883a 	mov	r17,r7
 4009370:	14800017 	ldw	r18,0(r2)
 4009374:	28001426 	beq	r5,zero,40093c8 <_wcrtomb_r+0x7c>
 4009378:	d9400415 	stw	r5,16(sp)
 400937c:	d9800515 	stw	r6,20(sp)
 4009380:	4007d240 	call	4007d24 <__locale_charset>
 4009384:	d9800517 	ldw	r6,20(sp)
 4009388:	d9400417 	ldw	r5,16(sp)
 400938c:	100f883a 	mov	r7,r2
 4009390:	dc400015 	stw	r17,0(sp)
 4009394:	8009883a 	mov	r4,r16
 4009398:	903ee83a 	callr	r18
 400939c:	00ffffc4 	movi	r3,-1
 40093a0:	10c0031e 	bne	r2,r3,40093b0 <_wcrtomb_r+0x64>
 40093a4:	88000015 	stw	zero,0(r17)
 40093a8:	00c02284 	movi	r3,138
 40093ac:	80c00015 	stw	r3,0(r16)
 40093b0:	dfc00917 	ldw	ra,36(sp)
 40093b4:	dc800817 	ldw	r18,32(sp)
 40093b8:	dc400717 	ldw	r17,28(sp)
 40093bc:	dc000617 	ldw	r16,24(sp)
 40093c0:	dec00a04 	addi	sp,sp,40
 40093c4:	f800283a 	ret
 40093c8:	4007d240 	call	4007d24 <__locale_charset>
 40093cc:	100f883a 	mov	r7,r2
 40093d0:	dc400015 	stw	r17,0(sp)
 40093d4:	000d883a 	mov	r6,zero
 40093d8:	d9400104 	addi	r5,sp,4
 40093dc:	8009883a 	mov	r4,r16
 40093e0:	903ee83a 	callr	r18
 40093e4:	003fed06 	br	400939c <__alt_data_end+0xfc00939c>

040093e8 <wcrtomb>:
 40093e8:	defff604 	addi	sp,sp,-40
 40093ec:	00810074 	movhi	r2,1025
 40093f0:	dc800615 	stw	r18,24(sp)
 40093f4:	dc400515 	stw	r17,20(sp)
 40093f8:	10bc7204 	addi	r2,r2,-3640
 40093fc:	dfc00915 	stw	ra,36(sp)
 4009400:	dd000815 	stw	r20,32(sp)
 4009404:	dcc00715 	stw	r19,28(sp)
 4009408:	dc000415 	stw	r16,16(sp)
 400940c:	3025883a 	mov	r18,r6
 4009410:	14400017 	ldw	r17,0(r2)
 4009414:	20001926 	beq	r4,zero,400947c <wcrtomb+0x94>
 4009418:	00810074 	movhi	r2,1025
 400941c:	10bc7604 	addi	r2,r2,-3624
 4009420:	15000017 	ldw	r20,0(r2)
 4009424:	2021883a 	mov	r16,r4
 4009428:	2827883a 	mov	r19,r5
 400942c:	4007d240 	call	4007d24 <__locale_charset>
 4009430:	100f883a 	mov	r7,r2
 4009434:	dc800015 	stw	r18,0(sp)
 4009438:	980d883a 	mov	r6,r19
 400943c:	800b883a 	mov	r5,r16
 4009440:	8809883a 	mov	r4,r17
 4009444:	a03ee83a 	callr	r20
 4009448:	00ffffc4 	movi	r3,-1
 400944c:	10c0031e 	bne	r2,r3,400945c <wcrtomb+0x74>
 4009450:	90000015 	stw	zero,0(r18)
 4009454:	00c02284 	movi	r3,138
 4009458:	88c00015 	stw	r3,0(r17)
 400945c:	dfc00917 	ldw	ra,36(sp)
 4009460:	dd000817 	ldw	r20,32(sp)
 4009464:	dcc00717 	ldw	r19,28(sp)
 4009468:	dc800617 	ldw	r18,24(sp)
 400946c:	dc400517 	ldw	r17,20(sp)
 4009470:	dc000417 	ldw	r16,16(sp)
 4009474:	dec00a04 	addi	sp,sp,40
 4009478:	f800283a 	ret
 400947c:	00810074 	movhi	r2,1025
 4009480:	10bc7604 	addi	r2,r2,-3624
 4009484:	14000017 	ldw	r16,0(r2)
 4009488:	4007d240 	call	4007d24 <__locale_charset>
 400948c:	100f883a 	mov	r7,r2
 4009490:	dc800015 	stw	r18,0(sp)
 4009494:	000d883a 	mov	r6,zero
 4009498:	d9400104 	addi	r5,sp,4
 400949c:	8809883a 	mov	r4,r17
 40094a0:	803ee83a 	callr	r16
 40094a4:	003fe806 	br	4009448 <__alt_data_end+0xfc009448>

040094a8 <__ascii_wctomb>:
 40094a8:	28000526 	beq	r5,zero,40094c0 <__ascii_wctomb+0x18>
 40094ac:	00803fc4 	movi	r2,255
 40094b0:	11800536 	bltu	r2,r6,40094c8 <__ascii_wctomb+0x20>
 40094b4:	29800005 	stb	r6,0(r5)
 40094b8:	00800044 	movi	r2,1
 40094bc:	f800283a 	ret
 40094c0:	0005883a 	mov	r2,zero
 40094c4:	f800283a 	ret
 40094c8:	00802284 	movi	r2,138
 40094cc:	20800015 	stw	r2,0(r4)
 40094d0:	00bfffc4 	movi	r2,-1
 40094d4:	f800283a 	ret

040094d8 <_wctomb_r>:
 40094d8:	00810074 	movhi	r2,1025
 40094dc:	defff904 	addi	sp,sp,-28
 40094e0:	10bc7604 	addi	r2,r2,-3624
 40094e4:	dfc00615 	stw	ra,24(sp)
 40094e8:	dc400515 	stw	r17,20(sp)
 40094ec:	dc000415 	stw	r16,16(sp)
 40094f0:	3823883a 	mov	r17,r7
 40094f4:	14000017 	ldw	r16,0(r2)
 40094f8:	d9000115 	stw	r4,4(sp)
 40094fc:	d9400215 	stw	r5,8(sp)
 4009500:	d9800315 	stw	r6,12(sp)
 4009504:	4007d240 	call	4007d24 <__locale_charset>
 4009508:	d9800317 	ldw	r6,12(sp)
 400950c:	d9400217 	ldw	r5,8(sp)
 4009510:	d9000117 	ldw	r4,4(sp)
 4009514:	100f883a 	mov	r7,r2
 4009518:	dc400015 	stw	r17,0(sp)
 400951c:	803ee83a 	callr	r16
 4009520:	dfc00617 	ldw	ra,24(sp)
 4009524:	dc400517 	ldw	r17,20(sp)
 4009528:	dc000417 	ldw	r16,16(sp)
 400952c:	dec00704 	addi	sp,sp,28
 4009530:	f800283a 	ret

04009534 <_write_r>:
 4009534:	defffd04 	addi	sp,sp,-12
 4009538:	2805883a 	mov	r2,r5
 400953c:	dc000015 	stw	r16,0(sp)
 4009540:	04010074 	movhi	r16,1025
 4009544:	dc400115 	stw	r17,4(sp)
 4009548:	300b883a 	mov	r5,r6
 400954c:	84035904 	addi	r16,r16,3428
 4009550:	2023883a 	mov	r17,r4
 4009554:	380d883a 	mov	r6,r7
 4009558:	1009883a 	mov	r4,r2
 400955c:	dfc00215 	stw	ra,8(sp)
 4009560:	80000015 	stw	zero,0(r16)
 4009564:	400aea00 	call	400aea0 <write>
 4009568:	00ffffc4 	movi	r3,-1
 400956c:	10c00526 	beq	r2,r3,4009584 <_write_r+0x50>
 4009570:	dfc00217 	ldw	ra,8(sp)
 4009574:	dc400117 	ldw	r17,4(sp)
 4009578:	dc000017 	ldw	r16,0(sp)
 400957c:	dec00304 	addi	sp,sp,12
 4009580:	f800283a 	ret
 4009584:	80c00017 	ldw	r3,0(r16)
 4009588:	183ff926 	beq	r3,zero,4009570 <__alt_data_end+0xfc009570>
 400958c:	88c00015 	stw	r3,0(r17)
 4009590:	003ff706 	br	4009570 <__alt_data_end+0xfc009570>

04009594 <_close_r>:
 4009594:	defffd04 	addi	sp,sp,-12
 4009598:	dc000015 	stw	r16,0(sp)
 400959c:	04010074 	movhi	r16,1025
 40095a0:	dc400115 	stw	r17,4(sp)
 40095a4:	84035904 	addi	r16,r16,3428
 40095a8:	2023883a 	mov	r17,r4
 40095ac:	2809883a 	mov	r4,r5
 40095b0:	dfc00215 	stw	ra,8(sp)
 40095b4:	80000015 	stw	zero,0(r16)
 40095b8:	400a4580 	call	400a458 <close>
 40095bc:	00ffffc4 	movi	r3,-1
 40095c0:	10c00526 	beq	r2,r3,40095d8 <_close_r+0x44>
 40095c4:	dfc00217 	ldw	ra,8(sp)
 40095c8:	dc400117 	ldw	r17,4(sp)
 40095cc:	dc000017 	ldw	r16,0(sp)
 40095d0:	dec00304 	addi	sp,sp,12
 40095d4:	f800283a 	ret
 40095d8:	80c00017 	ldw	r3,0(r16)
 40095dc:	183ff926 	beq	r3,zero,40095c4 <__alt_data_end+0xfc0095c4>
 40095e0:	88c00015 	stw	r3,0(r17)
 40095e4:	003ff706 	br	40095c4 <__alt_data_end+0xfc0095c4>

040095e8 <_fclose_r>:
 40095e8:	28003926 	beq	r5,zero,40096d0 <_fclose_r+0xe8>
 40095ec:	defffc04 	addi	sp,sp,-16
 40095f0:	dc400115 	stw	r17,4(sp)
 40095f4:	dc000015 	stw	r16,0(sp)
 40095f8:	dfc00315 	stw	ra,12(sp)
 40095fc:	dc800215 	stw	r18,8(sp)
 4009600:	2023883a 	mov	r17,r4
 4009604:	2821883a 	mov	r16,r5
 4009608:	20000226 	beq	r4,zero,4009614 <_fclose_r+0x2c>
 400960c:	20800e17 	ldw	r2,56(r4)
 4009610:	10002726 	beq	r2,zero,40096b0 <_fclose_r+0xc8>
 4009614:	8080030f 	ldh	r2,12(r16)
 4009618:	1000071e 	bne	r2,zero,4009638 <_fclose_r+0x50>
 400961c:	0005883a 	mov	r2,zero
 4009620:	dfc00317 	ldw	ra,12(sp)
 4009624:	dc800217 	ldw	r18,8(sp)
 4009628:	dc400117 	ldw	r17,4(sp)
 400962c:	dc000017 	ldw	r16,0(sp)
 4009630:	dec00404 	addi	sp,sp,16
 4009634:	f800283a 	ret
 4009638:	800b883a 	mov	r5,r16
 400963c:	8809883a 	mov	r4,r17
 4009640:	40069c40 	call	40069c4 <__sflush_r>
 4009644:	1025883a 	mov	r18,r2
 4009648:	80800b17 	ldw	r2,44(r16)
 400964c:	10000426 	beq	r2,zero,4009660 <_fclose_r+0x78>
 4009650:	81400717 	ldw	r5,28(r16)
 4009654:	8809883a 	mov	r4,r17
 4009658:	103ee83a 	callr	r2
 400965c:	10001616 	blt	r2,zero,40096b8 <_fclose_r+0xd0>
 4009660:	8080030b 	ldhu	r2,12(r16)
 4009664:	1080200c 	andi	r2,r2,128
 4009668:	1000151e 	bne	r2,zero,40096c0 <_fclose_r+0xd8>
 400966c:	81400c17 	ldw	r5,48(r16)
 4009670:	28000526 	beq	r5,zero,4009688 <_fclose_r+0xa0>
 4009674:	80801004 	addi	r2,r16,64
 4009678:	28800226 	beq	r5,r2,4009684 <_fclose_r+0x9c>
 400967c:	8809883a 	mov	r4,r17
 4009680:	40073480 	call	4007348 <_free_r>
 4009684:	80000c15 	stw	zero,48(r16)
 4009688:	81401117 	ldw	r5,68(r16)
 400968c:	28000326 	beq	r5,zero,400969c <_fclose_r+0xb4>
 4009690:	8809883a 	mov	r4,r17
 4009694:	40073480 	call	4007348 <_free_r>
 4009698:	80001115 	stw	zero,68(r16)
 400969c:	4006fdc0 	call	4006fdc <__sfp_lock_acquire>
 40096a0:	8000030d 	sth	zero,12(r16)
 40096a4:	4006fe00 	call	4006fe0 <__sfp_lock_release>
 40096a8:	9005883a 	mov	r2,r18
 40096ac:	003fdc06 	br	4009620 <__alt_data_end+0xfc009620>
 40096b0:	4006fcc0 	call	4006fcc <__sinit>
 40096b4:	003fd706 	br	4009614 <__alt_data_end+0xfc009614>
 40096b8:	04bfffc4 	movi	r18,-1
 40096bc:	003fe806 	br	4009660 <__alt_data_end+0xfc009660>
 40096c0:	81400417 	ldw	r5,16(r16)
 40096c4:	8809883a 	mov	r4,r17
 40096c8:	40073480 	call	4007348 <_free_r>
 40096cc:	003fe706 	br	400966c <__alt_data_end+0xfc00966c>
 40096d0:	0005883a 	mov	r2,zero
 40096d4:	f800283a 	ret

040096d8 <fclose>:
 40096d8:	00810074 	movhi	r2,1025
 40096dc:	10bc7204 	addi	r2,r2,-3640
 40096e0:	200b883a 	mov	r5,r4
 40096e4:	11000017 	ldw	r4,0(r2)
 40096e8:	40095e81 	jmpi	40095e8 <_fclose_r>

040096ec <_fstat_r>:
 40096ec:	defffd04 	addi	sp,sp,-12
 40096f0:	2805883a 	mov	r2,r5
 40096f4:	dc000015 	stw	r16,0(sp)
 40096f8:	04010074 	movhi	r16,1025
 40096fc:	dc400115 	stw	r17,4(sp)
 4009700:	84035904 	addi	r16,r16,3428
 4009704:	2023883a 	mov	r17,r4
 4009708:	300b883a 	mov	r5,r6
 400970c:	1009883a 	mov	r4,r2
 4009710:	dfc00215 	stw	ra,8(sp)
 4009714:	80000015 	stw	zero,0(r16)
 4009718:	400a5cc0 	call	400a5cc <fstat>
 400971c:	00ffffc4 	movi	r3,-1
 4009720:	10c00526 	beq	r2,r3,4009738 <_fstat_r+0x4c>
 4009724:	dfc00217 	ldw	ra,8(sp)
 4009728:	dc400117 	ldw	r17,4(sp)
 400972c:	dc000017 	ldw	r16,0(sp)
 4009730:	dec00304 	addi	sp,sp,12
 4009734:	f800283a 	ret
 4009738:	80c00017 	ldw	r3,0(r16)
 400973c:	183ff926 	beq	r3,zero,4009724 <__alt_data_end+0xfc009724>
 4009740:	88c00015 	stw	r3,0(r17)
 4009744:	003ff706 	br	4009724 <__alt_data_end+0xfc009724>

04009748 <_isatty_r>:
 4009748:	defffd04 	addi	sp,sp,-12
 400974c:	dc000015 	stw	r16,0(sp)
 4009750:	04010074 	movhi	r16,1025
 4009754:	dc400115 	stw	r17,4(sp)
 4009758:	84035904 	addi	r16,r16,3428
 400975c:	2023883a 	mov	r17,r4
 4009760:	2809883a 	mov	r4,r5
 4009764:	dfc00215 	stw	ra,8(sp)
 4009768:	80000015 	stw	zero,0(r16)
 400976c:	400a6e00 	call	400a6e0 <isatty>
 4009770:	00ffffc4 	movi	r3,-1
 4009774:	10c00526 	beq	r2,r3,400978c <_isatty_r+0x44>
 4009778:	dfc00217 	ldw	ra,8(sp)
 400977c:	dc400117 	ldw	r17,4(sp)
 4009780:	dc000017 	ldw	r16,0(sp)
 4009784:	dec00304 	addi	sp,sp,12
 4009788:	f800283a 	ret
 400978c:	80c00017 	ldw	r3,0(r16)
 4009790:	183ff926 	beq	r3,zero,4009778 <__alt_data_end+0xfc009778>
 4009794:	88c00015 	stw	r3,0(r17)
 4009798:	003ff706 	br	4009778 <__alt_data_end+0xfc009778>

0400979c <_lseek_r>:
 400979c:	defffd04 	addi	sp,sp,-12
 40097a0:	2805883a 	mov	r2,r5
 40097a4:	dc000015 	stw	r16,0(sp)
 40097a8:	04010074 	movhi	r16,1025
 40097ac:	dc400115 	stw	r17,4(sp)
 40097b0:	300b883a 	mov	r5,r6
 40097b4:	84035904 	addi	r16,r16,3428
 40097b8:	2023883a 	mov	r17,r4
 40097bc:	380d883a 	mov	r6,r7
 40097c0:	1009883a 	mov	r4,r2
 40097c4:	dfc00215 	stw	ra,8(sp)
 40097c8:	80000015 	stw	zero,0(r16)
 40097cc:	400aa200 	call	400aa20 <lseek>
 40097d0:	00ffffc4 	movi	r3,-1
 40097d4:	10c00526 	beq	r2,r3,40097ec <_lseek_r+0x50>
 40097d8:	dfc00217 	ldw	ra,8(sp)
 40097dc:	dc400117 	ldw	r17,4(sp)
 40097e0:	dc000017 	ldw	r16,0(sp)
 40097e4:	dec00304 	addi	sp,sp,12
 40097e8:	f800283a 	ret
 40097ec:	80c00017 	ldw	r3,0(r16)
 40097f0:	183ff926 	beq	r3,zero,40097d8 <__alt_data_end+0xfc0097d8>
 40097f4:	88c00015 	stw	r3,0(r17)
 40097f8:	003ff706 	br	40097d8 <__alt_data_end+0xfc0097d8>

040097fc <_read_r>:
 40097fc:	defffd04 	addi	sp,sp,-12
 4009800:	2805883a 	mov	r2,r5
 4009804:	dc000015 	stw	r16,0(sp)
 4009808:	04010074 	movhi	r16,1025
 400980c:	dc400115 	stw	r17,4(sp)
 4009810:	300b883a 	mov	r5,r6
 4009814:	84035904 	addi	r16,r16,3428
 4009818:	2023883a 	mov	r17,r4
 400981c:	380d883a 	mov	r6,r7
 4009820:	1009883a 	mov	r4,r2
 4009824:	dfc00215 	stw	ra,8(sp)
 4009828:	80000015 	stw	zero,0(r16)
 400982c:	400abfc0 	call	400abfc <read>
 4009830:	00ffffc4 	movi	r3,-1
 4009834:	10c00526 	beq	r2,r3,400984c <_read_r+0x50>
 4009838:	dfc00217 	ldw	ra,8(sp)
 400983c:	dc400117 	ldw	r17,4(sp)
 4009840:	dc000017 	ldw	r16,0(sp)
 4009844:	dec00304 	addi	sp,sp,12
 4009848:	f800283a 	ret
 400984c:	80c00017 	ldw	r3,0(r16)
 4009850:	183ff926 	beq	r3,zero,4009838 <__alt_data_end+0xfc009838>
 4009854:	88c00015 	stw	r3,0(r17)
 4009858:	003ff706 	br	4009838 <__alt_data_end+0xfc009838>

0400985c <__udivdi3>:
 400985c:	defff404 	addi	sp,sp,-48
 4009860:	dcc00515 	stw	r19,20(sp)
 4009864:	dc000215 	stw	r16,8(sp)
 4009868:	dfc00b15 	stw	ra,44(sp)
 400986c:	df000a15 	stw	fp,40(sp)
 4009870:	ddc00915 	stw	r23,36(sp)
 4009874:	dd800815 	stw	r22,32(sp)
 4009878:	dd400715 	stw	r21,28(sp)
 400987c:	dd000615 	stw	r20,24(sp)
 4009880:	dc800415 	stw	r18,16(sp)
 4009884:	dc400315 	stw	r17,12(sp)
 4009888:	2027883a 	mov	r19,r4
 400988c:	2821883a 	mov	r16,r5
 4009890:	3800461e 	bne	r7,zero,40099ac <__udivdi3+0x150>
 4009894:	3023883a 	mov	r17,r6
 4009898:	2025883a 	mov	r18,r4
 400989c:	2980572e 	bgeu	r5,r6,40099fc <__udivdi3+0x1a0>
 40098a0:	00bfffd4 	movui	r2,65535
 40098a4:	282d883a 	mov	r22,r5
 40098a8:	1180b236 	bltu	r2,r6,4009b74 <__udivdi3+0x318>
 40098ac:	00803fc4 	movi	r2,255
 40098b0:	1185803a 	cmpltu	r2,r2,r6
 40098b4:	100490fa 	slli	r2,r2,3
 40098b8:	3086d83a 	srl	r3,r6,r2
 40098bc:	01010074 	movhi	r4,1025
 40098c0:	21353044 	addi	r4,r4,-11071
 40098c4:	20c7883a 	add	r3,r4,r3
 40098c8:	18c00003 	ldbu	r3,0(r3)
 40098cc:	1885883a 	add	r2,r3,r2
 40098d0:	00c00804 	movi	r3,32
 40098d4:	1887c83a 	sub	r3,r3,r2
 40098d8:	18000526 	beq	r3,zero,40098f0 <__udivdi3+0x94>
 40098dc:	80e0983a 	sll	r16,r16,r3
 40098e0:	9884d83a 	srl	r2,r19,r2
 40098e4:	30e2983a 	sll	r17,r6,r3
 40098e8:	98e4983a 	sll	r18,r19,r3
 40098ec:	142cb03a 	or	r22,r2,r16
 40098f0:	882ad43a 	srli	r21,r17,16
 40098f4:	b009883a 	mov	r4,r22
 40098f8:	8d3fffcc 	andi	r20,r17,65535
 40098fc:	a80b883a 	mov	r5,r21
 4009900:	40035ac0 	call	40035ac <__umodsi3>
 4009904:	b009883a 	mov	r4,r22
 4009908:	a80b883a 	mov	r5,r21
 400990c:	1027883a 	mov	r19,r2
 4009910:	40035480 	call	4003548 <__udivsi3>
 4009914:	100b883a 	mov	r5,r2
 4009918:	a009883a 	mov	r4,r20
 400991c:	102d883a 	mov	r22,r2
 4009920:	40036040 	call	4003604 <__mulsi3>
 4009924:	9826943a 	slli	r19,r19,16
 4009928:	9006d43a 	srli	r3,r18,16
 400992c:	1cc6b03a 	or	r3,r3,r19
 4009930:	1880052e 	bgeu	r3,r2,4009948 <__udivdi3+0xec>
 4009934:	1c47883a 	add	r3,r3,r17
 4009938:	b13fffc4 	addi	r4,r22,-1
 400993c:	1c400136 	bltu	r3,r17,4009944 <__udivdi3+0xe8>
 4009940:	18814236 	bltu	r3,r2,4009e4c <__udivdi3+0x5f0>
 4009944:	202d883a 	mov	r22,r4
 4009948:	18a1c83a 	sub	r16,r3,r2
 400994c:	8009883a 	mov	r4,r16
 4009950:	a80b883a 	mov	r5,r21
 4009954:	40035ac0 	call	40035ac <__umodsi3>
 4009958:	1027883a 	mov	r19,r2
 400995c:	8009883a 	mov	r4,r16
 4009960:	a80b883a 	mov	r5,r21
 4009964:	9826943a 	slli	r19,r19,16
 4009968:	40035480 	call	4003548 <__udivsi3>
 400996c:	100b883a 	mov	r5,r2
 4009970:	a009883a 	mov	r4,r20
 4009974:	94bfffcc 	andi	r18,r18,65535
 4009978:	1021883a 	mov	r16,r2
 400997c:	94e4b03a 	or	r18,r18,r19
 4009980:	40036040 	call	4003604 <__mulsi3>
 4009984:	9080052e 	bgeu	r18,r2,400999c <__udivdi3+0x140>
 4009988:	8ca5883a 	add	r18,r17,r18
 400998c:	80ffffc4 	addi	r3,r16,-1
 4009990:	94410c36 	bltu	r18,r17,4009dc4 <__udivdi3+0x568>
 4009994:	90810b2e 	bgeu	r18,r2,4009dc4 <__udivdi3+0x568>
 4009998:	843fff84 	addi	r16,r16,-2
 400999c:	b004943a 	slli	r2,r22,16
 40099a0:	0007883a 	mov	r3,zero
 40099a4:	1404b03a 	or	r2,r2,r16
 40099a8:	00005e06 	br	4009b24 <__udivdi3+0x2c8>
 40099ac:	29c05b36 	bltu	r5,r7,4009b1c <__udivdi3+0x2c0>
 40099b0:	00bfffd4 	movui	r2,65535
 40099b4:	11c0672e 	bgeu	r2,r7,4009b54 <__udivdi3+0x2f8>
 40099b8:	00804034 	movhi	r2,256
 40099bc:	10bfffc4 	addi	r2,r2,-1
 40099c0:	11c10a36 	bltu	r2,r7,4009dec <__udivdi3+0x590>
 40099c4:	00800404 	movi	r2,16
 40099c8:	3886d83a 	srl	r3,r7,r2
 40099cc:	01010074 	movhi	r4,1025
 40099d0:	21353044 	addi	r4,r4,-11071
 40099d4:	20c7883a 	add	r3,r4,r3
 40099d8:	18c00003 	ldbu	r3,0(r3)
 40099dc:	05c00804 	movi	r23,32
 40099e0:	1885883a 	add	r2,r3,r2
 40099e4:	b8afc83a 	sub	r23,r23,r2
 40099e8:	b800671e 	bne	r23,zero,4009b88 <__udivdi3+0x32c>
 40099ec:	3c010536 	bltu	r7,r16,4009e04 <__udivdi3+0x5a8>
 40099f0:	9985403a 	cmpgeu	r2,r19,r6
 40099f4:	0007883a 	mov	r3,zero
 40099f8:	00004a06 	br	4009b24 <__udivdi3+0x2c8>
 40099fc:	3000041e 	bne	r6,zero,4009a10 <__udivdi3+0x1b4>
 4009a00:	000b883a 	mov	r5,zero
 4009a04:	01000044 	movi	r4,1
 4009a08:	40035480 	call	4003548 <__udivsi3>
 4009a0c:	1023883a 	mov	r17,r2
 4009a10:	00bfffd4 	movui	r2,65535
 4009a14:	1440532e 	bgeu	r2,r17,4009b64 <__udivdi3+0x308>
 4009a18:	00804034 	movhi	r2,256
 4009a1c:	10bfffc4 	addi	r2,r2,-1
 4009a20:	1440f436 	bltu	r2,r17,4009df4 <__udivdi3+0x598>
 4009a24:	00800404 	movi	r2,16
 4009a28:	8886d83a 	srl	r3,r17,r2
 4009a2c:	01010074 	movhi	r4,1025
 4009a30:	21353044 	addi	r4,r4,-11071
 4009a34:	20c7883a 	add	r3,r4,r3
 4009a38:	18c00003 	ldbu	r3,0(r3)
 4009a3c:	1885883a 	add	r2,r3,r2
 4009a40:	00c00804 	movi	r3,32
 4009a44:	1887c83a 	sub	r3,r3,r2
 4009a48:	1800a51e 	bne	r3,zero,4009ce0 <__udivdi3+0x484>
 4009a4c:	882ad43a 	srli	r21,r17,16
 4009a50:	8461c83a 	sub	r16,r16,r17
 4009a54:	8d3fffcc 	andi	r20,r17,65535
 4009a58:	00c00044 	movi	r3,1
 4009a5c:	a80b883a 	mov	r5,r21
 4009a60:	8009883a 	mov	r4,r16
 4009a64:	d8c00115 	stw	r3,4(sp)
 4009a68:	40035ac0 	call	40035ac <__umodsi3>
 4009a6c:	a80b883a 	mov	r5,r21
 4009a70:	8009883a 	mov	r4,r16
 4009a74:	1027883a 	mov	r19,r2
 4009a78:	40035480 	call	4003548 <__udivsi3>
 4009a7c:	a00b883a 	mov	r5,r20
 4009a80:	1009883a 	mov	r4,r2
 4009a84:	102d883a 	mov	r22,r2
 4009a88:	40036040 	call	4003604 <__mulsi3>
 4009a8c:	9826943a 	slli	r19,r19,16
 4009a90:	900ed43a 	srli	r7,r18,16
 4009a94:	d8c00117 	ldw	r3,4(sp)
 4009a98:	3cceb03a 	or	r7,r7,r19
 4009a9c:	3880052e 	bgeu	r7,r2,4009ab4 <__udivdi3+0x258>
 4009aa0:	3c4f883a 	add	r7,r7,r17
 4009aa4:	b13fffc4 	addi	r4,r22,-1
 4009aa8:	3c400136 	bltu	r7,r17,4009ab0 <__udivdi3+0x254>
 4009aac:	3880e436 	bltu	r7,r2,4009e40 <__udivdi3+0x5e4>
 4009ab0:	202d883a 	mov	r22,r4
 4009ab4:	38a1c83a 	sub	r16,r7,r2
 4009ab8:	8009883a 	mov	r4,r16
 4009abc:	a80b883a 	mov	r5,r21
 4009ac0:	d8c00115 	stw	r3,4(sp)
 4009ac4:	40035ac0 	call	40035ac <__umodsi3>
 4009ac8:	1027883a 	mov	r19,r2
 4009acc:	8009883a 	mov	r4,r16
 4009ad0:	a80b883a 	mov	r5,r21
 4009ad4:	9826943a 	slli	r19,r19,16
 4009ad8:	40035480 	call	4003548 <__udivsi3>
 4009adc:	a00b883a 	mov	r5,r20
 4009ae0:	1009883a 	mov	r4,r2
 4009ae4:	94bfffcc 	andi	r18,r18,65535
 4009ae8:	1021883a 	mov	r16,r2
 4009aec:	94e4b03a 	or	r18,r18,r19
 4009af0:	40036040 	call	4003604 <__mulsi3>
 4009af4:	d8c00117 	ldw	r3,4(sp)
 4009af8:	9080052e 	bgeu	r18,r2,4009b10 <__udivdi3+0x2b4>
 4009afc:	8ca5883a 	add	r18,r17,r18
 4009b00:	813fffc4 	addi	r4,r16,-1
 4009b04:	9440ad36 	bltu	r18,r17,4009dbc <__udivdi3+0x560>
 4009b08:	9080ac2e 	bgeu	r18,r2,4009dbc <__udivdi3+0x560>
 4009b0c:	843fff84 	addi	r16,r16,-2
 4009b10:	b004943a 	slli	r2,r22,16
 4009b14:	1404b03a 	or	r2,r2,r16
 4009b18:	00000206 	br	4009b24 <__udivdi3+0x2c8>
 4009b1c:	0007883a 	mov	r3,zero
 4009b20:	0005883a 	mov	r2,zero
 4009b24:	dfc00b17 	ldw	ra,44(sp)
 4009b28:	df000a17 	ldw	fp,40(sp)
 4009b2c:	ddc00917 	ldw	r23,36(sp)
 4009b30:	dd800817 	ldw	r22,32(sp)
 4009b34:	dd400717 	ldw	r21,28(sp)
 4009b38:	dd000617 	ldw	r20,24(sp)
 4009b3c:	dcc00517 	ldw	r19,20(sp)
 4009b40:	dc800417 	ldw	r18,16(sp)
 4009b44:	dc400317 	ldw	r17,12(sp)
 4009b48:	dc000217 	ldw	r16,8(sp)
 4009b4c:	dec00c04 	addi	sp,sp,48
 4009b50:	f800283a 	ret
 4009b54:	00803fc4 	movi	r2,255
 4009b58:	11c5803a 	cmpltu	r2,r2,r7
 4009b5c:	100490fa 	slli	r2,r2,3
 4009b60:	003f9906 	br	40099c8 <__alt_data_end+0xfc0099c8>
 4009b64:	00803fc4 	movi	r2,255
 4009b68:	1445803a 	cmpltu	r2,r2,r17
 4009b6c:	100490fa 	slli	r2,r2,3
 4009b70:	003fad06 	br	4009a28 <__alt_data_end+0xfc009a28>
 4009b74:	00804034 	movhi	r2,256
 4009b78:	10bfffc4 	addi	r2,r2,-1
 4009b7c:	11809f36 	bltu	r2,r6,4009dfc <__udivdi3+0x5a0>
 4009b80:	00800404 	movi	r2,16
 4009b84:	003f4c06 	br	40098b8 <__alt_data_end+0xfc0098b8>
 4009b88:	3dce983a 	sll	r7,r7,r23
 4009b8c:	30b8d83a 	srl	fp,r6,r2
 4009b90:	80a2d83a 	srl	r17,r16,r2
 4009b94:	35cc983a 	sll	r6,r6,r23
 4009b98:	3f38b03a 	or	fp,r7,fp
 4009b9c:	e024d43a 	srli	r18,fp,16
 4009ba0:	9884d83a 	srl	r2,r19,r2
 4009ba4:	85e0983a 	sll	r16,r16,r23
 4009ba8:	8809883a 	mov	r4,r17
 4009bac:	900b883a 	mov	r5,r18
 4009bb0:	d9800015 	stw	r6,0(sp)
 4009bb4:	1420b03a 	or	r16,r2,r16
 4009bb8:	40035ac0 	call	40035ac <__umodsi3>
 4009bbc:	900b883a 	mov	r5,r18
 4009bc0:	8809883a 	mov	r4,r17
 4009bc4:	1029883a 	mov	r20,r2
 4009bc8:	e5bfffcc 	andi	r22,fp,65535
 4009bcc:	40035480 	call	4003548 <__udivsi3>
 4009bd0:	100b883a 	mov	r5,r2
 4009bd4:	b009883a 	mov	r4,r22
 4009bd8:	102b883a 	mov	r21,r2
 4009bdc:	40036040 	call	4003604 <__mulsi3>
 4009be0:	a028943a 	slli	r20,r20,16
 4009be4:	8006d43a 	srli	r3,r16,16
 4009be8:	1d06b03a 	or	r3,r3,r20
 4009bec:	1880042e 	bgeu	r3,r2,4009c00 <__udivdi3+0x3a4>
 4009bf0:	1f07883a 	add	r3,r3,fp
 4009bf4:	a93fffc4 	addi	r4,r21,-1
 4009bf8:	1f00892e 	bgeu	r3,fp,4009e20 <__udivdi3+0x5c4>
 4009bfc:	202b883a 	mov	r21,r4
 4009c00:	18a3c83a 	sub	r17,r3,r2
 4009c04:	8809883a 	mov	r4,r17
 4009c08:	900b883a 	mov	r5,r18
 4009c0c:	40035ac0 	call	40035ac <__umodsi3>
 4009c10:	1029883a 	mov	r20,r2
 4009c14:	8809883a 	mov	r4,r17
 4009c18:	900b883a 	mov	r5,r18
 4009c1c:	a028943a 	slli	r20,r20,16
 4009c20:	40035480 	call	4003548 <__udivsi3>
 4009c24:	100b883a 	mov	r5,r2
 4009c28:	b009883a 	mov	r4,r22
 4009c2c:	843fffcc 	andi	r16,r16,65535
 4009c30:	1023883a 	mov	r17,r2
 4009c34:	8520b03a 	or	r16,r16,r20
 4009c38:	40036040 	call	4003604 <__mulsi3>
 4009c3c:	8080042e 	bgeu	r16,r2,4009c50 <__udivdi3+0x3f4>
 4009c40:	8721883a 	add	r16,r16,fp
 4009c44:	88ffffc4 	addi	r3,r17,-1
 4009c48:	8700712e 	bgeu	r16,fp,4009e10 <__udivdi3+0x5b4>
 4009c4c:	1823883a 	mov	r17,r3
 4009c50:	a80e943a 	slli	r7,r21,16
 4009c54:	d8c00017 	ldw	r3,0(sp)
 4009c58:	80a1c83a 	sub	r16,r16,r2
 4009c5c:	3c64b03a 	or	r18,r7,r17
 4009c60:	1d3fffcc 	andi	r20,r3,65535
 4009c64:	9022d43a 	srli	r17,r18,16
 4009c68:	95bfffcc 	andi	r22,r18,65535
 4009c6c:	a00b883a 	mov	r5,r20
 4009c70:	b009883a 	mov	r4,r22
 4009c74:	182ad43a 	srli	r21,r3,16
 4009c78:	40036040 	call	4003604 <__mulsi3>
 4009c7c:	a00b883a 	mov	r5,r20
 4009c80:	8809883a 	mov	r4,r17
 4009c84:	1039883a 	mov	fp,r2
 4009c88:	40036040 	call	4003604 <__mulsi3>
 4009c8c:	8809883a 	mov	r4,r17
 4009c90:	a80b883a 	mov	r5,r21
 4009c94:	1029883a 	mov	r20,r2
 4009c98:	40036040 	call	4003604 <__mulsi3>
 4009c9c:	a80b883a 	mov	r5,r21
 4009ca0:	b009883a 	mov	r4,r22
 4009ca4:	1023883a 	mov	r17,r2
 4009ca8:	40036040 	call	4003604 <__mulsi3>
 4009cac:	e006d43a 	srli	r3,fp,16
 4009cb0:	1505883a 	add	r2,r2,r20
 4009cb4:	1887883a 	add	r3,r3,r2
 4009cb8:	1d00022e 	bgeu	r3,r20,4009cc4 <__udivdi3+0x468>
 4009cbc:	00800074 	movhi	r2,1
 4009cc0:	88a3883a 	add	r17,r17,r2
 4009cc4:	1804d43a 	srli	r2,r3,16
 4009cc8:	1463883a 	add	r17,r2,r17
 4009ccc:	84404436 	bltu	r16,r17,4009de0 <__udivdi3+0x584>
 4009cd0:	84403e26 	beq	r16,r17,4009dcc <__udivdi3+0x570>
 4009cd4:	9005883a 	mov	r2,r18
 4009cd8:	0007883a 	mov	r3,zero
 4009cdc:	003f9106 	br	4009b24 <__alt_data_end+0xfc009b24>
 4009ce0:	88e2983a 	sll	r17,r17,r3
 4009ce4:	80aed83a 	srl	r23,r16,r2
 4009ce8:	80e0983a 	sll	r16,r16,r3
 4009cec:	882ad43a 	srli	r21,r17,16
 4009cf0:	9884d83a 	srl	r2,r19,r2
 4009cf4:	b809883a 	mov	r4,r23
 4009cf8:	a80b883a 	mov	r5,r21
 4009cfc:	98e4983a 	sll	r18,r19,r3
 4009d00:	142cb03a 	or	r22,r2,r16
 4009d04:	40035ac0 	call	40035ac <__umodsi3>
 4009d08:	b809883a 	mov	r4,r23
 4009d0c:	a80b883a 	mov	r5,r21
 4009d10:	1027883a 	mov	r19,r2
 4009d14:	8d3fffcc 	andi	r20,r17,65535
 4009d18:	40035480 	call	4003548 <__udivsi3>
 4009d1c:	a009883a 	mov	r4,r20
 4009d20:	100b883a 	mov	r5,r2
 4009d24:	102f883a 	mov	r23,r2
 4009d28:	40036040 	call	4003604 <__mulsi3>
 4009d2c:	9826943a 	slli	r19,r19,16
 4009d30:	b008d43a 	srli	r4,r22,16
 4009d34:	24c8b03a 	or	r4,r4,r19
 4009d38:	2080062e 	bgeu	r4,r2,4009d54 <__udivdi3+0x4f8>
 4009d3c:	2449883a 	add	r4,r4,r17
 4009d40:	b8ffffc4 	addi	r3,r23,-1
 4009d44:	24403c36 	bltu	r4,r17,4009e38 <__udivdi3+0x5dc>
 4009d48:	20803b2e 	bgeu	r4,r2,4009e38 <__udivdi3+0x5dc>
 4009d4c:	bdffff84 	addi	r23,r23,-2
 4009d50:	2449883a 	add	r4,r4,r17
 4009d54:	20a1c83a 	sub	r16,r4,r2
 4009d58:	a80b883a 	mov	r5,r21
 4009d5c:	8009883a 	mov	r4,r16
 4009d60:	40035ac0 	call	40035ac <__umodsi3>
 4009d64:	a80b883a 	mov	r5,r21
 4009d68:	8009883a 	mov	r4,r16
 4009d6c:	1027883a 	mov	r19,r2
 4009d70:	40035480 	call	4003548 <__udivsi3>
 4009d74:	a009883a 	mov	r4,r20
 4009d78:	100b883a 	mov	r5,r2
 4009d7c:	9826943a 	slli	r19,r19,16
 4009d80:	1039883a 	mov	fp,r2
 4009d84:	40036040 	call	4003604 <__mulsi3>
 4009d88:	b13fffcc 	andi	r4,r22,65535
 4009d8c:	24c8b03a 	or	r4,r4,r19
 4009d90:	2080062e 	bgeu	r4,r2,4009dac <__udivdi3+0x550>
 4009d94:	2449883a 	add	r4,r4,r17
 4009d98:	e0ffffc4 	addi	r3,fp,-1
 4009d9c:	24402436 	bltu	r4,r17,4009e30 <__udivdi3+0x5d4>
 4009da0:	2080232e 	bgeu	r4,r2,4009e30 <__udivdi3+0x5d4>
 4009da4:	e73fff84 	addi	fp,fp,-2
 4009da8:	2449883a 	add	r4,r4,r17
 4009dac:	b82e943a 	slli	r23,r23,16
 4009db0:	20a1c83a 	sub	r16,r4,r2
 4009db4:	bf06b03a 	or	r3,r23,fp
 4009db8:	003f2806 	br	4009a5c <__alt_data_end+0xfc009a5c>
 4009dbc:	2021883a 	mov	r16,r4
 4009dc0:	003f5306 	br	4009b10 <__alt_data_end+0xfc009b10>
 4009dc4:	1821883a 	mov	r16,r3
 4009dc8:	003ef406 	br	400999c <__alt_data_end+0xfc00999c>
 4009dcc:	1806943a 	slli	r3,r3,16
 4009dd0:	9de6983a 	sll	r19,r19,r23
 4009dd4:	e73fffcc 	andi	fp,fp,65535
 4009dd8:	1f07883a 	add	r3,r3,fp
 4009ddc:	98ffbd2e 	bgeu	r19,r3,4009cd4 <__alt_data_end+0xfc009cd4>
 4009de0:	90bfffc4 	addi	r2,r18,-1
 4009de4:	0007883a 	mov	r3,zero
 4009de8:	003f4e06 	br	4009b24 <__alt_data_end+0xfc009b24>
 4009dec:	00800604 	movi	r2,24
 4009df0:	003ef506 	br	40099c8 <__alt_data_end+0xfc0099c8>
 4009df4:	00800604 	movi	r2,24
 4009df8:	003f0b06 	br	4009a28 <__alt_data_end+0xfc009a28>
 4009dfc:	00800604 	movi	r2,24
 4009e00:	003ead06 	br	40098b8 <__alt_data_end+0xfc0098b8>
 4009e04:	0007883a 	mov	r3,zero
 4009e08:	00800044 	movi	r2,1
 4009e0c:	003f4506 	br	4009b24 <__alt_data_end+0xfc009b24>
 4009e10:	80bf8e2e 	bgeu	r16,r2,4009c4c <__alt_data_end+0xfc009c4c>
 4009e14:	8c7fff84 	addi	r17,r17,-2
 4009e18:	8721883a 	add	r16,r16,fp
 4009e1c:	003f8c06 	br	4009c50 <__alt_data_end+0xfc009c50>
 4009e20:	18bf762e 	bgeu	r3,r2,4009bfc <__alt_data_end+0xfc009bfc>
 4009e24:	ad7fff84 	addi	r21,r21,-2
 4009e28:	1f07883a 	add	r3,r3,fp
 4009e2c:	003f7406 	br	4009c00 <__alt_data_end+0xfc009c00>
 4009e30:	1839883a 	mov	fp,r3
 4009e34:	003fdd06 	br	4009dac <__alt_data_end+0xfc009dac>
 4009e38:	182f883a 	mov	r23,r3
 4009e3c:	003fc506 	br	4009d54 <__alt_data_end+0xfc009d54>
 4009e40:	b5bfff84 	addi	r22,r22,-2
 4009e44:	3c4f883a 	add	r7,r7,r17
 4009e48:	003f1a06 	br	4009ab4 <__alt_data_end+0xfc009ab4>
 4009e4c:	b5bfff84 	addi	r22,r22,-2
 4009e50:	1c47883a 	add	r3,r3,r17
 4009e54:	003ebc06 	br	4009948 <__alt_data_end+0xfc009948>

04009e58 <__umoddi3>:
 4009e58:	defff304 	addi	sp,sp,-52
 4009e5c:	df000b15 	stw	fp,44(sp)
 4009e60:	dc400415 	stw	r17,16(sp)
 4009e64:	dc000315 	stw	r16,12(sp)
 4009e68:	dfc00c15 	stw	ra,48(sp)
 4009e6c:	ddc00a15 	stw	r23,40(sp)
 4009e70:	dd800915 	stw	r22,36(sp)
 4009e74:	dd400815 	stw	r21,32(sp)
 4009e78:	dd000715 	stw	r20,28(sp)
 4009e7c:	dcc00615 	stw	r19,24(sp)
 4009e80:	dc800515 	stw	r18,20(sp)
 4009e84:	2021883a 	mov	r16,r4
 4009e88:	2823883a 	mov	r17,r5
 4009e8c:	2839883a 	mov	fp,r5
 4009e90:	3800401e 	bne	r7,zero,4009f94 <__umoddi3+0x13c>
 4009e94:	3027883a 	mov	r19,r6
 4009e98:	2029883a 	mov	r20,r4
 4009e9c:	2980552e 	bgeu	r5,r6,4009ff4 <__umoddi3+0x19c>
 4009ea0:	00bfffd4 	movui	r2,65535
 4009ea4:	1180a236 	bltu	r2,r6,400a130 <__umoddi3+0x2d8>
 4009ea8:	01003fc4 	movi	r4,255
 4009eac:	2189803a 	cmpltu	r4,r4,r6
 4009eb0:	200890fa 	slli	r4,r4,3
 4009eb4:	3104d83a 	srl	r2,r6,r4
 4009eb8:	00c10074 	movhi	r3,1025
 4009ebc:	18f53044 	addi	r3,r3,-11071
 4009ec0:	1885883a 	add	r2,r3,r2
 4009ec4:	10c00003 	ldbu	r3,0(r2)
 4009ec8:	00800804 	movi	r2,32
 4009ecc:	1909883a 	add	r4,r3,r4
 4009ed0:	1125c83a 	sub	r18,r2,r4
 4009ed4:	90000526 	beq	r18,zero,4009eec <__umoddi3+0x94>
 4009ed8:	8ca2983a 	sll	r17,r17,r18
 4009edc:	8108d83a 	srl	r4,r16,r4
 4009ee0:	34a6983a 	sll	r19,r6,r18
 4009ee4:	84a8983a 	sll	r20,r16,r18
 4009ee8:	2478b03a 	or	fp,r4,r17
 4009eec:	982cd43a 	srli	r22,r19,16
 4009ef0:	e009883a 	mov	r4,fp
 4009ef4:	9dffffcc 	andi	r23,r19,65535
 4009ef8:	b00b883a 	mov	r5,r22
 4009efc:	40035ac0 	call	40035ac <__umodsi3>
 4009f00:	b00b883a 	mov	r5,r22
 4009f04:	e009883a 	mov	r4,fp
 4009f08:	102b883a 	mov	r21,r2
 4009f0c:	40035480 	call	4003548 <__udivsi3>
 4009f10:	100b883a 	mov	r5,r2
 4009f14:	b809883a 	mov	r4,r23
 4009f18:	40036040 	call	4003604 <__mulsi3>
 4009f1c:	a82a943a 	slli	r21,r21,16
 4009f20:	a006d43a 	srli	r3,r20,16
 4009f24:	1d46b03a 	or	r3,r3,r21
 4009f28:	1880032e 	bgeu	r3,r2,4009f38 <__umoddi3+0xe0>
 4009f2c:	1cc7883a 	add	r3,r3,r19
 4009f30:	1cc00136 	bltu	r3,r19,4009f38 <__umoddi3+0xe0>
 4009f34:	18813136 	bltu	r3,r2,400a3fc <__umoddi3+0x5a4>
 4009f38:	18a1c83a 	sub	r16,r3,r2
 4009f3c:	b00b883a 	mov	r5,r22
 4009f40:	8009883a 	mov	r4,r16
 4009f44:	40035ac0 	call	40035ac <__umodsi3>
 4009f48:	b00b883a 	mov	r5,r22
 4009f4c:	8009883a 	mov	r4,r16
 4009f50:	1023883a 	mov	r17,r2
 4009f54:	40035480 	call	4003548 <__udivsi3>
 4009f58:	100b883a 	mov	r5,r2
 4009f5c:	b809883a 	mov	r4,r23
 4009f60:	8822943a 	slli	r17,r17,16
 4009f64:	40036040 	call	4003604 <__mulsi3>
 4009f68:	a0ffffcc 	andi	r3,r20,65535
 4009f6c:	1c46b03a 	or	r3,r3,r17
 4009f70:	1880042e 	bgeu	r3,r2,4009f84 <__umoddi3+0x12c>
 4009f74:	1cc7883a 	add	r3,r3,r19
 4009f78:	1cc00236 	bltu	r3,r19,4009f84 <__umoddi3+0x12c>
 4009f7c:	1880012e 	bgeu	r3,r2,4009f84 <__umoddi3+0x12c>
 4009f80:	1cc7883a 	add	r3,r3,r19
 4009f84:	1885c83a 	sub	r2,r3,r2
 4009f88:	1484d83a 	srl	r2,r2,r18
 4009f8c:	0007883a 	mov	r3,zero
 4009f90:	00005306 	br	400a0e0 <__umoddi3+0x288>
 4009f94:	29c05036 	bltu	r5,r7,400a0d8 <__umoddi3+0x280>
 4009f98:	00bfffd4 	movui	r2,65535
 4009f9c:	11c05c2e 	bgeu	r2,r7,400a110 <__umoddi3+0x2b8>
 4009fa0:	00804034 	movhi	r2,256
 4009fa4:	10bfffc4 	addi	r2,r2,-1
 4009fa8:	11c10636 	bltu	r2,r7,400a3c4 <__umoddi3+0x56c>
 4009fac:	01000404 	movi	r4,16
 4009fb0:	3904d83a 	srl	r2,r7,r4
 4009fb4:	00c10074 	movhi	r3,1025
 4009fb8:	18f53044 	addi	r3,r3,-11071
 4009fbc:	1885883a 	add	r2,r3,r2
 4009fc0:	14c00003 	ldbu	r19,0(r2)
 4009fc4:	00c00804 	movi	r3,32
 4009fc8:	9927883a 	add	r19,r19,r4
 4009fcc:	1ce9c83a 	sub	r20,r3,r19
 4009fd0:	a0005c1e 	bne	r20,zero,400a144 <__umoddi3+0x2ec>
 4009fd4:	3c400136 	bltu	r7,r17,4009fdc <__umoddi3+0x184>
 4009fd8:	81810a36 	bltu	r16,r6,400a404 <__umoddi3+0x5ac>
 4009fdc:	8185c83a 	sub	r2,r16,r6
 4009fe0:	89e3c83a 	sub	r17,r17,r7
 4009fe4:	8089803a 	cmpltu	r4,r16,r2
 4009fe8:	8939c83a 	sub	fp,r17,r4
 4009fec:	e007883a 	mov	r3,fp
 4009ff0:	00003b06 	br	400a0e0 <__umoddi3+0x288>
 4009ff4:	3000041e 	bne	r6,zero,400a008 <__umoddi3+0x1b0>
 4009ff8:	000b883a 	mov	r5,zero
 4009ffc:	01000044 	movi	r4,1
 400a000:	40035480 	call	4003548 <__udivsi3>
 400a004:	1027883a 	mov	r19,r2
 400a008:	00bfffd4 	movui	r2,65535
 400a00c:	14c0442e 	bgeu	r2,r19,400a120 <__umoddi3+0x2c8>
 400a010:	00804034 	movhi	r2,256
 400a014:	10bfffc4 	addi	r2,r2,-1
 400a018:	14c0ec36 	bltu	r2,r19,400a3cc <__umoddi3+0x574>
 400a01c:	00800404 	movi	r2,16
 400a020:	9886d83a 	srl	r3,r19,r2
 400a024:	01010074 	movhi	r4,1025
 400a028:	21353044 	addi	r4,r4,-11071
 400a02c:	20c7883a 	add	r3,r4,r3
 400a030:	18c00003 	ldbu	r3,0(r3)
 400a034:	1887883a 	add	r3,r3,r2
 400a038:	00800804 	movi	r2,32
 400a03c:	10e5c83a 	sub	r18,r2,r3
 400a040:	9000ab1e 	bne	r18,zero,400a2f0 <__umoddi3+0x498>
 400a044:	982cd43a 	srli	r22,r19,16
 400a048:	8ce3c83a 	sub	r17,r17,r19
 400a04c:	9dffffcc 	andi	r23,r19,65535
 400a050:	b00b883a 	mov	r5,r22
 400a054:	8809883a 	mov	r4,r17
 400a058:	40035ac0 	call	40035ac <__umodsi3>
 400a05c:	b00b883a 	mov	r5,r22
 400a060:	8809883a 	mov	r4,r17
 400a064:	102b883a 	mov	r21,r2
 400a068:	40035480 	call	4003548 <__udivsi3>
 400a06c:	b80b883a 	mov	r5,r23
 400a070:	1009883a 	mov	r4,r2
 400a074:	40036040 	call	4003604 <__mulsi3>
 400a078:	a82a943a 	slli	r21,r21,16
 400a07c:	a006d43a 	srli	r3,r20,16
 400a080:	1d46b03a 	or	r3,r3,r21
 400a084:	1880042e 	bgeu	r3,r2,400a098 <__umoddi3+0x240>
 400a088:	1cc7883a 	add	r3,r3,r19
 400a08c:	1cc00236 	bltu	r3,r19,400a098 <__umoddi3+0x240>
 400a090:	1880012e 	bgeu	r3,r2,400a098 <__umoddi3+0x240>
 400a094:	1cc7883a 	add	r3,r3,r19
 400a098:	18a1c83a 	sub	r16,r3,r2
 400a09c:	b00b883a 	mov	r5,r22
 400a0a0:	8009883a 	mov	r4,r16
 400a0a4:	40035ac0 	call	40035ac <__umodsi3>
 400a0a8:	1023883a 	mov	r17,r2
 400a0ac:	b00b883a 	mov	r5,r22
 400a0b0:	8009883a 	mov	r4,r16
 400a0b4:	40035480 	call	4003548 <__udivsi3>
 400a0b8:	8822943a 	slli	r17,r17,16
 400a0bc:	b80b883a 	mov	r5,r23
 400a0c0:	1009883a 	mov	r4,r2
 400a0c4:	40036040 	call	4003604 <__mulsi3>
 400a0c8:	a53fffcc 	andi	r20,r20,65535
 400a0cc:	a446b03a 	or	r3,r20,r17
 400a0d0:	18bfac2e 	bgeu	r3,r2,4009f84 <__alt_data_end+0xfc009f84>
 400a0d4:	003fa706 	br	4009f74 <__alt_data_end+0xfc009f74>
 400a0d8:	2005883a 	mov	r2,r4
 400a0dc:	2807883a 	mov	r3,r5
 400a0e0:	dfc00c17 	ldw	ra,48(sp)
 400a0e4:	df000b17 	ldw	fp,44(sp)
 400a0e8:	ddc00a17 	ldw	r23,40(sp)
 400a0ec:	dd800917 	ldw	r22,36(sp)
 400a0f0:	dd400817 	ldw	r21,32(sp)
 400a0f4:	dd000717 	ldw	r20,28(sp)
 400a0f8:	dcc00617 	ldw	r19,24(sp)
 400a0fc:	dc800517 	ldw	r18,20(sp)
 400a100:	dc400417 	ldw	r17,16(sp)
 400a104:	dc000317 	ldw	r16,12(sp)
 400a108:	dec00d04 	addi	sp,sp,52
 400a10c:	f800283a 	ret
 400a110:	04c03fc4 	movi	r19,255
 400a114:	99c9803a 	cmpltu	r4,r19,r7
 400a118:	200890fa 	slli	r4,r4,3
 400a11c:	003fa406 	br	4009fb0 <__alt_data_end+0xfc009fb0>
 400a120:	00803fc4 	movi	r2,255
 400a124:	14c5803a 	cmpltu	r2,r2,r19
 400a128:	100490fa 	slli	r2,r2,3
 400a12c:	003fbc06 	br	400a020 <__alt_data_end+0xfc00a020>
 400a130:	00804034 	movhi	r2,256
 400a134:	10bfffc4 	addi	r2,r2,-1
 400a138:	1180a636 	bltu	r2,r6,400a3d4 <__umoddi3+0x57c>
 400a13c:	01000404 	movi	r4,16
 400a140:	003f5c06 	br	4009eb4 <__alt_data_end+0xfc009eb4>
 400a144:	3d0e983a 	sll	r7,r7,r20
 400a148:	34ead83a 	srl	r21,r6,r19
 400a14c:	8cc6d83a 	srl	r3,r17,r19
 400a150:	8d10983a 	sll	r8,r17,r20
 400a154:	3d6ab03a 	or	r21,r7,r21
 400a158:	a82cd43a 	srli	r22,r21,16
 400a15c:	84e2d83a 	srl	r17,r16,r19
 400a160:	1809883a 	mov	r4,r3
 400a164:	b00b883a 	mov	r5,r22
 400a168:	8a22b03a 	or	r17,r17,r8
 400a16c:	3524983a 	sll	r18,r6,r20
 400a170:	dc400015 	stw	r17,0(sp)
 400a174:	d8c00115 	stw	r3,4(sp)
 400a178:	40035ac0 	call	40035ac <__umodsi3>
 400a17c:	d8c00117 	ldw	r3,4(sp)
 400a180:	b00b883a 	mov	r5,r22
 400a184:	1039883a 	mov	fp,r2
 400a188:	1809883a 	mov	r4,r3
 400a18c:	40035480 	call	4003548 <__udivsi3>
 400a190:	adffffcc 	andi	r23,r21,65535
 400a194:	100b883a 	mov	r5,r2
 400a198:	b809883a 	mov	r4,r23
 400a19c:	1023883a 	mov	r17,r2
 400a1a0:	40036040 	call	4003604 <__mulsi3>
 400a1a4:	d9400017 	ldw	r5,0(sp)
 400a1a8:	e008943a 	slli	r4,fp,16
 400a1ac:	8520983a 	sll	r16,r16,r20
 400a1b0:	2806d43a 	srli	r3,r5,16
 400a1b4:	1906b03a 	or	r3,r3,r4
 400a1b8:	1880042e 	bgeu	r3,r2,400a1cc <__umoddi3+0x374>
 400a1bc:	1d47883a 	add	r3,r3,r21
 400a1c0:	893fffc4 	addi	r4,r17,-1
 400a1c4:	1d40892e 	bgeu	r3,r21,400a3ec <__umoddi3+0x594>
 400a1c8:	2023883a 	mov	r17,r4
 400a1cc:	18b9c83a 	sub	fp,r3,r2
 400a1d0:	b00b883a 	mov	r5,r22
 400a1d4:	e009883a 	mov	r4,fp
 400a1d8:	40035ac0 	call	40035ac <__umodsi3>
 400a1dc:	b00b883a 	mov	r5,r22
 400a1e0:	e009883a 	mov	r4,fp
 400a1e4:	d8800215 	stw	r2,8(sp)
 400a1e8:	40035480 	call	4003548 <__udivsi3>
 400a1ec:	100b883a 	mov	r5,r2
 400a1f0:	b809883a 	mov	r4,r23
 400a1f4:	102d883a 	mov	r22,r2
 400a1f8:	40036040 	call	4003604 <__mulsi3>
 400a1fc:	d9800217 	ldw	r6,8(sp)
 400a200:	d8c00017 	ldw	r3,0(sp)
 400a204:	300c943a 	slli	r6,r6,16
 400a208:	1a3fffcc 	andi	r8,r3,65535
 400a20c:	4190b03a 	or	r8,r8,r6
 400a210:	4080042e 	bgeu	r8,r2,400a224 <__umoddi3+0x3cc>
 400a214:	4551883a 	add	r8,r8,r21
 400a218:	b0ffffc4 	addi	r3,r22,-1
 400a21c:	45406f2e 	bgeu	r8,r21,400a3dc <__umoddi3+0x584>
 400a220:	182d883a 	mov	r22,r3
 400a224:	880e943a 	slli	r7,r17,16
 400a228:	9006d43a 	srli	r3,r18,16
 400a22c:	91bfffcc 	andi	r6,r18,65535
 400a230:	3dacb03a 	or	r22,r7,r22
 400a234:	b02ed43a 	srli	r23,r22,16
 400a238:	b5bfffcc 	andi	r22,r22,65535
 400a23c:	300b883a 	mov	r5,r6
 400a240:	b009883a 	mov	r4,r22
 400a244:	40a3c83a 	sub	r17,r8,r2
 400a248:	d8c00115 	stw	r3,4(sp)
 400a24c:	d9800215 	stw	r6,8(sp)
 400a250:	40036040 	call	4003604 <__mulsi3>
 400a254:	d9800217 	ldw	r6,8(sp)
 400a258:	b809883a 	mov	r4,r23
 400a25c:	1039883a 	mov	fp,r2
 400a260:	300b883a 	mov	r5,r6
 400a264:	40036040 	call	4003604 <__mulsi3>
 400a268:	d8c00117 	ldw	r3,4(sp)
 400a26c:	b809883a 	mov	r4,r23
 400a270:	d8800215 	stw	r2,8(sp)
 400a274:	180b883a 	mov	r5,r3
 400a278:	40036040 	call	4003604 <__mulsi3>
 400a27c:	d8c00117 	ldw	r3,4(sp)
 400a280:	b009883a 	mov	r4,r22
 400a284:	102f883a 	mov	r23,r2
 400a288:	180b883a 	mov	r5,r3
 400a28c:	40036040 	call	4003604 <__mulsi3>
 400a290:	d9800217 	ldw	r6,8(sp)
 400a294:	e006d43a 	srli	r3,fp,16
 400a298:	1185883a 	add	r2,r2,r6
 400a29c:	1885883a 	add	r2,r3,r2
 400a2a0:	1180022e 	bgeu	r2,r6,400a2ac <__umoddi3+0x454>
 400a2a4:	00c00074 	movhi	r3,1
 400a2a8:	b8ef883a 	add	r23,r23,r3
 400a2ac:	1006d43a 	srli	r3,r2,16
 400a2b0:	1004943a 	slli	r2,r2,16
 400a2b4:	e73fffcc 	andi	fp,fp,65535
 400a2b8:	1dc7883a 	add	r3,r3,r23
 400a2bc:	1739883a 	add	fp,r2,fp
 400a2c0:	88c03a36 	bltu	r17,r3,400a3ac <__umoddi3+0x554>
 400a2c4:	88c05126 	beq	r17,r3,400a40c <__umoddi3+0x5b4>
 400a2c8:	88c9c83a 	sub	r4,r17,r3
 400a2cc:	e00f883a 	mov	r7,fp
 400a2d0:	81cfc83a 	sub	r7,r16,r7
 400a2d4:	81c7803a 	cmpltu	r3,r16,r7
 400a2d8:	20c7c83a 	sub	r3,r4,r3
 400a2dc:	1cc4983a 	sll	r2,r3,r19
 400a2e0:	3d0ed83a 	srl	r7,r7,r20
 400a2e4:	1d06d83a 	srl	r3,r3,r20
 400a2e8:	11c4b03a 	or	r2,r2,r7
 400a2ec:	003f7c06 	br	400a0e0 <__alt_data_end+0xfc00a0e0>
 400a2f0:	9ca6983a 	sll	r19,r19,r18
 400a2f4:	88f8d83a 	srl	fp,r17,r3
 400a2f8:	80c4d83a 	srl	r2,r16,r3
 400a2fc:	982cd43a 	srli	r22,r19,16
 400a300:	8ca2983a 	sll	r17,r17,r18
 400a304:	e009883a 	mov	r4,fp
 400a308:	b00b883a 	mov	r5,r22
 400a30c:	146ab03a 	or	r21,r2,r17
 400a310:	40035ac0 	call	40035ac <__umodsi3>
 400a314:	b00b883a 	mov	r5,r22
 400a318:	e009883a 	mov	r4,fp
 400a31c:	1029883a 	mov	r20,r2
 400a320:	9dffffcc 	andi	r23,r19,65535
 400a324:	40035480 	call	4003548 <__udivsi3>
 400a328:	b809883a 	mov	r4,r23
 400a32c:	100b883a 	mov	r5,r2
 400a330:	40036040 	call	4003604 <__mulsi3>
 400a334:	a008943a 	slli	r4,r20,16
 400a338:	a806d43a 	srli	r3,r21,16
 400a33c:	84a8983a 	sll	r20,r16,r18
 400a340:	1906b03a 	or	r3,r3,r4
 400a344:	1880042e 	bgeu	r3,r2,400a358 <__umoddi3+0x500>
 400a348:	1cc7883a 	add	r3,r3,r19
 400a34c:	1cc00236 	bltu	r3,r19,400a358 <__umoddi3+0x500>
 400a350:	1880012e 	bgeu	r3,r2,400a358 <__umoddi3+0x500>
 400a354:	1cc7883a 	add	r3,r3,r19
 400a358:	18a3c83a 	sub	r17,r3,r2
 400a35c:	b00b883a 	mov	r5,r22
 400a360:	8809883a 	mov	r4,r17
 400a364:	40035ac0 	call	40035ac <__umodsi3>
 400a368:	b00b883a 	mov	r5,r22
 400a36c:	8809883a 	mov	r4,r17
 400a370:	1021883a 	mov	r16,r2
 400a374:	40035480 	call	4003548 <__udivsi3>
 400a378:	100b883a 	mov	r5,r2
 400a37c:	b809883a 	mov	r4,r23
 400a380:	8020943a 	slli	r16,r16,16
 400a384:	40036040 	call	4003604 <__mulsi3>
 400a388:	a8ffffcc 	andi	r3,r21,65535
 400a38c:	1c06b03a 	or	r3,r3,r16
 400a390:	1880042e 	bgeu	r3,r2,400a3a4 <__umoddi3+0x54c>
 400a394:	1cc7883a 	add	r3,r3,r19
 400a398:	1cc00236 	bltu	r3,r19,400a3a4 <__umoddi3+0x54c>
 400a39c:	1880012e 	bgeu	r3,r2,400a3a4 <__umoddi3+0x54c>
 400a3a0:	1cc7883a 	add	r3,r3,r19
 400a3a4:	18a3c83a 	sub	r17,r3,r2
 400a3a8:	003f2906 	br	400a050 <__alt_data_end+0xfc00a050>
 400a3ac:	e48fc83a 	sub	r7,fp,r18
 400a3b0:	1d49c83a 	sub	r4,r3,r21
 400a3b4:	e1f9803a 	cmpltu	fp,fp,r7
 400a3b8:	2739c83a 	sub	fp,r4,fp
 400a3bc:	8f09c83a 	sub	r4,r17,fp
 400a3c0:	003fc306 	br	400a2d0 <__alt_data_end+0xfc00a2d0>
 400a3c4:	01000604 	movi	r4,24
 400a3c8:	003ef906 	br	4009fb0 <__alt_data_end+0xfc009fb0>
 400a3cc:	00800604 	movi	r2,24
 400a3d0:	003f1306 	br	400a020 <__alt_data_end+0xfc00a020>
 400a3d4:	01000604 	movi	r4,24
 400a3d8:	003eb606 	br	4009eb4 <__alt_data_end+0xfc009eb4>
 400a3dc:	40bf902e 	bgeu	r8,r2,400a220 <__alt_data_end+0xfc00a220>
 400a3e0:	b5bfff84 	addi	r22,r22,-2
 400a3e4:	4551883a 	add	r8,r8,r21
 400a3e8:	003f8e06 	br	400a224 <__alt_data_end+0xfc00a224>
 400a3ec:	18bf762e 	bgeu	r3,r2,400a1c8 <__alt_data_end+0xfc00a1c8>
 400a3f0:	8c7fff84 	addi	r17,r17,-2
 400a3f4:	1d47883a 	add	r3,r3,r21
 400a3f8:	003f7406 	br	400a1cc <__alt_data_end+0xfc00a1cc>
 400a3fc:	1cc7883a 	add	r3,r3,r19
 400a400:	003ecd06 	br	4009f38 <__alt_data_end+0xfc009f38>
 400a404:	8005883a 	mov	r2,r16
 400a408:	003ef806 	br	4009fec <__alt_data_end+0xfc009fec>
 400a40c:	873fe736 	bltu	r16,fp,400a3ac <__alt_data_end+0xfc00a3ac>
 400a410:	e00f883a 	mov	r7,fp
 400a414:	0009883a 	mov	r4,zero
 400a418:	003fad06 	br	400a2d0 <__alt_data_end+0xfc00a2d0>

0400a41c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a41c:	defffe04 	addi	sp,sp,-8
 400a420:	dfc00115 	stw	ra,4(sp)
 400a424:	df000015 	stw	fp,0(sp)
 400a428:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a42c:	d0a00f17 	ldw	r2,-32708(gp)
 400a430:	10000326 	beq	r2,zero,400a440 <alt_get_errno+0x24>
 400a434:	d0a00f17 	ldw	r2,-32708(gp)
 400a438:	103ee83a 	callr	r2
 400a43c:	00000106 	br	400a444 <alt_get_errno+0x28>
 400a440:	d0a6ec04 	addi	r2,gp,-25680
}
 400a444:	e037883a 	mov	sp,fp
 400a448:	dfc00117 	ldw	ra,4(sp)
 400a44c:	df000017 	ldw	fp,0(sp)
 400a450:	dec00204 	addi	sp,sp,8
 400a454:	f800283a 	ret

0400a458 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400a458:	defffb04 	addi	sp,sp,-20
 400a45c:	dfc00415 	stw	ra,16(sp)
 400a460:	df000315 	stw	fp,12(sp)
 400a464:	df000304 	addi	fp,sp,12
 400a468:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400a46c:	e0bfff17 	ldw	r2,-4(fp)
 400a470:	10000816 	blt	r2,zero,400a494 <close+0x3c>
 400a474:	01400304 	movi	r5,12
 400a478:	e13fff17 	ldw	r4,-4(fp)
 400a47c:	40036040 	call	4003604 <__mulsi3>
 400a480:	1007883a 	mov	r3,r2
 400a484:	00810074 	movhi	r2,1025
 400a488:	10b7de04 	addi	r2,r2,-8328
 400a48c:	1885883a 	add	r2,r3,r2
 400a490:	00000106 	br	400a498 <close+0x40>
 400a494:	0005883a 	mov	r2,zero
 400a498:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400a49c:	e0bffd17 	ldw	r2,-12(fp)
 400a4a0:	10001926 	beq	r2,zero,400a508 <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400a4a4:	e0bffd17 	ldw	r2,-12(fp)
 400a4a8:	10800017 	ldw	r2,0(r2)
 400a4ac:	10800417 	ldw	r2,16(r2)
 400a4b0:	10000626 	beq	r2,zero,400a4cc <close+0x74>
 400a4b4:	e0bffd17 	ldw	r2,-12(fp)
 400a4b8:	10800017 	ldw	r2,0(r2)
 400a4bc:	10800417 	ldw	r2,16(r2)
 400a4c0:	e13ffd17 	ldw	r4,-12(fp)
 400a4c4:	103ee83a 	callr	r2
 400a4c8:	00000106 	br	400a4d0 <close+0x78>
 400a4cc:	0005883a 	mov	r2,zero
 400a4d0:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400a4d4:	e13fff17 	ldw	r4,-4(fp)
 400a4d8:	400ad000 	call	400ad00 <alt_release_fd>
    if (rval < 0)
 400a4dc:	e0bffe17 	ldw	r2,-8(fp)
 400a4e0:	1000070e 	bge	r2,zero,400a500 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 400a4e4:	400a41c0 	call	400a41c <alt_get_errno>
 400a4e8:	1007883a 	mov	r3,r2
 400a4ec:	e0bffe17 	ldw	r2,-8(fp)
 400a4f0:	0085c83a 	sub	r2,zero,r2
 400a4f4:	18800015 	stw	r2,0(r3)
      return -1;
 400a4f8:	00bfffc4 	movi	r2,-1
 400a4fc:	00000706 	br	400a51c <close+0xc4>
    }
    return 0;
 400a500:	0005883a 	mov	r2,zero
 400a504:	00000506 	br	400a51c <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400a508:	400a41c0 	call	400a41c <alt_get_errno>
 400a50c:	1007883a 	mov	r3,r2
 400a510:	00801444 	movi	r2,81
 400a514:	18800015 	stw	r2,0(r3)
    return -1;
 400a518:	00bfffc4 	movi	r2,-1
  }
}
 400a51c:	e037883a 	mov	sp,fp
 400a520:	dfc00117 	ldw	ra,4(sp)
 400a524:	df000017 	ldw	fp,0(sp)
 400a528:	dec00204 	addi	sp,sp,8
 400a52c:	f800283a 	ret

0400a530 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400a530:	defffc04 	addi	sp,sp,-16
 400a534:	df000315 	stw	fp,12(sp)
 400a538:	df000304 	addi	fp,sp,12
 400a53c:	e13ffd15 	stw	r4,-12(fp)
 400a540:	e17ffe15 	stw	r5,-8(fp)
 400a544:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400a548:	e0bfff17 	ldw	r2,-4(fp)
}
 400a54c:	e037883a 	mov	sp,fp
 400a550:	df000017 	ldw	fp,0(sp)
 400a554:	dec00104 	addi	sp,sp,4
 400a558:	f800283a 	ret

0400a55c <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400a55c:	defffd04 	addi	sp,sp,-12
 400a560:	df000215 	stw	fp,8(sp)
 400a564:	df000204 	addi	fp,sp,8
 400a568:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400a56c:	0001883a 	nop
 400a570:	e0bfff17 	ldw	r2,-4(fp)
 400a574:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 400a578:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400a57c:	10000226 	beq	r2,zero,400a588 <_exit+0x2c>
    ALT_SIM_FAIL();
 400a580:	002af070 	cmpltui	zero,zero,43969
 400a584:	00000106 	br	400a58c <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 400a588:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 400a58c:	003fff06 	br	400a58c <__alt_data_end+0xfc00a58c>

0400a590 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a590:	defffe04 	addi	sp,sp,-8
 400a594:	dfc00115 	stw	ra,4(sp)
 400a598:	df000015 	stw	fp,0(sp)
 400a59c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a5a0:	d0a00f17 	ldw	r2,-32708(gp)
 400a5a4:	10000326 	beq	r2,zero,400a5b4 <alt_get_errno+0x24>
 400a5a8:	d0a00f17 	ldw	r2,-32708(gp)
 400a5ac:	103ee83a 	callr	r2
 400a5b0:	00000106 	br	400a5b8 <alt_get_errno+0x28>
 400a5b4:	d0a6ec04 	addi	r2,gp,-25680
}
 400a5b8:	e037883a 	mov	sp,fp
 400a5bc:	dfc00117 	ldw	ra,4(sp)
 400a5c0:	df000017 	ldw	fp,0(sp)
 400a5c4:	dec00204 	addi	sp,sp,8
 400a5c8:	f800283a 	ret

0400a5cc <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400a5cc:	defffb04 	addi	sp,sp,-20
 400a5d0:	dfc00415 	stw	ra,16(sp)
 400a5d4:	df000315 	stw	fp,12(sp)
 400a5d8:	df000304 	addi	fp,sp,12
 400a5dc:	e13ffe15 	stw	r4,-8(fp)
 400a5e0:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a5e4:	e0bffe17 	ldw	r2,-8(fp)
 400a5e8:	10000816 	blt	r2,zero,400a60c <fstat+0x40>
 400a5ec:	01400304 	movi	r5,12
 400a5f0:	e13ffe17 	ldw	r4,-8(fp)
 400a5f4:	40036040 	call	4003604 <__mulsi3>
 400a5f8:	1007883a 	mov	r3,r2
 400a5fc:	00810074 	movhi	r2,1025
 400a600:	10b7de04 	addi	r2,r2,-8328
 400a604:	1885883a 	add	r2,r3,r2
 400a608:	00000106 	br	400a610 <fstat+0x44>
 400a60c:	0005883a 	mov	r2,zero
 400a610:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400a614:	e0bffd17 	ldw	r2,-12(fp)
 400a618:	10001026 	beq	r2,zero,400a65c <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400a61c:	e0bffd17 	ldw	r2,-12(fp)
 400a620:	10800017 	ldw	r2,0(r2)
 400a624:	10800817 	ldw	r2,32(r2)
 400a628:	10000726 	beq	r2,zero,400a648 <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 400a62c:	e0bffd17 	ldw	r2,-12(fp)
 400a630:	10800017 	ldw	r2,0(r2)
 400a634:	10800817 	ldw	r2,32(r2)
 400a638:	e17fff17 	ldw	r5,-4(fp)
 400a63c:	e13ffd17 	ldw	r4,-12(fp)
 400a640:	103ee83a 	callr	r2
 400a644:	00000a06 	br	400a670 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400a648:	e0bfff17 	ldw	r2,-4(fp)
 400a64c:	00c80004 	movi	r3,8192
 400a650:	10c00115 	stw	r3,4(r2)
      return 0;
 400a654:	0005883a 	mov	r2,zero
 400a658:	00000506 	br	400a670 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400a65c:	400a5900 	call	400a590 <alt_get_errno>
 400a660:	1007883a 	mov	r3,r2
 400a664:	00801444 	movi	r2,81
 400a668:	18800015 	stw	r2,0(r3)
    return -1;
 400a66c:	00bfffc4 	movi	r2,-1
  }
}
 400a670:	e037883a 	mov	sp,fp
 400a674:	dfc00117 	ldw	ra,4(sp)
 400a678:	df000017 	ldw	fp,0(sp)
 400a67c:	dec00204 	addi	sp,sp,8
 400a680:	f800283a 	ret

0400a684 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 400a684:	deffff04 	addi	sp,sp,-4
 400a688:	df000015 	stw	fp,0(sp)
 400a68c:	d839883a 	mov	fp,sp
  return 0;
 400a690:	0005883a 	mov	r2,zero
}
 400a694:	e037883a 	mov	sp,fp
 400a698:	df000017 	ldw	fp,0(sp)
 400a69c:	dec00104 	addi	sp,sp,4
 400a6a0:	f800283a 	ret

0400a6a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a6a4:	defffe04 	addi	sp,sp,-8
 400a6a8:	dfc00115 	stw	ra,4(sp)
 400a6ac:	df000015 	stw	fp,0(sp)
 400a6b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a6b4:	d0a00f17 	ldw	r2,-32708(gp)
 400a6b8:	10000326 	beq	r2,zero,400a6c8 <alt_get_errno+0x24>
 400a6bc:	d0a00f17 	ldw	r2,-32708(gp)
 400a6c0:	103ee83a 	callr	r2
 400a6c4:	00000106 	br	400a6cc <alt_get_errno+0x28>
 400a6c8:	d0a6ec04 	addi	r2,gp,-25680
}
 400a6cc:	e037883a 	mov	sp,fp
 400a6d0:	dfc00117 	ldw	ra,4(sp)
 400a6d4:	df000017 	ldw	fp,0(sp)
 400a6d8:	dec00204 	addi	sp,sp,8
 400a6dc:	f800283a 	ret

0400a6e0 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400a6e0:	deffed04 	addi	sp,sp,-76
 400a6e4:	dfc01215 	stw	ra,72(sp)
 400a6e8:	df001115 	stw	fp,68(sp)
 400a6ec:	df001104 	addi	fp,sp,68
 400a6f0:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400a6f4:	e0bfff17 	ldw	r2,-4(fp)
 400a6f8:	10000816 	blt	r2,zero,400a71c <isatty+0x3c>
 400a6fc:	01400304 	movi	r5,12
 400a700:	e13fff17 	ldw	r4,-4(fp)
 400a704:	40036040 	call	4003604 <__mulsi3>
 400a708:	1007883a 	mov	r3,r2
 400a70c:	00810074 	movhi	r2,1025
 400a710:	10b7de04 	addi	r2,r2,-8328
 400a714:	1885883a 	add	r2,r3,r2
 400a718:	00000106 	br	400a720 <isatty+0x40>
 400a71c:	0005883a 	mov	r2,zero
 400a720:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400a724:	e0bfef17 	ldw	r2,-68(fp)
 400a728:	10000e26 	beq	r2,zero,400a764 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400a72c:	e0bfef17 	ldw	r2,-68(fp)
 400a730:	10800017 	ldw	r2,0(r2)
 400a734:	10800817 	ldw	r2,32(r2)
 400a738:	1000021e 	bne	r2,zero,400a744 <isatty+0x64>
    {
      return 1;
 400a73c:	00800044 	movi	r2,1
 400a740:	00000d06 	br	400a778 <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400a744:	e0bff004 	addi	r2,fp,-64
 400a748:	100b883a 	mov	r5,r2
 400a74c:	e13fff17 	ldw	r4,-4(fp)
 400a750:	400a5cc0 	call	400a5cc <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400a754:	e0bff117 	ldw	r2,-60(fp)
 400a758:	10880020 	cmpeqi	r2,r2,8192
 400a75c:	10803fcc 	andi	r2,r2,255
 400a760:	00000506 	br	400a778 <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400a764:	400a6a40 	call	400a6a4 <alt_get_errno>
 400a768:	1007883a 	mov	r3,r2
 400a76c:	00801444 	movi	r2,81
 400a770:	18800015 	stw	r2,0(r3)
    return 0;
 400a774:	0005883a 	mov	r2,zero
  }
}
 400a778:	e037883a 	mov	sp,fp
 400a77c:	dfc00117 	ldw	ra,4(sp)
 400a780:	df000017 	ldw	fp,0(sp)
 400a784:	dec00204 	addi	sp,sp,8
 400a788:	f800283a 	ret

0400a78c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a78c:	defffe04 	addi	sp,sp,-8
 400a790:	dfc00115 	stw	ra,4(sp)
 400a794:	df000015 	stw	fp,0(sp)
 400a798:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a79c:	d0a00f17 	ldw	r2,-32708(gp)
 400a7a0:	10000326 	beq	r2,zero,400a7b0 <alt_get_errno+0x24>
 400a7a4:	d0a00f17 	ldw	r2,-32708(gp)
 400a7a8:	103ee83a 	callr	r2
 400a7ac:	00000106 	br	400a7b4 <alt_get_errno+0x28>
 400a7b0:	d0a6ec04 	addi	r2,gp,-25680
}
 400a7b4:	e037883a 	mov	sp,fp
 400a7b8:	dfc00117 	ldw	ra,4(sp)
 400a7bc:	df000017 	ldw	fp,0(sp)
 400a7c0:	dec00204 	addi	sp,sp,8
 400a7c4:	f800283a 	ret

0400a7c8 <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 400a7c8:	defffb04 	addi	sp,sp,-20
 400a7cc:	dfc00415 	stw	ra,16(sp)
 400a7d0:	df000315 	stw	fp,12(sp)
 400a7d4:	df000304 	addi	fp,sp,12
 400a7d8:	e13ffe15 	stw	r4,-8(fp)
 400a7dc:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 400a7e0:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 400a7e4:	e0bffe17 	ldw	r2,-8(fp)
 400a7e8:	00802f16 	blt	zero,r2,400a8a8 <kill+0xe0>
  {
    switch (sig)
 400a7ec:	e0bfff17 	ldw	r2,-4(fp)
 400a7f0:	10800828 	cmpgeui	r2,r2,32
 400a7f4:	1000291e 	bne	r2,zero,400a89c <kill+0xd4>
 400a7f8:	e0bfff17 	ldw	r2,-4(fp)
 400a7fc:	100690ba 	slli	r3,r2,2
 400a800:	00810074 	movhi	r2,1025
 400a804:	10aa0504 	addi	r2,r2,-22508
 400a808:	1885883a 	add	r2,r3,r2
 400a80c:	10800017 	ldw	r2,0(r2)
 400a810:	1000683a 	jmp	r2
 400a814:	0400a8bc 	xorhi	r16,zero,674
 400a818:	0400a89c 	xori	r16,zero,674
 400a81c:	0400a89c 	xori	r16,zero,674
 400a820:	0400a894 	movui	r16,674
 400a824:	0400a894 	movui	r16,674
 400a828:	0400a894 	movui	r16,674
 400a82c:	0400a894 	movui	r16,674
 400a830:	0400a89c 	xori	r16,zero,674
 400a834:	0400a894 	movui	r16,674
 400a838:	0400a894 	movui	r16,674
 400a83c:	0400a894 	movui	r16,674
 400a840:	0400a894 	movui	r16,674
 400a844:	0400a894 	movui	r16,674
 400a848:	0400a894 	movui	r16,674
 400a84c:	0400a894 	movui	r16,674
 400a850:	0400a894 	movui	r16,674
 400a854:	0400a8bc 	xorhi	r16,zero,674
 400a858:	0400a89c 	xori	r16,zero,674
 400a85c:	0400a89c 	xori	r16,zero,674
 400a860:	0400a89c 	xori	r16,zero,674
 400a864:	0400a8bc 	xorhi	r16,zero,674
 400a868:	0400a89c 	xori	r16,zero,674
 400a86c:	0400a89c 	xori	r16,zero,674
 400a870:	0400a894 	movui	r16,674
 400a874:	0400a894 	movui	r16,674
 400a878:	0400a894 	movui	r16,674
 400a87c:	0400a894 	movui	r16,674
 400a880:	0400a894 	movui	r16,674
 400a884:	0400a89c 	xori	r16,zero,674
 400a888:	0400a89c 	xori	r16,zero,674
 400a88c:	0400a894 	movui	r16,674
 400a890:	0400a894 	movui	r16,674
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 400a894:	0009883a 	mov	r4,zero
 400a898:	400a55c0 	call	400a55c <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 400a89c:	00800584 	movi	r2,22
 400a8a0:	e0bffd15 	stw	r2,-12(fp)
 400a8a4:	00000606 	br	400a8c0 <kill+0xf8>
    }
  }

  else if (pid > 0)
 400a8a8:	e0bffe17 	ldw	r2,-8(fp)
 400a8ac:	0080040e 	bge	zero,r2,400a8c0 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 400a8b0:	008000c4 	movi	r2,3
 400a8b4:	e0bffd15 	stw	r2,-12(fp)
 400a8b8:	00000106 	br	400a8c0 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 400a8bc:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 400a8c0:	e0bffd17 	ldw	r2,-12(fp)
 400a8c4:	10000626 	beq	r2,zero,400a8e0 <kill+0x118>
  {
    ALT_ERRNO = status;
 400a8c8:	400a78c0 	call	400a78c <alt_get_errno>
 400a8cc:	1007883a 	mov	r3,r2
 400a8d0:	e0bffd17 	ldw	r2,-12(fp)
 400a8d4:	18800015 	stw	r2,0(r3)
    return -1;
 400a8d8:	00bfffc4 	movi	r2,-1
 400a8dc:	00000106 	br	400a8e4 <kill+0x11c>
  }

  return 0;
 400a8e0:	0005883a 	mov	r2,zero
}
 400a8e4:	e037883a 	mov	sp,fp
 400a8e8:	dfc00117 	ldw	ra,4(sp)
 400a8ec:	df000017 	ldw	fp,0(sp)
 400a8f0:	dec00204 	addi	sp,sp,8
 400a8f4:	f800283a 	ret

0400a8f8 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400a8f8:	defffc04 	addi	sp,sp,-16
 400a8fc:	df000315 	stw	fp,12(sp)
 400a900:	df000304 	addi	fp,sp,12
 400a904:	e13ffd15 	stw	r4,-12(fp)
 400a908:	e17ffe15 	stw	r5,-8(fp)
 400a90c:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400a910:	e0fffe17 	ldw	r3,-8(fp)
 400a914:	e0bffd17 	ldw	r2,-12(fp)
 400a918:	18800c26 	beq	r3,r2,400a94c <alt_load_section+0x54>
  {
    while( to != end )
 400a91c:	00000806 	br	400a940 <alt_load_section+0x48>
    {
      *to++ = *from++;
 400a920:	e0bffe17 	ldw	r2,-8(fp)
 400a924:	10c00104 	addi	r3,r2,4
 400a928:	e0fffe15 	stw	r3,-8(fp)
 400a92c:	e0fffd17 	ldw	r3,-12(fp)
 400a930:	19000104 	addi	r4,r3,4
 400a934:	e13ffd15 	stw	r4,-12(fp)
 400a938:	18c00017 	ldw	r3,0(r3)
 400a93c:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400a940:	e0fffe17 	ldw	r3,-8(fp)
 400a944:	e0bfff17 	ldw	r2,-4(fp)
 400a948:	18bff51e 	bne	r3,r2,400a920 <__alt_data_end+0xfc00a920>
    {
      *to++ = *from++;
    }
  }
}
 400a94c:	0001883a 	nop
 400a950:	e037883a 	mov	sp,fp
 400a954:	df000017 	ldw	fp,0(sp)
 400a958:	dec00104 	addi	sp,sp,4
 400a95c:	f800283a 	ret

0400a960 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400a960:	defffe04 	addi	sp,sp,-8
 400a964:	dfc00115 	stw	ra,4(sp)
 400a968:	df000015 	stw	fp,0(sp)
 400a96c:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400a970:	01810074 	movhi	r6,1025
 400a974:	31bc8104 	addi	r6,r6,-3580
 400a978:	01410074 	movhi	r5,1025
 400a97c:	2975ab04 	addi	r5,r5,-10580
 400a980:	01010074 	movhi	r4,1025
 400a984:	213c8104 	addi	r4,r4,-3580
 400a988:	400a8f80 	call	400a8f8 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400a98c:	01810034 	movhi	r6,1024
 400a990:	31808c04 	addi	r6,r6,560
 400a994:	01410034 	movhi	r5,1024
 400a998:	29400804 	addi	r5,r5,32
 400a99c:	01010034 	movhi	r4,1024
 400a9a0:	21000804 	addi	r4,r4,32
 400a9a4:	400a8f80 	call	400a8f8 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400a9a8:	01810074 	movhi	r6,1025
 400a9ac:	31b5ab04 	addi	r6,r6,-10580
 400a9b0:	01410074 	movhi	r5,1025
 400a9b4:	29741504 	addi	r5,r5,-12204
 400a9b8:	01010074 	movhi	r4,1025
 400a9bc:	21341504 	addi	r4,r4,-12204
 400a9c0:	400a8f80 	call	400a8f8 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400a9c4:	400bfd00 	call	400bfd0 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400a9c8:	400c1900 	call	400c190 <alt_icache_flush_all>
}
 400a9cc:	0001883a 	nop
 400a9d0:	e037883a 	mov	sp,fp
 400a9d4:	dfc00117 	ldw	ra,4(sp)
 400a9d8:	df000017 	ldw	fp,0(sp)
 400a9dc:	dec00204 	addi	sp,sp,8
 400a9e0:	f800283a 	ret

0400a9e4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400a9e4:	defffe04 	addi	sp,sp,-8
 400a9e8:	dfc00115 	stw	ra,4(sp)
 400a9ec:	df000015 	stw	fp,0(sp)
 400a9f0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400a9f4:	d0a00f17 	ldw	r2,-32708(gp)
 400a9f8:	10000326 	beq	r2,zero,400aa08 <alt_get_errno+0x24>
 400a9fc:	d0a00f17 	ldw	r2,-32708(gp)
 400aa00:	103ee83a 	callr	r2
 400aa04:	00000106 	br	400aa0c <alt_get_errno+0x28>
 400aa08:	d0a6ec04 	addi	r2,gp,-25680
}
 400aa0c:	e037883a 	mov	sp,fp
 400aa10:	dfc00117 	ldw	ra,4(sp)
 400aa14:	df000017 	ldw	fp,0(sp)
 400aa18:	dec00204 	addi	sp,sp,8
 400aa1c:	f800283a 	ret

0400aa20 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400aa20:	defff904 	addi	sp,sp,-28
 400aa24:	dfc00615 	stw	ra,24(sp)
 400aa28:	df000515 	stw	fp,20(sp)
 400aa2c:	df000504 	addi	fp,sp,20
 400aa30:	e13ffd15 	stw	r4,-12(fp)
 400aa34:	e17ffe15 	stw	r5,-8(fp)
 400aa38:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400aa3c:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400aa40:	e0bffd17 	ldw	r2,-12(fp)
 400aa44:	10000816 	blt	r2,zero,400aa68 <lseek+0x48>
 400aa48:	01400304 	movi	r5,12
 400aa4c:	e13ffd17 	ldw	r4,-12(fp)
 400aa50:	40036040 	call	4003604 <__mulsi3>
 400aa54:	1007883a 	mov	r3,r2
 400aa58:	00810074 	movhi	r2,1025
 400aa5c:	10b7de04 	addi	r2,r2,-8328
 400aa60:	1885883a 	add	r2,r3,r2
 400aa64:	00000106 	br	400aa6c <lseek+0x4c>
 400aa68:	0005883a 	mov	r2,zero
 400aa6c:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400aa70:	e0bffc17 	ldw	r2,-16(fp)
 400aa74:	10001026 	beq	r2,zero,400aab8 <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400aa78:	e0bffc17 	ldw	r2,-16(fp)
 400aa7c:	10800017 	ldw	r2,0(r2)
 400aa80:	10800717 	ldw	r2,28(r2)
 400aa84:	10000926 	beq	r2,zero,400aaac <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400aa88:	e0bffc17 	ldw	r2,-16(fp)
 400aa8c:	10800017 	ldw	r2,0(r2)
 400aa90:	10800717 	ldw	r2,28(r2)
 400aa94:	e1bfff17 	ldw	r6,-4(fp)
 400aa98:	e17ffe17 	ldw	r5,-8(fp)
 400aa9c:	e13ffc17 	ldw	r4,-16(fp)
 400aaa0:	103ee83a 	callr	r2
 400aaa4:	e0bffb15 	stw	r2,-20(fp)
 400aaa8:	00000506 	br	400aac0 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400aaac:	00bfde84 	movi	r2,-134
 400aab0:	e0bffb15 	stw	r2,-20(fp)
 400aab4:	00000206 	br	400aac0 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 400aab8:	00bfebc4 	movi	r2,-81
 400aabc:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400aac0:	e0bffb17 	ldw	r2,-20(fp)
 400aac4:	1000070e 	bge	r2,zero,400aae4 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 400aac8:	400a9e40 	call	400a9e4 <alt_get_errno>
 400aacc:	1007883a 	mov	r3,r2
 400aad0:	e0bffb17 	ldw	r2,-20(fp)
 400aad4:	0085c83a 	sub	r2,zero,r2
 400aad8:	18800015 	stw	r2,0(r3)
    rc = -1;
 400aadc:	00bfffc4 	movi	r2,-1
 400aae0:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400aae4:	e0bffb17 	ldw	r2,-20(fp)
}
 400aae8:	e037883a 	mov	sp,fp
 400aaec:	dfc00117 	ldw	ra,4(sp)
 400aaf0:	df000017 	ldw	fp,0(sp)
 400aaf4:	dec00204 	addi	sp,sp,8
 400aaf8:	f800283a 	ret

0400aafc <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400aafc:	defffd04 	addi	sp,sp,-12
 400ab00:	dfc00215 	stw	ra,8(sp)
 400ab04:	df000115 	stw	fp,4(sp)
 400ab08:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400ab0c:	0009883a 	mov	r4,zero
 400ab10:	400afd40 	call	400afd4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400ab14:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400ab18:	400b00c0 	call	400b00c <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400ab1c:	01810074 	movhi	r6,1025
 400ab20:	31b59c04 	addi	r6,r6,-10640
 400ab24:	01410074 	movhi	r5,1025
 400ab28:	29759c04 	addi	r5,r5,-10640
 400ab2c:	01010074 	movhi	r4,1025
 400ab30:	21359c04 	addi	r4,r4,-10640
 400ab34:	400c5340 	call	400c534 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400ab38:	400c0d00 	call	400c0d0 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400ab3c:	01010074 	movhi	r4,1025
 400ab40:	21304c04 	addi	r4,r4,-16080
 400ab44:	400ccf40 	call	400ccf4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400ab48:	d0a6f317 	ldw	r2,-25652(gp)
 400ab4c:	d0e6f417 	ldw	r3,-25648(gp)
 400ab50:	d126f517 	ldw	r4,-25644(gp)
 400ab54:	200d883a 	mov	r6,r4
 400ab58:	180b883a 	mov	r5,r3
 400ab5c:	1009883a 	mov	r4,r2
 400ab60:	400310c0 	call	400310c <main>
 400ab64:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400ab68:	01000044 	movi	r4,1
 400ab6c:	400a4580 	call	400a458 <close>
  exit (result);
 400ab70:	e13fff17 	ldw	r4,-4(fp)
 400ab74:	400cd080 	call	400cd08 <exit>

0400ab78 <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400ab78:	defffe04 	addi	sp,sp,-8
 400ab7c:	df000115 	stw	fp,4(sp)
 400ab80:	df000104 	addi	fp,sp,4
 400ab84:	e13fff15 	stw	r4,-4(fp)
}
 400ab88:	0001883a 	nop
 400ab8c:	e037883a 	mov	sp,fp
 400ab90:	df000017 	ldw	fp,0(sp)
 400ab94:	dec00104 	addi	sp,sp,4
 400ab98:	f800283a 	ret

0400ab9c <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400ab9c:	defffe04 	addi	sp,sp,-8
 400aba0:	df000115 	stw	fp,4(sp)
 400aba4:	df000104 	addi	fp,sp,4
 400aba8:	e13fff15 	stw	r4,-4(fp)
}
 400abac:	0001883a 	nop
 400abb0:	e037883a 	mov	sp,fp
 400abb4:	df000017 	ldw	fp,0(sp)
 400abb8:	dec00104 	addi	sp,sp,4
 400abbc:	f800283a 	ret

0400abc0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400abc0:	defffe04 	addi	sp,sp,-8
 400abc4:	dfc00115 	stw	ra,4(sp)
 400abc8:	df000015 	stw	fp,0(sp)
 400abcc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400abd0:	d0a00f17 	ldw	r2,-32708(gp)
 400abd4:	10000326 	beq	r2,zero,400abe4 <alt_get_errno+0x24>
 400abd8:	d0a00f17 	ldw	r2,-32708(gp)
 400abdc:	103ee83a 	callr	r2
 400abe0:	00000106 	br	400abe8 <alt_get_errno+0x28>
 400abe4:	d0a6ec04 	addi	r2,gp,-25680
}
 400abe8:	e037883a 	mov	sp,fp
 400abec:	dfc00117 	ldw	ra,4(sp)
 400abf0:	df000017 	ldw	fp,0(sp)
 400abf4:	dec00204 	addi	sp,sp,8
 400abf8:	f800283a 	ret

0400abfc <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400abfc:	defff904 	addi	sp,sp,-28
 400ac00:	dfc00615 	stw	ra,24(sp)
 400ac04:	df000515 	stw	fp,20(sp)
 400ac08:	df000504 	addi	fp,sp,20
 400ac0c:	e13ffd15 	stw	r4,-12(fp)
 400ac10:	e17ffe15 	stw	r5,-8(fp)
 400ac14:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400ac18:	e0bffd17 	ldw	r2,-12(fp)
 400ac1c:	10000816 	blt	r2,zero,400ac40 <read+0x44>
 400ac20:	01400304 	movi	r5,12
 400ac24:	e13ffd17 	ldw	r4,-12(fp)
 400ac28:	40036040 	call	4003604 <__mulsi3>
 400ac2c:	1007883a 	mov	r3,r2
 400ac30:	00810074 	movhi	r2,1025
 400ac34:	10b7de04 	addi	r2,r2,-8328
 400ac38:	1885883a 	add	r2,r3,r2
 400ac3c:	00000106 	br	400ac44 <read+0x48>
 400ac40:	0005883a 	mov	r2,zero
 400ac44:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400ac48:	e0bffb17 	ldw	r2,-20(fp)
 400ac4c:	10002226 	beq	r2,zero,400acd8 <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400ac50:	e0bffb17 	ldw	r2,-20(fp)
 400ac54:	10800217 	ldw	r2,8(r2)
 400ac58:	108000cc 	andi	r2,r2,3
 400ac5c:	10800060 	cmpeqi	r2,r2,1
 400ac60:	1000181e 	bne	r2,zero,400acc4 <read+0xc8>
        (fd->dev->read))
 400ac64:	e0bffb17 	ldw	r2,-20(fp)
 400ac68:	10800017 	ldw	r2,0(r2)
 400ac6c:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400ac70:	10001426 	beq	r2,zero,400acc4 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400ac74:	e0bffb17 	ldw	r2,-20(fp)
 400ac78:	10800017 	ldw	r2,0(r2)
 400ac7c:	10800517 	ldw	r2,20(r2)
 400ac80:	e0ffff17 	ldw	r3,-4(fp)
 400ac84:	180d883a 	mov	r6,r3
 400ac88:	e17ffe17 	ldw	r5,-8(fp)
 400ac8c:	e13ffb17 	ldw	r4,-20(fp)
 400ac90:	103ee83a 	callr	r2
 400ac94:	e0bffc15 	stw	r2,-16(fp)
 400ac98:	e0bffc17 	ldw	r2,-16(fp)
 400ac9c:	1000070e 	bge	r2,zero,400acbc <read+0xc0>
        {
          ALT_ERRNO = -rval;
 400aca0:	400abc00 	call	400abc0 <alt_get_errno>
 400aca4:	1007883a 	mov	r3,r2
 400aca8:	e0bffc17 	ldw	r2,-16(fp)
 400acac:	0085c83a 	sub	r2,zero,r2
 400acb0:	18800015 	stw	r2,0(r3)
          return -1;
 400acb4:	00bfffc4 	movi	r2,-1
 400acb8:	00000c06 	br	400acec <read+0xf0>
        }
        return rval;
 400acbc:	e0bffc17 	ldw	r2,-16(fp)
 400acc0:	00000a06 	br	400acec <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400acc4:	400abc00 	call	400abc0 <alt_get_errno>
 400acc8:	1007883a 	mov	r3,r2
 400accc:	00800344 	movi	r2,13
 400acd0:	18800015 	stw	r2,0(r3)
 400acd4:	00000406 	br	400ace8 <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400acd8:	400abc00 	call	400abc0 <alt_get_errno>
 400acdc:	1007883a 	mov	r3,r2
 400ace0:	00801444 	movi	r2,81
 400ace4:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400ace8:	00bfffc4 	movi	r2,-1
}
 400acec:	e037883a 	mov	sp,fp
 400acf0:	dfc00117 	ldw	ra,4(sp)
 400acf4:	df000017 	ldw	fp,0(sp)
 400acf8:	dec00204 	addi	sp,sp,8
 400acfc:	f800283a 	ret

0400ad00 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400ad00:	defffc04 	addi	sp,sp,-16
 400ad04:	dfc00315 	stw	ra,12(sp)
 400ad08:	df000215 	stw	fp,8(sp)
 400ad0c:	dc000115 	stw	r16,4(sp)
 400ad10:	df000204 	addi	fp,sp,8
 400ad14:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 400ad18:	e0bffe17 	ldw	r2,-8(fp)
 400ad1c:	108000d0 	cmplti	r2,r2,3
 400ad20:	1000111e 	bne	r2,zero,400ad68 <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 400ad24:	04010074 	movhi	r16,1025
 400ad28:	8437de04 	addi	r16,r16,-8328
 400ad2c:	e0bffe17 	ldw	r2,-8(fp)
 400ad30:	01400304 	movi	r5,12
 400ad34:	1009883a 	mov	r4,r2
 400ad38:	40036040 	call	4003604 <__mulsi3>
 400ad3c:	8085883a 	add	r2,r16,r2
 400ad40:	10800204 	addi	r2,r2,8
 400ad44:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400ad48:	04010074 	movhi	r16,1025
 400ad4c:	8437de04 	addi	r16,r16,-8328
 400ad50:	e0bffe17 	ldw	r2,-8(fp)
 400ad54:	01400304 	movi	r5,12
 400ad58:	1009883a 	mov	r4,r2
 400ad5c:	40036040 	call	4003604 <__mulsi3>
 400ad60:	8085883a 	add	r2,r16,r2
 400ad64:	10000015 	stw	zero,0(r2)
  }
}
 400ad68:	0001883a 	nop
 400ad6c:	e6ffff04 	addi	sp,fp,-4
 400ad70:	dfc00217 	ldw	ra,8(sp)
 400ad74:	df000117 	ldw	fp,4(sp)
 400ad78:	dc000017 	ldw	r16,0(sp)
 400ad7c:	dec00304 	addi	sp,sp,12
 400ad80:	f800283a 	ret

0400ad84 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400ad84:	defff904 	addi	sp,sp,-28
 400ad88:	df000615 	stw	fp,24(sp)
 400ad8c:	df000604 	addi	fp,sp,24
 400ad90:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ad94:	0005303a 	rdctl	r2,status
 400ad98:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ad9c:	e0fffe17 	ldw	r3,-8(fp)
 400ada0:	00bfff84 	movi	r2,-2
 400ada4:	1884703a 	and	r2,r3,r2
 400ada8:	1001703a 	wrctl	status,r2
  
  return context;
 400adac:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400adb0:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400adb4:	d0a01017 	ldw	r2,-32704(gp)
 400adb8:	10c000c4 	addi	r3,r2,3
 400adbc:	00bfff04 	movi	r2,-4
 400adc0:	1884703a 	and	r2,r3,r2
 400adc4:	d0a01015 	stw	r2,-32704(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400adc8:	d0e01017 	ldw	r3,-32704(gp)
 400adcc:	e0bfff17 	ldw	r2,-4(fp)
 400add0:	1887883a 	add	r3,r3,r2
 400add4:	00820034 	movhi	r2,2048
 400add8:	10800004 	addi	r2,r2,0
 400addc:	10c0062e 	bgeu	r2,r3,400adf8 <sbrk+0x74>
 400ade0:	e0bffb17 	ldw	r2,-20(fp)
 400ade4:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ade8:	e0bffa17 	ldw	r2,-24(fp)
 400adec:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400adf0:	00bfffc4 	movi	r2,-1
 400adf4:	00000b06 	br	400ae24 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400adf8:	d0a01017 	ldw	r2,-32704(gp)
 400adfc:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400ae00:	d0e01017 	ldw	r3,-32704(gp)
 400ae04:	e0bfff17 	ldw	r2,-4(fp)
 400ae08:	1885883a 	add	r2,r3,r2
 400ae0c:	d0a01015 	stw	r2,-32704(gp)
 400ae10:	e0bffb17 	ldw	r2,-20(fp)
 400ae14:	e0bffc15 	stw	r2,-16(fp)
 400ae18:	e0bffc17 	ldw	r2,-16(fp)
 400ae1c:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400ae20:	e0bffd17 	ldw	r2,-12(fp)
} 
 400ae24:	e037883a 	mov	sp,fp
 400ae28:	df000017 	ldw	fp,0(sp)
 400ae2c:	dec00104 	addi	sp,sp,4
 400ae30:	f800283a 	ret

0400ae34 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 400ae34:	defffd04 	addi	sp,sp,-12
 400ae38:	dfc00215 	stw	ra,8(sp)
 400ae3c:	df000115 	stw	fp,4(sp)
 400ae40:	df000104 	addi	fp,sp,4
 400ae44:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 400ae48:	e13fff17 	ldw	r4,-4(fp)
 400ae4c:	400be780 	call	400be78 <alt_busy_sleep>
}
 400ae50:	e037883a 	mov	sp,fp
 400ae54:	dfc00117 	ldw	ra,4(sp)
 400ae58:	df000017 	ldw	fp,0(sp)
 400ae5c:	dec00204 	addi	sp,sp,8
 400ae60:	f800283a 	ret

0400ae64 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ae64:	defffe04 	addi	sp,sp,-8
 400ae68:	dfc00115 	stw	ra,4(sp)
 400ae6c:	df000015 	stw	fp,0(sp)
 400ae70:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ae74:	d0a00f17 	ldw	r2,-32708(gp)
 400ae78:	10000326 	beq	r2,zero,400ae88 <alt_get_errno+0x24>
 400ae7c:	d0a00f17 	ldw	r2,-32708(gp)
 400ae80:	103ee83a 	callr	r2
 400ae84:	00000106 	br	400ae8c <alt_get_errno+0x28>
 400ae88:	d0a6ec04 	addi	r2,gp,-25680
}
 400ae8c:	e037883a 	mov	sp,fp
 400ae90:	dfc00117 	ldw	ra,4(sp)
 400ae94:	df000017 	ldw	fp,0(sp)
 400ae98:	dec00204 	addi	sp,sp,8
 400ae9c:	f800283a 	ret

0400aea0 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400aea0:	defff904 	addi	sp,sp,-28
 400aea4:	dfc00615 	stw	ra,24(sp)
 400aea8:	df000515 	stw	fp,20(sp)
 400aeac:	df000504 	addi	fp,sp,20
 400aeb0:	e13ffd15 	stw	r4,-12(fp)
 400aeb4:	e17ffe15 	stw	r5,-8(fp)
 400aeb8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400aebc:	e0bffd17 	ldw	r2,-12(fp)
 400aec0:	10000816 	blt	r2,zero,400aee4 <write+0x44>
 400aec4:	01400304 	movi	r5,12
 400aec8:	e13ffd17 	ldw	r4,-12(fp)
 400aecc:	40036040 	call	4003604 <__mulsi3>
 400aed0:	1007883a 	mov	r3,r2
 400aed4:	00810074 	movhi	r2,1025
 400aed8:	10b7de04 	addi	r2,r2,-8328
 400aedc:	1885883a 	add	r2,r3,r2
 400aee0:	00000106 	br	400aee8 <write+0x48>
 400aee4:	0005883a 	mov	r2,zero
 400aee8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400aeec:	e0bffb17 	ldw	r2,-20(fp)
 400aef0:	10002126 	beq	r2,zero,400af78 <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400aef4:	e0bffb17 	ldw	r2,-20(fp)
 400aef8:	10800217 	ldw	r2,8(r2)
 400aefc:	108000cc 	andi	r2,r2,3
 400af00:	10001826 	beq	r2,zero,400af64 <write+0xc4>
 400af04:	e0bffb17 	ldw	r2,-20(fp)
 400af08:	10800017 	ldw	r2,0(r2)
 400af0c:	10800617 	ldw	r2,24(r2)
 400af10:	10001426 	beq	r2,zero,400af64 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400af14:	e0bffb17 	ldw	r2,-20(fp)
 400af18:	10800017 	ldw	r2,0(r2)
 400af1c:	10800617 	ldw	r2,24(r2)
 400af20:	e0ffff17 	ldw	r3,-4(fp)
 400af24:	180d883a 	mov	r6,r3
 400af28:	e17ffe17 	ldw	r5,-8(fp)
 400af2c:	e13ffb17 	ldw	r4,-20(fp)
 400af30:	103ee83a 	callr	r2
 400af34:	e0bffc15 	stw	r2,-16(fp)
 400af38:	e0bffc17 	ldw	r2,-16(fp)
 400af3c:	1000070e 	bge	r2,zero,400af5c <write+0xbc>
      {
        ALT_ERRNO = -rval;
 400af40:	400ae640 	call	400ae64 <alt_get_errno>
 400af44:	1007883a 	mov	r3,r2
 400af48:	e0bffc17 	ldw	r2,-16(fp)
 400af4c:	0085c83a 	sub	r2,zero,r2
 400af50:	18800015 	stw	r2,0(r3)
        return -1;
 400af54:	00bfffc4 	movi	r2,-1
 400af58:	00000c06 	br	400af8c <write+0xec>
      }
      return rval;
 400af5c:	e0bffc17 	ldw	r2,-16(fp)
 400af60:	00000a06 	br	400af8c <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400af64:	400ae640 	call	400ae64 <alt_get_errno>
 400af68:	1007883a 	mov	r3,r2
 400af6c:	00800344 	movi	r2,13
 400af70:	18800015 	stw	r2,0(r3)
 400af74:	00000406 	br	400af88 <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400af78:	400ae640 	call	400ae64 <alt_get_errno>
 400af7c:	1007883a 	mov	r3,r2
 400af80:	00801444 	movi	r2,81
 400af84:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400af88:	00bfffc4 	movi	r2,-1
}
 400af8c:	e037883a 	mov	sp,fp
 400af90:	dfc00117 	ldw	ra,4(sp)
 400af94:	df000017 	ldw	fp,0(sp)
 400af98:	dec00204 	addi	sp,sp,8
 400af9c:	f800283a 	ret

0400afa0 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400afa0:	defffd04 	addi	sp,sp,-12
 400afa4:	dfc00215 	stw	ra,8(sp)
 400afa8:	df000115 	stw	fp,4(sp)
 400afac:	df000104 	addi	fp,sp,4
 400afb0:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400afb4:	d1600c04 	addi	r5,gp,-32720
 400afb8:	e13fff17 	ldw	r4,-4(fp)
 400afbc:	400c02c0 	call	400c02c <alt_dev_llist_insert>
}
 400afc0:	e037883a 	mov	sp,fp
 400afc4:	dfc00117 	ldw	ra,4(sp)
 400afc8:	df000017 	ldw	fp,0(sp)
 400afcc:	dec00204 	addi	sp,sp,8
 400afd0:	f800283a 	ret

0400afd4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400afd4:	defffd04 	addi	sp,sp,-12
 400afd8:	dfc00215 	stw	ra,8(sp)
 400afdc:	df000115 	stw	fp,4(sp)
 400afe0:	df000104 	addi	fp,sp,4
 400afe4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 400afe8:	400c9d80 	call	400c9d8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400afec:	00800044 	movi	r2,1
 400aff0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400aff4:	0001883a 	nop
 400aff8:	e037883a 	mov	sp,fp
 400affc:	dfc00117 	ldw	ra,4(sp)
 400b000:	df000017 	ldw	fp,0(sp)
 400b004:	dec00204 	addi	sp,sp,8
 400b008:	f800283a 	ret

0400b00c <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400b00c:	defffd04 	addi	sp,sp,-12
 400b010:	dfc00215 	stw	ra,8(sp)
 400b014:	df000115 	stw	fp,4(sp)
 400b018:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 400b01c:	000d883a 	mov	r6,zero
 400b020:	000b883a 	mov	r5,zero
 400b024:	01010074 	movhi	r4,1025
 400b028:	21384804 	addi	r4,r4,-7904
 400b02c:	400b4480 	call	400b448 <altera_avalon_jtag_uart_init>
 400b030:	01010074 	movhi	r4,1025
 400b034:	21383e04 	addi	r4,r4,-7944
 400b038:	400afa00 	call	400afa0 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_DMA_CONTROLLER, video_dma_controller);
 400b03c:	00810074 	movhi	r2,1025
 400b040:	10bc5604 	addi	r2,r2,-3752
 400b044:	10800a17 	ldw	r2,40(r2)
 400b048:	10800017 	ldw	r2,0(r2)
 400b04c:	1007883a 	mov	r3,r2
 400b050:	00810074 	movhi	r2,1025
 400b054:	10bc5604 	addi	r2,r2,-3752
 400b058:	10c00b15 	stw	r3,44(r2)
 400b05c:	00810074 	movhi	r2,1025
 400b060:	10bc5604 	addi	r2,r2,-3752
 400b064:	10800a17 	ldw	r2,40(r2)
 400b068:	10800104 	addi	r2,r2,4
 400b06c:	10800017 	ldw	r2,0(r2)
 400b070:	1007883a 	mov	r3,r2
 400b074:	00810074 	movhi	r2,1025
 400b078:	10bc5604 	addi	r2,r2,-3752
 400b07c:	10c00c15 	stw	r3,48(r2)
 400b080:	00810074 	movhi	r2,1025
 400b084:	10bc5604 	addi	r2,r2,-3752
 400b088:	10800a17 	ldw	r2,40(r2)
 400b08c:	10800204 	addi	r2,r2,8
 400b090:	10800017 	ldw	r2,0(r2)
 400b094:	10ffffcc 	andi	r3,r2,65535
 400b098:	00810074 	movhi	r2,1025
 400b09c:	10bc5604 	addi	r2,r2,-3752
 400b0a0:	10c01115 	stw	r3,68(r2)
 400b0a4:	00810074 	movhi	r2,1025
 400b0a8:	10bc5604 	addi	r2,r2,-3752
 400b0ac:	10800a17 	ldw	r2,40(r2)
 400b0b0:	10800204 	addi	r2,r2,8
 400b0b4:	10800017 	ldw	r2,0(r2)
 400b0b8:	1006d43a 	srli	r3,r2,16
 400b0bc:	00810074 	movhi	r2,1025
 400b0c0:	10bc5604 	addi	r2,r2,-3752
 400b0c4:	10c01215 	stw	r3,72(r2)
 400b0c8:	00810074 	movhi	r2,1025
 400b0cc:	10bc5604 	addi	r2,r2,-3752
 400b0d0:	10800a17 	ldw	r2,40(r2)
 400b0d4:	10800304 	addi	r2,r2,12
 400b0d8:	10800017 	ldw	r2,0(r2)
 400b0dc:	1005d07a 	srai	r2,r2,1
 400b0e0:	10c0004c 	andi	r3,r2,1
 400b0e4:	00810074 	movhi	r2,1025
 400b0e8:	10bc5604 	addi	r2,r2,-3752
 400b0ec:	10c00d15 	stw	r3,52(r2)
 400b0f0:	00810074 	movhi	r2,1025
 400b0f4:	10bc5604 	addi	r2,r2,-3752
 400b0f8:	10800a17 	ldw	r2,40(r2)
 400b0fc:	10800304 	addi	r2,r2,12
 400b100:	10800017 	ldw	r2,0(r2)
 400b104:	1005d23a 	srai	r2,r2,8
 400b108:	108003cc 	andi	r2,r2,15
 400b10c:	10800044 	addi	r2,r2,1
 400b110:	1007883a 	mov	r3,r2
 400b114:	00810074 	movhi	r2,1025
 400b118:	10bc5604 	addi	r2,r2,-3752
 400b11c:	10c00e15 	stw	r3,56(r2)
 400b120:	00810074 	movhi	r2,1025
 400b124:	10bc5604 	addi	r2,r2,-3752
 400b128:	10800a17 	ldw	r2,40(r2)
 400b12c:	10800304 	addi	r2,r2,12
 400b130:	10800017 	ldw	r2,0(r2)
 400b134:	1005d1ba 	srai	r2,r2,6
 400b138:	108000cc 	andi	r2,r2,3
 400b13c:	10800044 	addi	r2,r2,1
 400b140:	1007883a 	mov	r3,r2
 400b144:	00810074 	movhi	r2,1025
 400b148:	10bc5604 	addi	r2,r2,-3752
 400b14c:	10c00f15 	stw	r3,60(r2)
 400b150:	00810074 	movhi	r2,1025
 400b154:	10bc5604 	addi	r2,r2,-3752
 400b158:	10800e17 	ldw	r2,56(r2)
 400b15c:	1007883a 	mov	r3,r2
 400b160:	00810074 	movhi	r2,1025
 400b164:	10bc5604 	addi	r2,r2,-3752
 400b168:	10800f17 	ldw	r2,60(r2)
 400b16c:	100b883a 	mov	r5,r2
 400b170:	1809883a 	mov	r4,r3
 400b174:	40036040 	call	4003604 <__mulsi3>
 400b178:	e0bfff05 	stb	r2,-4(fp)
 400b17c:	e0bfff03 	ldbu	r2,-4(fp)
 400b180:	10800268 	cmpgeui	r2,r2,9
 400b184:	1000051e 	bne	r2,zero,400b19c <alt_sys_init+0x190>
 400b188:	00810074 	movhi	r2,1025
 400b18c:	10bc5604 	addi	r2,r2,-3752
 400b190:	00c00044 	movi	r3,1
 400b194:	10c01015 	stw	r3,64(r2)
 400b198:	00000c06 	br	400b1cc <alt_sys_init+0x1c0>
 400b19c:	e0bfff03 	ldbu	r2,-4(fp)
 400b1a0:	10800468 	cmpgeui	r2,r2,17
 400b1a4:	1000051e 	bne	r2,zero,400b1bc <alt_sys_init+0x1b0>
 400b1a8:	00810074 	movhi	r2,1025
 400b1ac:	10bc5604 	addi	r2,r2,-3752
 400b1b0:	00c00084 	movi	r3,2
 400b1b4:	10c01015 	stw	r3,64(r2)
 400b1b8:	00000406 	br	400b1cc <alt_sys_init+0x1c0>
 400b1bc:	00810074 	movhi	r2,1025
 400b1c0:	10bc5604 	addi	r2,r2,-3752
 400b1c4:	00c00104 	movi	r3,4
 400b1c8:	10c01015 	stw	r3,64(r2)
 400b1cc:	00810074 	movhi	r2,1025
 400b1d0:	10bc5604 	addi	r2,r2,-3752
 400b1d4:	10800a17 	ldw	r2,40(r2)
 400b1d8:	10800304 	addi	r2,r2,12
 400b1dc:	10800017 	ldw	r2,0(r2)
 400b1e0:	1005d43a 	srai	r2,r2,16
 400b1e4:	e0bfff45 	stb	r2,-3(fp)
 400b1e8:	00810074 	movhi	r2,1025
 400b1ec:	10bc5604 	addi	r2,r2,-3752
 400b1f0:	10800a17 	ldw	r2,40(r2)
 400b1f4:	10800304 	addi	r2,r2,12
 400b1f8:	10800017 	ldw	r2,0(r2)
 400b1fc:	1004d63a 	srli	r2,r2,24
 400b200:	e0bfff85 	stb	r2,-2(fp)
 400b204:	00810074 	movhi	r2,1025
 400b208:	10bc5604 	addi	r2,r2,-3752
 400b20c:	10801017 	ldw	r2,64(r2)
 400b210:	10800058 	cmpnei	r2,r2,1
 400b214:	1000041e 	bne	r2,zero,400b228 <alt_sys_init+0x21c>
 400b218:	00810074 	movhi	r2,1025
 400b21c:	10bc5604 	addi	r2,r2,-3752
 400b220:	10001315 	stw	zero,76(r2)
 400b224:	00000e06 	br	400b260 <alt_sys_init+0x254>
 400b228:	00810074 	movhi	r2,1025
 400b22c:	10bc5604 	addi	r2,r2,-3752
 400b230:	10801017 	ldw	r2,64(r2)
 400b234:	10800098 	cmpnei	r2,r2,2
 400b238:	1000051e 	bne	r2,zero,400b250 <alt_sys_init+0x244>
 400b23c:	00810074 	movhi	r2,1025
 400b240:	10bc5604 	addi	r2,r2,-3752
 400b244:	00c00044 	movi	r3,1
 400b248:	10c01315 	stw	r3,76(r2)
 400b24c:	00000406 	br	400b260 <alt_sys_init+0x254>
 400b250:	00810074 	movhi	r2,1025
 400b254:	10bc5604 	addi	r2,r2,-3752
 400b258:	00c00084 	movi	r3,2
 400b25c:	10c01315 	stw	r3,76(r2)
 400b260:	e0bfff43 	ldbu	r2,-3(fp)
 400b264:	00c00804 	movi	r3,32
 400b268:	1885c83a 	sub	r2,r3,r2
 400b26c:	00ffffc4 	movi	r3,-1
 400b270:	1886d83a 	srl	r3,r3,r2
 400b274:	00810074 	movhi	r2,1025
 400b278:	10bc5604 	addi	r2,r2,-3752
 400b27c:	10c01415 	stw	r3,80(r2)
 400b280:	e0ffff43 	ldbu	r3,-3(fp)
 400b284:	00810074 	movhi	r2,1025
 400b288:	10bc5604 	addi	r2,r2,-3752
 400b28c:	10801317 	ldw	r2,76(r2)
 400b290:	1887883a 	add	r3,r3,r2
 400b294:	00810074 	movhi	r2,1025
 400b298:	10bc5604 	addi	r2,r2,-3752
 400b29c:	10c01515 	stw	r3,84(r2)
 400b2a0:	e0bfff83 	ldbu	r2,-2(fp)
 400b2a4:	00c00804 	movi	r3,32
 400b2a8:	1885c83a 	sub	r2,r3,r2
 400b2ac:	00ffffc4 	movi	r3,-1
 400b2b0:	1886d83a 	srl	r3,r3,r2
 400b2b4:	00810074 	movhi	r2,1025
 400b2b8:	10bc5604 	addi	r2,r2,-3752
 400b2bc:	10c01615 	stw	r3,88(r2)
 400b2c0:	01010074 	movhi	r4,1025
 400b2c4:	213c5604 	addi	r4,r4,-3752
 400b2c8:	400afa00 	call	400afa0 <alt_dev_reg>
}
 400b2cc:	0001883a 	nop
 400b2d0:	e037883a 	mov	sp,fp
 400b2d4:	dfc00117 	ldw	ra,4(sp)
 400b2d8:	df000017 	ldw	fp,0(sp)
 400b2dc:	dec00204 	addi	sp,sp,8
 400b2e0:	f800283a 	ret

0400b2e4 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400b2e4:	defffa04 	addi	sp,sp,-24
 400b2e8:	dfc00515 	stw	ra,20(sp)
 400b2ec:	df000415 	stw	fp,16(sp)
 400b2f0:	df000404 	addi	fp,sp,16
 400b2f4:	e13ffd15 	stw	r4,-12(fp)
 400b2f8:	e17ffe15 	stw	r5,-8(fp)
 400b2fc:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400b300:	e0bffd17 	ldw	r2,-12(fp)
 400b304:	10800017 	ldw	r2,0(r2)
 400b308:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400b30c:	e0bffc17 	ldw	r2,-16(fp)
 400b310:	10c00a04 	addi	r3,r2,40
 400b314:	e0bffd17 	ldw	r2,-12(fp)
 400b318:	10800217 	ldw	r2,8(r2)
 400b31c:	100f883a 	mov	r7,r2
 400b320:	e1bfff17 	ldw	r6,-4(fp)
 400b324:	e17ffe17 	ldw	r5,-8(fp)
 400b328:	1809883a 	mov	r4,r3
 400b32c:	400b90c0 	call	400b90c <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400b330:	e037883a 	mov	sp,fp
 400b334:	dfc00117 	ldw	ra,4(sp)
 400b338:	df000017 	ldw	fp,0(sp)
 400b33c:	dec00204 	addi	sp,sp,8
 400b340:	f800283a 	ret

0400b344 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400b344:	defffa04 	addi	sp,sp,-24
 400b348:	dfc00515 	stw	ra,20(sp)
 400b34c:	df000415 	stw	fp,16(sp)
 400b350:	df000404 	addi	fp,sp,16
 400b354:	e13ffd15 	stw	r4,-12(fp)
 400b358:	e17ffe15 	stw	r5,-8(fp)
 400b35c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400b360:	e0bffd17 	ldw	r2,-12(fp)
 400b364:	10800017 	ldw	r2,0(r2)
 400b368:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400b36c:	e0bffc17 	ldw	r2,-16(fp)
 400b370:	10c00a04 	addi	r3,r2,40
 400b374:	e0bffd17 	ldw	r2,-12(fp)
 400b378:	10800217 	ldw	r2,8(r2)
 400b37c:	100f883a 	mov	r7,r2
 400b380:	e1bfff17 	ldw	r6,-4(fp)
 400b384:	e17ffe17 	ldw	r5,-8(fp)
 400b388:	1809883a 	mov	r4,r3
 400b38c:	400bb280 	call	400bb28 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400b390:	e037883a 	mov	sp,fp
 400b394:	dfc00117 	ldw	ra,4(sp)
 400b398:	df000017 	ldw	fp,0(sp)
 400b39c:	dec00204 	addi	sp,sp,8
 400b3a0:	f800283a 	ret

0400b3a4 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400b3a4:	defffc04 	addi	sp,sp,-16
 400b3a8:	dfc00315 	stw	ra,12(sp)
 400b3ac:	df000215 	stw	fp,8(sp)
 400b3b0:	df000204 	addi	fp,sp,8
 400b3b4:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400b3b8:	e0bfff17 	ldw	r2,-4(fp)
 400b3bc:	10800017 	ldw	r2,0(r2)
 400b3c0:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400b3c4:	e0bffe17 	ldw	r2,-8(fp)
 400b3c8:	10c00a04 	addi	r3,r2,40
 400b3cc:	e0bfff17 	ldw	r2,-4(fp)
 400b3d0:	10800217 	ldw	r2,8(r2)
 400b3d4:	100b883a 	mov	r5,r2
 400b3d8:	1809883a 	mov	r4,r3
 400b3dc:	400b7b40 	call	400b7b4 <altera_avalon_jtag_uart_close>
}
 400b3e0:	e037883a 	mov	sp,fp
 400b3e4:	dfc00117 	ldw	ra,4(sp)
 400b3e8:	df000017 	ldw	fp,0(sp)
 400b3ec:	dec00204 	addi	sp,sp,8
 400b3f0:	f800283a 	ret

0400b3f4 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400b3f4:	defffa04 	addi	sp,sp,-24
 400b3f8:	dfc00515 	stw	ra,20(sp)
 400b3fc:	df000415 	stw	fp,16(sp)
 400b400:	df000404 	addi	fp,sp,16
 400b404:	e13ffd15 	stw	r4,-12(fp)
 400b408:	e17ffe15 	stw	r5,-8(fp)
 400b40c:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400b410:	e0bffd17 	ldw	r2,-12(fp)
 400b414:	10800017 	ldw	r2,0(r2)
 400b418:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400b41c:	e0bffc17 	ldw	r2,-16(fp)
 400b420:	10800a04 	addi	r2,r2,40
 400b424:	e1bfff17 	ldw	r6,-4(fp)
 400b428:	e17ffe17 	ldw	r5,-8(fp)
 400b42c:	1009883a 	mov	r4,r2
 400b430:	400b81c0 	call	400b81c <altera_avalon_jtag_uart_ioctl>
}
 400b434:	e037883a 	mov	sp,fp
 400b438:	dfc00117 	ldw	ra,4(sp)
 400b43c:	df000017 	ldw	fp,0(sp)
 400b440:	dec00204 	addi	sp,sp,8
 400b444:	f800283a 	ret

0400b448 <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400b448:	defffa04 	addi	sp,sp,-24
 400b44c:	dfc00515 	stw	ra,20(sp)
 400b450:	df000415 	stw	fp,16(sp)
 400b454:	df000404 	addi	fp,sp,16
 400b458:	e13ffd15 	stw	r4,-12(fp)
 400b45c:	e17ffe15 	stw	r5,-8(fp)
 400b460:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400b464:	e0bffd17 	ldw	r2,-12(fp)
 400b468:	00c00044 	movi	r3,1
 400b46c:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400b470:	e0bffd17 	ldw	r2,-12(fp)
 400b474:	10800017 	ldw	r2,0(r2)
 400b478:	10800104 	addi	r2,r2,4
 400b47c:	1007883a 	mov	r3,r2
 400b480:	e0bffd17 	ldw	r2,-12(fp)
 400b484:	10800817 	ldw	r2,32(r2)
 400b488:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400b48c:	e0bffe17 	ldw	r2,-8(fp)
 400b490:	e0ffff17 	ldw	r3,-4(fp)
 400b494:	d8000015 	stw	zero,0(sp)
 400b498:	e1fffd17 	ldw	r7,-12(fp)
 400b49c:	01810074 	movhi	r6,1025
 400b4a0:	31ad4204 	addi	r6,r6,-19192
 400b4a4:	180b883a 	mov	r5,r3
 400b4a8:	1009883a 	mov	r4,r2
 400b4ac:	400c1b00 	call	400c1b0 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400b4b0:	e0bffd17 	ldw	r2,-12(fp)
 400b4b4:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400b4b8:	e0bffd17 	ldw	r2,-12(fp)
 400b4bc:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400b4c0:	d0e6f717 	ldw	r3,-25636(gp)
 400b4c4:	e1fffd17 	ldw	r7,-12(fp)
 400b4c8:	01810074 	movhi	r6,1025
 400b4cc:	31adc504 	addi	r6,r6,-18668
 400b4d0:	180b883a 	mov	r5,r3
 400b4d4:	1009883a 	mov	r4,r2
 400b4d8:	400bd4c0 	call	400bd4c <alt_alarm_start>
 400b4dc:	1000040e 	bge	r2,zero,400b4f0 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400b4e0:	e0fffd17 	ldw	r3,-12(fp)
 400b4e4:	00a00034 	movhi	r2,32768
 400b4e8:	10bfffc4 	addi	r2,r2,-1
 400b4ec:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400b4f0:	0001883a 	nop
 400b4f4:	e037883a 	mov	sp,fp
 400b4f8:	dfc00117 	ldw	ra,4(sp)
 400b4fc:	df000017 	ldw	fp,0(sp)
 400b500:	dec00204 	addi	sp,sp,8
 400b504:	f800283a 	ret

0400b508 <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400b508:	defff804 	addi	sp,sp,-32
 400b50c:	df000715 	stw	fp,28(sp)
 400b510:	df000704 	addi	fp,sp,28
 400b514:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400b518:	e0bfff17 	ldw	r2,-4(fp)
 400b51c:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 400b520:	e0bffb17 	ldw	r2,-20(fp)
 400b524:	10800017 	ldw	r2,0(r2)
 400b528:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400b52c:	e0bffc17 	ldw	r2,-16(fp)
 400b530:	10800104 	addi	r2,r2,4
 400b534:	10800037 	ldwio	r2,0(r2)
 400b538:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400b53c:	e0bffd17 	ldw	r2,-12(fp)
 400b540:	1080c00c 	andi	r2,r2,768
 400b544:	10006d26 	beq	r2,zero,400b6fc <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400b548:	e0bffd17 	ldw	r2,-12(fp)
 400b54c:	1080400c 	andi	r2,r2,256
 400b550:	10003526 	beq	r2,zero,400b628 <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400b554:	00800074 	movhi	r2,1
 400b558:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400b55c:	e0bffb17 	ldw	r2,-20(fp)
 400b560:	10800a17 	ldw	r2,40(r2)
 400b564:	10800044 	addi	r2,r2,1
 400b568:	1081ffcc 	andi	r2,r2,2047
 400b56c:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 400b570:	e0bffb17 	ldw	r2,-20(fp)
 400b574:	10c00b17 	ldw	r3,44(r2)
 400b578:	e0bffe17 	ldw	r2,-8(fp)
 400b57c:	18801526 	beq	r3,r2,400b5d4 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400b580:	e0bffc17 	ldw	r2,-16(fp)
 400b584:	10800037 	ldwio	r2,0(r2)
 400b588:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400b58c:	e0bff917 	ldw	r2,-28(fp)
 400b590:	10a0000c 	andi	r2,r2,32768
 400b594:	10001126 	beq	r2,zero,400b5dc <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400b598:	e0bffb17 	ldw	r2,-20(fp)
 400b59c:	10800a17 	ldw	r2,40(r2)
 400b5a0:	e0fff917 	ldw	r3,-28(fp)
 400b5a4:	1809883a 	mov	r4,r3
 400b5a8:	e0fffb17 	ldw	r3,-20(fp)
 400b5ac:	1885883a 	add	r2,r3,r2
 400b5b0:	10800e04 	addi	r2,r2,56
 400b5b4:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400b5b8:	e0bffb17 	ldw	r2,-20(fp)
 400b5bc:	10800a17 	ldw	r2,40(r2)
 400b5c0:	10800044 	addi	r2,r2,1
 400b5c4:	10c1ffcc 	andi	r3,r2,2047
 400b5c8:	e0bffb17 	ldw	r2,-20(fp)
 400b5cc:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400b5d0:	003fe206 	br	400b55c <__alt_data_end+0xfc00b55c>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 400b5d4:	0001883a 	nop
 400b5d8:	00000106 	br	400b5e0 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 400b5dc:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400b5e0:	e0bff917 	ldw	r2,-28(fp)
 400b5e4:	10bfffec 	andhi	r2,r2,65535
 400b5e8:	10000f26 	beq	r2,zero,400b628 <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400b5ec:	e0bffb17 	ldw	r2,-20(fp)
 400b5f0:	10c00817 	ldw	r3,32(r2)
 400b5f4:	00bfff84 	movi	r2,-2
 400b5f8:	1886703a 	and	r3,r3,r2
 400b5fc:	e0bffb17 	ldw	r2,-20(fp)
 400b600:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400b604:	e0bffc17 	ldw	r2,-16(fp)
 400b608:	10800104 	addi	r2,r2,4
 400b60c:	1007883a 	mov	r3,r2
 400b610:	e0bffb17 	ldw	r2,-20(fp)
 400b614:	10800817 	ldw	r2,32(r2)
 400b618:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400b61c:	e0bffc17 	ldw	r2,-16(fp)
 400b620:	10800104 	addi	r2,r2,4
 400b624:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400b628:	e0bffd17 	ldw	r2,-12(fp)
 400b62c:	1080800c 	andi	r2,r2,512
 400b630:	103fbe26 	beq	r2,zero,400b52c <__alt_data_end+0xfc00b52c>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400b634:	e0bffd17 	ldw	r2,-12(fp)
 400b638:	1004d43a 	srli	r2,r2,16
 400b63c:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400b640:	00001406 	br	400b694 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400b644:	e0bffc17 	ldw	r2,-16(fp)
 400b648:	e0fffb17 	ldw	r3,-20(fp)
 400b64c:	18c00d17 	ldw	r3,52(r3)
 400b650:	e13ffb17 	ldw	r4,-20(fp)
 400b654:	20c7883a 	add	r3,r4,r3
 400b658:	18c20e04 	addi	r3,r3,2104
 400b65c:	18c00003 	ldbu	r3,0(r3)
 400b660:	18c03fcc 	andi	r3,r3,255
 400b664:	18c0201c 	xori	r3,r3,128
 400b668:	18ffe004 	addi	r3,r3,-128
 400b66c:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400b670:	e0bffb17 	ldw	r2,-20(fp)
 400b674:	10800d17 	ldw	r2,52(r2)
 400b678:	10800044 	addi	r2,r2,1
 400b67c:	10c1ffcc 	andi	r3,r2,2047
 400b680:	e0bffb17 	ldw	r2,-20(fp)
 400b684:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400b688:	e0bffa17 	ldw	r2,-24(fp)
 400b68c:	10bfffc4 	addi	r2,r2,-1
 400b690:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400b694:	e0bffa17 	ldw	r2,-24(fp)
 400b698:	10000526 	beq	r2,zero,400b6b0 <altera_avalon_jtag_uart_irq+0x1a8>
 400b69c:	e0bffb17 	ldw	r2,-20(fp)
 400b6a0:	10c00d17 	ldw	r3,52(r2)
 400b6a4:	e0bffb17 	ldw	r2,-20(fp)
 400b6a8:	10800c17 	ldw	r2,48(r2)
 400b6ac:	18bfe51e 	bne	r3,r2,400b644 <__alt_data_end+0xfc00b644>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400b6b0:	e0bffa17 	ldw	r2,-24(fp)
 400b6b4:	103f9d26 	beq	r2,zero,400b52c <__alt_data_end+0xfc00b52c>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400b6b8:	e0bffb17 	ldw	r2,-20(fp)
 400b6bc:	10c00817 	ldw	r3,32(r2)
 400b6c0:	00bfff44 	movi	r2,-3
 400b6c4:	1886703a 	and	r3,r3,r2
 400b6c8:	e0bffb17 	ldw	r2,-20(fp)
 400b6cc:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400b6d0:	e0bffb17 	ldw	r2,-20(fp)
 400b6d4:	10800017 	ldw	r2,0(r2)
 400b6d8:	10800104 	addi	r2,r2,4
 400b6dc:	1007883a 	mov	r3,r2
 400b6e0:	e0bffb17 	ldw	r2,-20(fp)
 400b6e4:	10800817 	ldw	r2,32(r2)
 400b6e8:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400b6ec:	e0bffc17 	ldw	r2,-16(fp)
 400b6f0:	10800104 	addi	r2,r2,4
 400b6f4:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400b6f8:	003f8c06 	br	400b52c <__alt_data_end+0xfc00b52c>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400b6fc:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 400b700:	0001883a 	nop
 400b704:	e037883a 	mov	sp,fp
 400b708:	df000017 	ldw	fp,0(sp)
 400b70c:	dec00104 	addi	sp,sp,4
 400b710:	f800283a 	ret

0400b714 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400b714:	defff804 	addi	sp,sp,-32
 400b718:	df000715 	stw	fp,28(sp)
 400b71c:	df000704 	addi	fp,sp,28
 400b720:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400b724:	e0bffb17 	ldw	r2,-20(fp)
 400b728:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400b72c:	e0bff917 	ldw	r2,-28(fp)
 400b730:	10800017 	ldw	r2,0(r2)
 400b734:	10800104 	addi	r2,r2,4
 400b738:	10800037 	ldwio	r2,0(r2)
 400b73c:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400b740:	e0bffa17 	ldw	r2,-24(fp)
 400b744:	1081000c 	andi	r2,r2,1024
 400b748:	10000b26 	beq	r2,zero,400b778 <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400b74c:	e0bff917 	ldw	r2,-28(fp)
 400b750:	10800017 	ldw	r2,0(r2)
 400b754:	10800104 	addi	r2,r2,4
 400b758:	1007883a 	mov	r3,r2
 400b75c:	e0bff917 	ldw	r2,-28(fp)
 400b760:	10800817 	ldw	r2,32(r2)
 400b764:	10810014 	ori	r2,r2,1024
 400b768:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400b76c:	e0bff917 	ldw	r2,-28(fp)
 400b770:	10000915 	stw	zero,36(r2)
 400b774:	00000a06 	br	400b7a0 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400b778:	e0bff917 	ldw	r2,-28(fp)
 400b77c:	10c00917 	ldw	r3,36(r2)
 400b780:	00a00034 	movhi	r2,32768
 400b784:	10bfff04 	addi	r2,r2,-4
 400b788:	10c00536 	bltu	r2,r3,400b7a0 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 400b78c:	e0bff917 	ldw	r2,-28(fp)
 400b790:	10800917 	ldw	r2,36(r2)
 400b794:	10c00044 	addi	r3,r2,1
 400b798:	e0bff917 	ldw	r2,-28(fp)
 400b79c:	10c00915 	stw	r3,36(r2)
 400b7a0:	d0a6f717 	ldw	r2,-25636(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400b7a4:	e037883a 	mov	sp,fp
 400b7a8:	df000017 	ldw	fp,0(sp)
 400b7ac:	dec00104 	addi	sp,sp,4
 400b7b0:	f800283a 	ret

0400b7b4 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400b7b4:	defffd04 	addi	sp,sp,-12
 400b7b8:	df000215 	stw	fp,8(sp)
 400b7bc:	df000204 	addi	fp,sp,8
 400b7c0:	e13ffe15 	stw	r4,-8(fp)
 400b7c4:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400b7c8:	00000506 	br	400b7e0 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400b7cc:	e0bfff17 	ldw	r2,-4(fp)
 400b7d0:	1090000c 	andi	r2,r2,16384
 400b7d4:	10000226 	beq	r2,zero,400b7e0 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400b7d8:	00bffd44 	movi	r2,-11
 400b7dc:	00000b06 	br	400b80c <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400b7e0:	e0bffe17 	ldw	r2,-8(fp)
 400b7e4:	10c00d17 	ldw	r3,52(r2)
 400b7e8:	e0bffe17 	ldw	r2,-8(fp)
 400b7ec:	10800c17 	ldw	r2,48(r2)
 400b7f0:	18800526 	beq	r3,r2,400b808 <altera_avalon_jtag_uart_close+0x54>
 400b7f4:	e0bffe17 	ldw	r2,-8(fp)
 400b7f8:	10c00917 	ldw	r3,36(r2)
 400b7fc:	e0bffe17 	ldw	r2,-8(fp)
 400b800:	10800117 	ldw	r2,4(r2)
 400b804:	18bff136 	bltu	r3,r2,400b7cc <__alt_data_end+0xfc00b7cc>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400b808:	0005883a 	mov	r2,zero
}
 400b80c:	e037883a 	mov	sp,fp
 400b810:	df000017 	ldw	fp,0(sp)
 400b814:	dec00104 	addi	sp,sp,4
 400b818:	f800283a 	ret

0400b81c <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400b81c:	defffa04 	addi	sp,sp,-24
 400b820:	df000515 	stw	fp,20(sp)
 400b824:	df000504 	addi	fp,sp,20
 400b828:	e13ffd15 	stw	r4,-12(fp)
 400b82c:	e17ffe15 	stw	r5,-8(fp)
 400b830:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 400b834:	00bff9c4 	movi	r2,-25
 400b838:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400b83c:	e0bffe17 	ldw	r2,-8(fp)
 400b840:	10da8060 	cmpeqi	r3,r2,27137
 400b844:	1800031e 	bne	r3,zero,400b854 <altera_avalon_jtag_uart_ioctl+0x38>
 400b848:	109a80a0 	cmpeqi	r2,r2,27138
 400b84c:	1000181e 	bne	r2,zero,400b8b0 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 400b850:	00002906 	br	400b8f8 <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400b854:	e0bffd17 	ldw	r2,-12(fp)
 400b858:	10c00117 	ldw	r3,4(r2)
 400b85c:	00a00034 	movhi	r2,32768
 400b860:	10bfffc4 	addi	r2,r2,-1
 400b864:	18802126 	beq	r3,r2,400b8ec <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 400b868:	e0bfff17 	ldw	r2,-4(fp)
 400b86c:	10800017 	ldw	r2,0(r2)
 400b870:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400b874:	e0bffc17 	ldw	r2,-16(fp)
 400b878:	10800090 	cmplti	r2,r2,2
 400b87c:	1000061e 	bne	r2,zero,400b898 <altera_avalon_jtag_uart_ioctl+0x7c>
 400b880:	e0fffc17 	ldw	r3,-16(fp)
 400b884:	00a00034 	movhi	r2,32768
 400b888:	10bfffc4 	addi	r2,r2,-1
 400b88c:	18800226 	beq	r3,r2,400b898 <altera_avalon_jtag_uart_ioctl+0x7c>
 400b890:	e0bffc17 	ldw	r2,-16(fp)
 400b894:	00000206 	br	400b8a0 <altera_avalon_jtag_uart_ioctl+0x84>
 400b898:	00a00034 	movhi	r2,32768
 400b89c:	10bfff84 	addi	r2,r2,-2
 400b8a0:	e0fffd17 	ldw	r3,-12(fp)
 400b8a4:	18800115 	stw	r2,4(r3)
      rc = 0;
 400b8a8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400b8ac:	00000f06 	br	400b8ec <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400b8b0:	e0bffd17 	ldw	r2,-12(fp)
 400b8b4:	10c00117 	ldw	r3,4(r2)
 400b8b8:	00a00034 	movhi	r2,32768
 400b8bc:	10bfffc4 	addi	r2,r2,-1
 400b8c0:	18800c26 	beq	r3,r2,400b8f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400b8c4:	e0bffd17 	ldw	r2,-12(fp)
 400b8c8:	10c00917 	ldw	r3,36(r2)
 400b8cc:	e0bffd17 	ldw	r2,-12(fp)
 400b8d0:	10800117 	ldw	r2,4(r2)
 400b8d4:	1885803a 	cmpltu	r2,r3,r2
 400b8d8:	10c03fcc 	andi	r3,r2,255
 400b8dc:	e0bfff17 	ldw	r2,-4(fp)
 400b8e0:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400b8e4:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400b8e8:	00000206 	br	400b8f4 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 400b8ec:	0001883a 	nop
 400b8f0:	00000106 	br	400b8f8 <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 400b8f4:	0001883a 	nop

  default:
    break;
  }

  return rc;
 400b8f8:	e0bffb17 	ldw	r2,-20(fp)
}
 400b8fc:	e037883a 	mov	sp,fp
 400b900:	df000017 	ldw	fp,0(sp)
 400b904:	dec00104 	addi	sp,sp,4
 400b908:	f800283a 	ret

0400b90c <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400b90c:	defff304 	addi	sp,sp,-52
 400b910:	dfc00c15 	stw	ra,48(sp)
 400b914:	df000b15 	stw	fp,44(sp)
 400b918:	df000b04 	addi	fp,sp,44
 400b91c:	e13ffc15 	stw	r4,-16(fp)
 400b920:	e17ffd15 	stw	r5,-12(fp)
 400b924:	e1bffe15 	stw	r6,-8(fp)
 400b928:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 400b92c:	e0bffd17 	ldw	r2,-12(fp)
 400b930:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400b934:	00004706 	br	400ba54 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400b938:	e0bffc17 	ldw	r2,-16(fp)
 400b93c:	10800a17 	ldw	r2,40(r2)
 400b940:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 400b944:	e0bffc17 	ldw	r2,-16(fp)
 400b948:	10800b17 	ldw	r2,44(r2)
 400b94c:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 400b950:	e0fff717 	ldw	r3,-36(fp)
 400b954:	e0bff817 	ldw	r2,-32(fp)
 400b958:	18800536 	bltu	r3,r2,400b970 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400b95c:	e0fff717 	ldw	r3,-36(fp)
 400b960:	e0bff817 	ldw	r2,-32(fp)
 400b964:	1885c83a 	sub	r2,r3,r2
 400b968:	e0bff615 	stw	r2,-40(fp)
 400b96c:	00000406 	br	400b980 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400b970:	00c20004 	movi	r3,2048
 400b974:	e0bff817 	ldw	r2,-32(fp)
 400b978:	1885c83a 	sub	r2,r3,r2
 400b97c:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400b980:	e0bff617 	ldw	r2,-40(fp)
 400b984:	10001e26 	beq	r2,zero,400ba00 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 400b988:	e0fffe17 	ldw	r3,-8(fp)
 400b98c:	e0bff617 	ldw	r2,-40(fp)
 400b990:	1880022e 	bgeu	r3,r2,400b99c <altera_avalon_jtag_uart_read+0x90>
        n = space;
 400b994:	e0bffe17 	ldw	r2,-8(fp)
 400b998:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400b99c:	e0bffc17 	ldw	r2,-16(fp)
 400b9a0:	10c00e04 	addi	r3,r2,56
 400b9a4:	e0bff817 	ldw	r2,-32(fp)
 400b9a8:	1885883a 	add	r2,r3,r2
 400b9ac:	e1bff617 	ldw	r6,-40(fp)
 400b9b0:	100b883a 	mov	r5,r2
 400b9b4:	e13ff517 	ldw	r4,-44(fp)
 400b9b8:	4004bd40 	call	4004bd4 <memcpy>
      ptr   += n;
 400b9bc:	e0fff517 	ldw	r3,-44(fp)
 400b9c0:	e0bff617 	ldw	r2,-40(fp)
 400b9c4:	1885883a 	add	r2,r3,r2
 400b9c8:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 400b9cc:	e0fffe17 	ldw	r3,-8(fp)
 400b9d0:	e0bff617 	ldw	r2,-40(fp)
 400b9d4:	1885c83a 	sub	r2,r3,r2
 400b9d8:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400b9dc:	e0fff817 	ldw	r3,-32(fp)
 400b9e0:	e0bff617 	ldw	r2,-40(fp)
 400b9e4:	1885883a 	add	r2,r3,r2
 400b9e8:	10c1ffcc 	andi	r3,r2,2047
 400b9ec:	e0bffc17 	ldw	r2,-16(fp)
 400b9f0:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400b9f4:	e0bffe17 	ldw	r2,-8(fp)
 400b9f8:	00bfcf16 	blt	zero,r2,400b938 <__alt_data_end+0xfc00b938>
 400b9fc:	00000106 	br	400ba04 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 400ba00:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400ba04:	e0fff517 	ldw	r3,-44(fp)
 400ba08:	e0bffd17 	ldw	r2,-12(fp)
 400ba0c:	1880141e 	bne	r3,r2,400ba60 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400ba10:	e0bfff17 	ldw	r2,-4(fp)
 400ba14:	1090000c 	andi	r2,r2,16384
 400ba18:	1000131e 	bne	r2,zero,400ba68 <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400ba1c:	0001883a 	nop
 400ba20:	e0bffc17 	ldw	r2,-16(fp)
 400ba24:	10c00a17 	ldw	r3,40(r2)
 400ba28:	e0bff717 	ldw	r2,-36(fp)
 400ba2c:	1880051e 	bne	r3,r2,400ba44 <altera_avalon_jtag_uart_read+0x138>
 400ba30:	e0bffc17 	ldw	r2,-16(fp)
 400ba34:	10c00917 	ldw	r3,36(r2)
 400ba38:	e0bffc17 	ldw	r2,-16(fp)
 400ba3c:	10800117 	ldw	r2,4(r2)
 400ba40:	18bff736 	bltu	r3,r2,400ba20 <__alt_data_end+0xfc00ba20>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400ba44:	e0bffc17 	ldw	r2,-16(fp)
 400ba48:	10c00a17 	ldw	r3,40(r2)
 400ba4c:	e0bff717 	ldw	r2,-36(fp)
 400ba50:	18800726 	beq	r3,r2,400ba70 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400ba54:	e0bffe17 	ldw	r2,-8(fp)
 400ba58:	00bfb716 	blt	zero,r2,400b938 <__alt_data_end+0xfc00b938>
 400ba5c:	00000506 	br	400ba74 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 400ba60:	0001883a 	nop
 400ba64:	00000306 	br	400ba74 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 400ba68:	0001883a 	nop
 400ba6c:	00000106 	br	400ba74 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 400ba70:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400ba74:	e0fff517 	ldw	r3,-44(fp)
 400ba78:	e0bffd17 	ldw	r2,-12(fp)
 400ba7c:	18801826 	beq	r3,r2,400bae0 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400ba80:	0005303a 	rdctl	r2,status
 400ba84:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400ba88:	e0fffb17 	ldw	r3,-20(fp)
 400ba8c:	00bfff84 	movi	r2,-2
 400ba90:	1884703a 	and	r2,r3,r2
 400ba94:	1001703a 	wrctl	status,r2
  
  return context;
 400ba98:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400ba9c:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400baa0:	e0bffc17 	ldw	r2,-16(fp)
 400baa4:	10800817 	ldw	r2,32(r2)
 400baa8:	10c00054 	ori	r3,r2,1
 400baac:	e0bffc17 	ldw	r2,-16(fp)
 400bab0:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400bab4:	e0bffc17 	ldw	r2,-16(fp)
 400bab8:	10800017 	ldw	r2,0(r2)
 400babc:	10800104 	addi	r2,r2,4
 400bac0:	1007883a 	mov	r3,r2
 400bac4:	e0bffc17 	ldw	r2,-16(fp)
 400bac8:	10800817 	ldw	r2,32(r2)
 400bacc:	18800035 	stwio	r2,0(r3)
 400bad0:	e0bffa17 	ldw	r2,-24(fp)
 400bad4:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400bad8:	e0bff917 	ldw	r2,-28(fp)
 400badc:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400bae0:	e0fff517 	ldw	r3,-44(fp)
 400bae4:	e0bffd17 	ldw	r2,-12(fp)
 400bae8:	18800426 	beq	r3,r2,400bafc <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 400baec:	e0fff517 	ldw	r3,-44(fp)
 400baf0:	e0bffd17 	ldw	r2,-12(fp)
 400baf4:	1885c83a 	sub	r2,r3,r2
 400baf8:	00000606 	br	400bb14 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 400bafc:	e0bfff17 	ldw	r2,-4(fp)
 400bb00:	1090000c 	andi	r2,r2,16384
 400bb04:	10000226 	beq	r2,zero,400bb10 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 400bb08:	00bffd44 	movi	r2,-11
 400bb0c:	00000106 	br	400bb14 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 400bb10:	00bffec4 	movi	r2,-5
}
 400bb14:	e037883a 	mov	sp,fp
 400bb18:	dfc00117 	ldw	ra,4(sp)
 400bb1c:	df000017 	ldw	fp,0(sp)
 400bb20:	dec00204 	addi	sp,sp,8
 400bb24:	f800283a 	ret

0400bb28 <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400bb28:	defff304 	addi	sp,sp,-52
 400bb2c:	dfc00c15 	stw	ra,48(sp)
 400bb30:	df000b15 	stw	fp,44(sp)
 400bb34:	df000b04 	addi	fp,sp,44
 400bb38:	e13ffc15 	stw	r4,-16(fp)
 400bb3c:	e17ffd15 	stw	r5,-12(fp)
 400bb40:	e1bffe15 	stw	r6,-8(fp)
 400bb44:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400bb48:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400bb4c:	e0bffd17 	ldw	r2,-12(fp)
 400bb50:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400bb54:	00003706 	br	400bc34 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400bb58:	e0bffc17 	ldw	r2,-16(fp)
 400bb5c:	10800c17 	ldw	r2,48(r2)
 400bb60:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 400bb64:	e0bffc17 	ldw	r2,-16(fp)
 400bb68:	10800d17 	ldw	r2,52(r2)
 400bb6c:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 400bb70:	e0fff917 	ldw	r3,-28(fp)
 400bb74:	e0bff517 	ldw	r2,-44(fp)
 400bb78:	1880062e 	bgeu	r3,r2,400bb94 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400bb7c:	e0fff517 	ldw	r3,-44(fp)
 400bb80:	e0bff917 	ldw	r2,-28(fp)
 400bb84:	1885c83a 	sub	r2,r3,r2
 400bb88:	10bfffc4 	addi	r2,r2,-1
 400bb8c:	e0bff615 	stw	r2,-40(fp)
 400bb90:	00000b06 	br	400bbc0 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 400bb94:	e0bff517 	ldw	r2,-44(fp)
 400bb98:	10000526 	beq	r2,zero,400bbb0 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400bb9c:	00c20004 	movi	r3,2048
 400bba0:	e0bff917 	ldw	r2,-28(fp)
 400bba4:	1885c83a 	sub	r2,r3,r2
 400bba8:	e0bff615 	stw	r2,-40(fp)
 400bbac:	00000406 	br	400bbc0 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400bbb0:	00c1ffc4 	movi	r3,2047
 400bbb4:	e0bff917 	ldw	r2,-28(fp)
 400bbb8:	1885c83a 	sub	r2,r3,r2
 400bbbc:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400bbc0:	e0bff617 	ldw	r2,-40(fp)
 400bbc4:	10001e26 	beq	r2,zero,400bc40 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 400bbc8:	e0fffe17 	ldw	r3,-8(fp)
 400bbcc:	e0bff617 	ldw	r2,-40(fp)
 400bbd0:	1880022e 	bgeu	r3,r2,400bbdc <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 400bbd4:	e0bffe17 	ldw	r2,-8(fp)
 400bbd8:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400bbdc:	e0bffc17 	ldw	r2,-16(fp)
 400bbe0:	10c20e04 	addi	r3,r2,2104
 400bbe4:	e0bff917 	ldw	r2,-28(fp)
 400bbe8:	1885883a 	add	r2,r3,r2
 400bbec:	e1bff617 	ldw	r6,-40(fp)
 400bbf0:	e17ffd17 	ldw	r5,-12(fp)
 400bbf4:	1009883a 	mov	r4,r2
 400bbf8:	4004bd40 	call	4004bd4 <memcpy>
      ptr   += n;
 400bbfc:	e0fffd17 	ldw	r3,-12(fp)
 400bc00:	e0bff617 	ldw	r2,-40(fp)
 400bc04:	1885883a 	add	r2,r3,r2
 400bc08:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 400bc0c:	e0fffe17 	ldw	r3,-8(fp)
 400bc10:	e0bff617 	ldw	r2,-40(fp)
 400bc14:	1885c83a 	sub	r2,r3,r2
 400bc18:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400bc1c:	e0fff917 	ldw	r3,-28(fp)
 400bc20:	e0bff617 	ldw	r2,-40(fp)
 400bc24:	1885883a 	add	r2,r3,r2
 400bc28:	10c1ffcc 	andi	r3,r2,2047
 400bc2c:	e0bffc17 	ldw	r2,-16(fp)
 400bc30:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400bc34:	e0bffe17 	ldw	r2,-8(fp)
 400bc38:	00bfc716 	blt	zero,r2,400bb58 <__alt_data_end+0xfc00bb58>
 400bc3c:	00000106 	br	400bc44 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 400bc40:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400bc44:	0005303a 	rdctl	r2,status
 400bc48:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400bc4c:	e0fffb17 	ldw	r3,-20(fp)
 400bc50:	00bfff84 	movi	r2,-2
 400bc54:	1884703a 	and	r2,r3,r2
 400bc58:	1001703a 	wrctl	status,r2
  
  return context;
 400bc5c:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400bc60:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400bc64:	e0bffc17 	ldw	r2,-16(fp)
 400bc68:	10800817 	ldw	r2,32(r2)
 400bc6c:	10c00094 	ori	r3,r2,2
 400bc70:	e0bffc17 	ldw	r2,-16(fp)
 400bc74:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400bc78:	e0bffc17 	ldw	r2,-16(fp)
 400bc7c:	10800017 	ldw	r2,0(r2)
 400bc80:	10800104 	addi	r2,r2,4
 400bc84:	1007883a 	mov	r3,r2
 400bc88:	e0bffc17 	ldw	r2,-16(fp)
 400bc8c:	10800817 	ldw	r2,32(r2)
 400bc90:	18800035 	stwio	r2,0(r3)
 400bc94:	e0bffa17 	ldw	r2,-24(fp)
 400bc98:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400bc9c:	e0bff817 	ldw	r2,-32(fp)
 400bca0:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400bca4:	e0bffe17 	ldw	r2,-8(fp)
 400bca8:	0080100e 	bge	zero,r2,400bcec <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 400bcac:	e0bfff17 	ldw	r2,-4(fp)
 400bcb0:	1090000c 	andi	r2,r2,16384
 400bcb4:	1000101e 	bne	r2,zero,400bcf8 <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400bcb8:	0001883a 	nop
 400bcbc:	e0bffc17 	ldw	r2,-16(fp)
 400bcc0:	10c00d17 	ldw	r3,52(r2)
 400bcc4:	e0bff517 	ldw	r2,-44(fp)
 400bcc8:	1880051e 	bne	r3,r2,400bce0 <altera_avalon_jtag_uart_write+0x1b8>
 400bccc:	e0bffc17 	ldw	r2,-16(fp)
 400bcd0:	10c00917 	ldw	r3,36(r2)
 400bcd4:	e0bffc17 	ldw	r2,-16(fp)
 400bcd8:	10800117 	ldw	r2,4(r2)
 400bcdc:	18bff736 	bltu	r3,r2,400bcbc <__alt_data_end+0xfc00bcbc>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 400bce0:	e0bffc17 	ldw	r2,-16(fp)
 400bce4:	10800917 	ldw	r2,36(r2)
 400bce8:	1000051e 	bne	r2,zero,400bd00 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 400bcec:	e0bffe17 	ldw	r2,-8(fp)
 400bcf0:	00bfd016 	blt	zero,r2,400bc34 <__alt_data_end+0xfc00bc34>
 400bcf4:	00000306 	br	400bd04 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 400bcf8:	0001883a 	nop
 400bcfc:	00000106 	br	400bd04 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 400bd00:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400bd04:	e0fffd17 	ldw	r3,-12(fp)
 400bd08:	e0bff717 	ldw	r2,-36(fp)
 400bd0c:	18800426 	beq	r3,r2,400bd20 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 400bd10:	e0fffd17 	ldw	r3,-12(fp)
 400bd14:	e0bff717 	ldw	r2,-36(fp)
 400bd18:	1885c83a 	sub	r2,r3,r2
 400bd1c:	00000606 	br	400bd38 <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 400bd20:	e0bfff17 	ldw	r2,-4(fp)
 400bd24:	1090000c 	andi	r2,r2,16384
 400bd28:	10000226 	beq	r2,zero,400bd34 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 400bd2c:	00bffd44 	movi	r2,-11
 400bd30:	00000106 	br	400bd38 <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400bd34:	00bffec4 	movi	r2,-5
}
 400bd38:	e037883a 	mov	sp,fp
 400bd3c:	dfc00117 	ldw	ra,4(sp)
 400bd40:	df000017 	ldw	fp,0(sp)
 400bd44:	dec00204 	addi	sp,sp,8
 400bd48:	f800283a 	ret

0400bd4c <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400bd4c:	defff504 	addi	sp,sp,-44
 400bd50:	df000a15 	stw	fp,40(sp)
 400bd54:	df000a04 	addi	fp,sp,40
 400bd58:	e13ffc15 	stw	r4,-16(fp)
 400bd5c:	e17ffd15 	stw	r5,-12(fp)
 400bd60:	e1bffe15 	stw	r6,-8(fp)
 400bd64:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400bd68:	e03ff615 	stw	zero,-40(fp)
 400bd6c:	d0a6f717 	ldw	r2,-25636(gp)
  
  if (alt_ticks_per_second ())
 400bd70:	10003c26 	beq	r2,zero,400be64 <alt_alarm_start+0x118>
  {
    if (alarm)
 400bd74:	e0bffc17 	ldw	r2,-16(fp)
 400bd78:	10003826 	beq	r2,zero,400be5c <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 400bd7c:	e0bffc17 	ldw	r2,-16(fp)
 400bd80:	e0fffe17 	ldw	r3,-8(fp)
 400bd84:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400bd88:	e0bffc17 	ldw	r2,-16(fp)
 400bd8c:	e0ffff17 	ldw	r3,-4(fp)
 400bd90:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400bd94:	0005303a 	rdctl	r2,status
 400bd98:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400bd9c:	e0fff917 	ldw	r3,-28(fp)
 400bda0:	00bfff84 	movi	r2,-2
 400bda4:	1884703a 	and	r2,r3,r2
 400bda8:	1001703a 	wrctl	status,r2
  
  return context;
 400bdac:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 400bdb0:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400bdb4:	d0a6f817 	ldw	r2,-25632(gp)
      
      current_nticks = alt_nticks();
 400bdb8:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400bdbc:	e0fffd17 	ldw	r3,-12(fp)
 400bdc0:	e0bff617 	ldw	r2,-40(fp)
 400bdc4:	1885883a 	add	r2,r3,r2
 400bdc8:	10c00044 	addi	r3,r2,1
 400bdcc:	e0bffc17 	ldw	r2,-16(fp)
 400bdd0:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400bdd4:	e0bffc17 	ldw	r2,-16(fp)
 400bdd8:	10c00217 	ldw	r3,8(r2)
 400bddc:	e0bff617 	ldw	r2,-40(fp)
 400bde0:	1880042e 	bgeu	r3,r2,400bdf4 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 400bde4:	e0bffc17 	ldw	r2,-16(fp)
 400bde8:	00c00044 	movi	r3,1
 400bdec:	10c00405 	stb	r3,16(r2)
 400bdf0:	00000206 	br	400bdfc <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 400bdf4:	e0bffc17 	ldw	r2,-16(fp)
 400bdf8:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400bdfc:	e0bffc17 	ldw	r2,-16(fp)
 400be00:	d0e01204 	addi	r3,gp,-32696
 400be04:	e0fffa15 	stw	r3,-24(fp)
 400be08:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400be0c:	e0bffb17 	ldw	r2,-20(fp)
 400be10:	e0fffa17 	ldw	r3,-24(fp)
 400be14:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400be18:	e0bffa17 	ldw	r2,-24(fp)
 400be1c:	10c00017 	ldw	r3,0(r2)
 400be20:	e0bffb17 	ldw	r2,-20(fp)
 400be24:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400be28:	e0bffa17 	ldw	r2,-24(fp)
 400be2c:	10800017 	ldw	r2,0(r2)
 400be30:	e0fffb17 	ldw	r3,-20(fp)
 400be34:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400be38:	e0bffa17 	ldw	r2,-24(fp)
 400be3c:	e0fffb17 	ldw	r3,-20(fp)
 400be40:	10c00015 	stw	r3,0(r2)
 400be44:	e0bff817 	ldw	r2,-32(fp)
 400be48:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400be4c:	e0bff717 	ldw	r2,-36(fp)
 400be50:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400be54:	0005883a 	mov	r2,zero
 400be58:	00000306 	br	400be68 <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 400be5c:	00bffa84 	movi	r2,-22
 400be60:	00000106 	br	400be68 <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 400be64:	00bfde84 	movi	r2,-134
  }
}
 400be68:	e037883a 	mov	sp,fp
 400be6c:	df000017 	ldw	fp,0(sp)
 400be70:	dec00104 	addi	sp,sp,4
 400be74:	f800283a 	ret

0400be78 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 400be78:	defffa04 	addi	sp,sp,-24
 400be7c:	dfc00515 	stw	ra,20(sp)
 400be80:	df000415 	stw	fp,16(sp)
 400be84:	df000404 	addi	fp,sp,16
 400be88:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 400be8c:	00800244 	movi	r2,9
 400be90:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 400be94:	014003f4 	movhi	r5,15
 400be98:	29509004 	addi	r5,r5,16960
 400be9c:	e13ffd17 	ldw	r4,-12(fp)
 400bea0:	40036040 	call	4003604 <__mulsi3>
 400bea4:	100b883a 	mov	r5,r2
 400bea8:	01017db4 	movhi	r4,1526
 400beac:	21384004 	addi	r4,r4,-7936
 400beb0:	40035480 	call	4003548 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 400beb4:	100b883a 	mov	r5,r2
 400beb8:	01200034 	movhi	r4,32768
 400bebc:	213fffc4 	addi	r4,r4,-1
 400bec0:	40035480 	call	4003548 <__udivsi3>
 400bec4:	100b883a 	mov	r5,r2
 400bec8:	e13fff17 	ldw	r4,-4(fp)
 400becc:	40035480 	call	4003548 <__udivsi3>
 400bed0:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 400bed4:	e0bffe17 	ldw	r2,-8(fp)
 400bed8:	10002a26 	beq	r2,zero,400bf84 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 400bedc:	e03ffc15 	stw	zero,-16(fp)
 400bee0:	00001706 	br	400bf40 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 400bee4:	00a00034 	movhi	r2,32768
 400bee8:	10bfffc4 	addi	r2,r2,-1
 400beec:	10bfffc4 	addi	r2,r2,-1
 400bef0:	103ffe1e 	bne	r2,zero,400beec <__alt_data_end+0xfc00beec>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 400bef4:	014003f4 	movhi	r5,15
 400bef8:	29509004 	addi	r5,r5,16960
 400befc:	e13ffd17 	ldw	r4,-12(fp)
 400bf00:	40036040 	call	4003604 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 400bf04:	100b883a 	mov	r5,r2
 400bf08:	01017db4 	movhi	r4,1526
 400bf0c:	21384004 	addi	r4,r4,-7936
 400bf10:	40035480 	call	4003548 <__udivsi3>
 400bf14:	100b883a 	mov	r5,r2
 400bf18:	01200034 	movhi	r4,32768
 400bf1c:	213fffc4 	addi	r4,r4,-1
 400bf20:	40035480 	call	4003548 <__udivsi3>
 400bf24:	1007883a 	mov	r3,r2
 400bf28:	e0bfff17 	ldw	r2,-4(fp)
 400bf2c:	10c5c83a 	sub	r2,r2,r3
 400bf30:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 400bf34:	e0bffc17 	ldw	r2,-16(fp)
 400bf38:	10800044 	addi	r2,r2,1
 400bf3c:	e0bffc15 	stw	r2,-16(fp)
 400bf40:	e0fffc17 	ldw	r3,-16(fp)
 400bf44:	e0bffe17 	ldw	r2,-8(fp)
 400bf48:	18bfe616 	blt	r3,r2,400bee4 <__alt_data_end+0xfc00bee4>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 400bf4c:	014003f4 	movhi	r5,15
 400bf50:	29509004 	addi	r5,r5,16960
 400bf54:	e13ffd17 	ldw	r4,-12(fp)
 400bf58:	40036040 	call	4003604 <__mulsi3>
 400bf5c:	100b883a 	mov	r5,r2
 400bf60:	01017db4 	movhi	r4,1526
 400bf64:	21384004 	addi	r4,r4,-7936
 400bf68:	40035480 	call	4003548 <__udivsi3>
 400bf6c:	e17fff17 	ldw	r5,-4(fp)
 400bf70:	1009883a 	mov	r4,r2
 400bf74:	40036040 	call	4003604 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400bf78:	10bfffc4 	addi	r2,r2,-1
 400bf7c:	103ffe1e 	bne	r2,zero,400bf78 <__alt_data_end+0xfc00bf78>
 400bf80:	00000d06 	br	400bfb8 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 400bf84:	014003f4 	movhi	r5,15
 400bf88:	29509004 	addi	r5,r5,16960
 400bf8c:	e13ffd17 	ldw	r4,-12(fp)
 400bf90:	40036040 	call	4003604 <__mulsi3>
 400bf94:	100b883a 	mov	r5,r2
 400bf98:	01017db4 	movhi	r4,1526
 400bf9c:	21384004 	addi	r4,r4,-7936
 400bfa0:	40035480 	call	4003548 <__udivsi3>
 400bfa4:	e17fff17 	ldw	r5,-4(fp)
 400bfa8:	1009883a 	mov	r4,r2
 400bfac:	40036040 	call	4003604 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400bfb0:	10bfffc4 	addi	r2,r2,-1
 400bfb4:	00bffe16 	blt	zero,r2,400bfb0 <__alt_data_end+0xfc00bfb0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 400bfb8:	0005883a 	mov	r2,zero
}
 400bfbc:	e037883a 	mov	sp,fp
 400bfc0:	dfc00117 	ldw	ra,4(sp)
 400bfc4:	df000017 	ldw	fp,0(sp)
 400bfc8:	dec00204 	addi	sp,sp,8
 400bfcc:	f800283a 	ret

0400bfd0 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400bfd0:	deffff04 	addi	sp,sp,-4
 400bfd4:	df000015 	stw	fp,0(sp)
 400bfd8:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400bfdc:	0001883a 	nop
 400bfe0:	e037883a 	mov	sp,fp
 400bfe4:	df000017 	ldw	fp,0(sp)
 400bfe8:	dec00104 	addi	sp,sp,4
 400bfec:	f800283a 	ret

0400bff0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400bff0:	defffe04 	addi	sp,sp,-8
 400bff4:	dfc00115 	stw	ra,4(sp)
 400bff8:	df000015 	stw	fp,0(sp)
 400bffc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400c000:	d0a00f17 	ldw	r2,-32708(gp)
 400c004:	10000326 	beq	r2,zero,400c014 <alt_get_errno+0x24>
 400c008:	d0a00f17 	ldw	r2,-32708(gp)
 400c00c:	103ee83a 	callr	r2
 400c010:	00000106 	br	400c018 <alt_get_errno+0x28>
 400c014:	d0a6ec04 	addi	r2,gp,-25680
}
 400c018:	e037883a 	mov	sp,fp
 400c01c:	dfc00117 	ldw	ra,4(sp)
 400c020:	df000017 	ldw	fp,0(sp)
 400c024:	dec00204 	addi	sp,sp,8
 400c028:	f800283a 	ret

0400c02c <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400c02c:	defffa04 	addi	sp,sp,-24
 400c030:	dfc00515 	stw	ra,20(sp)
 400c034:	df000415 	stw	fp,16(sp)
 400c038:	df000404 	addi	fp,sp,16
 400c03c:	e13ffe15 	stw	r4,-8(fp)
 400c040:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400c044:	e0bffe17 	ldw	r2,-8(fp)
 400c048:	10000326 	beq	r2,zero,400c058 <alt_dev_llist_insert+0x2c>
 400c04c:	e0bffe17 	ldw	r2,-8(fp)
 400c050:	10800217 	ldw	r2,8(r2)
 400c054:	1000061e 	bne	r2,zero,400c070 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 400c058:	400bff00 	call	400bff0 <alt_get_errno>
 400c05c:	1007883a 	mov	r3,r2
 400c060:	00800584 	movi	r2,22
 400c064:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400c068:	00bffa84 	movi	r2,-22
 400c06c:	00001306 	br	400c0bc <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400c070:	e0bffe17 	ldw	r2,-8(fp)
 400c074:	e0ffff17 	ldw	r3,-4(fp)
 400c078:	e0fffc15 	stw	r3,-16(fp)
 400c07c:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400c080:	e0bffd17 	ldw	r2,-12(fp)
 400c084:	e0fffc17 	ldw	r3,-16(fp)
 400c088:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400c08c:	e0bffc17 	ldw	r2,-16(fp)
 400c090:	10c00017 	ldw	r3,0(r2)
 400c094:	e0bffd17 	ldw	r2,-12(fp)
 400c098:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400c09c:	e0bffc17 	ldw	r2,-16(fp)
 400c0a0:	10800017 	ldw	r2,0(r2)
 400c0a4:	e0fffd17 	ldw	r3,-12(fp)
 400c0a8:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400c0ac:	e0bffc17 	ldw	r2,-16(fp)
 400c0b0:	e0fffd17 	ldw	r3,-12(fp)
 400c0b4:	10c00015 	stw	r3,0(r2)

  return 0;  
 400c0b8:	0005883a 	mov	r2,zero
}
 400c0bc:	e037883a 	mov	sp,fp
 400c0c0:	dfc00117 	ldw	ra,4(sp)
 400c0c4:	df000017 	ldw	fp,0(sp)
 400c0c8:	dec00204 	addi	sp,sp,8
 400c0cc:	f800283a 	ret

0400c0d0 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400c0d0:	defffd04 	addi	sp,sp,-12
 400c0d4:	dfc00215 	stw	ra,8(sp)
 400c0d8:	df000115 	stw	fp,4(sp)
 400c0dc:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400c0e0:	00810074 	movhi	r2,1025
 400c0e4:	10b41404 	addi	r2,r2,-12208
 400c0e8:	e0bfff15 	stw	r2,-4(fp)
 400c0ec:	00000606 	br	400c108 <_do_ctors+0x38>
        (*ctor) (); 
 400c0f0:	e0bfff17 	ldw	r2,-4(fp)
 400c0f4:	10800017 	ldw	r2,0(r2)
 400c0f8:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400c0fc:	e0bfff17 	ldw	r2,-4(fp)
 400c100:	10bfff04 	addi	r2,r2,-4
 400c104:	e0bfff15 	stw	r2,-4(fp)
 400c108:	e0ffff17 	ldw	r3,-4(fp)
 400c10c:	00810074 	movhi	r2,1025
 400c110:	10b41504 	addi	r2,r2,-12204
 400c114:	18bff62e 	bgeu	r3,r2,400c0f0 <__alt_data_end+0xfc00c0f0>
        (*ctor) (); 
}
 400c118:	0001883a 	nop
 400c11c:	e037883a 	mov	sp,fp
 400c120:	dfc00117 	ldw	ra,4(sp)
 400c124:	df000017 	ldw	fp,0(sp)
 400c128:	dec00204 	addi	sp,sp,8
 400c12c:	f800283a 	ret

0400c130 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400c130:	defffd04 	addi	sp,sp,-12
 400c134:	dfc00215 	stw	ra,8(sp)
 400c138:	df000115 	stw	fp,4(sp)
 400c13c:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400c140:	00810074 	movhi	r2,1025
 400c144:	10b41404 	addi	r2,r2,-12208
 400c148:	e0bfff15 	stw	r2,-4(fp)
 400c14c:	00000606 	br	400c168 <_do_dtors+0x38>
        (*dtor) (); 
 400c150:	e0bfff17 	ldw	r2,-4(fp)
 400c154:	10800017 	ldw	r2,0(r2)
 400c158:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400c15c:	e0bfff17 	ldw	r2,-4(fp)
 400c160:	10bfff04 	addi	r2,r2,-4
 400c164:	e0bfff15 	stw	r2,-4(fp)
 400c168:	e0ffff17 	ldw	r3,-4(fp)
 400c16c:	00810074 	movhi	r2,1025
 400c170:	10b41504 	addi	r2,r2,-12204
 400c174:	18bff62e 	bgeu	r3,r2,400c150 <__alt_data_end+0xfc00c150>
        (*dtor) (); 
}
 400c178:	0001883a 	nop
 400c17c:	e037883a 	mov	sp,fp
 400c180:	dfc00117 	ldw	ra,4(sp)
 400c184:	df000017 	ldw	fp,0(sp)
 400c188:	dec00204 	addi	sp,sp,8
 400c18c:	f800283a 	ret

0400c190 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400c190:	deffff04 	addi	sp,sp,-4
 400c194:	df000015 	stw	fp,0(sp)
 400c198:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 400c19c:	0001883a 	nop
 400c1a0:	e037883a 	mov	sp,fp
 400c1a4:	df000017 	ldw	fp,0(sp)
 400c1a8:	dec00104 	addi	sp,sp,4
 400c1ac:	f800283a 	ret

0400c1b0 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400c1b0:	defff904 	addi	sp,sp,-28
 400c1b4:	dfc00615 	stw	ra,24(sp)
 400c1b8:	df000515 	stw	fp,20(sp)
 400c1bc:	df000504 	addi	fp,sp,20
 400c1c0:	e13ffc15 	stw	r4,-16(fp)
 400c1c4:	e17ffd15 	stw	r5,-12(fp)
 400c1c8:	e1bffe15 	stw	r6,-8(fp)
 400c1cc:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400c1d0:	e0800217 	ldw	r2,8(fp)
 400c1d4:	d8800015 	stw	r2,0(sp)
 400c1d8:	e1ffff17 	ldw	r7,-4(fp)
 400c1dc:	e1bffe17 	ldw	r6,-8(fp)
 400c1e0:	e17ffd17 	ldw	r5,-12(fp)
 400c1e4:	e13ffc17 	ldw	r4,-16(fp)
 400c1e8:	400c3600 	call	400c360 <alt_iic_isr_register>
}  
 400c1ec:	e037883a 	mov	sp,fp
 400c1f0:	dfc00117 	ldw	ra,4(sp)
 400c1f4:	df000017 	ldw	fp,0(sp)
 400c1f8:	dec00204 	addi	sp,sp,8
 400c1fc:	f800283a 	ret

0400c200 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400c200:	defff904 	addi	sp,sp,-28
 400c204:	df000615 	stw	fp,24(sp)
 400c208:	df000604 	addi	fp,sp,24
 400c20c:	e13ffe15 	stw	r4,-8(fp)
 400c210:	e17fff15 	stw	r5,-4(fp)
 400c214:	e0bfff17 	ldw	r2,-4(fp)
 400c218:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c21c:	0005303a 	rdctl	r2,status
 400c220:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c224:	e0fffb17 	ldw	r3,-20(fp)
 400c228:	00bfff84 	movi	r2,-2
 400c22c:	1884703a 	and	r2,r3,r2
 400c230:	1001703a 	wrctl	status,r2
  
  return context;
 400c234:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400c238:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 400c23c:	00c00044 	movi	r3,1
 400c240:	e0bffa17 	ldw	r2,-24(fp)
 400c244:	1884983a 	sll	r2,r3,r2
 400c248:	1007883a 	mov	r3,r2
 400c24c:	d0a6f617 	ldw	r2,-25640(gp)
 400c250:	1884b03a 	or	r2,r3,r2
 400c254:	d0a6f615 	stw	r2,-25640(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400c258:	d0a6f617 	ldw	r2,-25640(gp)
 400c25c:	100170fa 	wrctl	ienable,r2
 400c260:	e0bffc17 	ldw	r2,-16(fp)
 400c264:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c268:	e0bffd17 	ldw	r2,-12(fp)
 400c26c:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400c270:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 400c274:	0001883a 	nop
}
 400c278:	e037883a 	mov	sp,fp
 400c27c:	df000017 	ldw	fp,0(sp)
 400c280:	dec00104 	addi	sp,sp,4
 400c284:	f800283a 	ret

0400c288 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 400c288:	defff904 	addi	sp,sp,-28
 400c28c:	df000615 	stw	fp,24(sp)
 400c290:	df000604 	addi	fp,sp,24
 400c294:	e13ffe15 	stw	r4,-8(fp)
 400c298:	e17fff15 	stw	r5,-4(fp)
 400c29c:	e0bfff17 	ldw	r2,-4(fp)
 400c2a0:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c2a4:	0005303a 	rdctl	r2,status
 400c2a8:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c2ac:	e0fffb17 	ldw	r3,-20(fp)
 400c2b0:	00bfff84 	movi	r2,-2
 400c2b4:	1884703a 	and	r2,r3,r2
 400c2b8:	1001703a 	wrctl	status,r2
  
  return context;
 400c2bc:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 400c2c0:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 400c2c4:	00c00044 	movi	r3,1
 400c2c8:	e0bffa17 	ldw	r2,-24(fp)
 400c2cc:	1884983a 	sll	r2,r3,r2
 400c2d0:	0084303a 	nor	r2,zero,r2
 400c2d4:	1007883a 	mov	r3,r2
 400c2d8:	d0a6f617 	ldw	r2,-25640(gp)
 400c2dc:	1884703a 	and	r2,r3,r2
 400c2e0:	d0a6f615 	stw	r2,-25640(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 400c2e4:	d0a6f617 	ldw	r2,-25640(gp)
 400c2e8:	100170fa 	wrctl	ienable,r2
 400c2ec:	e0bffc17 	ldw	r2,-16(fp)
 400c2f0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c2f4:	e0bffd17 	ldw	r2,-12(fp)
 400c2f8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 400c2fc:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 400c300:	0001883a 	nop
}
 400c304:	e037883a 	mov	sp,fp
 400c308:	df000017 	ldw	fp,0(sp)
 400c30c:	dec00104 	addi	sp,sp,4
 400c310:	f800283a 	ret

0400c314 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 400c314:	defffc04 	addi	sp,sp,-16
 400c318:	df000315 	stw	fp,12(sp)
 400c31c:	df000304 	addi	fp,sp,12
 400c320:	e13ffe15 	stw	r4,-8(fp)
 400c324:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 400c328:	000530fa 	rdctl	r2,ienable
 400c32c:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 400c330:	00c00044 	movi	r3,1
 400c334:	e0bfff17 	ldw	r2,-4(fp)
 400c338:	1884983a 	sll	r2,r3,r2
 400c33c:	1007883a 	mov	r3,r2
 400c340:	e0bffd17 	ldw	r2,-12(fp)
 400c344:	1884703a 	and	r2,r3,r2
 400c348:	1004c03a 	cmpne	r2,r2,zero
 400c34c:	10803fcc 	andi	r2,r2,255
}
 400c350:	e037883a 	mov	sp,fp
 400c354:	df000017 	ldw	fp,0(sp)
 400c358:	dec00104 	addi	sp,sp,4
 400c35c:	f800283a 	ret

0400c360 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400c360:	defff504 	addi	sp,sp,-44
 400c364:	dfc00a15 	stw	ra,40(sp)
 400c368:	df000915 	stw	fp,36(sp)
 400c36c:	df000904 	addi	fp,sp,36
 400c370:	e13ffc15 	stw	r4,-16(fp)
 400c374:	e17ffd15 	stw	r5,-12(fp)
 400c378:	e1bffe15 	stw	r6,-8(fp)
 400c37c:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 400c380:	00bffa84 	movi	r2,-22
 400c384:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 400c388:	e0bffd17 	ldw	r2,-12(fp)
 400c38c:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 400c390:	e0bff817 	ldw	r2,-32(fp)
 400c394:	10800808 	cmpgei	r2,r2,32
 400c398:	1000271e 	bne	r2,zero,400c438 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c39c:	0005303a 	rdctl	r2,status
 400c3a0:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c3a4:	e0fffb17 	ldw	r3,-20(fp)
 400c3a8:	00bfff84 	movi	r2,-2
 400c3ac:	1884703a 	and	r2,r3,r2
 400c3b0:	1001703a 	wrctl	status,r2
  
  return context;
 400c3b4:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 400c3b8:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 400c3bc:	008101b4 	movhi	r2,1030
 400c3c0:	10af7104 	addi	r2,r2,-16956
 400c3c4:	e0fff817 	ldw	r3,-32(fp)
 400c3c8:	180690fa 	slli	r3,r3,3
 400c3cc:	10c5883a 	add	r2,r2,r3
 400c3d0:	e0fffe17 	ldw	r3,-8(fp)
 400c3d4:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 400c3d8:	008101b4 	movhi	r2,1030
 400c3dc:	10af7104 	addi	r2,r2,-16956
 400c3e0:	e0fff817 	ldw	r3,-32(fp)
 400c3e4:	180690fa 	slli	r3,r3,3
 400c3e8:	10c5883a 	add	r2,r2,r3
 400c3ec:	10800104 	addi	r2,r2,4
 400c3f0:	e0ffff17 	ldw	r3,-4(fp)
 400c3f4:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 400c3f8:	e0bffe17 	ldw	r2,-8(fp)
 400c3fc:	10000526 	beq	r2,zero,400c414 <alt_iic_isr_register+0xb4>
 400c400:	e0bff817 	ldw	r2,-32(fp)
 400c404:	100b883a 	mov	r5,r2
 400c408:	e13ffc17 	ldw	r4,-16(fp)
 400c40c:	400c2000 	call	400c200 <alt_ic_irq_enable>
 400c410:	00000406 	br	400c424 <alt_iic_isr_register+0xc4>
 400c414:	e0bff817 	ldw	r2,-32(fp)
 400c418:	100b883a 	mov	r5,r2
 400c41c:	e13ffc17 	ldw	r4,-16(fp)
 400c420:	400c2880 	call	400c288 <alt_ic_irq_disable>
 400c424:	e0bff715 	stw	r2,-36(fp)
 400c428:	e0bffa17 	ldw	r2,-24(fp)
 400c42c:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c430:	e0bff917 	ldw	r2,-28(fp)
 400c434:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 400c438:	e0bff717 	ldw	r2,-36(fp)
}
 400c43c:	e037883a 	mov	sp,fp
 400c440:	dfc00117 	ldw	ra,4(sp)
 400c444:	df000017 	ldw	fp,0(sp)
 400c448:	dec00204 	addi	sp,sp,8
 400c44c:	f800283a 	ret

0400c450 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 400c450:	defff804 	addi	sp,sp,-32
 400c454:	dfc00715 	stw	ra,28(sp)
 400c458:	df000615 	stw	fp,24(sp)
 400c45c:	dc000515 	stw	r16,20(sp)
 400c460:	df000604 	addi	fp,sp,24
 400c464:	e13ffb15 	stw	r4,-20(fp)
 400c468:	e17ffc15 	stw	r5,-16(fp)
 400c46c:	e1bffd15 	stw	r6,-12(fp)
 400c470:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 400c474:	e1bffe17 	ldw	r6,-8(fp)
 400c478:	e17ffd17 	ldw	r5,-12(fp)
 400c47c:	e13ffc17 	ldw	r4,-16(fp)
 400c480:	400c6d80 	call	400c6d8 <open>
 400c484:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 400c488:	e0bffa17 	ldw	r2,-24(fp)
 400c48c:	10002216 	blt	r2,zero,400c518 <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 400c490:	04010074 	movhi	r16,1025
 400c494:	8437de04 	addi	r16,r16,-8328
 400c498:	e0bffa17 	ldw	r2,-24(fp)
 400c49c:	01400304 	movi	r5,12
 400c4a0:	1009883a 	mov	r4,r2
 400c4a4:	40036040 	call	4003604 <__mulsi3>
 400c4a8:	8085883a 	add	r2,r16,r2
 400c4ac:	10c00017 	ldw	r3,0(r2)
 400c4b0:	e0bffb17 	ldw	r2,-20(fp)
 400c4b4:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 400c4b8:	04010074 	movhi	r16,1025
 400c4bc:	8437de04 	addi	r16,r16,-8328
 400c4c0:	e0bffa17 	ldw	r2,-24(fp)
 400c4c4:	01400304 	movi	r5,12
 400c4c8:	1009883a 	mov	r4,r2
 400c4cc:	40036040 	call	4003604 <__mulsi3>
 400c4d0:	8085883a 	add	r2,r16,r2
 400c4d4:	10800104 	addi	r2,r2,4
 400c4d8:	10c00017 	ldw	r3,0(r2)
 400c4dc:	e0bffb17 	ldw	r2,-20(fp)
 400c4e0:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 400c4e4:	04010074 	movhi	r16,1025
 400c4e8:	8437de04 	addi	r16,r16,-8328
 400c4ec:	e0bffa17 	ldw	r2,-24(fp)
 400c4f0:	01400304 	movi	r5,12
 400c4f4:	1009883a 	mov	r4,r2
 400c4f8:	40036040 	call	4003604 <__mulsi3>
 400c4fc:	8085883a 	add	r2,r16,r2
 400c500:	10800204 	addi	r2,r2,8
 400c504:	10c00017 	ldw	r3,0(r2)
 400c508:	e0bffb17 	ldw	r2,-20(fp)
 400c50c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 400c510:	e13ffa17 	ldw	r4,-24(fp)
 400c514:	400ad000 	call	400ad00 <alt_release_fd>
  }
} 
 400c518:	0001883a 	nop
 400c51c:	e6ffff04 	addi	sp,fp,-4
 400c520:	dfc00217 	ldw	ra,8(sp)
 400c524:	df000117 	ldw	fp,4(sp)
 400c528:	dc000017 	ldw	r16,0(sp)
 400c52c:	dec00304 	addi	sp,sp,12
 400c530:	f800283a 	ret

0400c534 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 400c534:	defffb04 	addi	sp,sp,-20
 400c538:	dfc00415 	stw	ra,16(sp)
 400c53c:	df000315 	stw	fp,12(sp)
 400c540:	df000304 	addi	fp,sp,12
 400c544:	e13ffd15 	stw	r4,-12(fp)
 400c548:	e17ffe15 	stw	r5,-8(fp)
 400c54c:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 400c550:	01c07fc4 	movi	r7,511
 400c554:	01800044 	movi	r6,1
 400c558:	e17ffd17 	ldw	r5,-12(fp)
 400c55c:	01010074 	movhi	r4,1025
 400c560:	2137e104 	addi	r4,r4,-8316
 400c564:	400c4500 	call	400c450 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 400c568:	01c07fc4 	movi	r7,511
 400c56c:	000d883a 	mov	r6,zero
 400c570:	e17ffe17 	ldw	r5,-8(fp)
 400c574:	01010074 	movhi	r4,1025
 400c578:	2137de04 	addi	r4,r4,-8328
 400c57c:	400c4500 	call	400c450 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 400c580:	01c07fc4 	movi	r7,511
 400c584:	01800044 	movi	r6,1
 400c588:	e17fff17 	ldw	r5,-4(fp)
 400c58c:	01010074 	movhi	r4,1025
 400c590:	2137e404 	addi	r4,r4,-8304
 400c594:	400c4500 	call	400c450 <alt_open_fd>
}  
 400c598:	0001883a 	nop
 400c59c:	e037883a 	mov	sp,fp
 400c5a0:	dfc00117 	ldw	ra,4(sp)
 400c5a4:	df000017 	ldw	fp,0(sp)
 400c5a8:	dec00204 	addi	sp,sp,8
 400c5ac:	f800283a 	ret

0400c5b0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400c5b0:	defffe04 	addi	sp,sp,-8
 400c5b4:	dfc00115 	stw	ra,4(sp)
 400c5b8:	df000015 	stw	fp,0(sp)
 400c5bc:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400c5c0:	d0a00f17 	ldw	r2,-32708(gp)
 400c5c4:	10000326 	beq	r2,zero,400c5d4 <alt_get_errno+0x24>
 400c5c8:	d0a00f17 	ldw	r2,-32708(gp)
 400c5cc:	103ee83a 	callr	r2
 400c5d0:	00000106 	br	400c5d8 <alt_get_errno+0x28>
 400c5d4:	d0a6ec04 	addi	r2,gp,-25680
}
 400c5d8:	e037883a 	mov	sp,fp
 400c5dc:	dfc00117 	ldw	ra,4(sp)
 400c5e0:	df000017 	ldw	fp,0(sp)
 400c5e4:	dec00204 	addi	sp,sp,8
 400c5e8:	f800283a 	ret

0400c5ec <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 400c5ec:	defffb04 	addi	sp,sp,-20
 400c5f0:	dfc00415 	stw	ra,16(sp)
 400c5f4:	df000315 	stw	fp,12(sp)
 400c5f8:	dc000215 	stw	r16,8(sp)
 400c5fc:	df000304 	addi	fp,sp,12
 400c600:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 400c604:	e0bffe17 	ldw	r2,-8(fp)
 400c608:	10800217 	ldw	r2,8(r2)
 400c60c:	10d00034 	orhi	r3,r2,16384
 400c610:	e0bffe17 	ldw	r2,-8(fp)
 400c614:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400c618:	e03ffd15 	stw	zero,-12(fp)
 400c61c:	00002306 	br	400c6ac <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400c620:	04010074 	movhi	r16,1025
 400c624:	8437de04 	addi	r16,r16,-8328
 400c628:	e0bffd17 	ldw	r2,-12(fp)
 400c62c:	01400304 	movi	r5,12
 400c630:	1009883a 	mov	r4,r2
 400c634:	40036040 	call	4003604 <__mulsi3>
 400c638:	8085883a 	add	r2,r16,r2
 400c63c:	10c00017 	ldw	r3,0(r2)
 400c640:	e0bffe17 	ldw	r2,-8(fp)
 400c644:	10800017 	ldw	r2,0(r2)
 400c648:	1880151e 	bne	r3,r2,400c6a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400c64c:	04010074 	movhi	r16,1025
 400c650:	8437de04 	addi	r16,r16,-8328
 400c654:	e0bffd17 	ldw	r2,-12(fp)
 400c658:	01400304 	movi	r5,12
 400c65c:	1009883a 	mov	r4,r2
 400c660:	40036040 	call	4003604 <__mulsi3>
 400c664:	8085883a 	add	r2,r16,r2
 400c668:	10800204 	addi	r2,r2,8
 400c66c:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 400c670:	10000b0e 	bge	r2,zero,400c6a0 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 400c674:	01400304 	movi	r5,12
 400c678:	e13ffd17 	ldw	r4,-12(fp)
 400c67c:	40036040 	call	4003604 <__mulsi3>
 400c680:	1007883a 	mov	r3,r2
 400c684:	00810074 	movhi	r2,1025
 400c688:	10b7de04 	addi	r2,r2,-8328
 400c68c:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 400c690:	e0bffe17 	ldw	r2,-8(fp)
 400c694:	18800226 	beq	r3,r2,400c6a0 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 400c698:	00bffcc4 	movi	r2,-13
 400c69c:	00000806 	br	400c6c0 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 400c6a0:	e0bffd17 	ldw	r2,-12(fp)
 400c6a4:	10800044 	addi	r2,r2,1
 400c6a8:	e0bffd15 	stw	r2,-12(fp)
 400c6ac:	d0a00e17 	ldw	r2,-32712(gp)
 400c6b0:	1007883a 	mov	r3,r2
 400c6b4:	e0bffd17 	ldw	r2,-12(fp)
 400c6b8:	18bfd92e 	bgeu	r3,r2,400c620 <__alt_data_end+0xfc00c620>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 400c6bc:	0005883a 	mov	r2,zero
}
 400c6c0:	e6ffff04 	addi	sp,fp,-4
 400c6c4:	dfc00217 	ldw	ra,8(sp)
 400c6c8:	df000117 	ldw	fp,4(sp)
 400c6cc:	dc000017 	ldw	r16,0(sp)
 400c6d0:	dec00304 	addi	sp,sp,12
 400c6d4:	f800283a 	ret

0400c6d8 <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 400c6d8:	defff604 	addi	sp,sp,-40
 400c6dc:	dfc00915 	stw	ra,36(sp)
 400c6e0:	df000815 	stw	fp,32(sp)
 400c6e4:	df000804 	addi	fp,sp,32
 400c6e8:	e13ffd15 	stw	r4,-12(fp)
 400c6ec:	e17ffe15 	stw	r5,-8(fp)
 400c6f0:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 400c6f4:	00bfffc4 	movi	r2,-1
 400c6f8:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 400c6fc:	00bffb44 	movi	r2,-19
 400c700:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 400c704:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 400c708:	d1600c04 	addi	r5,gp,-32720
 400c70c:	e13ffd17 	ldw	r4,-12(fp)
 400c710:	400c9fc0 	call	400c9fc <alt_find_dev>
 400c714:	e0bff815 	stw	r2,-32(fp)
 400c718:	e0bff817 	ldw	r2,-32(fp)
 400c71c:	1000051e 	bne	r2,zero,400c734 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 400c720:	e13ffd17 	ldw	r4,-12(fp)
 400c724:	400ca8c0 	call	400ca8c <alt_find_file>
 400c728:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 400c72c:	00800044 	movi	r2,1
 400c730:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 400c734:	e0bff817 	ldw	r2,-32(fp)
 400c738:	10002b26 	beq	r2,zero,400c7e8 <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 400c73c:	e13ff817 	ldw	r4,-32(fp)
 400c740:	400cb940 	call	400cb94 <alt_get_fd>
 400c744:	e0bff915 	stw	r2,-28(fp)
 400c748:	e0bff917 	ldw	r2,-28(fp)
 400c74c:	1000030e 	bge	r2,zero,400c75c <open+0x84>
    {
      status = index;
 400c750:	e0bff917 	ldw	r2,-28(fp)
 400c754:	e0bffa15 	stw	r2,-24(fp)
 400c758:	00002506 	br	400c7f0 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 400c75c:	01400304 	movi	r5,12
 400c760:	e13ff917 	ldw	r4,-28(fp)
 400c764:	40036040 	call	4003604 <__mulsi3>
 400c768:	1007883a 	mov	r3,r2
 400c76c:	00810074 	movhi	r2,1025
 400c770:	10b7de04 	addi	r2,r2,-8328
 400c774:	1885883a 	add	r2,r3,r2
 400c778:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 400c77c:	e0fffe17 	ldw	r3,-8(fp)
 400c780:	00900034 	movhi	r2,16384
 400c784:	10bfffc4 	addi	r2,r2,-1
 400c788:	1886703a 	and	r3,r3,r2
 400c78c:	e0bffc17 	ldw	r2,-16(fp)
 400c790:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 400c794:	e0bffb17 	ldw	r2,-20(fp)
 400c798:	1000051e 	bne	r2,zero,400c7b0 <open+0xd8>
 400c79c:	e13ffc17 	ldw	r4,-16(fp)
 400c7a0:	400c5ec0 	call	400c5ec <alt_file_locked>
 400c7a4:	e0bffa15 	stw	r2,-24(fp)
 400c7a8:	e0bffa17 	ldw	r2,-24(fp)
 400c7ac:	10001016 	blt	r2,zero,400c7f0 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 400c7b0:	e0bff817 	ldw	r2,-32(fp)
 400c7b4:	10800317 	ldw	r2,12(r2)
 400c7b8:	10000826 	beq	r2,zero,400c7dc <open+0x104>
 400c7bc:	e0bff817 	ldw	r2,-32(fp)
 400c7c0:	10800317 	ldw	r2,12(r2)
 400c7c4:	e1ffff17 	ldw	r7,-4(fp)
 400c7c8:	e1bffe17 	ldw	r6,-8(fp)
 400c7cc:	e17ffd17 	ldw	r5,-12(fp)
 400c7d0:	e13ffc17 	ldw	r4,-16(fp)
 400c7d4:	103ee83a 	callr	r2
 400c7d8:	00000106 	br	400c7e0 <open+0x108>
 400c7dc:	0005883a 	mov	r2,zero
 400c7e0:	e0bffa15 	stw	r2,-24(fp)
 400c7e4:	00000206 	br	400c7f0 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 400c7e8:	00bffb44 	movi	r2,-19
 400c7ec:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 400c7f0:	e0bffa17 	ldw	r2,-24(fp)
 400c7f4:	1000090e 	bge	r2,zero,400c81c <open+0x144>
  {
    alt_release_fd (index);  
 400c7f8:	e13ff917 	ldw	r4,-28(fp)
 400c7fc:	400ad000 	call	400ad00 <alt_release_fd>
    ALT_ERRNO = -status;
 400c800:	400c5b00 	call	400c5b0 <alt_get_errno>
 400c804:	1007883a 	mov	r3,r2
 400c808:	e0bffa17 	ldw	r2,-24(fp)
 400c80c:	0085c83a 	sub	r2,zero,r2
 400c810:	18800015 	stw	r2,0(r3)
    return -1;
 400c814:	00bfffc4 	movi	r2,-1
 400c818:	00000106 	br	400c820 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 400c81c:	e0bff917 	ldw	r2,-28(fp)
}
 400c820:	e037883a 	mov	sp,fp
 400c824:	dfc00117 	ldw	ra,4(sp)
 400c828:	df000017 	ldw	fp,0(sp)
 400c82c:	dec00204 	addi	sp,sp,8
 400c830:	f800283a 	ret

0400c834 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 400c834:	defffa04 	addi	sp,sp,-24
 400c838:	df000515 	stw	fp,20(sp)
 400c83c:	df000504 	addi	fp,sp,20
 400c840:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400c844:	0005303a 	rdctl	r2,status
 400c848:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400c84c:	e0fffc17 	ldw	r3,-16(fp)
 400c850:	00bfff84 	movi	r2,-2
 400c854:	1884703a 	and	r2,r3,r2
 400c858:	1001703a 	wrctl	status,r2
  
  return context;
 400c85c:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 400c860:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 400c864:	e0bfff17 	ldw	r2,-4(fp)
 400c868:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 400c86c:	e0bffd17 	ldw	r2,-12(fp)
 400c870:	10800017 	ldw	r2,0(r2)
 400c874:	e0fffd17 	ldw	r3,-12(fp)
 400c878:	18c00117 	ldw	r3,4(r3)
 400c87c:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 400c880:	e0bffd17 	ldw	r2,-12(fp)
 400c884:	10800117 	ldw	r2,4(r2)
 400c888:	e0fffd17 	ldw	r3,-12(fp)
 400c88c:	18c00017 	ldw	r3,0(r3)
 400c890:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 400c894:	e0bffd17 	ldw	r2,-12(fp)
 400c898:	e0fffd17 	ldw	r3,-12(fp)
 400c89c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 400c8a0:	e0bffd17 	ldw	r2,-12(fp)
 400c8a4:	e0fffd17 	ldw	r3,-12(fp)
 400c8a8:	10c00015 	stw	r3,0(r2)
 400c8ac:	e0bffb17 	ldw	r2,-20(fp)
 400c8b0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400c8b4:	e0bffe17 	ldw	r2,-8(fp)
 400c8b8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 400c8bc:	0001883a 	nop
 400c8c0:	e037883a 	mov	sp,fp
 400c8c4:	df000017 	ldw	fp,0(sp)
 400c8c8:	dec00104 	addi	sp,sp,4
 400c8cc:	f800283a 	ret

0400c8d0 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 400c8d0:	defffb04 	addi	sp,sp,-20
 400c8d4:	dfc00415 	stw	ra,16(sp)
 400c8d8:	df000315 	stw	fp,12(sp)
 400c8dc:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 400c8e0:	d0a01217 	ldw	r2,-32696(gp)
 400c8e4:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 400c8e8:	d0a6f817 	ldw	r2,-25632(gp)
 400c8ec:	10800044 	addi	r2,r2,1
 400c8f0:	d0a6f815 	stw	r2,-25632(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400c8f4:	00002e06 	br	400c9b0 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 400c8f8:	e0bffd17 	ldw	r2,-12(fp)
 400c8fc:	10800017 	ldw	r2,0(r2)
 400c900:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 400c904:	e0bffd17 	ldw	r2,-12(fp)
 400c908:	10800403 	ldbu	r2,16(r2)
 400c90c:	10803fcc 	andi	r2,r2,255
 400c910:	10000426 	beq	r2,zero,400c924 <alt_tick+0x54>
 400c914:	d0a6f817 	ldw	r2,-25632(gp)
 400c918:	1000021e 	bne	r2,zero,400c924 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 400c91c:	e0bffd17 	ldw	r2,-12(fp)
 400c920:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 400c924:	e0bffd17 	ldw	r2,-12(fp)
 400c928:	10800217 	ldw	r2,8(r2)
 400c92c:	d0e6f817 	ldw	r3,-25632(gp)
 400c930:	18801d36 	bltu	r3,r2,400c9a8 <alt_tick+0xd8>
 400c934:	e0bffd17 	ldw	r2,-12(fp)
 400c938:	10800403 	ldbu	r2,16(r2)
 400c93c:	10803fcc 	andi	r2,r2,255
 400c940:	1000191e 	bne	r2,zero,400c9a8 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 400c944:	e0bffd17 	ldw	r2,-12(fp)
 400c948:	10800317 	ldw	r2,12(r2)
 400c94c:	e0fffd17 	ldw	r3,-12(fp)
 400c950:	18c00517 	ldw	r3,20(r3)
 400c954:	1809883a 	mov	r4,r3
 400c958:	103ee83a 	callr	r2
 400c95c:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 400c960:	e0bfff17 	ldw	r2,-4(fp)
 400c964:	1000031e 	bne	r2,zero,400c974 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 400c968:	e13ffd17 	ldw	r4,-12(fp)
 400c96c:	400c8340 	call	400c834 <alt_alarm_stop>
 400c970:	00000d06 	br	400c9a8 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 400c974:	e0bffd17 	ldw	r2,-12(fp)
 400c978:	10c00217 	ldw	r3,8(r2)
 400c97c:	e0bfff17 	ldw	r2,-4(fp)
 400c980:	1887883a 	add	r3,r3,r2
 400c984:	e0bffd17 	ldw	r2,-12(fp)
 400c988:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 400c98c:	e0bffd17 	ldw	r2,-12(fp)
 400c990:	10c00217 	ldw	r3,8(r2)
 400c994:	d0a6f817 	ldw	r2,-25632(gp)
 400c998:	1880032e 	bgeu	r3,r2,400c9a8 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 400c99c:	e0bffd17 	ldw	r2,-12(fp)
 400c9a0:	00c00044 	movi	r3,1
 400c9a4:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 400c9a8:	e0bffe17 	ldw	r2,-8(fp)
 400c9ac:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 400c9b0:	e0fffd17 	ldw	r3,-12(fp)
 400c9b4:	d0a01204 	addi	r2,gp,-32696
 400c9b8:	18bfcf1e 	bne	r3,r2,400c8f8 <__alt_data_end+0xfc00c8f8>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 400c9bc:	0001883a 	nop
}
 400c9c0:	0001883a 	nop
 400c9c4:	e037883a 	mov	sp,fp
 400c9c8:	dfc00117 	ldw	ra,4(sp)
 400c9cc:	df000017 	ldw	fp,0(sp)
 400c9d0:	dec00204 	addi	sp,sp,8
 400c9d4:	f800283a 	ret

0400c9d8 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 400c9d8:	deffff04 	addi	sp,sp,-4
 400c9dc:	df000015 	stw	fp,0(sp)
 400c9e0:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 400c9e4:	000170fa 	wrctl	ienable,zero
}
 400c9e8:	0001883a 	nop
 400c9ec:	e037883a 	mov	sp,fp
 400c9f0:	df000017 	ldw	fp,0(sp)
 400c9f4:	dec00104 	addi	sp,sp,4
 400c9f8:	f800283a 	ret

0400c9fc <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 400c9fc:	defffa04 	addi	sp,sp,-24
 400ca00:	dfc00515 	stw	ra,20(sp)
 400ca04:	df000415 	stw	fp,16(sp)
 400ca08:	df000404 	addi	fp,sp,16
 400ca0c:	e13ffe15 	stw	r4,-8(fp)
 400ca10:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 400ca14:	e0bfff17 	ldw	r2,-4(fp)
 400ca18:	10800017 	ldw	r2,0(r2)
 400ca1c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 400ca20:	e13ffe17 	ldw	r4,-8(fp)
 400ca24:	400915c0 	call	400915c <strlen>
 400ca28:	10800044 	addi	r2,r2,1
 400ca2c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400ca30:	00000d06 	br	400ca68 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 400ca34:	e0bffc17 	ldw	r2,-16(fp)
 400ca38:	10800217 	ldw	r2,8(r2)
 400ca3c:	e0fffd17 	ldw	r3,-12(fp)
 400ca40:	180d883a 	mov	r6,r3
 400ca44:	e17ffe17 	ldw	r5,-8(fp)
 400ca48:	1009883a 	mov	r4,r2
 400ca4c:	400cd400 	call	400cd40 <memcmp>
 400ca50:	1000021e 	bne	r2,zero,400ca5c <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 400ca54:	e0bffc17 	ldw	r2,-16(fp)
 400ca58:	00000706 	br	400ca78 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 400ca5c:	e0bffc17 	ldw	r2,-16(fp)
 400ca60:	10800017 	ldw	r2,0(r2)
 400ca64:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 400ca68:	e0fffc17 	ldw	r3,-16(fp)
 400ca6c:	e0bfff17 	ldw	r2,-4(fp)
 400ca70:	18bff01e 	bne	r3,r2,400ca34 <__alt_data_end+0xfc00ca34>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 400ca74:	0005883a 	mov	r2,zero
}
 400ca78:	e037883a 	mov	sp,fp
 400ca7c:	dfc00117 	ldw	ra,4(sp)
 400ca80:	df000017 	ldw	fp,0(sp)
 400ca84:	dec00204 	addi	sp,sp,8
 400ca88:	f800283a 	ret

0400ca8c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 400ca8c:	defffb04 	addi	sp,sp,-20
 400ca90:	dfc00415 	stw	ra,16(sp)
 400ca94:	df000315 	stw	fp,12(sp)
 400ca98:	df000304 	addi	fp,sp,12
 400ca9c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 400caa0:	d0a00a17 	ldw	r2,-32728(gp)
 400caa4:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400caa8:	00003106 	br	400cb70 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 400caac:	e0bffd17 	ldw	r2,-12(fp)
 400cab0:	10800217 	ldw	r2,8(r2)
 400cab4:	1009883a 	mov	r4,r2
 400cab8:	400915c0 	call	400915c <strlen>
 400cabc:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 400cac0:	e0bffd17 	ldw	r2,-12(fp)
 400cac4:	10c00217 	ldw	r3,8(r2)
 400cac8:	e0bffe17 	ldw	r2,-8(fp)
 400cacc:	10bfffc4 	addi	r2,r2,-1
 400cad0:	1885883a 	add	r2,r3,r2
 400cad4:	10800003 	ldbu	r2,0(r2)
 400cad8:	10803fcc 	andi	r2,r2,255
 400cadc:	1080201c 	xori	r2,r2,128
 400cae0:	10bfe004 	addi	r2,r2,-128
 400cae4:	10800bd8 	cmpnei	r2,r2,47
 400cae8:	1000031e 	bne	r2,zero,400caf8 <alt_find_file+0x6c>
    {
      len -= 1;
 400caec:	e0bffe17 	ldw	r2,-8(fp)
 400caf0:	10bfffc4 	addi	r2,r2,-1
 400caf4:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400caf8:	e0bffe17 	ldw	r2,-8(fp)
 400cafc:	e0ffff17 	ldw	r3,-4(fp)
 400cb00:	1885883a 	add	r2,r3,r2
 400cb04:	10800003 	ldbu	r2,0(r2)
 400cb08:	10803fcc 	andi	r2,r2,255
 400cb0c:	1080201c 	xori	r2,r2,128
 400cb10:	10bfe004 	addi	r2,r2,-128
 400cb14:	10800be0 	cmpeqi	r2,r2,47
 400cb18:	1000081e 	bne	r2,zero,400cb3c <alt_find_file+0xb0>
 400cb1c:	e0bffe17 	ldw	r2,-8(fp)
 400cb20:	e0ffff17 	ldw	r3,-4(fp)
 400cb24:	1885883a 	add	r2,r3,r2
 400cb28:	10800003 	ldbu	r2,0(r2)
 400cb2c:	10803fcc 	andi	r2,r2,255
 400cb30:	1080201c 	xori	r2,r2,128
 400cb34:	10bfe004 	addi	r2,r2,-128
 400cb38:	10000a1e 	bne	r2,zero,400cb64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 400cb3c:	e0bffd17 	ldw	r2,-12(fp)
 400cb40:	10800217 	ldw	r2,8(r2)
 400cb44:	e0fffe17 	ldw	r3,-8(fp)
 400cb48:	180d883a 	mov	r6,r3
 400cb4c:	e17fff17 	ldw	r5,-4(fp)
 400cb50:	1009883a 	mov	r4,r2
 400cb54:	400cd400 	call	400cd40 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 400cb58:	1000021e 	bne	r2,zero,400cb64 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 400cb5c:	e0bffd17 	ldw	r2,-12(fp)
 400cb60:	00000706 	br	400cb80 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 400cb64:	e0bffd17 	ldw	r2,-12(fp)
 400cb68:	10800017 	ldw	r2,0(r2)
 400cb6c:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 400cb70:	e0fffd17 	ldw	r3,-12(fp)
 400cb74:	d0a00a04 	addi	r2,gp,-32728
 400cb78:	18bfcc1e 	bne	r3,r2,400caac <__alt_data_end+0xfc00caac>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 400cb7c:	0005883a 	mov	r2,zero
}
 400cb80:	e037883a 	mov	sp,fp
 400cb84:	dfc00117 	ldw	ra,4(sp)
 400cb88:	df000017 	ldw	fp,0(sp)
 400cb8c:	dec00204 	addi	sp,sp,8
 400cb90:	f800283a 	ret

0400cb94 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 400cb94:	defffa04 	addi	sp,sp,-24
 400cb98:	dfc00515 	stw	ra,20(sp)
 400cb9c:	df000415 	stw	fp,16(sp)
 400cba0:	dc000315 	stw	r16,12(sp)
 400cba4:	df000404 	addi	fp,sp,16
 400cba8:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 400cbac:	00bffa04 	movi	r2,-24
 400cbb0:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400cbb4:	e03ffc15 	stw	zero,-16(fp)
 400cbb8:	00001d06 	br	400cc30 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 400cbbc:	04010074 	movhi	r16,1025
 400cbc0:	8437de04 	addi	r16,r16,-8328
 400cbc4:	e0bffc17 	ldw	r2,-16(fp)
 400cbc8:	01400304 	movi	r5,12
 400cbcc:	1009883a 	mov	r4,r2
 400cbd0:	40036040 	call	4003604 <__mulsi3>
 400cbd4:	8085883a 	add	r2,r16,r2
 400cbd8:	10800017 	ldw	r2,0(r2)
 400cbdc:	1000111e 	bne	r2,zero,400cc24 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 400cbe0:	04010074 	movhi	r16,1025
 400cbe4:	8437de04 	addi	r16,r16,-8328
 400cbe8:	e0bffc17 	ldw	r2,-16(fp)
 400cbec:	01400304 	movi	r5,12
 400cbf0:	1009883a 	mov	r4,r2
 400cbf4:	40036040 	call	4003604 <__mulsi3>
 400cbf8:	8085883a 	add	r2,r16,r2
 400cbfc:	e0fffe17 	ldw	r3,-8(fp)
 400cc00:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 400cc04:	d0e00e17 	ldw	r3,-32712(gp)
 400cc08:	e0bffc17 	ldw	r2,-16(fp)
 400cc0c:	1880020e 	bge	r3,r2,400cc18 <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 400cc10:	e0bffc17 	ldw	r2,-16(fp)
 400cc14:	d0a00e15 	stw	r2,-32712(gp)
      }
      rc = i;
 400cc18:	e0bffc17 	ldw	r2,-16(fp)
 400cc1c:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 400cc20:	00000606 	br	400cc3c <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 400cc24:	e0bffc17 	ldw	r2,-16(fp)
 400cc28:	10800044 	addi	r2,r2,1
 400cc2c:	e0bffc15 	stw	r2,-16(fp)
 400cc30:	e0bffc17 	ldw	r2,-16(fp)
 400cc34:	10800810 	cmplti	r2,r2,32
 400cc38:	103fe01e 	bne	r2,zero,400cbbc <__alt_data_end+0xfc00cbbc>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 400cc3c:	e0bffd17 	ldw	r2,-12(fp)
}
 400cc40:	e6ffff04 	addi	sp,fp,-4
 400cc44:	dfc00217 	ldw	ra,8(sp)
 400cc48:	df000117 	ldw	fp,4(sp)
 400cc4c:	dc000017 	ldw	r16,0(sp)
 400cc50:	dec00304 	addi	sp,sp,12
 400cc54:	f800283a 	ret

0400cc58 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 400cc58:	defffe04 	addi	sp,sp,-8
 400cc5c:	df000115 	stw	fp,4(sp)
 400cc60:	df000104 	addi	fp,sp,4
 400cc64:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 400cc68:	e0bfff17 	ldw	r2,-4(fp)
 400cc6c:	10bffe84 	addi	r2,r2,-6
 400cc70:	10c00428 	cmpgeui	r3,r2,16
 400cc74:	18001a1e 	bne	r3,zero,400cce0 <alt_exception_cause_generated_bad_addr+0x88>
 400cc78:	100690ba 	slli	r3,r2,2
 400cc7c:	00810074 	movhi	r2,1025
 400cc80:	10b32404 	addi	r2,r2,-13168
 400cc84:	1885883a 	add	r2,r3,r2
 400cc88:	10800017 	ldw	r2,0(r2)
 400cc8c:	1000683a 	jmp	r2
 400cc90:	0400ccd0 	cmplti	r16,zero,819
 400cc94:	0400ccd0 	cmplti	r16,zero,819
 400cc98:	0400cce0 	cmpeqi	r16,zero,819
 400cc9c:	0400cce0 	cmpeqi	r16,zero,819
 400cca0:	0400cce0 	cmpeqi	r16,zero,819
 400cca4:	0400ccd0 	cmplti	r16,zero,819
 400cca8:	0400ccd8 	cmpnei	r16,zero,819
 400ccac:	0400cce0 	cmpeqi	r16,zero,819
 400ccb0:	0400ccd0 	cmplti	r16,zero,819
 400ccb4:	0400ccd0 	cmplti	r16,zero,819
 400ccb8:	0400cce0 	cmpeqi	r16,zero,819
 400ccbc:	0400ccd0 	cmplti	r16,zero,819
 400ccc0:	0400ccd8 	cmpnei	r16,zero,819
 400ccc4:	0400cce0 	cmpeqi	r16,zero,819
 400ccc8:	0400cce0 	cmpeqi	r16,zero,819
 400cccc:	0400ccd0 	cmplti	r16,zero,819
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 400ccd0:	00800044 	movi	r2,1
 400ccd4:	00000306 	br	400cce4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 400ccd8:	0005883a 	mov	r2,zero
 400ccdc:	00000106 	br	400cce4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 400cce0:	0005883a 	mov	r2,zero
  }
}
 400cce4:	e037883a 	mov	sp,fp
 400cce8:	df000017 	ldw	fp,0(sp)
 400ccec:	dec00104 	addi	sp,sp,4
 400ccf0:	f800283a 	ret

0400ccf4 <atexit>:
 400ccf4:	200b883a 	mov	r5,r4
 400ccf8:	000f883a 	mov	r7,zero
 400ccfc:	000d883a 	mov	r6,zero
 400cd00:	0009883a 	mov	r4,zero
 400cd04:	400cdbc1 	jmpi	400cdbc <__register_exitproc>

0400cd08 <exit>:
 400cd08:	defffe04 	addi	sp,sp,-8
 400cd0c:	000b883a 	mov	r5,zero
 400cd10:	dc000015 	stw	r16,0(sp)
 400cd14:	dfc00115 	stw	ra,4(sp)
 400cd18:	2021883a 	mov	r16,r4
 400cd1c:	400ced40 	call	400ced4 <__call_exitprocs>
 400cd20:	00810074 	movhi	r2,1025
 400cd24:	10bc7104 	addi	r2,r2,-3644
 400cd28:	11000017 	ldw	r4,0(r2)
 400cd2c:	20800f17 	ldw	r2,60(r4)
 400cd30:	10000126 	beq	r2,zero,400cd38 <exit+0x30>
 400cd34:	103ee83a 	callr	r2
 400cd38:	8009883a 	mov	r4,r16
 400cd3c:	400a55c0 	call	400a55c <_exit>

0400cd40 <memcmp>:
 400cd40:	01c000c4 	movi	r7,3
 400cd44:	3980192e 	bgeu	r7,r6,400cdac <memcmp+0x6c>
 400cd48:	2144b03a 	or	r2,r4,r5
 400cd4c:	11c4703a 	and	r2,r2,r7
 400cd50:	10000f26 	beq	r2,zero,400cd90 <memcmp+0x50>
 400cd54:	20800003 	ldbu	r2,0(r4)
 400cd58:	28c00003 	ldbu	r3,0(r5)
 400cd5c:	10c0151e 	bne	r2,r3,400cdb4 <memcmp+0x74>
 400cd60:	31bfff84 	addi	r6,r6,-2
 400cd64:	01ffffc4 	movi	r7,-1
 400cd68:	00000406 	br	400cd7c <memcmp+0x3c>
 400cd6c:	20800003 	ldbu	r2,0(r4)
 400cd70:	28c00003 	ldbu	r3,0(r5)
 400cd74:	31bfffc4 	addi	r6,r6,-1
 400cd78:	10c00e1e 	bne	r2,r3,400cdb4 <memcmp+0x74>
 400cd7c:	21000044 	addi	r4,r4,1
 400cd80:	29400044 	addi	r5,r5,1
 400cd84:	31fff91e 	bne	r6,r7,400cd6c <__alt_data_end+0xfc00cd6c>
 400cd88:	0005883a 	mov	r2,zero
 400cd8c:	f800283a 	ret
 400cd90:	20c00017 	ldw	r3,0(r4)
 400cd94:	28800017 	ldw	r2,0(r5)
 400cd98:	18bfee1e 	bne	r3,r2,400cd54 <__alt_data_end+0xfc00cd54>
 400cd9c:	31bfff04 	addi	r6,r6,-4
 400cda0:	21000104 	addi	r4,r4,4
 400cda4:	29400104 	addi	r5,r5,4
 400cda8:	39bff936 	bltu	r7,r6,400cd90 <__alt_data_end+0xfc00cd90>
 400cdac:	303fe91e 	bne	r6,zero,400cd54 <__alt_data_end+0xfc00cd54>
 400cdb0:	003ff506 	br	400cd88 <__alt_data_end+0xfc00cd88>
 400cdb4:	10c5c83a 	sub	r2,r2,r3
 400cdb8:	f800283a 	ret

0400cdbc <__register_exitproc>:
 400cdbc:	defffa04 	addi	sp,sp,-24
 400cdc0:	dc000315 	stw	r16,12(sp)
 400cdc4:	04010074 	movhi	r16,1025
 400cdc8:	843c7104 	addi	r16,r16,-3644
 400cdcc:	80c00017 	ldw	r3,0(r16)
 400cdd0:	dc400415 	stw	r17,16(sp)
 400cdd4:	dfc00515 	stw	ra,20(sp)
 400cdd8:	18805217 	ldw	r2,328(r3)
 400cddc:	2023883a 	mov	r17,r4
 400cde0:	10003726 	beq	r2,zero,400cec0 <__register_exitproc+0x104>
 400cde4:	10c00117 	ldw	r3,4(r2)
 400cde8:	010007c4 	movi	r4,31
 400cdec:	20c00e16 	blt	r4,r3,400ce28 <__register_exitproc+0x6c>
 400cdf0:	1a000044 	addi	r8,r3,1
 400cdf4:	8800221e 	bne	r17,zero,400ce80 <__register_exitproc+0xc4>
 400cdf8:	18c00084 	addi	r3,r3,2
 400cdfc:	18c7883a 	add	r3,r3,r3
 400ce00:	18c7883a 	add	r3,r3,r3
 400ce04:	12000115 	stw	r8,4(r2)
 400ce08:	10c7883a 	add	r3,r2,r3
 400ce0c:	19400015 	stw	r5,0(r3)
 400ce10:	0005883a 	mov	r2,zero
 400ce14:	dfc00517 	ldw	ra,20(sp)
 400ce18:	dc400417 	ldw	r17,16(sp)
 400ce1c:	dc000317 	ldw	r16,12(sp)
 400ce20:	dec00604 	addi	sp,sp,24
 400ce24:	f800283a 	ret
 400ce28:	00800034 	movhi	r2,0
 400ce2c:	10800004 	addi	r2,r2,0
 400ce30:	10002626 	beq	r2,zero,400cecc <__register_exitproc+0x110>
 400ce34:	01006404 	movi	r4,400
 400ce38:	d9400015 	stw	r5,0(sp)
 400ce3c:	d9800115 	stw	r6,4(sp)
 400ce40:	d9c00215 	stw	r7,8(sp)
 400ce44:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 400ce48:	d9400017 	ldw	r5,0(sp)
 400ce4c:	d9800117 	ldw	r6,4(sp)
 400ce50:	d9c00217 	ldw	r7,8(sp)
 400ce54:	10001d26 	beq	r2,zero,400cecc <__register_exitproc+0x110>
 400ce58:	81000017 	ldw	r4,0(r16)
 400ce5c:	10000115 	stw	zero,4(r2)
 400ce60:	02000044 	movi	r8,1
 400ce64:	22405217 	ldw	r9,328(r4)
 400ce68:	0007883a 	mov	r3,zero
 400ce6c:	12400015 	stw	r9,0(r2)
 400ce70:	20805215 	stw	r2,328(r4)
 400ce74:	10006215 	stw	zero,392(r2)
 400ce78:	10006315 	stw	zero,396(r2)
 400ce7c:	883fde26 	beq	r17,zero,400cdf8 <__alt_data_end+0xfc00cdf8>
 400ce80:	18c9883a 	add	r4,r3,r3
 400ce84:	2109883a 	add	r4,r4,r4
 400ce88:	1109883a 	add	r4,r2,r4
 400ce8c:	21802215 	stw	r6,136(r4)
 400ce90:	01800044 	movi	r6,1
 400ce94:	12406217 	ldw	r9,392(r2)
 400ce98:	30cc983a 	sll	r6,r6,r3
 400ce9c:	4992b03a 	or	r9,r9,r6
 400cea0:	12406215 	stw	r9,392(r2)
 400cea4:	21c04215 	stw	r7,264(r4)
 400cea8:	01000084 	movi	r4,2
 400ceac:	893fd21e 	bne	r17,r4,400cdf8 <__alt_data_end+0xfc00cdf8>
 400ceb0:	11006317 	ldw	r4,396(r2)
 400ceb4:	218cb03a 	or	r6,r4,r6
 400ceb8:	11806315 	stw	r6,396(r2)
 400cebc:	003fce06 	br	400cdf8 <__alt_data_end+0xfc00cdf8>
 400cec0:	18805304 	addi	r2,r3,332
 400cec4:	18805215 	stw	r2,328(r3)
 400cec8:	003fc606 	br	400cde4 <__alt_data_end+0xfc00cde4>
 400cecc:	00bfffc4 	movi	r2,-1
 400ced0:	003fd006 	br	400ce14 <__alt_data_end+0xfc00ce14>

0400ced4 <__call_exitprocs>:
 400ced4:	defff504 	addi	sp,sp,-44
 400ced8:	df000915 	stw	fp,36(sp)
 400cedc:	dd400615 	stw	r21,24(sp)
 400cee0:	dc800315 	stw	r18,12(sp)
 400cee4:	dfc00a15 	stw	ra,40(sp)
 400cee8:	ddc00815 	stw	r23,32(sp)
 400ceec:	dd800715 	stw	r22,28(sp)
 400cef0:	dd000515 	stw	r20,20(sp)
 400cef4:	dcc00415 	stw	r19,16(sp)
 400cef8:	dc400215 	stw	r17,8(sp)
 400cefc:	dc000115 	stw	r16,4(sp)
 400cf00:	d9000015 	stw	r4,0(sp)
 400cf04:	2839883a 	mov	fp,r5
 400cf08:	04800044 	movi	r18,1
 400cf0c:	057fffc4 	movi	r21,-1
 400cf10:	00810074 	movhi	r2,1025
 400cf14:	10bc7104 	addi	r2,r2,-3644
 400cf18:	12000017 	ldw	r8,0(r2)
 400cf1c:	45005217 	ldw	r20,328(r8)
 400cf20:	44c05204 	addi	r19,r8,328
 400cf24:	a0001c26 	beq	r20,zero,400cf98 <__call_exitprocs+0xc4>
 400cf28:	a0800117 	ldw	r2,4(r20)
 400cf2c:	15ffffc4 	addi	r23,r2,-1
 400cf30:	b8000d16 	blt	r23,zero,400cf68 <__call_exitprocs+0x94>
 400cf34:	14000044 	addi	r16,r2,1
 400cf38:	8421883a 	add	r16,r16,r16
 400cf3c:	8421883a 	add	r16,r16,r16
 400cf40:	84402004 	addi	r17,r16,128
 400cf44:	a463883a 	add	r17,r20,r17
 400cf48:	a421883a 	add	r16,r20,r16
 400cf4c:	e0001e26 	beq	fp,zero,400cfc8 <__call_exitprocs+0xf4>
 400cf50:	80804017 	ldw	r2,256(r16)
 400cf54:	e0801c26 	beq	fp,r2,400cfc8 <__call_exitprocs+0xf4>
 400cf58:	bdffffc4 	addi	r23,r23,-1
 400cf5c:	843fff04 	addi	r16,r16,-4
 400cf60:	8c7fff04 	addi	r17,r17,-4
 400cf64:	bd7ff91e 	bne	r23,r21,400cf4c <__alt_data_end+0xfc00cf4c>
 400cf68:	00800034 	movhi	r2,0
 400cf6c:	10800004 	addi	r2,r2,0
 400cf70:	10000926 	beq	r2,zero,400cf98 <__call_exitprocs+0xc4>
 400cf74:	a0800117 	ldw	r2,4(r20)
 400cf78:	1000301e 	bne	r2,zero,400d03c <__call_exitprocs+0x168>
 400cf7c:	a0800017 	ldw	r2,0(r20)
 400cf80:	10003226 	beq	r2,zero,400d04c <__call_exitprocs+0x178>
 400cf84:	a009883a 	mov	r4,r20
 400cf88:	98800015 	stw	r2,0(r19)
 400cf8c:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 400cf90:	9d000017 	ldw	r20,0(r19)
 400cf94:	a03fe41e 	bne	r20,zero,400cf28 <__alt_data_end+0xfc00cf28>
 400cf98:	dfc00a17 	ldw	ra,40(sp)
 400cf9c:	df000917 	ldw	fp,36(sp)
 400cfa0:	ddc00817 	ldw	r23,32(sp)
 400cfa4:	dd800717 	ldw	r22,28(sp)
 400cfa8:	dd400617 	ldw	r21,24(sp)
 400cfac:	dd000517 	ldw	r20,20(sp)
 400cfb0:	dcc00417 	ldw	r19,16(sp)
 400cfb4:	dc800317 	ldw	r18,12(sp)
 400cfb8:	dc400217 	ldw	r17,8(sp)
 400cfbc:	dc000117 	ldw	r16,4(sp)
 400cfc0:	dec00b04 	addi	sp,sp,44
 400cfc4:	f800283a 	ret
 400cfc8:	a0800117 	ldw	r2,4(r20)
 400cfcc:	80c00017 	ldw	r3,0(r16)
 400cfd0:	10bfffc4 	addi	r2,r2,-1
 400cfd4:	15c01426 	beq	r2,r23,400d028 <__call_exitprocs+0x154>
 400cfd8:	80000015 	stw	zero,0(r16)
 400cfdc:	183fde26 	beq	r3,zero,400cf58 <__alt_data_end+0xfc00cf58>
 400cfe0:	95c8983a 	sll	r4,r18,r23
 400cfe4:	a0806217 	ldw	r2,392(r20)
 400cfe8:	a5800117 	ldw	r22,4(r20)
 400cfec:	2084703a 	and	r2,r4,r2
 400cff0:	10000b26 	beq	r2,zero,400d020 <__call_exitprocs+0x14c>
 400cff4:	a0806317 	ldw	r2,396(r20)
 400cff8:	2088703a 	and	r4,r4,r2
 400cffc:	20000c1e 	bne	r4,zero,400d030 <__call_exitprocs+0x15c>
 400d000:	89400017 	ldw	r5,0(r17)
 400d004:	d9000017 	ldw	r4,0(sp)
 400d008:	183ee83a 	callr	r3
 400d00c:	a0800117 	ldw	r2,4(r20)
 400d010:	15bfbf1e 	bne	r2,r22,400cf10 <__alt_data_end+0xfc00cf10>
 400d014:	98800017 	ldw	r2,0(r19)
 400d018:	153fcf26 	beq	r2,r20,400cf58 <__alt_data_end+0xfc00cf58>
 400d01c:	003fbc06 	br	400cf10 <__alt_data_end+0xfc00cf10>
 400d020:	183ee83a 	callr	r3
 400d024:	003ff906 	br	400d00c <__alt_data_end+0xfc00d00c>
 400d028:	a5c00115 	stw	r23,4(r20)
 400d02c:	003feb06 	br	400cfdc <__alt_data_end+0xfc00cfdc>
 400d030:	89000017 	ldw	r4,0(r17)
 400d034:	183ee83a 	callr	r3
 400d038:	003ff406 	br	400d00c <__alt_data_end+0xfc00d00c>
 400d03c:	a0800017 	ldw	r2,0(r20)
 400d040:	a027883a 	mov	r19,r20
 400d044:	1029883a 	mov	r20,r2
 400d048:	003fb606 	br	400cf24 <__alt_data_end+0xfc00cf24>
 400d04c:	0005883a 	mov	r2,zero
 400d050:	003ffb06 	br	400d040 <__alt_data_end+0xfc00d040>
