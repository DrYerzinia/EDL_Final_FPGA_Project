
FinalProject.elf:     file format elf32-littlenios2
FinalProject.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x04000230

Program Header:
    LOAD off    0x00001000 vaddr 0x04000000 paddr 0x04000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x04000020 paddr 0x04000020 align 2**12
         filesz 0x00011470 memsz 0x00011470 flags r-x
    LOAD off    0x00012490 vaddr 0x04011490 paddr 0x040130bc align 2**12
         filesz 0x00001c2c memsz 0x00001c2c flags rw-
    LOAD off    0x00014ce8 vaddr 0x04014ce8 paddr 0x04014ce8 align 2**12
         filesz 0x00000000 memsz 0x0004b240 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  04000000  04000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000210  04000020  04000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00010c08  04000230  04000230  00001230  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000658  04010e38  04010e38  00011e38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       00001c2c  04011490  040130bc  00012490  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          0004b240  04014ce8  04014ce8  00014ce8  2**2
                  ALLOC, SMALL_DATA
  6 .sdram        00000000  0405ff28  0405ff28  000140bc  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  000140bc  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00001010  00000000  00000000  000140e0  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00024242  00000000  00000000  000150f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00009a48  00000000  00000000  00039332  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000b8a5  00000000  00000000  00042d7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  000026e8  00000000  00000000  0004e620  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00004a6e  00000000  00000000  00050d08  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000134d3  00000000  00000000  00055776  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  00068c4c  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00001c38  00000000  00000000  00068c90  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0006e621  2**0
                  CONTENTS, READONLY
 18 .cpu          00000003  00000000  00000000  0006e624  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  0006e627  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0006e628  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000009  00000000  00000000  0006e629  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000009  00000000  00000000  0006e632  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000009  00000000  00000000  0006e63b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000009  00000000  00000000  0006e644  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000039  00000000  00000000  0006e64d  2**0
                  CONTENTS, READONLY
 26 .sopcinfo     00070742  00000000  00000000  0006e686  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
04000000 l    d  .entry	00000000 .entry
04000020 l    d  .exceptions	00000000 .exceptions
04000230 l    d  .text	00000000 .text
04010e38 l    d  .rodata	00000000 .rodata
04011490 l    d  .rwdata	00000000 .rwdata
04014ce8 l    d  .bss	00000000 .bss
0405ff28 l    d  .sdram	00000000 .sdram
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../FinalProject_bsp//obj/HAL/src/crt0.o
04000268 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 camera.c
00000000 l    df *ABS*	00000000 hello_world.c
04010e38 l     O .rodata	00000040 tjei_default_qt_luma_from_spec
04010e78 l     O .rodata	00000040 tjei_default_qt_chroma_from_paper
04010eb8 l     O .rodata	00000010 tjei_default_ht_luma_dc_len
04010ec8 l     O .rodata	0000000c tjei_default_ht_luma_dc
04010ed4 l     O .rodata	00000010 tjei_default_ht_chroma_dc_len
04010ee4 l     O .rodata	0000000c tjei_default_ht_chroma_dc
04010ef0 l     O .rodata	00000010 tjei_default_ht_luma_ac_len
04010f00 l     O .rodata	000000a2 tjei_default_ht_luma_ac
04010fa2 l     O .rodata	00000010 tjei_default_ht_chroma_ac_len
04010fb2 l     O .rodata	000000a2 tjei_default_ht_chroma_ac
04011054 l     O .rodata	00000040 tjei_zig_zag
0400026c l     F .text	00000050 tjei_be_word
0401304c l     O .rwdata	00000005 tjeik_jfif_id
04011094 l     O .rodata	0000001d tjeik_com_str
040002bc l     F .text	0000014c tjei_write
040111ec l     O .rodata	0000000b __func__.4077
04000408 l     F .text	000000dc tjei_write_DQT
040111f8 l     O .rodata	0000000f __func__.4085
040004e4 l     F .text	00000190 tjei_write_DHT
04011208 l     O .rodata	0000000f __func__.4103
04000674 l     F .text	000000b0 tjei_huff_get_code_lengths
04000724 l     F .text	00000130 tjei_huff_get_codes
04011218 l     O .rodata	00000014 __func__.4128
04000854 l     F .text	000000cc tjei_huff_get_extended
04000920 l     F .text	000000c0 tjei_calculate_variable_length_int
040009e0 l     F .text	0000011c tjei_write_bits
04000afc l     F .text	0000083c tjei_fdct
04001338 l     F .text	000004b8 tjei_encode_and_write_MCU
0401122c l     O .rodata	0000001a __func__.4229
040017f0 l     F .text	00000384 tjei_huff_expand
04011248 l     O .rodata	00000011 __func__.4245
04001b74 l     F .text	00000e34 tjei_encode_main
0401125c l     O .rodata	00000020 aan_scales.4274
0401127c l     O .rodata	00000011 __func__.4289
04011290 l     O .rodata	00000015 __func__.4362
04002bfc l     F .text	00000050 jtag_kiss_send
04002c4c l     F .text	0000006c camera_dma_enable
04002cb8 l     F .text	000000a4 swap_buffer
04002d5c l     F .text	00000114 take_raw_picture_and_send_to_jtag
04002e70 l     F .text	0000004c jpeg_jtag_send
04002ebc l     F .text	00000198 take_jpeg_picture_and_send_to_jtag
04003054 l     F .text	00000028 read_uptime
0400307c l     F .text	00000028 read_line_detect
040030a4 l     F .text	00000028 read_encoder_left
040030cc l     F .text	00000028 read_encoder_right
040030f4 l     F .text	000000dc set_motors
04003480 l     F .text	000000e8 motor_init
04003568 l     F .text	00000048 wait_button_press
040035b0 l     F .text	0000056c motor_control_loop
04003b1c l     F .text	000000c0 encoder_test
04003bdc l     F .text	000000c8 follow_line
04003ca4 l     F .text	000000ac motor_ramp_test
04003d50 l     F .text	00000040 image_download_test
04013078 l     O .rwdata	00000001 jpeg_transfer.4540
00000000 l    df *ABS*	00000000 kiss.c
00000000 l    df *ABS*	00000000 pid.c
00000000 l    df *ABS*	00000000 sf_floor.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 addsf3.c
00000000 l    df *ABS*	00000000 divsf3.c
00000000 l    df *ABS*	00000000 gesf2.c
00000000 l    df *ABS*	00000000 lesf2.c
00000000 l    df *ABS*	00000000 mulsf3.c
00000000 l    df *ABS*	00000000 subsf3.c
00000000 l    df *ABS*	00000000 fixsfsi.c
00000000 l    df *ABS*	00000000 floatsisf.c
00000000 l    df *ABS*	00000000 adddf3.c
00000000 l    df *ABS*	00000000 divdf3.c
00000000 l    df *ABS*	00000000 gedf2.c
00000000 l    df *ABS*	00000000 ledf2.c
00000000 l    df *ABS*	00000000 muldf3.c
00000000 l    df *ABS*	00000000 subdf3.c
00000000 l    df *ABS*	00000000 fixdfsi.c
00000000 l    df *ABS*	00000000 floatsidf.c
00000000 l    df *ABS*	00000000 floatunsidf.c
00000000 l    df *ABS*	00000000 extendsfdf2.c
00000000 l    df *ABS*	00000000 truncdfsf2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 assert.c
00000000 l    df *ABS*	00000000 fiprintf.c
00000000 l    df *ABS*	00000000 impure.c
04011544 l     O .rwdata	00000424 impure_data
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 vfiprintfr_1.c
00000000 l    df *ABS*	00000000 abort.c
00000000 l    df *ABS*	00000000 signal.c
00000000 l    df *ABS*	00000000 signalr.c
00000000 l    df *ABS*	00000000 vfprintf.c
04008f5c l     F .text	000000fc __sprint_r.part.0
0401141b l     O .rodata	00000010 zeroes.4349
0400a598 l     F .text	000000bc __sbprintf
0401142b l     O .rodata	00000010 blanks.4348
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
0400aa50 l     F .text	00000008 __fp_unlock
0400aa64 l     F .text	0000019c __sinit.part.1
0400ac00 l     F .text	00000008 __fp_lock
00000000 l    df *ABS*	00000000 fputwc.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 fvwrite.c
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 locale.c
04011988 l     O .rwdata	00000020 lc_ctype_charset
04011968 l     O .rwdata	00000020 lc_message_charset
040119a8 l     O .rwdata	00000038 lconv
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 memchr.c
00000000 l    df *ABS*	00000000 memmove.c
00000000 l    df *ABS*	00000000 mallocr.c
00000000 l    df *ABS*	00000000 sbrkr.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 strcmp.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wcrtomb.c
00000000 l    df *ABS*	00000000 wctomb_r.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 closer.c
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fstatr.c
00000000 l    df *ABS*	00000000 isattyr.c
00000000 l    df *ABS*	00000000 lseekr.c
00000000 l    df *ABS*	00000000 readr.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 alt_close.c
0400e200 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dev.c
0400e314 l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_exit.c
00000000 l    df *ABS*	00000000 alt_fstat.c
0400e374 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_getpid.c
00000000 l    df *ABS*	00000000 alt_isatty.c
0400e488 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_kill.c
0400e570 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_load.c
0400e6dc l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_lseek.c
0400e7c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_malloc_lock.c
00000000 l    df *ABS*	00000000 alt_read.c
0400e9a4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_sbrk.c
040130ac l     O .rwdata	00000004 heap_end
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0400ec48 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
0400ed84 l     F .text	00000034 alt_dev_reg
04011f90 l     O .rwdata	00001060 jtag_uart
04012ff0 l     O .rwdata	0000005c video_dma_controller
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_init.c
0400f2ec l     F .text	0000020c altera_avalon_jtag_uart_irq
0400f4f8 l     F .text	000000a0 altera_avalon_jtag_uart_timeout
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_ioctl.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_alarm_start.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
0400fdd4 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
04010234 l     F .text	000000e4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
04010394 l     F .text	0000003c alt_get_errno
040103d0 l     F .text	000000ec alt_file_locked
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
04014d34 g     O .bss	00000004 alt_instruction_exception_handler
0400d52c g     F .text	00000054 _isatty_r
0400e8e0 g     F .text	0000007c alt_main
0405fe28 g     O .bss	00000100 alt_irq
0400d580 g     F .text	00000060 _lseek_r
040130bc g       *ABS*	00000000 __flash_rwdata_start
0405ff28 g       *ABS*	00000000 __alt_heap_start
04008efc g     F .text	0000005c _kill_r
0400d130 g     F .text	0000009c _wcrtomb_r
04008cc4 g     F .text	00000084 _signal_r
0400ce00 g     F .text	0000005c __sseek
0400adb0 g     F .text	00000010 __sinit
0400cfd8 g     F .text	00000140 __swbuf_r
0400ba8c g     F .text	0000007c _setlocale_r
0400ac08 g     F .text	00000078 __sfmoreglue
0400e980 g     F .text	00000024 __malloc_unlock
04004da0 g     F .text	00000440 .hidden __divsf3
040114fc g     O .rwdata	0000000c spin_5_times_ctrl
0400c614 g     F .text	0000015c memmove
0400ad98 g     F .text	00000018 _cleanup
04005c78 g     F .text	00000070 .hidden __fixsfsi
04014d60 g     O .bss	0004b000 jpeg_image_buffer
04007088 g     F .text	000000dc .hidden __gtdf2
040107bc g     F .text	00000024 altera_nios2_gen2_irq_init
04000000 g     F .entry	0000000c __reset
04000020 g       *ABS*	00000000 __flash_exceptions_start
0400d4d0 g     F .text	0000005c _fstat_r
04014d00 g     O .bss	00000004 errno
0400cd7c g     F .text	00000008 __seofread
04014d20 g     O .bss	00000004 alt_argv
0401b04c g       *ABS*	00000000 _gp
0400ec18 g     F .text	00000030 usleep
04013070 g     O .rwdata	00000004 left_yaw_changes
04005794 g     F .text	000004e4 .hidden __subsf3
0400e468 g     F .text	00000020 getpid
04011e10 g     O .rwdata	00000180 alt_fd_list
04011514 g     O .rwdata	0000000c forward_ctrl
040107e0 g     F .text	00000090 alt_find_dev
040089b8 g     F .text	00000148 memcpy
0400aa58 g     F .text	0000000c _cleanup_r
04008440 g     F .text	000000dc .hidden __floatsidf
04010318 g     F .text	0000007c alt_io_redirect
04007164 g     F .text	000000f4 .hidden __ltdf2
04013068 g     O .rwdata	00000004 forward_drive_changes
04010e38 g       *ABS*	00000000 __DTOR_END__
0401305c g     O .rwdata	00000001 maxPWM
04010a3c g     F .text	0000009c alt_exception_cause_generated_bad_addr
0400a57c g     F .text	0000001c __vfiprintf_internal
0400f6f0 g     F .text	0000021c altera_avalon_jtag_uart_read
040047f4 g     F .text	00000064 .hidden __udivsi3
0400e4c4 g     F .text	000000ac isatty
04008d48 g     F .text	000000bc _raise_r
040088e0 g     F .text	00000068 __assert_func
0400bb08 g     F .text	0000000c __locale_charset
0400529c g     F .text	000000c8 .hidden __lesf2
04014d18 g     O .bss	00000004 __malloc_top_pad
04008f58 g     F .text	00000004 _getpid_r
0405fd60 g     O .bss	00000014 jtag_kiss
04013084 g     O .rwdata	00000004 __mb_cur_max
0400bb38 g     F .text	0000000c _localeconv_r
0400b43c g     F .text	000004c8 __sfvwrite_r
04008e04 g     F .text	000000a8 __sigtramp_r
0400ccd4 g     F .text	00000054 _sbrk_r
0400d5e0 g     F .text	00000060 _read_r
040130a4 g     O .rwdata	00000004 alt_max_fd
0400d3cc g     F .text	000000f0 _fclose_r
04013058 g     O .rwdata	00000004 image_buffer_b
0400aa20 g     F .text	00000030 fflush
04014d14 g     O .bss	00000004 __malloc_max_sbrked_mem
0405fd74 g     O .bss	00000064 jtag_kiss_rx_buffer
040085c4 g     F .text	00000110 .hidden __extendsfdf2
04005e0c g     F .text	000008ac .hidden __adddf3
0400dc3c g     F .text	000005c4 .hidden __umoddi3
0400e804 g     F .text	000000dc lseek
0401307c g     O .rwdata	00000004 _global_impure_ptr
04014cf4 g     O .bss	00000004 backward_yaw_changes
0400c770 g     F .text	00000564 _realloc_r
0405ff28 g       *ABS*	00000000 __bss_end
04010144 g     F .text	000000f0 alt_iic_isr_register
040106b4 g     F .text	00000108 alt_tick
0400d640 g     F .text	000005fc .hidden __udivdi3
0400af64 g     F .text	00000024 _fputwc_r
04008c40 g     F .text	00000018 abort
04011538 g     O .rwdata	0000000c right_ctrl
0400851c g     F .text	000000a8 .hidden __floatunsidf
0400add0 g     F .text	00000018 __fp_lock_all
040100f8 g     F .text	0000004c alt_ic_irq_enabled
04010618 g     F .text	0000009c alt_alarm_stop
04014d28 g     O .bss	00000004 alt_irq_active
040000fc g     F .exceptions	000000d4 alt_irq_handler
04011de8 g     O .rwdata	00000028 alt_dev_null
0401306c g     O .rwdata	00000004 backward_drive_changes
0400fdb4 g     F .text	00000020 alt_dcache_flush_all
040083c0 g     F .text	00000080 .hidden __fixdfsi
04013074 g     O .rwdata	00000004 right_yaw_changes
040130bc g       *ABS*	00000000 __ram_rwdata_end
0401309c g     O .rwdata	00000008 alt_dev_list
0400ec84 g     F .text	00000100 write
040051e0 g     F .text	000000bc .hidden __gtsf2
04011490 g       *ABS*	00000000 __ram_rodata_end
0400e3b0 g     F .text	000000b8 fstat
0400e5ac g     F .text	00000130 kill
04007164 g     F .text	000000f4 .hidden __ledf2
04003270 g     F .text	00000210 normalize_output
040031d0 g     F .text	000000a0 scale_output
04014d0c g     O .bss	00000004 __nlocale_changed
04009070 g     F .text	0000150c ___vfiprintf_internal_r
04004858 g     F .text	00000058 .hidden __umodsi3
0405ff28 g       *ABS*	00000000 end
0400f22c g     F .text	000000c0 altera_avalon_jtag_uart_init
040001d0 g     F .exceptions	00000060 alt_instruction_exception_entry
04010e38 g       *ABS*	00000000 __CTOR_LIST__
08000000 g       *ABS*	00000000 __alt_stack_pointer
0400887c g     F .text	00000064 .hidden __clzsi2
0400f90c g     F .text	00000224 altera_avalon_jtag_uart_write
0401305e g     O .rwdata	00000001 minimum_stable_pwm
0400adc0 g     F .text	00000004 __sfp_lock_acquire
0400c530 g     F .text	000000e4 memchr
0400b12c g     F .text	00000310 _free_r
0400bb14 g     F .text	00000010 __locale_mb_cur_max
04010cb8 g     F .text	00000180 __call_exitprocs
04014d08 g     O .bss	00000004 __mlocale_changed
04013088 g     O .rwdata	00000004 __malloc_sbrk_base
04000230 g     F .text	0000003c _start
04014d2c g     O .bss	00000004 _alt_tick_rate
04014d30 g     O .bss	00000004 _alt_nticks
04008ec0 g     F .text	00000018 signal
0400e9e0 g     F .text	00000104 read
0400edf0 g     F .text	000002d8 alt_sys_init
04005ce8 g     F .text	00000124 .hidden __floatsisf
04010ba0 g     F .text	00000118 __register_exitproc
0400f598 g     F .text	00000068 altera_avalon_jtag_uart_close
040048b0 g     F .text	00000028 .hidden __mulsi3
04011490 g       *ABS*	00000000 __ram_rwdata_start
04010e38 g       *ABS*	00000000 __ram_rodata_start
04014d38 g     O .bss	00000028 __malloc_current_mallinfo
0401152c g     O .rwdata	0000000c left_ctrl
04013064 g     O .rwdata	00000004 spin_1_yaw_changes
0400f0c8 g     F .text	00000060 altera_avalon_jtag_uart_read_fd
04010978 g     F .text	000000c4 alt_get_fd
0400fc5c g     F .text	00000158 alt_busy_sleep
0400d378 g     F .text	00000054 _close_r
040029a8 g     F .text	00000254 tje_encode_with_func
04010b24 g     F .text	0000007c memcmp
0400f188 g     F .text	00000050 altera_avalon_jtag_uart_close_fd
0405ff28 g       *ABS*	00000000 __alt_stack_base
0400f1d8 g     F .text	00000054 altera_avalon_jtag_uart_ioctl_fd
0405fdd8 g     O .bss	00000028 yaw_pid
0400a654 g     F .text	00000154 __swsetup_r
040066b8 g     F .text	000009d0 .hidden __divdf3
0400ac80 g     F .text	00000118 __sfp
040119e0 g     O .rwdata	00000408 __malloc_av_
0400adcc g     F .text	00000004 __sinit_lock_release
04007258 g     F .text	0000086c .hidden __muldf3
0400cd28 g     F .text	00000054 __sread
04010870 g     F .text	00000108 alt_find_file
04014cf8 g     O .bss	00000004 left_drive_changes
0400fe10 g     F .text	000000a4 alt_dev_llist_insert
0400e95c g     F .text	00000024 __malloc_lock
0400eb68 g     F .text	000000b0 sbrk
0400a9c4 g     F .text	0000005c _fflush_r
04014ce8 g       *ABS*	00000000 __bss_start
04008b00 g     F .text	00000128 memset
04003d90 g     F .text	000002d8 main
04014cfc g     O .bss	00000004 right_drive_changes
04014d24 g     O .bss	00000004 alt_envp
04014d10 g     O .bss	00000004 __malloc_max_total_mem
0400f128 g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0400d118 g     F .text	00000018 __swbuf
0400529c g     F .text	000000c8 .hidden __ltsf2
0400ce5c g     F .text	00000008 __sclose
08000000 g       *ABS*	00000000 __alt_heap_limit
0400d4bc g     F .text	00000014 fclose
040086d4 g     F .text	000001a8 .hidden __truncdfsf2
040040bc g     F .text	00000044 kiss_start
04011520 g     O .rwdata	0000000c backward_ctrl
0400bd24 g     F .text	0000080c _malloc_r
0400d28c g     F .text	00000030 __ascii_wctomb
040130a8 g     O .rwdata	00000004 alt_errno
0400895c g     F .text	00000020 _fiprintf_r
04008ed8 g     F .text	00000010 _init_signal
0400b904 g     F .text	000000c4 _fwalk
040046fc g     F .text	00000084 .hidden __divsi3
0400b008 g     F .text	00000124 _malloc_trim_r
04010e38 g       *ABS*	00000000 __CTOR_END__
04005364 g     F .text	00000430 .hidden __mulsf3
04013060 g     O .rwdata	00000004 spin_5_yaw_changes
0400ce64 g     F .text	000000dc strcmp
04010e38 g       *ABS*	00000000 __flash_rodata_start
04010e38 g       *ABS*	00000000 __DTOR_LIST__
0400edb8 g     F .text	00000038 alt_irq_init
0400eae4 g     F .text	00000084 alt_release_fd
040112a5 g     O .rodata	00000100 .hidden __clz_tab
04014d04 g     O .bss	00000004 _PathLocale
04010ad8 g     F .text	00000014 atexit
040051e0 g     F .text	000000bc .hidden __gesf2
0400d318 g     F .text	00000060 _write_r
04011508 g     O .rwdata	0000000c spin_1_time_ctrl
0400bb44 g     F .text	00000018 setlocale
04013080 g     O .rwdata	00000004 _impure_ptr
04014d1c g     O .bss	00000004 alt_argc
0400a7a8 g     F .text	0000021c __sflush_r
04011490 g     O .rwdata	00000030 figure_8_drive_changes
04004270 g     F .text	00000160 kiss_rx_byte
0400ff14 g     F .text	00000060 _do_dtors
0400bb30 g     F .text	00000008 __locale_cjk_lang
04014cec g     O .bss	00000004 spin_1_drive_changes
04000020 g       .exceptions	00000000 alt_irq_entry
0400ade8 g     F .text	00000018 __fp_unlock_all
0400422c g     F .text	00000044 kiss_end
04013094 g     O .rwdata	00000008 alt_fs_list
04000020 g       *ABS*	00000000 __ram_exceptions_start
0400bb5c g     F .text	0000000c localeconv
0400ff94 g     F .text	00000050 alt_ic_isr_register
040114c0 g     O .rwdata	00000030 figure_8_yaw_changes
040130bc g       *ABS*	00000000 _edata
0405ff28 g       *ABS*	00000000 _end
0400ae00 g     F .text	00000164 __fputwc
04000230 g       *ABS*	00000000 __ram_exceptions_end
0400f600 g     F .text	000000f0 altera_avalon_jtag_uart_ioctl
040043d0 g     F .text	00000228 pid_compute
0401006c g     F .text	0000008c alt_ic_irq_disable
0400cd84 g     F .text	0000007c __swrite
0401308c g     O .rwdata	00000004 __malloc_trim_threshold
0400bb24 g     F .text	0000000c __locale_msgcharset
04010aec g     F .text	00000038 exit
0400897c g     F .text	0000003c fiprintf
04008c28 g     F .text	00000018 _vfiprintf_r
0400b9c8 g     F .text	000000c4 _fwalk_reent
04004780 g     F .text	00000074 .hidden __modsi3
08000000 g       *ABS*	00000000 __alt_data_end
04000020 g     F .exceptions	00000000 alt_exception
0400adc4 g     F .text	00000004 __sfp_lock_release
04000000 g       *ABS*	00000000 __alt_mem_sdram
04014cf0 g     O .bss	00000004 forward_yaw_changes
0400e340 g     F .text	00000034 _exit
0400fb30 g     F .text	0000012c alt_alarm_start
040114f0 g     O .rwdata	0000000c figure_8_ctrl
0400bb68 g     F .text	000001bc __smakebuf_r
0400cf40 g     F .text	00000098 strlen
04008c58 g     F .text	0000006c _init_signal_r
040104bc g     F .text	0000015c open
04007088 g     F .text	000000dc .hidden __gedf2
04014ce8 g     O .bss	00000004 spin_5_drive_changes
04013054 g     O .rwdata	00000004 image_buffer_a
04008948 g     F .text	00000014 __assert
04013090 g     O .rwdata	00000004 __wctomb
04009058 g     F .text	00000018 __sprint_r
0400ff74 g     F .text	00000020 alt_icache_flush_all
040045f8 g     F .text	00000104 floorf
0401305d g     O .rwdata	00000001 minimum_zero
040130b0 g     O .rwdata	00000004 alt_priority_mask
0400ffe4 g     F .text	00000088 alt_ic_irq_enable
0400d2bc g     F .text	0000005c _wctomb_r
04007ac4 g     F .text	000008fc .hidden __subdf3
040130b4 g     O .rwdata	00000008 alt_alarm_list
0400feb4 g     F .text	00000060 _do_ctors
04008ee8 g     F .text	00000014 __sigtramp
0400d1cc g     F .text	000000c0 wcrtomb
0400e23c g     F .text	000000d8 close
040048d8 g     F .text	000004c8 .hidden __addsf3
04004068 g     F .text	00000054 kiss_send_packet
04004100 g     F .text	0000012c kiss_send_data
0400e744 g     F .text	00000084 alt_load
0405fe00 g     O .bss	00000028 drive_pid
0400af88 g     F .text	00000080 fputwc
04008eac g     F .text	00000014 raise
0400adc8 g     F .text	00000004 __sinit_lock_acquire



Disassembly of section .entry:

04000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
 4000000:	00410034 	movhi	at,1024
    ori r1, r1, %lo(_start)
 4000004:	08408c14 	ori	at,at,560
    jmp r1
 4000008:	0800683a 	jmp	at
	...

Disassembly of section .exceptions:

04000020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
 4000020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
 4000024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
 4000028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
 400002c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
 4000030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
 4000034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
 4000038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
 400003c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
 4000040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
 4000044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
 4000048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
 400004c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
 4000050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
 4000054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
 4000058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
 400005c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
 4000060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
 4000064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
 4000068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
 400006c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 4000070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
 4000074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
 4000078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
 400007c:	10000326 	beq	r2,zero,400008c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
 4000080:	20000226 	beq	r4,zero,400008c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
 4000084:	40000fc0 	call	40000fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
 4000088:	00000706 	br	40000a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
 400008c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
 4000090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
 4000094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
 4000098:	40001d00 	call	40001d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
 400009c:	1000021e 	bne	r2,zero,40000a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
 40000a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
 40000a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
 40000a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
 40000ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
 40000b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
 40000b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
 40000b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
 40000bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
 40000c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
 40000c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
 40000c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
 40000cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
 40000d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
 40000d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
 40000d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
 40000dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
 40000e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
 40000e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
 40000e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
 40000ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
 40000f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
 40000f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
 40000f8:	ef80083a 	eret

040000fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
 40000fc:	defff904 	addi	sp,sp,-28
 4000100:	dfc00615 	stw	ra,24(sp)
 4000104:	df000515 	stw	fp,20(sp)
 4000108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
 400010c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 4000110:	0005313a 	rdctl	r2,ipending
 4000114:	e0bffe15 	stw	r2,-8(fp)

  return active;
 4000118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
 400011c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
 4000120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
 4000124:	00800044 	movi	r2,1
 4000128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
 400012c:	e0fffb17 	ldw	r3,-20(fp)
 4000130:	e0bffc17 	ldw	r2,-16(fp)
 4000134:	1884703a 	and	r2,r3,r2
 4000138:	10001426 	beq	r2,zero,400018c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
 400013c:	008101b4 	movhi	r2,1030
 4000140:	10bf8a04 	addi	r2,r2,-472
 4000144:	e0fffd17 	ldw	r3,-12(fp)
 4000148:	180690fa 	slli	r3,r3,3
 400014c:	10c5883a 	add	r2,r2,r3
 4000150:	10c00017 	ldw	r3,0(r2)
 4000154:	008101b4 	movhi	r2,1030
 4000158:	10bf8a04 	addi	r2,r2,-472
 400015c:	e13ffd17 	ldw	r4,-12(fp)
 4000160:	200890fa 	slli	r4,r4,3
 4000164:	1105883a 	add	r2,r2,r4
 4000168:	10800104 	addi	r2,r2,4
 400016c:	10800017 	ldw	r2,0(r2)
 4000170:	1009883a 	mov	r4,r2
 4000174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
 4000178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
 400017c:	0005313a 	rdctl	r2,ipending
 4000180:	e0bfff15 	stw	r2,-4(fp)

  return active;
 4000184:	e0bfff17 	ldw	r2,-4(fp)
 4000188:	00000706 	br	40001a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
 400018c:	e0bffc17 	ldw	r2,-16(fp)
 4000190:	1085883a 	add	r2,r2,r2
 4000194:	e0bffc15 	stw	r2,-16(fp)
      i++;
 4000198:	e0bffd17 	ldw	r2,-12(fp)
 400019c:	10800044 	addi	r2,r2,1
 40001a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
 40001a4:	003fe106 	br	400012c <__alt_data_end+0xfc00012c>

    active = alt_irq_pending ();
 40001a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
 40001ac:	e0bffb17 	ldw	r2,-20(fp)
 40001b0:	103fdb1e 	bne	r2,zero,4000120 <__alt_data_end+0xfc000120>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
 40001b4:	0001883a 	nop
}
 40001b8:	0001883a 	nop
 40001bc:	e037883a 	mov	sp,fp
 40001c0:	dfc00117 	ldw	ra,4(sp)
 40001c4:	df000017 	ldw	fp,0(sp)
 40001c8:	dec00204 	addi	sp,sp,8
 40001cc:	f800283a 	ret

040001d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
 40001d0:	defffb04 	addi	sp,sp,-20
 40001d4:	dfc00415 	stw	ra,16(sp)
 40001d8:	df000315 	stw	fp,12(sp)
 40001dc:	df000304 	addi	fp,sp,12
 40001e0:	e13fff15 	stw	r4,-4(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
 40001e4:	00bfffc4 	movi	r2,-1
 40001e8:	e0bffd15 	stw	r2,-12(fp)
  badaddr = 0;
 40001ec:	e03ffe15 	stw	zero,-8(fp)
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
 40001f0:	d0a73a17 	ldw	r2,-25368(gp)
 40001f4:	10000726 	beq	r2,zero,4000214 <alt_instruction_exception_entry+0x44>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
 40001f8:	d0a73a17 	ldw	r2,-25368(gp)
 40001fc:	e0fffd17 	ldw	r3,-12(fp)
 4000200:	e1bffe17 	ldw	r6,-8(fp)
 4000204:	e17fff17 	ldw	r5,-4(fp)
 4000208:	1809883a 	mov	r4,r3
 400020c:	103ee83a 	callr	r2
 4000210:	00000206 	br	400021c <alt_instruction_exception_entry+0x4c>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
 4000214:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
 4000218:	0005883a 	mov	r2,zero
}
 400021c:	e037883a 	mov	sp,fp
 4000220:	dfc00117 	ldw	ra,4(sp)
 4000224:	df000017 	ldw	fp,0(sp)
 4000228:	dec00204 	addi	sp,sp,8
 400022c:	f800283a 	ret

Disassembly of section .text:

04000230 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
 4000230:	06c20034 	movhi	sp,2048
    ori sp, sp, %lo(__alt_stack_pointer)
 4000234:	dec00014 	ori	sp,sp,0
    movhi gp, %hi(_gp)
 4000238:	06810074 	movhi	gp,1025
    ori gp, gp, %lo(_gp)
 400023c:	d6ac1314 	ori	gp,gp,45132
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
 4000240:	00810074 	movhi	r2,1025
    ori r2, r2, %lo(__bss_start)
 4000244:	10933a14 	ori	r2,r2,19688

    movhi r3, %hi(__bss_end)
 4000248:	00c10174 	movhi	r3,1029
    ori r3, r3, %lo(__bss_end)
 400024c:	18ffca14 	ori	r3,r3,65320

    beq r2, r3, 1f
 4000250:	10c00326 	beq	r2,r3,4000260 <_start+0x30>

0:
    stw zero, (r2)
 4000254:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
 4000258:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
 400025c:	10fffd36 	bltu	r2,r3,4000254 <__alt_data_end+0xfc000254>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
 4000260:	400e7440 	call	400e744 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
 4000264:	400e8e00 	call	400e8e0 <alt_main>

04000268 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
 4000268:	003fff06 	br	4000268 <__alt_data_end+0xfc000268>

0400026c <tjei_be_word>:
		35, 36, 48, 49, 57, 58, 62, 63,
	};

	// Memory order as big endian. 0xhilo -> 0xlohi which looks as 0xhilo in memory.
	static uint16_t tjei_be_word(const uint16_t le_word)
	{
 400026c:	defffd04 	addi	sp,sp,-12
 4000270:	df000215 	stw	fp,8(sp)
 4000274:	df000204 	addi	fp,sp,8
 4000278:	2005883a 	mov	r2,r4
 400027c:	e0bfff0d 	sth	r2,-4(fp)
		uint16_t lo = (le_word & 0x00ff);
 4000280:	e0bfff0b 	ldhu	r2,-4(fp)
 4000284:	10803fcc 	andi	r2,r2,255
 4000288:	e0bffe0d 	sth	r2,-8(fp)
		uint16_t hi = ((le_word & 0xff00) >> 8);
 400028c:	e0bfff0b 	ldhu	r2,-4(fp)
 4000290:	1004d23a 	srli	r2,r2,8
 4000294:	e0bffe8d 	sth	r2,-6(fp)
		return (uint16_t)((lo << 8) | hi);
 4000298:	e0bffe0b 	ldhu	r2,-8(fp)
 400029c:	1004923a 	slli	r2,r2,8
 40002a0:	1007883a 	mov	r3,r2
 40002a4:	e0bffe8b 	ldhu	r2,-6(fp)
 40002a8:	1884b03a 	or	r2,r3,r2
	}
 40002ac:	e037883a 	mov	sp,fp
 40002b0:	df000017 	ldw	fp,0(sp)
 40002b4:	dec00104 	addi	sp,sp,4
 40002b8:	f800283a 	ret

040002bc <tjei_write>:
	} TJEScanHeader;
#pragma pack(pop)


	static void tjei_write(TJEState* state, const void* data, size_t num_bytes, size_t num_elements)
	{
 40002bc:	defff804 	addi	sp,sp,-32
 40002c0:	dfc00715 	stw	ra,28(sp)
 40002c4:	df000615 	stw	fp,24(sp)
 40002c8:	df000604 	addi	fp,sp,24
 40002cc:	e13ffc15 	stw	r4,-16(fp)
 40002d0:	e17ffd15 	stw	r5,-12(fp)
 40002d4:	e1bffe15 	stw	r6,-8(fp)
 40002d8:	e1ffff15 	stw	r7,-4(fp)
		size_t to_write = num_bytes * num_elements;
 40002dc:	e17fff17 	ldw	r5,-4(fp)
 40002e0:	e13ffe17 	ldw	r4,-8(fp)
 40002e4:	40048b00 	call	40048b0 <__mulsi3>
 40002e8:	e0bffa15 	stw	r2,-24(fp)

		// Cap to the buffer available size and copy memory.
		size_t capped_count = tjei_min(to_write, TJEI_BUFFER_SIZE - 1 - state->output_buffer_count);
 40002ec:	e0bffc17 	ldw	r2,-16(fp)
 40002f0:	10832b17 	ldw	r2,3244(r2)
 40002f4:	00c0ffc4 	movi	r3,1023
 40002f8:	1885c83a 	sub	r2,r3,r2
 40002fc:	e0fffa17 	ldw	r3,-24(fp)
 4000300:	1880012e 	bgeu	r3,r2,4000308 <tjei_write+0x4c>
 4000304:	1805883a 	mov	r2,r3
 4000308:	e0bffb15 	stw	r2,-20(fp)

		memcpy(state->output_buffer + state->output_buffer_count, data, capped_count);
 400030c:	e0bffc17 	ldw	r2,-16(fp)
 4000310:	10c32c04 	addi	r3,r2,3248
 4000314:	e0bffc17 	ldw	r2,-16(fp)
 4000318:	10832b17 	ldw	r2,3244(r2)
 400031c:	1885883a 	add	r2,r3,r2
 4000320:	e1bffb17 	ldw	r6,-20(fp)
 4000324:	e17ffd17 	ldw	r5,-12(fp)
 4000328:	1009883a 	mov	r4,r2
 400032c:	40089b80 	call	40089b8 <memcpy>
		state->output_buffer_count += capped_count;
 4000330:	e0bffc17 	ldw	r2,-16(fp)
 4000334:	10c32b17 	ldw	r3,3244(r2)
 4000338:	e0bffb17 	ldw	r2,-20(fp)
 400033c:	1887883a 	add	r3,r3,r2
 4000340:	e0bffc17 	ldw	r2,-16(fp)
 4000344:	10c32b15 	stw	r3,3244(r2)

		assert(state->output_buffer_count <= TJEI_BUFFER_SIZE - 1);
 4000348:	e0bffc17 	ldw	r2,-16(fp)
 400034c:	10832b17 	ldw	r2,3244(r2)
 4000350:	10810030 	cmpltui	r2,r2,1024
 4000354:	1000081e 	bne	r2,zero,4000378 <tjei_write+0xbc>
 4000358:	01c10074 	movhi	r7,1025
 400035c:	39c42d04 	addi	r7,r7,4276
 4000360:	01810074 	movhi	r6,1025
 4000364:	31847b04 	addi	r6,r6,4588
 4000368:	01406644 	movi	r5,409
 400036c:	01010074 	movhi	r4,1025
 4000370:	21043a04 	addi	r4,r4,4328
 4000374:	40088e00 	call	40088e0 <__assert_func>

		// Flush the buffer.
		if (state->output_buffer_count == TJEI_BUFFER_SIZE - 1) {
 4000378:	e0bffc17 	ldw	r2,-16(fp)
 400037c:	10832b17 	ldw	r2,3244(r2)
 4000380:	1080ffd8 	cmpnei	r2,r2,1023
 4000384:	10000c1e 	bne	r2,zero,40003b8 <tjei_write+0xfc>
			state->write_context.func(state->write_context.context, state->output_buffer, (int)state->output_buffer_count);
 4000388:	e0bffc17 	ldw	r2,-16(fp)
 400038c:	10832a17 	ldw	r2,3240(r2)
 4000390:	e0fffc17 	ldw	r3,-16(fp)
 4000394:	19032917 	ldw	r4,3236(r3)
 4000398:	e0fffc17 	ldw	r3,-16(fp)
 400039c:	19432c04 	addi	r5,r3,3248
 40003a0:	e0fffc17 	ldw	r3,-16(fp)
 40003a4:	18c32b17 	ldw	r3,3244(r3)
 40003a8:	180d883a 	mov	r6,r3
 40003ac:	103ee83a 	callr	r2
			state->output_buffer_count = 0;
 40003b0:	e0bffc17 	ldw	r2,-16(fp)
 40003b4:	10032b15 	stw	zero,3244(r2)
		}

		// Recursively calling ourselves with the rest of the buffer.
		if (capped_count < to_write) {
 40003b8:	e0fffb17 	ldw	r3,-20(fp)
 40003bc:	e0bffa17 	ldw	r2,-24(fp)
 40003c0:	18800b2e 	bgeu	r3,r2,40003f0 <tjei_write+0x134>
			tjei_write(state, (uint8_t*)data + capped_count, to_write - capped_count, 1);
 40003c4:	e0fffd17 	ldw	r3,-12(fp)
 40003c8:	e0bffb17 	ldw	r2,-20(fp)
 40003cc:	1889883a 	add	r4,r3,r2
 40003d0:	e0fffa17 	ldw	r3,-24(fp)
 40003d4:	e0bffb17 	ldw	r2,-20(fp)
 40003d8:	1885c83a 	sub	r2,r3,r2
 40003dc:	01c00044 	movi	r7,1
 40003e0:	100d883a 	mov	r6,r2
 40003e4:	200b883a 	mov	r5,r4
 40003e8:	e13ffc17 	ldw	r4,-16(fp)
 40003ec:	40002bc0 	call	40002bc <tjei_write>
		}
	}
 40003f0:	0001883a 	nop
 40003f4:	e037883a 	mov	sp,fp
 40003f8:	dfc00117 	ldw	ra,4(sp)
 40003fc:	df000017 	ldw	fp,0(sp)
 4000400:	dec00204 	addi	sp,sp,8
 4000404:	f800283a 	ret

04000408 <tjei_write_DQT>:

	static void tjei_write_DQT(TJEState* state, const uint8_t* matrix, uint8_t id)
	{
 4000408:	defff904 	addi	sp,sp,-28
 400040c:	dfc00615 	stw	ra,24(sp)
 4000410:	df000515 	stw	fp,20(sp)
 4000414:	df000504 	addi	fp,sp,20
 4000418:	e13ffd15 	stw	r4,-12(fp)
 400041c:	e17ffe15 	stw	r5,-8(fp)
 4000420:	3005883a 	mov	r2,r6
 4000424:	e0bfff05 	stb	r2,-4(fp)
		uint16_t DQT = tjei_be_word(0xffdb);
 4000428:	013ff6d4 	movui	r4,65499
 400042c:	400026c0 	call	400026c <tjei_be_word>
 4000430:	e0bffb0d 	sth	r2,-20(fp)
		tjei_write(state, &DQT, sizeof(uint16_t), 1);
 4000434:	01c00044 	movi	r7,1
 4000438:	01800084 	movi	r6,2
 400043c:	e17ffb04 	addi	r5,fp,-20
 4000440:	e13ffd17 	ldw	r4,-12(fp)
 4000444:	40002bc0 	call	40002bc <tjei_write>
		uint16_t len = tjei_be_word(0x0043); // 2(len) + 1(id) + 64(matrix) = 67 = 0x43
 4000448:	010010c4 	movi	r4,67
 400044c:	400026c0 	call	400026c <tjei_be_word>
 4000450:	e0bffb8d 	sth	r2,-18(fp)
		tjei_write(state, &len, sizeof(uint16_t), 1);
 4000454:	e0bffb84 	addi	r2,fp,-18
 4000458:	01c00044 	movi	r7,1
 400045c:	01800084 	movi	r6,2
 4000460:	100b883a 	mov	r5,r2
 4000464:	e13ffd17 	ldw	r4,-12(fp)
 4000468:	40002bc0 	call	40002bc <tjei_write>
		assert(id < 4);
 400046c:	e0bfff03 	ldbu	r2,-4(fp)
 4000470:	10800130 	cmpltui	r2,r2,4
 4000474:	1000081e 	bne	r2,zero,4000498 <tjei_write_DQT+0x90>
 4000478:	01c10074 	movhi	r7,1025
 400047c:	39c43d04 	addi	r7,r7,4340
 4000480:	01810074 	movhi	r6,1025
 4000484:	31847e04 	addi	r6,r6,4600
 4000488:	01406b44 	movi	r5,429
 400048c:	01010074 	movhi	r4,1025
 4000490:	21043a04 	addi	r4,r4,4328
 4000494:	40088e00 	call	40088e0 <__assert_func>
		uint8_t precision_and_id = id;  // 0x0000 8 bits | 0x00id
 4000498:	e0bfff03 	ldbu	r2,-4(fp)
 400049c:	e0bffc05 	stb	r2,-16(fp)
		tjei_write(state, &precision_and_id, sizeof(uint8_t), 1);
 40004a0:	e0bffc04 	addi	r2,fp,-16
 40004a4:	01c00044 	movi	r7,1
 40004a8:	01800044 	movi	r6,1
 40004ac:	100b883a 	mov	r5,r2
 40004b0:	e13ffd17 	ldw	r4,-12(fp)
 40004b4:	40002bc0 	call	40002bc <tjei_write>
		// Write matrix
		tjei_write(state, matrix, 64 * sizeof(uint8_t), 1);
 40004b8:	01c00044 	movi	r7,1
 40004bc:	01801004 	movi	r6,64
 40004c0:	e17ffe17 	ldw	r5,-8(fp)
 40004c4:	e13ffd17 	ldw	r4,-12(fp)
 40004c8:	40002bc0 	call	40002bc <tjei_write>
	}
 40004cc:	0001883a 	nop
 40004d0:	e037883a 	mov	sp,fp
 40004d4:	dfc00117 	ldw	ra,4(sp)
 40004d8:	df000017 	ldw	fp,0(sp)
 40004dc:	dec00204 	addi	sp,sp,8
 40004e0:	f800283a 	ret

040004e4 <tjei_write_DHT>:
	static void tjei_write_DHT(TJEState* state,
		uint8_t const* matrix_len,
		uint8_t const* matrix_val,
		TJEHuffmanTableClass ht_class,
		uint8_t id)
	{
 40004e4:	defff504 	addi	sp,sp,-44
 40004e8:	dfc00a15 	stw	ra,40(sp)
 40004ec:	df000915 	stw	fp,36(sp)
 40004f0:	df000904 	addi	fp,sp,36
 40004f4:	e13ffb15 	stw	r4,-20(fp)
 40004f8:	e17ffc15 	stw	r5,-16(fp)
 40004fc:	e1bffd15 	stw	r6,-12(fp)
 4000500:	e1fffe15 	stw	r7,-8(fp)
 4000504:	e0800217 	ldw	r2,8(fp)
 4000508:	e0bfff05 	stb	r2,-4(fp)
		int num_values = 0;
 400050c:	e03ff715 	stw	zero,-36(fp)
		for (int i = 0; i < 16; ++i) {
 4000510:	e03ff815 	stw	zero,-32(fp)
 4000514:	00000b06 	br	4000544 <tjei_write_DHT+0x60>
			num_values += matrix_len[i];
 4000518:	e0bff817 	ldw	r2,-32(fp)
 400051c:	e0fffc17 	ldw	r3,-16(fp)
 4000520:	1885883a 	add	r2,r3,r2
 4000524:	10800003 	ldbu	r2,0(r2)
 4000528:	10803fcc 	andi	r2,r2,255
 400052c:	e0fff717 	ldw	r3,-36(fp)
 4000530:	1885883a 	add	r2,r3,r2
 4000534:	e0bff715 	stw	r2,-36(fp)
		uint8_t const* matrix_val,
		TJEHuffmanTableClass ht_class,
		uint8_t id)
	{
		int num_values = 0;
		for (int i = 0; i < 16; ++i) {
 4000538:	e0bff817 	ldw	r2,-32(fp)
 400053c:	10800044 	addi	r2,r2,1
 4000540:	e0bff815 	stw	r2,-32(fp)
 4000544:	e0bff817 	ldw	r2,-32(fp)
 4000548:	10800410 	cmplti	r2,r2,16
 400054c:	103ff21e 	bne	r2,zero,4000518 <__alt_data_end+0xfc000518>
			num_values += matrix_len[i];
		}
		assert(num_values <= 0xffff);
 4000550:	e0bff717 	ldw	r2,-36(fp)
 4000554:	00ffffd4 	movui	r3,65535
 4000558:	1880080e 	bge	r3,r2,400057c <tjei_write_DHT+0x98>
 400055c:	01c10074 	movhi	r7,1025
 4000560:	39c43f04 	addi	r7,r7,4348
 4000564:	01810074 	movhi	r6,1025
 4000568:	31848204 	addi	r6,r6,4616
 400056c:	01407104 	movi	r5,452
 4000570:	01010074 	movhi	r4,1025
 4000574:	21043a04 	addi	r4,r4,4328
 4000578:	40088e00 	call	40088e0 <__assert_func>

		uint16_t DHT = tjei_be_word(0xffc4);
 400057c:	013ff114 	movui	r4,65476
 4000580:	400026c0 	call	400026c <tjei_be_word>
 4000584:	e0bff90d 	sth	r2,-28(fp)
		// 2(len) + 1(Tc|th) + 16 (num lengths) + ?? (num values)
		uint16_t len = tjei_be_word(2 + 1 + 16 + (uint16_t)num_values);
 4000588:	e0bff717 	ldw	r2,-36(fp)
 400058c:	108004c4 	addi	r2,r2,19
 4000590:	10bfffcc 	andi	r2,r2,65535
 4000594:	1009883a 	mov	r4,r2
 4000598:	400026c0 	call	400026c <tjei_be_word>
 400059c:	e0bff98d 	sth	r2,-26(fp)
		assert(id < 4);
 40005a0:	e0bfff03 	ldbu	r2,-4(fp)
 40005a4:	10800130 	cmpltui	r2,r2,4
 40005a8:	1000081e 	bne	r2,zero,40005cc <tjei_write_DHT+0xe8>
 40005ac:	01c10074 	movhi	r7,1025
 40005b0:	39c43d04 	addi	r7,r7,4340
 40005b4:	01810074 	movhi	r6,1025
 40005b8:	31848204 	addi	r6,r6,4616
 40005bc:	01407244 	movi	r5,457
 40005c0:	01010074 	movhi	r4,1025
 40005c4:	21043a04 	addi	r4,r4,4328
 40005c8:	40088e00 	call	40088e0 <__assert_func>
		uint8_t tc_th = (uint8_t)((((uint8_t)ht_class) << 4) | id);
 40005cc:	e0bffe17 	ldw	r2,-8(fp)
 40005d0:	10803fcc 	andi	r2,r2,255
 40005d4:	1004913a 	slli	r2,r2,4
 40005d8:	1007883a 	mov	r3,r2
 40005dc:	e0bfff03 	ldbu	r2,-4(fp)
 40005e0:	1884b03a 	or	r2,r3,r2
 40005e4:	e0bffa05 	stb	r2,-24(fp)

		tjei_write(state, &DHT, sizeof(uint16_t), 1);
 40005e8:	e0bff904 	addi	r2,fp,-28
 40005ec:	01c00044 	movi	r7,1
 40005f0:	01800084 	movi	r6,2
 40005f4:	100b883a 	mov	r5,r2
 40005f8:	e13ffb17 	ldw	r4,-20(fp)
 40005fc:	40002bc0 	call	40002bc <tjei_write>
		tjei_write(state, &len, sizeof(uint16_t), 1);
 4000600:	e0bff984 	addi	r2,fp,-26
 4000604:	01c00044 	movi	r7,1
 4000608:	01800084 	movi	r6,2
 400060c:	100b883a 	mov	r5,r2
 4000610:	e13ffb17 	ldw	r4,-20(fp)
 4000614:	40002bc0 	call	40002bc <tjei_write>
		tjei_write(state, &tc_th, sizeof(uint8_t), 1);
 4000618:	e0bffa04 	addi	r2,fp,-24
 400061c:	01c00044 	movi	r7,1
 4000620:	01800044 	movi	r6,1
 4000624:	100b883a 	mov	r5,r2
 4000628:	e13ffb17 	ldw	r4,-20(fp)
 400062c:	40002bc0 	call	40002bc <tjei_write>
		tjei_write(state, matrix_len, sizeof(uint8_t), 16);
 4000630:	01c00404 	movi	r7,16
 4000634:	01800044 	movi	r6,1
 4000638:	e17ffc17 	ldw	r5,-16(fp)
 400063c:	e13ffb17 	ldw	r4,-20(fp)
 4000640:	40002bc0 	call	40002bc <tjei_write>
		tjei_write(state, matrix_val, sizeof(uint8_t), (size_t)num_values);
 4000644:	e0bff717 	ldw	r2,-36(fp)
 4000648:	100f883a 	mov	r7,r2
 400064c:	01800044 	movi	r6,1
 4000650:	e17ffd17 	ldw	r5,-12(fp)
 4000654:	e13ffb17 	ldw	r4,-20(fp)
 4000658:	40002bc0 	call	40002bc <tjei_write>
	}
 400065c:	0001883a 	nop
 4000660:	e037883a 	mov	sp,fp
 4000664:	dfc00117 	ldw	ra,4(sp)
 4000668:	df000017 	ldw	fp,0(sp)
 400066c:	dec00204 	addi	sp,sp,8
 4000670:	f800283a 	ret

04000674 <tjei_huff_get_code_lengths>:
	//  Huffman deflation code.
	// ============================================================

	// Returns all code sizes from the BITS specification (JPEG C.3)
	static uint8_t* tjei_huff_get_code_lengths(uint8_t huffsize[/*256*/], uint8_t const* bits)
	{
 4000674:	defffa04 	addi	sp,sp,-24
 4000678:	df000515 	stw	fp,20(sp)
 400067c:	df000504 	addi	fp,sp,20
 4000680:	e13ffe15 	stw	r4,-8(fp)
 4000684:	e17fff15 	stw	r5,-4(fp)
		int k = 0;
 4000688:	e03ffb15 	stw	zero,-20(fp)
		for (int i = 0; i < 16; ++i) {
 400068c:	e03ffc15 	stw	zero,-16(fp)
 4000690:	00001c06 	br	4000704 <tjei_huff_get_code_lengths+0x90>
			for (int j = 0; j < bits[i]; ++j) {
 4000694:	e03ffd15 	stw	zero,-12(fp)
 4000698:	00000c06 	br	40006cc <tjei_huff_get_code_lengths+0x58>
				huffsize[k++] = (uint8_t)(i + 1);
 400069c:	e0bffb17 	ldw	r2,-20(fp)
 40006a0:	10c00044 	addi	r3,r2,1
 40006a4:	e0fffb15 	stw	r3,-20(fp)
 40006a8:	1007883a 	mov	r3,r2
 40006ac:	e0bffe17 	ldw	r2,-8(fp)
 40006b0:	10c5883a 	add	r2,r2,r3
 40006b4:	e0fffc17 	ldw	r3,-16(fp)
 40006b8:	18c00044 	addi	r3,r3,1
 40006bc:	10c00005 	stb	r3,0(r2)
	// Returns all code sizes from the BITS specification (JPEG C.3)
	static uint8_t* tjei_huff_get_code_lengths(uint8_t huffsize[/*256*/], uint8_t const* bits)
	{
		int k = 0;
		for (int i = 0; i < 16; ++i) {
			for (int j = 0; j < bits[i]; ++j) {
 40006c0:	e0bffd17 	ldw	r2,-12(fp)
 40006c4:	10800044 	addi	r2,r2,1
 40006c8:	e0bffd15 	stw	r2,-12(fp)
 40006cc:	e0bffc17 	ldw	r2,-16(fp)
 40006d0:	e0ffff17 	ldw	r3,-4(fp)
 40006d4:	1885883a 	add	r2,r3,r2
 40006d8:	10800003 	ldbu	r2,0(r2)
 40006dc:	10803fcc 	andi	r2,r2,255
 40006e0:	e0fffd17 	ldw	r3,-12(fp)
 40006e4:	18bfed16 	blt	r3,r2,400069c <__alt_data_end+0xfc00069c>
				huffsize[k++] = (uint8_t)(i + 1);
			}
			huffsize[k] = 0;
 40006e8:	e0bffb17 	ldw	r2,-20(fp)
 40006ec:	e0fffe17 	ldw	r3,-8(fp)
 40006f0:	1885883a 	add	r2,r3,r2
 40006f4:	10000005 	stb	zero,0(r2)

	// Returns all code sizes from the BITS specification (JPEG C.3)
	static uint8_t* tjei_huff_get_code_lengths(uint8_t huffsize[/*256*/], uint8_t const* bits)
	{
		int k = 0;
		for (int i = 0; i < 16; ++i) {
 40006f8:	e0bffc17 	ldw	r2,-16(fp)
 40006fc:	10800044 	addi	r2,r2,1
 4000700:	e0bffc15 	stw	r2,-16(fp)
 4000704:	e0bffc17 	ldw	r2,-16(fp)
 4000708:	10800410 	cmplti	r2,r2,16
 400070c:	103fe11e 	bne	r2,zero,4000694 <__alt_data_end+0xfc000694>
			for (int j = 0; j < bits[i]; ++j) {
				huffsize[k++] = (uint8_t)(i + 1);
			}
			huffsize[k] = 0;
		}
		return huffsize;
 4000710:	e0bffe17 	ldw	r2,-8(fp)
	}
 4000714:	e037883a 	mov	sp,fp
 4000718:	df000017 	ldw	fp,0(sp)
 400071c:	dec00104 	addi	sp,sp,4
 4000720:	f800283a 	ret

04000724 <tjei_huff_get_codes>:

	// Fills out the prefixes for each code.
	static uint16_t* tjei_huff_get_codes(uint16_t codes[], uint8_t* huffsize, int64_t count)
	{
 4000724:	defff704 	addi	sp,sp,-36
 4000728:	dfc00815 	stw	ra,32(sp)
 400072c:	df000715 	stw	fp,28(sp)
 4000730:	df000704 	addi	fp,sp,28
 4000734:	e13ffc15 	stw	r4,-16(fp)
 4000738:	e17ffd15 	stw	r5,-12(fp)
 400073c:	e1bffe15 	stw	r6,-8(fp)
 4000740:	e1ffff15 	stw	r7,-4(fp)
		uint16_t code = 0;
 4000744:	e03ff90d 	sth	zero,-28(fp)
		int k = 0;
 4000748:	e03ffa15 	stw	zero,-24(fp)
		uint8_t sz = huffsize[0];
 400074c:	e13ffd17 	ldw	r4,-12(fp)
 4000750:	21000003 	ldbu	r4,0(r4)
 4000754:	e13ffb05 	stb	r4,-20(fp)
		for (;;) {
			do {
				assert(k < count);
 4000758:	e13ffa17 	ldw	r4,-24(fp)
 400075c:	2005883a 	mov	r2,r4
 4000760:	2009d7fa 	srai	r4,r4,31
 4000764:	2007883a 	mov	r3,r4
 4000768:	e13fff17 	ldw	r4,-4(fp)
 400076c:	19000c16 	blt	r3,r4,40007a0 <tjei_huff_get_codes+0x7c>
 4000770:	e13fff17 	ldw	r4,-4(fp)
 4000774:	20c0021e 	bne	r4,r3,4000780 <tjei_huff_get_codes+0x5c>
 4000778:	e13ffe17 	ldw	r4,-8(fp)
 400077c:	11000836 	bltu	r2,r4,40007a0 <tjei_huff_get_codes+0x7c>
 4000780:	01c10074 	movhi	r7,1025
 4000784:	39c44504 	addi	r7,r7,4372
 4000788:	01810074 	movhi	r6,1025
 400078c:	31848604 	addi	r6,r6,4632
 4000790:	01407ac4 	movi	r5,491
 4000794:	01010074 	movhi	r4,1025
 4000798:	21043a04 	addi	r4,r4,4328
 400079c:	40088e00 	call	40088e0 <__assert_func>
				codes[k++] = code++;
 40007a0:	e13ffa17 	ldw	r4,-24(fp)
 40007a4:	21400044 	addi	r5,r4,1
 40007a8:	e17ffa15 	stw	r5,-24(fp)
 40007ac:	2109883a 	add	r4,r4,r4
 40007b0:	200b883a 	mov	r5,r4
 40007b4:	e13ffc17 	ldw	r4,-16(fp)
 40007b8:	214b883a 	add	r5,r4,r5
 40007bc:	e13ff90b 	ldhu	r4,-28(fp)
 40007c0:	21800044 	addi	r6,r4,1
 40007c4:	e1bff90d 	sth	r6,-28(fp)
 40007c8:	2900000d 	sth	r4,0(r5)
			} while (huffsize[k] == sz);
 40007cc:	e13ffa17 	ldw	r4,-24(fp)
 40007d0:	e17ffd17 	ldw	r5,-12(fp)
 40007d4:	2909883a 	add	r4,r5,r4
 40007d8:	21000003 	ldbu	r4,0(r4)
 40007dc:	21403fcc 	andi	r5,r4,255
 40007e0:	e13ffb03 	ldbu	r4,-20(fp)
 40007e4:	293fdc26 	beq	r5,r4,4000758 <__alt_data_end+0xfc000758>
			if (huffsize[k] == 0) {
 40007e8:	e13ffa17 	ldw	r4,-24(fp)
 40007ec:	e17ffd17 	ldw	r5,-12(fp)
 40007f0:	2909883a 	add	r4,r5,r4
 40007f4:	21000003 	ldbu	r4,0(r4)
 40007f8:	21003fcc 	andi	r4,r4,255
 40007fc:	2000021e 	bne	r4,zero,4000808 <tjei_huff_get_codes+0xe4>
				return codes;
 4000800:	e0bffc17 	ldw	r2,-16(fp)
 4000804:	00000e06 	br	4000840 <tjei_huff_get_codes+0x11c>
			}
			do {
				code = (uint16_t)(code << 1);
 4000808:	e13ff90b 	ldhu	r4,-28(fp)
 400080c:	2109883a 	add	r4,r4,r4
 4000810:	e13ff90d 	sth	r4,-28(fp)
				++sz;
 4000814:	e13ffb03 	ldbu	r4,-20(fp)
 4000818:	21000044 	addi	r4,r4,1
 400081c:	e13ffb05 	stb	r4,-20(fp)
			} while (huffsize[k] != sz);
 4000820:	e13ffa17 	ldw	r4,-24(fp)
 4000824:	e17ffd17 	ldw	r5,-12(fp)
 4000828:	2909883a 	add	r4,r5,r4
 400082c:	21000003 	ldbu	r4,0(r4)
 4000830:	21403fcc 	andi	r5,r4,255
 4000834:	e13ffb03 	ldbu	r4,-20(fp)
 4000838:	293ff31e 	bne	r5,r4,4000808 <__alt_data_end+0xfc000808>
		}
 400083c:	003fc606 	br	4000758 <__alt_data_end+0xfc000758>
	}
 4000840:	e037883a 	mov	sp,fp
 4000844:	dfc00117 	ldw	ra,4(sp)
 4000848:	df000017 	ldw	fp,0(sp)
 400084c:	dec00204 	addi	sp,sp,8
 4000850:	f800283a 	ret

04000854 <tjei_huff_get_extended>:
	static void tjei_huff_get_extended(uint8_t* out_ehuffsize,
		uint16_t* out_ehuffcode,
		uint8_t const* huffval,
		uint8_t* huffsize,
		uint16_t* huffcode, int64_t count)
	{
 4000854:	defff904 	addi	sp,sp,-28
 4000858:	df000615 	stw	fp,24(sp)
 400085c:	df000604 	addi	fp,sp,24
 4000860:	e13ffc15 	stw	r4,-16(fp)
 4000864:	e17ffd15 	stw	r5,-12(fp)
 4000868:	e1bffe15 	stw	r6,-8(fp)
 400086c:	e1ffff15 	stw	r7,-4(fp)
		int k = 0;
 4000870:	e03ffa15 	stw	zero,-24(fp)
		do {
			uint8_t val = huffval[k];
 4000874:	e13ffa17 	ldw	r4,-24(fp)
 4000878:	e17ffe17 	ldw	r5,-8(fp)
 400087c:	2909883a 	add	r4,r5,r4
 4000880:	21000003 	ldbu	r4,0(r4)
 4000884:	e13ffb05 	stb	r4,-20(fp)
			out_ehuffcode[val] = huffcode[k];
 4000888:	e13ffb03 	ldbu	r4,-20(fp)
 400088c:	2109883a 	add	r4,r4,r4
 4000890:	200b883a 	mov	r5,r4
 4000894:	e13ffd17 	ldw	r4,-12(fp)
 4000898:	214b883a 	add	r5,r4,r5
 400089c:	e13ffa17 	ldw	r4,-24(fp)
 40008a0:	2109883a 	add	r4,r4,r4
 40008a4:	200d883a 	mov	r6,r4
 40008a8:	e1000117 	ldw	r4,4(fp)
 40008ac:	2189883a 	add	r4,r4,r6
 40008b0:	2100000b 	ldhu	r4,0(r4)
 40008b4:	2900000d 	sth	r4,0(r5)
			out_ehuffsize[val] = huffsize[k];
 40008b8:	e13ffb03 	ldbu	r4,-20(fp)
 40008bc:	e17ffc17 	ldw	r5,-16(fp)
 40008c0:	2909883a 	add	r4,r5,r4
 40008c4:	e17ffa17 	ldw	r5,-24(fp)
 40008c8:	e1bfff17 	ldw	r6,-4(fp)
 40008cc:	314b883a 	add	r5,r6,r5
 40008d0:	29400003 	ldbu	r5,0(r5)
 40008d4:	21400005 	stb	r5,0(r4)
			k++;
 40008d8:	e13ffa17 	ldw	r4,-24(fp)
 40008dc:	21000044 	addi	r4,r4,1
 40008e0:	e13ffa15 	stw	r4,-24(fp)
		} while (k < count);
 40008e4:	e13ffa17 	ldw	r4,-24(fp)
 40008e8:	2005883a 	mov	r2,r4
 40008ec:	2009d7fa 	srai	r4,r4,31
 40008f0:	2007883a 	mov	r3,r4
 40008f4:	e1000317 	ldw	r4,12(fp)
 40008f8:	193fde16 	blt	r3,r4,4000874 <__alt_data_end+0xfc000874>
 40008fc:	e1000317 	ldw	r4,12(fp)
 4000900:	20c0021e 	bne	r4,r3,400090c <tjei_huff_get_extended+0xb8>
 4000904:	e1000217 	ldw	r4,8(fp)
 4000908:	113fda36 	bltu	r2,r4,4000874 <__alt_data_end+0xfc000874>
	}
 400090c:	0001883a 	nop
 4000910:	e037883a 	mov	sp,fp
 4000914:	df000017 	ldw	fp,0(sp)
 4000918:	dec00104 	addi	sp,sp,4
 400091c:	f800283a 	ret

04000920 <tjei_calculate_variable_length_int>:

	// Returns:
	//  out[1] : number of bits
	//  out[0] : bits
	TJEI_FORCE_INLINE void tjei_calculate_variable_length_int(int value, uint16_t out[2])
	{
 4000920:	defffc04 	addi	sp,sp,-16
 4000924:	df000315 	stw	fp,12(sp)
 4000928:	df000304 	addi	fp,sp,12
 400092c:	e13ffe15 	stw	r4,-8(fp)
 4000930:	e17fff15 	stw	r5,-4(fp)
		int abs_val = value;
 4000934:	e0bffe17 	ldw	r2,-8(fp)
 4000938:	e0bffd15 	stw	r2,-12(fp)
		if (value < 0) {
 400093c:	e0bffe17 	ldw	r2,-8(fp)
 4000940:	1000060e 	bge	r2,zero,400095c <tjei_calculate_variable_length_int+0x3c>
			abs_val = -abs_val;
 4000944:	e0bffd17 	ldw	r2,-12(fp)
 4000948:	0085c83a 	sub	r2,zero,r2
 400094c:	e0bffd15 	stw	r2,-12(fp)
			--value;
 4000950:	e0bffe17 	ldw	r2,-8(fp)
 4000954:	10bfffc4 	addi	r2,r2,-1
 4000958:	e0bffe15 	stw	r2,-8(fp)
		}
		out[1] = 1;
 400095c:	e0bfff17 	ldw	r2,-4(fp)
 4000960:	10800084 	addi	r2,r2,2
 4000964:	00c00044 	movi	r3,1
 4000968:	10c0000d 	sth	r3,0(r2)
		while (abs_val >>= 1) {
 400096c:	00000506 	br	4000984 <tjei_calculate_variable_length_int+0x64>
			++out[1];
 4000970:	e0bfff17 	ldw	r2,-4(fp)
 4000974:	10800084 	addi	r2,r2,2
 4000978:	10c0000b 	ldhu	r3,0(r2)
 400097c:	18c00044 	addi	r3,r3,1
 4000980:	10c0000d 	sth	r3,0(r2)
		if (value < 0) {
			abs_val = -abs_val;
			--value;
		}
		out[1] = 1;
		while (abs_val >>= 1) {
 4000984:	e0bffd17 	ldw	r2,-12(fp)
 4000988:	1005d07a 	srai	r2,r2,1
 400098c:	e0bffd15 	stw	r2,-12(fp)
 4000990:	e0bffd17 	ldw	r2,-12(fp)
 4000994:	103ff61e 	bne	r2,zero,4000970 <__alt_data_end+0xfc000970>
			++out[1];
		}
		out[0] = (uint16_t)(value & ((1 << out[1]) - 1));
 4000998:	e0bffe17 	ldw	r2,-8(fp)
 400099c:	1009883a 	mov	r4,r2
 40009a0:	e0bfff17 	ldw	r2,-4(fp)
 40009a4:	10800084 	addi	r2,r2,2
 40009a8:	1080000b 	ldhu	r2,0(r2)
 40009ac:	10bfffcc 	andi	r2,r2,65535
 40009b0:	00c00044 	movi	r3,1
 40009b4:	1884983a 	sll	r2,r3,r2
 40009b8:	10bfffc4 	addi	r2,r2,-1
 40009bc:	2084703a 	and	r2,r4,r2
 40009c0:	1007883a 	mov	r3,r2
 40009c4:	e0bfff17 	ldw	r2,-4(fp)
 40009c8:	10c0000d 	sth	r3,0(r2)
	}
 40009cc:	0001883a 	nop
 40009d0:	e037883a 	mov	sp,fp
 40009d4:	df000017 	ldw	fp,0(sp)
 40009d8:	dec00104 	addi	sp,sp,4
 40009dc:	f800283a 	ret

040009e0 <tjei_write_bits>:

	// Write bits to file.
	TJEI_FORCE_INLINE void tjei_write_bits(TJEState* state,
		uint32_t* bitbuffer, uint32_t* location,
		uint16_t num_bits, uint16_t bits)
	{
 40009e0:	defff704 	addi	sp,sp,-36
 40009e4:	dfc00815 	stw	ra,32(sp)
 40009e8:	df000715 	stw	fp,28(sp)
 40009ec:	df000704 	addi	fp,sp,28
 40009f0:	e13ffb15 	stw	r4,-20(fp)
 40009f4:	e17ffc15 	stw	r5,-16(fp)
 40009f8:	e1bffd15 	stw	r6,-12(fp)
 40009fc:	3807883a 	mov	r3,r7
 4000a00:	e0800217 	ldw	r2,8(fp)
 4000a04:	e0fffe0d 	sth	r3,-8(fp)
 4000a08:	e0bfff0d 	sth	r2,-4(fp)
		// This call pushes to the bitbuffer and saves the location. Data is pushed
		// from most significant to less significant.
		// When we can write a full byte, we write a byte and shift.

		// Push the stack.
		uint32_t nloc = *location + num_bits;
 4000a0c:	e0bffd17 	ldw	r2,-12(fp)
 4000a10:	10c00017 	ldw	r3,0(r2)
 4000a14:	e0bffe0b 	ldhu	r2,-8(fp)
 4000a18:	1885883a 	add	r2,r3,r2
 4000a1c:	e0bff915 	stw	r2,-28(fp)
		*bitbuffer |= (uint32_t)(bits << (32 - nloc));
 4000a20:	e0bffc17 	ldw	r2,-16(fp)
 4000a24:	10800017 	ldw	r2,0(r2)
 4000a28:	e13fff0b 	ldhu	r4,-4(fp)
 4000a2c:	01400804 	movi	r5,32
 4000a30:	e0fff917 	ldw	r3,-28(fp)
 4000a34:	28c7c83a 	sub	r3,r5,r3
 4000a38:	20c6983a 	sll	r3,r4,r3
 4000a3c:	10c6b03a 	or	r3,r2,r3
 4000a40:	e0bffc17 	ldw	r2,-16(fp)
 4000a44:	10c00015 	stw	r3,0(r2)
		*location = nloc;
 4000a48:	e0bffd17 	ldw	r2,-12(fp)
 4000a4c:	e0fff917 	ldw	r3,-28(fp)
 4000a50:	10c00015 	stw	r3,0(r2)
		while (*location >= 8) {
 4000a54:	00001f06 	br	4000ad4 <tjei_write_bits+0xf4>
			// Grab the most significant byte.
			uint8_t c = (uint8_t)((*bitbuffer) >> 24);
 4000a58:	e0bffc17 	ldw	r2,-16(fp)
 4000a5c:	10800017 	ldw	r2,0(r2)
 4000a60:	1004d63a 	srli	r2,r2,24
 4000a64:	e0bffa05 	stb	r2,-24(fp)
			// Write it to file.
			tjei_write(state, &c, 1, 1);
 4000a68:	e0bffa04 	addi	r2,fp,-24
 4000a6c:	01c00044 	movi	r7,1
 4000a70:	01800044 	movi	r6,1
 4000a74:	100b883a 	mov	r5,r2
 4000a78:	e13ffb17 	ldw	r4,-20(fp)
 4000a7c:	40002bc0 	call	40002bc <tjei_write>
			if (c == 0xff) {
 4000a80:	e0bffa03 	ldbu	r2,-24(fp)
 4000a84:	10803fcc 	andi	r2,r2,255
 4000a88:	10803fd8 	cmpnei	r2,r2,255
 4000a8c:	1000071e 	bne	r2,zero,4000aac <tjei_write_bits+0xcc>
				// Special case: tell JPEG this is not a marker.
				char z = 0;
 4000a90:	e03ffa45 	stb	zero,-23(fp)
				tjei_write(state, &z, 1, 1);
 4000a94:	e0bffa44 	addi	r2,fp,-23
 4000a98:	01c00044 	movi	r7,1
 4000a9c:	01800044 	movi	r6,1
 4000aa0:	100b883a 	mov	r5,r2
 4000aa4:	e13ffb17 	ldw	r4,-20(fp)
 4000aa8:	40002bc0 	call	40002bc <tjei_write>
			}
			// Pop the stack.
			*bitbuffer <<= 8;
 4000aac:	e0bffc17 	ldw	r2,-16(fp)
 4000ab0:	10800017 	ldw	r2,0(r2)
 4000ab4:	1006923a 	slli	r3,r2,8
 4000ab8:	e0bffc17 	ldw	r2,-16(fp)
 4000abc:	10c00015 	stw	r3,0(r2)
			*location -= 8;
 4000ac0:	e0bffd17 	ldw	r2,-12(fp)
 4000ac4:	10800017 	ldw	r2,0(r2)
 4000ac8:	10fffe04 	addi	r3,r2,-8
 4000acc:	e0bffd17 	ldw	r2,-12(fp)
 4000ad0:	10c00015 	stw	r3,0(r2)

		// Push the stack.
		uint32_t nloc = *location + num_bits;
		*bitbuffer |= (uint32_t)(bits << (32 - nloc));
		*location = nloc;
		while (*location >= 8) {
 4000ad4:	e0bffd17 	ldw	r2,-12(fp)
 4000ad8:	10800017 	ldw	r2,0(r2)
 4000adc:	10800228 	cmpgeui	r2,r2,8
 4000ae0:	103fdd1e 	bne	r2,zero,4000a58 <__alt_data_end+0xfc000a58>
			}
			// Pop the stack.
			*bitbuffer <<= 8;
			*location -= 8;
		}
	}
 4000ae4:	0001883a 	nop
 4000ae8:	e037883a 	mov	sp,fp
 4000aec:	dfc00117 	ldw	ra,4(sp)
 4000af0:	df000017 	ldw	fp,0(sp)
 4000af4:	dec00204 	addi	sp,sp,8
 4000af8:	f800283a 	ret

04000afc <tjei_fdct>:
	//  Japanese, but the algorithm is described in the Pennebaker & Mitchell
	//  JPEG textbook (see REFERENCES section in file README).  The following code
	//  is based directly on figure 4-8 in P&M.
	//
	static void tjei_fdct(float* data)
	{
 4000afc:	deffe704 	addi	sp,sp,-100
 4000b00:	dfc01815 	stw	ra,96(sp)
 4000b04:	df001715 	stw	fp,92(sp)
 4000b08:	dc001615 	stw	r16,88(sp)
 4000b0c:	df001704 	addi	fp,sp,92
 4000b10:	e13ffe15 	stw	r4,-8(fp)
		float* dataptr;
		int ctr;

		/* Pass 1: process rows. */

		dataptr = data;
 4000b14:	e0bffe17 	ldw	r2,-8(fp)
 4000b18:	e0bfe915 	stw	r2,-92(fp)
		for (ctr = 7; ctr >= 0; ctr--) {
 4000b1c:	008001c4 	movi	r2,7
 4000b20:	e0bfea15 	stw	r2,-88(fp)
 4000b24:	0000fa06 	br	4000f10 <tjei_fdct+0x414>
			tmp0 = dataptr[0] + dataptr[7];
 4000b28:	e0bfe917 	ldw	r2,-92(fp)
 4000b2c:	10c00017 	ldw	r3,0(r2)
 4000b30:	e0bfe917 	ldw	r2,-92(fp)
 4000b34:	10800704 	addi	r2,r2,28
 4000b38:	11000017 	ldw	r4,0(r2)
 4000b3c:	200b883a 	mov	r5,r4
 4000b40:	1809883a 	mov	r4,r3
 4000b44:	40048d80 	call	40048d8 <__addsf3>
 4000b48:	1007883a 	mov	r3,r2
 4000b4c:	e0ffeb15 	stw	r3,-84(fp)
			tmp7 = dataptr[0] - dataptr[7];
 4000b50:	e0bfe917 	ldw	r2,-92(fp)
 4000b54:	10c00017 	ldw	r3,0(r2)
 4000b58:	e0bfe917 	ldw	r2,-92(fp)
 4000b5c:	10800704 	addi	r2,r2,28
 4000b60:	11000017 	ldw	r4,0(r2)
 4000b64:	200b883a 	mov	r5,r4
 4000b68:	1809883a 	mov	r4,r3
 4000b6c:	40057940 	call	4005794 <__subsf3>
 4000b70:	1007883a 	mov	r3,r2
 4000b74:	e0ffec15 	stw	r3,-80(fp)
			tmp1 = dataptr[1] + dataptr[6];
 4000b78:	e0bfe917 	ldw	r2,-92(fp)
 4000b7c:	10800104 	addi	r2,r2,4
 4000b80:	10c00017 	ldw	r3,0(r2)
 4000b84:	e0bfe917 	ldw	r2,-92(fp)
 4000b88:	10800604 	addi	r2,r2,24
 4000b8c:	11000017 	ldw	r4,0(r2)
 4000b90:	200b883a 	mov	r5,r4
 4000b94:	1809883a 	mov	r4,r3
 4000b98:	40048d80 	call	40048d8 <__addsf3>
 4000b9c:	1007883a 	mov	r3,r2
 4000ba0:	e0ffed15 	stw	r3,-76(fp)
			tmp6 = dataptr[1] - dataptr[6];
 4000ba4:	e0bfe917 	ldw	r2,-92(fp)
 4000ba8:	10800104 	addi	r2,r2,4
 4000bac:	10c00017 	ldw	r3,0(r2)
 4000bb0:	e0bfe917 	ldw	r2,-92(fp)
 4000bb4:	10800604 	addi	r2,r2,24
 4000bb8:	11000017 	ldw	r4,0(r2)
 4000bbc:	200b883a 	mov	r5,r4
 4000bc0:	1809883a 	mov	r4,r3
 4000bc4:	40057940 	call	4005794 <__subsf3>
 4000bc8:	1007883a 	mov	r3,r2
 4000bcc:	e0ffee15 	stw	r3,-72(fp)
			tmp2 = dataptr[2] + dataptr[5];
 4000bd0:	e0bfe917 	ldw	r2,-92(fp)
 4000bd4:	10800204 	addi	r2,r2,8
 4000bd8:	10c00017 	ldw	r3,0(r2)
 4000bdc:	e0bfe917 	ldw	r2,-92(fp)
 4000be0:	10800504 	addi	r2,r2,20
 4000be4:	11000017 	ldw	r4,0(r2)
 4000be8:	200b883a 	mov	r5,r4
 4000bec:	1809883a 	mov	r4,r3
 4000bf0:	40048d80 	call	40048d8 <__addsf3>
 4000bf4:	1007883a 	mov	r3,r2
 4000bf8:	e0ffef15 	stw	r3,-68(fp)
			tmp5 = dataptr[2] - dataptr[5];
 4000bfc:	e0bfe917 	ldw	r2,-92(fp)
 4000c00:	10800204 	addi	r2,r2,8
 4000c04:	10c00017 	ldw	r3,0(r2)
 4000c08:	e0bfe917 	ldw	r2,-92(fp)
 4000c0c:	10800504 	addi	r2,r2,20
 4000c10:	11000017 	ldw	r4,0(r2)
 4000c14:	200b883a 	mov	r5,r4
 4000c18:	1809883a 	mov	r4,r3
 4000c1c:	40057940 	call	4005794 <__subsf3>
 4000c20:	1007883a 	mov	r3,r2
 4000c24:	e0fff015 	stw	r3,-64(fp)
			tmp3 = dataptr[3] + dataptr[4];
 4000c28:	e0bfe917 	ldw	r2,-92(fp)
 4000c2c:	10800304 	addi	r2,r2,12
 4000c30:	10c00017 	ldw	r3,0(r2)
 4000c34:	e0bfe917 	ldw	r2,-92(fp)
 4000c38:	10800404 	addi	r2,r2,16
 4000c3c:	11000017 	ldw	r4,0(r2)
 4000c40:	200b883a 	mov	r5,r4
 4000c44:	1809883a 	mov	r4,r3
 4000c48:	40048d80 	call	40048d8 <__addsf3>
 4000c4c:	1007883a 	mov	r3,r2
 4000c50:	e0fff115 	stw	r3,-60(fp)
			tmp4 = dataptr[3] - dataptr[4];
 4000c54:	e0bfe917 	ldw	r2,-92(fp)
 4000c58:	10800304 	addi	r2,r2,12
 4000c5c:	10c00017 	ldw	r3,0(r2)
 4000c60:	e0bfe917 	ldw	r2,-92(fp)
 4000c64:	10800404 	addi	r2,r2,16
 4000c68:	11000017 	ldw	r4,0(r2)
 4000c6c:	200b883a 	mov	r5,r4
 4000c70:	1809883a 	mov	r4,r3
 4000c74:	40057940 	call	4005794 <__subsf3>
 4000c78:	1007883a 	mov	r3,r2
 4000c7c:	e0fff215 	stw	r3,-56(fp)

			/* Even part */

			tmp10 = tmp0 + tmp3;    /* phase 2 */
 4000c80:	e17ff117 	ldw	r5,-60(fp)
 4000c84:	e13feb17 	ldw	r4,-84(fp)
 4000c88:	40048d80 	call	40048d8 <__addsf3>
 4000c8c:	1007883a 	mov	r3,r2
 4000c90:	e0fff315 	stw	r3,-52(fp)
			tmp13 = tmp0 - tmp3;
 4000c94:	e17ff117 	ldw	r5,-60(fp)
 4000c98:	e13feb17 	ldw	r4,-84(fp)
 4000c9c:	40057940 	call	4005794 <__subsf3>
 4000ca0:	1007883a 	mov	r3,r2
 4000ca4:	e0fff415 	stw	r3,-48(fp)
			tmp11 = tmp1 + tmp2;
 4000ca8:	e17fef17 	ldw	r5,-68(fp)
 4000cac:	e13fed17 	ldw	r4,-76(fp)
 4000cb0:	40048d80 	call	40048d8 <__addsf3>
 4000cb4:	1007883a 	mov	r3,r2
 4000cb8:	e0fff515 	stw	r3,-44(fp)
			tmp12 = tmp1 - tmp2;
 4000cbc:	e17fef17 	ldw	r5,-68(fp)
 4000cc0:	e13fed17 	ldw	r4,-76(fp)
 4000cc4:	40057940 	call	4005794 <__subsf3>
 4000cc8:	1007883a 	mov	r3,r2
 4000ccc:	e0fff615 	stw	r3,-40(fp)

			dataptr[0] = tmp10 + tmp11; /* phase 3 */
 4000cd0:	e17ff517 	ldw	r5,-44(fp)
 4000cd4:	e13ff317 	ldw	r4,-52(fp)
 4000cd8:	40048d80 	call	40048d8 <__addsf3>
 4000cdc:	1009883a 	mov	r4,r2
 4000ce0:	2007883a 	mov	r3,r4
 4000ce4:	e0bfe917 	ldw	r2,-92(fp)
 4000ce8:	10c00015 	stw	r3,0(r2)
			dataptr[4] = tmp10 - tmp11;
 4000cec:	e0bfe917 	ldw	r2,-92(fp)
 4000cf0:	14000404 	addi	r16,r2,16
 4000cf4:	e17ff517 	ldw	r5,-44(fp)
 4000cf8:	e13ff317 	ldw	r4,-52(fp)
 4000cfc:	40057940 	call	4005794 <__subsf3>
 4000d00:	1007883a 	mov	r3,r2
 4000d04:	1805883a 	mov	r2,r3
 4000d08:	80800015 	stw	r2,0(r16)

			z1 = (tmp12 + tmp13) * ((float)0.707106781); /* c4 */
 4000d0c:	e17ff417 	ldw	r5,-48(fp)
 4000d10:	e13ff617 	ldw	r4,-40(fp)
 4000d14:	40048d80 	call	40048d8 <__addsf3>
 4000d18:	1007883a 	mov	r3,r2
 4000d1c:	1805883a 	mov	r2,r3
 4000d20:	014fcd74 	movhi	r5,16181
 4000d24:	29413cc4 	addi	r5,r5,1267
 4000d28:	1009883a 	mov	r4,r2
 4000d2c:	40053640 	call	4005364 <__mulsf3>
 4000d30:	1007883a 	mov	r3,r2
 4000d34:	e0fff715 	stw	r3,-36(fp)
			dataptr[2] = tmp13 + z1;    /* phase 5 */
 4000d38:	e0bfe917 	ldw	r2,-92(fp)
 4000d3c:	14000204 	addi	r16,r2,8
 4000d40:	e17ff717 	ldw	r5,-36(fp)
 4000d44:	e13ff417 	ldw	r4,-48(fp)
 4000d48:	40048d80 	call	40048d8 <__addsf3>
 4000d4c:	1007883a 	mov	r3,r2
 4000d50:	1805883a 	mov	r2,r3
 4000d54:	80800015 	stw	r2,0(r16)
			dataptr[6] = tmp13 - z1;
 4000d58:	e0bfe917 	ldw	r2,-92(fp)
 4000d5c:	14000604 	addi	r16,r2,24
 4000d60:	e17ff717 	ldw	r5,-36(fp)
 4000d64:	e13ff417 	ldw	r4,-48(fp)
 4000d68:	40057940 	call	4005794 <__subsf3>
 4000d6c:	1007883a 	mov	r3,r2
 4000d70:	1805883a 	mov	r2,r3
 4000d74:	80800015 	stw	r2,0(r16)

			/* Odd part */

			tmp10 = tmp4 + tmp5;    /* phase 2 */
 4000d78:	e17ff017 	ldw	r5,-64(fp)
 4000d7c:	e13ff217 	ldw	r4,-56(fp)
 4000d80:	40048d80 	call	40048d8 <__addsf3>
 4000d84:	1007883a 	mov	r3,r2
 4000d88:	e0fff315 	stw	r3,-52(fp)
			tmp11 = tmp5 + tmp6;
 4000d8c:	e17fee17 	ldw	r5,-72(fp)
 4000d90:	e13ff017 	ldw	r4,-64(fp)
 4000d94:	40048d80 	call	40048d8 <__addsf3>
 4000d98:	1007883a 	mov	r3,r2
 4000d9c:	e0fff515 	stw	r3,-44(fp)
			tmp12 = tmp6 + tmp7;
 4000da0:	e17fec17 	ldw	r5,-80(fp)
 4000da4:	e13fee17 	ldw	r4,-72(fp)
 4000da8:	40048d80 	call	40048d8 <__addsf3>
 4000dac:	1007883a 	mov	r3,r2
 4000db0:	e0fff615 	stw	r3,-40(fp)

			/* The rotator is modified from fig 4-8 to avoid extra negations. */
			z5 = (tmp10 - tmp12) * ((float)0.382683433); /* c6 */
 4000db4:	e17ff617 	ldw	r5,-40(fp)
 4000db8:	e13ff317 	ldw	r4,-52(fp)
 4000dbc:	40057940 	call	4005794 <__subsf3>
 4000dc0:	1007883a 	mov	r3,r2
 4000dc4:	1805883a 	mov	r2,r3
 4000dc8:	014fb134 	movhi	r5,16068
 4000dcc:	297bc544 	addi	r5,r5,-4331
 4000dd0:	1009883a 	mov	r4,r2
 4000dd4:	40053640 	call	4005364 <__mulsf3>
 4000dd8:	1007883a 	mov	r3,r2
 4000ddc:	e0fff815 	stw	r3,-32(fp)
			z2 = ((float)0.541196100) * tmp10 + z5; /* c2-c6 */
 4000de0:	014fc2f4 	movhi	r5,16139
 4000de4:	2962f504 	addi	r5,r5,-29740
 4000de8:	e13ff317 	ldw	r4,-52(fp)
 4000dec:	40053640 	call	4005364 <__mulsf3>
 4000df0:	1007883a 	mov	r3,r2
 4000df4:	1805883a 	mov	r2,r3
 4000df8:	e17ff817 	ldw	r5,-32(fp)
 4000dfc:	1009883a 	mov	r4,r2
 4000e00:	40048d80 	call	40048d8 <__addsf3>
 4000e04:	1007883a 	mov	r3,r2
 4000e08:	e0fff915 	stw	r3,-28(fp)
			z4 = ((float)1.306562965) * tmp12 + z5; /* c2+c6 */
 4000e0c:	014fe9f4 	movhi	r5,16295
 4000e10:	294f5d44 	addi	r5,r5,15733
 4000e14:	e13ff617 	ldw	r4,-40(fp)
 4000e18:	40053640 	call	4005364 <__mulsf3>
 4000e1c:	1007883a 	mov	r3,r2
 4000e20:	1805883a 	mov	r2,r3
 4000e24:	e17ff817 	ldw	r5,-32(fp)
 4000e28:	1009883a 	mov	r4,r2
 4000e2c:	40048d80 	call	40048d8 <__addsf3>
 4000e30:	1007883a 	mov	r3,r2
 4000e34:	e0fffa15 	stw	r3,-24(fp)
			z3 = tmp11 * ((float)0.707106781); /* c4 */
 4000e38:	014fcd74 	movhi	r5,16181
 4000e3c:	29413cc4 	addi	r5,r5,1267
 4000e40:	e13ff517 	ldw	r4,-44(fp)
 4000e44:	40053640 	call	4005364 <__mulsf3>
 4000e48:	1007883a 	mov	r3,r2
 4000e4c:	e0fffb15 	stw	r3,-20(fp)

			z11 = tmp7 + z3;        /* phase 5 */
 4000e50:	e17ffb17 	ldw	r5,-20(fp)
 4000e54:	e13fec17 	ldw	r4,-80(fp)
 4000e58:	40048d80 	call	40048d8 <__addsf3>
 4000e5c:	1007883a 	mov	r3,r2
 4000e60:	e0fffc15 	stw	r3,-16(fp)
			z13 = tmp7 - z3;
 4000e64:	e17ffb17 	ldw	r5,-20(fp)
 4000e68:	e13fec17 	ldw	r4,-80(fp)
 4000e6c:	40057940 	call	4005794 <__subsf3>
 4000e70:	1007883a 	mov	r3,r2
 4000e74:	e0fffd15 	stw	r3,-12(fp)

			dataptr[5] = z13 + z2;  /* phase 6 */
 4000e78:	e0bfe917 	ldw	r2,-92(fp)
 4000e7c:	14000504 	addi	r16,r2,20
 4000e80:	e17ff917 	ldw	r5,-28(fp)
 4000e84:	e13ffd17 	ldw	r4,-12(fp)
 4000e88:	40048d80 	call	40048d8 <__addsf3>
 4000e8c:	1007883a 	mov	r3,r2
 4000e90:	1805883a 	mov	r2,r3
 4000e94:	80800015 	stw	r2,0(r16)
			dataptr[3] = z13 - z2;
 4000e98:	e0bfe917 	ldw	r2,-92(fp)
 4000e9c:	14000304 	addi	r16,r2,12
 4000ea0:	e17ff917 	ldw	r5,-28(fp)
 4000ea4:	e13ffd17 	ldw	r4,-12(fp)
 4000ea8:	40057940 	call	4005794 <__subsf3>
 4000eac:	1007883a 	mov	r3,r2
 4000eb0:	1805883a 	mov	r2,r3
 4000eb4:	80800015 	stw	r2,0(r16)
			dataptr[1] = z11 + z4;
 4000eb8:	e0bfe917 	ldw	r2,-92(fp)
 4000ebc:	14000104 	addi	r16,r2,4
 4000ec0:	e17ffa17 	ldw	r5,-24(fp)
 4000ec4:	e13ffc17 	ldw	r4,-16(fp)
 4000ec8:	40048d80 	call	40048d8 <__addsf3>
 4000ecc:	1007883a 	mov	r3,r2
 4000ed0:	1805883a 	mov	r2,r3
 4000ed4:	80800015 	stw	r2,0(r16)
			dataptr[7] = z11 - z4;
 4000ed8:	e0bfe917 	ldw	r2,-92(fp)
 4000edc:	14000704 	addi	r16,r2,28
 4000ee0:	e17ffa17 	ldw	r5,-24(fp)
 4000ee4:	e13ffc17 	ldw	r4,-16(fp)
 4000ee8:	40057940 	call	4005794 <__subsf3>
 4000eec:	1007883a 	mov	r3,r2
 4000ef0:	1805883a 	mov	r2,r3
 4000ef4:	80800015 	stw	r2,0(r16)

			dataptr += 8;     /* advance pointer to next row */
 4000ef8:	e0bfe917 	ldw	r2,-92(fp)
 4000efc:	10800804 	addi	r2,r2,32
 4000f00:	e0bfe915 	stw	r2,-92(fp)
		int ctr;

		/* Pass 1: process rows. */

		dataptr = data;
		for (ctr = 7; ctr >= 0; ctr--) {
 4000f04:	e0bfea17 	ldw	r2,-88(fp)
 4000f08:	10bfffc4 	addi	r2,r2,-1
 4000f0c:	e0bfea15 	stw	r2,-88(fp)
 4000f10:	e0bfea17 	ldw	r2,-88(fp)
 4000f14:	103f040e 	bge	r2,zero,4000b28 <__alt_data_end+0xfc000b28>
			dataptr += 8;     /* advance pointer to next row */
		}

		/* Pass 2: process columns. */

		dataptr = data;
 4000f18:	e0bffe17 	ldw	r2,-8(fp)
 4000f1c:	e0bfe915 	stw	r2,-92(fp)
		for (ctr = 8 - 1; ctr >= 0; ctr--) {
 4000f20:	008001c4 	movi	r2,7
 4000f24:	e0bfea15 	stw	r2,-88(fp)
 4000f28:	0000fa06 	br	4001314 <tjei_fdct+0x818>
			tmp0 = dataptr[8 * 0] + dataptr[8 * 7];
 4000f2c:	e0bfe917 	ldw	r2,-92(fp)
 4000f30:	10c00017 	ldw	r3,0(r2)
 4000f34:	e0bfe917 	ldw	r2,-92(fp)
 4000f38:	10803804 	addi	r2,r2,224
 4000f3c:	11000017 	ldw	r4,0(r2)
 4000f40:	200b883a 	mov	r5,r4
 4000f44:	1809883a 	mov	r4,r3
 4000f48:	40048d80 	call	40048d8 <__addsf3>
 4000f4c:	1007883a 	mov	r3,r2
 4000f50:	e0ffeb15 	stw	r3,-84(fp)
			tmp7 = dataptr[8 * 0] - dataptr[8 * 7];
 4000f54:	e0bfe917 	ldw	r2,-92(fp)
 4000f58:	10c00017 	ldw	r3,0(r2)
 4000f5c:	e0bfe917 	ldw	r2,-92(fp)
 4000f60:	10803804 	addi	r2,r2,224
 4000f64:	11000017 	ldw	r4,0(r2)
 4000f68:	200b883a 	mov	r5,r4
 4000f6c:	1809883a 	mov	r4,r3
 4000f70:	40057940 	call	4005794 <__subsf3>
 4000f74:	1007883a 	mov	r3,r2
 4000f78:	e0ffec15 	stw	r3,-80(fp)
			tmp1 = dataptr[8 * 1] + dataptr[8 * 6];
 4000f7c:	e0bfe917 	ldw	r2,-92(fp)
 4000f80:	10800804 	addi	r2,r2,32
 4000f84:	10c00017 	ldw	r3,0(r2)
 4000f88:	e0bfe917 	ldw	r2,-92(fp)
 4000f8c:	10803004 	addi	r2,r2,192
 4000f90:	11000017 	ldw	r4,0(r2)
 4000f94:	200b883a 	mov	r5,r4
 4000f98:	1809883a 	mov	r4,r3
 4000f9c:	40048d80 	call	40048d8 <__addsf3>
 4000fa0:	1007883a 	mov	r3,r2
 4000fa4:	e0ffed15 	stw	r3,-76(fp)
			tmp6 = dataptr[8 * 1] - dataptr[8 * 6];
 4000fa8:	e0bfe917 	ldw	r2,-92(fp)
 4000fac:	10800804 	addi	r2,r2,32
 4000fb0:	10c00017 	ldw	r3,0(r2)
 4000fb4:	e0bfe917 	ldw	r2,-92(fp)
 4000fb8:	10803004 	addi	r2,r2,192
 4000fbc:	11000017 	ldw	r4,0(r2)
 4000fc0:	200b883a 	mov	r5,r4
 4000fc4:	1809883a 	mov	r4,r3
 4000fc8:	40057940 	call	4005794 <__subsf3>
 4000fcc:	1007883a 	mov	r3,r2
 4000fd0:	e0ffee15 	stw	r3,-72(fp)
			tmp2 = dataptr[8 * 2] + dataptr[8 * 5];
 4000fd4:	e0bfe917 	ldw	r2,-92(fp)
 4000fd8:	10801004 	addi	r2,r2,64
 4000fdc:	10c00017 	ldw	r3,0(r2)
 4000fe0:	e0bfe917 	ldw	r2,-92(fp)
 4000fe4:	10802804 	addi	r2,r2,160
 4000fe8:	11000017 	ldw	r4,0(r2)
 4000fec:	200b883a 	mov	r5,r4
 4000ff0:	1809883a 	mov	r4,r3
 4000ff4:	40048d80 	call	40048d8 <__addsf3>
 4000ff8:	1007883a 	mov	r3,r2
 4000ffc:	e0ffef15 	stw	r3,-68(fp)
			tmp5 = dataptr[8 * 2] - dataptr[8 * 5];
 4001000:	e0bfe917 	ldw	r2,-92(fp)
 4001004:	10801004 	addi	r2,r2,64
 4001008:	10c00017 	ldw	r3,0(r2)
 400100c:	e0bfe917 	ldw	r2,-92(fp)
 4001010:	10802804 	addi	r2,r2,160
 4001014:	11000017 	ldw	r4,0(r2)
 4001018:	200b883a 	mov	r5,r4
 400101c:	1809883a 	mov	r4,r3
 4001020:	40057940 	call	4005794 <__subsf3>
 4001024:	1007883a 	mov	r3,r2
 4001028:	e0fff015 	stw	r3,-64(fp)
			tmp3 = dataptr[8 * 3] + dataptr[8 * 4];
 400102c:	e0bfe917 	ldw	r2,-92(fp)
 4001030:	10801804 	addi	r2,r2,96
 4001034:	10c00017 	ldw	r3,0(r2)
 4001038:	e0bfe917 	ldw	r2,-92(fp)
 400103c:	10802004 	addi	r2,r2,128
 4001040:	11000017 	ldw	r4,0(r2)
 4001044:	200b883a 	mov	r5,r4
 4001048:	1809883a 	mov	r4,r3
 400104c:	40048d80 	call	40048d8 <__addsf3>
 4001050:	1007883a 	mov	r3,r2
 4001054:	e0fff115 	stw	r3,-60(fp)
			tmp4 = dataptr[8 * 3] - dataptr[8 * 4];
 4001058:	e0bfe917 	ldw	r2,-92(fp)
 400105c:	10801804 	addi	r2,r2,96
 4001060:	10c00017 	ldw	r3,0(r2)
 4001064:	e0bfe917 	ldw	r2,-92(fp)
 4001068:	10802004 	addi	r2,r2,128
 400106c:	11000017 	ldw	r4,0(r2)
 4001070:	200b883a 	mov	r5,r4
 4001074:	1809883a 	mov	r4,r3
 4001078:	40057940 	call	4005794 <__subsf3>
 400107c:	1007883a 	mov	r3,r2
 4001080:	e0fff215 	stw	r3,-56(fp)

			/* Even part */

			tmp10 = tmp0 + tmp3;    /* phase 2 */
 4001084:	e17ff117 	ldw	r5,-60(fp)
 4001088:	e13feb17 	ldw	r4,-84(fp)
 400108c:	40048d80 	call	40048d8 <__addsf3>
 4001090:	1007883a 	mov	r3,r2
 4001094:	e0fff315 	stw	r3,-52(fp)
			tmp13 = tmp0 - tmp3;
 4001098:	e17ff117 	ldw	r5,-60(fp)
 400109c:	e13feb17 	ldw	r4,-84(fp)
 40010a0:	40057940 	call	4005794 <__subsf3>
 40010a4:	1007883a 	mov	r3,r2
 40010a8:	e0fff415 	stw	r3,-48(fp)
			tmp11 = tmp1 + tmp2;
 40010ac:	e17fef17 	ldw	r5,-68(fp)
 40010b0:	e13fed17 	ldw	r4,-76(fp)
 40010b4:	40048d80 	call	40048d8 <__addsf3>
 40010b8:	1007883a 	mov	r3,r2
 40010bc:	e0fff515 	stw	r3,-44(fp)
			tmp12 = tmp1 - tmp2;
 40010c0:	e17fef17 	ldw	r5,-68(fp)
 40010c4:	e13fed17 	ldw	r4,-76(fp)
 40010c8:	40057940 	call	4005794 <__subsf3>
 40010cc:	1007883a 	mov	r3,r2
 40010d0:	e0fff615 	stw	r3,-40(fp)

			dataptr[8 * 0] = tmp10 + tmp11; /* phase 3 */
 40010d4:	e17ff517 	ldw	r5,-44(fp)
 40010d8:	e13ff317 	ldw	r4,-52(fp)
 40010dc:	40048d80 	call	40048d8 <__addsf3>
 40010e0:	1009883a 	mov	r4,r2
 40010e4:	2007883a 	mov	r3,r4
 40010e8:	e0bfe917 	ldw	r2,-92(fp)
 40010ec:	10c00015 	stw	r3,0(r2)
			dataptr[8 * 4] = tmp10 - tmp11;
 40010f0:	e0bfe917 	ldw	r2,-92(fp)
 40010f4:	14002004 	addi	r16,r2,128
 40010f8:	e17ff517 	ldw	r5,-44(fp)
 40010fc:	e13ff317 	ldw	r4,-52(fp)
 4001100:	40057940 	call	4005794 <__subsf3>
 4001104:	1007883a 	mov	r3,r2
 4001108:	1805883a 	mov	r2,r3
 400110c:	80800015 	stw	r2,0(r16)

			z1 = (tmp12 + tmp13) * ((float)0.707106781); /* c4 */
 4001110:	e17ff417 	ldw	r5,-48(fp)
 4001114:	e13ff617 	ldw	r4,-40(fp)
 4001118:	40048d80 	call	40048d8 <__addsf3>
 400111c:	1007883a 	mov	r3,r2
 4001120:	1805883a 	mov	r2,r3
 4001124:	014fcd74 	movhi	r5,16181
 4001128:	29413cc4 	addi	r5,r5,1267
 400112c:	1009883a 	mov	r4,r2
 4001130:	40053640 	call	4005364 <__mulsf3>
 4001134:	1007883a 	mov	r3,r2
 4001138:	e0fff715 	stw	r3,-36(fp)
			dataptr[8 * 2] = tmp13 + z1; /* phase 5 */
 400113c:	e0bfe917 	ldw	r2,-92(fp)
 4001140:	14001004 	addi	r16,r2,64
 4001144:	e17ff717 	ldw	r5,-36(fp)
 4001148:	e13ff417 	ldw	r4,-48(fp)
 400114c:	40048d80 	call	40048d8 <__addsf3>
 4001150:	1007883a 	mov	r3,r2
 4001154:	1805883a 	mov	r2,r3
 4001158:	80800015 	stw	r2,0(r16)
			dataptr[8 * 6] = tmp13 - z1;
 400115c:	e0bfe917 	ldw	r2,-92(fp)
 4001160:	14003004 	addi	r16,r2,192
 4001164:	e17ff717 	ldw	r5,-36(fp)
 4001168:	e13ff417 	ldw	r4,-48(fp)
 400116c:	40057940 	call	4005794 <__subsf3>
 4001170:	1007883a 	mov	r3,r2
 4001174:	1805883a 	mov	r2,r3
 4001178:	80800015 	stw	r2,0(r16)

			/* Odd part */

			tmp10 = tmp4 + tmp5;    /* phase 2 */
 400117c:	e17ff017 	ldw	r5,-64(fp)
 4001180:	e13ff217 	ldw	r4,-56(fp)
 4001184:	40048d80 	call	40048d8 <__addsf3>
 4001188:	1007883a 	mov	r3,r2
 400118c:	e0fff315 	stw	r3,-52(fp)
			tmp11 = tmp5 + tmp6;
 4001190:	e17fee17 	ldw	r5,-72(fp)
 4001194:	e13ff017 	ldw	r4,-64(fp)
 4001198:	40048d80 	call	40048d8 <__addsf3>
 400119c:	1007883a 	mov	r3,r2
 40011a0:	e0fff515 	stw	r3,-44(fp)
			tmp12 = tmp6 + tmp7;
 40011a4:	e17fec17 	ldw	r5,-80(fp)
 40011a8:	e13fee17 	ldw	r4,-72(fp)
 40011ac:	40048d80 	call	40048d8 <__addsf3>
 40011b0:	1007883a 	mov	r3,r2
 40011b4:	e0fff615 	stw	r3,-40(fp)

			/* The rotator is modified from fig 4-8 to avoid extra negations. */
			z5 = (tmp10 - tmp12) * ((float)0.382683433); /* c6 */
 40011b8:	e17ff617 	ldw	r5,-40(fp)
 40011bc:	e13ff317 	ldw	r4,-52(fp)
 40011c0:	40057940 	call	4005794 <__subsf3>
 40011c4:	1007883a 	mov	r3,r2
 40011c8:	1805883a 	mov	r2,r3
 40011cc:	014fb134 	movhi	r5,16068
 40011d0:	297bc544 	addi	r5,r5,-4331
 40011d4:	1009883a 	mov	r4,r2
 40011d8:	40053640 	call	4005364 <__mulsf3>
 40011dc:	1007883a 	mov	r3,r2
 40011e0:	e0fff815 	stw	r3,-32(fp)
			z2 = ((float)0.541196100) * tmp10 + z5; /* c2-c6 */
 40011e4:	014fc2f4 	movhi	r5,16139
 40011e8:	2962f504 	addi	r5,r5,-29740
 40011ec:	e13ff317 	ldw	r4,-52(fp)
 40011f0:	40053640 	call	4005364 <__mulsf3>
 40011f4:	1007883a 	mov	r3,r2
 40011f8:	1805883a 	mov	r2,r3
 40011fc:	e17ff817 	ldw	r5,-32(fp)
 4001200:	1009883a 	mov	r4,r2
 4001204:	40048d80 	call	40048d8 <__addsf3>
 4001208:	1007883a 	mov	r3,r2
 400120c:	e0fff915 	stw	r3,-28(fp)
			z4 = ((float)1.306562965) * tmp12 + z5; /* c2+c6 */
 4001210:	014fe9f4 	movhi	r5,16295
 4001214:	294f5d44 	addi	r5,r5,15733
 4001218:	e13ff617 	ldw	r4,-40(fp)
 400121c:	40053640 	call	4005364 <__mulsf3>
 4001220:	1007883a 	mov	r3,r2
 4001224:	1805883a 	mov	r2,r3
 4001228:	e17ff817 	ldw	r5,-32(fp)
 400122c:	1009883a 	mov	r4,r2
 4001230:	40048d80 	call	40048d8 <__addsf3>
 4001234:	1007883a 	mov	r3,r2
 4001238:	e0fffa15 	stw	r3,-24(fp)
			z3 = tmp11 * ((float)0.707106781); /* c4 */
 400123c:	014fcd74 	movhi	r5,16181
 4001240:	29413cc4 	addi	r5,r5,1267
 4001244:	e13ff517 	ldw	r4,-44(fp)
 4001248:	40053640 	call	4005364 <__mulsf3>
 400124c:	1007883a 	mov	r3,r2
 4001250:	e0fffb15 	stw	r3,-20(fp)

			z11 = tmp7 + z3;        /* phase 5 */
 4001254:	e17ffb17 	ldw	r5,-20(fp)
 4001258:	e13fec17 	ldw	r4,-80(fp)
 400125c:	40048d80 	call	40048d8 <__addsf3>
 4001260:	1007883a 	mov	r3,r2
 4001264:	e0fffc15 	stw	r3,-16(fp)
			z13 = tmp7 - z3;
 4001268:	e17ffb17 	ldw	r5,-20(fp)
 400126c:	e13fec17 	ldw	r4,-80(fp)
 4001270:	40057940 	call	4005794 <__subsf3>
 4001274:	1007883a 	mov	r3,r2
 4001278:	e0fffd15 	stw	r3,-12(fp)

			dataptr[8 * 5] = z13 + z2; /* phase 6 */
 400127c:	e0bfe917 	ldw	r2,-92(fp)
 4001280:	14002804 	addi	r16,r2,160
 4001284:	e17ff917 	ldw	r5,-28(fp)
 4001288:	e13ffd17 	ldw	r4,-12(fp)
 400128c:	40048d80 	call	40048d8 <__addsf3>
 4001290:	1007883a 	mov	r3,r2
 4001294:	1805883a 	mov	r2,r3
 4001298:	80800015 	stw	r2,0(r16)
			dataptr[8 * 3] = z13 - z2;
 400129c:	e0bfe917 	ldw	r2,-92(fp)
 40012a0:	14001804 	addi	r16,r2,96
 40012a4:	e17ff917 	ldw	r5,-28(fp)
 40012a8:	e13ffd17 	ldw	r4,-12(fp)
 40012ac:	40057940 	call	4005794 <__subsf3>
 40012b0:	1007883a 	mov	r3,r2
 40012b4:	1805883a 	mov	r2,r3
 40012b8:	80800015 	stw	r2,0(r16)
			dataptr[8 * 1] = z11 + z4;
 40012bc:	e0bfe917 	ldw	r2,-92(fp)
 40012c0:	14000804 	addi	r16,r2,32
 40012c4:	e17ffa17 	ldw	r5,-24(fp)
 40012c8:	e13ffc17 	ldw	r4,-16(fp)
 40012cc:	40048d80 	call	40048d8 <__addsf3>
 40012d0:	1007883a 	mov	r3,r2
 40012d4:	1805883a 	mov	r2,r3
 40012d8:	80800015 	stw	r2,0(r16)
			dataptr[8 * 7] = z11 - z4;
 40012dc:	e0bfe917 	ldw	r2,-92(fp)
 40012e0:	14003804 	addi	r16,r2,224
 40012e4:	e17ffa17 	ldw	r5,-24(fp)
 40012e8:	e13ffc17 	ldw	r4,-16(fp)
 40012ec:	40057940 	call	4005794 <__subsf3>
 40012f0:	1007883a 	mov	r3,r2
 40012f4:	1805883a 	mov	r2,r3
 40012f8:	80800015 	stw	r2,0(r16)

			dataptr++;          /* advance pointer to next column */
 40012fc:	e0bfe917 	ldw	r2,-92(fp)
 4001300:	10800104 	addi	r2,r2,4
 4001304:	e0bfe915 	stw	r2,-92(fp)
		}

		/* Pass 2: process columns. */

		dataptr = data;
		for (ctr = 8 - 1; ctr >= 0; ctr--) {
 4001308:	e0bfea17 	ldw	r2,-88(fp)
 400130c:	10bfffc4 	addi	r2,r2,-1
 4001310:	e0bfea15 	stw	r2,-88(fp)
 4001314:	e0bfea17 	ldw	r2,-88(fp)
 4001318:	103f040e 	bge	r2,zero,4000f2c <__alt_data_end+0xfc000f2c>
			dataptr[8 * 1] = z11 + z4;
			dataptr[8 * 7] = z11 - z4;

			dataptr++;          /* advance pointer to next column */
		}
	}
 400131c:	0001883a 	nop
 4001320:	e6ffff04 	addi	sp,fp,-4
 4001324:	dfc00217 	ldw	ra,8(sp)
 4001328:	df000117 	ldw	fp,4(sp)
 400132c:	dc000017 	ldw	r16,0(sp)
 4001330:	dec00304 	addi	sp,sp,12
 4001334:	f800283a 	ret

04001338 <tjei_encode_and_write_MCU>:
		uint8_t* huff_dc_len, uint16_t* huff_dc_code, // Huffman tables
		uint8_t* huff_ac_len, uint16_t* huff_ac_code,
		int* pred,  // Previous DC coefficient
		uint32_t* bitbuffer,  // Bitstack.
		uint32_t* location)
	{
 4001338:	deff6f04 	addi	sp,sp,-580
 400133c:	dfc09015 	stw	ra,576(sp)
 4001340:	df008f15 	stw	fp,572(sp)
 4001344:	df008f04 	addi	fp,sp,572
 4001348:	e13ffc15 	stw	r4,-16(fp)
 400134c:	e17ffd15 	stw	r5,-12(fp)
 4001350:	e1bffe15 	stw	r6,-8(fp)
 4001354:	e1ffff15 	stw	r7,-4(fp)
		int du[64];  // Data unit in zig-zag order

		float dct_mcu[64];
		memcpy(dct_mcu, mcu, 64 * sizeof(float));
 4001358:	e0bfbb04 	addi	r2,fp,-276
 400135c:	01804004 	movi	r6,256
 4001360:	e17ffd17 	ldw	r5,-12(fp)
 4001364:	1009883a 	mov	r4,r2
 4001368:	40089b80 	call	40089b8 <memcpy>

#if TJE_USE_FAST_DCT
		tjei_fdct(dct_mcu);
 400136c:	e0bfbb04 	addi	r2,fp,-276
 4001370:	1009883a 	mov	r4,r2
 4001374:	4000afc0 	call	4000afc <tjei_fdct>
		for (int i = 0; i < 64; ++i) {
 4001378:	e03f7215 	stw	zero,-568(fp)
 400137c:	00003906 	br	4001464 <tjei_encode_and_write_MCU+0x12c>
			float fval = dct_mcu[i];
 4001380:	e0bf7217 	ldw	r2,-568(fp)
 4001384:	1085883a 	add	r2,r2,r2
 4001388:	1085883a 	add	r2,r2,r2
 400138c:	e0ff7204 	addi	r3,fp,-568
 4001390:	1885883a 	add	r2,r3,r2
 4001394:	10804904 	addi	r2,r2,292
 4001398:	10800017 	ldw	r2,0(r2)
 400139c:	e0bf7715 	stw	r2,-548(fp)
			fval *= qt[i];
 40013a0:	e0bf7217 	ldw	r2,-568(fp)
 40013a4:	1085883a 	add	r2,r2,r2
 40013a8:	1085883a 	add	r2,r2,r2
 40013ac:	1007883a 	mov	r3,r2
 40013b0:	e0bffe17 	ldw	r2,-8(fp)
 40013b4:	10c5883a 	add	r2,r2,r3
 40013b8:	10c00017 	ldw	r3,0(r2)
 40013bc:	180b883a 	mov	r5,r3
 40013c0:	e13f7717 	ldw	r4,-548(fp)
 40013c4:	40053640 	call	4005364 <__mulsf3>
 40013c8:	1007883a 	mov	r3,r2
 40013cc:	e0ff7715 	stw	r3,-548(fp)
#if 0
			fval = (fval > 0) ? floorf(fval + 0.5f) : ceilf(fval - 0.5f);
#else
			fval = floorf(fval + 1024 + 0.5f);
 40013d0:	01512034 	movhi	r5,17536
 40013d4:	e13f7717 	ldw	r4,-548(fp)
 40013d8:	40048d80 	call	40048d8 <__addsf3>
 40013dc:	1007883a 	mov	r3,r2
 40013e0:	1805883a 	mov	r2,r3
 40013e4:	014fc034 	movhi	r5,16128
 40013e8:	1009883a 	mov	r4,r2
 40013ec:	40048d80 	call	40048d8 <__addsf3>
 40013f0:	1007883a 	mov	r3,r2
 40013f4:	1805883a 	mov	r2,r3
 40013f8:	1009883a 	mov	r4,r2
 40013fc:	40045f80 	call	40045f8 <floorf>
 4001400:	e0bf7715 	stw	r2,-548(fp)
			fval -= 1024;
 4001404:	01512034 	movhi	r5,17536
 4001408:	e13f7717 	ldw	r4,-548(fp)
 400140c:	40057940 	call	4005794 <__subsf3>
 4001410:	1007883a 	mov	r3,r2
 4001414:	e0ff7715 	stw	r3,-548(fp)
#endif
			int val = (int)fval;
 4001418:	e13f7717 	ldw	r4,-548(fp)
 400141c:	4005c780 	call	4005c78 <__fixsfsi>
 4001420:	e0bf7815 	stw	r2,-544(fp)
			du[tjei_zig_zag[i]] = val;
 4001424:	00810074 	movhi	r2,1025
 4001428:	10841504 	addi	r2,r2,4180
 400142c:	e0ff7217 	ldw	r3,-568(fp)
 4001430:	10c5883a 	add	r2,r2,r3
 4001434:	10800003 	ldbu	r2,0(r2)
 4001438:	10803fcc 	andi	r2,r2,255
 400143c:	1085883a 	add	r2,r2,r2
 4001440:	1085883a 	add	r2,r2,r2
 4001444:	e0ff7204 	addi	r3,fp,-568
 4001448:	1885883a 	add	r2,r3,r2
 400144c:	10800904 	addi	r2,r2,36
 4001450:	e0ff7817 	ldw	r3,-544(fp)
 4001454:	10c00015 	stw	r3,0(r2)
		float dct_mcu[64];
		memcpy(dct_mcu, mcu, 64 * sizeof(float));

#if TJE_USE_FAST_DCT
		tjei_fdct(dct_mcu);
		for (int i = 0; i < 64; ++i) {
 4001458:	e0bf7217 	ldw	r2,-568(fp)
 400145c:	10800044 	addi	r2,r2,1
 4001460:	e0bf7215 	stw	r2,-568(fp)
 4001464:	e0bf7217 	ldw	r2,-568(fp)
 4001468:	10801010 	cmplti	r2,r2,64
 400146c:	103fc41e 	bne	r2,zero,4001380 <__alt_data_end+0xfc001380>
#endif

		uint16_t vli[2];

		// Encode DC coefficient.
		int diff = du[0] - *pred;
 4001470:	e0ff7b17 	ldw	r3,-532(fp)
 4001474:	e0800517 	ldw	r2,20(fp)
 4001478:	10800017 	ldw	r2,0(r2)
 400147c:	1885c83a 	sub	r2,r3,r2
 4001480:	e0bf7915 	stw	r2,-540(fp)
		*pred = du[0];
 4001484:	e0ff7b17 	ldw	r3,-532(fp)
 4001488:	e0800517 	ldw	r2,20(fp)
 400148c:	10c00015 	stw	r3,0(r2)
		if (diff != 0) {
 4001490:	e0bf7917 	ldw	r2,-540(fp)
 4001494:	10002326 	beq	r2,zero,4001524 <tjei_encode_and_write_MCU+0x1ec>
			tjei_calculate_variable_length_int(diff, vli);
 4001498:	e0bffb04 	addi	r2,fp,-20
 400149c:	100b883a 	mov	r5,r2
 40014a0:	e13f7917 	ldw	r4,-540(fp)
 40014a4:	40009200 	call	4000920 <tjei_calculate_variable_length_int>
			// Write number of bits with Huffman coding
			tjei_write_bits(state, bitbuffer, location, huff_dc_len[vli[1]], huff_dc_code[vli[1]]);
 40014a8:	e0bffb8b 	ldhu	r2,-18(fp)
 40014ac:	10bfffcc 	andi	r2,r2,65535
 40014b0:	e0ffff17 	ldw	r3,-4(fp)
 40014b4:	1885883a 	add	r2,r3,r2
 40014b8:	10800003 	ldbu	r2,0(r2)
 40014bc:	10c03fcc 	andi	r3,r2,255
 40014c0:	e0bffb8b 	ldhu	r2,-18(fp)
 40014c4:	10bfffcc 	andi	r2,r2,65535
 40014c8:	1085883a 	add	r2,r2,r2
 40014cc:	1009883a 	mov	r4,r2
 40014d0:	e0800217 	ldw	r2,8(fp)
 40014d4:	1105883a 	add	r2,r2,r4
 40014d8:	1080000b 	ldhu	r2,0(r2)
 40014dc:	10bfffcc 	andi	r2,r2,65535
 40014e0:	d8800015 	stw	r2,0(sp)
 40014e4:	180f883a 	mov	r7,r3
 40014e8:	e1800717 	ldw	r6,28(fp)
 40014ec:	e1400617 	ldw	r5,24(fp)
 40014f0:	e13ffc17 	ldw	r4,-16(fp)
 40014f4:	40009e00 	call	40009e0 <tjei_write_bits>
			// Write the bits.
			tjei_write_bits(state, bitbuffer, location, vli[1], vli[0]);
 40014f8:	e0bffb8b 	ldhu	r2,-18(fp)
 40014fc:	10ffffcc 	andi	r3,r2,65535
 4001500:	e0bffb0b 	ldhu	r2,-20(fp)
 4001504:	10bfffcc 	andi	r2,r2,65535
 4001508:	d8800015 	stw	r2,0(sp)
 400150c:	180f883a 	mov	r7,r3
 4001510:	e1800717 	ldw	r6,28(fp)
 4001514:	e1400617 	ldw	r5,24(fp)
 4001518:	e13ffc17 	ldw	r4,-16(fp)
 400151c:	40009e00 	call	40009e0 <tjei_write_bits>
 4001520:	00000c06 	br	4001554 <tjei_encode_and_write_MCU+0x21c>
		}
		else {
			tjei_write_bits(state, bitbuffer, location, huff_dc_len[0], huff_dc_code[0]);
 4001524:	e0bfff17 	ldw	r2,-4(fp)
 4001528:	10800003 	ldbu	r2,0(r2)
 400152c:	10c03fcc 	andi	r3,r2,255
 4001530:	e0800217 	ldw	r2,8(fp)
 4001534:	1080000b 	ldhu	r2,0(r2)
 4001538:	10bfffcc 	andi	r2,r2,65535
 400153c:	d8800015 	stw	r2,0(sp)
 4001540:	180f883a 	mov	r7,r3
 4001544:	e1800717 	ldw	r6,28(fp)
 4001548:	e1400617 	ldw	r5,24(fp)
 400154c:	e13ffc17 	ldw	r4,-16(fp)
 4001550:	40009e00 	call	40009e0 <tjei_write_bits>
		}

		// ==== Encode AC coefficients ====

		int last_non_zero_i = 0;
 4001554:	e03f7315 	stw	zero,-564(fp)
		// Find the last non-zero element.
		for (int i = 63; i > 0; --i) {
 4001558:	00800fc4 	movi	r2,63
 400155c:	e0bf7415 	stw	r2,-560(fp)
 4001560:	00000e06 	br	400159c <tjei_encode_and_write_MCU+0x264>
			if (du[i] != 0) {
 4001564:	e0bf7417 	ldw	r2,-560(fp)
 4001568:	1085883a 	add	r2,r2,r2
 400156c:	1085883a 	add	r2,r2,r2
 4001570:	e0ff7204 	addi	r3,fp,-568
 4001574:	1885883a 	add	r2,r3,r2
 4001578:	10800904 	addi	r2,r2,36
 400157c:	10800017 	ldw	r2,0(r2)
 4001580:	10000326 	beq	r2,zero,4001590 <tjei_encode_and_write_MCU+0x258>
				last_non_zero_i = i;
 4001584:	e0bf7417 	ldw	r2,-560(fp)
 4001588:	e0bf7315 	stw	r2,-564(fp)
				break;
 400158c:	00000506 	br	40015a4 <tjei_encode_and_write_MCU+0x26c>

		// ==== Encode AC coefficients ====

		int last_non_zero_i = 0;
		// Find the last non-zero element.
		for (int i = 63; i > 0; --i) {
 4001590:	e0bf7417 	ldw	r2,-560(fp)
 4001594:	10bfffc4 	addi	r2,r2,-1
 4001598:	e0bf7415 	stw	r2,-560(fp)
 400159c:	e0bf7417 	ldw	r2,-560(fp)
 40015a0:	00bff016 	blt	zero,r2,4001564 <__alt_data_end+0xfc001564>
				last_non_zero_i = i;
				break;
			}
		}

		for (int i = 1; i <= last_non_zero_i; ++i) {
 40015a4:	00800044 	movi	r2,1
 40015a8:	e0bf7515 	stw	r2,-556(fp)
 40015ac:	00007706 	br	400178c <tjei_encode_and_write_MCU+0x454>
			// If zero, increase count. If >=15, encode (FF,00)
			int zero_count = 0;
 40015b0:	e03f7615 	stw	zero,-552(fp)
			while (du[i] == 0) {
 40015b4:	00001806 	br	4001618 <tjei_encode_and_write_MCU+0x2e0>
				++zero_count;
 40015b8:	e0bf7617 	ldw	r2,-552(fp)
 40015bc:	10800044 	addi	r2,r2,1
 40015c0:	e0bf7615 	stw	r2,-552(fp)
				++i;
 40015c4:	e0bf7517 	ldw	r2,-556(fp)
 40015c8:	10800044 	addi	r2,r2,1
 40015cc:	e0bf7515 	stw	r2,-556(fp)
				if (zero_count == 16) {
 40015d0:	e0bf7617 	ldw	r2,-552(fp)
 40015d4:	10800418 	cmpnei	r2,r2,16
 40015d8:	10000f1e 	bne	r2,zero,4001618 <tjei_encode_and_write_MCU+0x2e0>
					// encode (ff,00) == 0xf0
					tjei_write_bits(state, bitbuffer, location, huff_ac_len[0xf0], huff_ac_code[0xf0]);
 40015dc:	e0800317 	ldw	r2,12(fp)
 40015e0:	10803c04 	addi	r2,r2,240
 40015e4:	10800003 	ldbu	r2,0(r2)
 40015e8:	10c03fcc 	andi	r3,r2,255
 40015ec:	e0800417 	ldw	r2,16(fp)
 40015f0:	10807804 	addi	r2,r2,480
 40015f4:	1080000b 	ldhu	r2,0(r2)
 40015f8:	10bfffcc 	andi	r2,r2,65535
 40015fc:	d8800015 	stw	r2,0(sp)
 4001600:	180f883a 	mov	r7,r3
 4001604:	e1800717 	ldw	r6,28(fp)
 4001608:	e1400617 	ldw	r5,24(fp)
 400160c:	e13ffc17 	ldw	r4,-16(fp)
 4001610:	40009e00 	call	40009e0 <tjei_write_bits>
					zero_count = 0;
 4001614:	e03f7615 	stw	zero,-552(fp)
		}

		for (int i = 1; i <= last_non_zero_i; ++i) {
			// If zero, increase count. If >=15, encode (FF,00)
			int zero_count = 0;
			while (du[i] == 0) {
 4001618:	e0bf7517 	ldw	r2,-556(fp)
 400161c:	1085883a 	add	r2,r2,r2
 4001620:	1085883a 	add	r2,r2,r2
 4001624:	e0ff7204 	addi	r3,fp,-568
 4001628:	1885883a 	add	r2,r3,r2
 400162c:	10800904 	addi	r2,r2,36
 4001630:	10800017 	ldw	r2,0(r2)
 4001634:	103fe026 	beq	r2,zero,40015b8 <__alt_data_end+0xfc0015b8>
					// encode (ff,00) == 0xf0
					tjei_write_bits(state, bitbuffer, location, huff_ac_len[0xf0], huff_ac_code[0xf0]);
					zero_count = 0;
				}
			}
			tjei_calculate_variable_length_int(du[i], vli);
 4001638:	e0bf7517 	ldw	r2,-556(fp)
 400163c:	1085883a 	add	r2,r2,r2
 4001640:	1085883a 	add	r2,r2,r2
 4001644:	e0ff7204 	addi	r3,fp,-568
 4001648:	1885883a 	add	r2,r3,r2
 400164c:	10800904 	addi	r2,r2,36
 4001650:	10800017 	ldw	r2,0(r2)
 4001654:	e0fffb04 	addi	r3,fp,-20
 4001658:	180b883a 	mov	r5,r3
 400165c:	1009883a 	mov	r4,r2
 4001660:	40009200 	call	4000920 <tjei_calculate_variable_length_int>

			assert(zero_count < 0x10);
 4001664:	e0bf7617 	ldw	r2,-552(fp)
 4001668:	10800410 	cmplti	r2,r2,16
 400166c:	1000081e 	bne	r2,zero,4001690 <tjei_encode_and_write_MCU+0x358>
 4001670:	01c10074 	movhi	r7,1025
 4001674:	39c44804 	addi	r7,r7,4384
 4001678:	01810074 	movhi	r6,1025
 400167c:	31848b04 	addi	r6,r6,4652
 4001680:	0140c744 	movi	r5,797
 4001684:	01010074 	movhi	r4,1025
 4001688:	21043a04 	addi	r4,r4,4328
 400168c:	40088e00 	call	40088e0 <__assert_func>
			assert(vli[1] <= 10);
 4001690:	e0bffb8b 	ldhu	r2,-18(fp)
 4001694:	10bfffcc 	andi	r2,r2,65535
 4001698:	108002f0 	cmpltui	r2,r2,11
 400169c:	1000081e 	bne	r2,zero,40016c0 <tjei_encode_and_write_MCU+0x388>
 40016a0:	01c10074 	movhi	r7,1025
 40016a4:	39c44d04 	addi	r7,r7,4404
 40016a8:	01810074 	movhi	r6,1025
 40016ac:	31848b04 	addi	r6,r6,4652
 40016b0:	0140c784 	movi	r5,798
 40016b4:	01010074 	movhi	r4,1025
 40016b8:	21043a04 	addi	r4,r4,4328
 40016bc:	40088e00 	call	40088e0 <__assert_func>

			uint16_t sym1 = (uint16_t)((uint16_t)zero_count << 4) | vli[1];
 40016c0:	e0bf7617 	ldw	r2,-552(fp)
 40016c4:	1004913a 	slli	r2,r2,4
 40016c8:	1007883a 	mov	r3,r2
 40016cc:	e0bffb8b 	ldhu	r2,-18(fp)
 40016d0:	1884b03a 	or	r2,r3,r2
 40016d4:	e0bf7a0d 	sth	r2,-536(fp)

			assert(huff_ac_len[sym1] != 0);
 40016d8:	e0bf7a0b 	ldhu	r2,-536(fp)
 40016dc:	e0c00317 	ldw	r3,12(fp)
 40016e0:	1885883a 	add	r2,r3,r2
 40016e4:	10800003 	ldbu	r2,0(r2)
 40016e8:	10803fcc 	andi	r2,r2,255
 40016ec:	1000081e 	bne	r2,zero,4001710 <tjei_encode_and_write_MCU+0x3d8>
 40016f0:	01c10074 	movhi	r7,1025
 40016f4:	39c45104 	addi	r7,r7,4420
 40016f8:	01810074 	movhi	r6,1025
 40016fc:	31848b04 	addi	r6,r6,4652
 4001700:	0140c884 	movi	r5,802
 4001704:	01010074 	movhi	r4,1025
 4001708:	21043a04 	addi	r4,r4,4328
 400170c:	40088e00 	call	40088e0 <__assert_func>

			// Write symbol 1  --- (RUNLENGTH, SIZE)
			tjei_write_bits(state, bitbuffer, location, huff_ac_len[sym1], huff_ac_code[sym1]);
 4001710:	e0bf7a0b 	ldhu	r2,-536(fp)
 4001714:	e0c00317 	ldw	r3,12(fp)
 4001718:	1885883a 	add	r2,r3,r2
 400171c:	10800003 	ldbu	r2,0(r2)
 4001720:	10c03fcc 	andi	r3,r2,255
 4001724:	e0bf7a0b 	ldhu	r2,-536(fp)
 4001728:	1085883a 	add	r2,r2,r2
 400172c:	1009883a 	mov	r4,r2
 4001730:	e0800417 	ldw	r2,16(fp)
 4001734:	1105883a 	add	r2,r2,r4
 4001738:	1080000b 	ldhu	r2,0(r2)
 400173c:	10bfffcc 	andi	r2,r2,65535
 4001740:	d8800015 	stw	r2,0(sp)
 4001744:	180f883a 	mov	r7,r3
 4001748:	e1800717 	ldw	r6,28(fp)
 400174c:	e1400617 	ldw	r5,24(fp)
 4001750:	e13ffc17 	ldw	r4,-16(fp)
 4001754:	40009e00 	call	40009e0 <tjei_write_bits>
			// Write symbol 2  --- (AMPLITUDE)
			tjei_write_bits(state, bitbuffer, location, vli[1], vli[0]);
 4001758:	e0bffb8b 	ldhu	r2,-18(fp)
 400175c:	10ffffcc 	andi	r3,r2,65535
 4001760:	e0bffb0b 	ldhu	r2,-20(fp)
 4001764:	10bfffcc 	andi	r2,r2,65535
 4001768:	d8800015 	stw	r2,0(sp)
 400176c:	180f883a 	mov	r7,r3
 4001770:	e1800717 	ldw	r6,28(fp)
 4001774:	e1400617 	ldw	r5,24(fp)
 4001778:	e13ffc17 	ldw	r4,-16(fp)
 400177c:	40009e00 	call	40009e0 <tjei_write_bits>
				last_non_zero_i = i;
				break;
			}
		}

		for (int i = 1; i <= last_non_zero_i; ++i) {
 4001780:	e0bf7517 	ldw	r2,-556(fp)
 4001784:	10800044 	addi	r2,r2,1
 4001788:	e0bf7515 	stw	r2,-556(fp)
 400178c:	e0bf7517 	ldw	r2,-556(fp)
 4001790:	e0ff7317 	ldw	r3,-564(fp)
 4001794:	18bf860e 	bge	r3,r2,40015b0 <__alt_data_end+0xfc0015b0>
			tjei_write_bits(state, bitbuffer, location, huff_ac_len[sym1], huff_ac_code[sym1]);
			// Write symbol 2  --- (AMPLITUDE)
			tjei_write_bits(state, bitbuffer, location, vli[1], vli[0]);
		}

		if (last_non_zero_i != 63) {
 4001798:	e0bf7317 	ldw	r2,-564(fp)
 400179c:	10800fe0 	cmpeqi	r2,r2,63
 40017a0:	10000d1e 	bne	r2,zero,40017d8 <tjei_encode_and_write_MCU+0x4a0>
			// write EOB HUFF(00,00)
			tjei_write_bits(state, bitbuffer, location, huff_ac_len[0], huff_ac_code[0]);
 40017a4:	e0800317 	ldw	r2,12(fp)
 40017a8:	10800003 	ldbu	r2,0(r2)
 40017ac:	10c03fcc 	andi	r3,r2,255
 40017b0:	e0800417 	ldw	r2,16(fp)
 40017b4:	1080000b 	ldhu	r2,0(r2)
 40017b8:	10bfffcc 	andi	r2,r2,65535
 40017bc:	d8800015 	stw	r2,0(sp)
 40017c0:	180f883a 	mov	r7,r3
 40017c4:	e1800717 	ldw	r6,28(fp)
 40017c8:	e1400617 	ldw	r5,24(fp)
 40017cc:	e13ffc17 	ldw	r4,-16(fp)
 40017d0:	40009e00 	call	40009e0 <tjei_write_bits>
		}
		return;
 40017d4:	0001883a 	nop
 40017d8:	0001883a 	nop
	}
 40017dc:	e037883a 	mov	sp,fp
 40017e0:	dfc00117 	ldw	ra,4(sp)
 40017e4:	df000017 	ldw	fp,0(sp)
 40017e8:	dec00204 	addi	sp,sp,8
 40017ec:	f800283a 	ret

040017f0 <tjei_huff_expand>:
	};
#endif

	// Set up huffman tables in state.
	static void tjei_huff_expand(TJEState* state)
	{
 40017f0:	defceb04 	addi	sp,sp,-3156
 40017f4:	dfc31415 	stw	ra,3152(sp)
 40017f8:	df031315 	stw	fp,3148(sp)
 40017fc:	dcc31215 	stw	r19,3144(sp)
 4001800:	dc831115 	stw	r18,3140(sp)
 4001804:	dc431015 	stw	r17,3136(sp)
 4001808:	dc030f15 	stw	r16,3132(sp)
 400180c:	df031304 	addi	fp,sp,3148
 4001810:	e13ffb15 	stw	r4,-20(fp)
		assert(state);
 4001814:	e0bffb17 	ldw	r2,-20(fp)
 4001818:	1000081e 	bne	r2,zero,400183c <tjei_huff_expand+0x4c>
 400181c:	01c10074 	movhi	r7,1025
 4001820:	39c45704 	addi	r7,r7,4444
 4001824:	01810074 	movhi	r6,1025
 4001828:	31849204 	addi	r6,r6,4680
 400182c:	0140d0c4 	movi	r5,835
 4001830:	01010074 	movhi	r4,1025
 4001834:	21043a04 	addi	r4,r4,4328
 4001838:	40088e00 	call	40088e0 <__assert_func>

		state->ht_bits[TJEI_LUMA_DC] = tjei_default_ht_luma_dc_len;
 400183c:	e0fffb17 	ldw	r3,-20(fp)
 4001840:	00810074 	movhi	r2,1025
 4001844:	1083ae04 	addi	r2,r2,3768
 4001848:	18830115 	stw	r2,3076(r3)
		state->ht_bits[TJEI_LUMA_AC] = tjei_default_ht_luma_ac_len;
 400184c:	e0fffb17 	ldw	r3,-20(fp)
 4001850:	00810074 	movhi	r2,1025
 4001854:	1083bc04 	addi	r2,r2,3824
 4001858:	18830215 	stw	r2,3080(r3)
		state->ht_bits[TJEI_CHROMA_DC] = tjei_default_ht_chroma_dc_len;
 400185c:	e0fffb17 	ldw	r3,-20(fp)
 4001860:	00810074 	movhi	r2,1025
 4001864:	1083b504 	addi	r2,r2,3796
 4001868:	18830315 	stw	r2,3084(r3)
		state->ht_bits[TJEI_CHROMA_AC] = tjei_default_ht_chroma_ac_len;
 400186c:	e0fffb17 	ldw	r3,-20(fp)
 4001870:	00810074 	movhi	r2,1025
 4001874:	1083e884 	addi	r2,r2,4002
 4001878:	18830415 	stw	r2,3088(r3)

		state->ht_vals[TJEI_LUMA_DC] = tjei_default_ht_luma_dc;
 400187c:	e0fffb17 	ldw	r3,-20(fp)
 4001880:	00810074 	movhi	r2,1025
 4001884:	1083b204 	addi	r2,r2,3784
 4001888:	18830515 	stw	r2,3092(r3)
		state->ht_vals[TJEI_LUMA_AC] = tjei_default_ht_luma_ac;
 400188c:	e0fffb17 	ldw	r3,-20(fp)
 4001890:	00810074 	movhi	r2,1025
 4001894:	1083c004 	addi	r2,r2,3840
 4001898:	18830615 	stw	r2,3096(r3)
		state->ht_vals[TJEI_CHROMA_DC] = tjei_default_ht_chroma_dc;
 400189c:	e0fffb17 	ldw	r3,-20(fp)
 40018a0:	00810074 	movhi	r2,1025
 40018a4:	1083b904 	addi	r2,r2,3812
 40018a8:	18830715 	stw	r2,3100(r3)
		state->ht_vals[TJEI_CHROMA_AC] = tjei_default_ht_chroma_ac;
 40018ac:	e0fffb17 	ldw	r3,-20(fp)
 40018b0:	00810074 	movhi	r2,1025
 40018b4:	1083ec84 	addi	r2,r2,4018
 40018b8:	18830815 	stw	r2,3104(r3)

		// How many codes in total for each of LUMA_(DC|AC) and CHROMA_(DC|AC)
		int32_t spec_tables_len[4] = { 0 };
 40018bc:	e03cf615 	stw	zero,-3112(fp)
 40018c0:	e03cf715 	stw	zero,-3108(fp)
 40018c4:	e03cf815 	stw	zero,-3104(fp)
 40018c8:	e03cf915 	stw	zero,-3100(fp)

		for (int i = 0; i < 4; ++i) {
 40018cc:	e03cf015 	stw	zero,-3136(fp)
 40018d0:	00002506 	br	4001968 <tjei_huff_expand+0x178>
			for (int k = 0; k < 16; ++k) {
 40018d4:	e03cf115 	stw	zero,-3132(fp)
 40018d8:	00001d06 	br	4001950 <tjei_huff_expand+0x160>
				spec_tables_len[i] += state->ht_bits[i][k];
 40018dc:	e0bcf017 	ldw	r2,-3136(fp)
 40018e0:	1085883a 	add	r2,r2,r2
 40018e4:	1085883a 	add	r2,r2,r2
 40018e8:	e0fcf004 	addi	r3,fp,-3136
 40018ec:	1885883a 	add	r2,r3,r2
 40018f0:	10800604 	addi	r2,r2,24
 40018f4:	10c00017 	ldw	r3,0(r2)
 40018f8:	e13ffb17 	ldw	r4,-20(fp)
 40018fc:	e0bcf017 	ldw	r2,-3136(fp)
 4001900:	1080c044 	addi	r2,r2,769
 4001904:	1085883a 	add	r2,r2,r2
 4001908:	1085883a 	add	r2,r2,r2
 400190c:	2085883a 	add	r2,r4,r2
 4001910:	11000017 	ldw	r4,0(r2)
 4001914:	e0bcf117 	ldw	r2,-3132(fp)
 4001918:	2085883a 	add	r2,r4,r2
 400191c:	10800003 	ldbu	r2,0(r2)
 4001920:	10803fcc 	andi	r2,r2,255
 4001924:	1887883a 	add	r3,r3,r2
 4001928:	e0bcf017 	ldw	r2,-3136(fp)
 400192c:	1085883a 	add	r2,r2,r2
 4001930:	1085883a 	add	r2,r2,r2
 4001934:	e13cf004 	addi	r4,fp,-3136
 4001938:	2085883a 	add	r2,r4,r2
 400193c:	10800604 	addi	r2,r2,24
 4001940:	10c00015 	stw	r3,0(r2)

		// How many codes in total for each of LUMA_(DC|AC) and CHROMA_(DC|AC)
		int32_t spec_tables_len[4] = { 0 };

		for (int i = 0; i < 4; ++i) {
			for (int k = 0; k < 16; ++k) {
 4001944:	e0bcf117 	ldw	r2,-3132(fp)
 4001948:	10800044 	addi	r2,r2,1
 400194c:	e0bcf115 	stw	r2,-3132(fp)
 4001950:	e0bcf117 	ldw	r2,-3132(fp)
 4001954:	10800410 	cmplti	r2,r2,16
 4001958:	103fe01e 	bne	r2,zero,40018dc <__alt_data_end+0xfc0018dc>
		state->ht_vals[TJEI_CHROMA_AC] = tjei_default_ht_chroma_ac;

		// How many codes in total for each of LUMA_(DC|AC) and CHROMA_(DC|AC)
		int32_t spec_tables_len[4] = { 0 };

		for (int i = 0; i < 4; ++i) {
 400195c:	e0bcf017 	ldw	r2,-3136(fp)
 4001960:	10800044 	addi	r2,r2,1
 4001964:	e0bcf015 	stw	r2,-3136(fp)
 4001968:	e0bcf017 	ldw	r2,-3136(fp)
 400196c:	10800110 	cmplti	r2,r2,4
 4001970:	103fd81e 	bne	r2,zero,40018d4 <__alt_data_end+0xfc0018d4>
		}

		// Fill out the extended tables..
		uint8_t huffsize[4][257];
		uint16_t huffcode[4][256];
		for (int i = 0; i < 4; ++i) {
 4001974:	e03cf215 	stw	zero,-3128(fp)
 4001978:	00003a06 	br	4001a64 <tjei_huff_expand+0x274>
			assert(256 >= spec_tables_len[i]);
 400197c:	e0bcf217 	ldw	r2,-3128(fp)
 4001980:	1085883a 	add	r2,r2,r2
 4001984:	1085883a 	add	r2,r2,r2
 4001988:	e0fcf004 	addi	r3,fp,-3136
 400198c:	1885883a 	add	r2,r3,r2
 4001990:	10800604 	addi	r2,r2,24
 4001994:	10800017 	ldw	r2,0(r2)
 4001998:	10804050 	cmplti	r2,r2,257
 400199c:	1000081e 	bne	r2,zero,40019c0 <tjei_huff_expand+0x1d0>
 40019a0:	01c10074 	movhi	r7,1025
 40019a4:	39c45904 	addi	r7,r7,4452
 40019a8:	01810074 	movhi	r6,1025
 40019ac:	31849204 	addi	r6,r6,4680
 40019b0:	0140d704 	movi	r5,860
 40019b4:	01010074 	movhi	r4,1025
 40019b8:	21043a04 	addi	r4,r4,4328
 40019bc:	40088e00 	call	40088e0 <__assert_func>
			tjei_huff_get_code_lengths(huffsize[i], state->ht_bits[i]);
 40019c0:	e4bcfa04 	addi	r18,fp,-3096
 40019c4:	01404044 	movi	r5,257
 40019c8:	e13cf217 	ldw	r4,-3128(fp)
 40019cc:	40048b00 	call	40048b0 <__mulsi3>
 40019d0:	9089883a 	add	r4,r18,r2
 40019d4:	e0fffb17 	ldw	r3,-20(fp)
 40019d8:	e0bcf217 	ldw	r2,-3128(fp)
 40019dc:	1080c044 	addi	r2,r2,769
 40019e0:	1085883a 	add	r2,r2,r2
 40019e4:	1085883a 	add	r2,r2,r2
 40019e8:	1885883a 	add	r2,r3,r2
 40019ec:	10800017 	ldw	r2,0(r2)
 40019f0:	100b883a 	mov	r5,r2
 40019f4:	40006740 	call	4000674 <tjei_huff_get_code_lengths>
			tjei_huff_get_codes(huffcode[i], huffsize[i], spec_tables_len[i]);
 40019f8:	e0fdfb04 	addi	r3,fp,-2068
 40019fc:	e0bcf217 	ldw	r2,-3128(fp)
 4001a00:	1004927a 	slli	r2,r2,9
 4001a04:	18a7883a 	add	r19,r3,r2
 4001a08:	e4bcfa04 	addi	r18,fp,-3096
 4001a0c:	01404044 	movi	r5,257
 4001a10:	e13cf217 	ldw	r4,-3128(fp)
 4001a14:	40048b00 	call	40048b0 <__mulsi3>
 4001a18:	9087883a 	add	r3,r18,r2
 4001a1c:	e0bcf217 	ldw	r2,-3128(fp)
 4001a20:	1085883a 	add	r2,r2,r2
 4001a24:	1085883a 	add	r2,r2,r2
 4001a28:	e13cf004 	addi	r4,fp,-3136
 4001a2c:	2085883a 	add	r2,r4,r2
 4001a30:	10800604 	addi	r2,r2,24
 4001a34:	10800017 	ldw	r2,0(r2)
 4001a38:	1021883a 	mov	r16,r2
 4001a3c:	1005d7fa 	srai	r2,r2,31
 4001a40:	1023883a 	mov	r17,r2
 4001a44:	800d883a 	mov	r6,r16
 4001a48:	880f883a 	mov	r7,r17
 4001a4c:	180b883a 	mov	r5,r3
 4001a50:	9809883a 	mov	r4,r19
 4001a54:	40007240 	call	4000724 <tjei_huff_get_codes>
		}

		// Fill out the extended tables..
		uint8_t huffsize[4][257];
		uint16_t huffcode[4][256];
		for (int i = 0; i < 4; ++i) {
 4001a58:	e0bcf217 	ldw	r2,-3128(fp)
 4001a5c:	10800044 	addi	r2,r2,1
 4001a60:	e0bcf215 	stw	r2,-3128(fp)
 4001a64:	e0bcf217 	ldw	r2,-3128(fp)
 4001a68:	10800110 	cmplti	r2,r2,4
 4001a6c:	103fc31e 	bne	r2,zero,400197c <__alt_data_end+0xfc00197c>
			assert(256 >= spec_tables_len[i]);
			tjei_huff_get_code_lengths(huffsize[i], state->ht_bits[i]);
			tjei_huff_get_codes(huffcode[i], huffsize[i], spec_tables_len[i]);
		}
		for (int i = 0; i < 4; ++i) {
 4001a70:	e03cf315 	stw	zero,-3124(fp)
 4001a74:	00003206 	br	4001b40 <tjei_huff_expand+0x350>
			int64_t count = spec_tables_len[i];
 4001a78:	e0bcf317 	ldw	r2,-3124(fp)
 4001a7c:	1085883a 	add	r2,r2,r2
 4001a80:	1085883a 	add	r2,r2,r2
 4001a84:	e0fcf004 	addi	r3,fp,-3136
 4001a88:	1885883a 	add	r2,r3,r2
 4001a8c:	10800604 	addi	r2,r2,24
 4001a90:	10800017 	ldw	r2,0(r2)
 4001a94:	e0bcf415 	stw	r2,-3120(fp)
 4001a98:	1005d7fa 	srai	r2,r2,31
 4001a9c:	e0bcf515 	stw	r2,-3116(fp)
			tjei_huff_get_extended(state->ehuffsize[i],
 4001aa0:	01404044 	movi	r5,257
 4001aa4:	e13cf317 	ldw	r4,-3124(fp)
 4001aa8:	40048b00 	call	40048b0 <__mulsi3>
 4001aac:	1007883a 	mov	r3,r2
 4001ab0:	e0bffb17 	ldw	r2,-20(fp)
 4001ab4:	10e3883a 	add	r17,r2,r3
				state->ehuffcode[i],
 4001ab8:	e0bcf317 	ldw	r2,-3124(fp)
 4001abc:	1004927a 	slli	r2,r2,9
 4001ac0:	10810104 	addi	r2,r2,1028
 4001ac4:	e0fffb17 	ldw	r3,-20(fp)
 4001ac8:	18a5883a 	add	r18,r3,r2
			tjei_huff_get_code_lengths(huffsize[i], state->ht_bits[i]);
			tjei_huff_get_codes(huffcode[i], huffsize[i], spec_tables_len[i]);
		}
		for (int i = 0; i < 4; ++i) {
			int64_t count = spec_tables_len[i];
			tjei_huff_get_extended(state->ehuffsize[i],
 4001acc:	e0fffb17 	ldw	r3,-20(fp)
 4001ad0:	e0bcf317 	ldw	r2,-3124(fp)
 4001ad4:	1080c144 	addi	r2,r2,773
 4001ad8:	1085883a 	add	r2,r2,r2
 4001adc:	1085883a 	add	r2,r2,r2
 4001ae0:	1885883a 	add	r2,r3,r2
 4001ae4:	14c00017 	ldw	r19,0(r2)
 4001ae8:	e43cfa04 	addi	r16,fp,-3096
 4001aec:	01404044 	movi	r5,257
 4001af0:	e13cf317 	ldw	r4,-3124(fp)
 4001af4:	40048b00 	call	40048b0 <__mulsi3>
 4001af8:	8089883a 	add	r4,r16,r2
 4001afc:	e0fdfb04 	addi	r3,fp,-2068
 4001b00:	e0bcf317 	ldw	r2,-3124(fp)
 4001b04:	1004927a 	slli	r2,r2,9
 4001b08:	1885883a 	add	r2,r3,r2
 4001b0c:	e0fcf417 	ldw	r3,-3120(fp)
 4001b10:	d8c00115 	stw	r3,4(sp)
 4001b14:	e0fcf517 	ldw	r3,-3116(fp)
 4001b18:	d8c00215 	stw	r3,8(sp)
 4001b1c:	d8800015 	stw	r2,0(sp)
 4001b20:	200f883a 	mov	r7,r4
 4001b24:	980d883a 	mov	r6,r19
 4001b28:	900b883a 	mov	r5,r18
 4001b2c:	8809883a 	mov	r4,r17
 4001b30:	40008540 	call	4000854 <tjei_huff_get_extended>
		for (int i = 0; i < 4; ++i) {
			assert(256 >= spec_tables_len[i]);
			tjei_huff_get_code_lengths(huffsize[i], state->ht_bits[i]);
			tjei_huff_get_codes(huffcode[i], huffsize[i], spec_tables_len[i]);
		}
		for (int i = 0; i < 4; ++i) {
 4001b34:	e0bcf317 	ldw	r2,-3124(fp)
 4001b38:	10800044 	addi	r2,r2,1
 4001b3c:	e0bcf315 	stw	r2,-3124(fp)
 4001b40:	e0bcf317 	ldw	r2,-3124(fp)
 4001b44:	10800110 	cmplti	r2,r2,4
 4001b48:	103fcb1e 	bne	r2,zero,4001a78 <__alt_data_end+0xfc001a78>
				state->ehuffcode[i],
				state->ht_vals[i],
				&huffsize[i][0],
				&huffcode[i][0], count);
		}
	}
 4001b4c:	0001883a 	nop
 4001b50:	e6fffc04 	addi	sp,fp,-16
 4001b54:	dfc00517 	ldw	ra,20(sp)
 4001b58:	df000417 	ldw	fp,16(sp)
 4001b5c:	dcc00317 	ldw	r19,12(sp)
 4001b60:	dc800217 	ldw	r18,8(sp)
 4001b64:	dc400117 	ldw	r17,4(sp)
 4001b68:	dc000017 	ldw	r16,0(sp)
 4001b6c:	dec00604 	addi	sp,sp,24
 4001b70:	f800283a 	ret

04001b74 <tjei_encode_main>:
	static int tjei_encode_main(TJEState* state,
		const unsigned char* src_data,
		const int width,
		const int height,
		const int src_num_components)
	{
 4001b74:	defe8204 	addi	sp,sp,-1528
 4001b78:	dfc17d15 	stw	ra,1524(sp)
 4001b7c:	df017c15 	stw	fp,1520(sp)
 4001b80:	dc417b15 	stw	r17,1516(sp)
 4001b84:	dc017a15 	stw	r16,1512(sp)
 4001b88:	df017c04 	addi	fp,sp,1520
 4001b8c:	e13ffa15 	stw	r4,-24(fp)
 4001b90:	e17ffb15 	stw	r5,-20(fp)
 4001b94:	e1bffc15 	stw	r6,-16(fp)
 4001b98:	e1fffd15 	stw	r7,-12(fp)
		if (src_num_components != 3 && src_num_components != 4) {
 4001b9c:	e0800217 	ldw	r2,8(fp)
 4001ba0:	108000e0 	cmpeqi	r2,r2,3
 4001ba4:	1000051e 	bne	r2,zero,4001bbc <tjei_encode_main+0x48>
 4001ba8:	e0800217 	ldw	r2,8(fp)
 4001bac:	10800120 	cmpeqi	r2,r2,4
 4001bb0:	1000021e 	bne	r2,zero,4001bbc <tjei_encode_main+0x48>
			return 0;
 4001bb4:	0005883a 	mov	r2,zero
 4001bb8:	00037406 	br	400298c <tjei_encode_main+0xe18>
		}

		if (width > 0xffff || height > 0xffff) {
 4001bbc:	e0bffc17 	ldw	r2,-16(fp)
 4001bc0:	00ffffd4 	movui	r3,65535
 4001bc4:	18800316 	blt	r3,r2,4001bd4 <tjei_encode_main+0x60>
 4001bc8:	e0bffd17 	ldw	r2,-12(fp)
 4001bcc:	00ffffd4 	movui	r3,65535
 4001bd0:	1880020e 	bge	r3,r2,4001bdc <tjei_encode_main+0x68>
			return 0;
 4001bd4:	0005883a 	mov	r2,zero
 4001bd8:	00036c06 	br	400298c <tjei_encode_main+0xe18>
			1.0f, 1.387039845f, 1.306562965f, 1.175875602f,
			1.0f, 0.785694958f, 0.541196100f, 0.275899379f
		};

		// build (de)quantization tables
		for (int y = 0; y < 8; y++) {
 4001bdc:	e03e8a15 	stw	zero,-1496(fp)
 4001be0:	00008306 	br	4001df0 <tjei_encode_main+0x27c>
			for (int x = 0; x < 8; x++) {
 4001be4:	e03e8b15 	stw	zero,-1492(fp)
 4001be8:	00007b06 	br	4001dd8 <tjei_encode_main+0x264>
				int i = y * 8 + x;
 4001bec:	e0be8a17 	ldw	r2,-1496(fp)
 4001bf0:	100690fa 	slli	r3,r2,3
 4001bf4:	e0be8b17 	ldw	r2,-1492(fp)
 4001bf8:	1885883a 	add	r2,r3,r2
 4001bfc:	e0be9315 	stw	r2,-1460(fp)
				pqt.luma[y * 8 + x] = 1.0f / (8 * aan_scales[x] * aan_scales[y] * state->qt_luma[tjei_zig_zag[i]]);
 4001c00:	e0be8a17 	ldw	r2,-1496(fp)
 4001c04:	100690fa 	slli	r3,r2,3
 4001c08:	e0be8b17 	ldw	r2,-1492(fp)
 4001c0c:	18a1883a 	add	r16,r3,r2
 4001c10:	00810074 	movhi	r2,1025
 4001c14:	10849704 	addi	r2,r2,4700
 4001c18:	e0fe8b17 	ldw	r3,-1492(fp)
 4001c1c:	18c7883a 	add	r3,r3,r3
 4001c20:	18c7883a 	add	r3,r3,r3
 4001c24:	10c5883a 	add	r2,r2,r3
 4001c28:	10c00017 	ldw	r3,0(r2)
 4001c2c:	01504034 	movhi	r5,16640
 4001c30:	1809883a 	mov	r4,r3
 4001c34:	40053640 	call	4005364 <__mulsf3>
 4001c38:	1007883a 	mov	r3,r2
 4001c3c:	1809883a 	mov	r4,r3
 4001c40:	00810074 	movhi	r2,1025
 4001c44:	10849704 	addi	r2,r2,4700
 4001c48:	e0fe8a17 	ldw	r3,-1496(fp)
 4001c4c:	18c7883a 	add	r3,r3,r3
 4001c50:	18c7883a 	add	r3,r3,r3
 4001c54:	10c5883a 	add	r2,r2,r3
 4001c58:	10c00017 	ldw	r3,0(r2)
 4001c5c:	180b883a 	mov	r5,r3
 4001c60:	40053640 	call	4005364 <__mulsf3>
 4001c64:	1007883a 	mov	r3,r2
 4001c68:	1823883a 	mov	r17,r3
 4001c6c:	00810074 	movhi	r2,1025
 4001c70:	10841504 	addi	r2,r2,4180
 4001c74:	e0fe9317 	ldw	r3,-1460(fp)
 4001c78:	10c5883a 	add	r2,r2,r3
 4001c7c:	10800003 	ldbu	r2,0(r2)
 4001c80:	10803fcc 	andi	r2,r2,255
 4001c84:	e0fffa17 	ldw	r3,-24(fp)
 4001c88:	1885883a 	add	r2,r3,r2
 4001c8c:	10830904 	addi	r2,r2,3108
 4001c90:	10800003 	ldbu	r2,0(r2)
 4001c94:	10803fcc 	andi	r2,r2,255
 4001c98:	1009883a 	mov	r4,r2
 4001c9c:	4005ce80 	call	4005ce8 <__floatsisf>
 4001ca0:	1007883a 	mov	r3,r2
 4001ca4:	180b883a 	mov	r5,r3
 4001ca8:	8809883a 	mov	r4,r17
 4001cac:	40053640 	call	4005364 <__mulsf3>
 4001cb0:	1007883a 	mov	r3,r2
 4001cb4:	1805883a 	mov	r2,r3
 4001cb8:	100b883a 	mov	r5,r2
 4001cbc:	010fe034 	movhi	r4,16256
 4001cc0:	4004da00 	call	4004da0 <__divsf3>
 4001cc4:	1009883a 	mov	r4,r2
 4001cc8:	2007883a 	mov	r3,r4
 4001ccc:	80801004 	addi	r2,r16,64
 4001cd0:	1085883a 	add	r2,r2,r2
 4001cd4:	1085883a 	add	r2,r2,r2
 4001cd8:	e13e8a04 	addi	r4,fp,-1496
 4001cdc:	2085883a 	add	r2,r4,r2
 4001ce0:	10801204 	addi	r2,r2,72
 4001ce4:	10c00015 	stw	r3,0(r2)
				pqt.chroma[y * 8 + x] = 1.0f / (8 * aan_scales[x] * aan_scales[y] * state->qt_chroma[tjei_zig_zag[i]]);
 4001ce8:	e0be8a17 	ldw	r2,-1496(fp)
 4001cec:	100690fa 	slli	r3,r2,3
 4001cf0:	e0be8b17 	ldw	r2,-1492(fp)
 4001cf4:	18a1883a 	add	r16,r3,r2
 4001cf8:	00810074 	movhi	r2,1025
 4001cfc:	10849704 	addi	r2,r2,4700
 4001d00:	e0fe8b17 	ldw	r3,-1492(fp)
 4001d04:	18c7883a 	add	r3,r3,r3
 4001d08:	18c7883a 	add	r3,r3,r3
 4001d0c:	10c5883a 	add	r2,r2,r3
 4001d10:	10c00017 	ldw	r3,0(r2)
 4001d14:	01504034 	movhi	r5,16640
 4001d18:	1809883a 	mov	r4,r3
 4001d1c:	40053640 	call	4005364 <__mulsf3>
 4001d20:	1007883a 	mov	r3,r2
 4001d24:	1809883a 	mov	r4,r3
 4001d28:	00810074 	movhi	r2,1025
 4001d2c:	10849704 	addi	r2,r2,4700
 4001d30:	e0fe8a17 	ldw	r3,-1496(fp)
 4001d34:	18c7883a 	add	r3,r3,r3
 4001d38:	18c7883a 	add	r3,r3,r3
 4001d3c:	10c5883a 	add	r2,r2,r3
 4001d40:	10c00017 	ldw	r3,0(r2)
 4001d44:	180b883a 	mov	r5,r3
 4001d48:	40053640 	call	4005364 <__mulsf3>
 4001d4c:	1007883a 	mov	r3,r2
 4001d50:	1823883a 	mov	r17,r3
 4001d54:	00810074 	movhi	r2,1025
 4001d58:	10841504 	addi	r2,r2,4180
 4001d5c:	e0fe9317 	ldw	r3,-1460(fp)
 4001d60:	10c5883a 	add	r2,r2,r3
 4001d64:	10800003 	ldbu	r2,0(r2)
 4001d68:	10803fcc 	andi	r2,r2,255
 4001d6c:	e0fffa17 	ldw	r3,-24(fp)
 4001d70:	1885883a 	add	r2,r3,r2
 4001d74:	10831904 	addi	r2,r2,3172
 4001d78:	10800003 	ldbu	r2,0(r2)
 4001d7c:	10803fcc 	andi	r2,r2,255
 4001d80:	1009883a 	mov	r4,r2
 4001d84:	4005ce80 	call	4005ce8 <__floatsisf>
 4001d88:	1007883a 	mov	r3,r2
 4001d8c:	180b883a 	mov	r5,r3
 4001d90:	8809883a 	mov	r4,r17
 4001d94:	40053640 	call	4005364 <__mulsf3>
 4001d98:	1007883a 	mov	r3,r2
 4001d9c:	1805883a 	mov	r2,r3
 4001da0:	100b883a 	mov	r5,r2
 4001da4:	010fe034 	movhi	r4,16256
 4001da8:	4004da00 	call	4004da0 <__divsf3>
 4001dac:	1009883a 	mov	r4,r2
 4001db0:	2007883a 	mov	r3,r4
 4001db4:	8405883a 	add	r2,r16,r16
 4001db8:	1085883a 	add	r2,r2,r2
 4001dbc:	e13e8a04 	addi	r4,fp,-1496
 4001dc0:	2085883a 	add	r2,r4,r2
 4001dc4:	10801204 	addi	r2,r2,72
 4001dc8:	10c00015 	stw	r3,0(r2)
			1.0f, 0.785694958f, 0.541196100f, 0.275899379f
		};

		// build (de)quantization tables
		for (int y = 0; y < 8; y++) {
			for (int x = 0; x < 8; x++) {
 4001dcc:	e0be8b17 	ldw	r2,-1492(fp)
 4001dd0:	10800044 	addi	r2,r2,1
 4001dd4:	e0be8b15 	stw	r2,-1492(fp)
 4001dd8:	e0be8b17 	ldw	r2,-1492(fp)
 4001ddc:	10800210 	cmplti	r2,r2,8
 4001de0:	103f821e 	bne	r2,zero,4001bec <__alt_data_end+0xfc001bec>
			1.0f, 1.387039845f, 1.306562965f, 1.175875602f,
			1.0f, 0.785694958f, 0.541196100f, 0.275899379f
		};

		// build (de)quantization tables
		for (int y = 0; y < 8; y++) {
 4001de4:	e0be8a17 	ldw	r2,-1496(fp)
 4001de8:	10800044 	addi	r2,r2,1
 4001dec:	e0be8a15 	stw	r2,-1496(fp)
 4001df0:	e0be8a17 	ldw	r2,-1496(fp)
 4001df4:	10800210 	cmplti	r2,r2,8
 4001df8:	103f7a1e 	bne	r2,zero,4001be4 <__alt_data_end+0xfc001be4>
#endif

		{ // Write header
			TJEJPEGHeader header;
			// JFIF header.
			header.SOI = tjei_be_word(0xffd8);  // Sequential DCT
 4001dfc:	013ff614 	movui	r4,65496
 4001e00:	400026c0 	call	400026c <tjei_be_word>
 4001e04:	e0bfe18d 	sth	r2,-122(fp)
			header.APP0 = tjei_be_word(0xffe0);
 4001e08:	013ff814 	movui	r4,65504
 4001e0c:	400026c0 	call	400026c <tjei_be_word>
 4001e10:	e0bfe20d 	sth	r2,-120(fp)

			uint16_t jfif_len = sizeof(TJEJPEGHeader) - 4 /*SOI & APP0 markers*/;
 4001e14:	00800404 	movi	r2,16
 4001e18:	e0be940d 	sth	r2,-1456(fp)
			header.jfif_len = tjei_be_word(jfif_len);
 4001e1c:	e0be940b 	ldhu	r2,-1456(fp)
 4001e20:	1009883a 	mov	r4,r2
 4001e24:	400026c0 	call	400026c <tjei_be_word>
 4001e28:	e0bfe28d 	sth	r2,-118(fp)
			memcpy(header.jfif_id, (void*)tjeik_jfif_id, 5);
 4001e2c:	d0a0000b 	ldhu	r2,-32768(gp)
 4001e30:	e0bfe30d 	sth	r2,-116(fp)
 4001e34:	d0a0008b 	ldhu	r2,-32766(gp)
 4001e38:	e0bfe38d 	sth	r2,-114(fp)
 4001e3c:	d0a00103 	ldbu	r2,-32764(gp)
 4001e40:	e0bfe405 	stb	r2,-112(fp)
			header.version = tjei_be_word(0x0102);
 4001e44:	01004084 	movi	r4,258
 4001e48:	400026c0 	call	400026c <tjei_be_word>
 4001e4c:	100b883a 	mov	r5,r2
 4001e50:	28bfffcc 	andi	r2,r5,65535
 4001e54:	11003fcc 	andi	r4,r2,255
 4001e58:	e0bfe443 	ldbu	r2,-111(fp)
 4001e5c:	1004703a 	and	r2,r2,zero
 4001e60:	1007883a 	mov	r3,r2
 4001e64:	2005883a 	mov	r2,r4
 4001e68:	1884b03a 	or	r2,r3,r2
 4001e6c:	e0bfe445 	stb	r2,-111(fp)
 4001e70:	28bfffcc 	andi	r2,r5,65535
 4001e74:	1004d23a 	srli	r2,r2,8
 4001e78:	113fffcc 	andi	r4,r2,65535
 4001e7c:	e0bfe483 	ldbu	r2,-110(fp)
 4001e80:	1004703a 	and	r2,r2,zero
 4001e84:	1007883a 	mov	r3,r2
 4001e88:	2005883a 	mov	r2,r4
 4001e8c:	1884b03a 	or	r2,r3,r2
 4001e90:	e0bfe485 	stb	r2,-110(fp)
			header.units = 0x01;  // Dots-per-inch
 4001e94:	00800044 	movi	r2,1
 4001e98:	e0bfe4c5 	stb	r2,-109(fp)
			header.x_density = tjei_be_word(0x0060);  // 96 DPI
 4001e9c:	01001804 	movi	r4,96
 4001ea0:	400026c0 	call	400026c <tjei_be_word>
 4001ea4:	e0bfe50d 	sth	r2,-108(fp)
			header.y_density = tjei_be_word(0x0060);  // 96 DPI
 4001ea8:	01001804 	movi	r4,96
 4001eac:	400026c0 	call	400026c <tjei_be_word>
 4001eb0:	e0bfe58d 	sth	r2,-106(fp)
			header.x_thumb = 0;
 4001eb4:	e03fe605 	stb	zero,-104(fp)
			header.y_thumb = 0;
 4001eb8:	e03fe645 	stb	zero,-103(fp)
			tjei_write(state, &header, sizeof(TJEJPEGHeader), 1);
 4001ebc:	e0bfe184 	addi	r2,fp,-122
 4001ec0:	01c00044 	movi	r7,1
 4001ec4:	01800504 	movi	r6,20
 4001ec8:	100b883a 	mov	r5,r2
 4001ecc:	e13ffa17 	ldw	r4,-24(fp)
 4001ed0:	40002bc0 	call	40002bc <tjei_write>
		}
		{  // Write comment
			TJEJPEGComment com;
			uint16_t com_len = 2 + sizeof(tjeik_com_str) - 1;
 4001ed4:	00800784 	movi	r2,30
 4001ed8:	e0be948d 	sth	r2,-1454(fp)
			// Comment
			com.com = tjei_be_word(0xfffe);
 4001edc:	013fff94 	movui	r4,65534
 4001ee0:	400026c0 	call	400026c <tjei_be_word>
 4001ee4:	e0bff18d 	sth	r2,-58(fp)
			com.com_len = tjei_be_word(com_len);
 4001ee8:	e0be948b 	ldhu	r2,-1454(fp)
 4001eec:	1009883a 	mov	r4,r2
 4001ef0:	400026c0 	call	400026c <tjei_be_word>
 4001ef4:	e0bff20d 	sth	r2,-56(fp)
			memcpy(com.com_str, (void*)tjeik_com_str, sizeof(tjeik_com_str) - 1);
 4001ef8:	00810074 	movhi	r2,1025
 4001efc:	10842504 	addi	r2,r2,4244
 4001f00:	10c0000b 	ldhu	r3,0(r2)
 4001f04:	e0fff28d 	sth	r3,-54(fp)
 4001f08:	10c0008b 	ldhu	r3,2(r2)
 4001f0c:	e0fff30d 	sth	r3,-52(fp)
 4001f10:	10c0010b 	ldhu	r3,4(r2)
 4001f14:	e0fff38d 	sth	r3,-50(fp)
 4001f18:	10c0018b 	ldhu	r3,6(r2)
 4001f1c:	e0fff40d 	sth	r3,-48(fp)
 4001f20:	10c0020b 	ldhu	r3,8(r2)
 4001f24:	e0fff48d 	sth	r3,-46(fp)
 4001f28:	10c0028b 	ldhu	r3,10(r2)
 4001f2c:	e0fff50d 	sth	r3,-44(fp)
 4001f30:	10c0030b 	ldhu	r3,12(r2)
 4001f34:	e0fff58d 	sth	r3,-42(fp)
 4001f38:	10c0038b 	ldhu	r3,14(r2)
 4001f3c:	e0fff60d 	sth	r3,-40(fp)
 4001f40:	10c0040b 	ldhu	r3,16(r2)
 4001f44:	e0fff68d 	sth	r3,-38(fp)
 4001f48:	10c0048b 	ldhu	r3,18(r2)
 4001f4c:	e0fff70d 	sth	r3,-36(fp)
 4001f50:	10c0050b 	ldhu	r3,20(r2)
 4001f54:	e0fff78d 	sth	r3,-34(fp)
 4001f58:	10c0058b 	ldhu	r3,22(r2)
 4001f5c:	e0fff80d 	sth	r3,-32(fp)
 4001f60:	10c0060b 	ldhu	r3,24(r2)
 4001f64:	e0fff88d 	sth	r3,-30(fp)
 4001f68:	1080068b 	ldhu	r2,26(r2)
 4001f6c:	e0bff90d 	sth	r2,-28(fp)
			tjei_write(state, &com, sizeof(TJEJPEGComment), 1);
 4001f70:	e0bff184 	addi	r2,fp,-58
 4001f74:	01c00044 	movi	r7,1
 4001f78:	01800804 	movi	r6,32
 4001f7c:	100b883a 	mov	r5,r2
 4001f80:	e13ffa17 	ldw	r4,-24(fp)
 4001f84:	40002bc0 	call	40002bc <tjei_write>
		}

		// Write quantization tables.
		tjei_write_DQT(state, state->qt_luma, 0x00);
 4001f88:	e0bffa17 	ldw	r2,-24(fp)
 4001f8c:	10830904 	addi	r2,r2,3108
 4001f90:	000d883a 	mov	r6,zero
 4001f94:	100b883a 	mov	r5,r2
 4001f98:	e13ffa17 	ldw	r4,-24(fp)
 4001f9c:	40004080 	call	4000408 <tjei_write_DQT>
		tjei_write_DQT(state, state->qt_chroma, 0x01);
 4001fa0:	e0bffa17 	ldw	r2,-24(fp)
 4001fa4:	10831904 	addi	r2,r2,3172
 4001fa8:	01800044 	movi	r6,1
 4001fac:	100b883a 	mov	r5,r2
 4001fb0:	e13ffa17 	ldw	r4,-24(fp)
 4001fb4:	40004080 	call	4000408 <tjei_write_DQT>

		{  // Write the frame marker.
			TJEFrameHeader header;
			header.SOF = tjei_be_word(0xffc0);
 4001fb8:	013ff014 	movui	r4,65472
 4001fbc:	400026c0 	call	400026c <tjei_be_word>
 4001fc0:	e0bfe68d 	sth	r2,-102(fp)
			header.len = tjei_be_word(8 + 3 * 3);
 4001fc4:	01000444 	movi	r4,17
 4001fc8:	400026c0 	call	400026c <tjei_be_word>
 4001fcc:	e0bfe70d 	sth	r2,-100(fp)
			header.precision = 8;
 4001fd0:	00800204 	movi	r2,8
 4001fd4:	e0bfe785 	stb	r2,-98(fp)
			assert(width <= 0xffff);
 4001fd8:	e0bffc17 	ldw	r2,-16(fp)
 4001fdc:	00ffffd4 	movui	r3,65535
 4001fe0:	1880080e 	bge	r3,r2,4002004 <tjei_encode_main+0x490>
 4001fe4:	01c10074 	movhi	r7,1025
 4001fe8:	39c46004 	addi	r7,r7,4480
 4001fec:	01810074 	movhi	r6,1025
 4001ff0:	31849f04 	addi	r6,r6,4732
 4001ff4:	0140edc4 	movi	r5,951
 4001ff8:	01010074 	movhi	r4,1025
 4001ffc:	21043a04 	addi	r4,r4,4328
 4002000:	40088e00 	call	40088e0 <__assert_func>
			assert(height <= 0xffff);
 4002004:	e0bffd17 	ldw	r2,-12(fp)
 4002008:	00ffffd4 	movui	r3,65535
 400200c:	1880080e 	bge	r3,r2,4002030 <tjei_encode_main+0x4bc>
 4002010:	01c10074 	movhi	r7,1025
 4002014:	39c46404 	addi	r7,r7,4496
 4002018:	01810074 	movhi	r6,1025
 400201c:	31849f04 	addi	r6,r6,4732
 4002020:	0140ee04 	movi	r5,952
 4002024:	01010074 	movhi	r4,1025
 4002028:	21043a04 	addi	r4,r4,4328
 400202c:	40088e00 	call	40088e0 <__assert_func>
			header.width = tjei_be_word((uint16_t)width);
 4002030:	e0bffc17 	ldw	r2,-16(fp)
 4002034:	10bfffcc 	andi	r2,r2,65535
 4002038:	1009883a 	mov	r4,r2
 400203c:	400026c0 	call	400026c <tjei_be_word>
 4002040:	100b883a 	mov	r5,r2
 4002044:	28bfffcc 	andi	r2,r5,65535
 4002048:	11003fcc 	andi	r4,r2,255
 400204c:	e0bfe843 	ldbu	r2,-95(fp)
 4002050:	1004703a 	and	r2,r2,zero
 4002054:	1007883a 	mov	r3,r2
 4002058:	2005883a 	mov	r2,r4
 400205c:	1884b03a 	or	r2,r3,r2
 4002060:	e0bfe845 	stb	r2,-95(fp)
 4002064:	28bfffcc 	andi	r2,r5,65535
 4002068:	1004d23a 	srli	r2,r2,8
 400206c:	113fffcc 	andi	r4,r2,65535
 4002070:	e0bfe883 	ldbu	r2,-94(fp)
 4002074:	1004703a 	and	r2,r2,zero
 4002078:	1007883a 	mov	r3,r2
 400207c:	2005883a 	mov	r2,r4
 4002080:	1884b03a 	or	r2,r3,r2
 4002084:	e0bfe885 	stb	r2,-94(fp)
			header.height = tjei_be_word((uint16_t)height);
 4002088:	e0bffd17 	ldw	r2,-12(fp)
 400208c:	10bfffcc 	andi	r2,r2,65535
 4002090:	1009883a 	mov	r4,r2
 4002094:	400026c0 	call	400026c <tjei_be_word>
 4002098:	100b883a 	mov	r5,r2
 400209c:	28bfffcc 	andi	r2,r5,65535
 40020a0:	11003fcc 	andi	r4,r2,255
 40020a4:	e0bfe7c3 	ldbu	r2,-97(fp)
 40020a8:	1004703a 	and	r2,r2,zero
 40020ac:	1007883a 	mov	r3,r2
 40020b0:	2005883a 	mov	r2,r4
 40020b4:	1884b03a 	or	r2,r3,r2
 40020b8:	e0bfe7c5 	stb	r2,-97(fp)
 40020bc:	28bfffcc 	andi	r2,r5,65535
 40020c0:	1004d23a 	srli	r2,r2,8
 40020c4:	113fffcc 	andi	r4,r2,65535
 40020c8:	e0bfe803 	ldbu	r2,-96(fp)
 40020cc:	1004703a 	and	r2,r2,zero
 40020d0:	1007883a 	mov	r3,r2
 40020d4:	2005883a 	mov	r2,r4
 40020d8:	1884b03a 	or	r2,r3,r2
 40020dc:	e0bfe805 	stb	r2,-96(fp)
			header.num_components = 3;
 40020e0:	008000c4 	movi	r2,3
 40020e4:	e0bfe8c5 	stb	r2,-93(fp)
			uint8_t tables[3] = {
 40020e8:	e03feb45 	stb	zero,-83(fp)
 40020ec:	00800044 	movi	r2,1
 40020f0:	e0bfeb85 	stb	r2,-82(fp)
 40020f4:	00800044 	movi	r2,1
 40020f8:	e0bfebc5 	stb	r2,-81(fp)
				0,  // Luma component gets luma table (see tjei_write_DQT call above.)
				1,  // Chroma component gets chroma table
				1,  // Chroma component gets chroma table
			};
			for (int i = 0; i < 3; ++i) {
 40020fc:	e03e8c15 	stw	zero,-1488(fp)
 4002100:	00001a06 	br	400216c <tjei_encode_main+0x5f8>
				TJEComponentSpec spec;
				spec.component_id = (uint8_t)(i + 1);  // No particular reason. Just 1, 2, 3.
 4002104:	e0be8c17 	ldw	r2,-1488(fp)
 4002108:	10800044 	addi	r2,r2,1
 400210c:	e0bfec05 	stb	r2,-80(fp)
				spec.sampling_factors = (uint8_t)0x11;
 4002110:	00800444 	movi	r2,17
 4002114:	e0bfec45 	stb	r2,-79(fp)
				spec.qt = tables[i];
 4002118:	e0ffeb44 	addi	r3,fp,-83
 400211c:	e0be8c17 	ldw	r2,-1488(fp)
 4002120:	1885883a 	add	r2,r3,r2
 4002124:	10800003 	ldbu	r2,0(r2)
 4002128:	e0bfec85 	stb	r2,-78(fp)

				header.component_spec[i] = spec;
 400212c:	e0fe8c17 	ldw	r3,-1488(fp)
 4002130:	1805883a 	mov	r2,r3
 4002134:	1085883a 	add	r2,r2,r2
 4002138:	10c5883a 	add	r2,r2,r3
 400213c:	e0fe8a04 	addi	r3,fp,-1496
 4002140:	1885883a 	add	r2,r3,r2
 4002144:	10815e84 	addi	r2,r2,1402
 4002148:	e0ffec03 	ldbu	r3,-80(fp)
 400214c:	10c00085 	stb	r3,2(r2)
 4002150:	e0ffec43 	ldbu	r3,-79(fp)
 4002154:	10c000c5 	stb	r3,3(r2)
 4002158:	e0ffec83 	ldbu	r3,-78(fp)
 400215c:	10c00105 	stb	r3,4(r2)
			uint8_t tables[3] = {
				0,  // Luma component gets luma table (see tjei_write_DQT call above.)
				1,  // Chroma component gets chroma table
				1,  // Chroma component gets chroma table
			};
			for (int i = 0; i < 3; ++i) {
 4002160:	e0be8c17 	ldw	r2,-1488(fp)
 4002164:	10800044 	addi	r2,r2,1
 4002168:	e0be8c15 	stw	r2,-1488(fp)
 400216c:	e0be8c17 	ldw	r2,-1488(fp)
 4002170:	108000d0 	cmplti	r2,r2,3
 4002174:	103fe31e 	bne	r2,zero,4002104 <__alt_data_end+0xfc002104>
				spec.qt = tables[i];

				header.component_spec[i] = spec;
			}
			// Write to file.
			tjei_write(state, &header, sizeof(TJEFrameHeader), 1);
 4002178:	e0bfe684 	addi	r2,fp,-102
 400217c:	01c00044 	movi	r7,1
 4002180:	018004c4 	movi	r6,19
 4002184:	100b883a 	mov	r5,r2
 4002188:	e13ffa17 	ldw	r4,-24(fp)
 400218c:	40002bc0 	call	40002bc <tjei_write>
		}

		tjei_write_DHT(state, state->ht_bits[TJEI_LUMA_DC], state->ht_vals[TJEI_LUMA_DC], TJEI_DC, 0);
 4002190:	e0bffa17 	ldw	r2,-24(fp)
 4002194:	10c30117 	ldw	r3,3076(r2)
 4002198:	e0bffa17 	ldw	r2,-24(fp)
 400219c:	10830517 	ldw	r2,3092(r2)
 40021a0:	d8000015 	stw	zero,0(sp)
 40021a4:	000f883a 	mov	r7,zero
 40021a8:	100d883a 	mov	r6,r2
 40021ac:	180b883a 	mov	r5,r3
 40021b0:	e13ffa17 	ldw	r4,-24(fp)
 40021b4:	40004e40 	call	40004e4 <tjei_write_DHT>
		tjei_write_DHT(state, state->ht_bits[TJEI_LUMA_AC], state->ht_vals[TJEI_LUMA_AC], TJEI_AC, 0);
 40021b8:	e0bffa17 	ldw	r2,-24(fp)
 40021bc:	10c30217 	ldw	r3,3080(r2)
 40021c0:	e0bffa17 	ldw	r2,-24(fp)
 40021c4:	10830617 	ldw	r2,3096(r2)
 40021c8:	d8000015 	stw	zero,0(sp)
 40021cc:	01c00044 	movi	r7,1
 40021d0:	100d883a 	mov	r6,r2
 40021d4:	180b883a 	mov	r5,r3
 40021d8:	e13ffa17 	ldw	r4,-24(fp)
 40021dc:	40004e40 	call	40004e4 <tjei_write_DHT>
		tjei_write_DHT(state, state->ht_bits[TJEI_CHROMA_DC], state->ht_vals[TJEI_CHROMA_DC], TJEI_DC, 1);
 40021e0:	e0bffa17 	ldw	r2,-24(fp)
 40021e4:	10c30317 	ldw	r3,3084(r2)
 40021e8:	e0bffa17 	ldw	r2,-24(fp)
 40021ec:	11030717 	ldw	r4,3100(r2)
 40021f0:	00800044 	movi	r2,1
 40021f4:	d8800015 	stw	r2,0(sp)
 40021f8:	000f883a 	mov	r7,zero
 40021fc:	200d883a 	mov	r6,r4
 4002200:	180b883a 	mov	r5,r3
 4002204:	e13ffa17 	ldw	r4,-24(fp)
 4002208:	40004e40 	call	40004e4 <tjei_write_DHT>
		tjei_write_DHT(state, state->ht_bits[TJEI_CHROMA_AC], state->ht_vals[TJEI_CHROMA_AC], TJEI_AC, 1);
 400220c:	e0bffa17 	ldw	r2,-24(fp)
 4002210:	10c30417 	ldw	r3,3088(r2)
 4002214:	e0bffa17 	ldw	r2,-24(fp)
 4002218:	11030817 	ldw	r4,3104(r2)
 400221c:	00800044 	movi	r2,1
 4002220:	d8800015 	stw	r2,0(sp)
 4002224:	01c00044 	movi	r7,1
 4002228:	200d883a 	mov	r6,r4
 400222c:	180b883a 	mov	r5,r3
 4002230:	e13ffa17 	ldw	r4,-24(fp)
 4002234:	40004e40 	call	40004e4 <tjei_write_DHT>

		// Write start of scan
		{
			TJEScanHeader header;
			header.SOS = tjei_be_word(0xffda);
 4002238:	013ff694 	movui	r4,65498
 400223c:	400026c0 	call	400026c <tjei_be_word>
 4002240:	100b883a 	mov	r5,r2
 4002244:	28bfffcc 	andi	r2,r5,65535
 4002248:	11003fcc 	andi	r4,r2,255
 400224c:	e0bfecc3 	ldbu	r2,-77(fp)
 4002250:	1004703a 	and	r2,r2,zero
 4002254:	1007883a 	mov	r3,r2
 4002258:	2005883a 	mov	r2,r4
 400225c:	1884b03a 	or	r2,r3,r2
 4002260:	e0bfecc5 	stb	r2,-77(fp)
 4002264:	28bfffcc 	andi	r2,r5,65535
 4002268:	1004d23a 	srli	r2,r2,8
 400226c:	113fffcc 	andi	r4,r2,65535
 4002270:	e0bfed03 	ldbu	r2,-76(fp)
 4002274:	1004703a 	and	r2,r2,zero
 4002278:	1007883a 	mov	r3,r2
 400227c:	2005883a 	mov	r2,r4
 4002280:	1884b03a 	or	r2,r3,r2
 4002284:	e0bfed05 	stb	r2,-76(fp)
			header.len = tjei_be_word((uint16_t)(6 + (sizeof(TJEFrameComponentSpec) * 3)));
 4002288:	01000304 	movi	r4,12
 400228c:	400026c0 	call	400026c <tjei_be_word>
 4002290:	100b883a 	mov	r5,r2
 4002294:	28bfffcc 	andi	r2,r5,65535
 4002298:	11003fcc 	andi	r4,r2,255
 400229c:	e0bfed43 	ldbu	r2,-75(fp)
 40022a0:	1004703a 	and	r2,r2,zero
 40022a4:	1007883a 	mov	r3,r2
 40022a8:	2005883a 	mov	r2,r4
 40022ac:	1884b03a 	or	r2,r3,r2
 40022b0:	e0bfed45 	stb	r2,-75(fp)
 40022b4:	28bfffcc 	andi	r2,r5,65535
 40022b8:	1004d23a 	srli	r2,r2,8
 40022bc:	113fffcc 	andi	r4,r2,65535
 40022c0:	e0bfed83 	ldbu	r2,-74(fp)
 40022c4:	1004703a 	and	r2,r2,zero
 40022c8:	1007883a 	mov	r3,r2
 40022cc:	2005883a 	mov	r2,r4
 40022d0:	1884b03a 	or	r2,r3,r2
 40022d4:	e0bfed85 	stb	r2,-74(fp)
			header.num_components = 3;
 40022d8:	008000c4 	movi	r2,3
 40022dc:	e0bfedc5 	stb	r2,-73(fp)

			uint8_t tables[3] = {
 40022e0:	e03ff045 	stb	zero,-63(fp)
 40022e4:	00800444 	movi	r2,17
 40022e8:	e0bff085 	stb	r2,-62(fp)
 40022ec:	00800444 	movi	r2,17
 40022f0:	e0bff0c5 	stb	r2,-61(fp)
				0x00,
				0x11,
				0x11,
			};
			for (int i = 0; i < 3; ++i) {
 40022f4:	e03e8d15 	stw	zero,-1484(fp)
 40022f8:	00001506 	br	4002350 <tjei_encode_main+0x7dc>
				TJEFrameComponentSpec cs;
				// Must be equal to component_id from frame header above.
				cs.component_id = (uint8_t)(i + 1);
 40022fc:	e0be8d17 	ldw	r2,-1484(fp)
 4002300:	10800044 	addi	r2,r2,1
 4002304:	e0bff105 	stb	r2,-60(fp)
				cs.dc_ac = (uint8_t)tables[i];
 4002308:	e0fff044 	addi	r3,fp,-63
 400230c:	e0be8d17 	ldw	r2,-1484(fp)
 4002310:	1885883a 	add	r2,r3,r2
 4002314:	10800003 	ldbu	r2,0(r2)
 4002318:	e0bff145 	stb	r2,-59(fp)

				header.component_spec[i] = cs;
 400231c:	e0be8d17 	ldw	r2,-1484(fp)
 4002320:	10800084 	addi	r2,r2,2
 4002324:	1085883a 	add	r2,r2,r2
 4002328:	e13e8a04 	addi	r4,fp,-1496
 400232c:	2085883a 	add	r2,r4,r2
 4002330:	108162c4 	addi	r2,r2,1419
 4002334:	e0fff103 	ldbu	r3,-60(fp)
 4002338:	10c00045 	stb	r3,1(r2)
 400233c:	e0fff143 	ldbu	r3,-59(fp)
 4002340:	10c00085 	stb	r3,2(r2)
			uint8_t tables[3] = {
				0x00,
				0x11,
				0x11,
			};
			for (int i = 0; i < 3; ++i) {
 4002344:	e0be8d17 	ldw	r2,-1484(fp)
 4002348:	10800044 	addi	r2,r2,1
 400234c:	e0be8d15 	stw	r2,-1484(fp)
 4002350:	e0be8d17 	ldw	r2,-1484(fp)
 4002354:	108000d0 	cmplti	r2,r2,3
 4002358:	103fe81e 	bne	r2,zero,40022fc <__alt_data_end+0xfc0022fc>
				cs.component_id = (uint8_t)(i + 1);
				cs.dc_ac = (uint8_t)tables[i];

				header.component_spec[i] = cs;
			}
			header.first = 0;
 400235c:	e03fef85 	stb	zero,-66(fp)
			header.last = 63;
 4002360:	00800fc4 	movi	r2,63
 4002364:	e0bfefc5 	stb	r2,-65(fp)
			header.ah_al = 0;
 4002368:	e03ff005 	stb	zero,-64(fp)
			tjei_write(state, &header, sizeof(TJEScanHeader), 1);
 400236c:	e0bfecc4 	addi	r2,fp,-77
 4002370:	01c00044 	movi	r7,1
 4002374:	01800384 	movi	r6,14
 4002378:	100b883a 	mov	r5,r2
 400237c:	e13ffa17 	ldw	r4,-24(fp)
 4002380:	40002bc0 	call	40002bc <tjei_write>
		float du_y[64];
		float du_b[64];
		float du_r[64];

		// Set diff to 0.
		int pred_y = 0;
 4002384:	e03fdc15 	stw	zero,-144(fp)
		int pred_b = 0;
 4002388:	e03fdd15 	stw	zero,-140(fp)
		int pred_r = 0;
 400238c:	e03fde15 	stw	zero,-136(fp)

		// Bit stack
		uint32_t bitbuffer = 0;
 4002390:	e03fdf15 	stw	zero,-132(fp)
		uint32_t location = 0;
 4002394:	e03fe015 	stw	zero,-128(fp)


		for (int y = 0; y < height; y += 8) {
 4002398:	e03e8e15 	stw	zero,-1480(fp)
 400239c:	00014d06 	br	40028d4 <tjei_encode_main+0xd60>
			for (int x = 0; x < width; x += 8) {
 40023a0:	e03e8f15 	stw	zero,-1476(fp)
 40023a4:	00014506 	br	40028bc <tjei_encode_main+0xd48>
				// Block loop: ====
				for (int off_y = 0; off_y < 8; ++off_y) {
 40023a8:	e03e9015 	stw	zero,-1472(fp)
 40023ac:	0000fb06 	br	400279c <tjei_encode_main+0xc28>
					for (int off_x = 0; off_x < 8; ++off_x) {
 40023b0:	e03e9115 	stw	zero,-1468(fp)
 40023b4:	0000f306 	br	4002784 <tjei_encode_main+0xc10>
						int block_index = (off_y * 8 + off_x);
 40023b8:	e0be9017 	ldw	r2,-1472(fp)
 40023bc:	100690fa 	slli	r3,r2,3
 40023c0:	e0be9117 	ldw	r2,-1468(fp)
 40023c4:	1885883a 	add	r2,r3,r2
 40023c8:	e0be9515 	stw	r2,-1452(fp)

						int src_index = (((y + off_y) * width) + (x + off_x)) * src_num_components;
 40023cc:	e0fe8e17 	ldw	r3,-1480(fp)
 40023d0:	e0be9017 	ldw	r2,-1472(fp)
 40023d4:	1885883a 	add	r2,r3,r2
 40023d8:	e17ffc17 	ldw	r5,-16(fp)
 40023dc:	1009883a 	mov	r4,r2
 40023e0:	40048b00 	call	40048b0 <__mulsi3>
 40023e4:	1009883a 	mov	r4,r2
 40023e8:	e0fe8f17 	ldw	r3,-1476(fp)
 40023ec:	e0be9117 	ldw	r2,-1468(fp)
 40023f0:	1885883a 	add	r2,r3,r2
 40023f4:	2085883a 	add	r2,r4,r2
 40023f8:	e1400217 	ldw	r5,8(fp)
 40023fc:	1009883a 	mov	r4,r2
 4002400:	40048b00 	call	40048b0 <__mulsi3>
 4002404:	e0be9215 	stw	r2,-1464(fp)

						int col = x + off_x;
 4002408:	e0fe8f17 	ldw	r3,-1476(fp)
 400240c:	e0be9117 	ldw	r2,-1468(fp)
 4002410:	1885883a 	add	r2,r3,r2
 4002414:	e0be9615 	stw	r2,-1448(fp)
						int row = y + off_y;
 4002418:	e0fe8e17 	ldw	r3,-1480(fp)
 400241c:	e0be9017 	ldw	r2,-1472(fp)
 4002420:	1885883a 	add	r2,r3,r2
 4002424:	e0be9715 	stw	r2,-1444(fp)

						if (row >= height) {
 4002428:	e0fe9717 	ldw	r3,-1444(fp)
 400242c:	e0bffd17 	ldw	r2,-12(fp)
 4002430:	18800e16 	blt	r3,r2,400246c <tjei_encode_main+0x8f8>
							src_index -= (width * (row - height + 1)) * src_num_components;
 4002434:	e0fe9717 	ldw	r3,-1444(fp)
 4002438:	e0bffd17 	ldw	r2,-12(fp)
 400243c:	1885c83a 	sub	r2,r3,r2
 4002440:	10800044 	addi	r2,r2,1
 4002444:	e17ffc17 	ldw	r5,-16(fp)
 4002448:	1009883a 	mov	r4,r2
 400244c:	40048b00 	call	40048b0 <__mulsi3>
 4002450:	e1400217 	ldw	r5,8(fp)
 4002454:	1009883a 	mov	r4,r2
 4002458:	40048b00 	call	40048b0 <__mulsi3>
 400245c:	1007883a 	mov	r3,r2
 4002460:	e0be9217 	ldw	r2,-1464(fp)
 4002464:	10c5c83a 	sub	r2,r2,r3
 4002468:	e0be9215 	stw	r2,-1464(fp)
						}
						if (col >= width) {
 400246c:	e0fe9617 	ldw	r3,-1448(fp)
 4002470:	e0bffc17 	ldw	r2,-16(fp)
 4002474:	18800b16 	blt	r3,r2,40024a4 <tjei_encode_main+0x930>
							src_index -= (col - width + 1) * src_num_components;
 4002478:	e0fe9617 	ldw	r3,-1448(fp)
 400247c:	e0bffc17 	ldw	r2,-16(fp)
 4002480:	1885c83a 	sub	r2,r3,r2
 4002484:	10800044 	addi	r2,r2,1
 4002488:	e1400217 	ldw	r5,8(fp)
 400248c:	1009883a 	mov	r4,r2
 4002490:	40048b00 	call	40048b0 <__mulsi3>
 4002494:	1007883a 	mov	r3,r2
 4002498:	e0be9217 	ldw	r2,-1464(fp)
 400249c:	10c5c83a 	sub	r2,r2,r3
 40024a0:	e0be9215 	stw	r2,-1464(fp)
						}
						assert(src_index < width * height * src_num_components);
 40024a4:	e17ffd17 	ldw	r5,-12(fp)
 40024a8:	e13ffc17 	ldw	r4,-16(fp)
 40024ac:	40048b00 	call	40048b0 <__mulsi3>
 40024b0:	e1400217 	ldw	r5,8(fp)
 40024b4:	1009883a 	mov	r4,r2
 40024b8:	40048b00 	call	40048b0 <__mulsi3>
 40024bc:	1007883a 	mov	r3,r2
 40024c0:	e0be9217 	ldw	r2,-1464(fp)
 40024c4:	10c00816 	blt	r2,r3,40024e8 <tjei_encode_main+0x974>
 40024c8:	01c10074 	movhi	r7,1025
 40024cc:	39c46904 	addi	r7,r7,4516
 40024d0:	01810074 	movhi	r6,1025
 40024d4:	31849f04 	addi	r6,r6,4732
 40024d8:	01410384 	movi	r5,1038
 40024dc:	01010074 	movhi	r4,1025
 40024e0:	21043a04 	addi	r4,r4,4328
 40024e4:	40088e00 	call	40088e0 <__assert_func>

						uint8_t r = src_data[src_index + 0];
 40024e8:	e0be9217 	ldw	r2,-1464(fp)
 40024ec:	e0fffb17 	ldw	r3,-20(fp)
 40024f0:	1885883a 	add	r2,r3,r2
 40024f4:	10800003 	ldbu	r2,0(r2)
 40024f8:	e0be9805 	stb	r2,-1440(fp)
						uint8_t g = src_data[src_index + 1];
 40024fc:	e0be9217 	ldw	r2,-1464(fp)
 4002500:	10800044 	addi	r2,r2,1
 4002504:	e0fffb17 	ldw	r3,-20(fp)
 4002508:	1885883a 	add	r2,r3,r2
 400250c:	10800003 	ldbu	r2,0(r2)
 4002510:	e0be9845 	stb	r2,-1439(fp)
						uint8_t b = src_data[src_index + 2];
 4002514:	e0be9217 	ldw	r2,-1464(fp)
 4002518:	10800084 	addi	r2,r2,2
 400251c:	e0fffb17 	ldw	r3,-20(fp)
 4002520:	1885883a 	add	r2,r3,r2
 4002524:	10800003 	ldbu	r2,0(r2)
 4002528:	e0be9885 	stb	r2,-1438(fp)

						float luma = 0.299f * r + 0.587f * g + 0.114f * b - 128;
 400252c:	e0be9803 	ldbu	r2,-1440(fp)
 4002530:	1009883a 	mov	r4,r2
 4002534:	4005ce80 	call	4005ce8 <__floatsisf>
 4002538:	1007883a 	mov	r3,r2
 400253c:	014fa674 	movhi	r5,16025
 4002540:	2945a1c4 	addi	r5,r5,5767
 4002544:	1809883a 	mov	r4,r3
 4002548:	40053640 	call	4005364 <__mulsf3>
 400254c:	1007883a 	mov	r3,r2
 4002550:	1821883a 	mov	r16,r3
 4002554:	e0be9843 	ldbu	r2,-1439(fp)
 4002558:	1009883a 	mov	r4,r2
 400255c:	4005ce80 	call	4005ce8 <__floatsisf>
 4002560:	1007883a 	mov	r3,r2
 4002564:	014fc5b4 	movhi	r5,16150
 4002568:	29516884 	addi	r5,r5,17826
 400256c:	1809883a 	mov	r4,r3
 4002570:	40053640 	call	4005364 <__mulsf3>
 4002574:	1007883a 	mov	r3,r2
 4002578:	1805883a 	mov	r2,r3
 400257c:	100b883a 	mov	r5,r2
 4002580:	8009883a 	mov	r4,r16
 4002584:	40048d80 	call	40048d8 <__addsf3>
 4002588:	1007883a 	mov	r3,r2
 400258c:	1821883a 	mov	r16,r3
 4002590:	e0be9883 	ldbu	r2,-1438(fp)
 4002594:	1009883a 	mov	r4,r2
 4002598:	4005ce80 	call	4005ce8 <__floatsisf>
 400259c:	1007883a 	mov	r3,r2
 40025a0:	014f7a74 	movhi	r5,15849
 40025a4:	295e3544 	addi	r5,r5,30933
 40025a8:	1809883a 	mov	r4,r3
 40025ac:	40053640 	call	4005364 <__mulsf3>
 40025b0:	1007883a 	mov	r3,r2
 40025b4:	1805883a 	mov	r2,r3
 40025b8:	100b883a 	mov	r5,r2
 40025bc:	8009883a 	mov	r4,r16
 40025c0:	40048d80 	call	40048d8 <__addsf3>
 40025c4:	1007883a 	mov	r3,r2
 40025c8:	1805883a 	mov	r2,r3
 40025cc:	0150c034 	movhi	r5,17152
 40025d0:	1009883a 	mov	r4,r2
 40025d4:	40057940 	call	4005794 <__subsf3>
 40025d8:	1007883a 	mov	r3,r2
 40025dc:	e0fe9915 	stw	r3,-1436(fp)
						float cb = -0.1687f * r - 0.3313f * g + 0.5f * b;
 40025e0:	e0be9803 	ldbu	r2,-1440(fp)
 40025e4:	1009883a 	mov	r4,r2
 40025e8:	4005ce80 	call	4005ce8 <__floatsisf>
 40025ec:	1007883a 	mov	r3,r2
 40025f0:	016f8b74 	movhi	r5,48685
 40025f4:	296fec44 	addi	r5,r5,-16463
 40025f8:	1809883a 	mov	r4,r3
 40025fc:	40053640 	call	4005364 <__mulsf3>
 4002600:	1007883a 	mov	r3,r2
 4002604:	1821883a 	mov	r16,r3
 4002608:	e0be9843 	ldbu	r2,-1439(fp)
 400260c:	1009883a 	mov	r4,r2
 4002610:	4005ce80 	call	4005ce8 <__floatsisf>
 4002614:	1007883a 	mov	r3,r2
 4002618:	014faab4 	movhi	r5,16042
 400261c:	296809c4 	addi	r5,r5,-24537
 4002620:	1809883a 	mov	r4,r3
 4002624:	40053640 	call	4005364 <__mulsf3>
 4002628:	1007883a 	mov	r3,r2
 400262c:	1805883a 	mov	r2,r3
 4002630:	100b883a 	mov	r5,r2
 4002634:	8009883a 	mov	r4,r16
 4002638:	40057940 	call	4005794 <__subsf3>
 400263c:	1007883a 	mov	r3,r2
 4002640:	1821883a 	mov	r16,r3
 4002644:	e0be9883 	ldbu	r2,-1438(fp)
 4002648:	1009883a 	mov	r4,r2
 400264c:	4005ce80 	call	4005ce8 <__floatsisf>
 4002650:	1007883a 	mov	r3,r2
 4002654:	014fc034 	movhi	r5,16128
 4002658:	1809883a 	mov	r4,r3
 400265c:	40053640 	call	4005364 <__mulsf3>
 4002660:	1007883a 	mov	r3,r2
 4002664:	1805883a 	mov	r2,r3
 4002668:	100b883a 	mov	r5,r2
 400266c:	8009883a 	mov	r4,r16
 4002670:	40048d80 	call	40048d8 <__addsf3>
 4002674:	1007883a 	mov	r3,r2
 4002678:	e0fe9a15 	stw	r3,-1432(fp)
						float cr = 0.5f * r - 0.4187f * g - 0.0813f * b;
 400267c:	e0be9803 	ldbu	r2,-1440(fp)
 4002680:	1009883a 	mov	r4,r2
 4002684:	4005ce80 	call	4005ce8 <__floatsisf>
 4002688:	1007883a 	mov	r3,r2
 400268c:	014fc034 	movhi	r5,16128
 4002690:	1809883a 	mov	r4,r3
 4002694:	40053640 	call	4005364 <__mulsf3>
 4002698:	1007883a 	mov	r3,r2
 400269c:	1821883a 	mov	r16,r3
 40026a0:	e0be9843 	ldbu	r2,-1439(fp)
 40026a4:	1009883a 	mov	r4,r2
 40026a8:	4005ce80 	call	4005ce8 <__floatsisf>
 40026ac:	1007883a 	mov	r3,r2
 40026b0:	014fb5b4 	movhi	r5,16086
 40026b4:	2957f644 	addi	r5,r5,24537
 40026b8:	1809883a 	mov	r4,r3
 40026bc:	40053640 	call	4005364 <__mulsf3>
 40026c0:	1007883a 	mov	r3,r2
 40026c4:	1805883a 	mov	r2,r3
 40026c8:	100b883a 	mov	r5,r2
 40026cc:	8009883a 	mov	r4,r16
 40026d0:	40057940 	call	4005794 <__subsf3>
 40026d4:	1007883a 	mov	r3,r2
 40026d8:	1821883a 	mov	r16,r3
 40026dc:	e0be9883 	ldbu	r2,-1438(fp)
 40026e0:	1009883a 	mov	r4,r2
 40026e4:	4005ce80 	call	4005ce8 <__floatsisf>
 40026e8:	1007883a 	mov	r3,r2
 40026ec:	014f69f4 	movhi	r5,15783
 40026f0:	29602744 	addi	r5,r5,-32611
 40026f4:	1809883a 	mov	r4,r3
 40026f8:	40053640 	call	4005364 <__mulsf3>
 40026fc:	1007883a 	mov	r3,r2
 4002700:	1805883a 	mov	r2,r3
 4002704:	100b883a 	mov	r5,r2
 4002708:	8009883a 	mov	r4,r16
 400270c:	40057940 	call	4005794 <__subsf3>
 4002710:	1007883a 	mov	r3,r2
 4002714:	e0fe9b15 	stw	r3,-1428(fp)

						du_y[block_index] = luma;
 4002718:	e0be9517 	ldw	r2,-1452(fp)
 400271c:	1085883a 	add	r2,r2,r2
 4002720:	1085883a 	add	r2,r2,r2
 4002724:	e0fe8a04 	addi	r3,fp,-1496
 4002728:	1885883a 	add	r2,r3,r2
 400272c:	10809204 	addi	r2,r2,584
 4002730:	e0fe9917 	ldw	r3,-1436(fp)
 4002734:	10c00015 	stw	r3,0(r2)
						du_b[block_index] = cb;
 4002738:	e0be9517 	ldw	r2,-1452(fp)
 400273c:	1085883a 	add	r2,r2,r2
 4002740:	1085883a 	add	r2,r2,r2
 4002744:	e13e8a04 	addi	r4,fp,-1496
 4002748:	2085883a 	add	r2,r4,r2
 400274c:	1080d204 	addi	r2,r2,840
 4002750:	e0fe9a17 	ldw	r3,-1432(fp)
 4002754:	10c00015 	stw	r3,0(r2)
						du_r[block_index] = cr;
 4002758:	e0be9517 	ldw	r2,-1452(fp)
 400275c:	1085883a 	add	r2,r2,r2
 4002760:	1085883a 	add	r2,r2,r2
 4002764:	e0fe8a04 	addi	r3,fp,-1496
 4002768:	1885883a 	add	r2,r3,r2
 400276c:	10811204 	addi	r2,r2,1096
 4002770:	e0fe9b17 	ldw	r3,-1428(fp)
 4002774:	10c00015 	stw	r3,0(r2)

		for (int y = 0; y < height; y += 8) {
			for (int x = 0; x < width; x += 8) {
				// Block loop: ====
				for (int off_y = 0; off_y < 8; ++off_y) {
					for (int off_x = 0; off_x < 8; ++off_x) {
 4002778:	e0be9117 	ldw	r2,-1468(fp)
 400277c:	10800044 	addi	r2,r2,1
 4002780:	e0be9115 	stw	r2,-1468(fp)
 4002784:	e0be9117 	ldw	r2,-1468(fp)
 4002788:	10800210 	cmplti	r2,r2,8
 400278c:	103f0a1e 	bne	r2,zero,40023b8 <__alt_data_end+0xfc0023b8>


		for (int y = 0; y < height; y += 8) {
			for (int x = 0; x < width; x += 8) {
				// Block loop: ====
				for (int off_y = 0; off_y < 8; ++off_y) {
 4002790:	e0be9017 	ldw	r2,-1472(fp)
 4002794:	10800044 	addi	r2,r2,1
 4002798:	e0be9015 	stw	r2,-1472(fp)
 400279c:	e0be9017 	ldw	r2,-1472(fp)
 40027a0:	10800210 	cmplti	r2,r2,8
 40027a4:	103f021e 	bne	r2,zero,40023b0 <__alt_data_end+0xfc0023b0>
#if TJE_USE_FAST_DCT
					pqt.luma,
#else
					state->qt_luma,
#endif
					state->ehuffsize[TJEI_LUMA_DC], state->ehuffcode[TJEI_LUMA_DC],
 40027a8:	e1fffa17 	ldw	r7,-24(fp)
 40027ac:	e0bffa17 	ldw	r2,-24(fp)
 40027b0:	10810104 	addi	r2,r2,1028
					state->ehuffsize[TJEI_LUMA_AC], state->ehuffcode[TJEI_LUMA_AC],
 40027b4:	e0fffa17 	ldw	r3,-24(fp)
 40027b8:	18c04044 	addi	r3,r3,257
 40027bc:	e13ffa17 	ldw	r4,-24(fp)
 40027c0:	21018104 	addi	r4,r4,1540
						du_b[block_index] = cb;
						du_r[block_index] = cr;
					}
				}

				tjei_encode_and_write_MCU(state, du_y,
 40027c4:	e17e9c04 	addi	r5,fp,-1424
 40027c8:	29804004 	addi	r6,r5,256
 40027cc:	e23f1c04 	addi	r8,fp,-912
 40027d0:	e17fe004 	addi	r5,fp,-128
 40027d4:	d9400515 	stw	r5,20(sp)
 40027d8:	e17fdf04 	addi	r5,fp,-132
 40027dc:	d9400415 	stw	r5,16(sp)
 40027e0:	e17fdc04 	addi	r5,fp,-144
 40027e4:	d9400315 	stw	r5,12(sp)
 40027e8:	d9000215 	stw	r4,8(sp)
 40027ec:	d8c00115 	stw	r3,4(sp)
 40027f0:	d8800015 	stw	r2,0(sp)
 40027f4:	400b883a 	mov	r5,r8
 40027f8:	e13ffa17 	ldw	r4,-24(fp)
 40027fc:	40013380 	call	4001338 <tjei_encode_and_write_MCU>
#if TJE_USE_FAST_DCT
					pqt.chroma,
#else
					state->qt_chroma,
#endif
					state->ehuffsize[TJEI_CHROMA_DC], state->ehuffcode[TJEI_CHROMA_DC],
 4002800:	e0bffa17 	ldw	r2,-24(fp)
 4002804:	11c08084 	addi	r7,r2,514
 4002808:	e0bffa17 	ldw	r2,-24(fp)
 400280c:	10820104 	addi	r2,r2,2052
					state->ehuffsize[TJEI_CHROMA_AC], state->ehuffcode[TJEI_CHROMA_AC],
 4002810:	e0fffa17 	ldw	r3,-24(fp)
 4002814:	18c0c0c4 	addi	r3,r3,771
 4002818:	e13ffa17 	ldw	r4,-24(fp)
 400281c:	21028104 	addi	r4,r4,2564
					state->qt_luma,
#endif
					state->ehuffsize[TJEI_LUMA_DC], state->ehuffcode[TJEI_LUMA_DC],
					state->ehuffsize[TJEI_LUMA_AC], state->ehuffcode[TJEI_LUMA_AC],
					&pred_y, &bitbuffer, &location);
				tjei_encode_and_write_MCU(state, du_b,
 4002820:	e1be9c04 	addi	r6,fp,-1424
 4002824:	e23f5c04 	addi	r8,fp,-656
 4002828:	e17fe004 	addi	r5,fp,-128
 400282c:	d9400515 	stw	r5,20(sp)
 4002830:	e17fdf04 	addi	r5,fp,-132
 4002834:	d9400415 	stw	r5,16(sp)
 4002838:	e17fdd04 	addi	r5,fp,-140
 400283c:	d9400315 	stw	r5,12(sp)
 4002840:	d9000215 	stw	r4,8(sp)
 4002844:	d8c00115 	stw	r3,4(sp)
 4002848:	d8800015 	stw	r2,0(sp)
 400284c:	400b883a 	mov	r5,r8
 4002850:	e13ffa17 	ldw	r4,-24(fp)
 4002854:	40013380 	call	4001338 <tjei_encode_and_write_MCU>
#if TJE_USE_FAST_DCT
					pqt.chroma,
#else
					state->qt_chroma,
#endif
					state->ehuffsize[TJEI_CHROMA_DC], state->ehuffcode[TJEI_CHROMA_DC],
 4002858:	e0bffa17 	ldw	r2,-24(fp)
 400285c:	11c08084 	addi	r7,r2,514
 4002860:	e0bffa17 	ldw	r2,-24(fp)
 4002864:	10820104 	addi	r2,r2,2052
					state->ehuffsize[TJEI_CHROMA_AC], state->ehuffcode[TJEI_CHROMA_AC],
 4002868:	e0fffa17 	ldw	r3,-24(fp)
 400286c:	18c0c0c4 	addi	r3,r3,771
 4002870:	e13ffa17 	ldw	r4,-24(fp)
 4002874:	21028104 	addi	r4,r4,2564
					state->qt_chroma,
#endif
					state->ehuffsize[TJEI_CHROMA_DC], state->ehuffcode[TJEI_CHROMA_DC],
					state->ehuffsize[TJEI_CHROMA_AC], state->ehuffcode[TJEI_CHROMA_AC],
					&pred_b, &bitbuffer, &location);
				tjei_encode_and_write_MCU(state, du_r,
 4002878:	e1be9c04 	addi	r6,fp,-1424
 400287c:	e23f9c04 	addi	r8,fp,-400
 4002880:	e17fe004 	addi	r5,fp,-128
 4002884:	d9400515 	stw	r5,20(sp)
 4002888:	e17fdf04 	addi	r5,fp,-132
 400288c:	d9400415 	stw	r5,16(sp)
 4002890:	e17fde04 	addi	r5,fp,-136
 4002894:	d9400315 	stw	r5,12(sp)
 4002898:	d9000215 	stw	r4,8(sp)
 400289c:	d8c00115 	stw	r3,4(sp)
 40028a0:	d8800015 	stw	r2,0(sp)
 40028a4:	400b883a 	mov	r5,r8
 40028a8:	e13ffa17 	ldw	r4,-24(fp)
 40028ac:	40013380 	call	4001338 <tjei_encode_and_write_MCU>
		uint32_t bitbuffer = 0;
		uint32_t location = 0;


		for (int y = 0; y < height; y += 8) {
			for (int x = 0; x < width; x += 8) {
 40028b0:	e0be8f17 	ldw	r2,-1476(fp)
 40028b4:	10800204 	addi	r2,r2,8
 40028b8:	e0be8f15 	stw	r2,-1476(fp)
 40028bc:	e0fe8f17 	ldw	r3,-1476(fp)
 40028c0:	e0bffc17 	ldw	r2,-16(fp)
 40028c4:	18beb816 	blt	r3,r2,40023a8 <__alt_data_end+0xfc0023a8>
		// Bit stack
		uint32_t bitbuffer = 0;
		uint32_t location = 0;


		for (int y = 0; y < height; y += 8) {
 40028c8:	e0be8e17 	ldw	r2,-1480(fp)
 40028cc:	10800204 	addi	r2,r2,8
 40028d0:	e0be8e15 	stw	r2,-1480(fp)
 40028d4:	e0fe8e17 	ldw	r3,-1480(fp)
 40028d8:	e0bffd17 	ldw	r2,-12(fp)
 40028dc:	18beb016 	blt	r3,r2,40023a0 <__alt_data_end+0xfc0023a0>
			}
		}

		// Finish the image.
		{ // Flush
			if (location > 0 && location < 8) {
 40028e0:	e0bfe017 	ldw	r2,-128(fp)
 40028e4:	10001026 	beq	r2,zero,4002928 <tjei_encode_main+0xdb4>
 40028e8:	e0bfe017 	ldw	r2,-128(fp)
 40028ec:	10800228 	cmpgeui	r2,r2,8
 40028f0:	10000d1e 	bne	r2,zero,4002928 <tjei_encode_main+0xdb4>
				tjei_write_bits(state, &bitbuffer, &location, (uint16_t)(8 - location), 0);
 40028f4:	e0bfe017 	ldw	r2,-128(fp)
 40028f8:	1007883a 	mov	r3,r2
 40028fc:	00800204 	movi	r2,8
 4002900:	10c5c83a 	sub	r2,r2,r3
 4002904:	113fffcc 	andi	r4,r2,65535
 4002908:	e0ffe004 	addi	r3,fp,-128
 400290c:	e0bfdf04 	addi	r2,fp,-132
 4002910:	d8000015 	stw	zero,0(sp)
 4002914:	200f883a 	mov	r7,r4
 4002918:	180d883a 	mov	r6,r3
 400291c:	100b883a 	mov	r5,r2
 4002920:	e13ffa17 	ldw	r4,-24(fp)
 4002924:	40009e00 	call	40009e0 <tjei_write_bits>
			}
		}
		uint16_t EOI = tjei_be_word(0xffd9);
 4002928:	013ff654 	movui	r4,65497
 400292c:	400026c0 	call	400026c <tjei_be_word>
 4002930:	e0bfe10d 	sth	r2,-124(fp)
		tjei_write(state, &EOI, sizeof(uint16_t), 1);
 4002934:	e0bfe104 	addi	r2,fp,-124
 4002938:	01c00044 	movi	r7,1
 400293c:	01800084 	movi	r6,2
 4002940:	100b883a 	mov	r5,r2
 4002944:	e13ffa17 	ldw	r4,-24(fp)
 4002948:	40002bc0 	call	40002bc <tjei_write>

		if (state->output_buffer_count) {
 400294c:	e0bffa17 	ldw	r2,-24(fp)
 4002950:	10832b17 	ldw	r2,3244(r2)
 4002954:	10000c26 	beq	r2,zero,4002988 <tjei_encode_main+0xe14>
			state->write_context.func(state->write_context.context, state->output_buffer, (int)state->output_buffer_count);
 4002958:	e0bffa17 	ldw	r2,-24(fp)
 400295c:	10832a17 	ldw	r2,3240(r2)
 4002960:	e0fffa17 	ldw	r3,-24(fp)
 4002964:	19032917 	ldw	r4,3236(r3)
 4002968:	e0fffa17 	ldw	r3,-24(fp)
 400296c:	19432c04 	addi	r5,r3,3248
 4002970:	e0fffa17 	ldw	r3,-24(fp)
 4002974:	18c32b17 	ldw	r3,3244(r3)
 4002978:	180d883a 	mov	r6,r3
 400297c:	103ee83a 	callr	r2
			state->output_buffer_count = 0;
 4002980:	e0bffa17 	ldw	r2,-24(fp)
 4002984:	10032b15 	stw	zero,3244(r2)
		}

		return 1;
 4002988:	00800044 	movi	r2,1
	}
 400298c:	e6fffe04 	addi	sp,fp,-8
 4002990:	dfc00317 	ldw	ra,12(sp)
 4002994:	df000217 	ldw	fp,8(sp)
 4002998:	dc400117 	ldw	r17,4(sp)
 400299c:	dc000017 	ldw	r16,0(sp)
 40029a0:	dec00404 	addi	sp,sp,16
 40029a4:	f800283a 	ret

040029a8 <tje_encode_with_func>:
		const int quality,
		const int width,
		const int height,
		const int num_components,
		const unsigned char* src_data)
	{
 40029a8:	defbc704 	addi	sp,sp,-4324
 40029ac:	dfc43815 	stw	ra,4320(sp)
 40029b0:	df043715 	stw	fp,4316(sp)
 40029b4:	df043704 	addi	fp,sp,4316
 40029b8:	e13ffc15 	stw	r4,-16(fp)
 40029bc:	e17ffd15 	stw	r5,-12(fp)
 40029c0:	e1bffe15 	stw	r6,-8(fp)
 40029c4:	e1ffff15 	stw	r7,-4(fp)
		if (quality < 1 || quality > 3) {
 40029c8:	e0bffe17 	ldw	r2,-8(fp)
 40029cc:	0080030e 	bge	zero,r2,40029dc <tje_encode_with_func+0x34>
 40029d0:	e0bffe17 	ldw	r2,-8(fp)
 40029d4:	10800110 	cmplti	r2,r2,4
 40029d8:	1000021e 	bne	r2,zero,40029e4 <tje_encode_with_func+0x3c>
			tje_log("[ERROR] -- Valid 'quality' values are 1 (lowest), 2, or 3 (highest)\n");
			return 0;
 40029dc:	0005883a 	mov	r2,zero
 40029e0:	00008106 	br	4002be8 <tje_encode_with_func+0x240>
		}

		TJEState state = { 0 };
 40029e4:	e0bbce04 	addi	r2,fp,-4296
 40029e8:	00c42c04 	movi	r3,4272
 40029ec:	180d883a 	mov	r6,r3
 40029f0:	000b883a 	mov	r5,zero
 40029f4:	1009883a 	mov	r4,r2
 40029f8:	4008b000 	call	4008b00 <memset>

		uint8_t qt_factor = 1;
 40029fc:	00800044 	movi	r2,1
 4002a00:	e0bbca05 	stb	r2,-4312(fp)
		switch (quality) {
 4002a04:	e0bffe17 	ldw	r2,-8(fp)
 4002a08:	10c000a0 	cmpeqi	r3,r2,2
 4002a0c:	1800181e 	bne	r3,zero,4002a70 <tje_encode_with_func+0xc8>
 4002a10:	10c000e0 	cmpeqi	r3,r2,3
 4002a14:	1800031e 	bne	r3,zero,4002a24 <tje_encode_with_func+0x7c>
 4002a18:	10800060 	cmpeqi	r2,r2,1
 4002a1c:	1000161e 	bne	r2,zero,4002a78 <tje_encode_with_func+0xd0>
 4002a20:	00005206 	br	4002b6c <tje_encode_with_func+0x1c4>
		case 3:
			for (int i = 0; i < 64; ++i) {
 4002a24:	e03bcb15 	stw	zero,-4308(fp)
 4002a28:	00000d06 	br	4002a60 <tje_encode_with_func+0xb8>
				state.qt_luma[i] = 1;
 4002a2c:	e0fed704 	addi	r3,fp,-1188
 4002a30:	e0bbcb17 	ldw	r2,-4308(fp)
 4002a34:	1885883a 	add	r2,r3,r2
 4002a38:	00c00044 	movi	r3,1
 4002a3c:	10c00005 	stb	r3,0(r2)
				state.qt_chroma[i] = 1;
 4002a40:	e0fee704 	addi	r3,fp,-1124
 4002a44:	e0bbcb17 	ldw	r2,-4308(fp)
 4002a48:	1885883a 	add	r2,r3,r2
 4002a4c:	00c00044 	movi	r3,1
 4002a50:	10c00005 	stb	r3,0(r2)
		TJEState state = { 0 };

		uint8_t qt_factor = 1;
		switch (quality) {
		case 3:
			for (int i = 0; i < 64; ++i) {
 4002a54:	e0bbcb17 	ldw	r2,-4308(fp)
 4002a58:	10800044 	addi	r2,r2,1
 4002a5c:	e0bbcb15 	stw	r2,-4308(fp)
 4002a60:	e0bbcb17 	ldw	r2,-4308(fp)
 4002a64:	10801010 	cmplti	r2,r2,64
 4002a68:	103ff01e 	bne	r2,zero,4002a2c <__alt_data_end+0xfc002a2c>
				state.qt_luma[i] = 1;
				state.qt_chroma[i] = 1;
			}
			break;
 4002a6c:	00004706 	br	4002b8c <tje_encode_with_func+0x1e4>
		case 2:
			qt_factor = 10;
 4002a70:	00800284 	movi	r2,10
 4002a74:	e0bbca05 	stb	r2,-4312(fp)
			// don't break. fall through.
		case 1:
			for (int i = 0; i < 64; ++i) {
 4002a78:	e03bcc15 	stw	zero,-4304(fp)
 4002a7c:	00003706 	br	4002b5c <tje_encode_with_func+0x1b4>
				state.qt_luma[i] = tjei_default_qt_luma_from_spec[i] / qt_factor;
 4002a80:	00810074 	movhi	r2,1025
 4002a84:	10838e04 	addi	r2,r2,3640
 4002a88:	e0fbcc17 	ldw	r3,-4304(fp)
 4002a8c:	10c5883a 	add	r2,r2,r3
 4002a90:	10800003 	ldbu	r2,0(r2)
 4002a94:	10803fcc 	andi	r2,r2,255
 4002a98:	e0fbca03 	ldbu	r3,-4312(fp)
 4002a9c:	180b883a 	mov	r5,r3
 4002aa0:	1009883a 	mov	r4,r2
 4002aa4:	40047f40 	call	40047f4 <__udivsi3>
 4002aa8:	1009883a 	mov	r4,r2
 4002aac:	e0fed704 	addi	r3,fp,-1188
 4002ab0:	e0bbcc17 	ldw	r2,-4304(fp)
 4002ab4:	1885883a 	add	r2,r3,r2
 4002ab8:	11000005 	stb	r4,0(r2)
				if (state.qt_luma[i] == 0) {
 4002abc:	e0fed704 	addi	r3,fp,-1188
 4002ac0:	e0bbcc17 	ldw	r2,-4304(fp)
 4002ac4:	1885883a 	add	r2,r3,r2
 4002ac8:	10800003 	ldbu	r2,0(r2)
 4002acc:	10803fcc 	andi	r2,r2,255
 4002ad0:	1000051e 	bne	r2,zero,4002ae8 <tje_encode_with_func+0x140>
					state.qt_luma[i] = 1;
 4002ad4:	e0fed704 	addi	r3,fp,-1188
 4002ad8:	e0bbcc17 	ldw	r2,-4304(fp)
 4002adc:	1885883a 	add	r2,r3,r2
 4002ae0:	00c00044 	movi	r3,1
 4002ae4:	10c00005 	stb	r3,0(r2)
				}
				state.qt_chroma[i] = tjei_default_qt_chroma_from_paper[i] / qt_factor;
 4002ae8:	00810074 	movhi	r2,1025
 4002aec:	10839e04 	addi	r2,r2,3704
 4002af0:	e0fbcc17 	ldw	r3,-4304(fp)
 4002af4:	10c5883a 	add	r2,r2,r3
 4002af8:	10800003 	ldbu	r2,0(r2)
 4002afc:	10803fcc 	andi	r2,r2,255
 4002b00:	e0fbca03 	ldbu	r3,-4312(fp)
 4002b04:	180b883a 	mov	r5,r3
 4002b08:	1009883a 	mov	r4,r2
 4002b0c:	40047f40 	call	40047f4 <__udivsi3>
 4002b10:	1009883a 	mov	r4,r2
 4002b14:	e0fee704 	addi	r3,fp,-1124
 4002b18:	e0bbcc17 	ldw	r2,-4304(fp)
 4002b1c:	1885883a 	add	r2,r3,r2
 4002b20:	11000005 	stb	r4,0(r2)
				if (state.qt_chroma[i] == 0) {
 4002b24:	e0fee704 	addi	r3,fp,-1124
 4002b28:	e0bbcc17 	ldw	r2,-4304(fp)
 4002b2c:	1885883a 	add	r2,r3,r2
 4002b30:	10800003 	ldbu	r2,0(r2)
 4002b34:	10803fcc 	andi	r2,r2,255
 4002b38:	1000051e 	bne	r2,zero,4002b50 <tje_encode_with_func+0x1a8>
					state.qt_chroma[i] = 1;
 4002b3c:	e0fee704 	addi	r3,fp,-1124
 4002b40:	e0bbcc17 	ldw	r2,-4304(fp)
 4002b44:	1885883a 	add	r2,r3,r2
 4002b48:	00c00044 	movi	r3,1
 4002b4c:	10c00005 	stb	r3,0(r2)
			break;
		case 2:
			qt_factor = 10;
			// don't break. fall through.
		case 1:
			for (int i = 0; i < 64; ++i) {
 4002b50:	e0bbcc17 	ldw	r2,-4304(fp)
 4002b54:	10800044 	addi	r2,r2,1
 4002b58:	e0bbcc15 	stw	r2,-4304(fp)
 4002b5c:	e0bbcc17 	ldw	r2,-4304(fp)
 4002b60:	10801010 	cmplti	r2,r2,64
 4002b64:	103fc61e 	bne	r2,zero,4002a80 <__alt_data_end+0xfc002a80>
				state.qt_chroma[i] = tjei_default_qt_chroma_from_paper[i] / qt_factor;
				if (state.qt_chroma[i] == 0) {
					state.qt_chroma[i] = 1;
				}
			}
			break;
 4002b68:	00000806 	br	4002b8c <tje_encode_with_func+0x1e4>
		default:
			assert(!"invalid code path");
 4002b6c:	01c10074 	movhi	r7,1025
 4002b70:	39c47504 	addi	r7,r7,4564
 4002b74:	01810074 	movhi	r6,1025
 4002b78:	3184a404 	addi	r6,r6,4752
 4002b7c:	01411d84 	movi	r5,1142
 4002b80:	01010074 	movhi	r4,1025
 4002b84:	21043a04 	addi	r4,r4,4328
 4002b88:	40088e00 	call	40088e0 <__assert_func>
			break;
		}

		TJEWriteContext wc = { 0 };
 4002b8c:	e03ffa15 	stw	zero,-24(fp)
 4002b90:	e03ffb15 	stw	zero,-20(fp)

		wc.context = context;
 4002b94:	e0bffd17 	ldw	r2,-12(fp)
 4002b98:	e0bffa15 	stw	r2,-24(fp)
		wc.func = func;
 4002b9c:	e0bffc17 	ldw	r2,-16(fp)
 4002ba0:	e0bffb15 	stw	r2,-20(fp)

		state.write_context = wc;
 4002ba4:	e0bffa17 	ldw	r2,-24(fp)
 4002ba8:	e0bef715 	stw	r2,-1060(fp)
 4002bac:	e0bffb17 	ldw	r2,-20(fp)
 4002bb0:	e0bef815 	stw	r2,-1056(fp)


		tjei_huff_expand(&state);
 4002bb4:	e0bbce04 	addi	r2,fp,-4296
 4002bb8:	1009883a 	mov	r4,r2
 4002bbc:	40017f00 	call	40017f0 <tjei_huff_expand>

		int result = tjei_encode_main(&state, src_data, width, height, num_components);
 4002bc0:	e0fbce04 	addi	r3,fp,-4296
 4002bc4:	e0800317 	ldw	r2,12(fp)
 4002bc8:	d8800015 	stw	r2,0(sp)
 4002bcc:	e1c00217 	ldw	r7,8(fp)
 4002bd0:	e1bfff17 	ldw	r6,-4(fp)
 4002bd4:	e1400417 	ldw	r5,16(fp)
 4002bd8:	1809883a 	mov	r4,r3
 4002bdc:	4001b740 	call	4001b74 <tjei_encode_main>
 4002be0:	e0bbcd15 	stw	r2,-4300(fp)

		return result;
 4002be4:	e0bbcd17 	ldw	r2,-4300(fp)
	}
 4002be8:	e037883a 	mov	sp,fp
 4002bec:	dfc00117 	ldw	ra,4(sp)
 4002bf0:	df000017 	ldw	fp,0(sp)
 4002bf4:	dec00204 	addi	sp,sp,8
 4002bf8:	f800283a 	ret

04002bfc <jtag_kiss_send>:
#define JTAG_UART__MASK__RVALID		0x00008000

#define max( a, b ) ( ( a > b) ? a : b )
#define min( a, b ) ( ( a < b) ? a : b )

static void jtag_kiss_send(uint8_t byte){
 4002bfc:	defffe04 	addi	sp,sp,-8
 4002c00:	df000115 	stw	fp,4(sp)
 4002c04:	df000104 	addi	fp,sp,4
 4002c08:	2005883a 	mov	r2,r4
 4002c0c:	e0bfff05 	stb	r2,-4(fp)

         // Wait for room in buffer
         while( ! ( (*JTAG_UART_CONTROL) & 0xffff0000 ) );
 4002c10:	0001883a 	nop
 4002c14:	00820034 	movhi	r2,2048
 4002c18:	10842504 	addi	r2,r2,4244
 4002c1c:	10800017 	ldw	r2,0(r2)
 4002c20:	10bfffec 	andhi	r2,r2,65535
 4002c24:	103ffb26 	beq	r2,zero,4002c14 <__alt_data_end+0xfc002c14>

         // Send byte
         *JTAG_UART_DATA = byte;
 4002c28:	00820034 	movhi	r2,2048
 4002c2c:	10842404 	addi	r2,r2,4240
 4002c30:	e0ffff03 	ldbu	r3,-4(fp)
 4002c34:	10c00015 	stw	r3,0(r2)

}
 4002c38:	0001883a 	nop
 4002c3c:	e037883a 	mov	sp,fp
 4002c40:	df000017 	ldw	fp,0(sp)
 4002c44:	dec00104 	addi	sp,sp,4
 4002c48:	f800283a 	ret

04002c4c <camera_dma_enable>:

uint8_t jpeg_image_buffer[IMAGE_SIZE];

static void camera_dma_enable(bool enable){
 4002c4c:	defffd04 	addi	sp,sp,-12
 4002c50:	df000215 	stw	fp,8(sp)
 4002c54:	df000204 	addi	fp,sp,8
 4002c58:	2005883a 	mov	r2,r4
 4002c5c:	e0bfff05 	stb	r2,-4(fp)

	volatile uint32_t * control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
 4002c60:	00820034 	movhi	r2,2048
 4002c64:	10842304 	addi	r2,r2,4236
 4002c68:	e0bffe15 	stw	r2,-8(fp)
	if(enable){
 4002c6c:	e0bfff03 	ldbu	r2,-4(fp)
 4002c70:	10000626 	beq	r2,zero,4002c8c <camera_dma_enable+0x40>
		*control |= ~VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
 4002c74:	e0bffe17 	ldw	r2,-8(fp)
 4002c78:	10800017 	ldw	r2,0(r2)
 4002c7c:	10c00114 	ori	r3,r2,4
 4002c80:	e0bffe17 	ldw	r2,-8(fp)
 4002c84:	10c00015 	stw	r3,0(r2)
	} else {
		*control &= VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
	}

}
 4002c88:	00000606 	br	4002ca4 <camera_dma_enable+0x58>

	volatile uint32_t * control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
	if(enable){
		*control |= ~VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
	} else {
		*control &= VIDEO_DMA_CONTROLLER__CONTROL__MASK__EN;
 4002c8c:	e0bffe17 	ldw	r2,-8(fp)
 4002c90:	10c00017 	ldw	r3,0(r2)
 4002c94:	00bffec4 	movi	r2,-5
 4002c98:	1886703a 	and	r3,r3,r2
 4002c9c:	e0bffe17 	ldw	r2,-8(fp)
 4002ca0:	10c00015 	stw	r3,0(r2)
	}

}
 4002ca4:	0001883a 	nop
 4002ca8:	e037883a 	mov	sp,fp
 4002cac:	df000017 	ldw	fp,0(sp)
 4002cb0:	dec00104 	addi	sp,sp,4
 4002cb4:	f800283a 	ret

04002cb8 <swap_buffer>:

static volatile uint32_t * swap_buffer(){
 4002cb8:	defffb04 	addi	sp,sp,-20
 4002cbc:	df000415 	stw	fp,16(sp)
 4002cc0:	df000404 	addi	fp,sp,16

	volatile uint32_t * buffer_address = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + 	VIDEO_DMA_CONTROLLER__BUFFER_OFFSET);
 4002cc4:	00820034 	movhi	r2,2048
 4002cc8:	10842004 	addi	r2,r2,4224
 4002ccc:	e0bffd15 	stw	r2,-12(fp)
	volatile uint32_t * back_buffer_address = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + 	VIDEO_DMA_CONTROLLER__BACK_BUFFER_OFFSET);
 4002cd0:	00820034 	movhi	r2,2048
 4002cd4:	10842104 	addi	r2,r2,4228
 4002cd8:	e0bffe15 	stw	r2,-8(fp)

	volatile uint32_t * status_control = (uint32_t *)(VIDEO_DMA_CONTROLLER_BASE + VIDEO_DMA_CONTROLLER__STATUS_CONTROL_OFFSET);
 4002cdc:	00820034 	movhi	r2,2048
 4002ce0:	10842304 	addi	r2,r2,4236
 4002ce4:	e0bfff15 	stw	r2,-4(fp)

	// instead of disabling DMA trigger buffer swap
	{

		// Setup back buffer register for swap
		if(*buffer_address == (uint32_t) image_buffer_a){
 4002ce8:	e0bffd17 	ldw	r2,-12(fp)
 4002cec:	10800017 	ldw	r2,0(r2)
 4002cf0:	00c18034 	movhi	r3,1536
 4002cf4:	10c0071e 	bne	r2,r3,4002d14 <swap_buffer+0x5c>
			current_image_buffer = image_buffer_a;
 4002cf8:	00818034 	movhi	r2,1536
 4002cfc:	e0bffc15 	stw	r2,-16(fp)
			*back_buffer_address = (uint32_t) image_buffer_b;
 4002d00:	0081c034 	movhi	r2,1792
 4002d04:	1007883a 	mov	r3,r2
 4002d08:	e0bffe17 	ldw	r2,-8(fp)
 4002d0c:	10c00015 	stw	r3,0(r2)
 4002d10:	00000606 	br	4002d2c <swap_buffer+0x74>
		} else {
			current_image_buffer = image_buffer_b;
 4002d14:	0081c034 	movhi	r2,1792
 4002d18:	e0bffc15 	stw	r2,-16(fp)
			*back_buffer_address = (uint32_t) image_buffer_a;
 4002d1c:	00818034 	movhi	r2,1536
 4002d20:	1007883a 	mov	r3,r2
 4002d24:	e0bffe17 	ldw	r2,-8(fp)
 4002d28:	10c00015 	stw	r3,0(r2)
		}

		// Trigger buffer swap
		*buffer_address = 0;
 4002d2c:	e0bffd17 	ldw	r2,-12(fp)
 4002d30:	10000015 	stw	zero,0(r2)

		// Wait for buffer swap
		while(*status_control & VIDEO_DMA_CONTROLLER__STATUS_CONTROL__MASK__SWAP);
 4002d34:	0001883a 	nop
 4002d38:	e0bfff17 	ldw	r2,-4(fp)
 4002d3c:	10800017 	ldw	r2,0(r2)
 4002d40:	1080004c 	andi	r2,r2,1
 4002d44:	103ffc1e 	bne	r2,zero,4002d38 <__alt_data_end+0xfc002d38>

	}

	return current_image_buffer;
 4002d48:	e0bffc17 	ldw	r2,-16(fp)

}
 4002d4c:	e037883a 	mov	sp,fp
 4002d50:	df000017 	ldw	fp,0(sp)
 4002d54:	dec00104 	addi	sp,sp,4
 4002d58:	f800283a 	ret

04002d5c <take_raw_picture_and_send_to_jtag>:


static void  take_raw_picture_and_send_to_jtag(void){
 4002d5c:	defffb04 	addi	sp,sp,-20
 4002d60:	dfc00415 	stw	ra,16(sp)
 4002d64:	df000315 	stw	fp,12(sp)
 4002d68:	df000304 	addi	fp,sp,12

	volatile uint32_t * current_image_buffer = swap_buffer();
 4002d6c:	4002cb80 	call	4002cb8 <swap_buffer>
 4002d70:	e0bffe15 	stw	r2,-8(fp)

	kiss_start(&jtag_kiss);
 4002d74:	010101b4 	movhi	r4,1030
 4002d78:	213f5804 	addi	r4,r4,-672
 4002d7c:	40040bc0 	call	40040bc <kiss_start>

	// Inject packet type
	uint8_t packet_type = KISS_PACKET_OPCODES__RAW_IMAGE;
 4002d80:	00bfe0c4 	movi	r2,-125
 4002d84:	e0bfff05 	stb	r2,-4(fp)
	kiss_send_data(&jtag_kiss, &packet_type, 1);
 4002d88:	e0bfff04 	addi	r2,fp,-4
 4002d8c:	01800044 	movi	r6,1
 4002d90:	100b883a 	mov	r5,r2
 4002d94:	010101b4 	movhi	r4,1030
 4002d98:	213f5804 	addi	r4,r4,-672
 4002d9c:	40041000 	call	4004100 <kiss_send_data>


	uint32_t i;
	for (i = 0; i < IMAGE_SIZE; i++) {
 4002da0:	e03ffd15 	stw	zero,-12(fp)
 4002da4:	00002506 	br	4002e3c <take_raw_picture_and_send_to_jtag+0xe0>

		uint8_t pixel_data[3];

		pixel_data[0] = (current_image_buffer[i] & 0x00FF0000) >> 16;
 4002da8:	e0bffd17 	ldw	r2,-12(fp)
 4002dac:	1085883a 	add	r2,r2,r2
 4002db0:	1085883a 	add	r2,r2,r2
 4002db4:	1007883a 	mov	r3,r2
 4002db8:	e0bffe17 	ldw	r2,-8(fp)
 4002dbc:	10c5883a 	add	r2,r2,r3
 4002dc0:	10800017 	ldw	r2,0(r2)
 4002dc4:	10803fec 	andhi	r2,r2,255
 4002dc8:	1004d43a 	srli	r2,r2,16
 4002dcc:	e0bfff45 	stb	r2,-3(fp)
		pixel_data[1] = (current_image_buffer[i] & 0x0000FF00) >> 8;
 4002dd0:	e0bffd17 	ldw	r2,-12(fp)
 4002dd4:	1085883a 	add	r2,r2,r2
 4002dd8:	1085883a 	add	r2,r2,r2
 4002ddc:	1007883a 	mov	r3,r2
 4002de0:	e0bffe17 	ldw	r2,-8(fp)
 4002de4:	10c5883a 	add	r2,r2,r3
 4002de8:	10800017 	ldw	r2,0(r2)
 4002dec:	10bfc00c 	andi	r2,r2,65280
 4002df0:	1004d23a 	srli	r2,r2,8
 4002df4:	e0bfff85 	stb	r2,-2(fp)
		pixel_data[2] = (current_image_buffer[i] & 0x000000FF) >> 0;
 4002df8:	e0bffd17 	ldw	r2,-12(fp)
 4002dfc:	1085883a 	add	r2,r2,r2
 4002e00:	1085883a 	add	r2,r2,r2
 4002e04:	1007883a 	mov	r3,r2
 4002e08:	e0bffe17 	ldw	r2,-8(fp)
 4002e0c:	10c5883a 	add	r2,r2,r3
 4002e10:	10800017 	ldw	r2,0(r2)
 4002e14:	e0bfffc5 	stb	r2,-1(fp)

		kiss_send_data(&jtag_kiss, pixel_data, 3);
 4002e18:	e0bfff44 	addi	r2,fp,-3
 4002e1c:	018000c4 	movi	r6,3
 4002e20:	100b883a 	mov	r5,r2
 4002e24:	010101b4 	movhi	r4,1030
 4002e28:	213f5804 	addi	r4,r4,-672
 4002e2c:	40041000 	call	4004100 <kiss_send_data>
	uint8_t packet_type = KISS_PACKET_OPCODES__RAW_IMAGE;
	kiss_send_data(&jtag_kiss, &packet_type, 1);


	uint32_t i;
	for (i = 0; i < IMAGE_SIZE; i++) {
 4002e30:	e0bffd17 	ldw	r2,-12(fp)
 4002e34:	10800044 	addi	r2,r2,1
 4002e38:	e0bffd15 	stw	r2,-12(fp)
 4002e3c:	e0fffd17 	ldw	r3,-12(fp)
 4002e40:	00800174 	movhi	r2,5
 4002e44:	10abffc4 	addi	r2,r2,-20481
 4002e48:	10ffd72e 	bgeu	r2,r3,4002da8 <__alt_data_end+0xfc002da8>

		kiss_send_data(&jtag_kiss, pixel_data, 3);

	}

	kiss_end(&jtag_kiss);
 4002e4c:	010101b4 	movhi	r4,1030
 4002e50:	213f5804 	addi	r4,r4,-672
 4002e54:	400422c0 	call	400422c <kiss_end>
}
 4002e58:	0001883a 	nop
 4002e5c:	e037883a 	mov	sp,fp
 4002e60:	dfc00117 	ldw	ra,4(sp)
 4002e64:	df000017 	ldw	fp,0(sp)
 4002e68:	dec00204 	addi	sp,sp,8
 4002e6c:	f800283a 	ret

04002e70 <jpeg_jtag_send>:

static void jpeg_jtag_send(void* context, void* data, int size) {
 4002e70:	defffb04 	addi	sp,sp,-20
 4002e74:	dfc00415 	stw	ra,16(sp)
 4002e78:	df000315 	stw	fp,12(sp)
 4002e7c:	df000304 	addi	fp,sp,12
 4002e80:	e13ffd15 	stw	r4,-12(fp)
 4002e84:	e17ffe15 	stw	r5,-8(fp)
 4002e88:	e1bfff15 	stw	r6,-4(fp)

	kiss_send_data(&jtag_kiss, data, size);
 4002e8c:	e0bfff17 	ldw	r2,-4(fp)
 4002e90:	100d883a 	mov	r6,r2
 4002e94:	e17ffe17 	ldw	r5,-8(fp)
 4002e98:	010101b4 	movhi	r4,1030
 4002e9c:	213f5804 	addi	r4,r4,-672
 4002ea0:	40041000 	call	4004100 <kiss_send_data>

};
 4002ea4:	0001883a 	nop
 4002ea8:	e037883a 	mov	sp,fp
 4002eac:	dfc00117 	ldw	ra,4(sp)
 4002eb0:	df000017 	ldw	fp,0(sp)
 4002eb4:	dec00204 	addi	sp,sp,8
 4002eb8:	f800283a 	ret

04002ebc <take_jpeg_picture_and_send_to_jtag>:

static void take_jpeg_picture_and_send_to_jtag(void) {
 4002ebc:	defff804 	addi	sp,sp,-32
 4002ec0:	dfc00715 	stw	ra,28(sp)
 4002ec4:	df000615 	stw	fp,24(sp)
 4002ec8:	df000604 	addi	fp,sp,24

	volatile uint32_t * current_image_buffer = swap_buffer();
 4002ecc:	4002cb80 	call	4002cb8 <swap_buffer>
 4002ed0:	e0bffe15 	stw	r2,-8(fp)

	// copy image buffer to correct format
	uint32_t i;
	for(i = 0; i < IMAGE_SIZE; i++){
 4002ed4:	e03ffd15 	stw	zero,-12(fp)
 4002ed8:	00003906 	br	4002fc0 <take_jpeg_picture_and_send_to_jtag+0x104>
		jpeg_image_buffer[i*3 + 0] = (current_image_buffer[i] & 0x00FF0000) >> 16;
 4002edc:	e0fffd17 	ldw	r3,-12(fp)
 4002ee0:	1805883a 	mov	r2,r3
 4002ee4:	1085883a 	add	r2,r2,r2
 4002ee8:	10c7883a 	add	r3,r2,r3
 4002eec:	e0bffd17 	ldw	r2,-12(fp)
 4002ef0:	1085883a 	add	r2,r2,r2
 4002ef4:	1085883a 	add	r2,r2,r2
 4002ef8:	1009883a 	mov	r4,r2
 4002efc:	e0bffe17 	ldw	r2,-8(fp)
 4002f00:	1105883a 	add	r2,r2,r4
 4002f04:	10800017 	ldw	r2,0(r2)
 4002f08:	10803fec 	andhi	r2,r2,255
 4002f0c:	1004d43a 	srli	r2,r2,16
 4002f10:	1009883a 	mov	r4,r2
 4002f14:	00810074 	movhi	r2,1025
 4002f18:	10935804 	addi	r2,r2,19808
 4002f1c:	10c5883a 	add	r2,r2,r3
 4002f20:	11000005 	stb	r4,0(r2)
		jpeg_image_buffer[i*3 + 1] = (current_image_buffer[i] & 0x000000FF) >> 0;
 4002f24:	e0fffd17 	ldw	r3,-12(fp)
 4002f28:	1805883a 	mov	r2,r3
 4002f2c:	1085883a 	add	r2,r2,r2
 4002f30:	10c5883a 	add	r2,r2,r3
 4002f34:	10c00044 	addi	r3,r2,1
 4002f38:	e0bffd17 	ldw	r2,-12(fp)
 4002f3c:	1085883a 	add	r2,r2,r2
 4002f40:	1085883a 	add	r2,r2,r2
 4002f44:	1009883a 	mov	r4,r2
 4002f48:	e0bffe17 	ldw	r2,-8(fp)
 4002f4c:	1105883a 	add	r2,r2,r4
 4002f50:	10800017 	ldw	r2,0(r2)
 4002f54:	1009883a 	mov	r4,r2
 4002f58:	00810074 	movhi	r2,1025
 4002f5c:	10935804 	addi	r2,r2,19808
 4002f60:	10c5883a 	add	r2,r2,r3
 4002f64:	11000005 	stb	r4,0(r2)
		jpeg_image_buffer[i*3 + 2] = (current_image_buffer[i] & 0x0000FF00) >> 8;
 4002f68:	e0fffd17 	ldw	r3,-12(fp)
 4002f6c:	1805883a 	mov	r2,r3
 4002f70:	1085883a 	add	r2,r2,r2
 4002f74:	10c5883a 	add	r2,r2,r3
 4002f78:	10c00084 	addi	r3,r2,2
 4002f7c:	e0bffd17 	ldw	r2,-12(fp)
 4002f80:	1085883a 	add	r2,r2,r2
 4002f84:	1085883a 	add	r2,r2,r2
 4002f88:	1009883a 	mov	r4,r2
 4002f8c:	e0bffe17 	ldw	r2,-8(fp)
 4002f90:	1105883a 	add	r2,r2,r4
 4002f94:	10800017 	ldw	r2,0(r2)
 4002f98:	10bfc00c 	andi	r2,r2,65280
 4002f9c:	1004d23a 	srli	r2,r2,8
 4002fa0:	1009883a 	mov	r4,r2
 4002fa4:	00810074 	movhi	r2,1025
 4002fa8:	10935804 	addi	r2,r2,19808
 4002fac:	10c5883a 	add	r2,r2,r3
 4002fb0:	11000005 	stb	r4,0(r2)

	volatile uint32_t * current_image_buffer = swap_buffer();

	// copy image buffer to correct format
	uint32_t i;
	for(i = 0; i < IMAGE_SIZE; i++){
 4002fb4:	e0bffd17 	ldw	r2,-12(fp)
 4002fb8:	10800044 	addi	r2,r2,1
 4002fbc:	e0bffd15 	stw	r2,-12(fp)
 4002fc0:	e0fffd17 	ldw	r3,-12(fp)
 4002fc4:	00800174 	movhi	r2,5
 4002fc8:	10abffc4 	addi	r2,r2,-20481
 4002fcc:	10ffc32e 	bgeu	r2,r3,4002edc <__alt_data_end+0xfc002edc>
		jpeg_image_buffer[i*3 + 0] = (current_image_buffer[i] & 0x00FF0000) >> 16;
		jpeg_image_buffer[i*3 + 1] = (current_image_buffer[i] & 0x000000FF) >> 0;
		jpeg_image_buffer[i*3 + 2] = (current_image_buffer[i] & 0x0000FF00) >> 8;
	}

	kiss_start(&jtag_kiss);
 4002fd0:	010101b4 	movhi	r4,1030
 4002fd4:	213f5804 	addi	r4,r4,-672
 4002fd8:	40040bc0 	call	40040bc <kiss_start>

	// Inject packet type
	uint8_t packet_type = KISS_PACKET_OPCODES__JPEG_IMAGE;
 4002fdc:	00bfe084 	movi	r2,-126
 4002fe0:	e0bfff05 	stb	r2,-4(fp)
	kiss_send_data(&jtag_kiss, &packet_type, 1);
 4002fe4:	e0bfff04 	addi	r2,fp,-4
 4002fe8:	01800044 	movi	r6,1
 4002fec:	100b883a 	mov	r5,r2
 4002ff0:	010101b4 	movhi	r4,1030
 4002ff4:	213f5804 	addi	r4,r4,-672
 4002ff8:	40041000 	call	4004100 <kiss_send_data>

	// Convert image to JPEG and send over JTAG
	tje_encode_with_func(
 4002ffc:	00810074 	movhi	r2,1025
 4003000:	10935804 	addi	r2,r2,19808
 4003004:	d8800215 	stw	r2,8(sp)
 4003008:	008000c4 	movi	r2,3
 400300c:	d8800115 	stw	r2,4(sp)
 4003010:	00807804 	movi	r2,480
 4003014:	d8800015 	stw	r2,0(sp)
 4003018:	01c0a004 	movi	r7,640
 400301c:	01800044 	movi	r6,1
 4003020:	000b883a 	mov	r5,zero
 4003024:	01010034 	movhi	r4,1024
 4003028:	210b9c04 	addi	r4,r4,11888
 400302c:	40029a80 	call	40029a8 <tje_encode_with_func>
		IMAGE_HEIGHT,
		IMAGE_CHANNELS,
		jpeg_image_buffer // TODO select image buffer based on above swap
	);

	kiss_end(&jtag_kiss);
 4003030:	010101b4 	movhi	r4,1030
 4003034:	213f5804 	addi	r4,r4,-672
 4003038:	400422c0 	call	400422c <kiss_end>

}
 400303c:	0001883a 	nop
 4003040:	e037883a 	mov	sp,fp
 4003044:	dfc00117 	ldw	ra,4(sp)
 4003048:	df000017 	ldw	fp,0(sp)
 400304c:	dec00204 	addi	sp,sp,8
 4003050:	f800283a 	ret

04003054 <read_uptime>:
/**
 * Gets system uptime in ms
 *
 * @return uptime in ms
 */
static uint32_t read_uptime(void){
 4003054:	deffff04 	addi	sp,sp,-4
 4003058:	df000015 	stw	fp,0(sp)
 400305c:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(UPTIME_BASE);
 4003060:	00820034 	movhi	r2,2048
 4003064:	10840004 	addi	r2,r2,4096
 4003068:	10800037 	ldwio	r2,0(r2)

}
 400306c:	e037883a 	mov	sp,fp
 4003070:	df000017 	ldw	fp,0(sp)
 4003074:	dec00104 	addi	sp,sp,4
 4003078:	f800283a 	ret

0400307c <read_line_detect>:
 *************************************************/

PID_t drive_pid;
PID_t yaw_pid;

static uint32_t read_line_detect(void){
 400307c:	deffff04 	addi	sp,sp,-4
 4003080:	df000015 	stw	fp,0(sp)
 4003084:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(LINE_DETECT_BASE);
 4003088:	00820034 	movhi	r2,2048
 400308c:	10842804 	addi	r2,r2,4256
 4003090:	10800037 	ldwio	r2,0(r2)

}
 4003094:	e037883a 	mov	sp,fp
 4003098:	df000017 	ldw	fp,0(sp)
 400309c:	dec00104 	addi	sp,sp,4
 40030a0:	f800283a 	ret

040030a4 <read_encoder_left>:
/**
 * Reads the left encoder ticks
 *
 * @return left encoder ticks
 */
static int32_t read_encoder_left(void){
 40030a4:	deffff04 	addi	sp,sp,-4
 40030a8:	df000015 	stw	fp,0(sp)
 40030ac:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(ENCODER_LEFT_BASE);
 40030b0:	00820034 	movhi	r2,2048
 40030b4:	10840c04 	addi	r2,r2,4144
 40030b8:	10800037 	ldwio	r2,0(r2)

}
 40030bc:	e037883a 	mov	sp,fp
 40030c0:	df000017 	ldw	fp,0(sp)
 40030c4:	dec00104 	addi	sp,sp,4
 40030c8:	f800283a 	ret

040030cc <read_encoder_right>:
/**
 * Reads the right encoder ticks
 *
 * @return right encoder ticks
 */
static int32_t read_encoder_right(void){
 40030cc:	deffff04 	addi	sp,sp,-4
 40030d0:	df000015 	stw	fp,0(sp)
 40030d4:	d839883a 	mov	fp,sp

	return IORD_ALTERA_AVALON_PIO_DATA(ENCODER_RIGHT_BASE);
 40030d8:	00820034 	movhi	r2,2048
 40030dc:	10841004 	addi	r2,r2,4160
 40030e0:	10800037 	ldwio	r2,0(r2)

}
 40030e4:	e037883a 	mov	sp,fp
 40030e8:	df000017 	ldw	fp,0(sp)
 40030ec:	dec00104 	addi	sp,sp,4
 40030f0:	f800283a 	ret

040030f4 <set_motors>:
 * Sets the motors forward/reverse and speed reference using a -255 to 255 pwm output for each motor
 *
 * @param speed_left The desired PWM control signal for the left motor
 * @param speed_left The desired PWM control signal for the right motor
 */
static void set_motors(int16_t speed_left, int16_t speed_right){
 40030f4:	defffb04 	addi	sp,sp,-20
 40030f8:	df000415 	stw	fp,16(sp)
 40030fc:	df000404 	addi	fp,sp,16
 4003100:	2007883a 	mov	r3,r4
 4003104:	2805883a 	mov	r2,r5
 4003108:	e0fffe0d 	sth	r3,-8(fp)
 400310c:	e0bfff0d 	sth	r2,-4(fp)

	uint32_t motor_direction = 0;
 4003110:	e03ffc15 	stw	zero,-16(fp)

	if(speed_left == 0){               // Stop left motor if input 0
 4003114:	e0bffe0f 	ldh	r2,-8(fp)
 4003118:	10000c26 	beq	r2,zero,400314c <set_motors+0x58>
		motor_direction |= 0b00;
	} else if(speed_left < 0){
 400311c:	e0bffe0f 	ldh	r2,-8(fp)
 4003120:	1000070e 	bge	r2,zero,4003140 <set_motors+0x4c>
		motor_direction |= 0b01;
 4003124:	e0bffc17 	ldw	r2,-16(fp)
 4003128:	10800054 	ori	r2,r2,1
 400312c:	e0bffc15 	stw	r2,-16(fp)
		speed_left *= -1;
 4003130:	e0bffe0b 	ldhu	r2,-8(fp)
 4003134:	0085c83a 	sub	r2,zero,r2
 4003138:	e0bffe0d 	sth	r2,-8(fp)
 400313c:	00000306 	br	400314c <set_motors+0x58>
	} else {
		motor_direction |= 0b10;
 4003140:	e0bffc17 	ldw	r2,-16(fp)
 4003144:	10800094 	ori	r2,r2,2
 4003148:	e0bffc15 	stw	r2,-16(fp)
	}

	if(speed_right == 0){              // Stop right motor if input 0
 400314c:	e0bfff0f 	ldh	r2,-4(fp)
 4003150:	10000c26 	beq	r2,zero,4003184 <set_motors+0x90>
		motor_direction |= 0b0000;
	} else if(speed_right < 0){
 4003154:	e0bfff0f 	ldh	r2,-4(fp)
 4003158:	1000070e 	bge	r2,zero,4003178 <set_motors+0x84>
		motor_direction |= 0b0100;
 400315c:	e0bffc17 	ldw	r2,-16(fp)
 4003160:	10800114 	ori	r2,r2,4
 4003164:	e0bffc15 	stw	r2,-16(fp)
		speed_right *= -1;
 4003168:	e0bfff0b 	ldhu	r2,-4(fp)
 400316c:	0085c83a 	sub	r2,zero,r2
 4003170:	e0bfff0d 	sth	r2,-4(fp)
 4003174:	00000306 	br	4003184 <set_motors+0x90>
	} else {
		motor_direction |= 0b1000;
 4003178:	e0bffc17 	ldw	r2,-16(fp)
 400317c:	10800214 	ori	r2,r2,8
 4003180:	e0bffc15 	stw	r2,-16(fp)
	}

	// Set motor directions
	IOWR_ALTERA_AVALON_PIO_DATA(MOTOR_DIRECTION_BASE, motor_direction);
 4003184:	e0fffc17 	ldw	r3,-16(fp)
 4003188:	00820034 	movhi	r2,2048
 400318c:	10840804 	addi	r2,r2,4128
 4003190:	10c00035 	stwio	r3,0(r2)

	// Set the PWM values
	volatile uint32_t pwm_command = ( ((uint32_t)speed_right) << 8) | ((uint32_t)speed_left);
 4003194:	e0bfff0f 	ldh	r2,-4(fp)
 4003198:	1006923a 	slli	r3,r2,8
 400319c:	e0bffe0f 	ldh	r2,-8(fp)
 40031a0:	1884b03a 	or	r2,r3,r2
 40031a4:	e0bffd15 	stw	r2,-12(fp)
	IOWR_ALTERA_AVALON_PIO_DATA(PWM_BASE, pwm_command);
 40031a8:	e0bffd17 	ldw	r2,-12(fp)
 40031ac:	1007883a 	mov	r3,r2
 40031b0:	00820034 	movhi	r2,2048
 40031b4:	10841404 	addi	r2,r2,4176
 40031b8:	10c00035 	stwio	r3,0(r2)

}
 40031bc:	0001883a 	nop
 40031c0:	e037883a 	mov	sp,fp
 40031c4:	df000017 	ldw	fp,0(sp)
 40031c8:	dec00104 	addi	sp,sp,4
 40031cc:	f800283a 	ret

040031d0 <scale_output>:
/**
 * Scales the PWM value from max scale ot match the maximum possible motor speed
 *
 * @param output The desired PWM control signal for the motor before scaling
 */
double scale_output(double output){
 40031d0:	defffc04 	addi	sp,sp,-16
 40031d4:	dfc00315 	stw	ra,12(sp)
 40031d8:	df000215 	stw	fp,8(sp)
 40031dc:	df000204 	addi	fp,sp,8
 40031e0:	e13ffe15 	stw	r4,-8(fp)
 40031e4:	e17fff15 	stw	r5,-4(fp)

  return output * (maxPWM / 255.0);
 40031e8:	00bff704 	movi	r2,-36
 40031ec:	10803fcc 	andi	r2,r2,255
 40031f0:	1009883a 	mov	r4,r2
 40031f4:	40084400 	call	4008440 <__floatsidf>
 40031f8:	1011883a 	mov	r8,r2
 40031fc:	1813883a 	mov	r9,r3
 4003200:	000d883a 	mov	r6,zero
 4003204:	01d01c34 	movhi	r7,16496
 4003208:	39f80004 	addi	r7,r7,-8192
 400320c:	4009883a 	mov	r4,r8
 4003210:	480b883a 	mov	r5,r9
 4003214:	40066b80 	call	40066b8 <__divdf3>
 4003218:	1009883a 	mov	r4,r2
 400321c:	180b883a 	mov	r5,r3
 4003220:	2005883a 	mov	r2,r4
 4003224:	2807883a 	mov	r3,r5
 4003228:	e1bffe17 	ldw	r6,-8(fp)
 400322c:	e1ffff17 	ldw	r7,-4(fp)
 4003230:	1009883a 	mov	r4,r2
 4003234:	180b883a 	mov	r5,r3
 4003238:	40072580 	call	4007258 <__muldf3>
 400323c:	100f883a 	mov	r7,r2
 4003240:	1811883a 	mov	r8,r3
 4003244:	380b883a 	mov	r5,r7
 4003248:	400d883a 	mov	r6,r8
 400324c:	2807883a 	mov	r3,r5
 4003250:	3009883a 	mov	r4,r6

}
 4003254:	1805883a 	mov	r2,r3
 4003258:	2007883a 	mov	r3,r4
 400325c:	e037883a 	mov	sp,fp
 4003260:	dfc00117 	ldw	ra,4(sp)
 4003264:	df000017 	ldw	fp,0(sp)
 4003268:	dec00204 	addi	sp,sp,8
 400326c:	f800283a 	ret

04003270 <normalize_output>:
 * the zone where the motor jumps, opting for a higher minimum speed before
 * cutoff
 *
 * @param output The desired PWM control signal for the motor before correction
 */
int normalize_output(double output){
 4003270:	defffb04 	addi	sp,sp,-20
 4003274:	dfc00415 	stw	ra,16(sp)
 4003278:	df000315 	stw	fp,12(sp)
 400327c:	dc000215 	stw	r16,8(sp)
 4003280:	df000304 	addi	fp,sp,12
 4003284:	e13ffd15 	stw	r4,-12(fp)
 4003288:	e17ffe15 	stw	r5,-8(fp)

  output = max(min(output, 255.0), -255.0);
 400328c:	000d883a 	mov	r6,zero
 4003290:	01d01c34 	movhi	r7,16496
 4003294:	39f80004 	addi	r7,r7,-8192
 4003298:	e13ffd17 	ldw	r4,-12(fp)
 400329c:	e17ffe17 	ldw	r5,-8(fp)
 40032a0:	40071640 	call	4007164 <__ledf2>
 40032a4:	10000a0e 	bge	r2,zero,40032d0 <normalize_output+0x60>
 40032a8:	04000044 	movi	r16,1
 40032ac:	000d883a 	mov	r6,zero
 40032b0:	01f01c34 	movhi	r7,49264
 40032b4:	39f80004 	addi	r7,r7,-8192
 40032b8:	e13ffd17 	ldw	r4,-12(fp)
 40032bc:	e17ffe17 	ldw	r5,-8(fp)
 40032c0:	40070880 	call	4007088 <__gedf2>
 40032c4:	00800316 	blt	zero,r2,40032d4 <normalize_output+0x64>
 40032c8:	0021883a 	mov	r16,zero
 40032cc:	00000106 	br	40032d4 <normalize_output+0x64>
 40032d0:	04000044 	movi	r16,1
 40032d4:	80803fcc 	andi	r2,r16,255
 40032d8:	10000e26 	beq	r2,zero,4003314 <normalize_output+0xa4>
 40032dc:	000d883a 	mov	r6,zero
 40032e0:	01d01c34 	movhi	r7,16496
 40032e4:	39f80004 	addi	r7,r7,-8192
 40032e8:	e13ffd17 	ldw	r4,-12(fp)
 40032ec:	e17ffe17 	ldw	r5,-8(fp)
 40032f0:	40071640 	call	4007164 <__ledf2>
 40032f4:	1000030e 	bge	r2,zero,4003304 <normalize_output+0x94>
 40032f8:	e0bffd17 	ldw	r2,-12(fp)
 40032fc:	e0fffe17 	ldw	r3,-8(fp)
 4003300:	00000706 	br	4003320 <normalize_output+0xb0>
 4003304:	0005883a 	mov	r2,zero
 4003308:	00d01c34 	movhi	r3,16496
 400330c:	18f80004 	addi	r3,r3,-8192
 4003310:	00000306 	br	4003320 <normalize_output+0xb0>
 4003314:	0005883a 	mov	r2,zero
 4003318:	00f01c34 	movhi	r3,49264
 400331c:	18f80004 	addi	r3,r3,-8192
 4003320:	e0bffd15 	stw	r2,-12(fp)
 4003324:	e0fffe15 	stw	r3,-8(fp)

  if( output < minimum_zero && output > -1 * minimum_zero){
 4003328:	00800044 	movi	r2,1
 400332c:	10803fcc 	andi	r2,r2,255
 4003330:	1009883a 	mov	r4,r2
 4003334:	40084400 	call	4008440 <__floatsidf>
 4003338:	1011883a 	mov	r8,r2
 400333c:	1813883a 	mov	r9,r3
 4003340:	e1bffd17 	ldw	r6,-12(fp)
 4003344:	e1fffe17 	ldw	r7,-8(fp)
 4003348:	4009883a 	mov	r4,r8
 400334c:	480b883a 	mov	r5,r9
 4003350:	40070880 	call	4007088 <__gedf2>
 4003354:	0080100e 	bge	zero,r2,4003398 <normalize_output+0x128>
 4003358:	00800044 	movi	r2,1
 400335c:	10803fcc 	andi	r2,r2,255
 4003360:	0085c83a 	sub	r2,zero,r2
 4003364:	1009883a 	mov	r4,r2
 4003368:	40084400 	call	4008440 <__floatsidf>
 400336c:	1011883a 	mov	r8,r2
 4003370:	1813883a 	mov	r9,r3
 4003374:	e1bffd17 	ldw	r6,-12(fp)
 4003378:	e1fffe17 	ldw	r7,-8(fp)
 400337c:	4009883a 	mov	r4,r8
 4003380:	480b883a 	mov	r5,r9
 4003384:	40071640 	call	4007164 <__ledf2>
 4003388:	1000030e 	bge	r2,zero,4003398 <normalize_output+0x128>

    output = 0;
 400338c:	e03ffd15 	stw	zero,-12(fp)
 4003390:	e03ffe15 	stw	zero,-8(fp)
 4003394:	00003106 	br	400345c <normalize_output+0x1ec>

  } else if( output < minimum_stable_pwm && output > -1 * minimum_stable_pwm ){
 4003398:	00800f04 	movi	r2,60
 400339c:	10803fcc 	andi	r2,r2,255
 40033a0:	1009883a 	mov	r4,r2
 40033a4:	40084400 	call	4008440 <__floatsidf>
 40033a8:	1011883a 	mov	r8,r2
 40033ac:	1813883a 	mov	r9,r3
 40033b0:	e1bffd17 	ldw	r6,-12(fp)
 40033b4:	e1fffe17 	ldw	r7,-8(fp)
 40033b8:	4009883a 	mov	r4,r8
 40033bc:	480b883a 	mov	r5,r9
 40033c0:	40070880 	call	4007088 <__gedf2>
 40033c4:	0080250e 	bge	zero,r2,400345c <normalize_output+0x1ec>
 40033c8:	00800f04 	movi	r2,60
 40033cc:	10803fcc 	andi	r2,r2,255
 40033d0:	0085c83a 	sub	r2,zero,r2
 40033d4:	1009883a 	mov	r4,r2
 40033d8:	40084400 	call	4008440 <__floatsidf>
 40033dc:	1011883a 	mov	r8,r2
 40033e0:	1813883a 	mov	r9,r3
 40033e4:	e1bffd17 	ldw	r6,-12(fp)
 40033e8:	e1fffe17 	ldw	r7,-8(fp)
 40033ec:	4009883a 	mov	r4,r8
 40033f0:	480b883a 	mov	r5,r9
 40033f4:	40071640 	call	4007164 <__ledf2>
 40033f8:	1000180e 	bge	r2,zero,400345c <normalize_output+0x1ec>

    if(output > 0){
 40033fc:	000d883a 	mov	r6,zero
 4003400:	000f883a 	mov	r7,zero
 4003404:	e13ffd17 	ldw	r4,-12(fp)
 4003408:	e17ffe17 	ldw	r5,-8(fp)
 400340c:	40070880 	call	4007088 <__gedf2>
 4003410:	0080090e 	bge	zero,r2,4003438 <normalize_output+0x1c8>
      output = minimum_stable_pwm;
 4003414:	00800f04 	movi	r2,60
 4003418:	10803fcc 	andi	r2,r2,255
 400341c:	1009883a 	mov	r4,r2
 4003420:	400851c0 	call	400851c <__floatunsidf>
 4003424:	1009883a 	mov	r4,r2
 4003428:	180b883a 	mov	r5,r3
 400342c:	e13ffd15 	stw	r4,-12(fp)
 4003430:	e17ffe15 	stw	r5,-8(fp)
 4003434:	00000906 	br	400345c <normalize_output+0x1ec>
    } else {
      output = -1 * minimum_stable_pwm;
 4003438:	00800f04 	movi	r2,60
 400343c:	10803fcc 	andi	r2,r2,255
 4003440:	0085c83a 	sub	r2,zero,r2
 4003444:	1009883a 	mov	r4,r2
 4003448:	40084400 	call	4008440 <__floatsidf>
 400344c:	1009883a 	mov	r4,r2
 4003450:	180b883a 	mov	r5,r3
 4003454:	e13ffd15 	stw	r4,-12(fp)
 4003458:	e17ffe15 	stw	r5,-8(fp)
    }

  }

  return output;
 400345c:	e13ffd17 	ldw	r4,-12(fp)
 4003460:	e17ffe17 	ldw	r5,-8(fp)
 4003464:	40083c00 	call	40083c0 <__fixdfsi>

}
 4003468:	e6ffff04 	addi	sp,fp,-4
 400346c:	dfc00217 	ldw	ra,8(sp)
 4003470:	df000117 	ldw	fp,4(sp)
 4003474:	dc000017 	ldw	r16,0(sp)
 4003478:	dec00304 	addi	sp,sp,12
 400347c:	f800283a 	ret

04003480 <motor_init>:

// Init motor pin states
static void motor_init(void){
 4003480:	defffe04 	addi	sp,sp,-8
 4003484:	dfc00115 	stw	ra,4(sp)
 4003488:	df000015 	stw	fp,0(sp)
 400348c:	d839883a 	mov	fp,sp
	// Default state to motors not enabled
	//digitalWrite(pinCW_Left, LOW);   // stop clockwise
	//digitalWrite(pinCC_Left, LOW);   // stop counter-clockwise

	// Stop motors
	set_motors(0, 0);
 4003490:	000b883a 	mov	r5,zero
 4003494:	0009883a 	mov	r4,zero
 4003498:	40030f40 	call	40030f4 <set_motors>
	* when the drive PID is at full output.
	*/

	// Setup the Drive PID

	drive_pid.kp   = 15;
 400349c:	008101b4 	movhi	r2,1030
 40034a0:	10bf8004 	addi	r2,r2,-512
 40034a4:	00d05c34 	movhi	r3,16752
 40034a8:	10c00315 	stw	r3,12(r2)
	drive_pid.ki   = 0;
 40034ac:	008101b4 	movhi	r2,1030
 40034b0:	10bf8004 	addi	r2,r2,-512
 40034b4:	10000415 	stw	zero,16(r2)
	drive_pid.kd   = 2;
 40034b8:	008101b4 	movhi	r2,1030
 40034bc:	10bf8004 	addi	r2,r2,-512
 40034c0:	00d00034 	movhi	r3,16384
 40034c4:	10c00515 	stw	r3,20(r2)
	drive_pid.max  =  120;					// Limit range to -128 to 128
 40034c8:	008101b4 	movhi	r2,1030
 40034cc:	10bf8004 	addi	r2,r2,-512
 40034d0:	00d0bc34 	movhi	r3,17136
 40034d4:	10c00715 	stw	r3,28(r2)
	drive_pid.min  = -120;
 40034d8:	008101b4 	movhi	r2,1030
 40034dc:	10bf8004 	addi	r2,r2,-512
 40034e0:	00f0bc34 	movhi	r3,49904
 40034e4:	10c00815 	stw	r3,32(r2)
	drive_pid.mode = FORWARD;
 40034e8:	008101b4 	movhi	r2,1030
 40034ec:	10bf8004 	addi	r2,r2,-512
 40034f0:	10000915 	stw	zero,36(r2)
	//drive_pid.SetSampleTime(20);          // 50 Hz update rate

	// Setup the Yaw PID
	yaw_pid.kp   = 20;
 40034f4:	008101b4 	movhi	r2,1030
 40034f8:	10bf7604 	addi	r2,r2,-552
 40034fc:	00d06834 	movhi	r3,16800
 4003500:	10c00315 	stw	r3,12(r2)
	yaw_pid.ki   = 0;
 4003504:	008101b4 	movhi	r2,1030
 4003508:	10bf7604 	addi	r2,r2,-552
 400350c:	10000415 	stw	zero,16(r2)
	yaw_pid.kd   = 2;
 4003510:	008101b4 	movhi	r2,1030
 4003514:	10bf7604 	addi	r2,r2,-552
 4003518:	00d00034 	movhi	r3,16384
 400351c:	10c00515 	stw	r3,20(r2)
	yaw_pid.max  =  140;
 4003520:	008101b4 	movhi	r2,1030
 4003524:	10bf7604 	addi	r2,r2,-552
 4003528:	00d0c334 	movhi	r3,17164
 400352c:	10c00715 	stw	r3,28(r2)
	yaw_pid.min  = -140;
 4003530:	008101b4 	movhi	r2,1030
 4003534:	10bf7604 	addi	r2,r2,-552
 4003538:	00f0c334 	movhi	r3,49932
 400353c:	10c00815 	stw	r3,32(r2)
	yaw_pid.mode = REVERSE;
 4003540:	008101b4 	movhi	r2,1030
 4003544:	10bf7604 	addi	r2,r2,-552
 4003548:	00c00044 	movi	r3,1
 400354c:	10c00915 	stw	r3,36(r2)

}
 4003550:	0001883a 	nop
 4003554:	e037883a 	mov	sp,fp
 4003558:	dfc00117 	ldw	ra,4(sp)
 400355c:	df000017 	ldw	fp,0(sp)
 4003560:	dec00204 	addi	sp,sp,8
 4003564:	f800283a 	ret

04003568 <wait_button_press>:
	.num_states = 1,
	.drive_changes = right_drive_changes,
	.yaw_changes = right_yaw_changes
};

static void wait_button_press(void){
 4003568:	defffe04 	addi	sp,sp,-8
 400356c:	dfc00115 	stw	ra,4(sp)
 4003570:	df000015 	stw	fp,0(sp)
 4003574:	d839883a 	mov	fp,sp

	// wait for ON switch
	while ( ( IORD_ALTERA_AVALON_PIO_DATA(ON_BUTTON_BASE) & 1 )  == 0){
 4003578:	00000206 	br	4003584 <wait_button_press+0x1c>
		usleep(1000);
 400357c:	0100fa04 	movi	r4,1000
 4003580:	400ec180 	call	400ec18 <usleep>
};

static void wait_button_press(void){

	// wait for ON switch
	while ( ( IORD_ALTERA_AVALON_PIO_DATA(ON_BUTTON_BASE) & 1 )  == 0){
 4003584:	00820034 	movhi	r2,2048
 4003588:	10840404 	addi	r2,r2,4112
 400358c:	10800037 	ldwio	r2,0(r2)
 4003590:	1080004c 	andi	r2,r2,1
 4003594:	103ff926 	beq	r2,zero,400357c <__alt_data_end+0xfc00357c>
		usleep(1000);
	}

}
 4003598:	0001883a 	nop
 400359c:	e037883a 	mov	sp,fp
 40035a0:	dfc00117 	ldw	ra,4(sp)
 40035a4:	df000017 	ldw	fp,0(sp)
 40035a8:	dec00204 	addi	sp,sp,8
 40035ac:	f800283a 	ret

040035b0 <motor_control_loop>:
static void motor_control_loop(control_t * instructions, bool wait){
 40035b0:	deffec04 	addi	sp,sp,-80
 40035b4:	dfc01315 	stw	ra,76(sp)
 40035b8:	df001215 	stw	fp,72(sp)
 40035bc:	dc401115 	stw	r17,68(sp)
 40035c0:	dc001015 	stw	r16,64(sp)
 40035c4:	df001204 	addi	fp,sp,72
 40035c8:	e13ffc15 	stw	r4,-16(fp)
 40035cc:	2805883a 	mov	r2,r5
 40035d0:	e0bffd05 	stb	r2,-12(fp)

	motor_init();
 40035d4:	40034800 	call	4003480 <motor_init>

	//  Initialize drive and yaw setpoints to 0
	drive_pid.setpoint = 0.0f;
 40035d8:	008101b4 	movhi	r2,1030
 40035dc:	10bf8004 	addi	r2,r2,-512
 40035e0:	10000015 	stw	zero,0(r2)
	yaw_pid.setpoint = 0.0f;
 40035e4:	008101b4 	movhi	r2,1030
 40035e8:	10bf7604 	addi	r2,r2,-552
 40035ec:	10000015 	stw	zero,0(r2)

	// State machine variables to allow transition between pre-programmed motions
	int state = 0;
 40035f0:	e03fee15 	stw	zero,-72(fp)
	bool state_change = false;
 40035f4:	e03fef05 	stb	zero,-68(fp)

	// State machine finished, allows exiting of task loop to wait for another switch press to run again
	bool done = false;
 40035f8:	e03fef45 	stb	zero,-67(fp)

	if(wait){
 40035fc:	e0bffd03 	ldbu	r2,-12(fp)
 4003600:	10000126 	beq	r2,zero,4003608 <motor_control_loop+0x58>
		wait_button_press();
 4003604:	40035680 	call	4003568 <wait_button_press>
	}

	usleep(100000);    // Allow user to step away before robot moves
 4003608:	010000b4 	movhi	r4,2
 400360c:	2121a804 	addi	r4,r4,-31072
 4003610:	400ec180 	call	400ec18 <usleep>

	// Reset state variables
	done = false;
 4003614:	e03fef45 	stb	zero,-67(fp)
	state = 0;
 4003618:	e03fee15 	stw	zero,-72(fp)

	// setup encoder offsets
	float left_offset = read_encoder_left() / 1000.0f;
 400361c:	40030a40 	call	40030a4 <read_encoder_left>
 4003620:	1009883a 	mov	r4,r2
 4003624:	4005ce80 	call	4005ce8 <__floatsisf>
 4003628:	1007883a 	mov	r3,r2
 400362c:	01511eb4 	movhi	r5,17530
 4003630:	1809883a 	mov	r4,r3
 4003634:	4004da00 	call	4004da0 <__divsf3>
 4003638:	1007883a 	mov	r3,r2
 400363c:	e0fff115 	stw	r3,-60(fp)
	float right_offset = read_encoder_right() / 1000.0f;
 4003640:	40030cc0 	call	40030cc <read_encoder_right>
 4003644:	1009883a 	mov	r4,r2
 4003648:	4005ce80 	call	4005ce8 <__floatsisf>
 400364c:	1007883a 	mov	r3,r2
 4003650:	01511eb4 	movhi	r5,17530
 4003654:	1809883a 	mov	r4,r3
 4003658:	4004da00 	call	4004da0 <__divsf3>
 400365c:	1007883a 	mov	r3,r2
 4003660:	e0fff215 	stw	r3,-56(fp)

	// reset state
	drive_pid.setpoint = 0.0f;
 4003664:	008101b4 	movhi	r2,1030
 4003668:	10bf8004 	addi	r2,r2,-512
 400366c:	10000015 	stw	zero,0(r2)
	yaw_pid.setpoint = 0.0f;
 4003670:	008101b4 	movhi	r2,1030
 4003674:	10bf7604 	addi	r2,r2,-552
 4003678:	10000015 	stw	zero,0(r2)

	float last_time = read_uptime() / 1000.0;
 400367c:	40030540 	call	4003054 <read_uptime>
 4003680:	1009883a 	mov	r4,r2
 4003684:	400851c0 	call	400851c <__floatunsidf>
 4003688:	1011883a 	mov	r8,r2
 400368c:	1813883a 	mov	r9,r3
 4003690:	000d883a 	mov	r6,zero
 4003694:	01d023f4 	movhi	r7,16527
 4003698:	39d00004 	addi	r7,r7,16384
 400369c:	4009883a 	mov	r4,r8
 40036a0:	480b883a 	mov	r5,r9
 40036a4:	40066b80 	call	40066b8 <__divdf3>
 40036a8:	1009883a 	mov	r4,r2
 40036ac:	180b883a 	mov	r5,r3
 40036b0:	2005883a 	mov	r2,r4
 40036b4:	2807883a 	mov	r3,r5
 40036b8:	1009883a 	mov	r4,r2
 40036bc:	180b883a 	mov	r5,r3
 40036c0:	40086d40 	call	40086d4 <__truncdfsf2>
 40036c4:	1007883a 	mov	r3,r2
 40036c8:	e0fff015 	stw	r3,-64(fp)

	// Run control loops while robot is operating
	while(!done){
 40036cc:	00010706 	br	4003aec <motor_control_loop+0x53c>

		float uptime = read_uptime() / 1000.0;
 40036d0:	40030540 	call	4003054 <read_uptime>
 40036d4:	1009883a 	mov	r4,r2
 40036d8:	400851c0 	call	400851c <__floatunsidf>
 40036dc:	1011883a 	mov	r8,r2
 40036e0:	1813883a 	mov	r9,r3
 40036e4:	000d883a 	mov	r6,zero
 40036e8:	01d023f4 	movhi	r7,16527
 40036ec:	39d00004 	addi	r7,r7,16384
 40036f0:	4009883a 	mov	r4,r8
 40036f4:	480b883a 	mov	r5,r9
 40036f8:	40066b80 	call	40066b8 <__divdf3>
 40036fc:	1009883a 	mov	r4,r2
 4003700:	180b883a 	mov	r5,r3
 4003704:	2005883a 	mov	r2,r4
 4003708:	2807883a 	mov	r3,r5
 400370c:	1009883a 	mov	r4,r2
 4003710:	180b883a 	mov	r5,r3
 4003714:	40086d40 	call	40086d4 <__truncdfsf2>
 4003718:	1007883a 	mov	r3,r2
 400371c:	e0fff315 	stw	r3,-52(fp)

		float dt = uptime - last_time;
 4003720:	e17ff017 	ldw	r5,-64(fp)
 4003724:	e13ff317 	ldw	r4,-52(fp)
 4003728:	40057940 	call	4005794 <__subsf3>
 400372c:	1007883a 	mov	r3,r2
 4003730:	e0fff415 	stw	r3,-48(fp)

		// scale encoder outputs to be more consistent with PID gains
		float left_value = ( read_encoder_left() / 1000.0f ) - left_offset;
 4003734:	40030a40 	call	40030a4 <read_encoder_left>
 4003738:	1009883a 	mov	r4,r2
 400373c:	4005ce80 	call	4005ce8 <__floatsisf>
 4003740:	1007883a 	mov	r3,r2
 4003744:	01511eb4 	movhi	r5,17530
 4003748:	1809883a 	mov	r4,r3
 400374c:	4004da00 	call	4004da0 <__divsf3>
 4003750:	1007883a 	mov	r3,r2
 4003754:	1805883a 	mov	r2,r3
 4003758:	e17ff117 	ldw	r5,-60(fp)
 400375c:	1009883a 	mov	r4,r2
 4003760:	40057940 	call	4005794 <__subsf3>
 4003764:	1007883a 	mov	r3,r2
 4003768:	e0fff515 	stw	r3,-44(fp)
		float right_value = ( read_encoder_right() / 1000.0f ) - right_offset;
 400376c:	40030cc0 	call	40030cc <read_encoder_right>
 4003770:	1009883a 	mov	r4,r2
 4003774:	4005ce80 	call	4005ce8 <__floatsisf>
 4003778:	1007883a 	mov	r3,r2
 400377c:	01511eb4 	movhi	r5,17530
 4003780:	1809883a 	mov	r4,r3
 4003784:	4004da00 	call	4004da0 <__divsf3>
 4003788:	1007883a 	mov	r3,r2
 400378c:	1805883a 	mov	r2,r3
 4003790:	e17ff217 	ldw	r5,-56(fp)
 4003794:	1009883a 	mov	r4,r2
 4003798:	40057940 	call	4005794 <__subsf3>
 400379c:	1007883a 	mov	r3,r2
 40037a0:	e0fff615 	stw	r3,-40(fp)

		// Convert encoder values to Drive and Yaw state values for control
		float drive_value = ( left_value + right_value ) / 2.0f;
 40037a4:	e17ff617 	ldw	r5,-40(fp)
 40037a8:	e13ff517 	ldw	r4,-44(fp)
 40037ac:	40048d80 	call	40048d8 <__addsf3>
 40037b0:	1007883a 	mov	r3,r2
 40037b4:	1805883a 	mov	r2,r3
 40037b8:	01500034 	movhi	r5,16384
 40037bc:	1009883a 	mov	r4,r2
 40037c0:	4004da00 	call	4004da0 <__divsf3>
 40037c4:	1007883a 	mov	r3,r2
 40037c8:	e0fff715 	stw	r3,-36(fp)
		float yaw_value = left_value - right_value;
 40037cc:	e17ff617 	ldw	r5,-40(fp)
 40037d0:	e13ff517 	ldw	r4,-44(fp)
 40037d4:	40057940 	call	4005794 <__subsf3>
 40037d8:	1007883a 	mov	r3,r2
 40037dc:	e0fff815 	stw	r3,-32(fp)

			kiss_send_packet(&jtag_kiss, (const uint8_t *) states_msg, 9);
		}*/

		// Compute the control efforts from the PID loops
		fp_t drive_output = pid_compute(&drive_pid, drive_value, dt);
 40037e0:	e1bff417 	ldw	r6,-48(fp)
 40037e4:	e17ff717 	ldw	r5,-36(fp)
 40037e8:	010101b4 	movhi	r4,1030
 40037ec:	213f8004 	addi	r4,r4,-512
 40037f0:	40043d00 	call	40043d0 <pid_compute>
 40037f4:	e0bff915 	stw	r2,-28(fp)
		fp_t yaw_output   = pid_compute(&yaw_pid, yaw_value, dt);
 40037f8:	e1bff417 	ldw	r6,-48(fp)
 40037fc:	e17ff817 	ldw	r5,-32(fp)
 4003800:	010101b4 	movhi	r4,1030
 4003804:	213f7604 	addi	r4,r4,-552
 4003808:	40043d00 	call	40043d0 <pid_compute>
 400380c:	e0bffa15 	stw	r2,-24(fp)

		// Mix the control efforts into the motors
		int16_t left_output = normalize_output(scale_output(drive_output) + scale_output(yaw_output));
 4003810:	e13ff917 	ldw	r4,-28(fp)
 4003814:	40085c40 	call	40085c4 <__extendsfdf2>
 4003818:	100b883a 	mov	r5,r2
 400381c:	180d883a 	mov	r6,r3
 4003820:	2809883a 	mov	r4,r5
 4003824:	300b883a 	mov	r5,r6
 4003828:	40031d00 	call	40031d0 <scale_output>
 400382c:	1021883a 	mov	r16,r2
 4003830:	1823883a 	mov	r17,r3
 4003834:	e13ffa17 	ldw	r4,-24(fp)
 4003838:	40085c40 	call	40085c4 <__extendsfdf2>
 400383c:	100b883a 	mov	r5,r2
 4003840:	180d883a 	mov	r6,r3
 4003844:	2809883a 	mov	r4,r5
 4003848:	300b883a 	mov	r5,r6
 400384c:	40031d00 	call	40031d0 <scale_output>
 4003850:	1009883a 	mov	r4,r2
 4003854:	180b883a 	mov	r5,r3
 4003858:	200d883a 	mov	r6,r4
 400385c:	280f883a 	mov	r7,r5
 4003860:	8009883a 	mov	r4,r16
 4003864:	880b883a 	mov	r5,r17
 4003868:	4005e0c0 	call	4005e0c <__adddf3>
 400386c:	1009883a 	mov	r4,r2
 4003870:	180b883a 	mov	r5,r3
 4003874:	2005883a 	mov	r2,r4
 4003878:	2807883a 	mov	r3,r5
 400387c:	1009883a 	mov	r4,r2
 4003880:	180b883a 	mov	r5,r3
 4003884:	40032700 	call	4003270 <normalize_output>
 4003888:	e0bffb0d 	sth	r2,-20(fp)
		int16_t right_output = normalize_output(scale_output(drive_output) - scale_output(yaw_output));
 400388c:	e13ff917 	ldw	r4,-28(fp)
 4003890:	40085c40 	call	40085c4 <__extendsfdf2>
 4003894:	100b883a 	mov	r5,r2
 4003898:	180d883a 	mov	r6,r3
 400389c:	2809883a 	mov	r4,r5
 40038a0:	300b883a 	mov	r5,r6
 40038a4:	40031d00 	call	40031d0 <scale_output>
 40038a8:	1021883a 	mov	r16,r2
 40038ac:	1823883a 	mov	r17,r3
 40038b0:	e13ffa17 	ldw	r4,-24(fp)
 40038b4:	40085c40 	call	40085c4 <__extendsfdf2>
 40038b8:	100b883a 	mov	r5,r2
 40038bc:	180d883a 	mov	r6,r3
 40038c0:	2809883a 	mov	r4,r5
 40038c4:	300b883a 	mov	r5,r6
 40038c8:	40031d00 	call	40031d0 <scale_output>
 40038cc:	1009883a 	mov	r4,r2
 40038d0:	180b883a 	mov	r5,r3
 40038d4:	200d883a 	mov	r6,r4
 40038d8:	280f883a 	mov	r7,r5
 40038dc:	8009883a 	mov	r4,r16
 40038e0:	880b883a 	mov	r5,r17
 40038e4:	4007ac40 	call	4007ac4 <__subdf3>
 40038e8:	1009883a 	mov	r4,r2
 40038ec:	180b883a 	mov	r5,r3
 40038f0:	2005883a 	mov	r2,r4
 40038f4:	2807883a 	mov	r3,r5
 40038f8:	1009883a 	mov	r4,r2
 40038fc:	180b883a 	mov	r5,r3
 4003900:	40032700 	call	4003270 <normalize_output>
 4003904:	e0bffb8d 	sth	r2,-18(fp)

		// send the control efforts to the motors
		set_motors(left_output, right_output);
 4003908:	e0bffb0f 	ldh	r2,-20(fp)
 400390c:	e0fffb8f 	ldh	r3,-18(fp)
 4003910:	180b883a 	mov	r5,r3
 4003914:	1009883a 	mov	r4,r2
 4003918:	40030f40 	call	40030f4 <set_motors>

		// Wait for drive and yaw goals to be met, then start a state transition
		if(drive_value < drive_pid.setpoint + TOLERANCE && drive_value > drive_pid.setpoint - TOLERANCE
 400391c:	008101b4 	movhi	r2,1030
 4003920:	10bf8004 	addi	r2,r2,-512
 4003924:	10c00017 	ldw	r3,0(r2)
 4003928:	014f7374 	movhi	r5,15821
 400392c:	29733344 	addi	r5,r5,-13107
 4003930:	1809883a 	mov	r4,r3
 4003934:	40048d80 	call	40048d8 <__addsf3>
 4003938:	1007883a 	mov	r3,r2
 400393c:	1805883a 	mov	r2,r3
 4003940:	e17ff717 	ldw	r5,-36(fp)
 4003944:	1009883a 	mov	r4,r2
 4003948:	40051e00 	call	40051e0 <__gesf2>
 400394c:	00802c0e 	bge	zero,r2,4003a00 <motor_control_loop+0x450>
 4003950:	008101b4 	movhi	r2,1030
 4003954:	10bf8004 	addi	r2,r2,-512
 4003958:	10c00017 	ldw	r3,0(r2)
 400395c:	014f7374 	movhi	r5,15821
 4003960:	29733344 	addi	r5,r5,-13107
 4003964:	1809883a 	mov	r4,r3
 4003968:	40057940 	call	4005794 <__subsf3>
 400396c:	1007883a 	mov	r3,r2
 4003970:	1805883a 	mov	r2,r3
 4003974:	e17ff717 	ldw	r5,-36(fp)
 4003978:	1009883a 	mov	r4,r2
 400397c:	400529c0 	call	400529c <__lesf2>
 4003980:	10001f0e 	bge	r2,zero,4003a00 <motor_control_loop+0x450>
		   && yaw_value < yaw_pid.setpoint + TOLERANCE && yaw_value > yaw_pid.setpoint - TOLERANCE){
 4003984:	008101b4 	movhi	r2,1030
 4003988:	10bf7604 	addi	r2,r2,-552
 400398c:	10c00017 	ldw	r3,0(r2)
 4003990:	014f7374 	movhi	r5,15821
 4003994:	29733344 	addi	r5,r5,-13107
 4003998:	1809883a 	mov	r4,r3
 400399c:	40048d80 	call	40048d8 <__addsf3>
 40039a0:	1007883a 	mov	r3,r2
 40039a4:	1805883a 	mov	r2,r3
 40039a8:	e17ff817 	ldw	r5,-32(fp)
 40039ac:	1009883a 	mov	r4,r2
 40039b0:	40051e00 	call	40051e0 <__gesf2>
 40039b4:	0080120e 	bge	zero,r2,4003a00 <motor_control_loop+0x450>
 40039b8:	008101b4 	movhi	r2,1030
 40039bc:	10bf7604 	addi	r2,r2,-552
 40039c0:	10c00017 	ldw	r3,0(r2)
 40039c4:	014f7374 	movhi	r5,15821
 40039c8:	29733344 	addi	r5,r5,-13107
 40039cc:	1809883a 	mov	r4,r3
 40039d0:	40057940 	call	4005794 <__subsf3>
 40039d4:	1007883a 	mov	r3,r2
 40039d8:	1805883a 	mov	r2,r3
 40039dc:	e17ff817 	ldw	r5,-32(fp)
 40039e0:	1009883a 	mov	r4,r2
 40039e4:	400529c0 	call	400529c <__lesf2>
 40039e8:	1000050e 	bge	r2,zero,4003a00 <motor_control_loop+0x450>
			state++;
 40039ec:	e0bfee17 	ldw	r2,-72(fp)
 40039f0:	10800044 	addi	r2,r2,1
 40039f4:	e0bfee15 	stw	r2,-72(fp)
			state_change = true;
 40039f8:	00800044 	movi	r2,1
 40039fc:	e0bfef05 	stb	r2,-68(fp)
		}

		// Switch states to perform a figure 8 motion
		if(state_change){
 4003a00:	e0bfef03 	ldbu	r2,-68(fp)
 4003a04:	10003726 	beq	r2,zero,4003ae4 <motor_control_loop+0x534>

			if(state == ( instructions->num_states + 1) ){
 4003a08:	e0bffc17 	ldw	r2,-16(fp)
 4003a0c:	1080000b 	ldhu	r2,0(r2)
 4003a10:	10bfffcc 	andi	r2,r2,65535
 4003a14:	10c00044 	addi	r3,r2,1
 4003a18:	e0bfee17 	ldw	r2,-72(fp)
 4003a1c:	1880061e 	bne	r3,r2,4003a38 <motor_control_loop+0x488>
				set_motors(0, 0);
 4003a20:	000b883a 	mov	r5,zero
 4003a24:	0009883a 	mov	r4,zero
 4003a28:	40030f40 	call	40030f4 <set_motors>
				done = true;
 4003a2c:	00800044 	movi	r2,1
 4003a30:	e0bfef45 	stb	r2,-67(fp)
 4003a34:	00002a06 	br	4003ae0 <motor_control_loop+0x530>
			} else {
				drive_pid.setpoint += instructions->drive_changes[state - 1];
 4003a38:	008101b4 	movhi	r2,1030
 4003a3c:	10bf8004 	addi	r2,r2,-512
 4003a40:	11800017 	ldw	r6,0(r2)
 4003a44:	e0bffc17 	ldw	r2,-16(fp)
 4003a48:	10c00117 	ldw	r3,4(r2)
 4003a4c:	e13fee17 	ldw	r4,-72(fp)
 4003a50:	00900034 	movhi	r2,16384
 4003a54:	10bfffc4 	addi	r2,r2,-1
 4003a58:	2085883a 	add	r2,r4,r2
 4003a5c:	1085883a 	add	r2,r2,r2
 4003a60:	1085883a 	add	r2,r2,r2
 4003a64:	1885883a 	add	r2,r3,r2
 4003a68:	10c00017 	ldw	r3,0(r2)
 4003a6c:	180b883a 	mov	r5,r3
 4003a70:	3009883a 	mov	r4,r6
 4003a74:	40048d80 	call	40048d8 <__addsf3>
 4003a78:	1009883a 	mov	r4,r2
 4003a7c:	2007883a 	mov	r3,r4
 4003a80:	008101b4 	movhi	r2,1030
 4003a84:	10bf8004 	addi	r2,r2,-512
 4003a88:	10c00015 	stw	r3,0(r2)
				yaw_pid.setpoint += instructions->yaw_changes[state - 1];
 4003a8c:	008101b4 	movhi	r2,1030
 4003a90:	10bf7604 	addi	r2,r2,-552
 4003a94:	11800017 	ldw	r6,0(r2)
 4003a98:	e0bffc17 	ldw	r2,-16(fp)
 4003a9c:	10c00217 	ldw	r3,8(r2)
 4003aa0:	e13fee17 	ldw	r4,-72(fp)
 4003aa4:	00900034 	movhi	r2,16384
 4003aa8:	10bfffc4 	addi	r2,r2,-1
 4003aac:	2085883a 	add	r2,r4,r2
 4003ab0:	1085883a 	add	r2,r2,r2
 4003ab4:	1085883a 	add	r2,r2,r2
 4003ab8:	1885883a 	add	r2,r3,r2
 4003abc:	10c00017 	ldw	r3,0(r2)
 4003ac0:	180b883a 	mov	r5,r3
 4003ac4:	3009883a 	mov	r4,r6
 4003ac8:	40048d80 	call	40048d8 <__addsf3>
 4003acc:	1009883a 	mov	r4,r2
 4003ad0:	2007883a 	mov	r3,r4
 4003ad4:	008101b4 	movhi	r2,1030
 4003ad8:	10bf7604 	addi	r2,r2,-552
 4003adc:	10c00015 	stw	r3,0(r2)
			}

			state_change = false;
 4003ae0:	e03fef05 	stb	zero,-68(fp)

		}

		last_time = uptime;
 4003ae4:	e0bff317 	ldw	r2,-52(fp)
 4003ae8:	e0bff015 	stw	r2,-64(fp)
	yaw_pid.setpoint = 0.0f;

	float last_time = read_uptime() / 1000.0;

	// Run control loops while robot is operating
	while(!done){
 4003aec:	e0bfef43 	ldbu	r2,-67(fp)
 4003af0:	1080005c 	xori	r2,r2,1
 4003af4:	10803fcc 	andi	r2,r2,255
 4003af8:	103ef51e 	bne	r2,zero,40036d0 <__alt_data_end+0xfc0036d0>

		last_time = uptime;

	}

}
 4003afc:	0001883a 	nop
 4003b00:	e6fffe04 	addi	sp,fp,-8
 4003b04:	dfc00317 	ldw	ra,12(sp)
 4003b08:	df000217 	ldw	fp,8(sp)
 4003b0c:	dc400117 	ldw	r17,4(sp)
 4003b10:	dc000017 	ldw	r16,0(sp)
 4003b14:	dec00404 	addi	sp,sp,16
 4003b18:	f800283a 	ret

04003b1c <encoder_test>:

// Tests //////////////////////////////////////////////////////////////////////

static void encoder_test(){
 4003b1c:	defff904 	addi	sp,sp,-28
 4003b20:	dfc00615 	stw	ra,24(sp)
 4003b24:	df000515 	stw	fp,20(sp)
 4003b28:	df000504 	addi	fp,sp,20

	while(1){

		float left_value = read_encoder_left() / 1000.0f;
 4003b2c:	40030a40 	call	40030a4 <read_encoder_left>
 4003b30:	1009883a 	mov	r4,r2
 4003b34:	4005ce80 	call	4005ce8 <__floatsisf>
 4003b38:	1007883a 	mov	r3,r2
 4003b3c:	01511eb4 	movhi	r5,17530
 4003b40:	1809883a 	mov	r4,r3
 4003b44:	4004da00 	call	4004da0 <__divsf3>
 4003b48:	1007883a 	mov	r3,r2
 4003b4c:	1805883a 	mov	r2,r3
 4003b50:	e0bffb15 	stw	r2,-20(fp)
		float right_value = read_encoder_right() / 1000.0f;
 4003b54:	40030cc0 	call	40030cc <read_encoder_right>
 4003b58:	1009883a 	mov	r4,r2
 4003b5c:	4005ce80 	call	4005ce8 <__floatsisf>
 4003b60:	1007883a 	mov	r3,r2
 4003b64:	01511eb4 	movhi	r5,17530
 4003b68:	1809883a 	mov	r4,r3
 4003b6c:	4004da00 	call	4004da0 <__divsf3>
 4003b70:	1007883a 	mov	r3,r2
 4003b74:	1805883a 	mov	r2,r3
 4003b78:	e0bffc15 	stw	r2,-16(fp)

		uint8_t states_msg[9];

		states_msg[0] = KISS_PACKET_OPCODES__STATES;
 4003b7c:	00bfe404 	movi	r2,-112
 4003b80:	e0bffd05 	stb	r2,-12(fp)
		memcpy(states_msg + 1, &left_value, sizeof(left_value));
 4003b84:	e0bffd04 	addi	r2,fp,-12
 4003b88:	10800044 	addi	r2,r2,1
 4003b8c:	01800104 	movi	r6,4
 4003b90:	e17ffb04 	addi	r5,fp,-20
 4003b94:	1009883a 	mov	r4,r2
 4003b98:	40089b80 	call	40089b8 <memcpy>
		memcpy(states_msg + 5, &right_value, sizeof(right_value));
 4003b9c:	e0bffd04 	addi	r2,fp,-12
 4003ba0:	10800144 	addi	r2,r2,5
 4003ba4:	e0fffc04 	addi	r3,fp,-16
 4003ba8:	01800104 	movi	r6,4
 4003bac:	180b883a 	mov	r5,r3
 4003bb0:	1009883a 	mov	r4,r2
 4003bb4:	40089b80 	call	40089b8 <memcpy>

		kiss_send_packet(&jtag_kiss, (const uint8_t *) states_msg, 9);
 4003bb8:	e0bffd04 	addi	r2,fp,-12
 4003bbc:	01800244 	movi	r6,9
 4003bc0:	100b883a 	mov	r5,r2
 4003bc4:	010101b4 	movhi	r4,1030
 4003bc8:	213f5804 	addi	r4,r4,-672
 4003bcc:	40040680 	call	4004068 <kiss_send_packet>

		usleep(10000);
 4003bd0:	0109c404 	movi	r4,10000
 4003bd4:	400ec180 	call	400ec18 <usleep>
	}
 4003bd8:	003fd406 	br	4003b2c <__alt_data_end+0xfc003b2c>

04003bdc <follow_line>:

}

static void follow_line(){
 4003bdc:	defffc04 	addi	sp,sp,-16
 4003be0:	dfc00315 	stw	ra,12(sp)
 4003be4:	df000215 	stw	fp,8(sp)
 4003be8:	df000204 	addi	fp,sp,8

	uint32_t i;
	for(i = 0; i < 20000; i++){
 4003bec:	e03ffe15 	stw	zero,-8(fp)
 4003bf0:	00002006 	br	4003c74 <follow_line+0x98>

		// line position -8 to 8
		int8_t line = read_line_detect() - 8;
 4003bf4:	400307c0 	call	400307c <read_line_detect>
 4003bf8:	10bffe04 	addi	r2,r2,-8
 4003bfc:	e0bfff45 	stb	r2,-3(fp)

		int8_t yaw_bias = 0;
 4003c00:	e03fff05 	stb	zero,-4(fp)

		if(line < 0){
 4003c04:	e0bfff47 	ldb	r2,-3(fp)
 4003c08:	1000030e 	bge	r2,zero,4003c18 <follow_line+0x3c>
			yaw_bias = 35;
 4003c0c:	008008c4 	movi	r2,35
 4003c10:	e0bfff05 	stb	r2,-4(fp)
 4003c14:	00000406 	br	4003c28 <follow_line+0x4c>
			//set_motors(-1 * 15, 15);
		} else if(line > 0){
 4003c18:	e0bfff47 	ldb	r2,-3(fp)
 4003c1c:	0080020e 	bge	zero,r2,4003c28 <follow_line+0x4c>
			yaw_bias = -35;
 4003c20:	00bff744 	movi	r2,-35
 4003c24:	e0bfff05 	stb	r2,-4(fp)
		} else {
			//set_motors(0, 0);
			//break;
		}

		set_motors(45 - yaw_bias, 45 + yaw_bias);
 4003c28:	e0bfff07 	ldb	r2,-4(fp)
 4003c2c:	00c00b44 	movi	r3,45
 4003c30:	1885c83a 	sub	r2,r3,r2
 4003c34:	10ffffcc 	andi	r3,r2,65535
 4003c38:	18e0001c 	xori	r3,r3,32768
 4003c3c:	18e00004 	addi	r3,r3,-32768
 4003c40:	e0bfff07 	ldb	r2,-4(fp)
 4003c44:	10800b44 	addi	r2,r2,45
 4003c48:	10bfffcc 	andi	r2,r2,65535
 4003c4c:	10a0001c 	xori	r2,r2,32768
 4003c50:	10a00004 	addi	r2,r2,-32768
 4003c54:	100b883a 	mov	r5,r2
 4003c58:	1809883a 	mov	r4,r3
 4003c5c:	40030f40 	call	40030f4 <set_motors>

		usleep(100);
 4003c60:	01001904 	movi	r4,100
 4003c64:	400ec180 	call	400ec18 <usleep>
}

static void follow_line(){

	uint32_t i;
	for(i = 0; i < 20000; i++){
 4003c68:	e0bffe17 	ldw	r2,-8(fp)
 4003c6c:	10800044 	addi	r2,r2,1
 4003c70:	e0bffe15 	stw	r2,-8(fp)
 4003c74:	e0bffe17 	ldw	r2,-8(fp)
 4003c78:	10938830 	cmpltui	r2,r2,20000
 4003c7c:	103fdd1e 	bne	r2,zero,4003bf4 <__alt_data_end+0xfc003bf4>

		usleep(100);

	}

	set_motors(0, 0);
 4003c80:	000b883a 	mov	r5,zero
 4003c84:	0009883a 	mov	r4,zero
 4003c88:	40030f40 	call	40030f4 <set_motors>

}
 4003c8c:	0001883a 	nop
 4003c90:	e037883a 	mov	sp,fp
 4003c94:	dfc00117 	ldw	ra,4(sp)
 4003c98:	df000017 	ldw	fp,0(sp)
 4003c9c:	dec00204 	addi	sp,sp,8
 4003ca0:	f800283a 	ret

04003ca4 <motor_ramp_test>:

static void motor_ramp_test(){
 4003ca4:	defffd04 	addi	sp,sp,-12
 4003ca8:	dfc00215 	stw	ra,8(sp)
 4003cac:	df000115 	stw	fp,4(sp)
 4003cb0:	df000104 	addi	fp,sp,4
	while(1){

		int16_t i;

		// Ramp up
		for(i = -255; i < 255; i++){
 4003cb4:	00bfc044 	movi	r2,-255
 4003cb8:	e0bfff0d 	sth	r2,-4(fp)
 4003cbc:	00000a06 	br	4003ce8 <motor_ramp_test+0x44>
			set_motors(i, i);
 4003cc0:	e0bfff0f 	ldh	r2,-4(fp)
 4003cc4:	e0ffff0f 	ldh	r3,-4(fp)
 4003cc8:	180b883a 	mov	r5,r3
 4003ccc:	1009883a 	mov	r4,r2
 4003cd0:	40030f40 	call	40030f4 <set_motors>
			usleep(2000);
 4003cd4:	0101f404 	movi	r4,2000
 4003cd8:	400ec180 	call	400ec18 <usleep>
	while(1){

		int16_t i;

		// Ramp up
		for(i = -255; i < 255; i++){
 4003cdc:	e0bfff0b 	ldhu	r2,-4(fp)
 4003ce0:	10800044 	addi	r2,r2,1
 4003ce4:	e0bfff0d 	sth	r2,-4(fp)
 4003ce8:	e0bfff0f 	ldh	r2,-4(fp)
 4003cec:	10803fd0 	cmplti	r2,r2,255
 4003cf0:	103ff31e 	bne	r2,zero,4003cc0 <__alt_data_end+0xfc003cc0>
			set_motors(i, i);
			usleep(2000);
		}

		// Ramp down
		for(i = 255; i > -255; i--){
 4003cf4:	00803fc4 	movi	r2,255
 4003cf8:	e0bfff0d 	sth	r2,-4(fp)
 4003cfc:	00000a06 	br	4003d28 <motor_ramp_test+0x84>
			set_motors(i, i);
 4003d00:	e0bfff0f 	ldh	r2,-4(fp)
 4003d04:	e0ffff0f 	ldh	r3,-4(fp)
 4003d08:	180b883a 	mov	r5,r3
 4003d0c:	1009883a 	mov	r4,r2
 4003d10:	40030f40 	call	40030f4 <set_motors>
			usleep(2000);
 4003d14:	0101f404 	movi	r4,2000
 4003d18:	400ec180 	call	400ec18 <usleep>
			set_motors(i, i);
			usleep(2000);
		}

		// Ramp down
		for(i = 255; i > -255; i--){
 4003d1c:	e0bfff0b 	ldhu	r2,-4(fp)
 4003d20:	10bfffc4 	addi	r2,r2,-1
 4003d24:	e0bfff0d 	sth	r2,-4(fp)
 4003d28:	e0bfff0f 	ldh	r2,-4(fp)
 4003d2c:	10bfc088 	cmpgei	r2,r2,-254
 4003d30:	103ff31e 	bne	r2,zero,4003d00 <__alt_data_end+0xfc003d00>
			set_motors(i, i);
			usleep(2000);
		}

		set_motors(0, 0);
 4003d34:	000b883a 	mov	r5,zero
 4003d38:	0009883a 	mov	r4,zero
 4003d3c:	40030f40 	call	40030f4 <set_motors>
		usleep(1000000);
 4003d40:	010003f4 	movhi	r4,15
 4003d44:	21109004 	addi	r4,r4,16960
 4003d48:	400ec180 	call	400ec18 <usleep>

	}
 4003d4c:	003fd906 	br	4003cb4 <__alt_data_end+0xfc003cb4>

04003d50 <image_download_test>:

}

static void image_download_test(){
 4003d50:	defffe04 	addi	sp,sp,-8
 4003d54:	dfc00115 	stw	ra,4(sp)
 4003d58:	df000015 	stw	fp,0(sp)
 4003d5c:	d839883a 	mov	fp,sp

	// Send image
	const static bool jpeg_transfer = false;
	if(jpeg_transfer){
 4003d60:	d0a00b03 	ldbu	r2,-32724(gp)
 4003d64:	10803fcc 	andi	r2,r2,255
 4003d68:	10000226 	beq	r2,zero,4003d74 <image_download_test+0x24>
		take_jpeg_picture_and_send_to_jtag();
 4003d6c:	4002ebc0 	call	4002ebc <take_jpeg_picture_and_send_to_jtag>
	} else {
		// Naive Slow Transfer
		take_raw_picture_and_send_to_jtag();
	}

}
 4003d70:	00000106 	br	4003d78 <image_download_test+0x28>
	const static bool jpeg_transfer = false;
	if(jpeg_transfer){
		take_jpeg_picture_and_send_to_jtag();
	} else {
		// Naive Slow Transfer
		take_raw_picture_and_send_to_jtag();
 4003d74:	4002d5c0 	call	4002d5c <take_raw_picture_and_send_to_jtag>
	}

}
 4003d78:	0001883a 	nop
 4003d7c:	e037883a 	mov	sp,fp
 4003d80:	dfc00117 	ldw	ra,4(sp)
 4003d84:	df000017 	ldw	fp,0(sp)
 4003d88:	dec00204 	addi	sp,sp,8
 4003d8c:	f800283a 	ret

04003d90 <main>:

// MAIN ///////////////////////////////////////////////////////////////////////

int main()
{
 4003d90:	defff604 	addi	sp,sp,-40
 4003d94:	dfc00915 	stw	ra,36(sp)
 4003d98:	df000815 	stw	fp,32(sp)
 4003d9c:	df000804 	addi	fp,sp,32

	// Setup JTAG kiss interface
	jtag_kiss.send 				 = jtag_kiss_send;
 4003da0:	008101b4 	movhi	r2,1030
 4003da4:	10bf5804 	addi	r2,r2,-672
 4003da8:	00c10034 	movhi	r3,1024
 4003dac:	18caff04 	addi	r3,r3,11260
 4003db0:	10c00115 	stw	r3,4(r2)
	jtag_kiss.rx_state 			 = KISS_STATE__NORMAL;
 4003db4:	008101b4 	movhi	r2,1030
 4003db8:	10bf5804 	addi	r2,r2,-672
 4003dbc:	10000215 	stw	zero,8(r2)
	jtag_kiss.rx_buffer 		 = jtag_kiss_rx_buffer;
 4003dc0:	008101b4 	movhi	r2,1030
 4003dc4:	10bf5804 	addi	r2,r2,-672
 4003dc8:	00c101b4 	movhi	r3,1030
 4003dcc:	18ff5d04 	addi	r3,r3,-652
 4003dd0:	10c00315 	stw	r3,12(r2)
	jtag_kiss.rx_buffer_position = 0;
 4003dd4:	008101b4 	movhi	r2,1030
 4003dd8:	10bf5804 	addi	r2,r2,-672
 4003ddc:	1000040d 	sth	zero,16(r2)

	*JTAG_UART_CONTROL = 0; // Disable interrupts
 4003de0:	00820034 	movhi	r2,2048
 4003de4:	10842504 	addi	r2,r2,4244
 4003de8:	10000015 	stw	zero,0(r2)

	// Send startup message
	const char hello_world[] = "\x81Hello from Nios II!";
 4003dec:	00922044 	movi	r2,18561
 4003df0:	e0bff98d 	sth	r2,-26(fp)
 4003df4:	009b1944 	movi	r2,27749
 4003df8:	e0bffa0d 	sth	r2,-24(fp)
 4003dfc:	009bdb04 	movi	r2,28524
 4003e00:	e0bffa8d 	sth	r2,-22(fp)
 4003e04:	00998804 	movi	r2,26144
 4003e08:	e0bffb0d 	sth	r2,-20(fp)
 4003e0c:	009bdc84 	movi	r2,28530
 4003e10:	e0bffb8d 	sth	r2,-18(fp)
 4003e14:	00881b44 	movi	r2,8301
 4003e18:	e0bffc0d 	sth	r2,-16(fp)
 4003e1c:	009a5384 	movi	r2,26958
 4003e20:	e0bffc8d 	sth	r2,-14(fp)
 4003e24:	009cdbc4 	movi	r2,29551
 4003e28:	e0bffd0d 	sth	r2,-12(fp)
 4003e2c:	00924804 	movi	r2,18720
 4003e30:	e0bffd8d 	sth	r2,-10(fp)
 4003e34:	00885244 	movi	r2,8521
 4003e38:	e0bffe0d 	sth	r2,-8(fp)
 4003e3c:	e03ffe85 	stb	zero,-6(fp)
	kiss_send_packet(&jtag_kiss, (const uint8_t *) hello_world, sizeof(hello_world) - 1);
 4003e40:	e0bff984 	addi	r2,fp,-26
 4003e44:	01800504 	movi	r6,20
 4003e48:	100b883a 	mov	r5,r2
 4003e4c:	010101b4 	movhi	r4,1030
 4003e50:	213f5804 	addi	r4,r4,-672
 4003e54:	40040680 	call	4004068 <kiss_send_packet>

	usleep(1000000);
 4003e58:	010003f4 	movhi	r4,15
 4003e5c:	21109004 	addi	r4,r4,16960
 4003e60:	400ec180 	call	400ec18 <usleep>

	while(1){

		// Read UART and see if there is data
		uint32_t data = *JTAG_UART_DATA;
 4003e64:	00820034 	movhi	r2,2048
 4003e68:	10842404 	addi	r2,r2,4240
 4003e6c:	10800017 	ldw	r2,0(r2)
 4003e70:	e0bff815 	stw	r2,-32(fp)
		if( (data & JTAG_UART__MASK__RVALID ) != 0){
 4003e74:	e0bff817 	ldw	r2,-32(fp)
 4003e78:	10a0000c 	andi	r2,r2,32768
 4003e7c:	103ff926 	beq	r2,zero,4003e64 <__alt_data_end+0xfc003e64>

			uint16_t len = kiss_rx_byte(&jtag_kiss, (uint8_t)( data & 0xFF ) );
 4003e80:	e0bff817 	ldw	r2,-32(fp)
 4003e84:	10803fcc 	andi	r2,r2,255
 4003e88:	100b883a 	mov	r5,r2
 4003e8c:	010101b4 	movhi	r4,1030
 4003e90:	213f5804 	addi	r4,r4,-672
 4003e94:	40042700 	call	4004270 <kiss_rx_byte>
 4003e98:	e0bff90d 	sth	r2,-28(fp)

			if(len > 0){
 4003e9c:	e0bff90b 	ldhu	r2,-28(fp)
 4003ea0:	103ff026 	beq	r2,zero,4003e64 <__alt_data_end+0xfc003e64>

				switch(jtag_kiss.rx_buffer[0]){
 4003ea4:	008101b4 	movhi	r2,1030
 4003ea8:	10bf5804 	addi	r2,r2,-672
 4003eac:	10800317 	ldw	r2,12(r2)
 4003eb0:	10800003 	ldbu	r2,0(r2)
 4003eb4:	10803fcc 	andi	r2,r2,255
 4003eb8:	10bfec04 	addi	r2,r2,-80
 4003ebc:	10c00d28 	cmpgeui	r3,r2,52
 4003ec0:	1800671e 	bne	r3,zero,4004060 <main+0x2d0>
 4003ec4:	100690ba 	slli	r3,r2,2
 4003ec8:	00810034 	movhi	r2,1024
 4003ecc:	108fb704 	addi	r2,r2,16092
 4003ed0:	1885883a 	add	r2,r3,r2
 4003ed4:	10800017 	ldw	r2,0(r2)
 4003ed8:	1000683a 	jmp	r2
 4003edc:	04003fac 	andhi	r16,zero,254
 4003ee0:	04003fc0 	call	4003fc <__alt_mem_sdram-0x3bffc04>
 4003ee4:	04003fd4 	movui	r16,255
 4003ee8:	04003fe8 	cmpgeui	r16,zero,255
 4003eec:	04003ffc 	xorhi	r16,zero,255
 4003ef0:	04004010 	cmplti	r16,zero,256
 4003ef4:	04004060 	cmpeqi	r16,zero,257
 4003ef8:	04004060 	cmpeqi	r16,zero,257
 4003efc:	04004060 	cmpeqi	r16,zero,257
 4003f00:	04004060 	cmpeqi	r16,zero,257
 4003f04:	04004060 	cmpeqi	r16,zero,257
 4003f08:	04004060 	cmpeqi	r16,zero,257
 4003f0c:	04004060 	cmpeqi	r16,zero,257
 4003f10:	04004060 	cmpeqi	r16,zero,257
 4003f14:	04004060 	cmpeqi	r16,zero,257
 4003f18:	04004060 	cmpeqi	r16,zero,257
 4003f1c:	04004060 	cmpeqi	r16,zero,257
 4003f20:	04004060 	cmpeqi	r16,zero,257
 4003f24:	04004060 	cmpeqi	r16,zero,257
 4003f28:	04004060 	cmpeqi	r16,zero,257
 4003f2c:	04004060 	cmpeqi	r16,zero,257
 4003f30:	04004060 	cmpeqi	r16,zero,257
 4003f34:	04004060 	cmpeqi	r16,zero,257
 4003f38:	04004060 	cmpeqi	r16,zero,257
 4003f3c:	04004060 	cmpeqi	r16,zero,257
 4003f40:	04004060 	cmpeqi	r16,zero,257
 4003f44:	04004060 	cmpeqi	r16,zero,257
 4003f48:	04004060 	cmpeqi	r16,zero,257
 4003f4c:	04004060 	cmpeqi	r16,zero,257
 4003f50:	04004060 	cmpeqi	r16,zero,257
 4003f54:	04004060 	cmpeqi	r16,zero,257
 4003f58:	04004060 	cmpeqi	r16,zero,257
 4003f5c:	04004024 	muli	r16,zero,256
 4003f60:	04004050 	cmplti	r16,zero,257
 4003f64:	04004060 	cmpeqi	r16,zero,257
 4003f68:	04004060 	cmpeqi	r16,zero,257
 4003f6c:	04004060 	cmpeqi	r16,zero,257
 4003f70:	04004060 	cmpeqi	r16,zero,257
 4003f74:	04004060 	cmpeqi	r16,zero,257
 4003f78:	04004060 	cmpeqi	r16,zero,257
 4003f7c:	04004060 	cmpeqi	r16,zero,257
 4003f80:	04004060 	cmpeqi	r16,zero,257
 4003f84:	04004060 	cmpeqi	r16,zero,257
 4003f88:	04004060 	cmpeqi	r16,zero,257
 4003f8c:	04004060 	cmpeqi	r16,zero,257
 4003f90:	04004060 	cmpeqi	r16,zero,257
 4003f94:	04004060 	cmpeqi	r16,zero,257
 4003f98:	04004060 	cmpeqi	r16,zero,257
 4003f9c:	04004060 	cmpeqi	r16,zero,257
 4003fa0:	04004060 	cmpeqi	r16,zero,257
 4003fa4:	04004060 	cmpeqi	r16,zero,257
 4003fa8:	04004058 	cmpnei	r16,zero,257

					case KISS_PACKET_OPCODES__DO_LOOP:
						motor_control_loop(&figure_8_ctrl, false);
 4003fac:	000b883a 	mov	r5,zero
 4003fb0:	01010074 	movhi	r4,1025
 4003fb4:	21053c04 	addi	r4,r4,5360
 4003fb8:	40035b00 	call	40035b0 <motor_control_loop>
						break;
 4003fbc:	00002906 	br	4004064 <main+0x2d4>

					case KISS_PACKET_OPCODES__DO_SPIN_5:
						motor_control_loop(&spin_5_times_ctrl, false);
 4003fc0:	000b883a 	mov	r5,zero
 4003fc4:	01010074 	movhi	r4,1025
 4003fc8:	21053f04 	addi	r4,r4,5372
 4003fcc:	40035b00 	call	40035b0 <motor_control_loop>
						break;
 4003fd0:	00002406 	br	4004064 <main+0x2d4>

					case KISS_PACKET_OPCODES__MOVE_FORWARD:
						motor_control_loop(&forward_ctrl, false);
 4003fd4:	000b883a 	mov	r5,zero
 4003fd8:	01010074 	movhi	r4,1025
 4003fdc:	21054504 	addi	r4,r4,5396
 4003fe0:	40035b00 	call	40035b0 <motor_control_loop>
						break;
 4003fe4:	00001f06 	br	4004064 <main+0x2d4>

					case KISS_PACKET_OPCODES__MOVE_BACKWARD:
						motor_control_loop(&backward_ctrl, false);
 4003fe8:	000b883a 	mov	r5,zero
 4003fec:	01010074 	movhi	r4,1025
 4003ff0:	21054804 	addi	r4,r4,5408
 4003ff4:	40035b00 	call	40035b0 <motor_control_loop>
						break;
 4003ff8:	00001a06 	br	4004064 <main+0x2d4>

					case KISS_PACKET_OPCODES__TURN_LEFT:
						motor_control_loop(&left_ctrl, false);
 4003ffc:	000b883a 	mov	r5,zero
 4004000:	01010074 	movhi	r4,1025
 4004004:	21054b04 	addi	r4,r4,5420
 4004008:	40035b00 	call	40035b0 <motor_control_loop>
						break;
 400400c:	00001506 	br	4004064 <main+0x2d4>

					case KISS_PACKET_OPCODES__TURN_RIGHT:
						motor_control_loop(&right_ctrl, false);
 4004010:	000b883a 	mov	r5,zero
 4004014:	01010074 	movhi	r4,1025
 4004018:	21054e04 	addi	r4,r4,5432
 400401c:	40035b00 	call	40035b0 <motor_control_loop>
						break;
 4004020:	00001006 	br	4004064 <main+0x2d4>
					case KISS_PACKET_OPCODES__GET_LINE_POS:
						{

							uint8_t line_detect_message[2];

							line_detect_message[0] = KISS_PACKET_OPCODES__GET_LINE_POS;
 4004024:	00801c04 	movi	r2,112
 4004028:	e0bffec5 	stb	r2,-5(fp)
							line_detect_message[1] = read_line_detect();
 400402c:	400307c0 	call	400307c <read_line_detect>
 4004030:	e0bfff05 	stb	r2,-4(fp)

							kiss_send_packet(&jtag_kiss, (const uint8_t *) line_detect_message, 2);
 4004034:	e0bffec4 	addi	r2,fp,-5
 4004038:	01800084 	movi	r6,2
 400403c:	100b883a 	mov	r5,r2
 4004040:	010101b4 	movhi	r4,1030
 4004044:	213f5804 	addi	r4,r4,-672
 4004048:	40040680 	call	4004068 <kiss_send_packet>
						}
						break;
 400404c:	00000506 	br	4004064 <main+0x2d4>

					case KISS_PACKET_OPCODES__FOLLOW_LINE:
						follow_line();
 4004050:	4003bdc0 	call	4003bdc <follow_line>
						break;
 4004054:	00000306 	br	4004064 <main+0x2d4>

					case KISS_PACKET_OPCODES__RAW_IMAGE:
						image_download_test();
 4004058:	4003d500 	call	4003d50 <image_download_test>
						break;
 400405c:	00000106 	br	4004064 <main+0x2d4>

					default:
						break;
 4004060:	0001883a 	nop

			}

		}

	}
 4004064:	003f7f06 	br	4003e64 <__alt_data_end+0xfc003e64>

04004068 <kiss_send_packet>:
 *      Author: DrYerzinia
 */

#include "kiss.h"

void kiss_send_packet(kiss_t * kiss, const uint8_t * data, size_t len){
 4004068:	defffb04 	addi	sp,sp,-20
 400406c:	dfc00415 	stw	ra,16(sp)
 4004070:	df000315 	stw	fp,12(sp)
 4004074:	df000304 	addi	fp,sp,12
 4004078:	e13ffd15 	stw	r4,-12(fp)
 400407c:	e17ffe15 	stw	r5,-8(fp)
 4004080:	e1bfff15 	stw	r6,-4(fp)

	kiss_start(kiss);
 4004084:	e13ffd17 	ldw	r4,-12(fp)
 4004088:	40040bc0 	call	40040bc <kiss_start>
	kiss_send_data(kiss, data, len);
 400408c:	e1bfff17 	ldw	r6,-4(fp)
 4004090:	e17ffe17 	ldw	r5,-8(fp)
 4004094:	e13ffd17 	ldw	r4,-12(fp)
 4004098:	40041000 	call	4004100 <kiss_send_data>
	kiss_end(kiss);
 400409c:	e13ffd17 	ldw	r4,-12(fp)
 40040a0:	400422c0 	call	400422c <kiss_end>

}
 40040a4:	0001883a 	nop
 40040a8:	e037883a 	mov	sp,fp
 40040ac:	dfc00117 	ldw	ra,4(sp)
 40040b0:	df000017 	ldw	fp,0(sp)
 40040b4:	dec00204 	addi	sp,sp,8
 40040b8:	f800283a 	ret

040040bc <kiss_start>:

void kiss_start(kiss_t * kiss){
 40040bc:	defffd04 	addi	sp,sp,-12
 40040c0:	dfc00215 	stw	ra,8(sp)
 40040c4:	df000115 	stw	fp,4(sp)
 40040c8:	df000104 	addi	fp,sp,4
 40040cc:	e13fff15 	stw	r4,-4(fp)

	kiss->state = KISS_STATE__NORMAL;
 40040d0:	e0bfff17 	ldw	r2,-4(fp)
 40040d4:	10000015 	stw	zero,0(r2)
	kiss->send(KISS_SYMBOLS__FEND);
 40040d8:	e0bfff17 	ldw	r2,-4(fp)
 40040dc:	10800117 	ldw	r2,4(r2)
 40040e0:	01003004 	movi	r4,192
 40040e4:	103ee83a 	callr	r2

}
 40040e8:	0001883a 	nop
 40040ec:	e037883a 	mov	sp,fp
 40040f0:	dfc00117 	ldw	ra,4(sp)
 40040f4:	df000017 	ldw	fp,0(sp)
 40040f8:	dec00204 	addi	sp,sp,8
 40040fc:	f800283a 	ret

04004100 <kiss_send_data>:

void kiss_send_data(kiss_t * kiss, const uint8_t * data, size_t len){
 4004100:	defffa04 	addi	sp,sp,-24
 4004104:	dfc00515 	stw	ra,20(sp)
 4004108:	df000415 	stw	fp,16(sp)
 400410c:	df000404 	addi	fp,sp,16
 4004110:	e13ffd15 	stw	r4,-12(fp)
 4004114:	e17ffe15 	stw	r5,-8(fp)
 4004118:	e1bfff15 	stw	r6,-4(fp)

	while(len > 0){
 400411c:	00003b06 	br	400420c <kiss_send_data+0x10c>

		switch( kiss->state ){
 4004120:	e0bffd17 	ldw	r2,-12(fp)
 4004124:	10800017 	ldw	r2,0(r2)
 4004128:	10c00060 	cmpeqi	r3,r2,1
 400412c:	1800291e 	bne	r3,zero,40041d4 <kiss_send_data+0xd4>
 4004130:	0080032e 	bgeu	zero,r2,4004140 <kiss_send_data+0x40>
 4004134:	108000a0 	cmpeqi	r2,r2,2
 4004138:	10002d1e 	bne	r2,zero,40041f0 <kiss_send_data+0xf0>
 400413c:	00003306 	br	400420c <kiss_send_data+0x10c>

			case KISS_STATE__NORMAL:
				{

					len--;
 4004140:	e0bfff17 	ldw	r2,-4(fp)
 4004144:	10bfffc4 	addi	r2,r2,-1
 4004148:	e0bfff15 	stw	r2,-4(fp)

					uint8_t next_symbol = (*data++);
 400414c:	e0bffe17 	ldw	r2,-8(fp)
 4004150:	10c00044 	addi	r3,r2,1
 4004154:	e0fffe15 	stw	r3,-8(fp)
 4004158:	10800003 	ldbu	r2,0(r2)
 400415c:	e0bffc05 	stb	r2,-16(fp)
					switch( next_symbol ){
 4004160:	e0bffc03 	ldbu	r2,-16(fp)
 4004164:	10c03020 	cmpeqi	r3,r2,192
 4004168:	1800031e 	bne	r3,zero,4004178 <kiss_send_data+0x78>
 400416c:	108036e0 	cmpeqi	r2,r2,219
 4004170:	1000091e 	bne	r2,zero,4004198 <kiss_send_data+0x98>
 4004174:	00001006 	br	40041b8 <kiss_send_data+0xb8>
						case KISS_SYMBOLS__FEND:
							kiss->state = KISS_STATE__END;
 4004178:	e0bffd17 	ldw	r2,-12(fp)
 400417c:	00c00084 	movi	r3,2
 4004180:	10c00015 	stw	r3,0(r2)
							kiss->send(KISS_SYMBOLS__FESC);
 4004184:	e0bffd17 	ldw	r2,-12(fp)
 4004188:	10800117 	ldw	r2,4(r2)
 400418c:	010036c4 	movi	r4,219
 4004190:	103ee83a 	callr	r2
							break;
 4004194:	00000e06 	br	40041d0 <kiss_send_data+0xd0>
						case KISS_SYMBOLS__FESC:
							kiss->state = KISS_STATE__ESC;
 4004198:	e0bffd17 	ldw	r2,-12(fp)
 400419c:	00c00044 	movi	r3,1
 40041a0:	10c00015 	stw	r3,0(r2)
							kiss->send(KISS_SYMBOLS__FESC);
 40041a4:	e0bffd17 	ldw	r2,-12(fp)
 40041a8:	10800117 	ldw	r2,4(r2)
 40041ac:	010036c4 	movi	r4,219
 40041b0:	103ee83a 	callr	r2
							break;
 40041b4:	00000606 	br	40041d0 <kiss_send_data+0xd0>
						default:
							kiss->send(next_symbol);
 40041b8:	e0bffd17 	ldw	r2,-12(fp)
 40041bc:	10800117 	ldw	r2,4(r2)
 40041c0:	e0fffc03 	ldbu	r3,-16(fp)
 40041c4:	1809883a 	mov	r4,r3
 40041c8:	103ee83a 	callr	r2
							break;
 40041cc:	0001883a 	nop
					}
				}
				break;
 40041d0:	00000e06 	br	400420c <kiss_send_data+0x10c>

			case KISS_STATE__ESC:
				kiss->state = KISS_STATE__NORMAL;
 40041d4:	e0bffd17 	ldw	r2,-12(fp)
 40041d8:	10000015 	stw	zero,0(r2)
				kiss->send(KISS_SYMBOLS__TFESC);
 40041dc:	e0bffd17 	ldw	r2,-12(fp)
 40041e0:	10800117 	ldw	r2,4(r2)
 40041e4:	01003744 	movi	r4,221
 40041e8:	103ee83a 	callr	r2
				break;
 40041ec:	00000706 	br	400420c <kiss_send_data+0x10c>

			case KISS_STATE__END:
				kiss->state = KISS_STATE__NORMAL;
 40041f0:	e0bffd17 	ldw	r2,-12(fp)
 40041f4:	10000015 	stw	zero,0(r2)
				kiss->send(KISS_SYMBOLS__TFEND);
 40041f8:	e0bffd17 	ldw	r2,-12(fp)
 40041fc:	10800117 	ldw	r2,4(r2)
 4004200:	01003704 	movi	r4,220
 4004204:	103ee83a 	callr	r2
				break;
 4004208:	0001883a 	nop

}

void kiss_send_data(kiss_t * kiss, const uint8_t * data, size_t len){

	while(len > 0){
 400420c:	e0bfff17 	ldw	r2,-4(fp)
 4004210:	103fc31e 	bne	r2,zero,4004120 <__alt_data_end+0xfc004120>

		}

	}

}
 4004214:	0001883a 	nop
 4004218:	e037883a 	mov	sp,fp
 400421c:	dfc00117 	ldw	ra,4(sp)
 4004220:	df000017 	ldw	fp,0(sp)
 4004224:	dec00204 	addi	sp,sp,8
 4004228:	f800283a 	ret

0400422c <kiss_end>:

void kiss_end(kiss_t * kiss){
 400422c:	defffd04 	addi	sp,sp,-12
 4004230:	dfc00215 	stw	ra,8(sp)
 4004234:	df000115 	stw	fp,4(sp)
 4004238:	df000104 	addi	fp,sp,4
 400423c:	e13fff15 	stw	r4,-4(fp)

	kiss->state = KISS_STATE__NORMAL;
 4004240:	e0bfff17 	ldw	r2,-4(fp)
 4004244:	10000015 	stw	zero,0(r2)
	kiss->send(KISS_SYMBOLS__FEND);
 4004248:	e0bfff17 	ldw	r2,-4(fp)
 400424c:	10800117 	ldw	r2,4(r2)
 4004250:	01003004 	movi	r4,192
 4004254:	103ee83a 	callr	r2

}
 4004258:	0001883a 	nop
 400425c:	e037883a 	mov	sp,fp
 4004260:	dfc00117 	ldw	ra,4(sp)
 4004264:	df000017 	ldw	fp,0(sp)
 4004268:	dec00204 	addi	sp,sp,8
 400426c:	f800283a 	ret

04004270 <kiss_rx_byte>:

uint16_t kiss_rx_byte(kiss_t * kiss, uint8_t next_symbol){
 4004270:	defffc04 	addi	sp,sp,-16
 4004274:	df000315 	stw	fp,12(sp)
 4004278:	df000304 	addi	fp,sp,12
 400427c:	e13ffe15 	stw	r4,-8(fp)
 4004280:	2805883a 	mov	r2,r5
 4004284:	e0bfff05 	stb	r2,-4(fp)

	switch( kiss->rx_state ){
 4004288:	e0bffe17 	ldw	r2,-8(fp)
 400428c:	10800217 	ldw	r2,8(r2)
 4004290:	10000326 	beq	r2,zero,40042a0 <kiss_rx_byte+0x30>
 4004294:	10800060 	cmpeqi	r2,r2,1
 4004298:	1000251e 	bne	r2,zero,4004330 <kiss_rx_byte+0xc0>
 400429c:	00004706 	br	40043bc <kiss_rx_byte+0x14c>

		case KISS_STATE__NORMAL:
			{

				switch( next_symbol ){
 40042a0:	e0bfff03 	ldbu	r2,-4(fp)
 40042a4:	10c03020 	cmpeqi	r3,r2,192
 40042a8:	1800031e 	bne	r3,zero,40042b8 <kiss_rx_byte+0x48>
 40042ac:	108036e0 	cmpeqi	r2,r2,219
 40042b0:	10000c1e 	bne	r2,zero,40042e4 <kiss_rx_byte+0x74>
 40042b4:	00000f06 	br	40042f4 <kiss_rx_byte+0x84>

					case KISS_SYMBOLS__FEND:
						{

							uint16_t len = kiss->rx_buffer_position;
 40042b8:	e0bffe17 	ldw	r2,-8(fp)
 40042bc:	1080040b 	ldhu	r2,16(r2)
 40042c0:	e0bffd0d 	sth	r2,-12(fp)

							kiss->rx_state = KISS_STATE__NORMAL;
 40042c4:	e0bffe17 	ldw	r2,-8(fp)
 40042c8:	10000215 	stw	zero,8(r2)
							kiss->rx_buffer_position = 0;
 40042cc:	e0bffe17 	ldw	r2,-8(fp)
 40042d0:	1000040d 	sth	zero,16(r2)

							if(len > 0){
 40042d4:	e0bffd0b 	ldhu	r2,-12(fp)
 40042d8:	10001326 	beq	r2,zero,4004328 <kiss_rx_byte+0xb8>
								return len;
 40042dc:	e0bffd0b 	ldhu	r2,-12(fp)
 40042e0:	00003706 	br	40043c0 <kiss_rx_byte+0x150>
						}

						break;

					case KISS_SYMBOLS__FESC:
						kiss->rx_state = KISS_STATE__ESC;
 40042e4:	e0bffe17 	ldw	r2,-8(fp)
 40042e8:	00c00044 	movi	r3,1
 40042ec:	10c00215 	stw	r3,8(r2)
						break;
 40042f0:	00000e06 	br	400432c <kiss_rx_byte+0xbc>

					default:
						kiss->rx_buffer[kiss->rx_buffer_position++] = next_symbol;
 40042f4:	e0bffe17 	ldw	r2,-8(fp)
 40042f8:	10c00317 	ldw	r3,12(r2)
 40042fc:	e0bffe17 	ldw	r2,-8(fp)
 4004300:	1080040b 	ldhu	r2,16(r2)
 4004304:	11000044 	addi	r4,r2,1
 4004308:	200b883a 	mov	r5,r4
 400430c:	e13ffe17 	ldw	r4,-8(fp)
 4004310:	2140040d 	sth	r5,16(r4)
 4004314:	10bfffcc 	andi	r2,r2,65535
 4004318:	1885883a 	add	r2,r3,r2
 400431c:	e0ffff03 	ldbu	r3,-4(fp)
 4004320:	10c00005 	stb	r3,0(r2)
						break;
 4004324:	00000106 	br	400432c <kiss_rx_byte+0xbc>
								return len;
							}

						}

						break;
 4004328:	0001883a 	nop
						kiss->rx_buffer[kiss->rx_buffer_position++] = next_symbol;
						break;

				}
			}
			break;
 400432c:	00002306 	br	40043bc <kiss_rx_byte+0x14c>

		case KISS_STATE__ESC:
			switch( next_symbol ){
 4004330:	e0bfff03 	ldbu	r2,-4(fp)
 4004334:	10c03720 	cmpeqi	r3,r2,220
 4004338:	1800031e 	bne	r3,zero,4004348 <kiss_rx_byte+0xd8>
 400433c:	10803760 	cmpeqi	r2,r2,221
 4004340:	10000e1e 	bne	r2,zero,400437c <kiss_rx_byte+0x10c>
					kiss->rx_buffer[kiss->rx_buffer_position++] = KISS_SYMBOLS__FEND;
					break;

				default:
					// State machine hurt itself in confusion
					break;
 4004344:	00001a06 	br	40043b0 <kiss_rx_byte+0x140>
			break;

		case KISS_STATE__ESC:
			switch( next_symbol ){
				case KISS_SYMBOLS__TFEND:
					kiss->rx_buffer[kiss->rx_buffer_position++] = KISS_SYMBOLS__FEND;
 4004348:	e0bffe17 	ldw	r2,-8(fp)
 400434c:	10c00317 	ldw	r3,12(r2)
 4004350:	e0bffe17 	ldw	r2,-8(fp)
 4004354:	1080040b 	ldhu	r2,16(r2)
 4004358:	11000044 	addi	r4,r2,1
 400435c:	200b883a 	mov	r5,r4
 4004360:	e13ffe17 	ldw	r4,-8(fp)
 4004364:	2140040d 	sth	r5,16(r4)
 4004368:	10bfffcc 	andi	r2,r2,65535
 400436c:	1885883a 	add	r2,r3,r2
 4004370:	00fff004 	movi	r3,-64
 4004374:	10c00005 	stb	r3,0(r2)
					break;
 4004378:	00000d06 	br	40043b0 <kiss_rx_byte+0x140>

				case KISS_SYMBOLS__TFESC:
					kiss->rx_buffer[kiss->rx_buffer_position++] = KISS_SYMBOLS__FEND;
 400437c:	e0bffe17 	ldw	r2,-8(fp)
 4004380:	10c00317 	ldw	r3,12(r2)
 4004384:	e0bffe17 	ldw	r2,-8(fp)
 4004388:	1080040b 	ldhu	r2,16(r2)
 400438c:	11000044 	addi	r4,r2,1
 4004390:	200b883a 	mov	r5,r4
 4004394:	e13ffe17 	ldw	r4,-8(fp)
 4004398:	2140040d 	sth	r5,16(r4)
 400439c:	10bfffcc 	andi	r2,r2,65535
 40043a0:	1885883a 	add	r2,r3,r2
 40043a4:	00fff004 	movi	r3,-64
 40043a8:	10c00005 	stb	r3,0(r2)
					break;
 40043ac:	0001883a 	nop

				default:
					// State machine hurt itself in confusion
					break;
			}
			kiss->rx_state = KISS_STATE__NORMAL;
 40043b0:	e0bffe17 	ldw	r2,-8(fp)
 40043b4:	10000215 	stw	zero,8(r2)
			break;
 40043b8:	0001883a 	nop

	}

	return 0;
 40043bc:	0005883a 	mov	r2,zero

}
 40043c0:	e037883a 	mov	sp,fp
 40043c4:	df000017 	ldw	fp,0(sp)
 40043c8:	dec00104 	addi	sp,sp,4
 40043cc:	f800283a 	ret

040043d0 <pid_compute>:
 * @param pid PID controller object
 * @param input Current state
 *
 * @return Control effort
 */
fp_t pid_compute(PID_t * pid, fp_t input, fp_t dt){
 40043d0:	defff704 	addi	sp,sp,-36
 40043d4:	dfc00815 	stw	ra,32(sp)
 40043d8:	df000715 	stw	fp,28(sp)
 40043dc:	dc000615 	stw	r16,24(sp)
 40043e0:	df000704 	addi	fp,sp,28
 40043e4:	e13ffc15 	stw	r4,-16(fp)
 40043e8:	e17ffd15 	stw	r5,-12(fp)
 40043ec:	e1bffe15 	stw	r6,-8(fp)

	fp_t err = pid->setpoint - input;
 40043f0:	e0bffc17 	ldw	r2,-16(fp)
 40043f4:	10c00017 	ldw	r3,0(r2)
 40043f8:	e17ffd17 	ldw	r5,-12(fp)
 40043fc:	1809883a 	mov	r4,r3
 4004400:	40057940 	call	4005794 <__subsf3>
 4004404:	1007883a 	mov	r3,r2
 4004408:	e0fffa15 	stw	r3,-24(fp)

	// Integrate error
	pid->i += err;
 400440c:	e0bffc17 	ldw	r2,-16(fp)
 4004410:	10c00117 	ldw	r3,4(r2)
 4004414:	e17ffa17 	ldw	r5,-24(fp)
 4004418:	1809883a 	mov	r4,r3
 400441c:	40048d80 	call	40048d8 <__addsf3>
 4004420:	1009883a 	mov	r4,r2
 4004424:	2007883a 	mov	r3,r4
 4004428:	e0bffc17 	ldw	r2,-16(fp)
 400442c:	10c00115 	stw	r3,4(r2)

	// Check wind-up limit
	if(pid->i > pid->windup_limit){
 4004430:	e0bffc17 	ldw	r2,-16(fp)
 4004434:	10c00117 	ldw	r3,4(r2)
 4004438:	e0bffc17 	ldw	r2,-16(fp)
 400443c:	11000617 	ldw	r4,24(r2)
 4004440:	200b883a 	mov	r5,r4
 4004444:	1809883a 	mov	r4,r3
 4004448:	40051e00 	call	40051e0 <__gesf2>
 400444c:	0080050e 	bge	zero,r2,4004464 <pid_compute+0x94>
		pid->i = pid->windup_limit;
 4004450:	e0bffc17 	ldw	r2,-16(fp)
 4004454:	10c00617 	ldw	r3,24(r2)
 4004458:	e0bffc17 	ldw	r2,-16(fp)
 400445c:	10c00115 	stw	r3,4(r2)
 4004460:	00000d06 	br	4004498 <pid_compute+0xc8>
	} else if(pid->i < -1.0f * pid->windup_limit){
 4004464:	e0bffc17 	ldw	r2,-16(fp)
 4004468:	11000117 	ldw	r4,4(r2)
 400446c:	e0fffc17 	ldw	r3,-16(fp)
 4004470:	18800617 	ldw	r2,24(r3)
 4004474:	10a0003c 	xorhi	r2,r2,32768
 4004478:	100b883a 	mov	r5,r2
 400447c:	400529c0 	call	400529c <__lesf2>
 4004480:	1000050e 	bge	r2,zero,4004498 <pid_compute+0xc8>
		pid->i = -1.0f * pid->windup_limit;
 4004484:	e0fffc17 	ldw	r3,-16(fp)
 4004488:	18800617 	ldw	r2,24(r3)
 400448c:	10e0003c 	xorhi	r3,r2,32768
 4004490:	e0bffc17 	ldw	r2,-16(fp)
 4004494:	10c00115 	stw	r3,4(r2)
	}

	fp_t der = err - pid->prev_err;
 4004498:	e0bffc17 	ldw	r2,-16(fp)
 400449c:	10c00217 	ldw	r3,8(r2)
 40044a0:	180b883a 	mov	r5,r3
 40044a4:	e13ffa17 	ldw	r4,-24(fp)
 40044a8:	40057940 	call	4005794 <__subsf3>
 40044ac:	1007883a 	mov	r3,r2
 40044b0:	e0fffb15 	stw	r3,-20(fp)

	pid->prev_err = err;
 40044b4:	e0bffc17 	ldw	r2,-16(fp)
 40044b8:	e0fffa17 	ldw	r3,-24(fp)
 40044bc:	10c00215 	stw	r3,8(r2)

	fp_t output = ( pid->kp * err ) + ( pid->ki * pid->i * dt ) + ( pid->kd * der / dt );
 40044c0:	e0bffc17 	ldw	r2,-16(fp)
 40044c4:	10c00317 	ldw	r3,12(r2)
 40044c8:	e17ffa17 	ldw	r5,-24(fp)
 40044cc:	1809883a 	mov	r4,r3
 40044d0:	40053640 	call	4005364 <__mulsf3>
 40044d4:	1007883a 	mov	r3,r2
 40044d8:	1821883a 	mov	r16,r3
 40044dc:	e0bffc17 	ldw	r2,-16(fp)
 40044e0:	10c00417 	ldw	r3,16(r2)
 40044e4:	e0bffc17 	ldw	r2,-16(fp)
 40044e8:	11000117 	ldw	r4,4(r2)
 40044ec:	200b883a 	mov	r5,r4
 40044f0:	1809883a 	mov	r4,r3
 40044f4:	40053640 	call	4005364 <__mulsf3>
 40044f8:	1007883a 	mov	r3,r2
 40044fc:	1805883a 	mov	r2,r3
 4004500:	e17ffe17 	ldw	r5,-8(fp)
 4004504:	1009883a 	mov	r4,r2
 4004508:	40053640 	call	4005364 <__mulsf3>
 400450c:	1007883a 	mov	r3,r2
 4004510:	1805883a 	mov	r2,r3
 4004514:	100b883a 	mov	r5,r2
 4004518:	8009883a 	mov	r4,r16
 400451c:	40048d80 	call	40048d8 <__addsf3>
 4004520:	1007883a 	mov	r3,r2
 4004524:	1821883a 	mov	r16,r3
 4004528:	e0bffc17 	ldw	r2,-16(fp)
 400452c:	10c00517 	ldw	r3,20(r2)
 4004530:	e17ffb17 	ldw	r5,-20(fp)
 4004534:	1809883a 	mov	r4,r3
 4004538:	40053640 	call	4005364 <__mulsf3>
 400453c:	1007883a 	mov	r3,r2
 4004540:	1805883a 	mov	r2,r3
 4004544:	e17ffe17 	ldw	r5,-8(fp)
 4004548:	1009883a 	mov	r4,r2
 400454c:	4004da00 	call	4004da0 <__divsf3>
 4004550:	1007883a 	mov	r3,r2
 4004554:	1805883a 	mov	r2,r3
 4004558:	100b883a 	mov	r5,r2
 400455c:	8009883a 	mov	r4,r16
 4004560:	40048d80 	call	40048d8 <__addsf3>
 4004564:	1007883a 	mov	r3,r2
 4004568:	e0fff915 	stw	r3,-28(fp)

	// Don't command more than maximum value
	if( output > pid->max){
 400456c:	e0bffc17 	ldw	r2,-16(fp)
 4004570:	10c00717 	ldw	r3,28(r2)
 4004574:	e17ff917 	ldw	r5,-28(fp)
 4004578:	1809883a 	mov	r4,r3
 400457c:	400529c0 	call	400529c <__lesf2>
 4004580:	1000040e 	bge	r2,zero,4004594 <pid_compute+0x1c4>
		output = pid->max;
 4004584:	e0bffc17 	ldw	r2,-16(fp)
 4004588:	10800717 	ldw	r2,28(r2)
 400458c:	e0bff915 	stw	r2,-28(fp)
 4004590:	00000906 	br	40045b8 <pid_compute+0x1e8>
	} else if( output < pid->min){
 4004594:	e0bffc17 	ldw	r2,-16(fp)
 4004598:	10c00817 	ldw	r3,32(r2)
 400459c:	e17ff917 	ldw	r5,-28(fp)
 40045a0:	1809883a 	mov	r4,r3
 40045a4:	40051e00 	call	40051e0 <__gesf2>
 40045a8:	0080030e 	bge	zero,r2,40045b8 <pid_compute+0x1e8>
		output = pid->min;
 40045ac:	e0bffc17 	ldw	r2,-16(fp)
 40045b0:	10800817 	ldw	r2,32(r2)
 40045b4:	e0bff915 	stw	r2,-28(fp)
	}

	if( pid->mode == REVERSE){
 40045b8:	e0bffc17 	ldw	r2,-16(fp)
 40045bc:	10800917 	ldw	r2,36(r2)
 40045c0:	10800058 	cmpnei	r2,r2,1
 40045c4:	1000031e 	bne	r2,zero,40045d4 <pid_compute+0x204>
		output *= -1.0f;
 40045c8:	e0bff917 	ldw	r2,-28(fp)
 40045cc:	10a0003c 	xorhi	r2,r2,32768
 40045d0:	e0bff915 	stw	r2,-28(fp)
	}

	return output;
 40045d4:	e0bff917 	ldw	r2,-28(fp)
 40045d8:	1007883a 	mov	r3,r2

}
 40045dc:	1805883a 	mov	r2,r3
 40045e0:	e6ffff04 	addi	sp,fp,-4
 40045e4:	dfc00217 	ldw	ra,8(sp)
 40045e8:	df000117 	ldw	fp,4(sp)
 40045ec:	dc000017 	ldw	r16,0(sp)
 40045f0:	dec00304 	addi	sp,sp,12
 40045f4:	f800283a 	ret

040045f8 <floorf>:
 40045f8:	defffa04 	addi	sp,sp,-24
 40045fc:	dc800215 	stw	r18,8(sp)
 4004600:	04a00034 	movhi	r18,32768
 4004604:	94bfffc4 	addi	r18,r18,-1
 4004608:	9124703a 	and	r18,r18,r4
 400460c:	dc400115 	stw	r17,4(sp)
 4004610:	9022d5fa 	srli	r17,r18,23
 4004614:	dc000015 	stw	r16,0(sp)
 4004618:	dfc00515 	stw	ra,20(sp)
 400461c:	dd000415 	stw	r20,16(sp)
 4004620:	dcc00315 	stw	r19,12(sp)
 4004624:	8c7fe044 	addi	r17,r17,-127
 4004628:	00800584 	movi	r2,22
 400462c:	2021883a 	mov	r16,r4
 4004630:	14401216 	blt	r2,r17,400467c <floorf+0x84>
 4004634:	2029883a 	mov	r20,r4
 4004638:	88001f16 	blt	r17,zero,40046b8 <floorf+0xc0>
 400463c:	04802034 	movhi	r18,128
 4004640:	94bfffc4 	addi	r18,r18,-1
 4004644:	9465d83a 	sra	r18,r18,r17
 4004648:	9104703a 	and	r2,r18,r4
 400464c:	10000e26 	beq	r2,zero,4004688 <floorf+0x90>
 4004650:	015c52b4 	movhi	r5,29002
 4004654:	297cb284 	addi	r5,r5,-3382
 4004658:	40048d80 	call	40048d8 <__addsf3>
 400465c:	000b883a 	mov	r5,zero
 4004660:	1009883a 	mov	r4,r2
 4004664:	40051e00 	call	40051e0 <__gesf2>
 4004668:	0080070e 	bge	zero,r2,4004688 <floorf+0x90>
 400466c:	80001c16 	blt	r16,zero,40046e0 <floorf+0xe8>
 4004670:	0484303a 	nor	r2,zero,r18
 4004674:	1504703a 	and	r2,r2,r20
 4004678:	00000406 	br	400468c <floorf+0x94>
 400467c:	009fe034 	movhi	r2,32640
 4004680:	10bfffc4 	addi	r2,r2,-1
 4004684:	14800936 	bltu	r2,r18,40046ac <floorf+0xb4>
 4004688:	8005883a 	mov	r2,r16
 400468c:	dfc00517 	ldw	ra,20(sp)
 4004690:	dd000417 	ldw	r20,16(sp)
 4004694:	dcc00317 	ldw	r19,12(sp)
 4004698:	dc800217 	ldw	r18,8(sp)
 400469c:	dc400117 	ldw	r17,4(sp)
 40046a0:	dc000017 	ldw	r16,0(sp)
 40046a4:	dec00604 	addi	sp,sp,24
 40046a8:	f800283a 	ret
 40046ac:	200b883a 	mov	r5,r4
 40046b0:	40048d80 	call	40048d8 <__addsf3>
 40046b4:	003ff506 	br	400468c <__alt_data_end+0xfc00468c>
 40046b8:	015c52b4 	movhi	r5,29002
 40046bc:	297cb284 	addi	r5,r5,-3382
 40046c0:	40048d80 	call	40048d8 <__addsf3>
 40046c4:	000b883a 	mov	r5,zero
 40046c8:	1009883a 	mov	r4,r2
 40046cc:	40051e00 	call	40051e0 <__gesf2>
 40046d0:	00bfed0e 	bge	zero,r2,4004688 <__alt_data_end+0xfc004688>
 40046d4:	80000616 	blt	r16,zero,40046f0 <floorf+0xf8>
 40046d8:	0005883a 	mov	r2,zero
 40046dc:	003feb06 	br	400468c <__alt_data_end+0xfc00468c>
 40046e0:	00802034 	movhi	r2,128
 40046e4:	1445d83a 	sra	r2,r2,r17
 40046e8:	1429883a 	add	r20,r2,r16
 40046ec:	003fe006 	br	4004670 <__alt_data_end+0xfc004670>
 40046f0:	903fe526 	beq	r18,zero,4004688 <__alt_data_end+0xfc004688>
 40046f4:	00afe034 	movhi	r2,49024
 40046f8:	003fe406 	br	400468c <__alt_data_end+0xfc00468c>

040046fc <__divsi3>:
 40046fc:	20001b16 	blt	r4,zero,400476c <__divsi3+0x70>
 4004700:	000f883a 	mov	r7,zero
 4004704:	28001616 	blt	r5,zero,4004760 <__divsi3+0x64>
 4004708:	200d883a 	mov	r6,r4
 400470c:	29001a2e 	bgeu	r5,r4,4004778 <__divsi3+0x7c>
 4004710:	00800804 	movi	r2,32
 4004714:	00c00044 	movi	r3,1
 4004718:	00000106 	br	4004720 <__divsi3+0x24>
 400471c:	10000d26 	beq	r2,zero,4004754 <__divsi3+0x58>
 4004720:	294b883a 	add	r5,r5,r5
 4004724:	10bfffc4 	addi	r2,r2,-1
 4004728:	18c7883a 	add	r3,r3,r3
 400472c:	293ffb36 	bltu	r5,r4,400471c <__alt_data_end+0xfc00471c>
 4004730:	0005883a 	mov	r2,zero
 4004734:	18000726 	beq	r3,zero,4004754 <__divsi3+0x58>
 4004738:	0005883a 	mov	r2,zero
 400473c:	31400236 	bltu	r6,r5,4004748 <__divsi3+0x4c>
 4004740:	314dc83a 	sub	r6,r6,r5
 4004744:	10c4b03a 	or	r2,r2,r3
 4004748:	1806d07a 	srli	r3,r3,1
 400474c:	280ad07a 	srli	r5,r5,1
 4004750:	183ffa1e 	bne	r3,zero,400473c <__alt_data_end+0xfc00473c>
 4004754:	38000126 	beq	r7,zero,400475c <__divsi3+0x60>
 4004758:	0085c83a 	sub	r2,zero,r2
 400475c:	f800283a 	ret
 4004760:	014bc83a 	sub	r5,zero,r5
 4004764:	39c0005c 	xori	r7,r7,1
 4004768:	003fe706 	br	4004708 <__alt_data_end+0xfc004708>
 400476c:	0109c83a 	sub	r4,zero,r4
 4004770:	01c00044 	movi	r7,1
 4004774:	003fe306 	br	4004704 <__alt_data_end+0xfc004704>
 4004778:	00c00044 	movi	r3,1
 400477c:	003fee06 	br	4004738 <__alt_data_end+0xfc004738>

04004780 <__modsi3>:
 4004780:	20001716 	blt	r4,zero,40047e0 <__modsi3+0x60>
 4004784:	000f883a 	mov	r7,zero
 4004788:	2005883a 	mov	r2,r4
 400478c:	28001216 	blt	r5,zero,40047d8 <__modsi3+0x58>
 4004790:	2900162e 	bgeu	r5,r4,40047ec <__modsi3+0x6c>
 4004794:	01800804 	movi	r6,32
 4004798:	00c00044 	movi	r3,1
 400479c:	00000106 	br	40047a4 <__modsi3+0x24>
 40047a0:	30000a26 	beq	r6,zero,40047cc <__modsi3+0x4c>
 40047a4:	294b883a 	add	r5,r5,r5
 40047a8:	31bfffc4 	addi	r6,r6,-1
 40047ac:	18c7883a 	add	r3,r3,r3
 40047b0:	293ffb36 	bltu	r5,r4,40047a0 <__alt_data_end+0xfc0047a0>
 40047b4:	18000526 	beq	r3,zero,40047cc <__modsi3+0x4c>
 40047b8:	1806d07a 	srli	r3,r3,1
 40047bc:	11400136 	bltu	r2,r5,40047c4 <__modsi3+0x44>
 40047c0:	1145c83a 	sub	r2,r2,r5
 40047c4:	280ad07a 	srli	r5,r5,1
 40047c8:	183ffb1e 	bne	r3,zero,40047b8 <__alt_data_end+0xfc0047b8>
 40047cc:	38000126 	beq	r7,zero,40047d4 <__modsi3+0x54>
 40047d0:	0085c83a 	sub	r2,zero,r2
 40047d4:	f800283a 	ret
 40047d8:	014bc83a 	sub	r5,zero,r5
 40047dc:	003fec06 	br	4004790 <__alt_data_end+0xfc004790>
 40047e0:	0109c83a 	sub	r4,zero,r4
 40047e4:	01c00044 	movi	r7,1
 40047e8:	003fe706 	br	4004788 <__alt_data_end+0xfc004788>
 40047ec:	00c00044 	movi	r3,1
 40047f0:	003ff106 	br	40047b8 <__alt_data_end+0xfc0047b8>

040047f4 <__udivsi3>:
 40047f4:	200d883a 	mov	r6,r4
 40047f8:	2900152e 	bgeu	r5,r4,4004850 <__udivsi3+0x5c>
 40047fc:	28001416 	blt	r5,zero,4004850 <__udivsi3+0x5c>
 4004800:	00800804 	movi	r2,32
 4004804:	00c00044 	movi	r3,1
 4004808:	00000206 	br	4004814 <__udivsi3+0x20>
 400480c:	10000e26 	beq	r2,zero,4004848 <__udivsi3+0x54>
 4004810:	28000516 	blt	r5,zero,4004828 <__udivsi3+0x34>
 4004814:	294b883a 	add	r5,r5,r5
 4004818:	10bfffc4 	addi	r2,r2,-1
 400481c:	18c7883a 	add	r3,r3,r3
 4004820:	293ffa36 	bltu	r5,r4,400480c <__alt_data_end+0xfc00480c>
 4004824:	18000826 	beq	r3,zero,4004848 <__udivsi3+0x54>
 4004828:	0005883a 	mov	r2,zero
 400482c:	31400236 	bltu	r6,r5,4004838 <__udivsi3+0x44>
 4004830:	314dc83a 	sub	r6,r6,r5
 4004834:	10c4b03a 	or	r2,r2,r3
 4004838:	1806d07a 	srli	r3,r3,1
 400483c:	280ad07a 	srli	r5,r5,1
 4004840:	183ffa1e 	bne	r3,zero,400482c <__alt_data_end+0xfc00482c>
 4004844:	f800283a 	ret
 4004848:	0005883a 	mov	r2,zero
 400484c:	f800283a 	ret
 4004850:	00c00044 	movi	r3,1
 4004854:	003ff406 	br	4004828 <__alt_data_end+0xfc004828>

04004858 <__umodsi3>:
 4004858:	2005883a 	mov	r2,r4
 400485c:	2900122e 	bgeu	r5,r4,40048a8 <__umodsi3+0x50>
 4004860:	28001116 	blt	r5,zero,40048a8 <__umodsi3+0x50>
 4004864:	01800804 	movi	r6,32
 4004868:	00c00044 	movi	r3,1
 400486c:	00000206 	br	4004878 <__umodsi3+0x20>
 4004870:	30000c26 	beq	r6,zero,40048a4 <__umodsi3+0x4c>
 4004874:	28000516 	blt	r5,zero,400488c <__umodsi3+0x34>
 4004878:	294b883a 	add	r5,r5,r5
 400487c:	31bfffc4 	addi	r6,r6,-1
 4004880:	18c7883a 	add	r3,r3,r3
 4004884:	293ffa36 	bltu	r5,r4,4004870 <__alt_data_end+0xfc004870>
 4004888:	18000626 	beq	r3,zero,40048a4 <__umodsi3+0x4c>
 400488c:	1806d07a 	srli	r3,r3,1
 4004890:	11400136 	bltu	r2,r5,4004898 <__umodsi3+0x40>
 4004894:	1145c83a 	sub	r2,r2,r5
 4004898:	280ad07a 	srli	r5,r5,1
 400489c:	183ffb1e 	bne	r3,zero,400488c <__alt_data_end+0xfc00488c>
 40048a0:	f800283a 	ret
 40048a4:	f800283a 	ret
 40048a8:	00c00044 	movi	r3,1
 40048ac:	003ff706 	br	400488c <__alt_data_end+0xfc00488c>

040048b0 <__mulsi3>:
 40048b0:	0005883a 	mov	r2,zero
 40048b4:	20000726 	beq	r4,zero,40048d4 <__mulsi3+0x24>
 40048b8:	20c0004c 	andi	r3,r4,1
 40048bc:	2008d07a 	srli	r4,r4,1
 40048c0:	18000126 	beq	r3,zero,40048c8 <__mulsi3+0x18>
 40048c4:	1145883a 	add	r2,r2,r5
 40048c8:	294b883a 	add	r5,r5,r5
 40048cc:	203ffa1e 	bne	r4,zero,40048b8 <__alt_data_end+0xfc0048b8>
 40048d0:	f800283a 	ret
 40048d4:	f800283a 	ret

040048d8 <__addsf3>:
 40048d8:	defffc04 	addi	sp,sp,-16
 40048dc:	2004d7fa 	srli	r2,r4,31
 40048e0:	280cd5fa 	srli	r6,r5,23
 40048e4:	dc000015 	stw	r16,0(sp)
 40048e8:	00c02034 	movhi	r3,128
 40048ec:	2020d5fa 	srli	r16,r4,23
 40048f0:	280ed7fa 	srli	r7,r5,31
 40048f4:	18ffffc4 	addi	r3,r3,-1
 40048f8:	dc400115 	stw	r17,4(sp)
 40048fc:	1908703a 	and	r4,r3,r4
 4004900:	194a703a 	and	r5,r3,r5
 4004904:	dfc00315 	stw	ra,12(sp)
 4004908:	dc800215 	stw	r18,8(sp)
 400490c:	14403fcc 	andi	r17,r2,255
 4004910:	84003fcc 	andi	r16,r16,255
 4004914:	200890fa 	slli	r4,r4,3
 4004918:	31803fcc 	andi	r6,r6,255
 400491c:	280a90fa 	slli	r5,r5,3
 4004920:	89c05026 	beq	r17,r7,4004a64 <__addsf3+0x18c>
 4004924:	8185c83a 	sub	r2,r16,r6
 4004928:	00807a0e 	bge	zero,r2,4004b14 <__addsf3+0x23c>
 400492c:	30001e1e 	bne	r6,zero,40049a8 <__addsf3+0xd0>
 4004930:	28006d1e 	bne	r5,zero,4004ae8 <__addsf3+0x210>
 4004934:	208001cc 	andi	r2,r4,7
 4004938:	10000426 	beq	r2,zero,400494c <__addsf3+0x74>
 400493c:	208003cc 	andi	r2,r4,15
 4004940:	00c00104 	movi	r3,4
 4004944:	10c00126 	beq	r2,r3,400494c <__addsf3+0x74>
 4004948:	20c9883a 	add	r4,r4,r3
 400494c:	2081002c 	andhi	r2,r4,1024
 4004950:	10003926 	beq	r2,zero,4004a38 <__addsf3+0x160>
 4004954:	84000044 	addi	r16,r16,1
 4004958:	00803fc4 	movi	r2,255
 400495c:	80807826 	beq	r16,r2,4004b40 <__addsf3+0x268>
 4004960:	200891ba 	slli	r4,r4,6
 4004964:	8805883a 	mov	r2,r17
 4004968:	2008d27a 	srli	r4,r4,9
 400496c:	84003fcc 	andi	r16,r16,255
 4004970:	800695fa 	slli	r3,r16,23
 4004974:	10803fcc 	andi	r2,r2,255
 4004978:	04002034 	movhi	r16,128
 400497c:	843fffc4 	addi	r16,r16,-1
 4004980:	100497fa 	slli	r2,r2,31
 4004984:	2408703a 	and	r4,r4,r16
 4004988:	20e0b03a 	or	r16,r4,r3
 400498c:	8084b03a 	or	r2,r16,r2
 4004990:	dfc00317 	ldw	ra,12(sp)
 4004994:	dc800217 	ldw	r18,8(sp)
 4004998:	dc400117 	ldw	r17,4(sp)
 400499c:	dc000017 	ldw	r16,0(sp)
 40049a0:	dec00404 	addi	sp,sp,16
 40049a4:	f800283a 	ret
 40049a8:	00c03fc4 	movi	r3,255
 40049ac:	80ffe126 	beq	r16,r3,4004934 <__alt_data_end+0xfc004934>
 40049b0:	29410034 	orhi	r5,r5,1024
 40049b4:	00c006c4 	movi	r3,27
 40049b8:	18807516 	blt	r3,r2,4004b90 <__addsf3+0x2b8>
 40049bc:	00c00804 	movi	r3,32
 40049c0:	1887c83a 	sub	r3,r3,r2
 40049c4:	28c6983a 	sll	r3,r5,r3
 40049c8:	288ad83a 	srl	r5,r5,r2
 40049cc:	1804c03a 	cmpne	r2,r3,zero
 40049d0:	288ab03a 	or	r5,r5,r2
 40049d4:	2149c83a 	sub	r4,r4,r5
 40049d8:	2081002c 	andhi	r2,r4,1024
 40049dc:	10001426 	beq	r2,zero,4004a30 <__addsf3+0x158>
 40049e0:	04810034 	movhi	r18,1024
 40049e4:	94bfffc4 	addi	r18,r18,-1
 40049e8:	24a4703a 	and	r18,r4,r18
 40049ec:	9009883a 	mov	r4,r18
 40049f0:	400887c0 	call	400887c <__clzsi2>
 40049f4:	10bffec4 	addi	r2,r2,-5
 40049f8:	90a4983a 	sll	r18,r18,r2
 40049fc:	14005416 	blt	r2,r16,4004b50 <__addsf3+0x278>
 4004a00:	1405c83a 	sub	r2,r2,r16
 4004a04:	11000044 	addi	r4,r2,1
 4004a08:	00800804 	movi	r2,32
 4004a0c:	1105c83a 	sub	r2,r2,r4
 4004a10:	9084983a 	sll	r2,r18,r2
 4004a14:	9124d83a 	srl	r18,r18,r4
 4004a18:	0021883a 	mov	r16,zero
 4004a1c:	1008c03a 	cmpne	r4,r2,zero
 4004a20:	9108b03a 	or	r4,r18,r4
 4004a24:	003fc306 	br	4004934 <__alt_data_end+0xfc004934>
 4004a28:	1000db26 	beq	r2,zero,4004d98 <__addsf3+0x4c0>
 4004a2c:	1009883a 	mov	r4,r2
 4004a30:	208001cc 	andi	r2,r4,7
 4004a34:	103fc11e 	bne	r2,zero,400493c <__alt_data_end+0xfc00493c>
 4004a38:	2006d0fa 	srli	r3,r4,3
 4004a3c:	01003fc4 	movi	r4,255
 4004a40:	8805883a 	mov	r2,r17
 4004a44:	8100241e 	bne	r16,r4,4004ad8 <__addsf3+0x200>
 4004a48:	18006e26 	beq	r3,zero,4004c04 <__addsf3+0x32c>
 4004a4c:	19001034 	orhi	r4,r3,64
 4004a50:	00c02034 	movhi	r3,128
 4004a54:	18ffffc4 	addi	r3,r3,-1
 4004a58:	043fffc4 	movi	r16,-1
 4004a5c:	20c8703a 	and	r4,r4,r3
 4004a60:	003fc206 	br	400496c <__alt_data_end+0xfc00496c>
 4004a64:	8187c83a 	sub	r3,r16,r6
 4004a68:	00c03e0e 	bge	zero,r3,4004b64 <__addsf3+0x28c>
 4004a6c:	30002326 	beq	r6,zero,4004afc <__addsf3+0x224>
 4004a70:	01803fc4 	movi	r6,255
 4004a74:	81bfaf26 	beq	r16,r6,4004934 <__alt_data_end+0xfc004934>
 4004a78:	29410034 	orhi	r5,r5,1024
 4004a7c:	018006c4 	movi	r6,27
 4004a80:	30c07416 	blt	r6,r3,4004c54 <__addsf3+0x37c>
 4004a84:	01800804 	movi	r6,32
 4004a88:	30cdc83a 	sub	r6,r6,r3
 4004a8c:	298c983a 	sll	r6,r5,r6
 4004a90:	28cad83a 	srl	r5,r5,r3
 4004a94:	3006c03a 	cmpne	r3,r6,zero
 4004a98:	28cab03a 	or	r5,r5,r3
 4004a9c:	2149883a 	add	r4,r4,r5
 4004aa0:	20c1002c 	andhi	r3,r4,1024
 4004aa4:	183fe226 	beq	r3,zero,4004a30 <__alt_data_end+0xfc004a30>
 4004aa8:	84000044 	addi	r16,r16,1
 4004aac:	00c03fc4 	movi	r3,255
 4004ab0:	80c05426 	beq	r16,r3,4004c04 <__addsf3+0x32c>
 4004ab4:	00bf0034 	movhi	r2,64512
 4004ab8:	10bfffc4 	addi	r2,r2,-1
 4004abc:	20c0004c 	andi	r3,r4,1
 4004ac0:	2088703a 	and	r4,r4,r2
 4004ac4:	2008d07a 	srli	r4,r4,1
 4004ac8:	20c8b03a 	or	r4,r4,r3
 4004acc:	003f9906 	br	4004934 <__alt_data_end+0xfc004934>
 4004ad0:	0007883a 	mov	r3,zero
 4004ad4:	0005883a 	mov	r2,zero
 4004ad8:	01002034 	movhi	r4,128
 4004adc:	213fffc4 	addi	r4,r4,-1
 4004ae0:	1908703a 	and	r4,r3,r4
 4004ae4:	003fa106 	br	400496c <__alt_data_end+0xfc00496c>
 4004ae8:	10bfffc4 	addi	r2,r2,-1
 4004aec:	103fb926 	beq	r2,zero,40049d4 <__alt_data_end+0xfc0049d4>
 4004af0:	00c03fc4 	movi	r3,255
 4004af4:	80ffaf1e 	bne	r16,r3,40049b4 <__alt_data_end+0xfc0049b4>
 4004af8:	003f8e06 	br	4004934 <__alt_data_end+0xfc004934>
 4004afc:	283f8d26 	beq	r5,zero,4004934 <__alt_data_end+0xfc004934>
 4004b00:	18ffffc4 	addi	r3,r3,-1
 4004b04:	183fe526 	beq	r3,zero,4004a9c <__alt_data_end+0xfc004a9c>
 4004b08:	01803fc4 	movi	r6,255
 4004b0c:	81bfdb1e 	bne	r16,r6,4004a7c <__alt_data_end+0xfc004a7c>
 4004b10:	003f8806 	br	4004934 <__alt_data_end+0xfc004934>
 4004b14:	1000201e 	bne	r2,zero,4004b98 <__addsf3+0x2c0>
 4004b18:	80800044 	addi	r2,r16,1
 4004b1c:	10803fcc 	andi	r2,r2,255
 4004b20:	01800044 	movi	r6,1
 4004b24:	3080450e 	bge	r6,r2,4004c3c <__addsf3+0x364>
 4004b28:	2165c83a 	sub	r18,r4,r5
 4004b2c:	90c1002c 	andhi	r3,r18,1024
 4004b30:	18002b26 	beq	r3,zero,4004be0 <__addsf3+0x308>
 4004b34:	2925c83a 	sub	r18,r5,r4
 4004b38:	3823883a 	mov	r17,r7
 4004b3c:	003fab06 	br	40049ec <__alt_data_end+0xfc0049ec>
 4004b40:	8805883a 	mov	r2,r17
 4004b44:	043fffc4 	movi	r16,-1
 4004b48:	0009883a 	mov	r4,zero
 4004b4c:	003f8706 	br	400496c <__alt_data_end+0xfc00496c>
 4004b50:	013f0034 	movhi	r4,64512
 4004b54:	213fffc4 	addi	r4,r4,-1
 4004b58:	80a1c83a 	sub	r16,r16,r2
 4004b5c:	9108703a 	and	r4,r18,r4
 4004b60:	003f7406 	br	4004934 <__alt_data_end+0xfc004934>
 4004b64:	1800411e 	bne	r3,zero,4004c6c <__addsf3+0x394>
 4004b68:	80c00044 	addi	r3,r16,1
 4004b6c:	19c03fcc 	andi	r7,r3,255
 4004b70:	01800044 	movi	r6,1
 4004b74:	31c0260e 	bge	r6,r7,4004c10 <__addsf3+0x338>
 4004b78:	01803fc4 	movi	r6,255
 4004b7c:	19802126 	beq	r3,r6,4004c04 <__addsf3+0x32c>
 4004b80:	2149883a 	add	r4,r4,r5
 4004b84:	2008d07a 	srli	r4,r4,1
 4004b88:	1821883a 	mov	r16,r3
 4004b8c:	003f6906 	br	4004934 <__alt_data_end+0xfc004934>
 4004b90:	01400044 	movi	r5,1
 4004b94:	003f8f06 	br	40049d4 <__alt_data_end+0xfc0049d4>
 4004b98:	8000151e 	bne	r16,zero,4004bf0 <__addsf3+0x318>
 4004b9c:	20002f26 	beq	r4,zero,4004c5c <__addsf3+0x384>
 4004ba0:	0084303a 	nor	r2,zero,r2
 4004ba4:	10000a26 	beq	r2,zero,4004bd0 <__addsf3+0x2f8>
 4004ba8:	00c03fc4 	movi	r3,255
 4004bac:	30c02b26 	beq	r6,r3,4004c5c <__addsf3+0x384>
 4004bb0:	00c006c4 	movi	r3,27
 4004bb4:	18806d16 	blt	r3,r2,4004d6c <__addsf3+0x494>
 4004bb8:	00c00804 	movi	r3,32
 4004bbc:	1887c83a 	sub	r3,r3,r2
 4004bc0:	20c6983a 	sll	r3,r4,r3
 4004bc4:	2084d83a 	srl	r2,r4,r2
 4004bc8:	1808c03a 	cmpne	r4,r3,zero
 4004bcc:	1108b03a 	or	r4,r2,r4
 4004bd0:	2909c83a 	sub	r4,r5,r4
 4004bd4:	3021883a 	mov	r16,r6
 4004bd8:	3823883a 	mov	r17,r7
 4004bdc:	003f7e06 	br	40049d8 <__alt_data_end+0xfc0049d8>
 4004be0:	903f821e 	bne	r18,zero,40049ec <__alt_data_end+0xfc0049ec>
 4004be4:	0005883a 	mov	r2,zero
 4004be8:	0021883a 	mov	r16,zero
 4004bec:	003fba06 	br	4004ad8 <__alt_data_end+0xfc004ad8>
 4004bf0:	00c03fc4 	movi	r3,255
 4004bf4:	30c01926 	beq	r6,r3,4004c5c <__addsf3+0x384>
 4004bf8:	0085c83a 	sub	r2,zero,r2
 4004bfc:	21010034 	orhi	r4,r4,1024
 4004c00:	003feb06 	br	4004bb0 <__alt_data_end+0xfc004bb0>
 4004c04:	043fffc4 	movi	r16,-1
 4004c08:	0009883a 	mov	r4,zero
 4004c0c:	003f5706 	br	400496c <__alt_data_end+0xfc00496c>
 4004c10:	80004a1e 	bne	r16,zero,4004d3c <__addsf3+0x464>
 4004c14:	20005926 	beq	r4,zero,4004d7c <__addsf3+0x4a4>
 4004c18:	283f4626 	beq	r5,zero,4004934 <__alt_data_end+0xfc004934>
 4004c1c:	2149883a 	add	r4,r4,r5
 4004c20:	2081002c 	andhi	r2,r4,1024
 4004c24:	103f8226 	beq	r2,zero,4004a30 <__alt_data_end+0xfc004a30>
 4004c28:	00bf0034 	movhi	r2,64512
 4004c2c:	10bfffc4 	addi	r2,r2,-1
 4004c30:	3021883a 	mov	r16,r6
 4004c34:	2088703a 	and	r4,r4,r2
 4004c38:	003f3e06 	br	4004934 <__alt_data_end+0xfc004934>
 4004c3c:	8000121e 	bne	r16,zero,4004c88 <__addsf3+0x3b0>
 4004c40:	2000261e 	bne	r4,zero,4004cdc <__addsf3+0x404>
 4004c44:	283fa226 	beq	r5,zero,4004ad0 <__alt_data_end+0xfc004ad0>
 4004c48:	2809883a 	mov	r4,r5
 4004c4c:	3823883a 	mov	r17,r7
 4004c50:	003f3806 	br	4004934 <__alt_data_end+0xfc004934>
 4004c54:	01400044 	movi	r5,1
 4004c58:	003f9006 	br	4004a9c <__alt_data_end+0xfc004a9c>
 4004c5c:	2809883a 	mov	r4,r5
 4004c60:	3021883a 	mov	r16,r6
 4004c64:	3823883a 	mov	r17,r7
 4004c68:	003f3206 	br	4004934 <__alt_data_end+0xfc004934>
 4004c6c:	80000c1e 	bne	r16,zero,4004ca0 <__addsf3+0x3c8>
 4004c70:	20002f26 	beq	r4,zero,4004d30 <__addsf3+0x458>
 4004c74:	00c6303a 	nor	r3,zero,r3
 4004c78:	18002b1e 	bne	r3,zero,4004d28 <__addsf3+0x450>
 4004c7c:	2149883a 	add	r4,r4,r5
 4004c80:	3021883a 	mov	r16,r6
 4004c84:	003f8606 	br	4004aa0 <__alt_data_end+0xfc004aa0>
 4004c88:	20001b1e 	bne	r4,zero,4004cf8 <__addsf3+0x420>
 4004c8c:	28003926 	beq	r5,zero,4004d74 <__addsf3+0x49c>
 4004c90:	2809883a 	mov	r4,r5
 4004c94:	3823883a 	mov	r17,r7
 4004c98:	04003fc4 	movi	r16,255
 4004c9c:	003f2506 	br	4004934 <__alt_data_end+0xfc004934>
 4004ca0:	01c03fc4 	movi	r7,255
 4004ca4:	31c02226 	beq	r6,r7,4004d30 <__addsf3+0x458>
 4004ca8:	00c7c83a 	sub	r3,zero,r3
 4004cac:	21010034 	orhi	r4,r4,1024
 4004cb0:	01c006c4 	movi	r7,27
 4004cb4:	38c03616 	blt	r7,r3,4004d90 <__addsf3+0x4b8>
 4004cb8:	01c00804 	movi	r7,32
 4004cbc:	38cfc83a 	sub	r7,r7,r3
 4004cc0:	21ce983a 	sll	r7,r4,r7
 4004cc4:	20c6d83a 	srl	r3,r4,r3
 4004cc8:	3808c03a 	cmpne	r4,r7,zero
 4004ccc:	1906b03a 	or	r3,r3,r4
 4004cd0:	1949883a 	add	r4,r3,r5
 4004cd4:	3021883a 	mov	r16,r6
 4004cd8:	003f7106 	br	4004aa0 <__alt_data_end+0xfc004aa0>
 4004cdc:	283f1526 	beq	r5,zero,4004934 <__alt_data_end+0xfc004934>
 4004ce0:	2145c83a 	sub	r2,r4,r5
 4004ce4:	10c1002c 	andhi	r3,r2,1024
 4004ce8:	183f4f26 	beq	r3,zero,4004a28 <__alt_data_end+0xfc004a28>
 4004cec:	2909c83a 	sub	r4,r5,r4
 4004cf0:	3823883a 	mov	r17,r7
 4004cf4:	003f0f06 	br	4004934 <__alt_data_end+0xfc004934>
 4004cf8:	28001a26 	beq	r5,zero,4004d64 <__addsf3+0x48c>
 4004cfc:	2008d0fa 	srli	r4,r4,3
 4004d00:	2080102c 	andhi	r2,r4,64
 4004d04:	10000526 	beq	r2,zero,4004d1c <__addsf3+0x444>
 4004d08:	280ad0fa 	srli	r5,r5,3
 4004d0c:	2880102c 	andhi	r2,r5,64
 4004d10:	1000021e 	bne	r2,zero,4004d1c <__addsf3+0x444>
 4004d14:	2809883a 	mov	r4,r5
 4004d18:	3823883a 	mov	r17,r7
 4004d1c:	200890fa 	slli	r4,r4,3
 4004d20:	04003fc4 	movi	r16,255
 4004d24:	003f0306 	br	4004934 <__alt_data_end+0xfc004934>
 4004d28:	01c03fc4 	movi	r7,255
 4004d2c:	31ffe01e 	bne	r6,r7,4004cb0 <__alt_data_end+0xfc004cb0>
 4004d30:	2809883a 	mov	r4,r5
 4004d34:	3021883a 	mov	r16,r6
 4004d38:	003efe06 	br	4004934 <__alt_data_end+0xfc004934>
 4004d3c:	20001126 	beq	r4,zero,4004d84 <__addsf3+0x4ac>
 4004d40:	28000826 	beq	r5,zero,4004d64 <__addsf3+0x48c>
 4004d44:	2008d0fa 	srli	r4,r4,3
 4004d48:	2080102c 	andhi	r2,r4,64
 4004d4c:	103ff326 	beq	r2,zero,4004d1c <__alt_data_end+0xfc004d1c>
 4004d50:	280ad0fa 	srli	r5,r5,3
 4004d54:	2880102c 	andhi	r2,r5,64
 4004d58:	103ff01e 	bne	r2,zero,4004d1c <__alt_data_end+0xfc004d1c>
 4004d5c:	2809883a 	mov	r4,r5
 4004d60:	003fee06 	br	4004d1c <__alt_data_end+0xfc004d1c>
 4004d64:	04003fc4 	movi	r16,255
 4004d68:	003ef206 	br	4004934 <__alt_data_end+0xfc004934>
 4004d6c:	01000044 	movi	r4,1
 4004d70:	003f9706 	br	4004bd0 <__alt_data_end+0xfc004bd0>
 4004d74:	0005883a 	mov	r2,zero
 4004d78:	003f3406 	br	4004a4c <__alt_data_end+0xfc004a4c>
 4004d7c:	2809883a 	mov	r4,r5
 4004d80:	003eec06 	br	4004934 <__alt_data_end+0xfc004934>
 4004d84:	2809883a 	mov	r4,r5
 4004d88:	04003fc4 	movi	r16,255
 4004d8c:	003ee906 	br	4004934 <__alt_data_end+0xfc004934>
 4004d90:	00c00044 	movi	r3,1
 4004d94:	003fce06 	br	4004cd0 <__alt_data_end+0xfc004cd0>
 4004d98:	0005883a 	mov	r2,zero
 4004d9c:	003f4e06 	br	4004ad8 <__alt_data_end+0xfc004ad8>

04004da0 <__divsf3>:
 4004da0:	defff504 	addi	sp,sp,-44
 4004da4:	200cd5fa 	srli	r6,r4,23
 4004da8:	dcc00415 	stw	r19,16(sp)
 4004dac:	2026d7fa 	srli	r19,r4,31
 4004db0:	00c02034 	movhi	r3,128
 4004db4:	dd800715 	stw	r22,28(sp)
 4004db8:	dd000515 	stw	r20,20(sp)
 4004dbc:	dc800315 	stw	r18,12(sp)
 4004dc0:	18ffffc4 	addi	r3,r3,-1
 4004dc4:	dfc00a15 	stw	ra,40(sp)
 4004dc8:	df000915 	stw	fp,36(sp)
 4004dcc:	ddc00815 	stw	r23,32(sp)
 4004dd0:	dd400615 	stw	r21,24(sp)
 4004dd4:	dc400215 	stw	r17,8(sp)
 4004dd8:	dc000115 	stw	r16,4(sp)
 4004ddc:	35003fcc 	andi	r20,r6,255
 4004de0:	1924703a 	and	r18,r3,r4
 4004de4:	9d803fcc 	andi	r22,r19,255
 4004de8:	a0005226 	beq	r20,zero,4004f34 <__divsf3+0x194>
 4004dec:	00803fc4 	movi	r2,255
 4004df0:	a0802e26 	beq	r20,r2,4004eac <__divsf3+0x10c>
 4004df4:	91002034 	orhi	r4,r18,128
 4004df8:	202490fa 	slli	r18,r4,3
 4004dfc:	a53fe044 	addi	r20,r20,-127
 4004e00:	0021883a 	mov	r16,zero
 4004e04:	002f883a 	mov	r23,zero
 4004e08:	280cd5fa 	srli	r6,r5,23
 4004e0c:	282ad7fa 	srli	r21,r5,31
 4004e10:	00c02034 	movhi	r3,128
 4004e14:	18ffffc4 	addi	r3,r3,-1
 4004e18:	31803fcc 	andi	r6,r6,255
 4004e1c:	1962703a 	and	r17,r3,r5
 4004e20:	af003fcc 	andi	fp,r21,255
 4004e24:	30004a26 	beq	r6,zero,4004f50 <__divsf3+0x1b0>
 4004e28:	00803fc4 	movi	r2,255
 4004e2c:	30804526 	beq	r6,r2,4004f44 <__divsf3+0x1a4>
 4004e30:	89402034 	orhi	r5,r17,128
 4004e34:	282290fa 	slli	r17,r5,3
 4004e38:	31bfe044 	addi	r6,r6,-127
 4004e3c:	000b883a 	mov	r5,zero
 4004e40:	2c20b03a 	or	r16,r5,r16
 4004e44:	802090ba 	slli	r16,r16,2
 4004e48:	00810034 	movhi	r2,1024
 4004e4c:	10939b04 	addi	r2,r2,20076
 4004e50:	80a1883a 	add	r16,r16,r2
 4004e54:	81000017 	ldw	r4,0(r16)
 4004e58:	9d46f03a 	xor	r3,r19,r21
 4004e5c:	180f883a 	mov	r7,r3
 4004e60:	18803fcc 	andi	r2,r3,255
 4004e64:	a18dc83a 	sub	r6,r20,r6
 4004e68:	2000683a 	jmp	r4
 4004e6c:	04005050 	cmplti	r16,zero,321
 4004e70:	04004ed4 	movui	r16,315
 4004e74:	04005044 	movi	r16,321
 4004e78:	04004ec0 	call	4004ec <__alt_mem_sdram-0x3bffb14>
 4004e7c:	04005044 	movi	r16,321
 4004e80:	0400501c 	xori	r16,zero,320
 4004e84:	04005044 	movi	r16,321
 4004e88:	04004ec0 	call	4004ec <__alt_mem_sdram-0x3bffb14>
 4004e8c:	04004ed4 	movui	r16,315
 4004e90:	04004ed4 	movui	r16,315
 4004e94:	0400501c 	xori	r16,zero,320
 4004e98:	04004ec0 	call	4004ec <__alt_mem_sdram-0x3bffb14>
 4004e9c:	04005130 	cmpltui	r16,zero,324
 4004ea0:	04005130 	cmpltui	r16,zero,324
 4004ea4:	04005130 	cmpltui	r16,zero,324
 4004ea8:	040050e4 	muli	r16,zero,323
 4004eac:	9000581e 	bne	r18,zero,4005010 <__divsf3+0x270>
 4004eb0:	04000204 	movi	r16,8
 4004eb4:	05c00084 	movi	r23,2
 4004eb8:	003fd306 	br	4004e08 <__alt_data_end+0xfc004e08>
 4004ebc:	0023883a 	mov	r17,zero
 4004ec0:	e02d883a 	mov	r22,fp
 4004ec4:	282f883a 	mov	r23,r5
 4004ec8:	00800084 	movi	r2,2
 4004ecc:	b8808f1e 	bne	r23,r2,400510c <__divsf3+0x36c>
 4004ed0:	b005883a 	mov	r2,r22
 4004ed4:	11c0004c 	andi	r7,r2,1
 4004ed8:	013fffc4 	movi	r4,-1
 4004edc:	000d883a 	mov	r6,zero
 4004ee0:	21003fcc 	andi	r4,r4,255
 4004ee4:	200895fa 	slli	r4,r4,23
 4004ee8:	38803fcc 	andi	r2,r7,255
 4004eec:	00c02034 	movhi	r3,128
 4004ef0:	100497fa 	slli	r2,r2,31
 4004ef4:	18ffffc4 	addi	r3,r3,-1
 4004ef8:	30c6703a 	and	r3,r6,r3
 4004efc:	1906b03a 	or	r3,r3,r4
 4004f00:	1884b03a 	or	r2,r3,r2
 4004f04:	dfc00a17 	ldw	ra,40(sp)
 4004f08:	df000917 	ldw	fp,36(sp)
 4004f0c:	ddc00817 	ldw	r23,32(sp)
 4004f10:	dd800717 	ldw	r22,28(sp)
 4004f14:	dd400617 	ldw	r21,24(sp)
 4004f18:	dd000517 	ldw	r20,20(sp)
 4004f1c:	dcc00417 	ldw	r19,16(sp)
 4004f20:	dc800317 	ldw	r18,12(sp)
 4004f24:	dc400217 	ldw	r17,8(sp)
 4004f28:	dc000117 	ldw	r16,4(sp)
 4004f2c:	dec00b04 	addi	sp,sp,44
 4004f30:	f800283a 	ret
 4004f34:	90002b1e 	bne	r18,zero,4004fe4 <__divsf3+0x244>
 4004f38:	04000104 	movi	r16,4
 4004f3c:	05c00044 	movi	r23,1
 4004f40:	003fb106 	br	4004e08 <__alt_data_end+0xfc004e08>
 4004f44:	8800251e 	bne	r17,zero,4004fdc <__divsf3+0x23c>
 4004f48:	01400084 	movi	r5,2
 4004f4c:	00000206 	br	4004f58 <__divsf3+0x1b8>
 4004f50:	88001a1e 	bne	r17,zero,4004fbc <__divsf3+0x21c>
 4004f54:	01400044 	movi	r5,1
 4004f58:	8160b03a 	or	r16,r16,r5
 4004f5c:	802090ba 	slli	r16,r16,2
 4004f60:	00c10034 	movhi	r3,1024
 4004f64:	18d3df04 	addi	r3,r3,20348
 4004f68:	80e1883a 	add	r16,r16,r3
 4004f6c:	80c00017 	ldw	r3,0(r16)
 4004f70:	9d44f03a 	xor	r2,r19,r21
 4004f74:	a18dc83a 	sub	r6,r20,r6
 4004f78:	1800683a 	jmp	r3
 4004f7c:	04004ed4 	movui	r16,315
 4004f80:	04004ed4 	movui	r16,315
 4004f84:	04005120 	cmpeqi	r16,zero,324
 4004f88:	04004ebc 	xorhi	r16,zero,314
 4004f8c:	04005120 	cmpeqi	r16,zero,324
 4004f90:	0400501c 	xori	r16,zero,320
 4004f94:	04005120 	cmpeqi	r16,zero,324
 4004f98:	04004ebc 	xorhi	r16,zero,314
 4004f9c:	04004ed4 	movui	r16,315
 4004fa0:	04004ed4 	movui	r16,315
 4004fa4:	0400501c 	xori	r16,zero,320
 4004fa8:	04004ebc 	xorhi	r16,zero,314
 4004fac:	04005130 	cmpltui	r16,zero,324
 4004fb0:	04005130 	cmpltui	r16,zero,324
 4004fb4:	04005130 	cmpltui	r16,zero,324
 4004fb8:	04005148 	cmpgei	r16,zero,325
 4004fbc:	8809883a 	mov	r4,r17
 4004fc0:	400887c0 	call	400887c <__clzsi2>
 4004fc4:	10fffec4 	addi	r3,r2,-5
 4004fc8:	10801d84 	addi	r2,r2,118
 4004fcc:	88e2983a 	sll	r17,r17,r3
 4004fd0:	008dc83a 	sub	r6,zero,r2
 4004fd4:	000b883a 	mov	r5,zero
 4004fd8:	003f9906 	br	4004e40 <__alt_data_end+0xfc004e40>
 4004fdc:	014000c4 	movi	r5,3
 4004fe0:	003f9706 	br	4004e40 <__alt_data_end+0xfc004e40>
 4004fe4:	9009883a 	mov	r4,r18
 4004fe8:	d9400015 	stw	r5,0(sp)
 4004fec:	400887c0 	call	400887c <__clzsi2>
 4004ff0:	10fffec4 	addi	r3,r2,-5
 4004ff4:	11801d84 	addi	r6,r2,118
 4004ff8:	90e4983a 	sll	r18,r18,r3
 4004ffc:	01a9c83a 	sub	r20,zero,r6
 4005000:	0021883a 	mov	r16,zero
 4005004:	002f883a 	mov	r23,zero
 4005008:	d9400017 	ldw	r5,0(sp)
 400500c:	003f7e06 	br	4004e08 <__alt_data_end+0xfc004e08>
 4005010:	04000304 	movi	r16,12
 4005014:	05c000c4 	movi	r23,3
 4005018:	003f7b06 	br	4004e08 <__alt_data_end+0xfc004e08>
 400501c:	01802034 	movhi	r6,128
 4005020:	000f883a 	mov	r7,zero
 4005024:	31bfffc4 	addi	r6,r6,-1
 4005028:	013fffc4 	movi	r4,-1
 400502c:	003fac06 	br	4004ee0 <__alt_data_end+0xfc004ee0>
 4005030:	01400044 	movi	r5,1
 4005034:	2909c83a 	sub	r4,r5,r4
 4005038:	00c006c4 	movi	r3,27
 400503c:	19004b0e 	bge	r3,r4,400516c <__divsf3+0x3cc>
 4005040:	114e703a 	and	r7,r2,r5
 4005044:	0009883a 	mov	r4,zero
 4005048:	000d883a 	mov	r6,zero
 400504c:	003fa406 	br	4004ee0 <__alt_data_end+0xfc004ee0>
 4005050:	9006917a 	slli	r3,r18,5
 4005054:	8822917a 	slli	r17,r17,5
 4005058:	1c40372e 	bgeu	r3,r17,4005138 <__divsf3+0x398>
 400505c:	31bfffc4 	addi	r6,r6,-1
 4005060:	010006c4 	movi	r4,27
 4005064:	000b883a 	mov	r5,zero
 4005068:	180f883a 	mov	r7,r3
 400506c:	294b883a 	add	r5,r5,r5
 4005070:	18c7883a 	add	r3,r3,r3
 4005074:	38000116 	blt	r7,zero,400507c <__divsf3+0x2dc>
 4005078:	1c400236 	bltu	r3,r17,4005084 <__divsf3+0x2e4>
 400507c:	1c47c83a 	sub	r3,r3,r17
 4005080:	29400054 	ori	r5,r5,1
 4005084:	213fffc4 	addi	r4,r4,-1
 4005088:	203ff71e 	bne	r4,zero,4005068 <__alt_data_end+0xfc005068>
 400508c:	1806c03a 	cmpne	r3,r3,zero
 4005090:	1962b03a 	or	r17,r3,r5
 4005094:	31001fc4 	addi	r4,r6,127
 4005098:	013fe50e 	bge	zero,r4,4005030 <__alt_data_end+0xfc005030>
 400509c:	88c001cc 	andi	r3,r17,7
 40050a0:	18000426 	beq	r3,zero,40050b4 <__divsf3+0x314>
 40050a4:	88c003cc 	andi	r3,r17,15
 40050a8:	01400104 	movi	r5,4
 40050ac:	19400126 	beq	r3,r5,40050b4 <__divsf3+0x314>
 40050b0:	8963883a 	add	r17,r17,r5
 40050b4:	88c2002c 	andhi	r3,r17,2048
 40050b8:	18000426 	beq	r3,zero,40050cc <__divsf3+0x32c>
 40050bc:	00fe0034 	movhi	r3,63488
 40050c0:	18ffffc4 	addi	r3,r3,-1
 40050c4:	31002004 	addi	r4,r6,128
 40050c8:	88e2703a 	and	r17,r17,r3
 40050cc:	00c03f84 	movi	r3,254
 40050d0:	193f8016 	blt	r3,r4,4004ed4 <__alt_data_end+0xfc004ed4>
 40050d4:	880c91ba 	slli	r6,r17,6
 40050d8:	11c0004c 	andi	r7,r2,1
 40050dc:	300cd27a 	srli	r6,r6,9
 40050e0:	003f7f06 	br	4004ee0 <__alt_data_end+0xfc004ee0>
 40050e4:	9080102c 	andhi	r2,r18,64
 40050e8:	10000226 	beq	r2,zero,40050f4 <__divsf3+0x354>
 40050ec:	8880102c 	andhi	r2,r17,64
 40050f0:	10001826 	beq	r2,zero,4005154 <__divsf3+0x3b4>
 40050f4:	00802034 	movhi	r2,128
 40050f8:	91801034 	orhi	r6,r18,64
 40050fc:	10bfffc4 	addi	r2,r2,-1
 4005100:	980f883a 	mov	r7,r19
 4005104:	308c703a 	and	r6,r6,r2
 4005108:	003fc706 	br	4005028 <__alt_data_end+0xfc005028>
 400510c:	008000c4 	movi	r2,3
 4005110:	b8802d26 	beq	r23,r2,40051c8 <__divsf3+0x428>
 4005114:	00c00044 	movi	r3,1
 4005118:	b005883a 	mov	r2,r22
 400511c:	b8ffdd1e 	bne	r23,r3,4005094 <__alt_data_end+0xfc005094>
 4005120:	11c0004c 	andi	r7,r2,1
 4005124:	0009883a 	mov	r4,zero
 4005128:	000d883a 	mov	r6,zero
 400512c:	003f6c06 	br	4004ee0 <__alt_data_end+0xfc004ee0>
 4005130:	9023883a 	mov	r17,r18
 4005134:	003f6406 	br	4004ec8 <__alt_data_end+0xfc004ec8>
 4005138:	1c47c83a 	sub	r3,r3,r17
 400513c:	01000684 	movi	r4,26
 4005140:	01400044 	movi	r5,1
 4005144:	003fc806 	br	4005068 <__alt_data_end+0xfc005068>
 4005148:	9080102c 	andhi	r2,r18,64
 400514c:	103fe926 	beq	r2,zero,40050f4 <__alt_data_end+0xfc0050f4>
 4005150:	0023883a 	mov	r17,zero
 4005154:	00802034 	movhi	r2,128
 4005158:	89801034 	orhi	r6,r17,64
 400515c:	10bfffc4 	addi	r2,r2,-1
 4005160:	a80f883a 	mov	r7,r21
 4005164:	308c703a 	and	r6,r6,r2
 4005168:	003faf06 	br	4005028 <__alt_data_end+0xfc005028>
 400516c:	01c00804 	movi	r7,32
 4005170:	390fc83a 	sub	r7,r7,r4
 4005174:	89ce983a 	sll	r7,r17,r7
 4005178:	890ad83a 	srl	r5,r17,r4
 400517c:	380ec03a 	cmpne	r7,r7,zero
 4005180:	29cab03a 	or	r5,r5,r7
 4005184:	28c001cc 	andi	r3,r5,7
 4005188:	18000426 	beq	r3,zero,400519c <__divsf3+0x3fc>
 400518c:	28c003cc 	andi	r3,r5,15
 4005190:	01000104 	movi	r4,4
 4005194:	19000126 	beq	r3,r4,400519c <__divsf3+0x3fc>
 4005198:	290b883a 	add	r5,r5,r4
 400519c:	28c1002c 	andhi	r3,r5,1024
 40051a0:	18000426 	beq	r3,zero,40051b4 <__divsf3+0x414>
 40051a4:	11c0004c 	andi	r7,r2,1
 40051a8:	01000044 	movi	r4,1
 40051ac:	000d883a 	mov	r6,zero
 40051b0:	003f4b06 	br	4004ee0 <__alt_data_end+0xfc004ee0>
 40051b4:	280a91ba 	slli	r5,r5,6
 40051b8:	11c0004c 	andi	r7,r2,1
 40051bc:	0009883a 	mov	r4,zero
 40051c0:	280cd27a 	srli	r6,r5,9
 40051c4:	003f4606 	br	4004ee0 <__alt_data_end+0xfc004ee0>
 40051c8:	00802034 	movhi	r2,128
 40051cc:	89801034 	orhi	r6,r17,64
 40051d0:	10bfffc4 	addi	r2,r2,-1
 40051d4:	b00f883a 	mov	r7,r22
 40051d8:	308c703a 	and	r6,r6,r2
 40051dc:	003f9206 	br	4005028 <__alt_data_end+0xfc005028>

040051e0 <__gesf2>:
 40051e0:	2004d5fa 	srli	r2,r4,23
 40051e4:	2806d5fa 	srli	r3,r5,23
 40051e8:	01802034 	movhi	r6,128
 40051ec:	31bfffc4 	addi	r6,r6,-1
 40051f0:	10803fcc 	andi	r2,r2,255
 40051f4:	01c03fc4 	movi	r7,255
 40051f8:	3110703a 	and	r8,r6,r4
 40051fc:	18c03fcc 	andi	r3,r3,255
 4005200:	314c703a 	and	r6,r6,r5
 4005204:	2008d7fa 	srli	r4,r4,31
 4005208:	280ad7fa 	srli	r5,r5,31
 400520c:	11c01926 	beq	r2,r7,4005274 <__gesf2+0x94>
 4005210:	01c03fc4 	movi	r7,255
 4005214:	19c00f26 	beq	r3,r7,4005254 <__gesf2+0x74>
 4005218:	1000061e 	bne	r2,zero,4005234 <__gesf2+0x54>
 400521c:	400f003a 	cmpeq	r7,r8,zero
 4005220:	1800071e 	bne	r3,zero,4005240 <__gesf2+0x60>
 4005224:	3000061e 	bne	r6,zero,4005240 <__gesf2+0x60>
 4005228:	0005883a 	mov	r2,zero
 400522c:	40000e1e 	bne	r8,zero,4005268 <__gesf2+0x88>
 4005230:	f800283a 	ret
 4005234:	18000a1e 	bne	r3,zero,4005260 <__gesf2+0x80>
 4005238:	30000b26 	beq	r6,zero,4005268 <__gesf2+0x88>
 400523c:	000f883a 	mov	r7,zero
 4005240:	29403fcc 	andi	r5,r5,255
 4005244:	38000726 	beq	r7,zero,4005264 <__gesf2+0x84>
 4005248:	28000826 	beq	r5,zero,400526c <__gesf2+0x8c>
 400524c:	00800044 	movi	r2,1
 4005250:	f800283a 	ret
 4005254:	303ff026 	beq	r6,zero,4005218 <__alt_data_end+0xfc005218>
 4005258:	00bfff84 	movi	r2,-2
 400525c:	f800283a 	ret
 4005260:	29403fcc 	andi	r5,r5,255
 4005264:	21400526 	beq	r4,r5,400527c <__gesf2+0x9c>
 4005268:	203ff826 	beq	r4,zero,400524c <__alt_data_end+0xfc00524c>
 400526c:	00bfffc4 	movi	r2,-1
 4005270:	f800283a 	ret
 4005274:	403fe626 	beq	r8,zero,4005210 <__alt_data_end+0xfc005210>
 4005278:	003ff706 	br	4005258 <__alt_data_end+0xfc005258>
 400527c:	18bffa16 	blt	r3,r2,4005268 <__alt_data_end+0xfc005268>
 4005280:	10c00216 	blt	r2,r3,400528c <__gesf2+0xac>
 4005284:	323ff836 	bltu	r6,r8,4005268 <__alt_data_end+0xfc005268>
 4005288:	4180022e 	bgeu	r8,r6,4005294 <__gesf2+0xb4>
 400528c:	203fef1e 	bne	r4,zero,400524c <__alt_data_end+0xfc00524c>
 4005290:	003ff606 	br	400526c <__alt_data_end+0xfc00526c>
 4005294:	0005883a 	mov	r2,zero
 4005298:	f800283a 	ret

0400529c <__lesf2>:
 400529c:	2004d5fa 	srli	r2,r4,23
 40052a0:	280cd5fa 	srli	r6,r5,23
 40052a4:	00c02034 	movhi	r3,128
 40052a8:	18ffffc4 	addi	r3,r3,-1
 40052ac:	10803fcc 	andi	r2,r2,255
 40052b0:	01c03fc4 	movi	r7,255
 40052b4:	1910703a 	and	r8,r3,r4
 40052b8:	31803fcc 	andi	r6,r6,255
 40052bc:	1946703a 	and	r3,r3,r5
 40052c0:	2008d7fa 	srli	r4,r4,31
 40052c4:	280ad7fa 	srli	r5,r5,31
 40052c8:	11c01b26 	beq	r2,r7,4005338 <__lesf2+0x9c>
 40052cc:	01c03fc4 	movi	r7,255
 40052d0:	31c01126 	beq	r6,r7,4005318 <__lesf2+0x7c>
 40052d4:	1000071e 	bne	r2,zero,40052f4 <__lesf2+0x58>
 40052d8:	400f003a 	cmpeq	r7,r8,zero
 40052dc:	21003fcc 	andi	r4,r4,255
 40052e0:	3000081e 	bne	r6,zero,4005304 <__lesf2+0x68>
 40052e4:	1800071e 	bne	r3,zero,4005304 <__lesf2+0x68>
 40052e8:	0005883a 	mov	r2,zero
 40052ec:	40000f1e 	bne	r8,zero,400532c <__lesf2+0x90>
 40052f0:	f800283a 	ret
 40052f4:	21003fcc 	andi	r4,r4,255
 40052f8:	30000a1e 	bne	r6,zero,4005324 <__lesf2+0x88>
 40052fc:	18000b26 	beq	r3,zero,400532c <__lesf2+0x90>
 4005300:	000f883a 	mov	r7,zero
 4005304:	29403fcc 	andi	r5,r5,255
 4005308:	38000726 	beq	r7,zero,4005328 <__lesf2+0x8c>
 400530c:	28000826 	beq	r5,zero,4005330 <__lesf2+0x94>
 4005310:	00800044 	movi	r2,1
 4005314:	f800283a 	ret
 4005318:	183fee26 	beq	r3,zero,40052d4 <__alt_data_end+0xfc0052d4>
 400531c:	00800084 	movi	r2,2
 4005320:	f800283a 	ret
 4005324:	29403fcc 	andi	r5,r5,255
 4005328:	21400626 	beq	r4,r5,4005344 <__lesf2+0xa8>
 400532c:	203ff826 	beq	r4,zero,4005310 <__alt_data_end+0xfc005310>
 4005330:	00bfffc4 	movi	r2,-1
 4005334:	f800283a 	ret
 4005338:	403fe426 	beq	r8,zero,40052cc <__alt_data_end+0xfc0052cc>
 400533c:	00800084 	movi	r2,2
 4005340:	f800283a 	ret
 4005344:	30bff916 	blt	r6,r2,400532c <__alt_data_end+0xfc00532c>
 4005348:	11800216 	blt	r2,r6,4005354 <__lesf2+0xb8>
 400534c:	1a3ff736 	bltu	r3,r8,400532c <__alt_data_end+0xfc00532c>
 4005350:	40c0022e 	bgeu	r8,r3,400535c <__lesf2+0xc0>
 4005354:	203fee1e 	bne	r4,zero,4005310 <__alt_data_end+0xfc005310>
 4005358:	003ff506 	br	4005330 <__alt_data_end+0xfc005330>
 400535c:	0005883a 	mov	r2,zero
 4005360:	f800283a 	ret

04005364 <__mulsf3>:
 4005364:	defff504 	addi	sp,sp,-44
 4005368:	dc000115 	stw	r16,4(sp)
 400536c:	2020d5fa 	srli	r16,r4,23
 4005370:	dd400615 	stw	r21,24(sp)
 4005374:	202ad7fa 	srli	r21,r4,31
 4005378:	dc800315 	stw	r18,12(sp)
 400537c:	04802034 	movhi	r18,128
 4005380:	df000915 	stw	fp,36(sp)
 4005384:	dd000515 	stw	r20,20(sp)
 4005388:	94bfffc4 	addi	r18,r18,-1
 400538c:	dfc00a15 	stw	ra,40(sp)
 4005390:	ddc00815 	stw	r23,32(sp)
 4005394:	dd800715 	stw	r22,28(sp)
 4005398:	dcc00415 	stw	r19,16(sp)
 400539c:	dc400215 	stw	r17,8(sp)
 40053a0:	84003fcc 	andi	r16,r16,255
 40053a4:	9124703a 	and	r18,r18,r4
 40053a8:	a829883a 	mov	r20,r21
 40053ac:	af003fcc 	andi	fp,r21,255
 40053b0:	80005426 	beq	r16,zero,4005504 <__mulsf3+0x1a0>
 40053b4:	00803fc4 	movi	r2,255
 40053b8:	80802f26 	beq	r16,r2,4005478 <__mulsf3+0x114>
 40053bc:	91002034 	orhi	r4,r18,128
 40053c0:	202490fa 	slli	r18,r4,3
 40053c4:	843fe044 	addi	r16,r16,-127
 40053c8:	0023883a 	mov	r17,zero
 40053cc:	002f883a 	mov	r23,zero
 40053d0:	2804d5fa 	srli	r2,r5,23
 40053d4:	282cd7fa 	srli	r22,r5,31
 40053d8:	01002034 	movhi	r4,128
 40053dc:	213fffc4 	addi	r4,r4,-1
 40053e0:	10803fcc 	andi	r2,r2,255
 40053e4:	2166703a 	and	r19,r4,r5
 40053e8:	b1803fcc 	andi	r6,r22,255
 40053ec:	10004c26 	beq	r2,zero,4005520 <__mulsf3+0x1bc>
 40053f0:	00c03fc4 	movi	r3,255
 40053f4:	10c04726 	beq	r2,r3,4005514 <__mulsf3+0x1b0>
 40053f8:	99002034 	orhi	r4,r19,128
 40053fc:	202690fa 	slli	r19,r4,3
 4005400:	10bfe044 	addi	r2,r2,-127
 4005404:	0007883a 	mov	r3,zero
 4005408:	80a1883a 	add	r16,r16,r2
 400540c:	010003c4 	movi	r4,15
 4005410:	1c44b03a 	or	r2,r3,r17
 4005414:	b56af03a 	xor	r21,r22,r21
 4005418:	81c00044 	addi	r7,r16,1
 400541c:	20806b36 	bltu	r4,r2,40055cc <__mulsf3+0x268>
 4005420:	100490ba 	slli	r2,r2,2
 4005424:	01010034 	movhi	r4,1024
 4005428:	21150e04 	addi	r4,r4,21560
 400542c:	1105883a 	add	r2,r2,r4
 4005430:	10800017 	ldw	r2,0(r2)
 4005434:	1000683a 	jmp	r2
 4005438:	040055cc 	andi	r16,zero,343
 400543c:	0400548c 	andi	r16,zero,338
 4005440:	0400548c 	andi	r16,zero,338
 4005444:	04005488 	cmpgei	r16,zero,338
 4005448:	040055b0 	cmpltui	r16,zero,342
 400544c:	040055b0 	cmpltui	r16,zero,342
 4005450:	0400559c 	xori	r16,zero,342
 4005454:	04005488 	cmpgei	r16,zero,338
 4005458:	040055b0 	cmpltui	r16,zero,342
 400545c:	0400559c 	xori	r16,zero,342
 4005460:	040055b0 	cmpltui	r16,zero,342
 4005464:	04005488 	cmpgei	r16,zero,338
 4005468:	040055bc 	xorhi	r16,zero,342
 400546c:	040055bc 	xorhi	r16,zero,342
 4005470:	040055bc 	xorhi	r16,zero,342
 4005474:	040056cc 	andi	r16,zero,347
 4005478:	90003b1e 	bne	r18,zero,4005568 <__mulsf3+0x204>
 400547c:	04400204 	movi	r17,8
 4005480:	05c00084 	movi	r23,2
 4005484:	003fd206 	br	40053d0 <__alt_data_end+0xfc0053d0>
 4005488:	302b883a 	mov	r21,r6
 400548c:	00800084 	movi	r2,2
 4005490:	18802626 	beq	r3,r2,400552c <__mulsf3+0x1c8>
 4005494:	008000c4 	movi	r2,3
 4005498:	1880b826 	beq	r3,r2,400577c <__mulsf3+0x418>
 400549c:	00800044 	movi	r2,1
 40054a0:	1880af1e 	bne	r3,r2,4005760 <__mulsf3+0x3fc>
 40054a4:	a829883a 	mov	r20,r21
 40054a8:	0007883a 	mov	r3,zero
 40054ac:	0009883a 	mov	r4,zero
 40054b0:	18803fcc 	andi	r2,r3,255
 40054b4:	100695fa 	slli	r3,r2,23
 40054b8:	a0803fcc 	andi	r2,r20,255
 40054bc:	100a97fa 	slli	r5,r2,31
 40054c0:	00802034 	movhi	r2,128
 40054c4:	10bfffc4 	addi	r2,r2,-1
 40054c8:	2084703a 	and	r2,r4,r2
 40054cc:	10c4b03a 	or	r2,r2,r3
 40054d0:	1144b03a 	or	r2,r2,r5
 40054d4:	dfc00a17 	ldw	ra,40(sp)
 40054d8:	df000917 	ldw	fp,36(sp)
 40054dc:	ddc00817 	ldw	r23,32(sp)
 40054e0:	dd800717 	ldw	r22,28(sp)
 40054e4:	dd400617 	ldw	r21,24(sp)
 40054e8:	dd000517 	ldw	r20,20(sp)
 40054ec:	dcc00417 	ldw	r19,16(sp)
 40054f0:	dc800317 	ldw	r18,12(sp)
 40054f4:	dc400217 	ldw	r17,8(sp)
 40054f8:	dc000117 	ldw	r16,4(sp)
 40054fc:	dec00b04 	addi	sp,sp,44
 4005500:	f800283a 	ret
 4005504:	90000d1e 	bne	r18,zero,400553c <__mulsf3+0x1d8>
 4005508:	04400104 	movi	r17,4
 400550c:	05c00044 	movi	r23,1
 4005510:	003faf06 	br	40053d0 <__alt_data_end+0xfc0053d0>
 4005514:	9806c03a 	cmpne	r3,r19,zero
 4005518:	18c00084 	addi	r3,r3,2
 400551c:	003fba06 	br	4005408 <__alt_data_end+0xfc005408>
 4005520:	9800141e 	bne	r19,zero,4005574 <__mulsf3+0x210>
 4005524:	00c00044 	movi	r3,1
 4005528:	003fb706 	br	4005408 <__alt_data_end+0xfc005408>
 400552c:	a829883a 	mov	r20,r21
 4005530:	00ffffc4 	movi	r3,-1
 4005534:	0009883a 	mov	r4,zero
 4005538:	003fdd06 	br	40054b0 <__alt_data_end+0xfc0054b0>
 400553c:	9009883a 	mov	r4,r18
 4005540:	d9400015 	stw	r5,0(sp)
 4005544:	400887c0 	call	400887c <__clzsi2>
 4005548:	10fffec4 	addi	r3,r2,-5
 400554c:	10801d84 	addi	r2,r2,118
 4005550:	90e4983a 	sll	r18,r18,r3
 4005554:	00a1c83a 	sub	r16,zero,r2
 4005558:	0023883a 	mov	r17,zero
 400555c:	002f883a 	mov	r23,zero
 4005560:	d9400017 	ldw	r5,0(sp)
 4005564:	003f9a06 	br	40053d0 <__alt_data_end+0xfc0053d0>
 4005568:	04400304 	movi	r17,12
 400556c:	05c000c4 	movi	r23,3
 4005570:	003f9706 	br	40053d0 <__alt_data_end+0xfc0053d0>
 4005574:	9809883a 	mov	r4,r19
 4005578:	d9800015 	stw	r6,0(sp)
 400557c:	400887c0 	call	400887c <__clzsi2>
 4005580:	10fffec4 	addi	r3,r2,-5
 4005584:	10801d84 	addi	r2,r2,118
 4005588:	98e6983a 	sll	r19,r19,r3
 400558c:	0085c83a 	sub	r2,zero,r2
 4005590:	0007883a 	mov	r3,zero
 4005594:	d9800017 	ldw	r6,0(sp)
 4005598:	003f9b06 	br	4005408 <__alt_data_end+0xfc005408>
 400559c:	01002034 	movhi	r4,128
 40055a0:	0029883a 	mov	r20,zero
 40055a4:	213fffc4 	addi	r4,r4,-1
 40055a8:	00ffffc4 	movi	r3,-1
 40055ac:	003fc006 	br	40054b0 <__alt_data_end+0xfc0054b0>
 40055b0:	9027883a 	mov	r19,r18
 40055b4:	b807883a 	mov	r3,r23
 40055b8:	003fb406 	br	400548c <__alt_data_end+0xfc00548c>
 40055bc:	9027883a 	mov	r19,r18
 40055c0:	e02b883a 	mov	r21,fp
 40055c4:	b807883a 	mov	r3,r23
 40055c8:	003fb006 	br	400548c <__alt_data_end+0xfc00548c>
 40055cc:	9028d43a 	srli	r20,r18,16
 40055d0:	982cd43a 	srli	r22,r19,16
 40055d4:	94bfffcc 	andi	r18,r18,65535
 40055d8:	9cffffcc 	andi	r19,r19,65535
 40055dc:	980b883a 	mov	r5,r19
 40055e0:	9009883a 	mov	r4,r18
 40055e4:	d9c00015 	stw	r7,0(sp)
 40055e8:	40048b00 	call	40048b0 <__mulsi3>
 40055ec:	a00b883a 	mov	r5,r20
 40055f0:	9809883a 	mov	r4,r19
 40055f4:	1023883a 	mov	r17,r2
 40055f8:	40048b00 	call	40048b0 <__mulsi3>
 40055fc:	a009883a 	mov	r4,r20
 4005600:	b00b883a 	mov	r5,r22
 4005604:	1027883a 	mov	r19,r2
 4005608:	40048b00 	call	40048b0 <__mulsi3>
 400560c:	b00b883a 	mov	r5,r22
 4005610:	9009883a 	mov	r4,r18
 4005614:	1029883a 	mov	r20,r2
 4005618:	40048b00 	call	40048b0 <__mulsi3>
 400561c:	8806d43a 	srli	r3,r17,16
 4005620:	14c5883a 	add	r2,r2,r19
 4005624:	d9c00017 	ldw	r7,0(sp)
 4005628:	1885883a 	add	r2,r3,r2
 400562c:	14c0022e 	bgeu	r2,r19,4005638 <__mulsf3+0x2d4>
 4005630:	00c00074 	movhi	r3,1
 4005634:	a0e9883a 	add	r20,r20,r3
 4005638:	1026943a 	slli	r19,r2,16
 400563c:	8c7fffcc 	andi	r17,r17,65535
 4005640:	1004d43a 	srli	r2,r2,16
 4005644:	9c63883a 	add	r17,r19,r17
 4005648:	882691ba 	slli	r19,r17,6
 400564c:	1505883a 	add	r2,r2,r20
 4005650:	8822d6ba 	srli	r17,r17,26
 4005654:	100891ba 	slli	r4,r2,6
 4005658:	9826c03a 	cmpne	r19,r19,zero
 400565c:	9c62b03a 	or	r17,r19,r17
 4005660:	8926b03a 	or	r19,r17,r4
 4005664:	9882002c 	andhi	r2,r19,2048
 4005668:	10000426 	beq	r2,zero,400567c <__mulsf3+0x318>
 400566c:	9804d07a 	srli	r2,r19,1
 4005670:	9900004c 	andi	r4,r19,1
 4005674:	3821883a 	mov	r16,r7
 4005678:	1126b03a 	or	r19,r2,r4
 400567c:	80c01fc4 	addi	r3,r16,127
 4005680:	00c0210e 	bge	zero,r3,4005708 <__mulsf3+0x3a4>
 4005684:	988001cc 	andi	r2,r19,7
 4005688:	10000426 	beq	r2,zero,400569c <__mulsf3+0x338>
 400568c:	988003cc 	andi	r2,r19,15
 4005690:	01000104 	movi	r4,4
 4005694:	11000126 	beq	r2,r4,400569c <__mulsf3+0x338>
 4005698:	9927883a 	add	r19,r19,r4
 400569c:	9882002c 	andhi	r2,r19,2048
 40056a0:	10000426 	beq	r2,zero,40056b4 <__mulsf3+0x350>
 40056a4:	00be0034 	movhi	r2,63488
 40056a8:	10bfffc4 	addi	r2,r2,-1
 40056ac:	80c02004 	addi	r3,r16,128
 40056b0:	98a6703a 	and	r19,r19,r2
 40056b4:	00803f84 	movi	r2,254
 40056b8:	10ff9c16 	blt	r2,r3,400552c <__alt_data_end+0xfc00552c>
 40056bc:	980891ba 	slli	r4,r19,6
 40056c0:	a829883a 	mov	r20,r21
 40056c4:	2008d27a 	srli	r4,r4,9
 40056c8:	003f7906 	br	40054b0 <__alt_data_end+0xfc0054b0>
 40056cc:	9080102c 	andhi	r2,r18,64
 40056d0:	10000826 	beq	r2,zero,40056f4 <__mulsf3+0x390>
 40056d4:	9880102c 	andhi	r2,r19,64
 40056d8:	1000061e 	bne	r2,zero,40056f4 <__mulsf3+0x390>
 40056dc:	00802034 	movhi	r2,128
 40056e0:	99001034 	orhi	r4,r19,64
 40056e4:	10bfffc4 	addi	r2,r2,-1
 40056e8:	b029883a 	mov	r20,r22
 40056ec:	2088703a 	and	r4,r4,r2
 40056f0:	003fad06 	br	40055a8 <__alt_data_end+0xfc0055a8>
 40056f4:	00802034 	movhi	r2,128
 40056f8:	91001034 	orhi	r4,r18,64
 40056fc:	10bfffc4 	addi	r2,r2,-1
 4005700:	2088703a 	and	r4,r4,r2
 4005704:	003fa806 	br	40055a8 <__alt_data_end+0xfc0055a8>
 4005708:	00800044 	movi	r2,1
 400570c:	10c7c83a 	sub	r3,r2,r3
 4005710:	008006c4 	movi	r2,27
 4005714:	10ff6316 	blt	r2,r3,40054a4 <__alt_data_end+0xfc0054a4>
 4005718:	00800804 	movi	r2,32
 400571c:	10c5c83a 	sub	r2,r2,r3
 4005720:	9884983a 	sll	r2,r19,r2
 4005724:	98c6d83a 	srl	r3,r19,r3
 4005728:	1004c03a 	cmpne	r2,r2,zero
 400572c:	1884b03a 	or	r2,r3,r2
 4005730:	10c001cc 	andi	r3,r2,7
 4005734:	18000426 	beq	r3,zero,4005748 <__mulsf3+0x3e4>
 4005738:	10c003cc 	andi	r3,r2,15
 400573c:	01000104 	movi	r4,4
 4005740:	19000126 	beq	r3,r4,4005748 <__mulsf3+0x3e4>
 4005744:	1105883a 	add	r2,r2,r4
 4005748:	10c1002c 	andhi	r3,r2,1024
 400574c:	18000626 	beq	r3,zero,4005768 <__mulsf3+0x404>
 4005750:	a829883a 	mov	r20,r21
 4005754:	00c00044 	movi	r3,1
 4005758:	0009883a 	mov	r4,zero
 400575c:	003f5406 	br	40054b0 <__alt_data_end+0xfc0054b0>
 4005760:	3821883a 	mov	r16,r7
 4005764:	003fc506 	br	400567c <__alt_data_end+0xfc00567c>
 4005768:	100491ba 	slli	r2,r2,6
 400576c:	a829883a 	mov	r20,r21
 4005770:	0007883a 	mov	r3,zero
 4005774:	1008d27a 	srli	r4,r2,9
 4005778:	003f4d06 	br	40054b0 <__alt_data_end+0xfc0054b0>
 400577c:	00802034 	movhi	r2,128
 4005780:	99001034 	orhi	r4,r19,64
 4005784:	10bfffc4 	addi	r2,r2,-1
 4005788:	a829883a 	mov	r20,r21
 400578c:	2088703a 	and	r4,r4,r2
 4005790:	003f8506 	br	40055a8 <__alt_data_end+0xfc0055a8>

04005794 <__subsf3>:
 4005794:	defffc04 	addi	sp,sp,-16
 4005798:	280cd5fa 	srli	r6,r5,23
 400579c:	dc000015 	stw	r16,0(sp)
 40057a0:	01c02034 	movhi	r7,128
 40057a4:	2020d5fa 	srli	r16,r4,23
 40057a8:	39ffffc4 	addi	r7,r7,-1
 40057ac:	3906703a 	and	r3,r7,r4
 40057b0:	dc400115 	stw	r17,4(sp)
 40057b4:	394e703a 	and	r7,r7,r5
 40057b8:	2022d7fa 	srli	r17,r4,31
 40057bc:	dfc00315 	stw	ra,12(sp)
 40057c0:	dc800215 	stw	r18,8(sp)
 40057c4:	31803fcc 	andi	r6,r6,255
 40057c8:	01003fc4 	movi	r4,255
 40057cc:	84003fcc 	andi	r16,r16,255
 40057d0:	180690fa 	slli	r3,r3,3
 40057d4:	2804d7fa 	srli	r2,r5,31
 40057d8:	380e90fa 	slli	r7,r7,3
 40057dc:	31006d26 	beq	r6,r4,4005994 <__subsf3+0x200>
 40057e0:	1080005c 	xori	r2,r2,1
 40057e4:	8189c83a 	sub	r4,r16,r6
 40057e8:	14404f26 	beq	r2,r17,4005928 <__subsf3+0x194>
 40057ec:	0100770e 	bge	zero,r4,40059cc <__subsf3+0x238>
 40057f0:	30001e1e 	bne	r6,zero,400586c <__subsf3+0xd8>
 40057f4:	38006a1e 	bne	r7,zero,40059a0 <__subsf3+0x20c>
 40057f8:	188001cc 	andi	r2,r3,7
 40057fc:	10000426 	beq	r2,zero,4005810 <__subsf3+0x7c>
 4005800:	188003cc 	andi	r2,r3,15
 4005804:	01000104 	movi	r4,4
 4005808:	11000126 	beq	r2,r4,4005810 <__subsf3+0x7c>
 400580c:	1907883a 	add	r3,r3,r4
 4005810:	1881002c 	andhi	r2,r3,1024
 4005814:	10003926 	beq	r2,zero,40058fc <__subsf3+0x168>
 4005818:	84000044 	addi	r16,r16,1
 400581c:	00803fc4 	movi	r2,255
 4005820:	80807526 	beq	r16,r2,40059f8 <__subsf3+0x264>
 4005824:	180691ba 	slli	r3,r3,6
 4005828:	8880004c 	andi	r2,r17,1
 400582c:	180ad27a 	srli	r5,r3,9
 4005830:	84003fcc 	andi	r16,r16,255
 4005834:	800695fa 	slli	r3,r16,23
 4005838:	10803fcc 	andi	r2,r2,255
 400583c:	01002034 	movhi	r4,128
 4005840:	213fffc4 	addi	r4,r4,-1
 4005844:	100497fa 	slli	r2,r2,31
 4005848:	2920703a 	and	r16,r5,r4
 400584c:	80e0b03a 	or	r16,r16,r3
 4005850:	8084b03a 	or	r2,r16,r2
 4005854:	dfc00317 	ldw	ra,12(sp)
 4005858:	dc800217 	ldw	r18,8(sp)
 400585c:	dc400117 	ldw	r17,4(sp)
 4005860:	dc000017 	ldw	r16,0(sp)
 4005864:	dec00404 	addi	sp,sp,16
 4005868:	f800283a 	ret
 400586c:	00803fc4 	movi	r2,255
 4005870:	80bfe126 	beq	r16,r2,40057f8 <__alt_data_end+0xfc0057f8>
 4005874:	39c10034 	orhi	r7,r7,1024
 4005878:	008006c4 	movi	r2,27
 400587c:	11007416 	blt	r2,r4,4005a50 <__subsf3+0x2bc>
 4005880:	00800804 	movi	r2,32
 4005884:	1105c83a 	sub	r2,r2,r4
 4005888:	3884983a 	sll	r2,r7,r2
 400588c:	390ed83a 	srl	r7,r7,r4
 4005890:	1008c03a 	cmpne	r4,r2,zero
 4005894:	390eb03a 	or	r7,r7,r4
 4005898:	19c7c83a 	sub	r3,r3,r7
 400589c:	1881002c 	andhi	r2,r3,1024
 40058a0:	10001426 	beq	r2,zero,40058f4 <__subsf3+0x160>
 40058a4:	04810034 	movhi	r18,1024
 40058a8:	94bfffc4 	addi	r18,r18,-1
 40058ac:	1ca4703a 	and	r18,r3,r18
 40058b0:	9009883a 	mov	r4,r18
 40058b4:	400887c0 	call	400887c <__clzsi2>
 40058b8:	10bffec4 	addi	r2,r2,-5
 40058bc:	90a4983a 	sll	r18,r18,r2
 40058c0:	14005116 	blt	r2,r16,4005a08 <__subsf3+0x274>
 40058c4:	1405c83a 	sub	r2,r2,r16
 40058c8:	10c00044 	addi	r3,r2,1
 40058cc:	00800804 	movi	r2,32
 40058d0:	10c5c83a 	sub	r2,r2,r3
 40058d4:	9084983a 	sll	r2,r18,r2
 40058d8:	90e4d83a 	srl	r18,r18,r3
 40058dc:	0021883a 	mov	r16,zero
 40058e0:	1006c03a 	cmpne	r3,r2,zero
 40058e4:	90c6b03a 	or	r3,r18,r3
 40058e8:	003fc306 	br	40057f8 <__alt_data_end+0xfc0057f8>
 40058ec:	2000e026 	beq	r4,zero,4005c70 <__subsf3+0x4dc>
 40058f0:	2007883a 	mov	r3,r4
 40058f4:	188001cc 	andi	r2,r3,7
 40058f8:	103fc11e 	bne	r2,zero,4005800 <__alt_data_end+0xfc005800>
 40058fc:	180ad0fa 	srli	r5,r3,3
 4005900:	00c03fc4 	movi	r3,255
 4005904:	8880004c 	andi	r2,r17,1
 4005908:	80c0031e 	bne	r16,r3,4005918 <__subsf3+0x184>
 400590c:	28006d26 	beq	r5,zero,4005ac4 <__subsf3+0x330>
 4005910:	29401034 	orhi	r5,r5,64
 4005914:	043fffc4 	movi	r16,-1
 4005918:	00c02034 	movhi	r3,128
 400591c:	18ffffc4 	addi	r3,r3,-1
 4005920:	28ca703a 	and	r5,r5,r3
 4005924:	003fc206 	br	4005830 <__alt_data_end+0xfc005830>
 4005928:	01003c0e 	bge	zero,r4,4005a1c <__subsf3+0x288>
 400592c:	30002126 	beq	r6,zero,40059b4 <__subsf3+0x220>
 4005930:	01403fc4 	movi	r5,255
 4005934:	817fb026 	beq	r16,r5,40057f8 <__alt_data_end+0xfc0057f8>
 4005938:	39c10034 	orhi	r7,r7,1024
 400593c:	014006c4 	movi	r5,27
 4005940:	29007416 	blt	r5,r4,4005b14 <__subsf3+0x380>
 4005944:	01400804 	movi	r5,32
 4005948:	290bc83a 	sub	r5,r5,r4
 400594c:	394a983a 	sll	r5,r7,r5
 4005950:	390ed83a 	srl	r7,r7,r4
 4005954:	2808c03a 	cmpne	r4,r5,zero
 4005958:	390eb03a 	or	r7,r7,r4
 400595c:	19c7883a 	add	r3,r3,r7
 4005960:	1901002c 	andhi	r4,r3,1024
 4005964:	20003826 	beq	r4,zero,4005a48 <__subsf3+0x2b4>
 4005968:	84000044 	addi	r16,r16,1
 400596c:	01003fc4 	movi	r4,255
 4005970:	81005426 	beq	r16,r4,4005ac4 <__subsf3+0x330>
 4005974:	1023883a 	mov	r17,r2
 4005978:	00bf0034 	movhi	r2,64512
 400597c:	10bfffc4 	addi	r2,r2,-1
 4005980:	1900004c 	andi	r4,r3,1
 4005984:	1886703a 	and	r3,r3,r2
 4005988:	1806d07a 	srli	r3,r3,1
 400598c:	1906b03a 	or	r3,r3,r4
 4005990:	003f9906 	br	40057f8 <__alt_data_end+0xfc0057f8>
 4005994:	383f9226 	beq	r7,zero,40057e0 <__alt_data_end+0xfc0057e0>
 4005998:	10803fcc 	andi	r2,r2,255
 400599c:	003f9106 	br	40057e4 <__alt_data_end+0xfc0057e4>
 40059a0:	213fffc4 	addi	r4,r4,-1
 40059a4:	203fbc26 	beq	r4,zero,4005898 <__alt_data_end+0xfc005898>
 40059a8:	00803fc4 	movi	r2,255
 40059ac:	80bfb21e 	bne	r16,r2,4005878 <__alt_data_end+0xfc005878>
 40059b0:	003f9106 	br	40057f8 <__alt_data_end+0xfc0057f8>
 40059b4:	383f9026 	beq	r7,zero,40057f8 <__alt_data_end+0xfc0057f8>
 40059b8:	213fffc4 	addi	r4,r4,-1
 40059bc:	203fe726 	beq	r4,zero,400595c <__alt_data_end+0xfc00595c>
 40059c0:	01403fc4 	movi	r5,255
 40059c4:	817fdd1e 	bne	r16,r5,400593c <__alt_data_end+0xfc00593c>
 40059c8:	003f8b06 	br	40057f8 <__alt_data_end+0xfc0057f8>
 40059cc:	2000221e 	bne	r4,zero,4005a58 <__subsf3+0x2c4>
 40059d0:	81000044 	addi	r4,r16,1
 40059d4:	21003fcc 	andi	r4,r4,255
 40059d8:	01400044 	movi	r5,1
 40059dc:	2900470e 	bge	r5,r4,4005afc <__subsf3+0x368>
 40059e0:	19e5c83a 	sub	r18,r3,r7
 40059e4:	9141002c 	andhi	r5,r18,1024
 40059e8:	28002d26 	beq	r5,zero,4005aa0 <__subsf3+0x30c>
 40059ec:	38e5c83a 	sub	r18,r7,r3
 40059f0:	1023883a 	mov	r17,r2
 40059f4:	003fae06 	br	40058b0 <__alt_data_end+0xfc0058b0>
 40059f8:	8880004c 	andi	r2,r17,1
 40059fc:	043fffc4 	movi	r16,-1
 4005a00:	000b883a 	mov	r5,zero
 4005a04:	003f8a06 	br	4005830 <__alt_data_end+0xfc005830>
 4005a08:	00ff0034 	movhi	r3,64512
 4005a0c:	18ffffc4 	addi	r3,r3,-1
 4005a10:	80a1c83a 	sub	r16,r16,r2
 4005a14:	90c6703a 	and	r3,r18,r3
 4005a18:	003f7706 	br	40057f8 <__alt_data_end+0xfc0057f8>
 4005a1c:	2000431e 	bne	r4,zero,4005b2c <__subsf3+0x398>
 4005a20:	81000044 	addi	r4,r16,1
 4005a24:	21803fcc 	andi	r6,r4,255
 4005a28:	01400044 	movi	r5,1
 4005a2c:	2980280e 	bge	r5,r6,4005ad0 <__subsf3+0x33c>
 4005a30:	01403fc4 	movi	r5,255
 4005a34:	21402326 	beq	r4,r5,4005ac4 <__subsf3+0x330>
 4005a38:	19c7883a 	add	r3,r3,r7
 4005a3c:	1806d07a 	srli	r3,r3,1
 4005a40:	2021883a 	mov	r16,r4
 4005a44:	003f6c06 	br	40057f8 <__alt_data_end+0xfc0057f8>
 4005a48:	1023883a 	mov	r17,r2
 4005a4c:	003fa906 	br	40058f4 <__alt_data_end+0xfc0058f4>
 4005a50:	01c00044 	movi	r7,1
 4005a54:	003f9006 	br	4005898 <__alt_data_end+0xfc005898>
 4005a58:	8000151e 	bne	r16,zero,4005ab0 <__subsf3+0x31c>
 4005a5c:	18002f26 	beq	r3,zero,4005b1c <__subsf3+0x388>
 4005a60:	0108303a 	nor	r4,zero,r4
 4005a64:	20000a26 	beq	r4,zero,4005a90 <__subsf3+0x2fc>
 4005a68:	01403fc4 	movi	r5,255
 4005a6c:	31402b26 	beq	r6,r5,4005b1c <__subsf3+0x388>
 4005a70:	014006c4 	movi	r5,27
 4005a74:	29006e16 	blt	r5,r4,4005c30 <__subsf3+0x49c>
 4005a78:	01400804 	movi	r5,32
 4005a7c:	290bc83a 	sub	r5,r5,r4
 4005a80:	194a983a 	sll	r5,r3,r5
 4005a84:	1908d83a 	srl	r4,r3,r4
 4005a88:	2806c03a 	cmpne	r3,r5,zero
 4005a8c:	20c6b03a 	or	r3,r4,r3
 4005a90:	38c7c83a 	sub	r3,r7,r3
 4005a94:	3021883a 	mov	r16,r6
 4005a98:	1023883a 	mov	r17,r2
 4005a9c:	003f7f06 	br	400589c <__alt_data_end+0xfc00589c>
 4005aa0:	903f831e 	bne	r18,zero,40058b0 <__alt_data_end+0xfc0058b0>
 4005aa4:	0005883a 	mov	r2,zero
 4005aa8:	0021883a 	mov	r16,zero
 4005aac:	003f9a06 	br	4005918 <__alt_data_end+0xfc005918>
 4005ab0:	01403fc4 	movi	r5,255
 4005ab4:	31401926 	beq	r6,r5,4005b1c <__subsf3+0x388>
 4005ab8:	0109c83a 	sub	r4,zero,r4
 4005abc:	18c10034 	orhi	r3,r3,1024
 4005ac0:	003feb06 	br	4005a70 <__alt_data_end+0xfc005a70>
 4005ac4:	043fffc4 	movi	r16,-1
 4005ac8:	000b883a 	mov	r5,zero
 4005acc:	003f5806 	br	4005830 <__alt_data_end+0xfc005830>
 4005ad0:	8000481e 	bne	r16,zero,4005bf4 <__subsf3+0x460>
 4005ad4:	18006226 	beq	r3,zero,4005c60 <__subsf3+0x4cc>
 4005ad8:	383f4726 	beq	r7,zero,40057f8 <__alt_data_end+0xfc0057f8>
 4005adc:	19c7883a 	add	r3,r3,r7
 4005ae0:	1881002c 	andhi	r2,r3,1024
 4005ae4:	103f8326 	beq	r2,zero,40058f4 <__alt_data_end+0xfc0058f4>
 4005ae8:	00bf0034 	movhi	r2,64512
 4005aec:	10bfffc4 	addi	r2,r2,-1
 4005af0:	2821883a 	mov	r16,r5
 4005af4:	1886703a 	and	r3,r3,r2
 4005af8:	003f3f06 	br	40057f8 <__alt_data_end+0xfc0057f8>
 4005afc:	80001c1e 	bne	r16,zero,4005b70 <__subsf3+0x3dc>
 4005b00:	1800261e 	bne	r3,zero,4005b9c <__subsf3+0x408>
 4005b04:	38004c26 	beq	r7,zero,4005c38 <__subsf3+0x4a4>
 4005b08:	3807883a 	mov	r3,r7
 4005b0c:	1023883a 	mov	r17,r2
 4005b10:	003f3906 	br	40057f8 <__alt_data_end+0xfc0057f8>
 4005b14:	01c00044 	movi	r7,1
 4005b18:	003f9006 	br	400595c <__alt_data_end+0xfc00595c>
 4005b1c:	3807883a 	mov	r3,r7
 4005b20:	3021883a 	mov	r16,r6
 4005b24:	1023883a 	mov	r17,r2
 4005b28:	003f3306 	br	40057f8 <__alt_data_end+0xfc0057f8>
 4005b2c:	8000161e 	bne	r16,zero,4005b88 <__subsf3+0x3f4>
 4005b30:	18002d26 	beq	r3,zero,4005be8 <__subsf3+0x454>
 4005b34:	0108303a 	nor	r4,zero,r4
 4005b38:	20000a26 	beq	r4,zero,4005b64 <__subsf3+0x3d0>
 4005b3c:	01403fc4 	movi	r5,255
 4005b40:	31402926 	beq	r6,r5,4005be8 <__subsf3+0x454>
 4005b44:	014006c4 	movi	r5,27
 4005b48:	29004716 	blt	r5,r4,4005c68 <__subsf3+0x4d4>
 4005b4c:	01400804 	movi	r5,32
 4005b50:	290bc83a 	sub	r5,r5,r4
 4005b54:	194a983a 	sll	r5,r3,r5
 4005b58:	1908d83a 	srl	r4,r3,r4
 4005b5c:	2806c03a 	cmpne	r3,r5,zero
 4005b60:	20c6b03a 	or	r3,r4,r3
 4005b64:	19c7883a 	add	r3,r3,r7
 4005b68:	3021883a 	mov	r16,r6
 4005b6c:	003f7c06 	br	4005960 <__alt_data_end+0xfc005960>
 4005b70:	1800111e 	bne	r3,zero,4005bb8 <__subsf3+0x424>
 4005b74:	38003326 	beq	r7,zero,4005c44 <__subsf3+0x4b0>
 4005b78:	3807883a 	mov	r3,r7
 4005b7c:	1023883a 	mov	r17,r2
 4005b80:	04003fc4 	movi	r16,255
 4005b84:	003f1c06 	br	40057f8 <__alt_data_end+0xfc0057f8>
 4005b88:	01403fc4 	movi	r5,255
 4005b8c:	31401626 	beq	r6,r5,4005be8 <__subsf3+0x454>
 4005b90:	0109c83a 	sub	r4,zero,r4
 4005b94:	18c10034 	orhi	r3,r3,1024
 4005b98:	003fea06 	br	4005b44 <__alt_data_end+0xfc005b44>
 4005b9c:	383f1626 	beq	r7,zero,40057f8 <__alt_data_end+0xfc0057f8>
 4005ba0:	19c9c83a 	sub	r4,r3,r7
 4005ba4:	2141002c 	andhi	r5,r4,1024
 4005ba8:	283f5026 	beq	r5,zero,40058ec <__alt_data_end+0xfc0058ec>
 4005bac:	38c7c83a 	sub	r3,r7,r3
 4005bb0:	1023883a 	mov	r17,r2
 4005bb4:	003f1006 	br	40057f8 <__alt_data_end+0xfc0057f8>
 4005bb8:	38001b26 	beq	r7,zero,4005c28 <__subsf3+0x494>
 4005bbc:	1806d0fa 	srli	r3,r3,3
 4005bc0:	1900102c 	andhi	r4,r3,64
 4005bc4:	20000526 	beq	r4,zero,4005bdc <__subsf3+0x448>
 4005bc8:	380ed0fa 	srli	r7,r7,3
 4005bcc:	3900102c 	andhi	r4,r7,64
 4005bd0:	2000021e 	bne	r4,zero,4005bdc <__subsf3+0x448>
 4005bd4:	3807883a 	mov	r3,r7
 4005bd8:	1023883a 	mov	r17,r2
 4005bdc:	180690fa 	slli	r3,r3,3
 4005be0:	04003fc4 	movi	r16,255
 4005be4:	003f0406 	br	40057f8 <__alt_data_end+0xfc0057f8>
 4005be8:	3807883a 	mov	r3,r7
 4005bec:	3021883a 	mov	r16,r6
 4005bf0:	003f0106 	br	40057f8 <__alt_data_end+0xfc0057f8>
 4005bf4:	18001726 	beq	r3,zero,4005c54 <__subsf3+0x4c0>
 4005bf8:	38000b26 	beq	r7,zero,4005c28 <__subsf3+0x494>
 4005bfc:	1806d0fa 	srli	r3,r3,3
 4005c00:	1900102c 	andhi	r4,r3,64
 4005c04:	20000426 	beq	r4,zero,4005c18 <__subsf3+0x484>
 4005c08:	380ed0fa 	srli	r7,r7,3
 4005c0c:	3900102c 	andhi	r4,r7,64
 4005c10:	2000011e 	bne	r4,zero,4005c18 <__subsf3+0x484>
 4005c14:	3807883a 	mov	r3,r7
 4005c18:	180690fa 	slli	r3,r3,3
 4005c1c:	1023883a 	mov	r17,r2
 4005c20:	04003fc4 	movi	r16,255
 4005c24:	003ef406 	br	40057f8 <__alt_data_end+0xfc0057f8>
 4005c28:	04003fc4 	movi	r16,255
 4005c2c:	003ef206 	br	40057f8 <__alt_data_end+0xfc0057f8>
 4005c30:	00c00044 	movi	r3,1
 4005c34:	003f9606 	br	4005a90 <__alt_data_end+0xfc005a90>
 4005c38:	000b883a 	mov	r5,zero
 4005c3c:	0005883a 	mov	r2,zero
 4005c40:	003f3506 	br	4005918 <__alt_data_end+0xfc005918>
 4005c44:	01402034 	movhi	r5,128
 4005c48:	297fffc4 	addi	r5,r5,-1
 4005c4c:	0005883a 	mov	r2,zero
 4005c50:	003f2f06 	br	4005910 <__alt_data_end+0xfc005910>
 4005c54:	3807883a 	mov	r3,r7
 4005c58:	04003fc4 	movi	r16,255
 4005c5c:	003ee606 	br	40057f8 <__alt_data_end+0xfc0057f8>
 4005c60:	3807883a 	mov	r3,r7
 4005c64:	003ee406 	br	40057f8 <__alt_data_end+0xfc0057f8>
 4005c68:	00c00044 	movi	r3,1
 4005c6c:	003fbd06 	br	4005b64 <__alt_data_end+0xfc005b64>
 4005c70:	0005883a 	mov	r2,zero
 4005c74:	003f2806 	br	4005918 <__alt_data_end+0xfc005918>

04005c78 <__fixsfsi>:
 4005c78:	200ad5fa 	srli	r5,r4,23
 4005c7c:	00c02034 	movhi	r3,128
 4005c80:	18ffffc4 	addi	r3,r3,-1
 4005c84:	29403fcc 	andi	r5,r5,255
 4005c88:	00801f84 	movi	r2,126
 4005c8c:	1906703a 	and	r3,r3,r4
 4005c90:	2008d7fa 	srli	r4,r4,31
 4005c94:	11400e0e 	bge	r2,r5,4005cd0 <__fixsfsi+0x58>
 4005c98:	00802744 	movi	r2,157
 4005c9c:	11400816 	blt	r2,r5,4005cc0 <__fixsfsi+0x48>
 4005ca0:	00802544 	movi	r2,149
 4005ca4:	18c02034 	orhi	r3,r3,128
 4005ca8:	11400b0e 	bge	r2,r5,4005cd8 <__fixsfsi+0x60>
 4005cac:	28bfda84 	addi	r2,r5,-150
 4005cb0:	1884983a 	sll	r2,r3,r2
 4005cb4:	20000726 	beq	r4,zero,4005cd4 <__fixsfsi+0x5c>
 4005cb8:	0085c83a 	sub	r2,zero,r2
 4005cbc:	f800283a 	ret
 4005cc0:	00a00034 	movhi	r2,32768
 4005cc4:	10bfffc4 	addi	r2,r2,-1
 4005cc8:	2085883a 	add	r2,r4,r2
 4005ccc:	f800283a 	ret
 4005cd0:	0005883a 	mov	r2,zero
 4005cd4:	f800283a 	ret
 4005cd8:	00802584 	movi	r2,150
 4005cdc:	1145c83a 	sub	r2,r2,r5
 4005ce0:	1884d83a 	srl	r2,r3,r2
 4005ce4:	003ff306 	br	4005cb4 <__alt_data_end+0xfc005cb4>

04005ce8 <__floatsisf>:
 4005ce8:	defffd04 	addi	sp,sp,-12
 4005cec:	dfc00215 	stw	ra,8(sp)
 4005cf0:	dc400115 	stw	r17,4(sp)
 4005cf4:	dc000015 	stw	r16,0(sp)
 4005cf8:	20003526 	beq	r4,zero,4005dd0 <__floatsisf+0xe8>
 4005cfc:	2021883a 	mov	r16,r4
 4005d00:	2022d7fa 	srli	r17,r4,31
 4005d04:	20003616 	blt	r4,zero,4005de0 <__floatsisf+0xf8>
 4005d08:	8009883a 	mov	r4,r16
 4005d0c:	400887c0 	call	400887c <__clzsi2>
 4005d10:	00c02784 	movi	r3,158
 4005d14:	1887c83a 	sub	r3,r3,r2
 4005d18:	01002584 	movi	r4,150
 4005d1c:	20c01416 	blt	r4,r3,4005d70 <__floatsisf+0x88>
 4005d20:	20c9c83a 	sub	r4,r4,r3
 4005d24:	8120983a 	sll	r16,r16,r4
 4005d28:	00802034 	movhi	r2,128
 4005d2c:	10bfffc4 	addi	r2,r2,-1
 4005d30:	8809883a 	mov	r4,r17
 4005d34:	80a0703a 	and	r16,r16,r2
 4005d38:	18803fcc 	andi	r2,r3,255
 4005d3c:	100695fa 	slli	r3,r2,23
 4005d40:	20803fcc 	andi	r2,r4,255
 4005d44:	100897fa 	slli	r4,r2,31
 4005d48:	00802034 	movhi	r2,128
 4005d4c:	10bfffc4 	addi	r2,r2,-1
 4005d50:	8084703a 	and	r2,r16,r2
 4005d54:	10c4b03a 	or	r2,r2,r3
 4005d58:	1104b03a 	or	r2,r2,r4
 4005d5c:	dfc00217 	ldw	ra,8(sp)
 4005d60:	dc400117 	ldw	r17,4(sp)
 4005d64:	dc000017 	ldw	r16,0(sp)
 4005d68:	dec00304 	addi	sp,sp,12
 4005d6c:	f800283a 	ret
 4005d70:	01002644 	movi	r4,153
 4005d74:	20c01c16 	blt	r4,r3,4005de8 <__floatsisf+0x100>
 4005d78:	20c9c83a 	sub	r4,r4,r3
 4005d7c:	8120983a 	sll	r16,r16,r4
 4005d80:	013f0034 	movhi	r4,64512
 4005d84:	213fffc4 	addi	r4,r4,-1
 4005d88:	814001cc 	andi	r5,r16,7
 4005d8c:	8108703a 	and	r4,r16,r4
 4005d90:	28000426 	beq	r5,zero,4005da4 <__floatsisf+0xbc>
 4005d94:	840003cc 	andi	r16,r16,15
 4005d98:	01400104 	movi	r5,4
 4005d9c:	81400126 	beq	r16,r5,4005da4 <__floatsisf+0xbc>
 4005da0:	2149883a 	add	r4,r4,r5
 4005da4:	2141002c 	andhi	r5,r4,1024
 4005da8:	28000526 	beq	r5,zero,4005dc0 <__floatsisf+0xd8>
 4005dac:	00c027c4 	movi	r3,159
 4005db0:	1887c83a 	sub	r3,r3,r2
 4005db4:	00bf0034 	movhi	r2,64512
 4005db8:	10bfffc4 	addi	r2,r2,-1
 4005dbc:	2088703a 	and	r4,r4,r2
 4005dc0:	202091ba 	slli	r16,r4,6
 4005dc4:	8809883a 	mov	r4,r17
 4005dc8:	8020d27a 	srli	r16,r16,9
 4005dcc:	003fda06 	br	4005d38 <__alt_data_end+0xfc005d38>
 4005dd0:	0009883a 	mov	r4,zero
 4005dd4:	0007883a 	mov	r3,zero
 4005dd8:	0021883a 	mov	r16,zero
 4005ddc:	003fd606 	br	4005d38 <__alt_data_end+0xfc005d38>
 4005de0:	0121c83a 	sub	r16,zero,r4
 4005de4:	003fc806 	br	4005d08 <__alt_data_end+0xfc005d08>
 4005de8:	01002e44 	movi	r4,185
 4005dec:	20c9c83a 	sub	r4,r4,r3
 4005df0:	01400144 	movi	r5,5
 4005df4:	8108983a 	sll	r4,r16,r4
 4005df8:	288bc83a 	sub	r5,r5,r2
 4005dfc:	8160d83a 	srl	r16,r16,r5
 4005e00:	2008c03a 	cmpne	r4,r4,zero
 4005e04:	8120b03a 	or	r16,r16,r4
 4005e08:	003fdd06 	br	4005d80 <__alt_data_end+0xfc005d80>

04005e0c <__adddf3>:
 4005e0c:	02c00434 	movhi	r11,16
 4005e10:	5affffc4 	addi	r11,r11,-1
 4005e14:	2806d7fa 	srli	r3,r5,31
 4005e18:	2ad4703a 	and	r10,r5,r11
 4005e1c:	3ad2703a 	and	r9,r7,r11
 4005e20:	3804d53a 	srli	r2,r7,20
 4005e24:	3018d77a 	srli	r12,r6,29
 4005e28:	280ad53a 	srli	r5,r5,20
 4005e2c:	501490fa 	slli	r10,r10,3
 4005e30:	2010d77a 	srli	r8,r4,29
 4005e34:	481290fa 	slli	r9,r9,3
 4005e38:	380ed7fa 	srli	r7,r7,31
 4005e3c:	defffb04 	addi	sp,sp,-20
 4005e40:	dc800215 	stw	r18,8(sp)
 4005e44:	dc400115 	stw	r17,4(sp)
 4005e48:	dc000015 	stw	r16,0(sp)
 4005e4c:	dfc00415 	stw	ra,16(sp)
 4005e50:	dcc00315 	stw	r19,12(sp)
 4005e54:	1c803fcc 	andi	r18,r3,255
 4005e58:	2c01ffcc 	andi	r16,r5,2047
 4005e5c:	5210b03a 	or	r8,r10,r8
 4005e60:	202290fa 	slli	r17,r4,3
 4005e64:	1081ffcc 	andi	r2,r2,2047
 4005e68:	4b12b03a 	or	r9,r9,r12
 4005e6c:	300c90fa 	slli	r6,r6,3
 4005e70:	91c07526 	beq	r18,r7,4006048 <__adddf3+0x23c>
 4005e74:	8087c83a 	sub	r3,r16,r2
 4005e78:	00c0ab0e 	bge	zero,r3,4006128 <__adddf3+0x31c>
 4005e7c:	10002a1e 	bne	r2,zero,4005f28 <__adddf3+0x11c>
 4005e80:	4984b03a 	or	r2,r9,r6
 4005e84:	1000961e 	bne	r2,zero,40060e0 <__adddf3+0x2d4>
 4005e88:	888001cc 	andi	r2,r17,7
 4005e8c:	10000726 	beq	r2,zero,4005eac <__adddf3+0xa0>
 4005e90:	888003cc 	andi	r2,r17,15
 4005e94:	00c00104 	movi	r3,4
 4005e98:	10c00426 	beq	r2,r3,4005eac <__adddf3+0xa0>
 4005e9c:	88c7883a 	add	r3,r17,r3
 4005ea0:	1c63803a 	cmpltu	r17,r3,r17
 4005ea4:	4451883a 	add	r8,r8,r17
 4005ea8:	1823883a 	mov	r17,r3
 4005eac:	4080202c 	andhi	r2,r8,128
 4005eb0:	10005926 	beq	r2,zero,4006018 <__adddf3+0x20c>
 4005eb4:	84000044 	addi	r16,r16,1
 4005eb8:	0081ffc4 	movi	r2,2047
 4005ebc:	8080ba26 	beq	r16,r2,40061a8 <__adddf3+0x39c>
 4005ec0:	00bfe034 	movhi	r2,65408
 4005ec4:	10bfffc4 	addi	r2,r2,-1
 4005ec8:	4090703a 	and	r8,r8,r2
 4005ecc:	4004977a 	slli	r2,r8,29
 4005ed0:	4010927a 	slli	r8,r8,9
 4005ed4:	8822d0fa 	srli	r17,r17,3
 4005ed8:	8401ffcc 	andi	r16,r16,2047
 4005edc:	4010d33a 	srli	r8,r8,12
 4005ee0:	9007883a 	mov	r3,r18
 4005ee4:	1444b03a 	or	r2,r2,r17
 4005ee8:	8401ffcc 	andi	r16,r16,2047
 4005eec:	8020953a 	slli	r16,r16,20
 4005ef0:	18c03fcc 	andi	r3,r3,255
 4005ef4:	01000434 	movhi	r4,16
 4005ef8:	213fffc4 	addi	r4,r4,-1
 4005efc:	180697fa 	slli	r3,r3,31
 4005f00:	4110703a 	and	r8,r8,r4
 4005f04:	4410b03a 	or	r8,r8,r16
 4005f08:	40c6b03a 	or	r3,r8,r3
 4005f0c:	dfc00417 	ldw	ra,16(sp)
 4005f10:	dcc00317 	ldw	r19,12(sp)
 4005f14:	dc800217 	ldw	r18,8(sp)
 4005f18:	dc400117 	ldw	r17,4(sp)
 4005f1c:	dc000017 	ldw	r16,0(sp)
 4005f20:	dec00504 	addi	sp,sp,20
 4005f24:	f800283a 	ret
 4005f28:	0081ffc4 	movi	r2,2047
 4005f2c:	80bfd626 	beq	r16,r2,4005e88 <__alt_data_end+0xfc005e88>
 4005f30:	4a402034 	orhi	r9,r9,128
 4005f34:	00800e04 	movi	r2,56
 4005f38:	10c09f16 	blt	r2,r3,40061b8 <__adddf3+0x3ac>
 4005f3c:	008007c4 	movi	r2,31
 4005f40:	10c0c216 	blt	r2,r3,400624c <__adddf3+0x440>
 4005f44:	00800804 	movi	r2,32
 4005f48:	10c5c83a 	sub	r2,r2,r3
 4005f4c:	488a983a 	sll	r5,r9,r2
 4005f50:	30c8d83a 	srl	r4,r6,r3
 4005f54:	3084983a 	sll	r2,r6,r2
 4005f58:	48c6d83a 	srl	r3,r9,r3
 4005f5c:	290cb03a 	or	r6,r5,r4
 4005f60:	1004c03a 	cmpne	r2,r2,zero
 4005f64:	308cb03a 	or	r6,r6,r2
 4005f68:	898dc83a 	sub	r6,r17,r6
 4005f6c:	89a3803a 	cmpltu	r17,r17,r6
 4005f70:	40d1c83a 	sub	r8,r8,r3
 4005f74:	4451c83a 	sub	r8,r8,r17
 4005f78:	3023883a 	mov	r17,r6
 4005f7c:	4080202c 	andhi	r2,r8,128
 4005f80:	10002326 	beq	r2,zero,4006010 <__adddf3+0x204>
 4005f84:	04c02034 	movhi	r19,128
 4005f88:	9cffffc4 	addi	r19,r19,-1
 4005f8c:	44e6703a 	and	r19,r8,r19
 4005f90:	98007626 	beq	r19,zero,400616c <__adddf3+0x360>
 4005f94:	9809883a 	mov	r4,r19
 4005f98:	400887c0 	call	400887c <__clzsi2>
 4005f9c:	10fffe04 	addi	r3,r2,-8
 4005fa0:	010007c4 	movi	r4,31
 4005fa4:	20c07716 	blt	r4,r3,4006184 <__adddf3+0x378>
 4005fa8:	00800804 	movi	r2,32
 4005fac:	10c5c83a 	sub	r2,r2,r3
 4005fb0:	8884d83a 	srl	r2,r17,r2
 4005fb4:	98d0983a 	sll	r8,r19,r3
 4005fb8:	88e2983a 	sll	r17,r17,r3
 4005fbc:	1204b03a 	or	r2,r2,r8
 4005fc0:	1c007416 	blt	r3,r16,4006194 <__adddf3+0x388>
 4005fc4:	1c21c83a 	sub	r16,r3,r16
 4005fc8:	82000044 	addi	r8,r16,1
 4005fcc:	00c007c4 	movi	r3,31
 4005fd0:	1a009116 	blt	r3,r8,4006218 <__adddf3+0x40c>
 4005fd4:	00c00804 	movi	r3,32
 4005fd8:	1a07c83a 	sub	r3,r3,r8
 4005fdc:	8a08d83a 	srl	r4,r17,r8
 4005fe0:	88e2983a 	sll	r17,r17,r3
 4005fe4:	10c6983a 	sll	r3,r2,r3
 4005fe8:	1210d83a 	srl	r8,r2,r8
 4005fec:	8804c03a 	cmpne	r2,r17,zero
 4005ff0:	1906b03a 	or	r3,r3,r4
 4005ff4:	18a2b03a 	or	r17,r3,r2
 4005ff8:	0021883a 	mov	r16,zero
 4005ffc:	003fa206 	br	4005e88 <__alt_data_end+0xfc005e88>
 4006000:	1890b03a 	or	r8,r3,r2
 4006004:	40017d26 	beq	r8,zero,40065fc <__adddf3+0x7f0>
 4006008:	1011883a 	mov	r8,r2
 400600c:	1823883a 	mov	r17,r3
 4006010:	888001cc 	andi	r2,r17,7
 4006014:	103f9e1e 	bne	r2,zero,4005e90 <__alt_data_end+0xfc005e90>
 4006018:	4004977a 	slli	r2,r8,29
 400601c:	8822d0fa 	srli	r17,r17,3
 4006020:	4010d0fa 	srli	r8,r8,3
 4006024:	9007883a 	mov	r3,r18
 4006028:	1444b03a 	or	r2,r2,r17
 400602c:	0101ffc4 	movi	r4,2047
 4006030:	81002426 	beq	r16,r4,40060c4 <__adddf3+0x2b8>
 4006034:	8120703a 	and	r16,r16,r4
 4006038:	01000434 	movhi	r4,16
 400603c:	213fffc4 	addi	r4,r4,-1
 4006040:	4110703a 	and	r8,r8,r4
 4006044:	003fa806 	br	4005ee8 <__alt_data_end+0xfc005ee8>
 4006048:	8089c83a 	sub	r4,r16,r2
 400604c:	01005e0e 	bge	zero,r4,40061c8 <__adddf3+0x3bc>
 4006050:	10002b26 	beq	r2,zero,4006100 <__adddf3+0x2f4>
 4006054:	0081ffc4 	movi	r2,2047
 4006058:	80bf8b26 	beq	r16,r2,4005e88 <__alt_data_end+0xfc005e88>
 400605c:	4a402034 	orhi	r9,r9,128
 4006060:	00800e04 	movi	r2,56
 4006064:	1100a40e 	bge	r2,r4,40062f8 <__adddf3+0x4ec>
 4006068:	498cb03a 	or	r6,r9,r6
 400606c:	300ac03a 	cmpne	r5,r6,zero
 4006070:	0013883a 	mov	r9,zero
 4006074:	2c4b883a 	add	r5,r5,r17
 4006078:	2c63803a 	cmpltu	r17,r5,r17
 400607c:	4a11883a 	add	r8,r9,r8
 4006080:	8a11883a 	add	r8,r17,r8
 4006084:	2823883a 	mov	r17,r5
 4006088:	4080202c 	andhi	r2,r8,128
 400608c:	103fe026 	beq	r2,zero,4006010 <__alt_data_end+0xfc006010>
 4006090:	84000044 	addi	r16,r16,1
 4006094:	0081ffc4 	movi	r2,2047
 4006098:	8080d226 	beq	r16,r2,40063e4 <__adddf3+0x5d8>
 400609c:	00bfe034 	movhi	r2,65408
 40060a0:	10bfffc4 	addi	r2,r2,-1
 40060a4:	4090703a 	and	r8,r8,r2
 40060a8:	880ad07a 	srli	r5,r17,1
 40060ac:	400897fa 	slli	r4,r8,31
 40060b0:	88c0004c 	andi	r3,r17,1
 40060b4:	28e2b03a 	or	r17,r5,r3
 40060b8:	4010d07a 	srli	r8,r8,1
 40060bc:	2462b03a 	or	r17,r4,r17
 40060c0:	003f7106 	br	4005e88 <__alt_data_end+0xfc005e88>
 40060c4:	4088b03a 	or	r4,r8,r2
 40060c8:	20014526 	beq	r4,zero,40065e0 <__adddf3+0x7d4>
 40060cc:	01000434 	movhi	r4,16
 40060d0:	42000234 	orhi	r8,r8,8
 40060d4:	213fffc4 	addi	r4,r4,-1
 40060d8:	4110703a 	and	r8,r8,r4
 40060dc:	003f8206 	br	4005ee8 <__alt_data_end+0xfc005ee8>
 40060e0:	18ffffc4 	addi	r3,r3,-1
 40060e4:	1800491e 	bne	r3,zero,400620c <__adddf3+0x400>
 40060e8:	898bc83a 	sub	r5,r17,r6
 40060ec:	8963803a 	cmpltu	r17,r17,r5
 40060f0:	4251c83a 	sub	r8,r8,r9
 40060f4:	4451c83a 	sub	r8,r8,r17
 40060f8:	2823883a 	mov	r17,r5
 40060fc:	003f9f06 	br	4005f7c <__alt_data_end+0xfc005f7c>
 4006100:	4984b03a 	or	r2,r9,r6
 4006104:	103f6026 	beq	r2,zero,4005e88 <__alt_data_end+0xfc005e88>
 4006108:	213fffc4 	addi	r4,r4,-1
 400610c:	2000931e 	bne	r4,zero,400635c <__adddf3+0x550>
 4006110:	898d883a 	add	r6,r17,r6
 4006114:	3463803a 	cmpltu	r17,r6,r17
 4006118:	4251883a 	add	r8,r8,r9
 400611c:	8a11883a 	add	r8,r17,r8
 4006120:	3023883a 	mov	r17,r6
 4006124:	003fd806 	br	4006088 <__alt_data_end+0xfc006088>
 4006128:	1800541e 	bne	r3,zero,400627c <__adddf3+0x470>
 400612c:	80800044 	addi	r2,r16,1
 4006130:	1081ffcc 	andi	r2,r2,2047
 4006134:	00c00044 	movi	r3,1
 4006138:	1880a00e 	bge	r3,r2,40063bc <__adddf3+0x5b0>
 400613c:	8989c83a 	sub	r4,r17,r6
 4006140:	8905803a 	cmpltu	r2,r17,r4
 4006144:	4267c83a 	sub	r19,r8,r9
 4006148:	98a7c83a 	sub	r19,r19,r2
 400614c:	9880202c 	andhi	r2,r19,128
 4006150:	10006326 	beq	r2,zero,40062e0 <__adddf3+0x4d4>
 4006154:	3463c83a 	sub	r17,r6,r17
 4006158:	4a07c83a 	sub	r3,r9,r8
 400615c:	344d803a 	cmpltu	r6,r6,r17
 4006160:	19a7c83a 	sub	r19,r3,r6
 4006164:	3825883a 	mov	r18,r7
 4006168:	983f8a1e 	bne	r19,zero,4005f94 <__alt_data_end+0xfc005f94>
 400616c:	8809883a 	mov	r4,r17
 4006170:	400887c0 	call	400887c <__clzsi2>
 4006174:	10800804 	addi	r2,r2,32
 4006178:	10fffe04 	addi	r3,r2,-8
 400617c:	010007c4 	movi	r4,31
 4006180:	20ff890e 	bge	r4,r3,4005fa8 <__alt_data_end+0xfc005fa8>
 4006184:	10bff604 	addi	r2,r2,-40
 4006188:	8884983a 	sll	r2,r17,r2
 400618c:	0023883a 	mov	r17,zero
 4006190:	1c3f8c0e 	bge	r3,r16,4005fc4 <__alt_data_end+0xfc005fc4>
 4006194:	023fe034 	movhi	r8,65408
 4006198:	423fffc4 	addi	r8,r8,-1
 400619c:	80e1c83a 	sub	r16,r16,r3
 40061a0:	1210703a 	and	r8,r2,r8
 40061a4:	003f3806 	br	4005e88 <__alt_data_end+0xfc005e88>
 40061a8:	9007883a 	mov	r3,r18
 40061ac:	0011883a 	mov	r8,zero
 40061b0:	0005883a 	mov	r2,zero
 40061b4:	003f4c06 	br	4005ee8 <__alt_data_end+0xfc005ee8>
 40061b8:	498cb03a 	or	r6,r9,r6
 40061bc:	300cc03a 	cmpne	r6,r6,zero
 40061c0:	0007883a 	mov	r3,zero
 40061c4:	003f6806 	br	4005f68 <__alt_data_end+0xfc005f68>
 40061c8:	20009c1e 	bne	r4,zero,400643c <__adddf3+0x630>
 40061cc:	80800044 	addi	r2,r16,1
 40061d0:	1141ffcc 	andi	r5,r2,2047
 40061d4:	01000044 	movi	r4,1
 40061d8:	2140670e 	bge	r4,r5,4006378 <__adddf3+0x56c>
 40061dc:	0101ffc4 	movi	r4,2047
 40061e0:	11007f26 	beq	r2,r4,40063e0 <__adddf3+0x5d4>
 40061e4:	898d883a 	add	r6,r17,r6
 40061e8:	4247883a 	add	r3,r8,r9
 40061ec:	3451803a 	cmpltu	r8,r6,r17
 40061f0:	40d1883a 	add	r8,r8,r3
 40061f4:	402297fa 	slli	r17,r8,31
 40061f8:	300cd07a 	srli	r6,r6,1
 40061fc:	4010d07a 	srli	r8,r8,1
 4006200:	1021883a 	mov	r16,r2
 4006204:	89a2b03a 	or	r17,r17,r6
 4006208:	003f1f06 	br	4005e88 <__alt_data_end+0xfc005e88>
 400620c:	0081ffc4 	movi	r2,2047
 4006210:	80bf481e 	bne	r16,r2,4005f34 <__alt_data_end+0xfc005f34>
 4006214:	003f1c06 	br	4005e88 <__alt_data_end+0xfc005e88>
 4006218:	843ff844 	addi	r16,r16,-31
 400621c:	01000804 	movi	r4,32
 4006220:	1406d83a 	srl	r3,r2,r16
 4006224:	41005026 	beq	r8,r4,4006368 <__adddf3+0x55c>
 4006228:	01001004 	movi	r4,64
 400622c:	2211c83a 	sub	r8,r4,r8
 4006230:	1204983a 	sll	r2,r2,r8
 4006234:	88a2b03a 	or	r17,r17,r2
 4006238:	8822c03a 	cmpne	r17,r17,zero
 400623c:	1c62b03a 	or	r17,r3,r17
 4006240:	0011883a 	mov	r8,zero
 4006244:	0021883a 	mov	r16,zero
 4006248:	003f7106 	br	4006010 <__alt_data_end+0xfc006010>
 400624c:	193ff804 	addi	r4,r3,-32
 4006250:	00800804 	movi	r2,32
 4006254:	4908d83a 	srl	r4,r9,r4
 4006258:	18804526 	beq	r3,r2,4006370 <__adddf3+0x564>
 400625c:	00801004 	movi	r2,64
 4006260:	10c5c83a 	sub	r2,r2,r3
 4006264:	4886983a 	sll	r3,r9,r2
 4006268:	198cb03a 	or	r6,r3,r6
 400626c:	300cc03a 	cmpne	r6,r6,zero
 4006270:	218cb03a 	or	r6,r4,r6
 4006274:	0007883a 	mov	r3,zero
 4006278:	003f3b06 	br	4005f68 <__alt_data_end+0xfc005f68>
 400627c:	80002a26 	beq	r16,zero,4006328 <__adddf3+0x51c>
 4006280:	0101ffc4 	movi	r4,2047
 4006284:	11006826 	beq	r2,r4,4006428 <__adddf3+0x61c>
 4006288:	00c7c83a 	sub	r3,zero,r3
 400628c:	42002034 	orhi	r8,r8,128
 4006290:	01000e04 	movi	r4,56
 4006294:	20c07c16 	blt	r4,r3,4006488 <__adddf3+0x67c>
 4006298:	010007c4 	movi	r4,31
 400629c:	20c0da16 	blt	r4,r3,4006608 <__adddf3+0x7fc>
 40062a0:	01000804 	movi	r4,32
 40062a4:	20c9c83a 	sub	r4,r4,r3
 40062a8:	4114983a 	sll	r10,r8,r4
 40062ac:	88cad83a 	srl	r5,r17,r3
 40062b0:	8908983a 	sll	r4,r17,r4
 40062b4:	40c6d83a 	srl	r3,r8,r3
 40062b8:	5162b03a 	or	r17,r10,r5
 40062bc:	2008c03a 	cmpne	r4,r4,zero
 40062c0:	8922b03a 	or	r17,r17,r4
 40062c4:	3463c83a 	sub	r17,r6,r17
 40062c8:	48c7c83a 	sub	r3,r9,r3
 40062cc:	344d803a 	cmpltu	r6,r6,r17
 40062d0:	1991c83a 	sub	r8,r3,r6
 40062d4:	1021883a 	mov	r16,r2
 40062d8:	3825883a 	mov	r18,r7
 40062dc:	003f2706 	br	4005f7c <__alt_data_end+0xfc005f7c>
 40062e0:	24d0b03a 	or	r8,r4,r19
 40062e4:	40001b1e 	bne	r8,zero,4006354 <__adddf3+0x548>
 40062e8:	0005883a 	mov	r2,zero
 40062ec:	0007883a 	mov	r3,zero
 40062f0:	0021883a 	mov	r16,zero
 40062f4:	003f4d06 	br	400602c <__alt_data_end+0xfc00602c>
 40062f8:	008007c4 	movi	r2,31
 40062fc:	11003c16 	blt	r2,r4,40063f0 <__adddf3+0x5e4>
 4006300:	00800804 	movi	r2,32
 4006304:	1105c83a 	sub	r2,r2,r4
 4006308:	488e983a 	sll	r7,r9,r2
 400630c:	310ad83a 	srl	r5,r6,r4
 4006310:	3084983a 	sll	r2,r6,r2
 4006314:	4912d83a 	srl	r9,r9,r4
 4006318:	394ab03a 	or	r5,r7,r5
 400631c:	1004c03a 	cmpne	r2,r2,zero
 4006320:	288ab03a 	or	r5,r5,r2
 4006324:	003f5306 	br	4006074 <__alt_data_end+0xfc006074>
 4006328:	4448b03a 	or	r4,r8,r17
 400632c:	20003e26 	beq	r4,zero,4006428 <__adddf3+0x61c>
 4006330:	00c6303a 	nor	r3,zero,r3
 4006334:	18003a1e 	bne	r3,zero,4006420 <__adddf3+0x614>
 4006338:	3463c83a 	sub	r17,r6,r17
 400633c:	4a07c83a 	sub	r3,r9,r8
 4006340:	344d803a 	cmpltu	r6,r6,r17
 4006344:	1991c83a 	sub	r8,r3,r6
 4006348:	1021883a 	mov	r16,r2
 400634c:	3825883a 	mov	r18,r7
 4006350:	003f0a06 	br	4005f7c <__alt_data_end+0xfc005f7c>
 4006354:	2023883a 	mov	r17,r4
 4006358:	003f0d06 	br	4005f90 <__alt_data_end+0xfc005f90>
 400635c:	0081ffc4 	movi	r2,2047
 4006360:	80bf3f1e 	bne	r16,r2,4006060 <__alt_data_end+0xfc006060>
 4006364:	003ec806 	br	4005e88 <__alt_data_end+0xfc005e88>
 4006368:	0005883a 	mov	r2,zero
 400636c:	003fb106 	br	4006234 <__alt_data_end+0xfc006234>
 4006370:	0007883a 	mov	r3,zero
 4006374:	003fbc06 	br	4006268 <__alt_data_end+0xfc006268>
 4006378:	4444b03a 	or	r2,r8,r17
 400637c:	8000871e 	bne	r16,zero,400659c <__adddf3+0x790>
 4006380:	1000ba26 	beq	r2,zero,400666c <__adddf3+0x860>
 4006384:	4984b03a 	or	r2,r9,r6
 4006388:	103ebf26 	beq	r2,zero,4005e88 <__alt_data_end+0xfc005e88>
 400638c:	8985883a 	add	r2,r17,r6
 4006390:	4247883a 	add	r3,r8,r9
 4006394:	1451803a 	cmpltu	r8,r2,r17
 4006398:	40d1883a 	add	r8,r8,r3
 400639c:	40c0202c 	andhi	r3,r8,128
 40063a0:	1023883a 	mov	r17,r2
 40063a4:	183f1a26 	beq	r3,zero,4006010 <__alt_data_end+0xfc006010>
 40063a8:	00bfe034 	movhi	r2,65408
 40063ac:	10bfffc4 	addi	r2,r2,-1
 40063b0:	2021883a 	mov	r16,r4
 40063b4:	4090703a 	and	r8,r8,r2
 40063b8:	003eb306 	br	4005e88 <__alt_data_end+0xfc005e88>
 40063bc:	4444b03a 	or	r2,r8,r17
 40063c0:	8000291e 	bne	r16,zero,4006468 <__adddf3+0x65c>
 40063c4:	10004b1e 	bne	r2,zero,40064f4 <__adddf3+0x6e8>
 40063c8:	4990b03a 	or	r8,r9,r6
 40063cc:	40008b26 	beq	r8,zero,40065fc <__adddf3+0x7f0>
 40063d0:	4811883a 	mov	r8,r9
 40063d4:	3023883a 	mov	r17,r6
 40063d8:	3825883a 	mov	r18,r7
 40063dc:	003eaa06 	br	4005e88 <__alt_data_end+0xfc005e88>
 40063e0:	1021883a 	mov	r16,r2
 40063e4:	0011883a 	mov	r8,zero
 40063e8:	0005883a 	mov	r2,zero
 40063ec:	003f0f06 	br	400602c <__alt_data_end+0xfc00602c>
 40063f0:	217ff804 	addi	r5,r4,-32
 40063f4:	00800804 	movi	r2,32
 40063f8:	494ad83a 	srl	r5,r9,r5
 40063fc:	20807d26 	beq	r4,r2,40065f4 <__adddf3+0x7e8>
 4006400:	00801004 	movi	r2,64
 4006404:	1109c83a 	sub	r4,r2,r4
 4006408:	4912983a 	sll	r9,r9,r4
 400640c:	498cb03a 	or	r6,r9,r6
 4006410:	300cc03a 	cmpne	r6,r6,zero
 4006414:	298ab03a 	or	r5,r5,r6
 4006418:	0013883a 	mov	r9,zero
 400641c:	003f1506 	br	4006074 <__alt_data_end+0xfc006074>
 4006420:	0101ffc4 	movi	r4,2047
 4006424:	113f9a1e 	bne	r2,r4,4006290 <__alt_data_end+0xfc006290>
 4006428:	4811883a 	mov	r8,r9
 400642c:	3023883a 	mov	r17,r6
 4006430:	1021883a 	mov	r16,r2
 4006434:	3825883a 	mov	r18,r7
 4006438:	003e9306 	br	4005e88 <__alt_data_end+0xfc005e88>
 400643c:	8000161e 	bne	r16,zero,4006498 <__adddf3+0x68c>
 4006440:	444ab03a 	or	r5,r8,r17
 4006444:	28005126 	beq	r5,zero,400658c <__adddf3+0x780>
 4006448:	0108303a 	nor	r4,zero,r4
 400644c:	20004d1e 	bne	r4,zero,4006584 <__adddf3+0x778>
 4006450:	89a3883a 	add	r17,r17,r6
 4006454:	4253883a 	add	r9,r8,r9
 4006458:	898d803a 	cmpltu	r6,r17,r6
 400645c:	3251883a 	add	r8,r6,r9
 4006460:	1021883a 	mov	r16,r2
 4006464:	003f0806 	br	4006088 <__alt_data_end+0xfc006088>
 4006468:	1000301e 	bne	r2,zero,400652c <__adddf3+0x720>
 400646c:	4984b03a 	or	r2,r9,r6
 4006470:	10007126 	beq	r2,zero,4006638 <__adddf3+0x82c>
 4006474:	4811883a 	mov	r8,r9
 4006478:	3023883a 	mov	r17,r6
 400647c:	3825883a 	mov	r18,r7
 4006480:	0401ffc4 	movi	r16,2047
 4006484:	003e8006 	br	4005e88 <__alt_data_end+0xfc005e88>
 4006488:	4462b03a 	or	r17,r8,r17
 400648c:	8822c03a 	cmpne	r17,r17,zero
 4006490:	0007883a 	mov	r3,zero
 4006494:	003f8b06 	br	40062c4 <__alt_data_end+0xfc0062c4>
 4006498:	0141ffc4 	movi	r5,2047
 400649c:	11403b26 	beq	r2,r5,400658c <__adddf3+0x780>
 40064a0:	0109c83a 	sub	r4,zero,r4
 40064a4:	42002034 	orhi	r8,r8,128
 40064a8:	01400e04 	movi	r5,56
 40064ac:	29006716 	blt	r5,r4,400664c <__adddf3+0x840>
 40064b0:	014007c4 	movi	r5,31
 40064b4:	29007016 	blt	r5,r4,4006678 <__adddf3+0x86c>
 40064b8:	01400804 	movi	r5,32
 40064bc:	290bc83a 	sub	r5,r5,r4
 40064c0:	4154983a 	sll	r10,r8,r5
 40064c4:	890ed83a 	srl	r7,r17,r4
 40064c8:	894a983a 	sll	r5,r17,r5
 40064cc:	4108d83a 	srl	r4,r8,r4
 40064d0:	51e2b03a 	or	r17,r10,r7
 40064d4:	280ac03a 	cmpne	r5,r5,zero
 40064d8:	8962b03a 	or	r17,r17,r5
 40064dc:	89a3883a 	add	r17,r17,r6
 40064e0:	2253883a 	add	r9,r4,r9
 40064e4:	898d803a 	cmpltu	r6,r17,r6
 40064e8:	3251883a 	add	r8,r6,r9
 40064ec:	1021883a 	mov	r16,r2
 40064f0:	003ee506 	br	4006088 <__alt_data_end+0xfc006088>
 40064f4:	4984b03a 	or	r2,r9,r6
 40064f8:	103e6326 	beq	r2,zero,4005e88 <__alt_data_end+0xfc005e88>
 40064fc:	8987c83a 	sub	r3,r17,r6
 4006500:	88c9803a 	cmpltu	r4,r17,r3
 4006504:	4245c83a 	sub	r2,r8,r9
 4006508:	1105c83a 	sub	r2,r2,r4
 400650c:	1100202c 	andhi	r4,r2,128
 4006510:	203ebb26 	beq	r4,zero,4006000 <__alt_data_end+0xfc006000>
 4006514:	3463c83a 	sub	r17,r6,r17
 4006518:	4a07c83a 	sub	r3,r9,r8
 400651c:	344d803a 	cmpltu	r6,r6,r17
 4006520:	1991c83a 	sub	r8,r3,r6
 4006524:	3825883a 	mov	r18,r7
 4006528:	003e5706 	br	4005e88 <__alt_data_end+0xfc005e88>
 400652c:	4984b03a 	or	r2,r9,r6
 4006530:	10002e26 	beq	r2,zero,40065ec <__adddf3+0x7e0>
 4006534:	4004d0fa 	srli	r2,r8,3
 4006538:	8822d0fa 	srli	r17,r17,3
 400653c:	4010977a 	slli	r8,r8,29
 4006540:	10c0022c 	andhi	r3,r2,8
 4006544:	4462b03a 	or	r17,r8,r17
 4006548:	18000826 	beq	r3,zero,400656c <__adddf3+0x760>
 400654c:	4808d0fa 	srli	r4,r9,3
 4006550:	20c0022c 	andhi	r3,r4,8
 4006554:	1800051e 	bne	r3,zero,400656c <__adddf3+0x760>
 4006558:	300cd0fa 	srli	r6,r6,3
 400655c:	4806977a 	slli	r3,r9,29
 4006560:	2005883a 	mov	r2,r4
 4006564:	3825883a 	mov	r18,r7
 4006568:	19a2b03a 	or	r17,r3,r6
 400656c:	8810d77a 	srli	r8,r17,29
 4006570:	100490fa 	slli	r2,r2,3
 4006574:	882290fa 	slli	r17,r17,3
 4006578:	0401ffc4 	movi	r16,2047
 400657c:	4090b03a 	or	r8,r8,r2
 4006580:	003e4106 	br	4005e88 <__alt_data_end+0xfc005e88>
 4006584:	0141ffc4 	movi	r5,2047
 4006588:	117fc71e 	bne	r2,r5,40064a8 <__alt_data_end+0xfc0064a8>
 400658c:	4811883a 	mov	r8,r9
 4006590:	3023883a 	mov	r17,r6
 4006594:	1021883a 	mov	r16,r2
 4006598:	003e3b06 	br	4005e88 <__alt_data_end+0xfc005e88>
 400659c:	10002f26 	beq	r2,zero,400665c <__adddf3+0x850>
 40065a0:	4984b03a 	or	r2,r9,r6
 40065a4:	10001126 	beq	r2,zero,40065ec <__adddf3+0x7e0>
 40065a8:	4004d0fa 	srli	r2,r8,3
 40065ac:	8822d0fa 	srli	r17,r17,3
 40065b0:	4010977a 	slli	r8,r8,29
 40065b4:	10c0022c 	andhi	r3,r2,8
 40065b8:	4462b03a 	or	r17,r8,r17
 40065bc:	183feb26 	beq	r3,zero,400656c <__alt_data_end+0xfc00656c>
 40065c0:	4808d0fa 	srli	r4,r9,3
 40065c4:	20c0022c 	andhi	r3,r4,8
 40065c8:	183fe81e 	bne	r3,zero,400656c <__alt_data_end+0xfc00656c>
 40065cc:	300cd0fa 	srli	r6,r6,3
 40065d0:	4806977a 	slli	r3,r9,29
 40065d4:	2005883a 	mov	r2,r4
 40065d8:	19a2b03a 	or	r17,r3,r6
 40065dc:	003fe306 	br	400656c <__alt_data_end+0xfc00656c>
 40065e0:	0011883a 	mov	r8,zero
 40065e4:	0005883a 	mov	r2,zero
 40065e8:	003e3f06 	br	4005ee8 <__alt_data_end+0xfc005ee8>
 40065ec:	0401ffc4 	movi	r16,2047
 40065f0:	003e2506 	br	4005e88 <__alt_data_end+0xfc005e88>
 40065f4:	0013883a 	mov	r9,zero
 40065f8:	003f8406 	br	400640c <__alt_data_end+0xfc00640c>
 40065fc:	0005883a 	mov	r2,zero
 4006600:	0007883a 	mov	r3,zero
 4006604:	003e8906 	br	400602c <__alt_data_end+0xfc00602c>
 4006608:	197ff804 	addi	r5,r3,-32
 400660c:	01000804 	movi	r4,32
 4006610:	414ad83a 	srl	r5,r8,r5
 4006614:	19002426 	beq	r3,r4,40066a8 <__adddf3+0x89c>
 4006618:	01001004 	movi	r4,64
 400661c:	20c7c83a 	sub	r3,r4,r3
 4006620:	40c6983a 	sll	r3,r8,r3
 4006624:	1c46b03a 	or	r3,r3,r17
 4006628:	1806c03a 	cmpne	r3,r3,zero
 400662c:	28e2b03a 	or	r17,r5,r3
 4006630:	0007883a 	mov	r3,zero
 4006634:	003f2306 	br	40062c4 <__alt_data_end+0xfc0062c4>
 4006638:	0007883a 	mov	r3,zero
 400663c:	5811883a 	mov	r8,r11
 4006640:	00bfffc4 	movi	r2,-1
 4006644:	0401ffc4 	movi	r16,2047
 4006648:	003e7806 	br	400602c <__alt_data_end+0xfc00602c>
 400664c:	4462b03a 	or	r17,r8,r17
 4006650:	8822c03a 	cmpne	r17,r17,zero
 4006654:	0009883a 	mov	r4,zero
 4006658:	003fa006 	br	40064dc <__alt_data_end+0xfc0064dc>
 400665c:	4811883a 	mov	r8,r9
 4006660:	3023883a 	mov	r17,r6
 4006664:	0401ffc4 	movi	r16,2047
 4006668:	003e0706 	br	4005e88 <__alt_data_end+0xfc005e88>
 400666c:	4811883a 	mov	r8,r9
 4006670:	3023883a 	mov	r17,r6
 4006674:	003e0406 	br	4005e88 <__alt_data_end+0xfc005e88>
 4006678:	21fff804 	addi	r7,r4,-32
 400667c:	01400804 	movi	r5,32
 4006680:	41ced83a 	srl	r7,r8,r7
 4006684:	21400a26 	beq	r4,r5,40066b0 <__adddf3+0x8a4>
 4006688:	01401004 	movi	r5,64
 400668c:	2909c83a 	sub	r4,r5,r4
 4006690:	4108983a 	sll	r4,r8,r4
 4006694:	2448b03a 	or	r4,r4,r17
 4006698:	2008c03a 	cmpne	r4,r4,zero
 400669c:	3922b03a 	or	r17,r7,r4
 40066a0:	0009883a 	mov	r4,zero
 40066a4:	003f8d06 	br	40064dc <__alt_data_end+0xfc0064dc>
 40066a8:	0007883a 	mov	r3,zero
 40066ac:	003fdd06 	br	4006624 <__alt_data_end+0xfc006624>
 40066b0:	0009883a 	mov	r4,zero
 40066b4:	003ff706 	br	4006694 <__alt_data_end+0xfc006694>

040066b8 <__divdf3>:
 40066b8:	defff004 	addi	sp,sp,-64
 40066bc:	dc800815 	stw	r18,32(sp)
 40066c0:	2824d53a 	srli	r18,r5,20
 40066c4:	dd800c15 	stw	r22,48(sp)
 40066c8:	282cd7fa 	srli	r22,r5,31
 40066cc:	dc000615 	stw	r16,24(sp)
 40066d0:	04000434 	movhi	r16,16
 40066d4:	843fffc4 	addi	r16,r16,-1
 40066d8:	dfc00f15 	stw	ra,60(sp)
 40066dc:	df000e15 	stw	fp,56(sp)
 40066e0:	ddc00d15 	stw	r23,52(sp)
 40066e4:	dd400b15 	stw	r21,44(sp)
 40066e8:	dd000a15 	stw	r20,40(sp)
 40066ec:	dcc00915 	stw	r19,36(sp)
 40066f0:	dc400715 	stw	r17,28(sp)
 40066f4:	9481ffcc 	andi	r18,r18,2047
 40066f8:	2c20703a 	and	r16,r5,r16
 40066fc:	b2003fcc 	andi	r8,r22,255
 4006700:	90006126 	beq	r18,zero,4006888 <__divdf3+0x1d0>
 4006704:	0081ffc4 	movi	r2,2047
 4006708:	202b883a 	mov	r21,r4
 400670c:	90803726 	beq	r18,r2,40067ec <__divdf3+0x134>
 4006710:	80800434 	orhi	r2,r16,16
 4006714:	100490fa 	slli	r2,r2,3
 4006718:	2020d77a 	srli	r16,r4,29
 400671c:	202a90fa 	slli	r21,r4,3
 4006720:	94bf0044 	addi	r18,r18,-1023
 4006724:	80a0b03a 	or	r16,r16,r2
 4006728:	0013883a 	mov	r9,zero
 400672c:	000b883a 	mov	r5,zero
 4006730:	3806d53a 	srli	r3,r7,20
 4006734:	382ed7fa 	srli	r23,r7,31
 4006738:	04400434 	movhi	r17,16
 400673c:	8c7fffc4 	addi	r17,r17,-1
 4006740:	18c1ffcc 	andi	r3,r3,2047
 4006744:	3029883a 	mov	r20,r6
 4006748:	3c62703a 	and	r17,r7,r17
 400674c:	bf003fcc 	andi	fp,r23,255
 4006750:	18006e26 	beq	r3,zero,400690c <__divdf3+0x254>
 4006754:	0081ffc4 	movi	r2,2047
 4006758:	18806626 	beq	r3,r2,40068f4 <__divdf3+0x23c>
 400675c:	88800434 	orhi	r2,r17,16
 4006760:	100490fa 	slli	r2,r2,3
 4006764:	3022d77a 	srli	r17,r6,29
 4006768:	302890fa 	slli	r20,r6,3
 400676c:	18ff0044 	addi	r3,r3,-1023
 4006770:	88a2b03a 	or	r17,r17,r2
 4006774:	000f883a 	mov	r7,zero
 4006778:	b5e6f03a 	xor	r19,r22,r23
 400677c:	3a4cb03a 	or	r6,r7,r9
 4006780:	008003c4 	movi	r2,15
 4006784:	9809883a 	mov	r4,r19
 4006788:	90c7c83a 	sub	r3,r18,r3
 400678c:	9cc03fcc 	andi	r19,r19,255
 4006790:	11809636 	bltu	r2,r6,40069ec <__divdf3+0x334>
 4006794:	300c90ba 	slli	r6,r6,2
 4006798:	00810034 	movhi	r2,1024
 400679c:	1099eb04 	addi	r2,r2,26540
 40067a0:	308d883a 	add	r6,r6,r2
 40067a4:	30800017 	ldw	r2,0(r6)
 40067a8:	1000683a 	jmp	r2
 40067ac:	040069ec 	andhi	r16,zero,423
 40067b0:	04006824 	muli	r16,zero,416
 40067b4:	040069dc 	xori	r16,zero,423
 40067b8:	04006818 	cmpnei	r16,zero,416
 40067bc:	040069dc 	xori	r16,zero,423
 40067c0:	040069b0 	cmpltui	r16,zero,422
 40067c4:	040069dc 	xori	r16,zero,423
 40067c8:	04006818 	cmpnei	r16,zero,416
 40067cc:	04006824 	muli	r16,zero,416
 40067d0:	04006824 	muli	r16,zero,416
 40067d4:	040069b0 	cmpltui	r16,zero,422
 40067d8:	04006818 	cmpnei	r16,zero,416
 40067dc:	04006808 	cmpgei	r16,zero,416
 40067e0:	04006808 	cmpgei	r16,zero,416
 40067e4:	04006808 	cmpgei	r16,zero,416
 40067e8:	04006d74 	movhi	r16,437
 40067ec:	2404b03a 	or	r2,r4,r16
 40067f0:	10006c1e 	bne	r2,zero,40069a4 <__divdf3+0x2ec>
 40067f4:	02400204 	movi	r9,8
 40067f8:	0021883a 	mov	r16,zero
 40067fc:	002b883a 	mov	r21,zero
 4006800:	01400084 	movi	r5,2
 4006804:	003fca06 	br	4006730 <__alt_data_end+0xfc006730>
 4006808:	8023883a 	mov	r17,r16
 400680c:	a829883a 	mov	r20,r21
 4006810:	4039883a 	mov	fp,r8
 4006814:	280f883a 	mov	r7,r5
 4006818:	00800084 	movi	r2,2
 400681c:	3881601e 	bne	r7,r2,4006da0 <__divdf3+0x6e8>
 4006820:	e027883a 	mov	r19,fp
 4006824:	9900004c 	andi	r4,r19,1
 4006828:	0081ffc4 	movi	r2,2047
 400682c:	0021883a 	mov	r16,zero
 4006830:	002b883a 	mov	r21,zero
 4006834:	1004953a 	slli	r2,r2,20
 4006838:	20c03fcc 	andi	r3,r4,255
 400683c:	01400434 	movhi	r5,16
 4006840:	297fffc4 	addi	r5,r5,-1
 4006844:	180697fa 	slli	r3,r3,31
 4006848:	8160703a 	and	r16,r16,r5
 400684c:	80a0b03a 	or	r16,r16,r2
 4006850:	80c6b03a 	or	r3,r16,r3
 4006854:	a805883a 	mov	r2,r21
 4006858:	dfc00f17 	ldw	ra,60(sp)
 400685c:	df000e17 	ldw	fp,56(sp)
 4006860:	ddc00d17 	ldw	r23,52(sp)
 4006864:	dd800c17 	ldw	r22,48(sp)
 4006868:	dd400b17 	ldw	r21,44(sp)
 400686c:	dd000a17 	ldw	r20,40(sp)
 4006870:	dcc00917 	ldw	r19,36(sp)
 4006874:	dc800817 	ldw	r18,32(sp)
 4006878:	dc400717 	ldw	r17,28(sp)
 400687c:	dc000617 	ldw	r16,24(sp)
 4006880:	dec01004 	addi	sp,sp,64
 4006884:	f800283a 	ret
 4006888:	2404b03a 	or	r2,r4,r16
 400688c:	2023883a 	mov	r17,r4
 4006890:	10003f26 	beq	r2,zero,4006990 <__divdf3+0x2d8>
 4006894:	80015e26 	beq	r16,zero,4006e10 <__divdf3+0x758>
 4006898:	8009883a 	mov	r4,r16
 400689c:	d9800215 	stw	r6,8(sp)
 40068a0:	d9c00515 	stw	r7,20(sp)
 40068a4:	da000415 	stw	r8,16(sp)
 40068a8:	400887c0 	call	400887c <__clzsi2>
 40068ac:	d9800217 	ldw	r6,8(sp)
 40068b0:	d9c00517 	ldw	r7,20(sp)
 40068b4:	da000417 	ldw	r8,16(sp)
 40068b8:	113ffd44 	addi	r4,r2,-11
 40068bc:	00c00704 	movi	r3,28
 40068c0:	19014f16 	blt	r3,r4,4006e00 <__divdf3+0x748>
 40068c4:	00c00744 	movi	r3,29
 40068c8:	157ffe04 	addi	r21,r2,-8
 40068cc:	1907c83a 	sub	r3,r3,r4
 40068d0:	8560983a 	sll	r16,r16,r21
 40068d4:	88c6d83a 	srl	r3,r17,r3
 40068d8:	8d6a983a 	sll	r21,r17,r21
 40068dc:	1c20b03a 	or	r16,r3,r16
 40068e0:	1080fcc4 	addi	r2,r2,1011
 40068e4:	00a5c83a 	sub	r18,zero,r2
 40068e8:	0013883a 	mov	r9,zero
 40068ec:	000b883a 	mov	r5,zero
 40068f0:	003f8f06 	br	4006730 <__alt_data_end+0xfc006730>
 40068f4:	3444b03a 	or	r2,r6,r17
 40068f8:	1000231e 	bne	r2,zero,4006988 <__divdf3+0x2d0>
 40068fc:	0023883a 	mov	r17,zero
 4006900:	0029883a 	mov	r20,zero
 4006904:	01c00084 	movi	r7,2
 4006908:	003f9b06 	br	4006778 <__alt_data_end+0xfc006778>
 400690c:	3444b03a 	or	r2,r6,r17
 4006910:	10001926 	beq	r2,zero,4006978 <__divdf3+0x2c0>
 4006914:	88014b26 	beq	r17,zero,4006e44 <__divdf3+0x78c>
 4006918:	8809883a 	mov	r4,r17
 400691c:	d9400115 	stw	r5,4(sp)
 4006920:	d9800215 	stw	r6,8(sp)
 4006924:	da000415 	stw	r8,16(sp)
 4006928:	da400315 	stw	r9,12(sp)
 400692c:	400887c0 	call	400887c <__clzsi2>
 4006930:	d9400117 	ldw	r5,4(sp)
 4006934:	d9800217 	ldw	r6,8(sp)
 4006938:	da000417 	ldw	r8,16(sp)
 400693c:	da400317 	ldw	r9,12(sp)
 4006940:	113ffd44 	addi	r4,r2,-11
 4006944:	00c00704 	movi	r3,28
 4006948:	19013a16 	blt	r3,r4,4006e34 <__divdf3+0x77c>
 400694c:	00c00744 	movi	r3,29
 4006950:	153ffe04 	addi	r20,r2,-8
 4006954:	1907c83a 	sub	r3,r3,r4
 4006958:	8d22983a 	sll	r17,r17,r20
 400695c:	30c6d83a 	srl	r3,r6,r3
 4006960:	3528983a 	sll	r20,r6,r20
 4006964:	1c62b03a 	or	r17,r3,r17
 4006968:	1080fcc4 	addi	r2,r2,1011
 400696c:	0087c83a 	sub	r3,zero,r2
 4006970:	000f883a 	mov	r7,zero
 4006974:	003f8006 	br	4006778 <__alt_data_end+0xfc006778>
 4006978:	0023883a 	mov	r17,zero
 400697c:	0029883a 	mov	r20,zero
 4006980:	01c00044 	movi	r7,1
 4006984:	003f7c06 	br	4006778 <__alt_data_end+0xfc006778>
 4006988:	01c000c4 	movi	r7,3
 400698c:	003f7a06 	br	4006778 <__alt_data_end+0xfc006778>
 4006990:	02400104 	movi	r9,4
 4006994:	0021883a 	mov	r16,zero
 4006998:	002b883a 	mov	r21,zero
 400699c:	01400044 	movi	r5,1
 40069a0:	003f6306 	br	4006730 <__alt_data_end+0xfc006730>
 40069a4:	02400304 	movi	r9,12
 40069a8:	014000c4 	movi	r5,3
 40069ac:	003f6006 	br	4006730 <__alt_data_end+0xfc006730>
 40069b0:	04000434 	movhi	r16,16
 40069b4:	0009883a 	mov	r4,zero
 40069b8:	843fffc4 	addi	r16,r16,-1
 40069bc:	057fffc4 	movi	r21,-1
 40069c0:	0081ffc4 	movi	r2,2047
 40069c4:	003f9b06 	br	4006834 <__alt_data_end+0xfc006834>
 40069c8:	00c00044 	movi	r3,1
 40069cc:	1887c83a 	sub	r3,r3,r2
 40069d0:	01000e04 	movi	r4,56
 40069d4:	20c1530e 	bge	r4,r3,4006f24 <__divdf3+0x86c>
 40069d8:	9900004c 	andi	r4,r19,1
 40069dc:	0005883a 	mov	r2,zero
 40069e0:	0021883a 	mov	r16,zero
 40069e4:	002b883a 	mov	r21,zero
 40069e8:	003f9206 	br	4006834 <__alt_data_end+0xfc006834>
 40069ec:	8c012e36 	bltu	r17,r16,4006ea8 <__divdf3+0x7f0>
 40069f0:	84412c26 	beq	r16,r17,4006ea4 <__divdf3+0x7ec>
 40069f4:	a82f883a 	mov	r23,r21
 40069f8:	18ffffc4 	addi	r3,r3,-1
 40069fc:	002b883a 	mov	r21,zero
 4006a00:	a004d63a 	srli	r2,r20,24
 4006a04:	8822923a 	slli	r17,r17,8
 4006a08:	a028923a 	slli	r20,r20,8
 4006a0c:	8009883a 	mov	r4,r16
 4006a10:	88acb03a 	or	r22,r17,r2
 4006a14:	dd000015 	stw	r20,0(sp)
 4006a18:	b028d43a 	srli	r20,r22,16
 4006a1c:	d8c00215 	stw	r3,8(sp)
 4006a20:	b4bfffcc 	andi	r18,r22,65535
 4006a24:	a00b883a 	mov	r5,r20
 4006a28:	40047f40 	call	40047f4 <__udivsi3>
 4006a2c:	100b883a 	mov	r5,r2
 4006a30:	9009883a 	mov	r4,r18
 4006a34:	1023883a 	mov	r17,r2
 4006a38:	40048b00 	call	40048b0 <__mulsi3>
 4006a3c:	8009883a 	mov	r4,r16
 4006a40:	a00b883a 	mov	r5,r20
 4006a44:	1039883a 	mov	fp,r2
 4006a48:	40048580 	call	4004858 <__umodsi3>
 4006a4c:	1004943a 	slli	r2,r2,16
 4006a50:	b808d43a 	srli	r4,r23,16
 4006a54:	d8c00217 	ldw	r3,8(sp)
 4006a58:	2084b03a 	or	r2,r4,r2
 4006a5c:	1700062e 	bgeu	r2,fp,4006a78 <__divdf3+0x3c0>
 4006a60:	1585883a 	add	r2,r2,r22
 4006a64:	893fffc4 	addi	r4,r17,-1
 4006a68:	15811d36 	bltu	r2,r22,4006ee0 <__divdf3+0x828>
 4006a6c:	17011c2e 	bgeu	r2,fp,4006ee0 <__divdf3+0x828>
 4006a70:	8c7fff84 	addi	r17,r17,-2
 4006a74:	1585883a 	add	r2,r2,r22
 4006a78:	1739c83a 	sub	fp,r2,fp
 4006a7c:	a00b883a 	mov	r5,r20
 4006a80:	e009883a 	mov	r4,fp
 4006a84:	d8c00215 	stw	r3,8(sp)
 4006a88:	40047f40 	call	40047f4 <__udivsi3>
 4006a8c:	100b883a 	mov	r5,r2
 4006a90:	9009883a 	mov	r4,r18
 4006a94:	1021883a 	mov	r16,r2
 4006a98:	40048b00 	call	40048b0 <__mulsi3>
 4006a9c:	a00b883a 	mov	r5,r20
 4006aa0:	e009883a 	mov	r4,fp
 4006aa4:	d8800415 	stw	r2,16(sp)
 4006aa8:	40048580 	call	4004858 <__umodsi3>
 4006aac:	1004943a 	slli	r2,r2,16
 4006ab0:	da000417 	ldw	r8,16(sp)
 4006ab4:	bdffffcc 	andi	r23,r23,65535
 4006ab8:	b884b03a 	or	r2,r23,r2
 4006abc:	d8c00217 	ldw	r3,8(sp)
 4006ac0:	1200062e 	bgeu	r2,r8,4006adc <__divdf3+0x424>
 4006ac4:	1585883a 	add	r2,r2,r22
 4006ac8:	813fffc4 	addi	r4,r16,-1
 4006acc:	15810236 	bltu	r2,r22,4006ed8 <__divdf3+0x820>
 4006ad0:	1201012e 	bgeu	r2,r8,4006ed8 <__divdf3+0x820>
 4006ad4:	843fff84 	addi	r16,r16,-2
 4006ad8:	1585883a 	add	r2,r2,r22
 4006adc:	8822943a 	slli	r17,r17,16
 4006ae0:	d9800017 	ldw	r6,0(sp)
 4006ae4:	1211c83a 	sub	r8,r2,r8
 4006ae8:	8c22b03a 	or	r17,r17,r16
 4006aec:	373fffcc 	andi	fp,r6,65535
 4006af0:	8abfffcc 	andi	r10,r17,65535
 4006af4:	8820d43a 	srli	r16,r17,16
 4006af8:	5009883a 	mov	r4,r10
 4006afc:	e00b883a 	mov	r5,fp
 4006b00:	302ed43a 	srli	r23,r6,16
 4006b04:	d8c00215 	stw	r3,8(sp)
 4006b08:	da000415 	stw	r8,16(sp)
 4006b0c:	da800115 	stw	r10,4(sp)
 4006b10:	40048b00 	call	40048b0 <__mulsi3>
 4006b14:	800b883a 	mov	r5,r16
 4006b18:	e009883a 	mov	r4,fp
 4006b1c:	d8800515 	stw	r2,20(sp)
 4006b20:	40048b00 	call	40048b0 <__mulsi3>
 4006b24:	8009883a 	mov	r4,r16
 4006b28:	b80b883a 	mov	r5,r23
 4006b2c:	d8800315 	stw	r2,12(sp)
 4006b30:	40048b00 	call	40048b0 <__mulsi3>
 4006b34:	da800117 	ldw	r10,4(sp)
 4006b38:	b80b883a 	mov	r5,r23
 4006b3c:	1021883a 	mov	r16,r2
 4006b40:	5009883a 	mov	r4,r10
 4006b44:	40048b00 	call	40048b0 <__mulsi3>
 4006b48:	d9c00517 	ldw	r7,20(sp)
 4006b4c:	da400317 	ldw	r9,12(sp)
 4006b50:	d8c00217 	ldw	r3,8(sp)
 4006b54:	3808d43a 	srli	r4,r7,16
 4006b58:	1245883a 	add	r2,r2,r9
 4006b5c:	da000417 	ldw	r8,16(sp)
 4006b60:	2085883a 	add	r2,r4,r2
 4006b64:	1240022e 	bgeu	r2,r9,4006b70 <__divdf3+0x4b8>
 4006b68:	01000074 	movhi	r4,1
 4006b6c:	8121883a 	add	r16,r16,r4
 4006b70:	1008d43a 	srli	r4,r2,16
 4006b74:	1004943a 	slli	r2,r2,16
 4006b78:	39ffffcc 	andi	r7,r7,65535
 4006b7c:	2409883a 	add	r4,r4,r16
 4006b80:	11c5883a 	add	r2,r2,r7
 4006b84:	4100bb36 	bltu	r8,r4,4006e74 <__divdf3+0x7bc>
 4006b88:	4100d726 	beq	r8,r4,4006ee8 <__divdf3+0x830>
 4006b8c:	4109c83a 	sub	r4,r8,r4
 4006b90:	a8a1c83a 	sub	r16,r21,r2
 4006b94:	ac2b803a 	cmpltu	r21,r21,r16
 4006b98:	256bc83a 	sub	r21,r4,r21
 4006b9c:	b540d926 	beq	r22,r21,4006f04 <__divdf3+0x84c>
 4006ba0:	a00b883a 	mov	r5,r20
 4006ba4:	a809883a 	mov	r4,r21
 4006ba8:	d8c00215 	stw	r3,8(sp)
 4006bac:	40047f40 	call	40047f4 <__udivsi3>
 4006bb0:	100b883a 	mov	r5,r2
 4006bb4:	9009883a 	mov	r4,r18
 4006bb8:	d8800515 	stw	r2,20(sp)
 4006bbc:	40048b00 	call	40048b0 <__mulsi3>
 4006bc0:	a809883a 	mov	r4,r21
 4006bc4:	a00b883a 	mov	r5,r20
 4006bc8:	d8800415 	stw	r2,16(sp)
 4006bcc:	40048580 	call	4004858 <__umodsi3>
 4006bd0:	1004943a 	slli	r2,r2,16
 4006bd4:	8008d43a 	srli	r4,r16,16
 4006bd8:	da000417 	ldw	r8,16(sp)
 4006bdc:	d8c00217 	ldw	r3,8(sp)
 4006be0:	2084b03a 	or	r2,r4,r2
 4006be4:	d9c00517 	ldw	r7,20(sp)
 4006be8:	1200062e 	bgeu	r2,r8,4006c04 <__divdf3+0x54c>
 4006bec:	1585883a 	add	r2,r2,r22
 4006bf0:	393fffc4 	addi	r4,r7,-1
 4006bf4:	1580c536 	bltu	r2,r22,4006f0c <__divdf3+0x854>
 4006bf8:	1200c42e 	bgeu	r2,r8,4006f0c <__divdf3+0x854>
 4006bfc:	39ffff84 	addi	r7,r7,-2
 4006c00:	1585883a 	add	r2,r2,r22
 4006c04:	122bc83a 	sub	r21,r2,r8
 4006c08:	a00b883a 	mov	r5,r20
 4006c0c:	a809883a 	mov	r4,r21
 4006c10:	d8c00215 	stw	r3,8(sp)
 4006c14:	d9c00515 	stw	r7,20(sp)
 4006c18:	40047f40 	call	40047f4 <__udivsi3>
 4006c1c:	9009883a 	mov	r4,r18
 4006c20:	100b883a 	mov	r5,r2
 4006c24:	d8800415 	stw	r2,16(sp)
 4006c28:	40048b00 	call	40048b0 <__mulsi3>
 4006c2c:	a809883a 	mov	r4,r21
 4006c30:	a00b883a 	mov	r5,r20
 4006c34:	1025883a 	mov	r18,r2
 4006c38:	40048580 	call	4004858 <__umodsi3>
 4006c3c:	1004943a 	slli	r2,r2,16
 4006c40:	813fffcc 	andi	r4,r16,65535
 4006c44:	d8c00217 	ldw	r3,8(sp)
 4006c48:	20a0b03a 	or	r16,r4,r2
 4006c4c:	d9c00517 	ldw	r7,20(sp)
 4006c50:	da000417 	ldw	r8,16(sp)
 4006c54:	8480062e 	bgeu	r16,r18,4006c70 <__divdf3+0x5b8>
 4006c58:	85a1883a 	add	r16,r16,r22
 4006c5c:	40bfffc4 	addi	r2,r8,-1
 4006c60:	8580ac36 	bltu	r16,r22,4006f14 <__divdf3+0x85c>
 4006c64:	8480ab2e 	bgeu	r16,r18,4006f14 <__divdf3+0x85c>
 4006c68:	423fff84 	addi	r8,r8,-2
 4006c6c:	85a1883a 	add	r16,r16,r22
 4006c70:	3804943a 	slli	r2,r7,16
 4006c74:	84a1c83a 	sub	r16,r16,r18
 4006c78:	e009883a 	mov	r4,fp
 4006c7c:	1228b03a 	or	r20,r2,r8
 4006c80:	a1ffffcc 	andi	r7,r20,65535
 4006c84:	a024d43a 	srli	r18,r20,16
 4006c88:	380b883a 	mov	r5,r7
 4006c8c:	d8c00215 	stw	r3,8(sp)
 4006c90:	d9c00515 	stw	r7,20(sp)
 4006c94:	40048b00 	call	40048b0 <__mulsi3>
 4006c98:	900b883a 	mov	r5,r18
 4006c9c:	e009883a 	mov	r4,fp
 4006ca0:	102b883a 	mov	r21,r2
 4006ca4:	40048b00 	call	40048b0 <__mulsi3>
 4006ca8:	900b883a 	mov	r5,r18
 4006cac:	b809883a 	mov	r4,r23
 4006cb0:	1039883a 	mov	fp,r2
 4006cb4:	40048b00 	call	40048b0 <__mulsi3>
 4006cb8:	d9c00517 	ldw	r7,20(sp)
 4006cbc:	b80b883a 	mov	r5,r23
 4006cc0:	1025883a 	mov	r18,r2
 4006cc4:	3809883a 	mov	r4,r7
 4006cc8:	40048b00 	call	40048b0 <__mulsi3>
 4006ccc:	a808d43a 	srli	r4,r21,16
 4006cd0:	1705883a 	add	r2,r2,fp
 4006cd4:	d8c00217 	ldw	r3,8(sp)
 4006cd8:	2085883a 	add	r2,r4,r2
 4006cdc:	1700022e 	bgeu	r2,fp,4006ce8 <__divdf3+0x630>
 4006ce0:	01000074 	movhi	r4,1
 4006ce4:	9125883a 	add	r18,r18,r4
 4006ce8:	1008d43a 	srli	r4,r2,16
 4006cec:	1004943a 	slli	r2,r2,16
 4006cf0:	ad7fffcc 	andi	r21,r21,65535
 4006cf4:	2489883a 	add	r4,r4,r18
 4006cf8:	1545883a 	add	r2,r2,r21
 4006cfc:	81003836 	bltu	r16,r4,4006de0 <__divdf3+0x728>
 4006d00:	81003626 	beq	r16,r4,4006ddc <__divdf3+0x724>
 4006d04:	a5000054 	ori	r20,r20,1
 4006d08:	1880ffc4 	addi	r2,r3,1023
 4006d0c:	00bf2e0e 	bge	zero,r2,40069c8 <__alt_data_end+0xfc0069c8>
 4006d10:	a10001cc 	andi	r4,r20,7
 4006d14:	20000726 	beq	r4,zero,4006d34 <__divdf3+0x67c>
 4006d18:	a10003cc 	andi	r4,r20,15
 4006d1c:	01400104 	movi	r5,4
 4006d20:	21400426 	beq	r4,r5,4006d34 <__divdf3+0x67c>
 4006d24:	a149883a 	add	r4,r20,r5
 4006d28:	2529803a 	cmpltu	r20,r4,r20
 4006d2c:	8d23883a 	add	r17,r17,r20
 4006d30:	2029883a 	mov	r20,r4
 4006d34:	8900402c 	andhi	r4,r17,256
 4006d38:	20000426 	beq	r4,zero,4006d4c <__divdf3+0x694>
 4006d3c:	18810004 	addi	r2,r3,1024
 4006d40:	00ffc034 	movhi	r3,65280
 4006d44:	18ffffc4 	addi	r3,r3,-1
 4006d48:	88e2703a 	and	r17,r17,r3
 4006d4c:	00c1ff84 	movi	r3,2046
 4006d50:	18beb416 	blt	r3,r2,4006824 <__alt_data_end+0xfc006824>
 4006d54:	a028d0fa 	srli	r20,r20,3
 4006d58:	882a977a 	slli	r21,r17,29
 4006d5c:	8820927a 	slli	r16,r17,9
 4006d60:	1081ffcc 	andi	r2,r2,2047
 4006d64:	ad2ab03a 	or	r21,r21,r20
 4006d68:	8020d33a 	srli	r16,r16,12
 4006d6c:	9900004c 	andi	r4,r19,1
 4006d70:	003eb006 	br	4006834 <__alt_data_end+0xfc006834>
 4006d74:	8080022c 	andhi	r2,r16,8
 4006d78:	10001226 	beq	r2,zero,4006dc4 <__divdf3+0x70c>
 4006d7c:	8880022c 	andhi	r2,r17,8
 4006d80:	1000101e 	bne	r2,zero,4006dc4 <__divdf3+0x70c>
 4006d84:	00800434 	movhi	r2,16
 4006d88:	8c000234 	orhi	r16,r17,8
 4006d8c:	10bfffc4 	addi	r2,r2,-1
 4006d90:	b809883a 	mov	r4,r23
 4006d94:	80a0703a 	and	r16,r16,r2
 4006d98:	a02b883a 	mov	r21,r20
 4006d9c:	003f0806 	br	40069c0 <__alt_data_end+0xfc0069c0>
 4006da0:	008000c4 	movi	r2,3
 4006da4:	3880b126 	beq	r7,r2,400706c <__divdf3+0x9b4>
 4006da8:	00800044 	movi	r2,1
 4006dac:	38805b1e 	bne	r7,r2,4006f1c <__divdf3+0x864>
 4006db0:	e009883a 	mov	r4,fp
 4006db4:	0005883a 	mov	r2,zero
 4006db8:	0021883a 	mov	r16,zero
 4006dbc:	002b883a 	mov	r21,zero
 4006dc0:	003e9c06 	br	4006834 <__alt_data_end+0xfc006834>
 4006dc4:	00800434 	movhi	r2,16
 4006dc8:	84000234 	orhi	r16,r16,8
 4006dcc:	10bfffc4 	addi	r2,r2,-1
 4006dd0:	b009883a 	mov	r4,r22
 4006dd4:	80a0703a 	and	r16,r16,r2
 4006dd8:	003ef906 	br	40069c0 <__alt_data_end+0xfc0069c0>
 4006ddc:	103fca26 	beq	r2,zero,4006d08 <__alt_data_end+0xfc006d08>
 4006de0:	b421883a 	add	r16,r22,r16
 4006de4:	a17fffc4 	addi	r5,r20,-1
 4006de8:	8580422e 	bgeu	r16,r22,4006ef4 <__divdf3+0x83c>
 4006dec:	2829883a 	mov	r20,r5
 4006df0:	813fc41e 	bne	r16,r4,4006d04 <__alt_data_end+0xfc006d04>
 4006df4:	d9800017 	ldw	r6,0(sp)
 4006df8:	30bfc21e 	bne	r6,r2,4006d04 <__alt_data_end+0xfc006d04>
 4006dfc:	003fc206 	br	4006d08 <__alt_data_end+0xfc006d08>
 4006e00:	143ff604 	addi	r16,r2,-40
 4006e04:	8c20983a 	sll	r16,r17,r16
 4006e08:	002b883a 	mov	r21,zero
 4006e0c:	003eb406 	br	40068e0 <__alt_data_end+0xfc0068e0>
 4006e10:	d9800215 	stw	r6,8(sp)
 4006e14:	d9c00515 	stw	r7,20(sp)
 4006e18:	da000415 	stw	r8,16(sp)
 4006e1c:	400887c0 	call	400887c <__clzsi2>
 4006e20:	10800804 	addi	r2,r2,32
 4006e24:	da000417 	ldw	r8,16(sp)
 4006e28:	d9c00517 	ldw	r7,20(sp)
 4006e2c:	d9800217 	ldw	r6,8(sp)
 4006e30:	003ea106 	br	40068b8 <__alt_data_end+0xfc0068b8>
 4006e34:	147ff604 	addi	r17,r2,-40
 4006e38:	3462983a 	sll	r17,r6,r17
 4006e3c:	0029883a 	mov	r20,zero
 4006e40:	003ec906 	br	4006968 <__alt_data_end+0xfc006968>
 4006e44:	3009883a 	mov	r4,r6
 4006e48:	d9400115 	stw	r5,4(sp)
 4006e4c:	d9800215 	stw	r6,8(sp)
 4006e50:	da000415 	stw	r8,16(sp)
 4006e54:	da400315 	stw	r9,12(sp)
 4006e58:	400887c0 	call	400887c <__clzsi2>
 4006e5c:	10800804 	addi	r2,r2,32
 4006e60:	da400317 	ldw	r9,12(sp)
 4006e64:	da000417 	ldw	r8,16(sp)
 4006e68:	d9800217 	ldw	r6,8(sp)
 4006e6c:	d9400117 	ldw	r5,4(sp)
 4006e70:	003eb306 	br	4006940 <__alt_data_end+0xfc006940>
 4006e74:	d9800017 	ldw	r6,0(sp)
 4006e78:	a9ab883a 	add	r21,r21,r6
 4006e7c:	a98b803a 	cmpltu	r5,r21,r6
 4006e80:	2d8b883a 	add	r5,r5,r22
 4006e84:	2a11883a 	add	r8,r5,r8
 4006e88:	897fffc4 	addi	r5,r17,-1
 4006e8c:	b2000c2e 	bgeu	r22,r8,4006ec0 <__divdf3+0x808>
 4006e90:	41003f36 	bltu	r8,r4,4006f90 <__divdf3+0x8d8>
 4006e94:	22006c26 	beq	r4,r8,4007048 <__divdf3+0x990>
 4006e98:	4109c83a 	sub	r4,r8,r4
 4006e9c:	2823883a 	mov	r17,r5
 4006ea0:	003f3b06 	br	4006b90 <__alt_data_end+0xfc006b90>
 4006ea4:	ad3ed336 	bltu	r21,r20,40069f4 <__alt_data_end+0xfc0069f4>
 4006ea8:	a804d07a 	srli	r2,r21,1
 4006eac:	802e97fa 	slli	r23,r16,31
 4006eb0:	a82a97fa 	slli	r21,r21,31
 4006eb4:	8020d07a 	srli	r16,r16,1
 4006eb8:	b8aeb03a 	or	r23,r23,r2
 4006ebc:	003ed006 	br	4006a00 <__alt_data_end+0xfc006a00>
 4006ec0:	b23ff51e 	bne	r22,r8,4006e98 <__alt_data_end+0xfc006e98>
 4006ec4:	d9800017 	ldw	r6,0(sp)
 4006ec8:	a9bff12e 	bgeu	r21,r6,4006e90 <__alt_data_end+0xfc006e90>
 4006ecc:	b109c83a 	sub	r4,r22,r4
 4006ed0:	2823883a 	mov	r17,r5
 4006ed4:	003f2e06 	br	4006b90 <__alt_data_end+0xfc006b90>
 4006ed8:	2021883a 	mov	r16,r4
 4006edc:	003eff06 	br	4006adc <__alt_data_end+0xfc006adc>
 4006ee0:	2023883a 	mov	r17,r4
 4006ee4:	003ee406 	br	4006a78 <__alt_data_end+0xfc006a78>
 4006ee8:	a8bfe236 	bltu	r21,r2,4006e74 <__alt_data_end+0xfc006e74>
 4006eec:	0009883a 	mov	r4,zero
 4006ef0:	003f2706 	br	4006b90 <__alt_data_end+0xfc006b90>
 4006ef4:	81002d36 	bltu	r16,r4,4006fac <__divdf3+0x8f4>
 4006ef8:	24005626 	beq	r4,r16,4007054 <__divdf3+0x99c>
 4006efc:	2829883a 	mov	r20,r5
 4006f00:	003f8006 	br	4006d04 <__alt_data_end+0xfc006d04>
 4006f04:	053fffc4 	movi	r20,-1
 4006f08:	003f7f06 	br	4006d08 <__alt_data_end+0xfc006d08>
 4006f0c:	200f883a 	mov	r7,r4
 4006f10:	003f3c06 	br	4006c04 <__alt_data_end+0xfc006c04>
 4006f14:	1011883a 	mov	r8,r2
 4006f18:	003f5506 	br	4006c70 <__alt_data_end+0xfc006c70>
 4006f1c:	e027883a 	mov	r19,fp
 4006f20:	003f7906 	br	4006d08 <__alt_data_end+0xfc006d08>
 4006f24:	010007c4 	movi	r4,31
 4006f28:	20c02816 	blt	r4,r3,4006fcc <__divdf3+0x914>
 4006f2c:	00800804 	movi	r2,32
 4006f30:	10c5c83a 	sub	r2,r2,r3
 4006f34:	888a983a 	sll	r5,r17,r2
 4006f38:	a0c8d83a 	srl	r4,r20,r3
 4006f3c:	a084983a 	sll	r2,r20,r2
 4006f40:	88e2d83a 	srl	r17,r17,r3
 4006f44:	2906b03a 	or	r3,r5,r4
 4006f48:	1004c03a 	cmpne	r2,r2,zero
 4006f4c:	1886b03a 	or	r3,r3,r2
 4006f50:	188001cc 	andi	r2,r3,7
 4006f54:	10000726 	beq	r2,zero,4006f74 <__divdf3+0x8bc>
 4006f58:	188003cc 	andi	r2,r3,15
 4006f5c:	01000104 	movi	r4,4
 4006f60:	11000426 	beq	r2,r4,4006f74 <__divdf3+0x8bc>
 4006f64:	1805883a 	mov	r2,r3
 4006f68:	10c00104 	addi	r3,r2,4
 4006f6c:	1885803a 	cmpltu	r2,r3,r2
 4006f70:	88a3883a 	add	r17,r17,r2
 4006f74:	8880202c 	andhi	r2,r17,128
 4006f78:	10002926 	beq	r2,zero,4007020 <__divdf3+0x968>
 4006f7c:	9900004c 	andi	r4,r19,1
 4006f80:	00800044 	movi	r2,1
 4006f84:	0021883a 	mov	r16,zero
 4006f88:	002b883a 	mov	r21,zero
 4006f8c:	003e2906 	br	4006834 <__alt_data_end+0xfc006834>
 4006f90:	d9800017 	ldw	r6,0(sp)
 4006f94:	8c7fff84 	addi	r17,r17,-2
 4006f98:	a9ab883a 	add	r21,r21,r6
 4006f9c:	a98b803a 	cmpltu	r5,r21,r6
 4006fa0:	2d8b883a 	add	r5,r5,r22
 4006fa4:	2a11883a 	add	r8,r5,r8
 4006fa8:	003ef806 	br	4006b8c <__alt_data_end+0xfc006b8c>
 4006fac:	d9800017 	ldw	r6,0(sp)
 4006fb0:	318f883a 	add	r7,r6,r6
 4006fb4:	398b803a 	cmpltu	r5,r7,r6
 4006fb8:	2d8d883a 	add	r6,r5,r22
 4006fbc:	81a1883a 	add	r16,r16,r6
 4006fc0:	a17fff84 	addi	r5,r20,-2
 4006fc4:	d9c00015 	stw	r7,0(sp)
 4006fc8:	003f8806 	br	4006dec <__alt_data_end+0xfc006dec>
 4006fcc:	013ff844 	movi	r4,-31
 4006fd0:	2085c83a 	sub	r2,r4,r2
 4006fd4:	8888d83a 	srl	r4,r17,r2
 4006fd8:	00800804 	movi	r2,32
 4006fdc:	18802126 	beq	r3,r2,4007064 <__divdf3+0x9ac>
 4006fe0:	04001004 	movi	r16,64
 4006fe4:	80c7c83a 	sub	r3,r16,r3
 4006fe8:	88e0983a 	sll	r16,r17,r3
 4006fec:	8504b03a 	or	r2,r16,r20
 4006ff0:	1004c03a 	cmpne	r2,r2,zero
 4006ff4:	2084b03a 	or	r2,r4,r2
 4006ff8:	144001cc 	andi	r17,r2,7
 4006ffc:	88000d1e 	bne	r17,zero,4007034 <__divdf3+0x97c>
 4007000:	0021883a 	mov	r16,zero
 4007004:	102ad0fa 	srli	r21,r2,3
 4007008:	9900004c 	andi	r4,r19,1
 400700c:	0005883a 	mov	r2,zero
 4007010:	ac6ab03a 	or	r21,r21,r17
 4007014:	003e0706 	br	4006834 <__alt_data_end+0xfc006834>
 4007018:	1007883a 	mov	r3,r2
 400701c:	0023883a 	mov	r17,zero
 4007020:	8820927a 	slli	r16,r17,9
 4007024:	1805883a 	mov	r2,r3
 4007028:	8822977a 	slli	r17,r17,29
 400702c:	8020d33a 	srli	r16,r16,12
 4007030:	003ff406 	br	4007004 <__alt_data_end+0xfc007004>
 4007034:	10c003cc 	andi	r3,r2,15
 4007038:	01000104 	movi	r4,4
 400703c:	193ff626 	beq	r3,r4,4007018 <__alt_data_end+0xfc007018>
 4007040:	0023883a 	mov	r17,zero
 4007044:	003fc806 	br	4006f68 <__alt_data_end+0xfc006f68>
 4007048:	a8bfd136 	bltu	r21,r2,4006f90 <__alt_data_end+0xfc006f90>
 400704c:	2823883a 	mov	r17,r5
 4007050:	003fa606 	br	4006eec <__alt_data_end+0xfc006eec>
 4007054:	d9800017 	ldw	r6,0(sp)
 4007058:	30bfd436 	bltu	r6,r2,4006fac <__alt_data_end+0xfc006fac>
 400705c:	2829883a 	mov	r20,r5
 4007060:	003f6406 	br	4006df4 <__alt_data_end+0xfc006df4>
 4007064:	0021883a 	mov	r16,zero
 4007068:	003fe006 	br	4006fec <__alt_data_end+0xfc006fec>
 400706c:	00800434 	movhi	r2,16
 4007070:	8c000234 	orhi	r16,r17,8
 4007074:	10bfffc4 	addi	r2,r2,-1
 4007078:	e009883a 	mov	r4,fp
 400707c:	80a0703a 	and	r16,r16,r2
 4007080:	a02b883a 	mov	r21,r20
 4007084:	003e4e06 	br	40069c0 <__alt_data_end+0xfc0069c0>

04007088 <__gedf2>:
 4007088:	2804d53a 	srli	r2,r5,20
 400708c:	3806d53a 	srli	r3,r7,20
 4007090:	02000434 	movhi	r8,16
 4007094:	423fffc4 	addi	r8,r8,-1
 4007098:	1081ffcc 	andi	r2,r2,2047
 400709c:	0241ffc4 	movi	r9,2047
 40070a0:	2a14703a 	and	r10,r5,r8
 40070a4:	18c1ffcc 	andi	r3,r3,2047
 40070a8:	3a10703a 	and	r8,r7,r8
 40070ac:	280ad7fa 	srli	r5,r5,31
 40070b0:	380ed7fa 	srli	r7,r7,31
 40070b4:	12401d26 	beq	r2,r9,400712c <__gedf2+0xa4>
 40070b8:	0241ffc4 	movi	r9,2047
 40070bc:	1a401226 	beq	r3,r9,4007108 <__gedf2+0x80>
 40070c0:	1000081e 	bne	r2,zero,40070e4 <__gedf2+0x5c>
 40070c4:	2296b03a 	or	r11,r4,r10
 40070c8:	5813003a 	cmpeq	r9,r11,zero
 40070cc:	1800091e 	bne	r3,zero,40070f4 <__gedf2+0x6c>
 40070d0:	3218b03a 	or	r12,r6,r8
 40070d4:	6000071e 	bne	r12,zero,40070f4 <__gedf2+0x6c>
 40070d8:	0005883a 	mov	r2,zero
 40070dc:	5800101e 	bne	r11,zero,4007120 <__gedf2+0x98>
 40070e0:	f800283a 	ret
 40070e4:	18000c1e 	bne	r3,zero,4007118 <__gedf2+0x90>
 40070e8:	3212b03a 	or	r9,r6,r8
 40070ec:	48000c26 	beq	r9,zero,4007120 <__gedf2+0x98>
 40070f0:	0013883a 	mov	r9,zero
 40070f4:	39c03fcc 	andi	r7,r7,255
 40070f8:	48000826 	beq	r9,zero,400711c <__gedf2+0x94>
 40070fc:	38000926 	beq	r7,zero,4007124 <__gedf2+0x9c>
 4007100:	00800044 	movi	r2,1
 4007104:	f800283a 	ret
 4007108:	3212b03a 	or	r9,r6,r8
 400710c:	483fec26 	beq	r9,zero,40070c0 <__alt_data_end+0xfc0070c0>
 4007110:	00bfff84 	movi	r2,-2
 4007114:	f800283a 	ret
 4007118:	39c03fcc 	andi	r7,r7,255
 400711c:	29c00626 	beq	r5,r7,4007138 <__gedf2+0xb0>
 4007120:	283ff726 	beq	r5,zero,4007100 <__alt_data_end+0xfc007100>
 4007124:	00bfffc4 	movi	r2,-1
 4007128:	f800283a 	ret
 400712c:	2292b03a 	or	r9,r4,r10
 4007130:	483fe126 	beq	r9,zero,40070b8 <__alt_data_end+0xfc0070b8>
 4007134:	003ff606 	br	4007110 <__alt_data_end+0xfc007110>
 4007138:	18bff916 	blt	r3,r2,4007120 <__alt_data_end+0xfc007120>
 400713c:	10c00316 	blt	r2,r3,400714c <__gedf2+0xc4>
 4007140:	42bff736 	bltu	r8,r10,4007120 <__alt_data_end+0xfc007120>
 4007144:	52000326 	beq	r10,r8,4007154 <__gedf2+0xcc>
 4007148:	5200042e 	bgeu	r10,r8,400715c <__gedf2+0xd4>
 400714c:	283fec1e 	bne	r5,zero,4007100 <__alt_data_end+0xfc007100>
 4007150:	003ff406 	br	4007124 <__alt_data_end+0xfc007124>
 4007154:	313ff236 	bltu	r6,r4,4007120 <__alt_data_end+0xfc007120>
 4007158:	21bffc36 	bltu	r4,r6,400714c <__alt_data_end+0xfc00714c>
 400715c:	0005883a 	mov	r2,zero
 4007160:	f800283a 	ret

04007164 <__ledf2>:
 4007164:	2804d53a 	srli	r2,r5,20
 4007168:	3810d53a 	srli	r8,r7,20
 400716c:	00c00434 	movhi	r3,16
 4007170:	18ffffc4 	addi	r3,r3,-1
 4007174:	1081ffcc 	andi	r2,r2,2047
 4007178:	0241ffc4 	movi	r9,2047
 400717c:	28d4703a 	and	r10,r5,r3
 4007180:	4201ffcc 	andi	r8,r8,2047
 4007184:	38c6703a 	and	r3,r7,r3
 4007188:	280ad7fa 	srli	r5,r5,31
 400718c:	380ed7fa 	srli	r7,r7,31
 4007190:	12401f26 	beq	r2,r9,4007210 <__ledf2+0xac>
 4007194:	0241ffc4 	movi	r9,2047
 4007198:	42401426 	beq	r8,r9,40071ec <__ledf2+0x88>
 400719c:	1000091e 	bne	r2,zero,40071c4 <__ledf2+0x60>
 40071a0:	2296b03a 	or	r11,r4,r10
 40071a4:	5813003a 	cmpeq	r9,r11,zero
 40071a8:	29403fcc 	andi	r5,r5,255
 40071ac:	40000a1e 	bne	r8,zero,40071d8 <__ledf2+0x74>
 40071b0:	30d8b03a 	or	r12,r6,r3
 40071b4:	6000081e 	bne	r12,zero,40071d8 <__ledf2+0x74>
 40071b8:	0005883a 	mov	r2,zero
 40071bc:	5800111e 	bne	r11,zero,4007204 <__ledf2+0xa0>
 40071c0:	f800283a 	ret
 40071c4:	29403fcc 	andi	r5,r5,255
 40071c8:	40000c1e 	bne	r8,zero,40071fc <__ledf2+0x98>
 40071cc:	30d2b03a 	or	r9,r6,r3
 40071d0:	48000c26 	beq	r9,zero,4007204 <__ledf2+0xa0>
 40071d4:	0013883a 	mov	r9,zero
 40071d8:	39c03fcc 	andi	r7,r7,255
 40071dc:	48000826 	beq	r9,zero,4007200 <__ledf2+0x9c>
 40071e0:	38001126 	beq	r7,zero,4007228 <__ledf2+0xc4>
 40071e4:	00800044 	movi	r2,1
 40071e8:	f800283a 	ret
 40071ec:	30d2b03a 	or	r9,r6,r3
 40071f0:	483fea26 	beq	r9,zero,400719c <__alt_data_end+0xfc00719c>
 40071f4:	00800084 	movi	r2,2
 40071f8:	f800283a 	ret
 40071fc:	39c03fcc 	andi	r7,r7,255
 4007200:	39400726 	beq	r7,r5,4007220 <__ledf2+0xbc>
 4007204:	2800081e 	bne	r5,zero,4007228 <__ledf2+0xc4>
 4007208:	00800044 	movi	r2,1
 400720c:	f800283a 	ret
 4007210:	2292b03a 	or	r9,r4,r10
 4007214:	483fdf26 	beq	r9,zero,4007194 <__alt_data_end+0xfc007194>
 4007218:	00800084 	movi	r2,2
 400721c:	f800283a 	ret
 4007220:	4080030e 	bge	r8,r2,4007230 <__ledf2+0xcc>
 4007224:	383fef26 	beq	r7,zero,40071e4 <__alt_data_end+0xfc0071e4>
 4007228:	00bfffc4 	movi	r2,-1
 400722c:	f800283a 	ret
 4007230:	123feb16 	blt	r2,r8,40071e0 <__alt_data_end+0xfc0071e0>
 4007234:	1abff336 	bltu	r3,r10,4007204 <__alt_data_end+0xfc007204>
 4007238:	50c00326 	beq	r10,r3,4007248 <__ledf2+0xe4>
 400723c:	50c0042e 	bgeu	r10,r3,4007250 <__ledf2+0xec>
 4007240:	283fe81e 	bne	r5,zero,40071e4 <__alt_data_end+0xfc0071e4>
 4007244:	003ff806 	br	4007228 <__alt_data_end+0xfc007228>
 4007248:	313fee36 	bltu	r6,r4,4007204 <__alt_data_end+0xfc007204>
 400724c:	21bffc36 	bltu	r4,r6,4007240 <__alt_data_end+0xfc007240>
 4007250:	0005883a 	mov	r2,zero
 4007254:	f800283a 	ret

04007258 <__muldf3>:
 4007258:	deffee04 	addi	sp,sp,-72
 400725c:	dd000c15 	stw	r20,48(sp)
 4007260:	2828d53a 	srli	r20,r5,20
 4007264:	ddc00f15 	stw	r23,60(sp)
 4007268:	282ed7fa 	srli	r23,r5,31
 400726c:	dc000815 	stw	r16,32(sp)
 4007270:	04000434 	movhi	r16,16
 4007274:	dcc00b15 	stw	r19,44(sp)
 4007278:	843fffc4 	addi	r16,r16,-1
 400727c:	dfc01115 	stw	ra,68(sp)
 4007280:	df001015 	stw	fp,64(sp)
 4007284:	dd800e15 	stw	r22,56(sp)
 4007288:	dd400d15 	stw	r21,52(sp)
 400728c:	dc800a15 	stw	r18,40(sp)
 4007290:	dc400915 	stw	r17,36(sp)
 4007294:	a501ffcc 	andi	r20,r20,2047
 4007298:	2c20703a 	and	r16,r5,r16
 400729c:	b827883a 	mov	r19,r23
 40072a0:	ba403fcc 	andi	r9,r23,255
 40072a4:	a0006026 	beq	r20,zero,4007428 <__muldf3+0x1d0>
 40072a8:	0081ffc4 	movi	r2,2047
 40072ac:	202d883a 	mov	r22,r4
 40072b0:	a0803626 	beq	r20,r2,400738c <__muldf3+0x134>
 40072b4:	84000434 	orhi	r16,r16,16
 40072b8:	200ad77a 	srli	r5,r4,29
 40072bc:	800490fa 	slli	r2,r16,3
 40072c0:	202c90fa 	slli	r22,r4,3
 40072c4:	a53f0044 	addi	r20,r20,-1023
 40072c8:	28a0b03a 	or	r16,r5,r2
 40072cc:	002b883a 	mov	r21,zero
 40072d0:	000b883a 	mov	r5,zero
 40072d4:	3804d53a 	srli	r2,r7,20
 40072d8:	3838d7fa 	srli	fp,r7,31
 40072dc:	04400434 	movhi	r17,16
 40072e0:	8c7fffc4 	addi	r17,r17,-1
 40072e4:	1081ffcc 	andi	r2,r2,2047
 40072e8:	3025883a 	mov	r18,r6
 40072ec:	3c62703a 	and	r17,r7,r17
 40072f0:	e2803fcc 	andi	r10,fp,255
 40072f4:	10006d26 	beq	r2,zero,40074ac <__muldf3+0x254>
 40072f8:	00c1ffc4 	movi	r3,2047
 40072fc:	10c06526 	beq	r2,r3,4007494 <__muldf3+0x23c>
 4007300:	8c400434 	orhi	r17,r17,16
 4007304:	300ed77a 	srli	r7,r6,29
 4007308:	880690fa 	slli	r3,r17,3
 400730c:	302490fa 	slli	r18,r6,3
 4007310:	10bf0044 	addi	r2,r2,-1023
 4007314:	38e2b03a 	or	r17,r7,r3
 4007318:	000f883a 	mov	r7,zero
 400731c:	a087883a 	add	r3,r20,r2
 4007320:	010003c4 	movi	r4,15
 4007324:	3d44b03a 	or	r2,r7,r21
 4007328:	e5ccf03a 	xor	r6,fp,r23
 400732c:	1a000044 	addi	r8,r3,1
 4007330:	20809b36 	bltu	r4,r2,40075a0 <__muldf3+0x348>
 4007334:	100490ba 	slli	r2,r2,2
 4007338:	01010034 	movhi	r4,1024
 400733c:	211cd304 	addi	r4,r4,29516
 4007340:	1105883a 	add	r2,r2,r4
 4007344:	10800017 	ldw	r2,0(r2)
 4007348:	1000683a 	jmp	r2
 400734c:	040075a0 	cmpeqi	r16,zero,470
 4007350:	040073ac 	andhi	r16,zero,462
 4007354:	040073ac 	andhi	r16,zero,462
 4007358:	040073a8 	cmpgeui	r16,zero,462
 400735c:	0400757c 	xorhi	r16,zero,469
 4007360:	0400757c 	xorhi	r16,zero,469
 4007364:	04007564 	muli	r16,zero,469
 4007368:	040073a8 	cmpgeui	r16,zero,462
 400736c:	0400757c 	xorhi	r16,zero,469
 4007370:	04007564 	muli	r16,zero,469
 4007374:	0400757c 	xorhi	r16,zero,469
 4007378:	040073a8 	cmpgeui	r16,zero,462
 400737c:	0400758c 	andi	r16,zero,470
 4007380:	0400758c 	andi	r16,zero,470
 4007384:	0400758c 	andi	r16,zero,470
 4007388:	040078ec 	andhi	r16,zero,483
 400738c:	2404b03a 	or	r2,r4,r16
 4007390:	1000711e 	bne	r2,zero,4007558 <__muldf3+0x300>
 4007394:	05400204 	movi	r21,8
 4007398:	0021883a 	mov	r16,zero
 400739c:	002d883a 	mov	r22,zero
 40073a0:	01400084 	movi	r5,2
 40073a4:	003fcb06 	br	40072d4 <__alt_data_end+0xfc0072d4>
 40073a8:	500d883a 	mov	r6,r10
 40073ac:	00800084 	movi	r2,2
 40073b0:	38805926 	beq	r7,r2,4007518 <__muldf3+0x2c0>
 40073b4:	008000c4 	movi	r2,3
 40073b8:	3881bb26 	beq	r7,r2,4007aa8 <__muldf3+0x850>
 40073bc:	00800044 	movi	r2,1
 40073c0:	3881961e 	bne	r7,r2,4007a1c <__muldf3+0x7c4>
 40073c4:	3027883a 	mov	r19,r6
 40073c8:	0005883a 	mov	r2,zero
 40073cc:	0021883a 	mov	r16,zero
 40073d0:	002d883a 	mov	r22,zero
 40073d4:	1004953a 	slli	r2,r2,20
 40073d8:	98c03fcc 	andi	r3,r19,255
 40073dc:	04400434 	movhi	r17,16
 40073e0:	8c7fffc4 	addi	r17,r17,-1
 40073e4:	180697fa 	slli	r3,r3,31
 40073e8:	8460703a 	and	r16,r16,r17
 40073ec:	80a0b03a 	or	r16,r16,r2
 40073f0:	80c6b03a 	or	r3,r16,r3
 40073f4:	b005883a 	mov	r2,r22
 40073f8:	dfc01117 	ldw	ra,68(sp)
 40073fc:	df001017 	ldw	fp,64(sp)
 4007400:	ddc00f17 	ldw	r23,60(sp)
 4007404:	dd800e17 	ldw	r22,56(sp)
 4007408:	dd400d17 	ldw	r21,52(sp)
 400740c:	dd000c17 	ldw	r20,48(sp)
 4007410:	dcc00b17 	ldw	r19,44(sp)
 4007414:	dc800a17 	ldw	r18,40(sp)
 4007418:	dc400917 	ldw	r17,36(sp)
 400741c:	dc000817 	ldw	r16,32(sp)
 4007420:	dec01204 	addi	sp,sp,72
 4007424:	f800283a 	ret
 4007428:	2404b03a 	or	r2,r4,r16
 400742c:	202b883a 	mov	r21,r4
 4007430:	10004426 	beq	r2,zero,4007544 <__muldf3+0x2ec>
 4007434:	80015126 	beq	r16,zero,400797c <__muldf3+0x724>
 4007438:	8009883a 	mov	r4,r16
 400743c:	d9800715 	stw	r6,28(sp)
 4007440:	d9c00215 	stw	r7,8(sp)
 4007444:	da400415 	stw	r9,16(sp)
 4007448:	400887c0 	call	400887c <__clzsi2>
 400744c:	d9800717 	ldw	r6,28(sp)
 4007450:	d9c00217 	ldw	r7,8(sp)
 4007454:	da400417 	ldw	r9,16(sp)
 4007458:	113ffd44 	addi	r4,r2,-11
 400745c:	00c00704 	movi	r3,28
 4007460:	19014216 	blt	r3,r4,400796c <__muldf3+0x714>
 4007464:	00c00744 	movi	r3,29
 4007468:	15bffe04 	addi	r22,r2,-8
 400746c:	1907c83a 	sub	r3,r3,r4
 4007470:	85a0983a 	sll	r16,r16,r22
 4007474:	a8c6d83a 	srl	r3,r21,r3
 4007478:	adac983a 	sll	r22,r21,r22
 400747c:	1c20b03a 	or	r16,r3,r16
 4007480:	1080fcc4 	addi	r2,r2,1011
 4007484:	00a9c83a 	sub	r20,zero,r2
 4007488:	002b883a 	mov	r21,zero
 400748c:	000b883a 	mov	r5,zero
 4007490:	003f9006 	br	40072d4 <__alt_data_end+0xfc0072d4>
 4007494:	3446b03a 	or	r3,r6,r17
 4007498:	1800281e 	bne	r3,zero,400753c <__muldf3+0x2e4>
 400749c:	0023883a 	mov	r17,zero
 40074a0:	0025883a 	mov	r18,zero
 40074a4:	01c00084 	movi	r7,2
 40074a8:	003f9c06 	br	400731c <__alt_data_end+0xfc00731c>
 40074ac:	3446b03a 	or	r3,r6,r17
 40074b0:	18001e26 	beq	r3,zero,400752c <__muldf3+0x2d4>
 40074b4:	88012126 	beq	r17,zero,400793c <__muldf3+0x6e4>
 40074b8:	8809883a 	mov	r4,r17
 40074bc:	d9400215 	stw	r5,8(sp)
 40074c0:	d9800715 	stw	r6,28(sp)
 40074c4:	da400415 	stw	r9,16(sp)
 40074c8:	da800315 	stw	r10,12(sp)
 40074cc:	400887c0 	call	400887c <__clzsi2>
 40074d0:	d9400217 	ldw	r5,8(sp)
 40074d4:	d9800717 	ldw	r6,28(sp)
 40074d8:	da400417 	ldw	r9,16(sp)
 40074dc:	da800317 	ldw	r10,12(sp)
 40074e0:	113ffd44 	addi	r4,r2,-11
 40074e4:	00c00704 	movi	r3,28
 40074e8:	19011016 	blt	r3,r4,400792c <__muldf3+0x6d4>
 40074ec:	00c00744 	movi	r3,29
 40074f0:	14bffe04 	addi	r18,r2,-8
 40074f4:	1907c83a 	sub	r3,r3,r4
 40074f8:	8ca2983a 	sll	r17,r17,r18
 40074fc:	30c6d83a 	srl	r3,r6,r3
 4007500:	34a4983a 	sll	r18,r6,r18
 4007504:	1c62b03a 	or	r17,r3,r17
 4007508:	1080fcc4 	addi	r2,r2,1011
 400750c:	0085c83a 	sub	r2,zero,r2
 4007510:	000f883a 	mov	r7,zero
 4007514:	003f8106 	br	400731c <__alt_data_end+0xfc00731c>
 4007518:	3027883a 	mov	r19,r6
 400751c:	0081ffc4 	movi	r2,2047
 4007520:	0021883a 	mov	r16,zero
 4007524:	002d883a 	mov	r22,zero
 4007528:	003faa06 	br	40073d4 <__alt_data_end+0xfc0073d4>
 400752c:	0023883a 	mov	r17,zero
 4007530:	0025883a 	mov	r18,zero
 4007534:	01c00044 	movi	r7,1
 4007538:	003f7806 	br	400731c <__alt_data_end+0xfc00731c>
 400753c:	01c000c4 	movi	r7,3
 4007540:	003f7606 	br	400731c <__alt_data_end+0xfc00731c>
 4007544:	05400104 	movi	r21,4
 4007548:	0021883a 	mov	r16,zero
 400754c:	002d883a 	mov	r22,zero
 4007550:	01400044 	movi	r5,1
 4007554:	003f5f06 	br	40072d4 <__alt_data_end+0xfc0072d4>
 4007558:	05400304 	movi	r21,12
 400755c:	014000c4 	movi	r5,3
 4007560:	003f5c06 	br	40072d4 <__alt_data_end+0xfc0072d4>
 4007564:	04000434 	movhi	r16,16
 4007568:	0027883a 	mov	r19,zero
 400756c:	843fffc4 	addi	r16,r16,-1
 4007570:	05bfffc4 	movi	r22,-1
 4007574:	0081ffc4 	movi	r2,2047
 4007578:	003f9606 	br	40073d4 <__alt_data_end+0xfc0073d4>
 400757c:	8023883a 	mov	r17,r16
 4007580:	b025883a 	mov	r18,r22
 4007584:	280f883a 	mov	r7,r5
 4007588:	003f8806 	br	40073ac <__alt_data_end+0xfc0073ac>
 400758c:	8023883a 	mov	r17,r16
 4007590:	b025883a 	mov	r18,r22
 4007594:	480d883a 	mov	r6,r9
 4007598:	280f883a 	mov	r7,r5
 400759c:	003f8306 	br	40073ac <__alt_data_end+0xfc0073ac>
 40075a0:	b026d43a 	srli	r19,r22,16
 40075a4:	902ed43a 	srli	r23,r18,16
 40075a8:	b5bfffcc 	andi	r22,r22,65535
 40075ac:	94bfffcc 	andi	r18,r18,65535
 40075b0:	b00b883a 	mov	r5,r22
 40075b4:	9009883a 	mov	r4,r18
 40075b8:	d8c00515 	stw	r3,20(sp)
 40075bc:	d9800715 	stw	r6,28(sp)
 40075c0:	da000615 	stw	r8,24(sp)
 40075c4:	40048b00 	call	40048b0 <__mulsi3>
 40075c8:	980b883a 	mov	r5,r19
 40075cc:	9009883a 	mov	r4,r18
 40075d0:	1029883a 	mov	r20,r2
 40075d4:	40048b00 	call	40048b0 <__mulsi3>
 40075d8:	b80b883a 	mov	r5,r23
 40075dc:	9809883a 	mov	r4,r19
 40075e0:	102b883a 	mov	r21,r2
 40075e4:	40048b00 	call	40048b0 <__mulsi3>
 40075e8:	b809883a 	mov	r4,r23
 40075ec:	b00b883a 	mov	r5,r22
 40075f0:	1039883a 	mov	fp,r2
 40075f4:	40048b00 	call	40048b0 <__mulsi3>
 40075f8:	a008d43a 	srli	r4,r20,16
 40075fc:	1545883a 	add	r2,r2,r21
 4007600:	d8c00517 	ldw	r3,20(sp)
 4007604:	2085883a 	add	r2,r4,r2
 4007608:	d9800717 	ldw	r6,28(sp)
 400760c:	da000617 	ldw	r8,24(sp)
 4007610:	1540022e 	bgeu	r2,r21,400761c <__muldf3+0x3c4>
 4007614:	01000074 	movhi	r4,1
 4007618:	e139883a 	add	fp,fp,r4
 400761c:	100e943a 	slli	r7,r2,16
 4007620:	1004d43a 	srli	r2,r2,16
 4007624:	882ad43a 	srli	r21,r17,16
 4007628:	a53fffcc 	andi	r20,r20,65535
 400762c:	8c7fffcc 	andi	r17,r17,65535
 4007630:	3d29883a 	add	r20,r7,r20
 4007634:	b00b883a 	mov	r5,r22
 4007638:	8809883a 	mov	r4,r17
 400763c:	d8c00515 	stw	r3,20(sp)
 4007640:	d9800715 	stw	r6,28(sp)
 4007644:	da000615 	stw	r8,24(sp)
 4007648:	dd000115 	stw	r20,4(sp)
 400764c:	d8800015 	stw	r2,0(sp)
 4007650:	40048b00 	call	40048b0 <__mulsi3>
 4007654:	980b883a 	mov	r5,r19
 4007658:	8809883a 	mov	r4,r17
 400765c:	d8800215 	stw	r2,8(sp)
 4007660:	40048b00 	call	40048b0 <__mulsi3>
 4007664:	9809883a 	mov	r4,r19
 4007668:	a80b883a 	mov	r5,r21
 400766c:	1029883a 	mov	r20,r2
 4007670:	40048b00 	call	40048b0 <__mulsi3>
 4007674:	b00b883a 	mov	r5,r22
 4007678:	a809883a 	mov	r4,r21
 400767c:	d8800415 	stw	r2,16(sp)
 4007680:	40048b00 	call	40048b0 <__mulsi3>
 4007684:	d9c00217 	ldw	r7,8(sp)
 4007688:	1505883a 	add	r2,r2,r20
 400768c:	d8c00517 	ldw	r3,20(sp)
 4007690:	3826d43a 	srli	r19,r7,16
 4007694:	d9800717 	ldw	r6,28(sp)
 4007698:	da000617 	ldw	r8,24(sp)
 400769c:	9885883a 	add	r2,r19,r2
 40076a0:	da400417 	ldw	r9,16(sp)
 40076a4:	1500022e 	bgeu	r2,r20,40076b0 <__muldf3+0x458>
 40076a8:	01000074 	movhi	r4,1
 40076ac:	4913883a 	add	r9,r9,r4
 40076b0:	1028d43a 	srli	r20,r2,16
 40076b4:	1004943a 	slli	r2,r2,16
 40076b8:	802cd43a 	srli	r22,r16,16
 40076bc:	843fffcc 	andi	r16,r16,65535
 40076c0:	3cffffcc 	andi	r19,r7,65535
 40076c4:	9009883a 	mov	r4,r18
 40076c8:	800b883a 	mov	r5,r16
 40076cc:	a269883a 	add	r20,r20,r9
 40076d0:	d8c00515 	stw	r3,20(sp)
 40076d4:	d9800715 	stw	r6,28(sp)
 40076d8:	da000615 	stw	r8,24(sp)
 40076dc:	14e7883a 	add	r19,r2,r19
 40076e0:	40048b00 	call	40048b0 <__mulsi3>
 40076e4:	9009883a 	mov	r4,r18
 40076e8:	b00b883a 	mov	r5,r22
 40076ec:	d8800315 	stw	r2,12(sp)
 40076f0:	40048b00 	call	40048b0 <__mulsi3>
 40076f4:	b809883a 	mov	r4,r23
 40076f8:	b00b883a 	mov	r5,r22
 40076fc:	d8800215 	stw	r2,8(sp)
 4007700:	40048b00 	call	40048b0 <__mulsi3>
 4007704:	b80b883a 	mov	r5,r23
 4007708:	8009883a 	mov	r4,r16
 400770c:	d8800415 	stw	r2,16(sp)
 4007710:	40048b00 	call	40048b0 <__mulsi3>
 4007714:	da800317 	ldw	r10,12(sp)
 4007718:	d9c00217 	ldw	r7,8(sp)
 400771c:	d9000017 	ldw	r4,0(sp)
 4007720:	502ed43a 	srli	r23,r10,16
 4007724:	11c5883a 	add	r2,r2,r7
 4007728:	24e5883a 	add	r18,r4,r19
 400772c:	b885883a 	add	r2,r23,r2
 4007730:	d8c00517 	ldw	r3,20(sp)
 4007734:	d9800717 	ldw	r6,28(sp)
 4007738:	da000617 	ldw	r8,24(sp)
 400773c:	da400417 	ldw	r9,16(sp)
 4007740:	11c0022e 	bgeu	r2,r7,400774c <__muldf3+0x4f4>
 4007744:	01000074 	movhi	r4,1
 4007748:	4913883a 	add	r9,r9,r4
 400774c:	100ed43a 	srli	r7,r2,16
 4007750:	1004943a 	slli	r2,r2,16
 4007754:	55ffffcc 	andi	r23,r10,65535
 4007758:	3a53883a 	add	r9,r7,r9
 400775c:	8809883a 	mov	r4,r17
 4007760:	800b883a 	mov	r5,r16
 4007764:	d8c00515 	stw	r3,20(sp)
 4007768:	d9800715 	stw	r6,28(sp)
 400776c:	da000615 	stw	r8,24(sp)
 4007770:	da400415 	stw	r9,16(sp)
 4007774:	15ef883a 	add	r23,r2,r23
 4007778:	40048b00 	call	40048b0 <__mulsi3>
 400777c:	8809883a 	mov	r4,r17
 4007780:	b00b883a 	mov	r5,r22
 4007784:	d8800215 	stw	r2,8(sp)
 4007788:	40048b00 	call	40048b0 <__mulsi3>
 400778c:	b00b883a 	mov	r5,r22
 4007790:	a809883a 	mov	r4,r21
 4007794:	d8800315 	stw	r2,12(sp)
 4007798:	40048b00 	call	40048b0 <__mulsi3>
 400779c:	8009883a 	mov	r4,r16
 40077a0:	a80b883a 	mov	r5,r21
 40077a4:	1023883a 	mov	r17,r2
 40077a8:	40048b00 	call	40048b0 <__mulsi3>
 40077ac:	d9c00217 	ldw	r7,8(sp)
 40077b0:	da800317 	ldw	r10,12(sp)
 40077b4:	d8c00517 	ldw	r3,20(sp)
 40077b8:	3808d43a 	srli	r4,r7,16
 40077bc:	1285883a 	add	r2,r2,r10
 40077c0:	d9800717 	ldw	r6,28(sp)
 40077c4:	2085883a 	add	r2,r4,r2
 40077c8:	da000617 	ldw	r8,24(sp)
 40077cc:	da400417 	ldw	r9,16(sp)
 40077d0:	1280022e 	bgeu	r2,r10,40077dc <__muldf3+0x584>
 40077d4:	01000074 	movhi	r4,1
 40077d8:	8923883a 	add	r17,r17,r4
 40077dc:	1008943a 	slli	r4,r2,16
 40077e0:	39ffffcc 	andi	r7,r7,65535
 40077e4:	e4b9883a 	add	fp,fp,r18
 40077e8:	21cf883a 	add	r7,r4,r7
 40077ec:	e4e7803a 	cmpltu	r19,fp,r19
 40077f0:	3d0f883a 	add	r7,r7,r20
 40077f4:	bf39883a 	add	fp,r23,fp
 40077f8:	99c9883a 	add	r4,r19,r7
 40077fc:	e5ef803a 	cmpltu	r23,fp,r23
 4007800:	490b883a 	add	r5,r9,r4
 4007804:	1004d43a 	srli	r2,r2,16
 4007808:	b965883a 	add	r18,r23,r5
 400780c:	24c9803a 	cmpltu	r4,r4,r19
 4007810:	3d29803a 	cmpltu	r20,r7,r20
 4007814:	a128b03a 	or	r20,r20,r4
 4007818:	95ef803a 	cmpltu	r23,r18,r23
 400781c:	2a53803a 	cmpltu	r9,r5,r9
 4007820:	a0a9883a 	add	r20,r20,r2
 4007824:	4deeb03a 	or	r23,r9,r23
 4007828:	a5ef883a 	add	r23,r20,r23
 400782c:	bc63883a 	add	r17,r23,r17
 4007830:	e004927a 	slli	r2,fp,9
 4007834:	d9000117 	ldw	r4,4(sp)
 4007838:	882e927a 	slli	r23,r17,9
 400783c:	9022d5fa 	srli	r17,r18,23
 4007840:	e038d5fa 	srli	fp,fp,23
 4007844:	1104b03a 	or	r2,r2,r4
 4007848:	9024927a 	slli	r18,r18,9
 400784c:	1004c03a 	cmpne	r2,r2,zero
 4007850:	bc62b03a 	or	r17,r23,r17
 4007854:	1738b03a 	or	fp,r2,fp
 4007858:	8880402c 	andhi	r2,r17,256
 400785c:	e4a4b03a 	or	r18,fp,r18
 4007860:	10000726 	beq	r2,zero,4007880 <__muldf3+0x628>
 4007864:	9006d07a 	srli	r3,r18,1
 4007868:	880497fa 	slli	r2,r17,31
 400786c:	9480004c 	andi	r18,r18,1
 4007870:	8822d07a 	srli	r17,r17,1
 4007874:	1ca4b03a 	or	r18,r3,r18
 4007878:	14a4b03a 	or	r18,r2,r18
 400787c:	4007883a 	mov	r3,r8
 4007880:	1880ffc4 	addi	r2,r3,1023
 4007884:	0080460e 	bge	zero,r2,40079a0 <__muldf3+0x748>
 4007888:	910001cc 	andi	r4,r18,7
 400788c:	20000726 	beq	r4,zero,40078ac <__muldf3+0x654>
 4007890:	910003cc 	andi	r4,r18,15
 4007894:	01400104 	movi	r5,4
 4007898:	21400426 	beq	r4,r5,40078ac <__muldf3+0x654>
 400789c:	9149883a 	add	r4,r18,r5
 40078a0:	24a5803a 	cmpltu	r18,r4,r18
 40078a4:	8ca3883a 	add	r17,r17,r18
 40078a8:	2025883a 	mov	r18,r4
 40078ac:	8900402c 	andhi	r4,r17,256
 40078b0:	20000426 	beq	r4,zero,40078c4 <__muldf3+0x66c>
 40078b4:	18810004 	addi	r2,r3,1024
 40078b8:	00ffc034 	movhi	r3,65280
 40078bc:	18ffffc4 	addi	r3,r3,-1
 40078c0:	88e2703a 	and	r17,r17,r3
 40078c4:	00c1ff84 	movi	r3,2046
 40078c8:	18bf1316 	blt	r3,r2,4007518 <__alt_data_end+0xfc007518>
 40078cc:	882c977a 	slli	r22,r17,29
 40078d0:	9024d0fa 	srli	r18,r18,3
 40078d4:	8822927a 	slli	r17,r17,9
 40078d8:	1081ffcc 	andi	r2,r2,2047
 40078dc:	b4acb03a 	or	r22,r22,r18
 40078e0:	8820d33a 	srli	r16,r17,12
 40078e4:	3027883a 	mov	r19,r6
 40078e8:	003eba06 	br	40073d4 <__alt_data_end+0xfc0073d4>
 40078ec:	8080022c 	andhi	r2,r16,8
 40078f0:	10000926 	beq	r2,zero,4007918 <__muldf3+0x6c0>
 40078f4:	8880022c 	andhi	r2,r17,8
 40078f8:	1000071e 	bne	r2,zero,4007918 <__muldf3+0x6c0>
 40078fc:	00800434 	movhi	r2,16
 4007900:	8c000234 	orhi	r16,r17,8
 4007904:	10bfffc4 	addi	r2,r2,-1
 4007908:	e027883a 	mov	r19,fp
 400790c:	80a0703a 	and	r16,r16,r2
 4007910:	902d883a 	mov	r22,r18
 4007914:	003f1706 	br	4007574 <__alt_data_end+0xfc007574>
 4007918:	00800434 	movhi	r2,16
 400791c:	84000234 	orhi	r16,r16,8
 4007920:	10bfffc4 	addi	r2,r2,-1
 4007924:	80a0703a 	and	r16,r16,r2
 4007928:	003f1206 	br	4007574 <__alt_data_end+0xfc007574>
 400792c:	147ff604 	addi	r17,r2,-40
 4007930:	3462983a 	sll	r17,r6,r17
 4007934:	0025883a 	mov	r18,zero
 4007938:	003ef306 	br	4007508 <__alt_data_end+0xfc007508>
 400793c:	3009883a 	mov	r4,r6
 4007940:	d9400215 	stw	r5,8(sp)
 4007944:	d9800715 	stw	r6,28(sp)
 4007948:	da400415 	stw	r9,16(sp)
 400794c:	da800315 	stw	r10,12(sp)
 4007950:	400887c0 	call	400887c <__clzsi2>
 4007954:	10800804 	addi	r2,r2,32
 4007958:	da800317 	ldw	r10,12(sp)
 400795c:	da400417 	ldw	r9,16(sp)
 4007960:	d9800717 	ldw	r6,28(sp)
 4007964:	d9400217 	ldw	r5,8(sp)
 4007968:	003edd06 	br	40074e0 <__alt_data_end+0xfc0074e0>
 400796c:	143ff604 	addi	r16,r2,-40
 4007970:	ac20983a 	sll	r16,r21,r16
 4007974:	002d883a 	mov	r22,zero
 4007978:	003ec106 	br	4007480 <__alt_data_end+0xfc007480>
 400797c:	d9800715 	stw	r6,28(sp)
 4007980:	d9c00215 	stw	r7,8(sp)
 4007984:	da400415 	stw	r9,16(sp)
 4007988:	400887c0 	call	400887c <__clzsi2>
 400798c:	10800804 	addi	r2,r2,32
 4007990:	da400417 	ldw	r9,16(sp)
 4007994:	d9c00217 	ldw	r7,8(sp)
 4007998:	d9800717 	ldw	r6,28(sp)
 400799c:	003eae06 	br	4007458 <__alt_data_end+0xfc007458>
 40079a0:	00c00044 	movi	r3,1
 40079a4:	1887c83a 	sub	r3,r3,r2
 40079a8:	01000e04 	movi	r4,56
 40079ac:	20fe8516 	blt	r4,r3,40073c4 <__alt_data_end+0xfc0073c4>
 40079b0:	010007c4 	movi	r4,31
 40079b4:	20c01b16 	blt	r4,r3,4007a24 <__muldf3+0x7cc>
 40079b8:	00800804 	movi	r2,32
 40079bc:	10c5c83a 	sub	r2,r2,r3
 40079c0:	888a983a 	sll	r5,r17,r2
 40079c4:	90c8d83a 	srl	r4,r18,r3
 40079c8:	9084983a 	sll	r2,r18,r2
 40079cc:	88e2d83a 	srl	r17,r17,r3
 40079d0:	2906b03a 	or	r3,r5,r4
 40079d4:	1004c03a 	cmpne	r2,r2,zero
 40079d8:	1886b03a 	or	r3,r3,r2
 40079dc:	188001cc 	andi	r2,r3,7
 40079e0:	10000726 	beq	r2,zero,4007a00 <__muldf3+0x7a8>
 40079e4:	188003cc 	andi	r2,r3,15
 40079e8:	01000104 	movi	r4,4
 40079ec:	11000426 	beq	r2,r4,4007a00 <__muldf3+0x7a8>
 40079f0:	1805883a 	mov	r2,r3
 40079f4:	10c00104 	addi	r3,r2,4
 40079f8:	1885803a 	cmpltu	r2,r3,r2
 40079fc:	88a3883a 	add	r17,r17,r2
 4007a00:	8880202c 	andhi	r2,r17,128
 4007a04:	10001c26 	beq	r2,zero,4007a78 <__muldf3+0x820>
 4007a08:	3027883a 	mov	r19,r6
 4007a0c:	00800044 	movi	r2,1
 4007a10:	0021883a 	mov	r16,zero
 4007a14:	002d883a 	mov	r22,zero
 4007a18:	003e6e06 	br	40073d4 <__alt_data_end+0xfc0073d4>
 4007a1c:	4007883a 	mov	r3,r8
 4007a20:	003f9706 	br	4007880 <__alt_data_end+0xfc007880>
 4007a24:	017ff844 	movi	r5,-31
 4007a28:	2885c83a 	sub	r2,r5,r2
 4007a2c:	888ad83a 	srl	r5,r17,r2
 4007a30:	00800804 	movi	r2,32
 4007a34:	18801a26 	beq	r3,r2,4007aa0 <__muldf3+0x848>
 4007a38:	01001004 	movi	r4,64
 4007a3c:	20c7c83a 	sub	r3,r4,r3
 4007a40:	88e2983a 	sll	r17,r17,r3
 4007a44:	8ca4b03a 	or	r18,r17,r18
 4007a48:	9004c03a 	cmpne	r2,r18,zero
 4007a4c:	2884b03a 	or	r2,r5,r2
 4007a50:	144001cc 	andi	r17,r2,7
 4007a54:	88000d1e 	bne	r17,zero,4007a8c <__muldf3+0x834>
 4007a58:	0021883a 	mov	r16,zero
 4007a5c:	102cd0fa 	srli	r22,r2,3
 4007a60:	3027883a 	mov	r19,r6
 4007a64:	0005883a 	mov	r2,zero
 4007a68:	b46cb03a 	or	r22,r22,r17
 4007a6c:	003e5906 	br	40073d4 <__alt_data_end+0xfc0073d4>
 4007a70:	1007883a 	mov	r3,r2
 4007a74:	0023883a 	mov	r17,zero
 4007a78:	8820927a 	slli	r16,r17,9
 4007a7c:	1805883a 	mov	r2,r3
 4007a80:	8822977a 	slli	r17,r17,29
 4007a84:	8020d33a 	srli	r16,r16,12
 4007a88:	003ff406 	br	4007a5c <__alt_data_end+0xfc007a5c>
 4007a8c:	10c003cc 	andi	r3,r2,15
 4007a90:	01000104 	movi	r4,4
 4007a94:	193ff626 	beq	r3,r4,4007a70 <__alt_data_end+0xfc007a70>
 4007a98:	0023883a 	mov	r17,zero
 4007a9c:	003fd506 	br	40079f4 <__alt_data_end+0xfc0079f4>
 4007aa0:	0023883a 	mov	r17,zero
 4007aa4:	003fe706 	br	4007a44 <__alt_data_end+0xfc007a44>
 4007aa8:	00800434 	movhi	r2,16
 4007aac:	8c000234 	orhi	r16,r17,8
 4007ab0:	10bfffc4 	addi	r2,r2,-1
 4007ab4:	3027883a 	mov	r19,r6
 4007ab8:	80a0703a 	and	r16,r16,r2
 4007abc:	902d883a 	mov	r22,r18
 4007ac0:	003eac06 	br	4007574 <__alt_data_end+0xfc007574>

04007ac4 <__subdf3>:
 4007ac4:	02000434 	movhi	r8,16
 4007ac8:	423fffc4 	addi	r8,r8,-1
 4007acc:	defffb04 	addi	sp,sp,-20
 4007ad0:	2a14703a 	and	r10,r5,r8
 4007ad4:	3812d53a 	srli	r9,r7,20
 4007ad8:	3a10703a 	and	r8,r7,r8
 4007adc:	2006d77a 	srli	r3,r4,29
 4007ae0:	3004d77a 	srli	r2,r6,29
 4007ae4:	dc000015 	stw	r16,0(sp)
 4007ae8:	501490fa 	slli	r10,r10,3
 4007aec:	2820d53a 	srli	r16,r5,20
 4007af0:	401090fa 	slli	r8,r8,3
 4007af4:	dc800215 	stw	r18,8(sp)
 4007af8:	dc400115 	stw	r17,4(sp)
 4007afc:	dfc00415 	stw	ra,16(sp)
 4007b00:	202290fa 	slli	r17,r4,3
 4007b04:	dcc00315 	stw	r19,12(sp)
 4007b08:	4a41ffcc 	andi	r9,r9,2047
 4007b0c:	0101ffc4 	movi	r4,2047
 4007b10:	2824d7fa 	srli	r18,r5,31
 4007b14:	8401ffcc 	andi	r16,r16,2047
 4007b18:	50c6b03a 	or	r3,r10,r3
 4007b1c:	380ed7fa 	srli	r7,r7,31
 4007b20:	408ab03a 	or	r5,r8,r2
 4007b24:	300c90fa 	slli	r6,r6,3
 4007b28:	49009626 	beq	r9,r4,4007d84 <__subdf3+0x2c0>
 4007b2c:	39c0005c 	xori	r7,r7,1
 4007b30:	8245c83a 	sub	r2,r16,r9
 4007b34:	3c807426 	beq	r7,r18,4007d08 <__subdf3+0x244>
 4007b38:	0080af0e 	bge	zero,r2,4007df8 <__subdf3+0x334>
 4007b3c:	48002a1e 	bne	r9,zero,4007be8 <__subdf3+0x124>
 4007b40:	2988b03a 	or	r4,r5,r6
 4007b44:	20009a1e 	bne	r4,zero,4007db0 <__subdf3+0x2ec>
 4007b48:	888001cc 	andi	r2,r17,7
 4007b4c:	10000726 	beq	r2,zero,4007b6c <__subdf3+0xa8>
 4007b50:	888003cc 	andi	r2,r17,15
 4007b54:	01000104 	movi	r4,4
 4007b58:	11000426 	beq	r2,r4,4007b6c <__subdf3+0xa8>
 4007b5c:	890b883a 	add	r5,r17,r4
 4007b60:	2c63803a 	cmpltu	r17,r5,r17
 4007b64:	1c47883a 	add	r3,r3,r17
 4007b68:	2823883a 	mov	r17,r5
 4007b6c:	1880202c 	andhi	r2,r3,128
 4007b70:	10005926 	beq	r2,zero,4007cd8 <__subdf3+0x214>
 4007b74:	84000044 	addi	r16,r16,1
 4007b78:	0081ffc4 	movi	r2,2047
 4007b7c:	8080be26 	beq	r16,r2,4007e78 <__subdf3+0x3b4>
 4007b80:	017fe034 	movhi	r5,65408
 4007b84:	297fffc4 	addi	r5,r5,-1
 4007b88:	1946703a 	and	r3,r3,r5
 4007b8c:	1804977a 	slli	r2,r3,29
 4007b90:	1806927a 	slli	r3,r3,9
 4007b94:	8822d0fa 	srli	r17,r17,3
 4007b98:	8401ffcc 	andi	r16,r16,2047
 4007b9c:	180ad33a 	srli	r5,r3,12
 4007ba0:	9100004c 	andi	r4,r18,1
 4007ba4:	1444b03a 	or	r2,r2,r17
 4007ba8:	80c1ffcc 	andi	r3,r16,2047
 4007bac:	1820953a 	slli	r16,r3,20
 4007bb0:	20c03fcc 	andi	r3,r4,255
 4007bb4:	180897fa 	slli	r4,r3,31
 4007bb8:	00c00434 	movhi	r3,16
 4007bbc:	18ffffc4 	addi	r3,r3,-1
 4007bc0:	28c6703a 	and	r3,r5,r3
 4007bc4:	1c06b03a 	or	r3,r3,r16
 4007bc8:	1906b03a 	or	r3,r3,r4
 4007bcc:	dfc00417 	ldw	ra,16(sp)
 4007bd0:	dcc00317 	ldw	r19,12(sp)
 4007bd4:	dc800217 	ldw	r18,8(sp)
 4007bd8:	dc400117 	ldw	r17,4(sp)
 4007bdc:	dc000017 	ldw	r16,0(sp)
 4007be0:	dec00504 	addi	sp,sp,20
 4007be4:	f800283a 	ret
 4007be8:	0101ffc4 	movi	r4,2047
 4007bec:	813fd626 	beq	r16,r4,4007b48 <__alt_data_end+0xfc007b48>
 4007bf0:	29402034 	orhi	r5,r5,128
 4007bf4:	01000e04 	movi	r4,56
 4007bf8:	2080a316 	blt	r4,r2,4007e88 <__subdf3+0x3c4>
 4007bfc:	010007c4 	movi	r4,31
 4007c00:	2080c616 	blt	r4,r2,4007f1c <__subdf3+0x458>
 4007c04:	01000804 	movi	r4,32
 4007c08:	2089c83a 	sub	r4,r4,r2
 4007c0c:	2910983a 	sll	r8,r5,r4
 4007c10:	308ed83a 	srl	r7,r6,r2
 4007c14:	3108983a 	sll	r4,r6,r4
 4007c18:	2884d83a 	srl	r2,r5,r2
 4007c1c:	41ccb03a 	or	r6,r8,r7
 4007c20:	2008c03a 	cmpne	r4,r4,zero
 4007c24:	310cb03a 	or	r6,r6,r4
 4007c28:	898dc83a 	sub	r6,r17,r6
 4007c2c:	89a3803a 	cmpltu	r17,r17,r6
 4007c30:	1887c83a 	sub	r3,r3,r2
 4007c34:	1c47c83a 	sub	r3,r3,r17
 4007c38:	3023883a 	mov	r17,r6
 4007c3c:	1880202c 	andhi	r2,r3,128
 4007c40:	10002326 	beq	r2,zero,4007cd0 <__subdf3+0x20c>
 4007c44:	04c02034 	movhi	r19,128
 4007c48:	9cffffc4 	addi	r19,r19,-1
 4007c4c:	1ce6703a 	and	r19,r3,r19
 4007c50:	98007a26 	beq	r19,zero,4007e3c <__subdf3+0x378>
 4007c54:	9809883a 	mov	r4,r19
 4007c58:	400887c0 	call	400887c <__clzsi2>
 4007c5c:	113ffe04 	addi	r4,r2,-8
 4007c60:	00c007c4 	movi	r3,31
 4007c64:	19007b16 	blt	r3,r4,4007e54 <__subdf3+0x390>
 4007c68:	00800804 	movi	r2,32
 4007c6c:	1105c83a 	sub	r2,r2,r4
 4007c70:	8884d83a 	srl	r2,r17,r2
 4007c74:	9906983a 	sll	r3,r19,r4
 4007c78:	8922983a 	sll	r17,r17,r4
 4007c7c:	10c4b03a 	or	r2,r2,r3
 4007c80:	24007816 	blt	r4,r16,4007e64 <__subdf3+0x3a0>
 4007c84:	2421c83a 	sub	r16,r4,r16
 4007c88:	80c00044 	addi	r3,r16,1
 4007c8c:	010007c4 	movi	r4,31
 4007c90:	20c09516 	blt	r4,r3,4007ee8 <__subdf3+0x424>
 4007c94:	01400804 	movi	r5,32
 4007c98:	28cbc83a 	sub	r5,r5,r3
 4007c9c:	88c8d83a 	srl	r4,r17,r3
 4007ca0:	8962983a 	sll	r17,r17,r5
 4007ca4:	114a983a 	sll	r5,r2,r5
 4007ca8:	10c6d83a 	srl	r3,r2,r3
 4007cac:	8804c03a 	cmpne	r2,r17,zero
 4007cb0:	290ab03a 	or	r5,r5,r4
 4007cb4:	28a2b03a 	or	r17,r5,r2
 4007cb8:	0021883a 	mov	r16,zero
 4007cbc:	003fa206 	br	4007b48 <__alt_data_end+0xfc007b48>
 4007cc0:	2090b03a 	or	r8,r4,r2
 4007cc4:	40018e26 	beq	r8,zero,4008300 <__subdf3+0x83c>
 4007cc8:	1007883a 	mov	r3,r2
 4007ccc:	2023883a 	mov	r17,r4
 4007cd0:	888001cc 	andi	r2,r17,7
 4007cd4:	103f9e1e 	bne	r2,zero,4007b50 <__alt_data_end+0xfc007b50>
 4007cd8:	1804977a 	slli	r2,r3,29
 4007cdc:	8822d0fa 	srli	r17,r17,3
 4007ce0:	1810d0fa 	srli	r8,r3,3
 4007ce4:	9100004c 	andi	r4,r18,1
 4007ce8:	1444b03a 	or	r2,r2,r17
 4007cec:	00c1ffc4 	movi	r3,2047
 4007cf0:	80c02826 	beq	r16,r3,4007d94 <__subdf3+0x2d0>
 4007cf4:	01400434 	movhi	r5,16
 4007cf8:	297fffc4 	addi	r5,r5,-1
 4007cfc:	80e0703a 	and	r16,r16,r3
 4007d00:	414a703a 	and	r5,r8,r5
 4007d04:	003fa806 	br	4007ba8 <__alt_data_end+0xfc007ba8>
 4007d08:	0080630e 	bge	zero,r2,4007e98 <__subdf3+0x3d4>
 4007d0c:	48003026 	beq	r9,zero,4007dd0 <__subdf3+0x30c>
 4007d10:	0101ffc4 	movi	r4,2047
 4007d14:	813f8c26 	beq	r16,r4,4007b48 <__alt_data_end+0xfc007b48>
 4007d18:	29402034 	orhi	r5,r5,128
 4007d1c:	01000e04 	movi	r4,56
 4007d20:	2080a90e 	bge	r4,r2,4007fc8 <__subdf3+0x504>
 4007d24:	298cb03a 	or	r6,r5,r6
 4007d28:	3012c03a 	cmpne	r9,r6,zero
 4007d2c:	0005883a 	mov	r2,zero
 4007d30:	4c53883a 	add	r9,r9,r17
 4007d34:	4c63803a 	cmpltu	r17,r9,r17
 4007d38:	10c7883a 	add	r3,r2,r3
 4007d3c:	88c7883a 	add	r3,r17,r3
 4007d40:	4823883a 	mov	r17,r9
 4007d44:	1880202c 	andhi	r2,r3,128
 4007d48:	1000d026 	beq	r2,zero,400808c <__subdf3+0x5c8>
 4007d4c:	84000044 	addi	r16,r16,1
 4007d50:	0081ffc4 	movi	r2,2047
 4007d54:	8080fe26 	beq	r16,r2,4008150 <__subdf3+0x68c>
 4007d58:	00bfe034 	movhi	r2,65408
 4007d5c:	10bfffc4 	addi	r2,r2,-1
 4007d60:	1886703a 	and	r3,r3,r2
 4007d64:	880ad07a 	srli	r5,r17,1
 4007d68:	180497fa 	slli	r2,r3,31
 4007d6c:	8900004c 	andi	r4,r17,1
 4007d70:	2922b03a 	or	r17,r5,r4
 4007d74:	1806d07a 	srli	r3,r3,1
 4007d78:	1462b03a 	or	r17,r2,r17
 4007d7c:	3825883a 	mov	r18,r7
 4007d80:	003f7106 	br	4007b48 <__alt_data_end+0xfc007b48>
 4007d84:	2984b03a 	or	r2,r5,r6
 4007d88:	103f6826 	beq	r2,zero,4007b2c <__alt_data_end+0xfc007b2c>
 4007d8c:	39c03fcc 	andi	r7,r7,255
 4007d90:	003f6706 	br	4007b30 <__alt_data_end+0xfc007b30>
 4007d94:	4086b03a 	or	r3,r8,r2
 4007d98:	18015226 	beq	r3,zero,40082e4 <__subdf3+0x820>
 4007d9c:	00c00434 	movhi	r3,16
 4007da0:	41400234 	orhi	r5,r8,8
 4007da4:	18ffffc4 	addi	r3,r3,-1
 4007da8:	28ca703a 	and	r5,r5,r3
 4007dac:	003f7e06 	br	4007ba8 <__alt_data_end+0xfc007ba8>
 4007db0:	10bfffc4 	addi	r2,r2,-1
 4007db4:	1000491e 	bne	r2,zero,4007edc <__subdf3+0x418>
 4007db8:	898fc83a 	sub	r7,r17,r6
 4007dbc:	89e3803a 	cmpltu	r17,r17,r7
 4007dc0:	1947c83a 	sub	r3,r3,r5
 4007dc4:	1c47c83a 	sub	r3,r3,r17
 4007dc8:	3823883a 	mov	r17,r7
 4007dcc:	003f9b06 	br	4007c3c <__alt_data_end+0xfc007c3c>
 4007dd0:	2988b03a 	or	r4,r5,r6
 4007dd4:	203f5c26 	beq	r4,zero,4007b48 <__alt_data_end+0xfc007b48>
 4007dd8:	10bfffc4 	addi	r2,r2,-1
 4007ddc:	1000931e 	bne	r2,zero,400802c <__subdf3+0x568>
 4007de0:	898d883a 	add	r6,r17,r6
 4007de4:	3463803a 	cmpltu	r17,r6,r17
 4007de8:	1947883a 	add	r3,r3,r5
 4007dec:	88c7883a 	add	r3,r17,r3
 4007df0:	3023883a 	mov	r17,r6
 4007df4:	003fd306 	br	4007d44 <__alt_data_end+0xfc007d44>
 4007df8:	1000541e 	bne	r2,zero,4007f4c <__subdf3+0x488>
 4007dfc:	80800044 	addi	r2,r16,1
 4007e00:	1081ffcc 	andi	r2,r2,2047
 4007e04:	01000044 	movi	r4,1
 4007e08:	2080a20e 	bge	r4,r2,4008094 <__subdf3+0x5d0>
 4007e0c:	8989c83a 	sub	r4,r17,r6
 4007e10:	8905803a 	cmpltu	r2,r17,r4
 4007e14:	1967c83a 	sub	r19,r3,r5
 4007e18:	98a7c83a 	sub	r19,r19,r2
 4007e1c:	9880202c 	andhi	r2,r19,128
 4007e20:	10006326 	beq	r2,zero,4007fb0 <__subdf3+0x4ec>
 4007e24:	3463c83a 	sub	r17,r6,r17
 4007e28:	28c7c83a 	sub	r3,r5,r3
 4007e2c:	344d803a 	cmpltu	r6,r6,r17
 4007e30:	19a7c83a 	sub	r19,r3,r6
 4007e34:	3825883a 	mov	r18,r7
 4007e38:	983f861e 	bne	r19,zero,4007c54 <__alt_data_end+0xfc007c54>
 4007e3c:	8809883a 	mov	r4,r17
 4007e40:	400887c0 	call	400887c <__clzsi2>
 4007e44:	10800804 	addi	r2,r2,32
 4007e48:	113ffe04 	addi	r4,r2,-8
 4007e4c:	00c007c4 	movi	r3,31
 4007e50:	193f850e 	bge	r3,r4,4007c68 <__alt_data_end+0xfc007c68>
 4007e54:	10bff604 	addi	r2,r2,-40
 4007e58:	8884983a 	sll	r2,r17,r2
 4007e5c:	0023883a 	mov	r17,zero
 4007e60:	243f880e 	bge	r4,r16,4007c84 <__alt_data_end+0xfc007c84>
 4007e64:	00ffe034 	movhi	r3,65408
 4007e68:	18ffffc4 	addi	r3,r3,-1
 4007e6c:	8121c83a 	sub	r16,r16,r4
 4007e70:	10c6703a 	and	r3,r2,r3
 4007e74:	003f3406 	br	4007b48 <__alt_data_end+0xfc007b48>
 4007e78:	9100004c 	andi	r4,r18,1
 4007e7c:	000b883a 	mov	r5,zero
 4007e80:	0005883a 	mov	r2,zero
 4007e84:	003f4806 	br	4007ba8 <__alt_data_end+0xfc007ba8>
 4007e88:	298cb03a 	or	r6,r5,r6
 4007e8c:	300cc03a 	cmpne	r6,r6,zero
 4007e90:	0005883a 	mov	r2,zero
 4007e94:	003f6406 	br	4007c28 <__alt_data_end+0xfc007c28>
 4007e98:	10009a1e 	bne	r2,zero,4008104 <__subdf3+0x640>
 4007e9c:	82400044 	addi	r9,r16,1
 4007ea0:	4881ffcc 	andi	r2,r9,2047
 4007ea4:	02800044 	movi	r10,1
 4007ea8:	5080670e 	bge	r10,r2,4008048 <__subdf3+0x584>
 4007eac:	0081ffc4 	movi	r2,2047
 4007eb0:	4880af26 	beq	r9,r2,4008170 <__subdf3+0x6ac>
 4007eb4:	898d883a 	add	r6,r17,r6
 4007eb8:	1945883a 	add	r2,r3,r5
 4007ebc:	3447803a 	cmpltu	r3,r6,r17
 4007ec0:	1887883a 	add	r3,r3,r2
 4007ec4:	182297fa 	slli	r17,r3,31
 4007ec8:	300cd07a 	srli	r6,r6,1
 4007ecc:	1806d07a 	srli	r3,r3,1
 4007ed0:	4821883a 	mov	r16,r9
 4007ed4:	89a2b03a 	or	r17,r17,r6
 4007ed8:	003f1b06 	br	4007b48 <__alt_data_end+0xfc007b48>
 4007edc:	0101ffc4 	movi	r4,2047
 4007ee0:	813f441e 	bne	r16,r4,4007bf4 <__alt_data_end+0xfc007bf4>
 4007ee4:	003f1806 	br	4007b48 <__alt_data_end+0xfc007b48>
 4007ee8:	843ff844 	addi	r16,r16,-31
 4007eec:	01400804 	movi	r5,32
 4007ef0:	1408d83a 	srl	r4,r2,r16
 4007ef4:	19405026 	beq	r3,r5,4008038 <__subdf3+0x574>
 4007ef8:	01401004 	movi	r5,64
 4007efc:	28c7c83a 	sub	r3,r5,r3
 4007f00:	10c4983a 	sll	r2,r2,r3
 4007f04:	88a2b03a 	or	r17,r17,r2
 4007f08:	8822c03a 	cmpne	r17,r17,zero
 4007f0c:	2462b03a 	or	r17,r4,r17
 4007f10:	0007883a 	mov	r3,zero
 4007f14:	0021883a 	mov	r16,zero
 4007f18:	003f6d06 	br	4007cd0 <__alt_data_end+0xfc007cd0>
 4007f1c:	11fff804 	addi	r7,r2,-32
 4007f20:	01000804 	movi	r4,32
 4007f24:	29ced83a 	srl	r7,r5,r7
 4007f28:	11004526 	beq	r2,r4,4008040 <__subdf3+0x57c>
 4007f2c:	01001004 	movi	r4,64
 4007f30:	2089c83a 	sub	r4,r4,r2
 4007f34:	2904983a 	sll	r2,r5,r4
 4007f38:	118cb03a 	or	r6,r2,r6
 4007f3c:	300cc03a 	cmpne	r6,r6,zero
 4007f40:	398cb03a 	or	r6,r7,r6
 4007f44:	0005883a 	mov	r2,zero
 4007f48:	003f3706 	br	4007c28 <__alt_data_end+0xfc007c28>
 4007f4c:	80002a26 	beq	r16,zero,4007ff8 <__subdf3+0x534>
 4007f50:	0101ffc4 	movi	r4,2047
 4007f54:	49006626 	beq	r9,r4,40080f0 <__subdf3+0x62c>
 4007f58:	0085c83a 	sub	r2,zero,r2
 4007f5c:	18c02034 	orhi	r3,r3,128
 4007f60:	01000e04 	movi	r4,56
 4007f64:	20807e16 	blt	r4,r2,4008160 <__subdf3+0x69c>
 4007f68:	010007c4 	movi	r4,31
 4007f6c:	2080e716 	blt	r4,r2,400830c <__subdf3+0x848>
 4007f70:	01000804 	movi	r4,32
 4007f74:	2089c83a 	sub	r4,r4,r2
 4007f78:	1914983a 	sll	r10,r3,r4
 4007f7c:	8890d83a 	srl	r8,r17,r2
 4007f80:	8908983a 	sll	r4,r17,r4
 4007f84:	1884d83a 	srl	r2,r3,r2
 4007f88:	5222b03a 	or	r17,r10,r8
 4007f8c:	2006c03a 	cmpne	r3,r4,zero
 4007f90:	88e2b03a 	or	r17,r17,r3
 4007f94:	3463c83a 	sub	r17,r6,r17
 4007f98:	2885c83a 	sub	r2,r5,r2
 4007f9c:	344d803a 	cmpltu	r6,r6,r17
 4007fa0:	1187c83a 	sub	r3,r2,r6
 4007fa4:	4821883a 	mov	r16,r9
 4007fa8:	3825883a 	mov	r18,r7
 4007fac:	003f2306 	br	4007c3c <__alt_data_end+0xfc007c3c>
 4007fb0:	24d0b03a 	or	r8,r4,r19
 4007fb4:	40001b1e 	bne	r8,zero,4008024 <__subdf3+0x560>
 4007fb8:	0005883a 	mov	r2,zero
 4007fbc:	0009883a 	mov	r4,zero
 4007fc0:	0021883a 	mov	r16,zero
 4007fc4:	003f4906 	br	4007cec <__alt_data_end+0xfc007cec>
 4007fc8:	010007c4 	movi	r4,31
 4007fcc:	20803a16 	blt	r4,r2,40080b8 <__subdf3+0x5f4>
 4007fd0:	01000804 	movi	r4,32
 4007fd4:	2089c83a 	sub	r4,r4,r2
 4007fd8:	2912983a 	sll	r9,r5,r4
 4007fdc:	3090d83a 	srl	r8,r6,r2
 4007fe0:	3108983a 	sll	r4,r6,r4
 4007fe4:	2884d83a 	srl	r2,r5,r2
 4007fe8:	4a12b03a 	or	r9,r9,r8
 4007fec:	2008c03a 	cmpne	r4,r4,zero
 4007ff0:	4912b03a 	or	r9,r9,r4
 4007ff4:	003f4e06 	br	4007d30 <__alt_data_end+0xfc007d30>
 4007ff8:	1c48b03a 	or	r4,r3,r17
 4007ffc:	20003c26 	beq	r4,zero,40080f0 <__subdf3+0x62c>
 4008000:	0084303a 	nor	r2,zero,r2
 4008004:	1000381e 	bne	r2,zero,40080e8 <__subdf3+0x624>
 4008008:	3463c83a 	sub	r17,r6,r17
 400800c:	28c5c83a 	sub	r2,r5,r3
 4008010:	344d803a 	cmpltu	r6,r6,r17
 4008014:	1187c83a 	sub	r3,r2,r6
 4008018:	4821883a 	mov	r16,r9
 400801c:	3825883a 	mov	r18,r7
 4008020:	003f0606 	br	4007c3c <__alt_data_end+0xfc007c3c>
 4008024:	2023883a 	mov	r17,r4
 4008028:	003f0906 	br	4007c50 <__alt_data_end+0xfc007c50>
 400802c:	0101ffc4 	movi	r4,2047
 4008030:	813f3a1e 	bne	r16,r4,4007d1c <__alt_data_end+0xfc007d1c>
 4008034:	003ec406 	br	4007b48 <__alt_data_end+0xfc007b48>
 4008038:	0005883a 	mov	r2,zero
 400803c:	003fb106 	br	4007f04 <__alt_data_end+0xfc007f04>
 4008040:	0005883a 	mov	r2,zero
 4008044:	003fbc06 	br	4007f38 <__alt_data_end+0xfc007f38>
 4008048:	1c44b03a 	or	r2,r3,r17
 400804c:	80008e1e 	bne	r16,zero,4008288 <__subdf3+0x7c4>
 4008050:	1000c826 	beq	r2,zero,4008374 <__subdf3+0x8b0>
 4008054:	2984b03a 	or	r2,r5,r6
 4008058:	103ebb26 	beq	r2,zero,4007b48 <__alt_data_end+0xfc007b48>
 400805c:	8989883a 	add	r4,r17,r6
 4008060:	1945883a 	add	r2,r3,r5
 4008064:	2447803a 	cmpltu	r3,r4,r17
 4008068:	1887883a 	add	r3,r3,r2
 400806c:	1880202c 	andhi	r2,r3,128
 4008070:	2023883a 	mov	r17,r4
 4008074:	103f1626 	beq	r2,zero,4007cd0 <__alt_data_end+0xfc007cd0>
 4008078:	00bfe034 	movhi	r2,65408
 400807c:	10bfffc4 	addi	r2,r2,-1
 4008080:	5021883a 	mov	r16,r10
 4008084:	1886703a 	and	r3,r3,r2
 4008088:	003eaf06 	br	4007b48 <__alt_data_end+0xfc007b48>
 400808c:	3825883a 	mov	r18,r7
 4008090:	003f0f06 	br	4007cd0 <__alt_data_end+0xfc007cd0>
 4008094:	1c44b03a 	or	r2,r3,r17
 4008098:	8000251e 	bne	r16,zero,4008130 <__subdf3+0x66c>
 400809c:	1000661e 	bne	r2,zero,4008238 <__subdf3+0x774>
 40080a0:	2990b03a 	or	r8,r5,r6
 40080a4:	40009626 	beq	r8,zero,4008300 <__subdf3+0x83c>
 40080a8:	2807883a 	mov	r3,r5
 40080ac:	3023883a 	mov	r17,r6
 40080b0:	3825883a 	mov	r18,r7
 40080b4:	003ea406 	br	4007b48 <__alt_data_end+0xfc007b48>
 40080b8:	127ff804 	addi	r9,r2,-32
 40080bc:	01000804 	movi	r4,32
 40080c0:	2a52d83a 	srl	r9,r5,r9
 40080c4:	11008c26 	beq	r2,r4,40082f8 <__subdf3+0x834>
 40080c8:	01001004 	movi	r4,64
 40080cc:	2085c83a 	sub	r2,r4,r2
 40080d0:	2884983a 	sll	r2,r5,r2
 40080d4:	118cb03a 	or	r6,r2,r6
 40080d8:	300cc03a 	cmpne	r6,r6,zero
 40080dc:	4992b03a 	or	r9,r9,r6
 40080e0:	0005883a 	mov	r2,zero
 40080e4:	003f1206 	br	4007d30 <__alt_data_end+0xfc007d30>
 40080e8:	0101ffc4 	movi	r4,2047
 40080ec:	493f9c1e 	bne	r9,r4,4007f60 <__alt_data_end+0xfc007f60>
 40080f0:	2807883a 	mov	r3,r5
 40080f4:	3023883a 	mov	r17,r6
 40080f8:	4821883a 	mov	r16,r9
 40080fc:	3825883a 	mov	r18,r7
 4008100:	003e9106 	br	4007b48 <__alt_data_end+0xfc007b48>
 4008104:	80001f1e 	bne	r16,zero,4008184 <__subdf3+0x6c0>
 4008108:	1c48b03a 	or	r4,r3,r17
 400810c:	20005a26 	beq	r4,zero,4008278 <__subdf3+0x7b4>
 4008110:	0084303a 	nor	r2,zero,r2
 4008114:	1000561e 	bne	r2,zero,4008270 <__subdf3+0x7ac>
 4008118:	89a3883a 	add	r17,r17,r6
 400811c:	1945883a 	add	r2,r3,r5
 4008120:	898d803a 	cmpltu	r6,r17,r6
 4008124:	3087883a 	add	r3,r6,r2
 4008128:	4821883a 	mov	r16,r9
 400812c:	003f0506 	br	4007d44 <__alt_data_end+0xfc007d44>
 4008130:	10002b1e 	bne	r2,zero,40081e0 <__subdf3+0x71c>
 4008134:	2984b03a 	or	r2,r5,r6
 4008138:	10008026 	beq	r2,zero,400833c <__subdf3+0x878>
 400813c:	2807883a 	mov	r3,r5
 4008140:	3023883a 	mov	r17,r6
 4008144:	3825883a 	mov	r18,r7
 4008148:	0401ffc4 	movi	r16,2047
 400814c:	003e7e06 	br	4007b48 <__alt_data_end+0xfc007b48>
 4008150:	3809883a 	mov	r4,r7
 4008154:	0011883a 	mov	r8,zero
 4008158:	0005883a 	mov	r2,zero
 400815c:	003ee306 	br	4007cec <__alt_data_end+0xfc007cec>
 4008160:	1c62b03a 	or	r17,r3,r17
 4008164:	8822c03a 	cmpne	r17,r17,zero
 4008168:	0005883a 	mov	r2,zero
 400816c:	003f8906 	br	4007f94 <__alt_data_end+0xfc007f94>
 4008170:	3809883a 	mov	r4,r7
 4008174:	4821883a 	mov	r16,r9
 4008178:	0011883a 	mov	r8,zero
 400817c:	0005883a 	mov	r2,zero
 4008180:	003eda06 	br	4007cec <__alt_data_end+0xfc007cec>
 4008184:	0101ffc4 	movi	r4,2047
 4008188:	49003b26 	beq	r9,r4,4008278 <__subdf3+0x7b4>
 400818c:	0085c83a 	sub	r2,zero,r2
 4008190:	18c02034 	orhi	r3,r3,128
 4008194:	01000e04 	movi	r4,56
 4008198:	20806e16 	blt	r4,r2,4008354 <__subdf3+0x890>
 400819c:	010007c4 	movi	r4,31
 40081a0:	20807716 	blt	r4,r2,4008380 <__subdf3+0x8bc>
 40081a4:	01000804 	movi	r4,32
 40081a8:	2089c83a 	sub	r4,r4,r2
 40081ac:	1914983a 	sll	r10,r3,r4
 40081b0:	8890d83a 	srl	r8,r17,r2
 40081b4:	8908983a 	sll	r4,r17,r4
 40081b8:	1884d83a 	srl	r2,r3,r2
 40081bc:	5222b03a 	or	r17,r10,r8
 40081c0:	2006c03a 	cmpne	r3,r4,zero
 40081c4:	88e2b03a 	or	r17,r17,r3
 40081c8:	89a3883a 	add	r17,r17,r6
 40081cc:	1145883a 	add	r2,r2,r5
 40081d0:	898d803a 	cmpltu	r6,r17,r6
 40081d4:	3087883a 	add	r3,r6,r2
 40081d8:	4821883a 	mov	r16,r9
 40081dc:	003ed906 	br	4007d44 <__alt_data_end+0xfc007d44>
 40081e0:	2984b03a 	or	r2,r5,r6
 40081e4:	10004226 	beq	r2,zero,40082f0 <__subdf3+0x82c>
 40081e8:	1808d0fa 	srli	r4,r3,3
 40081ec:	8822d0fa 	srli	r17,r17,3
 40081f0:	1806977a 	slli	r3,r3,29
 40081f4:	2080022c 	andhi	r2,r4,8
 40081f8:	1c62b03a 	or	r17,r3,r17
 40081fc:	10000826 	beq	r2,zero,4008220 <__subdf3+0x75c>
 4008200:	2812d0fa 	srli	r9,r5,3
 4008204:	4880022c 	andhi	r2,r9,8
 4008208:	1000051e 	bne	r2,zero,4008220 <__subdf3+0x75c>
 400820c:	300cd0fa 	srli	r6,r6,3
 4008210:	2804977a 	slli	r2,r5,29
 4008214:	4809883a 	mov	r4,r9
 4008218:	3825883a 	mov	r18,r7
 400821c:	11a2b03a 	or	r17,r2,r6
 4008220:	8806d77a 	srli	r3,r17,29
 4008224:	200890fa 	slli	r4,r4,3
 4008228:	882290fa 	slli	r17,r17,3
 400822c:	0401ffc4 	movi	r16,2047
 4008230:	1906b03a 	or	r3,r3,r4
 4008234:	003e4406 	br	4007b48 <__alt_data_end+0xfc007b48>
 4008238:	2984b03a 	or	r2,r5,r6
 400823c:	103e4226 	beq	r2,zero,4007b48 <__alt_data_end+0xfc007b48>
 4008240:	8989c83a 	sub	r4,r17,r6
 4008244:	8911803a 	cmpltu	r8,r17,r4
 4008248:	1945c83a 	sub	r2,r3,r5
 400824c:	1205c83a 	sub	r2,r2,r8
 4008250:	1200202c 	andhi	r8,r2,128
 4008254:	403e9a26 	beq	r8,zero,4007cc0 <__alt_data_end+0xfc007cc0>
 4008258:	3463c83a 	sub	r17,r6,r17
 400825c:	28c5c83a 	sub	r2,r5,r3
 4008260:	344d803a 	cmpltu	r6,r6,r17
 4008264:	1187c83a 	sub	r3,r2,r6
 4008268:	3825883a 	mov	r18,r7
 400826c:	003e3606 	br	4007b48 <__alt_data_end+0xfc007b48>
 4008270:	0101ffc4 	movi	r4,2047
 4008274:	493fc71e 	bne	r9,r4,4008194 <__alt_data_end+0xfc008194>
 4008278:	2807883a 	mov	r3,r5
 400827c:	3023883a 	mov	r17,r6
 4008280:	4821883a 	mov	r16,r9
 4008284:	003e3006 	br	4007b48 <__alt_data_end+0xfc007b48>
 4008288:	10003626 	beq	r2,zero,4008364 <__subdf3+0x8a0>
 400828c:	2984b03a 	or	r2,r5,r6
 4008290:	10001726 	beq	r2,zero,40082f0 <__subdf3+0x82c>
 4008294:	1808d0fa 	srli	r4,r3,3
 4008298:	8822d0fa 	srli	r17,r17,3
 400829c:	1806977a 	slli	r3,r3,29
 40082a0:	2080022c 	andhi	r2,r4,8
 40082a4:	1c62b03a 	or	r17,r3,r17
 40082a8:	10000726 	beq	r2,zero,40082c8 <__subdf3+0x804>
 40082ac:	2812d0fa 	srli	r9,r5,3
 40082b0:	4880022c 	andhi	r2,r9,8
 40082b4:	1000041e 	bne	r2,zero,40082c8 <__subdf3+0x804>
 40082b8:	300cd0fa 	srli	r6,r6,3
 40082bc:	2804977a 	slli	r2,r5,29
 40082c0:	4809883a 	mov	r4,r9
 40082c4:	11a2b03a 	or	r17,r2,r6
 40082c8:	8806d77a 	srli	r3,r17,29
 40082cc:	200890fa 	slli	r4,r4,3
 40082d0:	882290fa 	slli	r17,r17,3
 40082d4:	3825883a 	mov	r18,r7
 40082d8:	1906b03a 	or	r3,r3,r4
 40082dc:	0401ffc4 	movi	r16,2047
 40082e0:	003e1906 	br	4007b48 <__alt_data_end+0xfc007b48>
 40082e4:	000b883a 	mov	r5,zero
 40082e8:	0005883a 	mov	r2,zero
 40082ec:	003e2e06 	br	4007ba8 <__alt_data_end+0xfc007ba8>
 40082f0:	0401ffc4 	movi	r16,2047
 40082f4:	003e1406 	br	4007b48 <__alt_data_end+0xfc007b48>
 40082f8:	0005883a 	mov	r2,zero
 40082fc:	003f7506 	br	40080d4 <__alt_data_end+0xfc0080d4>
 4008300:	0005883a 	mov	r2,zero
 4008304:	0009883a 	mov	r4,zero
 4008308:	003e7806 	br	4007cec <__alt_data_end+0xfc007cec>
 400830c:	123ff804 	addi	r8,r2,-32
 4008310:	01000804 	movi	r4,32
 4008314:	1a10d83a 	srl	r8,r3,r8
 4008318:	11002526 	beq	r2,r4,40083b0 <__subdf3+0x8ec>
 400831c:	01001004 	movi	r4,64
 4008320:	2085c83a 	sub	r2,r4,r2
 4008324:	1884983a 	sll	r2,r3,r2
 4008328:	1444b03a 	or	r2,r2,r17
 400832c:	1004c03a 	cmpne	r2,r2,zero
 4008330:	40a2b03a 	or	r17,r8,r2
 4008334:	0005883a 	mov	r2,zero
 4008338:	003f1606 	br	4007f94 <__alt_data_end+0xfc007f94>
 400833c:	02000434 	movhi	r8,16
 4008340:	0009883a 	mov	r4,zero
 4008344:	423fffc4 	addi	r8,r8,-1
 4008348:	00bfffc4 	movi	r2,-1
 400834c:	0401ffc4 	movi	r16,2047
 4008350:	003e6606 	br	4007cec <__alt_data_end+0xfc007cec>
 4008354:	1c62b03a 	or	r17,r3,r17
 4008358:	8822c03a 	cmpne	r17,r17,zero
 400835c:	0005883a 	mov	r2,zero
 4008360:	003f9906 	br	40081c8 <__alt_data_end+0xfc0081c8>
 4008364:	2807883a 	mov	r3,r5
 4008368:	3023883a 	mov	r17,r6
 400836c:	0401ffc4 	movi	r16,2047
 4008370:	003df506 	br	4007b48 <__alt_data_end+0xfc007b48>
 4008374:	2807883a 	mov	r3,r5
 4008378:	3023883a 	mov	r17,r6
 400837c:	003df206 	br	4007b48 <__alt_data_end+0xfc007b48>
 4008380:	123ff804 	addi	r8,r2,-32
 4008384:	01000804 	movi	r4,32
 4008388:	1a10d83a 	srl	r8,r3,r8
 400838c:	11000a26 	beq	r2,r4,40083b8 <__subdf3+0x8f4>
 4008390:	01001004 	movi	r4,64
 4008394:	2085c83a 	sub	r2,r4,r2
 4008398:	1884983a 	sll	r2,r3,r2
 400839c:	1444b03a 	or	r2,r2,r17
 40083a0:	1004c03a 	cmpne	r2,r2,zero
 40083a4:	40a2b03a 	or	r17,r8,r2
 40083a8:	0005883a 	mov	r2,zero
 40083ac:	003f8606 	br	40081c8 <__alt_data_end+0xfc0081c8>
 40083b0:	0005883a 	mov	r2,zero
 40083b4:	003fdc06 	br	4008328 <__alt_data_end+0xfc008328>
 40083b8:	0005883a 	mov	r2,zero
 40083bc:	003ff706 	br	400839c <__alt_data_end+0xfc00839c>

040083c0 <__fixdfsi>:
 40083c0:	280cd53a 	srli	r6,r5,20
 40083c4:	00c00434 	movhi	r3,16
 40083c8:	18ffffc4 	addi	r3,r3,-1
 40083cc:	3181ffcc 	andi	r6,r6,2047
 40083d0:	01c0ff84 	movi	r7,1022
 40083d4:	28c6703a 	and	r3,r5,r3
 40083d8:	280ad7fa 	srli	r5,r5,31
 40083dc:	3980120e 	bge	r7,r6,4008428 <__fixdfsi+0x68>
 40083e0:	00810744 	movi	r2,1053
 40083e4:	11800c16 	blt	r2,r6,4008418 <__fixdfsi+0x58>
 40083e8:	00810cc4 	movi	r2,1075
 40083ec:	1185c83a 	sub	r2,r2,r6
 40083f0:	01c007c4 	movi	r7,31
 40083f4:	18c00434 	orhi	r3,r3,16
 40083f8:	38800d16 	blt	r7,r2,4008430 <__fixdfsi+0x70>
 40083fc:	31befb44 	addi	r6,r6,-1043
 4008400:	2084d83a 	srl	r2,r4,r2
 4008404:	1986983a 	sll	r3,r3,r6
 4008408:	1884b03a 	or	r2,r3,r2
 400840c:	28000726 	beq	r5,zero,400842c <__fixdfsi+0x6c>
 4008410:	0085c83a 	sub	r2,zero,r2
 4008414:	f800283a 	ret
 4008418:	00a00034 	movhi	r2,32768
 400841c:	10bfffc4 	addi	r2,r2,-1
 4008420:	2885883a 	add	r2,r5,r2
 4008424:	f800283a 	ret
 4008428:	0005883a 	mov	r2,zero
 400842c:	f800283a 	ret
 4008430:	008104c4 	movi	r2,1043
 4008434:	1185c83a 	sub	r2,r2,r6
 4008438:	1884d83a 	srl	r2,r3,r2
 400843c:	003ff306 	br	400840c <__alt_data_end+0xfc00840c>

04008440 <__floatsidf>:
 4008440:	defffd04 	addi	sp,sp,-12
 4008444:	dfc00215 	stw	ra,8(sp)
 4008448:	dc400115 	stw	r17,4(sp)
 400844c:	dc000015 	stw	r16,0(sp)
 4008450:	20002b26 	beq	r4,zero,4008500 <__floatsidf+0xc0>
 4008454:	2023883a 	mov	r17,r4
 4008458:	2020d7fa 	srli	r16,r4,31
 400845c:	20002d16 	blt	r4,zero,4008514 <__floatsidf+0xd4>
 4008460:	8809883a 	mov	r4,r17
 4008464:	400887c0 	call	400887c <__clzsi2>
 4008468:	01410784 	movi	r5,1054
 400846c:	288bc83a 	sub	r5,r5,r2
 4008470:	01010cc4 	movi	r4,1075
 4008474:	2149c83a 	sub	r4,r4,r5
 4008478:	00c007c4 	movi	r3,31
 400847c:	1900160e 	bge	r3,r4,40084d8 <__floatsidf+0x98>
 4008480:	00c104c4 	movi	r3,1043
 4008484:	1947c83a 	sub	r3,r3,r5
 4008488:	88c6983a 	sll	r3,r17,r3
 400848c:	00800434 	movhi	r2,16
 4008490:	10bfffc4 	addi	r2,r2,-1
 4008494:	1886703a 	and	r3,r3,r2
 4008498:	2941ffcc 	andi	r5,r5,2047
 400849c:	800d883a 	mov	r6,r16
 40084a0:	0005883a 	mov	r2,zero
 40084a4:	280a953a 	slli	r5,r5,20
 40084a8:	31803fcc 	andi	r6,r6,255
 40084ac:	01000434 	movhi	r4,16
 40084b0:	300c97fa 	slli	r6,r6,31
 40084b4:	213fffc4 	addi	r4,r4,-1
 40084b8:	1906703a 	and	r3,r3,r4
 40084bc:	1946b03a 	or	r3,r3,r5
 40084c0:	1986b03a 	or	r3,r3,r6
 40084c4:	dfc00217 	ldw	ra,8(sp)
 40084c8:	dc400117 	ldw	r17,4(sp)
 40084cc:	dc000017 	ldw	r16,0(sp)
 40084d0:	dec00304 	addi	sp,sp,12
 40084d4:	f800283a 	ret
 40084d8:	00c002c4 	movi	r3,11
 40084dc:	1887c83a 	sub	r3,r3,r2
 40084e0:	88c6d83a 	srl	r3,r17,r3
 40084e4:	8904983a 	sll	r2,r17,r4
 40084e8:	01000434 	movhi	r4,16
 40084ec:	213fffc4 	addi	r4,r4,-1
 40084f0:	2941ffcc 	andi	r5,r5,2047
 40084f4:	1906703a 	and	r3,r3,r4
 40084f8:	800d883a 	mov	r6,r16
 40084fc:	003fe906 	br	40084a4 <__alt_data_end+0xfc0084a4>
 4008500:	000d883a 	mov	r6,zero
 4008504:	000b883a 	mov	r5,zero
 4008508:	0007883a 	mov	r3,zero
 400850c:	0005883a 	mov	r2,zero
 4008510:	003fe406 	br	40084a4 <__alt_data_end+0xfc0084a4>
 4008514:	0123c83a 	sub	r17,zero,r4
 4008518:	003fd106 	br	4008460 <__alt_data_end+0xfc008460>

0400851c <__floatunsidf>:
 400851c:	defffe04 	addi	sp,sp,-8
 4008520:	dc000015 	stw	r16,0(sp)
 4008524:	dfc00115 	stw	ra,4(sp)
 4008528:	2021883a 	mov	r16,r4
 400852c:	20002226 	beq	r4,zero,40085b8 <__floatunsidf+0x9c>
 4008530:	400887c0 	call	400887c <__clzsi2>
 4008534:	01010784 	movi	r4,1054
 4008538:	2089c83a 	sub	r4,r4,r2
 400853c:	01810cc4 	movi	r6,1075
 4008540:	310dc83a 	sub	r6,r6,r4
 4008544:	00c007c4 	movi	r3,31
 4008548:	1980120e 	bge	r3,r6,4008594 <__floatunsidf+0x78>
 400854c:	00c104c4 	movi	r3,1043
 4008550:	1907c83a 	sub	r3,r3,r4
 4008554:	80ca983a 	sll	r5,r16,r3
 4008558:	00800434 	movhi	r2,16
 400855c:	10bfffc4 	addi	r2,r2,-1
 4008560:	2101ffcc 	andi	r4,r4,2047
 4008564:	0021883a 	mov	r16,zero
 4008568:	288a703a 	and	r5,r5,r2
 400856c:	2008953a 	slli	r4,r4,20
 4008570:	00c00434 	movhi	r3,16
 4008574:	18ffffc4 	addi	r3,r3,-1
 4008578:	28c6703a 	and	r3,r5,r3
 400857c:	8005883a 	mov	r2,r16
 4008580:	1906b03a 	or	r3,r3,r4
 4008584:	dfc00117 	ldw	ra,4(sp)
 4008588:	dc000017 	ldw	r16,0(sp)
 400858c:	dec00204 	addi	sp,sp,8
 4008590:	f800283a 	ret
 4008594:	00c002c4 	movi	r3,11
 4008598:	188bc83a 	sub	r5,r3,r2
 400859c:	814ad83a 	srl	r5,r16,r5
 40085a0:	00c00434 	movhi	r3,16
 40085a4:	18ffffc4 	addi	r3,r3,-1
 40085a8:	81a0983a 	sll	r16,r16,r6
 40085ac:	2101ffcc 	andi	r4,r4,2047
 40085b0:	28ca703a 	and	r5,r5,r3
 40085b4:	003fed06 	br	400856c <__alt_data_end+0xfc00856c>
 40085b8:	0009883a 	mov	r4,zero
 40085bc:	000b883a 	mov	r5,zero
 40085c0:	003fea06 	br	400856c <__alt_data_end+0xfc00856c>

040085c4 <__extendsfdf2>:
 40085c4:	200ad5fa 	srli	r5,r4,23
 40085c8:	defffd04 	addi	sp,sp,-12
 40085cc:	dc400115 	stw	r17,4(sp)
 40085d0:	29403fcc 	andi	r5,r5,255
 40085d4:	29800044 	addi	r6,r5,1
 40085d8:	04402034 	movhi	r17,128
 40085dc:	dc000015 	stw	r16,0(sp)
 40085e0:	8c7fffc4 	addi	r17,r17,-1
 40085e4:	dfc00215 	stw	ra,8(sp)
 40085e8:	31803fcc 	andi	r6,r6,255
 40085ec:	00800044 	movi	r2,1
 40085f0:	8922703a 	and	r17,r17,r4
 40085f4:	2020d7fa 	srli	r16,r4,31
 40085f8:	1180110e 	bge	r2,r6,4008640 <__extendsfdf2+0x7c>
 40085fc:	880cd0fa 	srli	r6,r17,3
 4008600:	8822977a 	slli	r17,r17,29
 4008604:	2940e004 	addi	r5,r5,896
 4008608:	2941ffcc 	andi	r5,r5,2047
 400860c:	2804953a 	slli	r2,r5,20
 4008610:	01400434 	movhi	r5,16
 4008614:	800697fa 	slli	r3,r16,31
 4008618:	297fffc4 	addi	r5,r5,-1
 400861c:	314a703a 	and	r5,r6,r5
 4008620:	288ab03a 	or	r5,r5,r2
 4008624:	28c6b03a 	or	r3,r5,r3
 4008628:	8805883a 	mov	r2,r17
 400862c:	dfc00217 	ldw	ra,8(sp)
 4008630:	dc400117 	ldw	r17,4(sp)
 4008634:	dc000017 	ldw	r16,0(sp)
 4008638:	dec00304 	addi	sp,sp,12
 400863c:	f800283a 	ret
 4008640:	2800111e 	bne	r5,zero,4008688 <__extendsfdf2+0xc4>
 4008644:	88001c26 	beq	r17,zero,40086b8 <__extendsfdf2+0xf4>
 4008648:	8809883a 	mov	r4,r17
 400864c:	400887c0 	call	400887c <__clzsi2>
 4008650:	00c00284 	movi	r3,10
 4008654:	18801b16 	blt	r3,r2,40086c4 <__extendsfdf2+0x100>
 4008658:	018002c4 	movi	r6,11
 400865c:	308dc83a 	sub	r6,r6,r2
 4008660:	11000544 	addi	r4,r2,21
 4008664:	8986d83a 	srl	r3,r17,r6
 4008668:	8922983a 	sll	r17,r17,r4
 400866c:	0180e244 	movi	r6,905
 4008670:	01400434 	movhi	r5,16
 4008674:	3085c83a 	sub	r2,r6,r2
 4008678:	297fffc4 	addi	r5,r5,-1
 400867c:	194c703a 	and	r6,r3,r5
 4008680:	1141ffcc 	andi	r5,r2,2047
 4008684:	003fe006 	br	4008608 <__alt_data_end+0xfc008608>
 4008688:	88000826 	beq	r17,zero,40086ac <__extendsfdf2+0xe8>
 400868c:	880cd0fa 	srli	r6,r17,3
 4008690:	00800434 	movhi	r2,16
 4008694:	10bfffc4 	addi	r2,r2,-1
 4008698:	31800234 	orhi	r6,r6,8
 400869c:	8822977a 	slli	r17,r17,29
 40086a0:	308c703a 	and	r6,r6,r2
 40086a4:	0141ffc4 	movi	r5,2047
 40086a8:	003fd706 	br	4008608 <__alt_data_end+0xfc008608>
 40086ac:	0141ffc4 	movi	r5,2047
 40086b0:	000d883a 	mov	r6,zero
 40086b4:	003fd406 	br	4008608 <__alt_data_end+0xfc008608>
 40086b8:	000b883a 	mov	r5,zero
 40086bc:	000d883a 	mov	r6,zero
 40086c0:	003fd106 	br	4008608 <__alt_data_end+0xfc008608>
 40086c4:	11bffd44 	addi	r6,r2,-11
 40086c8:	8986983a 	sll	r3,r17,r6
 40086cc:	0023883a 	mov	r17,zero
 40086d0:	003fe606 	br	400866c <__alt_data_end+0xfc00866c>

040086d4 <__truncdfsf2>:
 40086d4:	2810d53a 	srli	r8,r5,20
 40086d8:	01c00434 	movhi	r7,16
 40086dc:	39ffffc4 	addi	r7,r7,-1
 40086e0:	29ce703a 	and	r7,r5,r7
 40086e4:	4201ffcc 	andi	r8,r8,2047
 40086e8:	380e90fa 	slli	r7,r7,3
 40086ec:	200cd77a 	srli	r6,r4,29
 40086f0:	42400044 	addi	r9,r8,1
 40086f4:	4a41ffcc 	andi	r9,r9,2047
 40086f8:	00c00044 	movi	r3,1
 40086fc:	280ad7fa 	srli	r5,r5,31
 4008700:	31ceb03a 	or	r7,r6,r7
 4008704:	200490fa 	slli	r2,r4,3
 4008708:	1a40230e 	bge	r3,r9,4008798 <__truncdfsf2+0xc4>
 400870c:	40ff2004 	addi	r3,r8,-896
 4008710:	01803f84 	movi	r6,254
 4008714:	30c01516 	blt	r6,r3,400876c <__truncdfsf2+0x98>
 4008718:	00c0380e 	bge	zero,r3,40087fc <__truncdfsf2+0x128>
 400871c:	200c91ba 	slli	r6,r4,6
 4008720:	380e90fa 	slli	r7,r7,3
 4008724:	1004d77a 	srli	r2,r2,29
 4008728:	300cc03a 	cmpne	r6,r6,zero
 400872c:	31ccb03a 	or	r6,r6,r7
 4008730:	308cb03a 	or	r6,r6,r2
 4008734:	308001cc 	andi	r2,r6,7
 4008738:	10000426 	beq	r2,zero,400874c <__truncdfsf2+0x78>
 400873c:	308003cc 	andi	r2,r6,15
 4008740:	01000104 	movi	r4,4
 4008744:	11000126 	beq	r2,r4,400874c <__truncdfsf2+0x78>
 4008748:	31800104 	addi	r6,r6,4
 400874c:	3081002c 	andhi	r2,r6,1024
 4008750:	10001626 	beq	r2,zero,40087ac <__truncdfsf2+0xd8>
 4008754:	18c00044 	addi	r3,r3,1
 4008758:	00803fc4 	movi	r2,255
 400875c:	18800326 	beq	r3,r2,400876c <__truncdfsf2+0x98>
 4008760:	300c91ba 	slli	r6,r6,6
 4008764:	300cd27a 	srli	r6,r6,9
 4008768:	00000206 	br	4008774 <__truncdfsf2+0xa0>
 400876c:	00ffffc4 	movi	r3,-1
 4008770:	000d883a 	mov	r6,zero
 4008774:	18c03fcc 	andi	r3,r3,255
 4008778:	180895fa 	slli	r4,r3,23
 400877c:	00c02034 	movhi	r3,128
 4008780:	280a97fa 	slli	r5,r5,31
 4008784:	18ffffc4 	addi	r3,r3,-1
 4008788:	30c6703a 	and	r3,r6,r3
 400878c:	1906b03a 	or	r3,r3,r4
 4008790:	1944b03a 	or	r2,r3,r5
 4008794:	f800283a 	ret
 4008798:	40000b1e 	bne	r8,zero,40087c8 <__truncdfsf2+0xf4>
 400879c:	388cb03a 	or	r6,r7,r2
 40087a0:	0007883a 	mov	r3,zero
 40087a4:	30000426 	beq	r6,zero,40087b8 <__truncdfsf2+0xe4>
 40087a8:	01800144 	movi	r6,5
 40087ac:	00803fc4 	movi	r2,255
 40087b0:	300cd0fa 	srli	r6,r6,3
 40087b4:	18800a26 	beq	r3,r2,40087e0 <__truncdfsf2+0x10c>
 40087b8:	00802034 	movhi	r2,128
 40087bc:	10bfffc4 	addi	r2,r2,-1
 40087c0:	308c703a 	and	r6,r6,r2
 40087c4:	003feb06 	br	4008774 <__alt_data_end+0xfc008774>
 40087c8:	3888b03a 	or	r4,r7,r2
 40087cc:	203fe726 	beq	r4,zero,400876c <__alt_data_end+0xfc00876c>
 40087d0:	380c90fa 	slli	r6,r7,3
 40087d4:	00c03fc4 	movi	r3,255
 40087d8:	31808034 	orhi	r6,r6,512
 40087dc:	003fd506 	br	4008734 <__alt_data_end+0xfc008734>
 40087e0:	303fe226 	beq	r6,zero,400876c <__alt_data_end+0xfc00876c>
 40087e4:	00802034 	movhi	r2,128
 40087e8:	31801034 	orhi	r6,r6,64
 40087ec:	10bfffc4 	addi	r2,r2,-1
 40087f0:	00ffffc4 	movi	r3,-1
 40087f4:	308c703a 	and	r6,r6,r2
 40087f8:	003fde06 	br	4008774 <__alt_data_end+0xfc008774>
 40087fc:	013ffa44 	movi	r4,-23
 4008800:	19000e16 	blt	r3,r4,400883c <__truncdfsf2+0x168>
 4008804:	01000784 	movi	r4,30
 4008808:	20c9c83a 	sub	r4,r4,r3
 400880c:	018007c4 	movi	r6,31
 4008810:	39c02034 	orhi	r7,r7,128
 4008814:	31000b16 	blt	r6,r4,4008844 <__truncdfsf2+0x170>
 4008818:	423f2084 	addi	r8,r8,-894
 400881c:	120c983a 	sll	r6,r2,r8
 4008820:	3a0e983a 	sll	r7,r7,r8
 4008824:	1104d83a 	srl	r2,r2,r4
 4008828:	300cc03a 	cmpne	r6,r6,zero
 400882c:	31ceb03a 	or	r7,r6,r7
 4008830:	388cb03a 	or	r6,r7,r2
 4008834:	0007883a 	mov	r3,zero
 4008838:	003fbe06 	br	4008734 <__alt_data_end+0xfc008734>
 400883c:	0007883a 	mov	r3,zero
 4008840:	003fd906 	br	40087a8 <__alt_data_end+0xfc0087a8>
 4008844:	01bfff84 	movi	r6,-2
 4008848:	30cdc83a 	sub	r6,r6,r3
 400884c:	00c00804 	movi	r3,32
 4008850:	398cd83a 	srl	r6,r7,r6
 4008854:	20c00726 	beq	r4,r3,4008874 <__truncdfsf2+0x1a0>
 4008858:	423f2884 	addi	r8,r8,-862
 400885c:	3a0e983a 	sll	r7,r7,r8
 4008860:	3884b03a 	or	r2,r7,r2
 4008864:	1004c03a 	cmpne	r2,r2,zero
 4008868:	118cb03a 	or	r6,r2,r6
 400886c:	0007883a 	mov	r3,zero
 4008870:	003fb006 	br	4008734 <__alt_data_end+0xfc008734>
 4008874:	000f883a 	mov	r7,zero
 4008878:	003ff906 	br	4008860 <__alt_data_end+0xfc008860>

0400887c <__clzsi2>:
 400887c:	00bfffd4 	movui	r2,65535
 4008880:	11000536 	bltu	r2,r4,4008898 <__clzsi2+0x1c>
 4008884:	00803fc4 	movi	r2,255
 4008888:	11000f36 	bltu	r2,r4,40088c8 <__clzsi2+0x4c>
 400888c:	00800804 	movi	r2,32
 4008890:	0007883a 	mov	r3,zero
 4008894:	00000506 	br	40088ac <__clzsi2+0x30>
 4008898:	00804034 	movhi	r2,256
 400889c:	10bfffc4 	addi	r2,r2,-1
 40088a0:	11000c2e 	bgeu	r2,r4,40088d4 <__clzsi2+0x58>
 40088a4:	00800204 	movi	r2,8
 40088a8:	00c00604 	movi	r3,24
 40088ac:	20c8d83a 	srl	r4,r4,r3
 40088b0:	00c10074 	movhi	r3,1025
 40088b4:	18c4a944 	addi	r3,r3,4773
 40088b8:	1909883a 	add	r4,r3,r4
 40088bc:	20c00003 	ldbu	r3,0(r4)
 40088c0:	10c5c83a 	sub	r2,r2,r3
 40088c4:	f800283a 	ret
 40088c8:	00800604 	movi	r2,24
 40088cc:	00c00204 	movi	r3,8
 40088d0:	003ff606 	br	40088ac <__alt_data_end+0xfc0088ac>
 40088d4:	00800404 	movi	r2,16
 40088d8:	1007883a 	mov	r3,r2
 40088dc:	003ff306 	br	40088ac <__alt_data_end+0xfc0088ac>

040088e0 <__assert_func>:
 40088e0:	00810074 	movhi	r2,1025
 40088e4:	108c2004 	addi	r2,r2,12416
 40088e8:	10800017 	ldw	r2,0(r2)
 40088ec:	defffc04 	addi	sp,sp,-16
 40088f0:	dfc00315 	stw	ra,12(sp)
 40088f4:	2015883a 	mov	r10,r4
 40088f8:	2811883a 	mov	r8,r5
 40088fc:	3813883a 	mov	r9,r7
 4008900:	11000317 	ldw	r4,12(r2)
 4008904:	30000c26 	beq	r6,zero,4008938 <__assert_func+0x58>
 4008908:	00c10074 	movhi	r3,1025
 400890c:	18c4ea04 	addi	r3,r3,5032
 4008910:	3005883a 	mov	r2,r6
 4008914:	01410074 	movhi	r5,1025
 4008918:	2944ee04 	addi	r5,r5,5048
 400891c:	500f883a 	mov	r7,r10
 4008920:	480d883a 	mov	r6,r9
 4008924:	d8c00115 	stw	r3,4(sp)
 4008928:	da000015 	stw	r8,0(sp)
 400892c:	d8800215 	stw	r2,8(sp)
 4008930:	400897c0 	call	400897c <fiprintf>
 4008934:	4008c400 	call	4008c40 <abort>
 4008938:	00c10074 	movhi	r3,1025
 400893c:	18c4ed04 	addi	r3,r3,5044
 4008940:	1805883a 	mov	r2,r3
 4008944:	003ff306 	br	4008914 <__alt_data_end+0xfc008914>

04008948 <__assert>:
 4008948:	deffff04 	addi	sp,sp,-4
 400894c:	300f883a 	mov	r7,r6
 4008950:	000d883a 	mov	r6,zero
 4008954:	dfc00015 	stw	ra,0(sp)
 4008958:	40088e00 	call	40088e0 <__assert_func>

0400895c <_fiprintf_r>:
 400895c:	defffe04 	addi	sp,sp,-8
 4008960:	dfc00015 	stw	ra,0(sp)
 4008964:	d9c00115 	stw	r7,4(sp)
 4008968:	d9c00104 	addi	r7,sp,4
 400896c:	4008c280 	call	4008c28 <_vfiprintf_r>
 4008970:	dfc00017 	ldw	ra,0(sp)
 4008974:	dec00204 	addi	sp,sp,8
 4008978:	f800283a 	ret

0400897c <fiprintf>:
 400897c:	defffd04 	addi	sp,sp,-12
 4008980:	2005883a 	mov	r2,r4
 4008984:	dfc00015 	stw	ra,0(sp)
 4008988:	d9800115 	stw	r6,4(sp)
 400898c:	d9c00215 	stw	r7,8(sp)
 4008990:	00c10074 	movhi	r3,1025
 4008994:	18cc2004 	addi	r3,r3,12416
 4008998:	19000017 	ldw	r4,0(r3)
 400899c:	280d883a 	mov	r6,r5
 40089a0:	d9c00104 	addi	r7,sp,4
 40089a4:	100b883a 	mov	r5,r2
 40089a8:	4008c280 	call	4008c28 <_vfiprintf_r>
 40089ac:	dfc00017 	ldw	ra,0(sp)
 40089b0:	dec00304 	addi	sp,sp,12
 40089b4:	f800283a 	ret

040089b8 <memcpy>:
 40089b8:	defffd04 	addi	sp,sp,-12
 40089bc:	dfc00215 	stw	ra,8(sp)
 40089c0:	dc400115 	stw	r17,4(sp)
 40089c4:	dc000015 	stw	r16,0(sp)
 40089c8:	00c003c4 	movi	r3,15
 40089cc:	2005883a 	mov	r2,r4
 40089d0:	1980452e 	bgeu	r3,r6,4008ae8 <memcpy+0x130>
 40089d4:	2906b03a 	or	r3,r5,r4
 40089d8:	18c000cc 	andi	r3,r3,3
 40089dc:	1800441e 	bne	r3,zero,4008af0 <memcpy+0x138>
 40089e0:	347ffc04 	addi	r17,r6,-16
 40089e4:	8822d13a 	srli	r17,r17,4
 40089e8:	28c00104 	addi	r3,r5,4
 40089ec:	23400104 	addi	r13,r4,4
 40089f0:	8820913a 	slli	r16,r17,4
 40089f4:	2b000204 	addi	r12,r5,8
 40089f8:	22c00204 	addi	r11,r4,8
 40089fc:	84000504 	addi	r16,r16,20
 4008a00:	2a800304 	addi	r10,r5,12
 4008a04:	22400304 	addi	r9,r4,12
 4008a08:	2c21883a 	add	r16,r5,r16
 4008a0c:	2811883a 	mov	r8,r5
 4008a10:	200f883a 	mov	r7,r4
 4008a14:	41000017 	ldw	r4,0(r8)
 4008a18:	1fc00017 	ldw	ra,0(r3)
 4008a1c:	63c00017 	ldw	r15,0(r12)
 4008a20:	39000015 	stw	r4,0(r7)
 4008a24:	53800017 	ldw	r14,0(r10)
 4008a28:	6fc00015 	stw	ra,0(r13)
 4008a2c:	5bc00015 	stw	r15,0(r11)
 4008a30:	4b800015 	stw	r14,0(r9)
 4008a34:	18c00404 	addi	r3,r3,16
 4008a38:	39c00404 	addi	r7,r7,16
 4008a3c:	42000404 	addi	r8,r8,16
 4008a40:	6b400404 	addi	r13,r13,16
 4008a44:	63000404 	addi	r12,r12,16
 4008a48:	5ac00404 	addi	r11,r11,16
 4008a4c:	52800404 	addi	r10,r10,16
 4008a50:	4a400404 	addi	r9,r9,16
 4008a54:	1c3fef1e 	bne	r3,r16,4008a14 <__alt_data_end+0xfc008a14>
 4008a58:	89c00044 	addi	r7,r17,1
 4008a5c:	380e913a 	slli	r7,r7,4
 4008a60:	310003cc 	andi	r4,r6,15
 4008a64:	02c000c4 	movi	r11,3
 4008a68:	11c7883a 	add	r3,r2,r7
 4008a6c:	29cb883a 	add	r5,r5,r7
 4008a70:	5900212e 	bgeu	r11,r4,4008af8 <memcpy+0x140>
 4008a74:	1813883a 	mov	r9,r3
 4008a78:	2811883a 	mov	r8,r5
 4008a7c:	200f883a 	mov	r7,r4
 4008a80:	42800017 	ldw	r10,0(r8)
 4008a84:	4a400104 	addi	r9,r9,4
 4008a88:	39ffff04 	addi	r7,r7,-4
 4008a8c:	4abfff15 	stw	r10,-4(r9)
 4008a90:	42000104 	addi	r8,r8,4
 4008a94:	59fffa36 	bltu	r11,r7,4008a80 <__alt_data_end+0xfc008a80>
 4008a98:	213fff04 	addi	r4,r4,-4
 4008a9c:	2008d0ba 	srli	r4,r4,2
 4008aa0:	318000cc 	andi	r6,r6,3
 4008aa4:	21000044 	addi	r4,r4,1
 4008aa8:	2109883a 	add	r4,r4,r4
 4008aac:	2109883a 	add	r4,r4,r4
 4008ab0:	1907883a 	add	r3,r3,r4
 4008ab4:	290b883a 	add	r5,r5,r4
 4008ab8:	30000626 	beq	r6,zero,4008ad4 <memcpy+0x11c>
 4008abc:	198d883a 	add	r6,r3,r6
 4008ac0:	29c00003 	ldbu	r7,0(r5)
 4008ac4:	18c00044 	addi	r3,r3,1
 4008ac8:	29400044 	addi	r5,r5,1
 4008acc:	19ffffc5 	stb	r7,-1(r3)
 4008ad0:	19bffb1e 	bne	r3,r6,4008ac0 <__alt_data_end+0xfc008ac0>
 4008ad4:	dfc00217 	ldw	ra,8(sp)
 4008ad8:	dc400117 	ldw	r17,4(sp)
 4008adc:	dc000017 	ldw	r16,0(sp)
 4008ae0:	dec00304 	addi	sp,sp,12
 4008ae4:	f800283a 	ret
 4008ae8:	2007883a 	mov	r3,r4
 4008aec:	003ff206 	br	4008ab8 <__alt_data_end+0xfc008ab8>
 4008af0:	2007883a 	mov	r3,r4
 4008af4:	003ff106 	br	4008abc <__alt_data_end+0xfc008abc>
 4008af8:	200d883a 	mov	r6,r4
 4008afc:	003fee06 	br	4008ab8 <__alt_data_end+0xfc008ab8>

04008b00 <memset>:
 4008b00:	20c000cc 	andi	r3,r4,3
 4008b04:	2005883a 	mov	r2,r4
 4008b08:	18004426 	beq	r3,zero,4008c1c <memset+0x11c>
 4008b0c:	31ffffc4 	addi	r7,r6,-1
 4008b10:	30004026 	beq	r6,zero,4008c14 <memset+0x114>
 4008b14:	2813883a 	mov	r9,r5
 4008b18:	200d883a 	mov	r6,r4
 4008b1c:	2007883a 	mov	r3,r4
 4008b20:	00000406 	br	4008b34 <memset+0x34>
 4008b24:	3a3fffc4 	addi	r8,r7,-1
 4008b28:	31800044 	addi	r6,r6,1
 4008b2c:	38003926 	beq	r7,zero,4008c14 <memset+0x114>
 4008b30:	400f883a 	mov	r7,r8
 4008b34:	18c00044 	addi	r3,r3,1
 4008b38:	32400005 	stb	r9,0(r6)
 4008b3c:	1a0000cc 	andi	r8,r3,3
 4008b40:	403ff81e 	bne	r8,zero,4008b24 <__alt_data_end+0xfc008b24>
 4008b44:	010000c4 	movi	r4,3
 4008b48:	21c02d2e 	bgeu	r4,r7,4008c00 <memset+0x100>
 4008b4c:	29003fcc 	andi	r4,r5,255
 4008b50:	200c923a 	slli	r6,r4,8
 4008b54:	3108b03a 	or	r4,r6,r4
 4008b58:	200c943a 	slli	r6,r4,16
 4008b5c:	218cb03a 	or	r6,r4,r6
 4008b60:	010003c4 	movi	r4,15
 4008b64:	21c0182e 	bgeu	r4,r7,4008bc8 <memset+0xc8>
 4008b68:	3b3ffc04 	addi	r12,r7,-16
 4008b6c:	6018d13a 	srli	r12,r12,4
 4008b70:	1a000104 	addi	r8,r3,4
 4008b74:	1ac00204 	addi	r11,r3,8
 4008b78:	6008913a 	slli	r4,r12,4
 4008b7c:	1a800304 	addi	r10,r3,12
 4008b80:	1813883a 	mov	r9,r3
 4008b84:	21000504 	addi	r4,r4,20
 4008b88:	1909883a 	add	r4,r3,r4
 4008b8c:	49800015 	stw	r6,0(r9)
 4008b90:	41800015 	stw	r6,0(r8)
 4008b94:	59800015 	stw	r6,0(r11)
 4008b98:	51800015 	stw	r6,0(r10)
 4008b9c:	42000404 	addi	r8,r8,16
 4008ba0:	4a400404 	addi	r9,r9,16
 4008ba4:	5ac00404 	addi	r11,r11,16
 4008ba8:	52800404 	addi	r10,r10,16
 4008bac:	413ff71e 	bne	r8,r4,4008b8c <__alt_data_end+0xfc008b8c>
 4008bb0:	63000044 	addi	r12,r12,1
 4008bb4:	6018913a 	slli	r12,r12,4
 4008bb8:	39c003cc 	andi	r7,r7,15
 4008bbc:	010000c4 	movi	r4,3
 4008bc0:	1b07883a 	add	r3,r3,r12
 4008bc4:	21c00e2e 	bgeu	r4,r7,4008c00 <memset+0x100>
 4008bc8:	1813883a 	mov	r9,r3
 4008bcc:	3811883a 	mov	r8,r7
 4008bd0:	010000c4 	movi	r4,3
 4008bd4:	49800015 	stw	r6,0(r9)
 4008bd8:	423fff04 	addi	r8,r8,-4
 4008bdc:	4a400104 	addi	r9,r9,4
 4008be0:	223ffc36 	bltu	r4,r8,4008bd4 <__alt_data_end+0xfc008bd4>
 4008be4:	393fff04 	addi	r4,r7,-4
 4008be8:	2008d0ba 	srli	r4,r4,2
 4008bec:	39c000cc 	andi	r7,r7,3
 4008bf0:	21000044 	addi	r4,r4,1
 4008bf4:	2109883a 	add	r4,r4,r4
 4008bf8:	2109883a 	add	r4,r4,r4
 4008bfc:	1907883a 	add	r3,r3,r4
 4008c00:	38000526 	beq	r7,zero,4008c18 <memset+0x118>
 4008c04:	19cf883a 	add	r7,r3,r7
 4008c08:	19400005 	stb	r5,0(r3)
 4008c0c:	18c00044 	addi	r3,r3,1
 4008c10:	38fffd1e 	bne	r7,r3,4008c08 <__alt_data_end+0xfc008c08>
 4008c14:	f800283a 	ret
 4008c18:	f800283a 	ret
 4008c1c:	2007883a 	mov	r3,r4
 4008c20:	300f883a 	mov	r7,r6
 4008c24:	003fc706 	br	4008b44 <__alt_data_end+0xfc008b44>

04008c28 <_vfiprintf_r>:
 4008c28:	deffff04 	addi	sp,sp,-4
 4008c2c:	dfc00015 	stw	ra,0(sp)
 4008c30:	40090700 	call	4009070 <___vfiprintf_internal_r>
 4008c34:	dfc00017 	ldw	ra,0(sp)
 4008c38:	dec00104 	addi	sp,sp,4
 4008c3c:	f800283a 	ret

04008c40 <abort>:
 4008c40:	deffff04 	addi	sp,sp,-4
 4008c44:	01000184 	movi	r4,6
 4008c48:	dfc00015 	stw	ra,0(sp)
 4008c4c:	4008eac0 	call	4008eac <raise>
 4008c50:	01000044 	movi	r4,1
 4008c54:	400e3400 	call	400e340 <_exit>

04008c58 <_init_signal_r>:
 4008c58:	2080b717 	ldw	r2,732(r4)
 4008c5c:	10000226 	beq	r2,zero,4008c68 <_init_signal_r+0x10>
 4008c60:	0005883a 	mov	r2,zero
 4008c64:	f800283a 	ret
 4008c68:	defffe04 	addi	sp,sp,-8
 4008c6c:	01402004 	movi	r5,128
 4008c70:	dc000015 	stw	r16,0(sp)
 4008c74:	dfc00115 	stw	ra,4(sp)
 4008c78:	2021883a 	mov	r16,r4
 4008c7c:	400bd240 	call	400bd24 <_malloc_r>
 4008c80:	8080b715 	stw	r2,732(r16)
 4008c84:	10000d26 	beq	r2,zero,4008cbc <_init_signal_r+0x64>
 4008c88:	0007883a 	mov	r3,zero
 4008c8c:	01002004 	movi	r4,128
 4008c90:	00000106 	br	4008c98 <_init_signal_r+0x40>
 4008c94:	8080b717 	ldw	r2,732(r16)
 4008c98:	10c5883a 	add	r2,r2,r3
 4008c9c:	10000015 	stw	zero,0(r2)
 4008ca0:	18c00104 	addi	r3,r3,4
 4008ca4:	193ffb1e 	bne	r3,r4,4008c94 <__alt_data_end+0xfc008c94>
 4008ca8:	0005883a 	mov	r2,zero
 4008cac:	dfc00117 	ldw	ra,4(sp)
 4008cb0:	dc000017 	ldw	r16,0(sp)
 4008cb4:	dec00204 	addi	sp,sp,8
 4008cb8:	f800283a 	ret
 4008cbc:	00bfffc4 	movi	r2,-1
 4008cc0:	003ffa06 	br	4008cac <__alt_data_end+0xfc008cac>

04008cc4 <_signal_r>:
 4008cc4:	00c007c4 	movi	r3,31
 4008cc8:	19401536 	bltu	r3,r5,4008d20 <_signal_r+0x5c>
 4008ccc:	2080b717 	ldw	r2,732(r4)
 4008cd0:	defffc04 	addi	sp,sp,-16
 4008cd4:	dc800215 	stw	r18,8(sp)
 4008cd8:	dc400115 	stw	r17,4(sp)
 4008cdc:	dc000015 	stw	r16,0(sp)
 4008ce0:	dfc00315 	stw	ra,12(sp)
 4008ce4:	3023883a 	mov	r17,r6
 4008ce8:	2021883a 	mov	r16,r4
 4008cec:	2825883a 	mov	r18,r5
 4008cf0:	10000f26 	beq	r2,zero,4008d30 <_signal_r+0x6c>
 4008cf4:	948b883a 	add	r5,r18,r18
 4008cf8:	294b883a 	add	r5,r5,r5
 4008cfc:	114b883a 	add	r5,r2,r5
 4008d00:	28800017 	ldw	r2,0(r5)
 4008d04:	2c400015 	stw	r17,0(r5)
 4008d08:	dfc00317 	ldw	ra,12(sp)
 4008d0c:	dc800217 	ldw	r18,8(sp)
 4008d10:	dc400117 	ldw	r17,4(sp)
 4008d14:	dc000017 	ldw	r16,0(sp)
 4008d18:	dec00404 	addi	sp,sp,16
 4008d1c:	f800283a 	ret
 4008d20:	00c00584 	movi	r3,22
 4008d24:	20c00015 	stw	r3,0(r4)
 4008d28:	00bfffc4 	movi	r2,-1
 4008d2c:	f800283a 	ret
 4008d30:	4008c580 	call	4008c58 <_init_signal_r>
 4008d34:	1000021e 	bne	r2,zero,4008d40 <_signal_r+0x7c>
 4008d38:	8080b717 	ldw	r2,732(r16)
 4008d3c:	003fed06 	br	4008cf4 <__alt_data_end+0xfc008cf4>
 4008d40:	00bfffc4 	movi	r2,-1
 4008d44:	003ff006 	br	4008d08 <__alt_data_end+0xfc008d08>

04008d48 <_raise_r>:
 4008d48:	008007c4 	movi	r2,31
 4008d4c:	11402936 	bltu	r2,r5,4008df4 <_raise_r+0xac>
 4008d50:	20c0b717 	ldw	r3,732(r4)
 4008d54:	defffd04 	addi	sp,sp,-12
 4008d58:	dc400115 	stw	r17,4(sp)
 4008d5c:	dc000015 	stw	r16,0(sp)
 4008d60:	dfc00215 	stw	ra,8(sp)
 4008d64:	2021883a 	mov	r16,r4
 4008d68:	2823883a 	mov	r17,r5
 4008d6c:	18001726 	beq	r3,zero,4008dcc <_raise_r+0x84>
 4008d70:	2945883a 	add	r2,r5,r5
 4008d74:	1085883a 	add	r2,r2,r2
 4008d78:	1887883a 	add	r3,r3,r2
 4008d7c:	19800017 	ldw	r6,0(r3)
 4008d80:	30001226 	beq	r6,zero,4008dcc <_raise_r+0x84>
 4008d84:	00800044 	movi	r2,1
 4008d88:	30800e26 	beq	r6,r2,4008dc4 <_raise_r+0x7c>
 4008d8c:	013fffc4 	movi	r4,-1
 4008d90:	31000926 	beq	r6,r4,4008db8 <_raise_r+0x70>
 4008d94:	18000015 	stw	zero,0(r3)
 4008d98:	2809883a 	mov	r4,r5
 4008d9c:	303ee83a 	callr	r6
 4008da0:	0005883a 	mov	r2,zero
 4008da4:	dfc00217 	ldw	ra,8(sp)
 4008da8:	dc400117 	ldw	r17,4(sp)
 4008dac:	dc000017 	ldw	r16,0(sp)
 4008db0:	dec00304 	addi	sp,sp,12
 4008db4:	f800283a 	ret
 4008db8:	00c00584 	movi	r3,22
 4008dbc:	80c00015 	stw	r3,0(r16)
 4008dc0:	003ff806 	br	4008da4 <__alt_data_end+0xfc008da4>
 4008dc4:	0005883a 	mov	r2,zero
 4008dc8:	003ff606 	br	4008da4 <__alt_data_end+0xfc008da4>
 4008dcc:	8009883a 	mov	r4,r16
 4008dd0:	4008f580 	call	4008f58 <_getpid_r>
 4008dd4:	880d883a 	mov	r6,r17
 4008dd8:	100b883a 	mov	r5,r2
 4008ddc:	8009883a 	mov	r4,r16
 4008de0:	dfc00217 	ldw	ra,8(sp)
 4008de4:	dc400117 	ldw	r17,4(sp)
 4008de8:	dc000017 	ldw	r16,0(sp)
 4008dec:	dec00304 	addi	sp,sp,12
 4008df0:	4008efc1 	jmpi	4008efc <_kill_r>
 4008df4:	00800584 	movi	r2,22
 4008df8:	20800015 	stw	r2,0(r4)
 4008dfc:	00bfffc4 	movi	r2,-1
 4008e00:	f800283a 	ret

04008e04 <__sigtramp_r>:
 4008e04:	008007c4 	movi	r2,31
 4008e08:	11402436 	bltu	r2,r5,4008e9c <__sigtramp_r+0x98>
 4008e0c:	20c0b717 	ldw	r3,732(r4)
 4008e10:	defffd04 	addi	sp,sp,-12
 4008e14:	dc400115 	stw	r17,4(sp)
 4008e18:	dc000015 	stw	r16,0(sp)
 4008e1c:	dfc00215 	stw	ra,8(sp)
 4008e20:	2021883a 	mov	r16,r4
 4008e24:	2823883a 	mov	r17,r5
 4008e28:	18001826 	beq	r3,zero,4008e8c <__sigtramp_r+0x88>
 4008e2c:	8c45883a 	add	r2,r17,r17
 4008e30:	1085883a 	add	r2,r2,r2
 4008e34:	1885883a 	add	r2,r3,r2
 4008e38:	10c00017 	ldw	r3,0(r2)
 4008e3c:	18001126 	beq	r3,zero,4008e84 <__sigtramp_r+0x80>
 4008e40:	013fffc4 	movi	r4,-1
 4008e44:	19000d26 	beq	r3,r4,4008e7c <__sigtramp_r+0x78>
 4008e48:	01000044 	movi	r4,1
 4008e4c:	19000926 	beq	r3,r4,4008e74 <__sigtramp_r+0x70>
 4008e50:	10000015 	stw	zero,0(r2)
 4008e54:	8809883a 	mov	r4,r17
 4008e58:	183ee83a 	callr	r3
 4008e5c:	0005883a 	mov	r2,zero
 4008e60:	dfc00217 	ldw	ra,8(sp)
 4008e64:	dc400117 	ldw	r17,4(sp)
 4008e68:	dc000017 	ldw	r16,0(sp)
 4008e6c:	dec00304 	addi	sp,sp,12
 4008e70:	f800283a 	ret
 4008e74:	008000c4 	movi	r2,3
 4008e78:	003ff906 	br	4008e60 <__alt_data_end+0xfc008e60>
 4008e7c:	00800084 	movi	r2,2
 4008e80:	003ff706 	br	4008e60 <__alt_data_end+0xfc008e60>
 4008e84:	00800044 	movi	r2,1
 4008e88:	003ff506 	br	4008e60 <__alt_data_end+0xfc008e60>
 4008e8c:	4008c580 	call	4008c58 <_init_signal_r>
 4008e90:	1000041e 	bne	r2,zero,4008ea4 <__sigtramp_r+0xa0>
 4008e94:	80c0b717 	ldw	r3,732(r16)
 4008e98:	003fe406 	br	4008e2c <__alt_data_end+0xfc008e2c>
 4008e9c:	00bfffc4 	movi	r2,-1
 4008ea0:	f800283a 	ret
 4008ea4:	00bfffc4 	movi	r2,-1
 4008ea8:	003fed06 	br	4008e60 <__alt_data_end+0xfc008e60>

04008eac <raise>:
 4008eac:	00810074 	movhi	r2,1025
 4008eb0:	108c2004 	addi	r2,r2,12416
 4008eb4:	200b883a 	mov	r5,r4
 4008eb8:	11000017 	ldw	r4,0(r2)
 4008ebc:	4008d481 	jmpi	4008d48 <_raise_r>

04008ec0 <signal>:
 4008ec0:	00810074 	movhi	r2,1025
 4008ec4:	108c2004 	addi	r2,r2,12416
 4008ec8:	280d883a 	mov	r6,r5
 4008ecc:	200b883a 	mov	r5,r4
 4008ed0:	11000017 	ldw	r4,0(r2)
 4008ed4:	4008cc41 	jmpi	4008cc4 <_signal_r>

04008ed8 <_init_signal>:
 4008ed8:	00810074 	movhi	r2,1025
 4008edc:	108c2004 	addi	r2,r2,12416
 4008ee0:	11000017 	ldw	r4,0(r2)
 4008ee4:	4008c581 	jmpi	4008c58 <_init_signal_r>

04008ee8 <__sigtramp>:
 4008ee8:	00810074 	movhi	r2,1025
 4008eec:	108c2004 	addi	r2,r2,12416
 4008ef0:	200b883a 	mov	r5,r4
 4008ef4:	11000017 	ldw	r4,0(r2)
 4008ef8:	4008e041 	jmpi	4008e04 <__sigtramp_r>

04008efc <_kill_r>:
 4008efc:	defffd04 	addi	sp,sp,-12
 4008f00:	2805883a 	mov	r2,r5
 4008f04:	dc000015 	stw	r16,0(sp)
 4008f08:	04010074 	movhi	r16,1025
 4008f0c:	dc400115 	stw	r17,4(sp)
 4008f10:	84134004 	addi	r16,r16,19712
 4008f14:	2023883a 	mov	r17,r4
 4008f18:	300b883a 	mov	r5,r6
 4008f1c:	1009883a 	mov	r4,r2
 4008f20:	dfc00215 	stw	ra,8(sp)
 4008f24:	80000015 	stw	zero,0(r16)
 4008f28:	400e5ac0 	call	400e5ac <kill>
 4008f2c:	00ffffc4 	movi	r3,-1
 4008f30:	10c00526 	beq	r2,r3,4008f48 <_kill_r+0x4c>
 4008f34:	dfc00217 	ldw	ra,8(sp)
 4008f38:	dc400117 	ldw	r17,4(sp)
 4008f3c:	dc000017 	ldw	r16,0(sp)
 4008f40:	dec00304 	addi	sp,sp,12
 4008f44:	f800283a 	ret
 4008f48:	80c00017 	ldw	r3,0(r16)
 4008f4c:	183ff926 	beq	r3,zero,4008f34 <__alt_data_end+0xfc008f34>
 4008f50:	88c00015 	stw	r3,0(r17)
 4008f54:	003ff706 	br	4008f34 <__alt_data_end+0xfc008f34>

04008f58 <_getpid_r>:
 4008f58:	400e4681 	jmpi	400e468 <getpid>

04008f5c <__sprint_r.part.0>:
 4008f5c:	28801917 	ldw	r2,100(r5)
 4008f60:	defff604 	addi	sp,sp,-40
 4008f64:	dd400515 	stw	r21,20(sp)
 4008f68:	dfc00915 	stw	ra,36(sp)
 4008f6c:	df000815 	stw	fp,32(sp)
 4008f70:	ddc00715 	stw	r23,28(sp)
 4008f74:	dd800615 	stw	r22,24(sp)
 4008f78:	dd000415 	stw	r20,16(sp)
 4008f7c:	dcc00315 	stw	r19,12(sp)
 4008f80:	dc800215 	stw	r18,8(sp)
 4008f84:	dc400115 	stw	r17,4(sp)
 4008f88:	dc000015 	stw	r16,0(sp)
 4008f8c:	1088000c 	andi	r2,r2,8192
 4008f90:	302b883a 	mov	r21,r6
 4008f94:	10002e26 	beq	r2,zero,4009050 <__sprint_r.part.0+0xf4>
 4008f98:	30800217 	ldw	r2,8(r6)
 4008f9c:	35800017 	ldw	r22,0(r6)
 4008fa0:	10002926 	beq	r2,zero,4009048 <__sprint_r.part.0+0xec>
 4008fa4:	2827883a 	mov	r19,r5
 4008fa8:	2029883a 	mov	r20,r4
 4008fac:	b5c00104 	addi	r23,r22,4
 4008fb0:	04bfffc4 	movi	r18,-1
 4008fb4:	bc400017 	ldw	r17,0(r23)
 4008fb8:	b4000017 	ldw	r16,0(r22)
 4008fbc:	0039883a 	mov	fp,zero
 4008fc0:	8822d0ba 	srli	r17,r17,2
 4008fc4:	8800031e 	bne	r17,zero,4008fd4 <__sprint_r.part.0+0x78>
 4008fc8:	00001806 	br	400902c <__sprint_r.part.0+0xd0>
 4008fcc:	84000104 	addi	r16,r16,4
 4008fd0:	8f001526 	beq	r17,fp,4009028 <__sprint_r.part.0+0xcc>
 4008fd4:	81400017 	ldw	r5,0(r16)
 4008fd8:	980d883a 	mov	r6,r19
 4008fdc:	a009883a 	mov	r4,r20
 4008fe0:	400af640 	call	400af64 <_fputwc_r>
 4008fe4:	e7000044 	addi	fp,fp,1
 4008fe8:	14bff81e 	bne	r2,r18,4008fcc <__alt_data_end+0xfc008fcc>
 4008fec:	9005883a 	mov	r2,r18
 4008ff0:	a8000215 	stw	zero,8(r21)
 4008ff4:	a8000115 	stw	zero,4(r21)
 4008ff8:	dfc00917 	ldw	ra,36(sp)
 4008ffc:	df000817 	ldw	fp,32(sp)
 4009000:	ddc00717 	ldw	r23,28(sp)
 4009004:	dd800617 	ldw	r22,24(sp)
 4009008:	dd400517 	ldw	r21,20(sp)
 400900c:	dd000417 	ldw	r20,16(sp)
 4009010:	dcc00317 	ldw	r19,12(sp)
 4009014:	dc800217 	ldw	r18,8(sp)
 4009018:	dc400117 	ldw	r17,4(sp)
 400901c:	dc000017 	ldw	r16,0(sp)
 4009020:	dec00a04 	addi	sp,sp,40
 4009024:	f800283a 	ret
 4009028:	a8800217 	ldw	r2,8(r21)
 400902c:	8c63883a 	add	r17,r17,r17
 4009030:	8c63883a 	add	r17,r17,r17
 4009034:	1445c83a 	sub	r2,r2,r17
 4009038:	a8800215 	stw	r2,8(r21)
 400903c:	b5800204 	addi	r22,r22,8
 4009040:	bdc00204 	addi	r23,r23,8
 4009044:	103fdb1e 	bne	r2,zero,4008fb4 <__alt_data_end+0xfc008fb4>
 4009048:	0005883a 	mov	r2,zero
 400904c:	003fe806 	br	4008ff0 <__alt_data_end+0xfc008ff0>
 4009050:	400b43c0 	call	400b43c <__sfvwrite_r>
 4009054:	003fe606 	br	4008ff0 <__alt_data_end+0xfc008ff0>

04009058 <__sprint_r>:
 4009058:	30c00217 	ldw	r3,8(r6)
 400905c:	18000126 	beq	r3,zero,4009064 <__sprint_r+0xc>
 4009060:	4008f5c1 	jmpi	4008f5c <__sprint_r.part.0>
 4009064:	30000115 	stw	zero,4(r6)
 4009068:	0005883a 	mov	r2,zero
 400906c:	f800283a 	ret

04009070 <___vfiprintf_internal_r>:
 4009070:	deffca04 	addi	sp,sp,-216
 4009074:	dd403115 	stw	r21,196(sp)
 4009078:	dfc03515 	stw	ra,212(sp)
 400907c:	df003415 	stw	fp,208(sp)
 4009080:	ddc03315 	stw	r23,204(sp)
 4009084:	dd803215 	stw	r22,200(sp)
 4009088:	dd003015 	stw	r20,192(sp)
 400908c:	dcc02f15 	stw	r19,188(sp)
 4009090:	dc802e15 	stw	r18,184(sp)
 4009094:	dc402d15 	stw	r17,180(sp)
 4009098:	dc002c15 	stw	r16,176(sp)
 400909c:	d9002115 	stw	r4,132(sp)
 40090a0:	d9402015 	stw	r5,128(sp)
 40090a4:	d9c02215 	stw	r7,136(sp)
 40090a8:	302b883a 	mov	r21,r6
 40090ac:	20000226 	beq	r4,zero,40090b8 <___vfiprintf_internal_r+0x48>
 40090b0:	20800e17 	ldw	r2,56(r4)
 40090b4:	1000cf26 	beq	r2,zero,40093f4 <___vfiprintf_internal_r+0x384>
 40090b8:	d8c02017 	ldw	r3,128(sp)
 40090bc:	1880030b 	ldhu	r2,12(r3)
 40090c0:	10c8000c 	andi	r3,r2,8192
 40090c4:	1800071e 	bne	r3,zero,40090e4 <___vfiprintf_internal_r+0x74>
 40090c8:	d9402017 	ldw	r5,128(sp)
 40090cc:	00f7ffc4 	movi	r3,-8193
 40090d0:	10880014 	ori	r2,r2,8192
 40090d4:	29001917 	ldw	r4,100(r5)
 40090d8:	2880030d 	sth	r2,12(r5)
 40090dc:	20c6703a 	and	r3,r4,r3
 40090e0:	28c01915 	stw	r3,100(r5)
 40090e4:	10c0020c 	andi	r3,r2,8
 40090e8:	1800a526 	beq	r3,zero,4009380 <___vfiprintf_internal_r+0x310>
 40090ec:	d9002017 	ldw	r4,128(sp)
 40090f0:	20c00417 	ldw	r3,16(r4)
 40090f4:	1800a226 	beq	r3,zero,4009380 <___vfiprintf_internal_r+0x310>
 40090f8:	1080068c 	andi	r2,r2,26
 40090fc:	00c00284 	movi	r3,10
 4009100:	10c0a826 	beq	r2,r3,40093a4 <___vfiprintf_internal_r+0x334>
 4009104:	d9001a04 	addi	r4,sp,104
 4009108:	d94019c4 	addi	r5,sp,103
 400910c:	04810074 	movhi	r18,1025
 4009110:	2145c83a 	sub	r2,r4,r5
 4009114:	948506c4 	addi	r18,r18,5147
 4009118:	d9001e15 	stw	r4,120(sp)
 400911c:	d9401f15 	stw	r5,124(sp)
 4009120:	dec01a15 	stw	sp,104(sp)
 4009124:	d8001c15 	stw	zero,112(sp)
 4009128:	d8001b15 	stw	zero,108(sp)
 400912c:	d811883a 	mov	r8,sp
 4009130:	d8002615 	stw	zero,152(sp)
 4009134:	d8002415 	stw	zero,144(sp)
 4009138:	d8802815 	stw	r2,160(sp)
 400913c:	a82d883a 	mov	r22,r21
 4009140:	b0800007 	ldb	r2,0(r22)
 4009144:	10040d26 	beq	r2,zero,400a17c <___vfiprintf_internal_r+0x110c>
 4009148:	00c00944 	movi	r3,37
 400914c:	b029883a 	mov	r20,r22
 4009150:	10c0021e 	bne	r2,r3,400915c <___vfiprintf_internal_r+0xec>
 4009154:	00001606 	br	40091b0 <___vfiprintf_internal_r+0x140>
 4009158:	10c00326 	beq	r2,r3,4009168 <___vfiprintf_internal_r+0xf8>
 400915c:	a5000044 	addi	r20,r20,1
 4009160:	a0800007 	ldb	r2,0(r20)
 4009164:	103ffc1e 	bne	r2,zero,4009158 <__alt_data_end+0xfc009158>
 4009168:	a5a1c83a 	sub	r16,r20,r22
 400916c:	80001026 	beq	r16,zero,40091b0 <___vfiprintf_internal_r+0x140>
 4009170:	d8c01c17 	ldw	r3,112(sp)
 4009174:	d8801b17 	ldw	r2,108(sp)
 4009178:	45800015 	stw	r22,0(r8)
 400917c:	80c7883a 	add	r3,r16,r3
 4009180:	10800044 	addi	r2,r2,1
 4009184:	44000115 	stw	r16,4(r8)
 4009188:	d8c01c15 	stw	r3,112(sp)
 400918c:	d8801b15 	stw	r2,108(sp)
 4009190:	010001c4 	movi	r4,7
 4009194:	2080750e 	bge	r4,r2,400936c <___vfiprintf_internal_r+0x2fc>
 4009198:	1803951e 	bne	r3,zero,4009ff0 <___vfiprintf_internal_r+0xf80>
 400919c:	d8c02417 	ldw	r3,144(sp)
 40091a0:	d8001b15 	stw	zero,108(sp)
 40091a4:	d811883a 	mov	r8,sp
 40091a8:	1c07883a 	add	r3,r3,r16
 40091ac:	d8c02415 	stw	r3,144(sp)
 40091b0:	a0800007 	ldb	r2,0(r20)
 40091b4:	1002e026 	beq	r2,zero,4009d38 <___vfiprintf_internal_r+0xcc8>
 40091b8:	a5800044 	addi	r22,r20,1
 40091bc:	a0c00047 	ldb	r3,1(r20)
 40091c0:	d8001d85 	stb	zero,118(sp)
 40091c4:	0027883a 	mov	r19,zero
 40091c8:	d8002305 	stb	zero,140(sp)
 40091cc:	043fffc4 	movi	r16,-1
 40091d0:	d8002515 	stw	zero,148(sp)
 40091d4:	0023883a 	mov	r17,zero
 40091d8:	05001604 	movi	r20,88
 40091dc:	05400244 	movi	r21,9
 40091e0:	402f883a 	mov	r23,r8
 40091e4:	b5800044 	addi	r22,r22,1
 40091e8:	18bff804 	addi	r2,r3,-32
 40091ec:	a0827736 	bltu	r20,r2,4009bcc <___vfiprintf_internal_r+0xb5c>
 40091f0:	100490ba 	slli	r2,r2,2
 40091f4:	01010074 	movhi	r4,1025
 40091f8:	21248204 	addi	r4,r4,-28152
 40091fc:	1105883a 	add	r2,r2,r4
 4009200:	10800017 	ldw	r2,0(r2)
 4009204:	1000683a 	jmp	r2
 4009208:	040098cc 	andi	r16,zero,611
 400920c:	04009bcc 	andi	r16,zero,623
 4009210:	04009bcc 	andi	r16,zero,623
 4009214:	040098e8 	cmpgeui	r16,zero,611
 4009218:	04009bcc 	andi	r16,zero,623
 400921c:	04009bcc 	andi	r16,zero,623
 4009220:	04009bcc 	andi	r16,zero,623
 4009224:	04009bcc 	andi	r16,zero,623
 4009228:	04009bcc 	andi	r16,zero,623
 400922c:	04009bcc 	andi	r16,zero,623
 4009230:	04009af0 	cmpltui	r16,zero,619
 4009234:	04009b14 	movui	r16,620
 4009238:	04009bcc 	andi	r16,zero,623
 400923c:	0400940c 	andi	r16,zero,592
 4009240:	04009b28 	cmpgeui	r16,zero,620
 4009244:	04009bcc 	andi	r16,zero,623
 4009248:	040098f4 	movhi	r16,611
 400924c:	04009900 	call	400990 <__alt_mem_sdram-0x3bff670>
 4009250:	04009900 	call	400990 <__alt_mem_sdram-0x3bff670>
 4009254:	04009900 	call	400990 <__alt_mem_sdram-0x3bff670>
 4009258:	04009900 	call	400990 <__alt_mem_sdram-0x3bff670>
 400925c:	04009900 	call	400990 <__alt_mem_sdram-0x3bff670>
 4009260:	04009900 	call	400990 <__alt_mem_sdram-0x3bff670>
 4009264:	04009900 	call	400990 <__alt_mem_sdram-0x3bff670>
 4009268:	04009900 	call	400990 <__alt_mem_sdram-0x3bff670>
 400926c:	04009900 	call	400990 <__alt_mem_sdram-0x3bff670>
 4009270:	04009bcc 	andi	r16,zero,623
 4009274:	04009bcc 	andi	r16,zero,623
 4009278:	04009bcc 	andi	r16,zero,623
 400927c:	04009bcc 	andi	r16,zero,623
 4009280:	04009bcc 	andi	r16,zero,623
 4009284:	04009bcc 	andi	r16,zero,623
 4009288:	04009bcc 	andi	r16,zero,623
 400928c:	04009bcc 	andi	r16,zero,623
 4009290:	04009bcc 	andi	r16,zero,623
 4009294:	04009bcc 	andi	r16,zero,623
 4009298:	04009940 	call	400994 <__alt_mem_sdram-0x3bff66c>
 400929c:	04009bcc 	andi	r16,zero,623
 40092a0:	04009bcc 	andi	r16,zero,623
 40092a4:	04009bcc 	andi	r16,zero,623
 40092a8:	04009bcc 	andi	r16,zero,623
 40092ac:	04009bcc 	andi	r16,zero,623
 40092b0:	04009bcc 	andi	r16,zero,623
 40092b4:	04009bcc 	andi	r16,zero,623
 40092b8:	04009bcc 	andi	r16,zero,623
 40092bc:	04009bcc 	andi	r16,zero,623
 40092c0:	04009bcc 	andi	r16,zero,623
 40092c4:	0400997c 	xorhi	r16,zero,613
 40092c8:	04009bcc 	andi	r16,zero,623
 40092cc:	04009bcc 	andi	r16,zero,623
 40092d0:	04009bcc 	andi	r16,zero,623
 40092d4:	04009bcc 	andi	r16,zero,623
 40092d8:	04009bcc 	andi	r16,zero,623
 40092dc:	040099d8 	cmpnei	r16,zero,615
 40092e0:	04009bcc 	andi	r16,zero,623
 40092e4:	04009bcc 	andi	r16,zero,623
 40092e8:	04009a4c 	andi	r16,zero,617
 40092ec:	04009bcc 	andi	r16,zero,623
 40092f0:	04009bcc 	andi	r16,zero,623
 40092f4:	04009bcc 	andi	r16,zero,623
 40092f8:	04009bcc 	andi	r16,zero,623
 40092fc:	04009bcc 	andi	r16,zero,623
 4009300:	04009bcc 	andi	r16,zero,623
 4009304:	04009bcc 	andi	r16,zero,623
 4009308:	04009bcc 	andi	r16,zero,623
 400930c:	04009bcc 	andi	r16,zero,623
 4009310:	04009bcc 	andi	r16,zero,623
 4009314:	040097f4 	movhi	r16,607
 4009318:	04009824 	muli	r16,zero,608
 400931c:	04009bcc 	andi	r16,zero,623
 4009320:	04009bcc 	andi	r16,zero,623
 4009324:	04009bcc 	andi	r16,zero,623
 4009328:	04009b74 	movhi	r16,621
 400932c:	04009824 	muli	r16,zero,608
 4009330:	04009bcc 	andi	r16,zero,623
 4009334:	04009bcc 	andi	r16,zero,623
 4009338:	040096cc 	andi	r16,zero,603
 400933c:	04009bcc 	andi	r16,zero,623
 4009340:	040096e0 	cmpeqi	r16,zero,603
 4009344:	04009718 	cmpnei	r16,zero,604
 4009348:	04009418 	cmpnei	r16,zero,592
 400934c:	040096c0 	call	40096c <__alt_mem_sdram-0x3bff694>
 4009350:	04009bcc 	andi	r16,zero,623
 4009354:	04009a8c 	andi	r16,zero,618
 4009358:	04009bcc 	andi	r16,zero,623
 400935c:	04009ad8 	cmpnei	r16,zero,619
 4009360:	04009bcc 	andi	r16,zero,623
 4009364:	04009bcc 	andi	r16,zero,623
 4009368:	0400979c 	xori	r16,zero,606
 400936c:	42000204 	addi	r8,r8,8
 4009370:	d8c02417 	ldw	r3,144(sp)
 4009374:	1c07883a 	add	r3,r3,r16
 4009378:	d8c02415 	stw	r3,144(sp)
 400937c:	003f8c06 	br	40091b0 <__alt_data_end+0xfc0091b0>
 4009380:	d9402017 	ldw	r5,128(sp)
 4009384:	d9002117 	ldw	r4,132(sp)
 4009388:	400a6540 	call	400a654 <__swsetup_r>
 400938c:	1003c11e 	bne	r2,zero,400a294 <___vfiprintf_internal_r+0x1224>
 4009390:	d9402017 	ldw	r5,128(sp)
 4009394:	00c00284 	movi	r3,10
 4009398:	2880030b 	ldhu	r2,12(r5)
 400939c:	1080068c 	andi	r2,r2,26
 40093a0:	10ff581e 	bne	r2,r3,4009104 <__alt_data_end+0xfc009104>
 40093a4:	d8c02017 	ldw	r3,128(sp)
 40093a8:	1880038f 	ldh	r2,14(r3)
 40093ac:	103f5516 	blt	r2,zero,4009104 <__alt_data_end+0xfc009104>
 40093b0:	d9c02217 	ldw	r7,136(sp)
 40093b4:	d9002117 	ldw	r4,132(sp)
 40093b8:	a80d883a 	mov	r6,r21
 40093bc:	180b883a 	mov	r5,r3
 40093c0:	400a5980 	call	400a598 <__sbprintf>
 40093c4:	dfc03517 	ldw	ra,212(sp)
 40093c8:	df003417 	ldw	fp,208(sp)
 40093cc:	ddc03317 	ldw	r23,204(sp)
 40093d0:	dd803217 	ldw	r22,200(sp)
 40093d4:	dd403117 	ldw	r21,196(sp)
 40093d8:	dd003017 	ldw	r20,192(sp)
 40093dc:	dcc02f17 	ldw	r19,188(sp)
 40093e0:	dc802e17 	ldw	r18,184(sp)
 40093e4:	dc402d17 	ldw	r17,180(sp)
 40093e8:	dc002c17 	ldw	r16,176(sp)
 40093ec:	dec03604 	addi	sp,sp,216
 40093f0:	f800283a 	ret
 40093f4:	400adb00 	call	400adb0 <__sinit>
 40093f8:	003f2f06 	br	40090b8 <__alt_data_end+0xfc0090b8>
 40093fc:	d8c02517 	ldw	r3,148(sp)
 4009400:	d8802215 	stw	r2,136(sp)
 4009404:	00c7c83a 	sub	r3,zero,r3
 4009408:	d8c02515 	stw	r3,148(sp)
 400940c:	8c400114 	ori	r17,r17,4
 4009410:	b0c00007 	ldb	r3,0(r22)
 4009414:	003f7306 	br	40091e4 <__alt_data_end+0xfc0091e4>
 4009418:	00800c04 	movi	r2,48
 400941c:	d9402217 	ldw	r5,136(sp)
 4009420:	d8801d05 	stb	r2,116(sp)
 4009424:	00801e04 	movi	r2,120
 4009428:	d8801d45 	stb	r2,117(sp)
 400942c:	d8001d85 	stb	zero,118(sp)
 4009430:	b811883a 	mov	r8,r23
 4009434:	28c00104 	addi	r3,r5,4
 4009438:	2cc00017 	ldw	r19,0(r5)
 400943c:	0029883a 	mov	r20,zero
 4009440:	88800094 	ori	r2,r17,2
 4009444:	80032516 	blt	r16,zero,400a0dc <___vfiprintf_internal_r+0x106c>
 4009448:	00bfdfc4 	movi	r2,-129
 400944c:	88a2703a 	and	r17,r17,r2
 4009450:	d8c02215 	stw	r3,136(sp)
 4009454:	8c400094 	ori	r17,r17,2
 4009458:	98032a1e 	bne	r19,zero,400a104 <___vfiprintf_internal_r+0x1094>
 400945c:	00810074 	movhi	r2,1025
 4009460:	10850004 	addi	r2,r2,5120
 4009464:	d8802615 	stw	r2,152(sp)
 4009468:	002b883a 	mov	r21,zero
 400946c:	8001741e 	bne	r16,zero,4009a40 <___vfiprintf_internal_r+0x9d0>
 4009470:	0021883a 	mov	r16,zero
 4009474:	0029883a 	mov	r20,zero
 4009478:	ddc01a04 	addi	r23,sp,104
 400947c:	8027883a 	mov	r19,r16
 4009480:	8500010e 	bge	r16,r20,4009488 <___vfiprintf_internal_r+0x418>
 4009484:	a027883a 	mov	r19,r20
 4009488:	ad403fcc 	andi	r21,r21,255
 400948c:	ad40201c 	xori	r21,r21,128
 4009490:	ad7fe004 	addi	r21,r21,-128
 4009494:	a8000126 	beq	r21,zero,400949c <___vfiprintf_internal_r+0x42c>
 4009498:	9cc00044 	addi	r19,r19,1
 400949c:	89c0008c 	andi	r7,r17,2
 40094a0:	38000126 	beq	r7,zero,40094a8 <___vfiprintf_internal_r+0x438>
 40094a4:	9cc00084 	addi	r19,r19,2
 40094a8:	88c0210c 	andi	r3,r17,132
 40094ac:	1801dd1e 	bne	r3,zero,4009c24 <___vfiprintf_internal_r+0xbb4>
 40094b0:	d9402517 	ldw	r5,148(sp)
 40094b4:	2cebc83a 	sub	r21,r5,r19
 40094b8:	0541da0e 	bge	zero,r21,4009c24 <___vfiprintf_internal_r+0xbb4>
 40094bc:	07000404 	movi	fp,16
 40094c0:	d8801c17 	ldw	r2,112(sp)
 40094c4:	e543be0e 	bge	fp,r21,400a3c0 <___vfiprintf_internal_r+0x1350>
 40094c8:	01410074 	movhi	r5,1025
 40094cc:	29450ac4 	addi	r5,r5,5163
 40094d0:	dc002715 	stw	r16,156(sp)
 40094d4:	d9801b17 	ldw	r6,108(sp)
 40094d8:	a821883a 	mov	r16,r21
 40094dc:	d9402315 	stw	r5,140(sp)
 40094e0:	028001c4 	movi	r10,7
 40094e4:	d9c02915 	stw	r7,164(sp)
 40094e8:	182b883a 	mov	r21,r3
 40094ec:	00000506 	br	4009504 <___vfiprintf_internal_r+0x494>
 40094f0:	31000084 	addi	r4,r6,2
 40094f4:	42000204 	addi	r8,r8,8
 40094f8:	180d883a 	mov	r6,r3
 40094fc:	843ffc04 	addi	r16,r16,-16
 4009500:	e4000f0e 	bge	fp,r16,4009540 <___vfiprintf_internal_r+0x4d0>
 4009504:	01010074 	movhi	r4,1025
 4009508:	10800404 	addi	r2,r2,16
 400950c:	30c00044 	addi	r3,r6,1
 4009510:	21050ac4 	addi	r4,r4,5163
 4009514:	41000015 	stw	r4,0(r8)
 4009518:	47000115 	stw	fp,4(r8)
 400951c:	d8801c15 	stw	r2,112(sp)
 4009520:	d8c01b15 	stw	r3,108(sp)
 4009524:	50fff20e 	bge	r10,r3,40094f0 <__alt_data_end+0xfc0094f0>
 4009528:	1001b21e 	bne	r2,zero,4009bf4 <___vfiprintf_internal_r+0xb84>
 400952c:	843ffc04 	addi	r16,r16,-16
 4009530:	000d883a 	mov	r6,zero
 4009534:	01000044 	movi	r4,1
 4009538:	d811883a 	mov	r8,sp
 400953c:	e43ff116 	blt	fp,r16,4009504 <__alt_data_end+0xfc009504>
 4009540:	a807883a 	mov	r3,r21
 4009544:	d9c02917 	ldw	r7,164(sp)
 4009548:	802b883a 	mov	r21,r16
 400954c:	dc002717 	ldw	r16,156(sp)
 4009550:	d9402317 	ldw	r5,140(sp)
 4009554:	a885883a 	add	r2,r21,r2
 4009558:	45400115 	stw	r21,4(r8)
 400955c:	41400015 	stw	r5,0(r8)
 4009560:	d8801c15 	stw	r2,112(sp)
 4009564:	d9001b15 	stw	r4,108(sp)
 4009568:	014001c4 	movi	r5,7
 400956c:	29026216 	blt	r5,r4,4009ef8 <___vfiprintf_internal_r+0xe88>
 4009570:	d9801d87 	ldb	r6,118(sp)
 4009574:	42000204 	addi	r8,r8,8
 4009578:	21400044 	addi	r5,r4,1
 400957c:	3001ae1e 	bne	r6,zero,4009c38 <___vfiprintf_internal_r+0xbc8>
 4009580:	3801bb26 	beq	r7,zero,4009c70 <___vfiprintf_internal_r+0xc00>
 4009584:	d9001d04 	addi	r4,sp,116
 4009588:	10800084 	addi	r2,r2,2
 400958c:	41000015 	stw	r4,0(r8)
 4009590:	01000084 	movi	r4,2
 4009594:	41000115 	stw	r4,4(r8)
 4009598:	d8801c15 	stw	r2,112(sp)
 400959c:	d9401b15 	stw	r5,108(sp)
 40095a0:	010001c4 	movi	r4,7
 40095a4:	2142680e 	bge	r4,r5,4009f48 <___vfiprintf_internal_r+0xed8>
 40095a8:	1002b11e 	bne	r2,zero,400a070 <___vfiprintf_internal_r+0x1000>
 40095ac:	01802004 	movi	r6,128
 40095b0:	01400044 	movi	r5,1
 40095b4:	0009883a 	mov	r4,zero
 40095b8:	d811883a 	mov	r8,sp
 40095bc:	1981ae1e 	bne	r3,r6,4009c78 <___vfiprintf_internal_r+0xc08>
 40095c0:	d8c02517 	ldw	r3,148(sp)
 40095c4:	1cf9c83a 	sub	fp,r3,r19
 40095c8:	0701ab0e 	bge	zero,fp,4009c78 <___vfiprintf_internal_r+0xc08>
 40095cc:	05400404 	movi	r21,16
 40095d0:	af03a90e 	bge	r21,fp,400a478 <___vfiprintf_internal_r+0x1408>
 40095d4:	01410074 	movhi	r5,1025
 40095d8:	294506c4 	addi	r5,r5,5147
 40095dc:	d9402315 	stw	r5,140(sp)
 40095e0:	01c001c4 	movi	r7,7
 40095e4:	00000506 	br	40095fc <___vfiprintf_internal_r+0x58c>
 40095e8:	21800084 	addi	r6,r4,2
 40095ec:	42000204 	addi	r8,r8,8
 40095f0:	1809883a 	mov	r4,r3
 40095f4:	e73ffc04 	addi	fp,fp,-16
 40095f8:	af000d0e 	bge	r21,fp,4009630 <___vfiprintf_internal_r+0x5c0>
 40095fc:	10800404 	addi	r2,r2,16
 4009600:	20c00044 	addi	r3,r4,1
 4009604:	44800015 	stw	r18,0(r8)
 4009608:	45400115 	stw	r21,4(r8)
 400960c:	d8801c15 	stw	r2,112(sp)
 4009610:	d8c01b15 	stw	r3,108(sp)
 4009614:	38fff40e 	bge	r7,r3,40095e8 <__alt_data_end+0xfc0095e8>
 4009618:	10022b1e 	bne	r2,zero,4009ec8 <___vfiprintf_internal_r+0xe58>
 400961c:	e73ffc04 	addi	fp,fp,-16
 4009620:	01800044 	movi	r6,1
 4009624:	0009883a 	mov	r4,zero
 4009628:	d811883a 	mov	r8,sp
 400962c:	af3ff316 	blt	r21,fp,40095fc <__alt_data_end+0xfc0095fc>
 4009630:	d8c02317 	ldw	r3,140(sp)
 4009634:	1705883a 	add	r2,r2,fp
 4009638:	47000115 	stw	fp,4(r8)
 400963c:	40c00015 	stw	r3,0(r8)
 4009640:	d8801c15 	stw	r2,112(sp)
 4009644:	d9801b15 	stw	r6,108(sp)
 4009648:	00c001c4 	movi	r3,7
 400964c:	19829416 	blt	r3,r6,400a0a0 <___vfiprintf_internal_r+0x1030>
 4009650:	8521c83a 	sub	r16,r16,r20
 4009654:	42000204 	addi	r8,r8,8
 4009658:	31400044 	addi	r5,r6,1
 400965c:	3009883a 	mov	r4,r6
 4009660:	04018716 	blt	zero,r16,4009c80 <___vfiprintf_internal_r+0xc10>
 4009664:	a085883a 	add	r2,r20,r2
 4009668:	45c00015 	stw	r23,0(r8)
 400966c:	45000115 	stw	r20,4(r8)
 4009670:	d8801c15 	stw	r2,112(sp)
 4009674:	d9401b15 	stw	r5,108(sp)
 4009678:	00c001c4 	movi	r3,7
 400967c:	1941c20e 	bge	r3,r5,4009d88 <___vfiprintf_internal_r+0xd18>
 4009680:	1002531e 	bne	r2,zero,4009fd0 <___vfiprintf_internal_r+0xf60>
 4009684:	d8001b15 	stw	zero,108(sp)
 4009688:	8c40010c 	andi	r17,r17,4
 400968c:	88023226 	beq	r17,zero,4009f58 <___vfiprintf_internal_r+0xee8>
 4009690:	d9002517 	ldw	r4,148(sp)
 4009694:	24e3c83a 	sub	r17,r4,r19
 4009698:	04432916 	blt	zero,r17,400a340 <___vfiprintf_internal_r+0x12d0>
 400969c:	d8802517 	ldw	r2,148(sp)
 40096a0:	14c0010e 	bge	r2,r19,40096a8 <___vfiprintf_internal_r+0x638>
 40096a4:	9805883a 	mov	r2,r19
 40096a8:	d8c02417 	ldw	r3,144(sp)
 40096ac:	1887883a 	add	r3,r3,r2
 40096b0:	d8c02415 	stw	r3,144(sp)
 40096b4:	d8001b15 	stw	zero,108(sp)
 40096b8:	d811883a 	mov	r8,sp
 40096bc:	003ea006 	br	4009140 <__alt_data_end+0xfc009140>
 40096c0:	8c400814 	ori	r17,r17,32
 40096c4:	b0c00007 	ldb	r3,0(r22)
 40096c8:	003ec606 	br	40091e4 <__alt_data_end+0xfc0091e4>
 40096cc:	b0c00007 	ldb	r3,0(r22)
 40096d0:	00801b04 	movi	r2,108
 40096d4:	18832026 	beq	r3,r2,400a358 <___vfiprintf_internal_r+0x12e8>
 40096d8:	8c400414 	ori	r17,r17,16
 40096dc:	003ec106 	br	40091e4 <__alt_data_end+0xfc0091e4>
 40096e0:	9cc03fcc 	andi	r19,r19,255
 40096e4:	b811883a 	mov	r8,r23
 40096e8:	9803981e 	bne	r19,zero,400a54c <___vfiprintf_internal_r+0x14dc>
 40096ec:	8880080c 	andi	r2,r17,32
 40096f0:	1002be26 	beq	r2,zero,400a1ec <___vfiprintf_internal_r+0x117c>
 40096f4:	d9002217 	ldw	r4,136(sp)
 40096f8:	d9402417 	ldw	r5,144(sp)
 40096fc:	20800017 	ldw	r2,0(r4)
 4009700:	2807d7fa 	srai	r3,r5,31
 4009704:	21000104 	addi	r4,r4,4
 4009708:	d9002215 	stw	r4,136(sp)
 400970c:	11400015 	stw	r5,0(r2)
 4009710:	10c00115 	stw	r3,4(r2)
 4009714:	003e8a06 	br	4009140 <__alt_data_end+0xfc009140>
 4009718:	9cc03fcc 	andi	r19,r19,255
 400971c:	b811883a 	mov	r8,r23
 4009720:	9803871e 	bne	r19,zero,400a540 <___vfiprintf_internal_r+0x14d0>
 4009724:	8880080c 	andi	r2,r17,32
 4009728:	10009a26 	beq	r2,zero,4009994 <___vfiprintf_internal_r+0x924>
 400972c:	d9002217 	ldw	r4,136(sp)
 4009730:	d8001d85 	stb	zero,118(sp)
 4009734:	20800204 	addi	r2,r4,8
 4009738:	24c00017 	ldw	r19,0(r4)
 400973c:	25000117 	ldw	r20,4(r4)
 4009740:	8002a416 	blt	r16,zero,400a1d4 <___vfiprintf_internal_r+0x1164>
 4009744:	013fdfc4 	movi	r4,-129
 4009748:	9d06b03a 	or	r3,r19,r20
 400974c:	d8802215 	stw	r2,136(sp)
 4009750:	8922703a 	and	r17,r17,r4
 4009754:	18009b26 	beq	r3,zero,40099c4 <___vfiprintf_internal_r+0x954>
 4009758:	002b883a 	mov	r21,zero
 400975c:	ddc01a04 	addi	r23,sp,104
 4009760:	9806d0fa 	srli	r3,r19,3
 4009764:	a008977a 	slli	r4,r20,29
 4009768:	a028d0fa 	srli	r20,r20,3
 400976c:	9cc001cc 	andi	r19,r19,7
 4009770:	98800c04 	addi	r2,r19,48
 4009774:	bdffffc4 	addi	r23,r23,-1
 4009778:	20e6b03a 	or	r19,r4,r3
 400977c:	b8800005 	stb	r2,0(r23)
 4009780:	9d06b03a 	or	r3,r19,r20
 4009784:	183ff61e 	bne	r3,zero,4009760 <__alt_data_end+0xfc009760>
 4009788:	88c0004c 	andi	r3,r17,1
 400978c:	18021f1e 	bne	r3,zero,400a00c <___vfiprintf_internal_r+0xf9c>
 4009790:	d9401e17 	ldw	r5,120(sp)
 4009794:	2de9c83a 	sub	r20,r5,r23
 4009798:	003f3806 	br	400947c <__alt_data_end+0xfc00947c>
 400979c:	9cc03fcc 	andi	r19,r19,255
 40097a0:	b811883a 	mov	r8,r23
 40097a4:	98034f1e 	bne	r19,zero,400a4e4 <___vfiprintf_internal_r+0x1474>
 40097a8:	00810074 	movhi	r2,1025
 40097ac:	10850004 	addi	r2,r2,5120
 40097b0:	d8802615 	stw	r2,152(sp)
 40097b4:	8880080c 	andi	r2,r17,32
 40097b8:	1000ac26 	beq	r2,zero,4009a6c <___vfiprintf_internal_r+0x9fc>
 40097bc:	d9002217 	ldw	r4,136(sp)
 40097c0:	24c00017 	ldw	r19,0(r4)
 40097c4:	25000117 	ldw	r20,4(r4)
 40097c8:	21000204 	addi	r4,r4,8
 40097cc:	d9002215 	stw	r4,136(sp)
 40097d0:	8880004c 	andi	r2,r17,1
 40097d4:	1001e726 	beq	r2,zero,4009f74 <___vfiprintf_internal_r+0xf04>
 40097d8:	9d04b03a 	or	r2,r19,r20
 40097dc:	10025c1e 	bne	r2,zero,400a150 <___vfiprintf_internal_r+0x10e0>
 40097e0:	d8001d85 	stb	zero,118(sp)
 40097e4:	80024416 	blt	r16,zero,400a0f8 <___vfiprintf_internal_r+0x1088>
 40097e8:	00bfdfc4 	movi	r2,-129
 40097ec:	88a2703a 	and	r17,r17,r2
 40097f0:	003f1d06 	br	4009468 <__alt_data_end+0xfc009468>
 40097f4:	d8c02217 	ldw	r3,136(sp)
 40097f8:	04c00044 	movi	r19,1
 40097fc:	b811883a 	mov	r8,r23
 4009800:	18800017 	ldw	r2,0(r3)
 4009804:	18c00104 	addi	r3,r3,4
 4009808:	d8001d85 	stb	zero,118(sp)
 400980c:	d8801005 	stb	r2,64(sp)
 4009810:	d8c02215 	stw	r3,136(sp)
 4009814:	9829883a 	mov	r20,r19
 4009818:	ddc01004 	addi	r23,sp,64
 400981c:	0021883a 	mov	r16,zero
 4009820:	003f1e06 	br	400949c <__alt_data_end+0xfc00949c>
 4009824:	9cc03fcc 	andi	r19,r19,255
 4009828:	b811883a 	mov	r8,r23
 400982c:	9803331e 	bne	r19,zero,400a4fc <___vfiprintf_internal_r+0x148c>
 4009830:	8880080c 	andi	r2,r17,32
 4009834:	10004826 	beq	r2,zero,4009958 <___vfiprintf_internal_r+0x8e8>
 4009838:	d9002217 	ldw	r4,136(sp)
 400983c:	20800117 	ldw	r2,4(r4)
 4009840:	24c00017 	ldw	r19,0(r4)
 4009844:	21000204 	addi	r4,r4,8
 4009848:	d9002215 	stw	r4,136(sp)
 400984c:	1029883a 	mov	r20,r2
 4009850:	10024c16 	blt	r2,zero,400a184 <___vfiprintf_internal_r+0x1114>
 4009854:	dd401d83 	ldbu	r21,118(sp)
 4009858:	80007116 	blt	r16,zero,4009a20 <___vfiprintf_internal_r+0x9b0>
 400985c:	00ffdfc4 	movi	r3,-129
 4009860:	9d04b03a 	or	r2,r19,r20
 4009864:	88e2703a 	and	r17,r17,r3
 4009868:	1000d126 	beq	r2,zero,4009bb0 <___vfiprintf_internal_r+0xb40>
 400986c:	a0023526 	beq	r20,zero,400a144 <___vfiprintf_internal_r+0x10d4>
 4009870:	ddc01a04 	addi	r23,sp,104
 4009874:	4039883a 	mov	fp,r8
 4009878:	9809883a 	mov	r4,r19
 400987c:	a00b883a 	mov	r5,r20
 4009880:	01800284 	movi	r6,10
 4009884:	000f883a 	mov	r7,zero
 4009888:	400dc3c0 	call	400dc3c <__umoddi3>
 400988c:	10800c04 	addi	r2,r2,48
 4009890:	bdffffc4 	addi	r23,r23,-1
 4009894:	9809883a 	mov	r4,r19
 4009898:	a00b883a 	mov	r5,r20
 400989c:	b8800005 	stb	r2,0(r23)
 40098a0:	01800284 	movi	r6,10
 40098a4:	000f883a 	mov	r7,zero
 40098a8:	400d6400 	call	400d640 <__udivdi3>
 40098ac:	1027883a 	mov	r19,r2
 40098b0:	10c4b03a 	or	r2,r2,r3
 40098b4:	1829883a 	mov	r20,r3
 40098b8:	103fef1e 	bne	r2,zero,4009878 <__alt_data_end+0xfc009878>
 40098bc:	d9001e17 	ldw	r4,120(sp)
 40098c0:	e011883a 	mov	r8,fp
 40098c4:	25e9c83a 	sub	r20,r4,r23
 40098c8:	003eec06 	br	400947c <__alt_data_end+0xfc00947c>
 40098cc:	d8802307 	ldb	r2,140(sp)
 40098d0:	1002361e 	bne	r2,zero,400a1ac <___vfiprintf_internal_r+0x113c>
 40098d4:	00c00804 	movi	r3,32
 40098d8:	d8c02305 	stb	r3,140(sp)
 40098dc:	04c00044 	movi	r19,1
 40098e0:	b0c00007 	ldb	r3,0(r22)
 40098e4:	003e3f06 	br	40091e4 <__alt_data_end+0xfc0091e4>
 40098e8:	8c400054 	ori	r17,r17,1
 40098ec:	b0c00007 	ldb	r3,0(r22)
 40098f0:	003e3c06 	br	40091e4 <__alt_data_end+0xfc0091e4>
 40098f4:	8c402014 	ori	r17,r17,128
 40098f8:	b0c00007 	ldb	r3,0(r22)
 40098fc:	003e3906 	br	40091e4 <__alt_data_end+0xfc0091e4>
 4009900:	dc002715 	stw	r16,156(sp)
 4009904:	d8002515 	stw	zero,148(sp)
 4009908:	1f3ff404 	addi	fp,r3,-48
 400990c:	0009883a 	mov	r4,zero
 4009910:	b021883a 	mov	r16,r22
 4009914:	01400284 	movi	r5,10
 4009918:	40048b00 	call	40048b0 <__mulsi3>
 400991c:	80c00007 	ldb	r3,0(r16)
 4009920:	e089883a 	add	r4,fp,r2
 4009924:	b5800044 	addi	r22,r22,1
 4009928:	1f3ff404 	addi	fp,r3,-48
 400992c:	b021883a 	mov	r16,r22
 4009930:	af3ff82e 	bgeu	r21,fp,4009914 <__alt_data_end+0xfc009914>
 4009934:	d9002515 	stw	r4,148(sp)
 4009938:	dc002717 	ldw	r16,156(sp)
 400993c:	003e2a06 	br	40091e8 <__alt_data_end+0xfc0091e8>
 4009940:	9cc03fcc 	andi	r19,r19,255
 4009944:	b811883a 	mov	r8,r23
 4009948:	9802e91e 	bne	r19,zero,400a4f0 <___vfiprintf_internal_r+0x1480>
 400994c:	8c400414 	ori	r17,r17,16
 4009950:	8880080c 	andi	r2,r17,32
 4009954:	103fb81e 	bne	r2,zero,4009838 <__alt_data_end+0xfc009838>
 4009958:	8880040c 	andi	r2,r17,16
 400995c:	10022e26 	beq	r2,zero,400a218 <___vfiprintf_internal_r+0x11a8>
 4009960:	d9402217 	ldw	r5,136(sp)
 4009964:	2cc00017 	ldw	r19,0(r5)
 4009968:	29400104 	addi	r5,r5,4
 400996c:	d9402215 	stw	r5,136(sp)
 4009970:	9829d7fa 	srai	r20,r19,31
 4009974:	a005883a 	mov	r2,r20
 4009978:	003fb506 	br	4009850 <__alt_data_end+0xfc009850>
 400997c:	9cc03fcc 	andi	r19,r19,255
 4009980:	b811883a 	mov	r8,r23
 4009984:	9802fa1e 	bne	r19,zero,400a570 <___vfiprintf_internal_r+0x1500>
 4009988:	8c400414 	ori	r17,r17,16
 400998c:	8880080c 	andi	r2,r17,32
 4009990:	103f661e 	bne	r2,zero,400972c <__alt_data_end+0xfc00972c>
 4009994:	8880040c 	andi	r2,r17,16
 4009998:	10020626 	beq	r2,zero,400a1b4 <___vfiprintf_internal_r+0x1144>
 400999c:	d9402217 	ldw	r5,136(sp)
 40099a0:	d8001d85 	stb	zero,118(sp)
 40099a4:	0029883a 	mov	r20,zero
 40099a8:	28800104 	addi	r2,r5,4
 40099ac:	2cc00017 	ldw	r19,0(r5)
 40099b0:	80020816 	blt	r16,zero,400a1d4 <___vfiprintf_internal_r+0x1164>
 40099b4:	00ffdfc4 	movi	r3,-129
 40099b8:	d8802215 	stw	r2,136(sp)
 40099bc:	88e2703a 	and	r17,r17,r3
 40099c0:	983f651e 	bne	r19,zero,4009758 <__alt_data_end+0xfc009758>
 40099c4:	002b883a 	mov	r21,zero
 40099c8:	8002cf26 	beq	r16,zero,400a508 <___vfiprintf_internal_r+0x1498>
 40099cc:	0027883a 	mov	r19,zero
 40099d0:	0029883a 	mov	r20,zero
 40099d4:	003f6106 	br	400975c <__alt_data_end+0xfc00975c>
 40099d8:	9cc03fcc 	andi	r19,r19,255
 40099dc:	b811883a 	mov	r8,r23
 40099e0:	9802e01e 	bne	r19,zero,400a564 <___vfiprintf_internal_r+0x14f4>
 40099e4:	8c400414 	ori	r17,r17,16
 40099e8:	8880080c 	andi	r2,r17,32
 40099ec:	1000641e 	bne	r2,zero,4009b80 <___vfiprintf_internal_r+0xb10>
 40099f0:	8880040c 	andi	r2,r17,16
 40099f4:	1001c81e 	bne	r2,zero,400a118 <___vfiprintf_internal_r+0x10a8>
 40099f8:	8880100c 	andi	r2,r17,64
 40099fc:	d8001d85 	stb	zero,118(sp)
 4009a00:	1002281e 	bne	r2,zero,400a2a4 <___vfiprintf_internal_r+0x1234>
 4009a04:	d9002217 	ldw	r4,136(sp)
 4009a08:	0029883a 	mov	r20,zero
 4009a0c:	20800104 	addi	r2,r4,4
 4009a10:	24c00017 	ldw	r19,0(r4)
 4009a14:	8001c60e 	bge	r16,zero,400a130 <___vfiprintf_internal_r+0x10c0>
 4009a18:	d8802215 	stw	r2,136(sp)
 4009a1c:	002b883a 	mov	r21,zero
 4009a20:	9d04b03a 	or	r2,r19,r20
 4009a24:	103f911e 	bne	r2,zero,400986c <__alt_data_end+0xfc00986c>
 4009a28:	00800044 	movi	r2,1
 4009a2c:	10803fcc 	andi	r2,r2,255
 4009a30:	00c00044 	movi	r3,1
 4009a34:	10c05f26 	beq	r2,r3,4009bb4 <___vfiprintf_internal_r+0xb44>
 4009a38:	00c00084 	movi	r3,2
 4009a3c:	10ffe31e 	bne	r2,r3,40099cc <__alt_data_end+0xfc0099cc>
 4009a40:	0027883a 	mov	r19,zero
 4009a44:	0029883a 	mov	r20,zero
 4009a48:	00015106 	br	4009f90 <___vfiprintf_internal_r+0xf20>
 4009a4c:	9cc03fcc 	andi	r19,r19,255
 4009a50:	b811883a 	mov	r8,r23
 4009a54:	9802c01e 	bne	r19,zero,400a558 <___vfiprintf_internal_r+0x14e8>
 4009a58:	01410074 	movhi	r5,1025
 4009a5c:	2944fb04 	addi	r5,r5,5100
 4009a60:	d9402615 	stw	r5,152(sp)
 4009a64:	8880080c 	andi	r2,r17,32
 4009a68:	103f541e 	bne	r2,zero,40097bc <__alt_data_end+0xfc0097bc>
 4009a6c:	8880040c 	andi	r2,r17,16
 4009a70:	1001f226 	beq	r2,zero,400a23c <___vfiprintf_internal_r+0x11cc>
 4009a74:	d9402217 	ldw	r5,136(sp)
 4009a78:	0029883a 	mov	r20,zero
 4009a7c:	2cc00017 	ldw	r19,0(r5)
 4009a80:	29400104 	addi	r5,r5,4
 4009a84:	d9402215 	stw	r5,136(sp)
 4009a88:	003f5106 	br	40097d0 <__alt_data_end+0xfc0097d0>
 4009a8c:	d8c02217 	ldw	r3,136(sp)
 4009a90:	b811883a 	mov	r8,r23
 4009a94:	d8001d85 	stb	zero,118(sp)
 4009a98:	1dc00017 	ldw	r23,0(r3)
 4009a9c:	1f000104 	addi	fp,r3,4
 4009aa0:	b8025926 	beq	r23,zero,400a408 <___vfiprintf_internal_r+0x1398>
 4009aa4:	80023316 	blt	r16,zero,400a374 <___vfiprintf_internal_r+0x1304>
 4009aa8:	800d883a 	mov	r6,r16
 4009aac:	000b883a 	mov	r5,zero
 4009ab0:	b809883a 	mov	r4,r23
 4009ab4:	da002a15 	stw	r8,168(sp)
 4009ab8:	400c5300 	call	400c530 <memchr>
 4009abc:	da002a17 	ldw	r8,168(sp)
 4009ac0:	10026826 	beq	r2,zero,400a464 <___vfiprintf_internal_r+0x13f4>
 4009ac4:	15e9c83a 	sub	r20,r2,r23
 4009ac8:	dd401d83 	ldbu	r21,118(sp)
 4009acc:	df002215 	stw	fp,136(sp)
 4009ad0:	0021883a 	mov	r16,zero
 4009ad4:	003e6906 	br	400947c <__alt_data_end+0xfc00947c>
 4009ad8:	9cc03fcc 	andi	r19,r19,255
 4009adc:	b811883a 	mov	r8,r23
 4009ae0:	983fc126 	beq	r19,zero,40099e8 <__alt_data_end+0xfc0099e8>
 4009ae4:	d8c02303 	ldbu	r3,140(sp)
 4009ae8:	d8c01d85 	stb	r3,118(sp)
 4009aec:	003fbe06 	br	40099e8 <__alt_data_end+0xfc0099e8>
 4009af0:	d9002217 	ldw	r4,136(sp)
 4009af4:	d9402217 	ldw	r5,136(sp)
 4009af8:	21000017 	ldw	r4,0(r4)
 4009afc:	28800104 	addi	r2,r5,4
 4009b00:	d9002515 	stw	r4,148(sp)
 4009b04:	203e3d16 	blt	r4,zero,40093fc <__alt_data_end+0xfc0093fc>
 4009b08:	d8802215 	stw	r2,136(sp)
 4009b0c:	b0c00007 	ldb	r3,0(r22)
 4009b10:	003db406 	br	40091e4 <__alt_data_end+0xfc0091e4>
 4009b14:	00c00ac4 	movi	r3,43
 4009b18:	d8c02305 	stb	r3,140(sp)
 4009b1c:	04c00044 	movi	r19,1
 4009b20:	b0c00007 	ldb	r3,0(r22)
 4009b24:	003daf06 	br	40091e4 <__alt_data_end+0xfc0091e4>
 4009b28:	b0c00007 	ldb	r3,0(r22)
 4009b2c:	01000a84 	movi	r4,42
 4009b30:	b4000044 	addi	r16,r22,1
 4009b34:	19025e26 	beq	r3,r4,400a4b0 <___vfiprintf_internal_r+0x1440>
 4009b38:	1f3ff404 	addi	fp,r3,-48
 4009b3c:	0009883a 	mov	r4,zero
 4009b40:	af025236 	bltu	r21,fp,400a48c <___vfiprintf_internal_r+0x141c>
 4009b44:	01400284 	movi	r5,10
 4009b48:	40048b00 	call	40048b0 <__mulsi3>
 4009b4c:	80c00007 	ldb	r3,0(r16)
 4009b50:	1709883a 	add	r4,r2,fp
 4009b54:	85800044 	addi	r22,r16,1
 4009b58:	1f3ff404 	addi	fp,r3,-48
 4009b5c:	b021883a 	mov	r16,r22
 4009b60:	af3ff82e 	bgeu	r21,fp,4009b44 <__alt_data_end+0xfc009b44>
 4009b64:	2021883a 	mov	r16,r4
 4009b68:	203d9f0e 	bge	r4,zero,40091e8 <__alt_data_end+0xfc0091e8>
 4009b6c:	043fffc4 	movi	r16,-1
 4009b70:	003d9d06 	br	40091e8 <__alt_data_end+0xfc0091e8>
 4009b74:	8c401014 	ori	r17,r17,64
 4009b78:	b0c00007 	ldb	r3,0(r22)
 4009b7c:	003d9906 	br	40091e4 <__alt_data_end+0xfc0091e4>
 4009b80:	d9002217 	ldw	r4,136(sp)
 4009b84:	d8001d85 	stb	zero,118(sp)
 4009b88:	20c00204 	addi	r3,r4,8
 4009b8c:	24c00017 	ldw	r19,0(r4)
 4009b90:	25000117 	ldw	r20,4(r4)
 4009b94:	8001e716 	blt	r16,zero,400a334 <___vfiprintf_internal_r+0x12c4>
 4009b98:	013fdfc4 	movi	r4,-129
 4009b9c:	9d04b03a 	or	r2,r19,r20
 4009ba0:	d8c02215 	stw	r3,136(sp)
 4009ba4:	8922703a 	and	r17,r17,r4
 4009ba8:	002b883a 	mov	r21,zero
 4009bac:	103f2f1e 	bne	r2,zero,400986c <__alt_data_end+0xfc00986c>
 4009bb0:	803e2f26 	beq	r16,zero,4009470 <__alt_data_end+0xfc009470>
 4009bb4:	0027883a 	mov	r19,zero
 4009bb8:	9cc00c04 	addi	r19,r19,48
 4009bbc:	dcc019c5 	stb	r19,103(sp)
 4009bc0:	dd002817 	ldw	r20,160(sp)
 4009bc4:	ddc019c4 	addi	r23,sp,103
 4009bc8:	003e2c06 	br	400947c <__alt_data_end+0xfc00947c>
 4009bcc:	9cc03fcc 	andi	r19,r19,255
 4009bd0:	b811883a 	mov	r8,r23
 4009bd4:	9802571e 	bne	r19,zero,400a534 <___vfiprintf_internal_r+0x14c4>
 4009bd8:	18005726 	beq	r3,zero,4009d38 <___vfiprintf_internal_r+0xcc8>
 4009bdc:	04c00044 	movi	r19,1
 4009be0:	d8c01005 	stb	r3,64(sp)
 4009be4:	d8001d85 	stb	zero,118(sp)
 4009be8:	9829883a 	mov	r20,r19
 4009bec:	ddc01004 	addi	r23,sp,64
 4009bf0:	003f0a06 	br	400981c <__alt_data_end+0xfc00981c>
 4009bf4:	d9402017 	ldw	r5,128(sp)
 4009bf8:	d9002117 	ldw	r4,132(sp)
 4009bfc:	d9801a04 	addi	r6,sp,104
 4009c00:	da802a15 	stw	r10,168(sp)
 4009c04:	4008f5c0 	call	4008f5c <__sprint_r.part.0>
 4009c08:	da802a17 	ldw	r10,168(sp)
 4009c0c:	1000501e 	bne	r2,zero,4009d50 <___vfiprintf_internal_r+0xce0>
 4009c10:	d9801b17 	ldw	r6,108(sp)
 4009c14:	d8801c17 	ldw	r2,112(sp)
 4009c18:	d811883a 	mov	r8,sp
 4009c1c:	31000044 	addi	r4,r6,1
 4009c20:	003e3606 	br	40094fc <__alt_data_end+0xfc0094fc>
 4009c24:	d9001b17 	ldw	r4,108(sp)
 4009c28:	d8801c17 	ldw	r2,112(sp)
 4009c2c:	21400044 	addi	r5,r4,1
 4009c30:	d9801d87 	ldb	r6,118(sp)
 4009c34:	303e5226 	beq	r6,zero,4009580 <__alt_data_end+0xfc009580>
 4009c38:	01800044 	movi	r6,1
 4009c3c:	d9001d84 	addi	r4,sp,118
 4009c40:	1185883a 	add	r2,r2,r6
 4009c44:	41000015 	stw	r4,0(r8)
 4009c48:	41800115 	stw	r6,4(r8)
 4009c4c:	d8801c15 	stw	r2,112(sp)
 4009c50:	d9401b15 	stw	r5,108(sp)
 4009c54:	010001c4 	movi	r4,7
 4009c58:	2140b00e 	bge	r4,r5,4009f1c <___vfiprintf_internal_r+0xeac>
 4009c5c:	1000f61e 	bne	r2,zero,400a038 <___vfiprintf_internal_r+0xfc8>
 4009c60:	3800b31e 	bne	r7,zero,4009f30 <___vfiprintf_internal_r+0xec0>
 4009c64:	0009883a 	mov	r4,zero
 4009c68:	300b883a 	mov	r5,r6
 4009c6c:	d811883a 	mov	r8,sp
 4009c70:	01802004 	movi	r6,128
 4009c74:	19be5226 	beq	r3,r6,40095c0 <__alt_data_end+0xfc0095c0>
 4009c78:	8521c83a 	sub	r16,r16,r20
 4009c7c:	043e790e 	bge	zero,r16,4009664 <__alt_data_end+0xfc009664>
 4009c80:	05400404 	movi	r21,16
 4009c84:	ac01b00e 	bge	r21,r16,400a348 <___vfiprintf_internal_r+0x12d8>
 4009c88:	01410074 	movhi	r5,1025
 4009c8c:	294506c4 	addi	r5,r5,5147
 4009c90:	d9402315 	stw	r5,140(sp)
 4009c94:	070001c4 	movi	fp,7
 4009c98:	00000506 	br	4009cb0 <___vfiprintf_internal_r+0xc40>
 4009c9c:	21400084 	addi	r5,r4,2
 4009ca0:	42000204 	addi	r8,r8,8
 4009ca4:	1809883a 	mov	r4,r3
 4009ca8:	843ffc04 	addi	r16,r16,-16
 4009cac:	ac000d0e 	bge	r21,r16,4009ce4 <___vfiprintf_internal_r+0xc74>
 4009cb0:	10800404 	addi	r2,r2,16
 4009cb4:	20c00044 	addi	r3,r4,1
 4009cb8:	44800015 	stw	r18,0(r8)
 4009cbc:	45400115 	stw	r21,4(r8)
 4009cc0:	d8801c15 	stw	r2,112(sp)
 4009cc4:	d8c01b15 	stw	r3,108(sp)
 4009cc8:	e0fff40e 	bge	fp,r3,4009c9c <__alt_data_end+0xfc009c9c>
 4009ccc:	1000101e 	bne	r2,zero,4009d10 <___vfiprintf_internal_r+0xca0>
 4009cd0:	843ffc04 	addi	r16,r16,-16
 4009cd4:	01400044 	movi	r5,1
 4009cd8:	0009883a 	mov	r4,zero
 4009cdc:	d811883a 	mov	r8,sp
 4009ce0:	ac3ff316 	blt	r21,r16,4009cb0 <__alt_data_end+0xfc009cb0>
 4009ce4:	d8c02317 	ldw	r3,140(sp)
 4009ce8:	1405883a 	add	r2,r2,r16
 4009cec:	44000115 	stw	r16,4(r8)
 4009cf0:	40c00015 	stw	r3,0(r8)
 4009cf4:	d8801c15 	stw	r2,112(sp)
 4009cf8:	d9401b15 	stw	r5,108(sp)
 4009cfc:	00c001c4 	movi	r3,7
 4009d00:	19401916 	blt	r3,r5,4009d68 <___vfiprintf_internal_r+0xcf8>
 4009d04:	42000204 	addi	r8,r8,8
 4009d08:	29400044 	addi	r5,r5,1
 4009d0c:	003e5506 	br	4009664 <__alt_data_end+0xfc009664>
 4009d10:	d9402017 	ldw	r5,128(sp)
 4009d14:	d9002117 	ldw	r4,132(sp)
 4009d18:	d9801a04 	addi	r6,sp,104
 4009d1c:	4008f5c0 	call	4008f5c <__sprint_r.part.0>
 4009d20:	10000b1e 	bne	r2,zero,4009d50 <___vfiprintf_internal_r+0xce0>
 4009d24:	d9001b17 	ldw	r4,108(sp)
 4009d28:	d8801c17 	ldw	r2,112(sp)
 4009d2c:	d811883a 	mov	r8,sp
 4009d30:	21400044 	addi	r5,r4,1
 4009d34:	003fdc06 	br	4009ca8 <__alt_data_end+0xfc009ca8>
 4009d38:	d8801c17 	ldw	r2,112(sp)
 4009d3c:	10000426 	beq	r2,zero,4009d50 <___vfiprintf_internal_r+0xce0>
 4009d40:	d9402017 	ldw	r5,128(sp)
 4009d44:	d9002117 	ldw	r4,132(sp)
 4009d48:	d9801a04 	addi	r6,sp,104
 4009d4c:	4008f5c0 	call	4008f5c <__sprint_r.part.0>
 4009d50:	d9402017 	ldw	r5,128(sp)
 4009d54:	2880030b 	ldhu	r2,12(r5)
 4009d58:	1080100c 	andi	r2,r2,64
 4009d5c:	10014d1e 	bne	r2,zero,400a294 <___vfiprintf_internal_r+0x1224>
 4009d60:	d8802417 	ldw	r2,144(sp)
 4009d64:	003d9706 	br	40093c4 <__alt_data_end+0xfc0093c4>
 4009d68:	1000d21e 	bne	r2,zero,400a0b4 <___vfiprintf_internal_r+0x1044>
 4009d6c:	00c00044 	movi	r3,1
 4009d70:	a005883a 	mov	r2,r20
 4009d74:	ddc00015 	stw	r23,0(sp)
 4009d78:	dd000115 	stw	r20,4(sp)
 4009d7c:	dd001c15 	stw	r20,112(sp)
 4009d80:	d8c01b15 	stw	r3,108(sp)
 4009d84:	d811883a 	mov	r8,sp
 4009d88:	42000204 	addi	r8,r8,8
 4009d8c:	8c40010c 	andi	r17,r17,4
 4009d90:	88004026 	beq	r17,zero,4009e94 <___vfiprintf_internal_r+0xe24>
 4009d94:	d9002517 	ldw	r4,148(sp)
 4009d98:	24e3c83a 	sub	r17,r4,r19
 4009d9c:	04403d0e 	bge	zero,r17,4009e94 <___vfiprintf_internal_r+0xe24>
 4009da0:	04000404 	movi	r16,16
 4009da4:	8441a90e 	bge	r16,r17,400a44c <___vfiprintf_internal_r+0x13dc>
 4009da8:	00c10074 	movhi	r3,1025
 4009dac:	18c50ac4 	addi	r3,r3,5163
 4009db0:	d9001b17 	ldw	r4,108(sp)
 4009db4:	d8c02315 	stw	r3,140(sp)
 4009db8:	050001c4 	movi	r20,7
 4009dbc:	dd402117 	ldw	r21,132(sp)
 4009dc0:	ddc02017 	ldw	r23,128(sp)
 4009dc4:	00000506 	br	4009ddc <___vfiprintf_internal_r+0xd6c>
 4009dc8:	21400084 	addi	r5,r4,2
 4009dcc:	42000204 	addi	r8,r8,8
 4009dd0:	1809883a 	mov	r4,r3
 4009dd4:	8c7ffc04 	addi	r17,r17,-16
 4009dd8:	84400f0e 	bge	r16,r17,4009e18 <___vfiprintf_internal_r+0xda8>
 4009ddc:	01410074 	movhi	r5,1025
 4009de0:	10800404 	addi	r2,r2,16
 4009de4:	20c00044 	addi	r3,r4,1
 4009de8:	29450ac4 	addi	r5,r5,5163
 4009dec:	41400015 	stw	r5,0(r8)
 4009df0:	44000115 	stw	r16,4(r8)
 4009df4:	d8801c15 	stw	r2,112(sp)
 4009df8:	d8c01b15 	stw	r3,108(sp)
 4009dfc:	a0fff20e 	bge	r20,r3,4009dc8 <__alt_data_end+0xfc009dc8>
 4009e00:	1000141e 	bne	r2,zero,4009e54 <___vfiprintf_internal_r+0xde4>
 4009e04:	8c7ffc04 	addi	r17,r17,-16
 4009e08:	01400044 	movi	r5,1
 4009e0c:	0009883a 	mov	r4,zero
 4009e10:	d811883a 	mov	r8,sp
 4009e14:	847ff116 	blt	r16,r17,4009ddc <__alt_data_end+0xfc009ddc>
 4009e18:	d8c02317 	ldw	r3,140(sp)
 4009e1c:	1445883a 	add	r2,r2,r17
 4009e20:	44400115 	stw	r17,4(r8)
 4009e24:	40c00015 	stw	r3,0(r8)
 4009e28:	d8801c15 	stw	r2,112(sp)
 4009e2c:	d9401b15 	stw	r5,108(sp)
 4009e30:	00c001c4 	movi	r3,7
 4009e34:	1940170e 	bge	r3,r5,4009e94 <___vfiprintf_internal_r+0xe24>
 4009e38:	1000101e 	bne	r2,zero,4009e7c <___vfiprintf_internal_r+0xe0c>
 4009e3c:	d8802517 	ldw	r2,148(sp)
 4009e40:	14c11616 	blt	r2,r19,400a29c <___vfiprintf_internal_r+0x122c>
 4009e44:	d9002417 	ldw	r4,144(sp)
 4009e48:	2089883a 	add	r4,r4,r2
 4009e4c:	d9002415 	stw	r4,144(sp)
 4009e50:	003e1806 	br	40096b4 <__alt_data_end+0xfc0096b4>
 4009e54:	d9801a04 	addi	r6,sp,104
 4009e58:	b80b883a 	mov	r5,r23
 4009e5c:	a809883a 	mov	r4,r21
 4009e60:	4008f5c0 	call	4008f5c <__sprint_r.part.0>
 4009e64:	103fba1e 	bne	r2,zero,4009d50 <__alt_data_end+0xfc009d50>
 4009e68:	d9001b17 	ldw	r4,108(sp)
 4009e6c:	d8801c17 	ldw	r2,112(sp)
 4009e70:	d811883a 	mov	r8,sp
 4009e74:	21400044 	addi	r5,r4,1
 4009e78:	003fd606 	br	4009dd4 <__alt_data_end+0xfc009dd4>
 4009e7c:	d9402017 	ldw	r5,128(sp)
 4009e80:	d9002117 	ldw	r4,132(sp)
 4009e84:	d9801a04 	addi	r6,sp,104
 4009e88:	4008f5c0 	call	4008f5c <__sprint_r.part.0>
 4009e8c:	103fb01e 	bne	r2,zero,4009d50 <__alt_data_end+0xfc009d50>
 4009e90:	d8801c17 	ldw	r2,112(sp)
 4009e94:	d8c02517 	ldw	r3,148(sp)
 4009e98:	1cc0010e 	bge	r3,r19,4009ea0 <___vfiprintf_internal_r+0xe30>
 4009e9c:	9807883a 	mov	r3,r19
 4009ea0:	d9002417 	ldw	r4,144(sp)
 4009ea4:	20c9883a 	add	r4,r4,r3
 4009ea8:	d9002415 	stw	r4,144(sp)
 4009eac:	103e0126 	beq	r2,zero,40096b4 <__alt_data_end+0xfc0096b4>
 4009eb0:	d9402017 	ldw	r5,128(sp)
 4009eb4:	d9002117 	ldw	r4,132(sp)
 4009eb8:	d9801a04 	addi	r6,sp,104
 4009ebc:	4008f5c0 	call	4008f5c <__sprint_r.part.0>
 4009ec0:	103dfc26 	beq	r2,zero,40096b4 <__alt_data_end+0xfc0096b4>
 4009ec4:	003fa206 	br	4009d50 <__alt_data_end+0xfc009d50>
 4009ec8:	d9402017 	ldw	r5,128(sp)
 4009ecc:	d9002117 	ldw	r4,132(sp)
 4009ed0:	d9801a04 	addi	r6,sp,104
 4009ed4:	d9c02b15 	stw	r7,172(sp)
 4009ed8:	4008f5c0 	call	4008f5c <__sprint_r.part.0>
 4009edc:	d9c02b17 	ldw	r7,172(sp)
 4009ee0:	103f9b1e 	bne	r2,zero,4009d50 <__alt_data_end+0xfc009d50>
 4009ee4:	d9001b17 	ldw	r4,108(sp)
 4009ee8:	d8801c17 	ldw	r2,112(sp)
 4009eec:	d811883a 	mov	r8,sp
 4009ef0:	21800044 	addi	r6,r4,1
 4009ef4:	003dbf06 	br	40095f4 <__alt_data_end+0xfc0095f4>
 4009ef8:	1000d81e 	bne	r2,zero,400a25c <___vfiprintf_internal_r+0x11ec>
 4009efc:	d9001d87 	ldb	r4,118(sp)
 4009f00:	20000a26 	beq	r4,zero,4009f2c <___vfiprintf_internal_r+0xebc>
 4009f04:	00800044 	movi	r2,1
 4009f08:	d9001d84 	addi	r4,sp,118
 4009f0c:	100b883a 	mov	r5,r2
 4009f10:	d9000015 	stw	r4,0(sp)
 4009f14:	d8800115 	stw	r2,4(sp)
 4009f18:	d811883a 	mov	r8,sp
 4009f1c:	2809883a 	mov	r4,r5
 4009f20:	42000204 	addi	r8,r8,8
 4009f24:	29400044 	addi	r5,r5,1
 4009f28:	003d9506 	br	4009580 <__alt_data_end+0xfc009580>
 4009f2c:	3800fd26 	beq	r7,zero,400a324 <___vfiprintf_internal_r+0x12b4>
 4009f30:	00800084 	movi	r2,2
 4009f34:	d9001d04 	addi	r4,sp,116
 4009f38:	d9000015 	stw	r4,0(sp)
 4009f3c:	d8800115 	stw	r2,4(sp)
 4009f40:	01400044 	movi	r5,1
 4009f44:	d811883a 	mov	r8,sp
 4009f48:	2809883a 	mov	r4,r5
 4009f4c:	42000204 	addi	r8,r8,8
 4009f50:	29400044 	addi	r5,r5,1
 4009f54:	003f4606 	br	4009c70 <__alt_data_end+0xfc009c70>
 4009f58:	d8802517 	ldw	r2,148(sp)
 4009f5c:	14c0010e 	bge	r2,r19,4009f64 <___vfiprintf_internal_r+0xef4>
 4009f60:	9805883a 	mov	r2,r19
 4009f64:	d9402417 	ldw	r5,144(sp)
 4009f68:	288b883a 	add	r5,r5,r2
 4009f6c:	d9402415 	stw	r5,144(sp)
 4009f70:	003dd006 	br	40096b4 <__alt_data_end+0xfc0096b4>
 4009f74:	d8001d85 	stb	zero,118(sp)
 4009f78:	80005d16 	blt	r16,zero,400a0f0 <___vfiprintf_internal_r+0x1080>
 4009f7c:	00ffdfc4 	movi	r3,-129
 4009f80:	9d04b03a 	or	r2,r19,r20
 4009f84:	88e2703a 	and	r17,r17,r3
 4009f88:	103d3726 	beq	r2,zero,4009468 <__alt_data_end+0xfc009468>
 4009f8c:	002b883a 	mov	r21,zero
 4009f90:	d9002617 	ldw	r4,152(sp)
 4009f94:	ddc01a04 	addi	r23,sp,104
 4009f98:	988003cc 	andi	r2,r19,15
 4009f9c:	a006973a 	slli	r3,r20,28
 4009fa0:	2085883a 	add	r2,r4,r2
 4009fa4:	9826d13a 	srli	r19,r19,4
 4009fa8:	10800003 	ldbu	r2,0(r2)
 4009fac:	a028d13a 	srli	r20,r20,4
 4009fb0:	bdffffc4 	addi	r23,r23,-1
 4009fb4:	1ce6b03a 	or	r19,r3,r19
 4009fb8:	b8800005 	stb	r2,0(r23)
 4009fbc:	9d04b03a 	or	r2,r19,r20
 4009fc0:	103ff51e 	bne	r2,zero,4009f98 <__alt_data_end+0xfc009f98>
 4009fc4:	d8801e17 	ldw	r2,120(sp)
 4009fc8:	15e9c83a 	sub	r20,r2,r23
 4009fcc:	003d2b06 	br	400947c <__alt_data_end+0xfc00947c>
 4009fd0:	d9402017 	ldw	r5,128(sp)
 4009fd4:	d9002117 	ldw	r4,132(sp)
 4009fd8:	d9801a04 	addi	r6,sp,104
 4009fdc:	4008f5c0 	call	4008f5c <__sprint_r.part.0>
 4009fe0:	103f5b1e 	bne	r2,zero,4009d50 <__alt_data_end+0xfc009d50>
 4009fe4:	d8801c17 	ldw	r2,112(sp)
 4009fe8:	d811883a 	mov	r8,sp
 4009fec:	003f6706 	br	4009d8c <__alt_data_end+0xfc009d8c>
 4009ff0:	d9402017 	ldw	r5,128(sp)
 4009ff4:	d9002117 	ldw	r4,132(sp)
 4009ff8:	d9801a04 	addi	r6,sp,104
 4009ffc:	4008f5c0 	call	4008f5c <__sprint_r.part.0>
 400a000:	103f531e 	bne	r2,zero,4009d50 <__alt_data_end+0xfc009d50>
 400a004:	d811883a 	mov	r8,sp
 400a008:	003cd906 	br	4009370 <__alt_data_end+0xfc009370>
 400a00c:	10803fcc 	andi	r2,r2,255
 400a010:	1080201c 	xori	r2,r2,128
 400a014:	10bfe004 	addi	r2,r2,-128
 400a018:	00c00c04 	movi	r3,48
 400a01c:	10ffe926 	beq	r2,r3,4009fc4 <__alt_data_end+0xfc009fc4>
 400a020:	b8ffffc5 	stb	r3,-1(r23)
 400a024:	d8c01e17 	ldw	r3,120(sp)
 400a028:	b8bfffc4 	addi	r2,r23,-1
 400a02c:	102f883a 	mov	r23,r2
 400a030:	18a9c83a 	sub	r20,r3,r2
 400a034:	003d1106 	br	400947c <__alt_data_end+0xfc00947c>
 400a038:	d9402017 	ldw	r5,128(sp)
 400a03c:	d9002117 	ldw	r4,132(sp)
 400a040:	d9801a04 	addi	r6,sp,104
 400a044:	d8c02a15 	stw	r3,168(sp)
 400a048:	d9c02b15 	stw	r7,172(sp)
 400a04c:	4008f5c0 	call	4008f5c <__sprint_r.part.0>
 400a050:	d8c02a17 	ldw	r3,168(sp)
 400a054:	d9c02b17 	ldw	r7,172(sp)
 400a058:	103f3d1e 	bne	r2,zero,4009d50 <__alt_data_end+0xfc009d50>
 400a05c:	d9001b17 	ldw	r4,108(sp)
 400a060:	d8801c17 	ldw	r2,112(sp)
 400a064:	d811883a 	mov	r8,sp
 400a068:	21400044 	addi	r5,r4,1
 400a06c:	003d4406 	br	4009580 <__alt_data_end+0xfc009580>
 400a070:	d9402017 	ldw	r5,128(sp)
 400a074:	d9002117 	ldw	r4,132(sp)
 400a078:	d9801a04 	addi	r6,sp,104
 400a07c:	d8c02a15 	stw	r3,168(sp)
 400a080:	4008f5c0 	call	4008f5c <__sprint_r.part.0>
 400a084:	d8c02a17 	ldw	r3,168(sp)
 400a088:	103f311e 	bne	r2,zero,4009d50 <__alt_data_end+0xfc009d50>
 400a08c:	d9001b17 	ldw	r4,108(sp)
 400a090:	d8801c17 	ldw	r2,112(sp)
 400a094:	d811883a 	mov	r8,sp
 400a098:	21400044 	addi	r5,r4,1
 400a09c:	003ef406 	br	4009c70 <__alt_data_end+0xfc009c70>
 400a0a0:	1000bd1e 	bne	r2,zero,400a398 <___vfiprintf_internal_r+0x1328>
 400a0a4:	01400044 	movi	r5,1
 400a0a8:	0009883a 	mov	r4,zero
 400a0ac:	d811883a 	mov	r8,sp
 400a0b0:	003ef106 	br	4009c78 <__alt_data_end+0xfc009c78>
 400a0b4:	d9402017 	ldw	r5,128(sp)
 400a0b8:	d9002117 	ldw	r4,132(sp)
 400a0bc:	d9801a04 	addi	r6,sp,104
 400a0c0:	4008f5c0 	call	4008f5c <__sprint_r.part.0>
 400a0c4:	103f221e 	bne	r2,zero,4009d50 <__alt_data_end+0xfc009d50>
 400a0c8:	d9401b17 	ldw	r5,108(sp)
 400a0cc:	d8801c17 	ldw	r2,112(sp)
 400a0d0:	d811883a 	mov	r8,sp
 400a0d4:	29400044 	addi	r5,r5,1
 400a0d8:	003d6206 	br	4009664 <__alt_data_end+0xfc009664>
 400a0dc:	01410074 	movhi	r5,1025
 400a0e0:	29450004 	addi	r5,r5,5120
 400a0e4:	d9402615 	stw	r5,152(sp)
 400a0e8:	d8c02215 	stw	r3,136(sp)
 400a0ec:	1023883a 	mov	r17,r2
 400a0f0:	9d04b03a 	or	r2,r19,r20
 400a0f4:	103fa51e 	bne	r2,zero,4009f8c <__alt_data_end+0xfc009f8c>
 400a0f8:	002b883a 	mov	r21,zero
 400a0fc:	00800084 	movi	r2,2
 400a100:	003e4a06 	br	4009a2c <__alt_data_end+0xfc009a2c>
 400a104:	01410074 	movhi	r5,1025
 400a108:	29450004 	addi	r5,r5,5120
 400a10c:	002b883a 	mov	r21,zero
 400a110:	d9402615 	stw	r5,152(sp)
 400a114:	003f9e06 	br	4009f90 <__alt_data_end+0xfc009f90>
 400a118:	d9402217 	ldw	r5,136(sp)
 400a11c:	d8001d85 	stb	zero,118(sp)
 400a120:	0029883a 	mov	r20,zero
 400a124:	28800104 	addi	r2,r5,4
 400a128:	2cc00017 	ldw	r19,0(r5)
 400a12c:	803e3a16 	blt	r16,zero,4009a18 <__alt_data_end+0xfc009a18>
 400a130:	00ffdfc4 	movi	r3,-129
 400a134:	d8802215 	stw	r2,136(sp)
 400a138:	88e2703a 	and	r17,r17,r3
 400a13c:	002b883a 	mov	r21,zero
 400a140:	983e9b26 	beq	r19,zero,4009bb0 <__alt_data_end+0xfc009bb0>
 400a144:	00800244 	movi	r2,9
 400a148:	14fdc936 	bltu	r2,r19,4009870 <__alt_data_end+0xfc009870>
 400a14c:	003e9a06 	br	4009bb8 <__alt_data_end+0xfc009bb8>
 400a150:	00800c04 	movi	r2,48
 400a154:	d8c01d45 	stb	r3,117(sp)
 400a158:	d8801d05 	stb	r2,116(sp)
 400a15c:	d8001d85 	stb	zero,118(sp)
 400a160:	88c00094 	ori	r3,r17,2
 400a164:	80009c16 	blt	r16,zero,400a3d8 <___vfiprintf_internal_r+0x1368>
 400a168:	00bfdfc4 	movi	r2,-129
 400a16c:	88a2703a 	and	r17,r17,r2
 400a170:	8c400094 	ori	r17,r17,2
 400a174:	002b883a 	mov	r21,zero
 400a178:	003f8506 	br	4009f90 <__alt_data_end+0xfc009f90>
 400a17c:	b029883a 	mov	r20,r22
 400a180:	003c0b06 	br	40091b0 <__alt_data_end+0xfc0091b0>
 400a184:	04e7c83a 	sub	r19,zero,r19
 400a188:	05400b44 	movi	r21,45
 400a18c:	9804c03a 	cmpne	r2,r19,zero
 400a190:	0529c83a 	sub	r20,zero,r20
 400a194:	dd401d85 	stb	r21,118(sp)
 400a198:	a0a9c83a 	sub	r20,r20,r2
 400a19c:	80009716 	blt	r16,zero,400a3fc <___vfiprintf_internal_r+0x138c>
 400a1a0:	00bfdfc4 	movi	r2,-129
 400a1a4:	88a2703a 	and	r17,r17,r2
 400a1a8:	003db006 	br	400986c <__alt_data_end+0xfc00986c>
 400a1ac:	b0c00007 	ldb	r3,0(r22)
 400a1b0:	003c0c06 	br	40091e4 <__alt_data_end+0xfc0091e4>
 400a1b4:	8880100c 	andi	r2,r17,64
 400a1b8:	d8001d85 	stb	zero,118(sp)
 400a1bc:	1000461e 	bne	r2,zero,400a2d8 <___vfiprintf_internal_r+0x1268>
 400a1c0:	d9002217 	ldw	r4,136(sp)
 400a1c4:	0029883a 	mov	r20,zero
 400a1c8:	20800104 	addi	r2,r4,4
 400a1cc:	24c00017 	ldw	r19,0(r4)
 400a1d0:	803df80e 	bge	r16,zero,40099b4 <__alt_data_end+0xfc0099b4>
 400a1d4:	9d06b03a 	or	r3,r19,r20
 400a1d8:	d8802215 	stw	r2,136(sp)
 400a1dc:	183d5e1e 	bne	r3,zero,4009758 <__alt_data_end+0xfc009758>
 400a1e0:	002b883a 	mov	r21,zero
 400a1e4:	0005883a 	mov	r2,zero
 400a1e8:	003e1006 	br	4009a2c <__alt_data_end+0xfc009a2c>
 400a1ec:	8880040c 	andi	r2,r17,16
 400a1f0:	1000321e 	bne	r2,zero,400a2bc <___vfiprintf_internal_r+0x124c>
 400a1f4:	8c40100c 	andi	r17,r17,64
 400a1f8:	88008d26 	beq	r17,zero,400a430 <___vfiprintf_internal_r+0x13c0>
 400a1fc:	d9402217 	ldw	r5,136(sp)
 400a200:	d8c02417 	ldw	r3,144(sp)
 400a204:	28800017 	ldw	r2,0(r5)
 400a208:	29400104 	addi	r5,r5,4
 400a20c:	d9402215 	stw	r5,136(sp)
 400a210:	10c0000d 	sth	r3,0(r2)
 400a214:	003bca06 	br	4009140 <__alt_data_end+0xfc009140>
 400a218:	8880100c 	andi	r2,r17,64
 400a21c:	10003a26 	beq	r2,zero,400a308 <___vfiprintf_internal_r+0x1298>
 400a220:	d8802217 	ldw	r2,136(sp)
 400a224:	14c0000f 	ldh	r19,0(r2)
 400a228:	10800104 	addi	r2,r2,4
 400a22c:	d8802215 	stw	r2,136(sp)
 400a230:	9829d7fa 	srai	r20,r19,31
 400a234:	a005883a 	mov	r2,r20
 400a238:	003d8506 	br	4009850 <__alt_data_end+0xfc009850>
 400a23c:	8880100c 	andi	r2,r17,64
 400a240:	10002b26 	beq	r2,zero,400a2f0 <___vfiprintf_internal_r+0x1280>
 400a244:	d8802217 	ldw	r2,136(sp)
 400a248:	0029883a 	mov	r20,zero
 400a24c:	14c0000b 	ldhu	r19,0(r2)
 400a250:	10800104 	addi	r2,r2,4
 400a254:	d8802215 	stw	r2,136(sp)
 400a258:	003d5d06 	br	40097d0 <__alt_data_end+0xfc0097d0>
 400a25c:	d9402017 	ldw	r5,128(sp)
 400a260:	d9002117 	ldw	r4,132(sp)
 400a264:	d9801a04 	addi	r6,sp,104
 400a268:	d8c02a15 	stw	r3,168(sp)
 400a26c:	d9c02b15 	stw	r7,172(sp)
 400a270:	4008f5c0 	call	4008f5c <__sprint_r.part.0>
 400a274:	d8c02a17 	ldw	r3,168(sp)
 400a278:	d9c02b17 	ldw	r7,172(sp)
 400a27c:	103eb41e 	bne	r2,zero,4009d50 <__alt_data_end+0xfc009d50>
 400a280:	d9001b17 	ldw	r4,108(sp)
 400a284:	d8801c17 	ldw	r2,112(sp)
 400a288:	d811883a 	mov	r8,sp
 400a28c:	21400044 	addi	r5,r4,1
 400a290:	003e6706 	br	4009c30 <__alt_data_end+0xfc009c30>
 400a294:	00bfffc4 	movi	r2,-1
 400a298:	003c4a06 	br	40093c4 <__alt_data_end+0xfc0093c4>
 400a29c:	9805883a 	mov	r2,r19
 400a2a0:	003ee806 	br	4009e44 <__alt_data_end+0xfc009e44>
 400a2a4:	d8c02217 	ldw	r3,136(sp)
 400a2a8:	0029883a 	mov	r20,zero
 400a2ac:	18800104 	addi	r2,r3,4
 400a2b0:	1cc0000b 	ldhu	r19,0(r3)
 400a2b4:	803f9e0e 	bge	r16,zero,400a130 <__alt_data_end+0xfc00a130>
 400a2b8:	003dd706 	br	4009a18 <__alt_data_end+0xfc009a18>
 400a2bc:	d8c02217 	ldw	r3,136(sp)
 400a2c0:	d9002417 	ldw	r4,144(sp)
 400a2c4:	18800017 	ldw	r2,0(r3)
 400a2c8:	18c00104 	addi	r3,r3,4
 400a2cc:	d8c02215 	stw	r3,136(sp)
 400a2d0:	11000015 	stw	r4,0(r2)
 400a2d4:	003b9a06 	br	4009140 <__alt_data_end+0xfc009140>
 400a2d8:	d8c02217 	ldw	r3,136(sp)
 400a2dc:	0029883a 	mov	r20,zero
 400a2e0:	18800104 	addi	r2,r3,4
 400a2e4:	1cc0000b 	ldhu	r19,0(r3)
 400a2e8:	803db20e 	bge	r16,zero,40099b4 <__alt_data_end+0xfc0099b4>
 400a2ec:	003fb906 	br	400a1d4 <__alt_data_end+0xfc00a1d4>
 400a2f0:	d9002217 	ldw	r4,136(sp)
 400a2f4:	0029883a 	mov	r20,zero
 400a2f8:	24c00017 	ldw	r19,0(r4)
 400a2fc:	21000104 	addi	r4,r4,4
 400a300:	d9002215 	stw	r4,136(sp)
 400a304:	003d3206 	br	40097d0 <__alt_data_end+0xfc0097d0>
 400a308:	d8c02217 	ldw	r3,136(sp)
 400a30c:	1cc00017 	ldw	r19,0(r3)
 400a310:	18c00104 	addi	r3,r3,4
 400a314:	d8c02215 	stw	r3,136(sp)
 400a318:	9829d7fa 	srai	r20,r19,31
 400a31c:	a005883a 	mov	r2,r20
 400a320:	003d4b06 	br	4009850 <__alt_data_end+0xfc009850>
 400a324:	0009883a 	mov	r4,zero
 400a328:	01400044 	movi	r5,1
 400a32c:	d811883a 	mov	r8,sp
 400a330:	003e4f06 	br	4009c70 <__alt_data_end+0xfc009c70>
 400a334:	d8c02215 	stw	r3,136(sp)
 400a338:	002b883a 	mov	r21,zero
 400a33c:	003db806 	br	4009a20 <__alt_data_end+0xfc009a20>
 400a340:	d811883a 	mov	r8,sp
 400a344:	003e9606 	br	4009da0 <__alt_data_end+0xfc009da0>
 400a348:	01010074 	movhi	r4,1025
 400a34c:	210506c4 	addi	r4,r4,5147
 400a350:	d9002315 	stw	r4,140(sp)
 400a354:	003e6306 	br	4009ce4 <__alt_data_end+0xfc009ce4>
 400a358:	b0c00043 	ldbu	r3,1(r22)
 400a35c:	8c400814 	ori	r17,r17,32
 400a360:	b5800044 	addi	r22,r22,1
 400a364:	18c03fcc 	andi	r3,r3,255
 400a368:	18c0201c 	xori	r3,r3,128
 400a36c:	18ffe004 	addi	r3,r3,-128
 400a370:	003b9c06 	br	40091e4 <__alt_data_end+0xfc0091e4>
 400a374:	b809883a 	mov	r4,r23
 400a378:	da002a15 	stw	r8,168(sp)
 400a37c:	400cf400 	call	400cf40 <strlen>
 400a380:	1029883a 	mov	r20,r2
 400a384:	dd401d83 	ldbu	r21,118(sp)
 400a388:	df002215 	stw	fp,136(sp)
 400a38c:	0021883a 	mov	r16,zero
 400a390:	da002a17 	ldw	r8,168(sp)
 400a394:	003c3906 	br	400947c <__alt_data_end+0xfc00947c>
 400a398:	d9402017 	ldw	r5,128(sp)
 400a39c:	d9002117 	ldw	r4,132(sp)
 400a3a0:	d9801a04 	addi	r6,sp,104
 400a3a4:	4008f5c0 	call	4008f5c <__sprint_r.part.0>
 400a3a8:	103e691e 	bne	r2,zero,4009d50 <__alt_data_end+0xfc009d50>
 400a3ac:	d9001b17 	ldw	r4,108(sp)
 400a3b0:	d8801c17 	ldw	r2,112(sp)
 400a3b4:	d811883a 	mov	r8,sp
 400a3b8:	21400044 	addi	r5,r4,1
 400a3bc:	003e2e06 	br	4009c78 <__alt_data_end+0xfc009c78>
 400a3c0:	01010074 	movhi	r4,1025
 400a3c4:	21050ac4 	addi	r4,r4,5163
 400a3c8:	d9002315 	stw	r4,140(sp)
 400a3cc:	d9001b17 	ldw	r4,108(sp)
 400a3d0:	21000044 	addi	r4,r4,1
 400a3d4:	003c5e06 	br	4009550 <__alt_data_end+0xfc009550>
 400a3d8:	002b883a 	mov	r21,zero
 400a3dc:	00800084 	movi	r2,2
 400a3e0:	10803fcc 	andi	r2,r2,255
 400a3e4:	01000044 	movi	r4,1
 400a3e8:	11002b26 	beq	r2,r4,400a498 <___vfiprintf_internal_r+0x1428>
 400a3ec:	01000084 	movi	r4,2
 400a3f0:	11002b1e 	bne	r2,r4,400a4a0 <___vfiprintf_internal_r+0x1430>
 400a3f4:	1823883a 	mov	r17,r3
 400a3f8:	003ee506 	br	4009f90 <__alt_data_end+0xfc009f90>
 400a3fc:	8807883a 	mov	r3,r17
 400a400:	00800044 	movi	r2,1
 400a404:	003ff606 	br	400a3e0 <__alt_data_end+0xfc00a3e0>
 400a408:	00800184 	movi	r2,6
 400a40c:	1400012e 	bgeu	r2,r16,400a414 <___vfiprintf_internal_r+0x13a4>
 400a410:	1021883a 	mov	r16,r2
 400a414:	8029883a 	mov	r20,r16
 400a418:	8027883a 	mov	r19,r16
 400a41c:	80002216 	blt	r16,zero,400a4a8 <___vfiprintf_internal_r+0x1438>
 400a420:	05c10074 	movhi	r23,1025
 400a424:	df002215 	stw	fp,136(sp)
 400a428:	bdc50504 	addi	r23,r23,5140
 400a42c:	003cfb06 	br	400981c <__alt_data_end+0xfc00981c>
 400a430:	d9002217 	ldw	r4,136(sp)
 400a434:	d9402417 	ldw	r5,144(sp)
 400a438:	20800017 	ldw	r2,0(r4)
 400a43c:	21000104 	addi	r4,r4,4
 400a440:	d9002215 	stw	r4,136(sp)
 400a444:	11400015 	stw	r5,0(r2)
 400a448:	003b3d06 	br	4009140 <__alt_data_end+0xfc009140>
 400a44c:	01410074 	movhi	r5,1025
 400a450:	29450ac4 	addi	r5,r5,5163
 400a454:	d9402315 	stw	r5,140(sp)
 400a458:	d9401b17 	ldw	r5,108(sp)
 400a45c:	29400044 	addi	r5,r5,1
 400a460:	003e6d06 	br	4009e18 <__alt_data_end+0xfc009e18>
 400a464:	8029883a 	mov	r20,r16
 400a468:	dd401d83 	ldbu	r21,118(sp)
 400a46c:	df002215 	stw	fp,136(sp)
 400a470:	0021883a 	mov	r16,zero
 400a474:	003c0106 	br	400947c <__alt_data_end+0xfc00947c>
 400a478:	00c10074 	movhi	r3,1025
 400a47c:	18c506c4 	addi	r3,r3,5147
 400a480:	d8c02315 	stw	r3,140(sp)
 400a484:	280d883a 	mov	r6,r5
 400a488:	003c6906 	br	4009630 <__alt_data_end+0xfc009630>
 400a48c:	802d883a 	mov	r22,r16
 400a490:	0021883a 	mov	r16,zero
 400a494:	003b5406 	br	40091e8 <__alt_data_end+0xfc0091e8>
 400a498:	1823883a 	mov	r17,r3
 400a49c:	003cf306 	br	400986c <__alt_data_end+0xfc00986c>
 400a4a0:	1823883a 	mov	r17,r3
 400a4a4:	003cad06 	br	400975c <__alt_data_end+0xfc00975c>
 400a4a8:	0027883a 	mov	r19,zero
 400a4ac:	003fdc06 	br	400a420 <__alt_data_end+0xfc00a420>
 400a4b0:	d9402217 	ldw	r5,136(sp)
 400a4b4:	8005883a 	mov	r2,r16
 400a4b8:	b0c00043 	ldbu	r3,1(r22)
 400a4bc:	2c000017 	ldw	r16,0(r5)
 400a4c0:	29000104 	addi	r4,r5,4
 400a4c4:	d9002215 	stw	r4,136(sp)
 400a4c8:	102d883a 	mov	r22,r2
 400a4cc:	803fa50e 	bge	r16,zero,400a364 <__alt_data_end+0xfc00a364>
 400a4d0:	18c03fcc 	andi	r3,r3,255
 400a4d4:	18c0201c 	xori	r3,r3,128
 400a4d8:	043fffc4 	movi	r16,-1
 400a4dc:	18ffe004 	addi	r3,r3,-128
 400a4e0:	003b4006 	br	40091e4 <__alt_data_end+0xfc0091e4>
 400a4e4:	d9402303 	ldbu	r5,140(sp)
 400a4e8:	d9401d85 	stb	r5,118(sp)
 400a4ec:	003cae06 	br	40097a8 <__alt_data_end+0xfc0097a8>
 400a4f0:	d8c02303 	ldbu	r3,140(sp)
 400a4f4:	d8c01d85 	stb	r3,118(sp)
 400a4f8:	003d1406 	br	400994c <__alt_data_end+0xfc00994c>
 400a4fc:	d8c02303 	ldbu	r3,140(sp)
 400a500:	d8c01d85 	stb	r3,118(sp)
 400a504:	003cca06 	br	4009830 <__alt_data_end+0xfc009830>
 400a508:	8880004c 	andi	r2,r17,1
 400a50c:	002b883a 	mov	r21,zero
 400a510:	10000526 	beq	r2,zero,400a528 <___vfiprintf_internal_r+0x14b8>
 400a514:	00800c04 	movi	r2,48
 400a518:	d88019c5 	stb	r2,103(sp)
 400a51c:	dd002817 	ldw	r20,160(sp)
 400a520:	ddc019c4 	addi	r23,sp,103
 400a524:	003bd506 	br	400947c <__alt_data_end+0xfc00947c>
 400a528:	0029883a 	mov	r20,zero
 400a52c:	ddc01a04 	addi	r23,sp,104
 400a530:	003bd206 	br	400947c <__alt_data_end+0xfc00947c>
 400a534:	d9002303 	ldbu	r4,140(sp)
 400a538:	d9001d85 	stb	r4,118(sp)
 400a53c:	003da606 	br	4009bd8 <__alt_data_end+0xfc009bd8>
 400a540:	d8c02303 	ldbu	r3,140(sp)
 400a544:	d8c01d85 	stb	r3,118(sp)
 400a548:	003c7606 	br	4009724 <__alt_data_end+0xfc009724>
 400a54c:	d8c02303 	ldbu	r3,140(sp)
 400a550:	d8c01d85 	stb	r3,118(sp)
 400a554:	003c6506 	br	40096ec <__alt_data_end+0xfc0096ec>
 400a558:	d9002303 	ldbu	r4,140(sp)
 400a55c:	d9001d85 	stb	r4,118(sp)
 400a560:	003d3d06 	br	4009a58 <__alt_data_end+0xfc009a58>
 400a564:	d8c02303 	ldbu	r3,140(sp)
 400a568:	d8c01d85 	stb	r3,118(sp)
 400a56c:	003d1d06 	br	40099e4 <__alt_data_end+0xfc0099e4>
 400a570:	d8c02303 	ldbu	r3,140(sp)
 400a574:	d8c01d85 	stb	r3,118(sp)
 400a578:	003d0306 	br	4009988 <__alt_data_end+0xfc009988>

0400a57c <__vfiprintf_internal>:
 400a57c:	00810074 	movhi	r2,1025
 400a580:	108c2004 	addi	r2,r2,12416
 400a584:	300f883a 	mov	r7,r6
 400a588:	280d883a 	mov	r6,r5
 400a58c:	200b883a 	mov	r5,r4
 400a590:	11000017 	ldw	r4,0(r2)
 400a594:	40090701 	jmpi	4009070 <___vfiprintf_internal_r>

0400a598 <__sbprintf>:
 400a598:	2880030b 	ldhu	r2,12(r5)
 400a59c:	2ac01917 	ldw	r11,100(r5)
 400a5a0:	2a80038b 	ldhu	r10,14(r5)
 400a5a4:	2a400717 	ldw	r9,28(r5)
 400a5a8:	2a000917 	ldw	r8,36(r5)
 400a5ac:	defee204 	addi	sp,sp,-1144
 400a5b0:	00c10004 	movi	r3,1024
 400a5b4:	dc011a15 	stw	r16,1128(sp)
 400a5b8:	10bfff4c 	andi	r2,r2,65533
 400a5bc:	2821883a 	mov	r16,r5
 400a5c0:	d8cb883a 	add	r5,sp,r3
 400a5c4:	dc811c15 	stw	r18,1136(sp)
 400a5c8:	dc411b15 	stw	r17,1132(sp)
 400a5cc:	dfc11d15 	stw	ra,1140(sp)
 400a5d0:	2025883a 	mov	r18,r4
 400a5d4:	d881030d 	sth	r2,1036(sp)
 400a5d8:	dac11915 	stw	r11,1124(sp)
 400a5dc:	da81038d 	sth	r10,1038(sp)
 400a5e0:	da410715 	stw	r9,1052(sp)
 400a5e4:	da010915 	stw	r8,1060(sp)
 400a5e8:	dec10015 	stw	sp,1024(sp)
 400a5ec:	dec10415 	stw	sp,1040(sp)
 400a5f0:	d8c10215 	stw	r3,1032(sp)
 400a5f4:	d8c10515 	stw	r3,1044(sp)
 400a5f8:	d8010615 	stw	zero,1048(sp)
 400a5fc:	40090700 	call	4009070 <___vfiprintf_internal_r>
 400a600:	1023883a 	mov	r17,r2
 400a604:	10000416 	blt	r2,zero,400a618 <__sbprintf+0x80>
 400a608:	d9410004 	addi	r5,sp,1024
 400a60c:	9009883a 	mov	r4,r18
 400a610:	400a9c40 	call	400a9c4 <_fflush_r>
 400a614:	10000d1e 	bne	r2,zero,400a64c <__sbprintf+0xb4>
 400a618:	d881030b 	ldhu	r2,1036(sp)
 400a61c:	1080100c 	andi	r2,r2,64
 400a620:	10000326 	beq	r2,zero,400a630 <__sbprintf+0x98>
 400a624:	8080030b 	ldhu	r2,12(r16)
 400a628:	10801014 	ori	r2,r2,64
 400a62c:	8080030d 	sth	r2,12(r16)
 400a630:	8805883a 	mov	r2,r17
 400a634:	dfc11d17 	ldw	ra,1140(sp)
 400a638:	dc811c17 	ldw	r18,1136(sp)
 400a63c:	dc411b17 	ldw	r17,1132(sp)
 400a640:	dc011a17 	ldw	r16,1128(sp)
 400a644:	dec11e04 	addi	sp,sp,1144
 400a648:	f800283a 	ret
 400a64c:	047fffc4 	movi	r17,-1
 400a650:	003ff106 	br	400a618 <__alt_data_end+0xfc00a618>

0400a654 <__swsetup_r>:
 400a654:	00810074 	movhi	r2,1025
 400a658:	defffd04 	addi	sp,sp,-12
 400a65c:	108c2004 	addi	r2,r2,12416
 400a660:	dc400115 	stw	r17,4(sp)
 400a664:	2023883a 	mov	r17,r4
 400a668:	11000017 	ldw	r4,0(r2)
 400a66c:	dc000015 	stw	r16,0(sp)
 400a670:	dfc00215 	stw	ra,8(sp)
 400a674:	2821883a 	mov	r16,r5
 400a678:	20000226 	beq	r4,zero,400a684 <__swsetup_r+0x30>
 400a67c:	20800e17 	ldw	r2,56(r4)
 400a680:	10003126 	beq	r2,zero,400a748 <__swsetup_r+0xf4>
 400a684:	8080030b 	ldhu	r2,12(r16)
 400a688:	10c0020c 	andi	r3,r2,8
 400a68c:	1009883a 	mov	r4,r2
 400a690:	18000f26 	beq	r3,zero,400a6d0 <__swsetup_r+0x7c>
 400a694:	80c00417 	ldw	r3,16(r16)
 400a698:	18001526 	beq	r3,zero,400a6f0 <__swsetup_r+0x9c>
 400a69c:	1100004c 	andi	r4,r2,1
 400a6a0:	20001c1e 	bne	r4,zero,400a714 <__swsetup_r+0xc0>
 400a6a4:	1080008c 	andi	r2,r2,2
 400a6a8:	1000291e 	bne	r2,zero,400a750 <__swsetup_r+0xfc>
 400a6ac:	80800517 	ldw	r2,20(r16)
 400a6b0:	80800215 	stw	r2,8(r16)
 400a6b4:	18001c26 	beq	r3,zero,400a728 <__swsetup_r+0xd4>
 400a6b8:	0005883a 	mov	r2,zero
 400a6bc:	dfc00217 	ldw	ra,8(sp)
 400a6c0:	dc400117 	ldw	r17,4(sp)
 400a6c4:	dc000017 	ldw	r16,0(sp)
 400a6c8:	dec00304 	addi	sp,sp,12
 400a6cc:	f800283a 	ret
 400a6d0:	2080040c 	andi	r2,r4,16
 400a6d4:	10002e26 	beq	r2,zero,400a790 <__swsetup_r+0x13c>
 400a6d8:	2080010c 	andi	r2,r4,4
 400a6dc:	10001e1e 	bne	r2,zero,400a758 <__swsetup_r+0x104>
 400a6e0:	80c00417 	ldw	r3,16(r16)
 400a6e4:	20800214 	ori	r2,r4,8
 400a6e8:	8080030d 	sth	r2,12(r16)
 400a6ec:	183feb1e 	bne	r3,zero,400a69c <__alt_data_end+0xfc00a69c>
 400a6f0:	1100a00c 	andi	r4,r2,640
 400a6f4:	01408004 	movi	r5,512
 400a6f8:	217fe826 	beq	r4,r5,400a69c <__alt_data_end+0xfc00a69c>
 400a6fc:	800b883a 	mov	r5,r16
 400a700:	8809883a 	mov	r4,r17
 400a704:	400bb680 	call	400bb68 <__smakebuf_r>
 400a708:	8080030b 	ldhu	r2,12(r16)
 400a70c:	80c00417 	ldw	r3,16(r16)
 400a710:	003fe206 	br	400a69c <__alt_data_end+0xfc00a69c>
 400a714:	80800517 	ldw	r2,20(r16)
 400a718:	80000215 	stw	zero,8(r16)
 400a71c:	0085c83a 	sub	r2,zero,r2
 400a720:	80800615 	stw	r2,24(r16)
 400a724:	183fe41e 	bne	r3,zero,400a6b8 <__alt_data_end+0xfc00a6b8>
 400a728:	80c0030b 	ldhu	r3,12(r16)
 400a72c:	0005883a 	mov	r2,zero
 400a730:	1900200c 	andi	r4,r3,128
 400a734:	203fe126 	beq	r4,zero,400a6bc <__alt_data_end+0xfc00a6bc>
 400a738:	18c01014 	ori	r3,r3,64
 400a73c:	80c0030d 	sth	r3,12(r16)
 400a740:	00bfffc4 	movi	r2,-1
 400a744:	003fdd06 	br	400a6bc <__alt_data_end+0xfc00a6bc>
 400a748:	400adb00 	call	400adb0 <__sinit>
 400a74c:	003fcd06 	br	400a684 <__alt_data_end+0xfc00a684>
 400a750:	0005883a 	mov	r2,zero
 400a754:	003fd606 	br	400a6b0 <__alt_data_end+0xfc00a6b0>
 400a758:	81400c17 	ldw	r5,48(r16)
 400a75c:	28000626 	beq	r5,zero,400a778 <__swsetup_r+0x124>
 400a760:	80801004 	addi	r2,r16,64
 400a764:	28800326 	beq	r5,r2,400a774 <__swsetup_r+0x120>
 400a768:	8809883a 	mov	r4,r17
 400a76c:	400b12c0 	call	400b12c <_free_r>
 400a770:	8100030b 	ldhu	r4,12(r16)
 400a774:	80000c15 	stw	zero,48(r16)
 400a778:	80c00417 	ldw	r3,16(r16)
 400a77c:	00bff6c4 	movi	r2,-37
 400a780:	1108703a 	and	r4,r2,r4
 400a784:	80000115 	stw	zero,4(r16)
 400a788:	80c00015 	stw	r3,0(r16)
 400a78c:	003fd506 	br	400a6e4 <__alt_data_end+0xfc00a6e4>
 400a790:	00800244 	movi	r2,9
 400a794:	88800015 	stw	r2,0(r17)
 400a798:	20801014 	ori	r2,r4,64
 400a79c:	8080030d 	sth	r2,12(r16)
 400a7a0:	00bfffc4 	movi	r2,-1
 400a7a4:	003fc506 	br	400a6bc <__alt_data_end+0xfc00a6bc>

0400a7a8 <__sflush_r>:
 400a7a8:	2880030b 	ldhu	r2,12(r5)
 400a7ac:	defffb04 	addi	sp,sp,-20
 400a7b0:	dcc00315 	stw	r19,12(sp)
 400a7b4:	dc400115 	stw	r17,4(sp)
 400a7b8:	dfc00415 	stw	ra,16(sp)
 400a7bc:	dc800215 	stw	r18,8(sp)
 400a7c0:	dc000015 	stw	r16,0(sp)
 400a7c4:	10c0020c 	andi	r3,r2,8
 400a7c8:	2823883a 	mov	r17,r5
 400a7cc:	2027883a 	mov	r19,r4
 400a7d0:	1800311e 	bne	r3,zero,400a898 <__sflush_r+0xf0>
 400a7d4:	28c00117 	ldw	r3,4(r5)
 400a7d8:	10820014 	ori	r2,r2,2048
 400a7dc:	2880030d 	sth	r2,12(r5)
 400a7e0:	00c04b0e 	bge	zero,r3,400a910 <__sflush_r+0x168>
 400a7e4:	8a000a17 	ldw	r8,40(r17)
 400a7e8:	40002326 	beq	r8,zero,400a878 <__sflush_r+0xd0>
 400a7ec:	9c000017 	ldw	r16,0(r19)
 400a7f0:	10c4000c 	andi	r3,r2,4096
 400a7f4:	98000015 	stw	zero,0(r19)
 400a7f8:	18004826 	beq	r3,zero,400a91c <__sflush_r+0x174>
 400a7fc:	89801417 	ldw	r6,80(r17)
 400a800:	10c0010c 	andi	r3,r2,4
 400a804:	18000626 	beq	r3,zero,400a820 <__sflush_r+0x78>
 400a808:	88c00117 	ldw	r3,4(r17)
 400a80c:	88800c17 	ldw	r2,48(r17)
 400a810:	30cdc83a 	sub	r6,r6,r3
 400a814:	10000226 	beq	r2,zero,400a820 <__sflush_r+0x78>
 400a818:	88800f17 	ldw	r2,60(r17)
 400a81c:	308dc83a 	sub	r6,r6,r2
 400a820:	89400717 	ldw	r5,28(r17)
 400a824:	000f883a 	mov	r7,zero
 400a828:	9809883a 	mov	r4,r19
 400a82c:	403ee83a 	callr	r8
 400a830:	00ffffc4 	movi	r3,-1
 400a834:	10c04426 	beq	r2,r3,400a948 <__sflush_r+0x1a0>
 400a838:	88c0030b 	ldhu	r3,12(r17)
 400a83c:	89000417 	ldw	r4,16(r17)
 400a840:	88000115 	stw	zero,4(r17)
 400a844:	197dffcc 	andi	r5,r3,63487
 400a848:	8940030d 	sth	r5,12(r17)
 400a84c:	89000015 	stw	r4,0(r17)
 400a850:	18c4000c 	andi	r3,r3,4096
 400a854:	18002c1e 	bne	r3,zero,400a908 <__sflush_r+0x160>
 400a858:	89400c17 	ldw	r5,48(r17)
 400a85c:	9c000015 	stw	r16,0(r19)
 400a860:	28000526 	beq	r5,zero,400a878 <__sflush_r+0xd0>
 400a864:	88801004 	addi	r2,r17,64
 400a868:	28800226 	beq	r5,r2,400a874 <__sflush_r+0xcc>
 400a86c:	9809883a 	mov	r4,r19
 400a870:	400b12c0 	call	400b12c <_free_r>
 400a874:	88000c15 	stw	zero,48(r17)
 400a878:	0005883a 	mov	r2,zero
 400a87c:	dfc00417 	ldw	ra,16(sp)
 400a880:	dcc00317 	ldw	r19,12(sp)
 400a884:	dc800217 	ldw	r18,8(sp)
 400a888:	dc400117 	ldw	r17,4(sp)
 400a88c:	dc000017 	ldw	r16,0(sp)
 400a890:	dec00504 	addi	sp,sp,20
 400a894:	f800283a 	ret
 400a898:	2c800417 	ldw	r18,16(r5)
 400a89c:	903ff626 	beq	r18,zero,400a878 <__alt_data_end+0xfc00a878>
 400a8a0:	2c000017 	ldw	r16,0(r5)
 400a8a4:	108000cc 	andi	r2,r2,3
 400a8a8:	2c800015 	stw	r18,0(r5)
 400a8ac:	84a1c83a 	sub	r16,r16,r18
 400a8b0:	1000131e 	bne	r2,zero,400a900 <__sflush_r+0x158>
 400a8b4:	28800517 	ldw	r2,20(r5)
 400a8b8:	88800215 	stw	r2,8(r17)
 400a8bc:	04000316 	blt	zero,r16,400a8cc <__sflush_r+0x124>
 400a8c0:	003fed06 	br	400a878 <__alt_data_end+0xfc00a878>
 400a8c4:	90a5883a 	add	r18,r18,r2
 400a8c8:	043feb0e 	bge	zero,r16,400a878 <__alt_data_end+0xfc00a878>
 400a8cc:	88800917 	ldw	r2,36(r17)
 400a8d0:	89400717 	ldw	r5,28(r17)
 400a8d4:	800f883a 	mov	r7,r16
 400a8d8:	900d883a 	mov	r6,r18
 400a8dc:	9809883a 	mov	r4,r19
 400a8e0:	103ee83a 	callr	r2
 400a8e4:	80a1c83a 	sub	r16,r16,r2
 400a8e8:	00bff616 	blt	zero,r2,400a8c4 <__alt_data_end+0xfc00a8c4>
 400a8ec:	88c0030b 	ldhu	r3,12(r17)
 400a8f0:	00bfffc4 	movi	r2,-1
 400a8f4:	18c01014 	ori	r3,r3,64
 400a8f8:	88c0030d 	sth	r3,12(r17)
 400a8fc:	003fdf06 	br	400a87c <__alt_data_end+0xfc00a87c>
 400a900:	0005883a 	mov	r2,zero
 400a904:	003fec06 	br	400a8b8 <__alt_data_end+0xfc00a8b8>
 400a908:	88801415 	stw	r2,80(r17)
 400a90c:	003fd206 	br	400a858 <__alt_data_end+0xfc00a858>
 400a910:	28c00f17 	ldw	r3,60(r5)
 400a914:	00ffb316 	blt	zero,r3,400a7e4 <__alt_data_end+0xfc00a7e4>
 400a918:	003fd706 	br	400a878 <__alt_data_end+0xfc00a878>
 400a91c:	89400717 	ldw	r5,28(r17)
 400a920:	000d883a 	mov	r6,zero
 400a924:	01c00044 	movi	r7,1
 400a928:	9809883a 	mov	r4,r19
 400a92c:	403ee83a 	callr	r8
 400a930:	100d883a 	mov	r6,r2
 400a934:	00bfffc4 	movi	r2,-1
 400a938:	30801426 	beq	r6,r2,400a98c <__sflush_r+0x1e4>
 400a93c:	8880030b 	ldhu	r2,12(r17)
 400a940:	8a000a17 	ldw	r8,40(r17)
 400a944:	003fae06 	br	400a800 <__alt_data_end+0xfc00a800>
 400a948:	98c00017 	ldw	r3,0(r19)
 400a94c:	183fba26 	beq	r3,zero,400a838 <__alt_data_end+0xfc00a838>
 400a950:	01000744 	movi	r4,29
 400a954:	19000626 	beq	r3,r4,400a970 <__sflush_r+0x1c8>
 400a958:	01000584 	movi	r4,22
 400a95c:	19000426 	beq	r3,r4,400a970 <__sflush_r+0x1c8>
 400a960:	88c0030b 	ldhu	r3,12(r17)
 400a964:	18c01014 	ori	r3,r3,64
 400a968:	88c0030d 	sth	r3,12(r17)
 400a96c:	003fc306 	br	400a87c <__alt_data_end+0xfc00a87c>
 400a970:	8880030b 	ldhu	r2,12(r17)
 400a974:	88c00417 	ldw	r3,16(r17)
 400a978:	88000115 	stw	zero,4(r17)
 400a97c:	10bdffcc 	andi	r2,r2,63487
 400a980:	8880030d 	sth	r2,12(r17)
 400a984:	88c00015 	stw	r3,0(r17)
 400a988:	003fb306 	br	400a858 <__alt_data_end+0xfc00a858>
 400a98c:	98800017 	ldw	r2,0(r19)
 400a990:	103fea26 	beq	r2,zero,400a93c <__alt_data_end+0xfc00a93c>
 400a994:	00c00744 	movi	r3,29
 400a998:	10c00226 	beq	r2,r3,400a9a4 <__sflush_r+0x1fc>
 400a99c:	00c00584 	movi	r3,22
 400a9a0:	10c0031e 	bne	r2,r3,400a9b0 <__sflush_r+0x208>
 400a9a4:	9c000015 	stw	r16,0(r19)
 400a9a8:	0005883a 	mov	r2,zero
 400a9ac:	003fb306 	br	400a87c <__alt_data_end+0xfc00a87c>
 400a9b0:	88c0030b 	ldhu	r3,12(r17)
 400a9b4:	3005883a 	mov	r2,r6
 400a9b8:	18c01014 	ori	r3,r3,64
 400a9bc:	88c0030d 	sth	r3,12(r17)
 400a9c0:	003fae06 	br	400a87c <__alt_data_end+0xfc00a87c>

0400a9c4 <_fflush_r>:
 400a9c4:	defffd04 	addi	sp,sp,-12
 400a9c8:	dc000115 	stw	r16,4(sp)
 400a9cc:	dfc00215 	stw	ra,8(sp)
 400a9d0:	2021883a 	mov	r16,r4
 400a9d4:	20000226 	beq	r4,zero,400a9e0 <_fflush_r+0x1c>
 400a9d8:	20800e17 	ldw	r2,56(r4)
 400a9dc:	10000c26 	beq	r2,zero,400aa10 <_fflush_r+0x4c>
 400a9e0:	2880030f 	ldh	r2,12(r5)
 400a9e4:	1000051e 	bne	r2,zero,400a9fc <_fflush_r+0x38>
 400a9e8:	0005883a 	mov	r2,zero
 400a9ec:	dfc00217 	ldw	ra,8(sp)
 400a9f0:	dc000117 	ldw	r16,4(sp)
 400a9f4:	dec00304 	addi	sp,sp,12
 400a9f8:	f800283a 	ret
 400a9fc:	8009883a 	mov	r4,r16
 400aa00:	dfc00217 	ldw	ra,8(sp)
 400aa04:	dc000117 	ldw	r16,4(sp)
 400aa08:	dec00304 	addi	sp,sp,12
 400aa0c:	400a7a81 	jmpi	400a7a8 <__sflush_r>
 400aa10:	d9400015 	stw	r5,0(sp)
 400aa14:	400adb00 	call	400adb0 <__sinit>
 400aa18:	d9400017 	ldw	r5,0(sp)
 400aa1c:	003ff006 	br	400a9e0 <__alt_data_end+0xfc00a9e0>

0400aa20 <fflush>:
 400aa20:	20000526 	beq	r4,zero,400aa38 <fflush+0x18>
 400aa24:	00810074 	movhi	r2,1025
 400aa28:	108c2004 	addi	r2,r2,12416
 400aa2c:	200b883a 	mov	r5,r4
 400aa30:	11000017 	ldw	r4,0(r2)
 400aa34:	400a9c41 	jmpi	400a9c4 <_fflush_r>
 400aa38:	00810074 	movhi	r2,1025
 400aa3c:	108c1f04 	addi	r2,r2,12412
 400aa40:	11000017 	ldw	r4,0(r2)
 400aa44:	01410074 	movhi	r5,1025
 400aa48:	296a7104 	addi	r5,r5,-22076
 400aa4c:	400b9c81 	jmpi	400b9c8 <_fwalk_reent>

0400aa50 <__fp_unlock>:
 400aa50:	0005883a 	mov	r2,zero
 400aa54:	f800283a 	ret

0400aa58 <_cleanup_r>:
 400aa58:	01410074 	movhi	r5,1025
 400aa5c:	2974f304 	addi	r5,r5,-11316
 400aa60:	400b9c81 	jmpi	400b9c8 <_fwalk_reent>

0400aa64 <__sinit.part.1>:
 400aa64:	defff704 	addi	sp,sp,-36
 400aa68:	00c10074 	movhi	r3,1025
 400aa6c:	dfc00815 	stw	ra,32(sp)
 400aa70:	ddc00715 	stw	r23,28(sp)
 400aa74:	dd800615 	stw	r22,24(sp)
 400aa78:	dd400515 	stw	r21,20(sp)
 400aa7c:	dd000415 	stw	r20,16(sp)
 400aa80:	dcc00315 	stw	r19,12(sp)
 400aa84:	dc800215 	stw	r18,8(sp)
 400aa88:	dc400115 	stw	r17,4(sp)
 400aa8c:	dc000015 	stw	r16,0(sp)
 400aa90:	18ea9604 	addi	r3,r3,-21928
 400aa94:	24000117 	ldw	r16,4(r4)
 400aa98:	20c00f15 	stw	r3,60(r4)
 400aa9c:	2080bb04 	addi	r2,r4,748
 400aaa0:	00c000c4 	movi	r3,3
 400aaa4:	20c0b915 	stw	r3,740(r4)
 400aaa8:	2080ba15 	stw	r2,744(r4)
 400aaac:	2000b815 	stw	zero,736(r4)
 400aab0:	05c00204 	movi	r23,8
 400aab4:	00800104 	movi	r2,4
 400aab8:	2025883a 	mov	r18,r4
 400aabc:	b80d883a 	mov	r6,r23
 400aac0:	81001704 	addi	r4,r16,92
 400aac4:	000b883a 	mov	r5,zero
 400aac8:	80000015 	stw	zero,0(r16)
 400aacc:	80000115 	stw	zero,4(r16)
 400aad0:	80000215 	stw	zero,8(r16)
 400aad4:	8080030d 	sth	r2,12(r16)
 400aad8:	80001915 	stw	zero,100(r16)
 400aadc:	8000038d 	sth	zero,14(r16)
 400aae0:	80000415 	stw	zero,16(r16)
 400aae4:	80000515 	stw	zero,20(r16)
 400aae8:	80000615 	stw	zero,24(r16)
 400aaec:	4008b000 	call	4008b00 <memset>
 400aaf0:	05810074 	movhi	r22,1025
 400aaf4:	94400217 	ldw	r17,8(r18)
 400aaf8:	05410074 	movhi	r21,1025
 400aafc:	05010074 	movhi	r20,1025
 400ab00:	04c10074 	movhi	r19,1025
 400ab04:	b5b34a04 	addi	r22,r22,-13016
 400ab08:	ad736104 	addi	r21,r21,-12924
 400ab0c:	a5338004 	addi	r20,r20,-12800
 400ab10:	9cf39704 	addi	r19,r19,-12708
 400ab14:	85800815 	stw	r22,32(r16)
 400ab18:	85400915 	stw	r21,36(r16)
 400ab1c:	85000a15 	stw	r20,40(r16)
 400ab20:	84c00b15 	stw	r19,44(r16)
 400ab24:	84000715 	stw	r16,28(r16)
 400ab28:	00800284 	movi	r2,10
 400ab2c:	8880030d 	sth	r2,12(r17)
 400ab30:	00800044 	movi	r2,1
 400ab34:	b80d883a 	mov	r6,r23
 400ab38:	89001704 	addi	r4,r17,92
 400ab3c:	000b883a 	mov	r5,zero
 400ab40:	88000015 	stw	zero,0(r17)
 400ab44:	88000115 	stw	zero,4(r17)
 400ab48:	88000215 	stw	zero,8(r17)
 400ab4c:	88001915 	stw	zero,100(r17)
 400ab50:	8880038d 	sth	r2,14(r17)
 400ab54:	88000415 	stw	zero,16(r17)
 400ab58:	88000515 	stw	zero,20(r17)
 400ab5c:	88000615 	stw	zero,24(r17)
 400ab60:	4008b000 	call	4008b00 <memset>
 400ab64:	94000317 	ldw	r16,12(r18)
 400ab68:	00800484 	movi	r2,18
 400ab6c:	8c400715 	stw	r17,28(r17)
 400ab70:	8d800815 	stw	r22,32(r17)
 400ab74:	8d400915 	stw	r21,36(r17)
 400ab78:	8d000a15 	stw	r20,40(r17)
 400ab7c:	8cc00b15 	stw	r19,44(r17)
 400ab80:	8080030d 	sth	r2,12(r16)
 400ab84:	00800084 	movi	r2,2
 400ab88:	80000015 	stw	zero,0(r16)
 400ab8c:	80000115 	stw	zero,4(r16)
 400ab90:	80000215 	stw	zero,8(r16)
 400ab94:	80001915 	stw	zero,100(r16)
 400ab98:	8080038d 	sth	r2,14(r16)
 400ab9c:	80000415 	stw	zero,16(r16)
 400aba0:	80000515 	stw	zero,20(r16)
 400aba4:	80000615 	stw	zero,24(r16)
 400aba8:	b80d883a 	mov	r6,r23
 400abac:	000b883a 	mov	r5,zero
 400abb0:	81001704 	addi	r4,r16,92
 400abb4:	4008b000 	call	4008b00 <memset>
 400abb8:	00800044 	movi	r2,1
 400abbc:	84000715 	stw	r16,28(r16)
 400abc0:	85800815 	stw	r22,32(r16)
 400abc4:	85400915 	stw	r21,36(r16)
 400abc8:	85000a15 	stw	r20,40(r16)
 400abcc:	84c00b15 	stw	r19,44(r16)
 400abd0:	90800e15 	stw	r2,56(r18)
 400abd4:	dfc00817 	ldw	ra,32(sp)
 400abd8:	ddc00717 	ldw	r23,28(sp)
 400abdc:	dd800617 	ldw	r22,24(sp)
 400abe0:	dd400517 	ldw	r21,20(sp)
 400abe4:	dd000417 	ldw	r20,16(sp)
 400abe8:	dcc00317 	ldw	r19,12(sp)
 400abec:	dc800217 	ldw	r18,8(sp)
 400abf0:	dc400117 	ldw	r17,4(sp)
 400abf4:	dc000017 	ldw	r16,0(sp)
 400abf8:	dec00904 	addi	sp,sp,36
 400abfc:	f800283a 	ret

0400ac00 <__fp_lock>:
 400ac00:	0005883a 	mov	r2,zero
 400ac04:	f800283a 	ret

0400ac08 <__sfmoreglue>:
 400ac08:	defffc04 	addi	sp,sp,-16
 400ac0c:	dc800215 	stw	r18,8(sp)
 400ac10:	2825883a 	mov	r18,r5
 400ac14:	dc000015 	stw	r16,0(sp)
 400ac18:	01401a04 	movi	r5,104
 400ac1c:	2021883a 	mov	r16,r4
 400ac20:	913fffc4 	addi	r4,r18,-1
 400ac24:	dfc00315 	stw	ra,12(sp)
 400ac28:	dc400115 	stw	r17,4(sp)
 400ac2c:	40048b00 	call	40048b0 <__mulsi3>
 400ac30:	8009883a 	mov	r4,r16
 400ac34:	11401d04 	addi	r5,r2,116
 400ac38:	1023883a 	mov	r17,r2
 400ac3c:	400bd240 	call	400bd24 <_malloc_r>
 400ac40:	1021883a 	mov	r16,r2
 400ac44:	10000726 	beq	r2,zero,400ac64 <__sfmoreglue+0x5c>
 400ac48:	11000304 	addi	r4,r2,12
 400ac4c:	10000015 	stw	zero,0(r2)
 400ac50:	14800115 	stw	r18,4(r2)
 400ac54:	11000215 	stw	r4,8(r2)
 400ac58:	89801a04 	addi	r6,r17,104
 400ac5c:	000b883a 	mov	r5,zero
 400ac60:	4008b000 	call	4008b00 <memset>
 400ac64:	8005883a 	mov	r2,r16
 400ac68:	dfc00317 	ldw	ra,12(sp)
 400ac6c:	dc800217 	ldw	r18,8(sp)
 400ac70:	dc400117 	ldw	r17,4(sp)
 400ac74:	dc000017 	ldw	r16,0(sp)
 400ac78:	dec00404 	addi	sp,sp,16
 400ac7c:	f800283a 	ret

0400ac80 <__sfp>:
 400ac80:	defffb04 	addi	sp,sp,-20
 400ac84:	dc000015 	stw	r16,0(sp)
 400ac88:	04010074 	movhi	r16,1025
 400ac8c:	840c1f04 	addi	r16,r16,12412
 400ac90:	dcc00315 	stw	r19,12(sp)
 400ac94:	2027883a 	mov	r19,r4
 400ac98:	81000017 	ldw	r4,0(r16)
 400ac9c:	dfc00415 	stw	ra,16(sp)
 400aca0:	dc800215 	stw	r18,8(sp)
 400aca4:	20800e17 	ldw	r2,56(r4)
 400aca8:	dc400115 	stw	r17,4(sp)
 400acac:	1000021e 	bne	r2,zero,400acb8 <__sfp+0x38>
 400acb0:	400aa640 	call	400aa64 <__sinit.part.1>
 400acb4:	81000017 	ldw	r4,0(r16)
 400acb8:	2480b804 	addi	r18,r4,736
 400acbc:	047fffc4 	movi	r17,-1
 400acc0:	91000117 	ldw	r4,4(r18)
 400acc4:	94000217 	ldw	r16,8(r18)
 400acc8:	213fffc4 	addi	r4,r4,-1
 400accc:	20000a16 	blt	r4,zero,400acf8 <__sfp+0x78>
 400acd0:	8080030f 	ldh	r2,12(r16)
 400acd4:	10000c26 	beq	r2,zero,400ad08 <__sfp+0x88>
 400acd8:	80c01d04 	addi	r3,r16,116
 400acdc:	00000206 	br	400ace8 <__sfp+0x68>
 400ace0:	18bfe60f 	ldh	r2,-104(r3)
 400ace4:	10000826 	beq	r2,zero,400ad08 <__sfp+0x88>
 400ace8:	213fffc4 	addi	r4,r4,-1
 400acec:	1c3ffd04 	addi	r16,r3,-12
 400acf0:	18c01a04 	addi	r3,r3,104
 400acf4:	247ffa1e 	bne	r4,r17,400ace0 <__alt_data_end+0xfc00ace0>
 400acf8:	90800017 	ldw	r2,0(r18)
 400acfc:	10001d26 	beq	r2,zero,400ad74 <__sfp+0xf4>
 400ad00:	1025883a 	mov	r18,r2
 400ad04:	003fee06 	br	400acc0 <__alt_data_end+0xfc00acc0>
 400ad08:	00bfffc4 	movi	r2,-1
 400ad0c:	8080038d 	sth	r2,14(r16)
 400ad10:	00800044 	movi	r2,1
 400ad14:	8080030d 	sth	r2,12(r16)
 400ad18:	80001915 	stw	zero,100(r16)
 400ad1c:	80000015 	stw	zero,0(r16)
 400ad20:	80000215 	stw	zero,8(r16)
 400ad24:	80000115 	stw	zero,4(r16)
 400ad28:	80000415 	stw	zero,16(r16)
 400ad2c:	80000515 	stw	zero,20(r16)
 400ad30:	80000615 	stw	zero,24(r16)
 400ad34:	01800204 	movi	r6,8
 400ad38:	000b883a 	mov	r5,zero
 400ad3c:	81001704 	addi	r4,r16,92
 400ad40:	4008b000 	call	4008b00 <memset>
 400ad44:	8005883a 	mov	r2,r16
 400ad48:	80000c15 	stw	zero,48(r16)
 400ad4c:	80000d15 	stw	zero,52(r16)
 400ad50:	80001115 	stw	zero,68(r16)
 400ad54:	80001215 	stw	zero,72(r16)
 400ad58:	dfc00417 	ldw	ra,16(sp)
 400ad5c:	dcc00317 	ldw	r19,12(sp)
 400ad60:	dc800217 	ldw	r18,8(sp)
 400ad64:	dc400117 	ldw	r17,4(sp)
 400ad68:	dc000017 	ldw	r16,0(sp)
 400ad6c:	dec00504 	addi	sp,sp,20
 400ad70:	f800283a 	ret
 400ad74:	01400104 	movi	r5,4
 400ad78:	9809883a 	mov	r4,r19
 400ad7c:	400ac080 	call	400ac08 <__sfmoreglue>
 400ad80:	90800015 	stw	r2,0(r18)
 400ad84:	103fde1e 	bne	r2,zero,400ad00 <__alt_data_end+0xfc00ad00>
 400ad88:	00800304 	movi	r2,12
 400ad8c:	98800015 	stw	r2,0(r19)
 400ad90:	0005883a 	mov	r2,zero
 400ad94:	003ff006 	br	400ad58 <__alt_data_end+0xfc00ad58>

0400ad98 <_cleanup>:
 400ad98:	00810074 	movhi	r2,1025
 400ad9c:	108c1f04 	addi	r2,r2,12412
 400ada0:	11000017 	ldw	r4,0(r2)
 400ada4:	01410074 	movhi	r5,1025
 400ada8:	2974f304 	addi	r5,r5,-11316
 400adac:	400b9c81 	jmpi	400b9c8 <_fwalk_reent>

0400adb0 <__sinit>:
 400adb0:	20800e17 	ldw	r2,56(r4)
 400adb4:	10000126 	beq	r2,zero,400adbc <__sinit+0xc>
 400adb8:	f800283a 	ret
 400adbc:	400aa641 	jmpi	400aa64 <__sinit.part.1>

0400adc0 <__sfp_lock_acquire>:
 400adc0:	f800283a 	ret

0400adc4 <__sfp_lock_release>:
 400adc4:	f800283a 	ret

0400adc8 <__sinit_lock_acquire>:
 400adc8:	f800283a 	ret

0400adcc <__sinit_lock_release>:
 400adcc:	f800283a 	ret

0400add0 <__fp_lock_all>:
 400add0:	00810074 	movhi	r2,1025
 400add4:	108c2004 	addi	r2,r2,12416
 400add8:	11000017 	ldw	r4,0(r2)
 400addc:	01410074 	movhi	r5,1025
 400ade0:	296b0004 	addi	r5,r5,-21504
 400ade4:	400b9041 	jmpi	400b904 <_fwalk>

0400ade8 <__fp_unlock_all>:
 400ade8:	00810074 	movhi	r2,1025
 400adec:	108c2004 	addi	r2,r2,12416
 400adf0:	11000017 	ldw	r4,0(r2)
 400adf4:	01410074 	movhi	r5,1025
 400adf8:	296a9404 	addi	r5,r5,-21936
 400adfc:	400b9041 	jmpi	400b904 <_fwalk>

0400ae00 <__fputwc>:
 400ae00:	defff804 	addi	sp,sp,-32
 400ae04:	dcc00415 	stw	r19,16(sp)
 400ae08:	dc800315 	stw	r18,12(sp)
 400ae0c:	dc000115 	stw	r16,4(sp)
 400ae10:	dfc00715 	stw	ra,28(sp)
 400ae14:	dd400615 	stw	r21,24(sp)
 400ae18:	dd000515 	stw	r20,20(sp)
 400ae1c:	dc400215 	stw	r17,8(sp)
 400ae20:	2027883a 	mov	r19,r4
 400ae24:	2825883a 	mov	r18,r5
 400ae28:	3021883a 	mov	r16,r6
 400ae2c:	400bb140 	call	400bb14 <__locale_mb_cur_max>
 400ae30:	00c00044 	movi	r3,1
 400ae34:	10c03e26 	beq	r2,r3,400af30 <__fputwc+0x130>
 400ae38:	81c01704 	addi	r7,r16,92
 400ae3c:	900d883a 	mov	r6,r18
 400ae40:	d80b883a 	mov	r5,sp
 400ae44:	9809883a 	mov	r4,r19
 400ae48:	400d1300 	call	400d130 <_wcrtomb_r>
 400ae4c:	1029883a 	mov	r20,r2
 400ae50:	00bfffc4 	movi	r2,-1
 400ae54:	a0802026 	beq	r20,r2,400aed8 <__fputwc+0xd8>
 400ae58:	d9400003 	ldbu	r5,0(sp)
 400ae5c:	a0001c26 	beq	r20,zero,400aed0 <__fputwc+0xd0>
 400ae60:	0023883a 	mov	r17,zero
 400ae64:	05400284 	movi	r21,10
 400ae68:	00000906 	br	400ae90 <__fputwc+0x90>
 400ae6c:	80800017 	ldw	r2,0(r16)
 400ae70:	11400005 	stb	r5,0(r2)
 400ae74:	80c00017 	ldw	r3,0(r16)
 400ae78:	18c00044 	addi	r3,r3,1
 400ae7c:	80c00015 	stw	r3,0(r16)
 400ae80:	8c400044 	addi	r17,r17,1
 400ae84:	dc45883a 	add	r2,sp,r17
 400ae88:	8d00112e 	bgeu	r17,r20,400aed0 <__fputwc+0xd0>
 400ae8c:	11400003 	ldbu	r5,0(r2)
 400ae90:	80c00217 	ldw	r3,8(r16)
 400ae94:	18ffffc4 	addi	r3,r3,-1
 400ae98:	80c00215 	stw	r3,8(r16)
 400ae9c:	183ff30e 	bge	r3,zero,400ae6c <__alt_data_end+0xfc00ae6c>
 400aea0:	80800617 	ldw	r2,24(r16)
 400aea4:	18801916 	blt	r3,r2,400af0c <__fputwc+0x10c>
 400aea8:	80800017 	ldw	r2,0(r16)
 400aeac:	11400005 	stb	r5,0(r2)
 400aeb0:	80800017 	ldw	r2,0(r16)
 400aeb4:	10c00003 	ldbu	r3,0(r2)
 400aeb8:	10800044 	addi	r2,r2,1
 400aebc:	1d402326 	beq	r3,r21,400af4c <__fputwc+0x14c>
 400aec0:	80800015 	stw	r2,0(r16)
 400aec4:	8c400044 	addi	r17,r17,1
 400aec8:	dc45883a 	add	r2,sp,r17
 400aecc:	8d3fef36 	bltu	r17,r20,400ae8c <__alt_data_end+0xfc00ae8c>
 400aed0:	9005883a 	mov	r2,r18
 400aed4:	00000406 	br	400aee8 <__fputwc+0xe8>
 400aed8:	80c0030b 	ldhu	r3,12(r16)
 400aedc:	a005883a 	mov	r2,r20
 400aee0:	18c01014 	ori	r3,r3,64
 400aee4:	80c0030d 	sth	r3,12(r16)
 400aee8:	dfc00717 	ldw	ra,28(sp)
 400aeec:	dd400617 	ldw	r21,24(sp)
 400aef0:	dd000517 	ldw	r20,20(sp)
 400aef4:	dcc00417 	ldw	r19,16(sp)
 400aef8:	dc800317 	ldw	r18,12(sp)
 400aefc:	dc400217 	ldw	r17,8(sp)
 400af00:	dc000117 	ldw	r16,4(sp)
 400af04:	dec00804 	addi	sp,sp,32
 400af08:	f800283a 	ret
 400af0c:	800d883a 	mov	r6,r16
 400af10:	29403fcc 	andi	r5,r5,255
 400af14:	9809883a 	mov	r4,r19
 400af18:	400cfd80 	call	400cfd8 <__swbuf_r>
 400af1c:	10bfffe0 	cmpeqi	r2,r2,-1
 400af20:	10803fcc 	andi	r2,r2,255
 400af24:	103fd626 	beq	r2,zero,400ae80 <__alt_data_end+0xfc00ae80>
 400af28:	00bfffc4 	movi	r2,-1
 400af2c:	003fee06 	br	400aee8 <__alt_data_end+0xfc00aee8>
 400af30:	90ffffc4 	addi	r3,r18,-1
 400af34:	01003f84 	movi	r4,254
 400af38:	20ffbf36 	bltu	r4,r3,400ae38 <__alt_data_end+0xfc00ae38>
 400af3c:	900b883a 	mov	r5,r18
 400af40:	dc800005 	stb	r18,0(sp)
 400af44:	1029883a 	mov	r20,r2
 400af48:	003fc506 	br	400ae60 <__alt_data_end+0xfc00ae60>
 400af4c:	800d883a 	mov	r6,r16
 400af50:	a80b883a 	mov	r5,r21
 400af54:	9809883a 	mov	r4,r19
 400af58:	400cfd80 	call	400cfd8 <__swbuf_r>
 400af5c:	10bfffe0 	cmpeqi	r2,r2,-1
 400af60:	003fef06 	br	400af20 <__alt_data_end+0xfc00af20>

0400af64 <_fputwc_r>:
 400af64:	3080030b 	ldhu	r2,12(r6)
 400af68:	10c8000c 	andi	r3,r2,8192
 400af6c:	1800051e 	bne	r3,zero,400af84 <_fputwc_r+0x20>
 400af70:	30c01917 	ldw	r3,100(r6)
 400af74:	10880014 	ori	r2,r2,8192
 400af78:	3080030d 	sth	r2,12(r6)
 400af7c:	18880014 	ori	r2,r3,8192
 400af80:	30801915 	stw	r2,100(r6)
 400af84:	400ae001 	jmpi	400ae00 <__fputwc>

0400af88 <fputwc>:
 400af88:	00810074 	movhi	r2,1025
 400af8c:	defffc04 	addi	sp,sp,-16
 400af90:	108c2004 	addi	r2,r2,12416
 400af94:	dc000115 	stw	r16,4(sp)
 400af98:	14000017 	ldw	r16,0(r2)
 400af9c:	dc400215 	stw	r17,8(sp)
 400afa0:	dfc00315 	stw	ra,12(sp)
 400afa4:	2023883a 	mov	r17,r4
 400afa8:	80000226 	beq	r16,zero,400afb4 <fputwc+0x2c>
 400afac:	80800e17 	ldw	r2,56(r16)
 400afb0:	10001026 	beq	r2,zero,400aff4 <fputwc+0x6c>
 400afb4:	2880030b 	ldhu	r2,12(r5)
 400afb8:	10c8000c 	andi	r3,r2,8192
 400afbc:	1800051e 	bne	r3,zero,400afd4 <fputwc+0x4c>
 400afc0:	28c01917 	ldw	r3,100(r5)
 400afc4:	10880014 	ori	r2,r2,8192
 400afc8:	2880030d 	sth	r2,12(r5)
 400afcc:	18880014 	ori	r2,r3,8192
 400afd0:	28801915 	stw	r2,100(r5)
 400afd4:	280d883a 	mov	r6,r5
 400afd8:	8009883a 	mov	r4,r16
 400afdc:	880b883a 	mov	r5,r17
 400afe0:	dfc00317 	ldw	ra,12(sp)
 400afe4:	dc400217 	ldw	r17,8(sp)
 400afe8:	dc000117 	ldw	r16,4(sp)
 400afec:	dec00404 	addi	sp,sp,16
 400aff0:	400ae001 	jmpi	400ae00 <__fputwc>
 400aff4:	8009883a 	mov	r4,r16
 400aff8:	d9400015 	stw	r5,0(sp)
 400affc:	400adb00 	call	400adb0 <__sinit>
 400b000:	d9400017 	ldw	r5,0(sp)
 400b004:	003feb06 	br	400afb4 <__alt_data_end+0xfc00afb4>

0400b008 <_malloc_trim_r>:
 400b008:	defffb04 	addi	sp,sp,-20
 400b00c:	dcc00315 	stw	r19,12(sp)
 400b010:	04c10074 	movhi	r19,1025
 400b014:	dc800215 	stw	r18,8(sp)
 400b018:	dc400115 	stw	r17,4(sp)
 400b01c:	dc000015 	stw	r16,0(sp)
 400b020:	dfc00415 	stw	ra,16(sp)
 400b024:	2821883a 	mov	r16,r5
 400b028:	9cc67804 	addi	r19,r19,6624
 400b02c:	2025883a 	mov	r18,r4
 400b030:	400e95c0 	call	400e95c <__malloc_lock>
 400b034:	98800217 	ldw	r2,8(r19)
 400b038:	14400117 	ldw	r17,4(r2)
 400b03c:	00bfff04 	movi	r2,-4
 400b040:	88a2703a 	and	r17,r17,r2
 400b044:	8c21c83a 	sub	r16,r17,r16
 400b048:	8403fbc4 	addi	r16,r16,4079
 400b04c:	8020d33a 	srli	r16,r16,12
 400b050:	0083ffc4 	movi	r2,4095
 400b054:	843fffc4 	addi	r16,r16,-1
 400b058:	8020933a 	slli	r16,r16,12
 400b05c:	1400060e 	bge	r2,r16,400b078 <_malloc_trim_r+0x70>
 400b060:	000b883a 	mov	r5,zero
 400b064:	9009883a 	mov	r4,r18
 400b068:	400ccd40 	call	400ccd4 <_sbrk_r>
 400b06c:	98c00217 	ldw	r3,8(r19)
 400b070:	1c47883a 	add	r3,r3,r17
 400b074:	10c00a26 	beq	r2,r3,400b0a0 <_malloc_trim_r+0x98>
 400b078:	9009883a 	mov	r4,r18
 400b07c:	400e9800 	call	400e980 <__malloc_unlock>
 400b080:	0005883a 	mov	r2,zero
 400b084:	dfc00417 	ldw	ra,16(sp)
 400b088:	dcc00317 	ldw	r19,12(sp)
 400b08c:	dc800217 	ldw	r18,8(sp)
 400b090:	dc400117 	ldw	r17,4(sp)
 400b094:	dc000017 	ldw	r16,0(sp)
 400b098:	dec00504 	addi	sp,sp,20
 400b09c:	f800283a 	ret
 400b0a0:	040bc83a 	sub	r5,zero,r16
 400b0a4:	9009883a 	mov	r4,r18
 400b0a8:	400ccd40 	call	400ccd4 <_sbrk_r>
 400b0ac:	00ffffc4 	movi	r3,-1
 400b0b0:	10c00d26 	beq	r2,r3,400b0e8 <_malloc_trim_r+0xe0>
 400b0b4:	00c10074 	movhi	r3,1025
 400b0b8:	18d34e04 	addi	r3,r3,19768
 400b0bc:	18800017 	ldw	r2,0(r3)
 400b0c0:	99000217 	ldw	r4,8(r19)
 400b0c4:	8c23c83a 	sub	r17,r17,r16
 400b0c8:	8c400054 	ori	r17,r17,1
 400b0cc:	1421c83a 	sub	r16,r2,r16
 400b0d0:	24400115 	stw	r17,4(r4)
 400b0d4:	9009883a 	mov	r4,r18
 400b0d8:	1c000015 	stw	r16,0(r3)
 400b0dc:	400e9800 	call	400e980 <__malloc_unlock>
 400b0e0:	00800044 	movi	r2,1
 400b0e4:	003fe706 	br	400b084 <__alt_data_end+0xfc00b084>
 400b0e8:	000b883a 	mov	r5,zero
 400b0ec:	9009883a 	mov	r4,r18
 400b0f0:	400ccd40 	call	400ccd4 <_sbrk_r>
 400b0f4:	99000217 	ldw	r4,8(r19)
 400b0f8:	014003c4 	movi	r5,15
 400b0fc:	1107c83a 	sub	r3,r2,r4
 400b100:	28ffdd0e 	bge	r5,r3,400b078 <__alt_data_end+0xfc00b078>
 400b104:	01410074 	movhi	r5,1025
 400b108:	294c2204 	addi	r5,r5,12424
 400b10c:	29400017 	ldw	r5,0(r5)
 400b110:	18c00054 	ori	r3,r3,1
 400b114:	20c00115 	stw	r3,4(r4)
 400b118:	00c10074 	movhi	r3,1025
 400b11c:	1145c83a 	sub	r2,r2,r5
 400b120:	18d34e04 	addi	r3,r3,19768
 400b124:	18800015 	stw	r2,0(r3)
 400b128:	003fd306 	br	400b078 <__alt_data_end+0xfc00b078>

0400b12c <_free_r>:
 400b12c:	28004126 	beq	r5,zero,400b234 <_free_r+0x108>
 400b130:	defffd04 	addi	sp,sp,-12
 400b134:	dc400115 	stw	r17,4(sp)
 400b138:	dc000015 	stw	r16,0(sp)
 400b13c:	2023883a 	mov	r17,r4
 400b140:	2821883a 	mov	r16,r5
 400b144:	dfc00215 	stw	ra,8(sp)
 400b148:	400e95c0 	call	400e95c <__malloc_lock>
 400b14c:	81ffff17 	ldw	r7,-4(r16)
 400b150:	00bfff84 	movi	r2,-2
 400b154:	01010074 	movhi	r4,1025
 400b158:	81bffe04 	addi	r6,r16,-8
 400b15c:	3884703a 	and	r2,r7,r2
 400b160:	21067804 	addi	r4,r4,6624
 400b164:	308b883a 	add	r5,r6,r2
 400b168:	2a400117 	ldw	r9,4(r5)
 400b16c:	22000217 	ldw	r8,8(r4)
 400b170:	00ffff04 	movi	r3,-4
 400b174:	48c6703a 	and	r3,r9,r3
 400b178:	2a005726 	beq	r5,r8,400b2d8 <_free_r+0x1ac>
 400b17c:	28c00115 	stw	r3,4(r5)
 400b180:	39c0004c 	andi	r7,r7,1
 400b184:	3800091e 	bne	r7,zero,400b1ac <_free_r+0x80>
 400b188:	823ffe17 	ldw	r8,-8(r16)
 400b18c:	22400204 	addi	r9,r4,8
 400b190:	320dc83a 	sub	r6,r6,r8
 400b194:	31c00217 	ldw	r7,8(r6)
 400b198:	1205883a 	add	r2,r2,r8
 400b19c:	3a406526 	beq	r7,r9,400b334 <_free_r+0x208>
 400b1a0:	32000317 	ldw	r8,12(r6)
 400b1a4:	3a000315 	stw	r8,12(r7)
 400b1a8:	41c00215 	stw	r7,8(r8)
 400b1ac:	28cf883a 	add	r7,r5,r3
 400b1b0:	39c00117 	ldw	r7,4(r7)
 400b1b4:	39c0004c 	andi	r7,r7,1
 400b1b8:	38003a26 	beq	r7,zero,400b2a4 <_free_r+0x178>
 400b1bc:	10c00054 	ori	r3,r2,1
 400b1c0:	30c00115 	stw	r3,4(r6)
 400b1c4:	3087883a 	add	r3,r6,r2
 400b1c8:	18800015 	stw	r2,0(r3)
 400b1cc:	00c07fc4 	movi	r3,511
 400b1d0:	18801936 	bltu	r3,r2,400b238 <_free_r+0x10c>
 400b1d4:	1004d0fa 	srli	r2,r2,3
 400b1d8:	01c00044 	movi	r7,1
 400b1dc:	21400117 	ldw	r5,4(r4)
 400b1e0:	10c00044 	addi	r3,r2,1
 400b1e4:	18c7883a 	add	r3,r3,r3
 400b1e8:	1005d0ba 	srai	r2,r2,2
 400b1ec:	18c7883a 	add	r3,r3,r3
 400b1f0:	18c7883a 	add	r3,r3,r3
 400b1f4:	1907883a 	add	r3,r3,r4
 400b1f8:	3884983a 	sll	r2,r7,r2
 400b1fc:	19c00017 	ldw	r7,0(r3)
 400b200:	1a3ffe04 	addi	r8,r3,-8
 400b204:	1144b03a 	or	r2,r2,r5
 400b208:	32000315 	stw	r8,12(r6)
 400b20c:	31c00215 	stw	r7,8(r6)
 400b210:	20800115 	stw	r2,4(r4)
 400b214:	19800015 	stw	r6,0(r3)
 400b218:	39800315 	stw	r6,12(r7)
 400b21c:	8809883a 	mov	r4,r17
 400b220:	dfc00217 	ldw	ra,8(sp)
 400b224:	dc400117 	ldw	r17,4(sp)
 400b228:	dc000017 	ldw	r16,0(sp)
 400b22c:	dec00304 	addi	sp,sp,12
 400b230:	400e9801 	jmpi	400e980 <__malloc_unlock>
 400b234:	f800283a 	ret
 400b238:	100ad27a 	srli	r5,r2,9
 400b23c:	00c00104 	movi	r3,4
 400b240:	19404a36 	bltu	r3,r5,400b36c <_free_r+0x240>
 400b244:	100ad1ba 	srli	r5,r2,6
 400b248:	28c00e44 	addi	r3,r5,57
 400b24c:	18c7883a 	add	r3,r3,r3
 400b250:	29400e04 	addi	r5,r5,56
 400b254:	18c7883a 	add	r3,r3,r3
 400b258:	18c7883a 	add	r3,r3,r3
 400b25c:	1909883a 	add	r4,r3,r4
 400b260:	20c00017 	ldw	r3,0(r4)
 400b264:	01c10074 	movhi	r7,1025
 400b268:	213ffe04 	addi	r4,r4,-8
 400b26c:	39c67804 	addi	r7,r7,6624
 400b270:	20c04426 	beq	r4,r3,400b384 <_free_r+0x258>
 400b274:	01ffff04 	movi	r7,-4
 400b278:	19400117 	ldw	r5,4(r3)
 400b27c:	29ca703a 	and	r5,r5,r7
 400b280:	1140022e 	bgeu	r2,r5,400b28c <_free_r+0x160>
 400b284:	18c00217 	ldw	r3,8(r3)
 400b288:	20fffb1e 	bne	r4,r3,400b278 <__alt_data_end+0xfc00b278>
 400b28c:	19000317 	ldw	r4,12(r3)
 400b290:	31000315 	stw	r4,12(r6)
 400b294:	30c00215 	stw	r3,8(r6)
 400b298:	21800215 	stw	r6,8(r4)
 400b29c:	19800315 	stw	r6,12(r3)
 400b2a0:	003fde06 	br	400b21c <__alt_data_end+0xfc00b21c>
 400b2a4:	29c00217 	ldw	r7,8(r5)
 400b2a8:	10c5883a 	add	r2,r2,r3
 400b2ac:	00c10074 	movhi	r3,1025
 400b2b0:	18c67a04 	addi	r3,r3,6632
 400b2b4:	38c03b26 	beq	r7,r3,400b3a4 <_free_r+0x278>
 400b2b8:	2a000317 	ldw	r8,12(r5)
 400b2bc:	11400054 	ori	r5,r2,1
 400b2c0:	3087883a 	add	r3,r6,r2
 400b2c4:	3a000315 	stw	r8,12(r7)
 400b2c8:	41c00215 	stw	r7,8(r8)
 400b2cc:	31400115 	stw	r5,4(r6)
 400b2d0:	18800015 	stw	r2,0(r3)
 400b2d4:	003fbd06 	br	400b1cc <__alt_data_end+0xfc00b1cc>
 400b2d8:	39c0004c 	andi	r7,r7,1
 400b2dc:	10c5883a 	add	r2,r2,r3
 400b2e0:	3800071e 	bne	r7,zero,400b300 <_free_r+0x1d4>
 400b2e4:	81fffe17 	ldw	r7,-8(r16)
 400b2e8:	31cdc83a 	sub	r6,r6,r7
 400b2ec:	30c00317 	ldw	r3,12(r6)
 400b2f0:	31400217 	ldw	r5,8(r6)
 400b2f4:	11c5883a 	add	r2,r2,r7
 400b2f8:	28c00315 	stw	r3,12(r5)
 400b2fc:	19400215 	stw	r5,8(r3)
 400b300:	10c00054 	ori	r3,r2,1
 400b304:	30c00115 	stw	r3,4(r6)
 400b308:	00c10074 	movhi	r3,1025
 400b30c:	18cc2304 	addi	r3,r3,12428
 400b310:	18c00017 	ldw	r3,0(r3)
 400b314:	21800215 	stw	r6,8(r4)
 400b318:	10ffc036 	bltu	r2,r3,400b21c <__alt_data_end+0xfc00b21c>
 400b31c:	00810074 	movhi	r2,1025
 400b320:	10934604 	addi	r2,r2,19736
 400b324:	11400017 	ldw	r5,0(r2)
 400b328:	8809883a 	mov	r4,r17
 400b32c:	400b0080 	call	400b008 <_malloc_trim_r>
 400b330:	003fba06 	br	400b21c <__alt_data_end+0xfc00b21c>
 400b334:	28c9883a 	add	r4,r5,r3
 400b338:	21000117 	ldw	r4,4(r4)
 400b33c:	2100004c 	andi	r4,r4,1
 400b340:	2000391e 	bne	r4,zero,400b428 <_free_r+0x2fc>
 400b344:	29c00217 	ldw	r7,8(r5)
 400b348:	29000317 	ldw	r4,12(r5)
 400b34c:	1885883a 	add	r2,r3,r2
 400b350:	10c00054 	ori	r3,r2,1
 400b354:	39000315 	stw	r4,12(r7)
 400b358:	21c00215 	stw	r7,8(r4)
 400b35c:	30c00115 	stw	r3,4(r6)
 400b360:	308d883a 	add	r6,r6,r2
 400b364:	30800015 	stw	r2,0(r6)
 400b368:	003fac06 	br	400b21c <__alt_data_end+0xfc00b21c>
 400b36c:	00c00504 	movi	r3,20
 400b370:	19401536 	bltu	r3,r5,400b3c8 <_free_r+0x29c>
 400b374:	28c01704 	addi	r3,r5,92
 400b378:	18c7883a 	add	r3,r3,r3
 400b37c:	294016c4 	addi	r5,r5,91
 400b380:	003fb406 	br	400b254 <__alt_data_end+0xfc00b254>
 400b384:	280bd0ba 	srai	r5,r5,2
 400b388:	00c00044 	movi	r3,1
 400b38c:	38800117 	ldw	r2,4(r7)
 400b390:	194a983a 	sll	r5,r3,r5
 400b394:	2007883a 	mov	r3,r4
 400b398:	2884b03a 	or	r2,r5,r2
 400b39c:	38800115 	stw	r2,4(r7)
 400b3a0:	003fbb06 	br	400b290 <__alt_data_end+0xfc00b290>
 400b3a4:	21800515 	stw	r6,20(r4)
 400b3a8:	21800415 	stw	r6,16(r4)
 400b3ac:	10c00054 	ori	r3,r2,1
 400b3b0:	31c00315 	stw	r7,12(r6)
 400b3b4:	31c00215 	stw	r7,8(r6)
 400b3b8:	30c00115 	stw	r3,4(r6)
 400b3bc:	308d883a 	add	r6,r6,r2
 400b3c0:	30800015 	stw	r2,0(r6)
 400b3c4:	003f9506 	br	400b21c <__alt_data_end+0xfc00b21c>
 400b3c8:	00c01504 	movi	r3,84
 400b3cc:	19400536 	bltu	r3,r5,400b3e4 <_free_r+0x2b8>
 400b3d0:	100ad33a 	srli	r5,r2,12
 400b3d4:	28c01bc4 	addi	r3,r5,111
 400b3d8:	18c7883a 	add	r3,r3,r3
 400b3dc:	29401b84 	addi	r5,r5,110
 400b3e0:	003f9c06 	br	400b254 <__alt_data_end+0xfc00b254>
 400b3e4:	00c05504 	movi	r3,340
 400b3e8:	19400536 	bltu	r3,r5,400b400 <_free_r+0x2d4>
 400b3ec:	100ad3fa 	srli	r5,r2,15
 400b3f0:	28c01e04 	addi	r3,r5,120
 400b3f4:	18c7883a 	add	r3,r3,r3
 400b3f8:	29401dc4 	addi	r5,r5,119
 400b3fc:	003f9506 	br	400b254 <__alt_data_end+0xfc00b254>
 400b400:	00c15504 	movi	r3,1364
 400b404:	19400536 	bltu	r3,r5,400b41c <_free_r+0x2f0>
 400b408:	100ad4ba 	srli	r5,r2,18
 400b40c:	28c01f44 	addi	r3,r5,125
 400b410:	18c7883a 	add	r3,r3,r3
 400b414:	29401f04 	addi	r5,r5,124
 400b418:	003f8e06 	br	400b254 <__alt_data_end+0xfc00b254>
 400b41c:	00c03f84 	movi	r3,254
 400b420:	01401f84 	movi	r5,126
 400b424:	003f8b06 	br	400b254 <__alt_data_end+0xfc00b254>
 400b428:	10c00054 	ori	r3,r2,1
 400b42c:	30c00115 	stw	r3,4(r6)
 400b430:	308d883a 	add	r6,r6,r2
 400b434:	30800015 	stw	r2,0(r6)
 400b438:	003f7806 	br	400b21c <__alt_data_end+0xfc00b21c>

0400b43c <__sfvwrite_r>:
 400b43c:	30800217 	ldw	r2,8(r6)
 400b440:	10006726 	beq	r2,zero,400b5e0 <__sfvwrite_r+0x1a4>
 400b444:	28c0030b 	ldhu	r3,12(r5)
 400b448:	defff404 	addi	sp,sp,-48
 400b44c:	dd400715 	stw	r21,28(sp)
 400b450:	dd000615 	stw	r20,24(sp)
 400b454:	dc000215 	stw	r16,8(sp)
 400b458:	dfc00b15 	stw	ra,44(sp)
 400b45c:	df000a15 	stw	fp,40(sp)
 400b460:	ddc00915 	stw	r23,36(sp)
 400b464:	dd800815 	stw	r22,32(sp)
 400b468:	dcc00515 	stw	r19,20(sp)
 400b46c:	dc800415 	stw	r18,16(sp)
 400b470:	dc400315 	stw	r17,12(sp)
 400b474:	1880020c 	andi	r2,r3,8
 400b478:	2821883a 	mov	r16,r5
 400b47c:	202b883a 	mov	r21,r4
 400b480:	3029883a 	mov	r20,r6
 400b484:	10002726 	beq	r2,zero,400b524 <__sfvwrite_r+0xe8>
 400b488:	28800417 	ldw	r2,16(r5)
 400b48c:	10002526 	beq	r2,zero,400b524 <__sfvwrite_r+0xe8>
 400b490:	1880008c 	andi	r2,r3,2
 400b494:	a4400017 	ldw	r17,0(r20)
 400b498:	10002a26 	beq	r2,zero,400b544 <__sfvwrite_r+0x108>
 400b49c:	05a00034 	movhi	r22,32768
 400b4a0:	0027883a 	mov	r19,zero
 400b4a4:	0025883a 	mov	r18,zero
 400b4a8:	b5bf0004 	addi	r22,r22,-1024
 400b4ac:	980d883a 	mov	r6,r19
 400b4b0:	a809883a 	mov	r4,r21
 400b4b4:	90004626 	beq	r18,zero,400b5d0 <__sfvwrite_r+0x194>
 400b4b8:	900f883a 	mov	r7,r18
 400b4bc:	b480022e 	bgeu	r22,r18,400b4c8 <__sfvwrite_r+0x8c>
 400b4c0:	01e00034 	movhi	r7,32768
 400b4c4:	39ff0004 	addi	r7,r7,-1024
 400b4c8:	80800917 	ldw	r2,36(r16)
 400b4cc:	81400717 	ldw	r5,28(r16)
 400b4d0:	103ee83a 	callr	r2
 400b4d4:	00805a0e 	bge	zero,r2,400b640 <__sfvwrite_r+0x204>
 400b4d8:	a0c00217 	ldw	r3,8(r20)
 400b4dc:	98a7883a 	add	r19,r19,r2
 400b4e0:	90a5c83a 	sub	r18,r18,r2
 400b4e4:	1885c83a 	sub	r2,r3,r2
 400b4e8:	a0800215 	stw	r2,8(r20)
 400b4ec:	103fef1e 	bne	r2,zero,400b4ac <__alt_data_end+0xfc00b4ac>
 400b4f0:	0005883a 	mov	r2,zero
 400b4f4:	dfc00b17 	ldw	ra,44(sp)
 400b4f8:	df000a17 	ldw	fp,40(sp)
 400b4fc:	ddc00917 	ldw	r23,36(sp)
 400b500:	dd800817 	ldw	r22,32(sp)
 400b504:	dd400717 	ldw	r21,28(sp)
 400b508:	dd000617 	ldw	r20,24(sp)
 400b50c:	dcc00517 	ldw	r19,20(sp)
 400b510:	dc800417 	ldw	r18,16(sp)
 400b514:	dc400317 	ldw	r17,12(sp)
 400b518:	dc000217 	ldw	r16,8(sp)
 400b51c:	dec00c04 	addi	sp,sp,48
 400b520:	f800283a 	ret
 400b524:	800b883a 	mov	r5,r16
 400b528:	a809883a 	mov	r4,r21
 400b52c:	400a6540 	call	400a654 <__swsetup_r>
 400b530:	1000ee1e 	bne	r2,zero,400b8ec <__sfvwrite_r+0x4b0>
 400b534:	80c0030b 	ldhu	r3,12(r16)
 400b538:	a4400017 	ldw	r17,0(r20)
 400b53c:	1880008c 	andi	r2,r3,2
 400b540:	103fd61e 	bne	r2,zero,400b49c <__alt_data_end+0xfc00b49c>
 400b544:	1880004c 	andi	r2,r3,1
 400b548:	1000421e 	bne	r2,zero,400b654 <__sfvwrite_r+0x218>
 400b54c:	0039883a 	mov	fp,zero
 400b550:	0025883a 	mov	r18,zero
 400b554:	90001a26 	beq	r18,zero,400b5c0 <__sfvwrite_r+0x184>
 400b558:	1880800c 	andi	r2,r3,512
 400b55c:	84c00217 	ldw	r19,8(r16)
 400b560:	10002126 	beq	r2,zero,400b5e8 <__sfvwrite_r+0x1ac>
 400b564:	982f883a 	mov	r23,r19
 400b568:	94c09636 	bltu	r18,r19,400b7c4 <__sfvwrite_r+0x388>
 400b56c:	1881200c 	andi	r2,r3,1152
 400b570:	1000a11e 	bne	r2,zero,400b7f8 <__sfvwrite_r+0x3bc>
 400b574:	81000017 	ldw	r4,0(r16)
 400b578:	b80d883a 	mov	r6,r23
 400b57c:	e00b883a 	mov	r5,fp
 400b580:	400c6140 	call	400c614 <memmove>
 400b584:	80c00217 	ldw	r3,8(r16)
 400b588:	81000017 	ldw	r4,0(r16)
 400b58c:	9005883a 	mov	r2,r18
 400b590:	1ce7c83a 	sub	r19,r3,r19
 400b594:	25cf883a 	add	r7,r4,r23
 400b598:	84c00215 	stw	r19,8(r16)
 400b59c:	81c00015 	stw	r7,0(r16)
 400b5a0:	a0c00217 	ldw	r3,8(r20)
 400b5a4:	e0b9883a 	add	fp,fp,r2
 400b5a8:	90a5c83a 	sub	r18,r18,r2
 400b5ac:	18a7c83a 	sub	r19,r3,r2
 400b5b0:	a4c00215 	stw	r19,8(r20)
 400b5b4:	983fce26 	beq	r19,zero,400b4f0 <__alt_data_end+0xfc00b4f0>
 400b5b8:	80c0030b 	ldhu	r3,12(r16)
 400b5bc:	903fe61e 	bne	r18,zero,400b558 <__alt_data_end+0xfc00b558>
 400b5c0:	8f000017 	ldw	fp,0(r17)
 400b5c4:	8c800117 	ldw	r18,4(r17)
 400b5c8:	8c400204 	addi	r17,r17,8
 400b5cc:	003fe106 	br	400b554 <__alt_data_end+0xfc00b554>
 400b5d0:	8cc00017 	ldw	r19,0(r17)
 400b5d4:	8c800117 	ldw	r18,4(r17)
 400b5d8:	8c400204 	addi	r17,r17,8
 400b5dc:	003fb306 	br	400b4ac <__alt_data_end+0xfc00b4ac>
 400b5e0:	0005883a 	mov	r2,zero
 400b5e4:	f800283a 	ret
 400b5e8:	81000017 	ldw	r4,0(r16)
 400b5ec:	80800417 	ldw	r2,16(r16)
 400b5f0:	11005a36 	bltu	r2,r4,400b75c <__sfvwrite_r+0x320>
 400b5f4:	85c00517 	ldw	r23,20(r16)
 400b5f8:	95c05836 	bltu	r18,r23,400b75c <__sfvwrite_r+0x320>
 400b5fc:	00a00034 	movhi	r2,32768
 400b600:	10bfffc4 	addi	r2,r2,-1
 400b604:	9009883a 	mov	r4,r18
 400b608:	1480012e 	bgeu	r2,r18,400b610 <__sfvwrite_r+0x1d4>
 400b60c:	1009883a 	mov	r4,r2
 400b610:	b80b883a 	mov	r5,r23
 400b614:	40046fc0 	call	40046fc <__divsi3>
 400b618:	b80b883a 	mov	r5,r23
 400b61c:	1009883a 	mov	r4,r2
 400b620:	40048b00 	call	40048b0 <__mulsi3>
 400b624:	81400717 	ldw	r5,28(r16)
 400b628:	80c00917 	ldw	r3,36(r16)
 400b62c:	100f883a 	mov	r7,r2
 400b630:	e00d883a 	mov	r6,fp
 400b634:	a809883a 	mov	r4,r21
 400b638:	183ee83a 	callr	r3
 400b63c:	00bfd816 	blt	zero,r2,400b5a0 <__alt_data_end+0xfc00b5a0>
 400b640:	8080030b 	ldhu	r2,12(r16)
 400b644:	10801014 	ori	r2,r2,64
 400b648:	8080030d 	sth	r2,12(r16)
 400b64c:	00bfffc4 	movi	r2,-1
 400b650:	003fa806 	br	400b4f4 <__alt_data_end+0xfc00b4f4>
 400b654:	0027883a 	mov	r19,zero
 400b658:	0011883a 	mov	r8,zero
 400b65c:	0039883a 	mov	fp,zero
 400b660:	0025883a 	mov	r18,zero
 400b664:	90001f26 	beq	r18,zero,400b6e4 <__sfvwrite_r+0x2a8>
 400b668:	40005a26 	beq	r8,zero,400b7d4 <__sfvwrite_r+0x398>
 400b66c:	982d883a 	mov	r22,r19
 400b670:	94c0012e 	bgeu	r18,r19,400b678 <__sfvwrite_r+0x23c>
 400b674:	902d883a 	mov	r22,r18
 400b678:	81000017 	ldw	r4,0(r16)
 400b67c:	80800417 	ldw	r2,16(r16)
 400b680:	b02f883a 	mov	r23,r22
 400b684:	81c00517 	ldw	r7,20(r16)
 400b688:	1100032e 	bgeu	r2,r4,400b698 <__sfvwrite_r+0x25c>
 400b68c:	80c00217 	ldw	r3,8(r16)
 400b690:	38c7883a 	add	r3,r7,r3
 400b694:	1d801816 	blt	r3,r22,400b6f8 <__sfvwrite_r+0x2bc>
 400b698:	b1c03e16 	blt	r22,r7,400b794 <__sfvwrite_r+0x358>
 400b69c:	80800917 	ldw	r2,36(r16)
 400b6a0:	81400717 	ldw	r5,28(r16)
 400b6a4:	e00d883a 	mov	r6,fp
 400b6a8:	da000115 	stw	r8,4(sp)
 400b6ac:	a809883a 	mov	r4,r21
 400b6b0:	103ee83a 	callr	r2
 400b6b4:	102f883a 	mov	r23,r2
 400b6b8:	da000117 	ldw	r8,4(sp)
 400b6bc:	00bfe00e 	bge	zero,r2,400b640 <__alt_data_end+0xfc00b640>
 400b6c0:	9de7c83a 	sub	r19,r19,r23
 400b6c4:	98001f26 	beq	r19,zero,400b744 <__sfvwrite_r+0x308>
 400b6c8:	a0800217 	ldw	r2,8(r20)
 400b6cc:	e5f9883a 	add	fp,fp,r23
 400b6d0:	95e5c83a 	sub	r18,r18,r23
 400b6d4:	15efc83a 	sub	r23,r2,r23
 400b6d8:	a5c00215 	stw	r23,8(r20)
 400b6dc:	b83f8426 	beq	r23,zero,400b4f0 <__alt_data_end+0xfc00b4f0>
 400b6e0:	903fe11e 	bne	r18,zero,400b668 <__alt_data_end+0xfc00b668>
 400b6e4:	8f000017 	ldw	fp,0(r17)
 400b6e8:	8c800117 	ldw	r18,4(r17)
 400b6ec:	0011883a 	mov	r8,zero
 400b6f0:	8c400204 	addi	r17,r17,8
 400b6f4:	003fdb06 	br	400b664 <__alt_data_end+0xfc00b664>
 400b6f8:	180d883a 	mov	r6,r3
 400b6fc:	e00b883a 	mov	r5,fp
 400b700:	da000115 	stw	r8,4(sp)
 400b704:	d8c00015 	stw	r3,0(sp)
 400b708:	400c6140 	call	400c614 <memmove>
 400b70c:	d8c00017 	ldw	r3,0(sp)
 400b710:	80800017 	ldw	r2,0(r16)
 400b714:	800b883a 	mov	r5,r16
 400b718:	a809883a 	mov	r4,r21
 400b71c:	10c5883a 	add	r2,r2,r3
 400b720:	80800015 	stw	r2,0(r16)
 400b724:	d8c00015 	stw	r3,0(sp)
 400b728:	400a9c40 	call	400a9c4 <_fflush_r>
 400b72c:	d8c00017 	ldw	r3,0(sp)
 400b730:	da000117 	ldw	r8,4(sp)
 400b734:	103fc21e 	bne	r2,zero,400b640 <__alt_data_end+0xfc00b640>
 400b738:	182f883a 	mov	r23,r3
 400b73c:	9de7c83a 	sub	r19,r19,r23
 400b740:	983fe11e 	bne	r19,zero,400b6c8 <__alt_data_end+0xfc00b6c8>
 400b744:	800b883a 	mov	r5,r16
 400b748:	a809883a 	mov	r4,r21
 400b74c:	400a9c40 	call	400a9c4 <_fflush_r>
 400b750:	103fbb1e 	bne	r2,zero,400b640 <__alt_data_end+0xfc00b640>
 400b754:	0011883a 	mov	r8,zero
 400b758:	003fdb06 	br	400b6c8 <__alt_data_end+0xfc00b6c8>
 400b75c:	94c0012e 	bgeu	r18,r19,400b764 <__sfvwrite_r+0x328>
 400b760:	9027883a 	mov	r19,r18
 400b764:	980d883a 	mov	r6,r19
 400b768:	e00b883a 	mov	r5,fp
 400b76c:	400c6140 	call	400c614 <memmove>
 400b770:	80800217 	ldw	r2,8(r16)
 400b774:	80c00017 	ldw	r3,0(r16)
 400b778:	14c5c83a 	sub	r2,r2,r19
 400b77c:	1cc7883a 	add	r3,r3,r19
 400b780:	80800215 	stw	r2,8(r16)
 400b784:	80c00015 	stw	r3,0(r16)
 400b788:	10004326 	beq	r2,zero,400b898 <__sfvwrite_r+0x45c>
 400b78c:	9805883a 	mov	r2,r19
 400b790:	003f8306 	br	400b5a0 <__alt_data_end+0xfc00b5a0>
 400b794:	b00d883a 	mov	r6,r22
 400b798:	e00b883a 	mov	r5,fp
 400b79c:	da000115 	stw	r8,4(sp)
 400b7a0:	400c6140 	call	400c614 <memmove>
 400b7a4:	80800217 	ldw	r2,8(r16)
 400b7a8:	80c00017 	ldw	r3,0(r16)
 400b7ac:	da000117 	ldw	r8,4(sp)
 400b7b0:	1585c83a 	sub	r2,r2,r22
 400b7b4:	1dad883a 	add	r22,r3,r22
 400b7b8:	80800215 	stw	r2,8(r16)
 400b7bc:	85800015 	stw	r22,0(r16)
 400b7c0:	003fbf06 	br	400b6c0 <__alt_data_end+0xfc00b6c0>
 400b7c4:	81000017 	ldw	r4,0(r16)
 400b7c8:	9027883a 	mov	r19,r18
 400b7cc:	902f883a 	mov	r23,r18
 400b7d0:	003f6906 	br	400b578 <__alt_data_end+0xfc00b578>
 400b7d4:	900d883a 	mov	r6,r18
 400b7d8:	01400284 	movi	r5,10
 400b7dc:	e009883a 	mov	r4,fp
 400b7e0:	400c5300 	call	400c530 <memchr>
 400b7e4:	10003e26 	beq	r2,zero,400b8e0 <__sfvwrite_r+0x4a4>
 400b7e8:	10800044 	addi	r2,r2,1
 400b7ec:	1727c83a 	sub	r19,r2,fp
 400b7f0:	02000044 	movi	r8,1
 400b7f4:	003f9d06 	br	400b66c <__alt_data_end+0xfc00b66c>
 400b7f8:	80800517 	ldw	r2,20(r16)
 400b7fc:	81400417 	ldw	r5,16(r16)
 400b800:	81c00017 	ldw	r7,0(r16)
 400b804:	10a7883a 	add	r19,r2,r2
 400b808:	9885883a 	add	r2,r19,r2
 400b80c:	1026d7fa 	srli	r19,r2,31
 400b810:	396dc83a 	sub	r22,r7,r5
 400b814:	b1000044 	addi	r4,r22,1
 400b818:	9885883a 	add	r2,r19,r2
 400b81c:	1027d07a 	srai	r19,r2,1
 400b820:	2485883a 	add	r2,r4,r18
 400b824:	980d883a 	mov	r6,r19
 400b828:	9880022e 	bgeu	r19,r2,400b834 <__sfvwrite_r+0x3f8>
 400b82c:	1027883a 	mov	r19,r2
 400b830:	100d883a 	mov	r6,r2
 400b834:	18c1000c 	andi	r3,r3,1024
 400b838:	18001c26 	beq	r3,zero,400b8ac <__sfvwrite_r+0x470>
 400b83c:	300b883a 	mov	r5,r6
 400b840:	a809883a 	mov	r4,r21
 400b844:	400bd240 	call	400bd24 <_malloc_r>
 400b848:	102f883a 	mov	r23,r2
 400b84c:	10002926 	beq	r2,zero,400b8f4 <__sfvwrite_r+0x4b8>
 400b850:	81400417 	ldw	r5,16(r16)
 400b854:	b00d883a 	mov	r6,r22
 400b858:	1009883a 	mov	r4,r2
 400b85c:	40089b80 	call	40089b8 <memcpy>
 400b860:	8080030b 	ldhu	r2,12(r16)
 400b864:	00fedfc4 	movi	r3,-1153
 400b868:	10c4703a 	and	r2,r2,r3
 400b86c:	10802014 	ori	r2,r2,128
 400b870:	8080030d 	sth	r2,12(r16)
 400b874:	bd89883a 	add	r4,r23,r22
 400b878:	9d8fc83a 	sub	r7,r19,r22
 400b87c:	85c00415 	stw	r23,16(r16)
 400b880:	84c00515 	stw	r19,20(r16)
 400b884:	81000015 	stw	r4,0(r16)
 400b888:	9027883a 	mov	r19,r18
 400b88c:	81c00215 	stw	r7,8(r16)
 400b890:	902f883a 	mov	r23,r18
 400b894:	003f3806 	br	400b578 <__alt_data_end+0xfc00b578>
 400b898:	800b883a 	mov	r5,r16
 400b89c:	a809883a 	mov	r4,r21
 400b8a0:	400a9c40 	call	400a9c4 <_fflush_r>
 400b8a4:	103fb926 	beq	r2,zero,400b78c <__alt_data_end+0xfc00b78c>
 400b8a8:	003f6506 	br	400b640 <__alt_data_end+0xfc00b640>
 400b8ac:	a809883a 	mov	r4,r21
 400b8b0:	400c7700 	call	400c770 <_realloc_r>
 400b8b4:	102f883a 	mov	r23,r2
 400b8b8:	103fee1e 	bne	r2,zero,400b874 <__alt_data_end+0xfc00b874>
 400b8bc:	81400417 	ldw	r5,16(r16)
 400b8c0:	a809883a 	mov	r4,r21
 400b8c4:	400b12c0 	call	400b12c <_free_r>
 400b8c8:	8080030b 	ldhu	r2,12(r16)
 400b8cc:	00ffdfc4 	movi	r3,-129
 400b8d0:	1884703a 	and	r2,r3,r2
 400b8d4:	00c00304 	movi	r3,12
 400b8d8:	a8c00015 	stw	r3,0(r21)
 400b8dc:	003f5906 	br	400b644 <__alt_data_end+0xfc00b644>
 400b8e0:	94c00044 	addi	r19,r18,1
 400b8e4:	02000044 	movi	r8,1
 400b8e8:	003f6006 	br	400b66c <__alt_data_end+0xfc00b66c>
 400b8ec:	00bfffc4 	movi	r2,-1
 400b8f0:	003f0006 	br	400b4f4 <__alt_data_end+0xfc00b4f4>
 400b8f4:	00800304 	movi	r2,12
 400b8f8:	a8800015 	stw	r2,0(r21)
 400b8fc:	8080030b 	ldhu	r2,12(r16)
 400b900:	003f5006 	br	400b644 <__alt_data_end+0xfc00b644>

0400b904 <_fwalk>:
 400b904:	defff704 	addi	sp,sp,-36
 400b908:	dd000415 	stw	r20,16(sp)
 400b90c:	dfc00815 	stw	ra,32(sp)
 400b910:	ddc00715 	stw	r23,28(sp)
 400b914:	dd800615 	stw	r22,24(sp)
 400b918:	dd400515 	stw	r21,20(sp)
 400b91c:	dcc00315 	stw	r19,12(sp)
 400b920:	dc800215 	stw	r18,8(sp)
 400b924:	dc400115 	stw	r17,4(sp)
 400b928:	dc000015 	stw	r16,0(sp)
 400b92c:	2500b804 	addi	r20,r4,736
 400b930:	a0002326 	beq	r20,zero,400b9c0 <_fwalk+0xbc>
 400b934:	282b883a 	mov	r21,r5
 400b938:	002f883a 	mov	r23,zero
 400b93c:	05800044 	movi	r22,1
 400b940:	04ffffc4 	movi	r19,-1
 400b944:	a4400117 	ldw	r17,4(r20)
 400b948:	a4800217 	ldw	r18,8(r20)
 400b94c:	8c7fffc4 	addi	r17,r17,-1
 400b950:	88000d16 	blt	r17,zero,400b988 <_fwalk+0x84>
 400b954:	94000304 	addi	r16,r18,12
 400b958:	94800384 	addi	r18,r18,14
 400b95c:	8080000b 	ldhu	r2,0(r16)
 400b960:	8c7fffc4 	addi	r17,r17,-1
 400b964:	813ffd04 	addi	r4,r16,-12
 400b968:	b080042e 	bgeu	r22,r2,400b97c <_fwalk+0x78>
 400b96c:	9080000f 	ldh	r2,0(r18)
 400b970:	14c00226 	beq	r2,r19,400b97c <_fwalk+0x78>
 400b974:	a83ee83a 	callr	r21
 400b978:	b8aeb03a 	or	r23,r23,r2
 400b97c:	84001a04 	addi	r16,r16,104
 400b980:	94801a04 	addi	r18,r18,104
 400b984:	8cfff51e 	bne	r17,r19,400b95c <__alt_data_end+0xfc00b95c>
 400b988:	a5000017 	ldw	r20,0(r20)
 400b98c:	a03fed1e 	bne	r20,zero,400b944 <__alt_data_end+0xfc00b944>
 400b990:	b805883a 	mov	r2,r23
 400b994:	dfc00817 	ldw	ra,32(sp)
 400b998:	ddc00717 	ldw	r23,28(sp)
 400b99c:	dd800617 	ldw	r22,24(sp)
 400b9a0:	dd400517 	ldw	r21,20(sp)
 400b9a4:	dd000417 	ldw	r20,16(sp)
 400b9a8:	dcc00317 	ldw	r19,12(sp)
 400b9ac:	dc800217 	ldw	r18,8(sp)
 400b9b0:	dc400117 	ldw	r17,4(sp)
 400b9b4:	dc000017 	ldw	r16,0(sp)
 400b9b8:	dec00904 	addi	sp,sp,36
 400b9bc:	f800283a 	ret
 400b9c0:	002f883a 	mov	r23,zero
 400b9c4:	003ff206 	br	400b990 <__alt_data_end+0xfc00b990>

0400b9c8 <_fwalk_reent>:
 400b9c8:	defff704 	addi	sp,sp,-36
 400b9cc:	dd000415 	stw	r20,16(sp)
 400b9d0:	dfc00815 	stw	ra,32(sp)
 400b9d4:	ddc00715 	stw	r23,28(sp)
 400b9d8:	dd800615 	stw	r22,24(sp)
 400b9dc:	dd400515 	stw	r21,20(sp)
 400b9e0:	dcc00315 	stw	r19,12(sp)
 400b9e4:	dc800215 	stw	r18,8(sp)
 400b9e8:	dc400115 	stw	r17,4(sp)
 400b9ec:	dc000015 	stw	r16,0(sp)
 400b9f0:	2500b804 	addi	r20,r4,736
 400b9f4:	a0002326 	beq	r20,zero,400ba84 <_fwalk_reent+0xbc>
 400b9f8:	282b883a 	mov	r21,r5
 400b9fc:	2027883a 	mov	r19,r4
 400ba00:	002f883a 	mov	r23,zero
 400ba04:	05800044 	movi	r22,1
 400ba08:	04bfffc4 	movi	r18,-1
 400ba0c:	a4400117 	ldw	r17,4(r20)
 400ba10:	a4000217 	ldw	r16,8(r20)
 400ba14:	8c7fffc4 	addi	r17,r17,-1
 400ba18:	88000c16 	blt	r17,zero,400ba4c <_fwalk_reent+0x84>
 400ba1c:	84000304 	addi	r16,r16,12
 400ba20:	8080000b 	ldhu	r2,0(r16)
 400ba24:	8c7fffc4 	addi	r17,r17,-1
 400ba28:	817ffd04 	addi	r5,r16,-12
 400ba2c:	b080052e 	bgeu	r22,r2,400ba44 <_fwalk_reent+0x7c>
 400ba30:	8080008f 	ldh	r2,2(r16)
 400ba34:	9809883a 	mov	r4,r19
 400ba38:	14800226 	beq	r2,r18,400ba44 <_fwalk_reent+0x7c>
 400ba3c:	a83ee83a 	callr	r21
 400ba40:	b8aeb03a 	or	r23,r23,r2
 400ba44:	84001a04 	addi	r16,r16,104
 400ba48:	8cbff51e 	bne	r17,r18,400ba20 <__alt_data_end+0xfc00ba20>
 400ba4c:	a5000017 	ldw	r20,0(r20)
 400ba50:	a03fee1e 	bne	r20,zero,400ba0c <__alt_data_end+0xfc00ba0c>
 400ba54:	b805883a 	mov	r2,r23
 400ba58:	dfc00817 	ldw	ra,32(sp)
 400ba5c:	ddc00717 	ldw	r23,28(sp)
 400ba60:	dd800617 	ldw	r22,24(sp)
 400ba64:	dd400517 	ldw	r21,20(sp)
 400ba68:	dd000417 	ldw	r20,16(sp)
 400ba6c:	dcc00317 	ldw	r19,12(sp)
 400ba70:	dc800217 	ldw	r18,8(sp)
 400ba74:	dc400117 	ldw	r17,4(sp)
 400ba78:	dc000017 	ldw	r16,0(sp)
 400ba7c:	dec00904 	addi	sp,sp,36
 400ba80:	f800283a 	ret
 400ba84:	002f883a 	mov	r23,zero
 400ba88:	003ff206 	br	400ba54 <__alt_data_end+0xfc00ba54>

0400ba8c <_setlocale_r>:
 400ba8c:	30001b26 	beq	r6,zero,400bafc <_setlocale_r+0x70>
 400ba90:	01410074 	movhi	r5,1025
 400ba94:	defffe04 	addi	sp,sp,-8
 400ba98:	29450f04 	addi	r5,r5,5180
 400ba9c:	3009883a 	mov	r4,r6
 400baa0:	dc000015 	stw	r16,0(sp)
 400baa4:	dfc00115 	stw	ra,4(sp)
 400baa8:	3021883a 	mov	r16,r6
 400baac:	400ce640 	call	400ce64 <strcmp>
 400bab0:	1000061e 	bne	r2,zero,400bacc <_setlocale_r+0x40>
 400bab4:	00810074 	movhi	r2,1025
 400bab8:	1084fa04 	addi	r2,r2,5096
 400babc:	dfc00117 	ldw	ra,4(sp)
 400bac0:	dc000017 	ldw	r16,0(sp)
 400bac4:	dec00204 	addi	sp,sp,8
 400bac8:	f800283a 	ret
 400bacc:	01410074 	movhi	r5,1025
 400bad0:	2944fa04 	addi	r5,r5,5096
 400bad4:	8009883a 	mov	r4,r16
 400bad8:	400ce640 	call	400ce64 <strcmp>
 400badc:	103ff526 	beq	r2,zero,400bab4 <__alt_data_end+0xfc00bab4>
 400bae0:	01410074 	movhi	r5,1025
 400bae4:	2944ed04 	addi	r5,r5,5044
 400bae8:	8009883a 	mov	r4,r16
 400baec:	400ce640 	call	400ce64 <strcmp>
 400baf0:	103ff026 	beq	r2,zero,400bab4 <__alt_data_end+0xfc00bab4>
 400baf4:	0005883a 	mov	r2,zero
 400baf8:	003ff006 	br	400babc <__alt_data_end+0xfc00babc>
 400bafc:	00810074 	movhi	r2,1025
 400bb00:	1084fa04 	addi	r2,r2,5096
 400bb04:	f800283a 	ret

0400bb08 <__locale_charset>:
 400bb08:	00810074 	movhi	r2,1025
 400bb0c:	10866204 	addi	r2,r2,6536
 400bb10:	f800283a 	ret

0400bb14 <__locale_mb_cur_max>:
 400bb14:	00810074 	movhi	r2,1025
 400bb18:	108c2104 	addi	r2,r2,12420
 400bb1c:	10800017 	ldw	r2,0(r2)
 400bb20:	f800283a 	ret

0400bb24 <__locale_msgcharset>:
 400bb24:	00810074 	movhi	r2,1025
 400bb28:	10865a04 	addi	r2,r2,6504
 400bb2c:	f800283a 	ret

0400bb30 <__locale_cjk_lang>:
 400bb30:	0005883a 	mov	r2,zero
 400bb34:	f800283a 	ret

0400bb38 <_localeconv_r>:
 400bb38:	00810074 	movhi	r2,1025
 400bb3c:	10866a04 	addi	r2,r2,6568
 400bb40:	f800283a 	ret

0400bb44 <setlocale>:
 400bb44:	00810074 	movhi	r2,1025
 400bb48:	108c2004 	addi	r2,r2,12416
 400bb4c:	280d883a 	mov	r6,r5
 400bb50:	200b883a 	mov	r5,r4
 400bb54:	11000017 	ldw	r4,0(r2)
 400bb58:	400ba8c1 	jmpi	400ba8c <_setlocale_r>

0400bb5c <localeconv>:
 400bb5c:	00810074 	movhi	r2,1025
 400bb60:	10866a04 	addi	r2,r2,6568
 400bb64:	f800283a 	ret

0400bb68 <__smakebuf_r>:
 400bb68:	2880030b 	ldhu	r2,12(r5)
 400bb6c:	10c0008c 	andi	r3,r2,2
 400bb70:	1800411e 	bne	r3,zero,400bc78 <__smakebuf_r+0x110>
 400bb74:	deffec04 	addi	sp,sp,-80
 400bb78:	dc000f15 	stw	r16,60(sp)
 400bb7c:	2821883a 	mov	r16,r5
 400bb80:	2940038f 	ldh	r5,14(r5)
 400bb84:	dc401015 	stw	r17,64(sp)
 400bb88:	dfc01315 	stw	ra,76(sp)
 400bb8c:	dcc01215 	stw	r19,72(sp)
 400bb90:	dc801115 	stw	r18,68(sp)
 400bb94:	2023883a 	mov	r17,r4
 400bb98:	28001c16 	blt	r5,zero,400bc0c <__smakebuf_r+0xa4>
 400bb9c:	d80d883a 	mov	r6,sp
 400bba0:	400d4d00 	call	400d4d0 <_fstat_r>
 400bba4:	10001816 	blt	r2,zero,400bc08 <__smakebuf_r+0xa0>
 400bba8:	d8800117 	ldw	r2,4(sp)
 400bbac:	00e00014 	movui	r3,32768
 400bbb0:	10bc000c 	andi	r2,r2,61440
 400bbb4:	14c80020 	cmpeqi	r19,r2,8192
 400bbb8:	10c03726 	beq	r2,r3,400bc98 <__smakebuf_r+0x130>
 400bbbc:	80c0030b 	ldhu	r3,12(r16)
 400bbc0:	18c20014 	ori	r3,r3,2048
 400bbc4:	80c0030d 	sth	r3,12(r16)
 400bbc8:	00c80004 	movi	r3,8192
 400bbcc:	10c0521e 	bne	r2,r3,400bd18 <__smakebuf_r+0x1b0>
 400bbd0:	8140038f 	ldh	r5,14(r16)
 400bbd4:	8809883a 	mov	r4,r17
 400bbd8:	400d52c0 	call	400d52c <_isatty_r>
 400bbdc:	10004c26 	beq	r2,zero,400bd10 <__smakebuf_r+0x1a8>
 400bbe0:	8080030b 	ldhu	r2,12(r16)
 400bbe4:	80c010c4 	addi	r3,r16,67
 400bbe8:	80c00015 	stw	r3,0(r16)
 400bbec:	10800054 	ori	r2,r2,1
 400bbf0:	8080030d 	sth	r2,12(r16)
 400bbf4:	00800044 	movi	r2,1
 400bbf8:	80c00415 	stw	r3,16(r16)
 400bbfc:	80800515 	stw	r2,20(r16)
 400bc00:	04810004 	movi	r18,1024
 400bc04:	00000706 	br	400bc24 <__smakebuf_r+0xbc>
 400bc08:	8080030b 	ldhu	r2,12(r16)
 400bc0c:	10c0200c 	andi	r3,r2,128
 400bc10:	18001f1e 	bne	r3,zero,400bc90 <__smakebuf_r+0x128>
 400bc14:	04810004 	movi	r18,1024
 400bc18:	10820014 	ori	r2,r2,2048
 400bc1c:	8080030d 	sth	r2,12(r16)
 400bc20:	0027883a 	mov	r19,zero
 400bc24:	900b883a 	mov	r5,r18
 400bc28:	8809883a 	mov	r4,r17
 400bc2c:	400bd240 	call	400bd24 <_malloc_r>
 400bc30:	10002c26 	beq	r2,zero,400bce4 <__smakebuf_r+0x17c>
 400bc34:	80c0030b 	ldhu	r3,12(r16)
 400bc38:	01010074 	movhi	r4,1025
 400bc3c:	212a9604 	addi	r4,r4,-21928
 400bc40:	89000f15 	stw	r4,60(r17)
 400bc44:	18c02014 	ori	r3,r3,128
 400bc48:	80c0030d 	sth	r3,12(r16)
 400bc4c:	80800015 	stw	r2,0(r16)
 400bc50:	80800415 	stw	r2,16(r16)
 400bc54:	84800515 	stw	r18,20(r16)
 400bc58:	98001a1e 	bne	r19,zero,400bcc4 <__smakebuf_r+0x15c>
 400bc5c:	dfc01317 	ldw	ra,76(sp)
 400bc60:	dcc01217 	ldw	r19,72(sp)
 400bc64:	dc801117 	ldw	r18,68(sp)
 400bc68:	dc401017 	ldw	r17,64(sp)
 400bc6c:	dc000f17 	ldw	r16,60(sp)
 400bc70:	dec01404 	addi	sp,sp,80
 400bc74:	f800283a 	ret
 400bc78:	288010c4 	addi	r2,r5,67
 400bc7c:	28800015 	stw	r2,0(r5)
 400bc80:	28800415 	stw	r2,16(r5)
 400bc84:	00800044 	movi	r2,1
 400bc88:	28800515 	stw	r2,20(r5)
 400bc8c:	f800283a 	ret
 400bc90:	04801004 	movi	r18,64
 400bc94:	003fe006 	br	400bc18 <__alt_data_end+0xfc00bc18>
 400bc98:	81000a17 	ldw	r4,40(r16)
 400bc9c:	00c10074 	movhi	r3,1025
 400bca0:	18f38004 	addi	r3,r3,-12800
 400bca4:	20ffc51e 	bne	r4,r3,400bbbc <__alt_data_end+0xfc00bbbc>
 400bca8:	8080030b 	ldhu	r2,12(r16)
 400bcac:	04810004 	movi	r18,1024
 400bcb0:	84801315 	stw	r18,76(r16)
 400bcb4:	1484b03a 	or	r2,r2,r18
 400bcb8:	8080030d 	sth	r2,12(r16)
 400bcbc:	0027883a 	mov	r19,zero
 400bcc0:	003fd806 	br	400bc24 <__alt_data_end+0xfc00bc24>
 400bcc4:	8140038f 	ldh	r5,14(r16)
 400bcc8:	8809883a 	mov	r4,r17
 400bccc:	400d52c0 	call	400d52c <_isatty_r>
 400bcd0:	103fe226 	beq	r2,zero,400bc5c <__alt_data_end+0xfc00bc5c>
 400bcd4:	8080030b 	ldhu	r2,12(r16)
 400bcd8:	10800054 	ori	r2,r2,1
 400bcdc:	8080030d 	sth	r2,12(r16)
 400bce0:	003fde06 	br	400bc5c <__alt_data_end+0xfc00bc5c>
 400bce4:	8080030b 	ldhu	r2,12(r16)
 400bce8:	10c0800c 	andi	r3,r2,512
 400bcec:	183fdb1e 	bne	r3,zero,400bc5c <__alt_data_end+0xfc00bc5c>
 400bcf0:	10800094 	ori	r2,r2,2
 400bcf4:	80c010c4 	addi	r3,r16,67
 400bcf8:	8080030d 	sth	r2,12(r16)
 400bcfc:	00800044 	movi	r2,1
 400bd00:	80c00015 	stw	r3,0(r16)
 400bd04:	80c00415 	stw	r3,16(r16)
 400bd08:	80800515 	stw	r2,20(r16)
 400bd0c:	003fd306 	br	400bc5c <__alt_data_end+0xfc00bc5c>
 400bd10:	04810004 	movi	r18,1024
 400bd14:	003fc306 	br	400bc24 <__alt_data_end+0xfc00bc24>
 400bd18:	0027883a 	mov	r19,zero
 400bd1c:	04810004 	movi	r18,1024
 400bd20:	003fc006 	br	400bc24 <__alt_data_end+0xfc00bc24>

0400bd24 <_malloc_r>:
 400bd24:	defff504 	addi	sp,sp,-44
 400bd28:	dc800315 	stw	r18,12(sp)
 400bd2c:	dfc00a15 	stw	ra,40(sp)
 400bd30:	df000915 	stw	fp,36(sp)
 400bd34:	ddc00815 	stw	r23,32(sp)
 400bd38:	dd800715 	stw	r22,28(sp)
 400bd3c:	dd400615 	stw	r21,24(sp)
 400bd40:	dd000515 	stw	r20,20(sp)
 400bd44:	dcc00415 	stw	r19,16(sp)
 400bd48:	dc400215 	stw	r17,8(sp)
 400bd4c:	dc000115 	stw	r16,4(sp)
 400bd50:	288002c4 	addi	r2,r5,11
 400bd54:	00c00584 	movi	r3,22
 400bd58:	2025883a 	mov	r18,r4
 400bd5c:	18807f2e 	bgeu	r3,r2,400bf5c <_malloc_r+0x238>
 400bd60:	047ffe04 	movi	r17,-8
 400bd64:	1462703a 	and	r17,r2,r17
 400bd68:	8800a316 	blt	r17,zero,400bff8 <_malloc_r+0x2d4>
 400bd6c:	8940a236 	bltu	r17,r5,400bff8 <_malloc_r+0x2d4>
 400bd70:	400e95c0 	call	400e95c <__malloc_lock>
 400bd74:	00807dc4 	movi	r2,503
 400bd78:	1441e92e 	bgeu	r2,r17,400c520 <_malloc_r+0x7fc>
 400bd7c:	8804d27a 	srli	r2,r17,9
 400bd80:	1000a126 	beq	r2,zero,400c008 <_malloc_r+0x2e4>
 400bd84:	00c00104 	movi	r3,4
 400bd88:	18811e36 	bltu	r3,r2,400c204 <_malloc_r+0x4e0>
 400bd8c:	8804d1ba 	srli	r2,r17,6
 400bd90:	12000e44 	addi	r8,r2,57
 400bd94:	11c00e04 	addi	r7,r2,56
 400bd98:	4209883a 	add	r4,r8,r8
 400bd9c:	04c10074 	movhi	r19,1025
 400bda0:	2109883a 	add	r4,r4,r4
 400bda4:	9cc67804 	addi	r19,r19,6624
 400bda8:	2109883a 	add	r4,r4,r4
 400bdac:	9909883a 	add	r4,r19,r4
 400bdb0:	24000117 	ldw	r16,4(r4)
 400bdb4:	213ffe04 	addi	r4,r4,-8
 400bdb8:	24009726 	beq	r4,r16,400c018 <_malloc_r+0x2f4>
 400bdbc:	80800117 	ldw	r2,4(r16)
 400bdc0:	01bfff04 	movi	r6,-4
 400bdc4:	014003c4 	movi	r5,15
 400bdc8:	1184703a 	and	r2,r2,r6
 400bdcc:	1447c83a 	sub	r3,r2,r17
 400bdd0:	28c00716 	blt	r5,r3,400bdf0 <_malloc_r+0xcc>
 400bdd4:	1800920e 	bge	r3,zero,400c020 <_malloc_r+0x2fc>
 400bdd8:	84000317 	ldw	r16,12(r16)
 400bddc:	24008e26 	beq	r4,r16,400c018 <_malloc_r+0x2f4>
 400bde0:	80800117 	ldw	r2,4(r16)
 400bde4:	1184703a 	and	r2,r2,r6
 400bde8:	1447c83a 	sub	r3,r2,r17
 400bdec:	28fff90e 	bge	r5,r3,400bdd4 <__alt_data_end+0xfc00bdd4>
 400bdf0:	3809883a 	mov	r4,r7
 400bdf4:	01810074 	movhi	r6,1025
 400bdf8:	9c000417 	ldw	r16,16(r19)
 400bdfc:	31867804 	addi	r6,r6,6624
 400be00:	32000204 	addi	r8,r6,8
 400be04:	82013426 	beq	r16,r8,400c2d8 <_malloc_r+0x5b4>
 400be08:	80c00117 	ldw	r3,4(r16)
 400be0c:	00bfff04 	movi	r2,-4
 400be10:	188e703a 	and	r7,r3,r2
 400be14:	3c45c83a 	sub	r2,r7,r17
 400be18:	00c003c4 	movi	r3,15
 400be1c:	18811f16 	blt	r3,r2,400c29c <_malloc_r+0x578>
 400be20:	32000515 	stw	r8,20(r6)
 400be24:	32000415 	stw	r8,16(r6)
 400be28:	10007f0e 	bge	r2,zero,400c028 <_malloc_r+0x304>
 400be2c:	00807fc4 	movi	r2,511
 400be30:	11c0fd36 	bltu	r2,r7,400c228 <_malloc_r+0x504>
 400be34:	3806d0fa 	srli	r3,r7,3
 400be38:	01c00044 	movi	r7,1
 400be3c:	30800117 	ldw	r2,4(r6)
 400be40:	19400044 	addi	r5,r3,1
 400be44:	294b883a 	add	r5,r5,r5
 400be48:	1807d0ba 	srai	r3,r3,2
 400be4c:	294b883a 	add	r5,r5,r5
 400be50:	294b883a 	add	r5,r5,r5
 400be54:	298b883a 	add	r5,r5,r6
 400be58:	38c6983a 	sll	r3,r7,r3
 400be5c:	29c00017 	ldw	r7,0(r5)
 400be60:	2a7ffe04 	addi	r9,r5,-8
 400be64:	1886b03a 	or	r3,r3,r2
 400be68:	82400315 	stw	r9,12(r16)
 400be6c:	81c00215 	stw	r7,8(r16)
 400be70:	30c00115 	stw	r3,4(r6)
 400be74:	2c000015 	stw	r16,0(r5)
 400be78:	3c000315 	stw	r16,12(r7)
 400be7c:	2005d0ba 	srai	r2,r4,2
 400be80:	01400044 	movi	r5,1
 400be84:	288a983a 	sll	r5,r5,r2
 400be88:	19406f36 	bltu	r3,r5,400c048 <_malloc_r+0x324>
 400be8c:	28c4703a 	and	r2,r5,r3
 400be90:	10000a1e 	bne	r2,zero,400bebc <_malloc_r+0x198>
 400be94:	00bfff04 	movi	r2,-4
 400be98:	294b883a 	add	r5,r5,r5
 400be9c:	2088703a 	and	r4,r4,r2
 400bea0:	28c4703a 	and	r2,r5,r3
 400bea4:	21000104 	addi	r4,r4,4
 400bea8:	1000041e 	bne	r2,zero,400bebc <_malloc_r+0x198>
 400beac:	294b883a 	add	r5,r5,r5
 400beb0:	28c4703a 	and	r2,r5,r3
 400beb4:	21000104 	addi	r4,r4,4
 400beb8:	103ffc26 	beq	r2,zero,400beac <__alt_data_end+0xfc00beac>
 400bebc:	02bfff04 	movi	r10,-4
 400bec0:	024003c4 	movi	r9,15
 400bec4:	21800044 	addi	r6,r4,1
 400bec8:	318d883a 	add	r6,r6,r6
 400becc:	318d883a 	add	r6,r6,r6
 400bed0:	318d883a 	add	r6,r6,r6
 400bed4:	998d883a 	add	r6,r19,r6
 400bed8:	333ffe04 	addi	r12,r6,-8
 400bedc:	2017883a 	mov	r11,r4
 400bee0:	31800104 	addi	r6,r6,4
 400bee4:	34000017 	ldw	r16,0(r6)
 400bee8:	31fffd04 	addi	r7,r6,-12
 400beec:	81c0041e 	bne	r16,r7,400bf00 <_malloc_r+0x1dc>
 400bef0:	0000fb06 	br	400c2e0 <_malloc_r+0x5bc>
 400bef4:	1801030e 	bge	r3,zero,400c304 <_malloc_r+0x5e0>
 400bef8:	84000317 	ldw	r16,12(r16)
 400befc:	81c0f826 	beq	r16,r7,400c2e0 <_malloc_r+0x5bc>
 400bf00:	80800117 	ldw	r2,4(r16)
 400bf04:	1284703a 	and	r2,r2,r10
 400bf08:	1447c83a 	sub	r3,r2,r17
 400bf0c:	48fff90e 	bge	r9,r3,400bef4 <__alt_data_end+0xfc00bef4>
 400bf10:	80800317 	ldw	r2,12(r16)
 400bf14:	81000217 	ldw	r4,8(r16)
 400bf18:	89400054 	ori	r5,r17,1
 400bf1c:	81400115 	stw	r5,4(r16)
 400bf20:	20800315 	stw	r2,12(r4)
 400bf24:	11000215 	stw	r4,8(r2)
 400bf28:	8463883a 	add	r17,r16,r17
 400bf2c:	9c400515 	stw	r17,20(r19)
 400bf30:	9c400415 	stw	r17,16(r19)
 400bf34:	18800054 	ori	r2,r3,1
 400bf38:	88800115 	stw	r2,4(r17)
 400bf3c:	8a000315 	stw	r8,12(r17)
 400bf40:	8a000215 	stw	r8,8(r17)
 400bf44:	88e3883a 	add	r17,r17,r3
 400bf48:	88c00015 	stw	r3,0(r17)
 400bf4c:	9009883a 	mov	r4,r18
 400bf50:	400e9800 	call	400e980 <__malloc_unlock>
 400bf54:	80800204 	addi	r2,r16,8
 400bf58:	00001b06 	br	400bfc8 <_malloc_r+0x2a4>
 400bf5c:	04400404 	movi	r17,16
 400bf60:	89402536 	bltu	r17,r5,400bff8 <_malloc_r+0x2d4>
 400bf64:	400e95c0 	call	400e95c <__malloc_lock>
 400bf68:	00800184 	movi	r2,6
 400bf6c:	01000084 	movi	r4,2
 400bf70:	04c10074 	movhi	r19,1025
 400bf74:	1085883a 	add	r2,r2,r2
 400bf78:	9cc67804 	addi	r19,r19,6624
 400bf7c:	1085883a 	add	r2,r2,r2
 400bf80:	9885883a 	add	r2,r19,r2
 400bf84:	14000117 	ldw	r16,4(r2)
 400bf88:	10fffe04 	addi	r3,r2,-8
 400bf8c:	80c0d926 	beq	r16,r3,400c2f4 <_malloc_r+0x5d0>
 400bf90:	80c00117 	ldw	r3,4(r16)
 400bf94:	81000317 	ldw	r4,12(r16)
 400bf98:	00bfff04 	movi	r2,-4
 400bf9c:	1884703a 	and	r2,r3,r2
 400bfa0:	81400217 	ldw	r5,8(r16)
 400bfa4:	8085883a 	add	r2,r16,r2
 400bfa8:	10c00117 	ldw	r3,4(r2)
 400bfac:	29000315 	stw	r4,12(r5)
 400bfb0:	21400215 	stw	r5,8(r4)
 400bfb4:	18c00054 	ori	r3,r3,1
 400bfb8:	10c00115 	stw	r3,4(r2)
 400bfbc:	9009883a 	mov	r4,r18
 400bfc0:	400e9800 	call	400e980 <__malloc_unlock>
 400bfc4:	80800204 	addi	r2,r16,8
 400bfc8:	dfc00a17 	ldw	ra,40(sp)
 400bfcc:	df000917 	ldw	fp,36(sp)
 400bfd0:	ddc00817 	ldw	r23,32(sp)
 400bfd4:	dd800717 	ldw	r22,28(sp)
 400bfd8:	dd400617 	ldw	r21,24(sp)
 400bfdc:	dd000517 	ldw	r20,20(sp)
 400bfe0:	dcc00417 	ldw	r19,16(sp)
 400bfe4:	dc800317 	ldw	r18,12(sp)
 400bfe8:	dc400217 	ldw	r17,8(sp)
 400bfec:	dc000117 	ldw	r16,4(sp)
 400bff0:	dec00b04 	addi	sp,sp,44
 400bff4:	f800283a 	ret
 400bff8:	00800304 	movi	r2,12
 400bffc:	90800015 	stw	r2,0(r18)
 400c000:	0005883a 	mov	r2,zero
 400c004:	003ff006 	br	400bfc8 <__alt_data_end+0xfc00bfc8>
 400c008:	01002004 	movi	r4,128
 400c00c:	02001004 	movi	r8,64
 400c010:	01c00fc4 	movi	r7,63
 400c014:	003f6106 	br	400bd9c <__alt_data_end+0xfc00bd9c>
 400c018:	4009883a 	mov	r4,r8
 400c01c:	003f7506 	br	400bdf4 <__alt_data_end+0xfc00bdf4>
 400c020:	81000317 	ldw	r4,12(r16)
 400c024:	003fde06 	br	400bfa0 <__alt_data_end+0xfc00bfa0>
 400c028:	81c5883a 	add	r2,r16,r7
 400c02c:	11400117 	ldw	r5,4(r2)
 400c030:	9009883a 	mov	r4,r18
 400c034:	29400054 	ori	r5,r5,1
 400c038:	11400115 	stw	r5,4(r2)
 400c03c:	400e9800 	call	400e980 <__malloc_unlock>
 400c040:	80800204 	addi	r2,r16,8
 400c044:	003fe006 	br	400bfc8 <__alt_data_end+0xfc00bfc8>
 400c048:	9c000217 	ldw	r16,8(r19)
 400c04c:	00bfff04 	movi	r2,-4
 400c050:	85800117 	ldw	r22,4(r16)
 400c054:	b0ac703a 	and	r22,r22,r2
 400c058:	b4400336 	bltu	r22,r17,400c068 <_malloc_r+0x344>
 400c05c:	b445c83a 	sub	r2,r22,r17
 400c060:	00c003c4 	movi	r3,15
 400c064:	18805d16 	blt	r3,r2,400c1dc <_malloc_r+0x4b8>
 400c068:	05c10074 	movhi	r23,1025
 400c06c:	00810074 	movhi	r2,1025
 400c070:	10934604 	addi	r2,r2,19736
 400c074:	bdcc2204 	addi	r23,r23,12424
 400c078:	15400017 	ldw	r21,0(r2)
 400c07c:	b8c00017 	ldw	r3,0(r23)
 400c080:	00bfffc4 	movi	r2,-1
 400c084:	858d883a 	add	r6,r16,r22
 400c088:	8d6b883a 	add	r21,r17,r21
 400c08c:	1880ea26 	beq	r3,r2,400c438 <_malloc_r+0x714>
 400c090:	ad4403c4 	addi	r21,r21,4111
 400c094:	00bc0004 	movi	r2,-4096
 400c098:	a8aa703a 	and	r21,r21,r2
 400c09c:	a80b883a 	mov	r5,r21
 400c0a0:	9009883a 	mov	r4,r18
 400c0a4:	d9800015 	stw	r6,0(sp)
 400c0a8:	400ccd40 	call	400ccd4 <_sbrk_r>
 400c0ac:	1029883a 	mov	r20,r2
 400c0b0:	00bfffc4 	movi	r2,-1
 400c0b4:	d9800017 	ldw	r6,0(sp)
 400c0b8:	a080e826 	beq	r20,r2,400c45c <_malloc_r+0x738>
 400c0bc:	a180a636 	bltu	r20,r6,400c358 <_malloc_r+0x634>
 400c0c0:	07010074 	movhi	fp,1025
 400c0c4:	e7134e04 	addi	fp,fp,19768
 400c0c8:	e0800017 	ldw	r2,0(fp)
 400c0cc:	a887883a 	add	r3,r21,r2
 400c0d0:	e0c00015 	stw	r3,0(fp)
 400c0d4:	3500e626 	beq	r6,r20,400c470 <_malloc_r+0x74c>
 400c0d8:	b9000017 	ldw	r4,0(r23)
 400c0dc:	00bfffc4 	movi	r2,-1
 400c0e0:	2080ee26 	beq	r4,r2,400c49c <_malloc_r+0x778>
 400c0e4:	a185c83a 	sub	r2,r20,r6
 400c0e8:	10c5883a 	add	r2,r2,r3
 400c0ec:	e0800015 	stw	r2,0(fp)
 400c0f0:	a0c001cc 	andi	r3,r20,7
 400c0f4:	1800bc26 	beq	r3,zero,400c3e8 <_malloc_r+0x6c4>
 400c0f8:	a0e9c83a 	sub	r20,r20,r3
 400c0fc:	00840204 	movi	r2,4104
 400c100:	a5000204 	addi	r20,r20,8
 400c104:	10c7c83a 	sub	r3,r2,r3
 400c108:	a545883a 	add	r2,r20,r21
 400c10c:	1083ffcc 	andi	r2,r2,4095
 400c110:	18abc83a 	sub	r21,r3,r2
 400c114:	a80b883a 	mov	r5,r21
 400c118:	9009883a 	mov	r4,r18
 400c11c:	400ccd40 	call	400ccd4 <_sbrk_r>
 400c120:	00ffffc4 	movi	r3,-1
 400c124:	10c0e126 	beq	r2,r3,400c4ac <_malloc_r+0x788>
 400c128:	1505c83a 	sub	r2,r2,r20
 400c12c:	1545883a 	add	r2,r2,r21
 400c130:	10800054 	ori	r2,r2,1
 400c134:	e0c00017 	ldw	r3,0(fp)
 400c138:	9d000215 	stw	r20,8(r19)
 400c13c:	a0800115 	stw	r2,4(r20)
 400c140:	a8c7883a 	add	r3,r21,r3
 400c144:	e0c00015 	stw	r3,0(fp)
 400c148:	84c00e26 	beq	r16,r19,400c184 <_malloc_r+0x460>
 400c14c:	018003c4 	movi	r6,15
 400c150:	3580a72e 	bgeu	r6,r22,400c3f0 <_malloc_r+0x6cc>
 400c154:	81400117 	ldw	r5,4(r16)
 400c158:	013ffe04 	movi	r4,-8
 400c15c:	b0bffd04 	addi	r2,r22,-12
 400c160:	1104703a 	and	r2,r2,r4
 400c164:	2900004c 	andi	r4,r5,1
 400c168:	2088b03a 	or	r4,r4,r2
 400c16c:	81000115 	stw	r4,4(r16)
 400c170:	01400144 	movi	r5,5
 400c174:	8089883a 	add	r4,r16,r2
 400c178:	21400115 	stw	r5,4(r4)
 400c17c:	21400215 	stw	r5,8(r4)
 400c180:	3080cd36 	bltu	r6,r2,400c4b8 <_malloc_r+0x794>
 400c184:	00810074 	movhi	r2,1025
 400c188:	10934504 	addi	r2,r2,19732
 400c18c:	11000017 	ldw	r4,0(r2)
 400c190:	20c0012e 	bgeu	r4,r3,400c198 <_malloc_r+0x474>
 400c194:	10c00015 	stw	r3,0(r2)
 400c198:	00810074 	movhi	r2,1025
 400c19c:	10934404 	addi	r2,r2,19728
 400c1a0:	11000017 	ldw	r4,0(r2)
 400c1a4:	9c000217 	ldw	r16,8(r19)
 400c1a8:	20c0012e 	bgeu	r4,r3,400c1b0 <_malloc_r+0x48c>
 400c1ac:	10c00015 	stw	r3,0(r2)
 400c1b0:	80c00117 	ldw	r3,4(r16)
 400c1b4:	00bfff04 	movi	r2,-4
 400c1b8:	1886703a 	and	r3,r3,r2
 400c1bc:	1c45c83a 	sub	r2,r3,r17
 400c1c0:	1c400236 	bltu	r3,r17,400c1cc <_malloc_r+0x4a8>
 400c1c4:	00c003c4 	movi	r3,15
 400c1c8:	18800416 	blt	r3,r2,400c1dc <_malloc_r+0x4b8>
 400c1cc:	9009883a 	mov	r4,r18
 400c1d0:	400e9800 	call	400e980 <__malloc_unlock>
 400c1d4:	0005883a 	mov	r2,zero
 400c1d8:	003f7b06 	br	400bfc8 <__alt_data_end+0xfc00bfc8>
 400c1dc:	88c00054 	ori	r3,r17,1
 400c1e0:	80c00115 	stw	r3,4(r16)
 400c1e4:	8463883a 	add	r17,r16,r17
 400c1e8:	10800054 	ori	r2,r2,1
 400c1ec:	9c400215 	stw	r17,8(r19)
 400c1f0:	88800115 	stw	r2,4(r17)
 400c1f4:	9009883a 	mov	r4,r18
 400c1f8:	400e9800 	call	400e980 <__malloc_unlock>
 400c1fc:	80800204 	addi	r2,r16,8
 400c200:	003f7106 	br	400bfc8 <__alt_data_end+0xfc00bfc8>
 400c204:	00c00504 	movi	r3,20
 400c208:	18804a2e 	bgeu	r3,r2,400c334 <_malloc_r+0x610>
 400c20c:	00c01504 	movi	r3,84
 400c210:	18806e36 	bltu	r3,r2,400c3cc <_malloc_r+0x6a8>
 400c214:	8804d33a 	srli	r2,r17,12
 400c218:	12001bc4 	addi	r8,r2,111
 400c21c:	11c01b84 	addi	r7,r2,110
 400c220:	4209883a 	add	r4,r8,r8
 400c224:	003edd06 	br	400bd9c <__alt_data_end+0xfc00bd9c>
 400c228:	3804d27a 	srli	r2,r7,9
 400c22c:	00c00104 	movi	r3,4
 400c230:	1880442e 	bgeu	r3,r2,400c344 <_malloc_r+0x620>
 400c234:	00c00504 	movi	r3,20
 400c238:	18808136 	bltu	r3,r2,400c440 <_malloc_r+0x71c>
 400c23c:	11401704 	addi	r5,r2,92
 400c240:	10c016c4 	addi	r3,r2,91
 400c244:	294b883a 	add	r5,r5,r5
 400c248:	294b883a 	add	r5,r5,r5
 400c24c:	294b883a 	add	r5,r5,r5
 400c250:	994b883a 	add	r5,r19,r5
 400c254:	28800017 	ldw	r2,0(r5)
 400c258:	01810074 	movhi	r6,1025
 400c25c:	297ffe04 	addi	r5,r5,-8
 400c260:	31867804 	addi	r6,r6,6624
 400c264:	28806526 	beq	r5,r2,400c3fc <_malloc_r+0x6d8>
 400c268:	01bfff04 	movi	r6,-4
 400c26c:	10c00117 	ldw	r3,4(r2)
 400c270:	1986703a 	and	r3,r3,r6
 400c274:	38c0022e 	bgeu	r7,r3,400c280 <_malloc_r+0x55c>
 400c278:	10800217 	ldw	r2,8(r2)
 400c27c:	28bffb1e 	bne	r5,r2,400c26c <__alt_data_end+0xfc00c26c>
 400c280:	11400317 	ldw	r5,12(r2)
 400c284:	98c00117 	ldw	r3,4(r19)
 400c288:	81400315 	stw	r5,12(r16)
 400c28c:	80800215 	stw	r2,8(r16)
 400c290:	2c000215 	stw	r16,8(r5)
 400c294:	14000315 	stw	r16,12(r2)
 400c298:	003ef806 	br	400be7c <__alt_data_end+0xfc00be7c>
 400c29c:	88c00054 	ori	r3,r17,1
 400c2a0:	80c00115 	stw	r3,4(r16)
 400c2a4:	8463883a 	add	r17,r16,r17
 400c2a8:	34400515 	stw	r17,20(r6)
 400c2ac:	34400415 	stw	r17,16(r6)
 400c2b0:	10c00054 	ori	r3,r2,1
 400c2b4:	8a000315 	stw	r8,12(r17)
 400c2b8:	8a000215 	stw	r8,8(r17)
 400c2bc:	88c00115 	stw	r3,4(r17)
 400c2c0:	88a3883a 	add	r17,r17,r2
 400c2c4:	88800015 	stw	r2,0(r17)
 400c2c8:	9009883a 	mov	r4,r18
 400c2cc:	400e9800 	call	400e980 <__malloc_unlock>
 400c2d0:	80800204 	addi	r2,r16,8
 400c2d4:	003f3c06 	br	400bfc8 <__alt_data_end+0xfc00bfc8>
 400c2d8:	30c00117 	ldw	r3,4(r6)
 400c2dc:	003ee706 	br	400be7c <__alt_data_end+0xfc00be7c>
 400c2e0:	5ac00044 	addi	r11,r11,1
 400c2e4:	588000cc 	andi	r2,r11,3
 400c2e8:	31800204 	addi	r6,r6,8
 400c2ec:	103efd1e 	bne	r2,zero,400bee4 <__alt_data_end+0xfc00bee4>
 400c2f0:	00002406 	br	400c384 <_malloc_r+0x660>
 400c2f4:	14000317 	ldw	r16,12(r2)
 400c2f8:	143f251e 	bne	r2,r16,400bf90 <__alt_data_end+0xfc00bf90>
 400c2fc:	21000084 	addi	r4,r4,2
 400c300:	003ebc06 	br	400bdf4 <__alt_data_end+0xfc00bdf4>
 400c304:	8085883a 	add	r2,r16,r2
 400c308:	10c00117 	ldw	r3,4(r2)
 400c30c:	81000317 	ldw	r4,12(r16)
 400c310:	81400217 	ldw	r5,8(r16)
 400c314:	18c00054 	ori	r3,r3,1
 400c318:	10c00115 	stw	r3,4(r2)
 400c31c:	29000315 	stw	r4,12(r5)
 400c320:	21400215 	stw	r5,8(r4)
 400c324:	9009883a 	mov	r4,r18
 400c328:	400e9800 	call	400e980 <__malloc_unlock>
 400c32c:	80800204 	addi	r2,r16,8
 400c330:	003f2506 	br	400bfc8 <__alt_data_end+0xfc00bfc8>
 400c334:	12001704 	addi	r8,r2,92
 400c338:	11c016c4 	addi	r7,r2,91
 400c33c:	4209883a 	add	r4,r8,r8
 400c340:	003e9606 	br	400bd9c <__alt_data_end+0xfc00bd9c>
 400c344:	3804d1ba 	srli	r2,r7,6
 400c348:	11400e44 	addi	r5,r2,57
 400c34c:	10c00e04 	addi	r3,r2,56
 400c350:	294b883a 	add	r5,r5,r5
 400c354:	003fbc06 	br	400c248 <__alt_data_end+0xfc00c248>
 400c358:	84ff5926 	beq	r16,r19,400c0c0 <__alt_data_end+0xfc00c0c0>
 400c35c:	00810074 	movhi	r2,1025
 400c360:	10867804 	addi	r2,r2,6624
 400c364:	14000217 	ldw	r16,8(r2)
 400c368:	00bfff04 	movi	r2,-4
 400c36c:	80c00117 	ldw	r3,4(r16)
 400c370:	1886703a 	and	r3,r3,r2
 400c374:	003f9106 	br	400c1bc <__alt_data_end+0xfc00c1bc>
 400c378:	60800217 	ldw	r2,8(r12)
 400c37c:	213fffc4 	addi	r4,r4,-1
 400c380:	1300651e 	bne	r2,r12,400c518 <_malloc_r+0x7f4>
 400c384:	208000cc 	andi	r2,r4,3
 400c388:	633ffe04 	addi	r12,r12,-8
 400c38c:	103ffa1e 	bne	r2,zero,400c378 <__alt_data_end+0xfc00c378>
 400c390:	98800117 	ldw	r2,4(r19)
 400c394:	0146303a 	nor	r3,zero,r5
 400c398:	1884703a 	and	r2,r3,r2
 400c39c:	98800115 	stw	r2,4(r19)
 400c3a0:	294b883a 	add	r5,r5,r5
 400c3a4:	117f2836 	bltu	r2,r5,400c048 <__alt_data_end+0xfc00c048>
 400c3a8:	283f2726 	beq	r5,zero,400c048 <__alt_data_end+0xfc00c048>
 400c3ac:	2886703a 	and	r3,r5,r2
 400c3b0:	5809883a 	mov	r4,r11
 400c3b4:	183ec31e 	bne	r3,zero,400bec4 <__alt_data_end+0xfc00bec4>
 400c3b8:	294b883a 	add	r5,r5,r5
 400c3bc:	2886703a 	and	r3,r5,r2
 400c3c0:	21000104 	addi	r4,r4,4
 400c3c4:	183ffc26 	beq	r3,zero,400c3b8 <__alt_data_end+0xfc00c3b8>
 400c3c8:	003ebe06 	br	400bec4 <__alt_data_end+0xfc00bec4>
 400c3cc:	00c05504 	movi	r3,340
 400c3d0:	18801236 	bltu	r3,r2,400c41c <_malloc_r+0x6f8>
 400c3d4:	8804d3fa 	srli	r2,r17,15
 400c3d8:	12001e04 	addi	r8,r2,120
 400c3dc:	11c01dc4 	addi	r7,r2,119
 400c3e0:	4209883a 	add	r4,r8,r8
 400c3e4:	003e6d06 	br	400bd9c <__alt_data_end+0xfc00bd9c>
 400c3e8:	00c40004 	movi	r3,4096
 400c3ec:	003f4606 	br	400c108 <__alt_data_end+0xfc00c108>
 400c3f0:	00800044 	movi	r2,1
 400c3f4:	a0800115 	stw	r2,4(r20)
 400c3f8:	003f7406 	br	400c1cc <__alt_data_end+0xfc00c1cc>
 400c3fc:	1805d0ba 	srai	r2,r3,2
 400c400:	01c00044 	movi	r7,1
 400c404:	30c00117 	ldw	r3,4(r6)
 400c408:	388e983a 	sll	r7,r7,r2
 400c40c:	2805883a 	mov	r2,r5
 400c410:	38c6b03a 	or	r3,r7,r3
 400c414:	30c00115 	stw	r3,4(r6)
 400c418:	003f9b06 	br	400c288 <__alt_data_end+0xfc00c288>
 400c41c:	00c15504 	movi	r3,1364
 400c420:	18801a36 	bltu	r3,r2,400c48c <_malloc_r+0x768>
 400c424:	8804d4ba 	srli	r2,r17,18
 400c428:	12001f44 	addi	r8,r2,125
 400c42c:	11c01f04 	addi	r7,r2,124
 400c430:	4209883a 	add	r4,r8,r8
 400c434:	003e5906 	br	400bd9c <__alt_data_end+0xfc00bd9c>
 400c438:	ad400404 	addi	r21,r21,16
 400c43c:	003f1706 	br	400c09c <__alt_data_end+0xfc00c09c>
 400c440:	00c01504 	movi	r3,84
 400c444:	18802336 	bltu	r3,r2,400c4d4 <_malloc_r+0x7b0>
 400c448:	3804d33a 	srli	r2,r7,12
 400c44c:	11401bc4 	addi	r5,r2,111
 400c450:	10c01b84 	addi	r3,r2,110
 400c454:	294b883a 	add	r5,r5,r5
 400c458:	003f7b06 	br	400c248 <__alt_data_end+0xfc00c248>
 400c45c:	9c000217 	ldw	r16,8(r19)
 400c460:	00bfff04 	movi	r2,-4
 400c464:	80c00117 	ldw	r3,4(r16)
 400c468:	1886703a 	and	r3,r3,r2
 400c46c:	003f5306 	br	400c1bc <__alt_data_end+0xfc00c1bc>
 400c470:	3083ffcc 	andi	r2,r6,4095
 400c474:	103f181e 	bne	r2,zero,400c0d8 <__alt_data_end+0xfc00c0d8>
 400c478:	99000217 	ldw	r4,8(r19)
 400c47c:	b545883a 	add	r2,r22,r21
 400c480:	10800054 	ori	r2,r2,1
 400c484:	20800115 	stw	r2,4(r4)
 400c488:	003f3e06 	br	400c184 <__alt_data_end+0xfc00c184>
 400c48c:	01003f84 	movi	r4,254
 400c490:	02001fc4 	movi	r8,127
 400c494:	01c01f84 	movi	r7,126
 400c498:	003e4006 	br	400bd9c <__alt_data_end+0xfc00bd9c>
 400c49c:	00810074 	movhi	r2,1025
 400c4a0:	108c2204 	addi	r2,r2,12424
 400c4a4:	15000015 	stw	r20,0(r2)
 400c4a8:	003f1106 	br	400c0f0 <__alt_data_end+0xfc00c0f0>
 400c4ac:	00800044 	movi	r2,1
 400c4b0:	002b883a 	mov	r21,zero
 400c4b4:	003f1f06 	br	400c134 <__alt_data_end+0xfc00c134>
 400c4b8:	81400204 	addi	r5,r16,8
 400c4bc:	9009883a 	mov	r4,r18
 400c4c0:	400b12c0 	call	400b12c <_free_r>
 400c4c4:	00810074 	movhi	r2,1025
 400c4c8:	10934e04 	addi	r2,r2,19768
 400c4cc:	10c00017 	ldw	r3,0(r2)
 400c4d0:	003f2c06 	br	400c184 <__alt_data_end+0xfc00c184>
 400c4d4:	00c05504 	movi	r3,340
 400c4d8:	18800536 	bltu	r3,r2,400c4f0 <_malloc_r+0x7cc>
 400c4dc:	3804d3fa 	srli	r2,r7,15
 400c4e0:	11401e04 	addi	r5,r2,120
 400c4e4:	10c01dc4 	addi	r3,r2,119
 400c4e8:	294b883a 	add	r5,r5,r5
 400c4ec:	003f5606 	br	400c248 <__alt_data_end+0xfc00c248>
 400c4f0:	00c15504 	movi	r3,1364
 400c4f4:	18800536 	bltu	r3,r2,400c50c <_malloc_r+0x7e8>
 400c4f8:	3804d4ba 	srli	r2,r7,18
 400c4fc:	11401f44 	addi	r5,r2,125
 400c500:	10c01f04 	addi	r3,r2,124
 400c504:	294b883a 	add	r5,r5,r5
 400c508:	003f4f06 	br	400c248 <__alt_data_end+0xfc00c248>
 400c50c:	01403f84 	movi	r5,254
 400c510:	00c01f84 	movi	r3,126
 400c514:	003f4c06 	br	400c248 <__alt_data_end+0xfc00c248>
 400c518:	98800117 	ldw	r2,4(r19)
 400c51c:	003fa006 	br	400c3a0 <__alt_data_end+0xfc00c3a0>
 400c520:	8808d0fa 	srli	r4,r17,3
 400c524:	20800044 	addi	r2,r4,1
 400c528:	1085883a 	add	r2,r2,r2
 400c52c:	003e9006 	br	400bf70 <__alt_data_end+0xfc00bf70>

0400c530 <memchr>:
 400c530:	208000cc 	andi	r2,r4,3
 400c534:	280f883a 	mov	r7,r5
 400c538:	10003426 	beq	r2,zero,400c60c <memchr+0xdc>
 400c53c:	30bfffc4 	addi	r2,r6,-1
 400c540:	30001a26 	beq	r6,zero,400c5ac <memchr+0x7c>
 400c544:	20c00003 	ldbu	r3,0(r4)
 400c548:	29803fcc 	andi	r6,r5,255
 400c54c:	30c0051e 	bne	r6,r3,400c564 <memchr+0x34>
 400c550:	00001806 	br	400c5b4 <memchr+0x84>
 400c554:	10001526 	beq	r2,zero,400c5ac <memchr+0x7c>
 400c558:	20c00003 	ldbu	r3,0(r4)
 400c55c:	10bfffc4 	addi	r2,r2,-1
 400c560:	30c01426 	beq	r6,r3,400c5b4 <memchr+0x84>
 400c564:	21000044 	addi	r4,r4,1
 400c568:	20c000cc 	andi	r3,r4,3
 400c56c:	183ff91e 	bne	r3,zero,400c554 <__alt_data_end+0xfc00c554>
 400c570:	020000c4 	movi	r8,3
 400c574:	40801136 	bltu	r8,r2,400c5bc <memchr+0x8c>
 400c578:	10000c26 	beq	r2,zero,400c5ac <memchr+0x7c>
 400c57c:	20c00003 	ldbu	r3,0(r4)
 400c580:	29403fcc 	andi	r5,r5,255
 400c584:	28c00b26 	beq	r5,r3,400c5b4 <memchr+0x84>
 400c588:	20c00044 	addi	r3,r4,1
 400c58c:	39803fcc 	andi	r6,r7,255
 400c590:	2089883a 	add	r4,r4,r2
 400c594:	00000306 	br	400c5a4 <memchr+0x74>
 400c598:	18c00044 	addi	r3,r3,1
 400c59c:	197fffc3 	ldbu	r5,-1(r3)
 400c5a0:	31400526 	beq	r6,r5,400c5b8 <memchr+0x88>
 400c5a4:	1805883a 	mov	r2,r3
 400c5a8:	20fffb1e 	bne	r4,r3,400c598 <__alt_data_end+0xfc00c598>
 400c5ac:	0005883a 	mov	r2,zero
 400c5b0:	f800283a 	ret
 400c5b4:	2005883a 	mov	r2,r4
 400c5b8:	f800283a 	ret
 400c5bc:	28c03fcc 	andi	r3,r5,255
 400c5c0:	1812923a 	slli	r9,r3,8
 400c5c4:	02ffbff4 	movhi	r11,65279
 400c5c8:	02a02074 	movhi	r10,32897
 400c5cc:	48d2b03a 	or	r9,r9,r3
 400c5d0:	4806943a 	slli	r3,r9,16
 400c5d4:	5affbfc4 	addi	r11,r11,-257
 400c5d8:	52a02004 	addi	r10,r10,-32640
 400c5dc:	48d2b03a 	or	r9,r9,r3
 400c5e0:	20c00017 	ldw	r3,0(r4)
 400c5e4:	48c6f03a 	xor	r3,r9,r3
 400c5e8:	1acd883a 	add	r6,r3,r11
 400c5ec:	00c6303a 	nor	r3,zero,r3
 400c5f0:	30c6703a 	and	r3,r6,r3
 400c5f4:	1a86703a 	and	r3,r3,r10
 400c5f8:	183fe01e 	bne	r3,zero,400c57c <__alt_data_end+0xfc00c57c>
 400c5fc:	10bfff04 	addi	r2,r2,-4
 400c600:	21000104 	addi	r4,r4,4
 400c604:	40bff636 	bltu	r8,r2,400c5e0 <__alt_data_end+0xfc00c5e0>
 400c608:	003fdb06 	br	400c578 <__alt_data_end+0xfc00c578>
 400c60c:	3005883a 	mov	r2,r6
 400c610:	003fd706 	br	400c570 <__alt_data_end+0xfc00c570>

0400c614 <memmove>:
 400c614:	2005883a 	mov	r2,r4
 400c618:	29000b2e 	bgeu	r5,r4,400c648 <memmove+0x34>
 400c61c:	298f883a 	add	r7,r5,r6
 400c620:	21c0092e 	bgeu	r4,r7,400c648 <memmove+0x34>
 400c624:	2187883a 	add	r3,r4,r6
 400c628:	198bc83a 	sub	r5,r3,r6
 400c62c:	30004826 	beq	r6,zero,400c750 <memmove+0x13c>
 400c630:	39ffffc4 	addi	r7,r7,-1
 400c634:	39000003 	ldbu	r4,0(r7)
 400c638:	18ffffc4 	addi	r3,r3,-1
 400c63c:	19000005 	stb	r4,0(r3)
 400c640:	28fffb1e 	bne	r5,r3,400c630 <__alt_data_end+0xfc00c630>
 400c644:	f800283a 	ret
 400c648:	00c003c4 	movi	r3,15
 400c64c:	1980412e 	bgeu	r3,r6,400c754 <memmove+0x140>
 400c650:	2886b03a 	or	r3,r5,r2
 400c654:	18c000cc 	andi	r3,r3,3
 400c658:	1800401e 	bne	r3,zero,400c75c <memmove+0x148>
 400c65c:	33fffc04 	addi	r15,r6,-16
 400c660:	781ed13a 	srli	r15,r15,4
 400c664:	28c00104 	addi	r3,r5,4
 400c668:	13400104 	addi	r13,r2,4
 400c66c:	781c913a 	slli	r14,r15,4
 400c670:	2b000204 	addi	r12,r5,8
 400c674:	12c00204 	addi	r11,r2,8
 400c678:	73800504 	addi	r14,r14,20
 400c67c:	2a800304 	addi	r10,r5,12
 400c680:	12400304 	addi	r9,r2,12
 400c684:	2b9d883a 	add	r14,r5,r14
 400c688:	2811883a 	mov	r8,r5
 400c68c:	100f883a 	mov	r7,r2
 400c690:	41000017 	ldw	r4,0(r8)
 400c694:	39c00404 	addi	r7,r7,16
 400c698:	18c00404 	addi	r3,r3,16
 400c69c:	393ffc15 	stw	r4,-16(r7)
 400c6a0:	193ffc17 	ldw	r4,-16(r3)
 400c6a4:	6b400404 	addi	r13,r13,16
 400c6a8:	5ac00404 	addi	r11,r11,16
 400c6ac:	693ffc15 	stw	r4,-16(r13)
 400c6b0:	61000017 	ldw	r4,0(r12)
 400c6b4:	4a400404 	addi	r9,r9,16
 400c6b8:	42000404 	addi	r8,r8,16
 400c6bc:	593ffc15 	stw	r4,-16(r11)
 400c6c0:	51000017 	ldw	r4,0(r10)
 400c6c4:	63000404 	addi	r12,r12,16
 400c6c8:	52800404 	addi	r10,r10,16
 400c6cc:	493ffc15 	stw	r4,-16(r9)
 400c6d0:	1bbfef1e 	bne	r3,r14,400c690 <__alt_data_end+0xfc00c690>
 400c6d4:	79000044 	addi	r4,r15,1
 400c6d8:	2008913a 	slli	r4,r4,4
 400c6dc:	328003cc 	andi	r10,r6,15
 400c6e0:	02c000c4 	movi	r11,3
 400c6e4:	1107883a 	add	r3,r2,r4
 400c6e8:	290b883a 	add	r5,r5,r4
 400c6ec:	5a801e2e 	bgeu	r11,r10,400c768 <memmove+0x154>
 400c6f0:	1813883a 	mov	r9,r3
 400c6f4:	2811883a 	mov	r8,r5
 400c6f8:	500f883a 	mov	r7,r10
 400c6fc:	41000017 	ldw	r4,0(r8)
 400c700:	4a400104 	addi	r9,r9,4
 400c704:	39ffff04 	addi	r7,r7,-4
 400c708:	493fff15 	stw	r4,-4(r9)
 400c70c:	42000104 	addi	r8,r8,4
 400c710:	59fffa36 	bltu	r11,r7,400c6fc <__alt_data_end+0xfc00c6fc>
 400c714:	513fff04 	addi	r4,r10,-4
 400c718:	2008d0ba 	srli	r4,r4,2
 400c71c:	318000cc 	andi	r6,r6,3
 400c720:	21000044 	addi	r4,r4,1
 400c724:	2109883a 	add	r4,r4,r4
 400c728:	2109883a 	add	r4,r4,r4
 400c72c:	1907883a 	add	r3,r3,r4
 400c730:	290b883a 	add	r5,r5,r4
 400c734:	30000b26 	beq	r6,zero,400c764 <memmove+0x150>
 400c738:	198d883a 	add	r6,r3,r6
 400c73c:	29c00003 	ldbu	r7,0(r5)
 400c740:	18c00044 	addi	r3,r3,1
 400c744:	29400044 	addi	r5,r5,1
 400c748:	19ffffc5 	stb	r7,-1(r3)
 400c74c:	19bffb1e 	bne	r3,r6,400c73c <__alt_data_end+0xfc00c73c>
 400c750:	f800283a 	ret
 400c754:	1007883a 	mov	r3,r2
 400c758:	003ff606 	br	400c734 <__alt_data_end+0xfc00c734>
 400c75c:	1007883a 	mov	r3,r2
 400c760:	003ff506 	br	400c738 <__alt_data_end+0xfc00c738>
 400c764:	f800283a 	ret
 400c768:	500d883a 	mov	r6,r10
 400c76c:	003ff106 	br	400c734 <__alt_data_end+0xfc00c734>

0400c770 <_realloc_r>:
 400c770:	defff604 	addi	sp,sp,-40
 400c774:	dc800215 	stw	r18,8(sp)
 400c778:	dfc00915 	stw	ra,36(sp)
 400c77c:	df000815 	stw	fp,32(sp)
 400c780:	ddc00715 	stw	r23,28(sp)
 400c784:	dd800615 	stw	r22,24(sp)
 400c788:	dd400515 	stw	r21,20(sp)
 400c78c:	dd000415 	stw	r20,16(sp)
 400c790:	dcc00315 	stw	r19,12(sp)
 400c794:	dc400115 	stw	r17,4(sp)
 400c798:	dc000015 	stw	r16,0(sp)
 400c79c:	3025883a 	mov	r18,r6
 400c7a0:	2800b726 	beq	r5,zero,400ca80 <_realloc_r+0x310>
 400c7a4:	282b883a 	mov	r21,r5
 400c7a8:	2029883a 	mov	r20,r4
 400c7ac:	400e95c0 	call	400e95c <__malloc_lock>
 400c7b0:	a8bfff17 	ldw	r2,-4(r21)
 400c7b4:	043fff04 	movi	r16,-4
 400c7b8:	90c002c4 	addi	r3,r18,11
 400c7bc:	01000584 	movi	r4,22
 400c7c0:	acfffe04 	addi	r19,r21,-8
 400c7c4:	1420703a 	and	r16,r2,r16
 400c7c8:	20c0332e 	bgeu	r4,r3,400c898 <_realloc_r+0x128>
 400c7cc:	047ffe04 	movi	r17,-8
 400c7d0:	1c62703a 	and	r17,r3,r17
 400c7d4:	8807883a 	mov	r3,r17
 400c7d8:	88005816 	blt	r17,zero,400c93c <_realloc_r+0x1cc>
 400c7dc:	8c805736 	bltu	r17,r18,400c93c <_realloc_r+0x1cc>
 400c7e0:	80c0300e 	bge	r16,r3,400c8a4 <_realloc_r+0x134>
 400c7e4:	07010074 	movhi	fp,1025
 400c7e8:	e7067804 	addi	fp,fp,6624
 400c7ec:	e1c00217 	ldw	r7,8(fp)
 400c7f0:	9c09883a 	add	r4,r19,r16
 400c7f4:	22000117 	ldw	r8,4(r4)
 400c7f8:	21c06326 	beq	r4,r7,400c988 <_realloc_r+0x218>
 400c7fc:	017fff84 	movi	r5,-2
 400c800:	414a703a 	and	r5,r8,r5
 400c804:	214b883a 	add	r5,r4,r5
 400c808:	29800117 	ldw	r6,4(r5)
 400c80c:	3180004c 	andi	r6,r6,1
 400c810:	30003f26 	beq	r6,zero,400c910 <_realloc_r+0x1a0>
 400c814:	1080004c 	andi	r2,r2,1
 400c818:	10008326 	beq	r2,zero,400ca28 <_realloc_r+0x2b8>
 400c81c:	900b883a 	mov	r5,r18
 400c820:	a009883a 	mov	r4,r20
 400c824:	400bd240 	call	400bd24 <_malloc_r>
 400c828:	1025883a 	mov	r18,r2
 400c82c:	10011e26 	beq	r2,zero,400cca8 <_realloc_r+0x538>
 400c830:	a93fff17 	ldw	r4,-4(r21)
 400c834:	10fffe04 	addi	r3,r2,-8
 400c838:	00bfff84 	movi	r2,-2
 400c83c:	2084703a 	and	r2,r4,r2
 400c840:	9885883a 	add	r2,r19,r2
 400c844:	1880ee26 	beq	r3,r2,400cc00 <_realloc_r+0x490>
 400c848:	81bfff04 	addi	r6,r16,-4
 400c84c:	00800904 	movi	r2,36
 400c850:	1180b836 	bltu	r2,r6,400cb34 <_realloc_r+0x3c4>
 400c854:	00c004c4 	movi	r3,19
 400c858:	19809636 	bltu	r3,r6,400cab4 <_realloc_r+0x344>
 400c85c:	9005883a 	mov	r2,r18
 400c860:	a807883a 	mov	r3,r21
 400c864:	19000017 	ldw	r4,0(r3)
 400c868:	11000015 	stw	r4,0(r2)
 400c86c:	19000117 	ldw	r4,4(r3)
 400c870:	11000115 	stw	r4,4(r2)
 400c874:	18c00217 	ldw	r3,8(r3)
 400c878:	10c00215 	stw	r3,8(r2)
 400c87c:	a80b883a 	mov	r5,r21
 400c880:	a009883a 	mov	r4,r20
 400c884:	400b12c0 	call	400b12c <_free_r>
 400c888:	a009883a 	mov	r4,r20
 400c88c:	400e9800 	call	400e980 <__malloc_unlock>
 400c890:	9005883a 	mov	r2,r18
 400c894:	00001206 	br	400c8e0 <_realloc_r+0x170>
 400c898:	00c00404 	movi	r3,16
 400c89c:	1823883a 	mov	r17,r3
 400c8a0:	003fce06 	br	400c7dc <__alt_data_end+0xfc00c7dc>
 400c8a4:	a825883a 	mov	r18,r21
 400c8a8:	8445c83a 	sub	r2,r16,r17
 400c8ac:	00c003c4 	movi	r3,15
 400c8b0:	18802636 	bltu	r3,r2,400c94c <_realloc_r+0x1dc>
 400c8b4:	99800117 	ldw	r6,4(r19)
 400c8b8:	9c07883a 	add	r3,r19,r16
 400c8bc:	3180004c 	andi	r6,r6,1
 400c8c0:	3420b03a 	or	r16,r6,r16
 400c8c4:	9c000115 	stw	r16,4(r19)
 400c8c8:	18800117 	ldw	r2,4(r3)
 400c8cc:	10800054 	ori	r2,r2,1
 400c8d0:	18800115 	stw	r2,4(r3)
 400c8d4:	a009883a 	mov	r4,r20
 400c8d8:	400e9800 	call	400e980 <__malloc_unlock>
 400c8dc:	9005883a 	mov	r2,r18
 400c8e0:	dfc00917 	ldw	ra,36(sp)
 400c8e4:	df000817 	ldw	fp,32(sp)
 400c8e8:	ddc00717 	ldw	r23,28(sp)
 400c8ec:	dd800617 	ldw	r22,24(sp)
 400c8f0:	dd400517 	ldw	r21,20(sp)
 400c8f4:	dd000417 	ldw	r20,16(sp)
 400c8f8:	dcc00317 	ldw	r19,12(sp)
 400c8fc:	dc800217 	ldw	r18,8(sp)
 400c900:	dc400117 	ldw	r17,4(sp)
 400c904:	dc000017 	ldw	r16,0(sp)
 400c908:	dec00a04 	addi	sp,sp,40
 400c90c:	f800283a 	ret
 400c910:	017fff04 	movi	r5,-4
 400c914:	414a703a 	and	r5,r8,r5
 400c918:	814d883a 	add	r6,r16,r5
 400c91c:	30c01f16 	blt	r6,r3,400c99c <_realloc_r+0x22c>
 400c920:	20800317 	ldw	r2,12(r4)
 400c924:	20c00217 	ldw	r3,8(r4)
 400c928:	a825883a 	mov	r18,r21
 400c92c:	3021883a 	mov	r16,r6
 400c930:	18800315 	stw	r2,12(r3)
 400c934:	10c00215 	stw	r3,8(r2)
 400c938:	003fdb06 	br	400c8a8 <__alt_data_end+0xfc00c8a8>
 400c93c:	00800304 	movi	r2,12
 400c940:	a0800015 	stw	r2,0(r20)
 400c944:	0005883a 	mov	r2,zero
 400c948:	003fe506 	br	400c8e0 <__alt_data_end+0xfc00c8e0>
 400c94c:	98c00117 	ldw	r3,4(r19)
 400c950:	9c4b883a 	add	r5,r19,r17
 400c954:	11000054 	ori	r4,r2,1
 400c958:	18c0004c 	andi	r3,r3,1
 400c95c:	1c62b03a 	or	r17,r3,r17
 400c960:	9c400115 	stw	r17,4(r19)
 400c964:	29000115 	stw	r4,4(r5)
 400c968:	2885883a 	add	r2,r5,r2
 400c96c:	10c00117 	ldw	r3,4(r2)
 400c970:	29400204 	addi	r5,r5,8
 400c974:	a009883a 	mov	r4,r20
 400c978:	18c00054 	ori	r3,r3,1
 400c97c:	10c00115 	stw	r3,4(r2)
 400c980:	400b12c0 	call	400b12c <_free_r>
 400c984:	003fd306 	br	400c8d4 <__alt_data_end+0xfc00c8d4>
 400c988:	017fff04 	movi	r5,-4
 400c98c:	414a703a 	and	r5,r8,r5
 400c990:	89800404 	addi	r6,r17,16
 400c994:	8151883a 	add	r8,r16,r5
 400c998:	4180590e 	bge	r8,r6,400cb00 <_realloc_r+0x390>
 400c99c:	1080004c 	andi	r2,r2,1
 400c9a0:	103f9e1e 	bne	r2,zero,400c81c <__alt_data_end+0xfc00c81c>
 400c9a4:	adbffe17 	ldw	r22,-8(r21)
 400c9a8:	00bfff04 	movi	r2,-4
 400c9ac:	9dadc83a 	sub	r22,r19,r22
 400c9b0:	b1800117 	ldw	r6,4(r22)
 400c9b4:	3084703a 	and	r2,r6,r2
 400c9b8:	20002026 	beq	r4,zero,400ca3c <_realloc_r+0x2cc>
 400c9bc:	80af883a 	add	r23,r16,r2
 400c9c0:	b96f883a 	add	r23,r23,r5
 400c9c4:	21c05f26 	beq	r4,r7,400cb44 <_realloc_r+0x3d4>
 400c9c8:	b8c01c16 	blt	r23,r3,400ca3c <_realloc_r+0x2cc>
 400c9cc:	20800317 	ldw	r2,12(r4)
 400c9d0:	20c00217 	ldw	r3,8(r4)
 400c9d4:	81bfff04 	addi	r6,r16,-4
 400c9d8:	01000904 	movi	r4,36
 400c9dc:	18800315 	stw	r2,12(r3)
 400c9e0:	10c00215 	stw	r3,8(r2)
 400c9e4:	b0c00217 	ldw	r3,8(r22)
 400c9e8:	b0800317 	ldw	r2,12(r22)
 400c9ec:	b4800204 	addi	r18,r22,8
 400c9f0:	18800315 	stw	r2,12(r3)
 400c9f4:	10c00215 	stw	r3,8(r2)
 400c9f8:	21801b36 	bltu	r4,r6,400ca68 <_realloc_r+0x2f8>
 400c9fc:	008004c4 	movi	r2,19
 400ca00:	1180352e 	bgeu	r2,r6,400cad8 <_realloc_r+0x368>
 400ca04:	a8800017 	ldw	r2,0(r21)
 400ca08:	b0800215 	stw	r2,8(r22)
 400ca0c:	a8800117 	ldw	r2,4(r21)
 400ca10:	b0800315 	stw	r2,12(r22)
 400ca14:	008006c4 	movi	r2,27
 400ca18:	11807f36 	bltu	r2,r6,400cc18 <_realloc_r+0x4a8>
 400ca1c:	b0800404 	addi	r2,r22,16
 400ca20:	ad400204 	addi	r21,r21,8
 400ca24:	00002d06 	br	400cadc <_realloc_r+0x36c>
 400ca28:	adbffe17 	ldw	r22,-8(r21)
 400ca2c:	00bfff04 	movi	r2,-4
 400ca30:	9dadc83a 	sub	r22,r19,r22
 400ca34:	b1000117 	ldw	r4,4(r22)
 400ca38:	2084703a 	and	r2,r4,r2
 400ca3c:	b03f7726 	beq	r22,zero,400c81c <__alt_data_end+0xfc00c81c>
 400ca40:	80af883a 	add	r23,r16,r2
 400ca44:	b8ff7516 	blt	r23,r3,400c81c <__alt_data_end+0xfc00c81c>
 400ca48:	b0800317 	ldw	r2,12(r22)
 400ca4c:	b0c00217 	ldw	r3,8(r22)
 400ca50:	81bfff04 	addi	r6,r16,-4
 400ca54:	01000904 	movi	r4,36
 400ca58:	18800315 	stw	r2,12(r3)
 400ca5c:	10c00215 	stw	r3,8(r2)
 400ca60:	b4800204 	addi	r18,r22,8
 400ca64:	21bfe52e 	bgeu	r4,r6,400c9fc <__alt_data_end+0xfc00c9fc>
 400ca68:	a80b883a 	mov	r5,r21
 400ca6c:	9009883a 	mov	r4,r18
 400ca70:	400c6140 	call	400c614 <memmove>
 400ca74:	b821883a 	mov	r16,r23
 400ca78:	b027883a 	mov	r19,r22
 400ca7c:	003f8a06 	br	400c8a8 <__alt_data_end+0xfc00c8a8>
 400ca80:	300b883a 	mov	r5,r6
 400ca84:	dfc00917 	ldw	ra,36(sp)
 400ca88:	df000817 	ldw	fp,32(sp)
 400ca8c:	ddc00717 	ldw	r23,28(sp)
 400ca90:	dd800617 	ldw	r22,24(sp)
 400ca94:	dd400517 	ldw	r21,20(sp)
 400ca98:	dd000417 	ldw	r20,16(sp)
 400ca9c:	dcc00317 	ldw	r19,12(sp)
 400caa0:	dc800217 	ldw	r18,8(sp)
 400caa4:	dc400117 	ldw	r17,4(sp)
 400caa8:	dc000017 	ldw	r16,0(sp)
 400caac:	dec00a04 	addi	sp,sp,40
 400cab0:	400bd241 	jmpi	400bd24 <_malloc_r>
 400cab4:	a8c00017 	ldw	r3,0(r21)
 400cab8:	90c00015 	stw	r3,0(r18)
 400cabc:	a8c00117 	ldw	r3,4(r21)
 400cac0:	90c00115 	stw	r3,4(r18)
 400cac4:	00c006c4 	movi	r3,27
 400cac8:	19804536 	bltu	r3,r6,400cbe0 <_realloc_r+0x470>
 400cacc:	90800204 	addi	r2,r18,8
 400cad0:	a8c00204 	addi	r3,r21,8
 400cad4:	003f6306 	br	400c864 <__alt_data_end+0xfc00c864>
 400cad8:	9005883a 	mov	r2,r18
 400cadc:	a8c00017 	ldw	r3,0(r21)
 400cae0:	b821883a 	mov	r16,r23
 400cae4:	b027883a 	mov	r19,r22
 400cae8:	10c00015 	stw	r3,0(r2)
 400caec:	a8c00117 	ldw	r3,4(r21)
 400caf0:	10c00115 	stw	r3,4(r2)
 400caf4:	a8c00217 	ldw	r3,8(r21)
 400caf8:	10c00215 	stw	r3,8(r2)
 400cafc:	003f6a06 	br	400c8a8 <__alt_data_end+0xfc00c8a8>
 400cb00:	9c67883a 	add	r19,r19,r17
 400cb04:	4445c83a 	sub	r2,r8,r17
 400cb08:	e4c00215 	stw	r19,8(fp)
 400cb0c:	10800054 	ori	r2,r2,1
 400cb10:	98800115 	stw	r2,4(r19)
 400cb14:	a8bfff17 	ldw	r2,-4(r21)
 400cb18:	a009883a 	mov	r4,r20
 400cb1c:	1080004c 	andi	r2,r2,1
 400cb20:	1462b03a 	or	r17,r2,r17
 400cb24:	ac7fff15 	stw	r17,-4(r21)
 400cb28:	400e9800 	call	400e980 <__malloc_unlock>
 400cb2c:	a805883a 	mov	r2,r21
 400cb30:	003f6b06 	br	400c8e0 <__alt_data_end+0xfc00c8e0>
 400cb34:	a80b883a 	mov	r5,r21
 400cb38:	9009883a 	mov	r4,r18
 400cb3c:	400c6140 	call	400c614 <memmove>
 400cb40:	003f4e06 	br	400c87c <__alt_data_end+0xfc00c87c>
 400cb44:	89000404 	addi	r4,r17,16
 400cb48:	b93fbc16 	blt	r23,r4,400ca3c <__alt_data_end+0xfc00ca3c>
 400cb4c:	b0800317 	ldw	r2,12(r22)
 400cb50:	b0c00217 	ldw	r3,8(r22)
 400cb54:	81bfff04 	addi	r6,r16,-4
 400cb58:	01000904 	movi	r4,36
 400cb5c:	18800315 	stw	r2,12(r3)
 400cb60:	10c00215 	stw	r3,8(r2)
 400cb64:	b4800204 	addi	r18,r22,8
 400cb68:	21804336 	bltu	r4,r6,400cc78 <_realloc_r+0x508>
 400cb6c:	008004c4 	movi	r2,19
 400cb70:	11803f2e 	bgeu	r2,r6,400cc70 <_realloc_r+0x500>
 400cb74:	a8800017 	ldw	r2,0(r21)
 400cb78:	b0800215 	stw	r2,8(r22)
 400cb7c:	a8800117 	ldw	r2,4(r21)
 400cb80:	b0800315 	stw	r2,12(r22)
 400cb84:	008006c4 	movi	r2,27
 400cb88:	11803f36 	bltu	r2,r6,400cc88 <_realloc_r+0x518>
 400cb8c:	b0800404 	addi	r2,r22,16
 400cb90:	ad400204 	addi	r21,r21,8
 400cb94:	a8c00017 	ldw	r3,0(r21)
 400cb98:	10c00015 	stw	r3,0(r2)
 400cb9c:	a8c00117 	ldw	r3,4(r21)
 400cba0:	10c00115 	stw	r3,4(r2)
 400cba4:	a8c00217 	ldw	r3,8(r21)
 400cba8:	10c00215 	stw	r3,8(r2)
 400cbac:	b447883a 	add	r3,r22,r17
 400cbb0:	bc45c83a 	sub	r2,r23,r17
 400cbb4:	e0c00215 	stw	r3,8(fp)
 400cbb8:	10800054 	ori	r2,r2,1
 400cbbc:	18800115 	stw	r2,4(r3)
 400cbc0:	b0800117 	ldw	r2,4(r22)
 400cbc4:	a009883a 	mov	r4,r20
 400cbc8:	1080004c 	andi	r2,r2,1
 400cbcc:	1462b03a 	or	r17,r2,r17
 400cbd0:	b4400115 	stw	r17,4(r22)
 400cbd4:	400e9800 	call	400e980 <__malloc_unlock>
 400cbd8:	9005883a 	mov	r2,r18
 400cbdc:	003f4006 	br	400c8e0 <__alt_data_end+0xfc00c8e0>
 400cbe0:	a8c00217 	ldw	r3,8(r21)
 400cbe4:	90c00215 	stw	r3,8(r18)
 400cbe8:	a8c00317 	ldw	r3,12(r21)
 400cbec:	90c00315 	stw	r3,12(r18)
 400cbf0:	30801126 	beq	r6,r2,400cc38 <_realloc_r+0x4c8>
 400cbf4:	90800404 	addi	r2,r18,16
 400cbf8:	a8c00404 	addi	r3,r21,16
 400cbfc:	003f1906 	br	400c864 <__alt_data_end+0xfc00c864>
 400cc00:	90ffff17 	ldw	r3,-4(r18)
 400cc04:	00bfff04 	movi	r2,-4
 400cc08:	a825883a 	mov	r18,r21
 400cc0c:	1884703a 	and	r2,r3,r2
 400cc10:	80a1883a 	add	r16,r16,r2
 400cc14:	003f2406 	br	400c8a8 <__alt_data_end+0xfc00c8a8>
 400cc18:	a8800217 	ldw	r2,8(r21)
 400cc1c:	b0800415 	stw	r2,16(r22)
 400cc20:	a8800317 	ldw	r2,12(r21)
 400cc24:	b0800515 	stw	r2,20(r22)
 400cc28:	31000a26 	beq	r6,r4,400cc54 <_realloc_r+0x4e4>
 400cc2c:	b0800604 	addi	r2,r22,24
 400cc30:	ad400404 	addi	r21,r21,16
 400cc34:	003fa906 	br	400cadc <__alt_data_end+0xfc00cadc>
 400cc38:	a9000417 	ldw	r4,16(r21)
 400cc3c:	90800604 	addi	r2,r18,24
 400cc40:	a8c00604 	addi	r3,r21,24
 400cc44:	91000415 	stw	r4,16(r18)
 400cc48:	a9000517 	ldw	r4,20(r21)
 400cc4c:	91000515 	stw	r4,20(r18)
 400cc50:	003f0406 	br	400c864 <__alt_data_end+0xfc00c864>
 400cc54:	a8c00417 	ldw	r3,16(r21)
 400cc58:	ad400604 	addi	r21,r21,24
 400cc5c:	b0800804 	addi	r2,r22,32
 400cc60:	b0c00615 	stw	r3,24(r22)
 400cc64:	a8ffff17 	ldw	r3,-4(r21)
 400cc68:	b0c00715 	stw	r3,28(r22)
 400cc6c:	003f9b06 	br	400cadc <__alt_data_end+0xfc00cadc>
 400cc70:	9005883a 	mov	r2,r18
 400cc74:	003fc706 	br	400cb94 <__alt_data_end+0xfc00cb94>
 400cc78:	a80b883a 	mov	r5,r21
 400cc7c:	9009883a 	mov	r4,r18
 400cc80:	400c6140 	call	400c614 <memmove>
 400cc84:	003fc906 	br	400cbac <__alt_data_end+0xfc00cbac>
 400cc88:	a8800217 	ldw	r2,8(r21)
 400cc8c:	b0800415 	stw	r2,16(r22)
 400cc90:	a8800317 	ldw	r2,12(r21)
 400cc94:	b0800515 	stw	r2,20(r22)
 400cc98:	31000726 	beq	r6,r4,400ccb8 <_realloc_r+0x548>
 400cc9c:	b0800604 	addi	r2,r22,24
 400cca0:	ad400404 	addi	r21,r21,16
 400cca4:	003fbb06 	br	400cb94 <__alt_data_end+0xfc00cb94>
 400cca8:	a009883a 	mov	r4,r20
 400ccac:	400e9800 	call	400e980 <__malloc_unlock>
 400ccb0:	0005883a 	mov	r2,zero
 400ccb4:	003f0a06 	br	400c8e0 <__alt_data_end+0xfc00c8e0>
 400ccb8:	a8c00417 	ldw	r3,16(r21)
 400ccbc:	ad400604 	addi	r21,r21,24
 400ccc0:	b0800804 	addi	r2,r22,32
 400ccc4:	b0c00615 	stw	r3,24(r22)
 400ccc8:	a8ffff17 	ldw	r3,-4(r21)
 400cccc:	b0c00715 	stw	r3,28(r22)
 400ccd0:	003fb006 	br	400cb94 <__alt_data_end+0xfc00cb94>

0400ccd4 <_sbrk_r>:
 400ccd4:	defffd04 	addi	sp,sp,-12
 400ccd8:	dc000015 	stw	r16,0(sp)
 400ccdc:	04010074 	movhi	r16,1025
 400cce0:	dc400115 	stw	r17,4(sp)
 400cce4:	84134004 	addi	r16,r16,19712
 400cce8:	2023883a 	mov	r17,r4
 400ccec:	2809883a 	mov	r4,r5
 400ccf0:	dfc00215 	stw	ra,8(sp)
 400ccf4:	80000015 	stw	zero,0(r16)
 400ccf8:	400eb680 	call	400eb68 <sbrk>
 400ccfc:	00ffffc4 	movi	r3,-1
 400cd00:	10c00526 	beq	r2,r3,400cd18 <_sbrk_r+0x44>
 400cd04:	dfc00217 	ldw	ra,8(sp)
 400cd08:	dc400117 	ldw	r17,4(sp)
 400cd0c:	dc000017 	ldw	r16,0(sp)
 400cd10:	dec00304 	addi	sp,sp,12
 400cd14:	f800283a 	ret
 400cd18:	80c00017 	ldw	r3,0(r16)
 400cd1c:	183ff926 	beq	r3,zero,400cd04 <__alt_data_end+0xfc00cd04>
 400cd20:	88c00015 	stw	r3,0(r17)
 400cd24:	003ff706 	br	400cd04 <__alt_data_end+0xfc00cd04>

0400cd28 <__sread>:
 400cd28:	defffe04 	addi	sp,sp,-8
 400cd2c:	dc000015 	stw	r16,0(sp)
 400cd30:	2821883a 	mov	r16,r5
 400cd34:	2940038f 	ldh	r5,14(r5)
 400cd38:	dfc00115 	stw	ra,4(sp)
 400cd3c:	400d5e00 	call	400d5e0 <_read_r>
 400cd40:	10000716 	blt	r2,zero,400cd60 <__sread+0x38>
 400cd44:	80c01417 	ldw	r3,80(r16)
 400cd48:	1887883a 	add	r3,r3,r2
 400cd4c:	80c01415 	stw	r3,80(r16)
 400cd50:	dfc00117 	ldw	ra,4(sp)
 400cd54:	dc000017 	ldw	r16,0(sp)
 400cd58:	dec00204 	addi	sp,sp,8
 400cd5c:	f800283a 	ret
 400cd60:	80c0030b 	ldhu	r3,12(r16)
 400cd64:	18fbffcc 	andi	r3,r3,61439
 400cd68:	80c0030d 	sth	r3,12(r16)
 400cd6c:	dfc00117 	ldw	ra,4(sp)
 400cd70:	dc000017 	ldw	r16,0(sp)
 400cd74:	dec00204 	addi	sp,sp,8
 400cd78:	f800283a 	ret

0400cd7c <__seofread>:
 400cd7c:	0005883a 	mov	r2,zero
 400cd80:	f800283a 	ret

0400cd84 <__swrite>:
 400cd84:	2880030b 	ldhu	r2,12(r5)
 400cd88:	defffb04 	addi	sp,sp,-20
 400cd8c:	dcc00315 	stw	r19,12(sp)
 400cd90:	dc800215 	stw	r18,8(sp)
 400cd94:	dc400115 	stw	r17,4(sp)
 400cd98:	dc000015 	stw	r16,0(sp)
 400cd9c:	dfc00415 	stw	ra,16(sp)
 400cda0:	10c0400c 	andi	r3,r2,256
 400cda4:	2821883a 	mov	r16,r5
 400cda8:	2023883a 	mov	r17,r4
 400cdac:	3025883a 	mov	r18,r6
 400cdb0:	3827883a 	mov	r19,r7
 400cdb4:	18000526 	beq	r3,zero,400cdcc <__swrite+0x48>
 400cdb8:	2940038f 	ldh	r5,14(r5)
 400cdbc:	01c00084 	movi	r7,2
 400cdc0:	000d883a 	mov	r6,zero
 400cdc4:	400d5800 	call	400d580 <_lseek_r>
 400cdc8:	8080030b 	ldhu	r2,12(r16)
 400cdcc:	8140038f 	ldh	r5,14(r16)
 400cdd0:	10bbffcc 	andi	r2,r2,61439
 400cdd4:	980f883a 	mov	r7,r19
 400cdd8:	900d883a 	mov	r6,r18
 400cddc:	8809883a 	mov	r4,r17
 400cde0:	8080030d 	sth	r2,12(r16)
 400cde4:	dfc00417 	ldw	ra,16(sp)
 400cde8:	dcc00317 	ldw	r19,12(sp)
 400cdec:	dc800217 	ldw	r18,8(sp)
 400cdf0:	dc400117 	ldw	r17,4(sp)
 400cdf4:	dc000017 	ldw	r16,0(sp)
 400cdf8:	dec00504 	addi	sp,sp,20
 400cdfc:	400d3181 	jmpi	400d318 <_write_r>

0400ce00 <__sseek>:
 400ce00:	defffe04 	addi	sp,sp,-8
 400ce04:	dc000015 	stw	r16,0(sp)
 400ce08:	2821883a 	mov	r16,r5
 400ce0c:	2940038f 	ldh	r5,14(r5)
 400ce10:	dfc00115 	stw	ra,4(sp)
 400ce14:	400d5800 	call	400d580 <_lseek_r>
 400ce18:	00ffffc4 	movi	r3,-1
 400ce1c:	10c00826 	beq	r2,r3,400ce40 <__sseek+0x40>
 400ce20:	80c0030b 	ldhu	r3,12(r16)
 400ce24:	80801415 	stw	r2,80(r16)
 400ce28:	18c40014 	ori	r3,r3,4096
 400ce2c:	80c0030d 	sth	r3,12(r16)
 400ce30:	dfc00117 	ldw	ra,4(sp)
 400ce34:	dc000017 	ldw	r16,0(sp)
 400ce38:	dec00204 	addi	sp,sp,8
 400ce3c:	f800283a 	ret
 400ce40:	80c0030b 	ldhu	r3,12(r16)
 400ce44:	18fbffcc 	andi	r3,r3,61439
 400ce48:	80c0030d 	sth	r3,12(r16)
 400ce4c:	dfc00117 	ldw	ra,4(sp)
 400ce50:	dc000017 	ldw	r16,0(sp)
 400ce54:	dec00204 	addi	sp,sp,8
 400ce58:	f800283a 	ret

0400ce5c <__sclose>:
 400ce5c:	2940038f 	ldh	r5,14(r5)
 400ce60:	400d3781 	jmpi	400d378 <_close_r>

0400ce64 <strcmp>:
 400ce64:	2144b03a 	or	r2,r4,r5
 400ce68:	108000cc 	andi	r2,r2,3
 400ce6c:	1000171e 	bne	r2,zero,400cecc <strcmp+0x68>
 400ce70:	20800017 	ldw	r2,0(r4)
 400ce74:	28c00017 	ldw	r3,0(r5)
 400ce78:	10c0141e 	bne	r2,r3,400cecc <strcmp+0x68>
 400ce7c:	027fbff4 	movhi	r9,65279
 400ce80:	4a7fbfc4 	addi	r9,r9,-257
 400ce84:	0086303a 	nor	r3,zero,r2
 400ce88:	02202074 	movhi	r8,32897
 400ce8c:	1245883a 	add	r2,r2,r9
 400ce90:	42202004 	addi	r8,r8,-32640
 400ce94:	10c4703a 	and	r2,r2,r3
 400ce98:	1204703a 	and	r2,r2,r8
 400ce9c:	10000226 	beq	r2,zero,400cea8 <strcmp+0x44>
 400cea0:	00002306 	br	400cf30 <strcmp+0xcc>
 400cea4:	1000221e 	bne	r2,zero,400cf30 <strcmp+0xcc>
 400cea8:	21000104 	addi	r4,r4,4
 400ceac:	20c00017 	ldw	r3,0(r4)
 400ceb0:	29400104 	addi	r5,r5,4
 400ceb4:	29800017 	ldw	r6,0(r5)
 400ceb8:	1a4f883a 	add	r7,r3,r9
 400cebc:	00c4303a 	nor	r2,zero,r3
 400cec0:	3884703a 	and	r2,r7,r2
 400cec4:	1204703a 	and	r2,r2,r8
 400cec8:	19bff626 	beq	r3,r6,400cea4 <__alt_data_end+0xfc00cea4>
 400cecc:	20800003 	ldbu	r2,0(r4)
 400ced0:	10c03fcc 	andi	r3,r2,255
 400ced4:	18c0201c 	xori	r3,r3,128
 400ced8:	18ffe004 	addi	r3,r3,-128
 400cedc:	18000c26 	beq	r3,zero,400cf10 <strcmp+0xac>
 400cee0:	29800007 	ldb	r6,0(r5)
 400cee4:	19800326 	beq	r3,r6,400cef4 <strcmp+0x90>
 400cee8:	00001306 	br	400cf38 <strcmp+0xd4>
 400ceec:	29800007 	ldb	r6,0(r5)
 400cef0:	11800b1e 	bne	r2,r6,400cf20 <strcmp+0xbc>
 400cef4:	21000044 	addi	r4,r4,1
 400cef8:	20c00003 	ldbu	r3,0(r4)
 400cefc:	29400044 	addi	r5,r5,1
 400cf00:	18803fcc 	andi	r2,r3,255
 400cf04:	1080201c 	xori	r2,r2,128
 400cf08:	10bfe004 	addi	r2,r2,-128
 400cf0c:	103ff71e 	bne	r2,zero,400ceec <__alt_data_end+0xfc00ceec>
 400cf10:	0007883a 	mov	r3,zero
 400cf14:	28800003 	ldbu	r2,0(r5)
 400cf18:	1885c83a 	sub	r2,r3,r2
 400cf1c:	f800283a 	ret
 400cf20:	28800003 	ldbu	r2,0(r5)
 400cf24:	18c03fcc 	andi	r3,r3,255
 400cf28:	1885c83a 	sub	r2,r3,r2
 400cf2c:	f800283a 	ret
 400cf30:	0005883a 	mov	r2,zero
 400cf34:	f800283a 	ret
 400cf38:	10c03fcc 	andi	r3,r2,255
 400cf3c:	003ff506 	br	400cf14 <__alt_data_end+0xfc00cf14>

0400cf40 <strlen>:
 400cf40:	208000cc 	andi	r2,r4,3
 400cf44:	10002026 	beq	r2,zero,400cfc8 <strlen+0x88>
 400cf48:	20800007 	ldb	r2,0(r4)
 400cf4c:	10002026 	beq	r2,zero,400cfd0 <strlen+0x90>
 400cf50:	2005883a 	mov	r2,r4
 400cf54:	00000206 	br	400cf60 <strlen+0x20>
 400cf58:	10c00007 	ldb	r3,0(r2)
 400cf5c:	18001826 	beq	r3,zero,400cfc0 <strlen+0x80>
 400cf60:	10800044 	addi	r2,r2,1
 400cf64:	10c000cc 	andi	r3,r2,3
 400cf68:	183ffb1e 	bne	r3,zero,400cf58 <__alt_data_end+0xfc00cf58>
 400cf6c:	10c00017 	ldw	r3,0(r2)
 400cf70:	01ffbff4 	movhi	r7,65279
 400cf74:	39ffbfc4 	addi	r7,r7,-257
 400cf78:	00ca303a 	nor	r5,zero,r3
 400cf7c:	01a02074 	movhi	r6,32897
 400cf80:	19c7883a 	add	r3,r3,r7
 400cf84:	31a02004 	addi	r6,r6,-32640
 400cf88:	1946703a 	and	r3,r3,r5
 400cf8c:	1986703a 	and	r3,r3,r6
 400cf90:	1800091e 	bne	r3,zero,400cfb8 <strlen+0x78>
 400cf94:	10800104 	addi	r2,r2,4
 400cf98:	10c00017 	ldw	r3,0(r2)
 400cf9c:	19cb883a 	add	r5,r3,r7
 400cfa0:	00c6303a 	nor	r3,zero,r3
 400cfa4:	28c6703a 	and	r3,r5,r3
 400cfa8:	1986703a 	and	r3,r3,r6
 400cfac:	183ff926 	beq	r3,zero,400cf94 <__alt_data_end+0xfc00cf94>
 400cfb0:	00000106 	br	400cfb8 <strlen+0x78>
 400cfb4:	10800044 	addi	r2,r2,1
 400cfb8:	10c00007 	ldb	r3,0(r2)
 400cfbc:	183ffd1e 	bne	r3,zero,400cfb4 <__alt_data_end+0xfc00cfb4>
 400cfc0:	1105c83a 	sub	r2,r2,r4
 400cfc4:	f800283a 	ret
 400cfc8:	2005883a 	mov	r2,r4
 400cfcc:	003fe706 	br	400cf6c <__alt_data_end+0xfc00cf6c>
 400cfd0:	0005883a 	mov	r2,zero
 400cfd4:	f800283a 	ret

0400cfd8 <__swbuf_r>:
 400cfd8:	defffb04 	addi	sp,sp,-20
 400cfdc:	dcc00315 	stw	r19,12(sp)
 400cfe0:	dc800215 	stw	r18,8(sp)
 400cfe4:	dc000015 	stw	r16,0(sp)
 400cfe8:	dfc00415 	stw	ra,16(sp)
 400cfec:	dc400115 	stw	r17,4(sp)
 400cff0:	2025883a 	mov	r18,r4
 400cff4:	2827883a 	mov	r19,r5
 400cff8:	3021883a 	mov	r16,r6
 400cffc:	20000226 	beq	r4,zero,400d008 <__swbuf_r+0x30>
 400d000:	20800e17 	ldw	r2,56(r4)
 400d004:	10004226 	beq	r2,zero,400d110 <__swbuf_r+0x138>
 400d008:	80800617 	ldw	r2,24(r16)
 400d00c:	8100030b 	ldhu	r4,12(r16)
 400d010:	80800215 	stw	r2,8(r16)
 400d014:	2080020c 	andi	r2,r4,8
 400d018:	10003626 	beq	r2,zero,400d0f4 <__swbuf_r+0x11c>
 400d01c:	80c00417 	ldw	r3,16(r16)
 400d020:	18003426 	beq	r3,zero,400d0f4 <__swbuf_r+0x11c>
 400d024:	2088000c 	andi	r2,r4,8192
 400d028:	9c403fcc 	andi	r17,r19,255
 400d02c:	10001a26 	beq	r2,zero,400d098 <__swbuf_r+0xc0>
 400d030:	80800017 	ldw	r2,0(r16)
 400d034:	81000517 	ldw	r4,20(r16)
 400d038:	10c7c83a 	sub	r3,r2,r3
 400d03c:	1900200e 	bge	r3,r4,400d0c0 <__swbuf_r+0xe8>
 400d040:	18c00044 	addi	r3,r3,1
 400d044:	81000217 	ldw	r4,8(r16)
 400d048:	11400044 	addi	r5,r2,1
 400d04c:	81400015 	stw	r5,0(r16)
 400d050:	213fffc4 	addi	r4,r4,-1
 400d054:	81000215 	stw	r4,8(r16)
 400d058:	14c00005 	stb	r19,0(r2)
 400d05c:	80800517 	ldw	r2,20(r16)
 400d060:	10c01e26 	beq	r2,r3,400d0dc <__swbuf_r+0x104>
 400d064:	8080030b 	ldhu	r2,12(r16)
 400d068:	1080004c 	andi	r2,r2,1
 400d06c:	10000226 	beq	r2,zero,400d078 <__swbuf_r+0xa0>
 400d070:	00800284 	movi	r2,10
 400d074:	88801926 	beq	r17,r2,400d0dc <__swbuf_r+0x104>
 400d078:	8805883a 	mov	r2,r17
 400d07c:	dfc00417 	ldw	ra,16(sp)
 400d080:	dcc00317 	ldw	r19,12(sp)
 400d084:	dc800217 	ldw	r18,8(sp)
 400d088:	dc400117 	ldw	r17,4(sp)
 400d08c:	dc000017 	ldw	r16,0(sp)
 400d090:	dec00504 	addi	sp,sp,20
 400d094:	f800283a 	ret
 400d098:	81401917 	ldw	r5,100(r16)
 400d09c:	00b7ffc4 	movi	r2,-8193
 400d0a0:	21080014 	ori	r4,r4,8192
 400d0a4:	2884703a 	and	r2,r5,r2
 400d0a8:	80801915 	stw	r2,100(r16)
 400d0ac:	80800017 	ldw	r2,0(r16)
 400d0b0:	8100030d 	sth	r4,12(r16)
 400d0b4:	81000517 	ldw	r4,20(r16)
 400d0b8:	10c7c83a 	sub	r3,r2,r3
 400d0bc:	193fe016 	blt	r3,r4,400d040 <__alt_data_end+0xfc00d040>
 400d0c0:	800b883a 	mov	r5,r16
 400d0c4:	9009883a 	mov	r4,r18
 400d0c8:	400a9c40 	call	400a9c4 <_fflush_r>
 400d0cc:	1000071e 	bne	r2,zero,400d0ec <__swbuf_r+0x114>
 400d0d0:	80800017 	ldw	r2,0(r16)
 400d0d4:	00c00044 	movi	r3,1
 400d0d8:	003fda06 	br	400d044 <__alt_data_end+0xfc00d044>
 400d0dc:	800b883a 	mov	r5,r16
 400d0e0:	9009883a 	mov	r4,r18
 400d0e4:	400a9c40 	call	400a9c4 <_fflush_r>
 400d0e8:	103fe326 	beq	r2,zero,400d078 <__alt_data_end+0xfc00d078>
 400d0ec:	00bfffc4 	movi	r2,-1
 400d0f0:	003fe206 	br	400d07c <__alt_data_end+0xfc00d07c>
 400d0f4:	800b883a 	mov	r5,r16
 400d0f8:	9009883a 	mov	r4,r18
 400d0fc:	400a6540 	call	400a654 <__swsetup_r>
 400d100:	103ffa1e 	bne	r2,zero,400d0ec <__alt_data_end+0xfc00d0ec>
 400d104:	8100030b 	ldhu	r4,12(r16)
 400d108:	80c00417 	ldw	r3,16(r16)
 400d10c:	003fc506 	br	400d024 <__alt_data_end+0xfc00d024>
 400d110:	400adb00 	call	400adb0 <__sinit>
 400d114:	003fbc06 	br	400d008 <__alt_data_end+0xfc00d008>

0400d118 <__swbuf>:
 400d118:	00810074 	movhi	r2,1025
 400d11c:	108c2004 	addi	r2,r2,12416
 400d120:	280d883a 	mov	r6,r5
 400d124:	200b883a 	mov	r5,r4
 400d128:	11000017 	ldw	r4,0(r2)
 400d12c:	400cfd81 	jmpi	400cfd8 <__swbuf_r>

0400d130 <_wcrtomb_r>:
 400d130:	defff604 	addi	sp,sp,-40
 400d134:	00810074 	movhi	r2,1025
 400d138:	dc800815 	stw	r18,32(sp)
 400d13c:	dc400715 	stw	r17,28(sp)
 400d140:	dc000615 	stw	r16,24(sp)
 400d144:	108c2404 	addi	r2,r2,12432
 400d148:	dfc00915 	stw	ra,36(sp)
 400d14c:	2021883a 	mov	r16,r4
 400d150:	3823883a 	mov	r17,r7
 400d154:	14800017 	ldw	r18,0(r2)
 400d158:	28001426 	beq	r5,zero,400d1ac <_wcrtomb_r+0x7c>
 400d15c:	d9400415 	stw	r5,16(sp)
 400d160:	d9800515 	stw	r6,20(sp)
 400d164:	400bb080 	call	400bb08 <__locale_charset>
 400d168:	d9800517 	ldw	r6,20(sp)
 400d16c:	d9400417 	ldw	r5,16(sp)
 400d170:	100f883a 	mov	r7,r2
 400d174:	dc400015 	stw	r17,0(sp)
 400d178:	8009883a 	mov	r4,r16
 400d17c:	903ee83a 	callr	r18
 400d180:	00ffffc4 	movi	r3,-1
 400d184:	10c0031e 	bne	r2,r3,400d194 <_wcrtomb_r+0x64>
 400d188:	88000015 	stw	zero,0(r17)
 400d18c:	00c02284 	movi	r3,138
 400d190:	80c00015 	stw	r3,0(r16)
 400d194:	dfc00917 	ldw	ra,36(sp)
 400d198:	dc800817 	ldw	r18,32(sp)
 400d19c:	dc400717 	ldw	r17,28(sp)
 400d1a0:	dc000617 	ldw	r16,24(sp)
 400d1a4:	dec00a04 	addi	sp,sp,40
 400d1a8:	f800283a 	ret
 400d1ac:	400bb080 	call	400bb08 <__locale_charset>
 400d1b0:	100f883a 	mov	r7,r2
 400d1b4:	dc400015 	stw	r17,0(sp)
 400d1b8:	000d883a 	mov	r6,zero
 400d1bc:	d9400104 	addi	r5,sp,4
 400d1c0:	8009883a 	mov	r4,r16
 400d1c4:	903ee83a 	callr	r18
 400d1c8:	003fed06 	br	400d180 <__alt_data_end+0xfc00d180>

0400d1cc <wcrtomb>:
 400d1cc:	defff604 	addi	sp,sp,-40
 400d1d0:	00810074 	movhi	r2,1025
 400d1d4:	dc800615 	stw	r18,24(sp)
 400d1d8:	dc400515 	stw	r17,20(sp)
 400d1dc:	108c2004 	addi	r2,r2,12416
 400d1e0:	dfc00915 	stw	ra,36(sp)
 400d1e4:	dd000815 	stw	r20,32(sp)
 400d1e8:	dcc00715 	stw	r19,28(sp)
 400d1ec:	dc000415 	stw	r16,16(sp)
 400d1f0:	3025883a 	mov	r18,r6
 400d1f4:	14400017 	ldw	r17,0(r2)
 400d1f8:	20001926 	beq	r4,zero,400d260 <wcrtomb+0x94>
 400d1fc:	00810074 	movhi	r2,1025
 400d200:	108c2404 	addi	r2,r2,12432
 400d204:	15000017 	ldw	r20,0(r2)
 400d208:	2021883a 	mov	r16,r4
 400d20c:	2827883a 	mov	r19,r5
 400d210:	400bb080 	call	400bb08 <__locale_charset>
 400d214:	100f883a 	mov	r7,r2
 400d218:	dc800015 	stw	r18,0(sp)
 400d21c:	980d883a 	mov	r6,r19
 400d220:	800b883a 	mov	r5,r16
 400d224:	8809883a 	mov	r4,r17
 400d228:	a03ee83a 	callr	r20
 400d22c:	00ffffc4 	movi	r3,-1
 400d230:	10c0031e 	bne	r2,r3,400d240 <wcrtomb+0x74>
 400d234:	90000015 	stw	zero,0(r18)
 400d238:	00c02284 	movi	r3,138
 400d23c:	88c00015 	stw	r3,0(r17)
 400d240:	dfc00917 	ldw	ra,36(sp)
 400d244:	dd000817 	ldw	r20,32(sp)
 400d248:	dcc00717 	ldw	r19,28(sp)
 400d24c:	dc800617 	ldw	r18,24(sp)
 400d250:	dc400517 	ldw	r17,20(sp)
 400d254:	dc000417 	ldw	r16,16(sp)
 400d258:	dec00a04 	addi	sp,sp,40
 400d25c:	f800283a 	ret
 400d260:	00810074 	movhi	r2,1025
 400d264:	108c2404 	addi	r2,r2,12432
 400d268:	14000017 	ldw	r16,0(r2)
 400d26c:	400bb080 	call	400bb08 <__locale_charset>
 400d270:	100f883a 	mov	r7,r2
 400d274:	dc800015 	stw	r18,0(sp)
 400d278:	000d883a 	mov	r6,zero
 400d27c:	d9400104 	addi	r5,sp,4
 400d280:	8809883a 	mov	r4,r17
 400d284:	803ee83a 	callr	r16
 400d288:	003fe806 	br	400d22c <__alt_data_end+0xfc00d22c>

0400d28c <__ascii_wctomb>:
 400d28c:	28000526 	beq	r5,zero,400d2a4 <__ascii_wctomb+0x18>
 400d290:	00803fc4 	movi	r2,255
 400d294:	11800536 	bltu	r2,r6,400d2ac <__ascii_wctomb+0x20>
 400d298:	29800005 	stb	r6,0(r5)
 400d29c:	00800044 	movi	r2,1
 400d2a0:	f800283a 	ret
 400d2a4:	0005883a 	mov	r2,zero
 400d2a8:	f800283a 	ret
 400d2ac:	00802284 	movi	r2,138
 400d2b0:	20800015 	stw	r2,0(r4)
 400d2b4:	00bfffc4 	movi	r2,-1
 400d2b8:	f800283a 	ret

0400d2bc <_wctomb_r>:
 400d2bc:	00810074 	movhi	r2,1025
 400d2c0:	defff904 	addi	sp,sp,-28
 400d2c4:	108c2404 	addi	r2,r2,12432
 400d2c8:	dfc00615 	stw	ra,24(sp)
 400d2cc:	dc400515 	stw	r17,20(sp)
 400d2d0:	dc000415 	stw	r16,16(sp)
 400d2d4:	3823883a 	mov	r17,r7
 400d2d8:	14000017 	ldw	r16,0(r2)
 400d2dc:	d9000115 	stw	r4,4(sp)
 400d2e0:	d9400215 	stw	r5,8(sp)
 400d2e4:	d9800315 	stw	r6,12(sp)
 400d2e8:	400bb080 	call	400bb08 <__locale_charset>
 400d2ec:	d9800317 	ldw	r6,12(sp)
 400d2f0:	d9400217 	ldw	r5,8(sp)
 400d2f4:	d9000117 	ldw	r4,4(sp)
 400d2f8:	100f883a 	mov	r7,r2
 400d2fc:	dc400015 	stw	r17,0(sp)
 400d300:	803ee83a 	callr	r16
 400d304:	dfc00617 	ldw	ra,24(sp)
 400d308:	dc400517 	ldw	r17,20(sp)
 400d30c:	dc000417 	ldw	r16,16(sp)
 400d310:	dec00704 	addi	sp,sp,28
 400d314:	f800283a 	ret

0400d318 <_write_r>:
 400d318:	defffd04 	addi	sp,sp,-12
 400d31c:	2805883a 	mov	r2,r5
 400d320:	dc000015 	stw	r16,0(sp)
 400d324:	04010074 	movhi	r16,1025
 400d328:	dc400115 	stw	r17,4(sp)
 400d32c:	300b883a 	mov	r5,r6
 400d330:	84134004 	addi	r16,r16,19712
 400d334:	2023883a 	mov	r17,r4
 400d338:	380d883a 	mov	r6,r7
 400d33c:	1009883a 	mov	r4,r2
 400d340:	dfc00215 	stw	ra,8(sp)
 400d344:	80000015 	stw	zero,0(r16)
 400d348:	400ec840 	call	400ec84 <write>
 400d34c:	00ffffc4 	movi	r3,-1
 400d350:	10c00526 	beq	r2,r3,400d368 <_write_r+0x50>
 400d354:	dfc00217 	ldw	ra,8(sp)
 400d358:	dc400117 	ldw	r17,4(sp)
 400d35c:	dc000017 	ldw	r16,0(sp)
 400d360:	dec00304 	addi	sp,sp,12
 400d364:	f800283a 	ret
 400d368:	80c00017 	ldw	r3,0(r16)
 400d36c:	183ff926 	beq	r3,zero,400d354 <__alt_data_end+0xfc00d354>
 400d370:	88c00015 	stw	r3,0(r17)
 400d374:	003ff706 	br	400d354 <__alt_data_end+0xfc00d354>

0400d378 <_close_r>:
 400d378:	defffd04 	addi	sp,sp,-12
 400d37c:	dc000015 	stw	r16,0(sp)
 400d380:	04010074 	movhi	r16,1025
 400d384:	dc400115 	stw	r17,4(sp)
 400d388:	84134004 	addi	r16,r16,19712
 400d38c:	2023883a 	mov	r17,r4
 400d390:	2809883a 	mov	r4,r5
 400d394:	dfc00215 	stw	ra,8(sp)
 400d398:	80000015 	stw	zero,0(r16)
 400d39c:	400e23c0 	call	400e23c <close>
 400d3a0:	00ffffc4 	movi	r3,-1
 400d3a4:	10c00526 	beq	r2,r3,400d3bc <_close_r+0x44>
 400d3a8:	dfc00217 	ldw	ra,8(sp)
 400d3ac:	dc400117 	ldw	r17,4(sp)
 400d3b0:	dc000017 	ldw	r16,0(sp)
 400d3b4:	dec00304 	addi	sp,sp,12
 400d3b8:	f800283a 	ret
 400d3bc:	80c00017 	ldw	r3,0(r16)
 400d3c0:	183ff926 	beq	r3,zero,400d3a8 <__alt_data_end+0xfc00d3a8>
 400d3c4:	88c00015 	stw	r3,0(r17)
 400d3c8:	003ff706 	br	400d3a8 <__alt_data_end+0xfc00d3a8>

0400d3cc <_fclose_r>:
 400d3cc:	28003926 	beq	r5,zero,400d4b4 <_fclose_r+0xe8>
 400d3d0:	defffc04 	addi	sp,sp,-16
 400d3d4:	dc400115 	stw	r17,4(sp)
 400d3d8:	dc000015 	stw	r16,0(sp)
 400d3dc:	dfc00315 	stw	ra,12(sp)
 400d3e0:	dc800215 	stw	r18,8(sp)
 400d3e4:	2023883a 	mov	r17,r4
 400d3e8:	2821883a 	mov	r16,r5
 400d3ec:	20000226 	beq	r4,zero,400d3f8 <_fclose_r+0x2c>
 400d3f0:	20800e17 	ldw	r2,56(r4)
 400d3f4:	10002726 	beq	r2,zero,400d494 <_fclose_r+0xc8>
 400d3f8:	8080030f 	ldh	r2,12(r16)
 400d3fc:	1000071e 	bne	r2,zero,400d41c <_fclose_r+0x50>
 400d400:	0005883a 	mov	r2,zero
 400d404:	dfc00317 	ldw	ra,12(sp)
 400d408:	dc800217 	ldw	r18,8(sp)
 400d40c:	dc400117 	ldw	r17,4(sp)
 400d410:	dc000017 	ldw	r16,0(sp)
 400d414:	dec00404 	addi	sp,sp,16
 400d418:	f800283a 	ret
 400d41c:	800b883a 	mov	r5,r16
 400d420:	8809883a 	mov	r4,r17
 400d424:	400a7a80 	call	400a7a8 <__sflush_r>
 400d428:	1025883a 	mov	r18,r2
 400d42c:	80800b17 	ldw	r2,44(r16)
 400d430:	10000426 	beq	r2,zero,400d444 <_fclose_r+0x78>
 400d434:	81400717 	ldw	r5,28(r16)
 400d438:	8809883a 	mov	r4,r17
 400d43c:	103ee83a 	callr	r2
 400d440:	10001616 	blt	r2,zero,400d49c <_fclose_r+0xd0>
 400d444:	8080030b 	ldhu	r2,12(r16)
 400d448:	1080200c 	andi	r2,r2,128
 400d44c:	1000151e 	bne	r2,zero,400d4a4 <_fclose_r+0xd8>
 400d450:	81400c17 	ldw	r5,48(r16)
 400d454:	28000526 	beq	r5,zero,400d46c <_fclose_r+0xa0>
 400d458:	80801004 	addi	r2,r16,64
 400d45c:	28800226 	beq	r5,r2,400d468 <_fclose_r+0x9c>
 400d460:	8809883a 	mov	r4,r17
 400d464:	400b12c0 	call	400b12c <_free_r>
 400d468:	80000c15 	stw	zero,48(r16)
 400d46c:	81401117 	ldw	r5,68(r16)
 400d470:	28000326 	beq	r5,zero,400d480 <_fclose_r+0xb4>
 400d474:	8809883a 	mov	r4,r17
 400d478:	400b12c0 	call	400b12c <_free_r>
 400d47c:	80001115 	stw	zero,68(r16)
 400d480:	400adc00 	call	400adc0 <__sfp_lock_acquire>
 400d484:	8000030d 	sth	zero,12(r16)
 400d488:	400adc40 	call	400adc4 <__sfp_lock_release>
 400d48c:	9005883a 	mov	r2,r18
 400d490:	003fdc06 	br	400d404 <__alt_data_end+0xfc00d404>
 400d494:	400adb00 	call	400adb0 <__sinit>
 400d498:	003fd706 	br	400d3f8 <__alt_data_end+0xfc00d3f8>
 400d49c:	04bfffc4 	movi	r18,-1
 400d4a0:	003fe806 	br	400d444 <__alt_data_end+0xfc00d444>
 400d4a4:	81400417 	ldw	r5,16(r16)
 400d4a8:	8809883a 	mov	r4,r17
 400d4ac:	400b12c0 	call	400b12c <_free_r>
 400d4b0:	003fe706 	br	400d450 <__alt_data_end+0xfc00d450>
 400d4b4:	0005883a 	mov	r2,zero
 400d4b8:	f800283a 	ret

0400d4bc <fclose>:
 400d4bc:	00810074 	movhi	r2,1025
 400d4c0:	108c2004 	addi	r2,r2,12416
 400d4c4:	200b883a 	mov	r5,r4
 400d4c8:	11000017 	ldw	r4,0(r2)
 400d4cc:	400d3cc1 	jmpi	400d3cc <_fclose_r>

0400d4d0 <_fstat_r>:
 400d4d0:	defffd04 	addi	sp,sp,-12
 400d4d4:	2805883a 	mov	r2,r5
 400d4d8:	dc000015 	stw	r16,0(sp)
 400d4dc:	04010074 	movhi	r16,1025
 400d4e0:	dc400115 	stw	r17,4(sp)
 400d4e4:	84134004 	addi	r16,r16,19712
 400d4e8:	2023883a 	mov	r17,r4
 400d4ec:	300b883a 	mov	r5,r6
 400d4f0:	1009883a 	mov	r4,r2
 400d4f4:	dfc00215 	stw	ra,8(sp)
 400d4f8:	80000015 	stw	zero,0(r16)
 400d4fc:	400e3b00 	call	400e3b0 <fstat>
 400d500:	00ffffc4 	movi	r3,-1
 400d504:	10c00526 	beq	r2,r3,400d51c <_fstat_r+0x4c>
 400d508:	dfc00217 	ldw	ra,8(sp)
 400d50c:	dc400117 	ldw	r17,4(sp)
 400d510:	dc000017 	ldw	r16,0(sp)
 400d514:	dec00304 	addi	sp,sp,12
 400d518:	f800283a 	ret
 400d51c:	80c00017 	ldw	r3,0(r16)
 400d520:	183ff926 	beq	r3,zero,400d508 <__alt_data_end+0xfc00d508>
 400d524:	88c00015 	stw	r3,0(r17)
 400d528:	003ff706 	br	400d508 <__alt_data_end+0xfc00d508>

0400d52c <_isatty_r>:
 400d52c:	defffd04 	addi	sp,sp,-12
 400d530:	dc000015 	stw	r16,0(sp)
 400d534:	04010074 	movhi	r16,1025
 400d538:	dc400115 	stw	r17,4(sp)
 400d53c:	84134004 	addi	r16,r16,19712
 400d540:	2023883a 	mov	r17,r4
 400d544:	2809883a 	mov	r4,r5
 400d548:	dfc00215 	stw	ra,8(sp)
 400d54c:	80000015 	stw	zero,0(r16)
 400d550:	400e4c40 	call	400e4c4 <isatty>
 400d554:	00ffffc4 	movi	r3,-1
 400d558:	10c00526 	beq	r2,r3,400d570 <_isatty_r+0x44>
 400d55c:	dfc00217 	ldw	ra,8(sp)
 400d560:	dc400117 	ldw	r17,4(sp)
 400d564:	dc000017 	ldw	r16,0(sp)
 400d568:	dec00304 	addi	sp,sp,12
 400d56c:	f800283a 	ret
 400d570:	80c00017 	ldw	r3,0(r16)
 400d574:	183ff926 	beq	r3,zero,400d55c <__alt_data_end+0xfc00d55c>
 400d578:	88c00015 	stw	r3,0(r17)
 400d57c:	003ff706 	br	400d55c <__alt_data_end+0xfc00d55c>

0400d580 <_lseek_r>:
 400d580:	defffd04 	addi	sp,sp,-12
 400d584:	2805883a 	mov	r2,r5
 400d588:	dc000015 	stw	r16,0(sp)
 400d58c:	04010074 	movhi	r16,1025
 400d590:	dc400115 	stw	r17,4(sp)
 400d594:	300b883a 	mov	r5,r6
 400d598:	84134004 	addi	r16,r16,19712
 400d59c:	2023883a 	mov	r17,r4
 400d5a0:	380d883a 	mov	r6,r7
 400d5a4:	1009883a 	mov	r4,r2
 400d5a8:	dfc00215 	stw	ra,8(sp)
 400d5ac:	80000015 	stw	zero,0(r16)
 400d5b0:	400e8040 	call	400e804 <lseek>
 400d5b4:	00ffffc4 	movi	r3,-1
 400d5b8:	10c00526 	beq	r2,r3,400d5d0 <_lseek_r+0x50>
 400d5bc:	dfc00217 	ldw	ra,8(sp)
 400d5c0:	dc400117 	ldw	r17,4(sp)
 400d5c4:	dc000017 	ldw	r16,0(sp)
 400d5c8:	dec00304 	addi	sp,sp,12
 400d5cc:	f800283a 	ret
 400d5d0:	80c00017 	ldw	r3,0(r16)
 400d5d4:	183ff926 	beq	r3,zero,400d5bc <__alt_data_end+0xfc00d5bc>
 400d5d8:	88c00015 	stw	r3,0(r17)
 400d5dc:	003ff706 	br	400d5bc <__alt_data_end+0xfc00d5bc>

0400d5e0 <_read_r>:
 400d5e0:	defffd04 	addi	sp,sp,-12
 400d5e4:	2805883a 	mov	r2,r5
 400d5e8:	dc000015 	stw	r16,0(sp)
 400d5ec:	04010074 	movhi	r16,1025
 400d5f0:	dc400115 	stw	r17,4(sp)
 400d5f4:	300b883a 	mov	r5,r6
 400d5f8:	84134004 	addi	r16,r16,19712
 400d5fc:	2023883a 	mov	r17,r4
 400d600:	380d883a 	mov	r6,r7
 400d604:	1009883a 	mov	r4,r2
 400d608:	dfc00215 	stw	ra,8(sp)
 400d60c:	80000015 	stw	zero,0(r16)
 400d610:	400e9e00 	call	400e9e0 <read>
 400d614:	00ffffc4 	movi	r3,-1
 400d618:	10c00526 	beq	r2,r3,400d630 <_read_r+0x50>
 400d61c:	dfc00217 	ldw	ra,8(sp)
 400d620:	dc400117 	ldw	r17,4(sp)
 400d624:	dc000017 	ldw	r16,0(sp)
 400d628:	dec00304 	addi	sp,sp,12
 400d62c:	f800283a 	ret
 400d630:	80c00017 	ldw	r3,0(r16)
 400d634:	183ff926 	beq	r3,zero,400d61c <__alt_data_end+0xfc00d61c>
 400d638:	88c00015 	stw	r3,0(r17)
 400d63c:	003ff706 	br	400d61c <__alt_data_end+0xfc00d61c>

0400d640 <__udivdi3>:
 400d640:	defff404 	addi	sp,sp,-48
 400d644:	dcc00515 	stw	r19,20(sp)
 400d648:	dc000215 	stw	r16,8(sp)
 400d64c:	dfc00b15 	stw	ra,44(sp)
 400d650:	df000a15 	stw	fp,40(sp)
 400d654:	ddc00915 	stw	r23,36(sp)
 400d658:	dd800815 	stw	r22,32(sp)
 400d65c:	dd400715 	stw	r21,28(sp)
 400d660:	dd000615 	stw	r20,24(sp)
 400d664:	dc800415 	stw	r18,16(sp)
 400d668:	dc400315 	stw	r17,12(sp)
 400d66c:	2027883a 	mov	r19,r4
 400d670:	2821883a 	mov	r16,r5
 400d674:	3800461e 	bne	r7,zero,400d790 <__udivdi3+0x150>
 400d678:	3023883a 	mov	r17,r6
 400d67c:	2025883a 	mov	r18,r4
 400d680:	2980572e 	bgeu	r5,r6,400d7e0 <__udivdi3+0x1a0>
 400d684:	00bfffd4 	movui	r2,65535
 400d688:	282d883a 	mov	r22,r5
 400d68c:	1180b236 	bltu	r2,r6,400d958 <__udivdi3+0x318>
 400d690:	00803fc4 	movi	r2,255
 400d694:	1185803a 	cmpltu	r2,r2,r6
 400d698:	100490fa 	slli	r2,r2,3
 400d69c:	3086d83a 	srl	r3,r6,r2
 400d6a0:	01010074 	movhi	r4,1025
 400d6a4:	2104a944 	addi	r4,r4,4773
 400d6a8:	20c7883a 	add	r3,r4,r3
 400d6ac:	18c00003 	ldbu	r3,0(r3)
 400d6b0:	1885883a 	add	r2,r3,r2
 400d6b4:	00c00804 	movi	r3,32
 400d6b8:	1887c83a 	sub	r3,r3,r2
 400d6bc:	18000526 	beq	r3,zero,400d6d4 <__udivdi3+0x94>
 400d6c0:	80e0983a 	sll	r16,r16,r3
 400d6c4:	9884d83a 	srl	r2,r19,r2
 400d6c8:	30e2983a 	sll	r17,r6,r3
 400d6cc:	98e4983a 	sll	r18,r19,r3
 400d6d0:	142cb03a 	or	r22,r2,r16
 400d6d4:	882ad43a 	srli	r21,r17,16
 400d6d8:	b009883a 	mov	r4,r22
 400d6dc:	8d3fffcc 	andi	r20,r17,65535
 400d6e0:	a80b883a 	mov	r5,r21
 400d6e4:	40048580 	call	4004858 <__umodsi3>
 400d6e8:	b009883a 	mov	r4,r22
 400d6ec:	a80b883a 	mov	r5,r21
 400d6f0:	1027883a 	mov	r19,r2
 400d6f4:	40047f40 	call	40047f4 <__udivsi3>
 400d6f8:	100b883a 	mov	r5,r2
 400d6fc:	a009883a 	mov	r4,r20
 400d700:	102d883a 	mov	r22,r2
 400d704:	40048b00 	call	40048b0 <__mulsi3>
 400d708:	9826943a 	slli	r19,r19,16
 400d70c:	9006d43a 	srli	r3,r18,16
 400d710:	1cc6b03a 	or	r3,r3,r19
 400d714:	1880052e 	bgeu	r3,r2,400d72c <__udivdi3+0xec>
 400d718:	1c47883a 	add	r3,r3,r17
 400d71c:	b13fffc4 	addi	r4,r22,-1
 400d720:	1c400136 	bltu	r3,r17,400d728 <__udivdi3+0xe8>
 400d724:	18814236 	bltu	r3,r2,400dc30 <__udivdi3+0x5f0>
 400d728:	202d883a 	mov	r22,r4
 400d72c:	18a1c83a 	sub	r16,r3,r2
 400d730:	8009883a 	mov	r4,r16
 400d734:	a80b883a 	mov	r5,r21
 400d738:	40048580 	call	4004858 <__umodsi3>
 400d73c:	1027883a 	mov	r19,r2
 400d740:	8009883a 	mov	r4,r16
 400d744:	a80b883a 	mov	r5,r21
 400d748:	9826943a 	slli	r19,r19,16
 400d74c:	40047f40 	call	40047f4 <__udivsi3>
 400d750:	100b883a 	mov	r5,r2
 400d754:	a009883a 	mov	r4,r20
 400d758:	94bfffcc 	andi	r18,r18,65535
 400d75c:	1021883a 	mov	r16,r2
 400d760:	94e4b03a 	or	r18,r18,r19
 400d764:	40048b00 	call	40048b0 <__mulsi3>
 400d768:	9080052e 	bgeu	r18,r2,400d780 <__udivdi3+0x140>
 400d76c:	8ca5883a 	add	r18,r17,r18
 400d770:	80ffffc4 	addi	r3,r16,-1
 400d774:	94410c36 	bltu	r18,r17,400dba8 <__udivdi3+0x568>
 400d778:	90810b2e 	bgeu	r18,r2,400dba8 <__udivdi3+0x568>
 400d77c:	843fff84 	addi	r16,r16,-2
 400d780:	b004943a 	slli	r2,r22,16
 400d784:	0007883a 	mov	r3,zero
 400d788:	1404b03a 	or	r2,r2,r16
 400d78c:	00005e06 	br	400d908 <__udivdi3+0x2c8>
 400d790:	29c05b36 	bltu	r5,r7,400d900 <__udivdi3+0x2c0>
 400d794:	00bfffd4 	movui	r2,65535
 400d798:	11c0672e 	bgeu	r2,r7,400d938 <__udivdi3+0x2f8>
 400d79c:	00804034 	movhi	r2,256
 400d7a0:	10bfffc4 	addi	r2,r2,-1
 400d7a4:	11c10a36 	bltu	r2,r7,400dbd0 <__udivdi3+0x590>
 400d7a8:	00800404 	movi	r2,16
 400d7ac:	3886d83a 	srl	r3,r7,r2
 400d7b0:	01010074 	movhi	r4,1025
 400d7b4:	2104a944 	addi	r4,r4,4773
 400d7b8:	20c7883a 	add	r3,r4,r3
 400d7bc:	18c00003 	ldbu	r3,0(r3)
 400d7c0:	05c00804 	movi	r23,32
 400d7c4:	1885883a 	add	r2,r3,r2
 400d7c8:	b8afc83a 	sub	r23,r23,r2
 400d7cc:	b800671e 	bne	r23,zero,400d96c <__udivdi3+0x32c>
 400d7d0:	3c010536 	bltu	r7,r16,400dbe8 <__udivdi3+0x5a8>
 400d7d4:	9985403a 	cmpgeu	r2,r19,r6
 400d7d8:	0007883a 	mov	r3,zero
 400d7dc:	00004a06 	br	400d908 <__udivdi3+0x2c8>
 400d7e0:	3000041e 	bne	r6,zero,400d7f4 <__udivdi3+0x1b4>
 400d7e4:	000b883a 	mov	r5,zero
 400d7e8:	01000044 	movi	r4,1
 400d7ec:	40047f40 	call	40047f4 <__udivsi3>
 400d7f0:	1023883a 	mov	r17,r2
 400d7f4:	00bfffd4 	movui	r2,65535
 400d7f8:	1440532e 	bgeu	r2,r17,400d948 <__udivdi3+0x308>
 400d7fc:	00804034 	movhi	r2,256
 400d800:	10bfffc4 	addi	r2,r2,-1
 400d804:	1440f436 	bltu	r2,r17,400dbd8 <__udivdi3+0x598>
 400d808:	00800404 	movi	r2,16
 400d80c:	8886d83a 	srl	r3,r17,r2
 400d810:	01010074 	movhi	r4,1025
 400d814:	2104a944 	addi	r4,r4,4773
 400d818:	20c7883a 	add	r3,r4,r3
 400d81c:	18c00003 	ldbu	r3,0(r3)
 400d820:	1885883a 	add	r2,r3,r2
 400d824:	00c00804 	movi	r3,32
 400d828:	1887c83a 	sub	r3,r3,r2
 400d82c:	1800a51e 	bne	r3,zero,400dac4 <__udivdi3+0x484>
 400d830:	882ad43a 	srli	r21,r17,16
 400d834:	8461c83a 	sub	r16,r16,r17
 400d838:	8d3fffcc 	andi	r20,r17,65535
 400d83c:	00c00044 	movi	r3,1
 400d840:	a80b883a 	mov	r5,r21
 400d844:	8009883a 	mov	r4,r16
 400d848:	d8c00115 	stw	r3,4(sp)
 400d84c:	40048580 	call	4004858 <__umodsi3>
 400d850:	a80b883a 	mov	r5,r21
 400d854:	8009883a 	mov	r4,r16
 400d858:	1027883a 	mov	r19,r2
 400d85c:	40047f40 	call	40047f4 <__udivsi3>
 400d860:	a00b883a 	mov	r5,r20
 400d864:	1009883a 	mov	r4,r2
 400d868:	102d883a 	mov	r22,r2
 400d86c:	40048b00 	call	40048b0 <__mulsi3>
 400d870:	9826943a 	slli	r19,r19,16
 400d874:	900ed43a 	srli	r7,r18,16
 400d878:	d8c00117 	ldw	r3,4(sp)
 400d87c:	3cceb03a 	or	r7,r7,r19
 400d880:	3880052e 	bgeu	r7,r2,400d898 <__udivdi3+0x258>
 400d884:	3c4f883a 	add	r7,r7,r17
 400d888:	b13fffc4 	addi	r4,r22,-1
 400d88c:	3c400136 	bltu	r7,r17,400d894 <__udivdi3+0x254>
 400d890:	3880e436 	bltu	r7,r2,400dc24 <__udivdi3+0x5e4>
 400d894:	202d883a 	mov	r22,r4
 400d898:	38a1c83a 	sub	r16,r7,r2
 400d89c:	8009883a 	mov	r4,r16
 400d8a0:	a80b883a 	mov	r5,r21
 400d8a4:	d8c00115 	stw	r3,4(sp)
 400d8a8:	40048580 	call	4004858 <__umodsi3>
 400d8ac:	1027883a 	mov	r19,r2
 400d8b0:	8009883a 	mov	r4,r16
 400d8b4:	a80b883a 	mov	r5,r21
 400d8b8:	9826943a 	slli	r19,r19,16
 400d8bc:	40047f40 	call	40047f4 <__udivsi3>
 400d8c0:	a00b883a 	mov	r5,r20
 400d8c4:	1009883a 	mov	r4,r2
 400d8c8:	94bfffcc 	andi	r18,r18,65535
 400d8cc:	1021883a 	mov	r16,r2
 400d8d0:	94e4b03a 	or	r18,r18,r19
 400d8d4:	40048b00 	call	40048b0 <__mulsi3>
 400d8d8:	d8c00117 	ldw	r3,4(sp)
 400d8dc:	9080052e 	bgeu	r18,r2,400d8f4 <__udivdi3+0x2b4>
 400d8e0:	8ca5883a 	add	r18,r17,r18
 400d8e4:	813fffc4 	addi	r4,r16,-1
 400d8e8:	9440ad36 	bltu	r18,r17,400dba0 <__udivdi3+0x560>
 400d8ec:	9080ac2e 	bgeu	r18,r2,400dba0 <__udivdi3+0x560>
 400d8f0:	843fff84 	addi	r16,r16,-2
 400d8f4:	b004943a 	slli	r2,r22,16
 400d8f8:	1404b03a 	or	r2,r2,r16
 400d8fc:	00000206 	br	400d908 <__udivdi3+0x2c8>
 400d900:	0007883a 	mov	r3,zero
 400d904:	0005883a 	mov	r2,zero
 400d908:	dfc00b17 	ldw	ra,44(sp)
 400d90c:	df000a17 	ldw	fp,40(sp)
 400d910:	ddc00917 	ldw	r23,36(sp)
 400d914:	dd800817 	ldw	r22,32(sp)
 400d918:	dd400717 	ldw	r21,28(sp)
 400d91c:	dd000617 	ldw	r20,24(sp)
 400d920:	dcc00517 	ldw	r19,20(sp)
 400d924:	dc800417 	ldw	r18,16(sp)
 400d928:	dc400317 	ldw	r17,12(sp)
 400d92c:	dc000217 	ldw	r16,8(sp)
 400d930:	dec00c04 	addi	sp,sp,48
 400d934:	f800283a 	ret
 400d938:	00803fc4 	movi	r2,255
 400d93c:	11c5803a 	cmpltu	r2,r2,r7
 400d940:	100490fa 	slli	r2,r2,3
 400d944:	003f9906 	br	400d7ac <__alt_data_end+0xfc00d7ac>
 400d948:	00803fc4 	movi	r2,255
 400d94c:	1445803a 	cmpltu	r2,r2,r17
 400d950:	100490fa 	slli	r2,r2,3
 400d954:	003fad06 	br	400d80c <__alt_data_end+0xfc00d80c>
 400d958:	00804034 	movhi	r2,256
 400d95c:	10bfffc4 	addi	r2,r2,-1
 400d960:	11809f36 	bltu	r2,r6,400dbe0 <__udivdi3+0x5a0>
 400d964:	00800404 	movi	r2,16
 400d968:	003f4c06 	br	400d69c <__alt_data_end+0xfc00d69c>
 400d96c:	3dce983a 	sll	r7,r7,r23
 400d970:	30b8d83a 	srl	fp,r6,r2
 400d974:	80a2d83a 	srl	r17,r16,r2
 400d978:	35cc983a 	sll	r6,r6,r23
 400d97c:	3f38b03a 	or	fp,r7,fp
 400d980:	e024d43a 	srli	r18,fp,16
 400d984:	9884d83a 	srl	r2,r19,r2
 400d988:	85e0983a 	sll	r16,r16,r23
 400d98c:	8809883a 	mov	r4,r17
 400d990:	900b883a 	mov	r5,r18
 400d994:	d9800015 	stw	r6,0(sp)
 400d998:	1420b03a 	or	r16,r2,r16
 400d99c:	40048580 	call	4004858 <__umodsi3>
 400d9a0:	900b883a 	mov	r5,r18
 400d9a4:	8809883a 	mov	r4,r17
 400d9a8:	1029883a 	mov	r20,r2
 400d9ac:	e5bfffcc 	andi	r22,fp,65535
 400d9b0:	40047f40 	call	40047f4 <__udivsi3>
 400d9b4:	100b883a 	mov	r5,r2
 400d9b8:	b009883a 	mov	r4,r22
 400d9bc:	102b883a 	mov	r21,r2
 400d9c0:	40048b00 	call	40048b0 <__mulsi3>
 400d9c4:	a028943a 	slli	r20,r20,16
 400d9c8:	8006d43a 	srli	r3,r16,16
 400d9cc:	1d06b03a 	or	r3,r3,r20
 400d9d0:	1880042e 	bgeu	r3,r2,400d9e4 <__udivdi3+0x3a4>
 400d9d4:	1f07883a 	add	r3,r3,fp
 400d9d8:	a93fffc4 	addi	r4,r21,-1
 400d9dc:	1f00892e 	bgeu	r3,fp,400dc04 <__udivdi3+0x5c4>
 400d9e0:	202b883a 	mov	r21,r4
 400d9e4:	18a3c83a 	sub	r17,r3,r2
 400d9e8:	8809883a 	mov	r4,r17
 400d9ec:	900b883a 	mov	r5,r18
 400d9f0:	40048580 	call	4004858 <__umodsi3>
 400d9f4:	1029883a 	mov	r20,r2
 400d9f8:	8809883a 	mov	r4,r17
 400d9fc:	900b883a 	mov	r5,r18
 400da00:	a028943a 	slli	r20,r20,16
 400da04:	40047f40 	call	40047f4 <__udivsi3>
 400da08:	100b883a 	mov	r5,r2
 400da0c:	b009883a 	mov	r4,r22
 400da10:	843fffcc 	andi	r16,r16,65535
 400da14:	1023883a 	mov	r17,r2
 400da18:	8520b03a 	or	r16,r16,r20
 400da1c:	40048b00 	call	40048b0 <__mulsi3>
 400da20:	8080042e 	bgeu	r16,r2,400da34 <__udivdi3+0x3f4>
 400da24:	8721883a 	add	r16,r16,fp
 400da28:	88ffffc4 	addi	r3,r17,-1
 400da2c:	8700712e 	bgeu	r16,fp,400dbf4 <__udivdi3+0x5b4>
 400da30:	1823883a 	mov	r17,r3
 400da34:	a80e943a 	slli	r7,r21,16
 400da38:	d8c00017 	ldw	r3,0(sp)
 400da3c:	80a1c83a 	sub	r16,r16,r2
 400da40:	3c64b03a 	or	r18,r7,r17
 400da44:	1d3fffcc 	andi	r20,r3,65535
 400da48:	9022d43a 	srli	r17,r18,16
 400da4c:	95bfffcc 	andi	r22,r18,65535
 400da50:	a00b883a 	mov	r5,r20
 400da54:	b009883a 	mov	r4,r22
 400da58:	182ad43a 	srli	r21,r3,16
 400da5c:	40048b00 	call	40048b0 <__mulsi3>
 400da60:	a00b883a 	mov	r5,r20
 400da64:	8809883a 	mov	r4,r17
 400da68:	1039883a 	mov	fp,r2
 400da6c:	40048b00 	call	40048b0 <__mulsi3>
 400da70:	8809883a 	mov	r4,r17
 400da74:	a80b883a 	mov	r5,r21
 400da78:	1029883a 	mov	r20,r2
 400da7c:	40048b00 	call	40048b0 <__mulsi3>
 400da80:	a80b883a 	mov	r5,r21
 400da84:	b009883a 	mov	r4,r22
 400da88:	1023883a 	mov	r17,r2
 400da8c:	40048b00 	call	40048b0 <__mulsi3>
 400da90:	e006d43a 	srli	r3,fp,16
 400da94:	1505883a 	add	r2,r2,r20
 400da98:	1887883a 	add	r3,r3,r2
 400da9c:	1d00022e 	bgeu	r3,r20,400daa8 <__udivdi3+0x468>
 400daa0:	00800074 	movhi	r2,1
 400daa4:	88a3883a 	add	r17,r17,r2
 400daa8:	1804d43a 	srli	r2,r3,16
 400daac:	1463883a 	add	r17,r2,r17
 400dab0:	84404436 	bltu	r16,r17,400dbc4 <__udivdi3+0x584>
 400dab4:	84403e26 	beq	r16,r17,400dbb0 <__udivdi3+0x570>
 400dab8:	9005883a 	mov	r2,r18
 400dabc:	0007883a 	mov	r3,zero
 400dac0:	003f9106 	br	400d908 <__alt_data_end+0xfc00d908>
 400dac4:	88e2983a 	sll	r17,r17,r3
 400dac8:	80aed83a 	srl	r23,r16,r2
 400dacc:	80e0983a 	sll	r16,r16,r3
 400dad0:	882ad43a 	srli	r21,r17,16
 400dad4:	9884d83a 	srl	r2,r19,r2
 400dad8:	b809883a 	mov	r4,r23
 400dadc:	a80b883a 	mov	r5,r21
 400dae0:	98e4983a 	sll	r18,r19,r3
 400dae4:	142cb03a 	or	r22,r2,r16
 400dae8:	40048580 	call	4004858 <__umodsi3>
 400daec:	b809883a 	mov	r4,r23
 400daf0:	a80b883a 	mov	r5,r21
 400daf4:	1027883a 	mov	r19,r2
 400daf8:	8d3fffcc 	andi	r20,r17,65535
 400dafc:	40047f40 	call	40047f4 <__udivsi3>
 400db00:	a009883a 	mov	r4,r20
 400db04:	100b883a 	mov	r5,r2
 400db08:	102f883a 	mov	r23,r2
 400db0c:	40048b00 	call	40048b0 <__mulsi3>
 400db10:	9826943a 	slli	r19,r19,16
 400db14:	b008d43a 	srli	r4,r22,16
 400db18:	24c8b03a 	or	r4,r4,r19
 400db1c:	2080062e 	bgeu	r4,r2,400db38 <__udivdi3+0x4f8>
 400db20:	2449883a 	add	r4,r4,r17
 400db24:	b8ffffc4 	addi	r3,r23,-1
 400db28:	24403c36 	bltu	r4,r17,400dc1c <__udivdi3+0x5dc>
 400db2c:	20803b2e 	bgeu	r4,r2,400dc1c <__udivdi3+0x5dc>
 400db30:	bdffff84 	addi	r23,r23,-2
 400db34:	2449883a 	add	r4,r4,r17
 400db38:	20a1c83a 	sub	r16,r4,r2
 400db3c:	a80b883a 	mov	r5,r21
 400db40:	8009883a 	mov	r4,r16
 400db44:	40048580 	call	4004858 <__umodsi3>
 400db48:	a80b883a 	mov	r5,r21
 400db4c:	8009883a 	mov	r4,r16
 400db50:	1027883a 	mov	r19,r2
 400db54:	40047f40 	call	40047f4 <__udivsi3>
 400db58:	a009883a 	mov	r4,r20
 400db5c:	100b883a 	mov	r5,r2
 400db60:	9826943a 	slli	r19,r19,16
 400db64:	1039883a 	mov	fp,r2
 400db68:	40048b00 	call	40048b0 <__mulsi3>
 400db6c:	b13fffcc 	andi	r4,r22,65535
 400db70:	24c8b03a 	or	r4,r4,r19
 400db74:	2080062e 	bgeu	r4,r2,400db90 <__udivdi3+0x550>
 400db78:	2449883a 	add	r4,r4,r17
 400db7c:	e0ffffc4 	addi	r3,fp,-1
 400db80:	24402436 	bltu	r4,r17,400dc14 <__udivdi3+0x5d4>
 400db84:	2080232e 	bgeu	r4,r2,400dc14 <__udivdi3+0x5d4>
 400db88:	e73fff84 	addi	fp,fp,-2
 400db8c:	2449883a 	add	r4,r4,r17
 400db90:	b82e943a 	slli	r23,r23,16
 400db94:	20a1c83a 	sub	r16,r4,r2
 400db98:	bf06b03a 	or	r3,r23,fp
 400db9c:	003f2806 	br	400d840 <__alt_data_end+0xfc00d840>
 400dba0:	2021883a 	mov	r16,r4
 400dba4:	003f5306 	br	400d8f4 <__alt_data_end+0xfc00d8f4>
 400dba8:	1821883a 	mov	r16,r3
 400dbac:	003ef406 	br	400d780 <__alt_data_end+0xfc00d780>
 400dbb0:	1806943a 	slli	r3,r3,16
 400dbb4:	9de6983a 	sll	r19,r19,r23
 400dbb8:	e73fffcc 	andi	fp,fp,65535
 400dbbc:	1f07883a 	add	r3,r3,fp
 400dbc0:	98ffbd2e 	bgeu	r19,r3,400dab8 <__alt_data_end+0xfc00dab8>
 400dbc4:	90bfffc4 	addi	r2,r18,-1
 400dbc8:	0007883a 	mov	r3,zero
 400dbcc:	003f4e06 	br	400d908 <__alt_data_end+0xfc00d908>
 400dbd0:	00800604 	movi	r2,24
 400dbd4:	003ef506 	br	400d7ac <__alt_data_end+0xfc00d7ac>
 400dbd8:	00800604 	movi	r2,24
 400dbdc:	003f0b06 	br	400d80c <__alt_data_end+0xfc00d80c>
 400dbe0:	00800604 	movi	r2,24
 400dbe4:	003ead06 	br	400d69c <__alt_data_end+0xfc00d69c>
 400dbe8:	0007883a 	mov	r3,zero
 400dbec:	00800044 	movi	r2,1
 400dbf0:	003f4506 	br	400d908 <__alt_data_end+0xfc00d908>
 400dbf4:	80bf8e2e 	bgeu	r16,r2,400da30 <__alt_data_end+0xfc00da30>
 400dbf8:	8c7fff84 	addi	r17,r17,-2
 400dbfc:	8721883a 	add	r16,r16,fp
 400dc00:	003f8c06 	br	400da34 <__alt_data_end+0xfc00da34>
 400dc04:	18bf762e 	bgeu	r3,r2,400d9e0 <__alt_data_end+0xfc00d9e0>
 400dc08:	ad7fff84 	addi	r21,r21,-2
 400dc0c:	1f07883a 	add	r3,r3,fp
 400dc10:	003f7406 	br	400d9e4 <__alt_data_end+0xfc00d9e4>
 400dc14:	1839883a 	mov	fp,r3
 400dc18:	003fdd06 	br	400db90 <__alt_data_end+0xfc00db90>
 400dc1c:	182f883a 	mov	r23,r3
 400dc20:	003fc506 	br	400db38 <__alt_data_end+0xfc00db38>
 400dc24:	b5bfff84 	addi	r22,r22,-2
 400dc28:	3c4f883a 	add	r7,r7,r17
 400dc2c:	003f1a06 	br	400d898 <__alt_data_end+0xfc00d898>
 400dc30:	b5bfff84 	addi	r22,r22,-2
 400dc34:	1c47883a 	add	r3,r3,r17
 400dc38:	003ebc06 	br	400d72c <__alt_data_end+0xfc00d72c>

0400dc3c <__umoddi3>:
 400dc3c:	defff304 	addi	sp,sp,-52
 400dc40:	df000b15 	stw	fp,44(sp)
 400dc44:	dc400415 	stw	r17,16(sp)
 400dc48:	dc000315 	stw	r16,12(sp)
 400dc4c:	dfc00c15 	stw	ra,48(sp)
 400dc50:	ddc00a15 	stw	r23,40(sp)
 400dc54:	dd800915 	stw	r22,36(sp)
 400dc58:	dd400815 	stw	r21,32(sp)
 400dc5c:	dd000715 	stw	r20,28(sp)
 400dc60:	dcc00615 	stw	r19,24(sp)
 400dc64:	dc800515 	stw	r18,20(sp)
 400dc68:	2021883a 	mov	r16,r4
 400dc6c:	2823883a 	mov	r17,r5
 400dc70:	2839883a 	mov	fp,r5
 400dc74:	3800401e 	bne	r7,zero,400dd78 <__umoddi3+0x13c>
 400dc78:	3027883a 	mov	r19,r6
 400dc7c:	2029883a 	mov	r20,r4
 400dc80:	2980552e 	bgeu	r5,r6,400ddd8 <__umoddi3+0x19c>
 400dc84:	00bfffd4 	movui	r2,65535
 400dc88:	1180a236 	bltu	r2,r6,400df14 <__umoddi3+0x2d8>
 400dc8c:	01003fc4 	movi	r4,255
 400dc90:	2189803a 	cmpltu	r4,r4,r6
 400dc94:	200890fa 	slli	r4,r4,3
 400dc98:	3104d83a 	srl	r2,r6,r4
 400dc9c:	00c10074 	movhi	r3,1025
 400dca0:	18c4a944 	addi	r3,r3,4773
 400dca4:	1885883a 	add	r2,r3,r2
 400dca8:	10c00003 	ldbu	r3,0(r2)
 400dcac:	00800804 	movi	r2,32
 400dcb0:	1909883a 	add	r4,r3,r4
 400dcb4:	1125c83a 	sub	r18,r2,r4
 400dcb8:	90000526 	beq	r18,zero,400dcd0 <__umoddi3+0x94>
 400dcbc:	8ca2983a 	sll	r17,r17,r18
 400dcc0:	8108d83a 	srl	r4,r16,r4
 400dcc4:	34a6983a 	sll	r19,r6,r18
 400dcc8:	84a8983a 	sll	r20,r16,r18
 400dccc:	2478b03a 	or	fp,r4,r17
 400dcd0:	982cd43a 	srli	r22,r19,16
 400dcd4:	e009883a 	mov	r4,fp
 400dcd8:	9dffffcc 	andi	r23,r19,65535
 400dcdc:	b00b883a 	mov	r5,r22
 400dce0:	40048580 	call	4004858 <__umodsi3>
 400dce4:	b00b883a 	mov	r5,r22
 400dce8:	e009883a 	mov	r4,fp
 400dcec:	102b883a 	mov	r21,r2
 400dcf0:	40047f40 	call	40047f4 <__udivsi3>
 400dcf4:	100b883a 	mov	r5,r2
 400dcf8:	b809883a 	mov	r4,r23
 400dcfc:	40048b00 	call	40048b0 <__mulsi3>
 400dd00:	a82a943a 	slli	r21,r21,16
 400dd04:	a006d43a 	srli	r3,r20,16
 400dd08:	1d46b03a 	or	r3,r3,r21
 400dd0c:	1880032e 	bgeu	r3,r2,400dd1c <__umoddi3+0xe0>
 400dd10:	1cc7883a 	add	r3,r3,r19
 400dd14:	1cc00136 	bltu	r3,r19,400dd1c <__umoddi3+0xe0>
 400dd18:	18813136 	bltu	r3,r2,400e1e0 <__umoddi3+0x5a4>
 400dd1c:	18a1c83a 	sub	r16,r3,r2
 400dd20:	b00b883a 	mov	r5,r22
 400dd24:	8009883a 	mov	r4,r16
 400dd28:	40048580 	call	4004858 <__umodsi3>
 400dd2c:	b00b883a 	mov	r5,r22
 400dd30:	8009883a 	mov	r4,r16
 400dd34:	1023883a 	mov	r17,r2
 400dd38:	40047f40 	call	40047f4 <__udivsi3>
 400dd3c:	100b883a 	mov	r5,r2
 400dd40:	b809883a 	mov	r4,r23
 400dd44:	8822943a 	slli	r17,r17,16
 400dd48:	40048b00 	call	40048b0 <__mulsi3>
 400dd4c:	a0ffffcc 	andi	r3,r20,65535
 400dd50:	1c46b03a 	or	r3,r3,r17
 400dd54:	1880042e 	bgeu	r3,r2,400dd68 <__umoddi3+0x12c>
 400dd58:	1cc7883a 	add	r3,r3,r19
 400dd5c:	1cc00236 	bltu	r3,r19,400dd68 <__umoddi3+0x12c>
 400dd60:	1880012e 	bgeu	r3,r2,400dd68 <__umoddi3+0x12c>
 400dd64:	1cc7883a 	add	r3,r3,r19
 400dd68:	1885c83a 	sub	r2,r3,r2
 400dd6c:	1484d83a 	srl	r2,r2,r18
 400dd70:	0007883a 	mov	r3,zero
 400dd74:	00005306 	br	400dec4 <__umoddi3+0x288>
 400dd78:	29c05036 	bltu	r5,r7,400debc <__umoddi3+0x280>
 400dd7c:	00bfffd4 	movui	r2,65535
 400dd80:	11c05c2e 	bgeu	r2,r7,400def4 <__umoddi3+0x2b8>
 400dd84:	00804034 	movhi	r2,256
 400dd88:	10bfffc4 	addi	r2,r2,-1
 400dd8c:	11c10636 	bltu	r2,r7,400e1a8 <__umoddi3+0x56c>
 400dd90:	01000404 	movi	r4,16
 400dd94:	3904d83a 	srl	r2,r7,r4
 400dd98:	00c10074 	movhi	r3,1025
 400dd9c:	18c4a944 	addi	r3,r3,4773
 400dda0:	1885883a 	add	r2,r3,r2
 400dda4:	14c00003 	ldbu	r19,0(r2)
 400dda8:	00c00804 	movi	r3,32
 400ddac:	9927883a 	add	r19,r19,r4
 400ddb0:	1ce9c83a 	sub	r20,r3,r19
 400ddb4:	a0005c1e 	bne	r20,zero,400df28 <__umoddi3+0x2ec>
 400ddb8:	3c400136 	bltu	r7,r17,400ddc0 <__umoddi3+0x184>
 400ddbc:	81810a36 	bltu	r16,r6,400e1e8 <__umoddi3+0x5ac>
 400ddc0:	8185c83a 	sub	r2,r16,r6
 400ddc4:	89e3c83a 	sub	r17,r17,r7
 400ddc8:	8089803a 	cmpltu	r4,r16,r2
 400ddcc:	8939c83a 	sub	fp,r17,r4
 400ddd0:	e007883a 	mov	r3,fp
 400ddd4:	00003b06 	br	400dec4 <__umoddi3+0x288>
 400ddd8:	3000041e 	bne	r6,zero,400ddec <__umoddi3+0x1b0>
 400dddc:	000b883a 	mov	r5,zero
 400dde0:	01000044 	movi	r4,1
 400dde4:	40047f40 	call	40047f4 <__udivsi3>
 400dde8:	1027883a 	mov	r19,r2
 400ddec:	00bfffd4 	movui	r2,65535
 400ddf0:	14c0442e 	bgeu	r2,r19,400df04 <__umoddi3+0x2c8>
 400ddf4:	00804034 	movhi	r2,256
 400ddf8:	10bfffc4 	addi	r2,r2,-1
 400ddfc:	14c0ec36 	bltu	r2,r19,400e1b0 <__umoddi3+0x574>
 400de00:	00800404 	movi	r2,16
 400de04:	9886d83a 	srl	r3,r19,r2
 400de08:	01010074 	movhi	r4,1025
 400de0c:	2104a944 	addi	r4,r4,4773
 400de10:	20c7883a 	add	r3,r4,r3
 400de14:	18c00003 	ldbu	r3,0(r3)
 400de18:	1887883a 	add	r3,r3,r2
 400de1c:	00800804 	movi	r2,32
 400de20:	10e5c83a 	sub	r18,r2,r3
 400de24:	9000ab1e 	bne	r18,zero,400e0d4 <__umoddi3+0x498>
 400de28:	982cd43a 	srli	r22,r19,16
 400de2c:	8ce3c83a 	sub	r17,r17,r19
 400de30:	9dffffcc 	andi	r23,r19,65535
 400de34:	b00b883a 	mov	r5,r22
 400de38:	8809883a 	mov	r4,r17
 400de3c:	40048580 	call	4004858 <__umodsi3>
 400de40:	b00b883a 	mov	r5,r22
 400de44:	8809883a 	mov	r4,r17
 400de48:	102b883a 	mov	r21,r2
 400de4c:	40047f40 	call	40047f4 <__udivsi3>
 400de50:	b80b883a 	mov	r5,r23
 400de54:	1009883a 	mov	r4,r2
 400de58:	40048b00 	call	40048b0 <__mulsi3>
 400de5c:	a82a943a 	slli	r21,r21,16
 400de60:	a006d43a 	srli	r3,r20,16
 400de64:	1d46b03a 	or	r3,r3,r21
 400de68:	1880042e 	bgeu	r3,r2,400de7c <__umoddi3+0x240>
 400de6c:	1cc7883a 	add	r3,r3,r19
 400de70:	1cc00236 	bltu	r3,r19,400de7c <__umoddi3+0x240>
 400de74:	1880012e 	bgeu	r3,r2,400de7c <__umoddi3+0x240>
 400de78:	1cc7883a 	add	r3,r3,r19
 400de7c:	18a1c83a 	sub	r16,r3,r2
 400de80:	b00b883a 	mov	r5,r22
 400de84:	8009883a 	mov	r4,r16
 400de88:	40048580 	call	4004858 <__umodsi3>
 400de8c:	1023883a 	mov	r17,r2
 400de90:	b00b883a 	mov	r5,r22
 400de94:	8009883a 	mov	r4,r16
 400de98:	40047f40 	call	40047f4 <__udivsi3>
 400de9c:	8822943a 	slli	r17,r17,16
 400dea0:	b80b883a 	mov	r5,r23
 400dea4:	1009883a 	mov	r4,r2
 400dea8:	40048b00 	call	40048b0 <__mulsi3>
 400deac:	a53fffcc 	andi	r20,r20,65535
 400deb0:	a446b03a 	or	r3,r20,r17
 400deb4:	18bfac2e 	bgeu	r3,r2,400dd68 <__alt_data_end+0xfc00dd68>
 400deb8:	003fa706 	br	400dd58 <__alt_data_end+0xfc00dd58>
 400debc:	2005883a 	mov	r2,r4
 400dec0:	2807883a 	mov	r3,r5
 400dec4:	dfc00c17 	ldw	ra,48(sp)
 400dec8:	df000b17 	ldw	fp,44(sp)
 400decc:	ddc00a17 	ldw	r23,40(sp)
 400ded0:	dd800917 	ldw	r22,36(sp)
 400ded4:	dd400817 	ldw	r21,32(sp)
 400ded8:	dd000717 	ldw	r20,28(sp)
 400dedc:	dcc00617 	ldw	r19,24(sp)
 400dee0:	dc800517 	ldw	r18,20(sp)
 400dee4:	dc400417 	ldw	r17,16(sp)
 400dee8:	dc000317 	ldw	r16,12(sp)
 400deec:	dec00d04 	addi	sp,sp,52
 400def0:	f800283a 	ret
 400def4:	04c03fc4 	movi	r19,255
 400def8:	99c9803a 	cmpltu	r4,r19,r7
 400defc:	200890fa 	slli	r4,r4,3
 400df00:	003fa406 	br	400dd94 <__alt_data_end+0xfc00dd94>
 400df04:	00803fc4 	movi	r2,255
 400df08:	14c5803a 	cmpltu	r2,r2,r19
 400df0c:	100490fa 	slli	r2,r2,3
 400df10:	003fbc06 	br	400de04 <__alt_data_end+0xfc00de04>
 400df14:	00804034 	movhi	r2,256
 400df18:	10bfffc4 	addi	r2,r2,-1
 400df1c:	1180a636 	bltu	r2,r6,400e1b8 <__umoddi3+0x57c>
 400df20:	01000404 	movi	r4,16
 400df24:	003f5c06 	br	400dc98 <__alt_data_end+0xfc00dc98>
 400df28:	3d0e983a 	sll	r7,r7,r20
 400df2c:	34ead83a 	srl	r21,r6,r19
 400df30:	8cc6d83a 	srl	r3,r17,r19
 400df34:	8d10983a 	sll	r8,r17,r20
 400df38:	3d6ab03a 	or	r21,r7,r21
 400df3c:	a82cd43a 	srli	r22,r21,16
 400df40:	84e2d83a 	srl	r17,r16,r19
 400df44:	1809883a 	mov	r4,r3
 400df48:	b00b883a 	mov	r5,r22
 400df4c:	8a22b03a 	or	r17,r17,r8
 400df50:	3524983a 	sll	r18,r6,r20
 400df54:	dc400015 	stw	r17,0(sp)
 400df58:	d8c00115 	stw	r3,4(sp)
 400df5c:	40048580 	call	4004858 <__umodsi3>
 400df60:	d8c00117 	ldw	r3,4(sp)
 400df64:	b00b883a 	mov	r5,r22
 400df68:	1039883a 	mov	fp,r2
 400df6c:	1809883a 	mov	r4,r3
 400df70:	40047f40 	call	40047f4 <__udivsi3>
 400df74:	adffffcc 	andi	r23,r21,65535
 400df78:	100b883a 	mov	r5,r2
 400df7c:	b809883a 	mov	r4,r23
 400df80:	1023883a 	mov	r17,r2
 400df84:	40048b00 	call	40048b0 <__mulsi3>
 400df88:	d9400017 	ldw	r5,0(sp)
 400df8c:	e008943a 	slli	r4,fp,16
 400df90:	8520983a 	sll	r16,r16,r20
 400df94:	2806d43a 	srli	r3,r5,16
 400df98:	1906b03a 	or	r3,r3,r4
 400df9c:	1880042e 	bgeu	r3,r2,400dfb0 <__umoddi3+0x374>
 400dfa0:	1d47883a 	add	r3,r3,r21
 400dfa4:	893fffc4 	addi	r4,r17,-1
 400dfa8:	1d40892e 	bgeu	r3,r21,400e1d0 <__umoddi3+0x594>
 400dfac:	2023883a 	mov	r17,r4
 400dfb0:	18b9c83a 	sub	fp,r3,r2
 400dfb4:	b00b883a 	mov	r5,r22
 400dfb8:	e009883a 	mov	r4,fp
 400dfbc:	40048580 	call	4004858 <__umodsi3>
 400dfc0:	b00b883a 	mov	r5,r22
 400dfc4:	e009883a 	mov	r4,fp
 400dfc8:	d8800215 	stw	r2,8(sp)
 400dfcc:	40047f40 	call	40047f4 <__udivsi3>
 400dfd0:	100b883a 	mov	r5,r2
 400dfd4:	b809883a 	mov	r4,r23
 400dfd8:	102d883a 	mov	r22,r2
 400dfdc:	40048b00 	call	40048b0 <__mulsi3>
 400dfe0:	d9800217 	ldw	r6,8(sp)
 400dfe4:	d8c00017 	ldw	r3,0(sp)
 400dfe8:	300c943a 	slli	r6,r6,16
 400dfec:	1a3fffcc 	andi	r8,r3,65535
 400dff0:	4190b03a 	or	r8,r8,r6
 400dff4:	4080042e 	bgeu	r8,r2,400e008 <__umoddi3+0x3cc>
 400dff8:	4551883a 	add	r8,r8,r21
 400dffc:	b0ffffc4 	addi	r3,r22,-1
 400e000:	45406f2e 	bgeu	r8,r21,400e1c0 <__umoddi3+0x584>
 400e004:	182d883a 	mov	r22,r3
 400e008:	880e943a 	slli	r7,r17,16
 400e00c:	9006d43a 	srli	r3,r18,16
 400e010:	91bfffcc 	andi	r6,r18,65535
 400e014:	3dacb03a 	or	r22,r7,r22
 400e018:	b02ed43a 	srli	r23,r22,16
 400e01c:	b5bfffcc 	andi	r22,r22,65535
 400e020:	300b883a 	mov	r5,r6
 400e024:	b009883a 	mov	r4,r22
 400e028:	40a3c83a 	sub	r17,r8,r2
 400e02c:	d8c00115 	stw	r3,4(sp)
 400e030:	d9800215 	stw	r6,8(sp)
 400e034:	40048b00 	call	40048b0 <__mulsi3>
 400e038:	d9800217 	ldw	r6,8(sp)
 400e03c:	b809883a 	mov	r4,r23
 400e040:	1039883a 	mov	fp,r2
 400e044:	300b883a 	mov	r5,r6
 400e048:	40048b00 	call	40048b0 <__mulsi3>
 400e04c:	d8c00117 	ldw	r3,4(sp)
 400e050:	b809883a 	mov	r4,r23
 400e054:	d8800215 	stw	r2,8(sp)
 400e058:	180b883a 	mov	r5,r3
 400e05c:	40048b00 	call	40048b0 <__mulsi3>
 400e060:	d8c00117 	ldw	r3,4(sp)
 400e064:	b009883a 	mov	r4,r22
 400e068:	102f883a 	mov	r23,r2
 400e06c:	180b883a 	mov	r5,r3
 400e070:	40048b00 	call	40048b0 <__mulsi3>
 400e074:	d9800217 	ldw	r6,8(sp)
 400e078:	e006d43a 	srli	r3,fp,16
 400e07c:	1185883a 	add	r2,r2,r6
 400e080:	1885883a 	add	r2,r3,r2
 400e084:	1180022e 	bgeu	r2,r6,400e090 <__umoddi3+0x454>
 400e088:	00c00074 	movhi	r3,1
 400e08c:	b8ef883a 	add	r23,r23,r3
 400e090:	1006d43a 	srli	r3,r2,16
 400e094:	1004943a 	slli	r2,r2,16
 400e098:	e73fffcc 	andi	fp,fp,65535
 400e09c:	1dc7883a 	add	r3,r3,r23
 400e0a0:	1739883a 	add	fp,r2,fp
 400e0a4:	88c03a36 	bltu	r17,r3,400e190 <__umoddi3+0x554>
 400e0a8:	88c05126 	beq	r17,r3,400e1f0 <__umoddi3+0x5b4>
 400e0ac:	88c9c83a 	sub	r4,r17,r3
 400e0b0:	e00f883a 	mov	r7,fp
 400e0b4:	81cfc83a 	sub	r7,r16,r7
 400e0b8:	81c7803a 	cmpltu	r3,r16,r7
 400e0bc:	20c7c83a 	sub	r3,r4,r3
 400e0c0:	1cc4983a 	sll	r2,r3,r19
 400e0c4:	3d0ed83a 	srl	r7,r7,r20
 400e0c8:	1d06d83a 	srl	r3,r3,r20
 400e0cc:	11c4b03a 	or	r2,r2,r7
 400e0d0:	003f7c06 	br	400dec4 <__alt_data_end+0xfc00dec4>
 400e0d4:	9ca6983a 	sll	r19,r19,r18
 400e0d8:	88f8d83a 	srl	fp,r17,r3
 400e0dc:	80c4d83a 	srl	r2,r16,r3
 400e0e0:	982cd43a 	srli	r22,r19,16
 400e0e4:	8ca2983a 	sll	r17,r17,r18
 400e0e8:	e009883a 	mov	r4,fp
 400e0ec:	b00b883a 	mov	r5,r22
 400e0f0:	146ab03a 	or	r21,r2,r17
 400e0f4:	40048580 	call	4004858 <__umodsi3>
 400e0f8:	b00b883a 	mov	r5,r22
 400e0fc:	e009883a 	mov	r4,fp
 400e100:	1029883a 	mov	r20,r2
 400e104:	9dffffcc 	andi	r23,r19,65535
 400e108:	40047f40 	call	40047f4 <__udivsi3>
 400e10c:	b809883a 	mov	r4,r23
 400e110:	100b883a 	mov	r5,r2
 400e114:	40048b00 	call	40048b0 <__mulsi3>
 400e118:	a008943a 	slli	r4,r20,16
 400e11c:	a806d43a 	srli	r3,r21,16
 400e120:	84a8983a 	sll	r20,r16,r18
 400e124:	1906b03a 	or	r3,r3,r4
 400e128:	1880042e 	bgeu	r3,r2,400e13c <__umoddi3+0x500>
 400e12c:	1cc7883a 	add	r3,r3,r19
 400e130:	1cc00236 	bltu	r3,r19,400e13c <__umoddi3+0x500>
 400e134:	1880012e 	bgeu	r3,r2,400e13c <__umoddi3+0x500>
 400e138:	1cc7883a 	add	r3,r3,r19
 400e13c:	18a3c83a 	sub	r17,r3,r2
 400e140:	b00b883a 	mov	r5,r22
 400e144:	8809883a 	mov	r4,r17
 400e148:	40048580 	call	4004858 <__umodsi3>
 400e14c:	b00b883a 	mov	r5,r22
 400e150:	8809883a 	mov	r4,r17
 400e154:	1021883a 	mov	r16,r2
 400e158:	40047f40 	call	40047f4 <__udivsi3>
 400e15c:	100b883a 	mov	r5,r2
 400e160:	b809883a 	mov	r4,r23
 400e164:	8020943a 	slli	r16,r16,16
 400e168:	40048b00 	call	40048b0 <__mulsi3>
 400e16c:	a8ffffcc 	andi	r3,r21,65535
 400e170:	1c06b03a 	or	r3,r3,r16
 400e174:	1880042e 	bgeu	r3,r2,400e188 <__umoddi3+0x54c>
 400e178:	1cc7883a 	add	r3,r3,r19
 400e17c:	1cc00236 	bltu	r3,r19,400e188 <__umoddi3+0x54c>
 400e180:	1880012e 	bgeu	r3,r2,400e188 <__umoddi3+0x54c>
 400e184:	1cc7883a 	add	r3,r3,r19
 400e188:	18a3c83a 	sub	r17,r3,r2
 400e18c:	003f2906 	br	400de34 <__alt_data_end+0xfc00de34>
 400e190:	e48fc83a 	sub	r7,fp,r18
 400e194:	1d49c83a 	sub	r4,r3,r21
 400e198:	e1f9803a 	cmpltu	fp,fp,r7
 400e19c:	2739c83a 	sub	fp,r4,fp
 400e1a0:	8f09c83a 	sub	r4,r17,fp
 400e1a4:	003fc306 	br	400e0b4 <__alt_data_end+0xfc00e0b4>
 400e1a8:	01000604 	movi	r4,24
 400e1ac:	003ef906 	br	400dd94 <__alt_data_end+0xfc00dd94>
 400e1b0:	00800604 	movi	r2,24
 400e1b4:	003f1306 	br	400de04 <__alt_data_end+0xfc00de04>
 400e1b8:	01000604 	movi	r4,24
 400e1bc:	003eb606 	br	400dc98 <__alt_data_end+0xfc00dc98>
 400e1c0:	40bf902e 	bgeu	r8,r2,400e004 <__alt_data_end+0xfc00e004>
 400e1c4:	b5bfff84 	addi	r22,r22,-2
 400e1c8:	4551883a 	add	r8,r8,r21
 400e1cc:	003f8e06 	br	400e008 <__alt_data_end+0xfc00e008>
 400e1d0:	18bf762e 	bgeu	r3,r2,400dfac <__alt_data_end+0xfc00dfac>
 400e1d4:	8c7fff84 	addi	r17,r17,-2
 400e1d8:	1d47883a 	add	r3,r3,r21
 400e1dc:	003f7406 	br	400dfb0 <__alt_data_end+0xfc00dfb0>
 400e1e0:	1cc7883a 	add	r3,r3,r19
 400e1e4:	003ecd06 	br	400dd1c <__alt_data_end+0xfc00dd1c>
 400e1e8:	8005883a 	mov	r2,r16
 400e1ec:	003ef806 	br	400ddd0 <__alt_data_end+0xfc00ddd0>
 400e1f0:	873fe736 	bltu	r16,fp,400e190 <__alt_data_end+0xfc00e190>
 400e1f4:	e00f883a 	mov	r7,fp
 400e1f8:	0009883a 	mov	r4,zero
 400e1fc:	003fad06 	br	400e0b4 <__alt_data_end+0xfc00e0b4>

0400e200 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e200:	defffe04 	addi	sp,sp,-8
 400e204:	dfc00115 	stw	ra,4(sp)
 400e208:	df000015 	stw	fp,0(sp)
 400e20c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e210:	d0a01717 	ldw	r2,-32676(gp)
 400e214:	10000326 	beq	r2,zero,400e224 <alt_get_errno+0x24>
 400e218:	d0a01717 	ldw	r2,-32676(gp)
 400e21c:	103ee83a 	callr	r2
 400e220:	00000106 	br	400e228 <alt_get_errno+0x28>
 400e224:	d0a72d04 	addi	r2,gp,-25420
}
 400e228:	e037883a 	mov	sp,fp
 400e22c:	dfc00117 	ldw	ra,4(sp)
 400e230:	df000017 	ldw	fp,0(sp)
 400e234:	dec00204 	addi	sp,sp,8
 400e238:	f800283a 	ret

0400e23c <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
 400e23c:	defffb04 	addi	sp,sp,-20
 400e240:	dfc00415 	stw	ra,16(sp)
 400e244:	df000315 	stw	fp,12(sp)
 400e248:	df000304 	addi	fp,sp,12
 400e24c:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
 400e250:	e0bfff17 	ldw	r2,-4(fp)
 400e254:	10000816 	blt	r2,zero,400e278 <close+0x3c>
 400e258:	01400304 	movi	r5,12
 400e25c:	e13fff17 	ldw	r4,-4(fp)
 400e260:	40048b00 	call	40048b0 <__mulsi3>
 400e264:	1007883a 	mov	r3,r2
 400e268:	00810074 	movhi	r2,1025
 400e26c:	10878404 	addi	r2,r2,7696
 400e270:	1885883a 	add	r2,r3,r2
 400e274:	00000106 	br	400e27c <close+0x40>
 400e278:	0005883a 	mov	r2,zero
 400e27c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
 400e280:	e0bffd17 	ldw	r2,-12(fp)
 400e284:	10001926 	beq	r2,zero,400e2ec <close+0xb0>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
 400e288:	e0bffd17 	ldw	r2,-12(fp)
 400e28c:	10800017 	ldw	r2,0(r2)
 400e290:	10800417 	ldw	r2,16(r2)
 400e294:	10000626 	beq	r2,zero,400e2b0 <close+0x74>
 400e298:	e0bffd17 	ldw	r2,-12(fp)
 400e29c:	10800017 	ldw	r2,0(r2)
 400e2a0:	10800417 	ldw	r2,16(r2)
 400e2a4:	e13ffd17 	ldw	r4,-12(fp)
 400e2a8:	103ee83a 	callr	r2
 400e2ac:	00000106 	br	400e2b4 <close+0x78>
 400e2b0:	0005883a 	mov	r2,zero
 400e2b4:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
 400e2b8:	e13fff17 	ldw	r4,-4(fp)
 400e2bc:	400eae40 	call	400eae4 <alt_release_fd>
    if (rval < 0)
 400e2c0:	e0bffe17 	ldw	r2,-8(fp)
 400e2c4:	1000070e 	bge	r2,zero,400e2e4 <close+0xa8>
    {
      ALT_ERRNO = -rval;
 400e2c8:	400e2000 	call	400e200 <alt_get_errno>
 400e2cc:	1007883a 	mov	r3,r2
 400e2d0:	e0bffe17 	ldw	r2,-8(fp)
 400e2d4:	0085c83a 	sub	r2,zero,r2
 400e2d8:	18800015 	stw	r2,0(r3)
      return -1;
 400e2dc:	00bfffc4 	movi	r2,-1
 400e2e0:	00000706 	br	400e300 <close+0xc4>
    }
    return 0;
 400e2e4:	0005883a 	mov	r2,zero
 400e2e8:	00000506 	br	400e300 <close+0xc4>
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400e2ec:	400e2000 	call	400e200 <alt_get_errno>
 400e2f0:	1007883a 	mov	r3,r2
 400e2f4:	00801444 	movi	r2,81
 400e2f8:	18800015 	stw	r2,0(r3)
    return -1;
 400e2fc:	00bfffc4 	movi	r2,-1
  }
}
 400e300:	e037883a 	mov	sp,fp
 400e304:	dfc00117 	ldw	ra,4(sp)
 400e308:	df000017 	ldw	fp,0(sp)
 400e30c:	dec00204 	addi	sp,sp,8
 400e310:	f800283a 	ret

0400e314 <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
 400e314:	defffc04 	addi	sp,sp,-16
 400e318:	df000315 	stw	fp,12(sp)
 400e31c:	df000304 	addi	fp,sp,12
 400e320:	e13ffd15 	stw	r4,-12(fp)
 400e324:	e17ffe15 	stw	r5,-8(fp)
 400e328:	e1bfff15 	stw	r6,-4(fp)
  return len;
 400e32c:	e0bfff17 	ldw	r2,-4(fp)
}
 400e330:	e037883a 	mov	sp,fp
 400e334:	df000017 	ldw	fp,0(sp)
 400e338:	dec00104 	addi	sp,sp,4
 400e33c:	f800283a 	ret

0400e340 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
 400e340:	defffd04 	addi	sp,sp,-12
 400e344:	df000215 	stw	fp,8(sp)
 400e348:	df000204 	addi	fp,sp,8
 400e34c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
 400e350:	0001883a 	nop
 400e354:	e0bfff17 	ldw	r2,-4(fp)
 400e358:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
 400e35c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
 400e360:	10000226 	beq	r2,zero,400e36c <_exit+0x2c>
    ALT_SIM_FAIL();
 400e364:	002af070 	cmpltui	zero,zero,43969
 400e368:	00000106 	br	400e370 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
 400e36c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
 400e370:	003fff06 	br	400e370 <__alt_data_end+0xfc00e370>

0400e374 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e374:	defffe04 	addi	sp,sp,-8
 400e378:	dfc00115 	stw	ra,4(sp)
 400e37c:	df000015 	stw	fp,0(sp)
 400e380:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e384:	d0a01717 	ldw	r2,-32676(gp)
 400e388:	10000326 	beq	r2,zero,400e398 <alt_get_errno+0x24>
 400e38c:	d0a01717 	ldw	r2,-32676(gp)
 400e390:	103ee83a 	callr	r2
 400e394:	00000106 	br	400e39c <alt_get_errno+0x28>
 400e398:	d0a72d04 	addi	r2,gp,-25420
}
 400e39c:	e037883a 	mov	sp,fp
 400e3a0:	dfc00117 	ldw	ra,4(sp)
 400e3a4:	df000017 	ldw	fp,0(sp)
 400e3a8:	dec00204 	addi	sp,sp,8
 400e3ac:	f800283a 	ret

0400e3b0 <fstat>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_FSTAT (int file, struct stat *st)
{
 400e3b0:	defffb04 	addi	sp,sp,-20
 400e3b4:	dfc00415 	stw	ra,16(sp)
 400e3b8:	df000315 	stw	fp,12(sp)
 400e3bc:	df000304 	addi	fp,sp,12
 400e3c0:	e13ffe15 	stw	r4,-8(fp)
 400e3c4:	e17fff15 	stw	r5,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400e3c8:	e0bffe17 	ldw	r2,-8(fp)
 400e3cc:	10000816 	blt	r2,zero,400e3f0 <fstat+0x40>
 400e3d0:	01400304 	movi	r5,12
 400e3d4:	e13ffe17 	ldw	r4,-8(fp)
 400e3d8:	40048b00 	call	40048b0 <__mulsi3>
 400e3dc:	1007883a 	mov	r3,r2
 400e3e0:	00810074 	movhi	r2,1025
 400e3e4:	10878404 	addi	r2,r2,7696
 400e3e8:	1885883a 	add	r2,r3,r2
 400e3ec:	00000106 	br	400e3f4 <fstat+0x44>
 400e3f0:	0005883a 	mov	r2,zero
 400e3f4:	e0bffd15 	stw	r2,-12(fp)
  
  if (fd)
 400e3f8:	e0bffd17 	ldw	r2,-12(fp)
 400e3fc:	10001026 	beq	r2,zero,400e440 <fstat+0x90>
  {
    /* Call the drivers fstat() function to fill out the "st" structure. */

    if (fd->dev->fstat)
 400e400:	e0bffd17 	ldw	r2,-12(fp)
 400e404:	10800017 	ldw	r2,0(r2)
 400e408:	10800817 	ldw	r2,32(r2)
 400e40c:	10000726 	beq	r2,zero,400e42c <fstat+0x7c>
    {
      return fd->dev->fstat(fd, st);
 400e410:	e0bffd17 	ldw	r2,-12(fp)
 400e414:	10800017 	ldw	r2,0(r2)
 400e418:	10800817 	ldw	r2,32(r2)
 400e41c:	e17fff17 	ldw	r5,-4(fp)
 400e420:	e13ffd17 	ldw	r4,-12(fp)
 400e424:	103ee83a 	callr	r2
 400e428:	00000a06 	br	400e454 <fstat+0xa4>
     * device.
     */
 
    else
    {
      st->st_mode = _IFCHR;
 400e42c:	e0bfff17 	ldw	r2,-4(fp)
 400e430:	00c80004 	movi	r3,8192
 400e434:	10c00115 	stw	r3,4(r2)
      return 0;
 400e438:	0005883a 	mov	r2,zero
 400e43c:	00000506 	br	400e454 <fstat+0xa4>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400e440:	400e3740 	call	400e374 <alt_get_errno>
 400e444:	1007883a 	mov	r3,r2
 400e448:	00801444 	movi	r2,81
 400e44c:	18800015 	stw	r2,0(r3)
    return -1;
 400e450:	00bfffc4 	movi	r2,-1
  }
}
 400e454:	e037883a 	mov	sp,fp
 400e458:	dfc00117 	ldw	ra,4(sp)
 400e45c:	df000017 	ldw	fp,0(sp)
 400e460:	dec00204 	addi	sp,sp,8
 400e464:	f800283a 	ret

0400e468 <getpid>:
 *
 * ALT_GETPID is mapped onto the getpid() system call in alt_syscall.h
 */
 
int ALT_GETPID (void)
{
 400e468:	deffff04 	addi	sp,sp,-4
 400e46c:	df000015 	stw	fp,0(sp)
 400e470:	d839883a 	mov	fp,sp
  return 0;
 400e474:	0005883a 	mov	r2,zero
}
 400e478:	e037883a 	mov	sp,fp
 400e47c:	df000017 	ldw	fp,0(sp)
 400e480:	dec00104 	addi	sp,sp,4
 400e484:	f800283a 	ret

0400e488 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e488:	defffe04 	addi	sp,sp,-8
 400e48c:	dfc00115 	stw	ra,4(sp)
 400e490:	df000015 	stw	fp,0(sp)
 400e494:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e498:	d0a01717 	ldw	r2,-32676(gp)
 400e49c:	10000326 	beq	r2,zero,400e4ac <alt_get_errno+0x24>
 400e4a0:	d0a01717 	ldw	r2,-32676(gp)
 400e4a4:	103ee83a 	callr	r2
 400e4a8:	00000106 	br	400e4b0 <alt_get_errno+0x28>
 400e4ac:	d0a72d04 	addi	r2,gp,-25420
}
 400e4b0:	e037883a 	mov	sp,fp
 400e4b4:	dfc00117 	ldw	ra,4(sp)
 400e4b8:	df000017 	ldw	fp,0(sp)
 400e4bc:	dec00204 	addi	sp,sp,8
 400e4c0:	f800283a 	ret

0400e4c4 <isatty>:
 *
 * ALT_ISATTY is mapped onto the isatty() system call in alt_syscall.h
 */
 
int ALT_ISATTY (int file)
{
 400e4c4:	deffed04 	addi	sp,sp,-76
 400e4c8:	dfc01215 	stw	ra,72(sp)
 400e4cc:	df001115 	stw	fp,68(sp)
 400e4d0:	df001104 	addi	fp,sp,68
 400e4d4:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400e4d8:	e0bfff17 	ldw	r2,-4(fp)
 400e4dc:	10000816 	blt	r2,zero,400e500 <isatty+0x3c>
 400e4e0:	01400304 	movi	r5,12
 400e4e4:	e13fff17 	ldw	r4,-4(fp)
 400e4e8:	40048b00 	call	40048b0 <__mulsi3>
 400e4ec:	1007883a 	mov	r3,r2
 400e4f0:	00810074 	movhi	r2,1025
 400e4f4:	10878404 	addi	r2,r2,7696
 400e4f8:	1885883a 	add	r2,r3,r2
 400e4fc:	00000106 	br	400e504 <isatty+0x40>
 400e500:	0005883a 	mov	r2,zero
 400e504:	e0bfef15 	stw	r2,-68(fp)
  
  if (fd)
 400e508:	e0bfef17 	ldw	r2,-68(fp)
 400e50c:	10000e26 	beq	r2,zero,400e548 <isatty+0x84>
    /*
     * If a device driver does not provide an fstat() function, then it is 
     * treated as a terminal device by default.
     */

    if (!fd->dev->fstat)
 400e510:	e0bfef17 	ldw	r2,-68(fp)
 400e514:	10800017 	ldw	r2,0(r2)
 400e518:	10800817 	ldw	r2,32(r2)
 400e51c:	1000021e 	bne	r2,zero,400e528 <isatty+0x64>
    {
      return 1;
 400e520:	00800044 	movi	r2,1
 400e524:	00000d06 	br	400e55c <isatty+0x98>
     * this is called so that the device can identify itself.
     */ 

    else
    {
      fstat (file, &stat);
 400e528:	e0bff004 	addi	r2,fp,-64
 400e52c:	100b883a 	mov	r5,r2
 400e530:	e13fff17 	ldw	r4,-4(fp)
 400e534:	400e3b00 	call	400e3b0 <fstat>
      return (stat.st_mode == _IFCHR) ? 1 : 0;
 400e538:	e0bff117 	ldw	r2,-60(fp)
 400e53c:	10880020 	cmpeqi	r2,r2,8192
 400e540:	10803fcc 	andi	r2,r2,255
 400e544:	00000506 	br	400e55c <isatty+0x98>
    }
  }
  else
  {
    ALT_ERRNO = EBADFD;
 400e548:	400e4880 	call	400e488 <alt_get_errno>
 400e54c:	1007883a 	mov	r3,r2
 400e550:	00801444 	movi	r2,81
 400e554:	18800015 	stw	r2,0(r3)
    return 0;
 400e558:	0005883a 	mov	r2,zero
  }
}
 400e55c:	e037883a 	mov	sp,fp
 400e560:	dfc00117 	ldw	ra,4(sp)
 400e564:	df000017 	ldw	fp,0(sp)
 400e568:	dec00204 	addi	sp,sp,8
 400e56c:	f800283a 	ret

0400e570 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e570:	defffe04 	addi	sp,sp,-8
 400e574:	dfc00115 	stw	ra,4(sp)
 400e578:	df000015 	stw	fp,0(sp)
 400e57c:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e580:	d0a01717 	ldw	r2,-32676(gp)
 400e584:	10000326 	beq	r2,zero,400e594 <alt_get_errno+0x24>
 400e588:	d0a01717 	ldw	r2,-32676(gp)
 400e58c:	103ee83a 	callr	r2
 400e590:	00000106 	br	400e598 <alt_get_errno+0x28>
 400e594:	d0a72d04 	addi	r2,gp,-25420
}
 400e598:	e037883a 	mov	sp,fp
 400e59c:	dfc00117 	ldw	ra,4(sp)
 400e5a0:	df000017 	ldw	fp,0(sp)
 400e5a4:	dec00204 	addi	sp,sp,8
 400e5a8:	f800283a 	ret

0400e5ac <kill>:
 *
 * ALT_KILL is mapped onto the kill() system call in alt_syscall.h
 */

int ALT_KILL (int pid, int sig)
{
 400e5ac:	defffb04 	addi	sp,sp,-20
 400e5b0:	dfc00415 	stw	ra,16(sp)
 400e5b4:	df000315 	stw	fp,12(sp)
 400e5b8:	df000304 	addi	fp,sp,12
 400e5bc:	e13ffe15 	stw	r4,-8(fp)
 400e5c0:	e17fff15 	stw	r5,-4(fp)
  int status = 0;
 400e5c4:	e03ffd15 	stw	zero,-12(fp)

  if (pid <= 0)
 400e5c8:	e0bffe17 	ldw	r2,-8(fp)
 400e5cc:	00802f16 	blt	zero,r2,400e68c <kill+0xe0>
  {
    switch (sig)
 400e5d0:	e0bfff17 	ldw	r2,-4(fp)
 400e5d4:	10800828 	cmpgeui	r2,r2,32
 400e5d8:	1000291e 	bne	r2,zero,400e680 <kill+0xd4>
 400e5dc:	e0bfff17 	ldw	r2,-4(fp)
 400e5e0:	100690ba 	slli	r3,r2,2
 400e5e4:	00810074 	movhi	r2,1025
 400e5e8:	10b97e04 	addi	r2,r2,-6664
 400e5ec:	1885883a 	add	r2,r3,r2
 400e5f0:	10800017 	ldw	r2,0(r2)
 400e5f4:	1000683a 	jmp	r2
 400e5f8:	0400e6a0 	cmpeqi	r16,zero,922
 400e5fc:	0400e680 	call	400e68 <__alt_mem_sdram-0x3bff198>
 400e600:	0400e680 	call	400e68 <__alt_mem_sdram-0x3bff198>
 400e604:	0400e678 	rdprs	r16,zero,921
 400e608:	0400e678 	rdprs	r16,zero,921
 400e60c:	0400e678 	rdprs	r16,zero,921
 400e610:	0400e678 	rdprs	r16,zero,921
 400e614:	0400e680 	call	400e68 <__alt_mem_sdram-0x3bff198>
 400e618:	0400e678 	rdprs	r16,zero,921
 400e61c:	0400e678 	rdprs	r16,zero,921
 400e620:	0400e678 	rdprs	r16,zero,921
 400e624:	0400e678 	rdprs	r16,zero,921
 400e628:	0400e678 	rdprs	r16,zero,921
 400e62c:	0400e678 	rdprs	r16,zero,921
 400e630:	0400e678 	rdprs	r16,zero,921
 400e634:	0400e678 	rdprs	r16,zero,921
 400e638:	0400e6a0 	cmpeqi	r16,zero,922
 400e63c:	0400e680 	call	400e68 <__alt_mem_sdram-0x3bff198>
 400e640:	0400e680 	call	400e68 <__alt_mem_sdram-0x3bff198>
 400e644:	0400e680 	call	400e68 <__alt_mem_sdram-0x3bff198>
 400e648:	0400e6a0 	cmpeqi	r16,zero,922
 400e64c:	0400e680 	call	400e68 <__alt_mem_sdram-0x3bff198>
 400e650:	0400e680 	call	400e68 <__alt_mem_sdram-0x3bff198>
 400e654:	0400e678 	rdprs	r16,zero,921
 400e658:	0400e678 	rdprs	r16,zero,921
 400e65c:	0400e678 	rdprs	r16,zero,921
 400e660:	0400e678 	rdprs	r16,zero,921
 400e664:	0400e678 	rdprs	r16,zero,921
 400e668:	0400e680 	call	400e68 <__alt_mem_sdram-0x3bff198>
 400e66c:	0400e680 	call	400e68 <__alt_mem_sdram-0x3bff198>
 400e670:	0400e678 	rdprs	r16,zero,921
 400e674:	0400e678 	rdprs	r16,zero,921
       * The Posix standard defines the default behaviour for all these signals 
       * as being eqivalent to a call to _exit(). No mechanism is provided to 
       * change this behaviour.
       */

      _exit(0);
 400e678:	0009883a 	mov	r4,zero
 400e67c:	400e3400 	call	400e340 <_exit>
      break;
    default:

      /* Tried to send an unsupported signal */

      status = EINVAL;
 400e680:	00800584 	movi	r2,22
 400e684:	e0bffd15 	stw	r2,-12(fp)
 400e688:	00000606 	br	400e6a4 <kill+0xf8>
    }
  }

  else if (pid > 0)
 400e68c:	e0bffe17 	ldw	r2,-8(fp)
 400e690:	0080040e 	bge	zero,r2,400e6a4 <kill+0xf8>
  {
    /* Attempted to signal a non-existant process */

    status = ESRCH;
 400e694:	008000c4 	movi	r2,3
 400e698:	e0bffd15 	stw	r2,-12(fp)
 400e69c:	00000106 	br	400e6a4 <kill+0xf8>
    {
    case 0:

      /* The null signal is used to check that a pid is valid. */

      break;
 400e6a0:	0001883a 	nop
    /* Attempted to signal a non-existant process */

    status = ESRCH;
  }

  if (status)
 400e6a4:	e0bffd17 	ldw	r2,-12(fp)
 400e6a8:	10000626 	beq	r2,zero,400e6c4 <kill+0x118>
  {
    ALT_ERRNO = status;
 400e6ac:	400e5700 	call	400e570 <alt_get_errno>
 400e6b0:	1007883a 	mov	r3,r2
 400e6b4:	e0bffd17 	ldw	r2,-12(fp)
 400e6b8:	18800015 	stw	r2,0(r3)
    return -1;
 400e6bc:	00bfffc4 	movi	r2,-1
 400e6c0:	00000106 	br	400e6c8 <kill+0x11c>
  }

  return 0;
 400e6c4:	0005883a 	mov	r2,zero
}
 400e6c8:	e037883a 	mov	sp,fp
 400e6cc:	dfc00117 	ldw	ra,4(sp)
 400e6d0:	df000017 	ldw	fp,0(sp)
 400e6d4:	dec00204 	addi	sp,sp,8
 400e6d8:	f800283a 	ret

0400e6dc <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 400e6dc:	defffc04 	addi	sp,sp,-16
 400e6e0:	df000315 	stw	fp,12(sp)
 400e6e4:	df000304 	addi	fp,sp,12
 400e6e8:	e13ffd15 	stw	r4,-12(fp)
 400e6ec:	e17ffe15 	stw	r5,-8(fp)
 400e6f0:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 400e6f4:	e0fffe17 	ldw	r3,-8(fp)
 400e6f8:	e0bffd17 	ldw	r2,-12(fp)
 400e6fc:	18800c26 	beq	r3,r2,400e730 <alt_load_section+0x54>
  {
    while( to != end )
 400e700:	00000806 	br	400e724 <alt_load_section+0x48>
    {
      *to++ = *from++;
 400e704:	e0bffe17 	ldw	r2,-8(fp)
 400e708:	10c00104 	addi	r3,r2,4
 400e70c:	e0fffe15 	stw	r3,-8(fp)
 400e710:	e0fffd17 	ldw	r3,-12(fp)
 400e714:	19000104 	addi	r4,r3,4
 400e718:	e13ffd15 	stw	r4,-12(fp)
 400e71c:	18c00017 	ldw	r3,0(r3)
 400e720:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 400e724:	e0fffe17 	ldw	r3,-8(fp)
 400e728:	e0bfff17 	ldw	r2,-4(fp)
 400e72c:	18bff51e 	bne	r3,r2,400e704 <__alt_data_end+0xfc00e704>
    {
      *to++ = *from++;
    }
  }
}
 400e730:	0001883a 	nop
 400e734:	e037883a 	mov	sp,fp
 400e738:	df000017 	ldw	fp,0(sp)
 400e73c:	dec00104 	addi	sp,sp,4
 400e740:	f800283a 	ret

0400e744 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 400e744:	defffe04 	addi	sp,sp,-8
 400e748:	dfc00115 	stw	ra,4(sp)
 400e74c:	df000015 	stw	fp,0(sp)
 400e750:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 400e754:	01810074 	movhi	r6,1025
 400e758:	318c2f04 	addi	r6,r6,12476
 400e75c:	01410074 	movhi	r5,1025
 400e760:	29452404 	addi	r5,r5,5264
 400e764:	01010074 	movhi	r4,1025
 400e768:	210c2f04 	addi	r4,r4,12476
 400e76c:	400e6dc0 	call	400e6dc <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 400e770:	01810034 	movhi	r6,1024
 400e774:	31808c04 	addi	r6,r6,560
 400e778:	01410034 	movhi	r5,1024
 400e77c:	29400804 	addi	r5,r5,32
 400e780:	01010034 	movhi	r4,1024
 400e784:	21000804 	addi	r4,r4,32
 400e788:	400e6dc0 	call	400e6dc <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 400e78c:	01810074 	movhi	r6,1025
 400e790:	31852404 	addi	r6,r6,5264
 400e794:	01410074 	movhi	r5,1025
 400e798:	29438e04 	addi	r5,r5,3640
 400e79c:	01010074 	movhi	r4,1025
 400e7a0:	21038e04 	addi	r4,r4,3640
 400e7a4:	400e6dc0 	call	400e6dc <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 400e7a8:	400fdb40 	call	400fdb4 <alt_dcache_flush_all>
  alt_icache_flush_all();
 400e7ac:	400ff740 	call	400ff74 <alt_icache_flush_all>
}
 400e7b0:	0001883a 	nop
 400e7b4:	e037883a 	mov	sp,fp
 400e7b8:	dfc00117 	ldw	ra,4(sp)
 400e7bc:	df000017 	ldw	fp,0(sp)
 400e7c0:	dec00204 	addi	sp,sp,8
 400e7c4:	f800283a 	ret

0400e7c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e7c8:	defffe04 	addi	sp,sp,-8
 400e7cc:	dfc00115 	stw	ra,4(sp)
 400e7d0:	df000015 	stw	fp,0(sp)
 400e7d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e7d8:	d0a01717 	ldw	r2,-32676(gp)
 400e7dc:	10000326 	beq	r2,zero,400e7ec <alt_get_errno+0x24>
 400e7e0:	d0a01717 	ldw	r2,-32676(gp)
 400e7e4:	103ee83a 	callr	r2
 400e7e8:	00000106 	br	400e7f0 <alt_get_errno+0x28>
 400e7ec:	d0a72d04 	addi	r2,gp,-25420
}
 400e7f0:	e037883a 	mov	sp,fp
 400e7f4:	dfc00117 	ldw	ra,4(sp)
 400e7f8:	df000017 	ldw	fp,0(sp)
 400e7fc:	dec00204 	addi	sp,sp,8
 400e800:	f800283a 	ret

0400e804 <lseek>:
 * ALT_LSEEK is mapped onto the lseek() system call in alt_syscall.h
 *
 */

off_t ALT_LSEEK (int file, off_t ptr, int dir)
{
 400e804:	defff904 	addi	sp,sp,-28
 400e808:	dfc00615 	stw	ra,24(sp)
 400e80c:	df000515 	stw	fp,20(sp)
 400e810:	df000504 	addi	fp,sp,20
 400e814:	e13ffd15 	stw	r4,-12(fp)
 400e818:	e17ffe15 	stw	r5,-8(fp)
 400e81c:	e1bfff15 	stw	r6,-4(fp)
  alt_fd* fd;
  off_t   rc = 0; 
 400e820:	e03ffb15 	stw	zero,-20(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400e824:	e0bffd17 	ldw	r2,-12(fp)
 400e828:	10000816 	blt	r2,zero,400e84c <lseek+0x48>
 400e82c:	01400304 	movi	r5,12
 400e830:	e13ffd17 	ldw	r4,-12(fp)
 400e834:	40048b00 	call	40048b0 <__mulsi3>
 400e838:	1007883a 	mov	r3,r2
 400e83c:	00810074 	movhi	r2,1025
 400e840:	10878404 	addi	r2,r2,7696
 400e844:	1885883a 	add	r2,r3,r2
 400e848:	00000106 	br	400e850 <lseek+0x4c>
 400e84c:	0005883a 	mov	r2,zero
 400e850:	e0bffc15 	stw	r2,-16(fp)
  
  if (fd) 
 400e854:	e0bffc17 	ldw	r2,-16(fp)
 400e858:	10001026 	beq	r2,zero,400e89c <lseek+0x98>
    /*
     * If the device driver provides an implementation of the lseek() function,
     * then call that to process the request.
     */
 
    if (fd->dev->lseek)
 400e85c:	e0bffc17 	ldw	r2,-16(fp)
 400e860:	10800017 	ldw	r2,0(r2)
 400e864:	10800717 	ldw	r2,28(r2)
 400e868:	10000926 	beq	r2,zero,400e890 <lseek+0x8c>
    {
      rc = fd->dev->lseek(fd, ptr, dir);
 400e86c:	e0bffc17 	ldw	r2,-16(fp)
 400e870:	10800017 	ldw	r2,0(r2)
 400e874:	10800717 	ldw	r2,28(r2)
 400e878:	e1bfff17 	ldw	r6,-4(fp)
 400e87c:	e17ffe17 	ldw	r5,-8(fp)
 400e880:	e13ffc17 	ldw	r4,-16(fp)
 400e884:	103ee83a 	callr	r2
 400e888:	e0bffb15 	stw	r2,-20(fp)
 400e88c:	00000506 	br	400e8a4 <lseek+0xa0>
     * Otherwise return an error.
     */

    else
    {
      rc = -ENOTSUP;
 400e890:	00bfde84 	movi	r2,-134
 400e894:	e0bffb15 	stw	r2,-20(fp)
 400e898:	00000206 	br	400e8a4 <lseek+0xa0>
    }
  }
  else  
  {
    rc = -EBADFD;
 400e89c:	00bfebc4 	movi	r2,-81
 400e8a0:	e0bffb15 	stw	r2,-20(fp)
  }

  if (rc < 0)
 400e8a4:	e0bffb17 	ldw	r2,-20(fp)
 400e8a8:	1000070e 	bge	r2,zero,400e8c8 <lseek+0xc4>
  {
    ALT_ERRNO = -rc;
 400e8ac:	400e7c80 	call	400e7c8 <alt_get_errno>
 400e8b0:	1007883a 	mov	r3,r2
 400e8b4:	e0bffb17 	ldw	r2,-20(fp)
 400e8b8:	0085c83a 	sub	r2,zero,r2
 400e8bc:	18800015 	stw	r2,0(r3)
    rc = -1;
 400e8c0:	00bfffc4 	movi	r2,-1
 400e8c4:	e0bffb15 	stw	r2,-20(fp)
  }

  return rc;
 400e8c8:	e0bffb17 	ldw	r2,-20(fp)
}
 400e8cc:	e037883a 	mov	sp,fp
 400e8d0:	dfc00117 	ldw	ra,4(sp)
 400e8d4:	df000017 	ldw	fp,0(sp)
 400e8d8:	dec00204 	addi	sp,sp,8
 400e8dc:	f800283a 	ret

0400e8e0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 400e8e0:	defffd04 	addi	sp,sp,-12
 400e8e4:	dfc00215 	stw	ra,8(sp)
 400e8e8:	df000115 	stw	fp,4(sp)
 400e8ec:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 400e8f0:	0009883a 	mov	r4,zero
 400e8f4:	400edb80 	call	400edb8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 400e8f8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 400e8fc:	400edf00 	call	400edf0 <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
 400e900:	01810074 	movhi	r6,1025
 400e904:	31851504 	addi	r6,r6,5204
 400e908:	01410074 	movhi	r5,1025
 400e90c:	29451504 	addi	r5,r5,5204
 400e910:	01010074 	movhi	r4,1025
 400e914:	21051504 	addi	r4,r4,5204
 400e918:	40103180 	call	4010318 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
 400e91c:	400feb40 	call	400feb4 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
 400e920:	01010074 	movhi	r4,1025
 400e924:	213fc504 	addi	r4,r4,-236
 400e928:	4010ad80 	call	4010ad8 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
 400e92c:	d0a73417 	ldw	r2,-25392(gp)
 400e930:	d0e73517 	ldw	r3,-25388(gp)
 400e934:	d1273617 	ldw	r4,-25384(gp)
 400e938:	200d883a 	mov	r6,r4
 400e93c:	180b883a 	mov	r5,r3
 400e940:	1009883a 	mov	r4,r2
 400e944:	4003d900 	call	4003d90 <main>
 400e948:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
 400e94c:	01000044 	movi	r4,1
 400e950:	400e23c0 	call	400e23c <close>
  exit (result);
 400e954:	e13fff17 	ldw	r4,-4(fp)
 400e958:	4010aec0 	call	4010aec <exit>

0400e95c <__malloc_lock>:
 * configuration is single threaded, so there is nothing to do here. Note that 
 * this requires that malloc is never called by an interrupt service routine.
 */

void __malloc_lock ( struct _reent *_r )
{
 400e95c:	defffe04 	addi	sp,sp,-8
 400e960:	df000115 	stw	fp,4(sp)
 400e964:	df000104 	addi	fp,sp,4
 400e968:	e13fff15 	stw	r4,-4(fp)
}
 400e96c:	0001883a 	nop
 400e970:	e037883a 	mov	sp,fp
 400e974:	df000017 	ldw	fp,0(sp)
 400e978:	dec00104 	addi	sp,sp,4
 400e97c:	f800283a 	ret

0400e980 <__malloc_unlock>:
/*
 *
 */

void __malloc_unlock ( struct _reent *_r )
{
 400e980:	defffe04 	addi	sp,sp,-8
 400e984:	df000115 	stw	fp,4(sp)
 400e988:	df000104 	addi	fp,sp,4
 400e98c:	e13fff15 	stw	r4,-4(fp)
}
 400e990:	0001883a 	nop
 400e994:	e037883a 	mov	sp,fp
 400e998:	df000017 	ldw	fp,0(sp)
 400e99c:	dec00104 	addi	sp,sp,4
 400e9a0:	f800283a 	ret

0400e9a4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400e9a4:	defffe04 	addi	sp,sp,-8
 400e9a8:	dfc00115 	stw	ra,4(sp)
 400e9ac:	df000015 	stw	fp,0(sp)
 400e9b0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400e9b4:	d0a01717 	ldw	r2,-32676(gp)
 400e9b8:	10000326 	beq	r2,zero,400e9c8 <alt_get_errno+0x24>
 400e9bc:	d0a01717 	ldw	r2,-32676(gp)
 400e9c0:	103ee83a 	callr	r2
 400e9c4:	00000106 	br	400e9cc <alt_get_errno+0x28>
 400e9c8:	d0a72d04 	addi	r2,gp,-25420
}
 400e9cc:	e037883a 	mov	sp,fp
 400e9d0:	dfc00117 	ldw	ra,4(sp)
 400e9d4:	df000017 	ldw	fp,0(sp)
 400e9d8:	dec00204 	addi	sp,sp,8
 400e9dc:	f800283a 	ret

0400e9e0 <read>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_READ (int file, void *ptr, size_t len)
{
 400e9e0:	defff904 	addi	sp,sp,-28
 400e9e4:	dfc00615 	stw	ra,24(sp)
 400e9e8:	df000515 	stw	fp,20(sp)
 400e9ec:	df000504 	addi	fp,sp,20
 400e9f0:	e13ffd15 	stw	r4,-12(fp)
 400e9f4:	e17ffe15 	stw	r5,-8(fp)
 400e9f8:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400e9fc:	e0bffd17 	ldw	r2,-12(fp)
 400ea00:	10000816 	blt	r2,zero,400ea24 <read+0x44>
 400ea04:	01400304 	movi	r5,12
 400ea08:	e13ffd17 	ldw	r4,-12(fp)
 400ea0c:	40048b00 	call	40048b0 <__mulsi3>
 400ea10:	1007883a 	mov	r3,r2
 400ea14:	00810074 	movhi	r2,1025
 400ea18:	10878404 	addi	r2,r2,7696
 400ea1c:	1885883a 	add	r2,r3,r2
 400ea20:	00000106 	br	400ea28 <read+0x48>
 400ea24:	0005883a 	mov	r2,zero
 400ea28:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400ea2c:	e0bffb17 	ldw	r2,-20(fp)
 400ea30:	10002226 	beq	r2,zero,400eabc <read+0xdc>
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400ea34:	e0bffb17 	ldw	r2,-20(fp)
 400ea38:	10800217 	ldw	r2,8(r2)
 400ea3c:	108000cc 	andi	r2,r2,3
 400ea40:	10800060 	cmpeqi	r2,r2,1
 400ea44:	1000181e 	bne	r2,zero,400eaa8 <read+0xc8>
        (fd->dev->read))
 400ea48:	e0bffb17 	ldw	r2,-20(fp)
 400ea4c:	10800017 	ldw	r2,0(r2)
 400ea50:	10800517 	ldw	r2,20(r2)
     * If the file has not been opened with read access, or if the driver does
     * not provide an implementation of read(), generate an error. Otherwise
     * call the drivers read() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_WRONLY) && 
 400ea54:	10001426 	beq	r2,zero,400eaa8 <read+0xc8>
        (fd->dev->read))
      {
        if ((rval = fd->dev->read(fd, ptr, len)) < 0)
 400ea58:	e0bffb17 	ldw	r2,-20(fp)
 400ea5c:	10800017 	ldw	r2,0(r2)
 400ea60:	10800517 	ldw	r2,20(r2)
 400ea64:	e0ffff17 	ldw	r3,-4(fp)
 400ea68:	180d883a 	mov	r6,r3
 400ea6c:	e17ffe17 	ldw	r5,-8(fp)
 400ea70:	e13ffb17 	ldw	r4,-20(fp)
 400ea74:	103ee83a 	callr	r2
 400ea78:	e0bffc15 	stw	r2,-16(fp)
 400ea7c:	e0bffc17 	ldw	r2,-16(fp)
 400ea80:	1000070e 	bge	r2,zero,400eaa0 <read+0xc0>
        {
          ALT_ERRNO = -rval;
 400ea84:	400e9a40 	call	400e9a4 <alt_get_errno>
 400ea88:	1007883a 	mov	r3,r2
 400ea8c:	e0bffc17 	ldw	r2,-16(fp)
 400ea90:	0085c83a 	sub	r2,zero,r2
 400ea94:	18800015 	stw	r2,0(r3)
          return -1;
 400ea98:	00bfffc4 	movi	r2,-1
 400ea9c:	00000c06 	br	400ead0 <read+0xf0>
        }
        return rval;
 400eaa0:	e0bffc17 	ldw	r2,-16(fp)
 400eaa4:	00000a06 	br	400ead0 <read+0xf0>
      }
      else
      {
        ALT_ERRNO = EACCES;
 400eaa8:	400e9a40 	call	400e9a4 <alt_get_errno>
 400eaac:	1007883a 	mov	r3,r2
 400eab0:	00800344 	movi	r2,13
 400eab4:	18800015 	stw	r2,0(r3)
 400eab8:	00000406 	br	400eacc <read+0xec>
      }
    }
  else
  {
    ALT_ERRNO = EBADFD;
 400eabc:	400e9a40 	call	400e9a4 <alt_get_errno>
 400eac0:	1007883a 	mov	r3,r2
 400eac4:	00801444 	movi	r2,81
 400eac8:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400eacc:	00bfffc4 	movi	r2,-1
}
 400ead0:	e037883a 	mov	sp,fp
 400ead4:	dfc00117 	ldw	ra,4(sp)
 400ead8:	df000017 	ldw	fp,0(sp)
 400eadc:	dec00204 	addi	sp,sp,8
 400eae0:	f800283a 	ret

0400eae4 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
 400eae4:	defffc04 	addi	sp,sp,-16
 400eae8:	dfc00315 	stw	ra,12(sp)
 400eaec:	df000215 	stw	fp,8(sp)
 400eaf0:	dc000115 	stw	r16,4(sp)
 400eaf4:	df000204 	addi	fp,sp,8
 400eaf8:	e13ffe15 	stw	r4,-8(fp)
  if (fd > 2)
 400eafc:	e0bffe17 	ldw	r2,-8(fp)
 400eb00:	108000d0 	cmplti	r2,r2,3
 400eb04:	1000111e 	bne	r2,zero,400eb4c <alt_release_fd+0x68>
  {
    alt_fd_list[fd].fd_flags = 0;
 400eb08:	04010074 	movhi	r16,1025
 400eb0c:	84078404 	addi	r16,r16,7696
 400eb10:	e0bffe17 	ldw	r2,-8(fp)
 400eb14:	01400304 	movi	r5,12
 400eb18:	1009883a 	mov	r4,r2
 400eb1c:	40048b00 	call	40048b0 <__mulsi3>
 400eb20:	8085883a 	add	r2,r16,r2
 400eb24:	10800204 	addi	r2,r2,8
 400eb28:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
 400eb2c:	04010074 	movhi	r16,1025
 400eb30:	84078404 	addi	r16,r16,7696
 400eb34:	e0bffe17 	ldw	r2,-8(fp)
 400eb38:	01400304 	movi	r5,12
 400eb3c:	1009883a 	mov	r4,r2
 400eb40:	40048b00 	call	40048b0 <__mulsi3>
 400eb44:	8085883a 	add	r2,r16,r2
 400eb48:	10000015 	stw	zero,0(r2)
  }
}
 400eb4c:	0001883a 	nop
 400eb50:	e6ffff04 	addi	sp,fp,-4
 400eb54:	dfc00217 	ldw	ra,8(sp)
 400eb58:	df000117 	ldw	fp,4(sp)
 400eb5c:	dc000017 	ldw	r16,0(sp)
 400eb60:	dec00304 	addi	sp,sp,12
 400eb64:	f800283a 	ret

0400eb68 <sbrk>:
#endif
 
caddr_t ALT_SBRK (int incr) __attribute__ ((no_instrument_function ));

caddr_t ALT_SBRK (int incr)
{ 
 400eb68:	defff904 	addi	sp,sp,-28
 400eb6c:	df000615 	stw	fp,24(sp)
 400eb70:	df000604 	addi	fp,sp,24
 400eb74:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400eb78:	0005303a 	rdctl	r2,status
 400eb7c:	e0bffe15 	stw	r2,-8(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400eb80:	e0fffe17 	ldw	r3,-8(fp)
 400eb84:	00bfff84 	movi	r2,-2
 400eb88:	1884703a 	and	r2,r3,r2
 400eb8c:	1001703a 	wrctl	status,r2
  
  return context;
 400eb90:	e0bffe17 	ldw	r2,-8(fp)
  alt_irq_context context;
  char *prev_heap_end; 

  context = alt_irq_disable_all();
 400eb94:	e0bffb15 	stw	r2,-20(fp)

  /* Always return data aligned on a word boundary */
  heap_end = (char *)(((unsigned int)heap_end + 3) & ~3);
 400eb98:	d0a01817 	ldw	r2,-32672(gp)
 400eb9c:	10c000c4 	addi	r3,r2,3
 400eba0:	00bfff04 	movi	r2,-4
 400eba4:	1884703a 	and	r2,r3,r2
 400eba8:	d0a01815 	stw	r2,-32672(gp)
  if (((heap_end + incr) - __alt_heap_start) > ALT_MAX_HEAP_BYTES) {
    alt_irq_enable_all(context);
    return (caddr_t)-1;
  }
#else
  if ((heap_end + incr) > __alt_heap_limit) {
 400ebac:	d0e01817 	ldw	r3,-32672(gp)
 400ebb0:	e0bfff17 	ldw	r2,-4(fp)
 400ebb4:	1887883a 	add	r3,r3,r2
 400ebb8:	00820034 	movhi	r2,2048
 400ebbc:	10800004 	addi	r2,r2,0
 400ebc0:	10c0062e 	bgeu	r2,r3,400ebdc <sbrk+0x74>
 400ebc4:	e0bffb17 	ldw	r2,-20(fp)
 400ebc8:	e0bffa15 	stw	r2,-24(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400ebcc:	e0bffa17 	ldw	r2,-24(fp)
 400ebd0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
    return (caddr_t)-1;
 400ebd4:	00bfffc4 	movi	r2,-1
 400ebd8:	00000b06 	br	400ec08 <sbrk+0xa0>
  }
#endif

  prev_heap_end = heap_end; 
 400ebdc:	d0a01817 	ldw	r2,-32672(gp)
 400ebe0:	e0bffd15 	stw	r2,-12(fp)
  heap_end += incr; 
 400ebe4:	d0e01817 	ldw	r3,-32672(gp)
 400ebe8:	e0bfff17 	ldw	r2,-4(fp)
 400ebec:	1885883a 	add	r2,r3,r2
 400ebf0:	d0a01815 	stw	r2,-32672(gp)
 400ebf4:	e0bffb17 	ldw	r2,-20(fp)
 400ebf8:	e0bffc15 	stw	r2,-16(fp)
 400ebfc:	e0bffc17 	ldw	r2,-16(fp)
 400ec00:	1001703a 	wrctl	status,r2

#endif

  alt_irq_enable_all(context);

  return (caddr_t) prev_heap_end; 
 400ec04:	e0bffd17 	ldw	r2,-12(fp)
} 
 400ec08:	e037883a 	mov	sp,fp
 400ec0c:	df000017 	ldw	fp,0(sp)
 400ec10:	dec00104 	addi	sp,sp,4
 400ec14:	f800283a 	ret

0400ec18 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 400ec18:	defffd04 	addi	sp,sp,-12
 400ec1c:	dfc00215 	stw	ra,8(sp)
 400ec20:	df000115 	stw	fp,4(sp)
 400ec24:	df000104 	addi	fp,sp,4
 400ec28:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 400ec2c:	e13fff17 	ldw	r4,-4(fp)
 400ec30:	400fc5c0 	call	400fc5c <alt_busy_sleep>
}
 400ec34:	e037883a 	mov	sp,fp
 400ec38:	dfc00117 	ldw	ra,4(sp)
 400ec3c:	df000017 	ldw	fp,0(sp)
 400ec40:	dec00204 	addi	sp,sp,8
 400ec44:	f800283a 	ret

0400ec48 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400ec48:	defffe04 	addi	sp,sp,-8
 400ec4c:	dfc00115 	stw	ra,4(sp)
 400ec50:	df000015 	stw	fp,0(sp)
 400ec54:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400ec58:	d0a01717 	ldw	r2,-32676(gp)
 400ec5c:	10000326 	beq	r2,zero,400ec6c <alt_get_errno+0x24>
 400ec60:	d0a01717 	ldw	r2,-32676(gp)
 400ec64:	103ee83a 	callr	r2
 400ec68:	00000106 	br	400ec70 <alt_get_errno+0x28>
 400ec6c:	d0a72d04 	addi	r2,gp,-25420
}
 400ec70:	e037883a 	mov	sp,fp
 400ec74:	dfc00117 	ldw	ra,4(sp)
 400ec78:	df000017 	ldw	fp,0(sp)
 400ec7c:	dec00204 	addi	sp,sp,8
 400ec80:	f800283a 	ret

0400ec84 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 400ec84:	defff904 	addi	sp,sp,-28
 400ec88:	dfc00615 	stw	ra,24(sp)
 400ec8c:	df000515 	stw	fp,20(sp)
 400ec90:	df000504 	addi	fp,sp,20
 400ec94:	e13ffd15 	stw	r4,-12(fp)
 400ec98:	e17ffe15 	stw	r5,-8(fp)
 400ec9c:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
 400eca0:	e0bffd17 	ldw	r2,-12(fp)
 400eca4:	10000816 	blt	r2,zero,400ecc8 <write+0x44>
 400eca8:	01400304 	movi	r5,12
 400ecac:	e13ffd17 	ldw	r4,-12(fp)
 400ecb0:	40048b00 	call	40048b0 <__mulsi3>
 400ecb4:	1007883a 	mov	r3,r2
 400ecb8:	00810074 	movhi	r2,1025
 400ecbc:	10878404 	addi	r2,r2,7696
 400ecc0:	1885883a 	add	r2,r3,r2
 400ecc4:	00000106 	br	400eccc <write+0x48>
 400ecc8:	0005883a 	mov	r2,zero
 400eccc:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
 400ecd0:	e0bffb17 	ldw	r2,-20(fp)
 400ecd4:	10002126 	beq	r2,zero,400ed5c <write+0xd8>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
 400ecd8:	e0bffb17 	ldw	r2,-20(fp)
 400ecdc:	10800217 	ldw	r2,8(r2)
 400ece0:	108000cc 	andi	r2,r2,3
 400ece4:	10001826 	beq	r2,zero,400ed48 <write+0xc4>
 400ece8:	e0bffb17 	ldw	r2,-20(fp)
 400ecec:	10800017 	ldw	r2,0(r2)
 400ecf0:	10800617 	ldw	r2,24(r2)
 400ecf4:	10001426 	beq	r2,zero,400ed48 <write+0xc4>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
 400ecf8:	e0bffb17 	ldw	r2,-20(fp)
 400ecfc:	10800017 	ldw	r2,0(r2)
 400ed00:	10800617 	ldw	r2,24(r2)
 400ed04:	e0ffff17 	ldw	r3,-4(fp)
 400ed08:	180d883a 	mov	r6,r3
 400ed0c:	e17ffe17 	ldw	r5,-8(fp)
 400ed10:	e13ffb17 	ldw	r4,-20(fp)
 400ed14:	103ee83a 	callr	r2
 400ed18:	e0bffc15 	stw	r2,-16(fp)
 400ed1c:	e0bffc17 	ldw	r2,-16(fp)
 400ed20:	1000070e 	bge	r2,zero,400ed40 <write+0xbc>
      {
        ALT_ERRNO = -rval;
 400ed24:	400ec480 	call	400ec48 <alt_get_errno>
 400ed28:	1007883a 	mov	r3,r2
 400ed2c:	e0bffc17 	ldw	r2,-16(fp)
 400ed30:	0085c83a 	sub	r2,zero,r2
 400ed34:	18800015 	stw	r2,0(r3)
        return -1;
 400ed38:	00bfffc4 	movi	r2,-1
 400ed3c:	00000c06 	br	400ed70 <write+0xec>
      }
      return rval;
 400ed40:	e0bffc17 	ldw	r2,-16(fp)
 400ed44:	00000a06 	br	400ed70 <write+0xec>
    }
    else
    {
      ALT_ERRNO = EACCES;
 400ed48:	400ec480 	call	400ec48 <alt_get_errno>
 400ed4c:	1007883a 	mov	r3,r2
 400ed50:	00800344 	movi	r2,13
 400ed54:	18800015 	stw	r2,0(r3)
 400ed58:	00000406 	br	400ed6c <write+0xe8>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
 400ed5c:	400ec480 	call	400ec48 <alt_get_errno>
 400ed60:	1007883a 	mov	r3,r2
 400ed64:	00801444 	movi	r2,81
 400ed68:	18800015 	stw	r2,0(r3)
  }
  return -1;
 400ed6c:	00bfffc4 	movi	r2,-1
}
 400ed70:	e037883a 	mov	sp,fp
 400ed74:	dfc00117 	ldw	ra,4(sp)
 400ed78:	df000017 	ldw	fp,0(sp)
 400ed7c:	dec00204 	addi	sp,sp,8
 400ed80:	f800283a 	ret

0400ed84 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
 400ed84:	defffd04 	addi	sp,sp,-12
 400ed88:	dfc00215 	stw	ra,8(sp)
 400ed8c:	df000115 	stw	fp,4(sp)
 400ed90:	df000104 	addi	fp,sp,4
 400ed94:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
 400ed98:	d1601404 	addi	r5,gp,-32688
 400ed9c:	e13fff17 	ldw	r4,-4(fp)
 400eda0:	400fe100 	call	400fe10 <alt_dev_llist_insert>
}
 400eda4:	e037883a 	mov	sp,fp
 400eda8:	dfc00117 	ldw	ra,4(sp)
 400edac:	df000017 	ldw	fp,0(sp)
 400edb0:	dec00204 	addi	sp,sp,8
 400edb4:	f800283a 	ret

0400edb8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 400edb8:	defffd04 	addi	sp,sp,-12
 400edbc:	dfc00215 	stw	ra,8(sp)
 400edc0:	df000115 	stw	fp,4(sp)
 400edc4:	df000104 	addi	fp,sp,4
 400edc8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( CPU, cpu);
 400edcc:	40107bc0 	call	40107bc <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 400edd0:	00800044 	movi	r2,1
 400edd4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 400edd8:	0001883a 	nop
 400eddc:	e037883a 	mov	sp,fp
 400ede0:	dfc00117 	ldw	ra,4(sp)
 400ede4:	df000017 	ldw	fp,0(sp)
 400ede8:	dec00204 	addi	sp,sp,8
 400edec:	f800283a 	ret

0400edf0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 400edf0:	defffd04 	addi	sp,sp,-12
 400edf4:	dfc00215 	stw	ra,8(sp)
 400edf8:	df000115 	stw	fp,4(sp)
 400edfc:	df000104 	addi	fp,sp,4
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART, jtag_uart);
 400ee00:	000d883a 	mov	r6,zero
 400ee04:	000b883a 	mov	r5,zero
 400ee08:	01010074 	movhi	r4,1025
 400ee0c:	2107ee04 	addi	r4,r4,8120
 400ee10:	400f22c0 	call	400f22c <altera_avalon_jtag_uart_init>
 400ee14:	01010074 	movhi	r4,1025
 400ee18:	2107e404 	addi	r4,r4,8080
 400ee1c:	400ed840 	call	400ed84 <alt_dev_reg>
    ALTERA_UP_AVALON_VIDEO_DMA_CONTROLLER_INIT ( VIDEO_DMA_CONTROLLER, video_dma_controller);
 400ee20:	00810074 	movhi	r2,1025
 400ee24:	108bfc04 	addi	r2,r2,12272
 400ee28:	10800a17 	ldw	r2,40(r2)
 400ee2c:	10800017 	ldw	r2,0(r2)
 400ee30:	1007883a 	mov	r3,r2
 400ee34:	00810074 	movhi	r2,1025
 400ee38:	108bfc04 	addi	r2,r2,12272
 400ee3c:	10c00b15 	stw	r3,44(r2)
 400ee40:	00810074 	movhi	r2,1025
 400ee44:	108bfc04 	addi	r2,r2,12272
 400ee48:	10800a17 	ldw	r2,40(r2)
 400ee4c:	10800104 	addi	r2,r2,4
 400ee50:	10800017 	ldw	r2,0(r2)
 400ee54:	1007883a 	mov	r3,r2
 400ee58:	00810074 	movhi	r2,1025
 400ee5c:	108bfc04 	addi	r2,r2,12272
 400ee60:	10c00c15 	stw	r3,48(r2)
 400ee64:	00810074 	movhi	r2,1025
 400ee68:	108bfc04 	addi	r2,r2,12272
 400ee6c:	10800a17 	ldw	r2,40(r2)
 400ee70:	10800204 	addi	r2,r2,8
 400ee74:	10800017 	ldw	r2,0(r2)
 400ee78:	10ffffcc 	andi	r3,r2,65535
 400ee7c:	00810074 	movhi	r2,1025
 400ee80:	108bfc04 	addi	r2,r2,12272
 400ee84:	10c01115 	stw	r3,68(r2)
 400ee88:	00810074 	movhi	r2,1025
 400ee8c:	108bfc04 	addi	r2,r2,12272
 400ee90:	10800a17 	ldw	r2,40(r2)
 400ee94:	10800204 	addi	r2,r2,8
 400ee98:	10800017 	ldw	r2,0(r2)
 400ee9c:	1006d43a 	srli	r3,r2,16
 400eea0:	00810074 	movhi	r2,1025
 400eea4:	108bfc04 	addi	r2,r2,12272
 400eea8:	10c01215 	stw	r3,72(r2)
 400eeac:	00810074 	movhi	r2,1025
 400eeb0:	108bfc04 	addi	r2,r2,12272
 400eeb4:	10800a17 	ldw	r2,40(r2)
 400eeb8:	10800304 	addi	r2,r2,12
 400eebc:	10800017 	ldw	r2,0(r2)
 400eec0:	1005d07a 	srai	r2,r2,1
 400eec4:	10c0004c 	andi	r3,r2,1
 400eec8:	00810074 	movhi	r2,1025
 400eecc:	108bfc04 	addi	r2,r2,12272
 400eed0:	10c00d15 	stw	r3,52(r2)
 400eed4:	00810074 	movhi	r2,1025
 400eed8:	108bfc04 	addi	r2,r2,12272
 400eedc:	10800a17 	ldw	r2,40(r2)
 400eee0:	10800304 	addi	r2,r2,12
 400eee4:	10800017 	ldw	r2,0(r2)
 400eee8:	1005d23a 	srai	r2,r2,8
 400eeec:	108003cc 	andi	r2,r2,15
 400eef0:	10800044 	addi	r2,r2,1
 400eef4:	1007883a 	mov	r3,r2
 400eef8:	00810074 	movhi	r2,1025
 400eefc:	108bfc04 	addi	r2,r2,12272
 400ef00:	10c00e15 	stw	r3,56(r2)
 400ef04:	00810074 	movhi	r2,1025
 400ef08:	108bfc04 	addi	r2,r2,12272
 400ef0c:	10800a17 	ldw	r2,40(r2)
 400ef10:	10800304 	addi	r2,r2,12
 400ef14:	10800017 	ldw	r2,0(r2)
 400ef18:	1005d1ba 	srai	r2,r2,6
 400ef1c:	108000cc 	andi	r2,r2,3
 400ef20:	10800044 	addi	r2,r2,1
 400ef24:	1007883a 	mov	r3,r2
 400ef28:	00810074 	movhi	r2,1025
 400ef2c:	108bfc04 	addi	r2,r2,12272
 400ef30:	10c00f15 	stw	r3,60(r2)
 400ef34:	00810074 	movhi	r2,1025
 400ef38:	108bfc04 	addi	r2,r2,12272
 400ef3c:	10800e17 	ldw	r2,56(r2)
 400ef40:	1007883a 	mov	r3,r2
 400ef44:	00810074 	movhi	r2,1025
 400ef48:	108bfc04 	addi	r2,r2,12272
 400ef4c:	10800f17 	ldw	r2,60(r2)
 400ef50:	100b883a 	mov	r5,r2
 400ef54:	1809883a 	mov	r4,r3
 400ef58:	40048b00 	call	40048b0 <__mulsi3>
 400ef5c:	e0bfff05 	stb	r2,-4(fp)
 400ef60:	e0bfff03 	ldbu	r2,-4(fp)
 400ef64:	10800268 	cmpgeui	r2,r2,9
 400ef68:	1000051e 	bne	r2,zero,400ef80 <alt_sys_init+0x190>
 400ef6c:	00810074 	movhi	r2,1025
 400ef70:	108bfc04 	addi	r2,r2,12272
 400ef74:	00c00044 	movi	r3,1
 400ef78:	10c01015 	stw	r3,64(r2)
 400ef7c:	00000c06 	br	400efb0 <alt_sys_init+0x1c0>
 400ef80:	e0bfff03 	ldbu	r2,-4(fp)
 400ef84:	10800468 	cmpgeui	r2,r2,17
 400ef88:	1000051e 	bne	r2,zero,400efa0 <alt_sys_init+0x1b0>
 400ef8c:	00810074 	movhi	r2,1025
 400ef90:	108bfc04 	addi	r2,r2,12272
 400ef94:	00c00084 	movi	r3,2
 400ef98:	10c01015 	stw	r3,64(r2)
 400ef9c:	00000406 	br	400efb0 <alt_sys_init+0x1c0>
 400efa0:	00810074 	movhi	r2,1025
 400efa4:	108bfc04 	addi	r2,r2,12272
 400efa8:	00c00104 	movi	r3,4
 400efac:	10c01015 	stw	r3,64(r2)
 400efb0:	00810074 	movhi	r2,1025
 400efb4:	108bfc04 	addi	r2,r2,12272
 400efb8:	10800a17 	ldw	r2,40(r2)
 400efbc:	10800304 	addi	r2,r2,12
 400efc0:	10800017 	ldw	r2,0(r2)
 400efc4:	1005d43a 	srai	r2,r2,16
 400efc8:	e0bfff45 	stb	r2,-3(fp)
 400efcc:	00810074 	movhi	r2,1025
 400efd0:	108bfc04 	addi	r2,r2,12272
 400efd4:	10800a17 	ldw	r2,40(r2)
 400efd8:	10800304 	addi	r2,r2,12
 400efdc:	10800017 	ldw	r2,0(r2)
 400efe0:	1004d63a 	srli	r2,r2,24
 400efe4:	e0bfff85 	stb	r2,-2(fp)
 400efe8:	00810074 	movhi	r2,1025
 400efec:	108bfc04 	addi	r2,r2,12272
 400eff0:	10801017 	ldw	r2,64(r2)
 400eff4:	10800058 	cmpnei	r2,r2,1
 400eff8:	1000041e 	bne	r2,zero,400f00c <alt_sys_init+0x21c>
 400effc:	00810074 	movhi	r2,1025
 400f000:	108bfc04 	addi	r2,r2,12272
 400f004:	10001315 	stw	zero,76(r2)
 400f008:	00000e06 	br	400f044 <alt_sys_init+0x254>
 400f00c:	00810074 	movhi	r2,1025
 400f010:	108bfc04 	addi	r2,r2,12272
 400f014:	10801017 	ldw	r2,64(r2)
 400f018:	10800098 	cmpnei	r2,r2,2
 400f01c:	1000051e 	bne	r2,zero,400f034 <alt_sys_init+0x244>
 400f020:	00810074 	movhi	r2,1025
 400f024:	108bfc04 	addi	r2,r2,12272
 400f028:	00c00044 	movi	r3,1
 400f02c:	10c01315 	stw	r3,76(r2)
 400f030:	00000406 	br	400f044 <alt_sys_init+0x254>
 400f034:	00810074 	movhi	r2,1025
 400f038:	108bfc04 	addi	r2,r2,12272
 400f03c:	00c00084 	movi	r3,2
 400f040:	10c01315 	stw	r3,76(r2)
 400f044:	e0bfff43 	ldbu	r2,-3(fp)
 400f048:	00c00804 	movi	r3,32
 400f04c:	1885c83a 	sub	r2,r3,r2
 400f050:	00ffffc4 	movi	r3,-1
 400f054:	1886d83a 	srl	r3,r3,r2
 400f058:	00810074 	movhi	r2,1025
 400f05c:	108bfc04 	addi	r2,r2,12272
 400f060:	10c01415 	stw	r3,80(r2)
 400f064:	e0ffff43 	ldbu	r3,-3(fp)
 400f068:	00810074 	movhi	r2,1025
 400f06c:	108bfc04 	addi	r2,r2,12272
 400f070:	10801317 	ldw	r2,76(r2)
 400f074:	1887883a 	add	r3,r3,r2
 400f078:	00810074 	movhi	r2,1025
 400f07c:	108bfc04 	addi	r2,r2,12272
 400f080:	10c01515 	stw	r3,84(r2)
 400f084:	e0bfff83 	ldbu	r2,-2(fp)
 400f088:	00c00804 	movi	r3,32
 400f08c:	1885c83a 	sub	r2,r3,r2
 400f090:	00ffffc4 	movi	r3,-1
 400f094:	1886d83a 	srl	r3,r3,r2
 400f098:	00810074 	movhi	r2,1025
 400f09c:	108bfc04 	addi	r2,r2,12272
 400f0a0:	10c01615 	stw	r3,88(r2)
 400f0a4:	01010074 	movhi	r4,1025
 400f0a8:	210bfc04 	addi	r4,r4,12272
 400f0ac:	400ed840 	call	400ed84 <alt_dev_reg>
}
 400f0b0:	0001883a 	nop
 400f0b4:	e037883a 	mov	sp,fp
 400f0b8:	dfc00117 	ldw	ra,4(sp)
 400f0bc:	df000017 	ldw	fp,0(sp)
 400f0c0:	dec00204 	addi	sp,sp,8
 400f0c4:	f800283a 	ret

0400f0c8 <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
 400f0c8:	defffa04 	addi	sp,sp,-24
 400f0cc:	dfc00515 	stw	ra,20(sp)
 400f0d0:	df000415 	stw	fp,16(sp)
 400f0d4:	df000404 	addi	fp,sp,16
 400f0d8:	e13ffd15 	stw	r4,-12(fp)
 400f0dc:	e17ffe15 	stw	r5,-8(fp)
 400f0e0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400f0e4:	e0bffd17 	ldw	r2,-12(fp)
 400f0e8:	10800017 	ldw	r2,0(r2)
 400f0ec:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
 400f0f0:	e0bffc17 	ldw	r2,-16(fp)
 400f0f4:	10c00a04 	addi	r3,r2,40
 400f0f8:	e0bffd17 	ldw	r2,-12(fp)
 400f0fc:	10800217 	ldw	r2,8(r2)
 400f100:	100f883a 	mov	r7,r2
 400f104:	e1bfff17 	ldw	r6,-4(fp)
 400f108:	e17ffe17 	ldw	r5,-8(fp)
 400f10c:	1809883a 	mov	r4,r3
 400f110:	400f6f00 	call	400f6f0 <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
 400f114:	e037883a 	mov	sp,fp
 400f118:	dfc00117 	ldw	ra,4(sp)
 400f11c:	df000017 	ldw	fp,0(sp)
 400f120:	dec00204 	addi	sp,sp,8
 400f124:	f800283a 	ret

0400f128 <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
 400f128:	defffa04 	addi	sp,sp,-24
 400f12c:	dfc00515 	stw	ra,20(sp)
 400f130:	df000415 	stw	fp,16(sp)
 400f134:	df000404 	addi	fp,sp,16
 400f138:	e13ffd15 	stw	r4,-12(fp)
 400f13c:	e17ffe15 	stw	r5,-8(fp)
 400f140:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400f144:	e0bffd17 	ldw	r2,-12(fp)
 400f148:	10800017 	ldw	r2,0(r2)
 400f14c:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
 400f150:	e0bffc17 	ldw	r2,-16(fp)
 400f154:	10c00a04 	addi	r3,r2,40
 400f158:	e0bffd17 	ldw	r2,-12(fp)
 400f15c:	10800217 	ldw	r2,8(r2)
 400f160:	100f883a 	mov	r7,r2
 400f164:	e1bfff17 	ldw	r6,-4(fp)
 400f168:	e17ffe17 	ldw	r5,-8(fp)
 400f16c:	1809883a 	mov	r4,r3
 400f170:	400f90c0 	call	400f90c <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
 400f174:	e037883a 	mov	sp,fp
 400f178:	dfc00117 	ldw	ra,4(sp)
 400f17c:	df000017 	ldw	fp,0(sp)
 400f180:	dec00204 	addi	sp,sp,8
 400f184:	f800283a 	ret

0400f188 <altera_avalon_jtag_uart_close_fd>:

#ifndef ALTERA_AVALON_JTAG_UART_SMALL

int 
altera_avalon_jtag_uart_close_fd(alt_fd* fd)
{
 400f188:	defffc04 	addi	sp,sp,-16
 400f18c:	dfc00315 	stw	ra,12(sp)
 400f190:	df000215 	stw	fp,8(sp)
 400f194:	df000204 	addi	fp,sp,8
 400f198:	e13fff15 	stw	r4,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
 400f19c:	e0bfff17 	ldw	r2,-4(fp)
 400f1a0:	10800017 	ldw	r2,0(r2)
 400f1a4:	e0bffe15 	stw	r2,-8(fp)

    return altera_avalon_jtag_uart_close(&dev->state, fd->fd_flags);
 400f1a8:	e0bffe17 	ldw	r2,-8(fp)
 400f1ac:	10c00a04 	addi	r3,r2,40
 400f1b0:	e0bfff17 	ldw	r2,-4(fp)
 400f1b4:	10800217 	ldw	r2,8(r2)
 400f1b8:	100b883a 	mov	r5,r2
 400f1bc:	1809883a 	mov	r4,r3
 400f1c0:	400f5980 	call	400f598 <altera_avalon_jtag_uart_close>
}
 400f1c4:	e037883a 	mov	sp,fp
 400f1c8:	dfc00117 	ldw	ra,4(sp)
 400f1cc:	df000017 	ldw	fp,0(sp)
 400f1d0:	dec00204 	addi	sp,sp,8
 400f1d4:	f800283a 	ret

0400f1d8 <altera_avalon_jtag_uart_ioctl_fd>:

int 
altera_avalon_jtag_uart_ioctl_fd(alt_fd* fd, int req, void* arg)
{
 400f1d8:	defffa04 	addi	sp,sp,-24
 400f1dc:	dfc00515 	stw	ra,20(sp)
 400f1e0:	df000415 	stw	fp,16(sp)
 400f1e4:	df000404 	addi	fp,sp,16
 400f1e8:	e13ffd15 	stw	r4,-12(fp)
 400f1ec:	e17ffe15 	stw	r5,-8(fp)
 400f1f0:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev;
 400f1f4:	e0bffd17 	ldw	r2,-12(fp)
 400f1f8:	10800017 	ldw	r2,0(r2)
 400f1fc:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_ioctl(&dev->state, req, arg);
 400f200:	e0bffc17 	ldw	r2,-16(fp)
 400f204:	10800a04 	addi	r2,r2,40
 400f208:	e1bfff17 	ldw	r6,-4(fp)
 400f20c:	e17ffe17 	ldw	r5,-8(fp)
 400f210:	1009883a 	mov	r4,r2
 400f214:	400f6000 	call	400f600 <altera_avalon_jtag_uart_ioctl>
}
 400f218:	e037883a 	mov	sp,fp
 400f21c:	dfc00117 	ldw	ra,4(sp)
 400f220:	df000017 	ldw	fp,0(sp)
 400f224:	dec00204 	addi	sp,sp,8
 400f228:	f800283a 	ret

0400f22c <altera_avalon_jtag_uart_init>:
 * Return 1 on sucessful IRQ register and 0 on failure.
 */

void altera_avalon_jtag_uart_init(altera_avalon_jtag_uart_state* sp, 
                                  int irq_controller_id, int irq)
{
 400f22c:	defffa04 	addi	sp,sp,-24
 400f230:	dfc00515 	stw	ra,20(sp)
 400f234:	df000415 	stw	fp,16(sp)
 400f238:	df000404 	addi	fp,sp,16
 400f23c:	e13ffd15 	stw	r4,-12(fp)
 400f240:	e17ffe15 	stw	r5,-8(fp)
 400f244:	e1bfff15 	stw	r6,-4(fp)
  ALT_FLAG_CREATE(&sp->events, 0);
  ALT_SEM_CREATE(&sp->read_lock, 1);
  ALT_SEM_CREATE(&sp->write_lock, 1);

  /* enable read interrupts at the device */
  sp->irq_enable = ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400f248:	e0bffd17 	ldw	r2,-12(fp)
 400f24c:	00c00044 	movi	r3,1
 400f250:	10c00815 	stw	r3,32(r2)

  IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable); 
 400f254:	e0bffd17 	ldw	r2,-12(fp)
 400f258:	10800017 	ldw	r2,0(r2)
 400f25c:	10800104 	addi	r2,r2,4
 400f260:	1007883a 	mov	r3,r2
 400f264:	e0bffd17 	ldw	r2,-12(fp)
 400f268:	10800817 	ldw	r2,32(r2)
 400f26c:	18800035 	stwio	r2,0(r3)
  
  /* register the interrupt handler */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, altera_avalon_jtag_uart_irq, 
 400f270:	e0bffe17 	ldw	r2,-8(fp)
 400f274:	e0ffff17 	ldw	r3,-4(fp)
 400f278:	d8000015 	stw	zero,0(sp)
 400f27c:	e1fffd17 	ldw	r7,-12(fp)
 400f280:	01810074 	movhi	r6,1025
 400f284:	31bcbb04 	addi	r6,r6,-3348
 400f288:	180b883a 	mov	r5,r3
 400f28c:	1009883a 	mov	r4,r2
 400f290:	400ff940 	call	400ff94 <alt_ic_isr_register>
#else
  alt_irq_register(irq, sp, altera_avalon_jtag_uart_irq);
#endif  

  /* Register an alarm to go off every second to check for presence of host */
  sp->host_inactive = 0;
 400f294:	e0bffd17 	ldw	r2,-12(fp)
 400f298:	10000915 	stw	zero,36(r2)

  if (alt_alarm_start(&sp->alarm, alt_ticks_per_second(), 
 400f29c:	e0bffd17 	ldw	r2,-12(fp)
 400f2a0:	10800204 	addi	r2,r2,8
 * Obtain the system clock rate in ticks/s. 
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_ticks_per_second (void)
{
  return _alt_tick_rate;
 400f2a4:	d0e73817 	ldw	r3,-25376(gp)
 400f2a8:	e1fffd17 	ldw	r7,-12(fp)
 400f2ac:	01810074 	movhi	r6,1025
 400f2b0:	31bd3e04 	addi	r6,r6,-2824
 400f2b4:	180b883a 	mov	r5,r3
 400f2b8:	1009883a 	mov	r4,r2
 400f2bc:	400fb300 	call	400fb30 <alt_alarm_start>
 400f2c0:	1000040e 	bge	r2,zero,400f2d4 <altera_avalon_jtag_uart_init+0xa8>
    &altera_avalon_jtag_uart_timeout, sp) < 0)
  {
    /* If we can't set the alarm then record "don't know if host present" 
     * and behave as though the host is present.
     */
    sp->timeout = INT_MAX;
 400f2c4:	e0fffd17 	ldw	r3,-12(fp)
 400f2c8:	00a00034 	movhi	r2,32768
 400f2cc:	10bfffc4 	addi	r2,r2,-1
 400f2d0:	18800115 	stw	r2,4(r3)
  }

  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ALARM_REGISTER(sp, sp->base);
}
 400f2d4:	0001883a 	nop
 400f2d8:	e037883a 	mov	sp,fp
 400f2dc:	dfc00117 	ldw	ra,4(sp)
 400f2e0:	df000017 	ldw	fp,0(sp)
 400f2e4:	dec00204 	addi	sp,sp,8
 400f2e8:	f800283a 	ret

0400f2ec <altera_avalon_jtag_uart_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void altera_avalon_jtag_uart_irq(void* context)
#else
static void altera_avalon_jtag_uart_irq(void* context, alt_u32 id)
#endif
{
 400f2ec:	defff804 	addi	sp,sp,-32
 400f2f0:	df000715 	stw	fp,28(sp)
 400f2f4:	df000704 	addi	fp,sp,28
 400f2f8:	e13fff15 	stw	r4,-4(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state*) context;
 400f2fc:	e0bfff17 	ldw	r2,-4(fp)
 400f300:	e0bffb15 	stw	r2,-20(fp)
  unsigned int base = sp->base;
 400f304:	e0bffb17 	ldw	r2,-20(fp)
 400f308:	10800017 	ldw	r2,0(r2)
 400f30c:	e0bffc15 	stw	r2,-16(fp)
  /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */ 
  ALT_LOG_JTAG_UART_ISR_FUNCTION(base, sp);

  for ( ; ; )
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400f310:	e0bffc17 	ldw	r2,-16(fp)
 400f314:	10800104 	addi	r2,r2,4
 400f318:	10800037 	ldwio	r2,0(r2)
 400f31c:	e0bffd15 	stw	r2,-12(fp)

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
 400f320:	e0bffd17 	ldw	r2,-12(fp)
 400f324:	1080c00c 	andi	r2,r2,768
 400f328:	10006d26 	beq	r2,zero,400f4e0 <altera_avalon_jtag_uart_irq+0x1f4>
      break;

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK)
 400f32c:	e0bffd17 	ldw	r2,-12(fp)
 400f330:	1080400c 	andi	r2,r2,256
 400f334:	10003526 	beq	r2,zero,400f40c <altera_avalon_jtag_uart_irq+0x120>
    {
      /* process a read irq.  Start by assuming that there is data in the
       * receive FIFO (otherwise why would we have been interrupted?)
       */
      unsigned int data = 1 << ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_OFST;
 400f338:	00800074 	movhi	r2,1
 400f33c:	e0bff915 	stw	r2,-28(fp)
      for ( ; ; )
      {
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400f340:	e0bffb17 	ldw	r2,-20(fp)
 400f344:	10800a17 	ldw	r2,40(r2)
 400f348:	10800044 	addi	r2,r2,1
 400f34c:	1081ffcc 	andi	r2,r2,2047
 400f350:	e0bffe15 	stw	r2,-8(fp)
        if (next == sp->rx_out)
 400f354:	e0bffb17 	ldw	r2,-20(fp)
 400f358:	10c00b17 	ldw	r3,44(r2)
 400f35c:	e0bffe17 	ldw	r2,-8(fp)
 400f360:	18801526 	beq	r3,r2,400f3b8 <altera_avalon_jtag_uart_irq+0xcc>
          break;

        /* Try to remove a character from the FIFO and find out whether there
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
 400f364:	e0bffc17 	ldw	r2,-16(fp)
 400f368:	10800037 	ldwio	r2,0(r2)
 400f36c:	e0bff915 	stw	r2,-28(fp)
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
 400f370:	e0bff917 	ldw	r2,-28(fp)
 400f374:	10a0000c 	andi	r2,r2,32768
 400f378:	10001126 	beq	r2,zero,400f3c0 <altera_avalon_jtag_uart_irq+0xd4>
          break;

        sp->rx_buf[sp->rx_in] = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
 400f37c:	e0bffb17 	ldw	r2,-20(fp)
 400f380:	10800a17 	ldw	r2,40(r2)
 400f384:	e0fff917 	ldw	r3,-28(fp)
 400f388:	1809883a 	mov	r4,r3
 400f38c:	e0fffb17 	ldw	r3,-20(fp)
 400f390:	1885883a 	add	r2,r3,r2
 400f394:	10800e04 	addi	r2,r2,56
 400f398:	11000005 	stb	r4,0(r2)
        sp->rx_in = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400f39c:	e0bffb17 	ldw	r2,-20(fp)
 400f3a0:	10800a17 	ldw	r2,40(r2)
 400f3a4:	10800044 	addi	r2,r2,1
 400f3a8:	10c1ffcc 	andi	r3,r2,2047
 400f3ac:	e0bffb17 	ldw	r2,-20(fp)
 400f3b0:	10c00a15 	stw	r3,40(r2)

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }
 400f3b4:	003fe206 	br	400f340 <__alt_data_end+0xfc00f340>
        /* Check whether there is space in the buffer.  If not then we must not
         * read any characters from the buffer as they will be lost.
         */
        unsigned int next = (sp->rx_in + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
        if (next == sp->rx_out)
          break;
 400f3b8:	0001883a 	nop
 400f3bc:	00000106 	br	400f3c4 <altera_avalon_jtag_uart_irq+0xd8>
         * are any more characters remaining.
         */
        data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
        
        if ((data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK) == 0)
          break;
 400f3c0:	0001883a 	nop

        /* Post an event to notify jtag_uart_read that a character has been read */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_READ_RDY, OS_FLAG_SET);
      }

      if (data & ALTERA_AVALON_JTAG_UART_DATA_RAVAIL_MSK)
 400f3c4:	e0bff917 	ldw	r2,-28(fp)
 400f3c8:	10bfffec 	andhi	r2,r2,65535
 400f3cc:	10000f26 	beq	r2,zero,400f40c <altera_avalon_jtag_uart_irq+0x120>
      {
        /* If there is still data available here then the buffer is full 
         * so turn off receive interrupts until some space becomes available.
         */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400f3d0:	e0bffb17 	ldw	r2,-20(fp)
 400f3d4:	10c00817 	ldw	r3,32(r2)
 400f3d8:	00bfff84 	movi	r2,-2
 400f3dc:	1886703a 	and	r3,r3,r2
 400f3e0:	e0bffb17 	ldw	r2,-20(fp)
 400f3e4:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(base, sp->irq_enable);
 400f3e8:	e0bffc17 	ldw	r2,-16(fp)
 400f3ec:	10800104 	addi	r2,r2,4
 400f3f0:	1007883a 	mov	r3,r2
 400f3f4:	e0bffb17 	ldw	r2,-20(fp)
 400f3f8:	10800817 	ldw	r2,32(r2)
 400f3fc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400f400:	e0bffc17 	ldw	r2,-16(fp)
 400f404:	10800104 	addi	r2,r2,4
 400f408:	10800037 	ldwio	r2,0(r2)
      }
    }

    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
 400f40c:	e0bffd17 	ldw	r2,-12(fp)
 400f410:	1080800c 	andi	r2,r2,512
 400f414:	103fbe26 	beq	r2,zero,400f310 <__alt_data_end+0xfc00f310>
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;
 400f418:	e0bffd17 	ldw	r2,-12(fp)
 400f41c:	1004d43a 	srli	r2,r2,16
 400f420:	e0bffa15 	stw	r2,-24(fp)

      while (space > 0 && sp->tx_out != sp->tx_in)
 400f424:	00001406 	br	400f478 <altera_avalon_jtag_uart_irq+0x18c>
      {
        IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, sp->tx_buf[sp->tx_out]);
 400f428:	e0bffc17 	ldw	r2,-16(fp)
 400f42c:	e0fffb17 	ldw	r3,-20(fp)
 400f430:	18c00d17 	ldw	r3,52(r3)
 400f434:	e13ffb17 	ldw	r4,-20(fp)
 400f438:	20c7883a 	add	r3,r4,r3
 400f43c:	18c20e04 	addi	r3,r3,2104
 400f440:	18c00003 	ldbu	r3,0(r3)
 400f444:	18c03fcc 	andi	r3,r3,255
 400f448:	18c0201c 	xori	r3,r3,128
 400f44c:	18ffe004 	addi	r3,r3,-128
 400f450:	10c00035 	stwio	r3,0(r2)

        sp->tx_out = (sp->tx_out + 1) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400f454:	e0bffb17 	ldw	r2,-20(fp)
 400f458:	10800d17 	ldw	r2,52(r2)
 400f45c:	10800044 	addi	r2,r2,1
 400f460:	10c1ffcc 	andi	r3,r2,2047
 400f464:	e0bffb17 	ldw	r2,-20(fp)
 400f468:	10c00d15 	stw	r3,52(r2)

        /* Post an event to notify jtag_uart_write that a character has been written */
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
 400f46c:	e0bffa17 	ldw	r2,-24(fp)
 400f470:	10bfffc4 	addi	r2,r2,-1
 400f474:	e0bffa15 	stw	r2,-24(fp)
    if (control & ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)
    {
      /* process a write irq */
      unsigned int space = (control & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) >> ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_OFST;

      while (space > 0 && sp->tx_out != sp->tx_in)
 400f478:	e0bffa17 	ldw	r2,-24(fp)
 400f47c:	10000526 	beq	r2,zero,400f494 <altera_avalon_jtag_uart_irq+0x1a8>
 400f480:	e0bffb17 	ldw	r2,-20(fp)
 400f484:	10c00d17 	ldw	r3,52(r2)
 400f488:	e0bffb17 	ldw	r2,-20(fp)
 400f48c:	10800c17 	ldw	r2,48(r2)
 400f490:	18bfe51e 	bne	r3,r2,400f428 <__alt_data_end+0xfc00f428>
        ALT_FLAG_POST (sp->events, ALT_JTAG_UART_WRITE_RDY, OS_FLAG_SET);

        space--;
      }

      if (space > 0)
 400f494:	e0bffa17 	ldw	r2,-24(fp)
 400f498:	103f9d26 	beq	r2,zero,400f310 <__alt_data_end+0xfc00f310>
      {
        /* If we don't have any more data available then turn off the TX interrupt */
        sp->irq_enable &= ~ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400f49c:	e0bffb17 	ldw	r2,-20(fp)
 400f4a0:	10c00817 	ldw	r3,32(r2)
 400f4a4:	00bfff44 	movi	r2,-3
 400f4a8:	1886703a 	and	r3,r3,r2
 400f4ac:	e0bffb17 	ldw	r2,-20(fp)
 400f4b0:	10c00815 	stw	r3,32(r2)
        IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400f4b4:	e0bffb17 	ldw	r2,-20(fp)
 400f4b8:	10800017 	ldw	r2,0(r2)
 400f4bc:	10800104 	addi	r2,r2,4
 400f4c0:	1007883a 	mov	r3,r2
 400f4c4:	e0bffb17 	ldw	r2,-20(fp)
 400f4c8:	10800817 	ldw	r2,32(r2)
 400f4cc:	18800035 	stwio	r2,0(r3)
        
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
 400f4d0:	e0bffc17 	ldw	r2,-16(fp)
 400f4d4:	10800104 	addi	r2,r2,4
 400f4d8:	10800037 	ldwio	r2,0(r2)
      }
    }
  }
 400f4dc:	003f8c06 	br	400f310 <__alt_data_end+0xfc00f310>
  {
    unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);

    /* Return once nothing more to do */
    if ((control & (ALTERA_AVALON_JTAG_UART_CONTROL_RI_MSK | ALTERA_AVALON_JTAG_UART_CONTROL_WI_MSK)) == 0)
      break;
 400f4e0:	0001883a 	nop
        /* Dummy read to ensure IRQ is cleared prior to ISR completion */
        IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base);
      }
    }
  }
}
 400f4e4:	0001883a 	nop
 400f4e8:	e037883a 	mov	sp,fp
 400f4ec:	df000017 	ldw	fp,0(sp)
 400f4f0:	dec00104 	addi	sp,sp,4
 400f4f4:	f800283a 	ret

0400f4f8 <altera_avalon_jtag_uart_timeout>:
 * Timeout routine is called every second
 */

static alt_u32 
altera_avalon_jtag_uart_timeout(void* context) 
{
 400f4f8:	defff804 	addi	sp,sp,-32
 400f4fc:	df000715 	stw	fp,28(sp)
 400f500:	df000704 	addi	fp,sp,28
 400f504:	e13ffb15 	stw	r4,-20(fp)
  altera_avalon_jtag_uart_state* sp = (altera_avalon_jtag_uart_state *) context;
 400f508:	e0bffb17 	ldw	r2,-20(fp)
 400f50c:	e0bff915 	stw	r2,-28(fp)

  unsigned int control = IORD_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base);
 400f510:	e0bff917 	ldw	r2,-28(fp)
 400f514:	10800017 	ldw	r2,0(r2)
 400f518:	10800104 	addi	r2,r2,4
 400f51c:	10800037 	ldwio	r2,0(r2)
 400f520:	e0bffa15 	stw	r2,-24(fp)

  if (control & ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK)
 400f524:	e0bffa17 	ldw	r2,-24(fp)
 400f528:	1081000c 	andi	r2,r2,1024
 400f52c:	10000b26 	beq	r2,zero,400f55c <altera_avalon_jtag_uart_timeout+0x64>
  {
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable | ALTERA_AVALON_JTAG_UART_CONTROL_AC_MSK);
 400f530:	e0bff917 	ldw	r2,-28(fp)
 400f534:	10800017 	ldw	r2,0(r2)
 400f538:	10800104 	addi	r2,r2,4
 400f53c:	1007883a 	mov	r3,r2
 400f540:	e0bff917 	ldw	r2,-28(fp)
 400f544:	10800817 	ldw	r2,32(r2)
 400f548:	10810014 	ori	r2,r2,1024
 400f54c:	18800035 	stwio	r2,0(r3)
    sp->host_inactive = 0;
 400f550:	e0bff917 	ldw	r2,-28(fp)
 400f554:	10000915 	stw	zero,36(r2)
 400f558:	00000a06 	br	400f584 <altera_avalon_jtag_uart_timeout+0x8c>
  }
  else if (sp->host_inactive < INT_MAX - 2) {
 400f55c:	e0bff917 	ldw	r2,-28(fp)
 400f560:	10c00917 	ldw	r3,36(r2)
 400f564:	00a00034 	movhi	r2,32768
 400f568:	10bfff04 	addi	r2,r2,-4
 400f56c:	10c00536 	bltu	r2,r3,400f584 <altera_avalon_jtag_uart_timeout+0x8c>
    sp->host_inactive++;
 400f570:	e0bff917 	ldw	r2,-28(fp)
 400f574:	10800917 	ldw	r2,36(r2)
 400f578:	10c00044 	addi	r3,r2,1
 400f57c:	e0bff917 	ldw	r2,-28(fp)
 400f580:	10c00915 	stw	r3,36(r2)
 400f584:	d0a73817 	ldw	r2,-25376(gp)
      ALT_FLAG_POST (sp->events, ALT_JTAG_UART_TIMEOUT, OS_FLAG_SET);
    }
  }

  return alt_ticks_per_second();
}
 400f588:	e037883a 	mov	sp,fp
 400f58c:	df000017 	ldw	fp,0(sp)
 400f590:	dec00104 	addi	sp,sp,4
 400f594:	f800283a 	ret

0400f598 <altera_avalon_jtag_uart_close>:
 * The close routine is not implemented for the small driver; instead it will
 * map to null. This is because the small driver simply waits while characters
 * are transmitted; there is no interrupt-serviced buffer to empty 
 */
int altera_avalon_jtag_uart_close(altera_avalon_jtag_uart_state* sp, int flags)
{
 400f598:	defffd04 	addi	sp,sp,-12
 400f59c:	df000215 	stw	fp,8(sp)
 400f5a0:	df000204 	addi	fp,sp,8
 400f5a4:	e13ffe15 	stw	r4,-8(fp)
 400f5a8:	e17fff15 	stw	r5,-4(fp)
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400f5ac:	00000506 	br	400f5c4 <altera_avalon_jtag_uart_close+0x2c>
    if (flags & O_NONBLOCK) {
 400f5b0:	e0bfff17 	ldw	r2,-4(fp)
 400f5b4:	1090000c 	andi	r2,r2,16384
 400f5b8:	10000226 	beq	r2,zero,400f5c4 <altera_avalon_jtag_uart_close+0x2c>
      return -EWOULDBLOCK; 
 400f5bc:	00bffd44 	movi	r2,-11
 400f5c0:	00000b06 	br	400f5f0 <altera_avalon_jtag_uart_close+0x58>
{
  /* 
   * Wait for all transmit data to be emptied by the JTAG UART ISR, or
   * for a host-inactivity timeout, in which case transmit data will be lost
   */
  while ( (sp->tx_out != sp->tx_in) && (sp->host_inactive < sp->timeout) ) {
 400f5c4:	e0bffe17 	ldw	r2,-8(fp)
 400f5c8:	10c00d17 	ldw	r3,52(r2)
 400f5cc:	e0bffe17 	ldw	r2,-8(fp)
 400f5d0:	10800c17 	ldw	r2,48(r2)
 400f5d4:	18800526 	beq	r3,r2,400f5ec <altera_avalon_jtag_uart_close+0x54>
 400f5d8:	e0bffe17 	ldw	r2,-8(fp)
 400f5dc:	10c00917 	ldw	r3,36(r2)
 400f5e0:	e0bffe17 	ldw	r2,-8(fp)
 400f5e4:	10800117 	ldw	r2,4(r2)
 400f5e8:	18bff136 	bltu	r3,r2,400f5b0 <__alt_data_end+0xfc00f5b0>
    if (flags & O_NONBLOCK) {
      return -EWOULDBLOCK; 
    }
  }

  return 0;
 400f5ec:	0005883a 	mov	r2,zero
}
 400f5f0:	e037883a 	mov	sp,fp
 400f5f4:	df000017 	ldw	fp,0(sp)
 400f5f8:	dec00104 	addi	sp,sp,4
 400f5fc:	f800283a 	ret

0400f600 <altera_avalon_jtag_uart_ioctl>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_ioctl(altera_avalon_jtag_uart_state* sp, int req,
  void* arg)
{
 400f600:	defffa04 	addi	sp,sp,-24
 400f604:	df000515 	stw	fp,20(sp)
 400f608:	df000504 	addi	fp,sp,20
 400f60c:	e13ffd15 	stw	r4,-12(fp)
 400f610:	e17ffe15 	stw	r5,-8(fp)
 400f614:	e1bfff15 	stw	r6,-4(fp)
  int rc = -ENOTTY;
 400f618:	00bff9c4 	movi	r2,-25
 400f61c:	e0bffb15 	stw	r2,-20(fp)

  switch (req)
 400f620:	e0bffe17 	ldw	r2,-8(fp)
 400f624:	10da8060 	cmpeqi	r3,r2,27137
 400f628:	1800031e 	bne	r3,zero,400f638 <altera_avalon_jtag_uart_ioctl+0x38>
 400f62c:	109a80a0 	cmpeqi	r2,r2,27138
 400f630:	1000181e 	bne	r2,zero,400f694 <altera_avalon_jtag_uart_ioctl+0x94>
      rc = 0;
    }
    break;

  default:
    break;
 400f634:	00002906 	br	400f6dc <altera_avalon_jtag_uart_ioctl+0xdc>

  switch (req)
  {
  case TIOCSTIMEOUT:
    /* Set the time to wait until assuming host is not connected */
    if (sp->timeout != INT_MAX)
 400f638:	e0bffd17 	ldw	r2,-12(fp)
 400f63c:	10c00117 	ldw	r3,4(r2)
 400f640:	00a00034 	movhi	r2,32768
 400f644:	10bfffc4 	addi	r2,r2,-1
 400f648:	18802126 	beq	r3,r2,400f6d0 <altera_avalon_jtag_uart_ioctl+0xd0>
    {
      int timeout = *((int *)arg);
 400f64c:	e0bfff17 	ldw	r2,-4(fp)
 400f650:	10800017 	ldw	r2,0(r2)
 400f654:	e0bffc15 	stw	r2,-16(fp)
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
 400f658:	e0bffc17 	ldw	r2,-16(fp)
 400f65c:	10800090 	cmplti	r2,r2,2
 400f660:	1000061e 	bne	r2,zero,400f67c <altera_avalon_jtag_uart_ioctl+0x7c>
 400f664:	e0fffc17 	ldw	r3,-16(fp)
 400f668:	00a00034 	movhi	r2,32768
 400f66c:	10bfffc4 	addi	r2,r2,-1
 400f670:	18800226 	beq	r3,r2,400f67c <altera_avalon_jtag_uart_ioctl+0x7c>
 400f674:	e0bffc17 	ldw	r2,-16(fp)
 400f678:	00000206 	br	400f684 <altera_avalon_jtag_uart_ioctl+0x84>
 400f67c:	00a00034 	movhi	r2,32768
 400f680:	10bfff84 	addi	r2,r2,-2
 400f684:	e0fffd17 	ldw	r3,-12(fp)
 400f688:	18800115 	stw	r2,4(r3)
      rc = 0;
 400f68c:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400f690:	00000f06 	br	400f6d0 <altera_avalon_jtag_uart_ioctl+0xd0>

  case TIOCGCONNECTED:
    /* Find out whether host is connected */
    if (sp->timeout != INT_MAX)
 400f694:	e0bffd17 	ldw	r2,-12(fp)
 400f698:	10c00117 	ldw	r3,4(r2)
 400f69c:	00a00034 	movhi	r2,32768
 400f6a0:	10bfffc4 	addi	r2,r2,-1
 400f6a4:	18800c26 	beq	r3,r2,400f6d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
 400f6a8:	e0bffd17 	ldw	r2,-12(fp)
 400f6ac:	10c00917 	ldw	r3,36(r2)
 400f6b0:	e0bffd17 	ldw	r2,-12(fp)
 400f6b4:	10800117 	ldw	r2,4(r2)
 400f6b8:	1885803a 	cmpltu	r2,r3,r2
 400f6bc:	10c03fcc 	andi	r3,r2,255
 400f6c0:	e0bfff17 	ldw	r2,-4(fp)
 400f6c4:	10c00015 	stw	r3,0(r2)
      rc = 0;
 400f6c8:	e03ffb15 	stw	zero,-20(fp)
    }
    break;
 400f6cc:	00000206 	br	400f6d8 <altera_avalon_jtag_uart_ioctl+0xd8>
    {
      int timeout = *((int *)arg);
      sp->timeout = (timeout >= 2 && timeout < INT_MAX) ? timeout : INT_MAX - 1;
      rc = 0;
    }
    break;
 400f6d0:	0001883a 	nop
 400f6d4:	00000106 	br	400f6dc <altera_avalon_jtag_uart_ioctl+0xdc>
    if (sp->timeout != INT_MAX)
    {
      *((int *)arg) = (sp->host_inactive < sp->timeout) ? 1 : 0;
      rc = 0;
    }
    break;
 400f6d8:	0001883a 	nop

  default:
    break;
  }

  return rc;
 400f6dc:	e0bffb17 	ldw	r2,-20(fp)
}
 400f6e0:	e037883a 	mov	sp,fp
 400f6e4:	df000017 	ldw	fp,0(sp)
 400f6e8:	dec00104 	addi	sp,sp,4
 400f6ec:	f800283a 	ret

0400f6f0 <altera_avalon_jtag_uart_read>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char * buffer, int space, int flags)
{
 400f6f0:	defff304 	addi	sp,sp,-52
 400f6f4:	dfc00c15 	stw	ra,48(sp)
 400f6f8:	df000b15 	stw	fp,44(sp)
 400f6fc:	df000b04 	addi	fp,sp,44
 400f700:	e13ffc15 	stw	r4,-16(fp)
 400f704:	e17ffd15 	stw	r5,-12(fp)
 400f708:	e1bffe15 	stw	r6,-8(fp)
 400f70c:	e1ffff15 	stw	r7,-4(fp)
  char * ptr = buffer;
 400f710:	e0bffd17 	ldw	r2,-12(fp)
 400f714:	e0bff515 	stw	r2,-44(fp)
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400f718:	00004706 	br	400f838 <altera_avalon_jtag_uart_read+0x148>
    unsigned int in, out;

    /* Read as much data as possible */
    do
    {
      in  = sp->rx_in;
 400f71c:	e0bffc17 	ldw	r2,-16(fp)
 400f720:	10800a17 	ldw	r2,40(r2)
 400f724:	e0bff715 	stw	r2,-36(fp)
      out = sp->rx_out;
 400f728:	e0bffc17 	ldw	r2,-16(fp)
 400f72c:	10800b17 	ldw	r2,44(r2)
 400f730:	e0bff815 	stw	r2,-32(fp)

      if (in >= out)
 400f734:	e0fff717 	ldw	r3,-36(fp)
 400f738:	e0bff817 	ldw	r2,-32(fp)
 400f73c:	18800536 	bltu	r3,r2,400f754 <altera_avalon_jtag_uart_read+0x64>
        n = in - out;
 400f740:	e0fff717 	ldw	r3,-36(fp)
 400f744:	e0bff817 	ldw	r2,-32(fp)
 400f748:	1885c83a 	sub	r2,r3,r2
 400f74c:	e0bff615 	stw	r2,-40(fp)
 400f750:	00000406 	br	400f764 <altera_avalon_jtag_uart_read+0x74>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;
 400f754:	00c20004 	movi	r3,2048
 400f758:	e0bff817 	ldw	r2,-32(fp)
 400f75c:	1885c83a 	sub	r2,r3,r2
 400f760:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400f764:	e0bff617 	ldw	r2,-40(fp)
 400f768:	10001e26 	beq	r2,zero,400f7e4 <altera_avalon_jtag_uart_read+0xf4>
        break; /* No more data available */

      if (n > space)
 400f76c:	e0fffe17 	ldw	r3,-8(fp)
 400f770:	e0bff617 	ldw	r2,-40(fp)
 400f774:	1880022e 	bgeu	r3,r2,400f780 <altera_avalon_jtag_uart_read+0x90>
        n = space;
 400f778:	e0bffe17 	ldw	r2,-8(fp)
 400f77c:	e0bff615 	stw	r2,-40(fp)

      memcpy(ptr, sp->rx_buf + out, n);
 400f780:	e0bffc17 	ldw	r2,-16(fp)
 400f784:	10c00e04 	addi	r3,r2,56
 400f788:	e0bff817 	ldw	r2,-32(fp)
 400f78c:	1885883a 	add	r2,r3,r2
 400f790:	e1bff617 	ldw	r6,-40(fp)
 400f794:	100b883a 	mov	r5,r2
 400f798:	e13ff517 	ldw	r4,-44(fp)
 400f79c:	40089b80 	call	40089b8 <memcpy>
      ptr   += n;
 400f7a0:	e0fff517 	ldw	r3,-44(fp)
 400f7a4:	e0bff617 	ldw	r2,-40(fp)
 400f7a8:	1885883a 	add	r2,r3,r2
 400f7ac:	e0bff515 	stw	r2,-44(fp)
      space -= n;
 400f7b0:	e0fffe17 	ldw	r3,-8(fp)
 400f7b4:	e0bff617 	ldw	r2,-40(fp)
 400f7b8:	1885c83a 	sub	r2,r3,r2
 400f7bc:	e0bffe15 	stw	r2,-8(fp)

      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400f7c0:	e0fff817 	ldw	r3,-32(fp)
 400f7c4:	e0bff617 	ldw	r2,-40(fp)
 400f7c8:	1885883a 	add	r2,r3,r2
 400f7cc:	10c1ffcc 	andi	r3,r2,2047
 400f7d0:	e0bffc17 	ldw	r2,-16(fp)
 400f7d4:	10c00b15 	stw	r3,44(r2)
    }
    while (space > 0);
 400f7d8:	e0bffe17 	ldw	r2,-8(fp)
 400f7dc:	00bfcf16 	blt	zero,r2,400f71c <__alt_data_end+0xfc00f71c>
 400f7e0:	00000106 	br	400f7e8 <altera_avalon_jtag_uart_read+0xf8>
        n = in - out;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - out;

      if (n == 0)
        break; /* No more data available */
 400f7e4:	0001883a 	nop
      sp->rx_out = (out + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
 400f7e8:	e0fff517 	ldw	r3,-44(fp)
 400f7ec:	e0bffd17 	ldw	r2,-12(fp)
 400f7f0:	1880141e 	bne	r3,r2,400f844 <altera_avalon_jtag_uart_read+0x154>
      break;

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
 400f7f4:	e0bfff17 	ldw	r2,-4(fp)
 400f7f8:	1090000c 	andi	r2,r2,16384
 400f7fc:	1000131e 	bne	r2,zero,400f84c <altera_avalon_jtag_uart_read+0x15c>
      while (in == sp->rx_in && sp->host_inactive < sp->timeout)
        ;
    }
#else
    /* No OS: Always spin */
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
 400f800:	0001883a 	nop
 400f804:	e0bffc17 	ldw	r2,-16(fp)
 400f808:	10c00a17 	ldw	r3,40(r2)
 400f80c:	e0bff717 	ldw	r2,-36(fp)
 400f810:	1880051e 	bne	r3,r2,400f828 <altera_avalon_jtag_uart_read+0x138>
 400f814:	e0bffc17 	ldw	r2,-16(fp)
 400f818:	10c00917 	ldw	r3,36(r2)
 400f81c:	e0bffc17 	ldw	r2,-16(fp)
 400f820:	10800117 	ldw	r2,4(r2)
 400f824:	18bff736 	bltu	r3,r2,400f804 <__alt_data_end+0xfc00f804>
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
 400f828:	e0bffc17 	ldw	r2,-16(fp)
 400f82c:	10c00a17 	ldw	r3,40(r2)
 400f830:	e0bff717 	ldw	r2,-36(fp)
 400f834:	18800726 	beq	r3,r2,400f854 <altera_avalon_jtag_uart_read+0x164>
   * When running in a multi threaded environment, obtain the "read_lock"
   * semaphore. This ensures that reading from the device is thread-safe.
   */
  ALT_SEM_PEND (sp->read_lock, 0);

  while (space > 0)
 400f838:	e0bffe17 	ldw	r2,-8(fp)
 400f83c:	00bfb716 	blt	zero,r2,400f71c <__alt_data_end+0xfc00f71c>
 400f840:	00000506 	br	400f858 <altera_avalon_jtag_uart_read+0x168>
    }
    while (space > 0);

    /* If we read any data then return it */
    if (ptr != buffer)
      break;
 400f844:	0001883a 	nop
 400f848:	00000306 	br	400f858 <altera_avalon_jtag_uart_read+0x168>

    /* If in non-blocking mode then return error */
    if (flags & O_NONBLOCK)
      break;
 400f84c:	0001883a 	nop
 400f850:	00000106 	br	400f858 <altera_avalon_jtag_uart_read+0x168>
    while (in == sp->rx_in && sp->host_inactive < sp->timeout)
      ;
#endif /* __ucosii__ */

    if (in == sp->rx_in)
      break;
 400f854:	0001883a 	nop
   * semaphore so that other threads can access the buffer.
   */

  ALT_SEM_POST (sp->read_lock);

  if (ptr != buffer)
 400f858:	e0fff517 	ldw	r3,-44(fp)
 400f85c:	e0bffd17 	ldw	r2,-12(fp)
 400f860:	18801826 	beq	r3,r2,400f8c4 <altera_avalon_jtag_uart_read+0x1d4>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400f864:	0005303a 	rdctl	r2,status
 400f868:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400f86c:	e0fffb17 	ldw	r3,-20(fp)
 400f870:	00bfff84 	movi	r2,-2
 400f874:	1884703a 	and	r2,r3,r2
 400f878:	1001703a 	wrctl	status,r2
  
  return context;
 400f87c:	e0bffb17 	ldw	r2,-20(fp)
  {
    /* If we read any data then there is space in the buffer so enable interrupts */
    context = alt_irq_disable_all();
 400f880:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_RE_MSK;
 400f884:	e0bffc17 	ldw	r2,-16(fp)
 400f888:	10800817 	ldw	r2,32(r2)
 400f88c:	10c00054 	ori	r3,r2,1
 400f890:	e0bffc17 	ldw	r2,-16(fp)
 400f894:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400f898:	e0bffc17 	ldw	r2,-16(fp)
 400f89c:	10800017 	ldw	r2,0(r2)
 400f8a0:	10800104 	addi	r2,r2,4
 400f8a4:	1007883a 	mov	r3,r2
 400f8a8:	e0bffc17 	ldw	r2,-16(fp)
 400f8ac:	10800817 	ldw	r2,32(r2)
 400f8b0:	18800035 	stwio	r2,0(r3)
 400f8b4:	e0bffa17 	ldw	r2,-24(fp)
 400f8b8:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400f8bc:	e0bff917 	ldw	r2,-28(fp)
 400f8c0:	1001703a 	wrctl	status,r2
    alt_irq_enable_all(context);
  }

  if (ptr != buffer)
 400f8c4:	e0fff517 	ldw	r3,-44(fp)
 400f8c8:	e0bffd17 	ldw	r2,-12(fp)
 400f8cc:	18800426 	beq	r3,r2,400f8e0 <altera_avalon_jtag_uart_read+0x1f0>
    return ptr - buffer;
 400f8d0:	e0fff517 	ldw	r3,-44(fp)
 400f8d4:	e0bffd17 	ldw	r2,-12(fp)
 400f8d8:	1885c83a 	sub	r2,r3,r2
 400f8dc:	00000606 	br	400f8f8 <altera_avalon_jtag_uart_read+0x208>
  else if (flags & O_NONBLOCK)
 400f8e0:	e0bfff17 	ldw	r2,-4(fp)
 400f8e4:	1090000c 	andi	r2,r2,16384
 400f8e8:	10000226 	beq	r2,zero,400f8f4 <altera_avalon_jtag_uart_read+0x204>
    return -EWOULDBLOCK;
 400f8ec:	00bffd44 	movi	r2,-11
 400f8f0:	00000106 	br	400f8f8 <altera_avalon_jtag_uart_read+0x208>
  else
    return -EIO;
 400f8f4:	00bffec4 	movi	r2,-5
}
 400f8f8:	e037883a 	mov	sp,fp
 400f8fc:	dfc00117 	ldw	ra,4(sp)
 400f900:	df000017 	ldw	fp,0(sp)
 400f904:	dec00204 	addi	sp,sp,8
 400f908:	f800283a 	ret

0400f90c <altera_avalon_jtag_uart_write>:
/* ----------------------------------------------------------- */

int 
altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 400f90c:	defff304 	addi	sp,sp,-52
 400f910:	dfc00c15 	stw	ra,48(sp)
 400f914:	df000b15 	stw	fp,44(sp)
 400f918:	df000b04 	addi	fp,sp,44
 400f91c:	e13ffc15 	stw	r4,-16(fp)
 400f920:	e17ffd15 	stw	r5,-12(fp)
 400f924:	e1bffe15 	stw	r6,-8(fp)
 400f928:	e1ffff15 	stw	r7,-4(fp)
  /* Remove warning at optimisation level 03 by seting out to 0 */
  unsigned int in, out=0;
 400f92c:	e03ff515 	stw	zero,-44(fp)
  unsigned int n;
  alt_irq_context context;

  const char * start = ptr;
 400f930:	e0bffd17 	ldw	r2,-12(fp)
 400f934:	e0bff715 	stw	r2,-36(fp)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400f938:	00003706 	br	400fa18 <altera_avalon_jtag_uart_write+0x10c>
    {
      /* We need a stable value of the out pointer to calculate the space available */
      in  = sp->tx_in;
 400f93c:	e0bffc17 	ldw	r2,-16(fp)
 400f940:	10800c17 	ldw	r2,48(r2)
 400f944:	e0bff915 	stw	r2,-28(fp)
      out = sp->tx_out;
 400f948:	e0bffc17 	ldw	r2,-16(fp)
 400f94c:	10800d17 	ldw	r2,52(r2)
 400f950:	e0bff515 	stw	r2,-44(fp)

      if (in < out)
 400f954:	e0fff917 	ldw	r3,-28(fp)
 400f958:	e0bff517 	ldw	r2,-44(fp)
 400f95c:	1880062e 	bgeu	r3,r2,400f978 <altera_avalon_jtag_uart_write+0x6c>
        n = out - 1 - in;
 400f960:	e0fff517 	ldw	r3,-44(fp)
 400f964:	e0bff917 	ldw	r2,-28(fp)
 400f968:	1885c83a 	sub	r2,r3,r2
 400f96c:	10bfffc4 	addi	r2,r2,-1
 400f970:	e0bff615 	stw	r2,-40(fp)
 400f974:	00000b06 	br	400f9a4 <altera_avalon_jtag_uart_write+0x98>
      else if (out > 0)
 400f978:	e0bff517 	ldw	r2,-44(fp)
 400f97c:	10000526 	beq	r2,zero,400f994 <altera_avalon_jtag_uart_write+0x88>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
 400f980:	00c20004 	movi	r3,2048
 400f984:	e0bff917 	ldw	r2,-28(fp)
 400f988:	1885c83a 	sub	r2,r3,r2
 400f98c:	e0bff615 	stw	r2,-40(fp)
 400f990:	00000406 	br	400f9a4 <altera_avalon_jtag_uart_write+0x98>
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;
 400f994:	00c1ffc4 	movi	r3,2047
 400f998:	e0bff917 	ldw	r2,-28(fp)
 400f99c:	1885c83a 	sub	r2,r3,r2
 400f9a0:	e0bff615 	stw	r2,-40(fp)

      if (n == 0)
 400f9a4:	e0bff617 	ldw	r2,-40(fp)
 400f9a8:	10001e26 	beq	r2,zero,400fa24 <altera_avalon_jtag_uart_write+0x118>
        break;

      if (n > count)
 400f9ac:	e0fffe17 	ldw	r3,-8(fp)
 400f9b0:	e0bff617 	ldw	r2,-40(fp)
 400f9b4:	1880022e 	bgeu	r3,r2,400f9c0 <altera_avalon_jtag_uart_write+0xb4>
        n = count;
 400f9b8:	e0bffe17 	ldw	r2,-8(fp)
 400f9bc:	e0bff615 	stw	r2,-40(fp)

      memcpy(sp->tx_buf + in, ptr, n);
 400f9c0:	e0bffc17 	ldw	r2,-16(fp)
 400f9c4:	10c20e04 	addi	r3,r2,2104
 400f9c8:	e0bff917 	ldw	r2,-28(fp)
 400f9cc:	1885883a 	add	r2,r3,r2
 400f9d0:	e1bff617 	ldw	r6,-40(fp)
 400f9d4:	e17ffd17 	ldw	r5,-12(fp)
 400f9d8:	1009883a 	mov	r4,r2
 400f9dc:	40089b80 	call	40089b8 <memcpy>
      ptr   += n;
 400f9e0:	e0fffd17 	ldw	r3,-12(fp)
 400f9e4:	e0bff617 	ldw	r2,-40(fp)
 400f9e8:	1885883a 	add	r2,r3,r2
 400f9ec:	e0bffd15 	stw	r2,-12(fp)
      count -= n;
 400f9f0:	e0fffe17 	ldw	r3,-8(fp)
 400f9f4:	e0bff617 	ldw	r2,-40(fp)
 400f9f8:	1885c83a 	sub	r2,r3,r2
 400f9fc:	e0bffe15 	stw	r2,-8(fp)

      sp->tx_in = (in + n) % ALTERA_AVALON_JTAG_UART_BUF_LEN;
 400fa00:	e0fff917 	ldw	r3,-28(fp)
 400fa04:	e0bff617 	ldw	r2,-40(fp)
 400fa08:	1885883a 	add	r2,r3,r2
 400fa0c:	10c1ffcc 	andi	r3,r2,2047
 400fa10:	e0bffc17 	ldw	r2,-16(fp)
 400fa14:	10c00c15 	stw	r3,48(r2)
  ALT_SEM_PEND (sp->write_lock, 0);

  do
  {
    /* Copy as much as we can into the transmit buffer */
    while (count > 0)
 400fa18:	e0bffe17 	ldw	r2,-8(fp)
 400fa1c:	00bfc716 	blt	zero,r2,400f93c <__alt_data_end+0xfc00f93c>
 400fa20:	00000106 	br	400fa28 <altera_avalon_jtag_uart_write+0x11c>
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - in;
      else
        n = ALTERA_AVALON_JTAG_UART_BUF_LEN - 1 - in;

      if (n == 0)
        break;
 400fa24:	0001883a 	nop
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fa28:	0005303a 	rdctl	r2,status
 400fa2c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fa30:	e0fffb17 	ldw	r3,-20(fp)
 400fa34:	00bfff84 	movi	r2,-2
 400fa38:	1884703a 	and	r2,r3,r2
 400fa3c:	1001703a 	wrctl	status,r2
  
  return context;
 400fa40:	e0bffb17 	ldw	r2,-20(fp)
     * to enable interrupts if there is no space left in the FIFO
     *
     * For now kick the interrupt routine every time to make it transmit 
     * the data 
     */
    context = alt_irq_disable_all();
 400fa44:	e0bffa15 	stw	r2,-24(fp)
    sp->irq_enable |= ALTERA_AVALON_JTAG_UART_CONTROL_WE_MSK;
 400fa48:	e0bffc17 	ldw	r2,-16(fp)
 400fa4c:	10800817 	ldw	r2,32(r2)
 400fa50:	10c00094 	ori	r3,r2,2
 400fa54:	e0bffc17 	ldw	r2,-16(fp)
 400fa58:	10c00815 	stw	r3,32(r2)
    IOWR_ALTERA_AVALON_JTAG_UART_CONTROL(sp->base, sp->irq_enable);
 400fa5c:	e0bffc17 	ldw	r2,-16(fp)
 400fa60:	10800017 	ldw	r2,0(r2)
 400fa64:	10800104 	addi	r2,r2,4
 400fa68:	1007883a 	mov	r3,r2
 400fa6c:	e0bffc17 	ldw	r2,-16(fp)
 400fa70:	10800817 	ldw	r2,32(r2)
 400fa74:	18800035 	stwio	r2,0(r3)
 400fa78:	e0bffa17 	ldw	r2,-24(fp)
 400fa7c:	e0bff815 	stw	r2,-32(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fa80:	e0bff817 	ldw	r2,-32(fp)
 400fa84:	1001703a 	wrctl	status,r2
    /* 
     * If there is any data left then either return now or block until 
     * some has been sent 
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
 400fa88:	e0bffe17 	ldw	r2,-8(fp)
 400fa8c:	0080100e 	bge	zero,r2,400fad0 <altera_avalon_jtag_uart_write+0x1c4>
    {
      if (flags & O_NONBLOCK)
 400fa90:	e0bfff17 	ldw	r2,-4(fp)
 400fa94:	1090000c 	andi	r2,r2,16384
 400fa98:	1000101e 	bne	r2,zero,400fadc <altera_avalon_jtag_uart_write+0x1d0>
      /*
       * No OS present: Always wait for data to be removed from buffer.  Once
       * the interrupt routine has removed some data then we will be able to
       * insert some more.
       */
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
 400fa9c:	0001883a 	nop
 400faa0:	e0bffc17 	ldw	r2,-16(fp)
 400faa4:	10c00d17 	ldw	r3,52(r2)
 400faa8:	e0bff517 	ldw	r2,-44(fp)
 400faac:	1880051e 	bne	r3,r2,400fac4 <altera_avalon_jtag_uart_write+0x1b8>
 400fab0:	e0bffc17 	ldw	r2,-16(fp)
 400fab4:	10c00917 	ldw	r3,36(r2)
 400fab8:	e0bffc17 	ldw	r2,-16(fp)
 400fabc:	10800117 	ldw	r2,4(r2)
 400fac0:	18bff736 	bltu	r3,r2,400faa0 <__alt_data_end+0xfc00faa0>
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
 400fac4:	e0bffc17 	ldw	r2,-16(fp)
 400fac8:	10800917 	ldw	r2,36(r2)
 400facc:	1000051e 	bne	r2,zero,400fae4 <altera_avalon_jtag_uart_write+0x1d8>
         break;
    }
  }
  while (count > 0);
 400fad0:	e0bffe17 	ldw	r2,-8(fp)
 400fad4:	00bfd016 	blt	zero,r2,400fa18 <__alt_data_end+0xfc00fa18>
 400fad8:	00000306 	br	400fae8 <altera_avalon_jtag_uart_write+0x1dc>
     */
    /* consider: test whether there is anything there while doing this and delay for at most 2s. */
    if (count > 0)
    {
      if (flags & O_NONBLOCK)
        break;
 400fadc:	0001883a 	nop
 400fae0:	00000106 	br	400fae8 <altera_avalon_jtag_uart_write+0x1dc>
      while (out == sp->tx_out && sp->host_inactive < sp->timeout)
        ;
#endif /* __ucosii__ */

      if  (sp->host_inactive)
         break;
 400fae4:	0001883a 	nop
   * Now that access to the circular buffer is complete, release the write
   * semaphore so that other threads can access the buffer.
   */
  ALT_SEM_POST (sp->write_lock);

  if (ptr != start)
 400fae8:	e0fffd17 	ldw	r3,-12(fp)
 400faec:	e0bff717 	ldw	r2,-36(fp)
 400faf0:	18800426 	beq	r3,r2,400fb04 <altera_avalon_jtag_uart_write+0x1f8>
    return ptr - start;
 400faf4:	e0fffd17 	ldw	r3,-12(fp)
 400faf8:	e0bff717 	ldw	r2,-36(fp)
 400fafc:	1885c83a 	sub	r2,r3,r2
 400fb00:	00000606 	br	400fb1c <altera_avalon_jtag_uart_write+0x210>
  else if (flags & O_NONBLOCK)
 400fb04:	e0bfff17 	ldw	r2,-4(fp)
 400fb08:	1090000c 	andi	r2,r2,16384
 400fb0c:	10000226 	beq	r2,zero,400fb18 <altera_avalon_jtag_uart_write+0x20c>
    return -EWOULDBLOCK;
 400fb10:	00bffd44 	movi	r2,-11
 400fb14:	00000106 	br	400fb1c <altera_avalon_jtag_uart_write+0x210>
    sp->tx_out = sp->tx_in = 0;
    return ptr - start + count;
  }
#endif
  else
    return -EIO; /* Host not connected */
 400fb18:	00bffec4 	movi	r2,-5
}
 400fb1c:	e037883a 	mov	sp,fp
 400fb20:	dfc00117 	ldw	ra,4(sp)
 400fb24:	df000017 	ldw	fp,0(sp)
 400fb28:	dec00204 	addi	sp,sp,8
 400fb2c:	f800283a 	ret

0400fb30 <alt_alarm_start>:
 */ 

int alt_alarm_start (alt_alarm* alarm, alt_u32 nticks,
                     alt_u32 (*callback) (void* context),
                     void* context)
{
 400fb30:	defff504 	addi	sp,sp,-44
 400fb34:	df000a15 	stw	fp,40(sp)
 400fb38:	df000a04 	addi	fp,sp,40
 400fb3c:	e13ffc15 	stw	r4,-16(fp)
 400fb40:	e17ffd15 	stw	r5,-12(fp)
 400fb44:	e1bffe15 	stw	r6,-8(fp)
 400fb48:	e1ffff15 	stw	r7,-4(fp)
  alt_irq_context irq_context;
  alt_u32 current_nticks = 0;
 400fb4c:	e03ff615 	stw	zero,-40(fp)
 400fb50:	d0a73817 	ldw	r2,-25376(gp)
  
  if (alt_ticks_per_second ())
 400fb54:	10003c26 	beq	r2,zero,400fc48 <alt_alarm_start+0x118>
  {
    if (alarm)
 400fb58:	e0bffc17 	ldw	r2,-16(fp)
 400fb5c:	10003826 	beq	r2,zero,400fc40 <alt_alarm_start+0x110>
    {
      alarm->callback = callback;
 400fb60:	e0bffc17 	ldw	r2,-16(fp)
 400fb64:	e0fffe17 	ldw	r3,-8(fp)
 400fb68:	10c00315 	stw	r3,12(r2)
      alarm->context  = context;
 400fb6c:	e0bffc17 	ldw	r2,-16(fp)
 400fb70:	e0ffff17 	ldw	r3,-4(fp)
 400fb74:	10c00515 	stw	r3,20(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 400fb78:	0005303a 	rdctl	r2,status
 400fb7c:	e0bff915 	stw	r2,-28(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 400fb80:	e0fff917 	ldw	r3,-28(fp)
 400fb84:	00bfff84 	movi	r2,-2
 400fb88:	1884703a 	and	r2,r3,r2
 400fb8c:	1001703a 	wrctl	status,r2
  
  return context;
 400fb90:	e0bff917 	ldw	r2,-28(fp)
 
      irq_context = alt_irq_disable_all ();
 400fb94:	e0bff815 	stw	r2,-32(fp)
 * alt_nticks() returns the elapsed number of system clock ticks since reset.
 */

static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_nticks (void)
{
  return _alt_nticks;
 400fb98:	d0a73917 	ldw	r2,-25372(gp)
      
      current_nticks = alt_nticks();
 400fb9c:	e0bff615 	stw	r2,-40(fp)
      
      alarm->time = nticks + current_nticks + 1; 
 400fba0:	e0fffd17 	ldw	r3,-12(fp)
 400fba4:	e0bff617 	ldw	r2,-40(fp)
 400fba8:	1885883a 	add	r2,r3,r2
 400fbac:	10c00044 	addi	r3,r2,1
 400fbb0:	e0bffc17 	ldw	r2,-16(fp)
 400fbb4:	10c00215 	stw	r3,8(r2)
      /* 
       * If the desired alarm time causes a roll-over, set the rollover
       * flag. This will prevent the subsequent tick event from causing
       * an alarm too early.
       */
      if(alarm->time < current_nticks)
 400fbb8:	e0bffc17 	ldw	r2,-16(fp)
 400fbbc:	10c00217 	ldw	r3,8(r2)
 400fbc0:	e0bff617 	ldw	r2,-40(fp)
 400fbc4:	1880042e 	bgeu	r3,r2,400fbd8 <alt_alarm_start+0xa8>
      {
        alarm->rollover = 1;
 400fbc8:	e0bffc17 	ldw	r2,-16(fp)
 400fbcc:	00c00044 	movi	r3,1
 400fbd0:	10c00405 	stb	r3,16(r2)
 400fbd4:	00000206 	br	400fbe0 <alt_alarm_start+0xb0>
      }
      else
      {
        alarm->rollover = 0;
 400fbd8:	e0bffc17 	ldw	r2,-16(fp)
 400fbdc:	10000405 	stb	zero,16(r2)
      }
    
      alt_llist_insert (&alt_alarm_list, &alarm->llist);
 400fbe0:	e0bffc17 	ldw	r2,-16(fp)
 400fbe4:	d0e01a04 	addi	r3,gp,-32664
 400fbe8:	e0fffa15 	stw	r3,-24(fp)
 400fbec:	e0bffb15 	stw	r2,-20(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400fbf0:	e0bffb17 	ldw	r2,-20(fp)
 400fbf4:	e0fffa17 	ldw	r3,-24(fp)
 400fbf8:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400fbfc:	e0bffa17 	ldw	r2,-24(fp)
 400fc00:	10c00017 	ldw	r3,0(r2)
 400fc04:	e0bffb17 	ldw	r2,-20(fp)
 400fc08:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400fc0c:	e0bffa17 	ldw	r2,-24(fp)
 400fc10:	10800017 	ldw	r2,0(r2)
 400fc14:	e0fffb17 	ldw	r3,-20(fp)
 400fc18:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400fc1c:	e0bffa17 	ldw	r2,-24(fp)
 400fc20:	e0fffb17 	ldw	r3,-20(fp)
 400fc24:	10c00015 	stw	r3,0(r2)
 400fc28:	e0bff817 	ldw	r2,-32(fp)
 400fc2c:	e0bff715 	stw	r2,-36(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 400fc30:	e0bff717 	ldw	r2,-36(fp)
 400fc34:	1001703a 	wrctl	status,r2
      alt_irq_enable_all (irq_context);

      return 0;
 400fc38:	0005883a 	mov	r2,zero
 400fc3c:	00000306 	br	400fc4c <alt_alarm_start+0x11c>
    }
    else
    {
      return -EINVAL;
 400fc40:	00bffa84 	movi	r2,-22
 400fc44:	00000106 	br	400fc4c <alt_alarm_start+0x11c>
    }
  }
  else
  {
    return -ENOTSUP;
 400fc48:	00bfde84 	movi	r2,-134
  }
}
 400fc4c:	e037883a 	mov	sp,fp
 400fc50:	df000017 	ldw	fp,0(sp)
 400fc54:	dec00104 	addi	sp,sp,4
 400fc58:	f800283a 	ret

0400fc5c <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 400fc5c:	defffa04 	addi	sp,sp,-24
 400fc60:	dfc00515 	stw	ra,20(sp)
 400fc64:	df000415 	stw	fp,16(sp)
 400fc68:	df000404 	addi	fp,sp,16
 400fc6c:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 400fc70:	00800244 	movi	r2,9
 400fc74:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 400fc78:	014003f4 	movhi	r5,15
 400fc7c:	29509004 	addi	r5,r5,16960
 400fc80:	e13ffd17 	ldw	r4,-12(fp)
 400fc84:	40048b00 	call	40048b0 <__mulsi3>
 400fc88:	100b883a 	mov	r5,r2
 400fc8c:	01017db4 	movhi	r4,1526
 400fc90:	21384004 	addi	r4,r4,-7936
 400fc94:	40047f40 	call	40047f4 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 400fc98:	100b883a 	mov	r5,r2
 400fc9c:	01200034 	movhi	r4,32768
 400fca0:	213fffc4 	addi	r4,r4,-1
 400fca4:	40047f40 	call	40047f4 <__udivsi3>
 400fca8:	100b883a 	mov	r5,r2
 400fcac:	e13fff17 	ldw	r4,-4(fp)
 400fcb0:	40047f40 	call	40047f4 <__udivsi3>
 400fcb4:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 400fcb8:	e0bffe17 	ldw	r2,-8(fp)
 400fcbc:	10002a26 	beq	r2,zero,400fd68 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 400fcc0:	e03ffc15 	stw	zero,-16(fp)
 400fcc4:	00001706 	br	400fd24 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 400fcc8:	00a00034 	movhi	r2,32768
 400fccc:	10bfffc4 	addi	r2,r2,-1
 400fcd0:	10bfffc4 	addi	r2,r2,-1
 400fcd4:	103ffe1e 	bne	r2,zero,400fcd0 <__alt_data_end+0xfc00fcd0>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 400fcd8:	014003f4 	movhi	r5,15
 400fcdc:	29509004 	addi	r5,r5,16960
 400fce0:	e13ffd17 	ldw	r4,-12(fp)
 400fce4:	40048b00 	call	40048b0 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 400fce8:	100b883a 	mov	r5,r2
 400fcec:	01017db4 	movhi	r4,1526
 400fcf0:	21384004 	addi	r4,r4,-7936
 400fcf4:	40047f40 	call	40047f4 <__udivsi3>
 400fcf8:	100b883a 	mov	r5,r2
 400fcfc:	01200034 	movhi	r4,32768
 400fd00:	213fffc4 	addi	r4,r4,-1
 400fd04:	40047f40 	call	40047f4 <__udivsi3>
 400fd08:	1007883a 	mov	r3,r2
 400fd0c:	e0bfff17 	ldw	r2,-4(fp)
 400fd10:	10c5c83a 	sub	r2,r2,r3
 400fd14:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 400fd18:	e0bffc17 	ldw	r2,-16(fp)
 400fd1c:	10800044 	addi	r2,r2,1
 400fd20:	e0bffc15 	stw	r2,-16(fp)
 400fd24:	e0fffc17 	ldw	r3,-16(fp)
 400fd28:	e0bffe17 	ldw	r2,-8(fp)
 400fd2c:	18bfe616 	blt	r3,r2,400fcc8 <__alt_data_end+0xfc00fcc8>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 400fd30:	014003f4 	movhi	r5,15
 400fd34:	29509004 	addi	r5,r5,16960
 400fd38:	e13ffd17 	ldw	r4,-12(fp)
 400fd3c:	40048b00 	call	40048b0 <__mulsi3>
 400fd40:	100b883a 	mov	r5,r2
 400fd44:	01017db4 	movhi	r4,1526
 400fd48:	21384004 	addi	r4,r4,-7936
 400fd4c:	40047f40 	call	40047f4 <__udivsi3>
 400fd50:	e17fff17 	ldw	r5,-4(fp)
 400fd54:	1009883a 	mov	r4,r2
 400fd58:	40048b00 	call	40048b0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400fd5c:	10bfffc4 	addi	r2,r2,-1
 400fd60:	103ffe1e 	bne	r2,zero,400fd5c <__alt_data_end+0xfc00fd5c>
 400fd64:	00000d06 	br	400fd9c <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 400fd68:	014003f4 	movhi	r5,15
 400fd6c:	29509004 	addi	r5,r5,16960
 400fd70:	e13ffd17 	ldw	r4,-12(fp)
 400fd74:	40048b00 	call	40048b0 <__mulsi3>
 400fd78:	100b883a 	mov	r5,r2
 400fd7c:	01017db4 	movhi	r4,1526
 400fd80:	21384004 	addi	r4,r4,-7936
 400fd84:	40047f40 	call	40047f4 <__udivsi3>
 400fd88:	e17fff17 	ldw	r5,-4(fp)
 400fd8c:	1009883a 	mov	r4,r2
 400fd90:	40048b00 	call	40048b0 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 400fd94:	10bfffc4 	addi	r2,r2,-1
 400fd98:	00bffe16 	blt	zero,r2,400fd94 <__alt_data_end+0xfc00fd94>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 400fd9c:	0005883a 	mov	r2,zero
}
 400fda0:	e037883a 	mov	sp,fp
 400fda4:	dfc00117 	ldw	ra,4(sp)
 400fda8:	df000017 	ldw	fp,0(sp)
 400fdac:	dec00204 	addi	sp,sp,8
 400fdb0:	f800283a 	ret

0400fdb4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 400fdb4:	deffff04 	addi	sp,sp,-4
 400fdb8:	df000015 	stw	fp,0(sp)
 400fdbc:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 400fdc0:	0001883a 	nop
 400fdc4:	e037883a 	mov	sp,fp
 400fdc8:	df000017 	ldw	fp,0(sp)
 400fdcc:	dec00104 	addi	sp,sp,4
 400fdd0:	f800283a 	ret

0400fdd4 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 400fdd4:	defffe04 	addi	sp,sp,-8
 400fdd8:	dfc00115 	stw	ra,4(sp)
 400fddc:	df000015 	stw	fp,0(sp)
 400fde0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 400fde4:	d0a01717 	ldw	r2,-32676(gp)
 400fde8:	10000326 	beq	r2,zero,400fdf8 <alt_get_errno+0x24>
 400fdec:	d0a01717 	ldw	r2,-32676(gp)
 400fdf0:	103ee83a 	callr	r2
 400fdf4:	00000106 	br	400fdfc <alt_get_errno+0x28>
 400fdf8:	d0a72d04 	addi	r2,gp,-25420
}
 400fdfc:	e037883a 	mov	sp,fp
 400fe00:	dfc00117 	ldw	ra,4(sp)
 400fe04:	df000017 	ldw	fp,0(sp)
 400fe08:	dec00204 	addi	sp,sp,8
 400fe0c:	f800283a 	ret

0400fe10 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
 400fe10:	defffa04 	addi	sp,sp,-24
 400fe14:	dfc00515 	stw	ra,20(sp)
 400fe18:	df000415 	stw	fp,16(sp)
 400fe1c:	df000404 	addi	fp,sp,16
 400fe20:	e13ffe15 	stw	r4,-8(fp)
 400fe24:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
 400fe28:	e0bffe17 	ldw	r2,-8(fp)
 400fe2c:	10000326 	beq	r2,zero,400fe3c <alt_dev_llist_insert+0x2c>
 400fe30:	e0bffe17 	ldw	r2,-8(fp)
 400fe34:	10800217 	ldw	r2,8(r2)
 400fe38:	1000061e 	bne	r2,zero,400fe54 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
 400fe3c:	400fdd40 	call	400fdd4 <alt_get_errno>
 400fe40:	1007883a 	mov	r3,r2
 400fe44:	00800584 	movi	r2,22
 400fe48:	18800015 	stw	r2,0(r3)
    return -EINVAL;
 400fe4c:	00bffa84 	movi	r2,-22
 400fe50:	00001306 	br	400fea0 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
 400fe54:	e0bffe17 	ldw	r2,-8(fp)
 400fe58:	e0ffff17 	ldw	r3,-4(fp)
 400fe5c:	e0fffc15 	stw	r3,-16(fp)
 400fe60:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
 400fe64:	e0bffd17 	ldw	r2,-12(fp)
 400fe68:	e0fffc17 	ldw	r3,-16(fp)
 400fe6c:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
 400fe70:	e0bffc17 	ldw	r2,-16(fp)
 400fe74:	10c00017 	ldw	r3,0(r2)
 400fe78:	e0bffd17 	ldw	r2,-12(fp)
 400fe7c:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
 400fe80:	e0bffc17 	ldw	r2,-16(fp)
 400fe84:	10800017 	ldw	r2,0(r2)
 400fe88:	e0fffd17 	ldw	r3,-12(fp)
 400fe8c:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
 400fe90:	e0bffc17 	ldw	r2,-16(fp)
 400fe94:	e0fffd17 	ldw	r3,-12(fp)
 400fe98:	10c00015 	stw	r3,0(r2)

  return 0;  
 400fe9c:	0005883a 	mov	r2,zero
}
 400fea0:	e037883a 	mov	sp,fp
 400fea4:	dfc00117 	ldw	ra,4(sp)
 400fea8:	df000017 	ldw	fp,0(sp)
 400feac:	dec00204 	addi	sp,sp,8
 400feb0:	f800283a 	ret

0400feb4 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
 400feb4:	defffd04 	addi	sp,sp,-12
 400feb8:	dfc00215 	stw	ra,8(sp)
 400febc:	df000115 	stw	fp,4(sp)
 400fec0:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400fec4:	00810074 	movhi	r2,1025
 400fec8:	10838d04 	addi	r2,r2,3636
 400fecc:	e0bfff15 	stw	r2,-4(fp)
 400fed0:	00000606 	br	400feec <_do_ctors+0x38>
        (*ctor) (); 
 400fed4:	e0bfff17 	ldw	r2,-4(fp)
 400fed8:	10800017 	ldw	r2,0(r2)
 400fedc:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
 400fee0:	e0bfff17 	ldw	r2,-4(fp)
 400fee4:	10bfff04 	addi	r2,r2,-4
 400fee8:	e0bfff15 	stw	r2,-4(fp)
 400feec:	e0ffff17 	ldw	r3,-4(fp)
 400fef0:	00810074 	movhi	r2,1025
 400fef4:	10838e04 	addi	r2,r2,3640
 400fef8:	18bff62e 	bgeu	r3,r2,400fed4 <__alt_data_end+0xfc00fed4>
        (*ctor) (); 
}
 400fefc:	0001883a 	nop
 400ff00:	e037883a 	mov	sp,fp
 400ff04:	dfc00117 	ldw	ra,4(sp)
 400ff08:	df000017 	ldw	fp,0(sp)
 400ff0c:	dec00204 	addi	sp,sp,8
 400ff10:	f800283a 	ret

0400ff14 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
 400ff14:	defffd04 	addi	sp,sp,-12
 400ff18:	dfc00215 	stw	ra,8(sp)
 400ff1c:	df000115 	stw	fp,4(sp)
 400ff20:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400ff24:	00810074 	movhi	r2,1025
 400ff28:	10838d04 	addi	r2,r2,3636
 400ff2c:	e0bfff15 	stw	r2,-4(fp)
 400ff30:	00000606 	br	400ff4c <_do_dtors+0x38>
        (*dtor) (); 
 400ff34:	e0bfff17 	ldw	r2,-4(fp)
 400ff38:	10800017 	ldw	r2,0(r2)
 400ff3c:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
 400ff40:	e0bfff17 	ldw	r2,-4(fp)
 400ff44:	10bfff04 	addi	r2,r2,-4
 400ff48:	e0bfff15 	stw	r2,-4(fp)
 400ff4c:	e0ffff17 	ldw	r3,-4(fp)
 400ff50:	00810074 	movhi	r2,1025
 400ff54:	10838e04 	addi	r2,r2,3640
 400ff58:	18bff62e 	bgeu	r3,r2,400ff34 <__alt_data_end+0xfc00ff34>
        (*dtor) (); 
}
 400ff5c:	0001883a 	nop
 400ff60:	e037883a 	mov	sp,fp
 400ff64:	dfc00117 	ldw	ra,4(sp)
 400ff68:	df000017 	ldw	fp,0(sp)
 400ff6c:	dec00204 	addi	sp,sp,8
 400ff70:	f800283a 	ret

0400ff74 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 400ff74:	deffff04 	addi	sp,sp,-4
 400ff78:	df000015 	stw	fp,0(sp)
 400ff7c:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 400ff80:	0001883a 	nop
 400ff84:	e037883a 	mov	sp,fp
 400ff88:	df000017 	ldw	fp,0(sp)
 400ff8c:	dec00104 	addi	sp,sp,4
 400ff90:	f800283a 	ret

0400ff94 <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 400ff94:	defff904 	addi	sp,sp,-28
 400ff98:	dfc00615 	stw	ra,24(sp)
 400ff9c:	df000515 	stw	fp,20(sp)
 400ffa0:	df000504 	addi	fp,sp,20
 400ffa4:	e13ffc15 	stw	r4,-16(fp)
 400ffa8:	e17ffd15 	stw	r5,-12(fp)
 400ffac:	e1bffe15 	stw	r6,-8(fp)
 400ffb0:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
 400ffb4:	e0800217 	ldw	r2,8(fp)
 400ffb8:	d8800015 	stw	r2,0(sp)
 400ffbc:	e1ffff17 	ldw	r7,-4(fp)
 400ffc0:	e1bffe17 	ldw	r6,-8(fp)
 400ffc4:	e17ffd17 	ldw	r5,-12(fp)
 400ffc8:	e13ffc17 	ldw	r4,-16(fp)
 400ffcc:	40101440 	call	4010144 <alt_iic_isr_register>
}  
 400ffd0:	e037883a 	mov	sp,fp
 400ffd4:	dfc00117 	ldw	ra,4(sp)
 400ffd8:	df000017 	ldw	fp,0(sp)
 400ffdc:	dec00204 	addi	sp,sp,8
 400ffe0:	f800283a 	ret

0400ffe4 <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
 400ffe4:	defff904 	addi	sp,sp,-28
 400ffe8:	df000615 	stw	fp,24(sp)
 400ffec:	df000604 	addi	fp,sp,24
 400fff0:	e13ffe15 	stw	r4,-8(fp)
 400fff4:	e17fff15 	stw	r5,-4(fp)
 400fff8:	e0bfff17 	ldw	r2,-4(fp)
 400fffc:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010000:	0005303a 	rdctl	r2,status
 4010004:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010008:	e0fffb17 	ldw	r3,-20(fp)
 401000c:	00bfff84 	movi	r2,-2
 4010010:	1884703a 	and	r2,r3,r2
 4010014:	1001703a 	wrctl	status,r2
  
  return context;
 4010018:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 401001c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
 4010020:	00c00044 	movi	r3,1
 4010024:	e0bffa17 	ldw	r2,-24(fp)
 4010028:	1884983a 	sll	r2,r3,r2
 401002c:	1007883a 	mov	r3,r2
 4010030:	d0a73717 	ldw	r2,-25380(gp)
 4010034:	1884b03a 	or	r2,r3,r2
 4010038:	d0a73715 	stw	r2,-25380(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 401003c:	d0a73717 	ldw	r2,-25380(gp)
 4010040:	100170fa 	wrctl	ienable,r2
 4010044:	e0bffc17 	ldw	r2,-16(fp)
 4010048:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 401004c:	e0bffd17 	ldw	r2,-12(fp)
 4010050:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 4010054:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
 4010058:	0001883a 	nop
}
 401005c:	e037883a 	mov	sp,fp
 4010060:	df000017 	ldw	fp,0(sp)
 4010064:	dec00104 	addi	sp,sp,4
 4010068:	f800283a 	ret

0401006c <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
 401006c:	defff904 	addi	sp,sp,-28
 4010070:	df000615 	stw	fp,24(sp)
 4010074:	df000604 	addi	fp,sp,24
 4010078:	e13ffe15 	stw	r4,-8(fp)
 401007c:	e17fff15 	stw	r5,-4(fp)
 4010080:	e0bfff17 	ldw	r2,-4(fp)
 4010084:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010088:	0005303a 	rdctl	r2,status
 401008c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010090:	e0fffb17 	ldw	r3,-20(fp)
 4010094:	00bfff84 	movi	r2,-2
 4010098:	1884703a 	and	r2,r3,r2
 401009c:	1001703a 	wrctl	status,r2
  
  return context;
 40100a0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
 40100a4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
 40100a8:	00c00044 	movi	r3,1
 40100ac:	e0bffa17 	ldw	r2,-24(fp)
 40100b0:	1884983a 	sll	r2,r3,r2
 40100b4:	0084303a 	nor	r2,zero,r2
 40100b8:	1007883a 	mov	r3,r2
 40100bc:	d0a73717 	ldw	r2,-25380(gp)
 40100c0:	1884703a 	and	r2,r3,r2
 40100c4:	d0a73715 	stw	r2,-25380(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
 40100c8:	d0a73717 	ldw	r2,-25380(gp)
 40100cc:	100170fa 	wrctl	ienable,r2
 40100d0:	e0bffc17 	ldw	r2,-16(fp)
 40100d4:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 40100d8:	e0bffd17 	ldw	r2,-12(fp)
 40100dc:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
 40100e0:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
 40100e4:	0001883a 	nop
}
 40100e8:	e037883a 	mov	sp,fp
 40100ec:	df000017 	ldw	fp,0(sp)
 40100f0:	dec00104 	addi	sp,sp,4
 40100f4:	f800283a 	ret

040100f8 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
 40100f8:	defffc04 	addi	sp,sp,-16
 40100fc:	df000315 	stw	fp,12(sp)
 4010100:	df000304 	addi	fp,sp,12
 4010104:	e13ffe15 	stw	r4,-8(fp)
 4010108:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
 401010c:	000530fa 	rdctl	r2,ienable
 4010110:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
 4010114:	00c00044 	movi	r3,1
 4010118:	e0bfff17 	ldw	r2,-4(fp)
 401011c:	1884983a 	sll	r2,r3,r2
 4010120:	1007883a 	mov	r3,r2
 4010124:	e0bffd17 	ldw	r2,-12(fp)
 4010128:	1884703a 	and	r2,r3,r2
 401012c:	1004c03a 	cmpne	r2,r2,zero
 4010130:	10803fcc 	andi	r2,r2,255
}
 4010134:	e037883a 	mov	sp,fp
 4010138:	df000017 	ldw	fp,0(sp)
 401013c:	dec00104 	addi	sp,sp,4
 4010140:	f800283a 	ret

04010144 <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
 4010144:	defff504 	addi	sp,sp,-44
 4010148:	dfc00a15 	stw	ra,40(sp)
 401014c:	df000915 	stw	fp,36(sp)
 4010150:	df000904 	addi	fp,sp,36
 4010154:	e13ffc15 	stw	r4,-16(fp)
 4010158:	e17ffd15 	stw	r5,-12(fp)
 401015c:	e1bffe15 	stw	r6,-8(fp)
 4010160:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
 4010164:	00bffa84 	movi	r2,-22
 4010168:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
 401016c:	e0bffd17 	ldw	r2,-12(fp)
 4010170:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
 4010174:	e0bff817 	ldw	r2,-32(fp)
 4010178:	10800808 	cmpgei	r2,r2,32
 401017c:	1000271e 	bne	r2,zero,401021c <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010180:	0005303a 	rdctl	r2,status
 4010184:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010188:	e0fffb17 	ldw	r3,-20(fp)
 401018c:	00bfff84 	movi	r2,-2
 4010190:	1884703a 	and	r2,r3,r2
 4010194:	1001703a 	wrctl	status,r2
  
  return context;
 4010198:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
 401019c:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
 40101a0:	008101b4 	movhi	r2,1030
 40101a4:	10bf8a04 	addi	r2,r2,-472
 40101a8:	e0fff817 	ldw	r3,-32(fp)
 40101ac:	180690fa 	slli	r3,r3,3
 40101b0:	10c5883a 	add	r2,r2,r3
 40101b4:	e0fffe17 	ldw	r3,-8(fp)
 40101b8:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
 40101bc:	008101b4 	movhi	r2,1030
 40101c0:	10bf8a04 	addi	r2,r2,-472
 40101c4:	e0fff817 	ldw	r3,-32(fp)
 40101c8:	180690fa 	slli	r3,r3,3
 40101cc:	10c5883a 	add	r2,r2,r3
 40101d0:	10800104 	addi	r2,r2,4
 40101d4:	e0ffff17 	ldw	r3,-4(fp)
 40101d8:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
 40101dc:	e0bffe17 	ldw	r2,-8(fp)
 40101e0:	10000526 	beq	r2,zero,40101f8 <alt_iic_isr_register+0xb4>
 40101e4:	e0bff817 	ldw	r2,-32(fp)
 40101e8:	100b883a 	mov	r5,r2
 40101ec:	e13ffc17 	ldw	r4,-16(fp)
 40101f0:	400ffe40 	call	400ffe4 <alt_ic_irq_enable>
 40101f4:	00000406 	br	4010208 <alt_iic_isr_register+0xc4>
 40101f8:	e0bff817 	ldw	r2,-32(fp)
 40101fc:	100b883a 	mov	r5,r2
 4010200:	e13ffc17 	ldw	r4,-16(fp)
 4010204:	401006c0 	call	401006c <alt_ic_irq_disable>
 4010208:	e0bff715 	stw	r2,-36(fp)
 401020c:	e0bffa17 	ldw	r2,-24(fp)
 4010210:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010214:	e0bff917 	ldw	r2,-28(fp)
 4010218:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
 401021c:	e0bff717 	ldw	r2,-36(fp)
}
 4010220:	e037883a 	mov	sp,fp
 4010224:	dfc00117 	ldw	ra,4(sp)
 4010228:	df000017 	ldw	fp,0(sp)
 401022c:	dec00204 	addi	sp,sp,8
 4010230:	f800283a 	ret

04010234 <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
 4010234:	defff804 	addi	sp,sp,-32
 4010238:	dfc00715 	stw	ra,28(sp)
 401023c:	df000615 	stw	fp,24(sp)
 4010240:	dc000515 	stw	r16,20(sp)
 4010244:	df000604 	addi	fp,sp,24
 4010248:	e13ffb15 	stw	r4,-20(fp)
 401024c:	e17ffc15 	stw	r5,-16(fp)
 4010250:	e1bffd15 	stw	r6,-12(fp)
 4010254:	e1fffe15 	stw	r7,-8(fp)
  int old;

  old = open (name, flags, mode);
 4010258:	e1bffe17 	ldw	r6,-8(fp)
 401025c:	e17ffd17 	ldw	r5,-12(fp)
 4010260:	e13ffc17 	ldw	r4,-16(fp)
 4010264:	40104bc0 	call	40104bc <open>
 4010268:	e0bffa15 	stw	r2,-24(fp)

  if (old >= 0)
 401026c:	e0bffa17 	ldw	r2,-24(fp)
 4010270:	10002216 	blt	r2,zero,40102fc <alt_open_fd+0xc8>
  {
    fd->dev      = alt_fd_list[old].dev;
 4010274:	04010074 	movhi	r16,1025
 4010278:	84078404 	addi	r16,r16,7696
 401027c:	e0bffa17 	ldw	r2,-24(fp)
 4010280:	01400304 	movi	r5,12
 4010284:	1009883a 	mov	r4,r2
 4010288:	40048b00 	call	40048b0 <__mulsi3>
 401028c:	8085883a 	add	r2,r16,r2
 4010290:	10c00017 	ldw	r3,0(r2)
 4010294:	e0bffb17 	ldw	r2,-20(fp)
 4010298:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
 401029c:	04010074 	movhi	r16,1025
 40102a0:	84078404 	addi	r16,r16,7696
 40102a4:	e0bffa17 	ldw	r2,-24(fp)
 40102a8:	01400304 	movi	r5,12
 40102ac:	1009883a 	mov	r4,r2
 40102b0:	40048b00 	call	40048b0 <__mulsi3>
 40102b4:	8085883a 	add	r2,r16,r2
 40102b8:	10800104 	addi	r2,r2,4
 40102bc:	10c00017 	ldw	r3,0(r2)
 40102c0:	e0bffb17 	ldw	r2,-20(fp)
 40102c4:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
 40102c8:	04010074 	movhi	r16,1025
 40102cc:	84078404 	addi	r16,r16,7696
 40102d0:	e0bffa17 	ldw	r2,-24(fp)
 40102d4:	01400304 	movi	r5,12
 40102d8:	1009883a 	mov	r4,r2
 40102dc:	40048b00 	call	40048b0 <__mulsi3>
 40102e0:	8085883a 	add	r2,r16,r2
 40102e4:	10800204 	addi	r2,r2,8
 40102e8:	10c00017 	ldw	r3,0(r2)
 40102ec:	e0bffb17 	ldw	r2,-20(fp)
 40102f0:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
 40102f4:	e13ffa17 	ldw	r4,-24(fp)
 40102f8:	400eae40 	call	400eae4 <alt_release_fd>
  }
} 
 40102fc:	0001883a 	nop
 4010300:	e6ffff04 	addi	sp,fp,-4
 4010304:	dfc00217 	ldw	ra,8(sp)
 4010308:	df000117 	ldw	fp,4(sp)
 401030c:	dc000017 	ldw	r16,0(sp)
 4010310:	dec00304 	addi	sp,sp,12
 4010314:	f800283a 	ret

04010318 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
 4010318:	defffb04 	addi	sp,sp,-20
 401031c:	dfc00415 	stw	ra,16(sp)
 4010320:	df000315 	stw	fp,12(sp)
 4010324:	df000304 	addi	fp,sp,12
 4010328:	e13ffd15 	stw	r4,-12(fp)
 401032c:	e17ffe15 	stw	r5,-8(fp)
 4010330:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
 4010334:	01c07fc4 	movi	r7,511
 4010338:	01800044 	movi	r6,1
 401033c:	e17ffd17 	ldw	r5,-12(fp)
 4010340:	01010074 	movhi	r4,1025
 4010344:	21078704 	addi	r4,r4,7708
 4010348:	40102340 	call	4010234 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
 401034c:	01c07fc4 	movi	r7,511
 4010350:	000d883a 	mov	r6,zero
 4010354:	e17ffe17 	ldw	r5,-8(fp)
 4010358:	01010074 	movhi	r4,1025
 401035c:	21078404 	addi	r4,r4,7696
 4010360:	40102340 	call	4010234 <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
 4010364:	01c07fc4 	movi	r7,511
 4010368:	01800044 	movi	r6,1
 401036c:	e17fff17 	ldw	r5,-4(fp)
 4010370:	01010074 	movhi	r4,1025
 4010374:	21078a04 	addi	r4,r4,7720
 4010378:	40102340 	call	4010234 <alt_open_fd>
}  
 401037c:	0001883a 	nop
 4010380:	e037883a 	mov	sp,fp
 4010384:	dfc00117 	ldw	ra,4(sp)
 4010388:	df000017 	ldw	fp,0(sp)
 401038c:	dec00204 	addi	sp,sp,8
 4010390:	f800283a 	ret

04010394 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 4010394:	defffe04 	addi	sp,sp,-8
 4010398:	dfc00115 	stw	ra,4(sp)
 401039c:	df000015 	stw	fp,0(sp)
 40103a0:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 40103a4:	d0a01717 	ldw	r2,-32676(gp)
 40103a8:	10000326 	beq	r2,zero,40103b8 <alt_get_errno+0x24>
 40103ac:	d0a01717 	ldw	r2,-32676(gp)
 40103b0:	103ee83a 	callr	r2
 40103b4:	00000106 	br	40103bc <alt_get_errno+0x28>
 40103b8:	d0a72d04 	addi	r2,gp,-25420
}
 40103bc:	e037883a 	mov	sp,fp
 40103c0:	dfc00117 	ldw	ra,4(sp)
 40103c4:	df000017 	ldw	fp,0(sp)
 40103c8:	dec00204 	addi	sp,sp,8
 40103cc:	f800283a 	ret

040103d0 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
 40103d0:	defffb04 	addi	sp,sp,-20
 40103d4:	dfc00415 	stw	ra,16(sp)
 40103d8:	df000315 	stw	fp,12(sp)
 40103dc:	dc000215 	stw	r16,8(sp)
 40103e0:	df000304 	addi	fp,sp,12
 40103e4:	e13ffe15 	stw	r4,-8(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
 40103e8:	e0bffe17 	ldw	r2,-8(fp)
 40103ec:	10800217 	ldw	r2,8(r2)
 40103f0:	10d00034 	orhi	r3,r2,16384
 40103f4:	e0bffe17 	ldw	r2,-8(fp)
 40103f8:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 40103fc:	e03ffd15 	stw	zero,-12(fp)
 4010400:	00002306 	br	4010490 <alt_file_locked+0xc0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4010404:	04010074 	movhi	r16,1025
 4010408:	84078404 	addi	r16,r16,7696
 401040c:	e0bffd17 	ldw	r2,-12(fp)
 4010410:	01400304 	movi	r5,12
 4010414:	1009883a 	mov	r4,r2
 4010418:	40048b00 	call	40048b0 <__mulsi3>
 401041c:	8085883a 	add	r2,r16,r2
 4010420:	10c00017 	ldw	r3,0(r2)
 4010424:	e0bffe17 	ldw	r2,-8(fp)
 4010428:	10800017 	ldw	r2,0(r2)
 401042c:	1880151e 	bne	r3,r2,4010484 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4010430:	04010074 	movhi	r16,1025
 4010434:	84078404 	addi	r16,r16,7696
 4010438:	e0bffd17 	ldw	r2,-12(fp)
 401043c:	01400304 	movi	r5,12
 4010440:	1009883a 	mov	r4,r2
 4010444:	40048b00 	call	40048b0 <__mulsi3>
 4010448:	8085883a 	add	r2,r16,r2
 401044c:	10800204 	addi	r2,r2,8
 4010450:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
 4010454:	10000b0e 	bge	r2,zero,4010484 <alt_file_locked+0xb4>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
 4010458:	01400304 	movi	r5,12
 401045c:	e13ffd17 	ldw	r4,-12(fp)
 4010460:	40048b00 	call	40048b0 <__mulsi3>
 4010464:	1007883a 	mov	r3,r2
 4010468:	00810074 	movhi	r2,1025
 401046c:	10878404 	addi	r2,r2,7696
 4010470:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
 4010474:	e0bffe17 	ldw	r2,-8(fp)
 4010478:	18800226 	beq	r3,r2,4010484 <alt_file_locked+0xb4>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
 401047c:	00bffcc4 	movi	r2,-13
 4010480:	00000806 	br	40104a4 <alt_file_locked+0xd4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
 4010484:	e0bffd17 	ldw	r2,-12(fp)
 4010488:	10800044 	addi	r2,r2,1
 401048c:	e0bffd15 	stw	r2,-12(fp)
 4010490:	d0a01617 	ldw	r2,-32680(gp)
 4010494:	1007883a 	mov	r3,r2
 4010498:	e0bffd17 	ldw	r2,-12(fp)
 401049c:	18bfd92e 	bgeu	r3,r2,4010404 <__alt_data_end+0xfc010404>
    }
  }
  
  /* The device is not locked */
 
  return 0;
 40104a0:	0005883a 	mov	r2,zero
}
 40104a4:	e6ffff04 	addi	sp,fp,-4
 40104a8:	dfc00217 	ldw	ra,8(sp)
 40104ac:	df000117 	ldw	fp,4(sp)
 40104b0:	dc000017 	ldw	r16,0(sp)
 40104b4:	dec00304 	addi	sp,sp,12
 40104b8:	f800283a 	ret

040104bc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
 40104bc:	defff604 	addi	sp,sp,-40
 40104c0:	dfc00915 	stw	ra,36(sp)
 40104c4:	df000815 	stw	fp,32(sp)
 40104c8:	df000804 	addi	fp,sp,32
 40104cc:	e13ffd15 	stw	r4,-12(fp)
 40104d0:	e17ffe15 	stw	r5,-8(fp)
 40104d4:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
 40104d8:	00bfffc4 	movi	r2,-1
 40104dc:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
 40104e0:	00bffb44 	movi	r2,-19
 40104e4:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
 40104e8:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
 40104ec:	d1601404 	addi	r5,gp,-32688
 40104f0:	e13ffd17 	ldw	r4,-12(fp)
 40104f4:	40107e00 	call	40107e0 <alt_find_dev>
 40104f8:	e0bff815 	stw	r2,-32(fp)
 40104fc:	e0bff817 	ldw	r2,-32(fp)
 4010500:	1000051e 	bne	r2,zero,4010518 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
 4010504:	e13ffd17 	ldw	r4,-12(fp)
 4010508:	40108700 	call	4010870 <alt_find_file>
 401050c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
 4010510:	00800044 	movi	r2,1
 4010514:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
 4010518:	e0bff817 	ldw	r2,-32(fp)
 401051c:	10002b26 	beq	r2,zero,40105cc <open+0x110>
  {
    if ((index = alt_get_fd (dev)) < 0)
 4010520:	e13ff817 	ldw	r4,-32(fp)
 4010524:	40109780 	call	4010978 <alt_get_fd>
 4010528:	e0bff915 	stw	r2,-28(fp)
 401052c:	e0bff917 	ldw	r2,-28(fp)
 4010530:	1000030e 	bge	r2,zero,4010540 <open+0x84>
    {
      status = index;
 4010534:	e0bff917 	ldw	r2,-28(fp)
 4010538:	e0bffa15 	stw	r2,-24(fp)
 401053c:	00002506 	br	40105d4 <open+0x118>
    }
    else
    {
      fd = &alt_fd_list[index];
 4010540:	01400304 	movi	r5,12
 4010544:	e13ff917 	ldw	r4,-28(fp)
 4010548:	40048b00 	call	40048b0 <__mulsi3>
 401054c:	1007883a 	mov	r3,r2
 4010550:	00810074 	movhi	r2,1025
 4010554:	10878404 	addi	r2,r2,7696
 4010558:	1885883a 	add	r2,r3,r2
 401055c:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
 4010560:	e0fffe17 	ldw	r3,-8(fp)
 4010564:	00900034 	movhi	r2,16384
 4010568:	10bfffc4 	addi	r2,r2,-1
 401056c:	1886703a 	and	r3,r3,r2
 4010570:	e0bffc17 	ldw	r2,-16(fp)
 4010574:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
 4010578:	e0bffb17 	ldw	r2,-20(fp)
 401057c:	1000051e 	bne	r2,zero,4010594 <open+0xd8>
 4010580:	e13ffc17 	ldw	r4,-16(fp)
 4010584:	40103d00 	call	40103d0 <alt_file_locked>
 4010588:	e0bffa15 	stw	r2,-24(fp)
 401058c:	e0bffa17 	ldw	r2,-24(fp)
 4010590:	10001016 	blt	r2,zero,40105d4 <open+0x118>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
 4010594:	e0bff817 	ldw	r2,-32(fp)
 4010598:	10800317 	ldw	r2,12(r2)
 401059c:	10000826 	beq	r2,zero,40105c0 <open+0x104>
 40105a0:	e0bff817 	ldw	r2,-32(fp)
 40105a4:	10800317 	ldw	r2,12(r2)
 40105a8:	e1ffff17 	ldw	r7,-4(fp)
 40105ac:	e1bffe17 	ldw	r6,-8(fp)
 40105b0:	e17ffd17 	ldw	r5,-12(fp)
 40105b4:	e13ffc17 	ldw	r4,-16(fp)
 40105b8:	103ee83a 	callr	r2
 40105bc:	00000106 	br	40105c4 <open+0x108>
 40105c0:	0005883a 	mov	r2,zero
 40105c4:	e0bffa15 	stw	r2,-24(fp)
 40105c8:	00000206 	br	40105d4 <open+0x118>
      }
    }
  }
  else
  {
    status = -ENODEV;
 40105cc:	00bffb44 	movi	r2,-19
 40105d0:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
 40105d4:	e0bffa17 	ldw	r2,-24(fp)
 40105d8:	1000090e 	bge	r2,zero,4010600 <open+0x144>
  {
    alt_release_fd (index);  
 40105dc:	e13ff917 	ldw	r4,-28(fp)
 40105e0:	400eae40 	call	400eae4 <alt_release_fd>
    ALT_ERRNO = -status;
 40105e4:	40103940 	call	4010394 <alt_get_errno>
 40105e8:	1007883a 	mov	r3,r2
 40105ec:	e0bffa17 	ldw	r2,-24(fp)
 40105f0:	0085c83a 	sub	r2,zero,r2
 40105f4:	18800015 	stw	r2,0(r3)
    return -1;
 40105f8:	00bfffc4 	movi	r2,-1
 40105fc:	00000106 	br	4010604 <open+0x148>
  }
  
  /* return the reference upon success */

  return index;
 4010600:	e0bff917 	ldw	r2,-28(fp)
}
 4010604:	e037883a 	mov	sp,fp
 4010608:	dfc00117 	ldw	ra,4(sp)
 401060c:	df000017 	ldw	fp,0(sp)
 4010610:	dec00204 	addi	sp,sp,8
 4010614:	f800283a 	ret

04010618 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
 4010618:	defffa04 	addi	sp,sp,-24
 401061c:	df000515 	stw	fp,20(sp)
 4010620:	df000504 	addi	fp,sp,20
 4010624:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
 4010628:	0005303a 	rdctl	r2,status
 401062c:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
 4010630:	e0fffc17 	ldw	r3,-16(fp)
 4010634:	00bfff84 	movi	r2,-2
 4010638:	1884703a 	and	r2,r3,r2
 401063c:	1001703a 	wrctl	status,r2
  
  return context;
 4010640:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
 4010644:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
 4010648:	e0bfff17 	ldw	r2,-4(fp)
 401064c:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
 4010650:	e0bffd17 	ldw	r2,-12(fp)
 4010654:	10800017 	ldw	r2,0(r2)
 4010658:	e0fffd17 	ldw	r3,-12(fp)
 401065c:	18c00117 	ldw	r3,4(r3)
 4010660:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
 4010664:	e0bffd17 	ldw	r2,-12(fp)
 4010668:	10800117 	ldw	r2,4(r2)
 401066c:	e0fffd17 	ldw	r3,-12(fp)
 4010670:	18c00017 	ldw	r3,0(r3)
 4010674:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
 4010678:	e0bffd17 	ldw	r2,-12(fp)
 401067c:	e0fffd17 	ldw	r3,-12(fp)
 4010680:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
 4010684:	e0bffd17 	ldw	r2,-12(fp)
 4010688:	e0fffd17 	ldw	r3,-12(fp)
 401068c:	10c00015 	stw	r3,0(r2)
 4010690:	e0bffb17 	ldw	r2,-20(fp)
 4010694:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
 4010698:	e0bffe17 	ldw	r2,-8(fp)
 401069c:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
 40106a0:	0001883a 	nop
 40106a4:	e037883a 	mov	sp,fp
 40106a8:	df000017 	ldw	fp,0(sp)
 40106ac:	dec00104 	addi	sp,sp,4
 40106b0:	f800283a 	ret

040106b4 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
 40106b4:	defffb04 	addi	sp,sp,-20
 40106b8:	dfc00415 	stw	ra,16(sp)
 40106bc:	df000315 	stw	fp,12(sp)
 40106c0:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
 40106c4:	d0a01a17 	ldw	r2,-32664(gp)
 40106c8:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
 40106cc:	d0a73917 	ldw	r2,-25372(gp)
 40106d0:	10800044 	addi	r2,r2,1
 40106d4:	d0a73915 	stw	r2,-25372(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 40106d8:	00002e06 	br	4010794 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
 40106dc:	e0bffd17 	ldw	r2,-12(fp)
 40106e0:	10800017 	ldw	r2,0(r2)
 40106e4:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
 40106e8:	e0bffd17 	ldw	r2,-12(fp)
 40106ec:	10800403 	ldbu	r2,16(r2)
 40106f0:	10803fcc 	andi	r2,r2,255
 40106f4:	10000426 	beq	r2,zero,4010708 <alt_tick+0x54>
 40106f8:	d0a73917 	ldw	r2,-25372(gp)
 40106fc:	1000021e 	bne	r2,zero,4010708 <alt_tick+0x54>
    {
      alarm->rollover = 0;
 4010700:	e0bffd17 	ldw	r2,-12(fp)
 4010704:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
 4010708:	e0bffd17 	ldw	r2,-12(fp)
 401070c:	10800217 	ldw	r2,8(r2)
 4010710:	d0e73917 	ldw	r3,-25372(gp)
 4010714:	18801d36 	bltu	r3,r2,401078c <alt_tick+0xd8>
 4010718:	e0bffd17 	ldw	r2,-12(fp)
 401071c:	10800403 	ldbu	r2,16(r2)
 4010720:	10803fcc 	andi	r2,r2,255
 4010724:	1000191e 	bne	r2,zero,401078c <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
 4010728:	e0bffd17 	ldw	r2,-12(fp)
 401072c:	10800317 	ldw	r2,12(r2)
 4010730:	e0fffd17 	ldw	r3,-12(fp)
 4010734:	18c00517 	ldw	r3,20(r3)
 4010738:	1809883a 	mov	r4,r3
 401073c:	103ee83a 	callr	r2
 4010740:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
 4010744:	e0bfff17 	ldw	r2,-4(fp)
 4010748:	1000031e 	bne	r2,zero,4010758 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
 401074c:	e13ffd17 	ldw	r4,-12(fp)
 4010750:	40106180 	call	4010618 <alt_alarm_stop>
 4010754:	00000d06 	br	401078c <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
 4010758:	e0bffd17 	ldw	r2,-12(fp)
 401075c:	10c00217 	ldw	r3,8(r2)
 4010760:	e0bfff17 	ldw	r2,-4(fp)
 4010764:	1887883a 	add	r3,r3,r2
 4010768:	e0bffd17 	ldw	r2,-12(fp)
 401076c:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
 4010770:	e0bffd17 	ldw	r2,-12(fp)
 4010774:	10c00217 	ldw	r3,8(r2)
 4010778:	d0a73917 	ldw	r2,-25372(gp)
 401077c:	1880032e 	bgeu	r3,r2,401078c <alt_tick+0xd8>
        {
          alarm->rollover = 1;
 4010780:	e0bffd17 	ldw	r2,-12(fp)
 4010784:	00c00044 	movi	r3,1
 4010788:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
 401078c:	e0bffe17 	ldw	r2,-8(fp)
 4010790:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
 4010794:	e0fffd17 	ldw	r3,-12(fp)
 4010798:	d0a01a04 	addi	r2,gp,-32664
 401079c:	18bfcf1e 	bne	r3,r2,40106dc <__alt_data_end+0xfc0106dc>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
 40107a0:	0001883a 	nop
}
 40107a4:	0001883a 	nop
 40107a8:	e037883a 	mov	sp,fp
 40107ac:	dfc00117 	ldw	ra,4(sp)
 40107b0:	df000017 	ldw	fp,0(sp)
 40107b4:	dec00204 	addi	sp,sp,8
 40107b8:	f800283a 	ret

040107bc <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
 40107bc:	deffff04 	addi	sp,sp,-4
 40107c0:	df000015 	stw	fp,0(sp)
 40107c4:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 40107c8:	000170fa 	wrctl	ienable,zero
}
 40107cc:	0001883a 	nop
 40107d0:	e037883a 	mov	sp,fp
 40107d4:	df000017 	ldw	fp,0(sp)
 40107d8:	dec00104 	addi	sp,sp,4
 40107dc:	f800283a 	ret

040107e0 <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
 40107e0:	defffa04 	addi	sp,sp,-24
 40107e4:	dfc00515 	stw	ra,20(sp)
 40107e8:	df000415 	stw	fp,16(sp)
 40107ec:	df000404 	addi	fp,sp,16
 40107f0:	e13ffe15 	stw	r4,-8(fp)
 40107f4:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
 40107f8:	e0bfff17 	ldw	r2,-4(fp)
 40107fc:	10800017 	ldw	r2,0(r2)
 4010800:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
 4010804:	e13ffe17 	ldw	r4,-8(fp)
 4010808:	400cf400 	call	400cf40 <strlen>
 401080c:	10800044 	addi	r2,r2,1
 4010810:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 4010814:	00000d06 	br	401084c <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
 4010818:	e0bffc17 	ldw	r2,-16(fp)
 401081c:	10800217 	ldw	r2,8(r2)
 4010820:	e0fffd17 	ldw	r3,-12(fp)
 4010824:	180d883a 	mov	r6,r3
 4010828:	e17ffe17 	ldw	r5,-8(fp)
 401082c:	1009883a 	mov	r4,r2
 4010830:	4010b240 	call	4010b24 <memcmp>
 4010834:	1000021e 	bne	r2,zero,4010840 <alt_find_dev+0x60>
    {
      /* match found */

      return next;
 4010838:	e0bffc17 	ldw	r2,-16(fp)
 401083c:	00000706 	br	401085c <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
 4010840:	e0bffc17 	ldw	r2,-16(fp)
 4010844:	10800017 	ldw	r2,0(r2)
 4010848:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
 401084c:	e0fffc17 	ldw	r3,-16(fp)
 4010850:	e0bfff17 	ldw	r2,-4(fp)
 4010854:	18bff01e 	bne	r3,r2,4010818 <__alt_data_end+0xfc010818>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
 4010858:	0005883a 	mov	r2,zero
}
 401085c:	e037883a 	mov	sp,fp
 4010860:	dfc00117 	ldw	ra,4(sp)
 4010864:	df000017 	ldw	fp,0(sp)
 4010868:	dec00204 	addi	sp,sp,8
 401086c:	f800283a 	ret

04010870 <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
 4010870:	defffb04 	addi	sp,sp,-20
 4010874:	dfc00415 	stw	ra,16(sp)
 4010878:	df000315 	stw	fp,12(sp)
 401087c:	df000304 	addi	fp,sp,12
 4010880:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
 4010884:	d0a01217 	ldw	r2,-32696(gp)
 4010888:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 401088c:	00003106 	br	4010954 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
 4010890:	e0bffd17 	ldw	r2,-12(fp)
 4010894:	10800217 	ldw	r2,8(r2)
 4010898:	1009883a 	mov	r4,r2
 401089c:	400cf400 	call	400cf40 <strlen>
 40108a0:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
 40108a4:	e0bffd17 	ldw	r2,-12(fp)
 40108a8:	10c00217 	ldw	r3,8(r2)
 40108ac:	e0bffe17 	ldw	r2,-8(fp)
 40108b0:	10bfffc4 	addi	r2,r2,-1
 40108b4:	1885883a 	add	r2,r3,r2
 40108b8:	10800003 	ldbu	r2,0(r2)
 40108bc:	10803fcc 	andi	r2,r2,255
 40108c0:	1080201c 	xori	r2,r2,128
 40108c4:	10bfe004 	addi	r2,r2,-128
 40108c8:	10800bd8 	cmpnei	r2,r2,47
 40108cc:	1000031e 	bne	r2,zero,40108dc <alt_find_file+0x6c>
    {
      len -= 1;
 40108d0:	e0bffe17 	ldw	r2,-8(fp)
 40108d4:	10bfffc4 	addi	r2,r2,-1
 40108d8:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 40108dc:	e0bffe17 	ldw	r2,-8(fp)
 40108e0:	e0ffff17 	ldw	r3,-4(fp)
 40108e4:	1885883a 	add	r2,r3,r2
 40108e8:	10800003 	ldbu	r2,0(r2)
 40108ec:	10803fcc 	andi	r2,r2,255
 40108f0:	1080201c 	xori	r2,r2,128
 40108f4:	10bfe004 	addi	r2,r2,-128
 40108f8:	10800be0 	cmpeqi	r2,r2,47
 40108fc:	1000081e 	bne	r2,zero,4010920 <alt_find_file+0xb0>
 4010900:	e0bffe17 	ldw	r2,-8(fp)
 4010904:	e0ffff17 	ldw	r3,-4(fp)
 4010908:	1885883a 	add	r2,r3,r2
 401090c:	10800003 	ldbu	r2,0(r2)
 4010910:	10803fcc 	andi	r2,r2,255
 4010914:	1080201c 	xori	r2,r2,128
 4010918:	10bfe004 	addi	r2,r2,-128
 401091c:	10000a1e 	bne	r2,zero,4010948 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
 4010920:	e0bffd17 	ldw	r2,-12(fp)
 4010924:	10800217 	ldw	r2,8(r2)
 4010928:	e0fffe17 	ldw	r3,-8(fp)
 401092c:	180d883a 	mov	r6,r3
 4010930:	e17fff17 	ldw	r5,-4(fp)
 4010934:	1009883a 	mov	r4,r2
 4010938:	4010b240 	call	4010b24 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
 401093c:	1000021e 	bne	r2,zero,4010948 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
 4010940:	e0bffd17 	ldw	r2,-12(fp)
 4010944:	00000706 	br	4010964 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
 4010948:	e0bffd17 	ldw	r2,-12(fp)
 401094c:	10800017 	ldw	r2,0(r2)
 4010950:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
 4010954:	e0fffd17 	ldw	r3,-12(fp)
 4010958:	d0a01204 	addi	r2,gp,-32696
 401095c:	18bfcc1e 	bne	r3,r2,4010890 <__alt_data_end+0xfc010890>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
 4010960:	0005883a 	mov	r2,zero
}
 4010964:	e037883a 	mov	sp,fp
 4010968:	dfc00117 	ldw	ra,4(sp)
 401096c:	df000017 	ldw	fp,0(sp)
 4010970:	dec00204 	addi	sp,sp,8
 4010974:	f800283a 	ret

04010978 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
 4010978:	defffa04 	addi	sp,sp,-24
 401097c:	dfc00515 	stw	ra,20(sp)
 4010980:	df000415 	stw	fp,16(sp)
 4010984:	dc000315 	stw	r16,12(sp)
 4010988:	df000404 	addi	fp,sp,16
 401098c:	e13ffe15 	stw	r4,-8(fp)
  alt_32 i;
  int rc = -EMFILE;
 4010990:	00bffa04 	movi	r2,-24
 4010994:	e0bffd15 	stw	r2,-12(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4010998:	e03ffc15 	stw	zero,-16(fp)
 401099c:	00001d06 	br	4010a14 <alt_get_fd+0x9c>
  {
    if (!alt_fd_list[i].dev)
 40109a0:	04010074 	movhi	r16,1025
 40109a4:	84078404 	addi	r16,r16,7696
 40109a8:	e0bffc17 	ldw	r2,-16(fp)
 40109ac:	01400304 	movi	r5,12
 40109b0:	1009883a 	mov	r4,r2
 40109b4:	40048b00 	call	40048b0 <__mulsi3>
 40109b8:	8085883a 	add	r2,r16,r2
 40109bc:	10800017 	ldw	r2,0(r2)
 40109c0:	1000111e 	bne	r2,zero,4010a08 <alt_get_fd+0x90>
    {
      alt_fd_list[i].dev = dev;
 40109c4:	04010074 	movhi	r16,1025
 40109c8:	84078404 	addi	r16,r16,7696
 40109cc:	e0bffc17 	ldw	r2,-16(fp)
 40109d0:	01400304 	movi	r5,12
 40109d4:	1009883a 	mov	r4,r2
 40109d8:	40048b00 	call	40048b0 <__mulsi3>
 40109dc:	8085883a 	add	r2,r16,r2
 40109e0:	e0fffe17 	ldw	r3,-8(fp)
 40109e4:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
 40109e8:	d0e01617 	ldw	r3,-32680(gp)
 40109ec:	e0bffc17 	ldw	r2,-16(fp)
 40109f0:	1880020e 	bge	r3,r2,40109fc <alt_get_fd+0x84>
      {
        alt_max_fd = i;
 40109f4:	e0bffc17 	ldw	r2,-16(fp)
 40109f8:	d0a01615 	stw	r2,-32680(gp)
      }
      rc = i;
 40109fc:	e0bffc17 	ldw	r2,-16(fp)
 4010a00:	e0bffd15 	stw	r2,-12(fp)
      goto alt_get_fd_exit;
 4010a04:	00000606 	br	4010a20 <alt_get_fd+0xa8>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
 4010a08:	e0bffc17 	ldw	r2,-16(fp)
 4010a0c:	10800044 	addi	r2,r2,1
 4010a10:	e0bffc15 	stw	r2,-16(fp)
 4010a14:	e0bffc17 	ldw	r2,-16(fp)
 4010a18:	10800810 	cmplti	r2,r2,32
 4010a1c:	103fe01e 	bne	r2,zero,40109a0 <__alt_data_end+0xfc0109a0>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
 4010a20:	e0bffd17 	ldw	r2,-12(fp)
}
 4010a24:	e6ffff04 	addi	sp,fp,-4
 4010a28:	dfc00217 	ldw	ra,8(sp)
 4010a2c:	df000117 	ldw	fp,4(sp)
 4010a30:	dc000017 	ldw	r16,0(sp)
 4010a34:	dec00304 	addi	sp,sp,12
 4010a38:	f800283a 	ret

04010a3c <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
 4010a3c:	defffe04 	addi	sp,sp,-8
 4010a40:	df000115 	stw	fp,4(sp)
 4010a44:	df000104 	addi	fp,sp,4
 4010a48:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
 4010a4c:	e0bfff17 	ldw	r2,-4(fp)
 4010a50:	10bffe84 	addi	r2,r2,-6
 4010a54:	10c00428 	cmpgeui	r3,r2,16
 4010a58:	18001a1e 	bne	r3,zero,4010ac4 <alt_exception_cause_generated_bad_addr+0x88>
 4010a5c:	100690ba 	slli	r3,r2,2
 4010a60:	00810074 	movhi	r2,1025
 4010a64:	10829d04 	addi	r2,r2,2676
 4010a68:	1885883a 	add	r2,r3,r2
 4010a6c:	10800017 	ldw	r2,0(r2)
 4010a70:	1000683a 	jmp	r2
 4010a74:	04010ab4 	movhi	r16,1066
 4010a78:	04010ab4 	movhi	r16,1066
 4010a7c:	04010ac4 	movi	r16,1067
 4010a80:	04010ac4 	movi	r16,1067
 4010a84:	04010ac4 	movi	r16,1067
 4010a88:	04010ab4 	movhi	r16,1066
 4010a8c:	04010abc 	xorhi	r16,zero,1066
 4010a90:	04010ac4 	movi	r16,1067
 4010a94:	04010ab4 	movhi	r16,1066
 4010a98:	04010ab4 	movhi	r16,1066
 4010a9c:	04010ac4 	movi	r16,1067
 4010aa0:	04010ab4 	movhi	r16,1066
 4010aa4:	04010abc 	xorhi	r16,zero,1066
 4010aa8:	04010ac4 	movi	r16,1067
 4010aac:	04010ac4 	movi	r16,1067
 4010ab0:	04010ab4 	movhi	r16,1066
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
 4010ab4:	00800044 	movi	r2,1
 4010ab8:	00000306 	br	4010ac8 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
 4010abc:	0005883a 	mov	r2,zero
 4010ac0:	00000106 	br	4010ac8 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
 4010ac4:	0005883a 	mov	r2,zero
  }
}
 4010ac8:	e037883a 	mov	sp,fp
 4010acc:	df000017 	ldw	fp,0(sp)
 4010ad0:	dec00104 	addi	sp,sp,4
 4010ad4:	f800283a 	ret

04010ad8 <atexit>:
 4010ad8:	200b883a 	mov	r5,r4
 4010adc:	000f883a 	mov	r7,zero
 4010ae0:	000d883a 	mov	r6,zero
 4010ae4:	0009883a 	mov	r4,zero
 4010ae8:	4010ba01 	jmpi	4010ba0 <__register_exitproc>

04010aec <exit>:
 4010aec:	defffe04 	addi	sp,sp,-8
 4010af0:	000b883a 	mov	r5,zero
 4010af4:	dc000015 	stw	r16,0(sp)
 4010af8:	dfc00115 	stw	ra,4(sp)
 4010afc:	2021883a 	mov	r16,r4
 4010b00:	4010cb80 	call	4010cb8 <__call_exitprocs>
 4010b04:	00810074 	movhi	r2,1025
 4010b08:	108c1f04 	addi	r2,r2,12412
 4010b0c:	11000017 	ldw	r4,0(r2)
 4010b10:	20800f17 	ldw	r2,60(r4)
 4010b14:	10000126 	beq	r2,zero,4010b1c <exit+0x30>
 4010b18:	103ee83a 	callr	r2
 4010b1c:	8009883a 	mov	r4,r16
 4010b20:	400e3400 	call	400e340 <_exit>

04010b24 <memcmp>:
 4010b24:	01c000c4 	movi	r7,3
 4010b28:	3980192e 	bgeu	r7,r6,4010b90 <memcmp+0x6c>
 4010b2c:	2144b03a 	or	r2,r4,r5
 4010b30:	11c4703a 	and	r2,r2,r7
 4010b34:	10000f26 	beq	r2,zero,4010b74 <memcmp+0x50>
 4010b38:	20800003 	ldbu	r2,0(r4)
 4010b3c:	28c00003 	ldbu	r3,0(r5)
 4010b40:	10c0151e 	bne	r2,r3,4010b98 <memcmp+0x74>
 4010b44:	31bfff84 	addi	r6,r6,-2
 4010b48:	01ffffc4 	movi	r7,-1
 4010b4c:	00000406 	br	4010b60 <memcmp+0x3c>
 4010b50:	20800003 	ldbu	r2,0(r4)
 4010b54:	28c00003 	ldbu	r3,0(r5)
 4010b58:	31bfffc4 	addi	r6,r6,-1
 4010b5c:	10c00e1e 	bne	r2,r3,4010b98 <memcmp+0x74>
 4010b60:	21000044 	addi	r4,r4,1
 4010b64:	29400044 	addi	r5,r5,1
 4010b68:	31fff91e 	bne	r6,r7,4010b50 <__alt_data_end+0xfc010b50>
 4010b6c:	0005883a 	mov	r2,zero
 4010b70:	f800283a 	ret
 4010b74:	20c00017 	ldw	r3,0(r4)
 4010b78:	28800017 	ldw	r2,0(r5)
 4010b7c:	18bfee1e 	bne	r3,r2,4010b38 <__alt_data_end+0xfc010b38>
 4010b80:	31bfff04 	addi	r6,r6,-4
 4010b84:	21000104 	addi	r4,r4,4
 4010b88:	29400104 	addi	r5,r5,4
 4010b8c:	39bff936 	bltu	r7,r6,4010b74 <__alt_data_end+0xfc010b74>
 4010b90:	303fe91e 	bne	r6,zero,4010b38 <__alt_data_end+0xfc010b38>
 4010b94:	003ff506 	br	4010b6c <__alt_data_end+0xfc010b6c>
 4010b98:	10c5c83a 	sub	r2,r2,r3
 4010b9c:	f800283a 	ret

04010ba0 <__register_exitproc>:
 4010ba0:	defffa04 	addi	sp,sp,-24
 4010ba4:	dc000315 	stw	r16,12(sp)
 4010ba8:	04010074 	movhi	r16,1025
 4010bac:	840c1f04 	addi	r16,r16,12412
 4010bb0:	80c00017 	ldw	r3,0(r16)
 4010bb4:	dc400415 	stw	r17,16(sp)
 4010bb8:	dfc00515 	stw	ra,20(sp)
 4010bbc:	18805217 	ldw	r2,328(r3)
 4010bc0:	2023883a 	mov	r17,r4
 4010bc4:	10003726 	beq	r2,zero,4010ca4 <__register_exitproc+0x104>
 4010bc8:	10c00117 	ldw	r3,4(r2)
 4010bcc:	010007c4 	movi	r4,31
 4010bd0:	20c00e16 	blt	r4,r3,4010c0c <__register_exitproc+0x6c>
 4010bd4:	1a000044 	addi	r8,r3,1
 4010bd8:	8800221e 	bne	r17,zero,4010c64 <__register_exitproc+0xc4>
 4010bdc:	18c00084 	addi	r3,r3,2
 4010be0:	18c7883a 	add	r3,r3,r3
 4010be4:	18c7883a 	add	r3,r3,r3
 4010be8:	12000115 	stw	r8,4(r2)
 4010bec:	10c7883a 	add	r3,r2,r3
 4010bf0:	19400015 	stw	r5,0(r3)
 4010bf4:	0005883a 	mov	r2,zero
 4010bf8:	dfc00517 	ldw	ra,20(sp)
 4010bfc:	dc400417 	ldw	r17,16(sp)
 4010c00:	dc000317 	ldw	r16,12(sp)
 4010c04:	dec00604 	addi	sp,sp,24
 4010c08:	f800283a 	ret
 4010c0c:	00800034 	movhi	r2,0
 4010c10:	10800004 	addi	r2,r2,0
 4010c14:	10002626 	beq	r2,zero,4010cb0 <__register_exitproc+0x110>
 4010c18:	01006404 	movi	r4,400
 4010c1c:	d9400015 	stw	r5,0(sp)
 4010c20:	d9800115 	stw	r6,4(sp)
 4010c24:	d9c00215 	stw	r7,8(sp)
 4010c28:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4010c2c:	d9400017 	ldw	r5,0(sp)
 4010c30:	d9800117 	ldw	r6,4(sp)
 4010c34:	d9c00217 	ldw	r7,8(sp)
 4010c38:	10001d26 	beq	r2,zero,4010cb0 <__register_exitproc+0x110>
 4010c3c:	81000017 	ldw	r4,0(r16)
 4010c40:	10000115 	stw	zero,4(r2)
 4010c44:	02000044 	movi	r8,1
 4010c48:	22405217 	ldw	r9,328(r4)
 4010c4c:	0007883a 	mov	r3,zero
 4010c50:	12400015 	stw	r9,0(r2)
 4010c54:	20805215 	stw	r2,328(r4)
 4010c58:	10006215 	stw	zero,392(r2)
 4010c5c:	10006315 	stw	zero,396(r2)
 4010c60:	883fde26 	beq	r17,zero,4010bdc <__alt_data_end+0xfc010bdc>
 4010c64:	18c9883a 	add	r4,r3,r3
 4010c68:	2109883a 	add	r4,r4,r4
 4010c6c:	1109883a 	add	r4,r2,r4
 4010c70:	21802215 	stw	r6,136(r4)
 4010c74:	01800044 	movi	r6,1
 4010c78:	12406217 	ldw	r9,392(r2)
 4010c7c:	30cc983a 	sll	r6,r6,r3
 4010c80:	4992b03a 	or	r9,r9,r6
 4010c84:	12406215 	stw	r9,392(r2)
 4010c88:	21c04215 	stw	r7,264(r4)
 4010c8c:	01000084 	movi	r4,2
 4010c90:	893fd21e 	bne	r17,r4,4010bdc <__alt_data_end+0xfc010bdc>
 4010c94:	11006317 	ldw	r4,396(r2)
 4010c98:	218cb03a 	or	r6,r4,r6
 4010c9c:	11806315 	stw	r6,396(r2)
 4010ca0:	003fce06 	br	4010bdc <__alt_data_end+0xfc010bdc>
 4010ca4:	18805304 	addi	r2,r3,332
 4010ca8:	18805215 	stw	r2,328(r3)
 4010cac:	003fc606 	br	4010bc8 <__alt_data_end+0xfc010bc8>
 4010cb0:	00bfffc4 	movi	r2,-1
 4010cb4:	003fd006 	br	4010bf8 <__alt_data_end+0xfc010bf8>

04010cb8 <__call_exitprocs>:
 4010cb8:	defff504 	addi	sp,sp,-44
 4010cbc:	df000915 	stw	fp,36(sp)
 4010cc0:	dd400615 	stw	r21,24(sp)
 4010cc4:	dc800315 	stw	r18,12(sp)
 4010cc8:	dfc00a15 	stw	ra,40(sp)
 4010ccc:	ddc00815 	stw	r23,32(sp)
 4010cd0:	dd800715 	stw	r22,28(sp)
 4010cd4:	dd000515 	stw	r20,20(sp)
 4010cd8:	dcc00415 	stw	r19,16(sp)
 4010cdc:	dc400215 	stw	r17,8(sp)
 4010ce0:	dc000115 	stw	r16,4(sp)
 4010ce4:	d9000015 	stw	r4,0(sp)
 4010ce8:	2839883a 	mov	fp,r5
 4010cec:	04800044 	movi	r18,1
 4010cf0:	057fffc4 	movi	r21,-1
 4010cf4:	00810074 	movhi	r2,1025
 4010cf8:	108c1f04 	addi	r2,r2,12412
 4010cfc:	12000017 	ldw	r8,0(r2)
 4010d00:	45005217 	ldw	r20,328(r8)
 4010d04:	44c05204 	addi	r19,r8,328
 4010d08:	a0001c26 	beq	r20,zero,4010d7c <__call_exitprocs+0xc4>
 4010d0c:	a0800117 	ldw	r2,4(r20)
 4010d10:	15ffffc4 	addi	r23,r2,-1
 4010d14:	b8000d16 	blt	r23,zero,4010d4c <__call_exitprocs+0x94>
 4010d18:	14000044 	addi	r16,r2,1
 4010d1c:	8421883a 	add	r16,r16,r16
 4010d20:	8421883a 	add	r16,r16,r16
 4010d24:	84402004 	addi	r17,r16,128
 4010d28:	a463883a 	add	r17,r20,r17
 4010d2c:	a421883a 	add	r16,r20,r16
 4010d30:	e0001e26 	beq	fp,zero,4010dac <__call_exitprocs+0xf4>
 4010d34:	80804017 	ldw	r2,256(r16)
 4010d38:	e0801c26 	beq	fp,r2,4010dac <__call_exitprocs+0xf4>
 4010d3c:	bdffffc4 	addi	r23,r23,-1
 4010d40:	843fff04 	addi	r16,r16,-4
 4010d44:	8c7fff04 	addi	r17,r17,-4
 4010d48:	bd7ff91e 	bne	r23,r21,4010d30 <__alt_data_end+0xfc010d30>
 4010d4c:	00800034 	movhi	r2,0
 4010d50:	10800004 	addi	r2,r2,0
 4010d54:	10000926 	beq	r2,zero,4010d7c <__call_exitprocs+0xc4>
 4010d58:	a0800117 	ldw	r2,4(r20)
 4010d5c:	1000301e 	bne	r2,zero,4010e20 <__call_exitprocs+0x168>
 4010d60:	a0800017 	ldw	r2,0(r20)
 4010d64:	10003226 	beq	r2,zero,4010e30 <__call_exitprocs+0x178>
 4010d68:	a009883a 	mov	r4,r20
 4010d6c:	98800015 	stw	r2,0(r19)
 4010d70:	00000000 	call	0 <__alt_mem_sdram-0x4000000>
 4010d74:	9d000017 	ldw	r20,0(r19)
 4010d78:	a03fe41e 	bne	r20,zero,4010d0c <__alt_data_end+0xfc010d0c>
 4010d7c:	dfc00a17 	ldw	ra,40(sp)
 4010d80:	df000917 	ldw	fp,36(sp)
 4010d84:	ddc00817 	ldw	r23,32(sp)
 4010d88:	dd800717 	ldw	r22,28(sp)
 4010d8c:	dd400617 	ldw	r21,24(sp)
 4010d90:	dd000517 	ldw	r20,20(sp)
 4010d94:	dcc00417 	ldw	r19,16(sp)
 4010d98:	dc800317 	ldw	r18,12(sp)
 4010d9c:	dc400217 	ldw	r17,8(sp)
 4010da0:	dc000117 	ldw	r16,4(sp)
 4010da4:	dec00b04 	addi	sp,sp,44
 4010da8:	f800283a 	ret
 4010dac:	a0800117 	ldw	r2,4(r20)
 4010db0:	80c00017 	ldw	r3,0(r16)
 4010db4:	10bfffc4 	addi	r2,r2,-1
 4010db8:	15c01426 	beq	r2,r23,4010e0c <__call_exitprocs+0x154>
 4010dbc:	80000015 	stw	zero,0(r16)
 4010dc0:	183fde26 	beq	r3,zero,4010d3c <__alt_data_end+0xfc010d3c>
 4010dc4:	95c8983a 	sll	r4,r18,r23
 4010dc8:	a0806217 	ldw	r2,392(r20)
 4010dcc:	a5800117 	ldw	r22,4(r20)
 4010dd0:	2084703a 	and	r2,r4,r2
 4010dd4:	10000b26 	beq	r2,zero,4010e04 <__call_exitprocs+0x14c>
 4010dd8:	a0806317 	ldw	r2,396(r20)
 4010ddc:	2088703a 	and	r4,r4,r2
 4010de0:	20000c1e 	bne	r4,zero,4010e14 <__call_exitprocs+0x15c>
 4010de4:	89400017 	ldw	r5,0(r17)
 4010de8:	d9000017 	ldw	r4,0(sp)
 4010dec:	183ee83a 	callr	r3
 4010df0:	a0800117 	ldw	r2,4(r20)
 4010df4:	15bfbf1e 	bne	r2,r22,4010cf4 <__alt_data_end+0xfc010cf4>
 4010df8:	98800017 	ldw	r2,0(r19)
 4010dfc:	153fcf26 	beq	r2,r20,4010d3c <__alt_data_end+0xfc010d3c>
 4010e00:	003fbc06 	br	4010cf4 <__alt_data_end+0xfc010cf4>
 4010e04:	183ee83a 	callr	r3
 4010e08:	003ff906 	br	4010df0 <__alt_data_end+0xfc010df0>
 4010e0c:	a5c00115 	stw	r23,4(r20)
 4010e10:	003feb06 	br	4010dc0 <__alt_data_end+0xfc010dc0>
 4010e14:	89000017 	ldw	r4,0(r17)
 4010e18:	183ee83a 	callr	r3
 4010e1c:	003ff406 	br	4010df0 <__alt_data_end+0xfc010df0>
 4010e20:	a0800017 	ldw	r2,0(r20)
 4010e24:	a027883a 	mov	r19,r20
 4010e28:	1029883a 	mov	r20,r2
 4010e2c:	003fb606 	br	4010d08 <__alt_data_end+0xfc010d08>
 4010e30:	0005883a 	mov	r2,zero
 4010e34:	003ffb06 	br	4010e24 <__alt_data_end+0xfc010e24>
